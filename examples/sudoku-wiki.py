#!/usr/bin/env python3
import copy
import sys
import os
import logging

# Let me import demystify from one directory up
sys.path.append(os.path.dirname(os.path.dirname(os.path.realpath(__file__))))
import demystify
import demystify.base
import demystify.internal
import demystify.MUS
import demystify.solve
import demystify.prettyprint
import buildpuz

logging.basicConfig(
    level=logging.DEBUG, format="%(levelname)s:%(name)s:%(message)s"
#    level=logging.INFO, format="%(levelname)s:%(name)s:%(relativeCreated)d:%(message)s"
)


import pysolvers

#assert pysolvers.glucose41_set_argc(["-rnd-init", "-no-gr", "-rnd-freq=1"])

demystify.config.LoadConfigFromDict({"cores": 12, "smallRepeats": 2, "repeats": 10, "prechopMUSes": True})

def doSingleStep(domains, targets = None):
    # Make a matrix of variables (we can make more than one)
    vars = demystify.base.VarMatrix(
        lambda t: (t[0] + 1, t[1] + 1), (9, 9), range(1, 9 + 1)
    )

    # Build the puzzle (we can pass multiple matrices, depending on the puzzle)
    puz = demystify.base.Puzzle([vars])
    puz.addConstraints(buildpuz.basicSudoku(vars))

    solver = demystify.internal.Solver(puz)

    # Now, let's get an actual Sudoku!


    baselits = []
    for (i,row) in enumerate(domains):
        for (j,cell) in enumerate(row):
            assert len(cell) > 0
            if len(cell) == 1:
                baselits.append(demystify.base.EqVal(vars[i][j], cell[0]))
            for d in range(1, 9+1):
                if d not in cell:
                    baselits.append(demystify.base.NeqVal(vars[i][j], d))

    for l in baselits:
        solver.addLit(l)

    sol = solver.solve(getsol=True)

    if targets is None:
        targets = [p for p in sol if p not in baselits]
    else:
        targets = [demystify.base.NeqVal(vars[i][j], d) for ((i,j),d) in targets]

    MUS = demystify.MUS.CascadeMUSFinder(solver)

    trace = demystify.solve.html_solve(sys.stdout, solver, targets, MUS, steps=1)

    print("Minitrace: ", [(s, mins[0], len(mins)) for (s, mins) in trace])

    logging.info("Finished")
    logging.info("Full Trace %s", trace)

# https://www.sudokuwiki.org/X_Wing_Strategy
#sudokudoms = [[[1],[3,7,8],[3,7],[2,3,4,7,8],[2,7,8],[2,3,4,7,8],[5],[6],[9]],[[4],[9],[2],[3,7],[5],[6],[1],[3,7],[8]],[[3,7,8],[5],[6],[1],[7,8],[9],[2],[4],[3,7]],[[3,5,7],[3,7],[9],[6],[4],[2,7],[8],[2,5],[1]],[[5,7],[6],[4],[2,7,8,9],[1],[2,7,8],[3,7,9],[2,5],[3,7]],[[2],[1],[8],[7,9],[3],[5],[6],[7,9],[4]],[[3,7,8],[4],[3,7],[5],[2,7,8,9],[2,3,7,8],[3,7,9],[1],[6]],[[9],[3,7,8],[5],[3,7,8],[6],[1],[4],[3,7,8],[2]],[[6],[2],[1],[3,4,7,8],[7,8,9],[3,4,7,8],[3,7,9],[3,7,8,9],[5]]]

if False:
  for solvername in ["cd", "g3", "g4", "lgl", "mcb", "mcm", "mpl", "mc", "m22", "mgh"]:
    demystify.config.LoadConfigFromDict(
    {
        "solver": solvername, "solveLimited": False
    })
    sudokudoms = [[[1],[3,7,8],[3,7],[2,3,4,7,8],[2,7,8],[2,3,4,7,8],[5],[6],[9]],[[4],[9],[2],[3,7],[5],[6],[1],[3,7],[8]],[[3,7,8],[5],[6],[1],[7,8],[9],[2],[4],[3,7]],[[3,5,7],[3,7],[9],[6],[4],[2,7],[8],[2,5],[1]],[[5,7],[6],[4],[2,7,8,9],[1],[2,7,8],[3,7,9],[2,5],[3,7]],[[2],[1],[8],[1,2,3,4,5,7,9],[3],[5],[6],[1,2,3,4,5,7,9],[4]],[[3,7,8],[4],[3,7],[5],[2,7,8,9],[2,3,7,8],[3,7,9],[1],[6]],[[9],[3,7,8],[5],[3,7,8],[6],[1],[4],[3,7,8],[2]],[[6],[2],[1],[3,4,7,8],[7,8,9],[3,4,7,8],[3,7,9],[3,7,8,9],[5]]]
    print("<hr><h2>X_Wing_Strategy 1A {}</h2>".format(solvername))
    doSingleStep(sudokudoms,[((0,3),7)])

    sudokudoms = [[[1],[3,7,8],[3,7],[2,3,4,7,8],[2,7,8],[2,3,4,7,8],[5],[6],[9]],[[4],[9],[2],[3,7],[5],[6],[1],[3,7],[8]],[[3,7,8],[5],[6],[1],[7,8],[9],[2],[4],[3,7]],[[3,5,7],[3,7],[9],[6],[4],[2,7],[8],[2,5],[1]],[[5,7],[6],[4],[2,7,8,9],[1],[2,7,8],[3,7,9],[2,5],[3,7]],[[2],[1],[8],[7,9],[3],[5],[6],[7,9],[4]],[[3,7,8],[4],[3,7],[5],[2,7,8,9],[2,3,7,8],[3,7,9],[1],[6]],[[9],[3,7,8],[5],[3,7,8],[6],[1],[4],[3,7,8],[2]],[[6],[2],[1],[3,4,7,8],[7,8,9],[3,4,7,8],[3,7,9],[3,7,8,9],[5]]]
    print("<hr><h2>X_Wing_Strategy 1B {}</h2>".format(solvername))
    doSingleStep(sudokudoms,[((0,3),7)])

#sys.exit(0)

sudokudoms = [[[1],[3,7,8],[3,7],[2,3,4,7,8],[2,7,8],[2,3,4,7,8],[5],[6],[9]],[[4],[9],[2],[3,7],[5],[6],[1],[3,7],[8]],[[3,7,8],[5],[6],[1],[7,8],[9],[2],[4],[3,7]],[[3,5,7],[3,7],[9],[6],[4],[2,7],[8],[2,5],[1]],[[5,7],[6],[4],[2,7,8,9],[1],[2,7,8],[3,7,9],[2,5],[3,7]],[[2],[1],[8],[1,2,3,4,5,7,9],[3],[5],[6],[1,2,3,4,5,7,9],[4]],[[3,7,8],[4],[3,7],[5],[2,7,8,9],[2,3,7,8],[3,7,9],[1],[6]],[[9],[3,7,8],[5],[3,7,8],[6],[1],[4],[3,7,8],[2]],[[6],[2],[1],[3,4,7,8],[7,8,9],[3,4,7,8],[3,7,9],[3,7,8,9],[5]]]
print("<hr><h2>X_Wing_Strategy 1A</h2>")
doSingleStep(sudokudoms,[((0,3),7)])


sudokudoms = [[[1],[3,7,8],[3,7],[2,3,4,7,8],[2,7,8],[2,3,4,7,8],[5],[6],[9]],[[4],[9],[2],[3,7],[5],[6],[1],[3,7],[8]],[[3,7,8],[5],[6],[1],[7,8],[9],[2],[4],[3,7]],[[3,5,7],[3,7],[9],[6],[4],[2,7],[8],[2,5],[1]],[[5,7],[6],[4],[2,7,8,9],[1],[2,7,8],[3,7,9],[2,5],[3,7]],[[2],[1],[8],[7,9],[3],[5],[6],[7,9],[4]],[[3,7,8],[4],[3,7],[5],[2,7,8,9],[2,3,7,8],[3,7,9],[1],[6]],[[9],[3,7,8],[5],[3,7,8],[6],[1],[4],[3,7,8],[2]],[[6],[2],[1],[3,4,7,8],[7,8,9],[3,4,7,8],[3,7,9],[3,7,8,9],[5]]]
print("<hr><h2>X_Wing_Strategy 1B</h2>")
doSingleStep(sudokudoms,[((0,3),7)])

sudokudoms = [[[1,3,5,8],[2,3,5],[1,2,3,5,8],[3,5,6,8],[6,7,8],[3,5,6,7,8],[6,7],[9],[4]],[[7],[6],[4,8],[9],[1],[4,8],[2,3],[5],[2,3]],[[3,4,5],[9],[3,4,5],[3,4,5,6],[4,6,7],[2],[6,7],[8],[1]],[[3,4,6],[7],[2,3,4,6,9],[2,4,6,8],[5],[4,6,8],[2,3,4,8,9],[1],[2,3,8,9]],[[1,3,4,5,6],[2,3,5],[1,2,3,4,5,6],[7],[2,4,6,8],[9],[2,3,4,5,8],[2,3],[2,3,8]],[[4,5],[8],[2,4,5,9],[2,4],[3],[1],[2,4,5,9],[6],[7]],[[2],[4],[3,5,6,8],[1],[6,8],[3,5,6,8],[3,8,9],[7],[3,6,8,9]],[[3,6,8],[1],[3,6,7,8],[2,3,6,8],[9],[3,6,7,8],[2,3,8],[4],[5]],[[9],[3,5],[3,5,6,7,8],[2,3,4,5,6,8],[2,4,6,7,8],[3,4,5,6,7,8],[1],[2,3],[2,3,6,8]]]
print("<hr><h2>X_Wing_Strategy 2</h2>")
doSingleStep(sudokudoms,[((4,2),2)])
doSingleStep(sudokudoms)


sudokudoms = [[[1,3,5,8],[2],[1,3,5,8],[3,5,6,8],[6,7,8],[3,5,6,7,8],[6,7],[9],[4]],[[7],[6],[4,8],[9],[1],[4,8],[2,3],[5],[2,3]],[[3,4,5],[9],[3,4,5],[3,4,5,6],[4,6,7],[2],[6,7],[8],[1]],[[3,4,6],[7],[2,9],[2,4,6,8],[5],[4,6,8],[2,3,4,8,9],[1],[2,3,8,9]],[[1,3,4,5,6],[3,5],[1,3,4,5,6],[7],[2,4,6,8],[9],[3,4,5,8],[2,3],[3,8]],[[4,5],[8],[2,9],[2,4],[3],[1],[2,4,5,9],[6],[7]],[[2],[4],[3,5,6,8],[1],[6,8],[3,5,6,8],[3,8,9],[7],[3,6,8,9]],[[3,6,8],[1],[3,6,7,8],[2,3,6,8],[9],[3,6,7,8],[2,3,8],[4],[5]],[[9],[3,5],[3,5,6,7,8],[3,4,5,6,8],[2,4,6,7,8],[3,4,5,6,7,8],[1],[2,3],[3,6,8]]]
print("<hr><h2>X_Wing_Strategy 3</h2>")
doSingleStep(sudokudoms,[((4,0),3)])
doSingleStep(sudokudoms)

sudokudoms = [[[1,4,5],[1,5],[7],[2,5],[8],[3],[6],[1,4,9],[1,2,4,9]],[[1,4,5],[3],[9],[7],[2,5],[6],[8],[1,4],[1,2,4]],[[8],[2],[6],[4],[1],[9],[7],[5],[3]],[[6],[4],[2,5],[1],[9],[2,5],[3],[8],[7]],[[1,5,9],[8],[1,2,5],[3],[6],[7],[2,4,5],[1,4,9],[1,4,5,9]],[[1,9],[7],[3],[2,5],[4],[8],[2,5],[6],[1,9]],[[3],[9],[1,5],[8],[7],[1,4],[4,5],[2],[6]],[[7],[6],[4],[9],[2,5],[2,5],[1],[3],[8]],[[2],[1,5],[8],[6],[3],[1,4],[9],[7],[4,5]]]
print("<hr><h2>Simple Colouring (single chains) - Twice in a unit (Pre)</h2>")
doSingleStep(sudokudoms,[((4,2),5)])
doSingleStep(sudokudoms)


sudokudoms = [[[2],[3,5,7,9],[3,5,7,8],[3,7,8],[4],[1],[7,8,9],[3,5],[6]],[[4],[3,5,7,9],[3,5,7,8],[6],[3,5,7,8],[2],[7,8,9],[1],[3,7,8]],[[7,8],[1],[6],[3,7,8],[9],[3,5,7],[2,7,8],[2,3,5],[4]],[[3],[5,7],[5,7,8],[1],[2],[9],[6],[4],[7,8]],[[1],[4],[2],[3,7,8],[6],[3,7],[5],[9],[3,7,8]],[[7,8],[6],[9],[5],[3,7,8],[4],[2,7,8],[2,3],[1]],[[5],[8],[4],[2],[1],[6],[3],[7],[9]],[[9],[2],[3,7],[4],[3,7],[8],[1],[6],[5]],[[6],[3,7],[1],[9],[3,5,7],[3,5,7],[4],[8],[2]]]
print("<hr><h2>Simple Colouring (single chains) - Two colours 'elsewhere'</h2>")
doSingleStep(sudokudoms,[((1,4),3)])
doSingleStep(sudokudoms)


sudokudoms = [[[2],[3,5,7,9],[3,5,7,8],[3,7,8],[4],[1],[7,8,9],[3,5],[6]],[[4],[3,5,7,9],[3,5,7,8],[6],[5,7,8],[2],[7,8,9],[1],[3,7,8]],[[7,8],[1],[6],[3,7,8],[9],[3,5,7],[2,7,8],[2,3,5],[4]],[[3],[5,7],[5,7,8],[1],[2],[9],[6],[4],[7,8]],[[1],[4],[2],[3,7,8],[6],[3,7],[5],[9],[3,7,8]],[[7,8],[6],[9],[5],[3,7,8],[4],[2,7,8],[2,3],[1]],[[5],[8],[4],[2],[1],[6],[3],[7],[9]],[[9],[2],[3,7],[4],[3,7],[8],[1],[6],[5]],[[6],[3,7],[1],[9],[3,5,7],[3,5,7],[4],[8],[2]]]
print("<hr><h2>Simple Colouring (single chains) - Two colours 'elsewhere' - 2</h2>")
doSingleStep(sudokudoms,[((1, 8),8)])
doSingleStep(sudokudoms)
