language ESSENCE' 1.0

given ops : matrix indexed by [int(0..19)] of [1,2,3] $ 1 is plus, 2 is minus, 3 is multiply.
given values : matrix indexed by [int(0..8),int(0..6)] of int(-2..9)


letting VALUES be domain int(-2..9)
letting NROWS be int(0..8)
letting NCOLS be int(0..6)

find res matrix indexed by [NROWS,NCOLS] of VALUES

such that
$ set initial values
    forAll row : NROWS .
		forAll col : NCOLS . 
			(values[row,col] >= -1) ->
	    		(res[row,col] = values[row,col]),
$ operation constraints
	(op[0] = 1) -> (res[0,0] + res[0,1] = res[0,2]),
	(op[0] = 2) -> (res[0,0] - res[0,1] = res[0,2]),
	(op[0] = 3) -> (res[0,0] * res[0,1] = res[0,2]),
	(op[1] = 1) -> (res[0,4] + res[0,5] = res[0,6]),
	(op[1] = 2) -> (res[0,4] - res[0,5] = res[0,6]),
	(op[1] = 3) -> (res[0,4] * res[0,5] = res[0,6]),
	(op[2] = 1) -> (res[0,0] + res[1,0] = res[2,0]*10 + res[3,0]),
	(op[2] = 2) -> (res[0,0] - res[1,0] = res[2,0]*10 + res[3,0]),
	(op[2] = 3) -> (res[0,0] * res[1,0] = res[2,0]*10 + res[3,0]),
	(op[3] = 1) -> (res[0,2] + res[1,2] = res[2,2]*10 + res[3,2]),
	(op[3] = 2) -> (res[0,2] - res[1,2] = res[2,2]*10 + res[3,2]),
	(op[3] = 3) -> (res[0,2] * res[1,2] = res[2,2]*10 + res[3,2]),
	(op[4] = 1) -> (res[0,4] + res[1,4] = res[2,4]*10 + res[3,4]),
	(op[4] = 2) -> (res[0,4] - res[1,4] = res[2,4]*10 + res[3,4]),
	(op[4] = 3) -> (res[0,4] * res[1,4] = res[2,4]*10 + res[3,4]),
	(op[5] = 1) -> (res[0,6] + res[1,6] = res[2,6]*10 + res[3,6]),
	(op[5] = 2) -> (res[0,6] - res[1,6] = res[2,6]*10 + res[3,6]),
	(op[5] = 3) -> (res[0,6] * res[1,6] = res[2,6]*10 + res[3,6]),
	(op[6] = 1) -> (res[1,2] + res[1,3] = res[1,4]),
	(op[6] = 2) -> (res[1,2] - res[1,3] = res[1,4]),
	(op[6] = 3) -> (res[1,2] * res[1,3] = res[1,4]),
	(op[7] = 1) -> (res[3,0] + res[3,1] = res[3,2]),
	(op[7] = 2) -> (res[3,0] - res[3,1] = res[3,2]),
	(op[7] = 3) -> (res[3,0] * res[3,1] = res[3,2]),
	(op[8] = 1) -> (res[3,4] + res[3,5] = res[3,6]),
	(op[8] = 2) -> (res[3,4] - res[3,5] = res[3,6]),
	(op[8] = 3) -> (res[3,4] * res[3,5] = res[3,6]),
	(op[9] = 1) -> (res[3,1] + res[4,1] = res[5,1]),
	(op[9] = 2) -> (res[3,1] - res[4,1] = res[5,1]),
	(op[9] = 3) -> (res[3,1] * res[4,1] = res[5,1]),
	(op[10] = 1) -> (res[3,5] + res[4,5] = res[5,5]),
	(op[10] = 2) -> (res[3,5] - res[4,5] = res[5,5]),
	(op[10] = 3) -> (res[3,5] * res[4,5] = res[5,5]),
	(op[11] = 1) -> (res[5,0] + res[5,1] = res[5,2]),
	(op[11] = 2) -> (res[5,0] - res[5,1] = res[5,2]),
	(op[11] = 3) -> (res[5,0] * res[5,1] = res[5,2]),
	(op[12] = 1) -> (res[5,4] + res[5,5] = res[5,6]),
	(op[12] = 2) -> (res[5,4] - res[5,5] = res[5,6]),
	(op[12] = 3) -> (res[5,4] * res[5,5] = res[5,6]),
	(op[13] = 1) -> (res[5,0] + res[6,0] = res[7,0]*10 + res[8,0]),
	(op[13] = 2) -> (res[5,0] - res[6,0] = res[7,0]*10 + res[8,0]),
	(op[13] = 3) -> (res[5,0] * res[6,0] = res[7,0]*10 + res[8,0]),
	(op[14] = 1) -> (res[5,2] + res[6,2] = res[7,2]*10 + res[8,2]),
	(op[14] = 2) -> (res[5,2] - res[6,2] = res[7,2]*10 + res[8,2]),
	(op[14] = 3) -> (res[5,2] * res[6,2] = res[7,2]*10 + res[8,2]),
	(op[15] = 1) -> (res[5,4] + res[6,4] = res[7,4]*10 + res[8,4]),
	(op[15] = 2) -> (res[5,4] - res[6,4] = res[7,4]*10 + res[8,4]),
	(op[15] = 3) -> (res[5,4] * res[6,4] = res[7,4]*10 + res[8,4]),
	(op[16] = 1) -> (res[5,6] + res[6,6] = res[7,6]*10 + res[8,6]),
	(op[16] = 2) -> (res[5,6] - res[6,6] = res[7,6]*10 + res[8,6]),
	(op[16] = 3) -> (res[5,6] * res[6,6] = res[7,6]*10 + res[8,6]),
	(op[17] = 1) -> (res[8,0] + res[8,1] = res[8,2]),
	(op[17] = 2) -> (res[8,0] - res[8,1] = res[8,2]),
	(op[17] = 3) -> (res[8,0] * res[8,1] = res[8,2]),
	(op[18] = 1) -> (res[8,4] + res[8,5] = res[8,6]),
	(op[18] = 2) -> (res[8,4] - res[8,5] = res[8,6]),
	(op[18] = 3) -> (res[8,4] * res[8,5] = res[8,6]).

$ the following HAVE TO be > 0
	res[2,0] > 0,
	res[2,2] > 0,
	res[2,4] > 0,
	res[2,6] > 0,
	res[7,0] > 0,
	res[7,2] > 0,
	res[7,4] > 0,
	res[7,6] > 0,
	

$ only the following cells can be < 0
	res[0,3] < 0,
	res[1,1] < 0,
	res[1,5] < 0,
	res[2,1] < 0,
	res[2,3] < 0,
	res[2,5] < 0,
	res[3,3] < 0,
	res[4,0] < 0,
	res[4,2] < 0,
	res[4,3] < 0,
	res[4,4] < 0,
	res[4,6] < 0,
	res[5,3] < 0,
	res[6,1] < 0,
	res[6,5] < 0,
	res[7,1] < 0,
	res[7,3] < 0,
	res[7,5] < 0,
	res[8,3] < 0