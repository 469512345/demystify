MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 0
# CSE_active_eliminated_expressions = 0
# CSE_active_total_size = 0
**VARIABLES**
DISCRETE res_00000_00000 #
{0..9}
DISCRETE res_00000_00002 #
{0..9}
DISCRETE res_00000_00004 #
{0..9}
DISCRETE res_00000_00006 #
{0..9}
DISCRETE res_00001_00002 #
{0..9}
DISCRETE res_00002_00000 #
{0..9}
DISCRETE res_00002_00006 #
{0..9}
DISCRETE res_00003_00000 #
{0..9}
DISCRETE res_00003_00001 #
{0..9}
DISCRETE res_00003_00005 #
{0..9}
DISCRETE res_00003_00006 #
{0..9}
DISCRETE res_00005_00000 #
{0..9}
DISCRETE res_00005_00001 #
{0..9}
DISCRETE res_00005_00002 #
{0..9}
DISCRETE res_00005_00004 #
{0..9}
DISCRETE res_00005_00005 #
{0..9}
DISCRETE res_00006_00000 #
{0..9}
DISCRETE res_00006_00002 #
{0..9}
DISCRETE res_00006_00004 #
{0..9}
DISCRETE res_00007_00000 #
{0..9}
DISCRETE res_00007_00006 #
{0..9}
DISCRETE res_00008_00000 #
{0..9}
DISCRETE res_00008_00002 #
{0..9}
DISCRETE res_00008_00004 #
{0..9}
DISCRETE res_00008_00006 #
{0..9}
BOOL ops_bool_00000 #
BOOL ops_bool_00001 #
BOOL ops_bool_00002 #
BOOL ops_bool_00003 #
BOOL ops_bool_00004 #
BOOL ops_bool_00005 #
BOOL ops_bool_00006 #
BOOL ops_bool_00007 #
BOOL ops_bool_00008 #
BOOL ops_bool_00009 #
BOOL ops_bool_00010 #
BOOL ops_bool_00011 #
BOOL ops_bool_00012 #
BOOL ops_bool_00013 #
BOOL ops_bool_00014 #
BOOL ops_bool_00015 #
BOOL ops_bool_00016 #
BOOL ops_bool_00017 #
BOOL ops_bool_00018 #
BOOL ops_bool_00019 #
BOOL two_digit_00000 #
BOOL two_digit_00003 #
BOOL two_digit_00004 #
BOOL two_digit_00007 #
DISCRETE aux219 #
{0..81}
**CONSTRAINTS**
w-inintervalset(aux219, [0,10,12,12,14,16,18,18,20,21,24,25,27,28,30,30,32,32,35,36,40,40,42,42,45,45,48,49,54,54,56,56,63,64,72,72,81,81])
**VARIABLES**
DISCRETE aux220 #
{30..39}
**TUPLELIST**
presetvals 9 7
-1 2 -1 -2 -1 1 -1 
8 -2 -1 3 4 -2 4 
-1 -2 1 -2 3 -2 -1 
-1 -1 2 -2 2 -1 -1 
-2 1 -2 -2 -2 4 -2 
-1 -1 -1 -2 -1 -1 4 
-1 -2 -1 2 -1 -2 4 
-1 -2 3 -2 1 -2 -1 
-1 3 -1 -2 -1 2 -1 
**VARIABLES**
ALIAS presetvals[9,7]=[[-1, 2, -1, -2, -1, 1, -1], [8, -2, -1, 3, 4, -2, 4], [-1, -2, 1, -2, 3, -2, -1], [-1, -1, 2, -2, 2, -1, -1], [-2, 1, -2, -2, -2, 4, -2], [-1, -1, -1, -2, -1, -1, 4], [-1, -2, -1, 2, -1, -2, 4], [-1, -2, 3, -2, 1, -2, -1], [-1, 3, -1, -2, -1, 2, -1]]
**VARIABLES**
ALIAS op[20]=[1, 1, 3, 1, 3, 1, 2, 2, 1, 1, 1, 2, 2, 3, 3, 1, 3, 1, 2, 2]
**SEARCH**
PRINT[[res_00000_00000],[res_00000_00002],[res_00000_00004],[res_00000_00006],[res_00001_00002],[res_00002_00000],[res_00002_00006],[res_00003_00000],[res_00003_00001],[res_00003_00005],[res_00003_00006],[res_00005_00000],[res_00005_00001],[res_00005_00002],[res_00005_00004],[res_00005_00005],[res_00006_00000],[res_00006_00002],[res_00006_00004],[res_00007_00000],[res_00007_00006],[res_00008_00000],[res_00008_00002],[res_00008_00004],[res_00008_00006],[ops_bool_00000],[ops_bool_00001],[ops_bool_00002],[ops_bool_00003],[ops_bool_00004],[ops_bool_00005],[ops_bool_00006],[ops_bool_00007],[ops_bool_00008],[ops_bool_00009],[ops_bool_00010],[ops_bool_00011],[ops_bool_00012],[ops_bool_00013],[ops_bool_00014],[ops_bool_00015],[ops_bool_00016],[ops_bool_00017],[ops_bool_00018],[ops_bool_00019],[two_digit_00000],[two_digit_00003],[two_digit_00004],[two_digit_00007]]
VARORDER STATIC [res_00000_00000, 2, res_00000_00002, -2, res_00000_00004, 1, res_00000_00006, 8, -2, res_00001_00002, 3, 4, -2, 4, res_00002_00000, -2, 1, -2, 3, -2, res_00002_00006, res_00003_00000, res_00003_00001, 2, -2, 2, res_00003_00005, res_00003_00006, -2, 1, -2, -2, -2, 4, -2, res_00005_00000, res_00005_00001, res_00005_00002, -2, res_00005_00004, res_00005_00005, 4, res_00006_00000, -2, res_00006_00002, 2, res_00006_00004, -2, 4, res_00007_00000, -2, 3, -2, 1, -2, res_00007_00006, res_00008_00000, 3, res_00008_00002, -2, res_00008_00004, 2, res_00008_00006, ops_bool_00000, ops_bool_00001, ops_bool_00002, ops_bool_00003, ops_bool_00004, ops_bool_00005, ops_bool_00006, ops_bool_00007, ops_bool_00008, ops_bool_00009, ops_bool_00010, ops_bool_00011, ops_bool_00012, ops_bool_00013, ops_bool_00014, ops_bool_00015, ops_bool_00016, ops_bool_00017, ops_bool_00018, ops_bool_00019, two_digit_00000, 0, 0, two_digit_00003, two_digit_00004, 0, 0, two_digit_00007]
**CONSTRAINTS**
product(res_00005_00000, res_00006_00000, aux219)
reifyimply(w-literal(res_00000_00004,8), ops_bool_00004)
reifyimply(w-literal(res_00001_00002,7), ops_bool_00006)
reifyimply(product(res_00005_00002, res_00006_00002, aux220), ops_bool_00014)
reifyimply(ineq(0, res_00002_00000, -1), two_digit_00000)
reifyimply(ineq(0, res_00002_00006, -1), two_digit_00003)
reifyimply(ineq(0, res_00007_00000, -1), two_digit_00004)
reifyimply(ineq(0, res_00007_00006, -1), two_digit_00007)
sumleq([30,res_00008_00002],aux220)
sumgeq([30,res_00008_00002],aux220)
reifyimply(sumleq([res_00000_00000,2],res_00000_00002), ops_bool_00000)
reifyimply(sumgeq([res_00000_00000,2],res_00000_00002), ops_bool_00000)
reifyimply(sumleq([res_00000_00004,1],res_00000_00006), ops_bool_00001)
reifyimply(sumgeq([res_00000_00004,1],res_00000_00006), ops_bool_00001)
reifyimply(weightedsumleq([8,-10,-1],[res_00000_00000,res_00002_00000,res_00003_00000],0), ops_bool_00002)
reifyimply(weightedsumgeq([8,-10,-1],[res_00000_00000,res_00002_00000,res_00003_00000],0), ops_bool_00002)
reifyimply(sumleq([res_00000_00002,res_00001_00002],12), ops_bool_00003)
reifyimply(sumgeq([res_00000_00002,res_00001_00002],12), ops_bool_00003)
reifyimply(weightedsumleq([1,-10,-1],[res_00000_00006,res_00002_00006,res_00003_00006],-4), ops_bool_00005)
reifyimply(weightedsumgeq([1,-10,-1],[res_00000_00006,res_00002_00006,res_00003_00006],-4), ops_bool_00005)
reifyimply(weightedsumleq([1,-1],[res_00003_00000,res_00003_00001],2), ops_bool_00007)
reifyimply(weightedsumgeq([1,-1],[res_00003_00000,res_00003_00001],2), ops_bool_00007)
reifyimply(sumleq([2,res_00003_00005],res_00003_00006), ops_bool_00008)
reifyimply(sumgeq([2,res_00003_00005],res_00003_00006), ops_bool_00008)
reifyimply(sumleq([1,res_00003_00001],res_00005_00001), ops_bool_00009)
reifyimply(sumgeq([1,res_00003_00001],res_00005_00001), ops_bool_00009)
reifyimply(sumleq([4,res_00003_00005],res_00005_00005), ops_bool_00010)
reifyimply(sumgeq([4,res_00003_00005],res_00005_00005), ops_bool_00010)
reifyimply(weightedsumleq([1,-1],[res_00005_00000,res_00005_00001],res_00005_00002), ops_bool_00011)
reifyimply(weightedsumgeq([1,-1],[res_00005_00000,res_00005_00001],res_00005_00002), ops_bool_00011)
reifyimply(weightedsumleq([1,-1],[res_00005_00004,res_00005_00005],4), ops_bool_00012)
reifyimply(weightedsumgeq([1,-1],[res_00005_00004,res_00005_00005],4), ops_bool_00012)
reifyimply(weightedsumleq([10,1],[res_00007_00000,res_00008_00000],aux219), ops_bool_00013)
reifyimply(weightedsumgeq([10,1],[res_00007_00000,res_00008_00000],aux219), ops_bool_00013)
reifyimply(weightedsumleq([1,1,-1],[res_00005_00004,res_00006_00004,res_00008_00004],10), ops_bool_00015)
reifyimply(weightedsumgeq([1,1,-1],[res_00005_00004,res_00006_00004,res_00008_00004],10), ops_bool_00015)
reifyimply(weightedsumleq([10,1],[res_00007_00006,res_00008_00006],16), ops_bool_00016)
reifyimply(weightedsumgeq([10,1],[res_00007_00006,res_00008_00006],16), ops_bool_00016)
reifyimply(sumleq([res_00006_00002,2],res_00006_00004), ops_bool_00017)
reifyimply(sumgeq([res_00006_00002,2],res_00006_00004), ops_bool_00017)
reifyimply(sumleq([-3,res_00008_00000],res_00008_00002), ops_bool_00018)
reifyimply(sumgeq([-3,res_00008_00000],res_00008_00002), ops_bool_00018)
reifyimply(sumleq([-2,res_00008_00004],res_00008_00006), ops_bool_00019)
reifyimply(sumgeq([-2,res_00008_00004],res_00008_00006), ops_bool_00019)
**EOF**
