p cnf 14177 127790                                                                                  

1 0
c Encoding variable: x_00001_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00001' order represents '1' with '2'
c Var 'x_00001_00001' direct represents '1' with '2'
c Var 'x_00001_00001' order represents '2' with '3'
-2 3 0
c Var 'x_00001_00001' direct represents '2' with '4'
2 -3 4 0
-4 3 0
-4 -2 0
c Var 'x_00001_00001' order represents '3' with '5'
-3 5 0
c Var 'x_00001_00001' direct represents '3' with '6'
3 -5 6 0
-6 5 0
-6 -3 0
c Var 'x_00001_00001' order represents '4' with '7'
-5 7 0
c Var 'x_00001_00001' direct represents '4' with '8'
5 -7 8 0
-8 7 0
-8 -5 0
c Var 'x_00001_00001' order represents '5' with '9'
-7 9 0
c Var 'x_00001_00001' direct represents '5' with '10'
7 -9 10 0
-10 9 0
-10 -7 0
c Var 'x_00001_00001' order represents '6' with '11'
-9 11 0
c Var 'x_00001_00001' direct represents '6' with '12'
9 -11 12 0
-12 11 0
-12 -9 0
c Var 'x_00001_00001' order represents '7' with '13'
-11 13 0
c Var 'x_00001_00001' direct represents '7' with '14'
11 -13 14 0
-14 13 0
-14 -11 0
c Var 'x_00001_00001' order represents '8' with '15'
-13 15 0
c Var 'x_00001_00001' direct represents '8' with '16'
13 -15 16 0
-16 15 0
-16 -13 0
c Var 'x_00001_00001' direct represents '9' with '-15'
2 4 6 8 10 12 14 16 -15 0
c Encoding variable: x_00001_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00002' order represents '1' with '17'
c Var 'x_00001_00002' direct represents '1' with '17'
c Var 'x_00001_00002' order represents '2' with '18'
-17 18 0
c Var 'x_00001_00002' direct represents '2' with '19'
17 -18 19 0
-19 18 0
-19 -17 0
c Var 'x_00001_00002' order represents '3' with '20'
-18 20 0
c Var 'x_00001_00002' direct represents '3' with '21'
18 -20 21 0
-21 20 0
-21 -18 0
c Var 'x_00001_00002' order represents '4' with '22'
-20 22 0
c Var 'x_00001_00002' direct represents '4' with '23'
20 -22 23 0
-23 22 0
-23 -20 0
c Var 'x_00001_00002' order represents '5' with '24'
-22 24 0
c Var 'x_00001_00002' direct represents '5' with '25'
22 -24 25 0
-25 24 0
-25 -22 0
c Var 'x_00001_00002' order represents '6' with '26'
-24 26 0
c Var 'x_00001_00002' direct represents '6' with '27'
24 -26 27 0
-27 26 0
-27 -24 0
c Var 'x_00001_00002' order represents '7' with '28'
-26 28 0
c Var 'x_00001_00002' direct represents '7' with '29'
26 -28 29 0
-29 28 0
-29 -26 0
c Var 'x_00001_00002' order represents '8' with '30'
-28 30 0
c Var 'x_00001_00002' direct represents '8' with '31'
28 -30 31 0
-31 30 0
-31 -28 0
c Var 'x_00001_00002' direct represents '9' with '-30'
17 19 21 23 25 27 29 31 -30 0
c Encoding variable: x_00001_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00003' order represents '1' with '32'
c Var 'x_00001_00003' direct represents '1' with '32'
c Var 'x_00001_00003' order represents '2' with '33'
-32 33 0
c Var 'x_00001_00003' direct represents '2' with '34'
32 -33 34 0
-34 33 0
-34 -32 0
c Var 'x_00001_00003' order represents '3' with '35'
-33 35 0
c Var 'x_00001_00003' direct represents '3' with '36'
33 -35 36 0
-36 35 0
-36 -33 0
c Var 'x_00001_00003' order represents '4' with '37'
-35 37 0
c Var 'x_00001_00003' direct represents '4' with '38'
35 -37 38 0
-38 37 0
-38 -35 0
c Var 'x_00001_00003' order represents '5' with '39'
-37 39 0
c Var 'x_00001_00003' direct represents '5' with '40'
37 -39 40 0
-40 39 0
-40 -37 0
c Var 'x_00001_00003' order represents '6' with '41'
-39 41 0
c Var 'x_00001_00003' direct represents '6' with '42'
39 -41 42 0
-42 41 0
-42 -39 0
c Var 'x_00001_00003' order represents '7' with '43'
-41 43 0
c Var 'x_00001_00003' direct represents '7' with '44'
41 -43 44 0
-44 43 0
-44 -41 0
c Var 'x_00001_00003' order represents '8' with '45'
-43 45 0
c Var 'x_00001_00003' direct represents '8' with '46'
43 -45 46 0
-46 45 0
-46 -43 0
c Var 'x_00001_00003' direct represents '9' with '-45'
32 34 36 38 40 42 44 46 -45 0
c Encoding variable: x_00001_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00004' order represents '1' with '47'
c Var 'x_00001_00004' direct represents '1' with '47'
c Var 'x_00001_00004' order represents '2' with '48'
-47 48 0
c Var 'x_00001_00004' direct represents '2' with '49'
47 -48 49 0
-49 48 0
-49 -47 0
c Var 'x_00001_00004' order represents '3' with '50'
-48 50 0
c Var 'x_00001_00004' direct represents '3' with '51'
48 -50 51 0
-51 50 0
-51 -48 0
c Var 'x_00001_00004' order represents '4' with '52'
-50 52 0
c Var 'x_00001_00004' direct represents '4' with '53'
50 -52 53 0
-53 52 0
-53 -50 0
c Var 'x_00001_00004' order represents '5' with '54'
-52 54 0
c Var 'x_00001_00004' direct represents '5' with '55'
52 -54 55 0
-55 54 0
-55 -52 0
c Var 'x_00001_00004' order represents '6' with '56'
-54 56 0
c Var 'x_00001_00004' direct represents '6' with '57'
54 -56 57 0
-57 56 0
-57 -54 0
c Var 'x_00001_00004' order represents '7' with '58'
-56 58 0
c Var 'x_00001_00004' direct represents '7' with '59'
56 -58 59 0
-59 58 0
-59 -56 0
c Var 'x_00001_00004' order represents '8' with '60'
-58 60 0
c Var 'x_00001_00004' direct represents '8' with '61'
58 -60 61 0
-61 60 0
-61 -58 0
c Var 'x_00001_00004' direct represents '9' with '-60'
47 49 51 53 55 57 59 61 -60 0
c Encoding variable: x_00001_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00005' order represents '1' with '62'
c Var 'x_00001_00005' direct represents '1' with '62'
c Var 'x_00001_00005' order represents '2' with '63'
-62 63 0
c Var 'x_00001_00005' direct represents '2' with '64'
62 -63 64 0
-64 63 0
-64 -62 0
c Var 'x_00001_00005' order represents '3' with '65'
-63 65 0
c Var 'x_00001_00005' direct represents '3' with '66'
63 -65 66 0
-66 65 0
-66 -63 0
c Var 'x_00001_00005' order represents '4' with '67'
-65 67 0
c Var 'x_00001_00005' direct represents '4' with '68'
65 -67 68 0
-68 67 0
-68 -65 0
c Var 'x_00001_00005' order represents '5' with '69'
-67 69 0
c Var 'x_00001_00005' direct represents '5' with '70'
67 -69 70 0
-70 69 0
-70 -67 0
c Var 'x_00001_00005' order represents '6' with '71'
-69 71 0
c Var 'x_00001_00005' direct represents '6' with '72'
69 -71 72 0
-72 71 0
-72 -69 0
c Var 'x_00001_00005' order represents '7' with '73'
-71 73 0
c Var 'x_00001_00005' direct represents '7' with '74'
71 -73 74 0
-74 73 0
-74 -71 0
c Var 'x_00001_00005' order represents '8' with '75'
-73 75 0
c Var 'x_00001_00005' direct represents '8' with '76'
73 -75 76 0
-76 75 0
-76 -73 0
c Var 'x_00001_00005' direct represents '9' with '-75'
62 64 66 68 70 72 74 76 -75 0
c Encoding variable: x_00001_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00006' order represents '1' with '77'
c Var 'x_00001_00006' direct represents '1' with '77'
c Var 'x_00001_00006' order represents '2' with '78'
-77 78 0
c Var 'x_00001_00006' direct represents '2' with '79'
77 -78 79 0
-79 78 0
-79 -77 0
c Var 'x_00001_00006' order represents '3' with '80'
-78 80 0
c Var 'x_00001_00006' direct represents '3' with '81'
78 -80 81 0
-81 80 0
-81 -78 0
c Var 'x_00001_00006' order represents '4' with '82'
-80 82 0
c Var 'x_00001_00006' direct represents '4' with '83'
80 -82 83 0
-83 82 0
-83 -80 0
c Var 'x_00001_00006' order represents '5' with '84'
-82 84 0
c Var 'x_00001_00006' direct represents '5' with '85'
82 -84 85 0
-85 84 0
-85 -82 0
c Var 'x_00001_00006' order represents '6' with '86'
-84 86 0
c Var 'x_00001_00006' direct represents '6' with '87'
84 -86 87 0
-87 86 0
-87 -84 0
c Var 'x_00001_00006' order represents '7' with '88'
-86 88 0
c Var 'x_00001_00006' direct represents '7' with '89'
86 -88 89 0
-89 88 0
-89 -86 0
c Var 'x_00001_00006' order represents '8' with '90'
-88 90 0
c Var 'x_00001_00006' direct represents '8' with '91'
88 -90 91 0
-91 90 0
-91 -88 0
c Var 'x_00001_00006' direct represents '9' with '-90'
77 79 81 83 85 87 89 91 -90 0
c Encoding variable: x_00001_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00007' order represents '1' with '92'
c Var 'x_00001_00007' direct represents '1' with '92'
c Var 'x_00001_00007' order represents '2' with '93'
-92 93 0
c Var 'x_00001_00007' direct represents '2' with '94'
92 -93 94 0
-94 93 0
-94 -92 0
c Var 'x_00001_00007' order represents '3' with '95'
-93 95 0
c Var 'x_00001_00007' direct represents '3' with '96'
93 -95 96 0
-96 95 0
-96 -93 0
c Var 'x_00001_00007' order represents '4' with '97'
-95 97 0
c Var 'x_00001_00007' direct represents '4' with '98'
95 -97 98 0
-98 97 0
-98 -95 0
c Var 'x_00001_00007' order represents '5' with '99'
-97 99 0
c Var 'x_00001_00007' direct represents '5' with '100'
97 -99 100 0
-100 99 0
-100 -97 0
c Var 'x_00001_00007' order represents '6' with '101'
-99 101 0
c Var 'x_00001_00007' direct represents '6' with '102'
99 -101 102 0
-102 101 0
-102 -99 0
c Var 'x_00001_00007' order represents '7' with '103'
-101 103 0
c Var 'x_00001_00007' direct represents '7' with '104'
101 -103 104 0
-104 103 0
-104 -101 0
c Var 'x_00001_00007' order represents '8' with '105'
-103 105 0
c Var 'x_00001_00007' direct represents '8' with '106'
103 -105 106 0
-106 105 0
-106 -103 0
c Var 'x_00001_00007' direct represents '9' with '-105'
92 94 96 98 100 102 104 106 -105 0
c Encoding variable: x_00001_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00008' order represents '1' with '107'
c Var 'x_00001_00008' direct represents '1' with '107'
c Var 'x_00001_00008' order represents '2' with '108'
-107 108 0
c Var 'x_00001_00008' direct represents '2' with '109'
107 -108 109 0
-109 108 0
-109 -107 0
c Var 'x_00001_00008' order represents '3' with '110'
-108 110 0
c Var 'x_00001_00008' direct represents '3' with '111'
108 -110 111 0
-111 110 0
-111 -108 0
c Var 'x_00001_00008' order represents '4' with '112'
-110 112 0
c Var 'x_00001_00008' direct represents '4' with '113'
110 -112 113 0
-113 112 0
-113 -110 0
c Var 'x_00001_00008' order represents '5' with '114'
-112 114 0
c Var 'x_00001_00008' direct represents '5' with '115'
112 -114 115 0
-115 114 0
-115 -112 0
c Var 'x_00001_00008' order represents '6' with '116'
-114 116 0
c Var 'x_00001_00008' direct represents '6' with '117'
114 -116 117 0
-117 116 0
-117 -114 0
c Var 'x_00001_00008' order represents '7' with '118'
-116 118 0
c Var 'x_00001_00008' direct represents '7' with '119'
116 -118 119 0
-119 118 0
-119 -116 0
c Var 'x_00001_00008' order represents '8' with '120'
-118 120 0
c Var 'x_00001_00008' direct represents '8' with '121'
118 -120 121 0
-121 120 0
-121 -118 0
c Var 'x_00001_00008' direct represents '9' with '-120'
107 109 111 113 115 117 119 121 -120 0
c Encoding variable: x_00001_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00001_00009' order represents '1' with '122'
c Var 'x_00001_00009' direct represents '1' with '122'
c Var 'x_00001_00009' order represents '2' with '123'
-122 123 0
c Var 'x_00001_00009' direct represents '2' with '124'
122 -123 124 0
-124 123 0
-124 -122 0
c Var 'x_00001_00009' order represents '3' with '125'
-123 125 0
c Var 'x_00001_00009' direct represents '3' with '126'
123 -125 126 0
-126 125 0
-126 -123 0
c Var 'x_00001_00009' order represents '4' with '127'
-125 127 0
c Var 'x_00001_00009' direct represents '4' with '128'
125 -127 128 0
-128 127 0
-128 -125 0
c Var 'x_00001_00009' order represents '5' with '129'
-127 129 0
c Var 'x_00001_00009' direct represents '5' with '130'
127 -129 130 0
-130 129 0
-130 -127 0
c Var 'x_00001_00009' order represents '6' with '131'
-129 131 0
c Var 'x_00001_00009' direct represents '6' with '132'
129 -131 132 0
-132 131 0
-132 -129 0
c Var 'x_00001_00009' order represents '7' with '133'
-131 133 0
c Var 'x_00001_00009' direct represents '7' with '134'
131 -133 134 0
-134 133 0
-134 -131 0
c Var 'x_00001_00009' order represents '8' with '135'
-133 135 0
c Var 'x_00001_00009' direct represents '8' with '136'
133 -135 136 0
-136 135 0
-136 -133 0
c Var 'x_00001_00009' direct represents '9' with '-135'
122 124 126 128 130 132 134 136 -135 0
c Encoding variable: x_00002_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00001' order represents '1' with '137'
c Var 'x_00002_00001' direct represents '1' with '137'
c Var 'x_00002_00001' order represents '2' with '138'
-137 138 0
c Var 'x_00002_00001' direct represents '2' with '139'
137 -138 139 0
-139 138 0
-139 -137 0
c Var 'x_00002_00001' order represents '3' with '140'
-138 140 0
c Var 'x_00002_00001' direct represents '3' with '141'
138 -140 141 0
-141 140 0
-141 -138 0
c Var 'x_00002_00001' order represents '4' with '142'
-140 142 0
c Var 'x_00002_00001' direct represents '4' with '143'
140 -142 143 0
-143 142 0
-143 -140 0
c Var 'x_00002_00001' order represents '5' with '144'
-142 144 0
c Var 'x_00002_00001' direct represents '5' with '145'
142 -144 145 0
-145 144 0
-145 -142 0
c Var 'x_00002_00001' order represents '6' with '146'
-144 146 0
c Var 'x_00002_00001' direct represents '6' with '147'
144 -146 147 0
-147 146 0
-147 -144 0
c Var 'x_00002_00001' order represents '7' with '148'
-146 148 0
c Var 'x_00002_00001' direct represents '7' with '149'
146 -148 149 0
-149 148 0
-149 -146 0
c Var 'x_00002_00001' order represents '8' with '150'
-148 150 0
c Var 'x_00002_00001' direct represents '8' with '151'
148 -150 151 0
-151 150 0
-151 -148 0
c Var 'x_00002_00001' direct represents '9' with '-150'
137 139 141 143 145 147 149 151 -150 0
c Encoding variable: x_00002_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00002' order represents '1' with '152'
c Var 'x_00002_00002' direct represents '1' with '152'
c Var 'x_00002_00002' order represents '2' with '153'
-152 153 0
c Var 'x_00002_00002' direct represents '2' with '154'
152 -153 154 0
-154 153 0
-154 -152 0
c Var 'x_00002_00002' order represents '3' with '155'
-153 155 0
c Var 'x_00002_00002' direct represents '3' with '156'
153 -155 156 0
-156 155 0
-156 -153 0
c Var 'x_00002_00002' order represents '4' with '157'
-155 157 0
c Var 'x_00002_00002' direct represents '4' with '158'
155 -157 158 0
-158 157 0
-158 -155 0
c Var 'x_00002_00002' order represents '5' with '159'
-157 159 0
c Var 'x_00002_00002' direct represents '5' with '160'
157 -159 160 0
-160 159 0
-160 -157 0
c Var 'x_00002_00002' order represents '6' with '161'
-159 161 0
c Var 'x_00002_00002' direct represents '6' with '162'
159 -161 162 0
-162 161 0
-162 -159 0
c Var 'x_00002_00002' order represents '7' with '163'
-161 163 0
c Var 'x_00002_00002' direct represents '7' with '164'
161 -163 164 0
-164 163 0
-164 -161 0
c Var 'x_00002_00002' order represents '8' with '165'
-163 165 0
c Var 'x_00002_00002' direct represents '8' with '166'
163 -165 166 0
-166 165 0
-166 -163 0
c Var 'x_00002_00002' direct represents '9' with '-165'
152 154 156 158 160 162 164 166 -165 0
c Encoding variable: x_00002_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00003' order represents '1' with '167'
c Var 'x_00002_00003' direct represents '1' with '167'
c Var 'x_00002_00003' order represents '2' with '168'
-167 168 0
c Var 'x_00002_00003' direct represents '2' with '169'
167 -168 169 0
-169 168 0
-169 -167 0
c Var 'x_00002_00003' order represents '3' with '170'
-168 170 0
c Var 'x_00002_00003' direct represents '3' with '171'
168 -170 171 0
-171 170 0
-171 -168 0
c Var 'x_00002_00003' order represents '4' with '172'
-170 172 0
c Var 'x_00002_00003' direct represents '4' with '173'
170 -172 173 0
-173 172 0
-173 -170 0
c Var 'x_00002_00003' order represents '5' with '174'
-172 174 0
c Var 'x_00002_00003' direct represents '5' with '175'
172 -174 175 0
-175 174 0
-175 -172 0
c Var 'x_00002_00003' order represents '6' with '176'
-174 176 0
c Var 'x_00002_00003' direct represents '6' with '177'
174 -176 177 0
-177 176 0
-177 -174 0
c Var 'x_00002_00003' order represents '7' with '178'
-176 178 0
c Var 'x_00002_00003' direct represents '7' with '179'
176 -178 179 0
-179 178 0
-179 -176 0
c Var 'x_00002_00003' order represents '8' with '180'
-178 180 0
c Var 'x_00002_00003' direct represents '8' with '181'
178 -180 181 0
-181 180 0
-181 -178 0
c Var 'x_00002_00003' direct represents '9' with '-180'
167 169 171 173 175 177 179 181 -180 0
c Encoding variable: x_00002_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00004' order represents '1' with '182'
c Var 'x_00002_00004' direct represents '1' with '182'
c Var 'x_00002_00004' order represents '2' with '183'
-182 183 0
c Var 'x_00002_00004' direct represents '2' with '184'
182 -183 184 0
-184 183 0
-184 -182 0
c Var 'x_00002_00004' order represents '3' with '185'
-183 185 0
c Var 'x_00002_00004' direct represents '3' with '186'
183 -185 186 0
-186 185 0
-186 -183 0
c Var 'x_00002_00004' order represents '4' with '187'
-185 187 0
c Var 'x_00002_00004' direct represents '4' with '188'
185 -187 188 0
-188 187 0
-188 -185 0
c Var 'x_00002_00004' order represents '5' with '189'
-187 189 0
c Var 'x_00002_00004' direct represents '5' with '190'
187 -189 190 0
-190 189 0
-190 -187 0
c Var 'x_00002_00004' order represents '6' with '191'
-189 191 0
c Var 'x_00002_00004' direct represents '6' with '192'
189 -191 192 0
-192 191 0
-192 -189 0
c Var 'x_00002_00004' order represents '7' with '193'
-191 193 0
c Var 'x_00002_00004' direct represents '7' with '194'
191 -193 194 0
-194 193 0
-194 -191 0
c Var 'x_00002_00004' order represents '8' with '195'
-193 195 0
c Var 'x_00002_00004' direct represents '8' with '196'
193 -195 196 0
-196 195 0
-196 -193 0
c Var 'x_00002_00004' direct represents '9' with '-195'
182 184 186 188 190 192 194 196 -195 0
c Encoding variable: x_00002_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00005' order represents '1' with '197'
c Var 'x_00002_00005' direct represents '1' with '197'
c Var 'x_00002_00005' order represents '2' with '198'
-197 198 0
c Var 'x_00002_00005' direct represents '2' with '199'
197 -198 199 0
-199 198 0
-199 -197 0
c Var 'x_00002_00005' order represents '3' with '200'
-198 200 0
c Var 'x_00002_00005' direct represents '3' with '201'
198 -200 201 0
-201 200 0
-201 -198 0
c Var 'x_00002_00005' order represents '4' with '202'
-200 202 0
c Var 'x_00002_00005' direct represents '4' with '203'
200 -202 203 0
-203 202 0
-203 -200 0
c Var 'x_00002_00005' order represents '5' with '204'
-202 204 0
c Var 'x_00002_00005' direct represents '5' with '205'
202 -204 205 0
-205 204 0
-205 -202 0
c Var 'x_00002_00005' order represents '6' with '206'
-204 206 0
c Var 'x_00002_00005' direct represents '6' with '207'
204 -206 207 0
-207 206 0
-207 -204 0
c Var 'x_00002_00005' order represents '7' with '208'
-206 208 0
c Var 'x_00002_00005' direct represents '7' with '209'
206 -208 209 0
-209 208 0
-209 -206 0
c Var 'x_00002_00005' order represents '8' with '210'
-208 210 0
c Var 'x_00002_00005' direct represents '8' with '211'
208 -210 211 0
-211 210 0
-211 -208 0
c Var 'x_00002_00005' direct represents '9' with '-210'
197 199 201 203 205 207 209 211 -210 0
c Encoding variable: x_00002_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00006' order represents '1' with '212'
c Var 'x_00002_00006' direct represents '1' with '212'
c Var 'x_00002_00006' order represents '2' with '213'
-212 213 0
c Var 'x_00002_00006' direct represents '2' with '214'
212 -213 214 0
-214 213 0
-214 -212 0
c Var 'x_00002_00006' order represents '3' with '215'
-213 215 0
c Var 'x_00002_00006' direct represents '3' with '216'
213 -215 216 0
-216 215 0
-216 -213 0
c Var 'x_00002_00006' order represents '4' with '217'
-215 217 0
c Var 'x_00002_00006' direct represents '4' with '218'
215 -217 218 0
-218 217 0
-218 -215 0
c Var 'x_00002_00006' order represents '5' with '219'
-217 219 0
c Var 'x_00002_00006' direct represents '5' with '220'
217 -219 220 0
-220 219 0
-220 -217 0
c Var 'x_00002_00006' order represents '6' with '221'
-219 221 0
c Var 'x_00002_00006' direct represents '6' with '222'
219 -221 222 0
-222 221 0
-222 -219 0
c Var 'x_00002_00006' order represents '7' with '223'
-221 223 0
c Var 'x_00002_00006' direct represents '7' with '224'
221 -223 224 0
-224 223 0
-224 -221 0
c Var 'x_00002_00006' order represents '8' with '225'
-223 225 0
c Var 'x_00002_00006' direct represents '8' with '226'
223 -225 226 0
-226 225 0
-226 -223 0
c Var 'x_00002_00006' direct represents '9' with '-225'
212 214 216 218 220 222 224 226 -225 0
c Encoding variable: x_00002_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00007' order represents '1' with '227'
c Var 'x_00002_00007' direct represents '1' with '227'
c Var 'x_00002_00007' order represents '2' with '228'
-227 228 0
c Var 'x_00002_00007' direct represents '2' with '229'
227 -228 229 0
-229 228 0
-229 -227 0
c Var 'x_00002_00007' order represents '3' with '230'
-228 230 0
c Var 'x_00002_00007' direct represents '3' with '231'
228 -230 231 0
-231 230 0
-231 -228 0
c Var 'x_00002_00007' order represents '4' with '232'
-230 232 0
c Var 'x_00002_00007' direct represents '4' with '233'
230 -232 233 0
-233 232 0
-233 -230 0
c Var 'x_00002_00007' order represents '5' with '234'
-232 234 0
c Var 'x_00002_00007' direct represents '5' with '235'
232 -234 235 0
-235 234 0
-235 -232 0
c Var 'x_00002_00007' order represents '6' with '236'
-234 236 0
c Var 'x_00002_00007' direct represents '6' with '237'
234 -236 237 0
-237 236 0
-237 -234 0
c Var 'x_00002_00007' order represents '7' with '238'
-236 238 0
c Var 'x_00002_00007' direct represents '7' with '239'
236 -238 239 0
-239 238 0
-239 -236 0
c Var 'x_00002_00007' order represents '8' with '240'
-238 240 0
c Var 'x_00002_00007' direct represents '8' with '241'
238 -240 241 0
-241 240 0
-241 -238 0
c Var 'x_00002_00007' direct represents '9' with '-240'
227 229 231 233 235 237 239 241 -240 0
c Encoding variable: x_00002_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00008' order represents '1' with '242'
c Var 'x_00002_00008' direct represents '1' with '242'
c Var 'x_00002_00008' order represents '2' with '243'
-242 243 0
c Var 'x_00002_00008' direct represents '2' with '244'
242 -243 244 0
-244 243 0
-244 -242 0
c Var 'x_00002_00008' order represents '3' with '245'
-243 245 0
c Var 'x_00002_00008' direct represents '3' with '246'
243 -245 246 0
-246 245 0
-246 -243 0
c Var 'x_00002_00008' order represents '4' with '247'
-245 247 0
c Var 'x_00002_00008' direct represents '4' with '248'
245 -247 248 0
-248 247 0
-248 -245 0
c Var 'x_00002_00008' order represents '5' with '249'
-247 249 0
c Var 'x_00002_00008' direct represents '5' with '250'
247 -249 250 0
-250 249 0
-250 -247 0
c Var 'x_00002_00008' order represents '6' with '251'
-249 251 0
c Var 'x_00002_00008' direct represents '6' with '252'
249 -251 252 0
-252 251 0
-252 -249 0
c Var 'x_00002_00008' order represents '7' with '253'
-251 253 0
c Var 'x_00002_00008' direct represents '7' with '254'
251 -253 254 0
-254 253 0
-254 -251 0
c Var 'x_00002_00008' order represents '8' with '255'
-253 255 0
c Var 'x_00002_00008' direct represents '8' with '256'
253 -255 256 0
-256 255 0
-256 -253 0
c Var 'x_00002_00008' direct represents '9' with '-255'
242 244 246 248 250 252 254 256 -255 0
c Encoding variable: x_00002_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00002_00009' order represents '1' with '257'
c Var 'x_00002_00009' direct represents '1' with '257'
c Var 'x_00002_00009' order represents '2' with '258'
-257 258 0
c Var 'x_00002_00009' direct represents '2' with '259'
257 -258 259 0
-259 258 0
-259 -257 0
c Var 'x_00002_00009' order represents '3' with '260'
-258 260 0
c Var 'x_00002_00009' direct represents '3' with '261'
258 -260 261 0
-261 260 0
-261 -258 0
c Var 'x_00002_00009' order represents '4' with '262'
-260 262 0
c Var 'x_00002_00009' direct represents '4' with '263'
260 -262 263 0
-263 262 0
-263 -260 0
c Var 'x_00002_00009' order represents '5' with '264'
-262 264 0
c Var 'x_00002_00009' direct represents '5' with '265'
262 -264 265 0
-265 264 0
-265 -262 0
c Var 'x_00002_00009' order represents '6' with '266'
-264 266 0
c Var 'x_00002_00009' direct represents '6' with '267'
264 -266 267 0
-267 266 0
-267 -264 0
c Var 'x_00002_00009' order represents '7' with '268'
-266 268 0
c Var 'x_00002_00009' direct represents '7' with '269'
266 -268 269 0
-269 268 0
-269 -266 0
c Var 'x_00002_00009' order represents '8' with '270'
-268 270 0
c Var 'x_00002_00009' direct represents '8' with '271'
268 -270 271 0
-271 270 0
-271 -268 0
c Var 'x_00002_00009' direct represents '9' with '-270'
257 259 261 263 265 267 269 271 -270 0
c Encoding variable: x_00003_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00001' order represents '1' with '272'
c Var 'x_00003_00001' direct represents '1' with '272'
c Var 'x_00003_00001' order represents '2' with '273'
-272 273 0
c Var 'x_00003_00001' direct represents '2' with '274'
272 -273 274 0
-274 273 0
-274 -272 0
c Var 'x_00003_00001' order represents '3' with '275'
-273 275 0
c Var 'x_00003_00001' direct represents '3' with '276'
273 -275 276 0
-276 275 0
-276 -273 0
c Var 'x_00003_00001' order represents '4' with '277'
-275 277 0
c Var 'x_00003_00001' direct represents '4' with '278'
275 -277 278 0
-278 277 0
-278 -275 0
c Var 'x_00003_00001' order represents '5' with '279'
-277 279 0
c Var 'x_00003_00001' direct represents '5' with '280'
277 -279 280 0
-280 279 0
-280 -277 0
c Var 'x_00003_00001' order represents '6' with '281'
-279 281 0
c Var 'x_00003_00001' direct represents '6' with '282'
279 -281 282 0
-282 281 0
-282 -279 0
c Var 'x_00003_00001' order represents '7' with '283'
-281 283 0
c Var 'x_00003_00001' direct represents '7' with '284'
281 -283 284 0
-284 283 0
-284 -281 0
c Var 'x_00003_00001' order represents '8' with '285'
-283 285 0
c Var 'x_00003_00001' direct represents '8' with '286'
283 -285 286 0
-286 285 0
-286 -283 0
c Var 'x_00003_00001' direct represents '9' with '-285'
272 274 276 278 280 282 284 286 -285 0
c Encoding variable: x_00003_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00002' order represents '1' with '287'
c Var 'x_00003_00002' direct represents '1' with '287'
c Var 'x_00003_00002' order represents '2' with '288'
-287 288 0
c Var 'x_00003_00002' direct represents '2' with '289'
287 -288 289 0
-289 288 0
-289 -287 0
c Var 'x_00003_00002' order represents '3' with '290'
-288 290 0
c Var 'x_00003_00002' direct represents '3' with '291'
288 -290 291 0
-291 290 0
-291 -288 0
c Var 'x_00003_00002' order represents '4' with '292'
-290 292 0
c Var 'x_00003_00002' direct represents '4' with '293'
290 -292 293 0
-293 292 0
-293 -290 0
c Var 'x_00003_00002' order represents '5' with '294'
-292 294 0
c Var 'x_00003_00002' direct represents '5' with '295'
292 -294 295 0
-295 294 0
-295 -292 0
c Var 'x_00003_00002' order represents '6' with '296'
-294 296 0
c Var 'x_00003_00002' direct represents '6' with '297'
294 -296 297 0
-297 296 0
-297 -294 0
c Var 'x_00003_00002' order represents '7' with '298'
-296 298 0
c Var 'x_00003_00002' direct represents '7' with '299'
296 -298 299 0
-299 298 0
-299 -296 0
c Var 'x_00003_00002' order represents '8' with '300'
-298 300 0
c Var 'x_00003_00002' direct represents '8' with '301'
298 -300 301 0
-301 300 0
-301 -298 0
c Var 'x_00003_00002' direct represents '9' with '-300'
287 289 291 293 295 297 299 301 -300 0
c Encoding variable: x_00003_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00003' order represents '1' with '302'
c Var 'x_00003_00003' direct represents '1' with '302'
c Var 'x_00003_00003' order represents '2' with '303'
-302 303 0
c Var 'x_00003_00003' direct represents '2' with '304'
302 -303 304 0
-304 303 0
-304 -302 0
c Var 'x_00003_00003' order represents '3' with '305'
-303 305 0
c Var 'x_00003_00003' direct represents '3' with '306'
303 -305 306 0
-306 305 0
-306 -303 0
c Var 'x_00003_00003' order represents '4' with '307'
-305 307 0
c Var 'x_00003_00003' direct represents '4' with '308'
305 -307 308 0
-308 307 0
-308 -305 0
c Var 'x_00003_00003' order represents '5' with '309'
-307 309 0
c Var 'x_00003_00003' direct represents '5' with '310'
307 -309 310 0
-310 309 0
-310 -307 0
c Var 'x_00003_00003' order represents '6' with '311'
-309 311 0
c Var 'x_00003_00003' direct represents '6' with '312'
309 -311 312 0
-312 311 0
-312 -309 0
c Var 'x_00003_00003' order represents '7' with '313'
-311 313 0
c Var 'x_00003_00003' direct represents '7' with '314'
311 -313 314 0
-314 313 0
-314 -311 0
c Var 'x_00003_00003' order represents '8' with '315'
-313 315 0
c Var 'x_00003_00003' direct represents '8' with '316'
313 -315 316 0
-316 315 0
-316 -313 0
c Var 'x_00003_00003' direct represents '9' with '-315'
302 304 306 308 310 312 314 316 -315 0
c Encoding variable: x_00003_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00004' order represents '1' with '317'
c Var 'x_00003_00004' direct represents '1' with '317'
c Var 'x_00003_00004' order represents '2' with '318'
-317 318 0
c Var 'x_00003_00004' direct represents '2' with '319'
317 -318 319 0
-319 318 0
-319 -317 0
c Var 'x_00003_00004' order represents '3' with '320'
-318 320 0
c Var 'x_00003_00004' direct represents '3' with '321'
318 -320 321 0
-321 320 0
-321 -318 0
c Var 'x_00003_00004' order represents '4' with '322'
-320 322 0
c Var 'x_00003_00004' direct represents '4' with '323'
320 -322 323 0
-323 322 0
-323 -320 0
c Var 'x_00003_00004' order represents '5' with '324'
-322 324 0
c Var 'x_00003_00004' direct represents '5' with '325'
322 -324 325 0
-325 324 0
-325 -322 0
c Var 'x_00003_00004' order represents '6' with '326'
-324 326 0
c Var 'x_00003_00004' direct represents '6' with '327'
324 -326 327 0
-327 326 0
-327 -324 0
c Var 'x_00003_00004' order represents '7' with '328'
-326 328 0
c Var 'x_00003_00004' direct represents '7' with '329'
326 -328 329 0
-329 328 0
-329 -326 0
c Var 'x_00003_00004' order represents '8' with '330'
-328 330 0
c Var 'x_00003_00004' direct represents '8' with '331'
328 -330 331 0
-331 330 0
-331 -328 0
c Var 'x_00003_00004' direct represents '9' with '-330'
317 319 321 323 325 327 329 331 -330 0
c Encoding variable: x_00003_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00005' order represents '1' with '332'
c Var 'x_00003_00005' direct represents '1' with '332'
c Var 'x_00003_00005' order represents '2' with '333'
-332 333 0
c Var 'x_00003_00005' direct represents '2' with '334'
332 -333 334 0
-334 333 0
-334 -332 0
c Var 'x_00003_00005' order represents '3' with '335'
-333 335 0
c Var 'x_00003_00005' direct represents '3' with '336'
333 -335 336 0
-336 335 0
-336 -333 0
c Var 'x_00003_00005' order represents '4' with '337'
-335 337 0
c Var 'x_00003_00005' direct represents '4' with '338'
335 -337 338 0
-338 337 0
-338 -335 0
c Var 'x_00003_00005' order represents '5' with '339'
-337 339 0
c Var 'x_00003_00005' direct represents '5' with '340'
337 -339 340 0
-340 339 0
-340 -337 0
c Var 'x_00003_00005' order represents '6' with '341'
-339 341 0
c Var 'x_00003_00005' direct represents '6' with '342'
339 -341 342 0
-342 341 0
-342 -339 0
c Var 'x_00003_00005' order represents '7' with '343'
-341 343 0
c Var 'x_00003_00005' direct represents '7' with '344'
341 -343 344 0
-344 343 0
-344 -341 0
c Var 'x_00003_00005' order represents '8' with '345'
-343 345 0
c Var 'x_00003_00005' direct represents '8' with '346'
343 -345 346 0
-346 345 0
-346 -343 0
c Var 'x_00003_00005' direct represents '9' with '-345'
332 334 336 338 340 342 344 346 -345 0
c Encoding variable: x_00003_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00006' order represents '1' with '347'
c Var 'x_00003_00006' direct represents '1' with '347'
c Var 'x_00003_00006' order represents '2' with '348'
-347 348 0
c Var 'x_00003_00006' direct represents '2' with '349'
347 -348 349 0
-349 348 0
-349 -347 0
c Var 'x_00003_00006' order represents '3' with '350'
-348 350 0
c Var 'x_00003_00006' direct represents '3' with '351'
348 -350 351 0
-351 350 0
-351 -348 0
c Var 'x_00003_00006' order represents '4' with '352'
-350 352 0
c Var 'x_00003_00006' direct represents '4' with '353'
350 -352 353 0
-353 352 0
-353 -350 0
c Var 'x_00003_00006' order represents '5' with '354'
-352 354 0
c Var 'x_00003_00006' direct represents '5' with '355'
352 -354 355 0
-355 354 0
-355 -352 0
c Var 'x_00003_00006' order represents '6' with '356'
-354 356 0
c Var 'x_00003_00006' direct represents '6' with '357'
354 -356 357 0
-357 356 0
-357 -354 0
c Var 'x_00003_00006' order represents '7' with '358'
-356 358 0
c Var 'x_00003_00006' direct represents '7' with '359'
356 -358 359 0
-359 358 0
-359 -356 0
c Var 'x_00003_00006' order represents '8' with '360'
-358 360 0
c Var 'x_00003_00006' direct represents '8' with '361'
358 -360 361 0
-361 360 0
-361 -358 0
c Var 'x_00003_00006' direct represents '9' with '-360'
347 349 351 353 355 357 359 361 -360 0
c Encoding variable: x_00003_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00007' order represents '1' with '362'
c Var 'x_00003_00007' direct represents '1' with '362'
c Var 'x_00003_00007' order represents '2' with '363'
-362 363 0
c Var 'x_00003_00007' direct represents '2' with '364'
362 -363 364 0
-364 363 0
-364 -362 0
c Var 'x_00003_00007' order represents '3' with '365'
-363 365 0
c Var 'x_00003_00007' direct represents '3' with '366'
363 -365 366 0
-366 365 0
-366 -363 0
c Var 'x_00003_00007' order represents '4' with '367'
-365 367 0
c Var 'x_00003_00007' direct represents '4' with '368'
365 -367 368 0
-368 367 0
-368 -365 0
c Var 'x_00003_00007' order represents '5' with '369'
-367 369 0
c Var 'x_00003_00007' direct represents '5' with '370'
367 -369 370 0
-370 369 0
-370 -367 0
c Var 'x_00003_00007' order represents '6' with '371'
-369 371 0
c Var 'x_00003_00007' direct represents '6' with '372'
369 -371 372 0
-372 371 0
-372 -369 0
c Var 'x_00003_00007' order represents '7' with '373'
-371 373 0
c Var 'x_00003_00007' direct represents '7' with '374'
371 -373 374 0
-374 373 0
-374 -371 0
c Var 'x_00003_00007' order represents '8' with '375'
-373 375 0
c Var 'x_00003_00007' direct represents '8' with '376'
373 -375 376 0
-376 375 0
-376 -373 0
c Var 'x_00003_00007' direct represents '9' with '-375'
362 364 366 368 370 372 374 376 -375 0
c Encoding variable: x_00003_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00008' order represents '1' with '377'
c Var 'x_00003_00008' direct represents '1' with '377'
c Var 'x_00003_00008' order represents '2' with '378'
-377 378 0
c Var 'x_00003_00008' direct represents '2' with '379'
377 -378 379 0
-379 378 0
-379 -377 0
c Var 'x_00003_00008' order represents '3' with '380'
-378 380 0
c Var 'x_00003_00008' direct represents '3' with '381'
378 -380 381 0
-381 380 0
-381 -378 0
c Var 'x_00003_00008' order represents '4' with '382'
-380 382 0
c Var 'x_00003_00008' direct represents '4' with '383'
380 -382 383 0
-383 382 0
-383 -380 0
c Var 'x_00003_00008' order represents '5' with '384'
-382 384 0
c Var 'x_00003_00008' direct represents '5' with '385'
382 -384 385 0
-385 384 0
-385 -382 0
c Var 'x_00003_00008' order represents '6' with '386'
-384 386 0
c Var 'x_00003_00008' direct represents '6' with '387'
384 -386 387 0
-387 386 0
-387 -384 0
c Var 'x_00003_00008' order represents '7' with '388'
-386 388 0
c Var 'x_00003_00008' direct represents '7' with '389'
386 -388 389 0
-389 388 0
-389 -386 0
c Var 'x_00003_00008' order represents '8' with '390'
-388 390 0
c Var 'x_00003_00008' direct represents '8' with '391'
388 -390 391 0
-391 390 0
-391 -388 0
c Var 'x_00003_00008' direct represents '9' with '-390'
377 379 381 383 385 387 389 391 -390 0
c Encoding variable: x_00003_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00003_00009' order represents '1' with '392'
c Var 'x_00003_00009' direct represents '1' with '392'
c Var 'x_00003_00009' order represents '2' with '393'
-392 393 0
c Var 'x_00003_00009' direct represents '2' with '394'
392 -393 394 0
-394 393 0
-394 -392 0
c Var 'x_00003_00009' order represents '3' with '395'
-393 395 0
c Var 'x_00003_00009' direct represents '3' with '396'
393 -395 396 0
-396 395 0
-396 -393 0
c Var 'x_00003_00009' order represents '4' with '397'
-395 397 0
c Var 'x_00003_00009' direct represents '4' with '398'
395 -397 398 0
-398 397 0
-398 -395 0
c Var 'x_00003_00009' order represents '5' with '399'
-397 399 0
c Var 'x_00003_00009' direct represents '5' with '400'
397 -399 400 0
-400 399 0
-400 -397 0
c Var 'x_00003_00009' order represents '6' with '401'
-399 401 0
c Var 'x_00003_00009' direct represents '6' with '402'
399 -401 402 0
-402 401 0
-402 -399 0
c Var 'x_00003_00009' order represents '7' with '403'
-401 403 0
c Var 'x_00003_00009' direct represents '7' with '404'
401 -403 404 0
-404 403 0
-404 -401 0
c Var 'x_00003_00009' order represents '8' with '405'
-403 405 0
c Var 'x_00003_00009' direct represents '8' with '406'
403 -405 406 0
-406 405 0
-406 -403 0
c Var 'x_00003_00009' direct represents '9' with '-405'
392 394 396 398 400 402 404 406 -405 0
c Encoding variable: x_00004_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00001' order represents '1' with '407'
c Var 'x_00004_00001' direct represents '1' with '407'
c Var 'x_00004_00001' order represents '2' with '408'
-407 408 0
c Var 'x_00004_00001' direct represents '2' with '409'
407 -408 409 0
-409 408 0
-409 -407 0
c Var 'x_00004_00001' order represents '3' with '410'
-408 410 0
c Var 'x_00004_00001' direct represents '3' with '411'
408 -410 411 0
-411 410 0
-411 -408 0
c Var 'x_00004_00001' order represents '4' with '412'
-410 412 0
c Var 'x_00004_00001' direct represents '4' with '413'
410 -412 413 0
-413 412 0
-413 -410 0
c Var 'x_00004_00001' order represents '5' with '414'
-412 414 0
c Var 'x_00004_00001' direct represents '5' with '415'
412 -414 415 0
-415 414 0
-415 -412 0
c Var 'x_00004_00001' order represents '6' with '416'
-414 416 0
c Var 'x_00004_00001' direct represents '6' with '417'
414 -416 417 0
-417 416 0
-417 -414 0
c Var 'x_00004_00001' order represents '7' with '418'
-416 418 0
c Var 'x_00004_00001' direct represents '7' with '419'
416 -418 419 0
-419 418 0
-419 -416 0
c Var 'x_00004_00001' order represents '8' with '420'
-418 420 0
c Var 'x_00004_00001' direct represents '8' with '421'
418 -420 421 0
-421 420 0
-421 -418 0
c Var 'x_00004_00001' direct represents '9' with '-420'
407 409 411 413 415 417 419 421 -420 0
c Encoding variable: x_00004_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00002' order represents '1' with '422'
c Var 'x_00004_00002' direct represents '1' with '422'
c Var 'x_00004_00002' order represents '2' with '423'
-422 423 0
c Var 'x_00004_00002' direct represents '2' with '424'
422 -423 424 0
-424 423 0
-424 -422 0
c Var 'x_00004_00002' order represents '3' with '425'
-423 425 0
c Var 'x_00004_00002' direct represents '3' with '426'
423 -425 426 0
-426 425 0
-426 -423 0
c Var 'x_00004_00002' order represents '4' with '427'
-425 427 0
c Var 'x_00004_00002' direct represents '4' with '428'
425 -427 428 0
-428 427 0
-428 -425 0
c Var 'x_00004_00002' order represents '5' with '429'
-427 429 0
c Var 'x_00004_00002' direct represents '5' with '430'
427 -429 430 0
-430 429 0
-430 -427 0
c Var 'x_00004_00002' order represents '6' with '431'
-429 431 0
c Var 'x_00004_00002' direct represents '6' with '432'
429 -431 432 0
-432 431 0
-432 -429 0
c Var 'x_00004_00002' order represents '7' with '433'
-431 433 0
c Var 'x_00004_00002' direct represents '7' with '434'
431 -433 434 0
-434 433 0
-434 -431 0
c Var 'x_00004_00002' order represents '8' with '435'
-433 435 0
c Var 'x_00004_00002' direct represents '8' with '436'
433 -435 436 0
-436 435 0
-436 -433 0
c Var 'x_00004_00002' direct represents '9' with '-435'
422 424 426 428 430 432 434 436 -435 0
c Encoding variable: x_00004_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00003' order represents '1' with '437'
c Var 'x_00004_00003' direct represents '1' with '437'
c Var 'x_00004_00003' order represents '2' with '438'
-437 438 0
c Var 'x_00004_00003' direct represents '2' with '439'
437 -438 439 0
-439 438 0
-439 -437 0
c Var 'x_00004_00003' order represents '3' with '440'
-438 440 0
c Var 'x_00004_00003' direct represents '3' with '441'
438 -440 441 0
-441 440 0
-441 -438 0
c Var 'x_00004_00003' order represents '4' with '442'
-440 442 0
c Var 'x_00004_00003' direct represents '4' with '443'
440 -442 443 0
-443 442 0
-443 -440 0
c Var 'x_00004_00003' order represents '5' with '444'
-442 444 0
c Var 'x_00004_00003' direct represents '5' with '445'
442 -444 445 0
-445 444 0
-445 -442 0
c Var 'x_00004_00003' order represents '6' with '446'
-444 446 0
c Var 'x_00004_00003' direct represents '6' with '447'
444 -446 447 0
-447 446 0
-447 -444 0
c Var 'x_00004_00003' order represents '7' with '448'
-446 448 0
c Var 'x_00004_00003' direct represents '7' with '449'
446 -448 449 0
-449 448 0
-449 -446 0
c Var 'x_00004_00003' order represents '8' with '450'
-448 450 0
c Var 'x_00004_00003' direct represents '8' with '451'
448 -450 451 0
-451 450 0
-451 -448 0
c Var 'x_00004_00003' direct represents '9' with '-450'
437 439 441 443 445 447 449 451 -450 0
c Encoding variable: x_00004_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00004' order represents '1' with '452'
c Var 'x_00004_00004' direct represents '1' with '452'
c Var 'x_00004_00004' order represents '2' with '453'
-452 453 0
c Var 'x_00004_00004' direct represents '2' with '454'
452 -453 454 0
-454 453 0
-454 -452 0
c Var 'x_00004_00004' order represents '3' with '455'
-453 455 0
c Var 'x_00004_00004' direct represents '3' with '456'
453 -455 456 0
-456 455 0
-456 -453 0
c Var 'x_00004_00004' order represents '4' with '457'
-455 457 0
c Var 'x_00004_00004' direct represents '4' with '458'
455 -457 458 0
-458 457 0
-458 -455 0
c Var 'x_00004_00004' order represents '5' with '459'
-457 459 0
c Var 'x_00004_00004' direct represents '5' with '460'
457 -459 460 0
-460 459 0
-460 -457 0
c Var 'x_00004_00004' order represents '6' with '461'
-459 461 0
c Var 'x_00004_00004' direct represents '6' with '462'
459 -461 462 0
-462 461 0
-462 -459 0
c Var 'x_00004_00004' order represents '7' with '463'
-461 463 0
c Var 'x_00004_00004' direct represents '7' with '464'
461 -463 464 0
-464 463 0
-464 -461 0
c Var 'x_00004_00004' order represents '8' with '465'
-463 465 0
c Var 'x_00004_00004' direct represents '8' with '466'
463 -465 466 0
-466 465 0
-466 -463 0
c Var 'x_00004_00004' direct represents '9' with '-465'
452 454 456 458 460 462 464 466 -465 0
c Encoding variable: x_00004_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00005' order represents '1' with '467'
c Var 'x_00004_00005' direct represents '1' with '467'
c Var 'x_00004_00005' order represents '2' with '468'
-467 468 0
c Var 'x_00004_00005' direct represents '2' with '469'
467 -468 469 0
-469 468 0
-469 -467 0
c Var 'x_00004_00005' order represents '3' with '470'
-468 470 0
c Var 'x_00004_00005' direct represents '3' with '471'
468 -470 471 0
-471 470 0
-471 -468 0
c Var 'x_00004_00005' order represents '4' with '472'
-470 472 0
c Var 'x_00004_00005' direct represents '4' with '473'
470 -472 473 0
-473 472 0
-473 -470 0
c Var 'x_00004_00005' order represents '5' with '474'
-472 474 0
c Var 'x_00004_00005' direct represents '5' with '475'
472 -474 475 0
-475 474 0
-475 -472 0
c Var 'x_00004_00005' order represents '6' with '476'
-474 476 0
c Var 'x_00004_00005' direct represents '6' with '477'
474 -476 477 0
-477 476 0
-477 -474 0
c Var 'x_00004_00005' order represents '7' with '478'
-476 478 0
c Var 'x_00004_00005' direct represents '7' with '479'
476 -478 479 0
-479 478 0
-479 -476 0
c Var 'x_00004_00005' order represents '8' with '480'
-478 480 0
c Var 'x_00004_00005' direct represents '8' with '481'
478 -480 481 0
-481 480 0
-481 -478 0
c Var 'x_00004_00005' direct represents '9' with '-480'
467 469 471 473 475 477 479 481 -480 0
c Encoding variable: x_00004_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00006' order represents '1' with '482'
c Var 'x_00004_00006' direct represents '1' with '482'
c Var 'x_00004_00006' order represents '2' with '483'
-482 483 0
c Var 'x_00004_00006' direct represents '2' with '484'
482 -483 484 0
-484 483 0
-484 -482 0
c Var 'x_00004_00006' order represents '3' with '485'
-483 485 0
c Var 'x_00004_00006' direct represents '3' with '486'
483 -485 486 0
-486 485 0
-486 -483 0
c Var 'x_00004_00006' order represents '4' with '487'
-485 487 0
c Var 'x_00004_00006' direct represents '4' with '488'
485 -487 488 0
-488 487 0
-488 -485 0
c Var 'x_00004_00006' order represents '5' with '489'
-487 489 0
c Var 'x_00004_00006' direct represents '5' with '490'
487 -489 490 0
-490 489 0
-490 -487 0
c Var 'x_00004_00006' order represents '6' with '491'
-489 491 0
c Var 'x_00004_00006' direct represents '6' with '492'
489 -491 492 0
-492 491 0
-492 -489 0
c Var 'x_00004_00006' order represents '7' with '493'
-491 493 0
c Var 'x_00004_00006' direct represents '7' with '494'
491 -493 494 0
-494 493 0
-494 -491 0
c Var 'x_00004_00006' order represents '8' with '495'
-493 495 0
c Var 'x_00004_00006' direct represents '8' with '496'
493 -495 496 0
-496 495 0
-496 -493 0
c Var 'x_00004_00006' direct represents '9' with '-495'
482 484 486 488 490 492 494 496 -495 0
c Encoding variable: x_00004_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00007' order represents '1' with '497'
c Var 'x_00004_00007' direct represents '1' with '497'
c Var 'x_00004_00007' order represents '2' with '498'
-497 498 0
c Var 'x_00004_00007' direct represents '2' with '499'
497 -498 499 0
-499 498 0
-499 -497 0
c Var 'x_00004_00007' order represents '3' with '500'
-498 500 0
c Var 'x_00004_00007' direct represents '3' with '501'
498 -500 501 0
-501 500 0
-501 -498 0
c Var 'x_00004_00007' order represents '4' with '502'
-500 502 0
c Var 'x_00004_00007' direct represents '4' with '503'
500 -502 503 0
-503 502 0
-503 -500 0
c Var 'x_00004_00007' order represents '5' with '504'
-502 504 0
c Var 'x_00004_00007' direct represents '5' with '505'
502 -504 505 0
-505 504 0
-505 -502 0
c Var 'x_00004_00007' order represents '6' with '506'
-504 506 0
c Var 'x_00004_00007' direct represents '6' with '507'
504 -506 507 0
-507 506 0
-507 -504 0
c Var 'x_00004_00007' order represents '7' with '508'
-506 508 0
c Var 'x_00004_00007' direct represents '7' with '509'
506 -508 509 0
-509 508 0
-509 -506 0
c Var 'x_00004_00007' order represents '8' with '510'
-508 510 0
c Var 'x_00004_00007' direct represents '8' with '511'
508 -510 511 0
-511 510 0
-511 -508 0
c Var 'x_00004_00007' direct represents '9' with '-510'
497 499 501 503 505 507 509 511 -510 0
c Encoding variable: x_00004_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00008' order represents '1' with '512'
c Var 'x_00004_00008' direct represents '1' with '512'
c Var 'x_00004_00008' order represents '2' with '513'
-512 513 0
c Var 'x_00004_00008' direct represents '2' with '514'
512 -513 514 0
-514 513 0
-514 -512 0
c Var 'x_00004_00008' order represents '3' with '515'
-513 515 0
c Var 'x_00004_00008' direct represents '3' with '516'
513 -515 516 0
-516 515 0
-516 -513 0
c Var 'x_00004_00008' order represents '4' with '517'
-515 517 0
c Var 'x_00004_00008' direct represents '4' with '518'
515 -517 518 0
-518 517 0
-518 -515 0
c Var 'x_00004_00008' order represents '5' with '519'
-517 519 0
c Var 'x_00004_00008' direct represents '5' with '520'
517 -519 520 0
-520 519 0
-520 -517 0
c Var 'x_00004_00008' order represents '6' with '521'
-519 521 0
c Var 'x_00004_00008' direct represents '6' with '522'
519 -521 522 0
-522 521 0
-522 -519 0
c Var 'x_00004_00008' order represents '7' with '523'
-521 523 0
c Var 'x_00004_00008' direct represents '7' with '524'
521 -523 524 0
-524 523 0
-524 -521 0
c Var 'x_00004_00008' order represents '8' with '525'
-523 525 0
c Var 'x_00004_00008' direct represents '8' with '526'
523 -525 526 0
-526 525 0
-526 -523 0
c Var 'x_00004_00008' direct represents '9' with '-525'
512 514 516 518 520 522 524 526 -525 0
c Encoding variable: x_00004_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00004_00009' order represents '1' with '527'
c Var 'x_00004_00009' direct represents '1' with '527'
c Var 'x_00004_00009' order represents '2' with '528'
-527 528 0
c Var 'x_00004_00009' direct represents '2' with '529'
527 -528 529 0
-529 528 0
-529 -527 0
c Var 'x_00004_00009' order represents '3' with '530'
-528 530 0
c Var 'x_00004_00009' direct represents '3' with '531'
528 -530 531 0
-531 530 0
-531 -528 0
c Var 'x_00004_00009' order represents '4' with '532'
-530 532 0
c Var 'x_00004_00009' direct represents '4' with '533'
530 -532 533 0
-533 532 0
-533 -530 0
c Var 'x_00004_00009' order represents '5' with '534'
-532 534 0
c Var 'x_00004_00009' direct represents '5' with '535'
532 -534 535 0
-535 534 0
-535 -532 0
c Var 'x_00004_00009' order represents '6' with '536'
-534 536 0
c Var 'x_00004_00009' direct represents '6' with '537'
534 -536 537 0
-537 536 0
-537 -534 0
c Var 'x_00004_00009' order represents '7' with '538'
-536 538 0
c Var 'x_00004_00009' direct represents '7' with '539'
536 -538 539 0
-539 538 0
-539 -536 0
c Var 'x_00004_00009' order represents '8' with '540'
-538 540 0
c Var 'x_00004_00009' direct represents '8' with '541'
538 -540 541 0
-541 540 0
-541 -538 0
c Var 'x_00004_00009' direct represents '9' with '-540'
527 529 531 533 535 537 539 541 -540 0
c Encoding variable: x_00005_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00001' order represents '1' with '542'
c Var 'x_00005_00001' direct represents '1' with '542'
c Var 'x_00005_00001' order represents '2' with '543'
-542 543 0
c Var 'x_00005_00001' direct represents '2' with '544'
542 -543 544 0
-544 543 0
-544 -542 0
c Var 'x_00005_00001' order represents '3' with '545'
-543 545 0
c Var 'x_00005_00001' direct represents '3' with '546'
543 -545 546 0
-546 545 0
-546 -543 0
c Var 'x_00005_00001' order represents '4' with '547'
-545 547 0
c Var 'x_00005_00001' direct represents '4' with '548'
545 -547 548 0
-548 547 0
-548 -545 0
c Var 'x_00005_00001' order represents '5' with '549'
-547 549 0
c Var 'x_00005_00001' direct represents '5' with '550'
547 -549 550 0
-550 549 0
-550 -547 0
c Var 'x_00005_00001' order represents '6' with '551'
-549 551 0
c Var 'x_00005_00001' direct represents '6' with '552'
549 -551 552 0
-552 551 0
-552 -549 0
c Var 'x_00005_00001' order represents '7' with '553'
-551 553 0
c Var 'x_00005_00001' direct represents '7' with '554'
551 -553 554 0
-554 553 0
-554 -551 0
c Var 'x_00005_00001' order represents '8' with '555'
-553 555 0
c Var 'x_00005_00001' direct represents '8' with '556'
553 -555 556 0
-556 555 0
-556 -553 0
c Var 'x_00005_00001' direct represents '9' with '-555'
542 544 546 548 550 552 554 556 -555 0
c Encoding variable: x_00005_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00002' order represents '1' with '557'
c Var 'x_00005_00002' direct represents '1' with '557'
c Var 'x_00005_00002' order represents '2' with '558'
-557 558 0
c Var 'x_00005_00002' direct represents '2' with '559'
557 -558 559 0
-559 558 0
-559 -557 0
c Var 'x_00005_00002' order represents '3' with '560'
-558 560 0
c Var 'x_00005_00002' direct represents '3' with '561'
558 -560 561 0
-561 560 0
-561 -558 0
c Var 'x_00005_00002' order represents '4' with '562'
-560 562 0
c Var 'x_00005_00002' direct represents '4' with '563'
560 -562 563 0
-563 562 0
-563 -560 0
c Var 'x_00005_00002' order represents '5' with '564'
-562 564 0
c Var 'x_00005_00002' direct represents '5' with '565'
562 -564 565 0
-565 564 0
-565 -562 0
c Var 'x_00005_00002' order represents '6' with '566'
-564 566 0
c Var 'x_00005_00002' direct represents '6' with '567'
564 -566 567 0
-567 566 0
-567 -564 0
c Var 'x_00005_00002' order represents '7' with '568'
-566 568 0
c Var 'x_00005_00002' direct represents '7' with '569'
566 -568 569 0
-569 568 0
-569 -566 0
c Var 'x_00005_00002' order represents '8' with '570'
-568 570 0
c Var 'x_00005_00002' direct represents '8' with '571'
568 -570 571 0
-571 570 0
-571 -568 0
c Var 'x_00005_00002' direct represents '9' with '-570'
557 559 561 563 565 567 569 571 -570 0
c Encoding variable: x_00005_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00003' order represents '1' with '572'
c Var 'x_00005_00003' direct represents '1' with '572'
c Var 'x_00005_00003' order represents '2' with '573'
-572 573 0
c Var 'x_00005_00003' direct represents '2' with '574'
572 -573 574 0
-574 573 0
-574 -572 0
c Var 'x_00005_00003' order represents '3' with '575'
-573 575 0
c Var 'x_00005_00003' direct represents '3' with '576'
573 -575 576 0
-576 575 0
-576 -573 0
c Var 'x_00005_00003' order represents '4' with '577'
-575 577 0
c Var 'x_00005_00003' direct represents '4' with '578'
575 -577 578 0
-578 577 0
-578 -575 0
c Var 'x_00005_00003' order represents '5' with '579'
-577 579 0
c Var 'x_00005_00003' direct represents '5' with '580'
577 -579 580 0
-580 579 0
-580 -577 0
c Var 'x_00005_00003' order represents '6' with '581'
-579 581 0
c Var 'x_00005_00003' direct represents '6' with '582'
579 -581 582 0
-582 581 0
-582 -579 0
c Var 'x_00005_00003' order represents '7' with '583'
-581 583 0
c Var 'x_00005_00003' direct represents '7' with '584'
581 -583 584 0
-584 583 0
-584 -581 0
c Var 'x_00005_00003' order represents '8' with '585'
-583 585 0
c Var 'x_00005_00003' direct represents '8' with '586'
583 -585 586 0
-586 585 0
-586 -583 0
c Var 'x_00005_00003' direct represents '9' with '-585'
572 574 576 578 580 582 584 586 -585 0
c Encoding variable: x_00005_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00004' order represents '1' with '587'
c Var 'x_00005_00004' direct represents '1' with '587'
c Var 'x_00005_00004' order represents '2' with '588'
-587 588 0
c Var 'x_00005_00004' direct represents '2' with '589'
587 -588 589 0
-589 588 0
-589 -587 0
c Var 'x_00005_00004' order represents '3' with '590'
-588 590 0
c Var 'x_00005_00004' direct represents '3' with '591'
588 -590 591 0
-591 590 0
-591 -588 0
c Var 'x_00005_00004' order represents '4' with '592'
-590 592 0
c Var 'x_00005_00004' direct represents '4' with '593'
590 -592 593 0
-593 592 0
-593 -590 0
c Var 'x_00005_00004' order represents '5' with '594'
-592 594 0
c Var 'x_00005_00004' direct represents '5' with '595'
592 -594 595 0
-595 594 0
-595 -592 0
c Var 'x_00005_00004' order represents '6' with '596'
-594 596 0
c Var 'x_00005_00004' direct represents '6' with '597'
594 -596 597 0
-597 596 0
-597 -594 0
c Var 'x_00005_00004' order represents '7' with '598'
-596 598 0
c Var 'x_00005_00004' direct represents '7' with '599'
596 -598 599 0
-599 598 0
-599 -596 0
c Var 'x_00005_00004' order represents '8' with '600'
-598 600 0
c Var 'x_00005_00004' direct represents '8' with '601'
598 -600 601 0
-601 600 0
-601 -598 0
c Var 'x_00005_00004' direct represents '9' with '-600'
587 589 591 593 595 597 599 601 -600 0
c Encoding variable: x_00005_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00005' order represents '1' with '602'
c Var 'x_00005_00005' direct represents '1' with '602'
c Var 'x_00005_00005' order represents '2' with '603'
-602 603 0
c Var 'x_00005_00005' direct represents '2' with '604'
602 -603 604 0
-604 603 0
-604 -602 0
c Var 'x_00005_00005' order represents '3' with '605'
-603 605 0
c Var 'x_00005_00005' direct represents '3' with '606'
603 -605 606 0
-606 605 0
-606 -603 0
c Var 'x_00005_00005' order represents '4' with '607'
-605 607 0
c Var 'x_00005_00005' direct represents '4' with '608'
605 -607 608 0
-608 607 0
-608 -605 0
c Var 'x_00005_00005' order represents '5' with '609'
-607 609 0
c Var 'x_00005_00005' direct represents '5' with '610'
607 -609 610 0
-610 609 0
-610 -607 0
c Var 'x_00005_00005' order represents '6' with '611'
-609 611 0
c Var 'x_00005_00005' direct represents '6' with '612'
609 -611 612 0
-612 611 0
-612 -609 0
c Var 'x_00005_00005' order represents '7' with '613'
-611 613 0
c Var 'x_00005_00005' direct represents '7' with '614'
611 -613 614 0
-614 613 0
-614 -611 0
c Var 'x_00005_00005' order represents '8' with '615'
-613 615 0
c Var 'x_00005_00005' direct represents '8' with '616'
613 -615 616 0
-616 615 0
-616 -613 0
c Var 'x_00005_00005' direct represents '9' with '-615'
602 604 606 608 610 612 614 616 -615 0
c Encoding variable: x_00005_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00006' order represents '1' with '617'
c Var 'x_00005_00006' direct represents '1' with '617'
c Var 'x_00005_00006' order represents '2' with '618'
-617 618 0
c Var 'x_00005_00006' direct represents '2' with '619'
617 -618 619 0
-619 618 0
-619 -617 0
c Var 'x_00005_00006' order represents '3' with '620'
-618 620 0
c Var 'x_00005_00006' direct represents '3' with '621'
618 -620 621 0
-621 620 0
-621 -618 0
c Var 'x_00005_00006' order represents '4' with '622'
-620 622 0
c Var 'x_00005_00006' direct represents '4' with '623'
620 -622 623 0
-623 622 0
-623 -620 0
c Var 'x_00005_00006' order represents '5' with '624'
-622 624 0
c Var 'x_00005_00006' direct represents '5' with '625'
622 -624 625 0
-625 624 0
-625 -622 0
c Var 'x_00005_00006' order represents '6' with '626'
-624 626 0
c Var 'x_00005_00006' direct represents '6' with '627'
624 -626 627 0
-627 626 0
-627 -624 0
c Var 'x_00005_00006' order represents '7' with '628'
-626 628 0
c Var 'x_00005_00006' direct represents '7' with '629'
626 -628 629 0
-629 628 0
-629 -626 0
c Var 'x_00005_00006' order represents '8' with '630'
-628 630 0
c Var 'x_00005_00006' direct represents '8' with '631'
628 -630 631 0
-631 630 0
-631 -628 0
c Var 'x_00005_00006' direct represents '9' with '-630'
617 619 621 623 625 627 629 631 -630 0
c Encoding variable: x_00005_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00007' order represents '1' with '632'
c Var 'x_00005_00007' direct represents '1' with '632'
c Var 'x_00005_00007' order represents '2' with '633'
-632 633 0
c Var 'x_00005_00007' direct represents '2' with '634'
632 -633 634 0
-634 633 0
-634 -632 0
c Var 'x_00005_00007' order represents '3' with '635'
-633 635 0
c Var 'x_00005_00007' direct represents '3' with '636'
633 -635 636 0
-636 635 0
-636 -633 0
c Var 'x_00005_00007' order represents '4' with '637'
-635 637 0
c Var 'x_00005_00007' direct represents '4' with '638'
635 -637 638 0
-638 637 0
-638 -635 0
c Var 'x_00005_00007' order represents '5' with '639'
-637 639 0
c Var 'x_00005_00007' direct represents '5' with '640'
637 -639 640 0
-640 639 0
-640 -637 0
c Var 'x_00005_00007' order represents '6' with '641'
-639 641 0
c Var 'x_00005_00007' direct represents '6' with '642'
639 -641 642 0
-642 641 0
-642 -639 0
c Var 'x_00005_00007' order represents '7' with '643'
-641 643 0
c Var 'x_00005_00007' direct represents '7' with '644'
641 -643 644 0
-644 643 0
-644 -641 0
c Var 'x_00005_00007' order represents '8' with '645'
-643 645 0
c Var 'x_00005_00007' direct represents '8' with '646'
643 -645 646 0
-646 645 0
-646 -643 0
c Var 'x_00005_00007' direct represents '9' with '-645'
632 634 636 638 640 642 644 646 -645 0
c Encoding variable: x_00005_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00008' order represents '1' with '647'
c Var 'x_00005_00008' direct represents '1' with '647'
c Var 'x_00005_00008' order represents '2' with '648'
-647 648 0
c Var 'x_00005_00008' direct represents '2' with '649'
647 -648 649 0
-649 648 0
-649 -647 0
c Var 'x_00005_00008' order represents '3' with '650'
-648 650 0
c Var 'x_00005_00008' direct represents '3' with '651'
648 -650 651 0
-651 650 0
-651 -648 0
c Var 'x_00005_00008' order represents '4' with '652'
-650 652 0
c Var 'x_00005_00008' direct represents '4' with '653'
650 -652 653 0
-653 652 0
-653 -650 0
c Var 'x_00005_00008' order represents '5' with '654'
-652 654 0
c Var 'x_00005_00008' direct represents '5' with '655'
652 -654 655 0
-655 654 0
-655 -652 0
c Var 'x_00005_00008' order represents '6' with '656'
-654 656 0
c Var 'x_00005_00008' direct represents '6' with '657'
654 -656 657 0
-657 656 0
-657 -654 0
c Var 'x_00005_00008' order represents '7' with '658'
-656 658 0
c Var 'x_00005_00008' direct represents '7' with '659'
656 -658 659 0
-659 658 0
-659 -656 0
c Var 'x_00005_00008' order represents '8' with '660'
-658 660 0
c Var 'x_00005_00008' direct represents '8' with '661'
658 -660 661 0
-661 660 0
-661 -658 0
c Var 'x_00005_00008' direct represents '9' with '-660'
647 649 651 653 655 657 659 661 -660 0
c Encoding variable: x_00005_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00005_00009' order represents '1' with '662'
c Var 'x_00005_00009' direct represents '1' with '662'
c Var 'x_00005_00009' order represents '2' with '663'
-662 663 0
c Var 'x_00005_00009' direct represents '2' with '664'
662 -663 664 0
-664 663 0
-664 -662 0
c Var 'x_00005_00009' order represents '3' with '665'
-663 665 0
c Var 'x_00005_00009' direct represents '3' with '666'
663 -665 666 0
-666 665 0
-666 -663 0
c Var 'x_00005_00009' order represents '4' with '667'
-665 667 0
c Var 'x_00005_00009' direct represents '4' with '668'
665 -667 668 0
-668 667 0
-668 -665 0
c Var 'x_00005_00009' order represents '5' with '669'
-667 669 0
c Var 'x_00005_00009' direct represents '5' with '670'
667 -669 670 0
-670 669 0
-670 -667 0
c Var 'x_00005_00009' order represents '6' with '671'
-669 671 0
c Var 'x_00005_00009' direct represents '6' with '672'
669 -671 672 0
-672 671 0
-672 -669 0
c Var 'x_00005_00009' order represents '7' with '673'
-671 673 0
c Var 'x_00005_00009' direct represents '7' with '674'
671 -673 674 0
-674 673 0
-674 -671 0
c Var 'x_00005_00009' order represents '8' with '675'
-673 675 0
c Var 'x_00005_00009' direct represents '8' with '676'
673 -675 676 0
-676 675 0
-676 -673 0
c Var 'x_00005_00009' direct represents '9' with '-675'
662 664 666 668 670 672 674 676 -675 0
c Encoding variable: x_00006_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00001' order represents '1' with '677'
c Var 'x_00006_00001' direct represents '1' with '677'
c Var 'x_00006_00001' order represents '2' with '678'
-677 678 0
c Var 'x_00006_00001' direct represents '2' with '679'
677 -678 679 0
-679 678 0
-679 -677 0
c Var 'x_00006_00001' order represents '3' with '680'
-678 680 0
c Var 'x_00006_00001' direct represents '3' with '681'
678 -680 681 0
-681 680 0
-681 -678 0
c Var 'x_00006_00001' order represents '4' with '682'
-680 682 0
c Var 'x_00006_00001' direct represents '4' with '683'
680 -682 683 0
-683 682 0
-683 -680 0
c Var 'x_00006_00001' order represents '5' with '684'
-682 684 0
c Var 'x_00006_00001' direct represents '5' with '685'
682 -684 685 0
-685 684 0
-685 -682 0
c Var 'x_00006_00001' order represents '6' with '686'
-684 686 0
c Var 'x_00006_00001' direct represents '6' with '687'
684 -686 687 0
-687 686 0
-687 -684 0
c Var 'x_00006_00001' order represents '7' with '688'
-686 688 0
c Var 'x_00006_00001' direct represents '7' with '689'
686 -688 689 0
-689 688 0
-689 -686 0
c Var 'x_00006_00001' order represents '8' with '690'
-688 690 0
c Var 'x_00006_00001' direct represents '8' with '691'
688 -690 691 0
-691 690 0
-691 -688 0
c Var 'x_00006_00001' direct represents '9' with '-690'
677 679 681 683 685 687 689 691 -690 0
c Encoding variable: x_00006_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00002' order represents '1' with '692'
c Var 'x_00006_00002' direct represents '1' with '692'
c Var 'x_00006_00002' order represents '2' with '693'
-692 693 0
c Var 'x_00006_00002' direct represents '2' with '694'
692 -693 694 0
-694 693 0
-694 -692 0
c Var 'x_00006_00002' order represents '3' with '695'
-693 695 0
c Var 'x_00006_00002' direct represents '3' with '696'
693 -695 696 0
-696 695 0
-696 -693 0
c Var 'x_00006_00002' order represents '4' with '697'
-695 697 0
c Var 'x_00006_00002' direct represents '4' with '698'
695 -697 698 0
-698 697 0
-698 -695 0
c Var 'x_00006_00002' order represents '5' with '699'
-697 699 0
c Var 'x_00006_00002' direct represents '5' with '700'
697 -699 700 0
-700 699 0
-700 -697 0
c Var 'x_00006_00002' order represents '6' with '701'
-699 701 0
c Var 'x_00006_00002' direct represents '6' with '702'
699 -701 702 0
-702 701 0
-702 -699 0
c Var 'x_00006_00002' order represents '7' with '703'
-701 703 0
c Var 'x_00006_00002' direct represents '7' with '704'
701 -703 704 0
-704 703 0
-704 -701 0
c Var 'x_00006_00002' order represents '8' with '705'
-703 705 0
c Var 'x_00006_00002' direct represents '8' with '706'
703 -705 706 0
-706 705 0
-706 -703 0
c Var 'x_00006_00002' direct represents '9' with '-705'
692 694 696 698 700 702 704 706 -705 0
c Encoding variable: x_00006_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00003' order represents '1' with '707'
c Var 'x_00006_00003' direct represents '1' with '707'
c Var 'x_00006_00003' order represents '2' with '708'
-707 708 0
c Var 'x_00006_00003' direct represents '2' with '709'
707 -708 709 0
-709 708 0
-709 -707 0
c Var 'x_00006_00003' order represents '3' with '710'
-708 710 0
c Var 'x_00006_00003' direct represents '3' with '711'
708 -710 711 0
-711 710 0
-711 -708 0
c Var 'x_00006_00003' order represents '4' with '712'
-710 712 0
c Var 'x_00006_00003' direct represents '4' with '713'
710 -712 713 0
-713 712 0
-713 -710 0
c Var 'x_00006_00003' order represents '5' with '714'
-712 714 0
c Var 'x_00006_00003' direct represents '5' with '715'
712 -714 715 0
-715 714 0
-715 -712 0
c Var 'x_00006_00003' order represents '6' with '716'
-714 716 0
c Var 'x_00006_00003' direct represents '6' with '717'
714 -716 717 0
-717 716 0
-717 -714 0
c Var 'x_00006_00003' order represents '7' with '718'
-716 718 0
c Var 'x_00006_00003' direct represents '7' with '719'
716 -718 719 0
-719 718 0
-719 -716 0
c Var 'x_00006_00003' order represents '8' with '720'
-718 720 0
c Var 'x_00006_00003' direct represents '8' with '721'
718 -720 721 0
-721 720 0
-721 -718 0
c Var 'x_00006_00003' direct represents '9' with '-720'
707 709 711 713 715 717 719 721 -720 0
c Encoding variable: x_00006_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00004' order represents '1' with '722'
c Var 'x_00006_00004' direct represents '1' with '722'
c Var 'x_00006_00004' order represents '2' with '723'
-722 723 0
c Var 'x_00006_00004' direct represents '2' with '724'
722 -723 724 0
-724 723 0
-724 -722 0
c Var 'x_00006_00004' order represents '3' with '725'
-723 725 0
c Var 'x_00006_00004' direct represents '3' with '726'
723 -725 726 0
-726 725 0
-726 -723 0
c Var 'x_00006_00004' order represents '4' with '727'
-725 727 0
c Var 'x_00006_00004' direct represents '4' with '728'
725 -727 728 0
-728 727 0
-728 -725 0
c Var 'x_00006_00004' order represents '5' with '729'
-727 729 0
c Var 'x_00006_00004' direct represents '5' with '730'
727 -729 730 0
-730 729 0
-730 -727 0
c Var 'x_00006_00004' order represents '6' with '731'
-729 731 0
c Var 'x_00006_00004' direct represents '6' with '732'
729 -731 732 0
-732 731 0
-732 -729 0
c Var 'x_00006_00004' order represents '7' with '733'
-731 733 0
c Var 'x_00006_00004' direct represents '7' with '734'
731 -733 734 0
-734 733 0
-734 -731 0
c Var 'x_00006_00004' order represents '8' with '735'
-733 735 0
c Var 'x_00006_00004' direct represents '8' with '736'
733 -735 736 0
-736 735 0
-736 -733 0
c Var 'x_00006_00004' direct represents '9' with '-735'
722 724 726 728 730 732 734 736 -735 0
c Encoding variable: x_00006_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00005' order represents '1' with '737'
c Var 'x_00006_00005' direct represents '1' with '737'
c Var 'x_00006_00005' order represents '2' with '738'
-737 738 0
c Var 'x_00006_00005' direct represents '2' with '739'
737 -738 739 0
-739 738 0
-739 -737 0
c Var 'x_00006_00005' order represents '3' with '740'
-738 740 0
c Var 'x_00006_00005' direct represents '3' with '741'
738 -740 741 0
-741 740 0
-741 -738 0
c Var 'x_00006_00005' order represents '4' with '742'
-740 742 0
c Var 'x_00006_00005' direct represents '4' with '743'
740 -742 743 0
-743 742 0
-743 -740 0
c Var 'x_00006_00005' order represents '5' with '744'
-742 744 0
c Var 'x_00006_00005' direct represents '5' with '745'
742 -744 745 0
-745 744 0
-745 -742 0
c Var 'x_00006_00005' order represents '6' with '746'
-744 746 0
c Var 'x_00006_00005' direct represents '6' with '747'
744 -746 747 0
-747 746 0
-747 -744 0
c Var 'x_00006_00005' order represents '7' with '748'
-746 748 0
c Var 'x_00006_00005' direct represents '7' with '749'
746 -748 749 0
-749 748 0
-749 -746 0
c Var 'x_00006_00005' order represents '8' with '750'
-748 750 0
c Var 'x_00006_00005' direct represents '8' with '751'
748 -750 751 0
-751 750 0
-751 -748 0
c Var 'x_00006_00005' direct represents '9' with '-750'
737 739 741 743 745 747 749 751 -750 0
c Encoding variable: x_00006_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00006' order represents '1' with '752'
c Var 'x_00006_00006' direct represents '1' with '752'
c Var 'x_00006_00006' order represents '2' with '753'
-752 753 0
c Var 'x_00006_00006' direct represents '2' with '754'
752 -753 754 0
-754 753 0
-754 -752 0
c Var 'x_00006_00006' order represents '3' with '755'
-753 755 0
c Var 'x_00006_00006' direct represents '3' with '756'
753 -755 756 0
-756 755 0
-756 -753 0
c Var 'x_00006_00006' order represents '4' with '757'
-755 757 0
c Var 'x_00006_00006' direct represents '4' with '758'
755 -757 758 0
-758 757 0
-758 -755 0
c Var 'x_00006_00006' order represents '5' with '759'
-757 759 0
c Var 'x_00006_00006' direct represents '5' with '760'
757 -759 760 0
-760 759 0
-760 -757 0
c Var 'x_00006_00006' order represents '6' with '761'
-759 761 0
c Var 'x_00006_00006' direct represents '6' with '762'
759 -761 762 0
-762 761 0
-762 -759 0
c Var 'x_00006_00006' order represents '7' with '763'
-761 763 0
c Var 'x_00006_00006' direct represents '7' with '764'
761 -763 764 0
-764 763 0
-764 -761 0
c Var 'x_00006_00006' order represents '8' with '765'
-763 765 0
c Var 'x_00006_00006' direct represents '8' with '766'
763 -765 766 0
-766 765 0
-766 -763 0
c Var 'x_00006_00006' direct represents '9' with '-765'
752 754 756 758 760 762 764 766 -765 0
c Encoding variable: x_00006_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00007' order represents '1' with '767'
c Var 'x_00006_00007' direct represents '1' with '767'
c Var 'x_00006_00007' order represents '2' with '768'
-767 768 0
c Var 'x_00006_00007' direct represents '2' with '769'
767 -768 769 0
-769 768 0
-769 -767 0
c Var 'x_00006_00007' order represents '3' with '770'
-768 770 0
c Var 'x_00006_00007' direct represents '3' with '771'
768 -770 771 0
-771 770 0
-771 -768 0
c Var 'x_00006_00007' order represents '4' with '772'
-770 772 0
c Var 'x_00006_00007' direct represents '4' with '773'
770 -772 773 0
-773 772 0
-773 -770 0
c Var 'x_00006_00007' order represents '5' with '774'
-772 774 0
c Var 'x_00006_00007' direct represents '5' with '775'
772 -774 775 0
-775 774 0
-775 -772 0
c Var 'x_00006_00007' order represents '6' with '776'
-774 776 0
c Var 'x_00006_00007' direct represents '6' with '777'
774 -776 777 0
-777 776 0
-777 -774 0
c Var 'x_00006_00007' order represents '7' with '778'
-776 778 0
c Var 'x_00006_00007' direct represents '7' with '779'
776 -778 779 0
-779 778 0
-779 -776 0
c Var 'x_00006_00007' order represents '8' with '780'
-778 780 0
c Var 'x_00006_00007' direct represents '8' with '781'
778 -780 781 0
-781 780 0
-781 -778 0
c Var 'x_00006_00007' direct represents '9' with '-780'
767 769 771 773 775 777 779 781 -780 0
c Encoding variable: x_00006_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00008' order represents '1' with '782'
c Var 'x_00006_00008' direct represents '1' with '782'
c Var 'x_00006_00008' order represents '2' with '783'
-782 783 0
c Var 'x_00006_00008' direct represents '2' with '784'
782 -783 784 0
-784 783 0
-784 -782 0
c Var 'x_00006_00008' order represents '3' with '785'
-783 785 0
c Var 'x_00006_00008' direct represents '3' with '786'
783 -785 786 0
-786 785 0
-786 -783 0
c Var 'x_00006_00008' order represents '4' with '787'
-785 787 0
c Var 'x_00006_00008' direct represents '4' with '788'
785 -787 788 0
-788 787 0
-788 -785 0
c Var 'x_00006_00008' order represents '5' with '789'
-787 789 0
c Var 'x_00006_00008' direct represents '5' with '790'
787 -789 790 0
-790 789 0
-790 -787 0
c Var 'x_00006_00008' order represents '6' with '791'
-789 791 0
c Var 'x_00006_00008' direct represents '6' with '792'
789 -791 792 0
-792 791 0
-792 -789 0
c Var 'x_00006_00008' order represents '7' with '793'
-791 793 0
c Var 'x_00006_00008' direct represents '7' with '794'
791 -793 794 0
-794 793 0
-794 -791 0
c Var 'x_00006_00008' order represents '8' with '795'
-793 795 0
c Var 'x_00006_00008' direct represents '8' with '796'
793 -795 796 0
-796 795 0
-796 -793 0
c Var 'x_00006_00008' direct represents '9' with '-795'
782 784 786 788 790 792 794 796 -795 0
c Encoding variable: x_00006_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00006_00009' order represents '1' with '797'
c Var 'x_00006_00009' direct represents '1' with '797'
c Var 'x_00006_00009' order represents '2' with '798'
-797 798 0
c Var 'x_00006_00009' direct represents '2' with '799'
797 -798 799 0
-799 798 0
-799 -797 0
c Var 'x_00006_00009' order represents '3' with '800'
-798 800 0
c Var 'x_00006_00009' direct represents '3' with '801'
798 -800 801 0
-801 800 0
-801 -798 0
c Var 'x_00006_00009' order represents '4' with '802'
-800 802 0
c Var 'x_00006_00009' direct represents '4' with '803'
800 -802 803 0
-803 802 0
-803 -800 0
c Var 'x_00006_00009' order represents '5' with '804'
-802 804 0
c Var 'x_00006_00009' direct represents '5' with '805'
802 -804 805 0
-805 804 0
-805 -802 0
c Var 'x_00006_00009' order represents '6' with '806'
-804 806 0
c Var 'x_00006_00009' direct represents '6' with '807'
804 -806 807 0
-807 806 0
-807 -804 0
c Var 'x_00006_00009' order represents '7' with '808'
-806 808 0
c Var 'x_00006_00009' direct represents '7' with '809'
806 -808 809 0
-809 808 0
-809 -806 0
c Var 'x_00006_00009' order represents '8' with '810'
-808 810 0
c Var 'x_00006_00009' direct represents '8' with '811'
808 -810 811 0
-811 810 0
-811 -808 0
c Var 'x_00006_00009' direct represents '9' with '-810'
797 799 801 803 805 807 809 811 -810 0
c Encoding variable: x_00007_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00001' order represents '1' with '812'
c Var 'x_00007_00001' direct represents '1' with '812'
c Var 'x_00007_00001' order represents '2' with '813'
-812 813 0
c Var 'x_00007_00001' direct represents '2' with '814'
812 -813 814 0
-814 813 0
-814 -812 0
c Var 'x_00007_00001' order represents '3' with '815'
-813 815 0
c Var 'x_00007_00001' direct represents '3' with '816'
813 -815 816 0
-816 815 0
-816 -813 0
c Var 'x_00007_00001' order represents '4' with '817'
-815 817 0
c Var 'x_00007_00001' direct represents '4' with '818'
815 -817 818 0
-818 817 0
-818 -815 0
c Var 'x_00007_00001' order represents '5' with '819'
-817 819 0
c Var 'x_00007_00001' direct represents '5' with '820'
817 -819 820 0
-820 819 0
-820 -817 0
c Var 'x_00007_00001' order represents '6' with '821'
-819 821 0
c Var 'x_00007_00001' direct represents '6' with '822'
819 -821 822 0
-822 821 0
-822 -819 0
c Var 'x_00007_00001' order represents '7' with '823'
-821 823 0
c Var 'x_00007_00001' direct represents '7' with '824'
821 -823 824 0
-824 823 0
-824 -821 0
c Var 'x_00007_00001' order represents '8' with '825'
-823 825 0
c Var 'x_00007_00001' direct represents '8' with '826'
823 -825 826 0
-826 825 0
-826 -823 0
c Var 'x_00007_00001' direct represents '9' with '-825'
812 814 816 818 820 822 824 826 -825 0
c Encoding variable: x_00007_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00002' order represents '1' with '827'
c Var 'x_00007_00002' direct represents '1' with '827'
c Var 'x_00007_00002' order represents '2' with '828'
-827 828 0
c Var 'x_00007_00002' direct represents '2' with '829'
827 -828 829 0
-829 828 0
-829 -827 0
c Var 'x_00007_00002' order represents '3' with '830'
-828 830 0
c Var 'x_00007_00002' direct represents '3' with '831'
828 -830 831 0
-831 830 0
-831 -828 0
c Var 'x_00007_00002' order represents '4' with '832'
-830 832 0
c Var 'x_00007_00002' direct represents '4' with '833'
830 -832 833 0
-833 832 0
-833 -830 0
c Var 'x_00007_00002' order represents '5' with '834'
-832 834 0
c Var 'x_00007_00002' direct represents '5' with '835'
832 -834 835 0
-835 834 0
-835 -832 0
c Var 'x_00007_00002' order represents '6' with '836'
-834 836 0
c Var 'x_00007_00002' direct represents '6' with '837'
834 -836 837 0
-837 836 0
-837 -834 0
c Var 'x_00007_00002' order represents '7' with '838'
-836 838 0
c Var 'x_00007_00002' direct represents '7' with '839'
836 -838 839 0
-839 838 0
-839 -836 0
c Var 'x_00007_00002' order represents '8' with '840'
-838 840 0
c Var 'x_00007_00002' direct represents '8' with '841'
838 -840 841 0
-841 840 0
-841 -838 0
c Var 'x_00007_00002' direct represents '9' with '-840'
827 829 831 833 835 837 839 841 -840 0
c Encoding variable: x_00007_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00003' order represents '1' with '842'
c Var 'x_00007_00003' direct represents '1' with '842'
c Var 'x_00007_00003' order represents '2' with '843'
-842 843 0
c Var 'x_00007_00003' direct represents '2' with '844'
842 -843 844 0
-844 843 0
-844 -842 0
c Var 'x_00007_00003' order represents '3' with '845'
-843 845 0
c Var 'x_00007_00003' direct represents '3' with '846'
843 -845 846 0
-846 845 0
-846 -843 0
c Var 'x_00007_00003' order represents '4' with '847'
-845 847 0
c Var 'x_00007_00003' direct represents '4' with '848'
845 -847 848 0
-848 847 0
-848 -845 0
c Var 'x_00007_00003' order represents '5' with '849'
-847 849 0
c Var 'x_00007_00003' direct represents '5' with '850'
847 -849 850 0
-850 849 0
-850 -847 0
c Var 'x_00007_00003' order represents '6' with '851'
-849 851 0
c Var 'x_00007_00003' direct represents '6' with '852'
849 -851 852 0
-852 851 0
-852 -849 0
c Var 'x_00007_00003' order represents '7' with '853'
-851 853 0
c Var 'x_00007_00003' direct represents '7' with '854'
851 -853 854 0
-854 853 0
-854 -851 0
c Var 'x_00007_00003' order represents '8' with '855'
-853 855 0
c Var 'x_00007_00003' direct represents '8' with '856'
853 -855 856 0
-856 855 0
-856 -853 0
c Var 'x_00007_00003' direct represents '9' with '-855'
842 844 846 848 850 852 854 856 -855 0
c Encoding variable: x_00007_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00004' order represents '1' with '857'
c Var 'x_00007_00004' direct represents '1' with '857'
c Var 'x_00007_00004' order represents '2' with '858'
-857 858 0
c Var 'x_00007_00004' direct represents '2' with '859'
857 -858 859 0
-859 858 0
-859 -857 0
c Var 'x_00007_00004' order represents '3' with '860'
-858 860 0
c Var 'x_00007_00004' direct represents '3' with '861'
858 -860 861 0
-861 860 0
-861 -858 0
c Var 'x_00007_00004' order represents '4' with '862'
-860 862 0
c Var 'x_00007_00004' direct represents '4' with '863'
860 -862 863 0
-863 862 0
-863 -860 0
c Var 'x_00007_00004' order represents '5' with '864'
-862 864 0
c Var 'x_00007_00004' direct represents '5' with '865'
862 -864 865 0
-865 864 0
-865 -862 0
c Var 'x_00007_00004' order represents '6' with '866'
-864 866 0
c Var 'x_00007_00004' direct represents '6' with '867'
864 -866 867 0
-867 866 0
-867 -864 0
c Var 'x_00007_00004' order represents '7' with '868'
-866 868 0
c Var 'x_00007_00004' direct represents '7' with '869'
866 -868 869 0
-869 868 0
-869 -866 0
c Var 'x_00007_00004' order represents '8' with '870'
-868 870 0
c Var 'x_00007_00004' direct represents '8' with '871'
868 -870 871 0
-871 870 0
-871 -868 0
c Var 'x_00007_00004' direct represents '9' with '-870'
857 859 861 863 865 867 869 871 -870 0
c Encoding variable: x_00007_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00005' order represents '1' with '872'
c Var 'x_00007_00005' direct represents '1' with '872'
c Var 'x_00007_00005' order represents '2' with '873'
-872 873 0
c Var 'x_00007_00005' direct represents '2' with '874'
872 -873 874 0
-874 873 0
-874 -872 0
c Var 'x_00007_00005' order represents '3' with '875'
-873 875 0
c Var 'x_00007_00005' direct represents '3' with '876'
873 -875 876 0
-876 875 0
-876 -873 0
c Var 'x_00007_00005' order represents '4' with '877'
-875 877 0
c Var 'x_00007_00005' direct represents '4' with '878'
875 -877 878 0
-878 877 0
-878 -875 0
c Var 'x_00007_00005' order represents '5' with '879'
-877 879 0
c Var 'x_00007_00005' direct represents '5' with '880'
877 -879 880 0
-880 879 0
-880 -877 0
c Var 'x_00007_00005' order represents '6' with '881'
-879 881 0
c Var 'x_00007_00005' direct represents '6' with '882'
879 -881 882 0
-882 881 0
-882 -879 0
c Var 'x_00007_00005' order represents '7' with '883'
-881 883 0
c Var 'x_00007_00005' direct represents '7' with '884'
881 -883 884 0
-884 883 0
-884 -881 0
c Var 'x_00007_00005' order represents '8' with '885'
-883 885 0
c Var 'x_00007_00005' direct represents '8' with '886'
883 -885 886 0
-886 885 0
-886 -883 0
c Var 'x_00007_00005' direct represents '9' with '-885'
872 874 876 878 880 882 884 886 -885 0
c Encoding variable: x_00007_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00006' order represents '1' with '887'
c Var 'x_00007_00006' direct represents '1' with '887'
c Var 'x_00007_00006' order represents '2' with '888'
-887 888 0
c Var 'x_00007_00006' direct represents '2' with '889'
887 -888 889 0
-889 888 0
-889 -887 0
c Var 'x_00007_00006' order represents '3' with '890'
-888 890 0
c Var 'x_00007_00006' direct represents '3' with '891'
888 -890 891 0
-891 890 0
-891 -888 0
c Var 'x_00007_00006' order represents '4' with '892'
-890 892 0
c Var 'x_00007_00006' direct represents '4' with '893'
890 -892 893 0
-893 892 0
-893 -890 0
c Var 'x_00007_00006' order represents '5' with '894'
-892 894 0
c Var 'x_00007_00006' direct represents '5' with '895'
892 -894 895 0
-895 894 0
-895 -892 0
c Var 'x_00007_00006' order represents '6' with '896'
-894 896 0
c Var 'x_00007_00006' direct represents '6' with '897'
894 -896 897 0
-897 896 0
-897 -894 0
c Var 'x_00007_00006' order represents '7' with '898'
-896 898 0
c Var 'x_00007_00006' direct represents '7' with '899'
896 -898 899 0
-899 898 0
-899 -896 0
c Var 'x_00007_00006' order represents '8' with '900'
-898 900 0
c Var 'x_00007_00006' direct represents '8' with '901'
898 -900 901 0
-901 900 0
-901 -898 0
c Var 'x_00007_00006' direct represents '9' with '-900'
887 889 891 893 895 897 899 901 -900 0
c Encoding variable: x_00007_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00007' order represents '1' with '902'
c Var 'x_00007_00007' direct represents '1' with '902'
c Var 'x_00007_00007' order represents '2' with '903'
-902 903 0
c Var 'x_00007_00007' direct represents '2' with '904'
902 -903 904 0
-904 903 0
-904 -902 0
c Var 'x_00007_00007' order represents '3' with '905'
-903 905 0
c Var 'x_00007_00007' direct represents '3' with '906'
903 -905 906 0
-906 905 0
-906 -903 0
c Var 'x_00007_00007' order represents '4' with '907'
-905 907 0
c Var 'x_00007_00007' direct represents '4' with '908'
905 -907 908 0
-908 907 0
-908 -905 0
c Var 'x_00007_00007' order represents '5' with '909'
-907 909 0
c Var 'x_00007_00007' direct represents '5' with '910'
907 -909 910 0
-910 909 0
-910 -907 0
c Var 'x_00007_00007' order represents '6' with '911'
-909 911 0
c Var 'x_00007_00007' direct represents '6' with '912'
909 -911 912 0
-912 911 0
-912 -909 0
c Var 'x_00007_00007' order represents '7' with '913'
-911 913 0
c Var 'x_00007_00007' direct represents '7' with '914'
911 -913 914 0
-914 913 0
-914 -911 0
c Var 'x_00007_00007' order represents '8' with '915'
-913 915 0
c Var 'x_00007_00007' direct represents '8' with '916'
913 -915 916 0
-916 915 0
-916 -913 0
c Var 'x_00007_00007' direct represents '9' with '-915'
902 904 906 908 910 912 914 916 -915 0
c Encoding variable: x_00007_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00008' order represents '1' with '917'
c Var 'x_00007_00008' direct represents '1' with '917'
c Var 'x_00007_00008' order represents '2' with '918'
-917 918 0
c Var 'x_00007_00008' direct represents '2' with '919'
917 -918 919 0
-919 918 0
-919 -917 0
c Var 'x_00007_00008' order represents '3' with '920'
-918 920 0
c Var 'x_00007_00008' direct represents '3' with '921'
918 -920 921 0
-921 920 0
-921 -918 0
c Var 'x_00007_00008' order represents '4' with '922'
-920 922 0
c Var 'x_00007_00008' direct represents '4' with '923'
920 -922 923 0
-923 922 0
-923 -920 0
c Var 'x_00007_00008' order represents '5' with '924'
-922 924 0
c Var 'x_00007_00008' direct represents '5' with '925'
922 -924 925 0
-925 924 0
-925 -922 0
c Var 'x_00007_00008' order represents '6' with '926'
-924 926 0
c Var 'x_00007_00008' direct represents '6' with '927'
924 -926 927 0
-927 926 0
-927 -924 0
c Var 'x_00007_00008' order represents '7' with '928'
-926 928 0
c Var 'x_00007_00008' direct represents '7' with '929'
926 -928 929 0
-929 928 0
-929 -926 0
c Var 'x_00007_00008' order represents '8' with '930'
-928 930 0
c Var 'x_00007_00008' direct represents '8' with '931'
928 -930 931 0
-931 930 0
-931 -928 0
c Var 'x_00007_00008' direct represents '9' with '-930'
917 919 921 923 925 927 929 931 -930 0
c Encoding variable: x_00007_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00007_00009' order represents '1' with '932'
c Var 'x_00007_00009' direct represents '1' with '932'
c Var 'x_00007_00009' order represents '2' with '933'
-932 933 0
c Var 'x_00007_00009' direct represents '2' with '934'
932 -933 934 0
-934 933 0
-934 -932 0
c Var 'x_00007_00009' order represents '3' with '935'
-933 935 0
c Var 'x_00007_00009' direct represents '3' with '936'
933 -935 936 0
-936 935 0
-936 -933 0
c Var 'x_00007_00009' order represents '4' with '937'
-935 937 0
c Var 'x_00007_00009' direct represents '4' with '938'
935 -937 938 0
-938 937 0
-938 -935 0
c Var 'x_00007_00009' order represents '5' with '939'
-937 939 0
c Var 'x_00007_00009' direct represents '5' with '940'
937 -939 940 0
-940 939 0
-940 -937 0
c Var 'x_00007_00009' order represents '6' with '941'
-939 941 0
c Var 'x_00007_00009' direct represents '6' with '942'
939 -941 942 0
-942 941 0
-942 -939 0
c Var 'x_00007_00009' order represents '7' with '943'
-941 943 0
c Var 'x_00007_00009' direct represents '7' with '944'
941 -943 944 0
-944 943 0
-944 -941 0
c Var 'x_00007_00009' order represents '8' with '945'
-943 945 0
c Var 'x_00007_00009' direct represents '8' with '946'
943 -945 946 0
-946 945 0
-946 -943 0
c Var 'x_00007_00009' direct represents '9' with '-945'
932 934 936 938 940 942 944 946 -945 0
c Encoding variable: x_00008_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00001' order represents '1' with '947'
c Var 'x_00008_00001' direct represents '1' with '947'
c Var 'x_00008_00001' order represents '2' with '948'
-947 948 0
c Var 'x_00008_00001' direct represents '2' with '949'
947 -948 949 0
-949 948 0
-949 -947 0
c Var 'x_00008_00001' order represents '3' with '950'
-948 950 0
c Var 'x_00008_00001' direct represents '3' with '951'
948 -950 951 0
-951 950 0
-951 -948 0
c Var 'x_00008_00001' order represents '4' with '952'
-950 952 0
c Var 'x_00008_00001' direct represents '4' with '953'
950 -952 953 0
-953 952 0
-953 -950 0
c Var 'x_00008_00001' order represents '5' with '954'
-952 954 0
c Var 'x_00008_00001' direct represents '5' with '955'
952 -954 955 0
-955 954 0
-955 -952 0
c Var 'x_00008_00001' order represents '6' with '956'
-954 956 0
c Var 'x_00008_00001' direct represents '6' with '957'
954 -956 957 0
-957 956 0
-957 -954 0
c Var 'x_00008_00001' order represents '7' with '958'
-956 958 0
c Var 'x_00008_00001' direct represents '7' with '959'
956 -958 959 0
-959 958 0
-959 -956 0
c Var 'x_00008_00001' order represents '8' with '960'
-958 960 0
c Var 'x_00008_00001' direct represents '8' with '961'
958 -960 961 0
-961 960 0
-961 -958 0
c Var 'x_00008_00001' direct represents '9' with '-960'
947 949 951 953 955 957 959 961 -960 0
c Encoding variable: x_00008_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00002' order represents '1' with '962'
c Var 'x_00008_00002' direct represents '1' with '962'
c Var 'x_00008_00002' order represents '2' with '963'
-962 963 0
c Var 'x_00008_00002' direct represents '2' with '964'
962 -963 964 0
-964 963 0
-964 -962 0
c Var 'x_00008_00002' order represents '3' with '965'
-963 965 0
c Var 'x_00008_00002' direct represents '3' with '966'
963 -965 966 0
-966 965 0
-966 -963 0
c Var 'x_00008_00002' order represents '4' with '967'
-965 967 0
c Var 'x_00008_00002' direct represents '4' with '968'
965 -967 968 0
-968 967 0
-968 -965 0
c Var 'x_00008_00002' order represents '5' with '969'
-967 969 0
c Var 'x_00008_00002' direct represents '5' with '970'
967 -969 970 0
-970 969 0
-970 -967 0
c Var 'x_00008_00002' order represents '6' with '971'
-969 971 0
c Var 'x_00008_00002' direct represents '6' with '972'
969 -971 972 0
-972 971 0
-972 -969 0
c Var 'x_00008_00002' order represents '7' with '973'
-971 973 0
c Var 'x_00008_00002' direct represents '7' with '974'
971 -973 974 0
-974 973 0
-974 -971 0
c Var 'x_00008_00002' order represents '8' with '975'
-973 975 0
c Var 'x_00008_00002' direct represents '8' with '976'
973 -975 976 0
-976 975 0
-976 -973 0
c Var 'x_00008_00002' direct represents '9' with '-975'
962 964 966 968 970 972 974 976 -975 0
c Encoding variable: x_00008_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00003' order represents '1' with '977'
c Var 'x_00008_00003' direct represents '1' with '977'
c Var 'x_00008_00003' order represents '2' with '978'
-977 978 0
c Var 'x_00008_00003' direct represents '2' with '979'
977 -978 979 0
-979 978 0
-979 -977 0
c Var 'x_00008_00003' order represents '3' with '980'
-978 980 0
c Var 'x_00008_00003' direct represents '3' with '981'
978 -980 981 0
-981 980 0
-981 -978 0
c Var 'x_00008_00003' order represents '4' with '982'
-980 982 0
c Var 'x_00008_00003' direct represents '4' with '983'
980 -982 983 0
-983 982 0
-983 -980 0
c Var 'x_00008_00003' order represents '5' with '984'
-982 984 0
c Var 'x_00008_00003' direct represents '5' with '985'
982 -984 985 0
-985 984 0
-985 -982 0
c Var 'x_00008_00003' order represents '6' with '986'
-984 986 0
c Var 'x_00008_00003' direct represents '6' with '987'
984 -986 987 0
-987 986 0
-987 -984 0
c Var 'x_00008_00003' order represents '7' with '988'
-986 988 0
c Var 'x_00008_00003' direct represents '7' with '989'
986 -988 989 0
-989 988 0
-989 -986 0
c Var 'x_00008_00003' order represents '8' with '990'
-988 990 0
c Var 'x_00008_00003' direct represents '8' with '991'
988 -990 991 0
-991 990 0
-991 -988 0
c Var 'x_00008_00003' direct represents '9' with '-990'
977 979 981 983 985 987 989 991 -990 0
c Encoding variable: x_00008_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00004' order represents '1' with '992'
c Var 'x_00008_00004' direct represents '1' with '992'
c Var 'x_00008_00004' order represents '2' with '993'
-992 993 0
c Var 'x_00008_00004' direct represents '2' with '994'
992 -993 994 0
-994 993 0
-994 -992 0
c Var 'x_00008_00004' order represents '3' with '995'
-993 995 0
c Var 'x_00008_00004' direct represents '3' with '996'
993 -995 996 0
-996 995 0
-996 -993 0
c Var 'x_00008_00004' order represents '4' with '997'
-995 997 0
c Var 'x_00008_00004' direct represents '4' with '998'
995 -997 998 0
-998 997 0
-998 -995 0
c Var 'x_00008_00004' order represents '5' with '999'
-997 999 0
c Var 'x_00008_00004' direct represents '5' with '1000'
997 -999 1000 0
-1000 999 0
-1000 -997 0
c Var 'x_00008_00004' order represents '6' with '1001'
-999 1001 0
c Var 'x_00008_00004' direct represents '6' with '1002'
999 -1001 1002 0
-1002 1001 0
-1002 -999 0
c Var 'x_00008_00004' order represents '7' with '1003'
-1001 1003 0
c Var 'x_00008_00004' direct represents '7' with '1004'
1001 -1003 1004 0
-1004 1003 0
-1004 -1001 0
c Var 'x_00008_00004' order represents '8' with '1005'
-1003 1005 0
c Var 'x_00008_00004' direct represents '8' with '1006'
1003 -1005 1006 0
-1006 1005 0
-1006 -1003 0
c Var 'x_00008_00004' direct represents '9' with '-1005'
992 994 996 998 1000 1002 1004 1006 -1005 0
c Encoding variable: x_00008_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00005' order represents '1' with '1007'
c Var 'x_00008_00005' direct represents '1' with '1007'
c Var 'x_00008_00005' order represents '2' with '1008'
-1007 1008 0
c Var 'x_00008_00005' direct represents '2' with '1009'
1007 -1008 1009 0
-1009 1008 0
-1009 -1007 0
c Var 'x_00008_00005' order represents '3' with '1010'
-1008 1010 0
c Var 'x_00008_00005' direct represents '3' with '1011'
1008 -1010 1011 0
-1011 1010 0
-1011 -1008 0
c Var 'x_00008_00005' order represents '4' with '1012'
-1010 1012 0
c Var 'x_00008_00005' direct represents '4' with '1013'
1010 -1012 1013 0
-1013 1012 0
-1013 -1010 0
c Var 'x_00008_00005' order represents '5' with '1014'
-1012 1014 0
c Var 'x_00008_00005' direct represents '5' with '1015'
1012 -1014 1015 0
-1015 1014 0
-1015 -1012 0
c Var 'x_00008_00005' order represents '6' with '1016'
-1014 1016 0
c Var 'x_00008_00005' direct represents '6' with '1017'
1014 -1016 1017 0
-1017 1016 0
-1017 -1014 0
c Var 'x_00008_00005' order represents '7' with '1018'
-1016 1018 0
c Var 'x_00008_00005' direct represents '7' with '1019'
1016 -1018 1019 0
-1019 1018 0
-1019 -1016 0
c Var 'x_00008_00005' order represents '8' with '1020'
-1018 1020 0
c Var 'x_00008_00005' direct represents '8' with '1021'
1018 -1020 1021 0
-1021 1020 0
-1021 -1018 0
c Var 'x_00008_00005' direct represents '9' with '-1020'
1007 1009 1011 1013 1015 1017 1019 1021 -1020 0
c Encoding variable: x_00008_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00006' order represents '1' with '1022'
c Var 'x_00008_00006' direct represents '1' with '1022'
c Var 'x_00008_00006' order represents '2' with '1023'
-1022 1023 0
c Var 'x_00008_00006' direct represents '2' with '1024'
1022 -1023 1024 0
-1024 1023 0
-1024 -1022 0
c Var 'x_00008_00006' order represents '3' with '1025'
-1023 1025 0
c Var 'x_00008_00006' direct represents '3' with '1026'
1023 -1025 1026 0
-1026 1025 0
-1026 -1023 0
c Var 'x_00008_00006' order represents '4' with '1027'
-1025 1027 0
c Var 'x_00008_00006' direct represents '4' with '1028'
1025 -1027 1028 0
-1028 1027 0
-1028 -1025 0
c Var 'x_00008_00006' order represents '5' with '1029'
-1027 1029 0
c Var 'x_00008_00006' direct represents '5' with '1030'
1027 -1029 1030 0
-1030 1029 0
-1030 -1027 0
c Var 'x_00008_00006' order represents '6' with '1031'
-1029 1031 0
c Var 'x_00008_00006' direct represents '6' with '1032'
1029 -1031 1032 0
-1032 1031 0
-1032 -1029 0
c Var 'x_00008_00006' order represents '7' with '1033'
-1031 1033 0
c Var 'x_00008_00006' direct represents '7' with '1034'
1031 -1033 1034 0
-1034 1033 0
-1034 -1031 0
c Var 'x_00008_00006' order represents '8' with '1035'
-1033 1035 0
c Var 'x_00008_00006' direct represents '8' with '1036'
1033 -1035 1036 0
-1036 1035 0
-1036 -1033 0
c Var 'x_00008_00006' direct represents '9' with '-1035'
1022 1024 1026 1028 1030 1032 1034 1036 -1035 0
c Encoding variable: x_00008_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00007' order represents '1' with '1037'
c Var 'x_00008_00007' direct represents '1' with '1037'
c Var 'x_00008_00007' order represents '2' with '1038'
-1037 1038 0
c Var 'x_00008_00007' direct represents '2' with '1039'
1037 -1038 1039 0
-1039 1038 0
-1039 -1037 0
c Var 'x_00008_00007' order represents '3' with '1040'
-1038 1040 0
c Var 'x_00008_00007' direct represents '3' with '1041'
1038 -1040 1041 0
-1041 1040 0
-1041 -1038 0
c Var 'x_00008_00007' order represents '4' with '1042'
-1040 1042 0
c Var 'x_00008_00007' direct represents '4' with '1043'
1040 -1042 1043 0
-1043 1042 0
-1043 -1040 0
c Var 'x_00008_00007' order represents '5' with '1044'
-1042 1044 0
c Var 'x_00008_00007' direct represents '5' with '1045'
1042 -1044 1045 0
-1045 1044 0
-1045 -1042 0
c Var 'x_00008_00007' order represents '6' with '1046'
-1044 1046 0
c Var 'x_00008_00007' direct represents '6' with '1047'
1044 -1046 1047 0
-1047 1046 0
-1047 -1044 0
c Var 'x_00008_00007' order represents '7' with '1048'
-1046 1048 0
c Var 'x_00008_00007' direct represents '7' with '1049'
1046 -1048 1049 0
-1049 1048 0
-1049 -1046 0
c Var 'x_00008_00007' order represents '8' with '1050'
-1048 1050 0
c Var 'x_00008_00007' direct represents '8' with '1051'
1048 -1050 1051 0
-1051 1050 0
-1051 -1048 0
c Var 'x_00008_00007' direct represents '9' with '-1050'
1037 1039 1041 1043 1045 1047 1049 1051 -1050 0
c Encoding variable: x_00008_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00008' order represents '1' with '1052'
c Var 'x_00008_00008' direct represents '1' with '1052'
c Var 'x_00008_00008' order represents '2' with '1053'
-1052 1053 0
c Var 'x_00008_00008' direct represents '2' with '1054'
1052 -1053 1054 0
-1054 1053 0
-1054 -1052 0
c Var 'x_00008_00008' order represents '3' with '1055'
-1053 1055 0
c Var 'x_00008_00008' direct represents '3' with '1056'
1053 -1055 1056 0
-1056 1055 0
-1056 -1053 0
c Var 'x_00008_00008' order represents '4' with '1057'
-1055 1057 0
c Var 'x_00008_00008' direct represents '4' with '1058'
1055 -1057 1058 0
-1058 1057 0
-1058 -1055 0
c Var 'x_00008_00008' order represents '5' with '1059'
-1057 1059 0
c Var 'x_00008_00008' direct represents '5' with '1060'
1057 -1059 1060 0
-1060 1059 0
-1060 -1057 0
c Var 'x_00008_00008' order represents '6' with '1061'
-1059 1061 0
c Var 'x_00008_00008' direct represents '6' with '1062'
1059 -1061 1062 0
-1062 1061 0
-1062 -1059 0
c Var 'x_00008_00008' order represents '7' with '1063'
-1061 1063 0
c Var 'x_00008_00008' direct represents '7' with '1064'
1061 -1063 1064 0
-1064 1063 0
-1064 -1061 0
c Var 'x_00008_00008' order represents '8' with '1065'
-1063 1065 0
c Var 'x_00008_00008' direct represents '8' with '1066'
1063 -1065 1066 0
-1066 1065 0
-1066 -1063 0
c Var 'x_00008_00008' direct represents '9' with '-1065'
1052 1054 1056 1058 1060 1062 1064 1066 -1065 0
c Encoding variable: x_00008_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00008_00009' order represents '1' with '1067'
c Var 'x_00008_00009' direct represents '1' with '1067'
c Var 'x_00008_00009' order represents '2' with '1068'
-1067 1068 0
c Var 'x_00008_00009' direct represents '2' with '1069'
1067 -1068 1069 0
-1069 1068 0
-1069 -1067 0
c Var 'x_00008_00009' order represents '3' with '1070'
-1068 1070 0
c Var 'x_00008_00009' direct represents '3' with '1071'
1068 -1070 1071 0
-1071 1070 0
-1071 -1068 0
c Var 'x_00008_00009' order represents '4' with '1072'
-1070 1072 0
c Var 'x_00008_00009' direct represents '4' with '1073'
1070 -1072 1073 0
-1073 1072 0
-1073 -1070 0
c Var 'x_00008_00009' order represents '5' with '1074'
-1072 1074 0
c Var 'x_00008_00009' direct represents '5' with '1075'
1072 -1074 1075 0
-1075 1074 0
-1075 -1072 0
c Var 'x_00008_00009' order represents '6' with '1076'
-1074 1076 0
c Var 'x_00008_00009' direct represents '6' with '1077'
1074 -1076 1077 0
-1077 1076 0
-1077 -1074 0
c Var 'x_00008_00009' order represents '7' with '1078'
-1076 1078 0
c Var 'x_00008_00009' direct represents '7' with '1079'
1076 -1078 1079 0
-1079 1078 0
-1079 -1076 0
c Var 'x_00008_00009' order represents '8' with '1080'
-1078 1080 0
c Var 'x_00008_00009' direct represents '8' with '1081'
1078 -1080 1081 0
-1081 1080 0
-1081 -1078 0
c Var 'x_00008_00009' direct represents '9' with '-1080'
1067 1069 1071 1073 1075 1077 1079 1081 -1080 0
c Encoding variable: x_00009_00001 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00001' order represents '1' with '1082'
c Var 'x_00009_00001' direct represents '1' with '1082'
c Var 'x_00009_00001' order represents '2' with '1083'
-1082 1083 0
c Var 'x_00009_00001' direct represents '2' with '1084'
1082 -1083 1084 0
-1084 1083 0
-1084 -1082 0
c Var 'x_00009_00001' order represents '3' with '1085'
-1083 1085 0
c Var 'x_00009_00001' direct represents '3' with '1086'
1083 -1085 1086 0
-1086 1085 0
-1086 -1083 0
c Var 'x_00009_00001' order represents '4' with '1087'
-1085 1087 0
c Var 'x_00009_00001' direct represents '4' with '1088'
1085 -1087 1088 0
-1088 1087 0
-1088 -1085 0
c Var 'x_00009_00001' order represents '5' with '1089'
-1087 1089 0
c Var 'x_00009_00001' direct represents '5' with '1090'
1087 -1089 1090 0
-1090 1089 0
-1090 -1087 0
c Var 'x_00009_00001' order represents '6' with '1091'
-1089 1091 0
c Var 'x_00009_00001' direct represents '6' with '1092'
1089 -1091 1092 0
-1092 1091 0
-1092 -1089 0
c Var 'x_00009_00001' order represents '7' with '1093'
-1091 1093 0
c Var 'x_00009_00001' direct represents '7' with '1094'
1091 -1093 1094 0
-1094 1093 0
-1094 -1091 0
c Var 'x_00009_00001' order represents '8' with '1095'
-1093 1095 0
c Var 'x_00009_00001' direct represents '8' with '1096'
1093 -1095 1096 0
-1096 1095 0
-1096 -1093 0
c Var 'x_00009_00001' direct represents '9' with '-1095'
1082 1084 1086 1088 1090 1092 1094 1096 -1095 0
c Encoding variable: x_00009_00002 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00002' order represents '1' with '1097'
c Var 'x_00009_00002' direct represents '1' with '1097'
c Var 'x_00009_00002' order represents '2' with '1098'
-1097 1098 0
c Var 'x_00009_00002' direct represents '2' with '1099'
1097 -1098 1099 0
-1099 1098 0
-1099 -1097 0
c Var 'x_00009_00002' order represents '3' with '1100'
-1098 1100 0
c Var 'x_00009_00002' direct represents '3' with '1101'
1098 -1100 1101 0
-1101 1100 0
-1101 -1098 0
c Var 'x_00009_00002' order represents '4' with '1102'
-1100 1102 0
c Var 'x_00009_00002' direct represents '4' with '1103'
1100 -1102 1103 0
-1103 1102 0
-1103 -1100 0
c Var 'x_00009_00002' order represents '5' with '1104'
-1102 1104 0
c Var 'x_00009_00002' direct represents '5' with '1105'
1102 -1104 1105 0
-1105 1104 0
-1105 -1102 0
c Var 'x_00009_00002' order represents '6' with '1106'
-1104 1106 0
c Var 'x_00009_00002' direct represents '6' with '1107'
1104 -1106 1107 0
-1107 1106 0
-1107 -1104 0
c Var 'x_00009_00002' order represents '7' with '1108'
-1106 1108 0
c Var 'x_00009_00002' direct represents '7' with '1109'
1106 -1108 1109 0
-1109 1108 0
-1109 -1106 0
c Var 'x_00009_00002' order represents '8' with '1110'
-1108 1110 0
c Var 'x_00009_00002' direct represents '8' with '1111'
1108 -1110 1111 0
-1111 1110 0
-1111 -1108 0
c Var 'x_00009_00002' direct represents '9' with '-1110'
1097 1099 1101 1103 1105 1107 1109 1111 -1110 0
c Encoding variable: x_00009_00003 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00003' order represents '1' with '1112'
c Var 'x_00009_00003' direct represents '1' with '1112'
c Var 'x_00009_00003' order represents '2' with '1113'
-1112 1113 0
c Var 'x_00009_00003' direct represents '2' with '1114'
1112 -1113 1114 0
-1114 1113 0
-1114 -1112 0
c Var 'x_00009_00003' order represents '3' with '1115'
-1113 1115 0
c Var 'x_00009_00003' direct represents '3' with '1116'
1113 -1115 1116 0
-1116 1115 0
-1116 -1113 0
c Var 'x_00009_00003' order represents '4' with '1117'
-1115 1117 0
c Var 'x_00009_00003' direct represents '4' with '1118'
1115 -1117 1118 0
-1118 1117 0
-1118 -1115 0
c Var 'x_00009_00003' order represents '5' with '1119'
-1117 1119 0
c Var 'x_00009_00003' direct represents '5' with '1120'
1117 -1119 1120 0
-1120 1119 0
-1120 -1117 0
c Var 'x_00009_00003' order represents '6' with '1121'
-1119 1121 0
c Var 'x_00009_00003' direct represents '6' with '1122'
1119 -1121 1122 0
-1122 1121 0
-1122 -1119 0
c Var 'x_00009_00003' order represents '7' with '1123'
-1121 1123 0
c Var 'x_00009_00003' direct represents '7' with '1124'
1121 -1123 1124 0
-1124 1123 0
-1124 -1121 0
c Var 'x_00009_00003' order represents '8' with '1125'
-1123 1125 0
c Var 'x_00009_00003' direct represents '8' with '1126'
1123 -1125 1126 0
-1126 1125 0
-1126 -1123 0
c Var 'x_00009_00003' direct represents '9' with '-1125'
1112 1114 1116 1118 1120 1122 1124 1126 -1125 0
c Encoding variable: x_00009_00004 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00004' order represents '1' with '1127'
c Var 'x_00009_00004' direct represents '1' with '1127'
c Var 'x_00009_00004' order represents '2' with '1128'
-1127 1128 0
c Var 'x_00009_00004' direct represents '2' with '1129'
1127 -1128 1129 0
-1129 1128 0
-1129 -1127 0
c Var 'x_00009_00004' order represents '3' with '1130'
-1128 1130 0
c Var 'x_00009_00004' direct represents '3' with '1131'
1128 -1130 1131 0
-1131 1130 0
-1131 -1128 0
c Var 'x_00009_00004' order represents '4' with '1132'
-1130 1132 0
c Var 'x_00009_00004' direct represents '4' with '1133'
1130 -1132 1133 0
-1133 1132 0
-1133 -1130 0
c Var 'x_00009_00004' order represents '5' with '1134'
-1132 1134 0
c Var 'x_00009_00004' direct represents '5' with '1135'
1132 -1134 1135 0
-1135 1134 0
-1135 -1132 0
c Var 'x_00009_00004' order represents '6' with '1136'
-1134 1136 0
c Var 'x_00009_00004' direct represents '6' with '1137'
1134 -1136 1137 0
-1137 1136 0
-1137 -1134 0
c Var 'x_00009_00004' order represents '7' with '1138'
-1136 1138 0
c Var 'x_00009_00004' direct represents '7' with '1139'
1136 -1138 1139 0
-1139 1138 0
-1139 -1136 0
c Var 'x_00009_00004' order represents '8' with '1140'
-1138 1140 0
c Var 'x_00009_00004' direct represents '8' with '1141'
1138 -1140 1141 0
-1141 1140 0
-1141 -1138 0
c Var 'x_00009_00004' direct represents '9' with '-1140'
1127 1129 1131 1133 1135 1137 1139 1141 -1140 0
c Encoding variable: x_00009_00005 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00005' order represents '1' with '1142'
c Var 'x_00009_00005' direct represents '1' with '1142'
c Var 'x_00009_00005' order represents '2' with '1143'
-1142 1143 0
c Var 'x_00009_00005' direct represents '2' with '1144'
1142 -1143 1144 0
-1144 1143 0
-1144 -1142 0
c Var 'x_00009_00005' order represents '3' with '1145'
-1143 1145 0
c Var 'x_00009_00005' direct represents '3' with '1146'
1143 -1145 1146 0
-1146 1145 0
-1146 -1143 0
c Var 'x_00009_00005' order represents '4' with '1147'
-1145 1147 0
c Var 'x_00009_00005' direct represents '4' with '1148'
1145 -1147 1148 0
-1148 1147 0
-1148 -1145 0
c Var 'x_00009_00005' order represents '5' with '1149'
-1147 1149 0
c Var 'x_00009_00005' direct represents '5' with '1150'
1147 -1149 1150 0
-1150 1149 0
-1150 -1147 0
c Var 'x_00009_00005' order represents '6' with '1151'
-1149 1151 0
c Var 'x_00009_00005' direct represents '6' with '1152'
1149 -1151 1152 0
-1152 1151 0
-1152 -1149 0
c Var 'x_00009_00005' order represents '7' with '1153'
-1151 1153 0
c Var 'x_00009_00005' direct represents '7' with '1154'
1151 -1153 1154 0
-1154 1153 0
-1154 -1151 0
c Var 'x_00009_00005' order represents '8' with '1155'
-1153 1155 0
c Var 'x_00009_00005' direct represents '8' with '1156'
1153 -1155 1156 0
-1156 1155 0
-1156 -1153 0
c Var 'x_00009_00005' direct represents '9' with '-1155'
1142 1144 1146 1148 1150 1152 1154 1156 -1155 0
c Encoding variable: x_00009_00006 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00006' order represents '1' with '1157'
c Var 'x_00009_00006' direct represents '1' with '1157'
c Var 'x_00009_00006' order represents '2' with '1158'
-1157 1158 0
c Var 'x_00009_00006' direct represents '2' with '1159'
1157 -1158 1159 0
-1159 1158 0
-1159 -1157 0
c Var 'x_00009_00006' order represents '3' with '1160'
-1158 1160 0
c Var 'x_00009_00006' direct represents '3' with '1161'
1158 -1160 1161 0
-1161 1160 0
-1161 -1158 0
c Var 'x_00009_00006' order represents '4' with '1162'
-1160 1162 0
c Var 'x_00009_00006' direct represents '4' with '1163'
1160 -1162 1163 0
-1163 1162 0
-1163 -1160 0
c Var 'x_00009_00006' order represents '5' with '1164'
-1162 1164 0
c Var 'x_00009_00006' direct represents '5' with '1165'
1162 -1164 1165 0
-1165 1164 0
-1165 -1162 0
c Var 'x_00009_00006' order represents '6' with '1166'
-1164 1166 0
c Var 'x_00009_00006' direct represents '6' with '1167'
1164 -1166 1167 0
-1167 1166 0
-1167 -1164 0
c Var 'x_00009_00006' order represents '7' with '1168'
-1166 1168 0
c Var 'x_00009_00006' direct represents '7' with '1169'
1166 -1168 1169 0
-1169 1168 0
-1169 -1166 0
c Var 'x_00009_00006' order represents '8' with '1170'
-1168 1170 0
c Var 'x_00009_00006' direct represents '8' with '1171'
1168 -1170 1171 0
-1171 1170 0
-1171 -1168 0
c Var 'x_00009_00006' direct represents '9' with '-1170'
1157 1159 1161 1163 1165 1167 1169 1171 -1170 0
c Encoding variable: x_00009_00007 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00007' order represents '1' with '1172'
c Var 'x_00009_00007' direct represents '1' with '1172'
c Var 'x_00009_00007' order represents '2' with '1173'
-1172 1173 0
c Var 'x_00009_00007' direct represents '2' with '1174'
1172 -1173 1174 0
-1174 1173 0
-1174 -1172 0
c Var 'x_00009_00007' order represents '3' with '1175'
-1173 1175 0
c Var 'x_00009_00007' direct represents '3' with '1176'
1173 -1175 1176 0
-1176 1175 0
-1176 -1173 0
c Var 'x_00009_00007' order represents '4' with '1177'
-1175 1177 0
c Var 'x_00009_00007' direct represents '4' with '1178'
1175 -1177 1178 0
-1178 1177 0
-1178 -1175 0
c Var 'x_00009_00007' order represents '5' with '1179'
-1177 1179 0
c Var 'x_00009_00007' direct represents '5' with '1180'
1177 -1179 1180 0
-1180 1179 0
-1180 -1177 0
c Var 'x_00009_00007' order represents '6' with '1181'
-1179 1181 0
c Var 'x_00009_00007' direct represents '6' with '1182'
1179 -1181 1182 0
-1182 1181 0
-1182 -1179 0
c Var 'x_00009_00007' order represents '7' with '1183'
-1181 1183 0
c Var 'x_00009_00007' direct represents '7' with '1184'
1181 -1183 1184 0
-1184 1183 0
-1184 -1181 0
c Var 'x_00009_00007' order represents '8' with '1185'
-1183 1185 0
c Var 'x_00009_00007' direct represents '8' with '1186'
1183 -1185 1186 0
-1186 1185 0
-1186 -1183 0
c Var 'x_00009_00007' direct represents '9' with '-1185'
1172 1174 1176 1178 1180 1182 1184 1186 -1185 0
c Encoding variable: x_00009_00008 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00008' order represents '1' with '1187'
c Var 'x_00009_00008' direct represents '1' with '1187'
c Var 'x_00009_00008' order represents '2' with '1188'
-1187 1188 0
c Var 'x_00009_00008' direct represents '2' with '1189'
1187 -1188 1189 0
-1189 1188 0
-1189 -1187 0
c Var 'x_00009_00008' order represents '3' with '1190'
-1188 1190 0
c Var 'x_00009_00008' direct represents '3' with '1191'
1188 -1190 1191 0
-1191 1190 0
-1191 -1188 0
c Var 'x_00009_00008' order represents '4' with '1192'
-1190 1192 0
c Var 'x_00009_00008' direct represents '4' with '1193'
1190 -1192 1193 0
-1193 1192 0
-1193 -1190 0
c Var 'x_00009_00008' order represents '5' with '1194'
-1192 1194 0
c Var 'x_00009_00008' direct represents '5' with '1195'
1192 -1194 1195 0
-1195 1194 0
-1195 -1192 0
c Var 'x_00009_00008' order represents '6' with '1196'
-1194 1196 0
c Var 'x_00009_00008' direct represents '6' with '1197'
1194 -1196 1197 0
-1197 1196 0
-1197 -1194 0
c Var 'x_00009_00008' order represents '7' with '1198'
-1196 1198 0
c Var 'x_00009_00008' direct represents '7' with '1199'
1196 -1198 1199 0
-1199 1198 0
-1199 -1196 0
c Var 'x_00009_00008' order represents '8' with '1200'
-1198 1200 0
c Var 'x_00009_00008' direct represents '8' with '1201'
1198 -1200 1201 0
-1201 1200 0
-1201 -1198 0
c Var 'x_00009_00008' direct represents '9' with '-1200'
1187 1189 1191 1193 1195 1197 1199 1201 -1200 0
c Encoding variable: x_00009_00009 with domain: int(1..9) (representing constraint )
c Both direct and order encoding.
c Var 'x_00009_00009' order represents '1' with '1202'
c Var 'x_00009_00009' direct represents '1' with '1202'
c Var 'x_00009_00009' order represents '2' with '1203'
-1202 1203 0
c Var 'x_00009_00009' direct represents '2' with '1204'
1202 -1203 1204 0
-1204 1203 0
-1204 -1202 0
c Var 'x_00009_00009' order represents '3' with '1205'
-1203 1205 0
c Var 'x_00009_00009' direct represents '3' with '1206'
1203 -1205 1206 0
-1206 1205 0
-1206 -1203 0
c Var 'x_00009_00009' order represents '4' with '1207'
-1205 1207 0
c Var 'x_00009_00009' direct represents '4' with '1208'
1205 -1207 1208 0
-1208 1207 0
-1208 -1205 0
c Var 'x_00009_00009' order represents '5' with '1209'
-1207 1209 0
c Var 'x_00009_00009' direct represents '5' with '1210'
1207 -1209 1210 0
-1210 1209 0
-1210 -1207 0
c Var 'x_00009_00009' order represents '6' with '1211'
-1209 1211 0
c Var 'x_00009_00009' direct represents '6' with '1212'
1209 -1211 1212 0
-1212 1211 0
-1212 -1209 0
c Var 'x_00009_00009' order represents '7' with '1213'
-1211 1213 0
c Var 'x_00009_00009' direct represents '7' with '1214'
1211 -1213 1214 0
-1214 1213 0
-1214 -1211 0
c Var 'x_00009_00009' order represents '8' with '1215'
-1213 1215 0
c Var 'x_00009_00009' direct represents '8' with '1216'
1213 -1215 1216 0
-1216 1215 0
-1216 -1213 0
c Var 'x_00009_00009' direct represents '9' with '-1215'
1202 1204 1206 1208 1210 1212 1214 1216 -1215 0
c Encoding variable: alldiff_row_00001 with domain: bool (representing constraint )
c Var 'alldiff_row_00001' direct represents '0' with '-1217'
c Var 'alldiff_row_00001' direct represents '1' with '1217'
c Var 'alldiff_row_00001' order represents '1' with '1'
c Var 'alldiff_row_00001' order represents '0' with '-1217'
c Encoding variable: alldiff_row_00002 with domain: bool (representing constraint )
c Var 'alldiff_row_00002' direct represents '0' with '-1218'
c Var 'alldiff_row_00002' direct represents '1' with '1218'
c Var 'alldiff_row_00002' order represents '1' with '1'
c Var 'alldiff_row_00002' order represents '0' with '-1218'
c Encoding variable: alldiff_row_00003 with domain: bool (representing constraint )
c Var 'alldiff_row_00003' direct represents '0' with '-1219'
c Var 'alldiff_row_00003' direct represents '1' with '1219'
c Var 'alldiff_row_00003' order represents '1' with '1'
c Var 'alldiff_row_00003' order represents '0' with '-1219'
c Encoding variable: alldiff_row_00004 with domain: bool (representing constraint )
c Var 'alldiff_row_00004' direct represents '0' with '-1220'
c Var 'alldiff_row_00004' direct represents '1' with '1220'
c Var 'alldiff_row_00004' order represents '1' with '1'
c Var 'alldiff_row_00004' order represents '0' with '-1220'
c Encoding variable: alldiff_row_00005 with domain: bool (representing constraint )
c Var 'alldiff_row_00005' direct represents '0' with '-1221'
c Var 'alldiff_row_00005' direct represents '1' with '1221'
c Var 'alldiff_row_00005' order represents '1' with '1'
c Var 'alldiff_row_00005' order represents '0' with '-1221'
c Encoding variable: alldiff_row_00006 with domain: bool (representing constraint )
c Var 'alldiff_row_00006' direct represents '0' with '-1222'
c Var 'alldiff_row_00006' direct represents '1' with '1222'
c Var 'alldiff_row_00006' order represents '1' with '1'
c Var 'alldiff_row_00006' order represents '0' with '-1222'
c Encoding variable: alldiff_row_00007 with domain: bool (representing constraint )
c Var 'alldiff_row_00007' direct represents '0' with '-1223'
c Var 'alldiff_row_00007' direct represents '1' with '1223'
c Var 'alldiff_row_00007' order represents '1' with '1'
c Var 'alldiff_row_00007' order represents '0' with '-1223'
c Encoding variable: alldiff_row_00008 with domain: bool (representing constraint )
c Var 'alldiff_row_00008' direct represents '0' with '-1224'
c Var 'alldiff_row_00008' direct represents '1' with '1224'
c Var 'alldiff_row_00008' order represents '1' with '1'
c Var 'alldiff_row_00008' order represents '0' with '-1224'
c Encoding variable: alldiff_row_00009 with domain: bool (representing constraint )
c Var 'alldiff_row_00009' direct represents '0' with '-1225'
c Var 'alldiff_row_00009' direct represents '1' with '1225'
c Var 'alldiff_row_00009' order represents '1' with '1'
c Var 'alldiff_row_00009' order represents '0' with '-1225'
c Encoding variable: alldiff_col_00001 with domain: bool (representing constraint )
c Var 'alldiff_col_00001' direct represents '0' with '-1226'
c Var 'alldiff_col_00001' direct represents '1' with '1226'
c Var 'alldiff_col_00001' order represents '1' with '1'
c Var 'alldiff_col_00001' order represents '0' with '-1226'
c Encoding variable: alldiff_col_00002 with domain: bool (representing constraint )
c Var 'alldiff_col_00002' direct represents '0' with '-1227'
c Var 'alldiff_col_00002' direct represents '1' with '1227'
c Var 'alldiff_col_00002' order represents '1' with '1'
c Var 'alldiff_col_00002' order represents '0' with '-1227'
c Encoding variable: alldiff_col_00003 with domain: bool (representing constraint )
c Var 'alldiff_col_00003' direct represents '0' with '-1228'
c Var 'alldiff_col_00003' direct represents '1' with '1228'
c Var 'alldiff_col_00003' order represents '1' with '1'
c Var 'alldiff_col_00003' order represents '0' with '-1228'
c Encoding variable: alldiff_col_00004 with domain: bool (representing constraint )
c Var 'alldiff_col_00004' direct represents '0' with '-1229'
c Var 'alldiff_col_00004' direct represents '1' with '1229'
c Var 'alldiff_col_00004' order represents '1' with '1'
c Var 'alldiff_col_00004' order represents '0' with '-1229'
c Encoding variable: alldiff_col_00005 with domain: bool (representing constraint )
c Var 'alldiff_col_00005' direct represents '0' with '-1230'
c Var 'alldiff_col_00005' direct represents '1' with '1230'
c Var 'alldiff_col_00005' order represents '1' with '1'
c Var 'alldiff_col_00005' order represents '0' with '-1230'
c Encoding variable: alldiff_col_00006 with domain: bool (representing constraint )
c Var 'alldiff_col_00006' direct represents '0' with '-1231'
c Var 'alldiff_col_00006' direct represents '1' with '1231'
c Var 'alldiff_col_00006' order represents '1' with '1'
c Var 'alldiff_col_00006' order represents '0' with '-1231'
c Encoding variable: alldiff_col_00007 with domain: bool (representing constraint )
c Var 'alldiff_col_00007' direct represents '0' with '-1232'
c Var 'alldiff_col_00007' direct represents '1' with '1232'
c Var 'alldiff_col_00007' order represents '1' with '1'
c Var 'alldiff_col_00007' order represents '0' with '-1232'
c Encoding variable: alldiff_col_00008 with domain: bool (representing constraint )
c Var 'alldiff_col_00008' direct represents '0' with '-1233'
c Var 'alldiff_col_00008' direct represents '1' with '1233'
c Var 'alldiff_col_00008' order represents '1' with '1'
c Var 'alldiff_col_00008' order represents '0' with '-1233'
c Encoding variable: alldiff_col_00009 with domain: bool (representing constraint )
c Var 'alldiff_col_00009' direct represents '0' with '-1234'
c Var 'alldiff_col_00009' direct represents '1' with '1234'
c Var 'alldiff_col_00009' order represents '1' with '1'
c Var 'alldiff_col_00009' order represents '0' with '-1234'
c Encoding variable: alldiff_box_00001 with domain: bool (representing constraint )
c Var 'alldiff_box_00001' direct represents '0' with '-1235'
c Var 'alldiff_box_00001' direct represents '1' with '1235'
c Var 'alldiff_box_00001' order represents '1' with '1'
c Var 'alldiff_box_00001' order represents '0' with '-1235'
c Encoding variable: alldiff_box_00002 with domain: bool (representing constraint )
c Var 'alldiff_box_00002' direct represents '0' with '-1236'
c Var 'alldiff_box_00002' direct represents '1' with '1236'
c Var 'alldiff_box_00002' order represents '1' with '1'
c Var 'alldiff_box_00002' order represents '0' with '-1236'
c Encoding variable: alldiff_box_00003 with domain: bool (representing constraint )
c Var 'alldiff_box_00003' direct represents '0' with '-1237'
c Var 'alldiff_box_00003' direct represents '1' with '1237'
c Var 'alldiff_box_00003' order represents '1' with '1'
c Var 'alldiff_box_00003' order represents '0' with '-1237'
c Encoding variable: alldiff_box_00004 with domain: bool (representing constraint )
c Var 'alldiff_box_00004' direct represents '0' with '-1238'
c Var 'alldiff_box_00004' direct represents '1' with '1238'
c Var 'alldiff_box_00004' order represents '1' with '1'
c Var 'alldiff_box_00004' order represents '0' with '-1238'
c Encoding variable: alldiff_box_00005 with domain: bool (representing constraint )
c Var 'alldiff_box_00005' direct represents '0' with '-1239'
c Var 'alldiff_box_00005' direct represents '1' with '1239'
c Var 'alldiff_box_00005' order represents '1' with '1'
c Var 'alldiff_box_00005' order represents '0' with '-1239'
c Encoding variable: alldiff_box_00006 with domain: bool (representing constraint )
c Var 'alldiff_box_00006' direct represents '0' with '-1240'
c Var 'alldiff_box_00006' direct represents '1' with '1240'
c Var 'alldiff_box_00006' order represents '1' with '1'
c Var 'alldiff_box_00006' order represents '0' with '-1240'
c Encoding variable: alldiff_box_00007 with domain: bool (representing constraint )
c Var 'alldiff_box_00007' direct represents '0' with '-1241'
c Var 'alldiff_box_00007' direct represents '1' with '1241'
c Var 'alldiff_box_00007' order represents '1' with '1'
c Var 'alldiff_box_00007' order represents '0' with '-1241'
c Encoding variable: alldiff_box_00008 with domain: bool (representing constraint )
c Var 'alldiff_box_00008' direct represents '0' with '-1242'
c Var 'alldiff_box_00008' direct represents '1' with '1242'
c Var 'alldiff_box_00008' order represents '1' with '1'
c Var 'alldiff_box_00008' order represents '0' with '-1242'
c Encoding variable: alldiff_box_00009 with domain: bool (representing constraint )
c Var 'alldiff_box_00009' direct represents '0' with '-1243'
c Var 'alldiff_box_00009' direct represents '1' with '1243'
c Var 'alldiff_box_00009' order represents '1' with '1'
c Var 'alldiff_box_00009' order represents '0' with '-1243'
c Encoding variable: alldiff_hint_00001 with domain: bool (representing constraint )
c Var 'alldiff_hint_00001' direct represents '0' with '-1244'
c Var 'alldiff_hint_00001' direct represents '1' with '1244'
c Var 'alldiff_hint_00001' order represents '1' with '1'
c Var 'alldiff_hint_00001' order represents '0' with '-1244'
c Encoding variable: alldiff_hint_00002 with domain: bool (representing constraint )
c Var 'alldiff_hint_00002' direct represents '0' with '-1245'
c Var 'alldiff_hint_00002' direct represents '1' with '1245'
c Var 'alldiff_hint_00002' order represents '1' with '1'
c Var 'alldiff_hint_00002' order represents '0' with '-1245'
c Encoding variable: alldiff_hint_00003 with domain: bool (representing constraint )
c Var 'alldiff_hint_00003' direct represents '0' with '-1246'
c Var 'alldiff_hint_00003' direct represents '1' with '1246'
c Var 'alldiff_hint_00003' order represents '1' with '1'
c Var 'alldiff_hint_00003' order represents '0' with '-1246'
c Encoding variable: alldiff_hint_00004 with domain: bool (representing constraint )
c Var 'alldiff_hint_00004' direct represents '0' with '-1247'
c Var 'alldiff_hint_00004' direct represents '1' with '1247'
c Var 'alldiff_hint_00004' order represents '1' with '1'
c Var 'alldiff_hint_00004' order represents '0' with '-1247'
c Encoding variable: alldiff_hint_00005 with domain: bool (representing constraint )
c Var 'alldiff_hint_00005' direct represents '0' with '-1248'
c Var 'alldiff_hint_00005' direct represents '1' with '1248'
c Var 'alldiff_hint_00005' order represents '1' with '1'
c Var 'alldiff_hint_00005' order represents '0' with '-1248'
c Encoding variable: alldiff_hint_00006 with domain: bool (representing constraint )
c Var 'alldiff_hint_00006' direct represents '0' with '-1249'
c Var 'alldiff_hint_00006' direct represents '1' with '1249'
c Var 'alldiff_hint_00006' order represents '1' with '1'
c Var 'alldiff_hint_00006' order represents '0' with '-1249'
c Encoding variable: alldiff_hint_00007 with domain: bool (representing constraint )
c Var 'alldiff_hint_00007' direct represents '0' with '-1250'
c Var 'alldiff_hint_00007' direct represents '1' with '1250'
c Var 'alldiff_hint_00007' order represents '1' with '1'
c Var 'alldiff_hint_00007' order represents '0' with '-1250'
c Encoding variable: alldiff_hint_00008 with domain: bool (representing constraint )
c Var 'alldiff_hint_00008' direct represents '0' with '-1251'
c Var 'alldiff_hint_00008' direct represents '1' with '1251'
c Var 'alldiff_hint_00008' order represents '1' with '1'
c Var 'alldiff_hint_00008' order represents '0' with '-1251'
c Encoding variable: alldiff_hint_00009 with domain: bool (representing constraint )
c Var 'alldiff_hint_00009' direct represents '0' with '-1252'
c Var 'alldiff_hint_00009' direct represents '1' with '1252'
c Var 'alldiff_hint_00009' order represents '1' with '1'
c Var 'alldiff_hint_00009' order represents '0' with '-1252'
c Encoding variable: alldiff_hint_00010 with domain: bool (representing constraint )
c Var 'alldiff_hint_00010' direct represents '0' with '-1253'
c Var 'alldiff_hint_00010' direct represents '1' with '1253'
c Var 'alldiff_hint_00010' order represents '1' with '1'
c Var 'alldiff_hint_00010' order represents '0' with '-1253'
c Encoding variable: alldiff_hint_00011 with domain: bool (representing constraint )
c Var 'alldiff_hint_00011' direct represents '0' with '-1254'
c Var 'alldiff_hint_00011' direct represents '1' with '1254'
c Var 'alldiff_hint_00011' order represents '1' with '1'
c Var 'alldiff_hint_00011' order represents '0' with '-1254'
c Encoding variable: alldiff_hint_00012 with domain: bool (representing constraint )
c Var 'alldiff_hint_00012' direct represents '0' with '-1255'
c Var 'alldiff_hint_00012' direct represents '1' with '1255'
c Var 'alldiff_hint_00012' order represents '1' with '1'
c Var 'alldiff_hint_00012' order represents '0' with '-1255'
c Encoding variable: alldiff_hint_00013 with domain: bool (representing constraint )
c Var 'alldiff_hint_00013' direct represents '0' with '-1256'
c Var 'alldiff_hint_00013' direct represents '1' with '1256'
c Var 'alldiff_hint_00013' order represents '1' with '1'
c Var 'alldiff_hint_00013' order represents '0' with '-1256'
c Encoding variable: alldiff_hint_00014 with domain: bool (representing constraint )
c Var 'alldiff_hint_00014' direct represents '0' with '-1257'
c Var 'alldiff_hint_00014' direct represents '1' with '1257'
c Var 'alldiff_hint_00014' order represents '1' with '1'
c Var 'alldiff_hint_00014' order represents '0' with '-1257'
c Encoding variable: alldiff_hint_00015 with domain: bool (representing constraint )
c Var 'alldiff_hint_00015' direct represents '0' with '-1258'
c Var 'alldiff_hint_00015' direct represents '1' with '1258'
c Var 'alldiff_hint_00015' order represents '1' with '1'
c Var 'alldiff_hint_00015' order represents '0' with '-1258'
c Encoding variable: alldiff_hint_00016 with domain: bool (representing constraint )
c Var 'alldiff_hint_00016' direct represents '0' with '-1259'
c Var 'alldiff_hint_00016' direct represents '1' with '1259'
c Var 'alldiff_hint_00016' order represents '1' with '1'
c Var 'alldiff_hint_00016' order represents '0' with '-1259'
c Encoding variable: alldiff_hint_00017 with domain: bool (representing constraint )
c Var 'alldiff_hint_00017' direct represents '0' with '-1260'
c Var 'alldiff_hint_00017' direct represents '1' with '1260'
c Var 'alldiff_hint_00017' order represents '1' with '1'
c Var 'alldiff_hint_00017' order represents '0' with '-1260'
c Encoding variable: alldiff_hint_00018 with domain: bool (representing constraint )
c Var 'alldiff_hint_00018' direct represents '0' with '-1261'
c Var 'alldiff_hint_00018' direct represents '1' with '1261'
c Var 'alldiff_hint_00018' order represents '1' with '1'
c Var 'alldiff_hint_00018' order represents '0' with '-1261'
c Encoding variable: alldiff_hint_00019 with domain: bool (representing constraint )
c Var 'alldiff_hint_00019' direct represents '0' with '-1262'
c Var 'alldiff_hint_00019' direct represents '1' with '1262'
c Var 'alldiff_hint_00019' order represents '1' with '1'
c Var 'alldiff_hint_00019' order represents '0' with '-1262'
c Encoding variable: alldiff_hint_00020 with domain: bool (representing constraint )
c Var 'alldiff_hint_00020' direct represents '0' with '-1263'
c Var 'alldiff_hint_00020' direct represents '1' with '1263'
c Var 'alldiff_hint_00020' order represents '1' with '1'
c Var 'alldiff_hint_00020' order represents '0' with '-1263'
c Encoding variable: alldiff_hint_00021 with domain: bool (representing constraint )
c Var 'alldiff_hint_00021' direct represents '0' with '-1264'
c Var 'alldiff_hint_00021' direct represents '1' with '1264'
c Var 'alldiff_hint_00021' order represents '1' with '1'
c Var 'alldiff_hint_00021' order represents '0' with '-1264'
c Encoding variable: alldiff_hint_00022 with domain: bool (representing constraint )
c Var 'alldiff_hint_00022' direct represents '0' with '-1265'
c Var 'alldiff_hint_00022' direct represents '1' with '1265'
c Var 'alldiff_hint_00022' order represents '1' with '1'
c Var 'alldiff_hint_00022' order represents '0' with '-1265'
c Encoding variable: alldiff_hint_00023 with domain: bool (representing constraint )
c Var 'alldiff_hint_00023' direct represents '0' with '-1266'
c Var 'alldiff_hint_00023' direct represents '1' with '1266'
c Var 'alldiff_hint_00023' order represents '1' with '1'
c Var 'alldiff_hint_00023' order represents '0' with '-1266'
c Encoding variable: alldiff_hint_00024 with domain: bool (representing constraint )
c Var 'alldiff_hint_00024' direct represents '0' with '-1267'
c Var 'alldiff_hint_00024' direct represents '1' with '1267'
c Var 'alldiff_hint_00024' order represents '1' with '1'
c Var 'alldiff_hint_00024' order represents '0' with '-1267'
c Encoding variable: alldiff_hint_00025 with domain: bool (representing constraint )
c Var 'alldiff_hint_00025' direct represents '0' with '-1268'
c Var 'alldiff_hint_00025' direct represents '1' with '1268'
c Var 'alldiff_hint_00025' order represents '1' with '1'
c Var 'alldiff_hint_00025' order represents '0' with '-1268'
c Encoding variable: alldiff_hint_00026 with domain: bool (representing constraint )
c Var 'alldiff_hint_00026' direct represents '0' with '-1269'
c Var 'alldiff_hint_00026' direct represents '1' with '1269'
c Var 'alldiff_hint_00026' order represents '1' with '1'
c Var 'alldiff_hint_00026' order represents '0' with '-1269'
c Encoding variable: alldiff_hint_00027 with domain: bool (representing constraint )
c Var 'alldiff_hint_00027' direct represents '0' with '-1270'
c Var 'alldiff_hint_00027' direct represents '1' with '1270'
c Var 'alldiff_hint_00027' order represents '1' with '1'
c Var 'alldiff_hint_00027' order represents '0' with '-1270'
c Encoding variable: alldiff_hint_00028 with domain: bool (representing constraint )
c Var 'alldiff_hint_00028' direct represents '0' with '-1271'
c Var 'alldiff_hint_00028' direct represents '1' with '1271'
c Var 'alldiff_hint_00028' order represents '1' with '1'
c Var 'alldiff_hint_00028' order represents '0' with '-1271'
c Encoding variable: alldiff_hint_00029 with domain: bool (representing constraint )
c Var 'alldiff_hint_00029' direct represents '0' with '-1272'
c Var 'alldiff_hint_00029' direct represents '1' with '1272'
c Var 'alldiff_hint_00029' order represents '1' with '1'
c Var 'alldiff_hint_00029' order represents '0' with '-1272'
c Encoding variable: sum_hint_00001 with domain: bool (representing constraint )
c Var 'sum_hint_00001' direct represents '0' with '-1273'
c Var 'sum_hint_00001' direct represents '1' with '1273'
c Var 'sum_hint_00001' order represents '1' with '1'
c Var 'sum_hint_00001' order represents '0' with '-1273'
c Encoding variable: sum_hint_00002 with domain: bool (representing constraint )
c Var 'sum_hint_00002' direct represents '0' with '-1274'
c Var 'sum_hint_00002' direct represents '1' with '1274'
c Var 'sum_hint_00002' order represents '1' with '1'
c Var 'sum_hint_00002' order represents '0' with '-1274'
c Encoding variable: sum_hint_00003 with domain: bool (representing constraint )
c Var 'sum_hint_00003' direct represents '0' with '-1275'
c Var 'sum_hint_00003' direct represents '1' with '1275'
c Var 'sum_hint_00003' order represents '1' with '1'
c Var 'sum_hint_00003' order represents '0' with '-1275'
c Encoding variable: sum_hint_00004 with domain: bool (representing constraint )
c Var 'sum_hint_00004' direct represents '0' with '-1276'
c Var 'sum_hint_00004' direct represents '1' with '1276'
c Var 'sum_hint_00004' order represents '1' with '1'
c Var 'sum_hint_00004' order represents '0' with '-1276'
c Encoding variable: sum_hint_00005 with domain: bool (representing constraint )
c Var 'sum_hint_00005' direct represents '0' with '-1277'
c Var 'sum_hint_00005' direct represents '1' with '1277'
c Var 'sum_hint_00005' order represents '1' with '1'
c Var 'sum_hint_00005' order represents '0' with '-1277'
c Encoding variable: sum_hint_00006 with domain: bool (representing constraint )
c Var 'sum_hint_00006' direct represents '0' with '-1278'
c Var 'sum_hint_00006' direct represents '1' with '1278'
c Var 'sum_hint_00006' order represents '1' with '1'
c Var 'sum_hint_00006' order represents '0' with '-1278'
c Encoding variable: sum_hint_00007 with domain: bool (representing constraint )
c Var 'sum_hint_00007' direct represents '0' with '-1279'
c Var 'sum_hint_00007' direct represents '1' with '1279'
c Var 'sum_hint_00007' order represents '1' with '1'
c Var 'sum_hint_00007' order represents '0' with '-1279'
c Encoding variable: sum_hint_00008 with domain: bool (representing constraint )
c Var 'sum_hint_00008' direct represents '0' with '-1280'
c Var 'sum_hint_00008' direct represents '1' with '1280'
c Var 'sum_hint_00008' order represents '1' with '1'
c Var 'sum_hint_00008' order represents '0' with '-1280'
c Encoding variable: sum_hint_00009 with domain: bool (representing constraint )
c Var 'sum_hint_00009' direct represents '0' with '-1281'
c Var 'sum_hint_00009' direct represents '1' with '1281'
c Var 'sum_hint_00009' order represents '1' with '1'
c Var 'sum_hint_00009' order represents '0' with '-1281'
c Encoding variable: sum_hint_00010 with domain: bool (representing constraint )
c Var 'sum_hint_00010' direct represents '0' with '-1282'
c Var 'sum_hint_00010' direct represents '1' with '1282'
c Var 'sum_hint_00010' order represents '1' with '1'
c Var 'sum_hint_00010' order represents '0' with '-1282'
c Encoding variable: sum_hint_00011 with domain: bool (representing constraint )
c Var 'sum_hint_00011' direct represents '0' with '-1283'
c Var 'sum_hint_00011' direct represents '1' with '1283'
c Var 'sum_hint_00011' order represents '1' with '1'
c Var 'sum_hint_00011' order represents '0' with '-1283'
c Encoding variable: sum_hint_00012 with domain: bool (representing constraint )
c Var 'sum_hint_00012' direct represents '0' with '-1284'
c Var 'sum_hint_00012' direct represents '1' with '1284'
c Var 'sum_hint_00012' order represents '1' with '1'
c Var 'sum_hint_00012' order represents '0' with '-1284'
c Encoding variable: sum_hint_00013 with domain: bool (representing constraint )
c Var 'sum_hint_00013' direct represents '0' with '-1285'
c Var 'sum_hint_00013' direct represents '1' with '1285'
c Var 'sum_hint_00013' order represents '1' with '1'
c Var 'sum_hint_00013' order represents '0' with '-1285'
c Encoding variable: sum_hint_00014 with domain: bool (representing constraint )
c Var 'sum_hint_00014' direct represents '0' with '-1286'
c Var 'sum_hint_00014' direct represents '1' with '1286'
c Var 'sum_hint_00014' order represents '1' with '1'
c Var 'sum_hint_00014' order represents '0' with '-1286'
c Encoding variable: sum_hint_00015 with domain: bool (representing constraint )
c Var 'sum_hint_00015' direct represents '0' with '-1287'
c Var 'sum_hint_00015' direct represents '1' with '1287'
c Var 'sum_hint_00015' order represents '1' with '1'
c Var 'sum_hint_00015' order represents '0' with '-1287'
c Encoding variable: sum_hint_00016 with domain: bool (representing constraint )
c Var 'sum_hint_00016' direct represents '0' with '-1288'
c Var 'sum_hint_00016' direct represents '1' with '1288'
c Var 'sum_hint_00016' order represents '1' with '1'
c Var 'sum_hint_00016' order represents '0' with '-1288'
c Encoding variable: sum_hint_00017 with domain: bool (representing constraint )
c Var 'sum_hint_00017' direct represents '0' with '-1289'
c Var 'sum_hint_00017' direct represents '1' with '1289'
c Var 'sum_hint_00017' order represents '1' with '1'
c Var 'sum_hint_00017' order represents '0' with '-1289'
c Encoding variable: sum_hint_00018 with domain: bool (representing constraint )
c Var 'sum_hint_00018' direct represents '0' with '-1290'
c Var 'sum_hint_00018' direct represents '1' with '1290'
c Var 'sum_hint_00018' order represents '1' with '1'
c Var 'sum_hint_00018' order represents '0' with '-1290'
c Encoding variable: sum_hint_00019 with domain: bool (representing constraint )
c Var 'sum_hint_00019' direct represents '0' with '-1291'
c Var 'sum_hint_00019' direct represents '1' with '1291'
c Var 'sum_hint_00019' order represents '1' with '1'
c Var 'sum_hint_00019' order represents '0' with '-1291'
c Encoding variable: sum_hint_00020 with domain: bool (representing constraint )
c Var 'sum_hint_00020' direct represents '0' with '-1292'
c Var 'sum_hint_00020' direct represents '1' with '1292'
c Var 'sum_hint_00020' order represents '1' with '1'
c Var 'sum_hint_00020' order represents '0' with '-1292'
c Encoding variable: sum_hint_00021 with domain: bool (representing constraint )
c Var 'sum_hint_00021' direct represents '0' with '-1293'
c Var 'sum_hint_00021' direct represents '1' with '1293'
c Var 'sum_hint_00021' order represents '1' with '1'
c Var 'sum_hint_00021' order represents '0' with '-1293'
c Encoding variable: sum_hint_00022 with domain: bool (representing constraint )
c Var 'sum_hint_00022' direct represents '0' with '-1294'
c Var 'sum_hint_00022' direct represents '1' with '1294'
c Var 'sum_hint_00022' order represents '1' with '1'
c Var 'sum_hint_00022' order represents '0' with '-1294'
c Encoding variable: sum_hint_00023 with domain: bool (representing constraint )
c Var 'sum_hint_00023' direct represents '0' with '-1295'
c Var 'sum_hint_00023' direct represents '1' with '1295'
c Var 'sum_hint_00023' order represents '1' with '1'
c Var 'sum_hint_00023' order represents '0' with '-1295'
c Encoding variable: sum_hint_00024 with domain: bool (representing constraint )
c Var 'sum_hint_00024' direct represents '0' with '-1296'
c Var 'sum_hint_00024' direct represents '1' with '1296'
c Var 'sum_hint_00024' order represents '1' with '1'
c Var 'sum_hint_00024' order represents '0' with '-1296'
c Encoding variable: sum_hint_00025 with domain: bool (representing constraint )
c Var 'sum_hint_00025' direct represents '0' with '-1297'
c Var 'sum_hint_00025' direct represents '1' with '1297'
c Var 'sum_hint_00025' order represents '1' with '1'
c Var 'sum_hint_00025' order represents '0' with '-1297'
c Encoding variable: sum_hint_00026 with domain: bool (representing constraint )
c Var 'sum_hint_00026' direct represents '0' with '-1298'
c Var 'sum_hint_00026' direct represents '1' with '1298'
c Var 'sum_hint_00026' order represents '1' with '1'
c Var 'sum_hint_00026' order represents '0' with '-1298'
c Encoding variable: sum_hint_00027 with domain: bool (representing constraint )
c Var 'sum_hint_00027' direct represents '0' with '-1299'
c Var 'sum_hint_00027' direct represents '1' with '1299'
c Var 'sum_hint_00027' order represents '1' with '1'
c Var 'sum_hint_00027' order represents '0' with '-1299'
c Encoding variable: sum_hint_00028 with domain: bool (representing constraint )
c Var 'sum_hint_00028' direct represents '0' with '-1300'
c Var 'sum_hint_00028' direct represents '1' with '1300'
c Var 'sum_hint_00028' order represents '1' with '1'
c Var 'sum_hint_00028' order represents '0' with '-1300'
c Encoding variable: sum_hint_00029 with domain: bool (representing constraint )
c Var 'sum_hint_00029' direct represents '0' with '-1301'
c Var 'sum_hint_00029' direct represents '1' with '1301'
c Var 'sum_hint_00029' order represents '1' with '1'
c Var 'sum_hint_00029' order represents '0' with '-1301'
c Encoding variable: sum_row_00001 with domain: bool (representing constraint )
c Var 'sum_row_00001' direct represents '0' with '-1302'
c Var 'sum_row_00001' direct represents '1' with '1302'
c Var 'sum_row_00001' order represents '1' with '1'
c Var 'sum_row_00001' order represents '0' with '-1302'
c Encoding variable: sum_row_00002 with domain: bool (representing constraint )
c Var 'sum_row_00002' direct represents '0' with '-1303'
c Var 'sum_row_00002' direct represents '1' with '1303'
c Var 'sum_row_00002' order represents '1' with '1'
c Var 'sum_row_00002' order represents '0' with '-1303'
c Encoding variable: sum_row_00003 with domain: bool (representing constraint )
c Var 'sum_row_00003' direct represents '0' with '-1304'
c Var 'sum_row_00003' direct represents '1' with '1304'
c Var 'sum_row_00003' order represents '1' with '1'
c Var 'sum_row_00003' order represents '0' with '-1304'
c Encoding variable: sum_row_00004 with domain: bool (representing constraint )
c Var 'sum_row_00004' direct represents '0' with '-1305'
c Var 'sum_row_00004' direct represents '1' with '1305'
c Var 'sum_row_00004' order represents '1' with '1'
c Var 'sum_row_00004' order represents '0' with '-1305'
c Encoding variable: sum_row_00005 with domain: bool (representing constraint )
c Var 'sum_row_00005' direct represents '0' with '-1306'
c Var 'sum_row_00005' direct represents '1' with '1306'
c Var 'sum_row_00005' order represents '1' with '1'
c Var 'sum_row_00005' order represents '0' with '-1306'
c Encoding variable: sum_row_00006 with domain: bool (representing constraint )
c Var 'sum_row_00006' direct represents '0' with '-1307'
c Var 'sum_row_00006' direct represents '1' with '1307'
c Var 'sum_row_00006' order represents '1' with '1'
c Var 'sum_row_00006' order represents '0' with '-1307'
c Encoding variable: sum_row_00007 with domain: bool (representing constraint )
c Var 'sum_row_00007' direct represents '0' with '-1308'
c Var 'sum_row_00007' direct represents '1' with '1308'
c Var 'sum_row_00007' order represents '1' with '1'
c Var 'sum_row_00007' order represents '0' with '-1308'
c Encoding variable: sum_row_00008 with domain: bool (representing constraint )
c Var 'sum_row_00008' direct represents '0' with '-1309'
c Var 'sum_row_00008' direct represents '1' with '1309'
c Var 'sum_row_00008' order represents '1' with '1'
c Var 'sum_row_00008' order represents '0' with '-1309'
c Encoding variable: sum_row_00009 with domain: bool (representing constraint )
c Var 'sum_row_00009' direct represents '0' with '-1310'
c Var 'sum_row_00009' direct represents '1' with '1310'
c Var 'sum_row_00009' order represents '1' with '1'
c Var 'sum_row_00009' order represents '0' with '-1310'
c Encoding variable: sum_col_00001 with domain: bool (representing constraint )
c Var 'sum_col_00001' direct represents '0' with '-1311'
c Var 'sum_col_00001' direct represents '1' with '1311'
c Var 'sum_col_00001' order represents '1' with '1'
c Var 'sum_col_00001' order represents '0' with '-1311'
c Encoding variable: sum_col_00002 with domain: bool (representing constraint )
c Var 'sum_col_00002' direct represents '0' with '-1312'
c Var 'sum_col_00002' direct represents '1' with '1312'
c Var 'sum_col_00002' order represents '1' with '1'
c Var 'sum_col_00002' order represents '0' with '-1312'
c Encoding variable: sum_col_00003 with domain: bool (representing constraint )
c Var 'sum_col_00003' direct represents '0' with '-1313'
c Var 'sum_col_00003' direct represents '1' with '1313'
c Var 'sum_col_00003' order represents '1' with '1'
c Var 'sum_col_00003' order represents '0' with '-1313'
c Encoding variable: sum_col_00004 with domain: bool (representing constraint )
c Var 'sum_col_00004' direct represents '0' with '-1314'
c Var 'sum_col_00004' direct represents '1' with '1314'
c Var 'sum_col_00004' order represents '1' with '1'
c Var 'sum_col_00004' order represents '0' with '-1314'
c Encoding variable: sum_col_00005 with domain: bool (representing constraint )
c Var 'sum_col_00005' direct represents '0' with '-1315'
c Var 'sum_col_00005' direct represents '1' with '1315'
c Var 'sum_col_00005' order represents '1' with '1'
c Var 'sum_col_00005' order represents '0' with '-1315'
c Encoding variable: sum_col_00006 with domain: bool (representing constraint )
c Var 'sum_col_00006' direct represents '0' with '-1316'
c Var 'sum_col_00006' direct represents '1' with '1316'
c Var 'sum_col_00006' order represents '1' with '1'
c Var 'sum_col_00006' order represents '0' with '-1316'
c Encoding variable: sum_col_00007 with domain: bool (representing constraint )
c Var 'sum_col_00007' direct represents '0' with '-1317'
c Var 'sum_col_00007' direct represents '1' with '1317'
c Var 'sum_col_00007' order represents '1' with '1'
c Var 'sum_col_00007' order represents '0' with '-1317'
c Encoding variable: sum_col_00008 with domain: bool (representing constraint )
c Var 'sum_col_00008' direct represents '0' with '-1318'
c Var 'sum_col_00008' direct represents '1' with '1318'
c Var 'sum_col_00008' order represents '1' with '1'
c Var 'sum_col_00008' order represents '0' with '-1318'
c Encoding variable: sum_col_00009 with domain: bool (representing constraint )
c Var 'sum_col_00009' direct represents '0' with '-1319'
c Var 'sum_col_00009' direct represents '1' with '1319'
c Var 'sum_col_00009' order represents '1' with '1'
c Var 'sum_col_00009' order represents '0' with '-1319'
c Encoding variable: sum_box_00001 with domain: bool (representing constraint )
c Var 'sum_box_00001' direct represents '0' with '-1320'
c Var 'sum_box_00001' direct represents '1' with '1320'
c Var 'sum_box_00001' order represents '1' with '1'
c Var 'sum_box_00001' order represents '0' with '-1320'
c Encoding variable: sum_box_00002 with domain: bool (representing constraint )
c Var 'sum_box_00002' direct represents '0' with '-1321'
c Var 'sum_box_00002' direct represents '1' with '1321'
c Var 'sum_box_00002' order represents '1' with '1'
c Var 'sum_box_00002' order represents '0' with '-1321'
c Encoding variable: sum_box_00003 with domain: bool (representing constraint )
c Var 'sum_box_00003' direct represents '0' with '-1322'
c Var 'sum_box_00003' direct represents '1' with '1322'
c Var 'sum_box_00003' order represents '1' with '1'
c Var 'sum_box_00003' order represents '0' with '-1322'
1322 -1322 0
c Encoding variable: sum_box_00004 with domain: bool (representing constraint )
c Var 'sum_box_00004' direct represents '0' with '-1323'
c Var 'sum_box_00004' direct represents '1' with '1323'
c Var 'sum_box_00004' order represents '1' with '1'
c Var 'sum_box_00004' order represents '0' with '-1323'
1323 -1323 0
c Encoding variable: sum_box_00005 with domain: bool (representing constraint )
c Var 'sum_box_00005' direct represents '0' with '-1324'
c Var 'sum_box_00005' direct represents '1' with '1324'
c Var 'sum_box_00005' order represents '1' with '1'
c Var 'sum_box_00005' order represents '0' with '-1324'
1324 -1324 0
c Encoding variable: sum_box_00006 with domain: bool (representing constraint )
c Var 'sum_box_00006' direct represents '0' with '-1325'
c Var 'sum_box_00006' direct represents '1' with '1325'
c Var 'sum_box_00006' order represents '1' with '1'
c Var 'sum_box_00006' order represents '0' with '-1325'
1325 -1325 0
c Encoding variable: sum_box_00007 with domain: bool (representing constraint )
c Var 'sum_box_00007' direct represents '0' with '-1326'
c Var 'sum_box_00007' direct represents '1' with '1326'
c Var 'sum_box_00007' order represents '1' with '1'
c Var 'sum_box_00007' order represents '0' with '-1326'
1326 -1326 0
c Encoding variable: sum_box_00008 with domain: bool (representing constraint )
c Var 'sum_box_00008' direct represents '0' with '-1327'
c Var 'sum_box_00008' direct represents '1' with '1327'
c Var 'sum_box_00008' order represents '1' with '1'
c Var 'sum_box_00008' order represents '0' with '-1327'
1327 -1327 0
c Encoding variable: sum_box_00009 with domain: bool (representing constraint )
c Var 'sum_box_00009' direct represents '0' with '-1328'
c Var 'sum_box_00009' direct represents '1' with '1328'
c Var 'sum_box_00009' order represents '1' with '1'
c Var 'sum_box_00009' order represents '0' with '-1328'
1328 -1328 0
c Encoding variable: aux0 with domain: bool (representing constraint ((x_00001_00001 + x_00001_00002)=tv=3))
c Var 'aux0' direct represents '0' with '-1329'
c Var 'aux0' direct represents '1' with '1329'
c Var 'aux0' order represents '1' with '1'
c Var 'aux0' order represents '0' with '-1329'
c Encoding variable: aux1 with domain: bool (representing constraint ((x_00001_00003 + x_00001_00004 + x_00001_00005)=tv=15))
c Var 'aux1' direct represents '0' with '-1330'
c Var 'aux1' direct represents '1' with '1330'
c Var 'aux1' order represents '1' with '1'
c Var 'aux1' order represents '0' with '-1330'
c Encoding variable: aux2 with domain: bool (representing constraint ((x_00002_00005 + x_00002_00006 + x_00003_00005 + x_00001_00006)=tv=22))
c Var 'aux2' direct represents '0' with '-1331'
c Var 'aux2' direct represents '1' with '1331'
c Var 'aux2' order represents '1' with '1'
c Var 'aux2' order represents '0' with '-1331'
c Encoding variable: aux3 with domain: bool (representing constraint ((x_00002_00007 + x_00001_00007)=tv=4))
c Var 'aux3' direct represents '0' with '-1332'
c Var 'aux3' direct represents '1' with '1332'
c Var 'aux3' order represents '1' with '1'
c Var 'aux3' order represents '0' with '-1332'
c Encoding variable: aux4 with domain: bool (representing constraint ((x_00002_00008 + x_00001_00008)=tv=16))
c Var 'aux4' direct represents '0' with '-1333'
c Var 'aux4' direct represents '1' with '1333'
c Var 'aux4' order represents '1' with '1'
c Var 'aux4' order represents '0' with '-1333'
c Encoding variable: aux5 with domain: bool (representing constraint ((x_00002_00009 + x_00003_00009 + x_00004_00009 + x_00001_00009)=tv=15))
c Var 'aux5' direct represents '0' with '-1334'
c Var 'aux5' direct represents '1' with '1334'
c Var 'aux5' order represents '1' with '1'
c Var 'aux5' order represents '0' with '-1334'
c Encoding variable: aux6 with domain: bool (representing constraint ((x_00002_00001 + x_00002_00002 + x_00003_00001 + x_00003_00002)=tv=25))
c Var 'aux6' direct represents '0' with '-1335'
c Var 'aux6' direct represents '1' with '1335'
c Var 'aux6' order represents '1' with '1'
c Var 'aux6' order represents '0' with '-1335'
c Encoding variable: aux7 with domain: bool (representing constraint ((x_00002_00003 + x_00002_00004)=tv=17))
c Var 'aux7' direct represents '0' with '-1336'
c Var 'aux7' direct represents '1' with '1336'
c Var 'aux7' order represents '1' with '1'
c Var 'aux7' order represents '0' with '-1336'
c Encoding variable: aux8 with domain: bool (representing constraint ((x_00003_00003 + x_00003_00004 + x_00004_00004)=tv=9))
c Var 'aux8' direct represents '0' with '-1337'
c Var 'aux8' direct represents '1' with '1337'
c Var 'aux8' order represents '1' with '1'
c Var 'aux8' order represents '0' with '-1337'
c Encoding variable: aux9 with domain: bool (representing constraint ((x_00003_00006 + x_00004_00006 + x_00005_00006)=tv=8))
c Var 'aux9' direct represents '0' with '-1338'
c Var 'aux9' direct represents '1' with '1338'
c Var 'aux9' order represents '1' with '1'
c Var 'aux9' order represents '0' with '-1338'
c Encoding variable: aux10 with domain: bool (representing constraint ((x_00003_00007 + x_00003_00008 + x_00004_00007)=tv=20))
c Var 'aux10' direct represents '0' with '-1339'
c Var 'aux10' direct represents '1' with '1339'
c Var 'aux10' order represents '1' with '1'
c Var 'aux10' order represents '0' with '-1339'
c Encoding variable: aux11 with domain: bool (representing constraint ((x_00004_00001 + x_00005_00001)=tv=6))
c Var 'aux11' direct represents '0' with '-1340'
c Var 'aux11' direct represents '1' with '1340'
c Var 'aux11' order represents '1' with '1'
c Var 'aux11' order represents '0' with '-1340'
c Encoding variable: aux12 with domain: bool (representing constraint ((x_00004_00002 + x_00004_00003)=tv=14))
c Var 'aux12' direct represents '0' with '-1341'
c Var 'aux12' direct represents '1' with '1341'
c Var 'aux12' order represents '1' with '1'
c Var 'aux12' order represents '0' with '-1341'
c Encoding variable: aux13 with domain: bool (representing constraint ((x_00004_00005 + x_00005_00005 + x_00006_00005)=tv=17))
c Var 'aux13' direct represents '0' with '-1342'
c Var 'aux13' direct represents '1' with '1342'
c Var 'aux13' order represents '1' with '1'
c Var 'aux13' order represents '0' with '-1342'
c Encoding variable: aux14 with domain: bool (representing constraint ((x_00004_00008 + x_00005_00007 + x_00005_00008)=tv=17))
c Var 'aux14' direct represents '0' with '-1343'
c Var 'aux14' direct represents '1' with '1343'
c Var 'aux14' order represents '1' with '1'
c Var 'aux14' order represents '0' with '-1343'
c Encoding variable: aux15 with domain: bool (representing constraint ((x_00005_00002 + x_00005_00003 + x_00006_00002)=tv=13))
c Var 'aux15' direct represents '0' with '-1344'
c Var 'aux15' direct represents '1' with '1344'
c Var 'aux15' order represents '1' with '1'
c Var 'aux15' order represents '0' with '-1344'
c Encoding variable: aux16 with domain: bool (representing constraint ((x_00007_00004 + x_00005_00004 + x_00006_00004)=tv=20))
c Var 'aux16' direct represents '0' with '-1345'
c Var 'aux16' direct represents '1' with '1345'
c Var 'aux16' order represents '1' with '1'
c Var 'aux16' order represents '0' with '-1345'
c Encoding variable: aux17 with domain: bool (representing constraint ((x_00005_00009 + x_00006_00009)=tv=12))
c Var 'aux17' direct represents '0' with '-1346'
c Var 'aux17' direct represents '1' with '1346'
c Var 'aux17' order represents '1' with '1'
c Var 'aux17' order represents '0' with '-1346'
c Encoding variable: aux18 with domain: bool (representing constraint ((x_00007_00001 + x_00008_00001 + x_00009_00001 + x_00006_00001)=tv=27))
c Var 'aux18' direct represents '0' with '-1347'
c Var 'aux18' direct represents '1' with '1347'
c Var 'aux18' order represents '1' with '1'
c Var 'aux18' order represents '0' with '-1347'
c Encoding variable: aux19 with domain: bool (representing constraint ((x_00007_00002 + x_00007_00003 + x_00006_00003)=tv=6))
c Var 'aux19' direct represents '0' with '-1348'
c Var 'aux19' direct represents '1' with '1348'
c Var 'aux19' order represents '1' with '1'
c Var 'aux19' order represents '0' with '-1348'
c Encoding variable: aux20 with domain: bool (representing constraint ((x_00007_00006 + x_00007_00007 + x_00006_00006)=tv=20))
c Var 'aux20' direct represents '0' with '-1349'
c Var 'aux20' direct represents '1' with '1349'
c Var 'aux20' order represents '1' with '1'
c Var 'aux20' order represents '0' with '-1349'
c Encoding variable: aux21 with domain: bool (representing constraint ((x_00006_00007 + x_00006_00008)=tv=6))
c Var 'aux21' direct represents '0' with '-1350'
c Var 'aux21' direct represents '1' with '1350'
c Var 'aux21' order represents '1' with '1'
c Var 'aux21' order represents '0' with '-1350'
c Encoding variable: aux22 with domain: bool (representing constraint ((x_00007_00005 + x_00008_00004 + x_00008_00005 + x_00009_00004)=tv=10))
c Var 'aux22' direct represents '0' with '-1351'
c Var 'aux22' direct represents '1' with '1351'
c Var 'aux22' order represents '1' with '1'
c Var 'aux22' order represents '0' with '-1351'
c Encoding variable: aux23 with domain: bool (representing constraint ((x_00007_00008 + x_00007_00009 + x_00008_00008 + x_00008_00009)=tv=14))
c Var 'aux23' direct represents '0' with '-1352'
c Var 'aux23' direct represents '1' with '1352'
c Var 'aux23' order represents '1' with '1'
c Var 'aux23' order represents '0' with '-1352'
c Encoding variable: aux24 with domain: bool (representing constraint ((x_00008_00002 + x_00009_00002)=tv=8))
c Var 'aux24' direct represents '0' with '-1353'
c Var 'aux24' direct represents '1' with '1353'
c Var 'aux24' order represents '1' with '1'
c Var 'aux24' order represents '0' with '-1353'
c Encoding variable: aux25 with domain: bool (representing constraint ((x_00008_00003 + x_00009_00003)=tv=16))
c Var 'aux25' direct represents '0' with '-1354'
c Var 'aux25' direct represents '1' with '1354'
c Var 'aux25' order represents '1' with '1'
c Var 'aux25' order represents '0' with '-1354'
c Encoding variable: aux26 with domain: bool (representing constraint ((x_00008_00006 + x_00008_00007)=tv=15))
c Var 'aux26' direct represents '0' with '-1355'
c Var 'aux26' direct represents '1' with '1355'
c Var 'aux26' order represents '1' with '1'
c Var 'aux26' order represents '0' with '-1355'
c Encoding variable: aux27 with domain: bool (representing constraint ((x_00009_00005 + x_00009_00006 + x_00009_00007)=tv=13))
c Var 'aux27' direct represents '0' with '-1356'
c Var 'aux27' direct represents '1' with '1356'
c Var 'aux27' order represents '1' with '1'
c Var 'aux27' order represents '0' with '-1356'
c Encoding variable: aux28 with domain: bool (representing constraint ((x_00009_00008 + x_00009_00009)=tv=17))
c Var 'aux28' direct represents '0' with '-1357'
c Var 'aux28' direct represents '1' with '1357'
c Var 'aux28' order represents '1' with '1'
c Var 'aux28' order represents '0' with '-1357'
c Encoding variable: aux29 with domain: bool (representing constraint (x_00001_00001 != x_00001_00002))
c Var 'aux29' direct represents '0' with '-1358'
c Var 'aux29' direct represents '1' with '1358'
c Var 'aux29' order represents '1' with '1'
c Var 'aux29' order represents '0' with '-1358'
c Encoding variable: aux30 with domain: bool (representing constraint (x_00002_00007 != x_00001_00007))
c Var 'aux30' direct represents '0' with '-1359'
c Var 'aux30' direct represents '1' with '1359'
c Var 'aux30' order represents '1' with '1'
c Var 'aux30' order represents '0' with '-1359'
c Encoding variable: aux31 with domain: bool (representing constraint (x_00002_00008 != x_00001_00008))
c Var 'aux31' direct represents '0' with '-1360'
c Var 'aux31' direct represents '1' with '1360'
c Var 'aux31' order represents '1' with '1'
c Var 'aux31' order represents '0' with '-1360'
c Encoding variable: aux32 with domain: bool (representing constraint (x_00002_00003 != x_00002_00004))
c Var 'aux32' direct represents '0' with '-1361'
c Var 'aux32' direct represents '1' with '1361'
c Var 'aux32' order represents '1' with '1'
c Var 'aux32' order represents '0' with '-1361'
c Encoding variable: aux33 with domain: bool (representing constraint (x_00004_00001 != x_00005_00001))
c Var 'aux33' direct represents '0' with '-1362'
c Var 'aux33' direct represents '1' with '1362'
c Var 'aux33' order represents '1' with '1'
c Var 'aux33' order represents '0' with '-1362'
c Encoding variable: aux34 with domain: bool (representing constraint (x_00004_00002 != x_00004_00003))
c Var 'aux34' direct represents '0' with '-1363'
c Var 'aux34' direct represents '1' with '1363'
c Var 'aux34' order represents '1' with '1'
c Var 'aux34' order represents '0' with '-1363'
c Encoding variable: aux35 with domain: bool (representing constraint (x_00005_00009 != x_00006_00009))
c Var 'aux35' direct represents '0' with '-1364'
c Var 'aux35' direct represents '1' with '1364'
c Var 'aux35' order represents '1' with '1'
c Var 'aux35' order represents '0' with '-1364'
c Encoding variable: aux36 with domain: bool (representing constraint (x_00006_00007 != x_00006_00008))
c Var 'aux36' direct represents '0' with '-1365'
c Var 'aux36' direct represents '1' with '1365'
c Var 'aux36' order represents '1' with '1'
c Var 'aux36' order represents '0' with '-1365'
c Encoding variable: aux37 with domain: bool (representing constraint (x_00008_00002 != x_00009_00002))
c Var 'aux37' direct represents '0' with '-1366'
c Var 'aux37' direct represents '1' with '1366'
c Var 'aux37' order represents '1' with '1'
c Var 'aux37' order represents '0' with '-1366'
c Encoding variable: aux38 with domain: bool (representing constraint (x_00008_00003 != x_00009_00003))
c Var 'aux38' direct represents '0' with '-1367'
c Var 'aux38' direct represents '1' with '1367'
c Var 'aux38' order represents '1' with '1'
c Var 'aux38' order represents '0' with '-1367'
c Encoding variable: aux39 with domain: bool (representing constraint (x_00008_00006 != x_00008_00007))
c Var 'aux39' direct represents '0' with '-1368'
c Var 'aux39' direct represents '1' with '1368'
c Var 'aux39' order represents '1' with '1'
c Var 'aux39' order represents '0' with '-1368'
c Encoding variable: aux40 with domain: bool (representing constraint (x_00009_00008 != x_00009_00009))
c Var 'aux40' direct represents '0' with '-1369'
c Var 'aux40' direct represents '1' with '1369'
c Var 'aux40' order represents '1' with '1'
c Var 'aux40' order represents '0' with '-1369'
c Encoding variable: aux41 with domain: bool (representing constraint ((x_00002_00001 + x_00007_00001 + x_00003_00001 + x_00008_00001 + x_00004_00001 + x_00009_00001 + x_00005_00001 + x_00001_00001 + x_00006_00001)=tv=45))
c Var 'aux41' direct represents '0' with '-1370'
c Var 'aux41' direct represents '1' with '1370'
c Var 'aux41' order represents '1' with '1'
c Var 'aux41' order represents '0' with '-1370'
c Encoding variable: aux42 with domain: bool (representing constraint ((x_00002_00002 + x_00007_00002 + x_00003_00002 + x_00008_00002 + x_00004_00002 + x_00009_00002 + x_00005_00002 + x_00001_00002 + x_00006_00002)=tv=45))
c Var 'aux42' direct represents '0' with '-1371'
c Var 'aux42' direct represents '1' with '1371'
c Var 'aux42' order represents '1' with '1'
c Var 'aux42' order represents '0' with '-1371'
c Encoding variable: aux43 with domain: bool (representing constraint ((x_00002_00003 + x_00007_00003 + x_00003_00003 + x_00008_00003 + x_00004_00003 + x_00009_00003 + x_00005_00003 + x_00001_00003 + x_00006_00003)=tv=45))
c Var 'aux43' direct represents '0' with '-1372'
c Var 'aux43' direct represents '1' with '1372'
c Var 'aux43' order represents '1' with '1'
c Var 'aux43' order represents '0' with '-1372'
c Encoding variable: aux44 with domain: bool (representing constraint ((x_00002_00004 + x_00007_00004 + x_00003_00004 + x_00008_00004 + x_00004_00004 + x_00009_00004 + x_00005_00004 + x_00001_00004 + x_00006_00004)=tv=45))
c Var 'aux44' direct represents '0' with '-1373'
c Var 'aux44' direct represents '1' with '1373'
c Var 'aux44' order represents '1' with '1'
c Var 'aux44' order represents '0' with '-1373'
c Encoding variable: aux45 with domain: bool (representing constraint ((x_00002_00005 + x_00007_00005 + x_00003_00005 + x_00008_00005 + x_00004_00005 + x_00009_00005 + x_00005_00005 + x_00001_00005 + x_00006_00005)=tv=45))
c Var 'aux45' direct represents '0' with '-1374'
c Var 'aux45' direct represents '1' with '1374'
c Var 'aux45' order represents '1' with '1'
c Var 'aux45' order represents '0' with '-1374'
c Encoding variable: aux46 with domain: bool (representing constraint ((x_00002_00006 + x_00007_00006 + x_00003_00006 + x_00008_00006 + x_00004_00006 + x_00009_00006 + x_00005_00006 + x_00001_00006 + x_00006_00006)=tv=45))
c Var 'aux46' direct represents '0' with '-1375'
c Var 'aux46' direct represents '1' with '1375'
c Var 'aux46' order represents '1' with '1'
c Var 'aux46' order represents '0' with '-1375'
c Encoding variable: aux47 with domain: bool (representing constraint ((x_00002_00007 + x_00007_00007 + x_00003_00007 + x_00008_00007 + x_00004_00007 + x_00009_00007 + x_00005_00007 + x_00001_00007 + x_00006_00007)=tv=45))
c Var 'aux47' direct represents '0' with '-1376'
c Var 'aux47' direct represents '1' with '1376'
c Var 'aux47' order represents '1' with '1'
c Var 'aux47' order represents '0' with '-1376'
c Encoding variable: aux48 with domain: bool (representing constraint ((x_00002_00008 + x_00007_00008 + x_00003_00008 + x_00008_00008 + x_00004_00008 + x_00009_00008 + x_00005_00008 + x_00001_00008 + x_00006_00008)=tv=45))
c Var 'aux48' direct represents '0' with '-1377'
c Var 'aux48' direct represents '1' with '1377'
c Var 'aux48' order represents '1' with '1'
c Var 'aux48' order represents '0' with '-1377'
c Encoding variable: aux49 with domain: bool (representing constraint ((x_00002_00009 + x_00007_00009 + x_00003_00009 + x_00008_00009 + x_00004_00009 + x_00009_00009 + x_00005_00009 + x_00001_00009 + x_00006_00009)=tv=45))
c Var 'aux49' direct represents '0' with '-1378'
c Var 'aux49' direct represents '1' with '1378'
c Var 'aux49' order represents '1' with '1'
c Var 'aux49' order represents '0' with '-1378'
c Encoding variable: aux50 with domain: bool (representing constraint ((x_00001_00001 + x_00001_00002 + x_00001_00003 + x_00001_00004 + x_00001_00005 + x_00001_00006 + x_00001_00007 + x_00001_00008 + x_00001_00009)=tv=45))
c Var 'aux50' direct represents '0' with '-1379'
c Var 'aux50' direct represents '1' with '1379'
c Var 'aux50' order represents '1' with '1'
c Var 'aux50' order represents '0' with '-1379'
c Encoding variable: aux51 with domain: bool (representing constraint ((x_00002_00001 + x_00002_00002 + x_00002_00003 + x_00002_00004 + x_00002_00005 + x_00002_00006 + x_00002_00007 + x_00002_00008 + x_00002_00009)=tv=45))
c Var 'aux51' direct represents '0' with '-1380'
c Var 'aux51' direct represents '1' with '1380'
c Var 'aux51' order represents '1' with '1'
c Var 'aux51' order represents '0' with '-1380'
c Encoding variable: aux52 with domain: bool (representing constraint ((x_00003_00001 + x_00003_00002 + x_00003_00003 + x_00003_00004 + x_00003_00005 + x_00003_00006 + x_00003_00007 + x_00003_00008 + x_00003_00009)=tv=45))
c Var 'aux52' direct represents '0' with '-1381'
c Var 'aux52' direct represents '1' with '1381'
c Var 'aux52' order represents '1' with '1'
c Var 'aux52' order represents '0' with '-1381'
c Encoding variable: aux53 with domain: bool (representing constraint ((x_00004_00001 + x_00004_00002 + x_00004_00003 + x_00004_00004 + x_00004_00005 + x_00004_00006 + x_00004_00007 + x_00004_00008 + x_00004_00009)=tv=45))
c Var 'aux53' direct represents '0' with '-1382'
c Var 'aux53' direct represents '1' with '1382'
c Var 'aux53' order represents '1' with '1'
c Var 'aux53' order represents '0' with '-1382'
c Encoding variable: aux54 with domain: bool (representing constraint ((x_00005_00001 + x_00005_00002 + x_00005_00003 + x_00005_00004 + x_00005_00005 + x_00005_00006 + x_00005_00007 + x_00005_00008 + x_00005_00009)=tv=45))
c Var 'aux54' direct represents '0' with '-1383'
c Var 'aux54' direct represents '1' with '1383'
c Var 'aux54' order represents '1' with '1'
c Var 'aux54' order represents '0' with '-1383'
c Encoding variable: aux55 with domain: bool (representing constraint ((x_00006_00001 + x_00006_00002 + x_00006_00003 + x_00006_00004 + x_00006_00005 + x_00006_00006 + x_00006_00007 + x_00006_00008 + x_00006_00009)=tv=45))
c Var 'aux55' direct represents '0' with '-1384'
c Var 'aux55' direct represents '1' with '1384'
c Var 'aux55' order represents '1' with '1'
c Var 'aux55' order represents '0' with '-1384'
c Encoding variable: aux56 with domain: bool (representing constraint ((x_00007_00001 + x_00007_00002 + x_00007_00003 + x_00007_00004 + x_00007_00005 + x_00007_00006 + x_00007_00007 + x_00007_00008 + x_00007_00009)=tv=45))
c Var 'aux56' direct represents '0' with '-1385'
c Var 'aux56' direct represents '1' with '1385'
c Var 'aux56' order represents '1' with '1'
c Var 'aux56' order represents '0' with '-1385'
c Encoding variable: aux57 with domain: bool (representing constraint ((x_00008_00001 + x_00008_00002 + x_00008_00003 + x_00008_00004 + x_00008_00005 + x_00008_00006 + x_00008_00007 + x_00008_00008 + x_00008_00009)=tv=45))
c Var 'aux57' direct represents '0' with '-1386'
c Var 'aux57' direct represents '1' with '1386'
c Var 'aux57' order represents '1' with '1'
c Var 'aux57' order represents '0' with '-1386'
c Encoding variable: aux58 with domain: bool (representing constraint ((x_00009_00001 + x_00009_00002 + x_00009_00003 + x_00009_00004 + x_00009_00005 + x_00009_00006 + x_00009_00007 + x_00009_00008 + x_00009_00009)=tv=45))
c Var 'aux58' direct represents '0' with '-1387'
c Var 'aux58' direct represents '1' with '1387'
c Var 'aux58' order represents '1' with '1'
c Var 'aux58' order represents '0' with '-1387'
c Encoding variable: aux59 with domain: bool (representing constraint ((x_00004_00001 + x_00004_00002 + x_00004_00003 + x_00005_00001 + x_00005_00002 + x_00005_00003 + x_00006_00001 + x_00006_00002 + x_00006_00003)=tv=45))
c Var 'aux59' direct represents '0' with '-1388'
c Var 'aux59' direct represents '1' with '1388'
c Var 'aux59' order represents '1' with '1'
c Var 'aux59' order represents '0' with '-1388'
c Encoding variable: aux60 with domain: bool (representing constraint ((x_00004_00004 + x_00004_00005 + x_00004_00006 + x_00005_00004 + x_00005_00005 + x_00005_00006 + x_00006_00004 + x_00006_00005 + x_00006_00006)=tv=45))
c Var 'aux60' direct represents '0' with '-1389'
c Var 'aux60' direct represents '1' with '1389'
c Var 'aux60' order represents '1' with '1'
c Var 'aux60' order represents '0' with '-1389'
c Encoding variable: aux61 with domain: bool (representing constraint ((x_00004_00007 + x_00004_00008 + x_00004_00009 + x_00005_00007 + x_00005_00008 + x_00005_00009 + x_00006_00007 + x_00006_00008 + x_00006_00009)=tv=45))
c Var 'aux61' direct represents '0' with '-1390'
c Var 'aux61' direct represents '1' with '1390'
c Var 'aux61' order represents '1' with '1'
c Var 'aux61' order represents '0' with '-1390'
c Encoding variable: aux62 with domain: bool (representing constraint ((x_00007_00001 + x_00007_00002 + x_00007_00003 + x_00008_00001 + x_00008_00002 + x_00008_00003 + x_00009_00001 + x_00009_00002 + x_00009_00003)=tv=45))
c Var 'aux62' direct represents '0' with '-1391'
c Var 'aux62' direct represents '1' with '1391'
c Var 'aux62' order represents '1' with '1'
c Var 'aux62' order represents '0' with '-1391'
c Encoding variable: aux63 with domain: bool (representing constraint ((x_00007_00004 + x_00007_00005 + x_00007_00006 + x_00008_00004 + x_00008_00005 + x_00008_00006 + x_00009_00004 + x_00009_00005 + x_00009_00006)=tv=45))
c Var 'aux63' direct represents '0' with '-1392'
c Var 'aux63' direct represents '1' with '1392'
c Var 'aux63' order represents '1' with '1'
c Var 'aux63' order represents '0' with '-1392'
c Encoding variable: aux64 with domain: bool (representing constraint ((x_00007_00007 + x_00007_00008 + x_00007_00009 + x_00008_00007 + x_00008_00008 + x_00008_00009 + x_00009_00007 + x_00009_00008 + x_00009_00009)=tv=45))
c Var 'aux64' direct represents '0' with '-1393'
c Var 'aux64' direct represents '1' with '1393'
c Var 'aux64' order represents '1' with '1'
c Var 'aux64' order represents '0' with '-1393'
c Encoding variable: aux65 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00008_00001=1) + (x_00001_00001=1) + (x_00006_00001=1) + (x_00004_00001=1) + (x_00009_00001=1) + (x_00002_00001=1) + (x_00007_00001=1) + (x_00005_00001=1))=tv=1))
c Var 'aux65' direct represents '0' with '-1394'
c Var 'aux65' direct represents '1' with '1394'
c Var 'aux65' order represents '1' with '1'
c Var 'aux65' order represents '0' with '-1394'
c Encoding variable: aux66 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00008_00001=2) + (x_00001_00001=2) + (x_00006_00001=2) + (x_00004_00001=2) + (x_00009_00001=2) + (x_00002_00001=2) + (x_00007_00001=2) + (x_00005_00001=2))=tv=1))
c Var 'aux66' direct represents '0' with '-1395'
c Var 'aux66' direct represents '1' with '1395'
c Var 'aux66' order represents '1' with '1'
c Var 'aux66' order represents '0' with '-1395'
c Encoding variable: aux67 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00008_00001=3) + (x_00001_00001=3) + (x_00006_00001=3) + (x_00004_00001=3) + (x_00009_00001=3) + (x_00002_00001=3) + (x_00007_00001=3) + (x_00005_00001=3))=tv=1))
c Var 'aux67' direct represents '0' with '-1396'
c Var 'aux67' direct represents '1' with '1396'
c Var 'aux67' order represents '1' with '1'
c Var 'aux67' order represents '0' with '-1396'
c Encoding variable: aux68 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00008_00001=4) + (x_00001_00001=4) + (x_00006_00001=4) + (x_00004_00001=4) + (x_00009_00001=4) + (x_00002_00001=4) + (x_00007_00001=4) + (x_00005_00001=4))=tv=1))
c Var 'aux68' direct represents '0' with '-1397'
c Var 'aux68' direct represents '1' with '1397'
c Var 'aux68' order represents '1' with '1'
c Var 'aux68' order represents '0' with '-1397'
c Encoding variable: aux69 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00008_00001=5) + (x_00001_00001=5) + (x_00006_00001=5) + (x_00004_00001=5) + (x_00009_00001=5) + (x_00002_00001=5) + (x_00007_00001=5) + (x_00005_00001=5))=tv=1))
c Var 'aux69' direct represents '0' with '-1398'
c Var 'aux69' direct represents '1' with '1398'
c Var 'aux69' order represents '1' with '1'
c Var 'aux69' order represents '0' with '-1398'
c Encoding variable: aux70 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00008_00001=6) + (x_00001_00001=6) + (x_00006_00001=6) + (x_00004_00001=6) + (x_00009_00001=6) + (x_00002_00001=6) + (x_00007_00001=6) + (x_00005_00001=6))=tv=1))
c Var 'aux70' direct represents '0' with '-1399'
c Var 'aux70' direct represents '1' with '1399'
c Var 'aux70' order represents '1' with '1'
c Var 'aux70' order represents '0' with '-1399'
c Encoding variable: aux71 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00008_00001=7) + (x_00001_00001=7) + (x_00006_00001=7) + (x_00004_00001=7) + (x_00009_00001=7) + (x_00002_00001=7) + (x_00007_00001=7) + (x_00005_00001=7))=tv=1))
c Var 'aux71' direct represents '0' with '-1400'
c Var 'aux71' direct represents '1' with '1400'
c Var 'aux71' order represents '1' with '1'
c Var 'aux71' order represents '0' with '-1400'
c Encoding variable: aux72 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00008_00001=8) + (x_00001_00001=8) + (x_00006_00001=8) + (x_00004_00001=8) + (x_00009_00001=8) + (x_00002_00001=8) + (x_00007_00001=8) + (x_00005_00001=8))=tv=1))
c Var 'aux72' direct represents '0' with '-1401'
c Var 'aux72' direct represents '1' with '1401'
c Var 'aux72' order represents '1' with '1'
c Var 'aux72' order represents '0' with '-1401'
c Encoding variable: aux73 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00008_00001=9) + (x_00001_00001=9) + (x_00006_00001=9) + (x_00004_00001=9) + (x_00009_00001=9) + (x_00002_00001=9) + (x_00007_00001=9) + (x_00005_00001=9))=tv=1))
c Var 'aux73' direct represents '0' with '-1402'
c Var 'aux73' direct represents '1' with '1402'
c Var 'aux73' order represents '1' with '1'
c Var 'aux73' order represents '0' with '-1402'
c Encoding variable: aux74 with domain: bool (representing constraint (((x_00003_00002=1) + (x_00008_00002=1) + (x_00001_00002=1) + (x_00006_00002=1) + (x_00004_00002=1) + (x_00009_00002=1) + (x_00002_00002=1) + (x_00007_00002=1) + (x_00005_00002=1))=tv=1))
c Var 'aux74' direct represents '0' with '-1403'
c Var 'aux74' direct represents '1' with '1403'
c Var 'aux74' order represents '1' with '1'
c Var 'aux74' order represents '0' with '-1403'
c Encoding variable: aux75 with domain: bool (representing constraint (((x_00003_00002=2) + (x_00008_00002=2) + (x_00001_00002=2) + (x_00006_00002=2) + (x_00004_00002=2) + (x_00009_00002=2) + (x_00002_00002=2) + (x_00007_00002=2) + (x_00005_00002=2))=tv=1))
c Var 'aux75' direct represents '0' with '-1404'
c Var 'aux75' direct represents '1' with '1404'
c Var 'aux75' order represents '1' with '1'
c Var 'aux75' order represents '0' with '-1404'
c Encoding variable: aux76 with domain: bool (representing constraint (((x_00003_00002=3) + (x_00008_00002=3) + (x_00001_00002=3) + (x_00006_00002=3) + (x_00004_00002=3) + (x_00009_00002=3) + (x_00002_00002=3) + (x_00007_00002=3) + (x_00005_00002=3))=tv=1))
c Var 'aux76' direct represents '0' with '-1405'
c Var 'aux76' direct represents '1' with '1405'
c Var 'aux76' order represents '1' with '1'
c Var 'aux76' order represents '0' with '-1405'
c Encoding variable: aux77 with domain: bool (representing constraint (((x_00003_00002=4) + (x_00008_00002=4) + (x_00001_00002=4) + (x_00006_00002=4) + (x_00004_00002=4) + (x_00009_00002=4) + (x_00002_00002=4) + (x_00007_00002=4) + (x_00005_00002=4))=tv=1))
c Var 'aux77' direct represents '0' with '-1406'
c Var 'aux77' direct represents '1' with '1406'
c Var 'aux77' order represents '1' with '1'
c Var 'aux77' order represents '0' with '-1406'
c Encoding variable: aux78 with domain: bool (representing constraint (((x_00003_00002=5) + (x_00008_00002=5) + (x_00001_00002=5) + (x_00006_00002=5) + (x_00004_00002=5) + (x_00009_00002=5) + (x_00002_00002=5) + (x_00007_00002=5) + (x_00005_00002=5))=tv=1))
c Var 'aux78' direct represents '0' with '-1407'
c Var 'aux78' direct represents '1' with '1407'
c Var 'aux78' order represents '1' with '1'
c Var 'aux78' order represents '0' with '-1407'
c Encoding variable: aux79 with domain: bool (representing constraint (((x_00003_00002=6) + (x_00008_00002=6) + (x_00001_00002=6) + (x_00006_00002=6) + (x_00004_00002=6) + (x_00009_00002=6) + (x_00002_00002=6) + (x_00007_00002=6) + (x_00005_00002=6))=tv=1))
c Var 'aux79' direct represents '0' with '-1408'
c Var 'aux79' direct represents '1' with '1408'
c Var 'aux79' order represents '1' with '1'
c Var 'aux79' order represents '0' with '-1408'
c Encoding variable: aux80 with domain: bool (representing constraint (((x_00003_00002=7) + (x_00008_00002=7) + (x_00001_00002=7) + (x_00006_00002=7) + (x_00004_00002=7) + (x_00009_00002=7) + (x_00002_00002=7) + (x_00007_00002=7) + (x_00005_00002=7))=tv=1))
c Var 'aux80' direct represents '0' with '-1409'
c Var 'aux80' direct represents '1' with '1409'
c Var 'aux80' order represents '1' with '1'
c Var 'aux80' order represents '0' with '-1409'
c Encoding variable: aux81 with domain: bool (representing constraint (((x_00003_00002=8) + (x_00008_00002=8) + (x_00001_00002=8) + (x_00006_00002=8) + (x_00004_00002=8) + (x_00009_00002=8) + (x_00002_00002=8) + (x_00007_00002=8) + (x_00005_00002=8))=tv=1))
c Var 'aux81' direct represents '0' with '-1410'
c Var 'aux81' direct represents '1' with '1410'
c Var 'aux81' order represents '1' with '1'
c Var 'aux81' order represents '0' with '-1410'
c Encoding variable: aux82 with domain: bool (representing constraint (((x_00003_00002=9) + (x_00008_00002=9) + (x_00001_00002=9) + (x_00006_00002=9) + (x_00004_00002=9) + (x_00009_00002=9) + (x_00002_00002=9) + (x_00007_00002=9) + (x_00005_00002=9))=tv=1))
c Var 'aux82' direct represents '0' with '-1411'
c Var 'aux82' direct represents '1' with '1411'
c Var 'aux82' order represents '1' with '1'
c Var 'aux82' order represents '0' with '-1411'
c Encoding variable: aux83 with domain: bool (representing constraint (((x_00003_00003=1) + (x_00008_00003=1) + (x_00001_00003=1) + (x_00006_00003=1) + (x_00004_00003=1) + (x_00009_00003=1) + (x_00002_00003=1) + (x_00007_00003=1) + (x_00005_00003=1))=tv=1))
c Var 'aux83' direct represents '0' with '-1412'
c Var 'aux83' direct represents '1' with '1412'
c Var 'aux83' order represents '1' with '1'
c Var 'aux83' order represents '0' with '-1412'
c Encoding variable: aux84 with domain: bool (representing constraint (((x_00003_00003=2) + (x_00008_00003=2) + (x_00001_00003=2) + (x_00006_00003=2) + (x_00004_00003=2) + (x_00009_00003=2) + (x_00002_00003=2) + (x_00007_00003=2) + (x_00005_00003=2))=tv=1))
c Var 'aux84' direct represents '0' with '-1413'
c Var 'aux84' direct represents '1' with '1413'
c Var 'aux84' order represents '1' with '1'
c Var 'aux84' order represents '0' with '-1413'
c Encoding variable: aux85 with domain: bool (representing constraint (((x_00003_00003=3) + (x_00008_00003=3) + (x_00001_00003=3) + (x_00006_00003=3) + (x_00004_00003=3) + (x_00009_00003=3) + (x_00002_00003=3) + (x_00007_00003=3) + (x_00005_00003=3))=tv=1))
c Var 'aux85' direct represents '0' with '-1414'
c Var 'aux85' direct represents '1' with '1414'
c Var 'aux85' order represents '1' with '1'
c Var 'aux85' order represents '0' with '-1414'
c Encoding variable: aux86 with domain: bool (representing constraint (((x_00003_00003=4) + (x_00008_00003=4) + (x_00001_00003=4) + (x_00006_00003=4) + (x_00004_00003=4) + (x_00009_00003=4) + (x_00002_00003=4) + (x_00007_00003=4) + (x_00005_00003=4))=tv=1))
c Var 'aux86' direct represents '0' with '-1415'
c Var 'aux86' direct represents '1' with '1415'
c Var 'aux86' order represents '1' with '1'
c Var 'aux86' order represents '0' with '-1415'
c Encoding variable: aux87 with domain: bool (representing constraint (((x_00003_00003=5) + (x_00008_00003=5) + (x_00001_00003=5) + (x_00006_00003=5) + (x_00004_00003=5) + (x_00009_00003=5) + (x_00002_00003=5) + (x_00007_00003=5) + (x_00005_00003=5))=tv=1))
c Var 'aux87' direct represents '0' with '-1416'
c Var 'aux87' direct represents '1' with '1416'
c Var 'aux87' order represents '1' with '1'
c Var 'aux87' order represents '0' with '-1416'
c Encoding variable: aux88 with domain: bool (representing constraint (((x_00003_00003=6) + (x_00008_00003=6) + (x_00001_00003=6) + (x_00006_00003=6) + (x_00004_00003=6) + (x_00009_00003=6) + (x_00002_00003=6) + (x_00007_00003=6) + (x_00005_00003=6))=tv=1))
c Var 'aux88' direct represents '0' with '-1417'
c Var 'aux88' direct represents '1' with '1417'
c Var 'aux88' order represents '1' with '1'
c Var 'aux88' order represents '0' with '-1417'
c Encoding variable: aux89 with domain: bool (representing constraint (((x_00003_00003=7) + (x_00008_00003=7) + (x_00001_00003=7) + (x_00006_00003=7) + (x_00004_00003=7) + (x_00009_00003=7) + (x_00002_00003=7) + (x_00007_00003=7) + (x_00005_00003=7))=tv=1))
c Var 'aux89' direct represents '0' with '-1418'
c Var 'aux89' direct represents '1' with '1418'
c Var 'aux89' order represents '1' with '1'
c Var 'aux89' order represents '0' with '-1418'
c Encoding variable: aux90 with domain: bool (representing constraint (((x_00003_00003=8) + (x_00008_00003=8) + (x_00001_00003=8) + (x_00006_00003=8) + (x_00004_00003=8) + (x_00009_00003=8) + (x_00002_00003=8) + (x_00007_00003=8) + (x_00005_00003=8))=tv=1))
c Var 'aux90' direct represents '0' with '-1419'
c Var 'aux90' direct represents '1' with '1419'
c Var 'aux90' order represents '1' with '1'
c Var 'aux90' order represents '0' with '-1419'
c Encoding variable: aux91 with domain: bool (representing constraint (((x_00003_00003=9) + (x_00008_00003=9) + (x_00001_00003=9) + (x_00006_00003=9) + (x_00004_00003=9) + (x_00009_00003=9) + (x_00002_00003=9) + (x_00007_00003=9) + (x_00005_00003=9))=tv=1))
c Var 'aux91' direct represents '0' with '-1420'
c Var 'aux91' direct represents '1' with '1420'
c Var 'aux91' order represents '1' with '1'
c Var 'aux91' order represents '0' with '-1420'
c Encoding variable: aux92 with domain: bool (representing constraint (((x_00003_00004=1) + (x_00008_00004=1) + (x_00001_00004=1) + (x_00006_00004=1) + (x_00004_00004=1) + (x_00009_00004=1) + (x_00002_00004=1) + (x_00007_00004=1) + (x_00005_00004=1))=tv=1))
c Var 'aux92' direct represents '0' with '-1421'
c Var 'aux92' direct represents '1' with '1421'
c Var 'aux92' order represents '1' with '1'
c Var 'aux92' order represents '0' with '-1421'
c Encoding variable: aux93 with domain: bool (representing constraint (((x_00003_00004=2) + (x_00008_00004=2) + (x_00001_00004=2) + (x_00006_00004=2) + (x_00004_00004=2) + (x_00009_00004=2) + (x_00002_00004=2) + (x_00007_00004=2) + (x_00005_00004=2))=tv=1))
c Var 'aux93' direct represents '0' with '-1422'
c Var 'aux93' direct represents '1' with '1422'
c Var 'aux93' order represents '1' with '1'
c Var 'aux93' order represents '0' with '-1422'
c Encoding variable: aux94 with domain: bool (representing constraint (((x_00003_00004=3) + (x_00008_00004=3) + (x_00001_00004=3) + (x_00006_00004=3) + (x_00004_00004=3) + (x_00009_00004=3) + (x_00002_00004=3) + (x_00007_00004=3) + (x_00005_00004=3))=tv=1))
c Var 'aux94' direct represents '0' with '-1423'
c Var 'aux94' direct represents '1' with '1423'
c Var 'aux94' order represents '1' with '1'
c Var 'aux94' order represents '0' with '-1423'
c Encoding variable: aux95 with domain: bool (representing constraint (((x_00003_00004=4) + (x_00008_00004=4) + (x_00001_00004=4) + (x_00006_00004=4) + (x_00004_00004=4) + (x_00009_00004=4) + (x_00002_00004=4) + (x_00007_00004=4) + (x_00005_00004=4))=tv=1))
c Var 'aux95' direct represents '0' with '-1424'
c Var 'aux95' direct represents '1' with '1424'
c Var 'aux95' order represents '1' with '1'
c Var 'aux95' order represents '0' with '-1424'
c Encoding variable: aux96 with domain: bool (representing constraint (((x_00003_00004=5) + (x_00008_00004=5) + (x_00001_00004=5) + (x_00006_00004=5) + (x_00004_00004=5) + (x_00009_00004=5) + (x_00002_00004=5) + (x_00007_00004=5) + (x_00005_00004=5))=tv=1))
c Var 'aux96' direct represents '0' with '-1425'
c Var 'aux96' direct represents '1' with '1425'
c Var 'aux96' order represents '1' with '1'
c Var 'aux96' order represents '0' with '-1425'
c Encoding variable: aux97 with domain: bool (representing constraint (((x_00003_00004=6) + (x_00008_00004=6) + (x_00001_00004=6) + (x_00006_00004=6) + (x_00004_00004=6) + (x_00009_00004=6) + (x_00002_00004=6) + (x_00007_00004=6) + (x_00005_00004=6))=tv=1))
c Var 'aux97' direct represents '0' with '-1426'
c Var 'aux97' direct represents '1' with '1426'
c Var 'aux97' order represents '1' with '1'
c Var 'aux97' order represents '0' with '-1426'
c Encoding variable: aux98 with domain: bool (representing constraint (((x_00003_00004=7) + (x_00008_00004=7) + (x_00001_00004=7) + (x_00006_00004=7) + (x_00004_00004=7) + (x_00009_00004=7) + (x_00002_00004=7) + (x_00007_00004=7) + (x_00005_00004=7))=tv=1))
c Var 'aux98' direct represents '0' with '-1427'
c Var 'aux98' direct represents '1' with '1427'
c Var 'aux98' order represents '1' with '1'
c Var 'aux98' order represents '0' with '-1427'
c Encoding variable: aux99 with domain: bool (representing constraint (((x_00003_00004=8) + (x_00008_00004=8) + (x_00001_00004=8) + (x_00006_00004=8) + (x_00004_00004=8) + (x_00009_00004=8) + (x_00002_00004=8) + (x_00007_00004=8) + (x_00005_00004=8))=tv=1))
c Var 'aux99' direct represents '0' with '-1428'
c Var 'aux99' direct represents '1' with '1428'
c Var 'aux99' order represents '1' with '1'
c Var 'aux99' order represents '0' with '-1428'
c Encoding variable: aux100 with domain: bool (representing constraint (((x_00003_00004=9) + (x_00008_00004=9) + (x_00001_00004=9) + (x_00006_00004=9) + (x_00004_00004=9) + (x_00009_00004=9) + (x_00002_00004=9) + (x_00007_00004=9) + (x_00005_00004=9))=tv=1))
c Var 'aux100' direct represents '0' with '-1429'
c Var 'aux100' direct represents '1' with '1429'
c Var 'aux100' order represents '1' with '1'
c Var 'aux100' order represents '0' with '-1429'
c Encoding variable: aux101 with domain: bool (representing constraint (((x_00003_00005=1) + (x_00008_00005=1) + (x_00001_00005=1) + (x_00006_00005=1) + (x_00004_00005=1) + (x_00009_00005=1) + (x_00002_00005=1) + (x_00007_00005=1) + (x_00005_00005=1))=tv=1))
c Var 'aux101' direct represents '0' with '-1430'
c Var 'aux101' direct represents '1' with '1430'
c Var 'aux101' order represents '1' with '1'
c Var 'aux101' order represents '0' with '-1430'
c Encoding variable: aux102 with domain: bool (representing constraint (((x_00003_00005=2) + (x_00008_00005=2) + (x_00001_00005=2) + (x_00006_00005=2) + (x_00004_00005=2) + (x_00009_00005=2) + (x_00002_00005=2) + (x_00007_00005=2) + (x_00005_00005=2))=tv=1))
c Var 'aux102' direct represents '0' with '-1431'
c Var 'aux102' direct represents '1' with '1431'
c Var 'aux102' order represents '1' with '1'
c Var 'aux102' order represents '0' with '-1431'
c Encoding variable: aux103 with domain: bool (representing constraint (((x_00003_00005=3) + (x_00008_00005=3) + (x_00001_00005=3) + (x_00006_00005=3) + (x_00004_00005=3) + (x_00009_00005=3) + (x_00002_00005=3) + (x_00007_00005=3) + (x_00005_00005=3))=tv=1))
c Var 'aux103' direct represents '0' with '-1432'
c Var 'aux103' direct represents '1' with '1432'
c Var 'aux103' order represents '1' with '1'
c Var 'aux103' order represents '0' with '-1432'
c Encoding variable: aux104 with domain: bool (representing constraint (((x_00003_00005=4) + (x_00008_00005=4) + (x_00001_00005=4) + (x_00006_00005=4) + (x_00004_00005=4) + (x_00009_00005=4) + (x_00002_00005=4) + (x_00007_00005=4) + (x_00005_00005=4))=tv=1))
c Var 'aux104' direct represents '0' with '-1433'
c Var 'aux104' direct represents '1' with '1433'
c Var 'aux104' order represents '1' with '1'
c Var 'aux104' order represents '0' with '-1433'
c Encoding variable: aux105 with domain: bool (representing constraint (((x_00003_00005=5) + (x_00008_00005=5) + (x_00001_00005=5) + (x_00006_00005=5) + (x_00004_00005=5) + (x_00009_00005=5) + (x_00002_00005=5) + (x_00007_00005=5) + (x_00005_00005=5))=tv=1))
c Var 'aux105' direct represents '0' with '-1434'
c Var 'aux105' direct represents '1' with '1434'
c Var 'aux105' order represents '1' with '1'
c Var 'aux105' order represents '0' with '-1434'
c Encoding variable: aux106 with domain: bool (representing constraint (((x_00003_00005=6) + (x_00008_00005=6) + (x_00001_00005=6) + (x_00006_00005=6) + (x_00004_00005=6) + (x_00009_00005=6) + (x_00002_00005=6) + (x_00007_00005=6) + (x_00005_00005=6))=tv=1))
c Var 'aux106' direct represents '0' with '-1435'
c Var 'aux106' direct represents '1' with '1435'
c Var 'aux106' order represents '1' with '1'
c Var 'aux106' order represents '0' with '-1435'
c Encoding variable: aux107 with domain: bool (representing constraint (((x_00003_00005=7) + (x_00008_00005=7) + (x_00001_00005=7) + (x_00006_00005=7) + (x_00004_00005=7) + (x_00009_00005=7) + (x_00002_00005=7) + (x_00007_00005=7) + (x_00005_00005=7))=tv=1))
c Var 'aux107' direct represents '0' with '-1436'
c Var 'aux107' direct represents '1' with '1436'
c Var 'aux107' order represents '1' with '1'
c Var 'aux107' order represents '0' with '-1436'
c Encoding variable: aux108 with domain: bool (representing constraint (((x_00003_00005=8) + (x_00008_00005=8) + (x_00001_00005=8) + (x_00006_00005=8) + (x_00004_00005=8) + (x_00009_00005=8) + (x_00002_00005=8) + (x_00007_00005=8) + (x_00005_00005=8))=tv=1))
c Var 'aux108' direct represents '0' with '-1437'
c Var 'aux108' direct represents '1' with '1437'
c Var 'aux108' order represents '1' with '1'
c Var 'aux108' order represents '0' with '-1437'
c Encoding variable: aux109 with domain: bool (representing constraint (((x_00003_00005=9) + (x_00008_00005=9) + (x_00001_00005=9) + (x_00006_00005=9) + (x_00004_00005=9) + (x_00009_00005=9) + (x_00002_00005=9) + (x_00007_00005=9) + (x_00005_00005=9))=tv=1))
c Var 'aux109' direct represents '0' with '-1438'
c Var 'aux109' direct represents '1' with '1438'
c Var 'aux109' order represents '1' with '1'
c Var 'aux109' order represents '0' with '-1438'
c Encoding variable: aux110 with domain: bool (representing constraint (((x_00003_00006=1) + (x_00008_00006=1) + (x_00001_00006=1) + (x_00006_00006=1) + (x_00004_00006=1) + (x_00009_00006=1) + (x_00002_00006=1) + (x_00007_00006=1) + (x_00005_00006=1))=tv=1))
c Var 'aux110' direct represents '0' with '-1439'
c Var 'aux110' direct represents '1' with '1439'
c Var 'aux110' order represents '1' with '1'
c Var 'aux110' order represents '0' with '-1439'
c Encoding variable: aux111 with domain: bool (representing constraint (((x_00003_00006=2) + (x_00008_00006=2) + (x_00001_00006=2) + (x_00006_00006=2) + (x_00004_00006=2) + (x_00009_00006=2) + (x_00002_00006=2) + (x_00007_00006=2) + (x_00005_00006=2))=tv=1))
c Var 'aux111' direct represents '0' with '-1440'
c Var 'aux111' direct represents '1' with '1440'
c Var 'aux111' order represents '1' with '1'
c Var 'aux111' order represents '0' with '-1440'
c Encoding variable: aux112 with domain: bool (representing constraint (((x_00003_00006=3) + (x_00008_00006=3) + (x_00001_00006=3) + (x_00006_00006=3) + (x_00004_00006=3) + (x_00009_00006=3) + (x_00002_00006=3) + (x_00007_00006=3) + (x_00005_00006=3))=tv=1))
c Var 'aux112' direct represents '0' with '-1441'
c Var 'aux112' direct represents '1' with '1441'
c Var 'aux112' order represents '1' with '1'
c Var 'aux112' order represents '0' with '-1441'
c Encoding variable: aux113 with domain: bool (representing constraint (((x_00003_00006=4) + (x_00008_00006=4) + (x_00001_00006=4) + (x_00006_00006=4) + (x_00004_00006=4) + (x_00009_00006=4) + (x_00002_00006=4) + (x_00007_00006=4) + (x_00005_00006=4))=tv=1))
c Var 'aux113' direct represents '0' with '-1442'
c Var 'aux113' direct represents '1' with '1442'
c Var 'aux113' order represents '1' with '1'
c Var 'aux113' order represents '0' with '-1442'
c Encoding variable: aux114 with domain: bool (representing constraint (((x_00003_00006=5) + (x_00008_00006=5) + (x_00001_00006=5) + (x_00006_00006=5) + (x_00004_00006=5) + (x_00009_00006=5) + (x_00002_00006=5) + (x_00007_00006=5) + (x_00005_00006=5))=tv=1))
c Var 'aux114' direct represents '0' with '-1443'
c Var 'aux114' direct represents '1' with '1443'
c Var 'aux114' order represents '1' with '1'
c Var 'aux114' order represents '0' with '-1443'
c Encoding variable: aux115 with domain: bool (representing constraint (((x_00003_00006=6) + (x_00008_00006=6) + (x_00001_00006=6) + (x_00006_00006=6) + (x_00004_00006=6) + (x_00009_00006=6) + (x_00002_00006=6) + (x_00007_00006=6) + (x_00005_00006=6))=tv=1))
c Var 'aux115' direct represents '0' with '-1444'
c Var 'aux115' direct represents '1' with '1444'
c Var 'aux115' order represents '1' with '1'
c Var 'aux115' order represents '0' with '-1444'
c Encoding variable: aux116 with domain: bool (representing constraint (((x_00003_00006=7) + (x_00008_00006=7) + (x_00001_00006=7) + (x_00006_00006=7) + (x_00004_00006=7) + (x_00009_00006=7) + (x_00002_00006=7) + (x_00007_00006=7) + (x_00005_00006=7))=tv=1))
c Var 'aux116' direct represents '0' with '-1445'
c Var 'aux116' direct represents '1' with '1445'
c Var 'aux116' order represents '1' with '1'
c Var 'aux116' order represents '0' with '-1445'
c Encoding variable: aux117 with domain: bool (representing constraint (((x_00003_00006=8) + (x_00008_00006=8) + (x_00001_00006=8) + (x_00006_00006=8) + (x_00004_00006=8) + (x_00009_00006=8) + (x_00002_00006=8) + (x_00007_00006=8) + (x_00005_00006=8))=tv=1))
c Var 'aux117' direct represents '0' with '-1446'
c Var 'aux117' direct represents '1' with '1446'
c Var 'aux117' order represents '1' with '1'
c Var 'aux117' order represents '0' with '-1446'
c Encoding variable: aux118 with domain: bool (representing constraint (((x_00003_00006=9) + (x_00008_00006=9) + (x_00001_00006=9) + (x_00006_00006=9) + (x_00004_00006=9) + (x_00009_00006=9) + (x_00002_00006=9) + (x_00007_00006=9) + (x_00005_00006=9))=tv=1))
c Var 'aux118' direct represents '0' with '-1447'
c Var 'aux118' direct represents '1' with '1447'
c Var 'aux118' order represents '1' with '1'
c Var 'aux118' order represents '0' with '-1447'
c Encoding variable: aux119 with domain: bool (representing constraint (((x_00003_00007=1) + (x_00008_00007=1) + (x_00001_00007=1) + (x_00006_00007=1) + (x_00004_00007=1) + (x_00009_00007=1) + (x_00002_00007=1) + (x_00007_00007=1) + (x_00005_00007=1))=tv=1))
c Var 'aux119' direct represents '0' with '-1448'
c Var 'aux119' direct represents '1' with '1448'
c Var 'aux119' order represents '1' with '1'
c Var 'aux119' order represents '0' with '-1448'
c Encoding variable: aux120 with domain: bool (representing constraint (((x_00003_00007=2) + (x_00008_00007=2) + (x_00001_00007=2) + (x_00006_00007=2) + (x_00004_00007=2) + (x_00009_00007=2) + (x_00002_00007=2) + (x_00007_00007=2) + (x_00005_00007=2))=tv=1))
c Var 'aux120' direct represents '0' with '-1449'
c Var 'aux120' direct represents '1' with '1449'
c Var 'aux120' order represents '1' with '1'
c Var 'aux120' order represents '0' with '-1449'
c Encoding variable: aux121 with domain: bool (representing constraint (((x_00003_00007=3) + (x_00008_00007=3) + (x_00001_00007=3) + (x_00006_00007=3) + (x_00004_00007=3) + (x_00009_00007=3) + (x_00002_00007=3) + (x_00007_00007=3) + (x_00005_00007=3))=tv=1))
c Var 'aux121' direct represents '0' with '-1450'
c Var 'aux121' direct represents '1' with '1450'
c Var 'aux121' order represents '1' with '1'
c Var 'aux121' order represents '0' with '-1450'
c Encoding variable: aux122 with domain: bool (representing constraint (((x_00003_00007=4) + (x_00008_00007=4) + (x_00001_00007=4) + (x_00006_00007=4) + (x_00004_00007=4) + (x_00009_00007=4) + (x_00002_00007=4) + (x_00007_00007=4) + (x_00005_00007=4))=tv=1))
c Var 'aux122' direct represents '0' with '-1451'
c Var 'aux122' direct represents '1' with '1451'
c Var 'aux122' order represents '1' with '1'
c Var 'aux122' order represents '0' with '-1451'
c Encoding variable: aux123 with domain: bool (representing constraint (((x_00003_00007=5) + (x_00008_00007=5) + (x_00001_00007=5) + (x_00006_00007=5) + (x_00004_00007=5) + (x_00009_00007=5) + (x_00002_00007=5) + (x_00007_00007=5) + (x_00005_00007=5))=tv=1))
c Var 'aux123' direct represents '0' with '-1452'
c Var 'aux123' direct represents '1' with '1452'
c Var 'aux123' order represents '1' with '1'
c Var 'aux123' order represents '0' with '-1452'
c Encoding variable: aux124 with domain: bool (representing constraint (((x_00003_00007=6) + (x_00008_00007=6) + (x_00001_00007=6) + (x_00006_00007=6) + (x_00004_00007=6) + (x_00009_00007=6) + (x_00002_00007=6) + (x_00007_00007=6) + (x_00005_00007=6))=tv=1))
c Var 'aux124' direct represents '0' with '-1453'
c Var 'aux124' direct represents '1' with '1453'
c Var 'aux124' order represents '1' with '1'
c Var 'aux124' order represents '0' with '-1453'
c Encoding variable: aux125 with domain: bool (representing constraint (((x_00003_00007=7) + (x_00008_00007=7) + (x_00001_00007=7) + (x_00006_00007=7) + (x_00004_00007=7) + (x_00009_00007=7) + (x_00002_00007=7) + (x_00007_00007=7) + (x_00005_00007=7))=tv=1))
c Var 'aux125' direct represents '0' with '-1454'
c Var 'aux125' direct represents '1' with '1454'
c Var 'aux125' order represents '1' with '1'
c Var 'aux125' order represents '0' with '-1454'
c Encoding variable: aux126 with domain: bool (representing constraint (((x_00003_00007=8) + (x_00008_00007=8) + (x_00001_00007=8) + (x_00006_00007=8) + (x_00004_00007=8) + (x_00009_00007=8) + (x_00002_00007=8) + (x_00007_00007=8) + (x_00005_00007=8))=tv=1))
c Var 'aux126' direct represents '0' with '-1455'
c Var 'aux126' direct represents '1' with '1455'
c Var 'aux126' order represents '1' with '1'
c Var 'aux126' order represents '0' with '-1455'
c Encoding variable: aux127 with domain: bool (representing constraint (((x_00003_00007=9) + (x_00008_00007=9) + (x_00001_00007=9) + (x_00006_00007=9) + (x_00004_00007=9) + (x_00009_00007=9) + (x_00002_00007=9) + (x_00007_00007=9) + (x_00005_00007=9))=tv=1))
c Var 'aux127' direct represents '0' with '-1456'
c Var 'aux127' direct represents '1' with '1456'
c Var 'aux127' order represents '1' with '1'
c Var 'aux127' order represents '0' with '-1456'
c Encoding variable: aux128 with domain: bool (representing constraint (((x_00003_00008=1) + (x_00008_00008=1) + (x_00001_00008=1) + (x_00006_00008=1) + (x_00004_00008=1) + (x_00009_00008=1) + (x_00002_00008=1) + (x_00007_00008=1) + (x_00005_00008=1))=tv=1))
c Var 'aux128' direct represents '0' with '-1457'
c Var 'aux128' direct represents '1' with '1457'
c Var 'aux128' order represents '1' with '1'
c Var 'aux128' order represents '0' with '-1457'
c Encoding variable: aux129 with domain: bool (representing constraint (((x_00003_00008=2) + (x_00008_00008=2) + (x_00001_00008=2) + (x_00006_00008=2) + (x_00004_00008=2) + (x_00009_00008=2) + (x_00002_00008=2) + (x_00007_00008=2) + (x_00005_00008=2))=tv=1))
c Var 'aux129' direct represents '0' with '-1458'
c Var 'aux129' direct represents '1' with '1458'
c Var 'aux129' order represents '1' with '1'
c Var 'aux129' order represents '0' with '-1458'
c Encoding variable: aux130 with domain: bool (representing constraint (((x_00003_00008=3) + (x_00008_00008=3) + (x_00001_00008=3) + (x_00006_00008=3) + (x_00004_00008=3) + (x_00009_00008=3) + (x_00002_00008=3) + (x_00007_00008=3) + (x_00005_00008=3))=tv=1))
c Var 'aux130' direct represents '0' with '-1459'
c Var 'aux130' direct represents '1' with '1459'
c Var 'aux130' order represents '1' with '1'
c Var 'aux130' order represents '0' with '-1459'
c Encoding variable: aux131 with domain: bool (representing constraint (((x_00003_00008=4) + (x_00008_00008=4) + (x_00001_00008=4) + (x_00006_00008=4) + (x_00004_00008=4) + (x_00009_00008=4) + (x_00002_00008=4) + (x_00007_00008=4) + (x_00005_00008=4))=tv=1))
c Var 'aux131' direct represents '0' with '-1460'
c Var 'aux131' direct represents '1' with '1460'
c Var 'aux131' order represents '1' with '1'
c Var 'aux131' order represents '0' with '-1460'
c Encoding variable: aux132 with domain: bool (representing constraint (((x_00003_00008=5) + (x_00008_00008=5) + (x_00001_00008=5) + (x_00006_00008=5) + (x_00004_00008=5) + (x_00009_00008=5) + (x_00002_00008=5) + (x_00007_00008=5) + (x_00005_00008=5))=tv=1))
c Var 'aux132' direct represents '0' with '-1461'
c Var 'aux132' direct represents '1' with '1461'
c Var 'aux132' order represents '1' with '1'
c Var 'aux132' order represents '0' with '-1461'
c Encoding variable: aux133 with domain: bool (representing constraint (((x_00003_00008=6) + (x_00008_00008=6) + (x_00001_00008=6) + (x_00006_00008=6) + (x_00004_00008=6) + (x_00009_00008=6) + (x_00002_00008=6) + (x_00007_00008=6) + (x_00005_00008=6))=tv=1))
c Var 'aux133' direct represents '0' with '-1462'
c Var 'aux133' direct represents '1' with '1462'
c Var 'aux133' order represents '1' with '1'
c Var 'aux133' order represents '0' with '-1462'
c Encoding variable: aux134 with domain: bool (representing constraint (((x_00003_00008=7) + (x_00008_00008=7) + (x_00001_00008=7) + (x_00006_00008=7) + (x_00004_00008=7) + (x_00009_00008=7) + (x_00002_00008=7) + (x_00007_00008=7) + (x_00005_00008=7))=tv=1))
c Var 'aux134' direct represents '0' with '-1463'
c Var 'aux134' direct represents '1' with '1463'
c Var 'aux134' order represents '1' with '1'
c Var 'aux134' order represents '0' with '-1463'
c Encoding variable: aux135 with domain: bool (representing constraint (((x_00003_00008=8) + (x_00008_00008=8) + (x_00001_00008=8) + (x_00006_00008=8) + (x_00004_00008=8) + (x_00009_00008=8) + (x_00002_00008=8) + (x_00007_00008=8) + (x_00005_00008=8))=tv=1))
c Var 'aux135' direct represents '0' with '-1464'
c Var 'aux135' direct represents '1' with '1464'
c Var 'aux135' order represents '1' with '1'
c Var 'aux135' order represents '0' with '-1464'
c Encoding variable: aux136 with domain: bool (representing constraint (((x_00003_00008=9) + (x_00008_00008=9) + (x_00001_00008=9) + (x_00006_00008=9) + (x_00004_00008=9) + (x_00009_00008=9) + (x_00002_00008=9) + (x_00007_00008=9) + (x_00005_00008=9))=tv=1))
c Var 'aux136' direct represents '0' with '-1465'
c Var 'aux136' direct represents '1' with '1465'
c Var 'aux136' order represents '1' with '1'
c Var 'aux136' order represents '0' with '-1465'
c Encoding variable: aux137 with domain: bool (representing constraint (((x_00003_00009=1) + (x_00008_00009=1) + (x_00001_00009=1) + (x_00006_00009=1) + (x_00004_00009=1) + (x_00009_00009=1) + (x_00002_00009=1) + (x_00007_00009=1) + (x_00005_00009=1))=tv=1))
c Var 'aux137' direct represents '0' with '-1466'
c Var 'aux137' direct represents '1' with '1466'
c Var 'aux137' order represents '1' with '1'
c Var 'aux137' order represents '0' with '-1466'
c Encoding variable: aux138 with domain: bool (representing constraint (((x_00003_00009=2) + (x_00008_00009=2) + (x_00001_00009=2) + (x_00006_00009=2) + (x_00004_00009=2) + (x_00009_00009=2) + (x_00002_00009=2) + (x_00007_00009=2) + (x_00005_00009=2))=tv=1))
c Var 'aux138' direct represents '0' with '-1467'
c Var 'aux138' direct represents '1' with '1467'
c Var 'aux138' order represents '1' with '1'
c Var 'aux138' order represents '0' with '-1467'
c Encoding variable: aux139 with domain: bool (representing constraint (((x_00003_00009=3) + (x_00008_00009=3) + (x_00001_00009=3) + (x_00006_00009=3) + (x_00004_00009=3) + (x_00009_00009=3) + (x_00002_00009=3) + (x_00007_00009=3) + (x_00005_00009=3))=tv=1))
c Var 'aux139' direct represents '0' with '-1468'
c Var 'aux139' direct represents '1' with '1468'
c Var 'aux139' order represents '1' with '1'
c Var 'aux139' order represents '0' with '-1468'
c Encoding variable: aux140 with domain: bool (representing constraint (((x_00003_00009=4) + (x_00008_00009=4) + (x_00001_00009=4) + (x_00006_00009=4) + (x_00004_00009=4) + (x_00009_00009=4) + (x_00002_00009=4) + (x_00007_00009=4) + (x_00005_00009=4))=tv=1))
c Var 'aux140' direct represents '0' with '-1469'
c Var 'aux140' direct represents '1' with '1469'
c Var 'aux140' order represents '1' with '1'
c Var 'aux140' order represents '0' with '-1469'
c Encoding variable: aux141 with domain: bool (representing constraint (((x_00003_00009=5) + (x_00008_00009=5) + (x_00001_00009=5) + (x_00006_00009=5) + (x_00004_00009=5) + (x_00009_00009=5) + (x_00002_00009=5) + (x_00007_00009=5) + (x_00005_00009=5))=tv=1))
c Var 'aux141' direct represents '0' with '-1470'
c Var 'aux141' direct represents '1' with '1470'
c Var 'aux141' order represents '1' with '1'
c Var 'aux141' order represents '0' with '-1470'
c Encoding variable: aux142 with domain: bool (representing constraint (((x_00003_00009=6) + (x_00008_00009=6) + (x_00001_00009=6) + (x_00006_00009=6) + (x_00004_00009=6) + (x_00009_00009=6) + (x_00002_00009=6) + (x_00007_00009=6) + (x_00005_00009=6))=tv=1))
c Var 'aux142' direct represents '0' with '-1471'
c Var 'aux142' direct represents '1' with '1471'
c Var 'aux142' order represents '1' with '1'
c Var 'aux142' order represents '0' with '-1471'
c Encoding variable: aux143 with domain: bool (representing constraint (((x_00003_00009=7) + (x_00008_00009=7) + (x_00001_00009=7) + (x_00006_00009=7) + (x_00004_00009=7) + (x_00009_00009=7) + (x_00002_00009=7) + (x_00007_00009=7) + (x_00005_00009=7))=tv=1))
c Var 'aux143' direct represents '0' with '-1472'
c Var 'aux143' direct represents '1' with '1472'
c Var 'aux143' order represents '1' with '1'
c Var 'aux143' order represents '0' with '-1472'
c Encoding variable: aux144 with domain: bool (representing constraint (((x_00003_00009=8) + (x_00008_00009=8) + (x_00001_00009=8) + (x_00006_00009=8) + (x_00004_00009=8) + (x_00009_00009=8) + (x_00002_00009=8) + (x_00007_00009=8) + (x_00005_00009=8))=tv=1))
c Var 'aux144' direct represents '0' with '-1473'
c Var 'aux144' direct represents '1' with '1473'
c Var 'aux144' order represents '1' with '1'
c Var 'aux144' order represents '0' with '-1473'
c Encoding variable: aux145 with domain: bool (representing constraint (((x_00003_00009=9) + (x_00008_00009=9) + (x_00001_00009=9) + (x_00006_00009=9) + (x_00004_00009=9) + (x_00009_00009=9) + (x_00002_00009=9) + (x_00007_00009=9) + (x_00005_00009=9))=tv=1))
c Var 'aux145' direct represents '0' with '-1474'
c Var 'aux145' direct represents '1' with '1474'
c Var 'aux145' order represents '1' with '1'
c Var 'aux145' order represents '0' with '-1474'
c Encoding variable: aux146 with domain: bool (representing constraint (((x_00001_00001=1) + (x_00001_00002=1) + (x_00001_00003=1) + (x_00001_00004=1) + (x_00001_00005=1) + (x_00001_00006=1) + (x_00001_00007=1) + (x_00001_00008=1) + (x_00001_00009=1))=tv=1))
c Var 'aux146' direct represents '0' with '-1475'
c Var 'aux146' direct represents '1' with '1475'
c Var 'aux146' order represents '1' with '1'
c Var 'aux146' order represents '0' with '-1475'
c Encoding variable: aux147 with domain: bool (representing constraint (((x_00001_00001=2) + (x_00001_00002=2) + (x_00001_00003=2) + (x_00001_00004=2) + (x_00001_00005=2) + (x_00001_00006=2) + (x_00001_00007=2) + (x_00001_00008=2) + (x_00001_00009=2))=tv=1))
c Var 'aux147' direct represents '0' with '-1476'
c Var 'aux147' direct represents '1' with '1476'
c Var 'aux147' order represents '1' with '1'
c Var 'aux147' order represents '0' with '-1476'
c Encoding variable: aux148 with domain: bool (representing constraint (((x_00001_00001=3) + (x_00001_00002=3) + (x_00001_00003=3) + (x_00001_00004=3) + (x_00001_00005=3) + (x_00001_00006=3) + (x_00001_00007=3) + (x_00001_00008=3) + (x_00001_00009=3))=tv=1))
c Var 'aux148' direct represents '0' with '-1477'
c Var 'aux148' direct represents '1' with '1477'
c Var 'aux148' order represents '1' with '1'
c Var 'aux148' order represents '0' with '-1477'
c Encoding variable: aux149 with domain: bool (representing constraint (((x_00001_00001=4) + (x_00001_00002=4) + (x_00001_00003=4) + (x_00001_00004=4) + (x_00001_00005=4) + (x_00001_00006=4) + (x_00001_00007=4) + (x_00001_00008=4) + (x_00001_00009=4))=tv=1))
c Var 'aux149' direct represents '0' with '-1478'
c Var 'aux149' direct represents '1' with '1478'
c Var 'aux149' order represents '1' with '1'
c Var 'aux149' order represents '0' with '-1478'
c Encoding variable: aux150 with domain: bool (representing constraint (((x_00001_00001=5) + (x_00001_00002=5) + (x_00001_00003=5) + (x_00001_00004=5) + (x_00001_00005=5) + (x_00001_00006=5) + (x_00001_00007=5) + (x_00001_00008=5) + (x_00001_00009=5))=tv=1))
c Var 'aux150' direct represents '0' with '-1479'
c Var 'aux150' direct represents '1' with '1479'
c Var 'aux150' order represents '1' with '1'
c Var 'aux150' order represents '0' with '-1479'
c Encoding variable: aux151 with domain: bool (representing constraint (((x_00001_00001=6) + (x_00001_00002=6) + (x_00001_00003=6) + (x_00001_00004=6) + (x_00001_00005=6) + (x_00001_00006=6) + (x_00001_00007=6) + (x_00001_00008=6) + (x_00001_00009=6))=tv=1))
c Var 'aux151' direct represents '0' with '-1480'
c Var 'aux151' direct represents '1' with '1480'
c Var 'aux151' order represents '1' with '1'
c Var 'aux151' order represents '0' with '-1480'
c Encoding variable: aux152 with domain: bool (representing constraint (((x_00001_00001=7) + (x_00001_00002=7) + (x_00001_00003=7) + (x_00001_00004=7) + (x_00001_00005=7) + (x_00001_00006=7) + (x_00001_00007=7) + (x_00001_00008=7) + (x_00001_00009=7))=tv=1))
c Var 'aux152' direct represents '0' with '-1481'
c Var 'aux152' direct represents '1' with '1481'
c Var 'aux152' order represents '1' with '1'
c Var 'aux152' order represents '0' with '-1481'
c Encoding variable: aux153 with domain: bool (representing constraint (((x_00001_00001=8) + (x_00001_00002=8) + (x_00001_00003=8) + (x_00001_00004=8) + (x_00001_00005=8) + (x_00001_00006=8) + (x_00001_00007=8) + (x_00001_00008=8) + (x_00001_00009=8))=tv=1))
c Var 'aux153' direct represents '0' with '-1482'
c Var 'aux153' direct represents '1' with '1482'
c Var 'aux153' order represents '1' with '1'
c Var 'aux153' order represents '0' with '-1482'
c Encoding variable: aux154 with domain: bool (representing constraint (((x_00001_00001=9) + (x_00001_00002=9) + (x_00001_00003=9) + (x_00001_00004=9) + (x_00001_00005=9) + (x_00001_00006=9) + (x_00001_00007=9) + (x_00001_00008=9) + (x_00001_00009=9))=tv=1))
c Var 'aux154' direct represents '0' with '-1483'
c Var 'aux154' direct represents '1' with '1483'
c Var 'aux154' order represents '1' with '1'
c Var 'aux154' order represents '0' with '-1483'
c Encoding variable: aux155 with domain: bool (representing constraint (((x_00002_00001=1) + (x_00002_00002=1) + (x_00002_00003=1) + (x_00002_00004=1) + (x_00002_00005=1) + (x_00002_00006=1) + (x_00002_00007=1) + (x_00002_00008=1) + (x_00002_00009=1))=tv=1))
c Var 'aux155' direct represents '0' with '-1484'
c Var 'aux155' direct represents '1' with '1484'
c Var 'aux155' order represents '1' with '1'
c Var 'aux155' order represents '0' with '-1484'
c Encoding variable: aux156 with domain: bool (representing constraint (((x_00002_00001=2) + (x_00002_00002=2) + (x_00002_00003=2) + (x_00002_00004=2) + (x_00002_00005=2) + (x_00002_00006=2) + (x_00002_00007=2) + (x_00002_00008=2) + (x_00002_00009=2))=tv=1))
c Var 'aux156' direct represents '0' with '-1485'
c Var 'aux156' direct represents '1' with '1485'
c Var 'aux156' order represents '1' with '1'
c Var 'aux156' order represents '0' with '-1485'
c Encoding variable: aux157 with domain: bool (representing constraint (((x_00002_00001=3) + (x_00002_00002=3) + (x_00002_00003=3) + (x_00002_00004=3) + (x_00002_00005=3) + (x_00002_00006=3) + (x_00002_00007=3) + (x_00002_00008=3) + (x_00002_00009=3))=tv=1))
c Var 'aux157' direct represents '0' with '-1486'
c Var 'aux157' direct represents '1' with '1486'
c Var 'aux157' order represents '1' with '1'
c Var 'aux157' order represents '0' with '-1486'
c Encoding variable: aux158 with domain: bool (representing constraint (((x_00002_00001=4) + (x_00002_00002=4) + (x_00002_00003=4) + (x_00002_00004=4) + (x_00002_00005=4) + (x_00002_00006=4) + (x_00002_00007=4) + (x_00002_00008=4) + (x_00002_00009=4))=tv=1))
c Var 'aux158' direct represents '0' with '-1487'
c Var 'aux158' direct represents '1' with '1487'
c Var 'aux158' order represents '1' with '1'
c Var 'aux158' order represents '0' with '-1487'
c Encoding variable: aux159 with domain: bool (representing constraint (((x_00002_00001=5) + (x_00002_00002=5) + (x_00002_00003=5) + (x_00002_00004=5) + (x_00002_00005=5) + (x_00002_00006=5) + (x_00002_00007=5) + (x_00002_00008=5) + (x_00002_00009=5))=tv=1))
c Var 'aux159' direct represents '0' with '-1488'
c Var 'aux159' direct represents '1' with '1488'
c Var 'aux159' order represents '1' with '1'
c Var 'aux159' order represents '0' with '-1488'
c Encoding variable: aux160 with domain: bool (representing constraint (((x_00002_00001=6) + (x_00002_00002=6) + (x_00002_00003=6) + (x_00002_00004=6) + (x_00002_00005=6) + (x_00002_00006=6) + (x_00002_00007=6) + (x_00002_00008=6) + (x_00002_00009=6))=tv=1))
c Var 'aux160' direct represents '0' with '-1489'
c Var 'aux160' direct represents '1' with '1489'
c Var 'aux160' order represents '1' with '1'
c Var 'aux160' order represents '0' with '-1489'
c Encoding variable: aux161 with domain: bool (representing constraint (((x_00002_00001=7) + (x_00002_00002=7) + (x_00002_00003=7) + (x_00002_00004=7) + (x_00002_00005=7) + (x_00002_00006=7) + (x_00002_00007=7) + (x_00002_00008=7) + (x_00002_00009=7))=tv=1))
c Var 'aux161' direct represents '0' with '-1490'
c Var 'aux161' direct represents '1' with '1490'
c Var 'aux161' order represents '1' with '1'
c Var 'aux161' order represents '0' with '-1490'
c Encoding variable: aux162 with domain: bool (representing constraint (((x_00002_00001=8) + (x_00002_00002=8) + (x_00002_00003=8) + (x_00002_00004=8) + (x_00002_00005=8) + (x_00002_00006=8) + (x_00002_00007=8) + (x_00002_00008=8) + (x_00002_00009=8))=tv=1))
c Var 'aux162' direct represents '0' with '-1491'
c Var 'aux162' direct represents '1' with '1491'
c Var 'aux162' order represents '1' with '1'
c Var 'aux162' order represents '0' with '-1491'
c Encoding variable: aux163 with domain: bool (representing constraint (((x_00002_00001=9) + (x_00002_00002=9) + (x_00002_00003=9) + (x_00002_00004=9) + (x_00002_00005=9) + (x_00002_00006=9) + (x_00002_00007=9) + (x_00002_00008=9) + (x_00002_00009=9))=tv=1))
c Var 'aux163' direct represents '0' with '-1492'
c Var 'aux163' direct represents '1' with '1492'
c Var 'aux163' order represents '1' with '1'
c Var 'aux163' order represents '0' with '-1492'
c Encoding variable: aux164 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00003_00002=1) + (x_00003_00003=1) + (x_00003_00004=1) + (x_00003_00005=1) + (x_00003_00006=1) + (x_00003_00007=1) + (x_00003_00008=1) + (x_00003_00009=1))=tv=1))
c Var 'aux164' direct represents '0' with '-1493'
c Var 'aux164' direct represents '1' with '1493'
c Var 'aux164' order represents '1' with '1'
c Var 'aux164' order represents '0' with '-1493'
c Encoding variable: aux165 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00003_00002=2) + (x_00003_00003=2) + (x_00003_00004=2) + (x_00003_00005=2) + (x_00003_00006=2) + (x_00003_00007=2) + (x_00003_00008=2) + (x_00003_00009=2))=tv=1))
c Var 'aux165' direct represents '0' with '-1494'
c Var 'aux165' direct represents '1' with '1494'
c Var 'aux165' order represents '1' with '1'
c Var 'aux165' order represents '0' with '-1494'
c Encoding variable: aux166 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00003_00002=3) + (x_00003_00003=3) + (x_00003_00004=3) + (x_00003_00005=3) + (x_00003_00006=3) + (x_00003_00007=3) + (x_00003_00008=3) + (x_00003_00009=3))=tv=1))
c Var 'aux166' direct represents '0' with '-1495'
c Var 'aux166' direct represents '1' with '1495'
c Var 'aux166' order represents '1' with '1'
c Var 'aux166' order represents '0' with '-1495'
c Encoding variable: aux167 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00003_00002=4) + (x_00003_00003=4) + (x_00003_00004=4) + (x_00003_00005=4) + (x_00003_00006=4) + (x_00003_00007=4) + (x_00003_00008=4) + (x_00003_00009=4))=tv=1))
c Var 'aux167' direct represents '0' with '-1496'
c Var 'aux167' direct represents '1' with '1496'
c Var 'aux167' order represents '1' with '1'
c Var 'aux167' order represents '0' with '-1496'
c Encoding variable: aux168 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00003_00002=5) + (x_00003_00003=5) + (x_00003_00004=5) + (x_00003_00005=5) + (x_00003_00006=5) + (x_00003_00007=5) + (x_00003_00008=5) + (x_00003_00009=5))=tv=1))
c Var 'aux168' direct represents '0' with '-1497'
c Var 'aux168' direct represents '1' with '1497'
c Var 'aux168' order represents '1' with '1'
c Var 'aux168' order represents '0' with '-1497'
c Encoding variable: aux169 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00003_00002=6) + (x_00003_00003=6) + (x_00003_00004=6) + (x_00003_00005=6) + (x_00003_00006=6) + (x_00003_00007=6) + (x_00003_00008=6) + (x_00003_00009=6))=tv=1))
c Var 'aux169' direct represents '0' with '-1498'
c Var 'aux169' direct represents '1' with '1498'
c Var 'aux169' order represents '1' with '1'
c Var 'aux169' order represents '0' with '-1498'
c Encoding variable: aux170 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00003_00002=7) + (x_00003_00003=7) + (x_00003_00004=7) + (x_00003_00005=7) + (x_00003_00006=7) + (x_00003_00007=7) + (x_00003_00008=7) + (x_00003_00009=7))=tv=1))
c Var 'aux170' direct represents '0' with '-1499'
c Var 'aux170' direct represents '1' with '1499'
c Var 'aux170' order represents '1' with '1'
c Var 'aux170' order represents '0' with '-1499'
c Encoding variable: aux171 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00003_00002=8) + (x_00003_00003=8) + (x_00003_00004=8) + (x_00003_00005=8) + (x_00003_00006=8) + (x_00003_00007=8) + (x_00003_00008=8) + (x_00003_00009=8))=tv=1))
c Var 'aux171' direct represents '0' with '-1500'
c Var 'aux171' direct represents '1' with '1500'
c Var 'aux171' order represents '1' with '1'
c Var 'aux171' order represents '0' with '-1500'
c Encoding variable: aux172 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00003_00002=9) + (x_00003_00003=9) + (x_00003_00004=9) + (x_00003_00005=9) + (x_00003_00006=9) + (x_00003_00007=9) + (x_00003_00008=9) + (x_00003_00009=9))=tv=1))
c Var 'aux172' direct represents '0' with '-1501'
c Var 'aux172' direct represents '1' with '1501'
c Var 'aux172' order represents '1' with '1'
c Var 'aux172' order represents '0' with '-1501'
c Encoding variable: aux173 with domain: bool (representing constraint (((x_00004_00001=1) + (x_00004_00002=1) + (x_00004_00003=1) + (x_00004_00004=1) + (x_00004_00005=1) + (x_00004_00006=1) + (x_00004_00007=1) + (x_00004_00008=1) + (x_00004_00009=1))=tv=1))
c Var 'aux173' direct represents '0' with '-1502'
c Var 'aux173' direct represents '1' with '1502'
c Var 'aux173' order represents '1' with '1'
c Var 'aux173' order represents '0' with '-1502'
c Encoding variable: aux174 with domain: bool (representing constraint (((x_00004_00001=2) + (x_00004_00002=2) + (x_00004_00003=2) + (x_00004_00004=2) + (x_00004_00005=2) + (x_00004_00006=2) + (x_00004_00007=2) + (x_00004_00008=2) + (x_00004_00009=2))=tv=1))
c Var 'aux174' direct represents '0' with '-1503'
c Var 'aux174' direct represents '1' with '1503'
c Var 'aux174' order represents '1' with '1'
c Var 'aux174' order represents '0' with '-1503'
c Encoding variable: aux175 with domain: bool (representing constraint (((x_00004_00001=3) + (x_00004_00002=3) + (x_00004_00003=3) + (x_00004_00004=3) + (x_00004_00005=3) + (x_00004_00006=3) + (x_00004_00007=3) + (x_00004_00008=3) + (x_00004_00009=3))=tv=1))
c Var 'aux175' direct represents '0' with '-1504'
c Var 'aux175' direct represents '1' with '1504'
c Var 'aux175' order represents '1' with '1'
c Var 'aux175' order represents '0' with '-1504'
c Encoding variable: aux176 with domain: bool (representing constraint (((x_00004_00001=4) + (x_00004_00002=4) + (x_00004_00003=4) + (x_00004_00004=4) + (x_00004_00005=4) + (x_00004_00006=4) + (x_00004_00007=4) + (x_00004_00008=4) + (x_00004_00009=4))=tv=1))
c Var 'aux176' direct represents '0' with '-1505'
c Var 'aux176' direct represents '1' with '1505'
c Var 'aux176' order represents '1' with '1'
c Var 'aux176' order represents '0' with '-1505'
c Encoding variable: aux177 with domain: bool (representing constraint (((x_00004_00001=5) + (x_00004_00002=5) + (x_00004_00003=5) + (x_00004_00004=5) + (x_00004_00005=5) + (x_00004_00006=5) + (x_00004_00007=5) + (x_00004_00008=5) + (x_00004_00009=5))=tv=1))
c Var 'aux177' direct represents '0' with '-1506'
c Var 'aux177' direct represents '1' with '1506'
c Var 'aux177' order represents '1' with '1'
c Var 'aux177' order represents '0' with '-1506'
c Encoding variable: aux178 with domain: bool (representing constraint (((x_00004_00001=6) + (x_00004_00002=6) + (x_00004_00003=6) + (x_00004_00004=6) + (x_00004_00005=6) + (x_00004_00006=6) + (x_00004_00007=6) + (x_00004_00008=6) + (x_00004_00009=6))=tv=1))
c Var 'aux178' direct represents '0' with '-1507'
c Var 'aux178' direct represents '1' with '1507'
c Var 'aux178' order represents '1' with '1'
c Var 'aux178' order represents '0' with '-1507'
c Encoding variable: aux179 with domain: bool (representing constraint (((x_00004_00001=7) + (x_00004_00002=7) + (x_00004_00003=7) + (x_00004_00004=7) + (x_00004_00005=7) + (x_00004_00006=7) + (x_00004_00007=7) + (x_00004_00008=7) + (x_00004_00009=7))=tv=1))
c Var 'aux179' direct represents '0' with '-1508'
c Var 'aux179' direct represents '1' with '1508'
c Var 'aux179' order represents '1' with '1'
c Var 'aux179' order represents '0' with '-1508'
c Encoding variable: aux180 with domain: bool (representing constraint (((x_00004_00001=8) + (x_00004_00002=8) + (x_00004_00003=8) + (x_00004_00004=8) + (x_00004_00005=8) + (x_00004_00006=8) + (x_00004_00007=8) + (x_00004_00008=8) + (x_00004_00009=8))=tv=1))
c Var 'aux180' direct represents '0' with '-1509'
c Var 'aux180' direct represents '1' with '1509'
c Var 'aux180' order represents '1' with '1'
c Var 'aux180' order represents '0' with '-1509'
c Encoding variable: aux181 with domain: bool (representing constraint (((x_00004_00001=9) + (x_00004_00002=9) + (x_00004_00003=9) + (x_00004_00004=9) + (x_00004_00005=9) + (x_00004_00006=9) + (x_00004_00007=9) + (x_00004_00008=9) + (x_00004_00009=9))=tv=1))
c Var 'aux181' direct represents '0' with '-1510'
c Var 'aux181' direct represents '1' with '1510'
c Var 'aux181' order represents '1' with '1'
c Var 'aux181' order represents '0' with '-1510'
c Encoding variable: aux182 with domain: bool (representing constraint (((x_00005_00001=1) + (x_00005_00002=1) + (x_00005_00003=1) + (x_00005_00004=1) + (x_00005_00005=1) + (x_00005_00006=1) + (x_00005_00007=1) + (x_00005_00008=1) + (x_00005_00009=1))=tv=1))
c Var 'aux182' direct represents '0' with '-1511'
c Var 'aux182' direct represents '1' with '1511'
c Var 'aux182' order represents '1' with '1'
c Var 'aux182' order represents '0' with '-1511'
c Encoding variable: aux183 with domain: bool (representing constraint (((x_00005_00001=2) + (x_00005_00002=2) + (x_00005_00003=2) + (x_00005_00004=2) + (x_00005_00005=2) + (x_00005_00006=2) + (x_00005_00007=2) + (x_00005_00008=2) + (x_00005_00009=2))=tv=1))
c Var 'aux183' direct represents '0' with '-1512'
c Var 'aux183' direct represents '1' with '1512'
c Var 'aux183' order represents '1' with '1'
c Var 'aux183' order represents '0' with '-1512'
c Encoding variable: aux184 with domain: bool (representing constraint (((x_00005_00001=3) + (x_00005_00002=3) + (x_00005_00003=3) + (x_00005_00004=3) + (x_00005_00005=3) + (x_00005_00006=3) + (x_00005_00007=3) + (x_00005_00008=3) + (x_00005_00009=3))=tv=1))
c Var 'aux184' direct represents '0' with '-1513'
c Var 'aux184' direct represents '1' with '1513'
c Var 'aux184' order represents '1' with '1'
c Var 'aux184' order represents '0' with '-1513'
c Encoding variable: aux185 with domain: bool (representing constraint (((x_00005_00001=4) + (x_00005_00002=4) + (x_00005_00003=4) + (x_00005_00004=4) + (x_00005_00005=4) + (x_00005_00006=4) + (x_00005_00007=4) + (x_00005_00008=4) + (x_00005_00009=4))=tv=1))
c Var 'aux185' direct represents '0' with '-1514'
c Var 'aux185' direct represents '1' with '1514'
c Var 'aux185' order represents '1' with '1'
c Var 'aux185' order represents '0' with '-1514'
c Encoding variable: aux186 with domain: bool (representing constraint (((x_00005_00001=5) + (x_00005_00002=5) + (x_00005_00003=5) + (x_00005_00004=5) + (x_00005_00005=5) + (x_00005_00006=5) + (x_00005_00007=5) + (x_00005_00008=5) + (x_00005_00009=5))=tv=1))
c Var 'aux186' direct represents '0' with '-1515'
c Var 'aux186' direct represents '1' with '1515'
c Var 'aux186' order represents '1' with '1'
c Var 'aux186' order represents '0' with '-1515'
c Encoding variable: aux187 with domain: bool (representing constraint (((x_00005_00001=6) + (x_00005_00002=6) + (x_00005_00003=6) + (x_00005_00004=6) + (x_00005_00005=6) + (x_00005_00006=6) + (x_00005_00007=6) + (x_00005_00008=6) + (x_00005_00009=6))=tv=1))
c Var 'aux187' direct represents '0' with '-1516'
c Var 'aux187' direct represents '1' with '1516'
c Var 'aux187' order represents '1' with '1'
c Var 'aux187' order represents '0' with '-1516'
c Encoding variable: aux188 with domain: bool (representing constraint (((x_00005_00001=7) + (x_00005_00002=7) + (x_00005_00003=7) + (x_00005_00004=7) + (x_00005_00005=7) + (x_00005_00006=7) + (x_00005_00007=7) + (x_00005_00008=7) + (x_00005_00009=7))=tv=1))
c Var 'aux188' direct represents '0' with '-1517'
c Var 'aux188' direct represents '1' with '1517'
c Var 'aux188' order represents '1' with '1'
c Var 'aux188' order represents '0' with '-1517'
c Encoding variable: aux189 with domain: bool (representing constraint (((x_00005_00001=8) + (x_00005_00002=8) + (x_00005_00003=8) + (x_00005_00004=8) + (x_00005_00005=8) + (x_00005_00006=8) + (x_00005_00007=8) + (x_00005_00008=8) + (x_00005_00009=8))=tv=1))
c Var 'aux189' direct represents '0' with '-1518'
c Var 'aux189' direct represents '1' with '1518'
c Var 'aux189' order represents '1' with '1'
c Var 'aux189' order represents '0' with '-1518'
c Encoding variable: aux190 with domain: bool (representing constraint (((x_00005_00001=9) + (x_00005_00002=9) + (x_00005_00003=9) + (x_00005_00004=9) + (x_00005_00005=9) + (x_00005_00006=9) + (x_00005_00007=9) + (x_00005_00008=9) + (x_00005_00009=9))=tv=1))
c Var 'aux190' direct represents '0' with '-1519'
c Var 'aux190' direct represents '1' with '1519'
c Var 'aux190' order represents '1' with '1'
c Var 'aux190' order represents '0' with '-1519'
c Encoding variable: aux191 with domain: bool (representing constraint (((x_00006_00001=1) + (x_00006_00002=1) + (x_00006_00003=1) + (x_00006_00004=1) + (x_00006_00005=1) + (x_00006_00006=1) + (x_00006_00007=1) + (x_00006_00008=1) + (x_00006_00009=1))=tv=1))
c Var 'aux191' direct represents '0' with '-1520'
c Var 'aux191' direct represents '1' with '1520'
c Var 'aux191' order represents '1' with '1'
c Var 'aux191' order represents '0' with '-1520'
c Encoding variable: aux192 with domain: bool (representing constraint (((x_00006_00001=2) + (x_00006_00002=2) + (x_00006_00003=2) + (x_00006_00004=2) + (x_00006_00005=2) + (x_00006_00006=2) + (x_00006_00007=2) + (x_00006_00008=2) + (x_00006_00009=2))=tv=1))
c Var 'aux192' direct represents '0' with '-1521'
c Var 'aux192' direct represents '1' with '1521'
c Var 'aux192' order represents '1' with '1'
c Var 'aux192' order represents '0' with '-1521'
c Encoding variable: aux193 with domain: bool (representing constraint (((x_00006_00001=3) + (x_00006_00002=3) + (x_00006_00003=3) + (x_00006_00004=3) + (x_00006_00005=3) + (x_00006_00006=3) + (x_00006_00007=3) + (x_00006_00008=3) + (x_00006_00009=3))=tv=1))
c Var 'aux193' direct represents '0' with '-1522'
c Var 'aux193' direct represents '1' with '1522'
c Var 'aux193' order represents '1' with '1'
c Var 'aux193' order represents '0' with '-1522'
c Encoding variable: aux194 with domain: bool (representing constraint (((x_00006_00001=4) + (x_00006_00002=4) + (x_00006_00003=4) + (x_00006_00004=4) + (x_00006_00005=4) + (x_00006_00006=4) + (x_00006_00007=4) + (x_00006_00008=4) + (x_00006_00009=4))=tv=1))
c Var 'aux194' direct represents '0' with '-1523'
c Var 'aux194' direct represents '1' with '1523'
c Var 'aux194' order represents '1' with '1'
c Var 'aux194' order represents '0' with '-1523'
c Encoding variable: aux195 with domain: bool (representing constraint (((x_00006_00001=5) + (x_00006_00002=5) + (x_00006_00003=5) + (x_00006_00004=5) + (x_00006_00005=5) + (x_00006_00006=5) + (x_00006_00007=5) + (x_00006_00008=5) + (x_00006_00009=5))=tv=1))
c Var 'aux195' direct represents '0' with '-1524'
c Var 'aux195' direct represents '1' with '1524'
c Var 'aux195' order represents '1' with '1'
c Var 'aux195' order represents '0' with '-1524'
c Encoding variable: aux196 with domain: bool (representing constraint (((x_00006_00001=6) + (x_00006_00002=6) + (x_00006_00003=6) + (x_00006_00004=6) + (x_00006_00005=6) + (x_00006_00006=6) + (x_00006_00007=6) + (x_00006_00008=6) + (x_00006_00009=6))=tv=1))
c Var 'aux196' direct represents '0' with '-1525'
c Var 'aux196' direct represents '1' with '1525'
c Var 'aux196' order represents '1' with '1'
c Var 'aux196' order represents '0' with '-1525'
c Encoding variable: aux197 with domain: bool (representing constraint (((x_00006_00001=7) + (x_00006_00002=7) + (x_00006_00003=7) + (x_00006_00004=7) + (x_00006_00005=7) + (x_00006_00006=7) + (x_00006_00007=7) + (x_00006_00008=7) + (x_00006_00009=7))=tv=1))
c Var 'aux197' direct represents '0' with '-1526'
c Var 'aux197' direct represents '1' with '1526'
c Var 'aux197' order represents '1' with '1'
c Var 'aux197' order represents '0' with '-1526'
c Encoding variable: aux198 with domain: bool (representing constraint (((x_00006_00001=8) + (x_00006_00002=8) + (x_00006_00003=8) + (x_00006_00004=8) + (x_00006_00005=8) + (x_00006_00006=8) + (x_00006_00007=8) + (x_00006_00008=8) + (x_00006_00009=8))=tv=1))
c Var 'aux198' direct represents '0' with '-1527'
c Var 'aux198' direct represents '1' with '1527'
c Var 'aux198' order represents '1' with '1'
c Var 'aux198' order represents '0' with '-1527'
c Encoding variable: aux199 with domain: bool (representing constraint (((x_00006_00001=9) + (x_00006_00002=9) + (x_00006_00003=9) + (x_00006_00004=9) + (x_00006_00005=9) + (x_00006_00006=9) + (x_00006_00007=9) + (x_00006_00008=9) + (x_00006_00009=9))=tv=1))
c Var 'aux199' direct represents '0' with '-1528'
c Var 'aux199' direct represents '1' with '1528'
c Var 'aux199' order represents '1' with '1'
c Var 'aux199' order represents '0' with '-1528'
c Encoding variable: aux200 with domain: bool (representing constraint (((x_00007_00001=1) + (x_00007_00002=1) + (x_00007_00003=1) + (x_00007_00004=1) + (x_00007_00005=1) + (x_00007_00006=1) + (x_00007_00007=1) + (x_00007_00008=1) + (x_00007_00009=1))=tv=1))
c Var 'aux200' direct represents '0' with '-1529'
c Var 'aux200' direct represents '1' with '1529'
c Var 'aux200' order represents '1' with '1'
c Var 'aux200' order represents '0' with '-1529'
c Encoding variable: aux201 with domain: bool (representing constraint (((x_00007_00001=2) + (x_00007_00002=2) + (x_00007_00003=2) + (x_00007_00004=2) + (x_00007_00005=2) + (x_00007_00006=2) + (x_00007_00007=2) + (x_00007_00008=2) + (x_00007_00009=2))=tv=1))
c Var 'aux201' direct represents '0' with '-1530'
c Var 'aux201' direct represents '1' with '1530'
c Var 'aux201' order represents '1' with '1'
c Var 'aux201' order represents '0' with '-1530'
c Encoding variable: aux202 with domain: bool (representing constraint (((x_00007_00001=3) + (x_00007_00002=3) + (x_00007_00003=3) + (x_00007_00004=3) + (x_00007_00005=3) + (x_00007_00006=3) + (x_00007_00007=3) + (x_00007_00008=3) + (x_00007_00009=3))=tv=1))
c Var 'aux202' direct represents '0' with '-1531'
c Var 'aux202' direct represents '1' with '1531'
c Var 'aux202' order represents '1' with '1'
c Var 'aux202' order represents '0' with '-1531'
c Encoding variable: aux203 with domain: bool (representing constraint (((x_00007_00001=4) + (x_00007_00002=4) + (x_00007_00003=4) + (x_00007_00004=4) + (x_00007_00005=4) + (x_00007_00006=4) + (x_00007_00007=4) + (x_00007_00008=4) + (x_00007_00009=4))=tv=1))
c Var 'aux203' direct represents '0' with '-1532'
c Var 'aux203' direct represents '1' with '1532'
c Var 'aux203' order represents '1' with '1'
c Var 'aux203' order represents '0' with '-1532'
c Encoding variable: aux204 with domain: bool (representing constraint (((x_00007_00001=5) + (x_00007_00002=5) + (x_00007_00003=5) + (x_00007_00004=5) + (x_00007_00005=5) + (x_00007_00006=5) + (x_00007_00007=5) + (x_00007_00008=5) + (x_00007_00009=5))=tv=1))
c Var 'aux204' direct represents '0' with '-1533'
c Var 'aux204' direct represents '1' with '1533'
c Var 'aux204' order represents '1' with '1'
c Var 'aux204' order represents '0' with '-1533'
c Encoding variable: aux205 with domain: bool (representing constraint (((x_00007_00001=6) + (x_00007_00002=6) + (x_00007_00003=6) + (x_00007_00004=6) + (x_00007_00005=6) + (x_00007_00006=6) + (x_00007_00007=6) + (x_00007_00008=6) + (x_00007_00009=6))=tv=1))
c Var 'aux205' direct represents '0' with '-1534'
c Var 'aux205' direct represents '1' with '1534'
c Var 'aux205' order represents '1' with '1'
c Var 'aux205' order represents '0' with '-1534'
c Encoding variable: aux206 with domain: bool (representing constraint (((x_00007_00001=7) + (x_00007_00002=7) + (x_00007_00003=7) + (x_00007_00004=7) + (x_00007_00005=7) + (x_00007_00006=7) + (x_00007_00007=7) + (x_00007_00008=7) + (x_00007_00009=7))=tv=1))
c Var 'aux206' direct represents '0' with '-1535'
c Var 'aux206' direct represents '1' with '1535'
c Var 'aux206' order represents '1' with '1'
c Var 'aux206' order represents '0' with '-1535'
c Encoding variable: aux207 with domain: bool (representing constraint (((x_00007_00001=8) + (x_00007_00002=8) + (x_00007_00003=8) + (x_00007_00004=8) + (x_00007_00005=8) + (x_00007_00006=8) + (x_00007_00007=8) + (x_00007_00008=8) + (x_00007_00009=8))=tv=1))
c Var 'aux207' direct represents '0' with '-1536'
c Var 'aux207' direct represents '1' with '1536'
c Var 'aux207' order represents '1' with '1'
c Var 'aux207' order represents '0' with '-1536'
c Encoding variable: aux208 with domain: bool (representing constraint (((x_00007_00001=9) + (x_00007_00002=9) + (x_00007_00003=9) + (x_00007_00004=9) + (x_00007_00005=9) + (x_00007_00006=9) + (x_00007_00007=9) + (x_00007_00008=9) + (x_00007_00009=9))=tv=1))
c Var 'aux208' direct represents '0' with '-1537'
c Var 'aux208' direct represents '1' with '1537'
c Var 'aux208' order represents '1' with '1'
c Var 'aux208' order represents '0' with '-1537'
c Encoding variable: aux209 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00008_00002=1) + (x_00008_00003=1) + (x_00008_00004=1) + (x_00008_00005=1) + (x_00008_00006=1) + (x_00008_00007=1) + (x_00008_00008=1) + (x_00008_00009=1))=tv=1))
c Var 'aux209' direct represents '0' with '-1538'
c Var 'aux209' direct represents '1' with '1538'
c Var 'aux209' order represents '1' with '1'
c Var 'aux209' order represents '0' with '-1538'
c Encoding variable: aux210 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00008_00002=2) + (x_00008_00003=2) + (x_00008_00004=2) + (x_00008_00005=2) + (x_00008_00006=2) + (x_00008_00007=2) + (x_00008_00008=2) + (x_00008_00009=2))=tv=1))
c Var 'aux210' direct represents '0' with '-1539'
c Var 'aux210' direct represents '1' with '1539'
c Var 'aux210' order represents '1' with '1'
c Var 'aux210' order represents '0' with '-1539'
c Encoding variable: aux211 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00008_00002=3) + (x_00008_00003=3) + (x_00008_00004=3) + (x_00008_00005=3) + (x_00008_00006=3) + (x_00008_00007=3) + (x_00008_00008=3) + (x_00008_00009=3))=tv=1))
c Var 'aux211' direct represents '0' with '-1540'
c Var 'aux211' direct represents '1' with '1540'
c Var 'aux211' order represents '1' with '1'
c Var 'aux211' order represents '0' with '-1540'
c Encoding variable: aux212 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00008_00002=4) + (x_00008_00003=4) + (x_00008_00004=4) + (x_00008_00005=4) + (x_00008_00006=4) + (x_00008_00007=4) + (x_00008_00008=4) + (x_00008_00009=4))=tv=1))
c Var 'aux212' direct represents '0' with '-1541'
c Var 'aux212' direct represents '1' with '1541'
c Var 'aux212' order represents '1' with '1'
c Var 'aux212' order represents '0' with '-1541'
c Encoding variable: aux213 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00008_00002=5) + (x_00008_00003=5) + (x_00008_00004=5) + (x_00008_00005=5) + (x_00008_00006=5) + (x_00008_00007=5) + (x_00008_00008=5) + (x_00008_00009=5))=tv=1))
c Var 'aux213' direct represents '0' with '-1542'
c Var 'aux213' direct represents '1' with '1542'
c Var 'aux213' order represents '1' with '1'
c Var 'aux213' order represents '0' with '-1542'
c Encoding variable: aux214 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00008_00002=6) + (x_00008_00003=6) + (x_00008_00004=6) + (x_00008_00005=6) + (x_00008_00006=6) + (x_00008_00007=6) + (x_00008_00008=6) + (x_00008_00009=6))=tv=1))
c Var 'aux214' direct represents '0' with '-1543'
c Var 'aux214' direct represents '1' with '1543'
c Var 'aux214' order represents '1' with '1'
c Var 'aux214' order represents '0' with '-1543'
c Encoding variable: aux215 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00008_00002=7) + (x_00008_00003=7) + (x_00008_00004=7) + (x_00008_00005=7) + (x_00008_00006=7) + (x_00008_00007=7) + (x_00008_00008=7) + (x_00008_00009=7))=tv=1))
c Var 'aux215' direct represents '0' with '-1544'
c Var 'aux215' direct represents '1' with '1544'
c Var 'aux215' order represents '1' with '1'
c Var 'aux215' order represents '0' with '-1544'
c Encoding variable: aux216 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00008_00002=8) + (x_00008_00003=8) + (x_00008_00004=8) + (x_00008_00005=8) + (x_00008_00006=8) + (x_00008_00007=8) + (x_00008_00008=8) + (x_00008_00009=8))=tv=1))
c Var 'aux216' direct represents '0' with '-1545'
c Var 'aux216' direct represents '1' with '1545'
c Var 'aux216' order represents '1' with '1'
c Var 'aux216' order represents '0' with '-1545'
c Encoding variable: aux217 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00008_00002=9) + (x_00008_00003=9) + (x_00008_00004=9) + (x_00008_00005=9) + (x_00008_00006=9) + (x_00008_00007=9) + (x_00008_00008=9) + (x_00008_00009=9))=tv=1))
c Var 'aux217' direct represents '0' with '-1546'
c Var 'aux217' direct represents '1' with '1546'
c Var 'aux217' order represents '1' with '1'
c Var 'aux217' order represents '0' with '-1546'
c Encoding variable: aux218 with domain: bool (representing constraint (((x_00009_00001=1) + (x_00009_00002=1) + (x_00009_00003=1) + (x_00009_00004=1) + (x_00009_00005=1) + (x_00009_00006=1) + (x_00009_00007=1) + (x_00009_00008=1) + (x_00009_00009=1))=tv=1))
c Var 'aux218' direct represents '0' with '-1547'
c Var 'aux218' direct represents '1' with '1547'
c Var 'aux218' order represents '1' with '1'
c Var 'aux218' order represents '0' with '-1547'
c Encoding variable: aux219 with domain: bool (representing constraint (((x_00009_00001=2) + (x_00009_00002=2) + (x_00009_00003=2) + (x_00009_00004=2) + (x_00009_00005=2) + (x_00009_00006=2) + (x_00009_00007=2) + (x_00009_00008=2) + (x_00009_00009=2))=tv=1))
c Var 'aux219' direct represents '0' with '-1548'
c Var 'aux219' direct represents '1' with '1548'
c Var 'aux219' order represents '1' with '1'
c Var 'aux219' order represents '0' with '-1548'
c Encoding variable: aux220 with domain: bool (representing constraint (((x_00009_00001=3) + (x_00009_00002=3) + (x_00009_00003=3) + (x_00009_00004=3) + (x_00009_00005=3) + (x_00009_00006=3) + (x_00009_00007=3) + (x_00009_00008=3) + (x_00009_00009=3))=tv=1))
c Var 'aux220' direct represents '0' with '-1549'
c Var 'aux220' direct represents '1' with '1549'
c Var 'aux220' order represents '1' with '1'
c Var 'aux220' order represents '0' with '-1549'
c Encoding variable: aux221 with domain: bool (representing constraint (((x_00009_00001=4) + (x_00009_00002=4) + (x_00009_00003=4) + (x_00009_00004=4) + (x_00009_00005=4) + (x_00009_00006=4) + (x_00009_00007=4) + (x_00009_00008=4) + (x_00009_00009=4))=tv=1))
c Var 'aux221' direct represents '0' with '-1550'
c Var 'aux221' direct represents '1' with '1550'
c Var 'aux221' order represents '1' with '1'
c Var 'aux221' order represents '0' with '-1550'
c Encoding variable: aux222 with domain: bool (representing constraint (((x_00009_00001=5) + (x_00009_00002=5) + (x_00009_00003=5) + (x_00009_00004=5) + (x_00009_00005=5) + (x_00009_00006=5) + (x_00009_00007=5) + (x_00009_00008=5) + (x_00009_00009=5))=tv=1))
c Var 'aux222' direct represents '0' with '-1551'
c Var 'aux222' direct represents '1' with '1551'
c Var 'aux222' order represents '1' with '1'
c Var 'aux222' order represents '0' with '-1551'
c Encoding variable: aux223 with domain: bool (representing constraint (((x_00009_00001=6) + (x_00009_00002=6) + (x_00009_00003=6) + (x_00009_00004=6) + (x_00009_00005=6) + (x_00009_00006=6) + (x_00009_00007=6) + (x_00009_00008=6) + (x_00009_00009=6))=tv=1))
c Var 'aux223' direct represents '0' with '-1552'
c Var 'aux223' direct represents '1' with '1552'
c Var 'aux223' order represents '1' with '1'
c Var 'aux223' order represents '0' with '-1552'
c Encoding variable: aux224 with domain: bool (representing constraint (((x_00009_00001=7) + (x_00009_00002=7) + (x_00009_00003=7) + (x_00009_00004=7) + (x_00009_00005=7) + (x_00009_00006=7) + (x_00009_00007=7) + (x_00009_00008=7) + (x_00009_00009=7))=tv=1))
c Var 'aux224' direct represents '0' with '-1553'
c Var 'aux224' direct represents '1' with '1553'
c Var 'aux224' order represents '1' with '1'
c Var 'aux224' order represents '0' with '-1553'
c Encoding variable: aux225 with domain: bool (representing constraint (((x_00009_00001=8) + (x_00009_00002=8) + (x_00009_00003=8) + (x_00009_00004=8) + (x_00009_00005=8) + (x_00009_00006=8) + (x_00009_00007=8) + (x_00009_00008=8) + (x_00009_00009=8))=tv=1))
c Var 'aux225' direct represents '0' with '-1554'
c Var 'aux225' direct represents '1' with '1554'
c Var 'aux225' order represents '1' with '1'
c Var 'aux225' order represents '0' with '-1554'
c Encoding variable: aux226 with domain: bool (representing constraint (((x_00009_00001=9) + (x_00009_00002=9) + (x_00009_00003=9) + (x_00009_00004=9) + (x_00009_00005=9) + (x_00009_00006=9) + (x_00009_00007=9) + (x_00009_00008=9) + (x_00009_00009=9))=tv=1))
c Var 'aux226' direct represents '0' with '-1555'
c Var 'aux226' direct represents '1' with '1555'
c Var 'aux226' order represents '1' with '1'
c Var 'aux226' order represents '0' with '-1555'
c Encoding variable: aux227 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00003_00002=1) + (x_00003_00003=1) + (x_00001_00001=1) + (x_00001_00002=1) + (x_00001_00003=1) + (x_00002_00001=1) + (x_00002_00002=1) + (x_00002_00003=1))=tv=1))
c Var 'aux227' direct represents '0' with '-1556'
c Var 'aux227' direct represents '1' with '1556'
c Var 'aux227' order represents '1' with '1'
c Var 'aux227' order represents '0' with '-1556'
c Encoding variable: aux228 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00003_00002=2) + (x_00003_00003=2) + (x_00001_00001=2) + (x_00001_00002=2) + (x_00001_00003=2) + (x_00002_00001=2) + (x_00002_00002=2) + (x_00002_00003=2))=tv=1))
c Var 'aux228' direct represents '0' with '-1557'
c Var 'aux228' direct represents '1' with '1557'
c Var 'aux228' order represents '1' with '1'
c Var 'aux228' order represents '0' with '-1557'
c Encoding variable: aux229 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00003_00002=3) + (x_00003_00003=3) + (x_00001_00001=3) + (x_00001_00002=3) + (x_00001_00003=3) + (x_00002_00001=3) + (x_00002_00002=3) + (x_00002_00003=3))=tv=1))
c Var 'aux229' direct represents '0' with '-1558'
c Var 'aux229' direct represents '1' with '1558'
c Var 'aux229' order represents '1' with '1'
c Var 'aux229' order represents '0' with '-1558'
c Encoding variable: aux230 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00003_00002=4) + (x_00003_00003=4) + (x_00001_00001=4) + (x_00001_00002=4) + (x_00001_00003=4) + (x_00002_00001=4) + (x_00002_00002=4) + (x_00002_00003=4))=tv=1))
c Var 'aux230' direct represents '0' with '-1559'
c Var 'aux230' direct represents '1' with '1559'
c Var 'aux230' order represents '1' with '1'
c Var 'aux230' order represents '0' with '-1559'
c Encoding variable: aux231 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00003_00002=5) + (x_00003_00003=5) + (x_00001_00001=5) + (x_00001_00002=5) + (x_00001_00003=5) + (x_00002_00001=5) + (x_00002_00002=5) + (x_00002_00003=5))=tv=1))
c Var 'aux231' direct represents '0' with '-1560'
c Var 'aux231' direct represents '1' with '1560'
c Var 'aux231' order represents '1' with '1'
c Var 'aux231' order represents '0' with '-1560'
c Encoding variable: aux232 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00003_00002=6) + (x_00003_00003=6) + (x_00001_00001=6) + (x_00001_00002=6) + (x_00001_00003=6) + (x_00002_00001=6) + (x_00002_00002=6) + (x_00002_00003=6))=tv=1))
c Var 'aux232' direct represents '0' with '-1561'
c Var 'aux232' direct represents '1' with '1561'
c Var 'aux232' order represents '1' with '1'
c Var 'aux232' order represents '0' with '-1561'
c Encoding variable: aux233 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00003_00002=7) + (x_00003_00003=7) + (x_00001_00001=7) + (x_00001_00002=7) + (x_00001_00003=7) + (x_00002_00001=7) + (x_00002_00002=7) + (x_00002_00003=7))=tv=1))
c Var 'aux233' direct represents '0' with '-1562'
c Var 'aux233' direct represents '1' with '1562'
c Var 'aux233' order represents '1' with '1'
c Var 'aux233' order represents '0' with '-1562'
c Encoding variable: aux234 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00003_00002=8) + (x_00003_00003=8) + (x_00001_00001=8) + (x_00001_00002=8) + (x_00001_00003=8) + (x_00002_00001=8) + (x_00002_00002=8) + (x_00002_00003=8))=tv=1))
c Var 'aux234' direct represents '0' with '-1563'
c Var 'aux234' direct represents '1' with '1563'
c Var 'aux234' order represents '1' with '1'
c Var 'aux234' order represents '0' with '-1563'
c Encoding variable: aux235 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00003_00002=9) + (x_00003_00003=9) + (x_00001_00001=9) + (x_00001_00002=9) + (x_00001_00003=9) + (x_00002_00001=9) + (x_00002_00002=9) + (x_00002_00003=9))=tv=1))
c Var 'aux235' direct represents '0' with '-1564'
c Var 'aux235' direct represents '1' with '1564'
c Var 'aux235' order represents '1' with '1'
c Var 'aux235' order represents '0' with '-1564'
c Encoding variable: aux236 with domain: bool (representing constraint (((x_00003_00004=1) + (x_00003_00005=1) + (x_00003_00006=1) + (x_00001_00004=1) + (x_00001_00005=1) + (x_00001_00006=1) + (x_00002_00004=1) + (x_00002_00005=1) + (x_00002_00006=1))=tv=1))
c Var 'aux236' direct represents '0' with '-1565'
c Var 'aux236' direct represents '1' with '1565'
c Var 'aux236' order represents '1' with '1'
c Var 'aux236' order represents '0' with '-1565'
c Encoding variable: aux237 with domain: bool (representing constraint (((x_00003_00004=2) + (x_00003_00005=2) + (x_00003_00006=2) + (x_00001_00004=2) + (x_00001_00005=2) + (x_00001_00006=2) + (x_00002_00004=2) + (x_00002_00005=2) + (x_00002_00006=2))=tv=1))
c Var 'aux237' direct represents '0' with '-1566'
c Var 'aux237' direct represents '1' with '1566'
c Var 'aux237' order represents '1' with '1'
c Var 'aux237' order represents '0' with '-1566'
c Encoding variable: aux238 with domain: bool (representing constraint (((x_00003_00004=3) + (x_00003_00005=3) + (x_00003_00006=3) + (x_00001_00004=3) + (x_00001_00005=3) + (x_00001_00006=3) + (x_00002_00004=3) + (x_00002_00005=3) + (x_00002_00006=3))=tv=1))
c Var 'aux238' direct represents '0' with '-1567'
c Var 'aux238' direct represents '1' with '1567'
c Var 'aux238' order represents '1' with '1'
c Var 'aux238' order represents '0' with '-1567'
c Encoding variable: aux239 with domain: bool (representing constraint (((x_00003_00004=4) + (x_00003_00005=4) + (x_00003_00006=4) + (x_00001_00004=4) + (x_00001_00005=4) + (x_00001_00006=4) + (x_00002_00004=4) + (x_00002_00005=4) + (x_00002_00006=4))=tv=1))
c Var 'aux239' direct represents '0' with '-1568'
c Var 'aux239' direct represents '1' with '1568'
c Var 'aux239' order represents '1' with '1'
c Var 'aux239' order represents '0' with '-1568'
c Encoding variable: aux240 with domain: bool (representing constraint (((x_00003_00004=5) + (x_00003_00005=5) + (x_00003_00006=5) + (x_00001_00004=5) + (x_00001_00005=5) + (x_00001_00006=5) + (x_00002_00004=5) + (x_00002_00005=5) + (x_00002_00006=5))=tv=1))
c Var 'aux240' direct represents '0' with '-1569'
c Var 'aux240' direct represents '1' with '1569'
c Var 'aux240' order represents '1' with '1'
c Var 'aux240' order represents '0' with '-1569'
c Encoding variable: aux241 with domain: bool (representing constraint (((x_00003_00004=6) + (x_00003_00005=6) + (x_00003_00006=6) + (x_00001_00004=6) + (x_00001_00005=6) + (x_00001_00006=6) + (x_00002_00004=6) + (x_00002_00005=6) + (x_00002_00006=6))=tv=1))
c Var 'aux241' direct represents '0' with '-1570'
c Var 'aux241' direct represents '1' with '1570'
c Var 'aux241' order represents '1' with '1'
c Var 'aux241' order represents '0' with '-1570'
c Encoding variable: aux242 with domain: bool (representing constraint (((x_00003_00004=7) + (x_00003_00005=7) + (x_00003_00006=7) + (x_00001_00004=7) + (x_00001_00005=7) + (x_00001_00006=7) + (x_00002_00004=7) + (x_00002_00005=7) + (x_00002_00006=7))=tv=1))
c Var 'aux242' direct represents '0' with '-1571'
c Var 'aux242' direct represents '1' with '1571'
c Var 'aux242' order represents '1' with '1'
c Var 'aux242' order represents '0' with '-1571'
c Encoding variable: aux243 with domain: bool (representing constraint (((x_00003_00004=8) + (x_00003_00005=8) + (x_00003_00006=8) + (x_00001_00004=8) + (x_00001_00005=8) + (x_00001_00006=8) + (x_00002_00004=8) + (x_00002_00005=8) + (x_00002_00006=8))=tv=1))
c Var 'aux243' direct represents '0' with '-1572'
c Var 'aux243' direct represents '1' with '1572'
c Var 'aux243' order represents '1' with '1'
c Var 'aux243' order represents '0' with '-1572'
c Encoding variable: aux244 with domain: bool (representing constraint (((x_00003_00004=9) + (x_00003_00005=9) + (x_00003_00006=9) + (x_00001_00004=9) + (x_00001_00005=9) + (x_00001_00006=9) + (x_00002_00004=9) + (x_00002_00005=9) + (x_00002_00006=9))=tv=1))
c Var 'aux244' direct represents '0' with '-1573'
c Var 'aux244' direct represents '1' with '1573'
c Var 'aux244' order represents '1' with '1'
c Var 'aux244' order represents '0' with '-1573'
c Encoding variable: aux245 with domain: bool (representing constraint (((x_00003_00007=1) + (x_00003_00008=1) + (x_00003_00009=1) + (x_00001_00007=1) + (x_00001_00008=1) + (x_00001_00009=1) + (x_00002_00007=1) + (x_00002_00008=1) + (x_00002_00009=1))=tv=1))
c Var 'aux245' direct represents '0' with '-1574'
c Var 'aux245' direct represents '1' with '1574'
c Var 'aux245' order represents '1' with '1'
c Var 'aux245' order represents '0' with '-1574'
c Encoding variable: aux246 with domain: bool (representing constraint (((x_00003_00007=2) + (x_00003_00008=2) + (x_00003_00009=2) + (x_00001_00007=2) + (x_00001_00008=2) + (x_00001_00009=2) + (x_00002_00007=2) + (x_00002_00008=2) + (x_00002_00009=2))=tv=1))
c Var 'aux246' direct represents '0' with '-1575'
c Var 'aux246' direct represents '1' with '1575'
c Var 'aux246' order represents '1' with '1'
c Var 'aux246' order represents '0' with '-1575'
c Encoding variable: aux247 with domain: bool (representing constraint (((x_00003_00007=3) + (x_00003_00008=3) + (x_00003_00009=3) + (x_00001_00007=3) + (x_00001_00008=3) + (x_00001_00009=3) + (x_00002_00007=3) + (x_00002_00008=3) + (x_00002_00009=3))=tv=1))
c Var 'aux247' direct represents '0' with '-1576'
c Var 'aux247' direct represents '1' with '1576'
c Var 'aux247' order represents '1' with '1'
c Var 'aux247' order represents '0' with '-1576'
c Encoding variable: aux248 with domain: bool (representing constraint (((x_00003_00007=4) + (x_00003_00008=4) + (x_00003_00009=4) + (x_00001_00007=4) + (x_00001_00008=4) + (x_00001_00009=4) + (x_00002_00007=4) + (x_00002_00008=4) + (x_00002_00009=4))=tv=1))
c Var 'aux248' direct represents '0' with '-1577'
c Var 'aux248' direct represents '1' with '1577'
c Var 'aux248' order represents '1' with '1'
c Var 'aux248' order represents '0' with '-1577'
c Encoding variable: aux249 with domain: bool (representing constraint (((x_00003_00007=5) + (x_00003_00008=5) + (x_00003_00009=5) + (x_00001_00007=5) + (x_00001_00008=5) + (x_00001_00009=5) + (x_00002_00007=5) + (x_00002_00008=5) + (x_00002_00009=5))=tv=1))
c Var 'aux249' direct represents '0' with '-1578'
c Var 'aux249' direct represents '1' with '1578'
c Var 'aux249' order represents '1' with '1'
c Var 'aux249' order represents '0' with '-1578'
c Encoding variable: aux250 with domain: bool (representing constraint (((x_00003_00007=6) + (x_00003_00008=6) + (x_00003_00009=6) + (x_00001_00007=6) + (x_00001_00008=6) + (x_00001_00009=6) + (x_00002_00007=6) + (x_00002_00008=6) + (x_00002_00009=6))=tv=1))
c Var 'aux250' direct represents '0' with '-1579'
c Var 'aux250' direct represents '1' with '1579'
c Var 'aux250' order represents '1' with '1'
c Var 'aux250' order represents '0' with '-1579'
c Encoding variable: aux251 with domain: bool (representing constraint (((x_00003_00007=7) + (x_00003_00008=7) + (x_00003_00009=7) + (x_00001_00007=7) + (x_00001_00008=7) + (x_00001_00009=7) + (x_00002_00007=7) + (x_00002_00008=7) + (x_00002_00009=7))=tv=1))
c Var 'aux251' direct represents '0' with '-1580'
c Var 'aux251' direct represents '1' with '1580'
c Var 'aux251' order represents '1' with '1'
c Var 'aux251' order represents '0' with '-1580'
c Encoding variable: aux252 with domain: bool (representing constraint (((x_00003_00007=8) + (x_00003_00008=8) + (x_00003_00009=8) + (x_00001_00007=8) + (x_00001_00008=8) + (x_00001_00009=8) + (x_00002_00007=8) + (x_00002_00008=8) + (x_00002_00009=8))=tv=1))
c Var 'aux252' direct represents '0' with '-1581'
c Var 'aux252' direct represents '1' with '1581'
c Var 'aux252' order represents '1' with '1'
c Var 'aux252' order represents '0' with '-1581'
c Encoding variable: aux253 with domain: bool (representing constraint (((x_00003_00007=9) + (x_00003_00008=9) + (x_00003_00009=9) + (x_00001_00007=9) + (x_00001_00008=9) + (x_00001_00009=9) + (x_00002_00007=9) + (x_00002_00008=9) + (x_00002_00009=9))=tv=1))
c Var 'aux253' direct represents '0' with '-1582'
c Var 'aux253' direct represents '1' with '1582'
c Var 'aux253' order represents '1' with '1'
c Var 'aux253' order represents '0' with '-1582'
c Encoding variable: aux254 with domain: bool (representing constraint (((x_00006_00001=1) + (x_00006_00002=1) + (x_00006_00003=1) + (x_00004_00001=1) + (x_00004_00002=1) + (x_00004_00003=1) + (x_00005_00001=1) + (x_00005_00002=1) + (x_00005_00003=1))=tv=1))
c Var 'aux254' direct represents '0' with '-1583'
c Var 'aux254' direct represents '1' with '1583'
c Var 'aux254' order represents '1' with '1'
c Var 'aux254' order represents '0' with '-1583'
c Encoding variable: aux255 with domain: bool (representing constraint (((x_00006_00001=2) + (x_00006_00002=2) + (x_00006_00003=2) + (x_00004_00001=2) + (x_00004_00002=2) + (x_00004_00003=2) + (x_00005_00001=2) + (x_00005_00002=2) + (x_00005_00003=2))=tv=1))
c Var 'aux255' direct represents '0' with '-1584'
c Var 'aux255' direct represents '1' with '1584'
c Var 'aux255' order represents '1' with '1'
c Var 'aux255' order represents '0' with '-1584'
c Encoding variable: aux256 with domain: bool (representing constraint (((x_00006_00001=3) + (x_00006_00002=3) + (x_00006_00003=3) + (x_00004_00001=3) + (x_00004_00002=3) + (x_00004_00003=3) + (x_00005_00001=3) + (x_00005_00002=3) + (x_00005_00003=3))=tv=1))
c Var 'aux256' direct represents '0' with '-1585'
c Var 'aux256' direct represents '1' with '1585'
c Var 'aux256' order represents '1' with '1'
c Var 'aux256' order represents '0' with '-1585'
c Encoding variable: aux257 with domain: bool (representing constraint (((x_00006_00001=4) + (x_00006_00002=4) + (x_00006_00003=4) + (x_00004_00001=4) + (x_00004_00002=4) + (x_00004_00003=4) + (x_00005_00001=4) + (x_00005_00002=4) + (x_00005_00003=4))=tv=1))
c Var 'aux257' direct represents '0' with '-1586'
c Var 'aux257' direct represents '1' with '1586'
c Var 'aux257' order represents '1' with '1'
c Var 'aux257' order represents '0' with '-1586'
c Encoding variable: aux258 with domain: bool (representing constraint (((x_00006_00001=5) + (x_00006_00002=5) + (x_00006_00003=5) + (x_00004_00001=5) + (x_00004_00002=5) + (x_00004_00003=5) + (x_00005_00001=5) + (x_00005_00002=5) + (x_00005_00003=5))=tv=1))
c Var 'aux258' direct represents '0' with '-1587'
c Var 'aux258' direct represents '1' with '1587'
c Var 'aux258' order represents '1' with '1'
c Var 'aux258' order represents '0' with '-1587'
c Encoding variable: aux259 with domain: bool (representing constraint (((x_00006_00001=6) + (x_00006_00002=6) + (x_00006_00003=6) + (x_00004_00001=6) + (x_00004_00002=6) + (x_00004_00003=6) + (x_00005_00001=6) + (x_00005_00002=6) + (x_00005_00003=6))=tv=1))
c Var 'aux259' direct represents '0' with '-1588'
c Var 'aux259' direct represents '1' with '1588'
c Var 'aux259' order represents '1' with '1'
c Var 'aux259' order represents '0' with '-1588'
c Encoding variable: aux260 with domain: bool (representing constraint (((x_00006_00001=7) + (x_00006_00002=7) + (x_00006_00003=7) + (x_00004_00001=7) + (x_00004_00002=7) + (x_00004_00003=7) + (x_00005_00001=7) + (x_00005_00002=7) + (x_00005_00003=7))=tv=1))
c Var 'aux260' direct represents '0' with '-1589'
c Var 'aux260' direct represents '1' with '1589'
c Var 'aux260' order represents '1' with '1'
c Var 'aux260' order represents '0' with '-1589'
c Encoding variable: aux261 with domain: bool (representing constraint (((x_00006_00001=8) + (x_00006_00002=8) + (x_00006_00003=8) + (x_00004_00001=8) + (x_00004_00002=8) + (x_00004_00003=8) + (x_00005_00001=8) + (x_00005_00002=8) + (x_00005_00003=8))=tv=1))
c Var 'aux261' direct represents '0' with '-1590'
c Var 'aux261' direct represents '1' with '1590'
c Var 'aux261' order represents '1' with '1'
c Var 'aux261' order represents '0' with '-1590'
c Encoding variable: aux262 with domain: bool (representing constraint (((x_00006_00001=9) + (x_00006_00002=9) + (x_00006_00003=9) + (x_00004_00001=9) + (x_00004_00002=9) + (x_00004_00003=9) + (x_00005_00001=9) + (x_00005_00002=9) + (x_00005_00003=9))=tv=1))
c Var 'aux262' direct represents '0' with '-1591'
c Var 'aux262' direct represents '1' with '1591'
c Var 'aux262' order represents '1' with '1'
c Var 'aux262' order represents '0' with '-1591'
c Encoding variable: aux263 with domain: bool (representing constraint (((x_00006_00004=1) + (x_00006_00005=1) + (x_00006_00006=1) + (x_00004_00004=1) + (x_00004_00005=1) + (x_00004_00006=1) + (x_00005_00004=1) + (x_00005_00005=1) + (x_00005_00006=1))=tv=1))
c Var 'aux263' direct represents '0' with '-1592'
c Var 'aux263' direct represents '1' with '1592'
c Var 'aux263' order represents '1' with '1'
c Var 'aux263' order represents '0' with '-1592'
c Encoding variable: aux264 with domain: bool (representing constraint (((x_00006_00004=2) + (x_00006_00005=2) + (x_00006_00006=2) + (x_00004_00004=2) + (x_00004_00005=2) + (x_00004_00006=2) + (x_00005_00004=2) + (x_00005_00005=2) + (x_00005_00006=2))=tv=1))
c Var 'aux264' direct represents '0' with '-1593'
c Var 'aux264' direct represents '1' with '1593'
c Var 'aux264' order represents '1' with '1'
c Var 'aux264' order represents '0' with '-1593'
c Encoding variable: aux265 with domain: bool (representing constraint (((x_00006_00004=3) + (x_00006_00005=3) + (x_00006_00006=3) + (x_00004_00004=3) + (x_00004_00005=3) + (x_00004_00006=3) + (x_00005_00004=3) + (x_00005_00005=3) + (x_00005_00006=3))=tv=1))
c Var 'aux265' direct represents '0' with '-1594'
c Var 'aux265' direct represents '1' with '1594'
c Var 'aux265' order represents '1' with '1'
c Var 'aux265' order represents '0' with '-1594'
c Encoding variable: aux266 with domain: bool (representing constraint (((x_00006_00004=4) + (x_00006_00005=4) + (x_00006_00006=4) + (x_00004_00004=4) + (x_00004_00005=4) + (x_00004_00006=4) + (x_00005_00004=4) + (x_00005_00005=4) + (x_00005_00006=4))=tv=1))
c Var 'aux266' direct represents '0' with '-1595'
c Var 'aux266' direct represents '1' with '1595'
c Var 'aux266' order represents '1' with '1'
c Var 'aux266' order represents '0' with '-1595'
c Encoding variable: aux267 with domain: bool (representing constraint (((x_00006_00004=5) + (x_00006_00005=5) + (x_00006_00006=5) + (x_00004_00004=5) + (x_00004_00005=5) + (x_00004_00006=5) + (x_00005_00004=5) + (x_00005_00005=5) + (x_00005_00006=5))=tv=1))
c Var 'aux267' direct represents '0' with '-1596'
c Var 'aux267' direct represents '1' with '1596'
c Var 'aux267' order represents '1' with '1'
c Var 'aux267' order represents '0' with '-1596'
c Encoding variable: aux268 with domain: bool (representing constraint (((x_00006_00004=6) + (x_00006_00005=6) + (x_00006_00006=6) + (x_00004_00004=6) + (x_00004_00005=6) + (x_00004_00006=6) + (x_00005_00004=6) + (x_00005_00005=6) + (x_00005_00006=6))=tv=1))
c Var 'aux268' direct represents '0' with '-1597'
c Var 'aux268' direct represents '1' with '1597'
c Var 'aux268' order represents '1' with '1'
c Var 'aux268' order represents '0' with '-1597'
c Encoding variable: aux269 with domain: bool (representing constraint (((x_00006_00004=7) + (x_00006_00005=7) + (x_00006_00006=7) + (x_00004_00004=7) + (x_00004_00005=7) + (x_00004_00006=7) + (x_00005_00004=7) + (x_00005_00005=7) + (x_00005_00006=7))=tv=1))
c Var 'aux269' direct represents '0' with '-1598'
c Var 'aux269' direct represents '1' with '1598'
c Var 'aux269' order represents '1' with '1'
c Var 'aux269' order represents '0' with '-1598'
c Encoding variable: aux270 with domain: bool (representing constraint (((x_00006_00004=8) + (x_00006_00005=8) + (x_00006_00006=8) + (x_00004_00004=8) + (x_00004_00005=8) + (x_00004_00006=8) + (x_00005_00004=8) + (x_00005_00005=8) + (x_00005_00006=8))=tv=1))
c Var 'aux270' direct represents '0' with '-1599'
c Var 'aux270' direct represents '1' with '1599'
c Var 'aux270' order represents '1' with '1'
c Var 'aux270' order represents '0' with '-1599'
c Encoding variable: aux271 with domain: bool (representing constraint (((x_00006_00004=9) + (x_00006_00005=9) + (x_00006_00006=9) + (x_00004_00004=9) + (x_00004_00005=9) + (x_00004_00006=9) + (x_00005_00004=9) + (x_00005_00005=9) + (x_00005_00006=9))=tv=1))
c Var 'aux271' direct represents '0' with '-1600'
c Var 'aux271' direct represents '1' with '1600'
c Var 'aux271' order represents '1' with '1'
c Var 'aux271' order represents '0' with '-1600'
c Encoding variable: aux272 with domain: bool (representing constraint (((x_00006_00007=1) + (x_00006_00008=1) + (x_00006_00009=1) + (x_00004_00007=1) + (x_00004_00008=1) + (x_00004_00009=1) + (x_00005_00007=1) + (x_00005_00008=1) + (x_00005_00009=1))=tv=1))
c Var 'aux272' direct represents '0' with '-1601'
c Var 'aux272' direct represents '1' with '1601'
c Var 'aux272' order represents '1' with '1'
c Var 'aux272' order represents '0' with '-1601'
c Encoding variable: aux273 with domain: bool (representing constraint (((x_00006_00007=2) + (x_00006_00008=2) + (x_00006_00009=2) + (x_00004_00007=2) + (x_00004_00008=2) + (x_00004_00009=2) + (x_00005_00007=2) + (x_00005_00008=2) + (x_00005_00009=2))=tv=1))
c Var 'aux273' direct represents '0' with '-1602'
c Var 'aux273' direct represents '1' with '1602'
c Var 'aux273' order represents '1' with '1'
c Var 'aux273' order represents '0' with '-1602'
c Encoding variable: aux274 with domain: bool (representing constraint (((x_00006_00007=3) + (x_00006_00008=3) + (x_00006_00009=3) + (x_00004_00007=3) + (x_00004_00008=3) + (x_00004_00009=3) + (x_00005_00007=3) + (x_00005_00008=3) + (x_00005_00009=3))=tv=1))
c Var 'aux274' direct represents '0' with '-1603'
c Var 'aux274' direct represents '1' with '1603'
c Var 'aux274' order represents '1' with '1'
c Var 'aux274' order represents '0' with '-1603'
c Encoding variable: aux275 with domain: bool (representing constraint (((x_00006_00007=4) + (x_00006_00008=4) + (x_00006_00009=4) + (x_00004_00007=4) + (x_00004_00008=4) + (x_00004_00009=4) + (x_00005_00007=4) + (x_00005_00008=4) + (x_00005_00009=4))=tv=1))
c Var 'aux275' direct represents '0' with '-1604'
c Var 'aux275' direct represents '1' with '1604'
c Var 'aux275' order represents '1' with '1'
c Var 'aux275' order represents '0' with '-1604'
c Encoding variable: aux276 with domain: bool (representing constraint (((x_00006_00007=5) + (x_00006_00008=5) + (x_00006_00009=5) + (x_00004_00007=5) + (x_00004_00008=5) + (x_00004_00009=5) + (x_00005_00007=5) + (x_00005_00008=5) + (x_00005_00009=5))=tv=1))
c Var 'aux276' direct represents '0' with '-1605'
c Var 'aux276' direct represents '1' with '1605'
c Var 'aux276' order represents '1' with '1'
c Var 'aux276' order represents '0' with '-1605'
c Encoding variable: aux277 with domain: bool (representing constraint (((x_00006_00007=6) + (x_00006_00008=6) + (x_00006_00009=6) + (x_00004_00007=6) + (x_00004_00008=6) + (x_00004_00009=6) + (x_00005_00007=6) + (x_00005_00008=6) + (x_00005_00009=6))=tv=1))
c Var 'aux277' direct represents '0' with '-1606'
c Var 'aux277' direct represents '1' with '1606'
c Var 'aux277' order represents '1' with '1'
c Var 'aux277' order represents '0' with '-1606'
c Encoding variable: aux278 with domain: bool (representing constraint (((x_00006_00007=7) + (x_00006_00008=7) + (x_00006_00009=7) + (x_00004_00007=7) + (x_00004_00008=7) + (x_00004_00009=7) + (x_00005_00007=7) + (x_00005_00008=7) + (x_00005_00009=7))=tv=1))
c Var 'aux278' direct represents '0' with '-1607'
c Var 'aux278' direct represents '1' with '1607'
c Var 'aux278' order represents '1' with '1'
c Var 'aux278' order represents '0' with '-1607'
c Encoding variable: aux279 with domain: bool (representing constraint (((x_00006_00007=8) + (x_00006_00008=8) + (x_00006_00009=8) + (x_00004_00007=8) + (x_00004_00008=8) + (x_00004_00009=8) + (x_00005_00007=8) + (x_00005_00008=8) + (x_00005_00009=8))=tv=1))
c Var 'aux279' direct represents '0' with '-1608'
c Var 'aux279' direct represents '1' with '1608'
c Var 'aux279' order represents '1' with '1'
c Var 'aux279' order represents '0' with '-1608'
c Encoding variable: aux280 with domain: bool (representing constraint (((x_00006_00007=9) + (x_00006_00008=9) + (x_00006_00009=9) + (x_00004_00007=9) + (x_00004_00008=9) + (x_00004_00009=9) + (x_00005_00007=9) + (x_00005_00008=9) + (x_00005_00009=9))=tv=1))
c Var 'aux280' direct represents '0' with '-1609'
c Var 'aux280' direct represents '1' with '1609'
c Var 'aux280' order represents '1' with '1'
c Var 'aux280' order represents '0' with '-1609'
c Encoding variable: aux281 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00008_00002=1) + (x_00008_00003=1) + (x_00009_00001=1) + (x_00009_00002=1) + (x_00009_00003=1) + (x_00007_00001=1) + (x_00007_00002=1) + (x_00007_00003=1))=tv=1))
c Var 'aux281' direct represents '0' with '-1610'
c Var 'aux281' direct represents '1' with '1610'
c Var 'aux281' order represents '1' with '1'
c Var 'aux281' order represents '0' with '-1610'
c Encoding variable: aux282 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00008_00002=2) + (x_00008_00003=2) + (x_00009_00001=2) + (x_00009_00002=2) + (x_00009_00003=2) + (x_00007_00001=2) + (x_00007_00002=2) + (x_00007_00003=2))=tv=1))
c Var 'aux282' direct represents '0' with '-1611'
c Var 'aux282' direct represents '1' with '1611'
c Var 'aux282' order represents '1' with '1'
c Var 'aux282' order represents '0' with '-1611'
c Encoding variable: aux283 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00008_00002=3) + (x_00008_00003=3) + (x_00009_00001=3) + (x_00009_00002=3) + (x_00009_00003=3) + (x_00007_00001=3) + (x_00007_00002=3) + (x_00007_00003=3))=tv=1))
c Var 'aux283' direct represents '0' with '-1612'
c Var 'aux283' direct represents '1' with '1612'
c Var 'aux283' order represents '1' with '1'
c Var 'aux283' order represents '0' with '-1612'
c Encoding variable: aux284 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00008_00002=4) + (x_00008_00003=4) + (x_00009_00001=4) + (x_00009_00002=4) + (x_00009_00003=4) + (x_00007_00001=4) + (x_00007_00002=4) + (x_00007_00003=4))=tv=1))
c Var 'aux284' direct represents '0' with '-1613'
c Var 'aux284' direct represents '1' with '1613'
c Var 'aux284' order represents '1' with '1'
c Var 'aux284' order represents '0' with '-1613'
c Encoding variable: aux285 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00008_00002=5) + (x_00008_00003=5) + (x_00009_00001=5) + (x_00009_00002=5) + (x_00009_00003=5) + (x_00007_00001=5) + (x_00007_00002=5) + (x_00007_00003=5))=tv=1))
c Var 'aux285' direct represents '0' with '-1614'
c Var 'aux285' direct represents '1' with '1614'
c Var 'aux285' order represents '1' with '1'
c Var 'aux285' order represents '0' with '-1614'
c Encoding variable: aux286 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00008_00002=6) + (x_00008_00003=6) + (x_00009_00001=6) + (x_00009_00002=6) + (x_00009_00003=6) + (x_00007_00001=6) + (x_00007_00002=6) + (x_00007_00003=6))=tv=1))
c Var 'aux286' direct represents '0' with '-1615'
c Var 'aux286' direct represents '1' with '1615'
c Var 'aux286' order represents '1' with '1'
c Var 'aux286' order represents '0' with '-1615'
c Encoding variable: aux287 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00008_00002=7) + (x_00008_00003=7) + (x_00009_00001=7) + (x_00009_00002=7) + (x_00009_00003=7) + (x_00007_00001=7) + (x_00007_00002=7) + (x_00007_00003=7))=tv=1))
c Var 'aux287' direct represents '0' with '-1616'
c Var 'aux287' direct represents '1' with '1616'
c Var 'aux287' order represents '1' with '1'
c Var 'aux287' order represents '0' with '-1616'
c Encoding variable: aux288 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00008_00002=8) + (x_00008_00003=8) + (x_00009_00001=8) + (x_00009_00002=8) + (x_00009_00003=8) + (x_00007_00001=8) + (x_00007_00002=8) + (x_00007_00003=8))=tv=1))
c Var 'aux288' direct represents '0' with '-1617'
c Var 'aux288' direct represents '1' with '1617'
c Var 'aux288' order represents '1' with '1'
c Var 'aux288' order represents '0' with '-1617'
c Encoding variable: aux289 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00008_00002=9) + (x_00008_00003=9) + (x_00009_00001=9) + (x_00009_00002=9) + (x_00009_00003=9) + (x_00007_00001=9) + (x_00007_00002=9) + (x_00007_00003=9))=tv=1))
c Var 'aux289' direct represents '0' with '-1618'
c Var 'aux289' direct represents '1' with '1618'
c Var 'aux289' order represents '1' with '1'
c Var 'aux289' order represents '0' with '-1618'
c Encoding variable: aux290 with domain: bool (representing constraint (((x_00008_00004=1) + (x_00008_00005=1) + (x_00008_00006=1) + (x_00009_00004=1) + (x_00009_00005=1) + (x_00009_00006=1) + (x_00007_00004=1) + (x_00007_00005=1) + (x_00007_00006=1))=tv=1))
c Var 'aux290' direct represents '0' with '-1619'
c Var 'aux290' direct represents '1' with '1619'
c Var 'aux290' order represents '1' with '1'
c Var 'aux290' order represents '0' with '-1619'
c Encoding variable: aux291 with domain: bool (representing constraint (((x_00008_00004=2) + (x_00008_00005=2) + (x_00008_00006=2) + (x_00009_00004=2) + (x_00009_00005=2) + (x_00009_00006=2) + (x_00007_00004=2) + (x_00007_00005=2) + (x_00007_00006=2))=tv=1))
c Var 'aux291' direct represents '0' with '-1620'
c Var 'aux291' direct represents '1' with '1620'
c Var 'aux291' order represents '1' with '1'
c Var 'aux291' order represents '0' with '-1620'
c Encoding variable: aux292 with domain: bool (representing constraint (((x_00008_00004=3) + (x_00008_00005=3) + (x_00008_00006=3) + (x_00009_00004=3) + (x_00009_00005=3) + (x_00009_00006=3) + (x_00007_00004=3) + (x_00007_00005=3) + (x_00007_00006=3))=tv=1))
c Var 'aux292' direct represents '0' with '-1621'
c Var 'aux292' direct represents '1' with '1621'
c Var 'aux292' order represents '1' with '1'
c Var 'aux292' order represents '0' with '-1621'
c Encoding variable: aux293 with domain: bool (representing constraint (((x_00008_00004=4) + (x_00008_00005=4) + (x_00008_00006=4) + (x_00009_00004=4) + (x_00009_00005=4) + (x_00009_00006=4) + (x_00007_00004=4) + (x_00007_00005=4) + (x_00007_00006=4))=tv=1))
c Var 'aux293' direct represents '0' with '-1622'
c Var 'aux293' direct represents '1' with '1622'
c Var 'aux293' order represents '1' with '1'
c Var 'aux293' order represents '0' with '-1622'
c Encoding variable: aux294 with domain: bool (representing constraint (((x_00008_00004=5) + (x_00008_00005=5) + (x_00008_00006=5) + (x_00009_00004=5) + (x_00009_00005=5) + (x_00009_00006=5) + (x_00007_00004=5) + (x_00007_00005=5) + (x_00007_00006=5))=tv=1))
c Var 'aux294' direct represents '0' with '-1623'
c Var 'aux294' direct represents '1' with '1623'
c Var 'aux294' order represents '1' with '1'
c Var 'aux294' order represents '0' with '-1623'
c Encoding variable: aux295 with domain: bool (representing constraint (((x_00008_00004=6) + (x_00008_00005=6) + (x_00008_00006=6) + (x_00009_00004=6) + (x_00009_00005=6) + (x_00009_00006=6) + (x_00007_00004=6) + (x_00007_00005=6) + (x_00007_00006=6))=tv=1))
c Var 'aux295' direct represents '0' with '-1624'
c Var 'aux295' direct represents '1' with '1624'
c Var 'aux295' order represents '1' with '1'
c Var 'aux295' order represents '0' with '-1624'
c Encoding variable: aux296 with domain: bool (representing constraint (((x_00008_00004=7) + (x_00008_00005=7) + (x_00008_00006=7) + (x_00009_00004=7) + (x_00009_00005=7) + (x_00009_00006=7) + (x_00007_00004=7) + (x_00007_00005=7) + (x_00007_00006=7))=tv=1))
c Var 'aux296' direct represents '0' with '-1625'
c Var 'aux296' direct represents '1' with '1625'
c Var 'aux296' order represents '1' with '1'
c Var 'aux296' order represents '0' with '-1625'
c Encoding variable: aux297 with domain: bool (representing constraint (((x_00008_00004=8) + (x_00008_00005=8) + (x_00008_00006=8) + (x_00009_00004=8) + (x_00009_00005=8) + (x_00009_00006=8) + (x_00007_00004=8) + (x_00007_00005=8) + (x_00007_00006=8))=tv=1))
c Var 'aux297' direct represents '0' with '-1626'
c Var 'aux297' direct represents '1' with '1626'
c Var 'aux297' order represents '1' with '1'
c Var 'aux297' order represents '0' with '-1626'
c Encoding variable: aux298 with domain: bool (representing constraint (((x_00008_00004=9) + (x_00008_00005=9) + (x_00008_00006=9) + (x_00009_00004=9) + (x_00009_00005=9) + (x_00009_00006=9) + (x_00007_00004=9) + (x_00007_00005=9) + (x_00007_00006=9))=tv=1))
c Var 'aux298' direct represents '0' with '-1627'
c Var 'aux298' direct represents '1' with '1627'
c Var 'aux298' order represents '1' with '1'
c Var 'aux298' order represents '0' with '-1627'
c Encoding variable: aux299 with domain: bool (representing constraint (((x_00008_00007=1) + (x_00008_00008=1) + (x_00008_00009=1) + (x_00009_00007=1) + (x_00009_00008=1) + (x_00009_00009=1) + (x_00007_00007=1) + (x_00007_00008=1) + (x_00007_00009=1))=tv=1))
c Var 'aux299' direct represents '0' with '-1628'
c Var 'aux299' direct represents '1' with '1628'
c Var 'aux299' order represents '1' with '1'
c Var 'aux299' order represents '0' with '-1628'
c Encoding variable: aux300 with domain: bool (representing constraint (((x_00008_00007=2) + (x_00008_00008=2) + (x_00008_00009=2) + (x_00009_00007=2) + (x_00009_00008=2) + (x_00009_00009=2) + (x_00007_00007=2) + (x_00007_00008=2) + (x_00007_00009=2))=tv=1))
c Var 'aux300' direct represents '0' with '-1629'
c Var 'aux300' direct represents '1' with '1629'
c Var 'aux300' order represents '1' with '1'
c Var 'aux300' order represents '0' with '-1629'
c Encoding variable: aux301 with domain: bool (representing constraint (((x_00008_00007=3) + (x_00008_00008=3) + (x_00008_00009=3) + (x_00009_00007=3) + (x_00009_00008=3) + (x_00009_00009=3) + (x_00007_00007=3) + (x_00007_00008=3) + (x_00007_00009=3))=tv=1))
c Var 'aux301' direct represents '0' with '-1630'
c Var 'aux301' direct represents '1' with '1630'
c Var 'aux301' order represents '1' with '1'
c Var 'aux301' order represents '0' with '-1630'
c Encoding variable: aux302 with domain: bool (representing constraint (((x_00008_00007=4) + (x_00008_00008=4) + (x_00008_00009=4) + (x_00009_00007=4) + (x_00009_00008=4) + (x_00009_00009=4) + (x_00007_00007=4) + (x_00007_00008=4) + (x_00007_00009=4))=tv=1))
c Var 'aux302' direct represents '0' with '-1631'
c Var 'aux302' direct represents '1' with '1631'
c Var 'aux302' order represents '1' with '1'
c Var 'aux302' order represents '0' with '-1631'
c Encoding variable: aux303 with domain: bool (representing constraint (((x_00008_00007=5) + (x_00008_00008=5) + (x_00008_00009=5) + (x_00009_00007=5) + (x_00009_00008=5) + (x_00009_00009=5) + (x_00007_00007=5) + (x_00007_00008=5) + (x_00007_00009=5))=tv=1))
c Var 'aux303' direct represents '0' with '-1632'
c Var 'aux303' direct represents '1' with '1632'
c Var 'aux303' order represents '1' with '1'
c Var 'aux303' order represents '0' with '-1632'
c Encoding variable: aux304 with domain: bool (representing constraint (((x_00008_00007=6) + (x_00008_00008=6) + (x_00008_00009=6) + (x_00009_00007=6) + (x_00009_00008=6) + (x_00009_00009=6) + (x_00007_00007=6) + (x_00007_00008=6) + (x_00007_00009=6))=tv=1))
c Var 'aux304' direct represents '0' with '-1633'
c Var 'aux304' direct represents '1' with '1633'
c Var 'aux304' order represents '1' with '1'
c Var 'aux304' order represents '0' with '-1633'
c Encoding variable: aux305 with domain: bool (representing constraint (((x_00008_00007=7) + (x_00008_00008=7) + (x_00008_00009=7) + (x_00009_00007=7) + (x_00009_00008=7) + (x_00009_00009=7) + (x_00007_00007=7) + (x_00007_00008=7) + (x_00007_00009=7))=tv=1))
c Var 'aux305' direct represents '0' with '-1634'
c Var 'aux305' direct represents '1' with '1634'
c Var 'aux305' order represents '1' with '1'
c Var 'aux305' order represents '0' with '-1634'
c Encoding variable: aux306 with domain: bool (representing constraint (((x_00008_00007=8) + (x_00008_00008=8) + (x_00008_00009=8) + (x_00009_00007=8) + (x_00009_00008=8) + (x_00009_00009=8) + (x_00007_00007=8) + (x_00007_00008=8) + (x_00007_00009=8))=tv=1))
c Var 'aux306' direct represents '0' with '-1635'
c Var 'aux306' direct represents '1' with '1635'
c Var 'aux306' order represents '1' with '1'
c Var 'aux306' order represents '0' with '-1635'
c Encoding variable: aux307 with domain: bool (representing constraint (((x_00008_00007=9) + (x_00008_00008=9) + (x_00008_00009=9) + (x_00009_00007=9) + (x_00009_00008=9) + (x_00009_00009=9) + (x_00007_00007=9) + (x_00007_00008=9) + (x_00007_00009=9))=tv=1))
c Var 'aux307' direct represents '0' with '-1636'
c Var 'aux307' direct represents '1' with '1636'
c Var 'aux307' order represents '1' with '1'
c Var 'aux307' order represents '0' with '-1636'
c Encoding variable: aux308 with domain: bool (representing constraint (((x_00001_00003=1) + (x_00001_00004=1) + (x_00001_00005=1))<=1))
c Var 'aux308' direct represents '0' with '-1637'
c Var 'aux308' direct represents '1' with '1637'
c Var 'aux308' order represents '1' with '1'
c Var 'aux308' order represents '0' with '-1637'
c Encoding variable: aux309 with domain: bool (representing constraint (((x_00001_00003=2) + (x_00001_00004=2) + (x_00001_00005=2))<=1))
c Var 'aux309' direct represents '0' with '-1638'
c Var 'aux309' direct represents '1' with '1638'
c Var 'aux309' order represents '1' with '1'
c Var 'aux309' order represents '0' with '-1638'
c Encoding variable: aux310 with domain: bool (representing constraint (((x_00001_00003=3) + (x_00001_00004=3) + (x_00001_00005=3))<=1))
c Var 'aux310' direct represents '0' with '-1639'
c Var 'aux310' direct represents '1' with '1639'
c Var 'aux310' order represents '1' with '1'
c Var 'aux310' order represents '0' with '-1639'
c Encoding variable: aux311 with domain: bool (representing constraint (((x_00001_00003=4) + (x_00001_00004=4) + (x_00001_00005=4))<=1))
c Var 'aux311' direct represents '0' with '-1640'
c Var 'aux311' direct represents '1' with '1640'
c Var 'aux311' order represents '1' with '1'
c Var 'aux311' order represents '0' with '-1640'
c Encoding variable: aux312 with domain: bool (representing constraint (((x_00001_00003=5) + (x_00001_00004=5) + (x_00001_00005=5))<=1))
c Var 'aux312' direct represents '0' with '-1641'
c Var 'aux312' direct represents '1' with '1641'
c Var 'aux312' order represents '1' with '1'
c Var 'aux312' order represents '0' with '-1641'
c Encoding variable: aux313 with domain: bool (representing constraint (((x_00001_00003=6) + (x_00001_00004=6) + (x_00001_00005=6))<=1))
c Var 'aux313' direct represents '0' with '-1642'
c Var 'aux313' direct represents '1' with '1642'
c Var 'aux313' order represents '1' with '1'
c Var 'aux313' order represents '0' with '-1642'
c Encoding variable: aux314 with domain: bool (representing constraint (((x_00001_00003=7) + (x_00001_00004=7) + (x_00001_00005=7))<=1))
c Var 'aux314' direct represents '0' with '-1643'
c Var 'aux314' direct represents '1' with '1643'
c Var 'aux314' order represents '1' with '1'
c Var 'aux314' order represents '0' with '-1643'
c Encoding variable: aux315 with domain: bool (representing constraint (((x_00001_00003=8) + (x_00001_00004=8) + (x_00001_00005=8))<=1))
c Var 'aux315' direct represents '0' with '-1644'
c Var 'aux315' direct represents '1' with '1644'
c Var 'aux315' order represents '1' with '1'
c Var 'aux315' order represents '0' with '-1644'
c Encoding variable: aux316 with domain: bool (representing constraint (((x_00001_00003=9) + (x_00001_00004=9) + (x_00001_00005=9))<=1))
c Var 'aux316' direct represents '0' with '-1645'
c Var 'aux316' direct represents '1' with '1645'
c Var 'aux316' order represents '1' with '1'
c Var 'aux316' order represents '0' with '-1645'
c Encoding variable: aux317 with domain: bool (representing constraint (((x_00003_00005=1) + (x_00001_00006=1) + (x_00002_00005=1) + (x_00002_00006=1))<=1))
c Var 'aux317' direct represents '0' with '-1646'
c Var 'aux317' direct represents '1' with '1646'
c Var 'aux317' order represents '1' with '1'
c Var 'aux317' order represents '0' with '-1646'
c Encoding variable: aux318 with domain: bool (representing constraint (((x_00003_00005=2) + (x_00001_00006=2) + (x_00002_00005=2) + (x_00002_00006=2))<=1))
c Var 'aux318' direct represents '0' with '-1647'
c Var 'aux318' direct represents '1' with '1647'
c Var 'aux318' order represents '1' with '1'
c Var 'aux318' order represents '0' with '-1647'
c Encoding variable: aux319 with domain: bool (representing constraint (((x_00003_00005=3) + (x_00001_00006=3) + (x_00002_00005=3) + (x_00002_00006=3))<=1))
c Var 'aux319' direct represents '0' with '-1648'
c Var 'aux319' direct represents '1' with '1648'
c Var 'aux319' order represents '1' with '1'
c Var 'aux319' order represents '0' with '-1648'
c Encoding variable: aux320 with domain: bool (representing constraint (((x_00003_00005=4) + (x_00001_00006=4) + (x_00002_00005=4) + (x_00002_00006=4))<=1))
c Var 'aux320' direct represents '0' with '-1649'
c Var 'aux320' direct represents '1' with '1649'
c Var 'aux320' order represents '1' with '1'
c Var 'aux320' order represents '0' with '-1649'
c Encoding variable: aux321 with domain: bool (representing constraint (((x_00003_00005=5) + (x_00001_00006=5) + (x_00002_00005=5) + (x_00002_00006=5))<=1))
c Var 'aux321' direct represents '0' with '-1650'
c Var 'aux321' direct represents '1' with '1650'
c Var 'aux321' order represents '1' with '1'
c Var 'aux321' order represents '0' with '-1650'
c Encoding variable: aux322 with domain: bool (representing constraint (((x_00003_00005=6) + (x_00001_00006=6) + (x_00002_00005=6) + (x_00002_00006=6))<=1))
c Var 'aux322' direct represents '0' with '-1651'
c Var 'aux322' direct represents '1' with '1651'
c Var 'aux322' order represents '1' with '1'
c Var 'aux322' order represents '0' with '-1651'
c Encoding variable: aux323 with domain: bool (representing constraint (((x_00003_00005=7) + (x_00001_00006=7) + (x_00002_00005=7) + (x_00002_00006=7))<=1))
c Var 'aux323' direct represents '0' with '-1652'
c Var 'aux323' direct represents '1' with '1652'
c Var 'aux323' order represents '1' with '1'
c Var 'aux323' order represents '0' with '-1652'
c Encoding variable: aux324 with domain: bool (representing constraint (((x_00003_00005=8) + (x_00001_00006=8) + (x_00002_00005=8) + (x_00002_00006=8))<=1))
c Var 'aux324' direct represents '0' with '-1653'
c Var 'aux324' direct represents '1' with '1653'
c Var 'aux324' order represents '1' with '1'
c Var 'aux324' order represents '0' with '-1653'
c Encoding variable: aux325 with domain: bool (representing constraint (((x_00003_00005=9) + (x_00001_00006=9) + (x_00002_00005=9) + (x_00002_00006=9))<=1))
c Var 'aux325' direct represents '0' with '-1654'
c Var 'aux325' direct represents '1' with '1654'
c Var 'aux325' order represents '1' with '1'
c Var 'aux325' order represents '0' with '-1654'
c Encoding variable: aux326 with domain: bool (representing constraint (((x_00003_00009=1) + (x_00001_00009=1) + (x_00004_00009=1) + (x_00002_00009=1))<=1))
c Var 'aux326' direct represents '0' with '-1655'
c Var 'aux326' direct represents '1' with '1655'
c Var 'aux326' order represents '1' with '1'
c Var 'aux326' order represents '0' with '-1655'
c Encoding variable: aux327 with domain: bool (representing constraint (((x_00003_00009=2) + (x_00001_00009=2) + (x_00004_00009=2) + (x_00002_00009=2))<=1))
c Var 'aux327' direct represents '0' with '-1656'
c Var 'aux327' direct represents '1' with '1656'
c Var 'aux327' order represents '1' with '1'
c Var 'aux327' order represents '0' with '-1656'
c Encoding variable: aux328 with domain: bool (representing constraint (((x_00003_00009=3) + (x_00001_00009=3) + (x_00004_00009=3) + (x_00002_00009=3))<=1))
c Var 'aux328' direct represents '0' with '-1657'
c Var 'aux328' direct represents '1' with '1657'
c Var 'aux328' order represents '1' with '1'
c Var 'aux328' order represents '0' with '-1657'
c Encoding variable: aux329 with domain: bool (representing constraint (((x_00003_00009=4) + (x_00001_00009=4) + (x_00004_00009=4) + (x_00002_00009=4))<=1))
c Var 'aux329' direct represents '0' with '-1658'
c Var 'aux329' direct represents '1' with '1658'
c Var 'aux329' order represents '1' with '1'
c Var 'aux329' order represents '0' with '-1658'
c Encoding variable: aux330 with domain: bool (representing constraint (((x_00003_00009=5) + (x_00001_00009=5) + (x_00004_00009=5) + (x_00002_00009=5))<=1))
c Var 'aux330' direct represents '0' with '-1659'
c Var 'aux330' direct represents '1' with '1659'
c Var 'aux330' order represents '1' with '1'
c Var 'aux330' order represents '0' with '-1659'
c Encoding variable: aux331 with domain: bool (representing constraint (((x_00003_00009=6) + (x_00001_00009=6) + (x_00004_00009=6) + (x_00002_00009=6))<=1))
c Var 'aux331' direct represents '0' with '-1660'
c Var 'aux331' direct represents '1' with '1660'
c Var 'aux331' order represents '1' with '1'
c Var 'aux331' order represents '0' with '-1660'
c Encoding variable: aux332 with domain: bool (representing constraint (((x_00003_00009=7) + (x_00001_00009=7) + (x_00004_00009=7) + (x_00002_00009=7))<=1))
c Var 'aux332' direct represents '0' with '-1661'
c Var 'aux332' direct represents '1' with '1661'
c Var 'aux332' order represents '1' with '1'
c Var 'aux332' order represents '0' with '-1661'
c Encoding variable: aux333 with domain: bool (representing constraint (((x_00003_00009=8) + (x_00001_00009=8) + (x_00004_00009=8) + (x_00002_00009=8))<=1))
c Var 'aux333' direct represents '0' with '-1662'
c Var 'aux333' direct represents '1' with '1662'
c Var 'aux333' order represents '1' with '1'
c Var 'aux333' order represents '0' with '-1662'
c Encoding variable: aux334 with domain: bool (representing constraint (((x_00003_00009=9) + (x_00001_00009=9) + (x_00004_00009=9) + (x_00002_00009=9))<=1))
c Var 'aux334' direct represents '0' with '-1663'
c Var 'aux334' direct represents '1' with '1663'
c Var 'aux334' order represents '1' with '1'
c Var 'aux334' order represents '0' with '-1663'
c Encoding variable: aux335 with domain: bool (representing constraint (((x_00003_00001=1) + (x_00003_00002=1) + (x_00002_00001=1) + (x_00002_00002=1))<=1))
c Var 'aux335' direct represents '0' with '-1664'
c Var 'aux335' direct represents '1' with '1664'
c Var 'aux335' order represents '1' with '1'
c Var 'aux335' order represents '0' with '-1664'
c Encoding variable: aux336 with domain: bool (representing constraint (((x_00003_00001=2) + (x_00003_00002=2) + (x_00002_00001=2) + (x_00002_00002=2))<=1))
c Var 'aux336' direct represents '0' with '-1665'
c Var 'aux336' direct represents '1' with '1665'
c Var 'aux336' order represents '1' with '1'
c Var 'aux336' order represents '0' with '-1665'
c Encoding variable: aux337 with domain: bool (representing constraint (((x_00003_00001=3) + (x_00003_00002=3) + (x_00002_00001=3) + (x_00002_00002=3))<=1))
c Var 'aux337' direct represents '0' with '-1666'
c Var 'aux337' direct represents '1' with '1666'
c Var 'aux337' order represents '1' with '1'
c Var 'aux337' order represents '0' with '-1666'
c Encoding variable: aux338 with domain: bool (representing constraint (((x_00003_00001=4) + (x_00003_00002=4) + (x_00002_00001=4) + (x_00002_00002=4))<=1))
c Var 'aux338' direct represents '0' with '-1667'
c Var 'aux338' direct represents '1' with '1667'
c Var 'aux338' order represents '1' with '1'
c Var 'aux338' order represents '0' with '-1667'
c Encoding variable: aux339 with domain: bool (representing constraint (((x_00003_00001=5) + (x_00003_00002=5) + (x_00002_00001=5) + (x_00002_00002=5))<=1))
c Var 'aux339' direct represents '0' with '-1668'
c Var 'aux339' direct represents '1' with '1668'
c Var 'aux339' order represents '1' with '1'
c Var 'aux339' order represents '0' with '-1668'
c Encoding variable: aux340 with domain: bool (representing constraint (((x_00003_00001=6) + (x_00003_00002=6) + (x_00002_00001=6) + (x_00002_00002=6))<=1))
c Var 'aux340' direct represents '0' with '-1669'
c Var 'aux340' direct represents '1' with '1669'
c Var 'aux340' order represents '1' with '1'
c Var 'aux340' order represents '0' with '-1669'
c Encoding variable: aux341 with domain: bool (representing constraint (((x_00003_00001=7) + (x_00003_00002=7) + (x_00002_00001=7) + (x_00002_00002=7))<=1))
c Var 'aux341' direct represents '0' with '-1670'
c Var 'aux341' direct represents '1' with '1670'
c Var 'aux341' order represents '1' with '1'
c Var 'aux341' order represents '0' with '-1670'
c Encoding variable: aux342 with domain: bool (representing constraint (((x_00003_00001=8) + (x_00003_00002=8) + (x_00002_00001=8) + (x_00002_00002=8))<=1))
c Var 'aux342' direct represents '0' with '-1671'
c Var 'aux342' direct represents '1' with '1671'
c Var 'aux342' order represents '1' with '1'
c Var 'aux342' order represents '0' with '-1671'
c Encoding variable: aux343 with domain: bool (representing constraint (((x_00003_00001=9) + (x_00003_00002=9) + (x_00002_00001=9) + (x_00002_00002=9))<=1))
c Var 'aux343' direct represents '0' with '-1672'
c Var 'aux343' direct represents '1' with '1672'
c Var 'aux343' order represents '1' with '1'
c Var 'aux343' order represents '0' with '-1672'
c Encoding variable: aux344 with domain: bool (representing constraint (((x_00003_00003=1) + (x_00003_00004=1) + (x_00004_00004=1))<=1))
c Var 'aux344' direct represents '0' with '-1673'
c Var 'aux344' direct represents '1' with '1673'
c Var 'aux344' order represents '1' with '1'
c Var 'aux344' order represents '0' with '-1673'
c Encoding variable: aux345 with domain: bool (representing constraint (((x_00003_00003=2) + (x_00003_00004=2) + (x_00004_00004=2))<=1))
c Var 'aux345' direct represents '0' with '-1674'
c Var 'aux345' direct represents '1' with '1674'
c Var 'aux345' order represents '1' with '1'
c Var 'aux345' order represents '0' with '-1674'
c Encoding variable: aux346 with domain: bool (representing constraint (((x_00003_00003=3) + (x_00003_00004=3) + (x_00004_00004=3))<=1))
c Var 'aux346' direct represents '0' with '-1675'
c Var 'aux346' direct represents '1' with '1675'
c Var 'aux346' order represents '1' with '1'
c Var 'aux346' order represents '0' with '-1675'
c Encoding variable: aux347 with domain: bool (representing constraint (((x_00003_00003=4) + (x_00003_00004=4) + (x_00004_00004=4))<=1))
c Var 'aux347' direct represents '0' with '-1676'
c Var 'aux347' direct represents '1' with '1676'
c Var 'aux347' order represents '1' with '1'
c Var 'aux347' order represents '0' with '-1676'
c Encoding variable: aux348 with domain: bool (representing constraint (((x_00003_00003=5) + (x_00003_00004=5) + (x_00004_00004=5))<=1))
c Var 'aux348' direct represents '0' with '-1677'
c Var 'aux348' direct represents '1' with '1677'
c Var 'aux348' order represents '1' with '1'
c Var 'aux348' order represents '0' with '-1677'
c Encoding variable: aux349 with domain: bool (representing constraint (((x_00003_00003=6) + (x_00003_00004=6) + (x_00004_00004=6))<=1))
c Var 'aux349' direct represents '0' with '-1678'
c Var 'aux349' direct represents '1' with '1678'
c Var 'aux349' order represents '1' with '1'
c Var 'aux349' order represents '0' with '-1678'
c Encoding variable: aux350 with domain: bool (representing constraint (((x_00003_00003=7) + (x_00003_00004=7) + (x_00004_00004=7))<=1))
c Var 'aux350' direct represents '0' with '-1679'
c Var 'aux350' direct represents '1' with '1679'
c Var 'aux350' order represents '1' with '1'
c Var 'aux350' order represents '0' with '-1679'
c Encoding variable: aux351 with domain: bool (representing constraint (((x_00003_00003=8) + (x_00003_00004=8) + (x_00004_00004=8))<=1))
c Var 'aux351' direct represents '0' with '-1680'
c Var 'aux351' direct represents '1' with '1680'
c Var 'aux351' order represents '1' with '1'
c Var 'aux351' order represents '0' with '-1680'
c Encoding variable: aux352 with domain: bool (representing constraint (((x_00003_00003=9) + (x_00003_00004=9) + (x_00004_00004=9))<=1))
c Var 'aux352' direct represents '0' with '-1681'
c Var 'aux352' direct represents '1' with '1681'
c Var 'aux352' order represents '1' with '1'
c Var 'aux352' order represents '0' with '-1681'
c Encoding variable: aux353 with domain: bool (representing constraint (((x_00003_00006=1) + (x_00004_00006=1) + (x_00005_00006=1))<=1))
c Var 'aux353' direct represents '0' with '-1682'
c Var 'aux353' direct represents '1' with '1682'
c Var 'aux353' order represents '1' with '1'
c Var 'aux353' order represents '0' with '-1682'
c Encoding variable: aux354 with domain: bool (representing constraint (((x_00003_00006=2) + (x_00004_00006=2) + (x_00005_00006=2))<=1))
c Var 'aux354' direct represents '0' with '-1683'
c Var 'aux354' direct represents '1' with '1683'
c Var 'aux354' order represents '1' with '1'
c Var 'aux354' order represents '0' with '-1683'
c Encoding variable: aux355 with domain: bool (representing constraint (((x_00003_00006=3) + (x_00004_00006=3) + (x_00005_00006=3))<=1))
c Var 'aux355' direct represents '0' with '-1684'
c Var 'aux355' direct represents '1' with '1684'
c Var 'aux355' order represents '1' with '1'
c Var 'aux355' order represents '0' with '-1684'
c Encoding variable: aux356 with domain: bool (representing constraint (((x_00003_00006=4) + (x_00004_00006=4) + (x_00005_00006=4))<=1))
c Var 'aux356' direct represents '0' with '-1685'
c Var 'aux356' direct represents '1' with '1685'
c Var 'aux356' order represents '1' with '1'
c Var 'aux356' order represents '0' with '-1685'
c Encoding variable: aux357 with domain: bool (representing constraint (((x_00003_00006=5) + (x_00004_00006=5) + (x_00005_00006=5))<=1))
c Var 'aux357' direct represents '0' with '-1686'
c Var 'aux357' direct represents '1' with '1686'
c Var 'aux357' order represents '1' with '1'
c Var 'aux357' order represents '0' with '-1686'
c Encoding variable: aux358 with domain: bool (representing constraint (((x_00003_00006=6) + (x_00004_00006=6) + (x_00005_00006=6))<=1))
c Var 'aux358' direct represents '0' with '-1687'
c Var 'aux358' direct represents '1' with '1687'
c Var 'aux358' order represents '1' with '1'
c Var 'aux358' order represents '0' with '-1687'
c Encoding variable: aux359 with domain: bool (representing constraint (((x_00003_00006=7) + (x_00004_00006=7) + (x_00005_00006=7))<=1))
c Var 'aux359' direct represents '0' with '-1688'
c Var 'aux359' direct represents '1' with '1688'
c Var 'aux359' order represents '1' with '1'
c Var 'aux359' order represents '0' with '-1688'
c Encoding variable: aux360 with domain: bool (representing constraint (((x_00003_00006=8) + (x_00004_00006=8) + (x_00005_00006=8))<=1))
c Var 'aux360' direct represents '0' with '-1689'
c Var 'aux360' direct represents '1' with '1689'
c Var 'aux360' order represents '1' with '1'
c Var 'aux360' order represents '0' with '-1689'
c Encoding variable: aux361 with domain: bool (representing constraint (((x_00003_00006=9) + (x_00004_00006=9) + (x_00005_00006=9))<=1))
c Var 'aux361' direct represents '0' with '-1690'
c Var 'aux361' direct represents '1' with '1690'
c Var 'aux361' order represents '1' with '1'
c Var 'aux361' order represents '0' with '-1690'
c Encoding variable: aux362 with domain: bool (representing constraint (((x_00003_00007=1) + (x_00003_00008=1) + (x_00004_00007=1))<=1))
c Var 'aux362' direct represents '0' with '-1691'
c Var 'aux362' direct represents '1' with '1691'
c Var 'aux362' order represents '1' with '1'
c Var 'aux362' order represents '0' with '-1691'
c Encoding variable: aux363 with domain: bool (representing constraint (((x_00003_00007=2) + (x_00003_00008=2) + (x_00004_00007=2))<=1))
c Var 'aux363' direct represents '0' with '-1692'
c Var 'aux363' direct represents '1' with '1692'
c Var 'aux363' order represents '1' with '1'
c Var 'aux363' order represents '0' with '-1692'
c Encoding variable: aux364 with domain: bool (representing constraint (((x_00003_00007=3) + (x_00003_00008=3) + (x_00004_00007=3))<=1))
c Var 'aux364' direct represents '0' with '-1693'
c Var 'aux364' direct represents '1' with '1693'
c Var 'aux364' order represents '1' with '1'
c Var 'aux364' order represents '0' with '-1693'
c Encoding variable: aux365 with domain: bool (representing constraint (((x_00003_00007=4) + (x_00003_00008=4) + (x_00004_00007=4))<=1))
c Var 'aux365' direct represents '0' with '-1694'
c Var 'aux365' direct represents '1' with '1694'
c Var 'aux365' order represents '1' with '1'
c Var 'aux365' order represents '0' with '-1694'
c Encoding variable: aux366 with domain: bool (representing constraint (((x_00003_00007=5) + (x_00003_00008=5) + (x_00004_00007=5))<=1))
c Var 'aux366' direct represents '0' with '-1695'
c Var 'aux366' direct represents '1' with '1695'
c Var 'aux366' order represents '1' with '1'
c Var 'aux366' order represents '0' with '-1695'
c Encoding variable: aux367 with domain: bool (representing constraint (((x_00003_00007=6) + (x_00003_00008=6) + (x_00004_00007=6))<=1))
c Var 'aux367' direct represents '0' with '-1696'
c Var 'aux367' direct represents '1' with '1696'
c Var 'aux367' order represents '1' with '1'
c Var 'aux367' order represents '0' with '-1696'
c Encoding variable: aux368 with domain: bool (representing constraint (((x_00003_00007=7) + (x_00003_00008=7) + (x_00004_00007=7))<=1))
c Var 'aux368' direct represents '0' with '-1697'
c Var 'aux368' direct represents '1' with '1697'
c Var 'aux368' order represents '1' with '1'
c Var 'aux368' order represents '0' with '-1697'
c Encoding variable: aux369 with domain: bool (representing constraint (((x_00003_00007=8) + (x_00003_00008=8) + (x_00004_00007=8))<=1))
c Var 'aux369' direct represents '0' with '-1698'
c Var 'aux369' direct represents '1' with '1698'
c Var 'aux369' order represents '1' with '1'
c Var 'aux369' order represents '0' with '-1698'
c Encoding variable: aux370 with domain: bool (representing constraint (((x_00003_00007=9) + (x_00003_00008=9) + (x_00004_00007=9))<=1))
c Var 'aux370' direct represents '0' with '-1699'
c Var 'aux370' direct represents '1' with '1699'
c Var 'aux370' order represents '1' with '1'
c Var 'aux370' order represents '0' with '-1699'
c Encoding variable: aux371 with domain: bool (representing constraint (((x_00006_00005=1) + (x_00004_00005=1) + (x_00005_00005=1))<=1))
c Var 'aux371' direct represents '0' with '-1700'
c Var 'aux371' direct represents '1' with '1700'
c Var 'aux371' order represents '1' with '1'
c Var 'aux371' order represents '0' with '-1700'
c Encoding variable: aux372 with domain: bool (representing constraint (((x_00006_00005=2) + (x_00004_00005=2) + (x_00005_00005=2))<=1))
c Var 'aux372' direct represents '0' with '-1701'
c Var 'aux372' direct represents '1' with '1701'
c Var 'aux372' order represents '1' with '1'
c Var 'aux372' order represents '0' with '-1701'
c Encoding variable: aux373 with domain: bool (representing constraint (((x_00006_00005=3) + (x_00004_00005=3) + (x_00005_00005=3))<=1))
c Var 'aux373' direct represents '0' with '-1702'
c Var 'aux373' direct represents '1' with '1702'
c Var 'aux373' order represents '1' with '1'
c Var 'aux373' order represents '0' with '-1702'
c Encoding variable: aux374 with domain: bool (representing constraint (((x_00006_00005=4) + (x_00004_00005=4) + (x_00005_00005=4))<=1))
c Var 'aux374' direct represents '0' with '-1703'
c Var 'aux374' direct represents '1' with '1703'
c Var 'aux374' order represents '1' with '1'
c Var 'aux374' order represents '0' with '-1703'
c Encoding variable: aux375 with domain: bool (representing constraint (((x_00006_00005=5) + (x_00004_00005=5) + (x_00005_00005=5))<=1))
c Var 'aux375' direct represents '0' with '-1704'
c Var 'aux375' direct represents '1' with '1704'
c Var 'aux375' order represents '1' with '1'
c Var 'aux375' order represents '0' with '-1704'
c Encoding variable: aux376 with domain: bool (representing constraint (((x_00006_00005=6) + (x_00004_00005=6) + (x_00005_00005=6))<=1))
c Var 'aux376' direct represents '0' with '-1705'
c Var 'aux376' direct represents '1' with '1705'
c Var 'aux376' order represents '1' with '1'
c Var 'aux376' order represents '0' with '-1705'
c Encoding variable: aux377 with domain: bool (representing constraint (((x_00006_00005=7) + (x_00004_00005=7) + (x_00005_00005=7))<=1))
c Var 'aux377' direct represents '0' with '-1706'
c Var 'aux377' direct represents '1' with '1706'
c Var 'aux377' order represents '1' with '1'
c Var 'aux377' order represents '0' with '-1706'
c Encoding variable: aux378 with domain: bool (representing constraint (((x_00006_00005=8) + (x_00004_00005=8) + (x_00005_00005=8))<=1))
c Var 'aux378' direct represents '0' with '-1707'
c Var 'aux378' direct represents '1' with '1707'
c Var 'aux378' order represents '1' with '1'
c Var 'aux378' order represents '0' with '-1707'
c Encoding variable: aux379 with domain: bool (representing constraint (((x_00006_00005=9) + (x_00004_00005=9) + (x_00005_00005=9))<=1))
c Var 'aux379' direct represents '0' with '-1708'
c Var 'aux379' direct represents '1' with '1708'
c Var 'aux379' order represents '1' with '1'
c Var 'aux379' order represents '0' with '-1708'
c Encoding variable: aux380 with domain: bool (representing constraint (((x_00004_00008=1) + (x_00005_00007=1) + (x_00005_00008=1))<=1))
c Var 'aux380' direct represents '0' with '-1709'
c Var 'aux380' direct represents '1' with '1709'
c Var 'aux380' order represents '1' with '1'
c Var 'aux380' order represents '0' with '-1709'
c Encoding variable: aux381 with domain: bool (representing constraint (((x_00004_00008=2) + (x_00005_00007=2) + (x_00005_00008=2))<=1))
c Var 'aux381' direct represents '0' with '-1710'
c Var 'aux381' direct represents '1' with '1710'
c Var 'aux381' order represents '1' with '1'
c Var 'aux381' order represents '0' with '-1710'
c Encoding variable: aux382 with domain: bool (representing constraint (((x_00004_00008=3) + (x_00005_00007=3) + (x_00005_00008=3))<=1))
c Var 'aux382' direct represents '0' with '-1711'
c Var 'aux382' direct represents '1' with '1711'
c Var 'aux382' order represents '1' with '1'
c Var 'aux382' order represents '0' with '-1711'
c Encoding variable: aux383 with domain: bool (representing constraint (((x_00004_00008=4) + (x_00005_00007=4) + (x_00005_00008=4))<=1))
c Var 'aux383' direct represents '0' with '-1712'
c Var 'aux383' direct represents '1' with '1712'
c Var 'aux383' order represents '1' with '1'
c Var 'aux383' order represents '0' with '-1712'
c Encoding variable: aux384 with domain: bool (representing constraint (((x_00004_00008=5) + (x_00005_00007=5) + (x_00005_00008=5))<=1))
c Var 'aux384' direct represents '0' with '-1713'
c Var 'aux384' direct represents '1' with '1713'
c Var 'aux384' order represents '1' with '1'
c Var 'aux384' order represents '0' with '-1713'
c Encoding variable: aux385 with domain: bool (representing constraint (((x_00004_00008=6) + (x_00005_00007=6) + (x_00005_00008=6))<=1))
c Var 'aux385' direct represents '0' with '-1714'
c Var 'aux385' direct represents '1' with '1714'
c Var 'aux385' order represents '1' with '1'
c Var 'aux385' order represents '0' with '-1714'
c Encoding variable: aux386 with domain: bool (representing constraint (((x_00004_00008=7) + (x_00005_00007=7) + (x_00005_00008=7))<=1))
c Var 'aux386' direct represents '0' with '-1715'
c Var 'aux386' direct represents '1' with '1715'
c Var 'aux386' order represents '1' with '1'
c Var 'aux386' order represents '0' with '-1715'
c Encoding variable: aux387 with domain: bool (representing constraint (((x_00004_00008=8) + (x_00005_00007=8) + (x_00005_00008=8))<=1))
c Var 'aux387' direct represents '0' with '-1716'
c Var 'aux387' direct represents '1' with '1716'
c Var 'aux387' order represents '1' with '1'
c Var 'aux387' order represents '0' with '-1716'
c Encoding variable: aux388 with domain: bool (representing constraint (((x_00004_00008=9) + (x_00005_00007=9) + (x_00005_00008=9))<=1))
c Var 'aux388' direct represents '0' with '-1717'
c Var 'aux388' direct represents '1' with '1717'
c Var 'aux388' order represents '1' with '1'
c Var 'aux388' order represents '0' with '-1717'
c Encoding variable: aux389 with domain: bool (representing constraint (((x_00006_00002=1) + (x_00005_00002=1) + (x_00005_00003=1))<=1))
c Var 'aux389' direct represents '0' with '-1718'
c Var 'aux389' direct represents '1' with '1718'
c Var 'aux389' order represents '1' with '1'
c Var 'aux389' order represents '0' with '-1718'
c Encoding variable: aux390 with domain: bool (representing constraint (((x_00006_00002=2) + (x_00005_00002=2) + (x_00005_00003=2))<=1))
c Var 'aux390' direct represents '0' with '-1719'
c Var 'aux390' direct represents '1' with '1719'
c Var 'aux390' order represents '1' with '1'
c Var 'aux390' order represents '0' with '-1719'
c Encoding variable: aux391 with domain: bool (representing constraint (((x_00006_00002=3) + (x_00005_00002=3) + (x_00005_00003=3))<=1))
c Var 'aux391' direct represents '0' with '-1720'
c Var 'aux391' direct represents '1' with '1720'
c Var 'aux391' order represents '1' with '1'
c Var 'aux391' order represents '0' with '-1720'
c Encoding variable: aux392 with domain: bool (representing constraint (((x_00006_00002=4) + (x_00005_00002=4) + (x_00005_00003=4))<=1))
c Var 'aux392' direct represents '0' with '-1721'
c Var 'aux392' direct represents '1' with '1721'
c Var 'aux392' order represents '1' with '1'
c Var 'aux392' order represents '0' with '-1721'
c Encoding variable: aux393 with domain: bool (representing constraint (((x_00006_00002=5) + (x_00005_00002=5) + (x_00005_00003=5))<=1))
c Var 'aux393' direct represents '0' with '-1722'
c Var 'aux393' direct represents '1' with '1722'
c Var 'aux393' order represents '1' with '1'
c Var 'aux393' order represents '0' with '-1722'
c Encoding variable: aux394 with domain: bool (representing constraint (((x_00006_00002=6) + (x_00005_00002=6) + (x_00005_00003=6))<=1))
c Var 'aux394' direct represents '0' with '-1723'
c Var 'aux394' direct represents '1' with '1723'
c Var 'aux394' order represents '1' with '1'
c Var 'aux394' order represents '0' with '-1723'
c Encoding variable: aux395 with domain: bool (representing constraint (((x_00006_00002=7) + (x_00005_00002=7) + (x_00005_00003=7))<=1))
c Var 'aux395' direct represents '0' with '-1724'
c Var 'aux395' direct represents '1' with '1724'
c Var 'aux395' order represents '1' with '1'
c Var 'aux395' order represents '0' with '-1724'
c Encoding variable: aux396 with domain: bool (representing constraint (((x_00006_00002=8) + (x_00005_00002=8) + (x_00005_00003=8))<=1))
c Var 'aux396' direct represents '0' with '-1725'
c Var 'aux396' direct represents '1' with '1725'
c Var 'aux396' order represents '1' with '1'
c Var 'aux396' order represents '0' with '-1725'
c Encoding variable: aux397 with domain: bool (representing constraint (((x_00006_00002=9) + (x_00005_00002=9) + (x_00005_00003=9))<=1))
c Var 'aux397' direct represents '0' with '-1726'
c Var 'aux397' direct represents '1' with '1726'
c Var 'aux397' order represents '1' with '1'
c Var 'aux397' order represents '0' with '-1726'
c Encoding variable: aux398 with domain: bool (representing constraint (((x_00006_00004=1) + (x_00007_00004=1) + (x_00005_00004=1))<=1))
c Var 'aux398' direct represents '0' with '-1727'
c Var 'aux398' direct represents '1' with '1727'
c Var 'aux398' order represents '1' with '1'
c Var 'aux398' order represents '0' with '-1727'
c Encoding variable: aux399 with domain: bool (representing constraint (((x_00006_00004=2) + (x_00007_00004=2) + (x_00005_00004=2))<=1))
c Var 'aux399' direct represents '0' with '-1728'
c Var 'aux399' direct represents '1' with '1728'
c Var 'aux399' order represents '1' with '1'
c Var 'aux399' order represents '0' with '-1728'
c Encoding variable: aux400 with domain: bool (representing constraint (((x_00006_00004=3) + (x_00007_00004=3) + (x_00005_00004=3))<=1))
c Var 'aux400' direct represents '0' with '-1729'
c Var 'aux400' direct represents '1' with '1729'
c Var 'aux400' order represents '1' with '1'
c Var 'aux400' order represents '0' with '-1729'
c Encoding variable: aux401 with domain: bool (representing constraint (((x_00006_00004=4) + (x_00007_00004=4) + (x_00005_00004=4))<=1))
c Var 'aux401' direct represents '0' with '-1730'
c Var 'aux401' direct represents '1' with '1730'
c Var 'aux401' order represents '1' with '1'
c Var 'aux401' order represents '0' with '-1730'
c Encoding variable: aux402 with domain: bool (representing constraint (((x_00006_00004=5) + (x_00007_00004=5) + (x_00005_00004=5))<=1))
c Var 'aux402' direct represents '0' with '-1731'
c Var 'aux402' direct represents '1' with '1731'
c Var 'aux402' order represents '1' with '1'
c Var 'aux402' order represents '0' with '-1731'
c Encoding variable: aux403 with domain: bool (representing constraint (((x_00006_00004=6) + (x_00007_00004=6) + (x_00005_00004=6))<=1))
c Var 'aux403' direct represents '0' with '-1732'
c Var 'aux403' direct represents '1' with '1732'
c Var 'aux403' order represents '1' with '1'
c Var 'aux403' order represents '0' with '-1732'
c Encoding variable: aux404 with domain: bool (representing constraint (((x_00006_00004=7) + (x_00007_00004=7) + (x_00005_00004=7))<=1))
c Var 'aux404' direct represents '0' with '-1733'
c Var 'aux404' direct represents '1' with '1733'
c Var 'aux404' order represents '1' with '1'
c Var 'aux404' order represents '0' with '-1733'
c Encoding variable: aux405 with domain: bool (representing constraint (((x_00006_00004=8) + (x_00007_00004=8) + (x_00005_00004=8))<=1))
c Var 'aux405' direct represents '0' with '-1734'
c Var 'aux405' direct represents '1' with '1734'
c Var 'aux405' order represents '1' with '1'
c Var 'aux405' order represents '0' with '-1734'
c Encoding variable: aux406 with domain: bool (representing constraint (((x_00006_00004=9) + (x_00007_00004=9) + (x_00005_00004=9))<=1))
c Var 'aux406' direct represents '0' with '-1735'
c Var 'aux406' direct represents '1' with '1735'
c Var 'aux406' order represents '1' with '1'
c Var 'aux406' order represents '0' with '-1735'
c Encoding variable: aux407 with domain: bool (representing constraint (((x_00008_00001=1) + (x_00006_00001=1) + (x_00009_00001=1) + (x_00007_00001=1))<=1))
c Var 'aux407' direct represents '0' with '-1736'
c Var 'aux407' direct represents '1' with '1736'
c Var 'aux407' order represents '1' with '1'
c Var 'aux407' order represents '0' with '-1736'
c Encoding variable: aux408 with domain: bool (representing constraint (((x_00008_00001=2) + (x_00006_00001=2) + (x_00009_00001=2) + (x_00007_00001=2))<=1))
c Var 'aux408' direct represents '0' with '-1737'
c Var 'aux408' direct represents '1' with '1737'
c Var 'aux408' order represents '1' with '1'
c Var 'aux408' order represents '0' with '-1737'
c Encoding variable: aux409 with domain: bool (representing constraint (((x_00008_00001=3) + (x_00006_00001=3) + (x_00009_00001=3) + (x_00007_00001=3))<=1))
c Var 'aux409' direct represents '0' with '-1738'
c Var 'aux409' direct represents '1' with '1738'
c Var 'aux409' order represents '1' with '1'
c Var 'aux409' order represents '0' with '-1738'
c Encoding variable: aux410 with domain: bool (representing constraint (((x_00008_00001=4) + (x_00006_00001=4) + (x_00009_00001=4) + (x_00007_00001=4))<=1))
c Var 'aux410' direct represents '0' with '-1739'
c Var 'aux410' direct represents '1' with '1739'
c Var 'aux410' order represents '1' with '1'
c Var 'aux410' order represents '0' with '-1739'
c Encoding variable: aux411 with domain: bool (representing constraint (((x_00008_00001=5) + (x_00006_00001=5) + (x_00009_00001=5) + (x_00007_00001=5))<=1))
c Var 'aux411' direct represents '0' with '-1740'
c Var 'aux411' direct represents '1' with '1740'
c Var 'aux411' order represents '1' with '1'
c Var 'aux411' order represents '0' with '-1740'
c Encoding variable: aux412 with domain: bool (representing constraint (((x_00008_00001=6) + (x_00006_00001=6) + (x_00009_00001=6) + (x_00007_00001=6))<=1))
c Var 'aux412' direct represents '0' with '-1741'
c Var 'aux412' direct represents '1' with '1741'
c Var 'aux412' order represents '1' with '1'
c Var 'aux412' order represents '0' with '-1741'
c Encoding variable: aux413 with domain: bool (representing constraint (((x_00008_00001=7) + (x_00006_00001=7) + (x_00009_00001=7) + (x_00007_00001=7))<=1))
c Var 'aux413' direct represents '0' with '-1742'
c Var 'aux413' direct represents '1' with '1742'
c Var 'aux413' order represents '1' with '1'
c Var 'aux413' order represents '0' with '-1742'
c Encoding variable: aux414 with domain: bool (representing constraint (((x_00008_00001=8) + (x_00006_00001=8) + (x_00009_00001=8) + (x_00007_00001=8))<=1))
c Var 'aux414' direct represents '0' with '-1743'
c Var 'aux414' direct represents '1' with '1743'
c Var 'aux414' order represents '1' with '1'
c Var 'aux414' order represents '0' with '-1743'
c Encoding variable: aux415 with domain: bool (representing constraint (((x_00008_00001=9) + (x_00006_00001=9) + (x_00009_00001=9) + (x_00007_00001=9))<=1))
c Var 'aux415' direct represents '0' with '-1744'
c Var 'aux415' direct represents '1' with '1744'
c Var 'aux415' order represents '1' with '1'
c Var 'aux415' order represents '0' with '-1744'
c Encoding variable: aux416 with domain: bool (representing constraint (((x_00006_00003=1) + (x_00007_00002=1) + (x_00007_00003=1))<=1))
c Var 'aux416' direct represents '0' with '-1745'
c Var 'aux416' direct represents '1' with '1745'
c Var 'aux416' order represents '1' with '1'
c Var 'aux416' order represents '0' with '-1745'
c Encoding variable: aux417 with domain: bool (representing constraint (((x_00006_00003=2) + (x_00007_00002=2) + (x_00007_00003=2))<=1))
c Var 'aux417' direct represents '0' with '-1746'
c Var 'aux417' direct represents '1' with '1746'
c Var 'aux417' order represents '1' with '1'
c Var 'aux417' order represents '0' with '-1746'
c Encoding variable: aux418 with domain: bool (representing constraint (((x_00006_00003=3) + (x_00007_00002=3) + (x_00007_00003=3))<=1))
c Var 'aux418' direct represents '0' with '-1747'
c Var 'aux418' direct represents '1' with '1747'
c Var 'aux418' order represents '1' with '1'
c Var 'aux418' order represents '0' with '-1747'
c Encoding variable: aux419 with domain: bool (representing constraint (((x_00006_00003=4) + (x_00007_00002=4) + (x_00007_00003=4))<=1))
c Var 'aux419' direct represents '0' with '-1748'
c Var 'aux419' direct represents '1' with '1748'
c Var 'aux419' order represents '1' with '1'
c Var 'aux419' order represents '0' with '-1748'
c Encoding variable: aux420 with domain: bool (representing constraint (((x_00006_00003=5) + (x_00007_00002=5) + (x_00007_00003=5))<=1))
c Var 'aux420' direct represents '0' with '-1749'
c Var 'aux420' direct represents '1' with '1749'
c Var 'aux420' order represents '1' with '1'
c Var 'aux420' order represents '0' with '-1749'
c Encoding variable: aux421 with domain: bool (representing constraint (((x_00006_00003=6) + (x_00007_00002=6) + (x_00007_00003=6))<=1))
c Var 'aux421' direct represents '0' with '-1750'
c Var 'aux421' direct represents '1' with '1750'
c Var 'aux421' order represents '1' with '1'
c Var 'aux421' order represents '0' with '-1750'
c Encoding variable: aux422 with domain: bool (representing constraint (((x_00006_00003=7) + (x_00007_00002=7) + (x_00007_00003=7))<=1))
c Var 'aux422' direct represents '0' with '-1751'
c Var 'aux422' direct represents '1' with '1751'
c Var 'aux422' order represents '1' with '1'
c Var 'aux422' order represents '0' with '-1751'
c Encoding variable: aux423 with domain: bool (representing constraint (((x_00006_00003=8) + (x_00007_00002=8) + (x_00007_00003=8))<=1))
c Var 'aux423' direct represents '0' with '-1752'
c Var 'aux423' direct represents '1' with '1752'
c Var 'aux423' order represents '1' with '1'
c Var 'aux423' order represents '0' with '-1752'
c Encoding variable: aux424 with domain: bool (representing constraint (((x_00006_00003=9) + (x_00007_00002=9) + (x_00007_00003=9))<=1))
c Var 'aux424' direct represents '0' with '-1753'
c Var 'aux424' direct represents '1' with '1753'
c Var 'aux424' order represents '1' with '1'
c Var 'aux424' order represents '0' with '-1753'
c Encoding variable: aux425 with domain: bool (representing constraint (((x_00006_00006=1) + (x_00007_00006=1) + (x_00007_00007=1))<=1))
c Var 'aux425' direct represents '0' with '-1754'
c Var 'aux425' direct represents '1' with '1754'
c Var 'aux425' order represents '1' with '1'
c Var 'aux425' order represents '0' with '-1754'
c Encoding variable: aux426 with domain: bool (representing constraint (((x_00006_00006=2) + (x_00007_00006=2) + (x_00007_00007=2))<=1))
c Var 'aux426' direct represents '0' with '-1755'
c Var 'aux426' direct represents '1' with '1755'
c Var 'aux426' order represents '1' with '1'
c Var 'aux426' order represents '0' with '-1755'
c Encoding variable: aux427 with domain: bool (representing constraint (((x_00006_00006=3) + (x_00007_00006=3) + (x_00007_00007=3))<=1))
c Var 'aux427' direct represents '0' with '-1756'
c Var 'aux427' direct represents '1' with '1756'
c Var 'aux427' order represents '1' with '1'
c Var 'aux427' order represents '0' with '-1756'
c Encoding variable: aux428 with domain: bool (representing constraint (((x_00006_00006=4) + (x_00007_00006=4) + (x_00007_00007=4))<=1))
c Var 'aux428' direct represents '0' with '-1757'
c Var 'aux428' direct represents '1' with '1757'
c Var 'aux428' order represents '1' with '1'
c Var 'aux428' order represents '0' with '-1757'
c Encoding variable: aux429 with domain: bool (representing constraint (((x_00006_00006=5) + (x_00007_00006=5) + (x_00007_00007=5))<=1))
c Var 'aux429' direct represents '0' with '-1758'
c Var 'aux429' direct represents '1' with '1758'
c Var 'aux429' order represents '1' with '1'
c Var 'aux429' order represents '0' with '-1758'
c Encoding variable: aux430 with domain: bool (representing constraint (((x_00006_00006=6) + (x_00007_00006=6) + (x_00007_00007=6))<=1))
c Var 'aux430' direct represents '0' with '-1759'
c Var 'aux430' direct represents '1' with '1759'
c Var 'aux430' order represents '1' with '1'
c Var 'aux430' order represents '0' with '-1759'
c Encoding variable: aux431 with domain: bool (representing constraint (((x_00006_00006=7) + (x_00007_00006=7) + (x_00007_00007=7))<=1))
c Var 'aux431' direct represents '0' with '-1760'
c Var 'aux431' direct represents '1' with '1760'
c Var 'aux431' order represents '1' with '1'
c Var 'aux431' order represents '0' with '-1760'
c Encoding variable: aux432 with domain: bool (representing constraint (((x_00006_00006=8) + (x_00007_00006=8) + (x_00007_00007=8))<=1))
c Var 'aux432' direct represents '0' with '-1761'
c Var 'aux432' direct represents '1' with '1761'
c Var 'aux432' order represents '1' with '1'
c Var 'aux432' order represents '0' with '-1761'
c Encoding variable: aux433 with domain: bool (representing constraint (((x_00006_00006=9) + (x_00007_00006=9) + (x_00007_00007=9))<=1))
c Var 'aux433' direct represents '0' with '-1762'
c Var 'aux433' direct represents '1' with '1762'
c Var 'aux433' order represents '1' with '1'
c Var 'aux433' order represents '0' with '-1762'
c Encoding variable: aux434 with domain: bool (representing constraint (((x_00008_00004=1) + (x_00008_00005=1) + (x_00009_00004=1) + (x_00007_00005=1))<=1))
c Var 'aux434' direct represents '0' with '-1763'
c Var 'aux434' direct represents '1' with '1763'
c Var 'aux434' order represents '1' with '1'
c Var 'aux434' order represents '0' with '-1763'
c Encoding variable: aux435 with domain: bool (representing constraint (((x_00008_00004=2) + (x_00008_00005=2) + (x_00009_00004=2) + (x_00007_00005=2))<=1))
c Var 'aux435' direct represents '0' with '-1764'
c Var 'aux435' direct represents '1' with '1764'
c Var 'aux435' order represents '1' with '1'
c Var 'aux435' order represents '0' with '-1764'
c Encoding variable: aux436 with domain: bool (representing constraint (((x_00008_00004=3) + (x_00008_00005=3) + (x_00009_00004=3) + (x_00007_00005=3))<=1))
c Var 'aux436' direct represents '0' with '-1765'
c Var 'aux436' direct represents '1' with '1765'
c Var 'aux436' order represents '1' with '1'
c Var 'aux436' order represents '0' with '-1765'
c Encoding variable: aux437 with domain: bool (representing constraint (((x_00008_00004=4) + (x_00008_00005=4) + (x_00009_00004=4) + (x_00007_00005=4))<=1))
c Var 'aux437' direct represents '0' with '-1766'
c Var 'aux437' direct represents '1' with '1766'
c Var 'aux437' order represents '1' with '1'
c Var 'aux437' order represents '0' with '-1766'
c Encoding variable: aux438 with domain: bool (representing constraint (((x_00008_00004=5) + (x_00008_00005=5) + (x_00009_00004=5) + (x_00007_00005=5))<=1))
c Var 'aux438' direct represents '0' with '-1767'
c Var 'aux438' direct represents '1' with '1767'
c Var 'aux438' order represents '1' with '1'
c Var 'aux438' order represents '0' with '-1767'
c Encoding variable: aux439 with domain: bool (representing constraint (((x_00008_00004=6) + (x_00008_00005=6) + (x_00009_00004=6) + (x_00007_00005=6))<=1))
c Var 'aux439' direct represents '0' with '-1768'
c Var 'aux439' direct represents '1' with '1768'
c Var 'aux439' order represents '1' with '1'
c Var 'aux439' order represents '0' with '-1768'
c Encoding variable: aux440 with domain: bool (representing constraint (((x_00008_00004=7) + (x_00008_00005=7) + (x_00009_00004=7) + (x_00007_00005=7))<=1))
c Var 'aux440' direct represents '0' with '-1769'
c Var 'aux440' direct represents '1' with '1769'
c Var 'aux440' order represents '1' with '1'
c Var 'aux440' order represents '0' with '-1769'
c Encoding variable: aux441 with domain: bool (representing constraint (((x_00008_00004=8) + (x_00008_00005=8) + (x_00009_00004=8) + (x_00007_00005=8))<=1))
c Var 'aux441' direct represents '0' with '-1770'
c Var 'aux441' direct represents '1' with '1770'
c Var 'aux441' order represents '1' with '1'
c Var 'aux441' order represents '0' with '-1770'
c Encoding variable: aux442 with domain: bool (representing constraint (((x_00008_00004=9) + (x_00008_00005=9) + (x_00009_00004=9) + (x_00007_00005=9))<=1))
c Var 'aux442' direct represents '0' with '-1771'
c Var 'aux442' direct represents '1' with '1771'
c Var 'aux442' order represents '1' with '1'
c Var 'aux442' order represents '0' with '-1771'
c Encoding variable: aux443 with domain: bool (representing constraint (((x_00008_00008=1) + (x_00008_00009=1) + (x_00007_00008=1) + (x_00007_00009=1))<=1))
c Var 'aux443' direct represents '0' with '-1772'
c Var 'aux443' direct represents '1' with '1772'
c Var 'aux443' order represents '1' with '1'
c Var 'aux443' order represents '0' with '-1772'
c Encoding variable: aux444 with domain: bool (representing constraint (((x_00008_00008=2) + (x_00008_00009=2) + (x_00007_00008=2) + (x_00007_00009=2))<=1))
c Var 'aux444' direct represents '0' with '-1773'
c Var 'aux444' direct represents '1' with '1773'
c Var 'aux444' order represents '1' with '1'
c Var 'aux444' order represents '0' with '-1773'
c Encoding variable: aux445 with domain: bool (representing constraint (((x_00008_00008=3) + (x_00008_00009=3) + (x_00007_00008=3) + (x_00007_00009=3))<=1))
c Var 'aux445' direct represents '0' with '-1774'
c Var 'aux445' direct represents '1' with '1774'
c Var 'aux445' order represents '1' with '1'
c Var 'aux445' order represents '0' with '-1774'
c Encoding variable: aux446 with domain: bool (representing constraint (((x_00008_00008=4) + (x_00008_00009=4) + (x_00007_00008=4) + (x_00007_00009=4))<=1))
c Var 'aux446' direct represents '0' with '-1775'
c Var 'aux446' direct represents '1' with '1775'
c Var 'aux446' order represents '1' with '1'
c Var 'aux446' order represents '0' with '-1775'
c Encoding variable: aux447 with domain: bool (representing constraint (((x_00008_00008=5) + (x_00008_00009=5) + (x_00007_00008=5) + (x_00007_00009=5))<=1))
c Var 'aux447' direct represents '0' with '-1776'
c Var 'aux447' direct represents '1' with '1776'
c Var 'aux447' order represents '1' with '1'
c Var 'aux447' order represents '0' with '-1776'
c Encoding variable: aux448 with domain: bool (representing constraint (((x_00008_00008=6) + (x_00008_00009=6) + (x_00007_00008=6) + (x_00007_00009=6))<=1))
c Var 'aux448' direct represents '0' with '-1777'
c Var 'aux448' direct represents '1' with '1777'
c Var 'aux448' order represents '1' with '1'
c Var 'aux448' order represents '0' with '-1777'
c Encoding variable: aux449 with domain: bool (representing constraint (((x_00008_00008=7) + (x_00008_00009=7) + (x_00007_00008=7) + (x_00007_00009=7))<=1))
c Var 'aux449' direct represents '0' with '-1778'
c Var 'aux449' direct represents '1' with '1778'
c Var 'aux449' order represents '1' with '1'
c Var 'aux449' order represents '0' with '-1778'
c Encoding variable: aux450 with domain: bool (representing constraint (((x_00008_00008=8) + (x_00008_00009=8) + (x_00007_00008=8) + (x_00007_00009=8))<=1))
c Var 'aux450' direct represents '0' with '-1779'
c Var 'aux450' direct represents '1' with '1779'
c Var 'aux450' order represents '1' with '1'
c Var 'aux450' order represents '0' with '-1779'
c Encoding variable: aux451 with domain: bool (representing constraint (((x_00008_00008=9) + (x_00008_00009=9) + (x_00007_00008=9) + (x_00007_00009=9))<=1))
c Var 'aux451' direct represents '0' with '-1780'
c Var 'aux451' direct represents '1' with '1780'
c Var 'aux451' order represents '1' with '1'
c Var 'aux451' order represents '0' with '-1780'
c Encoding variable: aux452 with domain: bool (representing constraint (((x_00009_00005=1) + (x_00009_00006=1) + (x_00009_00007=1))<=1))
c Var 'aux452' direct represents '0' with '-1781'
c Var 'aux452' direct represents '1' with '1781'
c Var 'aux452' order represents '1' with '1'
c Var 'aux452' order represents '0' with '-1781'
c Encoding variable: aux453 with domain: bool (representing constraint (((x_00009_00005=2) + (x_00009_00006=2) + (x_00009_00007=2))<=1))
c Var 'aux453' direct represents '0' with '-1782'
c Var 'aux453' direct represents '1' with '1782'
c Var 'aux453' order represents '1' with '1'
c Var 'aux453' order represents '0' with '-1782'
c Encoding variable: aux454 with domain: bool (representing constraint (((x_00009_00005=3) + (x_00009_00006=3) + (x_00009_00007=3))<=1))
c Var 'aux454' direct represents '0' with '-1783'
c Var 'aux454' direct represents '1' with '1783'
c Var 'aux454' order represents '1' with '1'
c Var 'aux454' order represents '0' with '-1783'
c Encoding variable: aux455 with domain: bool (representing constraint (((x_00009_00005=4) + (x_00009_00006=4) + (x_00009_00007=4))<=1))
c Var 'aux455' direct represents '0' with '-1784'
c Var 'aux455' direct represents '1' with '1784'
c Var 'aux455' order represents '1' with '1'
c Var 'aux455' order represents '0' with '-1784'
c Encoding variable: aux456 with domain: bool (representing constraint (((x_00009_00005=5) + (x_00009_00006=5) + (x_00009_00007=5))<=1))
c Var 'aux456' direct represents '0' with '-1785'
c Var 'aux456' direct represents '1' with '1785'
c Var 'aux456' order represents '1' with '1'
c Var 'aux456' order represents '0' with '-1785'
c Encoding variable: aux457 with domain: bool (representing constraint (((x_00009_00005=6) + (x_00009_00006=6) + (x_00009_00007=6))<=1))
c Var 'aux457' direct represents '0' with '-1786'
c Var 'aux457' direct represents '1' with '1786'
c Var 'aux457' order represents '1' with '1'
c Var 'aux457' order represents '0' with '-1786'
c Encoding variable: aux458 with domain: bool (representing constraint (((x_00009_00005=7) + (x_00009_00006=7) + (x_00009_00007=7))<=1))
c Var 'aux458' direct represents '0' with '-1787'
c Var 'aux458' direct represents '1' with '1787'
c Var 'aux458' order represents '1' with '1'
c Var 'aux458' order represents '0' with '-1787'
c Encoding variable: aux459 with domain: bool (representing constraint (((x_00009_00005=8) + (x_00009_00006=8) + (x_00009_00007=8))<=1))
c Var 'aux459' direct represents '0' with '-1788'
c Var 'aux459' direct represents '1' with '1788'
c Var 'aux459' order represents '1' with '1'
c Var 'aux459' order represents '0' with '-1788'
c Encoding variable: aux460 with domain: bool (representing constraint (((x_00009_00005=9) + (x_00009_00006=9) + (x_00009_00007=9))<=1))
c Var 'aux460' direct represents '0' with '-1789'
c Var 'aux460' direct represents '1' with '1789'
c Var 'aux460' order represents '1' with '1'
c Var 'aux460' order represents '0' with '-1789'
c Encoding variable: aux461 with domain: int(0..16) (representing constraint (shift(x_00002_00005, -1) + shift(x_00001_00006, -1)))
c Both direct and order encoding.
c Var 'aux461' order represents '0' with '1790'
c Var 'aux461' direct represents '0' with '1790'
c Var 'aux461' order represents '1' with '1791'
-1790 1791 0
c Var 'aux461' direct represents '1' with '1792'
1790 -1791 1792 0
-1792 1791 0
-1792 -1790 0
c Var 'aux461' order represents '2' with '1793'
-1791 1793 0
c Var 'aux461' direct represents '2' with '1794'
1791 -1793 1794 0
-1794 1793 0
-1794 -1791 0
c Var 'aux461' order represents '3' with '1795'
-1793 1795 0
c Var 'aux461' direct represents '3' with '1796'
1793 -1795 1796 0
-1796 1795 0
-1796 -1793 0
c Var 'aux461' order represents '4' with '1797'
-1795 1797 0
c Var 'aux461' direct represents '4' with '1798'
1795 -1797 1798 0
-1798 1797 0
-1798 -1795 0
c Var 'aux461' order represents '5' with '1799'
-1797 1799 0
c Var 'aux461' direct represents '5' with '1800'
1797 -1799 1800 0
-1800 1799 0
-1800 -1797 0
c Var 'aux461' order represents '6' with '1801'
-1799 1801 0
c Var 'aux461' direct represents '6' with '1802'
1799 -1801 1802 0
-1802 1801 0
-1802 -1799 0
c Var 'aux461' order represents '7' with '1803'
-1801 1803 0
c Var 'aux461' direct represents '7' with '1804'
1801 -1803 1804 0
-1804 1803 0
-1804 -1801 0
c Var 'aux461' order represents '8' with '1805'
-1803 1805 0
c Var 'aux461' direct represents '8' with '1806'
1803 -1805 1806 0
-1806 1805 0
-1806 -1803 0
c Var 'aux461' order represents '9' with '1807'
-1805 1807 0
c Var 'aux461' direct represents '9' with '1808'
1805 -1807 1808 0
-1808 1807 0
-1808 -1805 0
c Var 'aux461' order represents '10' with '1809'
-1807 1809 0
c Var 'aux461' direct represents '10' with '1810'
1807 -1809 1810 0
-1810 1809 0
-1810 -1807 0
c Var 'aux461' order represents '11' with '1811'
-1809 1811 0
c Var 'aux461' direct represents '11' with '1812'
1809 -1811 1812 0
-1812 1811 0
-1812 -1809 0
c Var 'aux461' order represents '12' with '1813'
-1811 1813 0
c Var 'aux461' direct represents '12' with '1814'
1811 -1813 1814 0
-1814 1813 0
-1814 -1811 0
c Var 'aux461' order represents '13' with '1815'
-1813 1815 0
c Var 'aux461' direct represents '13' with '1816'
1813 -1815 1816 0
-1816 1815 0
-1816 -1813 0
c Var 'aux461' order represents '14' with '1817'
-1815 1817 0
c Var 'aux461' direct represents '14' with '1818'
1815 -1817 1818 0
-1818 1817 0
-1818 -1815 0
c Var 'aux461' order represents '15' with '1819'
-1817 1819 0
c Var 'aux461' direct represents '15' with '1820'
1817 -1819 1820 0
-1820 1819 0
-1820 -1817 0
c Var 'aux461' direct represents '16' with '-1819'
1790 1792 1794 1796 1798 1800 1802 1804 1806 1808 1810 1812 1814 1816 1818 1820 -1819 0
c Encoding variable: aux462 with domain: int(0..16) (representing constraint (shift(x_00002_00009, -1) + shift(x_00001_00009, -1)))
c Both direct and order encoding.
c Var 'aux462' order represents '0' with '1821'
c Var 'aux462' direct represents '0' with '1821'
c Var 'aux462' order represents '1' with '1822'
-1821 1822 0
c Var 'aux462' direct represents '1' with '1823'
1821 -1822 1823 0
-1823 1822 0
-1823 -1821 0
c Var 'aux462' order represents '2' with '1824'
-1822 1824 0
c Var 'aux462' direct represents '2' with '1825'
1822 -1824 1825 0
-1825 1824 0
-1825 -1822 0
c Var 'aux462' order represents '3' with '1826'
-1824 1826 0
c Var 'aux462' direct represents '3' with '1827'
1824 -1826 1827 0
-1827 1826 0
-1827 -1824 0
c Var 'aux462' order represents '4' with '1828'
-1826 1828 0
c Var 'aux462' direct represents '4' with '1829'
1826 -1828 1829 0
-1829 1828 0
-1829 -1826 0
c Var 'aux462' order represents '5' with '1830'
-1828 1830 0
c Var 'aux462' direct represents '5' with '1831'
1828 -1830 1831 0
-1831 1830 0
-1831 -1828 0
c Var 'aux462' order represents '6' with '1832'
-1830 1832 0
c Var 'aux462' direct represents '6' with '1833'
1830 -1832 1833 0
-1833 1832 0
-1833 -1830 0
c Var 'aux462' order represents '7' with '1834'
-1832 1834 0
c Var 'aux462' direct represents '7' with '1835'
1832 -1834 1835 0
-1835 1834 0
-1835 -1832 0
c Var 'aux462' order represents '8' with '1836'
-1834 1836 0
c Var 'aux462' direct represents '8' with '1837'
1834 -1836 1837 0
-1837 1836 0
-1837 -1834 0
c Var 'aux462' order represents '9' with '1838'
-1836 1838 0
c Var 'aux462' direct represents '9' with '1839'
1836 -1838 1839 0
-1839 1838 0
-1839 -1836 0
c Var 'aux462' order represents '10' with '1840'
-1838 1840 0
c Var 'aux462' direct represents '10' with '1841'
1838 -1840 1841 0
-1841 1840 0
-1841 -1838 0
c Var 'aux462' order represents '11' with '1842'
-1840 1842 0
c Var 'aux462' direct represents '11' with '1843'
1840 -1842 1843 0
-1843 1842 0
-1843 -1840 0
c Var 'aux462' order represents '12' with '1844'
-1842 1844 0
c Var 'aux462' direct represents '12' with '1845'
1842 -1844 1845 0
-1845 1844 0
-1845 -1842 0
c Var 'aux462' order represents '13' with '1846'
-1844 1846 0
c Var 'aux462' direct represents '13' with '1847'
1844 -1846 1847 0
-1847 1846 0
-1847 -1844 0
c Var 'aux462' order represents '14' with '1848'
-1846 1848 0
c Var 'aux462' direct represents '14' with '1849'
1846 -1848 1849 0
-1849 1848 0
-1849 -1846 0
c Var 'aux462' order represents '15' with '1850'
-1848 1850 0
c Var 'aux462' direct represents '15' with '1851'
1848 -1850 1851 0
-1851 1850 0
-1851 -1848 0
c Var 'aux462' direct represents '16' with '-1850'
1821 1823 1825 1827 1829 1831 1833 1835 1837 1839 1841 1843 1845 1847 1849 1851 -1850 0
c Encoding variable: aux463 with domain: int(0..16) (representing constraint (shift(x_00002_00001, -1) + shift(x_00003_00002, -1)))
c Both direct and order encoding.
c Var 'aux463' order represents '0' with '1852'
c Var 'aux463' direct represents '0' with '1852'
c Var 'aux463' order represents '1' with '1853'
-1852 1853 0
c Var 'aux463' direct represents '1' with '1854'
1852 -1853 1854 0
-1854 1853 0
-1854 -1852 0
c Var 'aux463' order represents '2' with '1855'
-1853 1855 0
c Var 'aux463' direct represents '2' with '1856'
1853 -1855 1856 0
-1856 1855 0
-1856 -1853 0
c Var 'aux463' order represents '3' with '1857'
-1855 1857 0
c Var 'aux463' direct represents '3' with '1858'
1855 -1857 1858 0
-1858 1857 0
-1858 -1855 0
c Var 'aux463' order represents '4' with '1859'
-1857 1859 0
c Var 'aux463' direct represents '4' with '1860'
1857 -1859 1860 0
-1860 1859 0
-1860 -1857 0
c Var 'aux463' order represents '5' with '1861'
-1859 1861 0
c Var 'aux463' direct represents '5' with '1862'
1859 -1861 1862 0
-1862 1861 0
-1862 -1859 0
c Var 'aux463' order represents '6' with '1863'
-1861 1863 0
c Var 'aux463' direct represents '6' with '1864'
1861 -1863 1864 0
-1864 1863 0
-1864 -1861 0
c Var 'aux463' order represents '7' with '1865'
-1863 1865 0
c Var 'aux463' direct represents '7' with '1866'
1863 -1865 1866 0
-1866 1865 0
-1866 -1863 0
c Var 'aux463' order represents '8' with '1867'
-1865 1867 0
c Var 'aux463' direct represents '8' with '1868'
1865 -1867 1868 0
-1868 1867 0
-1868 -1865 0
c Var 'aux463' order represents '9' with '1869'
-1867 1869 0
c Var 'aux463' direct represents '9' with '1870'
1867 -1869 1870 0
-1870 1869 0
-1870 -1867 0
c Var 'aux463' order represents '10' with '1871'
-1869 1871 0
c Var 'aux463' direct represents '10' with '1872'
1869 -1871 1872 0
-1872 1871 0
-1872 -1869 0
c Var 'aux463' order represents '11' with '1873'
-1871 1873 0
c Var 'aux463' direct represents '11' with '1874'
1871 -1873 1874 0
-1874 1873 0
-1874 -1871 0
c Var 'aux463' order represents '12' with '1875'
-1873 1875 0
c Var 'aux463' direct represents '12' with '1876'
1873 -1875 1876 0
-1876 1875 0
-1876 -1873 0
c Var 'aux463' order represents '13' with '1877'
-1875 1877 0
c Var 'aux463' direct represents '13' with '1878'
1875 -1877 1878 0
-1878 1877 0
-1878 -1875 0
c Var 'aux463' order represents '14' with '1879'
-1877 1879 0
c Var 'aux463' direct represents '14' with '1880'
1877 -1879 1880 0
-1880 1879 0
-1880 -1877 0
c Var 'aux463' order represents '15' with '1881'
-1879 1881 0
c Var 'aux463' direct represents '15' with '1882'
1879 -1881 1882 0
-1882 1881 0
-1882 -1879 0
c Var 'aux463' direct represents '16' with '-1881'
1852 1854 1856 1858 1860 1862 1864 1866 1868 1870 1872 1874 1876 1878 1880 1882 -1881 0
c Encoding variable: aux464 with domain: int(0..16) (representing constraint (shift(x_00007_00001, -1) + shift(x_00006_00001, -1)))
c Both direct and order encoding.
c Var 'aux464' order represents '0' with '1883'
c Var 'aux464' direct represents '0' with '1883'
c Var 'aux464' order represents '1' with '1884'
-1883 1884 0
c Var 'aux464' direct represents '1' with '1885'
1883 -1884 1885 0
-1885 1884 0
-1885 -1883 0
c Var 'aux464' order represents '2' with '1886'
-1884 1886 0
c Var 'aux464' direct represents '2' with '1887'
1884 -1886 1887 0
-1887 1886 0
-1887 -1884 0
c Var 'aux464' order represents '3' with '1888'
-1886 1888 0
c Var 'aux464' direct represents '3' with '1889'
1886 -1888 1889 0
-1889 1888 0
-1889 -1886 0
c Var 'aux464' order represents '4' with '1890'
-1888 1890 0
c Var 'aux464' direct represents '4' with '1891'
1888 -1890 1891 0
-1891 1890 0
-1891 -1888 0
c Var 'aux464' order represents '5' with '1892'
-1890 1892 0
c Var 'aux464' direct represents '5' with '1893'
1890 -1892 1893 0
-1893 1892 0
-1893 -1890 0
c Var 'aux464' order represents '6' with '1894'
-1892 1894 0
c Var 'aux464' direct represents '6' with '1895'
1892 -1894 1895 0
-1895 1894 0
-1895 -1892 0
c Var 'aux464' order represents '7' with '1896'
-1894 1896 0
c Var 'aux464' direct represents '7' with '1897'
1894 -1896 1897 0
-1897 1896 0
-1897 -1894 0
c Var 'aux464' order represents '8' with '1898'
-1896 1898 0
c Var 'aux464' direct represents '8' with '1899'
1896 -1898 1899 0
-1899 1898 0
-1899 -1896 0
c Var 'aux464' order represents '9' with '1900'
-1898 1900 0
c Var 'aux464' direct represents '9' with '1901'
1898 -1900 1901 0
-1901 1900 0
-1901 -1898 0
c Var 'aux464' order represents '10' with '1902'
-1900 1902 0
c Var 'aux464' direct represents '10' with '1903'
1900 -1902 1903 0
-1903 1902 0
-1903 -1900 0
c Var 'aux464' order represents '11' with '1904'
-1902 1904 0
c Var 'aux464' direct represents '11' with '1905'
1902 -1904 1905 0
-1905 1904 0
-1905 -1902 0
c Var 'aux464' order represents '12' with '1906'
-1904 1906 0
c Var 'aux464' direct represents '12' with '1907'
1904 -1906 1907 0
-1907 1906 0
-1907 -1904 0
c Var 'aux464' order represents '13' with '1908'
-1906 1908 0
c Var 'aux464' direct represents '13' with '1909'
1906 -1908 1909 0
-1909 1908 0
-1909 -1906 0
c Var 'aux464' order represents '14' with '1910'
-1908 1910 0
c Var 'aux464' direct represents '14' with '1911'
1908 -1910 1911 0
-1911 1910 0
-1911 -1908 0
c Var 'aux464' order represents '15' with '1912'
-1910 1912 0
c Var 'aux464' direct represents '15' with '1913'
1910 -1912 1913 0
-1913 1912 0
-1913 -1910 0
c Var 'aux464' direct represents '16' with '-1912'
1883 1885 1887 1889 1891 1893 1895 1897 1899 1901 1903 1905 1907 1909 1911 1913 -1912 0
c Encoding variable: aux465 with domain: int(0..16) (representing constraint (shift(x_00007_00005, -1) + shift(x_00009_00004, -1)))
c Both direct and order encoding.
c Var 'aux465' order represents '0' with '1914'
c Var 'aux465' direct represents '0' with '1914'
c Var 'aux465' order represents '1' with '1915'
-1914 1915 0
c Var 'aux465' direct represents '1' with '1916'
1914 -1915 1916 0
-1916 1915 0
-1916 -1914 0
c Var 'aux465' order represents '2' with '1917'
-1915 1917 0
c Var 'aux465' direct represents '2' with '1918'
1915 -1917 1918 0
-1918 1917 0
-1918 -1915 0
c Var 'aux465' order represents '3' with '1919'
-1917 1919 0
c Var 'aux465' direct represents '3' with '1920'
1917 -1919 1920 0
-1920 1919 0
-1920 -1917 0
c Var 'aux465' order represents '4' with '1921'
-1919 1921 0
c Var 'aux465' direct represents '4' with '1922'
1919 -1921 1922 0
-1922 1921 0
-1922 -1919 0
c Var 'aux465' order represents '5' with '1923'
-1921 1923 0
c Var 'aux465' direct represents '5' with '1924'
1921 -1923 1924 0
-1924 1923 0
-1924 -1921 0
c Var 'aux465' order represents '6' with '1925'
-1923 1925 0
c Var 'aux465' direct represents '6' with '1926'
1923 -1925 1926 0
-1926 1925 0
-1926 -1923 0
c Var 'aux465' order represents '7' with '1927'
-1925 1927 0
c Var 'aux465' direct represents '7' with '1928'
1925 -1927 1928 0
-1928 1927 0
-1928 -1925 0
c Var 'aux465' order represents '8' with '1929'
-1927 1929 0
c Var 'aux465' direct represents '8' with '1930'
1927 -1929 1930 0
-1930 1929 0
-1930 -1927 0
c Var 'aux465' order represents '9' with '1931'
-1929 1931 0
c Var 'aux465' direct represents '9' with '1932'
1929 -1931 1932 0
-1932 1931 0
-1932 -1929 0
c Var 'aux465' order represents '10' with '1933'
-1931 1933 0
c Var 'aux465' direct represents '10' with '1934'
1931 -1933 1934 0
-1934 1933 0
-1934 -1931 0
c Var 'aux465' order represents '11' with '1935'
-1933 1935 0
c Var 'aux465' direct represents '11' with '1936'
1933 -1935 1936 0
-1936 1935 0
-1936 -1933 0
c Var 'aux465' order represents '12' with '1937'
-1935 1937 0
c Var 'aux465' direct represents '12' with '1938'
1935 -1937 1938 0
-1938 1937 0
-1938 -1935 0
c Var 'aux465' order represents '13' with '1939'
-1937 1939 0
c Var 'aux465' direct represents '13' with '1940'
1937 -1939 1940 0
-1940 1939 0
-1940 -1937 0
c Var 'aux465' order represents '14' with '1941'
-1939 1941 0
c Var 'aux465' direct represents '14' with '1942'
1939 -1941 1942 0
-1942 1941 0
-1942 -1939 0
c Var 'aux465' order represents '15' with '1943'
-1941 1943 0
c Var 'aux465' direct represents '15' with '1944'
1941 -1943 1944 0
-1944 1943 0
-1944 -1941 0
c Var 'aux465' direct represents '16' with '-1943'
1914 1916 1918 1920 1922 1924 1926 1928 1930 1932 1934 1936 1938 1940 1942 1944 -1943 0
c Encoding variable: aux466 with domain: int(0..16) (representing constraint (shift(x_00007_00008, -1) + shift(x_00008_00009, -1)))
c Both direct and order encoding.
c Var 'aux466' order represents '0' with '1945'
c Var 'aux466' direct represents '0' with '1945'
c Var 'aux466' order represents '1' with '1946'
-1945 1946 0
c Var 'aux466' direct represents '1' with '1947'
1945 -1946 1947 0
-1947 1946 0
-1947 -1945 0
c Var 'aux466' order represents '2' with '1948'
-1946 1948 0
c Var 'aux466' direct represents '2' with '1949'
1946 -1948 1949 0
-1949 1948 0
-1949 -1946 0
c Var 'aux466' order represents '3' with '1950'
-1948 1950 0
c Var 'aux466' direct represents '3' with '1951'
1948 -1950 1951 0
-1951 1950 0
-1951 -1948 0
c Var 'aux466' order represents '4' with '1952'
-1950 1952 0
c Var 'aux466' direct represents '4' with '1953'
1950 -1952 1953 0
-1953 1952 0
-1953 -1950 0
c Var 'aux466' order represents '5' with '1954'
-1952 1954 0
c Var 'aux466' direct represents '5' with '1955'
1952 -1954 1955 0
-1955 1954 0
-1955 -1952 0
c Var 'aux466' order represents '6' with '1956'
-1954 1956 0
c Var 'aux466' direct represents '6' with '1957'
1954 -1956 1957 0
-1957 1956 0
-1957 -1954 0
c Var 'aux466' order represents '7' with '1958'
-1956 1958 0
c Var 'aux466' direct represents '7' with '1959'
1956 -1958 1959 0
-1959 1958 0
-1959 -1956 0
c Var 'aux466' order represents '8' with '1960'
-1958 1960 0
c Var 'aux466' direct represents '8' with '1961'
1958 -1960 1961 0
-1961 1960 0
-1961 -1958 0
c Var 'aux466' order represents '9' with '1962'
-1960 1962 0
c Var 'aux466' direct represents '9' with '1963'
1960 -1962 1963 0
-1963 1962 0
-1963 -1960 0
c Var 'aux466' order represents '10' with '1964'
-1962 1964 0
c Var 'aux466' direct represents '10' with '1965'
1962 -1964 1965 0
-1965 1964 0
-1965 -1962 0
c Var 'aux466' order represents '11' with '1966'
-1964 1966 0
c Var 'aux466' direct represents '11' with '1967'
1964 -1966 1967 0
-1967 1966 0
-1967 -1964 0
c Var 'aux466' order represents '12' with '1968'
-1966 1968 0
c Var 'aux466' direct represents '12' with '1969'
1966 -1968 1969 0
-1969 1968 0
-1969 -1966 0
c Var 'aux466' order represents '13' with '1970'
-1968 1970 0
c Var 'aux466' direct represents '13' with '1971'
1968 -1970 1971 0
-1971 1970 0
-1971 -1968 0
c Var 'aux466' order represents '14' with '1972'
-1970 1972 0
c Var 'aux466' direct represents '14' with '1973'
1970 -1972 1973 0
-1973 1972 0
-1973 -1970 0
c Var 'aux466' order represents '15' with '1974'
-1972 1974 0
c Var 'aux466' direct represents '15' with '1975'
1972 -1974 1975 0
-1975 1974 0
-1975 -1972 0
c Var 'aux466' direct represents '16' with '-1974'
1945 1947 1949 1951 1953 1955 1957 1959 1961 1963 1965 1967 1969 1971 1973 1975 -1974 0
c Encoding variable: aux467 with domain: int(0..16) (representing constraint (shift(x_00002_00001, -1) + shift(x_00006_00001, -1)))
c Both direct and order encoding.
c Var 'aux467' order represents '0' with '1976'
c Var 'aux467' direct represents '0' with '1976'
c Var 'aux467' order represents '1' with '1977'
-1976 1977 0
c Var 'aux467' direct represents '1' with '1978'
1976 -1977 1978 0
-1978 1977 0
-1978 -1976 0
c Var 'aux467' order represents '2' with '1979'
-1977 1979 0
c Var 'aux467' direct represents '2' with '1980'
1977 -1979 1980 0
-1980 1979 0
-1980 -1977 0
c Var 'aux467' order represents '3' with '1981'
-1979 1981 0
c Var 'aux467' direct represents '3' with '1982'
1979 -1981 1982 0
-1982 1981 0
-1982 -1979 0
c Var 'aux467' order represents '4' with '1983'
-1981 1983 0
c Var 'aux467' direct represents '4' with '1984'
1981 -1983 1984 0
-1984 1983 0
-1984 -1981 0
c Var 'aux467' order represents '5' with '1985'
-1983 1985 0
c Var 'aux467' direct represents '5' with '1986'
1983 -1985 1986 0
-1986 1985 0
-1986 -1983 0
c Var 'aux467' order represents '6' with '1987'
-1985 1987 0
c Var 'aux467' direct represents '6' with '1988'
1985 -1987 1988 0
-1988 1987 0
-1988 -1985 0
c Var 'aux467' order represents '7' with '1989'
-1987 1989 0
c Var 'aux467' direct represents '7' with '1990'
1987 -1989 1990 0
-1990 1989 0
-1990 -1987 0
c Var 'aux467' order represents '8' with '1991'
-1989 1991 0
c Var 'aux467' direct represents '8' with '1992'
1989 -1991 1992 0
-1992 1991 0
-1992 -1989 0
c Var 'aux467' order represents '9' with '1993'
-1991 1993 0
c Var 'aux467' direct represents '9' with '1994'
1991 -1993 1994 0
-1994 1993 0
-1994 -1991 0
c Var 'aux467' order represents '10' with '1995'
-1993 1995 0
c Var 'aux467' direct represents '10' with '1996'
1993 -1995 1996 0
-1996 1995 0
-1996 -1993 0
c Var 'aux467' order represents '11' with '1997'
-1995 1997 0
c Var 'aux467' direct represents '11' with '1998'
1995 -1997 1998 0
-1998 1997 0
-1998 -1995 0
c Var 'aux467' order represents '12' with '1999'
-1997 1999 0
c Var 'aux467' direct represents '12' with '2000'
1997 -1999 2000 0
-2000 1999 0
-2000 -1997 0
c Var 'aux467' order represents '13' with '2001'
-1999 2001 0
c Var 'aux467' direct represents '13' with '2002'
1999 -2001 2002 0
-2002 2001 0
-2002 -1999 0
c Var 'aux467' order represents '14' with '2003'
-2001 2003 0
c Var 'aux467' direct represents '14' with '2004'
2001 -2003 2004 0
-2004 2003 0
-2004 -2001 0
c Var 'aux467' order represents '15' with '2005'
-2003 2005 0
c Var 'aux467' direct represents '15' with '2006'
2003 -2005 2006 0
-2006 2005 0
-2006 -2003 0
c Var 'aux467' direct represents '16' with '-2005'
1976 1978 1980 1982 1984 1986 1988 1990 1992 1994 1996 1998 2000 2002 2004 2006 -2005 0
c Encoding variable: aux468 with domain: int(0..16) (representing constraint (shift(x_00001_00001, -1) + shift(x_00007_00001, -1)))
c Both direct and order encoding.
c Var 'aux468' order represents '0' with '2007'
c Var 'aux468' direct represents '0' with '2007'
c Var 'aux468' order represents '1' with '2008'
-2007 2008 0
c Var 'aux468' direct represents '1' with '2009'
2007 -2008 2009 0
-2009 2008 0
-2009 -2007 0
c Var 'aux468' order represents '2' with '2010'
-2008 2010 0
c Var 'aux468' direct represents '2' with '2011'
2008 -2010 2011 0
-2011 2010 0
-2011 -2008 0
c Var 'aux468' order represents '3' with '2012'
-2010 2012 0
c Var 'aux468' direct represents '3' with '2013'
2010 -2012 2013 0
-2013 2012 0
-2013 -2010 0
c Var 'aux468' order represents '4' with '2014'
-2012 2014 0
c Var 'aux468' direct represents '4' with '2015'
2012 -2014 2015 0
-2015 2014 0
-2015 -2012 0
c Var 'aux468' order represents '5' with '2016'
-2014 2016 0
c Var 'aux468' direct represents '5' with '2017'
2014 -2016 2017 0
-2017 2016 0
-2017 -2014 0
c Var 'aux468' order represents '6' with '2018'
-2016 2018 0
c Var 'aux468' direct represents '6' with '2019'
2016 -2018 2019 0
-2019 2018 0
-2019 -2016 0
c Var 'aux468' order represents '7' with '2020'
-2018 2020 0
c Var 'aux468' direct represents '7' with '2021'
2018 -2020 2021 0
-2021 2020 0
-2021 -2018 0
c Var 'aux468' order represents '8' with '2022'
-2020 2022 0
c Var 'aux468' direct represents '8' with '2023'
2020 -2022 2023 0
-2023 2022 0
-2023 -2020 0
c Var 'aux468' order represents '9' with '2024'
-2022 2024 0
c Var 'aux468' direct represents '9' with '2025'
2022 -2024 2025 0
-2025 2024 0
-2025 -2022 0
c Var 'aux468' order represents '10' with '2026'
-2024 2026 0
c Var 'aux468' direct represents '10' with '2027'
2024 -2026 2027 0
-2027 2026 0
-2027 -2024 0
c Var 'aux468' order represents '11' with '2028'
-2026 2028 0
c Var 'aux468' direct represents '11' with '2029'
2026 -2028 2029 0
-2029 2028 0
-2029 -2026 0
c Var 'aux468' order represents '12' with '2030'
-2028 2030 0
c Var 'aux468' direct represents '12' with '2031'
2028 -2030 2031 0
-2031 2030 0
-2031 -2028 0
c Var 'aux468' order represents '13' with '2032'
-2030 2032 0
c Var 'aux468' direct represents '13' with '2033'
2030 -2032 2033 0
-2033 2032 0
-2033 -2030 0
c Var 'aux468' order represents '14' with '2034'
-2032 2034 0
c Var 'aux468' direct represents '14' with '2035'
2032 -2034 2035 0
-2035 2034 0
-2035 -2032 0
c Var 'aux468' order represents '15' with '2036'
-2034 2036 0
c Var 'aux468' direct represents '15' with '2037'
2034 -2036 2037 0
-2037 2036 0
-2037 -2034 0
c Var 'aux468' direct represents '16' with '-2036'
2007 2009 2011 2013 2015 2017 2019 2021 2023 2025 2027 2029 2031 2033 2035 2037 -2036 0
c Encoding variable: aux469 with domain: int(0..16) (representing constraint (shift(x_00005_00001, -1) + shift(x_00008_00001, -1)))
c Both direct and order encoding.
c Var 'aux469' order represents '0' with '2038'
c Var 'aux469' direct represents '0' with '2038'
c Var 'aux469' order represents '1' with '2039'
-2038 2039 0
c Var 'aux469' direct represents '1' with '2040'
2038 -2039 2040 0
-2040 2039 0
-2040 -2038 0
c Var 'aux469' order represents '2' with '2041'
-2039 2041 0
c Var 'aux469' direct represents '2' with '2042'
2039 -2041 2042 0
-2042 2041 0
-2042 -2039 0
c Var 'aux469' order represents '3' with '2043'
-2041 2043 0
c Var 'aux469' direct represents '3' with '2044'
2041 -2043 2044 0
-2044 2043 0
-2044 -2041 0
c Var 'aux469' order represents '4' with '2045'
-2043 2045 0
c Var 'aux469' direct represents '4' with '2046'
2043 -2045 2046 0
-2046 2045 0
-2046 -2043 0
c Var 'aux469' order represents '5' with '2047'
-2045 2047 0
c Var 'aux469' direct represents '5' with '2048'
2045 -2047 2048 0
-2048 2047 0
-2048 -2045 0
c Var 'aux469' order represents '6' with '2049'
-2047 2049 0
c Var 'aux469' direct represents '6' with '2050'
2047 -2049 2050 0
-2050 2049 0
-2050 -2047 0
c Var 'aux469' order represents '7' with '2051'
-2049 2051 0
c Var 'aux469' direct represents '7' with '2052'
2049 -2051 2052 0
-2052 2051 0
-2052 -2049 0
c Var 'aux469' order represents '8' with '2053'
-2051 2053 0
c Var 'aux469' direct represents '8' with '2054'
2051 -2053 2054 0
-2054 2053 0
-2054 -2051 0
c Var 'aux469' order represents '9' with '2055'
-2053 2055 0
c Var 'aux469' direct represents '9' with '2056'
2053 -2055 2056 0
-2056 2055 0
-2056 -2053 0
c Var 'aux469' order represents '10' with '2057'
-2055 2057 0
c Var 'aux469' direct represents '10' with '2058'
2055 -2057 2058 0
-2058 2057 0
-2058 -2055 0
c Var 'aux469' order represents '11' with '2059'
-2057 2059 0
c Var 'aux469' direct represents '11' with '2060'
2057 -2059 2060 0
-2060 2059 0
-2060 -2057 0
c Var 'aux469' order represents '12' with '2061'
-2059 2061 0
c Var 'aux469' direct represents '12' with '2062'
2059 -2061 2062 0
-2062 2061 0
-2062 -2059 0
c Var 'aux469' order represents '13' with '2063'
-2061 2063 0
c Var 'aux469' direct represents '13' with '2064'
2061 -2063 2064 0
-2064 2063 0
-2064 -2061 0
c Var 'aux469' order represents '14' with '2065'
-2063 2065 0
c Var 'aux469' direct represents '14' with '2066'
2063 -2065 2066 0
-2066 2065 0
-2066 -2063 0
c Var 'aux469' order represents '15' with '2067'
-2065 2067 0
c Var 'aux469' direct represents '15' with '2068'
2065 -2067 2068 0
-2068 2067 0
-2068 -2065 0
c Var 'aux469' direct represents '16' with '-2067'
2038 2040 2042 2044 2046 2048 2050 2052 2054 2056 2058 2060 2062 2064 2066 2068 -2067 0
c Encoding variable: aux470 with domain: int(0..16) (representing constraint (shift(x_00009_00001, -1) + shift(x_00004_00001, -1)))
c Both direct and order encoding.
c Var 'aux470' order represents '0' with '2069'
c Var 'aux470' direct represents '0' with '2069'
c Var 'aux470' order represents '1' with '2070'
-2069 2070 0
c Var 'aux470' direct represents '1' with '2071'
2069 -2070 2071 0
-2071 2070 0
-2071 -2069 0
c Var 'aux470' order represents '2' with '2072'
-2070 2072 0
c Var 'aux470' direct represents '2' with '2073'
2070 -2072 2073 0
-2073 2072 0
-2073 -2070 0
c Var 'aux470' order represents '3' with '2074'
-2072 2074 0
c Var 'aux470' direct represents '3' with '2075'
2072 -2074 2075 0
-2075 2074 0
-2075 -2072 0
c Var 'aux470' order represents '4' with '2076'
-2074 2076 0
c Var 'aux470' direct represents '4' with '2077'
2074 -2076 2077 0
-2077 2076 0
-2077 -2074 0
c Var 'aux470' order represents '5' with '2078'
-2076 2078 0
c Var 'aux470' direct represents '5' with '2079'
2076 -2078 2079 0
-2079 2078 0
-2079 -2076 0
c Var 'aux470' order represents '6' with '2080'
-2078 2080 0
c Var 'aux470' direct represents '6' with '2081'
2078 -2080 2081 0
-2081 2080 0
-2081 -2078 0
c Var 'aux470' order represents '7' with '2082'
-2080 2082 0
c Var 'aux470' direct represents '7' with '2083'
2080 -2082 2083 0
-2083 2082 0
-2083 -2080 0
c Var 'aux470' order represents '8' with '2084'
-2082 2084 0
c Var 'aux470' direct represents '8' with '2085'
2082 -2084 2085 0
-2085 2084 0
-2085 -2082 0
c Var 'aux470' order represents '9' with '2086'
-2084 2086 0
c Var 'aux470' direct represents '9' with '2087'
2084 -2086 2087 0
-2087 2086 0
-2087 -2084 0
c Var 'aux470' order represents '10' with '2088'
-2086 2088 0
c Var 'aux470' direct represents '10' with '2089'
2086 -2088 2089 0
-2089 2088 0
-2089 -2086 0
c Var 'aux470' order represents '11' with '2090'
-2088 2090 0
c Var 'aux470' direct represents '11' with '2091'
2088 -2090 2091 0
-2091 2090 0
-2091 -2088 0
c Var 'aux470' order represents '12' with '2092'
-2090 2092 0
c Var 'aux470' direct represents '12' with '2093'
2090 -2092 2093 0
-2093 2092 0
-2093 -2090 0
c Var 'aux470' order represents '13' with '2094'
-2092 2094 0
c Var 'aux470' direct represents '13' with '2095'
2092 -2094 2095 0
-2095 2094 0
-2095 -2092 0
c Var 'aux470' order represents '14' with '2096'
-2094 2096 0
c Var 'aux470' direct represents '14' with '2097'
2094 -2096 2097 0
-2097 2096 0
-2097 -2094 0
c Var 'aux470' order represents '15' with '2098'
-2096 2098 0
c Var 'aux470' direct represents '15' with '2099'
2096 -2098 2099 0
-2099 2098 0
-2099 -2096 0
c Var 'aux470' direct represents '16' with '-2098'
2069 2071 2073 2075 2077 2079 2081 2083 2085 2087 2089 2091 2093 2095 2097 2099 -2098 0
c Encoding variable: aux471 with domain: int(0..24) (representing constraint (shift(x_00003_00001, -1) + aux470))
c Both direct and order encoding.
c Var 'aux471' order represents '0' with '2100'
c Var 'aux471' direct represents '0' with '2100'
c Var 'aux471' order represents '1' with '2101'
-2100 2101 0
c Var 'aux471' direct represents '1' with '2102'
2100 -2101 2102 0
-2102 2101 0
-2102 -2100 0
c Var 'aux471' order represents '2' with '2103'
-2101 2103 0
c Var 'aux471' direct represents '2' with '2104'
2101 -2103 2104 0
-2104 2103 0
-2104 -2101 0
c Var 'aux471' order represents '3' with '2105'
-2103 2105 0
c Var 'aux471' direct represents '3' with '2106'
2103 -2105 2106 0
-2106 2105 0
-2106 -2103 0
c Var 'aux471' order represents '4' with '2107'
-2105 2107 0
c Var 'aux471' direct represents '4' with '2108'
2105 -2107 2108 0
-2108 2107 0
-2108 -2105 0
c Var 'aux471' order represents '5' with '2109'
-2107 2109 0
c Var 'aux471' direct represents '5' with '2110'
2107 -2109 2110 0
-2110 2109 0
-2110 -2107 0
c Var 'aux471' order represents '6' with '2111'
-2109 2111 0
c Var 'aux471' direct represents '6' with '2112'
2109 -2111 2112 0
-2112 2111 0
-2112 -2109 0
c Var 'aux471' order represents '7' with '2113'
-2111 2113 0
c Var 'aux471' direct represents '7' with '2114'
2111 -2113 2114 0
-2114 2113 0
-2114 -2111 0
c Var 'aux471' order represents '8' with '2115'
-2113 2115 0
c Var 'aux471' direct represents '8' with '2116'
2113 -2115 2116 0
-2116 2115 0
-2116 -2113 0
c Var 'aux471' order represents '9' with '2117'
-2115 2117 0
c Var 'aux471' direct represents '9' with '2118'
2115 -2117 2118 0
-2118 2117 0
-2118 -2115 0
c Var 'aux471' order represents '10' with '2119'
-2117 2119 0
c Var 'aux471' direct represents '10' with '2120'
2117 -2119 2120 0
-2120 2119 0
-2120 -2117 0
c Var 'aux471' order represents '11' with '2121'
-2119 2121 0
c Var 'aux471' direct represents '11' with '2122'
2119 -2121 2122 0
-2122 2121 0
-2122 -2119 0
c Var 'aux471' order represents '12' with '2123'
-2121 2123 0
c Var 'aux471' direct represents '12' with '2124'
2121 -2123 2124 0
-2124 2123 0
-2124 -2121 0
c Var 'aux471' order represents '13' with '2125'
-2123 2125 0
c Var 'aux471' direct represents '13' with '2126'
2123 -2125 2126 0
-2126 2125 0
-2126 -2123 0
c Var 'aux471' order represents '14' with '2127'
-2125 2127 0
c Var 'aux471' direct represents '14' with '2128'
2125 -2127 2128 0
-2128 2127 0
-2128 -2125 0
c Var 'aux471' order represents '15' with '2129'
-2127 2129 0
c Var 'aux471' direct represents '15' with '2130'
2127 -2129 2130 0
-2130 2129 0
-2130 -2127 0
c Var 'aux471' order represents '16' with '2131'
-2129 2131 0
c Var 'aux471' direct represents '16' with '2132'
2129 -2131 2132 0
-2132 2131 0
-2132 -2129 0
c Var 'aux471' order represents '17' with '2133'
-2131 2133 0
c Var 'aux471' direct represents '17' with '2134'
2131 -2133 2134 0
-2134 2133 0
-2134 -2131 0
c Var 'aux471' order represents '18' with '2135'
-2133 2135 0
c Var 'aux471' direct represents '18' with '2136'
2133 -2135 2136 0
-2136 2135 0
-2136 -2133 0
c Var 'aux471' order represents '19' with '2137'
-2135 2137 0
c Var 'aux471' direct represents '19' with '2138'
2135 -2137 2138 0
-2138 2137 0
-2138 -2135 0
c Var 'aux471' order represents '20' with '2139'
-2137 2139 0
c Var 'aux471' direct represents '20' with '2140'
2137 -2139 2140 0
-2140 2139 0
-2140 -2137 0
c Var 'aux471' order represents '21' with '2141'
-2139 2141 0
c Var 'aux471' direct represents '21' with '2142'
2139 -2141 2142 0
-2142 2141 0
-2142 -2139 0
c Var 'aux471' order represents '22' with '2143'
-2141 2143 0
c Var 'aux471' direct represents '22' with '2144'
2141 -2143 2144 0
-2144 2143 0
-2144 -2141 0
c Var 'aux471' order represents '23' with '2145'
-2143 2145 0
c Var 'aux471' direct represents '23' with '2146'
2143 -2145 2146 0
-2146 2145 0
-2146 -2143 0
c Var 'aux471' direct represents '24' with '-2145'
2100 2102 2104 2106 2108 2110 2112 2114 2116 2118 2120 2122 2124 2126 2128 2130 2132 2134 2136 2138 2140 2142 2144 2146 -2145 0
c Encoding variable: aux472 with domain: int(0..32) (representing constraint (aux467 + aux469))
c Both direct and order encoding.
c Var 'aux472' order represents '0' with '2147'
c Var 'aux472' direct represents '0' with '2147'
c Var 'aux472' order represents '1' with '2148'
-2147 2148 0
c Var 'aux472' direct represents '1' with '2149'
2147 -2148 2149 0
-2149 2148 0
-2149 -2147 0
c Var 'aux472' order represents '2' with '2150'
-2148 2150 0
c Var 'aux472' direct represents '2' with '2151'
2148 -2150 2151 0
-2151 2150 0
-2151 -2148 0
c Var 'aux472' order represents '3' with '2152'
-2150 2152 0
c Var 'aux472' direct represents '3' with '2153'
2150 -2152 2153 0
-2153 2152 0
-2153 -2150 0
c Var 'aux472' order represents '4' with '2154'
-2152 2154 0
c Var 'aux472' direct represents '4' with '2155'
2152 -2154 2155 0
-2155 2154 0
-2155 -2152 0
c Var 'aux472' order represents '5' with '2156'
-2154 2156 0
c Var 'aux472' direct represents '5' with '2157'
2154 -2156 2157 0
-2157 2156 0
-2157 -2154 0
c Var 'aux472' order represents '6' with '2158'
-2156 2158 0
c Var 'aux472' direct represents '6' with '2159'
2156 -2158 2159 0
-2159 2158 0
-2159 -2156 0
c Var 'aux472' order represents '7' with '2160'
-2158 2160 0
c Var 'aux472' direct represents '7' with '2161'
2158 -2160 2161 0
-2161 2160 0
-2161 -2158 0
c Var 'aux472' order represents '8' with '2162'
-2160 2162 0
c Var 'aux472' direct represents '8' with '2163'
2160 -2162 2163 0
-2163 2162 0
-2163 -2160 0
c Var 'aux472' order represents '9' with '2164'
-2162 2164 0
c Var 'aux472' direct represents '9' with '2165'
2162 -2164 2165 0
-2165 2164 0
-2165 -2162 0
c Var 'aux472' order represents '10' with '2166'
-2164 2166 0
c Var 'aux472' direct represents '10' with '2167'
2164 -2166 2167 0
-2167 2166 0
-2167 -2164 0
c Var 'aux472' order represents '11' with '2168'
-2166 2168 0
c Var 'aux472' direct represents '11' with '2169'
2166 -2168 2169 0
-2169 2168 0
-2169 -2166 0
c Var 'aux472' order represents '12' with '2170'
-2168 2170 0
c Var 'aux472' direct represents '12' with '2171'
2168 -2170 2171 0
-2171 2170 0
-2171 -2168 0
c Var 'aux472' order represents '13' with '2172'
-2170 2172 0
c Var 'aux472' direct represents '13' with '2173'
2170 -2172 2173 0
-2173 2172 0
-2173 -2170 0
c Var 'aux472' order represents '14' with '2174'
-2172 2174 0
c Var 'aux472' direct represents '14' with '2175'
2172 -2174 2175 0
-2175 2174 0
-2175 -2172 0
c Var 'aux472' order represents '15' with '2176'
-2174 2176 0
c Var 'aux472' direct represents '15' with '2177'
2174 -2176 2177 0
-2177 2176 0
-2177 -2174 0
c Var 'aux472' order represents '16' with '2178'
-2176 2178 0
c Var 'aux472' direct represents '16' with '2179'
2176 -2178 2179 0
-2179 2178 0
-2179 -2176 0
c Var 'aux472' order represents '17' with '2180'
-2178 2180 0
c Var 'aux472' direct represents '17' with '2181'
2178 -2180 2181 0
-2181 2180 0
-2181 -2178 0
c Var 'aux472' order represents '18' with '2182'
-2180 2182 0
c Var 'aux472' direct represents '18' with '2183'
2180 -2182 2183 0
-2183 2182 0
-2183 -2180 0
c Var 'aux472' order represents '19' with '2184'
-2182 2184 0
c Var 'aux472' direct represents '19' with '2185'
2182 -2184 2185 0
-2185 2184 0
-2185 -2182 0
c Var 'aux472' order represents '20' with '2186'
-2184 2186 0
c Var 'aux472' direct represents '20' with '2187'
2184 -2186 2187 0
-2187 2186 0
-2187 -2184 0
c Var 'aux472' order represents '21' with '2188'
-2186 2188 0
c Var 'aux472' direct represents '21' with '2189'
2186 -2188 2189 0
-2189 2188 0
-2189 -2186 0
c Var 'aux472' order represents '22' with '2190'
-2188 2190 0
c Var 'aux472' direct represents '22' with '2191'
2188 -2190 2191 0
-2191 2190 0
-2191 -2188 0
c Var 'aux472' order represents '23' with '2192'
-2190 2192 0
c Var 'aux472' direct represents '23' with '2193'
2190 -2192 2193 0
-2193 2192 0
-2193 -2190 0
c Var 'aux472' order represents '24' with '2194'
-2192 2194 0
c Var 'aux472' direct represents '24' with '2195'
2192 -2194 2195 0
-2195 2194 0
-2195 -2192 0
c Var 'aux472' order represents '25' with '2196'
-2194 2196 0
c Var 'aux472' direct represents '25' with '2197'
2194 -2196 2197 0
-2197 2196 0
-2197 -2194 0
c Var 'aux472' order represents '26' with '2198'
-2196 2198 0
c Var 'aux472' direct represents '26' with '2199'
2196 -2198 2199 0
-2199 2198 0
-2199 -2196 0
c Var 'aux472' order represents '27' with '2200'
-2198 2200 0
c Var 'aux472' direct represents '27' with '2201'
2198 -2200 2201 0
-2201 2200 0
-2201 -2198 0
c Var 'aux472' order represents '28' with '2202'
-2200 2202 0
c Var 'aux472' direct represents '28' with '2203'
2200 -2202 2203 0
-2203 2202 0
-2203 -2200 0
c Var 'aux472' order represents '29' with '2204'
-2202 2204 0
c Var 'aux472' direct represents '29' with '2205'
2202 -2204 2205 0
-2205 2204 0
-2205 -2202 0
c Var 'aux472' order represents '30' with '2206'
-2204 2206 0
c Var 'aux472' direct represents '30' with '2207'
2204 -2206 2207 0
-2207 2206 0
-2207 -2204 0
c Var 'aux472' order represents '31' with '2208'
-2206 2208 0
c Var 'aux472' direct represents '31' with '2209'
2206 -2208 2209 0
-2209 2208 0
-2209 -2206 0
c Var 'aux472' direct represents '32' with '-2208'
2147 2149 2151 2153 2155 2157 2159 2161 2163 2165 2167 2169 2171 2173 2175 2177 2179 2181 2183 2185 2187 2189 2191 2193 2195 2197 2199 2201 2203 2205 2207 2209 -2208 0
c Encoding variable: aux473 with domain: int(0..16) (representing constraint (shift(x_00002_00002, -1) + shift(x_00006_00002, -1)))
c Both direct and order encoding.
c Var 'aux473' order represents '0' with '2210'
c Var 'aux473' direct represents '0' with '2210'
c Var 'aux473' order represents '1' with '2211'
-2210 2211 0
c Var 'aux473' direct represents '1' with '2212'
2210 -2211 2212 0
-2212 2211 0
-2212 -2210 0
c Var 'aux473' order represents '2' with '2213'
-2211 2213 0
c Var 'aux473' direct represents '2' with '2214'
2211 -2213 2214 0
-2214 2213 0
-2214 -2211 0
c Var 'aux473' order represents '3' with '2215'
-2213 2215 0
c Var 'aux473' direct represents '3' with '2216'
2213 -2215 2216 0
-2216 2215 0
-2216 -2213 0
c Var 'aux473' order represents '4' with '2217'
-2215 2217 0
c Var 'aux473' direct represents '4' with '2218'
2215 -2217 2218 0
-2218 2217 0
-2218 -2215 0
c Var 'aux473' order represents '5' with '2219'
-2217 2219 0
c Var 'aux473' direct represents '5' with '2220'
2217 -2219 2220 0
-2220 2219 0
-2220 -2217 0
c Var 'aux473' order represents '6' with '2221'
-2219 2221 0
c Var 'aux473' direct represents '6' with '2222'
2219 -2221 2222 0
-2222 2221 0
-2222 -2219 0
c Var 'aux473' order represents '7' with '2223'
-2221 2223 0
c Var 'aux473' direct represents '7' with '2224'
2221 -2223 2224 0
-2224 2223 0
-2224 -2221 0
c Var 'aux473' order represents '8' with '2225'
-2223 2225 0
c Var 'aux473' direct represents '8' with '2226'
2223 -2225 2226 0
-2226 2225 0
-2226 -2223 0
c Var 'aux473' order represents '9' with '2227'
-2225 2227 0
c Var 'aux473' direct represents '9' with '2228'
2225 -2227 2228 0
-2228 2227 0
-2228 -2225 0
c Var 'aux473' order represents '10' with '2229'
-2227 2229 0
c Var 'aux473' direct represents '10' with '2230'
2227 -2229 2230 0
-2230 2229 0
-2230 -2227 0
c Var 'aux473' order represents '11' with '2231'
-2229 2231 0
c Var 'aux473' direct represents '11' with '2232'
2229 -2231 2232 0
-2232 2231 0
-2232 -2229 0
c Var 'aux473' order represents '12' with '2233'
-2231 2233 0
c Var 'aux473' direct represents '12' with '2234'
2231 -2233 2234 0
-2234 2233 0
-2234 -2231 0
c Var 'aux473' order represents '13' with '2235'
-2233 2235 0
c Var 'aux473' direct represents '13' with '2236'
2233 -2235 2236 0
-2236 2235 0
-2236 -2233 0
c Var 'aux473' order represents '14' with '2237'
-2235 2237 0
c Var 'aux473' direct represents '14' with '2238'
2235 -2237 2238 0
-2238 2237 0
-2238 -2235 0
c Var 'aux473' order represents '15' with '2239'
-2237 2239 0
c Var 'aux473' direct represents '15' with '2240'
2237 -2239 2240 0
-2240 2239 0
-2240 -2237 0
c Var 'aux473' direct represents '16' with '-2239'
2210 2212 2214 2216 2218 2220 2222 2224 2226 2228 2230 2232 2234 2236 2238 2240 -2239 0
c Encoding variable: aux474 with domain: int(0..16) (representing constraint (shift(x_00001_00002, -1) + shift(x_00007_00002, -1)))
c Both direct and order encoding.
c Var 'aux474' order represents '0' with '2241'
c Var 'aux474' direct represents '0' with '2241'
c Var 'aux474' order represents '1' with '2242'
-2241 2242 0
c Var 'aux474' direct represents '1' with '2243'
2241 -2242 2243 0
-2243 2242 0
-2243 -2241 0
c Var 'aux474' order represents '2' with '2244'
-2242 2244 0
c Var 'aux474' direct represents '2' with '2245'
2242 -2244 2245 0
-2245 2244 0
-2245 -2242 0
c Var 'aux474' order represents '3' with '2246'
-2244 2246 0
c Var 'aux474' direct represents '3' with '2247'
2244 -2246 2247 0
-2247 2246 0
-2247 -2244 0
c Var 'aux474' order represents '4' with '2248'
-2246 2248 0
c Var 'aux474' direct represents '4' with '2249'
2246 -2248 2249 0
-2249 2248 0
-2249 -2246 0
c Var 'aux474' order represents '5' with '2250'
-2248 2250 0
c Var 'aux474' direct represents '5' with '2251'
2248 -2250 2251 0
-2251 2250 0
-2251 -2248 0
c Var 'aux474' order represents '6' with '2252'
-2250 2252 0
c Var 'aux474' direct represents '6' with '2253'
2250 -2252 2253 0
-2253 2252 0
-2253 -2250 0
c Var 'aux474' order represents '7' with '2254'
-2252 2254 0
c Var 'aux474' direct represents '7' with '2255'
2252 -2254 2255 0
-2255 2254 0
-2255 -2252 0
c Var 'aux474' order represents '8' with '2256'
-2254 2256 0
c Var 'aux474' direct represents '8' with '2257'
2254 -2256 2257 0
-2257 2256 0
-2257 -2254 0
c Var 'aux474' order represents '9' with '2258'
-2256 2258 0
c Var 'aux474' direct represents '9' with '2259'
2256 -2258 2259 0
-2259 2258 0
-2259 -2256 0
c Var 'aux474' order represents '10' with '2260'
-2258 2260 0
c Var 'aux474' direct represents '10' with '2261'
2258 -2260 2261 0
-2261 2260 0
-2261 -2258 0
c Var 'aux474' order represents '11' with '2262'
-2260 2262 0
c Var 'aux474' direct represents '11' with '2263'
2260 -2262 2263 0
-2263 2262 0
-2263 -2260 0
c Var 'aux474' order represents '12' with '2264'
-2262 2264 0
c Var 'aux474' direct represents '12' with '2265'
2262 -2264 2265 0
-2265 2264 0
-2265 -2262 0
c Var 'aux474' order represents '13' with '2266'
-2264 2266 0
c Var 'aux474' direct represents '13' with '2267'
2264 -2266 2267 0
-2267 2266 0
-2267 -2264 0
c Var 'aux474' order represents '14' with '2268'
-2266 2268 0
c Var 'aux474' direct represents '14' with '2269'
2266 -2268 2269 0
-2269 2268 0
-2269 -2266 0
c Var 'aux474' order represents '15' with '2270'
-2268 2270 0
c Var 'aux474' direct represents '15' with '2271'
2268 -2270 2271 0
-2271 2270 0
-2271 -2268 0
c Var 'aux474' direct represents '16' with '-2270'
2241 2243 2245 2247 2249 2251 2253 2255 2257 2259 2261 2263 2265 2267 2269 2271 -2270 0
c Encoding variable: aux475 with domain: int(0..16) (representing constraint (shift(x_00005_00002, -1) + shift(x_00008_00002, -1)))
c Both direct and order encoding.
c Var 'aux475' order represents '0' with '2272'
c Var 'aux475' direct represents '0' with '2272'
c Var 'aux475' order represents '1' with '2273'
-2272 2273 0
c Var 'aux475' direct represents '1' with '2274'
2272 -2273 2274 0
-2274 2273 0
-2274 -2272 0
c Var 'aux475' order represents '2' with '2275'
-2273 2275 0
c Var 'aux475' direct represents '2' with '2276'
2273 -2275 2276 0
-2276 2275 0
-2276 -2273 0
c Var 'aux475' order represents '3' with '2277'
-2275 2277 0
c Var 'aux475' direct represents '3' with '2278'
2275 -2277 2278 0
-2278 2277 0
-2278 -2275 0
c Var 'aux475' order represents '4' with '2279'
-2277 2279 0
c Var 'aux475' direct represents '4' with '2280'
2277 -2279 2280 0
-2280 2279 0
-2280 -2277 0
c Var 'aux475' order represents '5' with '2281'
-2279 2281 0
c Var 'aux475' direct represents '5' with '2282'
2279 -2281 2282 0
-2282 2281 0
-2282 -2279 0
c Var 'aux475' order represents '6' with '2283'
-2281 2283 0
c Var 'aux475' direct represents '6' with '2284'
2281 -2283 2284 0
-2284 2283 0
-2284 -2281 0
c Var 'aux475' order represents '7' with '2285'
-2283 2285 0
c Var 'aux475' direct represents '7' with '2286'
2283 -2285 2286 0
-2286 2285 0
-2286 -2283 0
c Var 'aux475' order represents '8' with '2287'
-2285 2287 0
c Var 'aux475' direct represents '8' with '2288'
2285 -2287 2288 0
-2288 2287 0
-2288 -2285 0
c Var 'aux475' order represents '9' with '2289'
-2287 2289 0
c Var 'aux475' direct represents '9' with '2290'
2287 -2289 2290 0
-2290 2289 0
-2290 -2287 0
c Var 'aux475' order represents '10' with '2291'
-2289 2291 0
c Var 'aux475' direct represents '10' with '2292'
2289 -2291 2292 0
-2292 2291 0
-2292 -2289 0
c Var 'aux475' order represents '11' with '2293'
-2291 2293 0
c Var 'aux475' direct represents '11' with '2294'
2291 -2293 2294 0
-2294 2293 0
-2294 -2291 0
c Var 'aux475' order represents '12' with '2295'
-2293 2295 0
c Var 'aux475' direct represents '12' with '2296'
2293 -2295 2296 0
-2296 2295 0
-2296 -2293 0
c Var 'aux475' order represents '13' with '2297'
-2295 2297 0
c Var 'aux475' direct represents '13' with '2298'
2295 -2297 2298 0
-2298 2297 0
-2298 -2295 0
c Var 'aux475' order represents '14' with '2299'
-2297 2299 0
c Var 'aux475' direct represents '14' with '2300'
2297 -2299 2300 0
-2300 2299 0
-2300 -2297 0
c Var 'aux475' order represents '15' with '2301'
-2299 2301 0
c Var 'aux475' direct represents '15' with '2302'
2299 -2301 2302 0
-2302 2301 0
-2302 -2299 0
c Var 'aux475' direct represents '16' with '-2301'
2272 2274 2276 2278 2280 2282 2284 2286 2288 2290 2292 2294 2296 2298 2300 2302 -2301 0
c Encoding variable: aux476 with domain: int(0..16) (representing constraint (shift(x_00009_00002, -1) + shift(x_00004_00002, -1)))
c Both direct and order encoding.
c Var 'aux476' order represents '0' with '2303'
c Var 'aux476' direct represents '0' with '2303'
c Var 'aux476' order represents '1' with '2304'
-2303 2304 0
c Var 'aux476' direct represents '1' with '2305'
2303 -2304 2305 0
-2305 2304 0
-2305 -2303 0
c Var 'aux476' order represents '2' with '2306'
-2304 2306 0
c Var 'aux476' direct represents '2' with '2307'
2304 -2306 2307 0
-2307 2306 0
-2307 -2304 0
c Var 'aux476' order represents '3' with '2308'
-2306 2308 0
c Var 'aux476' direct represents '3' with '2309'
2306 -2308 2309 0
-2309 2308 0
-2309 -2306 0
c Var 'aux476' order represents '4' with '2310'
-2308 2310 0
c Var 'aux476' direct represents '4' with '2311'
2308 -2310 2311 0
-2311 2310 0
-2311 -2308 0
c Var 'aux476' order represents '5' with '2312'
-2310 2312 0
c Var 'aux476' direct represents '5' with '2313'
2310 -2312 2313 0
-2313 2312 0
-2313 -2310 0
c Var 'aux476' order represents '6' with '2314'
-2312 2314 0
c Var 'aux476' direct represents '6' with '2315'
2312 -2314 2315 0
-2315 2314 0
-2315 -2312 0
c Var 'aux476' order represents '7' with '2316'
-2314 2316 0
c Var 'aux476' direct represents '7' with '2317'
2314 -2316 2317 0
-2317 2316 0
-2317 -2314 0
c Var 'aux476' order represents '8' with '2318'
-2316 2318 0
c Var 'aux476' direct represents '8' with '2319'
2316 -2318 2319 0
-2319 2318 0
-2319 -2316 0
c Var 'aux476' order represents '9' with '2320'
-2318 2320 0
c Var 'aux476' direct represents '9' with '2321'
2318 -2320 2321 0
-2321 2320 0
-2321 -2318 0
c Var 'aux476' order represents '10' with '2322'
-2320 2322 0
c Var 'aux476' direct represents '10' with '2323'
2320 -2322 2323 0
-2323 2322 0
-2323 -2320 0
c Var 'aux476' order represents '11' with '2324'
-2322 2324 0
c Var 'aux476' direct represents '11' with '2325'
2322 -2324 2325 0
-2325 2324 0
-2325 -2322 0
c Var 'aux476' order represents '12' with '2326'
-2324 2326 0
c Var 'aux476' direct represents '12' with '2327'
2324 -2326 2327 0
-2327 2326 0
-2327 -2324 0
c Var 'aux476' order represents '13' with '2328'
-2326 2328 0
c Var 'aux476' direct represents '13' with '2329'
2326 -2328 2329 0
-2329 2328 0
-2329 -2326 0
c Var 'aux476' order represents '14' with '2330'
-2328 2330 0
c Var 'aux476' direct represents '14' with '2331'
2328 -2330 2331 0
-2331 2330 0
-2331 -2328 0
c Var 'aux476' order represents '15' with '2332'
-2330 2332 0
c Var 'aux476' direct represents '15' with '2333'
2330 -2332 2333 0
-2333 2332 0
-2333 -2330 0
c Var 'aux476' direct represents '16' with '-2332'
2303 2305 2307 2309 2311 2313 2315 2317 2319 2321 2323 2325 2327 2329 2331 2333 -2332 0
c Encoding variable: aux477 with domain: int(0..24) (representing constraint (shift(x_00003_00002, -1) + aux476))
c Both direct and order encoding.
c Var 'aux477' order represents '0' with '2334'
c Var 'aux477' direct represents '0' with '2334'
c Var 'aux477' order represents '1' with '2335'
-2334 2335 0
c Var 'aux477' direct represents '1' with '2336'
2334 -2335 2336 0
-2336 2335 0
-2336 -2334 0
c Var 'aux477' order represents '2' with '2337'
-2335 2337 0
c Var 'aux477' direct represents '2' with '2338'
2335 -2337 2338 0
-2338 2337 0
-2338 -2335 0
c Var 'aux477' order represents '3' with '2339'
-2337 2339 0
c Var 'aux477' direct represents '3' with '2340'
2337 -2339 2340 0
-2340 2339 0
-2340 -2337 0
c Var 'aux477' order represents '4' with '2341'
-2339 2341 0
c Var 'aux477' direct represents '4' with '2342'
2339 -2341 2342 0
-2342 2341 0
-2342 -2339 0
c Var 'aux477' order represents '5' with '2343'
-2341 2343 0
c Var 'aux477' direct represents '5' with '2344'
2341 -2343 2344 0
-2344 2343 0
-2344 -2341 0
c Var 'aux477' order represents '6' with '2345'
-2343 2345 0
c Var 'aux477' direct represents '6' with '2346'
2343 -2345 2346 0
-2346 2345 0
-2346 -2343 0
c Var 'aux477' order represents '7' with '2347'
-2345 2347 0
c Var 'aux477' direct represents '7' with '2348'
2345 -2347 2348 0
-2348 2347 0
-2348 -2345 0
c Var 'aux477' order represents '8' with '2349'
-2347 2349 0
c Var 'aux477' direct represents '8' with '2350'
2347 -2349 2350 0
-2350 2349 0
-2350 -2347 0
c Var 'aux477' order represents '9' with '2351'
-2349 2351 0
c Var 'aux477' direct represents '9' with '2352'
2349 -2351 2352 0
-2352 2351 0
-2352 -2349 0
c Var 'aux477' order represents '10' with '2353'
-2351 2353 0
c Var 'aux477' direct represents '10' with '2354'
2351 -2353 2354 0
-2354 2353 0
-2354 -2351 0
c Var 'aux477' order represents '11' with '2355'
-2353 2355 0
c Var 'aux477' direct represents '11' with '2356'
2353 -2355 2356 0
-2356 2355 0
-2356 -2353 0
c Var 'aux477' order represents '12' with '2357'
-2355 2357 0
c Var 'aux477' direct represents '12' with '2358'
2355 -2357 2358 0
-2358 2357 0
-2358 -2355 0
c Var 'aux477' order represents '13' with '2359'
-2357 2359 0
c Var 'aux477' direct represents '13' with '2360'
2357 -2359 2360 0
-2360 2359 0
-2360 -2357 0
c Var 'aux477' order represents '14' with '2361'
-2359 2361 0
c Var 'aux477' direct represents '14' with '2362'
2359 -2361 2362 0
-2362 2361 0
-2362 -2359 0
c Var 'aux477' order represents '15' with '2363'
-2361 2363 0
c Var 'aux477' direct represents '15' with '2364'
2361 -2363 2364 0
-2364 2363 0
-2364 -2361 0
c Var 'aux477' order represents '16' with '2365'
-2363 2365 0
c Var 'aux477' direct represents '16' with '2366'
2363 -2365 2366 0
-2366 2365 0
-2366 -2363 0
c Var 'aux477' order represents '17' with '2367'
-2365 2367 0
c Var 'aux477' direct represents '17' with '2368'
2365 -2367 2368 0
-2368 2367 0
-2368 -2365 0
c Var 'aux477' order represents '18' with '2369'
-2367 2369 0
c Var 'aux477' direct represents '18' with '2370'
2367 -2369 2370 0
-2370 2369 0
-2370 -2367 0
c Var 'aux477' order represents '19' with '2371'
-2369 2371 0
c Var 'aux477' direct represents '19' with '2372'
2369 -2371 2372 0
-2372 2371 0
-2372 -2369 0
c Var 'aux477' order represents '20' with '2373'
-2371 2373 0
c Var 'aux477' direct represents '20' with '2374'
2371 -2373 2374 0
-2374 2373 0
-2374 -2371 0
c Var 'aux477' order represents '21' with '2375'
-2373 2375 0
c Var 'aux477' direct represents '21' with '2376'
2373 -2375 2376 0
-2376 2375 0
-2376 -2373 0
c Var 'aux477' order represents '22' with '2377'
-2375 2377 0
c Var 'aux477' direct represents '22' with '2378'
2375 -2377 2378 0
-2378 2377 0
-2378 -2375 0
c Var 'aux477' order represents '23' with '2379'
-2377 2379 0
c Var 'aux477' direct represents '23' with '2380'
2377 -2379 2380 0
-2380 2379 0
-2380 -2377 0
c Var 'aux477' direct represents '24' with '-2379'
2334 2336 2338 2340 2342 2344 2346 2348 2350 2352 2354 2356 2358 2360 2362 2364 2366 2368 2370 2372 2374 2376 2378 2380 -2379 0
c Encoding variable: aux478 with domain: int(0..32) (representing constraint (aux473 + aux475))
c Both direct and order encoding.
c Var 'aux478' order represents '0' with '2381'
c Var 'aux478' direct represents '0' with '2381'
c Var 'aux478' order represents '1' with '2382'
-2381 2382 0
c Var 'aux478' direct represents '1' with '2383'
2381 -2382 2383 0
-2383 2382 0
-2383 -2381 0
c Var 'aux478' order represents '2' with '2384'
-2382 2384 0
c Var 'aux478' direct represents '2' with '2385'
2382 -2384 2385 0
-2385 2384 0
-2385 -2382 0
c Var 'aux478' order represents '3' with '2386'
-2384 2386 0
c Var 'aux478' direct represents '3' with '2387'
2384 -2386 2387 0
-2387 2386 0
-2387 -2384 0
c Var 'aux478' order represents '4' with '2388'
-2386 2388 0
c Var 'aux478' direct represents '4' with '2389'
2386 -2388 2389 0
-2389 2388 0
-2389 -2386 0
c Var 'aux478' order represents '5' with '2390'
-2388 2390 0
c Var 'aux478' direct represents '5' with '2391'
2388 -2390 2391 0
-2391 2390 0
-2391 -2388 0
c Var 'aux478' order represents '6' with '2392'
-2390 2392 0
c Var 'aux478' direct represents '6' with '2393'
2390 -2392 2393 0
-2393 2392 0
-2393 -2390 0
c Var 'aux478' order represents '7' with '2394'
-2392 2394 0
c Var 'aux478' direct represents '7' with '2395'
2392 -2394 2395 0
-2395 2394 0
-2395 -2392 0
c Var 'aux478' order represents '8' with '2396'
-2394 2396 0
c Var 'aux478' direct represents '8' with '2397'
2394 -2396 2397 0
-2397 2396 0
-2397 -2394 0
c Var 'aux478' order represents '9' with '2398'
-2396 2398 0
c Var 'aux478' direct represents '9' with '2399'
2396 -2398 2399 0
-2399 2398 0
-2399 -2396 0
c Var 'aux478' order represents '10' with '2400'
-2398 2400 0
c Var 'aux478' direct represents '10' with '2401'
2398 -2400 2401 0
-2401 2400 0
-2401 -2398 0
c Var 'aux478' order represents '11' with '2402'
-2400 2402 0
c Var 'aux478' direct represents '11' with '2403'
2400 -2402 2403 0
-2403 2402 0
-2403 -2400 0
c Var 'aux478' order represents '12' with '2404'
-2402 2404 0
c Var 'aux478' direct represents '12' with '2405'
2402 -2404 2405 0
-2405 2404 0
-2405 -2402 0
c Var 'aux478' order represents '13' with '2406'
-2404 2406 0
c Var 'aux478' direct represents '13' with '2407'
2404 -2406 2407 0
-2407 2406 0
-2407 -2404 0
c Var 'aux478' order represents '14' with '2408'
-2406 2408 0
c Var 'aux478' direct represents '14' with '2409'
2406 -2408 2409 0
-2409 2408 0
-2409 -2406 0
c Var 'aux478' order represents '15' with '2410'
-2408 2410 0
c Var 'aux478' direct represents '15' with '2411'
2408 -2410 2411 0
-2411 2410 0
-2411 -2408 0
c Var 'aux478' order represents '16' with '2412'
-2410 2412 0
c Var 'aux478' direct represents '16' with '2413'
2410 -2412 2413 0
-2413 2412 0
-2413 -2410 0
c Var 'aux478' order represents '17' with '2414'
-2412 2414 0
c Var 'aux478' direct represents '17' with '2415'
2412 -2414 2415 0
-2415 2414 0
-2415 -2412 0
c Var 'aux478' order represents '18' with '2416'
-2414 2416 0
c Var 'aux478' direct represents '18' with '2417'
2414 -2416 2417 0
-2417 2416 0
-2417 -2414 0
c Var 'aux478' order represents '19' with '2418'
-2416 2418 0
c Var 'aux478' direct represents '19' with '2419'
2416 -2418 2419 0
-2419 2418 0
-2419 -2416 0
c Var 'aux478' order represents '20' with '2420'
-2418 2420 0
c Var 'aux478' direct represents '20' with '2421'
2418 -2420 2421 0
-2421 2420 0
-2421 -2418 0
c Var 'aux478' order represents '21' with '2422'
-2420 2422 0
c Var 'aux478' direct represents '21' with '2423'
2420 -2422 2423 0
-2423 2422 0
-2423 -2420 0
c Var 'aux478' order represents '22' with '2424'
-2422 2424 0
c Var 'aux478' direct represents '22' with '2425'
2422 -2424 2425 0
-2425 2424 0
-2425 -2422 0
c Var 'aux478' order represents '23' with '2426'
-2424 2426 0
c Var 'aux478' direct represents '23' with '2427'
2424 -2426 2427 0
-2427 2426 0
-2427 -2424 0
c Var 'aux478' order represents '24' with '2428'
-2426 2428 0
c Var 'aux478' direct represents '24' with '2429'
2426 -2428 2429 0
-2429 2428 0
-2429 -2426 0
c Var 'aux478' order represents '25' with '2430'
-2428 2430 0
c Var 'aux478' direct represents '25' with '2431'
2428 -2430 2431 0
-2431 2430 0
-2431 -2428 0
c Var 'aux478' order represents '26' with '2432'
-2430 2432 0
c Var 'aux478' direct represents '26' with '2433'
2430 -2432 2433 0
-2433 2432 0
-2433 -2430 0
c Var 'aux478' order represents '27' with '2434'
-2432 2434 0
c Var 'aux478' direct represents '27' with '2435'
2432 -2434 2435 0
-2435 2434 0
-2435 -2432 0
c Var 'aux478' order represents '28' with '2436'
-2434 2436 0
c Var 'aux478' direct represents '28' with '2437'
2434 -2436 2437 0
-2437 2436 0
-2437 -2434 0
c Var 'aux478' order represents '29' with '2438'
-2436 2438 0
c Var 'aux478' direct represents '29' with '2439'
2436 -2438 2439 0
-2439 2438 0
-2439 -2436 0
c Var 'aux478' order represents '30' with '2440'
-2438 2440 0
c Var 'aux478' direct represents '30' with '2441'
2438 -2440 2441 0
-2441 2440 0
-2441 -2438 0
c Var 'aux478' order represents '31' with '2442'
-2440 2442 0
c Var 'aux478' direct represents '31' with '2443'
2440 -2442 2443 0
-2443 2442 0
-2443 -2440 0
c Var 'aux478' direct represents '32' with '-2442'
2381 2383 2385 2387 2389 2391 2393 2395 2397 2399 2401 2403 2405 2407 2409 2411 2413 2415 2417 2419 2421 2423 2425 2427 2429 2431 2433 2435 2437 2439 2441 2443 -2442 0
c Encoding variable: aux479 with domain: int(0..16) (representing constraint (shift(x_00002_00003, -1) + shift(x_00006_00003, -1)))
c Both direct and order encoding.
c Var 'aux479' order represents '0' with '2444'
c Var 'aux479' direct represents '0' with '2444'
c Var 'aux479' order represents '1' with '2445'
-2444 2445 0
c Var 'aux479' direct represents '1' with '2446'
2444 -2445 2446 0
-2446 2445 0
-2446 -2444 0
c Var 'aux479' order represents '2' with '2447'
-2445 2447 0
c Var 'aux479' direct represents '2' with '2448'
2445 -2447 2448 0
-2448 2447 0
-2448 -2445 0
c Var 'aux479' order represents '3' with '2449'
-2447 2449 0
c Var 'aux479' direct represents '3' with '2450'
2447 -2449 2450 0
-2450 2449 0
-2450 -2447 0
c Var 'aux479' order represents '4' with '2451'
-2449 2451 0
c Var 'aux479' direct represents '4' with '2452'
2449 -2451 2452 0
-2452 2451 0
-2452 -2449 0
c Var 'aux479' order represents '5' with '2453'
-2451 2453 0
c Var 'aux479' direct represents '5' with '2454'
2451 -2453 2454 0
-2454 2453 0
-2454 -2451 0
c Var 'aux479' order represents '6' with '2455'
-2453 2455 0
c Var 'aux479' direct represents '6' with '2456'
2453 -2455 2456 0
-2456 2455 0
-2456 -2453 0
c Var 'aux479' order represents '7' with '2457'
-2455 2457 0
c Var 'aux479' direct represents '7' with '2458'
2455 -2457 2458 0
-2458 2457 0
-2458 -2455 0
c Var 'aux479' order represents '8' with '2459'
-2457 2459 0
c Var 'aux479' direct represents '8' with '2460'
2457 -2459 2460 0
-2460 2459 0
-2460 -2457 0
c Var 'aux479' order represents '9' with '2461'
-2459 2461 0
c Var 'aux479' direct represents '9' with '2462'
2459 -2461 2462 0
-2462 2461 0
-2462 -2459 0
c Var 'aux479' order represents '10' with '2463'
-2461 2463 0
c Var 'aux479' direct represents '10' with '2464'
2461 -2463 2464 0
-2464 2463 0
-2464 -2461 0
c Var 'aux479' order represents '11' with '2465'
-2463 2465 0
c Var 'aux479' direct represents '11' with '2466'
2463 -2465 2466 0
-2466 2465 0
-2466 -2463 0
c Var 'aux479' order represents '12' with '2467'
-2465 2467 0
c Var 'aux479' direct represents '12' with '2468'
2465 -2467 2468 0
-2468 2467 0
-2468 -2465 0
c Var 'aux479' order represents '13' with '2469'
-2467 2469 0
c Var 'aux479' direct represents '13' with '2470'
2467 -2469 2470 0
-2470 2469 0
-2470 -2467 0
c Var 'aux479' order represents '14' with '2471'
-2469 2471 0
c Var 'aux479' direct represents '14' with '2472'
2469 -2471 2472 0
-2472 2471 0
-2472 -2469 0
c Var 'aux479' order represents '15' with '2473'
-2471 2473 0
c Var 'aux479' direct represents '15' with '2474'
2471 -2473 2474 0
-2474 2473 0
-2474 -2471 0
c Var 'aux479' direct represents '16' with '-2473'
2444 2446 2448 2450 2452 2454 2456 2458 2460 2462 2464 2466 2468 2470 2472 2474 -2473 0
c Encoding variable: aux480 with domain: int(0..16) (representing constraint (shift(x_00001_00003, -1) + shift(x_00007_00003, -1)))
c Both direct and order encoding.
c Var 'aux480' order represents '0' with '2475'
c Var 'aux480' direct represents '0' with '2475'
c Var 'aux480' order represents '1' with '2476'
-2475 2476 0
c Var 'aux480' direct represents '1' with '2477'
2475 -2476 2477 0
-2477 2476 0
-2477 -2475 0
c Var 'aux480' order represents '2' with '2478'
-2476 2478 0
c Var 'aux480' direct represents '2' with '2479'
2476 -2478 2479 0
-2479 2478 0
-2479 -2476 0
c Var 'aux480' order represents '3' with '2480'
-2478 2480 0
c Var 'aux480' direct represents '3' with '2481'
2478 -2480 2481 0
-2481 2480 0
-2481 -2478 0
c Var 'aux480' order represents '4' with '2482'
-2480 2482 0
c Var 'aux480' direct represents '4' with '2483'
2480 -2482 2483 0
-2483 2482 0
-2483 -2480 0
c Var 'aux480' order represents '5' with '2484'
-2482 2484 0
c Var 'aux480' direct represents '5' with '2485'
2482 -2484 2485 0
-2485 2484 0
-2485 -2482 0
c Var 'aux480' order represents '6' with '2486'
-2484 2486 0
c Var 'aux480' direct represents '6' with '2487'
2484 -2486 2487 0
-2487 2486 0
-2487 -2484 0
c Var 'aux480' order represents '7' with '2488'
-2486 2488 0
c Var 'aux480' direct represents '7' with '2489'
2486 -2488 2489 0
-2489 2488 0
-2489 -2486 0
c Var 'aux480' order represents '8' with '2490'
-2488 2490 0
c Var 'aux480' direct represents '8' with '2491'
2488 -2490 2491 0
-2491 2490 0
-2491 -2488 0
c Var 'aux480' order represents '9' with '2492'
-2490 2492 0
c Var 'aux480' direct represents '9' with '2493'
2490 -2492 2493 0
-2493 2492 0
-2493 -2490 0
c Var 'aux480' order represents '10' with '2494'
-2492 2494 0
c Var 'aux480' direct represents '10' with '2495'
2492 -2494 2495 0
-2495 2494 0
-2495 -2492 0
c Var 'aux480' order represents '11' with '2496'
-2494 2496 0
c Var 'aux480' direct represents '11' with '2497'
2494 -2496 2497 0
-2497 2496 0
-2497 -2494 0
c Var 'aux480' order represents '12' with '2498'
-2496 2498 0
c Var 'aux480' direct represents '12' with '2499'
2496 -2498 2499 0
-2499 2498 0
-2499 -2496 0
c Var 'aux480' order represents '13' with '2500'
-2498 2500 0
c Var 'aux480' direct represents '13' with '2501'
2498 -2500 2501 0
-2501 2500 0
-2501 -2498 0
c Var 'aux480' order represents '14' with '2502'
-2500 2502 0
c Var 'aux480' direct represents '14' with '2503'
2500 -2502 2503 0
-2503 2502 0
-2503 -2500 0
c Var 'aux480' order represents '15' with '2504'
-2502 2504 0
c Var 'aux480' direct represents '15' with '2505'
2502 -2504 2505 0
-2505 2504 0
-2505 -2502 0
c Var 'aux480' direct represents '16' with '-2504'
2475 2477 2479 2481 2483 2485 2487 2489 2491 2493 2495 2497 2499 2501 2503 2505 -2504 0
c Encoding variable: aux481 with domain: int(0..16) (representing constraint (shift(x_00005_00003, -1) + shift(x_00008_00003, -1)))
c Both direct and order encoding.
c Var 'aux481' order represents '0' with '2506'
c Var 'aux481' direct represents '0' with '2506'
c Var 'aux481' order represents '1' with '2507'
-2506 2507 0
c Var 'aux481' direct represents '1' with '2508'
2506 -2507 2508 0
-2508 2507 0
-2508 -2506 0
c Var 'aux481' order represents '2' with '2509'
-2507 2509 0
c Var 'aux481' direct represents '2' with '2510'
2507 -2509 2510 0
-2510 2509 0
-2510 -2507 0
c Var 'aux481' order represents '3' with '2511'
-2509 2511 0
c Var 'aux481' direct represents '3' with '2512'
2509 -2511 2512 0
-2512 2511 0
-2512 -2509 0
c Var 'aux481' order represents '4' with '2513'
-2511 2513 0
c Var 'aux481' direct represents '4' with '2514'
2511 -2513 2514 0
-2514 2513 0
-2514 -2511 0
c Var 'aux481' order represents '5' with '2515'
-2513 2515 0
c Var 'aux481' direct represents '5' with '2516'
2513 -2515 2516 0
-2516 2515 0
-2516 -2513 0
c Var 'aux481' order represents '6' with '2517'
-2515 2517 0
c Var 'aux481' direct represents '6' with '2518'
2515 -2517 2518 0
-2518 2517 0
-2518 -2515 0
c Var 'aux481' order represents '7' with '2519'
-2517 2519 0
c Var 'aux481' direct represents '7' with '2520'
2517 -2519 2520 0
-2520 2519 0
-2520 -2517 0
c Var 'aux481' order represents '8' with '2521'
-2519 2521 0
c Var 'aux481' direct represents '8' with '2522'
2519 -2521 2522 0
-2522 2521 0
-2522 -2519 0
c Var 'aux481' order represents '9' with '2523'
-2521 2523 0
c Var 'aux481' direct represents '9' with '2524'
2521 -2523 2524 0
-2524 2523 0
-2524 -2521 0
c Var 'aux481' order represents '10' with '2525'
-2523 2525 0
c Var 'aux481' direct represents '10' with '2526'
2523 -2525 2526 0
-2526 2525 0
-2526 -2523 0
c Var 'aux481' order represents '11' with '2527'
-2525 2527 0
c Var 'aux481' direct represents '11' with '2528'
2525 -2527 2528 0
-2528 2527 0
-2528 -2525 0
c Var 'aux481' order represents '12' with '2529'
-2527 2529 0
c Var 'aux481' direct represents '12' with '2530'
2527 -2529 2530 0
-2530 2529 0
-2530 -2527 0
c Var 'aux481' order represents '13' with '2531'
-2529 2531 0
c Var 'aux481' direct represents '13' with '2532'
2529 -2531 2532 0
-2532 2531 0
-2532 -2529 0
c Var 'aux481' order represents '14' with '2533'
-2531 2533 0
c Var 'aux481' direct represents '14' with '2534'
2531 -2533 2534 0
-2534 2533 0
-2534 -2531 0
c Var 'aux481' order represents '15' with '2535'
-2533 2535 0
c Var 'aux481' direct represents '15' with '2536'
2533 -2535 2536 0
-2536 2535 0
-2536 -2533 0
c Var 'aux481' direct represents '16' with '-2535'
2506 2508 2510 2512 2514 2516 2518 2520 2522 2524 2526 2528 2530 2532 2534 2536 -2535 0
c Encoding variable: aux482 with domain: int(0..16) (representing constraint (shift(x_00009_00003, -1) + shift(x_00004_00003, -1)))
c Both direct and order encoding.
c Var 'aux482' order represents '0' with '2537'
c Var 'aux482' direct represents '0' with '2537'
c Var 'aux482' order represents '1' with '2538'
-2537 2538 0
c Var 'aux482' direct represents '1' with '2539'
2537 -2538 2539 0
-2539 2538 0
-2539 -2537 0
c Var 'aux482' order represents '2' with '2540'
-2538 2540 0
c Var 'aux482' direct represents '2' with '2541'
2538 -2540 2541 0
-2541 2540 0
-2541 -2538 0
c Var 'aux482' order represents '3' with '2542'
-2540 2542 0
c Var 'aux482' direct represents '3' with '2543'
2540 -2542 2543 0
-2543 2542 0
-2543 -2540 0
c Var 'aux482' order represents '4' with '2544'
-2542 2544 0
c Var 'aux482' direct represents '4' with '2545'
2542 -2544 2545 0
-2545 2544 0
-2545 -2542 0
c Var 'aux482' order represents '5' with '2546'
-2544 2546 0
c Var 'aux482' direct represents '5' with '2547'
2544 -2546 2547 0
-2547 2546 0
-2547 -2544 0
c Var 'aux482' order represents '6' with '2548'
-2546 2548 0
c Var 'aux482' direct represents '6' with '2549'
2546 -2548 2549 0
-2549 2548 0
-2549 -2546 0
c Var 'aux482' order represents '7' with '2550'
-2548 2550 0
c Var 'aux482' direct represents '7' with '2551'
2548 -2550 2551 0
-2551 2550 0
-2551 -2548 0
c Var 'aux482' order represents '8' with '2552'
-2550 2552 0
c Var 'aux482' direct represents '8' with '2553'
2550 -2552 2553 0
-2553 2552 0
-2553 -2550 0
c Var 'aux482' order represents '9' with '2554'
-2552 2554 0
c Var 'aux482' direct represents '9' with '2555'
2552 -2554 2555 0
-2555 2554 0
-2555 -2552 0
c Var 'aux482' order represents '10' with '2556'
-2554 2556 0
c Var 'aux482' direct represents '10' with '2557'
2554 -2556 2557 0
-2557 2556 0
-2557 -2554 0
c Var 'aux482' order represents '11' with '2558'
-2556 2558 0
c Var 'aux482' direct represents '11' with '2559'
2556 -2558 2559 0
-2559 2558 0
-2559 -2556 0
c Var 'aux482' order represents '12' with '2560'
-2558 2560 0
c Var 'aux482' direct represents '12' with '2561'
2558 -2560 2561 0
-2561 2560 0
-2561 -2558 0
c Var 'aux482' order represents '13' with '2562'
-2560 2562 0
c Var 'aux482' direct represents '13' with '2563'
2560 -2562 2563 0
-2563 2562 0
-2563 -2560 0
c Var 'aux482' order represents '14' with '2564'
-2562 2564 0
c Var 'aux482' direct represents '14' with '2565'
2562 -2564 2565 0
-2565 2564 0
-2565 -2562 0
c Var 'aux482' order represents '15' with '2566'
-2564 2566 0
c Var 'aux482' direct represents '15' with '2567'
2564 -2566 2567 0
-2567 2566 0
-2567 -2564 0
c Var 'aux482' direct represents '16' with '-2566'
2537 2539 2541 2543 2545 2547 2549 2551 2553 2555 2557 2559 2561 2563 2565 2567 -2566 0
c Encoding variable: aux483 with domain: int(0..24) (representing constraint (shift(x_00003_00003, -1) + aux482))
c Both direct and order encoding.
c Var 'aux483' order represents '0' with '2568'
c Var 'aux483' direct represents '0' with '2568'
c Var 'aux483' order represents '1' with '2569'
-2568 2569 0
c Var 'aux483' direct represents '1' with '2570'
2568 -2569 2570 0
-2570 2569 0
-2570 -2568 0
c Var 'aux483' order represents '2' with '2571'
-2569 2571 0
c Var 'aux483' direct represents '2' with '2572'
2569 -2571 2572 0
-2572 2571 0
-2572 -2569 0
c Var 'aux483' order represents '3' with '2573'
-2571 2573 0
c Var 'aux483' direct represents '3' with '2574'
2571 -2573 2574 0
-2574 2573 0
-2574 -2571 0
c Var 'aux483' order represents '4' with '2575'
-2573 2575 0
c Var 'aux483' direct represents '4' with '2576'
2573 -2575 2576 0
-2576 2575 0
-2576 -2573 0
c Var 'aux483' order represents '5' with '2577'
-2575 2577 0
c Var 'aux483' direct represents '5' with '2578'
2575 -2577 2578 0
-2578 2577 0
-2578 -2575 0
c Var 'aux483' order represents '6' with '2579'
-2577 2579 0
c Var 'aux483' direct represents '6' with '2580'
2577 -2579 2580 0
-2580 2579 0
-2580 -2577 0
c Var 'aux483' order represents '7' with '2581'
-2579 2581 0
c Var 'aux483' direct represents '7' with '2582'
2579 -2581 2582 0
-2582 2581 0
-2582 -2579 0
c Var 'aux483' order represents '8' with '2583'
-2581 2583 0
c Var 'aux483' direct represents '8' with '2584'
2581 -2583 2584 0
-2584 2583 0
-2584 -2581 0
c Var 'aux483' order represents '9' with '2585'
-2583 2585 0
c Var 'aux483' direct represents '9' with '2586'
2583 -2585 2586 0
-2586 2585 0
-2586 -2583 0
c Var 'aux483' order represents '10' with '2587'
-2585 2587 0
c Var 'aux483' direct represents '10' with '2588'
2585 -2587 2588 0
-2588 2587 0
-2588 -2585 0
c Var 'aux483' order represents '11' with '2589'
-2587 2589 0
c Var 'aux483' direct represents '11' with '2590'
2587 -2589 2590 0
-2590 2589 0
-2590 -2587 0
c Var 'aux483' order represents '12' with '2591'
-2589 2591 0
c Var 'aux483' direct represents '12' with '2592'
2589 -2591 2592 0
-2592 2591 0
-2592 -2589 0
c Var 'aux483' order represents '13' with '2593'
-2591 2593 0
c Var 'aux483' direct represents '13' with '2594'
2591 -2593 2594 0
-2594 2593 0
-2594 -2591 0
c Var 'aux483' order represents '14' with '2595'
-2593 2595 0
c Var 'aux483' direct represents '14' with '2596'
2593 -2595 2596 0
-2596 2595 0
-2596 -2593 0
c Var 'aux483' order represents '15' with '2597'
-2595 2597 0
c Var 'aux483' direct represents '15' with '2598'
2595 -2597 2598 0
-2598 2597 0
-2598 -2595 0
c Var 'aux483' order represents '16' with '2599'
-2597 2599 0
c Var 'aux483' direct represents '16' with '2600'
2597 -2599 2600 0
-2600 2599 0
-2600 -2597 0
c Var 'aux483' order represents '17' with '2601'
-2599 2601 0
c Var 'aux483' direct represents '17' with '2602'
2599 -2601 2602 0
-2602 2601 0
-2602 -2599 0
c Var 'aux483' order represents '18' with '2603'
-2601 2603 0
c Var 'aux483' direct represents '18' with '2604'
2601 -2603 2604 0
-2604 2603 0
-2604 -2601 0
c Var 'aux483' order represents '19' with '2605'
-2603 2605 0
c Var 'aux483' direct represents '19' with '2606'
2603 -2605 2606 0
-2606 2605 0
-2606 -2603 0
c Var 'aux483' order represents '20' with '2607'
-2605 2607 0
c Var 'aux483' direct represents '20' with '2608'
2605 -2607 2608 0
-2608 2607 0
-2608 -2605 0
c Var 'aux483' order represents '21' with '2609'
-2607 2609 0
c Var 'aux483' direct represents '21' with '2610'
2607 -2609 2610 0
-2610 2609 0
-2610 -2607 0
c Var 'aux483' order represents '22' with '2611'
-2609 2611 0
c Var 'aux483' direct represents '22' with '2612'
2609 -2611 2612 0
-2612 2611 0
-2612 -2609 0
c Var 'aux483' order represents '23' with '2613'
-2611 2613 0
c Var 'aux483' direct represents '23' with '2614'
2611 -2613 2614 0
-2614 2613 0
-2614 -2611 0
c Var 'aux483' direct represents '24' with '-2613'
2568 2570 2572 2574 2576 2578 2580 2582 2584 2586 2588 2590 2592 2594 2596 2598 2600 2602 2604 2606 2608 2610 2612 2614 -2613 0
c Encoding variable: aux484 with domain: int(0..32) (representing constraint (aux479 + aux481))
c Both direct and order encoding.
c Var 'aux484' order represents '0' with '2615'
c Var 'aux484' direct represents '0' with '2615'
c Var 'aux484' order represents '1' with '2616'
-2615 2616 0
c Var 'aux484' direct represents '1' with '2617'
2615 -2616 2617 0
-2617 2616 0
-2617 -2615 0
c Var 'aux484' order represents '2' with '2618'
-2616 2618 0
c Var 'aux484' direct represents '2' with '2619'
2616 -2618 2619 0
-2619 2618 0
-2619 -2616 0
c Var 'aux484' order represents '3' with '2620'
-2618 2620 0
c Var 'aux484' direct represents '3' with '2621'
2618 -2620 2621 0
-2621 2620 0
-2621 -2618 0
c Var 'aux484' order represents '4' with '2622'
-2620 2622 0
c Var 'aux484' direct represents '4' with '2623'
2620 -2622 2623 0
-2623 2622 0
-2623 -2620 0
c Var 'aux484' order represents '5' with '2624'
-2622 2624 0
c Var 'aux484' direct represents '5' with '2625'
2622 -2624 2625 0
-2625 2624 0
-2625 -2622 0
c Var 'aux484' order represents '6' with '2626'
-2624 2626 0
c Var 'aux484' direct represents '6' with '2627'
2624 -2626 2627 0
-2627 2626 0
-2627 -2624 0
c Var 'aux484' order represents '7' with '2628'
-2626 2628 0
c Var 'aux484' direct represents '7' with '2629'
2626 -2628 2629 0
-2629 2628 0
-2629 -2626 0
c Var 'aux484' order represents '8' with '2630'
-2628 2630 0
c Var 'aux484' direct represents '8' with '2631'
2628 -2630 2631 0
-2631 2630 0
-2631 -2628 0
c Var 'aux484' order represents '9' with '2632'
-2630 2632 0
c Var 'aux484' direct represents '9' with '2633'
2630 -2632 2633 0
-2633 2632 0
-2633 -2630 0
c Var 'aux484' order represents '10' with '2634'
-2632 2634 0
c Var 'aux484' direct represents '10' with '2635'
2632 -2634 2635 0
-2635 2634 0
-2635 -2632 0
c Var 'aux484' order represents '11' with '2636'
-2634 2636 0
c Var 'aux484' direct represents '11' with '2637'
2634 -2636 2637 0
-2637 2636 0
-2637 -2634 0
c Var 'aux484' order represents '12' with '2638'
-2636 2638 0
c Var 'aux484' direct represents '12' with '2639'
2636 -2638 2639 0
-2639 2638 0
-2639 -2636 0
c Var 'aux484' order represents '13' with '2640'
-2638 2640 0
c Var 'aux484' direct represents '13' with '2641'
2638 -2640 2641 0
-2641 2640 0
-2641 -2638 0
c Var 'aux484' order represents '14' with '2642'
-2640 2642 0
c Var 'aux484' direct represents '14' with '2643'
2640 -2642 2643 0
-2643 2642 0
-2643 -2640 0
c Var 'aux484' order represents '15' with '2644'
-2642 2644 0
c Var 'aux484' direct represents '15' with '2645'
2642 -2644 2645 0
-2645 2644 0
-2645 -2642 0
c Var 'aux484' order represents '16' with '2646'
-2644 2646 0
c Var 'aux484' direct represents '16' with '2647'
2644 -2646 2647 0
-2647 2646 0
-2647 -2644 0
c Var 'aux484' order represents '17' with '2648'
-2646 2648 0
c Var 'aux484' direct represents '17' with '2649'
2646 -2648 2649 0
-2649 2648 0
-2649 -2646 0
c Var 'aux484' order represents '18' with '2650'
-2648 2650 0
c Var 'aux484' direct represents '18' with '2651'
2648 -2650 2651 0
-2651 2650 0
-2651 -2648 0
c Var 'aux484' order represents '19' with '2652'
-2650 2652 0
c Var 'aux484' direct represents '19' with '2653'
2650 -2652 2653 0
-2653 2652 0
-2653 -2650 0
c Var 'aux484' order represents '20' with '2654'
-2652 2654 0
c Var 'aux484' direct represents '20' with '2655'
2652 -2654 2655 0
-2655 2654 0
-2655 -2652 0
c Var 'aux484' order represents '21' with '2656'
-2654 2656 0
c Var 'aux484' direct represents '21' with '2657'
2654 -2656 2657 0
-2657 2656 0
-2657 -2654 0
c Var 'aux484' order represents '22' with '2658'
-2656 2658 0
c Var 'aux484' direct represents '22' with '2659'
2656 -2658 2659 0
-2659 2658 0
-2659 -2656 0
c Var 'aux484' order represents '23' with '2660'
-2658 2660 0
c Var 'aux484' direct represents '23' with '2661'
2658 -2660 2661 0
-2661 2660 0
-2661 -2658 0
c Var 'aux484' order represents '24' with '2662'
-2660 2662 0
c Var 'aux484' direct represents '24' with '2663'
2660 -2662 2663 0
-2663 2662 0
-2663 -2660 0
c Var 'aux484' order represents '25' with '2664'
-2662 2664 0
c Var 'aux484' direct represents '25' with '2665'
2662 -2664 2665 0
-2665 2664 0
-2665 -2662 0
c Var 'aux484' order represents '26' with '2666'
-2664 2666 0
c Var 'aux484' direct represents '26' with '2667'
2664 -2666 2667 0
-2667 2666 0
-2667 -2664 0
c Var 'aux484' order represents '27' with '2668'
-2666 2668 0
c Var 'aux484' direct represents '27' with '2669'
2666 -2668 2669 0
-2669 2668 0
-2669 -2666 0
c Var 'aux484' order represents '28' with '2670'
-2668 2670 0
c Var 'aux484' direct represents '28' with '2671'
2668 -2670 2671 0
-2671 2670 0
-2671 -2668 0
c Var 'aux484' order represents '29' with '2672'
-2670 2672 0
c Var 'aux484' direct represents '29' with '2673'
2670 -2672 2673 0
-2673 2672 0
-2673 -2670 0
c Var 'aux484' order represents '30' with '2674'
-2672 2674 0
c Var 'aux484' direct represents '30' with '2675'
2672 -2674 2675 0
-2675 2674 0
-2675 -2672 0
c Var 'aux484' order represents '31' with '2676'
-2674 2676 0
c Var 'aux484' direct represents '31' with '2677'
2674 -2676 2677 0
-2677 2676 0
-2677 -2674 0
c Var 'aux484' direct represents '32' with '-2676'
2615 2617 2619 2621 2623 2625 2627 2629 2631 2633 2635 2637 2639 2641 2643 2645 2647 2649 2651 2653 2655 2657 2659 2661 2663 2665 2667 2669 2671 2673 2675 2677 -2676 0
c Encoding variable: aux485 with domain: int(0..16) (representing constraint (shift(x_00002_00004, -1) + shift(x_00006_00004, -1)))
c Both direct and order encoding.
c Var 'aux485' order represents '0' with '2678'
c Var 'aux485' direct represents '0' with '2678'
c Var 'aux485' order represents '1' with '2679'
-2678 2679 0
c Var 'aux485' direct represents '1' with '2680'
2678 -2679 2680 0
-2680 2679 0
-2680 -2678 0
c Var 'aux485' order represents '2' with '2681'
-2679 2681 0
c Var 'aux485' direct represents '2' with '2682'
2679 -2681 2682 0
-2682 2681 0
-2682 -2679 0
c Var 'aux485' order represents '3' with '2683'
-2681 2683 0
c Var 'aux485' direct represents '3' with '2684'
2681 -2683 2684 0
-2684 2683 0
-2684 -2681 0
c Var 'aux485' order represents '4' with '2685'
-2683 2685 0
c Var 'aux485' direct represents '4' with '2686'
2683 -2685 2686 0
-2686 2685 0
-2686 -2683 0
c Var 'aux485' order represents '5' with '2687'
-2685 2687 0
c Var 'aux485' direct represents '5' with '2688'
2685 -2687 2688 0
-2688 2687 0
-2688 -2685 0
c Var 'aux485' order represents '6' with '2689'
-2687 2689 0
c Var 'aux485' direct represents '6' with '2690'
2687 -2689 2690 0
-2690 2689 0
-2690 -2687 0
c Var 'aux485' order represents '7' with '2691'
-2689 2691 0
c Var 'aux485' direct represents '7' with '2692'
2689 -2691 2692 0
-2692 2691 0
-2692 -2689 0
c Var 'aux485' order represents '8' with '2693'
-2691 2693 0
c Var 'aux485' direct represents '8' with '2694'
2691 -2693 2694 0
-2694 2693 0
-2694 -2691 0
c Var 'aux485' order represents '9' with '2695'
-2693 2695 0
c Var 'aux485' direct represents '9' with '2696'
2693 -2695 2696 0
-2696 2695 0
-2696 -2693 0
c Var 'aux485' order represents '10' with '2697'
-2695 2697 0
c Var 'aux485' direct represents '10' with '2698'
2695 -2697 2698 0
-2698 2697 0
-2698 -2695 0
c Var 'aux485' order represents '11' with '2699'
-2697 2699 0
c Var 'aux485' direct represents '11' with '2700'
2697 -2699 2700 0
-2700 2699 0
-2700 -2697 0
c Var 'aux485' order represents '12' with '2701'
-2699 2701 0
c Var 'aux485' direct represents '12' with '2702'
2699 -2701 2702 0
-2702 2701 0
-2702 -2699 0
c Var 'aux485' order represents '13' with '2703'
-2701 2703 0
c Var 'aux485' direct represents '13' with '2704'
2701 -2703 2704 0
-2704 2703 0
-2704 -2701 0
c Var 'aux485' order represents '14' with '2705'
-2703 2705 0
c Var 'aux485' direct represents '14' with '2706'
2703 -2705 2706 0
-2706 2705 0
-2706 -2703 0
c Var 'aux485' order represents '15' with '2707'
-2705 2707 0
c Var 'aux485' direct represents '15' with '2708'
2705 -2707 2708 0
-2708 2707 0
-2708 -2705 0
c Var 'aux485' direct represents '16' with '-2707'
2678 2680 2682 2684 2686 2688 2690 2692 2694 2696 2698 2700 2702 2704 2706 2708 -2707 0
c Encoding variable: aux486 with domain: int(0..16) (representing constraint (shift(x_00001_00004, -1) + shift(x_00007_00004, -1)))
c Both direct and order encoding.
c Var 'aux486' order represents '0' with '2709'
c Var 'aux486' direct represents '0' with '2709'
c Var 'aux486' order represents '1' with '2710'
-2709 2710 0
c Var 'aux486' direct represents '1' with '2711'
2709 -2710 2711 0
-2711 2710 0
-2711 -2709 0
c Var 'aux486' order represents '2' with '2712'
-2710 2712 0
c Var 'aux486' direct represents '2' with '2713'
2710 -2712 2713 0
-2713 2712 0
-2713 -2710 0
c Var 'aux486' order represents '3' with '2714'
-2712 2714 0
c Var 'aux486' direct represents '3' with '2715'
2712 -2714 2715 0
-2715 2714 0
-2715 -2712 0
c Var 'aux486' order represents '4' with '2716'
-2714 2716 0
c Var 'aux486' direct represents '4' with '2717'
2714 -2716 2717 0
-2717 2716 0
-2717 -2714 0
c Var 'aux486' order represents '5' with '2718'
-2716 2718 0
c Var 'aux486' direct represents '5' with '2719'
2716 -2718 2719 0
-2719 2718 0
-2719 -2716 0
c Var 'aux486' order represents '6' with '2720'
-2718 2720 0
c Var 'aux486' direct represents '6' with '2721'
2718 -2720 2721 0
-2721 2720 0
-2721 -2718 0
c Var 'aux486' order represents '7' with '2722'
-2720 2722 0
c Var 'aux486' direct represents '7' with '2723'
2720 -2722 2723 0
-2723 2722 0
-2723 -2720 0
c Var 'aux486' order represents '8' with '2724'
-2722 2724 0
c Var 'aux486' direct represents '8' with '2725'
2722 -2724 2725 0
-2725 2724 0
-2725 -2722 0
c Var 'aux486' order represents '9' with '2726'
-2724 2726 0
c Var 'aux486' direct represents '9' with '2727'
2724 -2726 2727 0
-2727 2726 0
-2727 -2724 0
c Var 'aux486' order represents '10' with '2728'
-2726 2728 0
c Var 'aux486' direct represents '10' with '2729'
2726 -2728 2729 0
-2729 2728 0
-2729 -2726 0
c Var 'aux486' order represents '11' with '2730'
-2728 2730 0
c Var 'aux486' direct represents '11' with '2731'
2728 -2730 2731 0
-2731 2730 0
-2731 -2728 0
c Var 'aux486' order represents '12' with '2732'
-2730 2732 0
c Var 'aux486' direct represents '12' with '2733'
2730 -2732 2733 0
-2733 2732 0
-2733 -2730 0
c Var 'aux486' order represents '13' with '2734'
-2732 2734 0
c Var 'aux486' direct represents '13' with '2735'
2732 -2734 2735 0
-2735 2734 0
-2735 -2732 0
c Var 'aux486' order represents '14' with '2736'
-2734 2736 0
c Var 'aux486' direct represents '14' with '2737'
2734 -2736 2737 0
-2737 2736 0
-2737 -2734 0
c Var 'aux486' order represents '15' with '2738'
-2736 2738 0
c Var 'aux486' direct represents '15' with '2739'
2736 -2738 2739 0
-2739 2738 0
-2739 -2736 0
c Var 'aux486' direct represents '16' with '-2738'
2709 2711 2713 2715 2717 2719 2721 2723 2725 2727 2729 2731 2733 2735 2737 2739 -2738 0
c Encoding variable: aux487 with domain: int(0..16) (representing constraint (shift(x_00005_00004, -1) + shift(x_00008_00004, -1)))
c Both direct and order encoding.
c Var 'aux487' order represents '0' with '2740'
c Var 'aux487' direct represents '0' with '2740'
c Var 'aux487' order represents '1' with '2741'
-2740 2741 0
c Var 'aux487' direct represents '1' with '2742'
2740 -2741 2742 0
-2742 2741 0
-2742 -2740 0
c Var 'aux487' order represents '2' with '2743'
-2741 2743 0
c Var 'aux487' direct represents '2' with '2744'
2741 -2743 2744 0
-2744 2743 0
-2744 -2741 0
c Var 'aux487' order represents '3' with '2745'
-2743 2745 0
c Var 'aux487' direct represents '3' with '2746'
2743 -2745 2746 0
-2746 2745 0
-2746 -2743 0
c Var 'aux487' order represents '4' with '2747'
-2745 2747 0
c Var 'aux487' direct represents '4' with '2748'
2745 -2747 2748 0
-2748 2747 0
-2748 -2745 0
c Var 'aux487' order represents '5' with '2749'
-2747 2749 0
c Var 'aux487' direct represents '5' with '2750'
2747 -2749 2750 0
-2750 2749 0
-2750 -2747 0
c Var 'aux487' order represents '6' with '2751'
-2749 2751 0
c Var 'aux487' direct represents '6' with '2752'
2749 -2751 2752 0
-2752 2751 0
-2752 -2749 0
c Var 'aux487' order represents '7' with '2753'
-2751 2753 0
c Var 'aux487' direct represents '7' with '2754'
2751 -2753 2754 0
-2754 2753 0
-2754 -2751 0
c Var 'aux487' order represents '8' with '2755'
-2753 2755 0
c Var 'aux487' direct represents '8' with '2756'
2753 -2755 2756 0
-2756 2755 0
-2756 -2753 0
c Var 'aux487' order represents '9' with '2757'
-2755 2757 0
c Var 'aux487' direct represents '9' with '2758'
2755 -2757 2758 0
-2758 2757 0
-2758 -2755 0
c Var 'aux487' order represents '10' with '2759'
-2757 2759 0
c Var 'aux487' direct represents '10' with '2760'
2757 -2759 2760 0
-2760 2759 0
-2760 -2757 0
c Var 'aux487' order represents '11' with '2761'
-2759 2761 0
c Var 'aux487' direct represents '11' with '2762'
2759 -2761 2762 0
-2762 2761 0
-2762 -2759 0
c Var 'aux487' order represents '12' with '2763'
-2761 2763 0
c Var 'aux487' direct represents '12' with '2764'
2761 -2763 2764 0
-2764 2763 0
-2764 -2761 0
c Var 'aux487' order represents '13' with '2765'
-2763 2765 0
c Var 'aux487' direct represents '13' with '2766'
2763 -2765 2766 0
-2766 2765 0
-2766 -2763 0
c Var 'aux487' order represents '14' with '2767'
-2765 2767 0
c Var 'aux487' direct represents '14' with '2768'
2765 -2767 2768 0
-2768 2767 0
-2768 -2765 0
c Var 'aux487' order represents '15' with '2769'
-2767 2769 0
c Var 'aux487' direct represents '15' with '2770'
2767 -2769 2770 0
-2770 2769 0
-2770 -2767 0
c Var 'aux487' direct represents '16' with '-2769'
2740 2742 2744 2746 2748 2750 2752 2754 2756 2758 2760 2762 2764 2766 2768 2770 -2769 0
c Encoding variable: aux488 with domain: int(0..16) (representing constraint (shift(x_00009_00004, -1) + shift(x_00004_00004, -1)))
c Both direct and order encoding.
c Var 'aux488' order represents '0' with '2771'
c Var 'aux488' direct represents '0' with '2771'
c Var 'aux488' order represents '1' with '2772'
-2771 2772 0
c Var 'aux488' direct represents '1' with '2773'
2771 -2772 2773 0
-2773 2772 0
-2773 -2771 0
c Var 'aux488' order represents '2' with '2774'
-2772 2774 0
c Var 'aux488' direct represents '2' with '2775'
2772 -2774 2775 0
-2775 2774 0
-2775 -2772 0
c Var 'aux488' order represents '3' with '2776'
-2774 2776 0
c Var 'aux488' direct represents '3' with '2777'
2774 -2776 2777 0
-2777 2776 0
-2777 -2774 0
c Var 'aux488' order represents '4' with '2778'
-2776 2778 0
c Var 'aux488' direct represents '4' with '2779'
2776 -2778 2779 0
-2779 2778 0
-2779 -2776 0
c Var 'aux488' order represents '5' with '2780'
-2778 2780 0
c Var 'aux488' direct represents '5' with '2781'
2778 -2780 2781 0
-2781 2780 0
-2781 -2778 0
c Var 'aux488' order represents '6' with '2782'
-2780 2782 0
c Var 'aux488' direct represents '6' with '2783'
2780 -2782 2783 0
-2783 2782 0
-2783 -2780 0
c Var 'aux488' order represents '7' with '2784'
-2782 2784 0
c Var 'aux488' direct represents '7' with '2785'
2782 -2784 2785 0
-2785 2784 0
-2785 -2782 0
c Var 'aux488' order represents '8' with '2786'
-2784 2786 0
c Var 'aux488' direct represents '8' with '2787'
2784 -2786 2787 0
-2787 2786 0
-2787 -2784 0
c Var 'aux488' order represents '9' with '2788'
-2786 2788 0
c Var 'aux488' direct represents '9' with '2789'
2786 -2788 2789 0
-2789 2788 0
-2789 -2786 0
c Var 'aux488' order represents '10' with '2790'
-2788 2790 0
c Var 'aux488' direct represents '10' with '2791'
2788 -2790 2791 0
-2791 2790 0
-2791 -2788 0
c Var 'aux488' order represents '11' with '2792'
-2790 2792 0
c Var 'aux488' direct represents '11' with '2793'
2790 -2792 2793 0
-2793 2792 0
-2793 -2790 0
c Var 'aux488' order represents '12' with '2794'
-2792 2794 0
c Var 'aux488' direct represents '12' with '2795'
2792 -2794 2795 0
-2795 2794 0
-2795 -2792 0
c Var 'aux488' order represents '13' with '2796'
-2794 2796 0
c Var 'aux488' direct represents '13' with '2797'
2794 -2796 2797 0
-2797 2796 0
-2797 -2794 0
c Var 'aux488' order represents '14' with '2798'
-2796 2798 0
c Var 'aux488' direct represents '14' with '2799'
2796 -2798 2799 0
-2799 2798 0
-2799 -2796 0
c Var 'aux488' order represents '15' with '2800'
-2798 2800 0
c Var 'aux488' direct represents '15' with '2801'
2798 -2800 2801 0
-2801 2800 0
-2801 -2798 0
c Var 'aux488' direct represents '16' with '-2800'
2771 2773 2775 2777 2779 2781 2783 2785 2787 2789 2791 2793 2795 2797 2799 2801 -2800 0
c Encoding variable: aux489 with domain: int(0..24) (representing constraint (shift(x_00003_00004, -1) + aux488))
c Both direct and order encoding.
c Var 'aux489' order represents '0' with '2802'
c Var 'aux489' direct represents '0' with '2802'
c Var 'aux489' order represents '1' with '2803'
-2802 2803 0
c Var 'aux489' direct represents '1' with '2804'
2802 -2803 2804 0
-2804 2803 0
-2804 -2802 0
c Var 'aux489' order represents '2' with '2805'
-2803 2805 0
c Var 'aux489' direct represents '2' with '2806'
2803 -2805 2806 0
-2806 2805 0
-2806 -2803 0
c Var 'aux489' order represents '3' with '2807'
-2805 2807 0
c Var 'aux489' direct represents '3' with '2808'
2805 -2807 2808 0
-2808 2807 0
-2808 -2805 0
c Var 'aux489' order represents '4' with '2809'
-2807 2809 0
c Var 'aux489' direct represents '4' with '2810'
2807 -2809 2810 0
-2810 2809 0
-2810 -2807 0
c Var 'aux489' order represents '5' with '2811'
-2809 2811 0
c Var 'aux489' direct represents '5' with '2812'
2809 -2811 2812 0
-2812 2811 0
-2812 -2809 0
c Var 'aux489' order represents '6' with '2813'
-2811 2813 0
c Var 'aux489' direct represents '6' with '2814'
2811 -2813 2814 0
-2814 2813 0
-2814 -2811 0
c Var 'aux489' order represents '7' with '2815'
-2813 2815 0
c Var 'aux489' direct represents '7' with '2816'
2813 -2815 2816 0
-2816 2815 0
-2816 -2813 0
c Var 'aux489' order represents '8' with '2817'
-2815 2817 0
c Var 'aux489' direct represents '8' with '2818'
2815 -2817 2818 0
-2818 2817 0
-2818 -2815 0
c Var 'aux489' order represents '9' with '2819'
-2817 2819 0
c Var 'aux489' direct represents '9' with '2820'
2817 -2819 2820 0
-2820 2819 0
-2820 -2817 0
c Var 'aux489' order represents '10' with '2821'
-2819 2821 0
c Var 'aux489' direct represents '10' with '2822'
2819 -2821 2822 0
-2822 2821 0
-2822 -2819 0
c Var 'aux489' order represents '11' with '2823'
-2821 2823 0
c Var 'aux489' direct represents '11' with '2824'
2821 -2823 2824 0
-2824 2823 0
-2824 -2821 0
c Var 'aux489' order represents '12' with '2825'
-2823 2825 0
c Var 'aux489' direct represents '12' with '2826'
2823 -2825 2826 0
-2826 2825 0
-2826 -2823 0
c Var 'aux489' order represents '13' with '2827'
-2825 2827 0
c Var 'aux489' direct represents '13' with '2828'
2825 -2827 2828 0
-2828 2827 0
-2828 -2825 0
c Var 'aux489' order represents '14' with '2829'
-2827 2829 0
c Var 'aux489' direct represents '14' with '2830'
2827 -2829 2830 0
-2830 2829 0
-2830 -2827 0
c Var 'aux489' order represents '15' with '2831'
-2829 2831 0
c Var 'aux489' direct represents '15' with '2832'
2829 -2831 2832 0
-2832 2831 0
-2832 -2829 0
c Var 'aux489' order represents '16' with '2833'
-2831 2833 0
c Var 'aux489' direct represents '16' with '2834'
2831 -2833 2834 0
-2834 2833 0
-2834 -2831 0
c Var 'aux489' order represents '17' with '2835'
-2833 2835 0
c Var 'aux489' direct represents '17' with '2836'
2833 -2835 2836 0
-2836 2835 0
-2836 -2833 0
c Var 'aux489' order represents '18' with '2837'
-2835 2837 0
c Var 'aux489' direct represents '18' with '2838'
2835 -2837 2838 0
-2838 2837 0
-2838 -2835 0
c Var 'aux489' order represents '19' with '2839'
-2837 2839 0
c Var 'aux489' direct represents '19' with '2840'
2837 -2839 2840 0
-2840 2839 0
-2840 -2837 0
c Var 'aux489' order represents '20' with '2841'
-2839 2841 0
c Var 'aux489' direct represents '20' with '2842'
2839 -2841 2842 0
-2842 2841 0
-2842 -2839 0
c Var 'aux489' order represents '21' with '2843'
-2841 2843 0
c Var 'aux489' direct represents '21' with '2844'
2841 -2843 2844 0
-2844 2843 0
-2844 -2841 0
c Var 'aux489' order represents '22' with '2845'
-2843 2845 0
c Var 'aux489' direct represents '22' with '2846'
2843 -2845 2846 0
-2846 2845 0
-2846 -2843 0
c Var 'aux489' order represents '23' with '2847'
-2845 2847 0
c Var 'aux489' direct represents '23' with '2848'
2845 -2847 2848 0
-2848 2847 0
-2848 -2845 0
c Var 'aux489' direct represents '24' with '-2847'
2802 2804 2806 2808 2810 2812 2814 2816 2818 2820 2822 2824 2826 2828 2830 2832 2834 2836 2838 2840 2842 2844 2846 2848 -2847 0
c Encoding variable: aux490 with domain: int(0..32) (representing constraint (aux485 + aux487))
c Both direct and order encoding.
c Var 'aux490' order represents '0' with '2849'
c Var 'aux490' direct represents '0' with '2849'
c Var 'aux490' order represents '1' with '2850'
-2849 2850 0
c Var 'aux490' direct represents '1' with '2851'
2849 -2850 2851 0
-2851 2850 0
-2851 -2849 0
c Var 'aux490' order represents '2' with '2852'
-2850 2852 0
c Var 'aux490' direct represents '2' with '2853'
2850 -2852 2853 0
-2853 2852 0
-2853 -2850 0
c Var 'aux490' order represents '3' with '2854'
-2852 2854 0
c Var 'aux490' direct represents '3' with '2855'
2852 -2854 2855 0
-2855 2854 0
-2855 -2852 0
c Var 'aux490' order represents '4' with '2856'
-2854 2856 0
c Var 'aux490' direct represents '4' with '2857'
2854 -2856 2857 0
-2857 2856 0
-2857 -2854 0
c Var 'aux490' order represents '5' with '2858'
-2856 2858 0
c Var 'aux490' direct represents '5' with '2859'
2856 -2858 2859 0
-2859 2858 0
-2859 -2856 0
c Var 'aux490' order represents '6' with '2860'
-2858 2860 0
c Var 'aux490' direct represents '6' with '2861'
2858 -2860 2861 0
-2861 2860 0
-2861 -2858 0
c Var 'aux490' order represents '7' with '2862'
-2860 2862 0
c Var 'aux490' direct represents '7' with '2863'
2860 -2862 2863 0
-2863 2862 0
-2863 -2860 0
c Var 'aux490' order represents '8' with '2864'
-2862 2864 0
c Var 'aux490' direct represents '8' with '2865'
2862 -2864 2865 0
-2865 2864 0
-2865 -2862 0
c Var 'aux490' order represents '9' with '2866'
-2864 2866 0
c Var 'aux490' direct represents '9' with '2867'
2864 -2866 2867 0
-2867 2866 0
-2867 -2864 0
c Var 'aux490' order represents '10' with '2868'
-2866 2868 0
c Var 'aux490' direct represents '10' with '2869'
2866 -2868 2869 0
-2869 2868 0
-2869 -2866 0
c Var 'aux490' order represents '11' with '2870'
-2868 2870 0
c Var 'aux490' direct represents '11' with '2871'
2868 -2870 2871 0
-2871 2870 0
-2871 -2868 0
c Var 'aux490' order represents '12' with '2872'
-2870 2872 0
c Var 'aux490' direct represents '12' with '2873'
2870 -2872 2873 0
-2873 2872 0
-2873 -2870 0
c Var 'aux490' order represents '13' with '2874'
-2872 2874 0
c Var 'aux490' direct represents '13' with '2875'
2872 -2874 2875 0
-2875 2874 0
-2875 -2872 0
c Var 'aux490' order represents '14' with '2876'
-2874 2876 0
c Var 'aux490' direct represents '14' with '2877'
2874 -2876 2877 0
-2877 2876 0
-2877 -2874 0
c Var 'aux490' order represents '15' with '2878'
-2876 2878 0
c Var 'aux490' direct represents '15' with '2879'
2876 -2878 2879 0
-2879 2878 0
-2879 -2876 0
c Var 'aux490' order represents '16' with '2880'
-2878 2880 0
c Var 'aux490' direct represents '16' with '2881'
2878 -2880 2881 0
-2881 2880 0
-2881 -2878 0
c Var 'aux490' order represents '17' with '2882'
-2880 2882 0
c Var 'aux490' direct represents '17' with '2883'
2880 -2882 2883 0
-2883 2882 0
-2883 -2880 0
c Var 'aux490' order represents '18' with '2884'
-2882 2884 0
c Var 'aux490' direct represents '18' with '2885'
2882 -2884 2885 0
-2885 2884 0
-2885 -2882 0
c Var 'aux490' order represents '19' with '2886'
-2884 2886 0
c Var 'aux490' direct represents '19' with '2887'
2884 -2886 2887 0
-2887 2886 0
-2887 -2884 0
c Var 'aux490' order represents '20' with '2888'
-2886 2888 0
c Var 'aux490' direct represents '20' with '2889'
2886 -2888 2889 0
-2889 2888 0
-2889 -2886 0
c Var 'aux490' order represents '21' with '2890'
-2888 2890 0
c Var 'aux490' direct represents '21' with '2891'
2888 -2890 2891 0
-2891 2890 0
-2891 -2888 0
c Var 'aux490' order represents '22' with '2892'
-2890 2892 0
c Var 'aux490' direct represents '22' with '2893'
2890 -2892 2893 0
-2893 2892 0
-2893 -2890 0
c Var 'aux490' order represents '23' with '2894'
-2892 2894 0
c Var 'aux490' direct represents '23' with '2895'
2892 -2894 2895 0
-2895 2894 0
-2895 -2892 0
c Var 'aux490' order represents '24' with '2896'
-2894 2896 0
c Var 'aux490' direct represents '24' with '2897'
2894 -2896 2897 0
-2897 2896 0
-2897 -2894 0
c Var 'aux490' order represents '25' with '2898'
-2896 2898 0
c Var 'aux490' direct represents '25' with '2899'
2896 -2898 2899 0
-2899 2898 0
-2899 -2896 0
c Var 'aux490' order represents '26' with '2900'
-2898 2900 0
c Var 'aux490' direct represents '26' with '2901'
2898 -2900 2901 0
-2901 2900 0
-2901 -2898 0
c Var 'aux490' order represents '27' with '2902'
-2900 2902 0
c Var 'aux490' direct represents '27' with '2903'
2900 -2902 2903 0
-2903 2902 0
-2903 -2900 0
c Var 'aux490' order represents '28' with '2904'
-2902 2904 0
c Var 'aux490' direct represents '28' with '2905'
2902 -2904 2905 0
-2905 2904 0
-2905 -2902 0
c Var 'aux490' order represents '29' with '2906'
-2904 2906 0
c Var 'aux490' direct represents '29' with '2907'
2904 -2906 2907 0
-2907 2906 0
-2907 -2904 0
c Var 'aux490' order represents '30' with '2908'
-2906 2908 0
c Var 'aux490' direct represents '30' with '2909'
2906 -2908 2909 0
-2909 2908 0
-2909 -2906 0
c Var 'aux490' order represents '31' with '2910'
-2908 2910 0
c Var 'aux490' direct represents '31' with '2911'
2908 -2910 2911 0
-2911 2910 0
-2911 -2908 0
c Var 'aux490' direct represents '32' with '-2910'
2849 2851 2853 2855 2857 2859 2861 2863 2865 2867 2869 2871 2873 2875 2877 2879 2881 2883 2885 2887 2889 2891 2893 2895 2897 2899 2901 2903 2905 2907 2909 2911 -2910 0
c Encoding variable: aux491 with domain: int(0..16) (representing constraint (shift(x_00002_00005, -1) + shift(x_00006_00005, -1)))
c Both direct and order encoding.
c Var 'aux491' order represents '0' with '2912'
c Var 'aux491' direct represents '0' with '2912'
c Var 'aux491' order represents '1' with '2913'
-2912 2913 0
c Var 'aux491' direct represents '1' with '2914'
2912 -2913 2914 0
-2914 2913 0
-2914 -2912 0
c Var 'aux491' order represents '2' with '2915'
-2913 2915 0
c Var 'aux491' direct represents '2' with '2916'
2913 -2915 2916 0
-2916 2915 0
-2916 -2913 0
c Var 'aux491' order represents '3' with '2917'
-2915 2917 0
c Var 'aux491' direct represents '3' with '2918'
2915 -2917 2918 0
-2918 2917 0
-2918 -2915 0
c Var 'aux491' order represents '4' with '2919'
-2917 2919 0
c Var 'aux491' direct represents '4' with '2920'
2917 -2919 2920 0
-2920 2919 0
-2920 -2917 0
c Var 'aux491' order represents '5' with '2921'
-2919 2921 0
c Var 'aux491' direct represents '5' with '2922'
2919 -2921 2922 0
-2922 2921 0
-2922 -2919 0
c Var 'aux491' order represents '6' with '2923'
-2921 2923 0
c Var 'aux491' direct represents '6' with '2924'
2921 -2923 2924 0
-2924 2923 0
-2924 -2921 0
c Var 'aux491' order represents '7' with '2925'
-2923 2925 0
c Var 'aux491' direct represents '7' with '2926'
2923 -2925 2926 0
-2926 2925 0
-2926 -2923 0
c Var 'aux491' order represents '8' with '2927'
-2925 2927 0
c Var 'aux491' direct represents '8' with '2928'
2925 -2927 2928 0
-2928 2927 0
-2928 -2925 0
c Var 'aux491' order represents '9' with '2929'
-2927 2929 0
c Var 'aux491' direct represents '9' with '2930'
2927 -2929 2930 0
-2930 2929 0
-2930 -2927 0
c Var 'aux491' order represents '10' with '2931'
-2929 2931 0
c Var 'aux491' direct represents '10' with '2932'
2929 -2931 2932 0
-2932 2931 0
-2932 -2929 0
c Var 'aux491' order represents '11' with '2933'
-2931 2933 0
c Var 'aux491' direct represents '11' with '2934'
2931 -2933 2934 0
-2934 2933 0
-2934 -2931 0
c Var 'aux491' order represents '12' with '2935'
-2933 2935 0
c Var 'aux491' direct represents '12' with '2936'
2933 -2935 2936 0
-2936 2935 0
-2936 -2933 0
c Var 'aux491' order represents '13' with '2937'
-2935 2937 0
c Var 'aux491' direct represents '13' with '2938'
2935 -2937 2938 0
-2938 2937 0
-2938 -2935 0
c Var 'aux491' order represents '14' with '2939'
-2937 2939 0
c Var 'aux491' direct represents '14' with '2940'
2937 -2939 2940 0
-2940 2939 0
-2940 -2937 0
c Var 'aux491' order represents '15' with '2941'
-2939 2941 0
c Var 'aux491' direct represents '15' with '2942'
2939 -2941 2942 0
-2942 2941 0
-2942 -2939 0
c Var 'aux491' direct represents '16' with '-2941'
2912 2914 2916 2918 2920 2922 2924 2926 2928 2930 2932 2934 2936 2938 2940 2942 -2941 0
c Encoding variable: aux492 with domain: int(0..16) (representing constraint (shift(x_00001_00005, -1) + shift(x_00007_00005, -1)))
c Both direct and order encoding.
c Var 'aux492' order represents '0' with '2943'
c Var 'aux492' direct represents '0' with '2943'
c Var 'aux492' order represents '1' with '2944'
-2943 2944 0
c Var 'aux492' direct represents '1' with '2945'
2943 -2944 2945 0
-2945 2944 0
-2945 -2943 0
c Var 'aux492' order represents '2' with '2946'
-2944 2946 0
c Var 'aux492' direct represents '2' with '2947'
2944 -2946 2947 0
-2947 2946 0
-2947 -2944 0
c Var 'aux492' order represents '3' with '2948'
-2946 2948 0
c Var 'aux492' direct represents '3' with '2949'
2946 -2948 2949 0
-2949 2948 0
-2949 -2946 0
c Var 'aux492' order represents '4' with '2950'
-2948 2950 0
c Var 'aux492' direct represents '4' with '2951'
2948 -2950 2951 0
-2951 2950 0
-2951 -2948 0
c Var 'aux492' order represents '5' with '2952'
-2950 2952 0
c Var 'aux492' direct represents '5' with '2953'
2950 -2952 2953 0
-2953 2952 0
-2953 -2950 0
c Var 'aux492' order represents '6' with '2954'
-2952 2954 0
c Var 'aux492' direct represents '6' with '2955'
2952 -2954 2955 0
-2955 2954 0
-2955 -2952 0
c Var 'aux492' order represents '7' with '2956'
-2954 2956 0
c Var 'aux492' direct represents '7' with '2957'
2954 -2956 2957 0
-2957 2956 0
-2957 -2954 0
c Var 'aux492' order represents '8' with '2958'
-2956 2958 0
c Var 'aux492' direct represents '8' with '2959'
2956 -2958 2959 0
-2959 2958 0
-2959 -2956 0
c Var 'aux492' order represents '9' with '2960'
-2958 2960 0
c Var 'aux492' direct represents '9' with '2961'
2958 -2960 2961 0
-2961 2960 0
-2961 -2958 0
c Var 'aux492' order represents '10' with '2962'
-2960 2962 0
c Var 'aux492' direct represents '10' with '2963'
2960 -2962 2963 0
-2963 2962 0
-2963 -2960 0
c Var 'aux492' order represents '11' with '2964'
-2962 2964 0
c Var 'aux492' direct represents '11' with '2965'
2962 -2964 2965 0
-2965 2964 0
-2965 -2962 0
c Var 'aux492' order represents '12' with '2966'
-2964 2966 0
c Var 'aux492' direct represents '12' with '2967'
2964 -2966 2967 0
-2967 2966 0
-2967 -2964 0
c Var 'aux492' order represents '13' with '2968'
-2966 2968 0
c Var 'aux492' direct represents '13' with '2969'
2966 -2968 2969 0
-2969 2968 0
-2969 -2966 0
c Var 'aux492' order represents '14' with '2970'
-2968 2970 0
c Var 'aux492' direct represents '14' with '2971'
2968 -2970 2971 0
-2971 2970 0
-2971 -2968 0
c Var 'aux492' order represents '15' with '2972'
-2970 2972 0
c Var 'aux492' direct represents '15' with '2973'
2970 -2972 2973 0
-2973 2972 0
-2973 -2970 0
c Var 'aux492' direct represents '16' with '-2972'
2943 2945 2947 2949 2951 2953 2955 2957 2959 2961 2963 2965 2967 2969 2971 2973 -2972 0
c Encoding variable: aux493 with domain: int(0..16) (representing constraint (shift(x_00005_00005, -1) + shift(x_00008_00005, -1)))
c Both direct and order encoding.
c Var 'aux493' order represents '0' with '2974'
c Var 'aux493' direct represents '0' with '2974'
c Var 'aux493' order represents '1' with '2975'
-2974 2975 0
c Var 'aux493' direct represents '1' with '2976'
2974 -2975 2976 0
-2976 2975 0
-2976 -2974 0
c Var 'aux493' order represents '2' with '2977'
-2975 2977 0
c Var 'aux493' direct represents '2' with '2978'
2975 -2977 2978 0
-2978 2977 0
-2978 -2975 0
c Var 'aux493' order represents '3' with '2979'
-2977 2979 0
c Var 'aux493' direct represents '3' with '2980'
2977 -2979 2980 0
-2980 2979 0
-2980 -2977 0
c Var 'aux493' order represents '4' with '2981'
-2979 2981 0
c Var 'aux493' direct represents '4' with '2982'
2979 -2981 2982 0
-2982 2981 0
-2982 -2979 0
c Var 'aux493' order represents '5' with '2983'
-2981 2983 0
c Var 'aux493' direct represents '5' with '2984'
2981 -2983 2984 0
-2984 2983 0
-2984 -2981 0
c Var 'aux493' order represents '6' with '2985'
-2983 2985 0
c Var 'aux493' direct represents '6' with '2986'
2983 -2985 2986 0
-2986 2985 0
-2986 -2983 0
c Var 'aux493' order represents '7' with '2987'
-2985 2987 0
c Var 'aux493' direct represents '7' with '2988'
2985 -2987 2988 0
-2988 2987 0
-2988 -2985 0
c Var 'aux493' order represents '8' with '2989'
-2987 2989 0
c Var 'aux493' direct represents '8' with '2990'
2987 -2989 2990 0
-2990 2989 0
-2990 -2987 0
c Var 'aux493' order represents '9' with '2991'
-2989 2991 0
c Var 'aux493' direct represents '9' with '2992'
2989 -2991 2992 0
-2992 2991 0
-2992 -2989 0
c Var 'aux493' order represents '10' with '2993'
-2991 2993 0
c Var 'aux493' direct represents '10' with '2994'
2991 -2993 2994 0
-2994 2993 0
-2994 -2991 0
c Var 'aux493' order represents '11' with '2995'
-2993 2995 0
c Var 'aux493' direct represents '11' with '2996'
2993 -2995 2996 0
-2996 2995 0
-2996 -2993 0
c Var 'aux493' order represents '12' with '2997'
-2995 2997 0
c Var 'aux493' direct represents '12' with '2998'
2995 -2997 2998 0
-2998 2997 0
-2998 -2995 0
c Var 'aux493' order represents '13' with '2999'
-2997 2999 0
c Var 'aux493' direct represents '13' with '3000'
2997 -2999 3000 0
-3000 2999 0
-3000 -2997 0
c Var 'aux493' order represents '14' with '3001'
-2999 3001 0
c Var 'aux493' direct represents '14' with '3002'
2999 -3001 3002 0
-3002 3001 0
-3002 -2999 0
c Var 'aux493' order represents '15' with '3003'
-3001 3003 0
c Var 'aux493' direct represents '15' with '3004'
3001 -3003 3004 0
-3004 3003 0
-3004 -3001 0
c Var 'aux493' direct represents '16' with '-3003'
2974 2976 2978 2980 2982 2984 2986 2988 2990 2992 2994 2996 2998 3000 3002 3004 -3003 0
c Encoding variable: aux494 with domain: int(0..16) (representing constraint (shift(x_00009_00005, -1) + shift(x_00004_00005, -1)))
c Both direct and order encoding.
c Var 'aux494' order represents '0' with '3005'
c Var 'aux494' direct represents '0' with '3005'
c Var 'aux494' order represents '1' with '3006'
-3005 3006 0
c Var 'aux494' direct represents '1' with '3007'
3005 -3006 3007 0
-3007 3006 0
-3007 -3005 0
c Var 'aux494' order represents '2' with '3008'
-3006 3008 0
c Var 'aux494' direct represents '2' with '3009'
3006 -3008 3009 0
-3009 3008 0
-3009 -3006 0
c Var 'aux494' order represents '3' with '3010'
-3008 3010 0
c Var 'aux494' direct represents '3' with '3011'
3008 -3010 3011 0
-3011 3010 0
-3011 -3008 0
c Var 'aux494' order represents '4' with '3012'
-3010 3012 0
c Var 'aux494' direct represents '4' with '3013'
3010 -3012 3013 0
-3013 3012 0
-3013 -3010 0
c Var 'aux494' order represents '5' with '3014'
-3012 3014 0
c Var 'aux494' direct represents '5' with '3015'
3012 -3014 3015 0
-3015 3014 0
-3015 -3012 0
c Var 'aux494' order represents '6' with '3016'
-3014 3016 0
c Var 'aux494' direct represents '6' with '3017'
3014 -3016 3017 0
-3017 3016 0
-3017 -3014 0
c Var 'aux494' order represents '7' with '3018'
-3016 3018 0
c Var 'aux494' direct represents '7' with '3019'
3016 -3018 3019 0
-3019 3018 0
-3019 -3016 0
c Var 'aux494' order represents '8' with '3020'
-3018 3020 0
c Var 'aux494' direct represents '8' with '3021'
3018 -3020 3021 0
-3021 3020 0
-3021 -3018 0
c Var 'aux494' order represents '9' with '3022'
-3020 3022 0
c Var 'aux494' direct represents '9' with '3023'
3020 -3022 3023 0
-3023 3022 0
-3023 -3020 0
c Var 'aux494' order represents '10' with '3024'
-3022 3024 0
c Var 'aux494' direct represents '10' with '3025'
3022 -3024 3025 0
-3025 3024 0
-3025 -3022 0
c Var 'aux494' order represents '11' with '3026'
-3024 3026 0
c Var 'aux494' direct represents '11' with '3027'
3024 -3026 3027 0
-3027 3026 0
-3027 -3024 0
c Var 'aux494' order represents '12' with '3028'
-3026 3028 0
c Var 'aux494' direct represents '12' with '3029'
3026 -3028 3029 0
-3029 3028 0
-3029 -3026 0
c Var 'aux494' order represents '13' with '3030'
-3028 3030 0
c Var 'aux494' direct represents '13' with '3031'
3028 -3030 3031 0
-3031 3030 0
-3031 -3028 0
c Var 'aux494' order represents '14' with '3032'
-3030 3032 0
c Var 'aux494' direct represents '14' with '3033'
3030 -3032 3033 0
-3033 3032 0
-3033 -3030 0
c Var 'aux494' order represents '15' with '3034'
-3032 3034 0
c Var 'aux494' direct represents '15' with '3035'
3032 -3034 3035 0
-3035 3034 0
-3035 -3032 0
c Var 'aux494' direct represents '16' with '-3034'
3005 3007 3009 3011 3013 3015 3017 3019 3021 3023 3025 3027 3029 3031 3033 3035 -3034 0
c Encoding variable: aux495 with domain: int(0..24) (representing constraint (shift(x_00003_00005, -1) + aux494))
c Both direct and order encoding.
c Var 'aux495' order represents '0' with '3036'
c Var 'aux495' direct represents '0' with '3036'
c Var 'aux495' order represents '1' with '3037'
-3036 3037 0
c Var 'aux495' direct represents '1' with '3038'
3036 -3037 3038 0
-3038 3037 0
-3038 -3036 0
c Var 'aux495' order represents '2' with '3039'
-3037 3039 0
c Var 'aux495' direct represents '2' with '3040'
3037 -3039 3040 0
-3040 3039 0
-3040 -3037 0
c Var 'aux495' order represents '3' with '3041'
-3039 3041 0
c Var 'aux495' direct represents '3' with '3042'
3039 -3041 3042 0
-3042 3041 0
-3042 -3039 0
c Var 'aux495' order represents '4' with '3043'
-3041 3043 0
c Var 'aux495' direct represents '4' with '3044'
3041 -3043 3044 0
-3044 3043 0
-3044 -3041 0
c Var 'aux495' order represents '5' with '3045'
-3043 3045 0
c Var 'aux495' direct represents '5' with '3046'
3043 -3045 3046 0
-3046 3045 0
-3046 -3043 0
c Var 'aux495' order represents '6' with '3047'
-3045 3047 0
c Var 'aux495' direct represents '6' with '3048'
3045 -3047 3048 0
-3048 3047 0
-3048 -3045 0
c Var 'aux495' order represents '7' with '3049'
-3047 3049 0
c Var 'aux495' direct represents '7' with '3050'
3047 -3049 3050 0
-3050 3049 0
-3050 -3047 0
c Var 'aux495' order represents '8' with '3051'
-3049 3051 0
c Var 'aux495' direct represents '8' with '3052'
3049 -3051 3052 0
-3052 3051 0
-3052 -3049 0
c Var 'aux495' order represents '9' with '3053'
-3051 3053 0
c Var 'aux495' direct represents '9' with '3054'
3051 -3053 3054 0
-3054 3053 0
-3054 -3051 0
c Var 'aux495' order represents '10' with '3055'
-3053 3055 0
c Var 'aux495' direct represents '10' with '3056'
3053 -3055 3056 0
-3056 3055 0
-3056 -3053 0
c Var 'aux495' order represents '11' with '3057'
-3055 3057 0
c Var 'aux495' direct represents '11' with '3058'
3055 -3057 3058 0
-3058 3057 0
-3058 -3055 0
c Var 'aux495' order represents '12' with '3059'
-3057 3059 0
c Var 'aux495' direct represents '12' with '3060'
3057 -3059 3060 0
-3060 3059 0
-3060 -3057 0
c Var 'aux495' order represents '13' with '3061'
-3059 3061 0
c Var 'aux495' direct represents '13' with '3062'
3059 -3061 3062 0
-3062 3061 0
-3062 -3059 0
c Var 'aux495' order represents '14' with '3063'
-3061 3063 0
c Var 'aux495' direct represents '14' with '3064'
3061 -3063 3064 0
-3064 3063 0
-3064 -3061 0
c Var 'aux495' order represents '15' with '3065'
-3063 3065 0
c Var 'aux495' direct represents '15' with '3066'
3063 -3065 3066 0
-3066 3065 0
-3066 -3063 0
c Var 'aux495' order represents '16' with '3067'
-3065 3067 0
c Var 'aux495' direct represents '16' with '3068'
3065 -3067 3068 0
-3068 3067 0
-3068 -3065 0
c Var 'aux495' order represents '17' with '3069'
-3067 3069 0
c Var 'aux495' direct represents '17' with '3070'
3067 -3069 3070 0
-3070 3069 0
-3070 -3067 0
c Var 'aux495' order represents '18' with '3071'
-3069 3071 0
c Var 'aux495' direct represents '18' with '3072'
3069 -3071 3072 0
-3072 3071 0
-3072 -3069 0
c Var 'aux495' order represents '19' with '3073'
-3071 3073 0
c Var 'aux495' direct represents '19' with '3074'
3071 -3073 3074 0
-3074 3073 0
-3074 -3071 0
c Var 'aux495' order represents '20' with '3075'
-3073 3075 0
c Var 'aux495' direct represents '20' with '3076'
3073 -3075 3076 0
-3076 3075 0
-3076 -3073 0
c Var 'aux495' order represents '21' with '3077'
-3075 3077 0
c Var 'aux495' direct represents '21' with '3078'
3075 -3077 3078 0
-3078 3077 0
-3078 -3075 0
c Var 'aux495' order represents '22' with '3079'
-3077 3079 0
c Var 'aux495' direct represents '22' with '3080'
3077 -3079 3080 0
-3080 3079 0
-3080 -3077 0
c Var 'aux495' order represents '23' with '3081'
-3079 3081 0
c Var 'aux495' direct represents '23' with '3082'
3079 -3081 3082 0
-3082 3081 0
-3082 -3079 0
c Var 'aux495' direct represents '24' with '-3081'
3036 3038 3040 3042 3044 3046 3048 3050 3052 3054 3056 3058 3060 3062 3064 3066 3068 3070 3072 3074 3076 3078 3080 3082 -3081 0
c Encoding variable: aux496 with domain: int(0..32) (representing constraint (aux491 + aux493))
c Both direct and order encoding.
c Var 'aux496' order represents '0' with '3083'
c Var 'aux496' direct represents '0' with '3083'
c Var 'aux496' order represents '1' with '3084'
-3083 3084 0
c Var 'aux496' direct represents '1' with '3085'
3083 -3084 3085 0
-3085 3084 0
-3085 -3083 0
c Var 'aux496' order represents '2' with '3086'
-3084 3086 0
c Var 'aux496' direct represents '2' with '3087'
3084 -3086 3087 0
-3087 3086 0
-3087 -3084 0
c Var 'aux496' order represents '3' with '3088'
-3086 3088 0
c Var 'aux496' direct represents '3' with '3089'
3086 -3088 3089 0
-3089 3088 0
-3089 -3086 0
c Var 'aux496' order represents '4' with '3090'
-3088 3090 0
c Var 'aux496' direct represents '4' with '3091'
3088 -3090 3091 0
-3091 3090 0
-3091 -3088 0
c Var 'aux496' order represents '5' with '3092'
-3090 3092 0
c Var 'aux496' direct represents '5' with '3093'
3090 -3092 3093 0
-3093 3092 0
-3093 -3090 0
c Var 'aux496' order represents '6' with '3094'
-3092 3094 0
c Var 'aux496' direct represents '6' with '3095'
3092 -3094 3095 0
-3095 3094 0
-3095 -3092 0
c Var 'aux496' order represents '7' with '3096'
-3094 3096 0
c Var 'aux496' direct represents '7' with '3097'
3094 -3096 3097 0
-3097 3096 0
-3097 -3094 0
c Var 'aux496' order represents '8' with '3098'
-3096 3098 0
c Var 'aux496' direct represents '8' with '3099'
3096 -3098 3099 0
-3099 3098 0
-3099 -3096 0
c Var 'aux496' order represents '9' with '3100'
-3098 3100 0
c Var 'aux496' direct represents '9' with '3101'
3098 -3100 3101 0
-3101 3100 0
-3101 -3098 0
c Var 'aux496' order represents '10' with '3102'
-3100 3102 0
c Var 'aux496' direct represents '10' with '3103'
3100 -3102 3103 0
-3103 3102 0
-3103 -3100 0
c Var 'aux496' order represents '11' with '3104'
-3102 3104 0
c Var 'aux496' direct represents '11' with '3105'
3102 -3104 3105 0
-3105 3104 0
-3105 -3102 0
c Var 'aux496' order represents '12' with '3106'
-3104 3106 0
c Var 'aux496' direct represents '12' with '3107'
3104 -3106 3107 0
-3107 3106 0
-3107 -3104 0
c Var 'aux496' order represents '13' with '3108'
-3106 3108 0
c Var 'aux496' direct represents '13' with '3109'
3106 -3108 3109 0
-3109 3108 0
-3109 -3106 0
c Var 'aux496' order represents '14' with '3110'
-3108 3110 0
c Var 'aux496' direct represents '14' with '3111'
3108 -3110 3111 0
-3111 3110 0
-3111 -3108 0
c Var 'aux496' order represents '15' with '3112'
-3110 3112 0
c Var 'aux496' direct represents '15' with '3113'
3110 -3112 3113 0
-3113 3112 0
-3113 -3110 0
c Var 'aux496' order represents '16' with '3114'
-3112 3114 0
c Var 'aux496' direct represents '16' with '3115'
3112 -3114 3115 0
-3115 3114 0
-3115 -3112 0
c Var 'aux496' order represents '17' with '3116'
-3114 3116 0
c Var 'aux496' direct represents '17' with '3117'
3114 -3116 3117 0
-3117 3116 0
-3117 -3114 0
c Var 'aux496' order represents '18' with '3118'
-3116 3118 0
c Var 'aux496' direct represents '18' with '3119'
3116 -3118 3119 0
-3119 3118 0
-3119 -3116 0
c Var 'aux496' order represents '19' with '3120'
-3118 3120 0
c Var 'aux496' direct represents '19' with '3121'
3118 -3120 3121 0
-3121 3120 0
-3121 -3118 0
c Var 'aux496' order represents '20' with '3122'
-3120 3122 0
c Var 'aux496' direct represents '20' with '3123'
3120 -3122 3123 0
-3123 3122 0
-3123 -3120 0
c Var 'aux496' order represents '21' with '3124'
-3122 3124 0
c Var 'aux496' direct represents '21' with '3125'
3122 -3124 3125 0
-3125 3124 0
-3125 -3122 0
c Var 'aux496' order represents '22' with '3126'
-3124 3126 0
c Var 'aux496' direct represents '22' with '3127'
3124 -3126 3127 0
-3127 3126 0
-3127 -3124 0
c Var 'aux496' order represents '23' with '3128'
-3126 3128 0
c Var 'aux496' direct represents '23' with '3129'
3126 -3128 3129 0
-3129 3128 0
-3129 -3126 0
c Var 'aux496' order represents '24' with '3130'
-3128 3130 0
c Var 'aux496' direct represents '24' with '3131'
3128 -3130 3131 0
-3131 3130 0
-3131 -3128 0
c Var 'aux496' order represents '25' with '3132'
-3130 3132 0
c Var 'aux496' direct represents '25' with '3133'
3130 -3132 3133 0
-3133 3132 0
-3133 -3130 0
c Var 'aux496' order represents '26' with '3134'
-3132 3134 0
c Var 'aux496' direct represents '26' with '3135'
3132 -3134 3135 0
-3135 3134 0
-3135 -3132 0
c Var 'aux496' order represents '27' with '3136'
-3134 3136 0
c Var 'aux496' direct represents '27' with '3137'
3134 -3136 3137 0
-3137 3136 0
-3137 -3134 0
c Var 'aux496' order represents '28' with '3138'
-3136 3138 0
c Var 'aux496' direct represents '28' with '3139'
3136 -3138 3139 0
-3139 3138 0
-3139 -3136 0
c Var 'aux496' order represents '29' with '3140'
-3138 3140 0
c Var 'aux496' direct represents '29' with '3141'
3138 -3140 3141 0
-3141 3140 0
-3141 -3138 0
c Var 'aux496' order represents '30' with '3142'
-3140 3142 0
c Var 'aux496' direct represents '30' with '3143'
3140 -3142 3143 0
-3143 3142 0
-3143 -3140 0
c Var 'aux496' order represents '31' with '3144'
-3142 3144 0
c Var 'aux496' direct represents '31' with '3145'
3142 -3144 3145 0
-3145 3144 0
-3145 -3142 0
c Var 'aux496' direct represents '32' with '-3144'
3083 3085 3087 3089 3091 3093 3095 3097 3099 3101 3103 3105 3107 3109 3111 3113 3115 3117 3119 3121 3123 3125 3127 3129 3131 3133 3135 3137 3139 3141 3143 3145 -3144 0
c Encoding variable: aux497 with domain: int(0..16) (representing constraint (shift(x_00002_00006, -1) + shift(x_00006_00006, -1)))
c Both direct and order encoding.
c Var 'aux497' order represents '0' with '3146'
c Var 'aux497' direct represents '0' with '3146'
c Var 'aux497' order represents '1' with '3147'
-3146 3147 0
c Var 'aux497' direct represents '1' with '3148'
3146 -3147 3148 0
-3148 3147 0
-3148 -3146 0
c Var 'aux497' order represents '2' with '3149'
-3147 3149 0
c Var 'aux497' direct represents '2' with '3150'
3147 -3149 3150 0
-3150 3149 0
-3150 -3147 0
c Var 'aux497' order represents '3' with '3151'
-3149 3151 0
c Var 'aux497' direct represents '3' with '3152'
3149 -3151 3152 0
-3152 3151 0
-3152 -3149 0
c Var 'aux497' order represents '4' with '3153'
-3151 3153 0
c Var 'aux497' direct represents '4' with '3154'
3151 -3153 3154 0
-3154 3153 0
-3154 -3151 0
c Var 'aux497' order represents '5' with '3155'
-3153 3155 0
c Var 'aux497' direct represents '5' with '3156'
3153 -3155 3156 0
-3156 3155 0
-3156 -3153 0
c Var 'aux497' order represents '6' with '3157'
-3155 3157 0
c Var 'aux497' direct represents '6' with '3158'
3155 -3157 3158 0
-3158 3157 0
-3158 -3155 0
c Var 'aux497' order represents '7' with '3159'
-3157 3159 0
c Var 'aux497' direct represents '7' with '3160'
3157 -3159 3160 0
-3160 3159 0
-3160 -3157 0
c Var 'aux497' order represents '8' with '3161'
-3159 3161 0
c Var 'aux497' direct represents '8' with '3162'
3159 -3161 3162 0
-3162 3161 0
-3162 -3159 0
c Var 'aux497' order represents '9' with '3163'
-3161 3163 0
c Var 'aux497' direct represents '9' with '3164'
3161 -3163 3164 0
-3164 3163 0
-3164 -3161 0
c Var 'aux497' order represents '10' with '3165'
-3163 3165 0
c Var 'aux497' direct represents '10' with '3166'
3163 -3165 3166 0
-3166 3165 0
-3166 -3163 0
c Var 'aux497' order represents '11' with '3167'
-3165 3167 0
c Var 'aux497' direct represents '11' with '3168'
3165 -3167 3168 0
-3168 3167 0
-3168 -3165 0
c Var 'aux497' order represents '12' with '3169'
-3167 3169 0
c Var 'aux497' direct represents '12' with '3170'
3167 -3169 3170 0
-3170 3169 0
-3170 -3167 0
c Var 'aux497' order represents '13' with '3171'
-3169 3171 0
c Var 'aux497' direct represents '13' with '3172'
3169 -3171 3172 0
-3172 3171 0
-3172 -3169 0
c Var 'aux497' order represents '14' with '3173'
-3171 3173 0
c Var 'aux497' direct represents '14' with '3174'
3171 -3173 3174 0
-3174 3173 0
-3174 -3171 0
c Var 'aux497' order represents '15' with '3175'
-3173 3175 0
c Var 'aux497' direct represents '15' with '3176'
3173 -3175 3176 0
-3176 3175 0
-3176 -3173 0
c Var 'aux497' direct represents '16' with '-3175'
3146 3148 3150 3152 3154 3156 3158 3160 3162 3164 3166 3168 3170 3172 3174 3176 -3175 0
c Encoding variable: aux498 with domain: int(0..16) (representing constraint (shift(x_00001_00006, -1) + shift(x_00007_00006, -1)))
c Both direct and order encoding.
c Var 'aux498' order represents '0' with '3177'
c Var 'aux498' direct represents '0' with '3177'
c Var 'aux498' order represents '1' with '3178'
-3177 3178 0
c Var 'aux498' direct represents '1' with '3179'
3177 -3178 3179 0
-3179 3178 0
-3179 -3177 0
c Var 'aux498' order represents '2' with '3180'
-3178 3180 0
c Var 'aux498' direct represents '2' with '3181'
3178 -3180 3181 0
-3181 3180 0
-3181 -3178 0
c Var 'aux498' order represents '3' with '3182'
-3180 3182 0
c Var 'aux498' direct represents '3' with '3183'
3180 -3182 3183 0
-3183 3182 0
-3183 -3180 0
c Var 'aux498' order represents '4' with '3184'
-3182 3184 0
c Var 'aux498' direct represents '4' with '3185'
3182 -3184 3185 0
-3185 3184 0
-3185 -3182 0
c Var 'aux498' order represents '5' with '3186'
-3184 3186 0
c Var 'aux498' direct represents '5' with '3187'
3184 -3186 3187 0
-3187 3186 0
-3187 -3184 0
c Var 'aux498' order represents '6' with '3188'
-3186 3188 0
c Var 'aux498' direct represents '6' with '3189'
3186 -3188 3189 0
-3189 3188 0
-3189 -3186 0
c Var 'aux498' order represents '7' with '3190'
-3188 3190 0
c Var 'aux498' direct represents '7' with '3191'
3188 -3190 3191 0
-3191 3190 0
-3191 -3188 0
c Var 'aux498' order represents '8' with '3192'
-3190 3192 0
c Var 'aux498' direct represents '8' with '3193'
3190 -3192 3193 0
-3193 3192 0
-3193 -3190 0
c Var 'aux498' order represents '9' with '3194'
-3192 3194 0
c Var 'aux498' direct represents '9' with '3195'
3192 -3194 3195 0
-3195 3194 0
-3195 -3192 0
c Var 'aux498' order represents '10' with '3196'
-3194 3196 0
c Var 'aux498' direct represents '10' with '3197'
3194 -3196 3197 0
-3197 3196 0
-3197 -3194 0
c Var 'aux498' order represents '11' with '3198'
-3196 3198 0
c Var 'aux498' direct represents '11' with '3199'
3196 -3198 3199 0
-3199 3198 0
-3199 -3196 0
c Var 'aux498' order represents '12' with '3200'
-3198 3200 0
c Var 'aux498' direct represents '12' with '3201'
3198 -3200 3201 0
-3201 3200 0
-3201 -3198 0
c Var 'aux498' order represents '13' with '3202'
-3200 3202 0
c Var 'aux498' direct represents '13' with '3203'
3200 -3202 3203 0
-3203 3202 0
-3203 -3200 0
c Var 'aux498' order represents '14' with '3204'
-3202 3204 0
c Var 'aux498' direct represents '14' with '3205'
3202 -3204 3205 0
-3205 3204 0
-3205 -3202 0
c Var 'aux498' order represents '15' with '3206'
-3204 3206 0
c Var 'aux498' direct represents '15' with '3207'
3204 -3206 3207 0
-3207 3206 0
-3207 -3204 0
c Var 'aux498' direct represents '16' with '-3206'
3177 3179 3181 3183 3185 3187 3189 3191 3193 3195 3197 3199 3201 3203 3205 3207 -3206 0
c Encoding variable: aux499 with domain: int(0..16) (representing constraint (shift(x_00005_00006, -1) + shift(x_00008_00006, -1)))
c Both direct and order encoding.
c Var 'aux499' order represents '0' with '3208'
c Var 'aux499' direct represents '0' with '3208'
c Var 'aux499' order represents '1' with '3209'
-3208 3209 0
c Var 'aux499' direct represents '1' with '3210'
3208 -3209 3210 0
-3210 3209 0
-3210 -3208 0
c Var 'aux499' order represents '2' with '3211'
-3209 3211 0
c Var 'aux499' direct represents '2' with '3212'
3209 -3211 3212 0
-3212 3211 0
-3212 -3209 0
c Var 'aux499' order represents '3' with '3213'
-3211 3213 0
c Var 'aux499' direct represents '3' with '3214'
3211 -3213 3214 0
-3214 3213 0
-3214 -3211 0
c Var 'aux499' order represents '4' with '3215'
-3213 3215 0
c Var 'aux499' direct represents '4' with '3216'
3213 -3215 3216 0
-3216 3215 0
-3216 -3213 0
c Var 'aux499' order represents '5' with '3217'
-3215 3217 0
c Var 'aux499' direct represents '5' with '3218'
3215 -3217 3218 0
-3218 3217 0
-3218 -3215 0
c Var 'aux499' order represents '6' with '3219'
-3217 3219 0
c Var 'aux499' direct represents '6' with '3220'
3217 -3219 3220 0
-3220 3219 0
-3220 -3217 0
c Var 'aux499' order represents '7' with '3221'
-3219 3221 0
c Var 'aux499' direct represents '7' with '3222'
3219 -3221 3222 0
-3222 3221 0
-3222 -3219 0
c Var 'aux499' order represents '8' with '3223'
-3221 3223 0
c Var 'aux499' direct represents '8' with '3224'
3221 -3223 3224 0
-3224 3223 0
-3224 -3221 0
c Var 'aux499' order represents '9' with '3225'
-3223 3225 0
c Var 'aux499' direct represents '9' with '3226'
3223 -3225 3226 0
-3226 3225 0
-3226 -3223 0
c Var 'aux499' order represents '10' with '3227'
-3225 3227 0
c Var 'aux499' direct represents '10' with '3228'
3225 -3227 3228 0
-3228 3227 0
-3228 -3225 0
c Var 'aux499' order represents '11' with '3229'
-3227 3229 0
c Var 'aux499' direct represents '11' with '3230'
3227 -3229 3230 0
-3230 3229 0
-3230 -3227 0
c Var 'aux499' order represents '12' with '3231'
-3229 3231 0
c Var 'aux499' direct represents '12' with '3232'
3229 -3231 3232 0
-3232 3231 0
-3232 -3229 0
c Var 'aux499' order represents '13' with '3233'
-3231 3233 0
c Var 'aux499' direct represents '13' with '3234'
3231 -3233 3234 0
-3234 3233 0
-3234 -3231 0
c Var 'aux499' order represents '14' with '3235'
-3233 3235 0
c Var 'aux499' direct represents '14' with '3236'
3233 -3235 3236 0
-3236 3235 0
-3236 -3233 0
c Var 'aux499' order represents '15' with '3237'
-3235 3237 0
c Var 'aux499' direct represents '15' with '3238'
3235 -3237 3238 0
-3238 3237 0
-3238 -3235 0
c Var 'aux499' direct represents '16' with '-3237'
3208 3210 3212 3214 3216 3218 3220 3222 3224 3226 3228 3230 3232 3234 3236 3238 -3237 0
c Encoding variable: aux500 with domain: int(0..16) (representing constraint (shift(x_00009_00006, -1) + shift(x_00004_00006, -1)))
c Both direct and order encoding.
c Var 'aux500' order represents '0' with '3239'
c Var 'aux500' direct represents '0' with '3239'
c Var 'aux500' order represents '1' with '3240'
-3239 3240 0
c Var 'aux500' direct represents '1' with '3241'
3239 -3240 3241 0
-3241 3240 0
-3241 -3239 0
c Var 'aux500' order represents '2' with '3242'
-3240 3242 0
c Var 'aux500' direct represents '2' with '3243'
3240 -3242 3243 0
-3243 3242 0
-3243 -3240 0
c Var 'aux500' order represents '3' with '3244'
-3242 3244 0
c Var 'aux500' direct represents '3' with '3245'
3242 -3244 3245 0
-3245 3244 0
-3245 -3242 0
c Var 'aux500' order represents '4' with '3246'
-3244 3246 0
c Var 'aux500' direct represents '4' with '3247'
3244 -3246 3247 0
-3247 3246 0
-3247 -3244 0
c Var 'aux500' order represents '5' with '3248'
-3246 3248 0
c Var 'aux500' direct represents '5' with '3249'
3246 -3248 3249 0
-3249 3248 0
-3249 -3246 0
c Var 'aux500' order represents '6' with '3250'
-3248 3250 0
c Var 'aux500' direct represents '6' with '3251'
3248 -3250 3251 0
-3251 3250 0
-3251 -3248 0
c Var 'aux500' order represents '7' with '3252'
-3250 3252 0
c Var 'aux500' direct represents '7' with '3253'
3250 -3252 3253 0
-3253 3252 0
-3253 -3250 0
c Var 'aux500' order represents '8' with '3254'
-3252 3254 0
c Var 'aux500' direct represents '8' with '3255'
3252 -3254 3255 0
-3255 3254 0
-3255 -3252 0
c Var 'aux500' order represents '9' with '3256'
-3254 3256 0
c Var 'aux500' direct represents '9' with '3257'
3254 -3256 3257 0
-3257 3256 0
-3257 -3254 0
c Var 'aux500' order represents '10' with '3258'
-3256 3258 0
c Var 'aux500' direct represents '10' with '3259'
3256 -3258 3259 0
-3259 3258 0
-3259 -3256 0
c Var 'aux500' order represents '11' with '3260'
-3258 3260 0
c Var 'aux500' direct represents '11' with '3261'
3258 -3260 3261 0
-3261 3260 0
-3261 -3258 0
c Var 'aux500' order represents '12' with '3262'
-3260 3262 0
c Var 'aux500' direct represents '12' with '3263'
3260 -3262 3263 0
-3263 3262 0
-3263 -3260 0
c Var 'aux500' order represents '13' with '3264'
-3262 3264 0
c Var 'aux500' direct represents '13' with '3265'
3262 -3264 3265 0
-3265 3264 0
-3265 -3262 0
c Var 'aux500' order represents '14' with '3266'
-3264 3266 0
c Var 'aux500' direct represents '14' with '3267'
3264 -3266 3267 0
-3267 3266 0
-3267 -3264 0
c Var 'aux500' order represents '15' with '3268'
-3266 3268 0
c Var 'aux500' direct represents '15' with '3269'
3266 -3268 3269 0
-3269 3268 0
-3269 -3266 0
c Var 'aux500' direct represents '16' with '-3268'
3239 3241 3243 3245 3247 3249 3251 3253 3255 3257 3259 3261 3263 3265 3267 3269 -3268 0
c Encoding variable: aux501 with domain: int(0..24) (representing constraint (shift(x_00003_00006, -1) + aux500))
c Both direct and order encoding.
c Var 'aux501' order represents '0' with '3270'
c Var 'aux501' direct represents '0' with '3270'
c Var 'aux501' order represents '1' with '3271'
-3270 3271 0
c Var 'aux501' direct represents '1' with '3272'
3270 -3271 3272 0
-3272 3271 0
-3272 -3270 0
c Var 'aux501' order represents '2' with '3273'
-3271 3273 0
c Var 'aux501' direct represents '2' with '3274'
3271 -3273 3274 0
-3274 3273 0
-3274 -3271 0
c Var 'aux501' order represents '3' with '3275'
-3273 3275 0
c Var 'aux501' direct represents '3' with '3276'
3273 -3275 3276 0
-3276 3275 0
-3276 -3273 0
c Var 'aux501' order represents '4' with '3277'
-3275 3277 0
c Var 'aux501' direct represents '4' with '3278'
3275 -3277 3278 0
-3278 3277 0
-3278 -3275 0
c Var 'aux501' order represents '5' with '3279'
-3277 3279 0
c Var 'aux501' direct represents '5' with '3280'
3277 -3279 3280 0
-3280 3279 0
-3280 -3277 0
c Var 'aux501' order represents '6' with '3281'
-3279 3281 0
c Var 'aux501' direct represents '6' with '3282'
3279 -3281 3282 0
-3282 3281 0
-3282 -3279 0
c Var 'aux501' order represents '7' with '3283'
-3281 3283 0
c Var 'aux501' direct represents '7' with '3284'
3281 -3283 3284 0
-3284 3283 0
-3284 -3281 0
c Var 'aux501' order represents '8' with '3285'
-3283 3285 0
c Var 'aux501' direct represents '8' with '3286'
3283 -3285 3286 0
-3286 3285 0
-3286 -3283 0
c Var 'aux501' order represents '9' with '3287'
-3285 3287 0
c Var 'aux501' direct represents '9' with '3288'
3285 -3287 3288 0
-3288 3287 0
-3288 -3285 0
c Var 'aux501' order represents '10' with '3289'
-3287 3289 0
c Var 'aux501' direct represents '10' with '3290'
3287 -3289 3290 0
-3290 3289 0
-3290 -3287 0
c Var 'aux501' order represents '11' with '3291'
-3289 3291 0
c Var 'aux501' direct represents '11' with '3292'
3289 -3291 3292 0
-3292 3291 0
-3292 -3289 0
c Var 'aux501' order represents '12' with '3293'
-3291 3293 0
c Var 'aux501' direct represents '12' with '3294'
3291 -3293 3294 0
-3294 3293 0
-3294 -3291 0
c Var 'aux501' order represents '13' with '3295'
-3293 3295 0
c Var 'aux501' direct represents '13' with '3296'
3293 -3295 3296 0
-3296 3295 0
-3296 -3293 0
c Var 'aux501' order represents '14' with '3297'
-3295 3297 0
c Var 'aux501' direct represents '14' with '3298'
3295 -3297 3298 0
-3298 3297 0
-3298 -3295 0
c Var 'aux501' order represents '15' with '3299'
-3297 3299 0
c Var 'aux501' direct represents '15' with '3300'
3297 -3299 3300 0
-3300 3299 0
-3300 -3297 0
c Var 'aux501' order represents '16' with '3301'
-3299 3301 0
c Var 'aux501' direct represents '16' with '3302'
3299 -3301 3302 0
-3302 3301 0
-3302 -3299 0
c Var 'aux501' order represents '17' with '3303'
-3301 3303 0
c Var 'aux501' direct represents '17' with '3304'
3301 -3303 3304 0
-3304 3303 0
-3304 -3301 0
c Var 'aux501' order represents '18' with '3305'
-3303 3305 0
c Var 'aux501' direct represents '18' with '3306'
3303 -3305 3306 0
-3306 3305 0
-3306 -3303 0
c Var 'aux501' order represents '19' with '3307'
-3305 3307 0
c Var 'aux501' direct represents '19' with '3308'
3305 -3307 3308 0
-3308 3307 0
-3308 -3305 0
c Var 'aux501' order represents '20' with '3309'
-3307 3309 0
c Var 'aux501' direct represents '20' with '3310'
3307 -3309 3310 0
-3310 3309 0
-3310 -3307 0
c Var 'aux501' order represents '21' with '3311'
-3309 3311 0
c Var 'aux501' direct represents '21' with '3312'
3309 -3311 3312 0
-3312 3311 0
-3312 -3309 0
c Var 'aux501' order represents '22' with '3313'
-3311 3313 0
c Var 'aux501' direct represents '22' with '3314'
3311 -3313 3314 0
-3314 3313 0
-3314 -3311 0
c Var 'aux501' order represents '23' with '3315'
-3313 3315 0
c Var 'aux501' direct represents '23' with '3316'
3313 -3315 3316 0
-3316 3315 0
-3316 -3313 0
c Var 'aux501' direct represents '24' with '-3315'
3270 3272 3274 3276 3278 3280 3282 3284 3286 3288 3290 3292 3294 3296 3298 3300 3302 3304 3306 3308 3310 3312 3314 3316 -3315 0
c Encoding variable: aux502 with domain: int(0..32) (representing constraint (aux497 + aux499))
c Both direct and order encoding.
c Var 'aux502' order represents '0' with '3317'
c Var 'aux502' direct represents '0' with '3317'
c Var 'aux502' order represents '1' with '3318'
-3317 3318 0
c Var 'aux502' direct represents '1' with '3319'
3317 -3318 3319 0
-3319 3318 0
-3319 -3317 0
c Var 'aux502' order represents '2' with '3320'
-3318 3320 0
c Var 'aux502' direct represents '2' with '3321'
3318 -3320 3321 0
-3321 3320 0
-3321 -3318 0
c Var 'aux502' order represents '3' with '3322'
-3320 3322 0
c Var 'aux502' direct represents '3' with '3323'
3320 -3322 3323 0
-3323 3322 0
-3323 -3320 0
c Var 'aux502' order represents '4' with '3324'
-3322 3324 0
c Var 'aux502' direct represents '4' with '3325'
3322 -3324 3325 0
-3325 3324 0
-3325 -3322 0
c Var 'aux502' order represents '5' with '3326'
-3324 3326 0
c Var 'aux502' direct represents '5' with '3327'
3324 -3326 3327 0
-3327 3326 0
-3327 -3324 0
c Var 'aux502' order represents '6' with '3328'
-3326 3328 0
c Var 'aux502' direct represents '6' with '3329'
3326 -3328 3329 0
-3329 3328 0
-3329 -3326 0
c Var 'aux502' order represents '7' with '3330'
-3328 3330 0
c Var 'aux502' direct represents '7' with '3331'
3328 -3330 3331 0
-3331 3330 0
-3331 -3328 0
c Var 'aux502' order represents '8' with '3332'
-3330 3332 0
c Var 'aux502' direct represents '8' with '3333'
3330 -3332 3333 0
-3333 3332 0
-3333 -3330 0
c Var 'aux502' order represents '9' with '3334'
-3332 3334 0
c Var 'aux502' direct represents '9' with '3335'
3332 -3334 3335 0
-3335 3334 0
-3335 -3332 0
c Var 'aux502' order represents '10' with '3336'
-3334 3336 0
c Var 'aux502' direct represents '10' with '3337'
3334 -3336 3337 0
-3337 3336 0
-3337 -3334 0
c Var 'aux502' order represents '11' with '3338'
-3336 3338 0
c Var 'aux502' direct represents '11' with '3339'
3336 -3338 3339 0
-3339 3338 0
-3339 -3336 0
c Var 'aux502' order represents '12' with '3340'
-3338 3340 0
c Var 'aux502' direct represents '12' with '3341'
3338 -3340 3341 0
-3341 3340 0
-3341 -3338 0
c Var 'aux502' order represents '13' with '3342'
-3340 3342 0
c Var 'aux502' direct represents '13' with '3343'
3340 -3342 3343 0
-3343 3342 0
-3343 -3340 0
c Var 'aux502' order represents '14' with '3344'
-3342 3344 0
c Var 'aux502' direct represents '14' with '3345'
3342 -3344 3345 0
-3345 3344 0
-3345 -3342 0
c Var 'aux502' order represents '15' with '3346'
-3344 3346 0
c Var 'aux502' direct represents '15' with '3347'
3344 -3346 3347 0
-3347 3346 0
-3347 -3344 0
c Var 'aux502' order represents '16' with '3348'
-3346 3348 0
c Var 'aux502' direct represents '16' with '3349'
3346 -3348 3349 0
-3349 3348 0
-3349 -3346 0
c Var 'aux502' order represents '17' with '3350'
-3348 3350 0
c Var 'aux502' direct represents '17' with '3351'
3348 -3350 3351 0
-3351 3350 0
-3351 -3348 0
c Var 'aux502' order represents '18' with '3352'
-3350 3352 0
c Var 'aux502' direct represents '18' with '3353'
3350 -3352 3353 0
-3353 3352 0
-3353 -3350 0
c Var 'aux502' order represents '19' with '3354'
-3352 3354 0
c Var 'aux502' direct represents '19' with '3355'
3352 -3354 3355 0
-3355 3354 0
-3355 -3352 0
c Var 'aux502' order represents '20' with '3356'
-3354 3356 0
c Var 'aux502' direct represents '20' with '3357'
3354 -3356 3357 0
-3357 3356 0
-3357 -3354 0
c Var 'aux502' order represents '21' with '3358'
-3356 3358 0
c Var 'aux502' direct represents '21' with '3359'
3356 -3358 3359 0
-3359 3358 0
-3359 -3356 0
c Var 'aux502' order represents '22' with '3360'
-3358 3360 0
c Var 'aux502' direct represents '22' with '3361'
3358 -3360 3361 0
-3361 3360 0
-3361 -3358 0
c Var 'aux502' order represents '23' with '3362'
-3360 3362 0
c Var 'aux502' direct represents '23' with '3363'
3360 -3362 3363 0
-3363 3362 0
-3363 -3360 0
c Var 'aux502' order represents '24' with '3364'
-3362 3364 0
c Var 'aux502' direct represents '24' with '3365'
3362 -3364 3365 0
-3365 3364 0
-3365 -3362 0
c Var 'aux502' order represents '25' with '3366'
-3364 3366 0
c Var 'aux502' direct represents '25' with '3367'
3364 -3366 3367 0
-3367 3366 0
-3367 -3364 0
c Var 'aux502' order represents '26' with '3368'
-3366 3368 0
c Var 'aux502' direct represents '26' with '3369'
3366 -3368 3369 0
-3369 3368 0
-3369 -3366 0
c Var 'aux502' order represents '27' with '3370'
-3368 3370 0
c Var 'aux502' direct represents '27' with '3371'
3368 -3370 3371 0
-3371 3370 0
-3371 -3368 0
c Var 'aux502' order represents '28' with '3372'
-3370 3372 0
c Var 'aux502' direct represents '28' with '3373'
3370 -3372 3373 0
-3373 3372 0
-3373 -3370 0
c Var 'aux502' order represents '29' with '3374'
-3372 3374 0
c Var 'aux502' direct represents '29' with '3375'
3372 -3374 3375 0
-3375 3374 0
-3375 -3372 0
c Var 'aux502' order represents '30' with '3376'
-3374 3376 0
c Var 'aux502' direct represents '30' with '3377'
3374 -3376 3377 0
-3377 3376 0
-3377 -3374 0
c Var 'aux502' order represents '31' with '3378'
-3376 3378 0
c Var 'aux502' direct represents '31' with '3379'
3376 -3378 3379 0
-3379 3378 0
-3379 -3376 0
c Var 'aux502' direct represents '32' with '-3378'
3317 3319 3321 3323 3325 3327 3329 3331 3333 3335 3337 3339 3341 3343 3345 3347 3349 3351 3353 3355 3357 3359 3361 3363 3365 3367 3369 3371 3373 3375 3377 3379 -3378 0
c Encoding variable: aux503 with domain: int(0..16) (representing constraint (shift(x_00002_00007, -1) + shift(x_00006_00007, -1)))
c Both direct and order encoding.
c Var 'aux503' order represents '0' with '3380'
c Var 'aux503' direct represents '0' with '3380'
c Var 'aux503' order represents '1' with '3381'
-3380 3381 0
c Var 'aux503' direct represents '1' with '3382'
3380 -3381 3382 0
-3382 3381 0
-3382 -3380 0
c Var 'aux503' order represents '2' with '3383'
-3381 3383 0
c Var 'aux503' direct represents '2' with '3384'
3381 -3383 3384 0
-3384 3383 0
-3384 -3381 0
c Var 'aux503' order represents '3' with '3385'
-3383 3385 0
c Var 'aux503' direct represents '3' with '3386'
3383 -3385 3386 0
-3386 3385 0
-3386 -3383 0
c Var 'aux503' order represents '4' with '3387'
-3385 3387 0
c Var 'aux503' direct represents '4' with '3388'
3385 -3387 3388 0
-3388 3387 0
-3388 -3385 0
c Var 'aux503' order represents '5' with '3389'
-3387 3389 0
c Var 'aux503' direct represents '5' with '3390'
3387 -3389 3390 0
-3390 3389 0
-3390 -3387 0
c Var 'aux503' order represents '6' with '3391'
-3389 3391 0
c Var 'aux503' direct represents '6' with '3392'
3389 -3391 3392 0
-3392 3391 0
-3392 -3389 0
c Var 'aux503' order represents '7' with '3393'
-3391 3393 0
c Var 'aux503' direct represents '7' with '3394'
3391 -3393 3394 0
-3394 3393 0
-3394 -3391 0
c Var 'aux503' order represents '8' with '3395'
-3393 3395 0
c Var 'aux503' direct represents '8' with '3396'
3393 -3395 3396 0
-3396 3395 0
-3396 -3393 0
c Var 'aux503' order represents '9' with '3397'
-3395 3397 0
c Var 'aux503' direct represents '9' with '3398'
3395 -3397 3398 0
-3398 3397 0
-3398 -3395 0
c Var 'aux503' order represents '10' with '3399'
-3397 3399 0
c Var 'aux503' direct represents '10' with '3400'
3397 -3399 3400 0
-3400 3399 0
-3400 -3397 0
c Var 'aux503' order represents '11' with '3401'
-3399 3401 0
c Var 'aux503' direct represents '11' with '3402'
3399 -3401 3402 0
-3402 3401 0
-3402 -3399 0
c Var 'aux503' order represents '12' with '3403'
-3401 3403 0
c Var 'aux503' direct represents '12' with '3404'
3401 -3403 3404 0
-3404 3403 0
-3404 -3401 0
c Var 'aux503' order represents '13' with '3405'
-3403 3405 0
c Var 'aux503' direct represents '13' with '3406'
3403 -3405 3406 0
-3406 3405 0
-3406 -3403 0
c Var 'aux503' order represents '14' with '3407'
-3405 3407 0
c Var 'aux503' direct represents '14' with '3408'
3405 -3407 3408 0
-3408 3407 0
-3408 -3405 0
c Var 'aux503' order represents '15' with '3409'
-3407 3409 0
c Var 'aux503' direct represents '15' with '3410'
3407 -3409 3410 0
-3410 3409 0
-3410 -3407 0
c Var 'aux503' direct represents '16' with '-3409'
3380 3382 3384 3386 3388 3390 3392 3394 3396 3398 3400 3402 3404 3406 3408 3410 -3409 0
c Encoding variable: aux504 with domain: int(0..16) (representing constraint (shift(x_00001_00007, -1) + shift(x_00007_00007, -1)))
c Both direct and order encoding.
c Var 'aux504' order represents '0' with '3411'
c Var 'aux504' direct represents '0' with '3411'
c Var 'aux504' order represents '1' with '3412'
-3411 3412 0
c Var 'aux504' direct represents '1' with '3413'
3411 -3412 3413 0
-3413 3412 0
-3413 -3411 0
c Var 'aux504' order represents '2' with '3414'
-3412 3414 0
c Var 'aux504' direct represents '2' with '3415'
3412 -3414 3415 0
-3415 3414 0
-3415 -3412 0
c Var 'aux504' order represents '3' with '3416'
-3414 3416 0
c Var 'aux504' direct represents '3' with '3417'
3414 -3416 3417 0
-3417 3416 0
-3417 -3414 0
c Var 'aux504' order represents '4' with '3418'
-3416 3418 0
c Var 'aux504' direct represents '4' with '3419'
3416 -3418 3419 0
-3419 3418 0
-3419 -3416 0
c Var 'aux504' order represents '5' with '3420'
-3418 3420 0
c Var 'aux504' direct represents '5' with '3421'
3418 -3420 3421 0
-3421 3420 0
-3421 -3418 0
c Var 'aux504' order represents '6' with '3422'
-3420 3422 0
c Var 'aux504' direct represents '6' with '3423'
3420 -3422 3423 0
-3423 3422 0
-3423 -3420 0
c Var 'aux504' order represents '7' with '3424'
-3422 3424 0
c Var 'aux504' direct represents '7' with '3425'
3422 -3424 3425 0
-3425 3424 0
-3425 -3422 0
c Var 'aux504' order represents '8' with '3426'
-3424 3426 0
c Var 'aux504' direct represents '8' with '3427'
3424 -3426 3427 0
-3427 3426 0
-3427 -3424 0
c Var 'aux504' order represents '9' with '3428'
-3426 3428 0
c Var 'aux504' direct represents '9' with '3429'
3426 -3428 3429 0
-3429 3428 0
-3429 -3426 0
c Var 'aux504' order represents '10' with '3430'
-3428 3430 0
c Var 'aux504' direct represents '10' with '3431'
3428 -3430 3431 0
-3431 3430 0
-3431 -3428 0
c Var 'aux504' order represents '11' with '3432'
-3430 3432 0
c Var 'aux504' direct represents '11' with '3433'
3430 -3432 3433 0
-3433 3432 0
-3433 -3430 0
c Var 'aux504' order represents '12' with '3434'
-3432 3434 0
c Var 'aux504' direct represents '12' with '3435'
3432 -3434 3435 0
-3435 3434 0
-3435 -3432 0
c Var 'aux504' order represents '13' with '3436'
-3434 3436 0
c Var 'aux504' direct represents '13' with '3437'
3434 -3436 3437 0
-3437 3436 0
-3437 -3434 0
c Var 'aux504' order represents '14' with '3438'
-3436 3438 0
c Var 'aux504' direct represents '14' with '3439'
3436 -3438 3439 0
-3439 3438 0
-3439 -3436 0
c Var 'aux504' order represents '15' with '3440'
-3438 3440 0
c Var 'aux504' direct represents '15' with '3441'
3438 -3440 3441 0
-3441 3440 0
-3441 -3438 0
c Var 'aux504' direct represents '16' with '-3440'
3411 3413 3415 3417 3419 3421 3423 3425 3427 3429 3431 3433 3435 3437 3439 3441 -3440 0
c Encoding variable: aux505 with domain: int(0..16) (representing constraint (shift(x_00005_00007, -1) + shift(x_00008_00007, -1)))
c Both direct and order encoding.
c Var 'aux505' order represents '0' with '3442'
c Var 'aux505' direct represents '0' with '3442'
c Var 'aux505' order represents '1' with '3443'
-3442 3443 0
c Var 'aux505' direct represents '1' with '3444'
3442 -3443 3444 0
-3444 3443 0
-3444 -3442 0
c Var 'aux505' order represents '2' with '3445'
-3443 3445 0
c Var 'aux505' direct represents '2' with '3446'
3443 -3445 3446 0
-3446 3445 0
-3446 -3443 0
c Var 'aux505' order represents '3' with '3447'
-3445 3447 0
c Var 'aux505' direct represents '3' with '3448'
3445 -3447 3448 0
-3448 3447 0
-3448 -3445 0
c Var 'aux505' order represents '4' with '3449'
-3447 3449 0
c Var 'aux505' direct represents '4' with '3450'
3447 -3449 3450 0
-3450 3449 0
-3450 -3447 0
c Var 'aux505' order represents '5' with '3451'
-3449 3451 0
c Var 'aux505' direct represents '5' with '3452'
3449 -3451 3452 0
-3452 3451 0
-3452 -3449 0
c Var 'aux505' order represents '6' with '3453'
-3451 3453 0
c Var 'aux505' direct represents '6' with '3454'
3451 -3453 3454 0
-3454 3453 0
-3454 -3451 0
c Var 'aux505' order represents '7' with '3455'
-3453 3455 0
c Var 'aux505' direct represents '7' with '3456'
3453 -3455 3456 0
-3456 3455 0
-3456 -3453 0
c Var 'aux505' order represents '8' with '3457'
-3455 3457 0
c Var 'aux505' direct represents '8' with '3458'
3455 -3457 3458 0
-3458 3457 0
-3458 -3455 0
c Var 'aux505' order represents '9' with '3459'
-3457 3459 0
c Var 'aux505' direct represents '9' with '3460'
3457 -3459 3460 0
-3460 3459 0
-3460 -3457 0
c Var 'aux505' order represents '10' with '3461'
-3459 3461 0
c Var 'aux505' direct represents '10' with '3462'
3459 -3461 3462 0
-3462 3461 0
-3462 -3459 0
c Var 'aux505' order represents '11' with '3463'
-3461 3463 0
c Var 'aux505' direct represents '11' with '3464'
3461 -3463 3464 0
-3464 3463 0
-3464 -3461 0
c Var 'aux505' order represents '12' with '3465'
-3463 3465 0
c Var 'aux505' direct represents '12' with '3466'
3463 -3465 3466 0
-3466 3465 0
-3466 -3463 0
c Var 'aux505' order represents '13' with '3467'
-3465 3467 0
c Var 'aux505' direct represents '13' with '3468'
3465 -3467 3468 0
-3468 3467 0
-3468 -3465 0
c Var 'aux505' order represents '14' with '3469'
-3467 3469 0
c Var 'aux505' direct represents '14' with '3470'
3467 -3469 3470 0
-3470 3469 0
-3470 -3467 0
c Var 'aux505' order represents '15' with '3471'
-3469 3471 0
c Var 'aux505' direct represents '15' with '3472'
3469 -3471 3472 0
-3472 3471 0
-3472 -3469 0
c Var 'aux505' direct represents '16' with '-3471'
3442 3444 3446 3448 3450 3452 3454 3456 3458 3460 3462 3464 3466 3468 3470 3472 -3471 0
c Encoding variable: aux506 with domain: int(0..16) (representing constraint (shift(x_00009_00007, -1) + shift(x_00004_00007, -1)))
c Both direct and order encoding.
c Var 'aux506' order represents '0' with '3473'
c Var 'aux506' direct represents '0' with '3473'
c Var 'aux506' order represents '1' with '3474'
-3473 3474 0
c Var 'aux506' direct represents '1' with '3475'
3473 -3474 3475 0
-3475 3474 0
-3475 -3473 0
c Var 'aux506' order represents '2' with '3476'
-3474 3476 0
c Var 'aux506' direct represents '2' with '3477'
3474 -3476 3477 0
-3477 3476 0
-3477 -3474 0
c Var 'aux506' order represents '3' with '3478'
-3476 3478 0
c Var 'aux506' direct represents '3' with '3479'
3476 -3478 3479 0
-3479 3478 0
-3479 -3476 0
c Var 'aux506' order represents '4' with '3480'
-3478 3480 0
c Var 'aux506' direct represents '4' with '3481'
3478 -3480 3481 0
-3481 3480 0
-3481 -3478 0
c Var 'aux506' order represents '5' with '3482'
-3480 3482 0
c Var 'aux506' direct represents '5' with '3483'
3480 -3482 3483 0
-3483 3482 0
-3483 -3480 0
c Var 'aux506' order represents '6' with '3484'
-3482 3484 0
c Var 'aux506' direct represents '6' with '3485'
3482 -3484 3485 0
-3485 3484 0
-3485 -3482 0
c Var 'aux506' order represents '7' with '3486'
-3484 3486 0
c Var 'aux506' direct represents '7' with '3487'
3484 -3486 3487 0
-3487 3486 0
-3487 -3484 0
c Var 'aux506' order represents '8' with '3488'
-3486 3488 0
c Var 'aux506' direct represents '8' with '3489'
3486 -3488 3489 0
-3489 3488 0
-3489 -3486 0
c Var 'aux506' order represents '9' with '3490'
-3488 3490 0
c Var 'aux506' direct represents '9' with '3491'
3488 -3490 3491 0
-3491 3490 0
-3491 -3488 0
c Var 'aux506' order represents '10' with '3492'
-3490 3492 0
c Var 'aux506' direct represents '10' with '3493'
3490 -3492 3493 0
-3493 3492 0
-3493 -3490 0
c Var 'aux506' order represents '11' with '3494'
-3492 3494 0
c Var 'aux506' direct represents '11' with '3495'
3492 -3494 3495 0
-3495 3494 0
-3495 -3492 0
c Var 'aux506' order represents '12' with '3496'
-3494 3496 0
c Var 'aux506' direct represents '12' with '3497'
3494 -3496 3497 0
-3497 3496 0
-3497 -3494 0
c Var 'aux506' order represents '13' with '3498'
-3496 3498 0
c Var 'aux506' direct represents '13' with '3499'
3496 -3498 3499 0
-3499 3498 0
-3499 -3496 0
c Var 'aux506' order represents '14' with '3500'
-3498 3500 0
c Var 'aux506' direct represents '14' with '3501'
3498 -3500 3501 0
-3501 3500 0
-3501 -3498 0
c Var 'aux506' order represents '15' with '3502'
-3500 3502 0
c Var 'aux506' direct represents '15' with '3503'
3500 -3502 3503 0
-3503 3502 0
-3503 -3500 0
c Var 'aux506' direct represents '16' with '-3502'
3473 3475 3477 3479 3481 3483 3485 3487 3489 3491 3493 3495 3497 3499 3501 3503 -3502 0
c Encoding variable: aux507 with domain: int(0..24) (representing constraint (shift(x_00003_00007, -1) + aux506))
c Both direct and order encoding.
c Var 'aux507' order represents '0' with '3504'
c Var 'aux507' direct represents '0' with '3504'
c Var 'aux507' order represents '1' with '3505'
-3504 3505 0
c Var 'aux507' direct represents '1' with '3506'
3504 -3505 3506 0
-3506 3505 0
-3506 -3504 0
c Var 'aux507' order represents '2' with '3507'
-3505 3507 0
c Var 'aux507' direct represents '2' with '3508'
3505 -3507 3508 0
-3508 3507 0
-3508 -3505 0
c Var 'aux507' order represents '3' with '3509'
-3507 3509 0
c Var 'aux507' direct represents '3' with '3510'
3507 -3509 3510 0
-3510 3509 0
-3510 -3507 0
c Var 'aux507' order represents '4' with '3511'
-3509 3511 0
c Var 'aux507' direct represents '4' with '3512'
3509 -3511 3512 0
-3512 3511 0
-3512 -3509 0
c Var 'aux507' order represents '5' with '3513'
-3511 3513 0
c Var 'aux507' direct represents '5' with '3514'
3511 -3513 3514 0
-3514 3513 0
-3514 -3511 0
c Var 'aux507' order represents '6' with '3515'
-3513 3515 0
c Var 'aux507' direct represents '6' with '3516'
3513 -3515 3516 0
-3516 3515 0
-3516 -3513 0
c Var 'aux507' order represents '7' with '3517'
-3515 3517 0
c Var 'aux507' direct represents '7' with '3518'
3515 -3517 3518 0
-3518 3517 0
-3518 -3515 0
c Var 'aux507' order represents '8' with '3519'
-3517 3519 0
c Var 'aux507' direct represents '8' with '3520'
3517 -3519 3520 0
-3520 3519 0
-3520 -3517 0
c Var 'aux507' order represents '9' with '3521'
-3519 3521 0
c Var 'aux507' direct represents '9' with '3522'
3519 -3521 3522 0
-3522 3521 0
-3522 -3519 0
c Var 'aux507' order represents '10' with '3523'
-3521 3523 0
c Var 'aux507' direct represents '10' with '3524'
3521 -3523 3524 0
-3524 3523 0
-3524 -3521 0
c Var 'aux507' order represents '11' with '3525'
-3523 3525 0
c Var 'aux507' direct represents '11' with '3526'
3523 -3525 3526 0
-3526 3525 0
-3526 -3523 0
c Var 'aux507' order represents '12' with '3527'
-3525 3527 0
c Var 'aux507' direct represents '12' with '3528'
3525 -3527 3528 0
-3528 3527 0
-3528 -3525 0
c Var 'aux507' order represents '13' with '3529'
-3527 3529 0
c Var 'aux507' direct represents '13' with '3530'
3527 -3529 3530 0
-3530 3529 0
-3530 -3527 0
c Var 'aux507' order represents '14' with '3531'
-3529 3531 0
c Var 'aux507' direct represents '14' with '3532'
3529 -3531 3532 0
-3532 3531 0
-3532 -3529 0
c Var 'aux507' order represents '15' with '3533'
-3531 3533 0
c Var 'aux507' direct represents '15' with '3534'
3531 -3533 3534 0
-3534 3533 0
-3534 -3531 0
c Var 'aux507' order represents '16' with '3535'
-3533 3535 0
c Var 'aux507' direct represents '16' with '3536'
3533 -3535 3536 0
-3536 3535 0
-3536 -3533 0
c Var 'aux507' order represents '17' with '3537'
-3535 3537 0
c Var 'aux507' direct represents '17' with '3538'
3535 -3537 3538 0
-3538 3537 0
-3538 -3535 0
c Var 'aux507' order represents '18' with '3539'
-3537 3539 0
c Var 'aux507' direct represents '18' with '3540'
3537 -3539 3540 0
-3540 3539 0
-3540 -3537 0
c Var 'aux507' order represents '19' with '3541'
-3539 3541 0
c Var 'aux507' direct represents '19' with '3542'
3539 -3541 3542 0
-3542 3541 0
-3542 -3539 0
c Var 'aux507' order represents '20' with '3543'
-3541 3543 0
c Var 'aux507' direct represents '20' with '3544'
3541 -3543 3544 0
-3544 3543 0
-3544 -3541 0
c Var 'aux507' order represents '21' with '3545'
-3543 3545 0
c Var 'aux507' direct represents '21' with '3546'
3543 -3545 3546 0
-3546 3545 0
-3546 -3543 0
c Var 'aux507' order represents '22' with '3547'
-3545 3547 0
c Var 'aux507' direct represents '22' with '3548'
3545 -3547 3548 0
-3548 3547 0
-3548 -3545 0
c Var 'aux507' order represents '23' with '3549'
-3547 3549 0
c Var 'aux507' direct represents '23' with '3550'
3547 -3549 3550 0
-3550 3549 0
-3550 -3547 0
c Var 'aux507' direct represents '24' with '-3549'
3504 3506 3508 3510 3512 3514 3516 3518 3520 3522 3524 3526 3528 3530 3532 3534 3536 3538 3540 3542 3544 3546 3548 3550 -3549 0
c Encoding variable: aux508 with domain: int(0..32) (representing constraint (aux503 + aux505))
c Both direct and order encoding.
c Var 'aux508' order represents '0' with '3551'
c Var 'aux508' direct represents '0' with '3551'
c Var 'aux508' order represents '1' with '3552'
-3551 3552 0
c Var 'aux508' direct represents '1' with '3553'
3551 -3552 3553 0
-3553 3552 0
-3553 -3551 0
c Var 'aux508' order represents '2' with '3554'
-3552 3554 0
c Var 'aux508' direct represents '2' with '3555'
3552 -3554 3555 0
-3555 3554 0
-3555 -3552 0
c Var 'aux508' order represents '3' with '3556'
-3554 3556 0
c Var 'aux508' direct represents '3' with '3557'
3554 -3556 3557 0
-3557 3556 0
-3557 -3554 0
c Var 'aux508' order represents '4' with '3558'
-3556 3558 0
c Var 'aux508' direct represents '4' with '3559'
3556 -3558 3559 0
-3559 3558 0
-3559 -3556 0
c Var 'aux508' order represents '5' with '3560'
-3558 3560 0
c Var 'aux508' direct represents '5' with '3561'
3558 -3560 3561 0
-3561 3560 0
-3561 -3558 0
c Var 'aux508' order represents '6' with '3562'
-3560 3562 0
c Var 'aux508' direct represents '6' with '3563'
3560 -3562 3563 0
-3563 3562 0
-3563 -3560 0
c Var 'aux508' order represents '7' with '3564'
-3562 3564 0
c Var 'aux508' direct represents '7' with '3565'
3562 -3564 3565 0
-3565 3564 0
-3565 -3562 0
c Var 'aux508' order represents '8' with '3566'
-3564 3566 0
c Var 'aux508' direct represents '8' with '3567'
3564 -3566 3567 0
-3567 3566 0
-3567 -3564 0
c Var 'aux508' order represents '9' with '3568'
-3566 3568 0
c Var 'aux508' direct represents '9' with '3569'
3566 -3568 3569 0
-3569 3568 0
-3569 -3566 0
c Var 'aux508' order represents '10' with '3570'
-3568 3570 0
c Var 'aux508' direct represents '10' with '3571'
3568 -3570 3571 0
-3571 3570 0
-3571 -3568 0
c Var 'aux508' order represents '11' with '3572'
-3570 3572 0
c Var 'aux508' direct represents '11' with '3573'
3570 -3572 3573 0
-3573 3572 0
-3573 -3570 0
c Var 'aux508' order represents '12' with '3574'
-3572 3574 0
c Var 'aux508' direct represents '12' with '3575'
3572 -3574 3575 0
-3575 3574 0
-3575 -3572 0
c Var 'aux508' order represents '13' with '3576'
-3574 3576 0
c Var 'aux508' direct represents '13' with '3577'
3574 -3576 3577 0
-3577 3576 0
-3577 -3574 0
c Var 'aux508' order represents '14' with '3578'
-3576 3578 0
c Var 'aux508' direct represents '14' with '3579'
3576 -3578 3579 0
-3579 3578 0
-3579 -3576 0
c Var 'aux508' order represents '15' with '3580'
-3578 3580 0
c Var 'aux508' direct represents '15' with '3581'
3578 -3580 3581 0
-3581 3580 0
-3581 -3578 0
c Var 'aux508' order represents '16' with '3582'
-3580 3582 0
c Var 'aux508' direct represents '16' with '3583'
3580 -3582 3583 0
-3583 3582 0
-3583 -3580 0
c Var 'aux508' order represents '17' with '3584'
-3582 3584 0
c Var 'aux508' direct represents '17' with '3585'
3582 -3584 3585 0
-3585 3584 0
-3585 -3582 0
c Var 'aux508' order represents '18' with '3586'
-3584 3586 0
c Var 'aux508' direct represents '18' with '3587'
3584 -3586 3587 0
-3587 3586 0
-3587 -3584 0
c Var 'aux508' order represents '19' with '3588'
-3586 3588 0
c Var 'aux508' direct represents '19' with '3589'
3586 -3588 3589 0
-3589 3588 0
-3589 -3586 0
c Var 'aux508' order represents '20' with '3590'
-3588 3590 0
c Var 'aux508' direct represents '20' with '3591'
3588 -3590 3591 0
-3591 3590 0
-3591 -3588 0
c Var 'aux508' order represents '21' with '3592'
-3590 3592 0
c Var 'aux508' direct represents '21' with '3593'
3590 -3592 3593 0
-3593 3592 0
-3593 -3590 0
c Var 'aux508' order represents '22' with '3594'
-3592 3594 0
c Var 'aux508' direct represents '22' with '3595'
3592 -3594 3595 0
-3595 3594 0
-3595 -3592 0
c Var 'aux508' order represents '23' with '3596'
-3594 3596 0
c Var 'aux508' direct represents '23' with '3597'
3594 -3596 3597 0
-3597 3596 0
-3597 -3594 0
c Var 'aux508' order represents '24' with '3598'
-3596 3598 0
c Var 'aux508' direct represents '24' with '3599'
3596 -3598 3599 0
-3599 3598 0
-3599 -3596 0
c Var 'aux508' order represents '25' with '3600'
-3598 3600 0
c Var 'aux508' direct represents '25' with '3601'
3598 -3600 3601 0
-3601 3600 0
-3601 -3598 0
c Var 'aux508' order represents '26' with '3602'
-3600 3602 0
c Var 'aux508' direct represents '26' with '3603'
3600 -3602 3603 0
-3603 3602 0
-3603 -3600 0
c Var 'aux508' order represents '27' with '3604'
-3602 3604 0
c Var 'aux508' direct represents '27' with '3605'
3602 -3604 3605 0
-3605 3604 0
-3605 -3602 0
c Var 'aux508' order represents '28' with '3606'
-3604 3606 0
c Var 'aux508' direct represents '28' with '3607'
3604 -3606 3607 0
-3607 3606 0
-3607 -3604 0
c Var 'aux508' order represents '29' with '3608'
-3606 3608 0
c Var 'aux508' direct represents '29' with '3609'
3606 -3608 3609 0
-3609 3608 0
-3609 -3606 0
c Var 'aux508' order represents '30' with '3610'
-3608 3610 0
c Var 'aux508' direct represents '30' with '3611'
3608 -3610 3611 0
-3611 3610 0
-3611 -3608 0
c Var 'aux508' order represents '31' with '3612'
-3610 3612 0
c Var 'aux508' direct represents '31' with '3613'
3610 -3612 3613 0
-3613 3612 0
-3613 -3610 0
c Var 'aux508' direct represents '32' with '-3612'
3551 3553 3555 3557 3559 3561 3563 3565 3567 3569 3571 3573 3575 3577 3579 3581 3583 3585 3587 3589 3591 3593 3595 3597 3599 3601 3603 3605 3607 3609 3611 3613 -3612 0
c Encoding variable: aux509 with domain: int(0..16) (representing constraint (shift(x_00002_00008, -1) + shift(x_00006_00008, -1)))
c Both direct and order encoding.
c Var 'aux509' order represents '0' with '3614'
c Var 'aux509' direct represents '0' with '3614'
c Var 'aux509' order represents '1' with '3615'
-3614 3615 0
c Var 'aux509' direct represents '1' with '3616'
3614 -3615 3616 0
-3616 3615 0
-3616 -3614 0
c Var 'aux509' order represents '2' with '3617'
-3615 3617 0
c Var 'aux509' direct represents '2' with '3618'
3615 -3617 3618 0
-3618 3617 0
-3618 -3615 0
c Var 'aux509' order represents '3' with '3619'
-3617 3619 0
c Var 'aux509' direct represents '3' with '3620'
3617 -3619 3620 0
-3620 3619 0
-3620 -3617 0
c Var 'aux509' order represents '4' with '3621'
-3619 3621 0
c Var 'aux509' direct represents '4' with '3622'
3619 -3621 3622 0
-3622 3621 0
-3622 -3619 0
c Var 'aux509' order represents '5' with '3623'
-3621 3623 0
c Var 'aux509' direct represents '5' with '3624'
3621 -3623 3624 0
-3624 3623 0
-3624 -3621 0
c Var 'aux509' order represents '6' with '3625'
-3623 3625 0
c Var 'aux509' direct represents '6' with '3626'
3623 -3625 3626 0
-3626 3625 0
-3626 -3623 0
c Var 'aux509' order represents '7' with '3627'
-3625 3627 0
c Var 'aux509' direct represents '7' with '3628'
3625 -3627 3628 0
-3628 3627 0
-3628 -3625 0
c Var 'aux509' order represents '8' with '3629'
-3627 3629 0
c Var 'aux509' direct represents '8' with '3630'
3627 -3629 3630 0
-3630 3629 0
-3630 -3627 0
c Var 'aux509' order represents '9' with '3631'
-3629 3631 0
c Var 'aux509' direct represents '9' with '3632'
3629 -3631 3632 0
-3632 3631 0
-3632 -3629 0
c Var 'aux509' order represents '10' with '3633'
-3631 3633 0
c Var 'aux509' direct represents '10' with '3634'
3631 -3633 3634 0
-3634 3633 0
-3634 -3631 0
c Var 'aux509' order represents '11' with '3635'
-3633 3635 0
c Var 'aux509' direct represents '11' with '3636'
3633 -3635 3636 0
-3636 3635 0
-3636 -3633 0
c Var 'aux509' order represents '12' with '3637'
-3635 3637 0
c Var 'aux509' direct represents '12' with '3638'
3635 -3637 3638 0
-3638 3637 0
-3638 -3635 0
c Var 'aux509' order represents '13' with '3639'
-3637 3639 0
c Var 'aux509' direct represents '13' with '3640'
3637 -3639 3640 0
-3640 3639 0
-3640 -3637 0
c Var 'aux509' order represents '14' with '3641'
-3639 3641 0
c Var 'aux509' direct represents '14' with '3642'
3639 -3641 3642 0
-3642 3641 0
-3642 -3639 0
c Var 'aux509' order represents '15' with '3643'
-3641 3643 0
c Var 'aux509' direct represents '15' with '3644'
3641 -3643 3644 0
-3644 3643 0
-3644 -3641 0
c Var 'aux509' direct represents '16' with '-3643'
3614 3616 3618 3620 3622 3624 3626 3628 3630 3632 3634 3636 3638 3640 3642 3644 -3643 0
c Encoding variable: aux510 with domain: int(0..16) (representing constraint (shift(x_00001_00008, -1) + shift(x_00007_00008, -1)))
c Both direct and order encoding.
c Var 'aux510' order represents '0' with '3645'
c Var 'aux510' direct represents '0' with '3645'
c Var 'aux510' order represents '1' with '3646'
-3645 3646 0
c Var 'aux510' direct represents '1' with '3647'
3645 -3646 3647 0
-3647 3646 0
-3647 -3645 0
c Var 'aux510' order represents '2' with '3648'
-3646 3648 0
c Var 'aux510' direct represents '2' with '3649'
3646 -3648 3649 0
-3649 3648 0
-3649 -3646 0
c Var 'aux510' order represents '3' with '3650'
-3648 3650 0
c Var 'aux510' direct represents '3' with '3651'
3648 -3650 3651 0
-3651 3650 0
-3651 -3648 0
c Var 'aux510' order represents '4' with '3652'
-3650 3652 0
c Var 'aux510' direct represents '4' with '3653'
3650 -3652 3653 0
-3653 3652 0
-3653 -3650 0
c Var 'aux510' order represents '5' with '3654'
-3652 3654 0
c Var 'aux510' direct represents '5' with '3655'
3652 -3654 3655 0
-3655 3654 0
-3655 -3652 0
c Var 'aux510' order represents '6' with '3656'
-3654 3656 0
c Var 'aux510' direct represents '6' with '3657'
3654 -3656 3657 0
-3657 3656 0
-3657 -3654 0
c Var 'aux510' order represents '7' with '3658'
-3656 3658 0
c Var 'aux510' direct represents '7' with '3659'
3656 -3658 3659 0
-3659 3658 0
-3659 -3656 0
c Var 'aux510' order represents '8' with '3660'
-3658 3660 0
c Var 'aux510' direct represents '8' with '3661'
3658 -3660 3661 0
-3661 3660 0
-3661 -3658 0
c Var 'aux510' order represents '9' with '3662'
-3660 3662 0
c Var 'aux510' direct represents '9' with '3663'
3660 -3662 3663 0
-3663 3662 0
-3663 -3660 0
c Var 'aux510' order represents '10' with '3664'
-3662 3664 0
c Var 'aux510' direct represents '10' with '3665'
3662 -3664 3665 0
-3665 3664 0
-3665 -3662 0
c Var 'aux510' order represents '11' with '3666'
-3664 3666 0
c Var 'aux510' direct represents '11' with '3667'
3664 -3666 3667 0
-3667 3666 0
-3667 -3664 0
c Var 'aux510' order represents '12' with '3668'
-3666 3668 0
c Var 'aux510' direct represents '12' with '3669'
3666 -3668 3669 0
-3669 3668 0
-3669 -3666 0
c Var 'aux510' order represents '13' with '3670'
-3668 3670 0
c Var 'aux510' direct represents '13' with '3671'
3668 -3670 3671 0
-3671 3670 0
-3671 -3668 0
c Var 'aux510' order represents '14' with '3672'
-3670 3672 0
c Var 'aux510' direct represents '14' with '3673'
3670 -3672 3673 0
-3673 3672 0
-3673 -3670 0
c Var 'aux510' order represents '15' with '3674'
-3672 3674 0
c Var 'aux510' direct represents '15' with '3675'
3672 -3674 3675 0
-3675 3674 0
-3675 -3672 0
c Var 'aux510' direct represents '16' with '-3674'
3645 3647 3649 3651 3653 3655 3657 3659 3661 3663 3665 3667 3669 3671 3673 3675 -3674 0
c Encoding variable: aux511 with domain: int(0..16) (representing constraint (shift(x_00005_00008, -1) + shift(x_00008_00008, -1)))
c Both direct and order encoding.
c Var 'aux511' order represents '0' with '3676'
c Var 'aux511' direct represents '0' with '3676'
c Var 'aux511' order represents '1' with '3677'
-3676 3677 0
c Var 'aux511' direct represents '1' with '3678'
3676 -3677 3678 0
-3678 3677 0
-3678 -3676 0
c Var 'aux511' order represents '2' with '3679'
-3677 3679 0
c Var 'aux511' direct represents '2' with '3680'
3677 -3679 3680 0
-3680 3679 0
-3680 -3677 0
c Var 'aux511' order represents '3' with '3681'
-3679 3681 0
c Var 'aux511' direct represents '3' with '3682'
3679 -3681 3682 0
-3682 3681 0
-3682 -3679 0
c Var 'aux511' order represents '4' with '3683'
-3681 3683 0
c Var 'aux511' direct represents '4' with '3684'
3681 -3683 3684 0
-3684 3683 0
-3684 -3681 0
c Var 'aux511' order represents '5' with '3685'
-3683 3685 0
c Var 'aux511' direct represents '5' with '3686'
3683 -3685 3686 0
-3686 3685 0
-3686 -3683 0
c Var 'aux511' order represents '6' with '3687'
-3685 3687 0
c Var 'aux511' direct represents '6' with '3688'
3685 -3687 3688 0
-3688 3687 0
-3688 -3685 0
c Var 'aux511' order represents '7' with '3689'
-3687 3689 0
c Var 'aux511' direct represents '7' with '3690'
3687 -3689 3690 0
-3690 3689 0
-3690 -3687 0
c Var 'aux511' order represents '8' with '3691'
-3689 3691 0
c Var 'aux511' direct represents '8' with '3692'
3689 -3691 3692 0
-3692 3691 0
-3692 -3689 0
c Var 'aux511' order represents '9' with '3693'
-3691 3693 0
c Var 'aux511' direct represents '9' with '3694'
3691 -3693 3694 0
-3694 3693 0
-3694 -3691 0
c Var 'aux511' order represents '10' with '3695'
-3693 3695 0
c Var 'aux511' direct represents '10' with '3696'
3693 -3695 3696 0
-3696 3695 0
-3696 -3693 0
c Var 'aux511' order represents '11' with '3697'
-3695 3697 0
c Var 'aux511' direct represents '11' with '3698'
3695 -3697 3698 0
-3698 3697 0
-3698 -3695 0
c Var 'aux511' order represents '12' with '3699'
-3697 3699 0
c Var 'aux511' direct represents '12' with '3700'
3697 -3699 3700 0
-3700 3699 0
-3700 -3697 0
c Var 'aux511' order represents '13' with '3701'
-3699 3701 0
c Var 'aux511' direct represents '13' with '3702'
3699 -3701 3702 0
-3702 3701 0
-3702 -3699 0
c Var 'aux511' order represents '14' with '3703'
-3701 3703 0
c Var 'aux511' direct represents '14' with '3704'
3701 -3703 3704 0
-3704 3703 0
-3704 -3701 0
c Var 'aux511' order represents '15' with '3705'
-3703 3705 0
c Var 'aux511' direct represents '15' with '3706'
3703 -3705 3706 0
-3706 3705 0
-3706 -3703 0
c Var 'aux511' direct represents '16' with '-3705'
3676 3678 3680 3682 3684 3686 3688 3690 3692 3694 3696 3698 3700 3702 3704 3706 -3705 0
c Encoding variable: aux512 with domain: int(0..16) (representing constraint (shift(x_00009_00008, -1) + shift(x_00004_00008, -1)))
c Both direct and order encoding.
c Var 'aux512' order represents '0' with '3707'
c Var 'aux512' direct represents '0' with '3707'
c Var 'aux512' order represents '1' with '3708'
-3707 3708 0
c Var 'aux512' direct represents '1' with '3709'
3707 -3708 3709 0
-3709 3708 0
-3709 -3707 0
c Var 'aux512' order represents '2' with '3710'
-3708 3710 0
c Var 'aux512' direct represents '2' with '3711'
3708 -3710 3711 0
-3711 3710 0
-3711 -3708 0
c Var 'aux512' order represents '3' with '3712'
-3710 3712 0
c Var 'aux512' direct represents '3' with '3713'
3710 -3712 3713 0
-3713 3712 0
-3713 -3710 0
c Var 'aux512' order represents '4' with '3714'
-3712 3714 0
c Var 'aux512' direct represents '4' with '3715'
3712 -3714 3715 0
-3715 3714 0
-3715 -3712 0
c Var 'aux512' order represents '5' with '3716'
-3714 3716 0
c Var 'aux512' direct represents '5' with '3717'
3714 -3716 3717 0
-3717 3716 0
-3717 -3714 0
c Var 'aux512' order represents '6' with '3718'
-3716 3718 0
c Var 'aux512' direct represents '6' with '3719'
3716 -3718 3719 0
-3719 3718 0
-3719 -3716 0
c Var 'aux512' order represents '7' with '3720'
-3718 3720 0
c Var 'aux512' direct represents '7' with '3721'
3718 -3720 3721 0
-3721 3720 0
-3721 -3718 0
c Var 'aux512' order represents '8' with '3722'
-3720 3722 0
c Var 'aux512' direct represents '8' with '3723'
3720 -3722 3723 0
-3723 3722 0
-3723 -3720 0
c Var 'aux512' order represents '9' with '3724'
-3722 3724 0
c Var 'aux512' direct represents '9' with '3725'
3722 -3724 3725 0
-3725 3724 0
-3725 -3722 0
c Var 'aux512' order represents '10' with '3726'
-3724 3726 0
c Var 'aux512' direct represents '10' with '3727'
3724 -3726 3727 0
-3727 3726 0
-3727 -3724 0
c Var 'aux512' order represents '11' with '3728'
-3726 3728 0
c Var 'aux512' direct represents '11' with '3729'
3726 -3728 3729 0
-3729 3728 0
-3729 -3726 0
c Var 'aux512' order represents '12' with '3730'
-3728 3730 0
c Var 'aux512' direct represents '12' with '3731'
3728 -3730 3731 0
-3731 3730 0
-3731 -3728 0
c Var 'aux512' order represents '13' with '3732'
-3730 3732 0
c Var 'aux512' direct represents '13' with '3733'
3730 -3732 3733 0
-3733 3732 0
-3733 -3730 0
c Var 'aux512' order represents '14' with '3734'
-3732 3734 0
c Var 'aux512' direct represents '14' with '3735'
3732 -3734 3735 0
-3735 3734 0
-3735 -3732 0
c Var 'aux512' order represents '15' with '3736'
-3734 3736 0
c Var 'aux512' direct represents '15' with '3737'
3734 -3736 3737 0
-3737 3736 0
-3737 -3734 0
c Var 'aux512' direct represents '16' with '-3736'
3707 3709 3711 3713 3715 3717 3719 3721 3723 3725 3727 3729 3731 3733 3735 3737 -3736 0
c Encoding variable: aux513 with domain: int(0..24) (representing constraint (shift(x_00003_00008, -1) + aux512))
c Both direct and order encoding.
c Var 'aux513' order represents '0' with '3738'
c Var 'aux513' direct represents '0' with '3738'
c Var 'aux513' order represents '1' with '3739'
-3738 3739 0
c Var 'aux513' direct represents '1' with '3740'
3738 -3739 3740 0
-3740 3739 0
-3740 -3738 0
c Var 'aux513' order represents '2' with '3741'
-3739 3741 0
c Var 'aux513' direct represents '2' with '3742'
3739 -3741 3742 0
-3742 3741 0
-3742 -3739 0
c Var 'aux513' order represents '3' with '3743'
-3741 3743 0
c Var 'aux513' direct represents '3' with '3744'
3741 -3743 3744 0
-3744 3743 0
-3744 -3741 0
c Var 'aux513' order represents '4' with '3745'
-3743 3745 0
c Var 'aux513' direct represents '4' with '3746'
3743 -3745 3746 0
-3746 3745 0
-3746 -3743 0
c Var 'aux513' order represents '5' with '3747'
-3745 3747 0
c Var 'aux513' direct represents '5' with '3748'
3745 -3747 3748 0
-3748 3747 0
-3748 -3745 0
c Var 'aux513' order represents '6' with '3749'
-3747 3749 0
c Var 'aux513' direct represents '6' with '3750'
3747 -3749 3750 0
-3750 3749 0
-3750 -3747 0
c Var 'aux513' order represents '7' with '3751'
-3749 3751 0
c Var 'aux513' direct represents '7' with '3752'
3749 -3751 3752 0
-3752 3751 0
-3752 -3749 0
c Var 'aux513' order represents '8' with '3753'
-3751 3753 0
c Var 'aux513' direct represents '8' with '3754'
3751 -3753 3754 0
-3754 3753 0
-3754 -3751 0
c Var 'aux513' order represents '9' with '3755'
-3753 3755 0
c Var 'aux513' direct represents '9' with '3756'
3753 -3755 3756 0
-3756 3755 0
-3756 -3753 0
c Var 'aux513' order represents '10' with '3757'
-3755 3757 0
c Var 'aux513' direct represents '10' with '3758'
3755 -3757 3758 0
-3758 3757 0
-3758 -3755 0
c Var 'aux513' order represents '11' with '3759'
-3757 3759 0
c Var 'aux513' direct represents '11' with '3760'
3757 -3759 3760 0
-3760 3759 0
-3760 -3757 0
c Var 'aux513' order represents '12' with '3761'
-3759 3761 0
c Var 'aux513' direct represents '12' with '3762'
3759 -3761 3762 0
-3762 3761 0
-3762 -3759 0
c Var 'aux513' order represents '13' with '3763'
-3761 3763 0
c Var 'aux513' direct represents '13' with '3764'
3761 -3763 3764 0
-3764 3763 0
-3764 -3761 0
c Var 'aux513' order represents '14' with '3765'
-3763 3765 0
c Var 'aux513' direct represents '14' with '3766'
3763 -3765 3766 0
-3766 3765 0
-3766 -3763 0
c Var 'aux513' order represents '15' with '3767'
-3765 3767 0
c Var 'aux513' direct represents '15' with '3768'
3765 -3767 3768 0
-3768 3767 0
-3768 -3765 0
c Var 'aux513' order represents '16' with '3769'
-3767 3769 0
c Var 'aux513' direct represents '16' with '3770'
3767 -3769 3770 0
-3770 3769 0
-3770 -3767 0
c Var 'aux513' order represents '17' with '3771'
-3769 3771 0
c Var 'aux513' direct represents '17' with '3772'
3769 -3771 3772 0
-3772 3771 0
-3772 -3769 0
c Var 'aux513' order represents '18' with '3773'
-3771 3773 0
c Var 'aux513' direct represents '18' with '3774'
3771 -3773 3774 0
-3774 3773 0
-3774 -3771 0
c Var 'aux513' order represents '19' with '3775'
-3773 3775 0
c Var 'aux513' direct represents '19' with '3776'
3773 -3775 3776 0
-3776 3775 0
-3776 -3773 0
c Var 'aux513' order represents '20' with '3777'
-3775 3777 0
c Var 'aux513' direct represents '20' with '3778'
3775 -3777 3778 0
-3778 3777 0
-3778 -3775 0
c Var 'aux513' order represents '21' with '3779'
-3777 3779 0
c Var 'aux513' direct represents '21' with '3780'
3777 -3779 3780 0
-3780 3779 0
-3780 -3777 0
c Var 'aux513' order represents '22' with '3781'
-3779 3781 0
c Var 'aux513' direct represents '22' with '3782'
3779 -3781 3782 0
-3782 3781 0
-3782 -3779 0
c Var 'aux513' order represents '23' with '3783'
-3781 3783 0
c Var 'aux513' direct represents '23' with '3784'
3781 -3783 3784 0
-3784 3783 0
-3784 -3781 0
c Var 'aux513' direct represents '24' with '-3783'
3738 3740 3742 3744 3746 3748 3750 3752 3754 3756 3758 3760 3762 3764 3766 3768 3770 3772 3774 3776 3778 3780 3782 3784 -3783 0
c Encoding variable: aux514 with domain: int(0..32) (representing constraint (aux509 + aux511))
c Both direct and order encoding.
c Var 'aux514' order represents '0' with '3785'
c Var 'aux514' direct represents '0' with '3785'
c Var 'aux514' order represents '1' with '3786'
-3785 3786 0
c Var 'aux514' direct represents '1' with '3787'
3785 -3786 3787 0
-3787 3786 0
-3787 -3785 0
c Var 'aux514' order represents '2' with '3788'
-3786 3788 0
c Var 'aux514' direct represents '2' with '3789'
3786 -3788 3789 0
-3789 3788 0
-3789 -3786 0
c Var 'aux514' order represents '3' with '3790'
-3788 3790 0
c Var 'aux514' direct represents '3' with '3791'
3788 -3790 3791 0
-3791 3790 0
-3791 -3788 0
c Var 'aux514' order represents '4' with '3792'
-3790 3792 0
c Var 'aux514' direct represents '4' with '3793'
3790 -3792 3793 0
-3793 3792 0
-3793 -3790 0
c Var 'aux514' order represents '5' with '3794'
-3792 3794 0
c Var 'aux514' direct represents '5' with '3795'
3792 -3794 3795 0
-3795 3794 0
-3795 -3792 0
c Var 'aux514' order represents '6' with '3796'
-3794 3796 0
c Var 'aux514' direct represents '6' with '3797'
3794 -3796 3797 0
-3797 3796 0
-3797 -3794 0
c Var 'aux514' order represents '7' with '3798'
-3796 3798 0
c Var 'aux514' direct represents '7' with '3799'
3796 -3798 3799 0
-3799 3798 0
-3799 -3796 0
c Var 'aux514' order represents '8' with '3800'
-3798 3800 0
c Var 'aux514' direct represents '8' with '3801'
3798 -3800 3801 0
-3801 3800 0
-3801 -3798 0
c Var 'aux514' order represents '9' with '3802'
-3800 3802 0
c Var 'aux514' direct represents '9' with '3803'
3800 -3802 3803 0
-3803 3802 0
-3803 -3800 0
c Var 'aux514' order represents '10' with '3804'
-3802 3804 0
c Var 'aux514' direct represents '10' with '3805'
3802 -3804 3805 0
-3805 3804 0
-3805 -3802 0
c Var 'aux514' order represents '11' with '3806'
-3804 3806 0
c Var 'aux514' direct represents '11' with '3807'
3804 -3806 3807 0
-3807 3806 0
-3807 -3804 0
c Var 'aux514' order represents '12' with '3808'
-3806 3808 0
c Var 'aux514' direct represents '12' with '3809'
3806 -3808 3809 0
-3809 3808 0
-3809 -3806 0
c Var 'aux514' order represents '13' with '3810'
-3808 3810 0
c Var 'aux514' direct represents '13' with '3811'
3808 -3810 3811 0
-3811 3810 0
-3811 -3808 0
c Var 'aux514' order represents '14' with '3812'
-3810 3812 0
c Var 'aux514' direct represents '14' with '3813'
3810 -3812 3813 0
-3813 3812 0
-3813 -3810 0
c Var 'aux514' order represents '15' with '3814'
-3812 3814 0
c Var 'aux514' direct represents '15' with '3815'
3812 -3814 3815 0
-3815 3814 0
-3815 -3812 0
c Var 'aux514' order represents '16' with '3816'
-3814 3816 0
c Var 'aux514' direct represents '16' with '3817'
3814 -3816 3817 0
-3817 3816 0
-3817 -3814 0
c Var 'aux514' order represents '17' with '3818'
-3816 3818 0
c Var 'aux514' direct represents '17' with '3819'
3816 -3818 3819 0
-3819 3818 0
-3819 -3816 0
c Var 'aux514' order represents '18' with '3820'
-3818 3820 0
c Var 'aux514' direct represents '18' with '3821'
3818 -3820 3821 0
-3821 3820 0
-3821 -3818 0
c Var 'aux514' order represents '19' with '3822'
-3820 3822 0
c Var 'aux514' direct represents '19' with '3823'
3820 -3822 3823 0
-3823 3822 0
-3823 -3820 0
c Var 'aux514' order represents '20' with '3824'
-3822 3824 0
c Var 'aux514' direct represents '20' with '3825'
3822 -3824 3825 0
-3825 3824 0
-3825 -3822 0
c Var 'aux514' order represents '21' with '3826'
-3824 3826 0
c Var 'aux514' direct represents '21' with '3827'
3824 -3826 3827 0
-3827 3826 0
-3827 -3824 0
c Var 'aux514' order represents '22' with '3828'
-3826 3828 0
c Var 'aux514' direct represents '22' with '3829'
3826 -3828 3829 0
-3829 3828 0
-3829 -3826 0
c Var 'aux514' order represents '23' with '3830'
-3828 3830 0
c Var 'aux514' direct represents '23' with '3831'
3828 -3830 3831 0
-3831 3830 0
-3831 -3828 0
c Var 'aux514' order represents '24' with '3832'
-3830 3832 0
c Var 'aux514' direct represents '24' with '3833'
3830 -3832 3833 0
-3833 3832 0
-3833 -3830 0
c Var 'aux514' order represents '25' with '3834'
-3832 3834 0
c Var 'aux514' direct represents '25' with '3835'
3832 -3834 3835 0
-3835 3834 0
-3835 -3832 0
c Var 'aux514' order represents '26' with '3836'
-3834 3836 0
c Var 'aux514' direct represents '26' with '3837'
3834 -3836 3837 0
-3837 3836 0
-3837 -3834 0
c Var 'aux514' order represents '27' with '3838'
-3836 3838 0
c Var 'aux514' direct represents '27' with '3839'
3836 -3838 3839 0
-3839 3838 0
-3839 -3836 0
c Var 'aux514' order represents '28' with '3840'
-3838 3840 0
c Var 'aux514' direct represents '28' with '3841'
3838 -3840 3841 0
-3841 3840 0
-3841 -3838 0
c Var 'aux514' order represents '29' with '3842'
-3840 3842 0
c Var 'aux514' direct represents '29' with '3843'
3840 -3842 3843 0
-3843 3842 0
-3843 -3840 0
c Var 'aux514' order represents '30' with '3844'
-3842 3844 0
c Var 'aux514' direct represents '30' with '3845'
3842 -3844 3845 0
-3845 3844 0
-3845 -3842 0
c Var 'aux514' order represents '31' with '3846'
-3844 3846 0
c Var 'aux514' direct represents '31' with '3847'
3844 -3846 3847 0
-3847 3846 0
-3847 -3844 0
c Var 'aux514' direct represents '32' with '-3846'
3785 3787 3789 3791 3793 3795 3797 3799 3801 3803 3805 3807 3809 3811 3813 3815 3817 3819 3821 3823 3825 3827 3829 3831 3833 3835 3837 3839 3841 3843 3845 3847 -3846 0
c Encoding variable: aux515 with domain: int(0..16) (representing constraint (shift(x_00002_00009, -1) + shift(x_00006_00009, -1)))
c Both direct and order encoding.
c Var 'aux515' order represents '0' with '3848'
c Var 'aux515' direct represents '0' with '3848'
c Var 'aux515' order represents '1' with '3849'
-3848 3849 0
c Var 'aux515' direct represents '1' with '3850'
3848 -3849 3850 0
-3850 3849 0
-3850 -3848 0
c Var 'aux515' order represents '2' with '3851'
-3849 3851 0
c Var 'aux515' direct represents '2' with '3852'
3849 -3851 3852 0
-3852 3851 0
-3852 -3849 0
c Var 'aux515' order represents '3' with '3853'
-3851 3853 0
c Var 'aux515' direct represents '3' with '3854'
3851 -3853 3854 0
-3854 3853 0
-3854 -3851 0
c Var 'aux515' order represents '4' with '3855'
-3853 3855 0
c Var 'aux515' direct represents '4' with '3856'
3853 -3855 3856 0
-3856 3855 0
-3856 -3853 0
c Var 'aux515' order represents '5' with '3857'
-3855 3857 0
c Var 'aux515' direct represents '5' with '3858'
3855 -3857 3858 0
-3858 3857 0
-3858 -3855 0
c Var 'aux515' order represents '6' with '3859'
-3857 3859 0
c Var 'aux515' direct represents '6' with '3860'
3857 -3859 3860 0
-3860 3859 0
-3860 -3857 0
c Var 'aux515' order represents '7' with '3861'
-3859 3861 0
c Var 'aux515' direct represents '7' with '3862'
3859 -3861 3862 0
-3862 3861 0
-3862 -3859 0
c Var 'aux515' order represents '8' with '3863'
-3861 3863 0
c Var 'aux515' direct represents '8' with '3864'
3861 -3863 3864 0
-3864 3863 0
-3864 -3861 0
c Var 'aux515' order represents '9' with '3865'
-3863 3865 0
c Var 'aux515' direct represents '9' with '3866'
3863 -3865 3866 0
-3866 3865 0
-3866 -3863 0
c Var 'aux515' order represents '10' with '3867'
-3865 3867 0
c Var 'aux515' direct represents '10' with '3868'
3865 -3867 3868 0
-3868 3867 0
-3868 -3865 0
c Var 'aux515' order represents '11' with '3869'
-3867 3869 0
c Var 'aux515' direct represents '11' with '3870'
3867 -3869 3870 0
-3870 3869 0
-3870 -3867 0
c Var 'aux515' order represents '12' with '3871'
-3869 3871 0
c Var 'aux515' direct represents '12' with '3872'
3869 -3871 3872 0
-3872 3871 0
-3872 -3869 0
c Var 'aux515' order represents '13' with '3873'
-3871 3873 0
c Var 'aux515' direct represents '13' with '3874'
3871 -3873 3874 0
-3874 3873 0
-3874 -3871 0
c Var 'aux515' order represents '14' with '3875'
-3873 3875 0
c Var 'aux515' direct represents '14' with '3876'
3873 -3875 3876 0
-3876 3875 0
-3876 -3873 0
c Var 'aux515' order represents '15' with '3877'
-3875 3877 0
c Var 'aux515' direct represents '15' with '3878'
3875 -3877 3878 0
-3878 3877 0
-3878 -3875 0
c Var 'aux515' direct represents '16' with '-3877'
3848 3850 3852 3854 3856 3858 3860 3862 3864 3866 3868 3870 3872 3874 3876 3878 -3877 0
c Encoding variable: aux516 with domain: int(0..16) (representing constraint (shift(x_00001_00009, -1) + shift(x_00007_00009, -1)))
c Both direct and order encoding.
c Var 'aux516' order represents '0' with '3879'
c Var 'aux516' direct represents '0' with '3879'
c Var 'aux516' order represents '1' with '3880'
-3879 3880 0
c Var 'aux516' direct represents '1' with '3881'
3879 -3880 3881 0
-3881 3880 0
-3881 -3879 0
c Var 'aux516' order represents '2' with '3882'
-3880 3882 0
c Var 'aux516' direct represents '2' with '3883'
3880 -3882 3883 0
-3883 3882 0
-3883 -3880 0
c Var 'aux516' order represents '3' with '3884'
-3882 3884 0
c Var 'aux516' direct represents '3' with '3885'
3882 -3884 3885 0
-3885 3884 0
-3885 -3882 0
c Var 'aux516' order represents '4' with '3886'
-3884 3886 0
c Var 'aux516' direct represents '4' with '3887'
3884 -3886 3887 0
-3887 3886 0
-3887 -3884 0
c Var 'aux516' order represents '5' with '3888'
-3886 3888 0
c Var 'aux516' direct represents '5' with '3889'
3886 -3888 3889 0
-3889 3888 0
-3889 -3886 0
c Var 'aux516' order represents '6' with '3890'
-3888 3890 0
c Var 'aux516' direct represents '6' with '3891'
3888 -3890 3891 0
-3891 3890 0
-3891 -3888 0
c Var 'aux516' order represents '7' with '3892'
-3890 3892 0
c Var 'aux516' direct represents '7' with '3893'
3890 -3892 3893 0
-3893 3892 0
-3893 -3890 0
c Var 'aux516' order represents '8' with '3894'
-3892 3894 0
c Var 'aux516' direct represents '8' with '3895'
3892 -3894 3895 0
-3895 3894 0
-3895 -3892 0
c Var 'aux516' order represents '9' with '3896'
-3894 3896 0
c Var 'aux516' direct represents '9' with '3897'
3894 -3896 3897 0
-3897 3896 0
-3897 -3894 0
c Var 'aux516' order represents '10' with '3898'
-3896 3898 0
c Var 'aux516' direct represents '10' with '3899'
3896 -3898 3899 0
-3899 3898 0
-3899 -3896 0
c Var 'aux516' order represents '11' with '3900'
-3898 3900 0
c Var 'aux516' direct represents '11' with '3901'
3898 -3900 3901 0
-3901 3900 0
-3901 -3898 0
c Var 'aux516' order represents '12' with '3902'
-3900 3902 0
c Var 'aux516' direct represents '12' with '3903'
3900 -3902 3903 0
-3903 3902 0
-3903 -3900 0
c Var 'aux516' order represents '13' with '3904'
-3902 3904 0
c Var 'aux516' direct represents '13' with '3905'
3902 -3904 3905 0
-3905 3904 0
-3905 -3902 0
c Var 'aux516' order represents '14' with '3906'
-3904 3906 0
c Var 'aux516' direct represents '14' with '3907'
3904 -3906 3907 0
-3907 3906 0
-3907 -3904 0
c Var 'aux516' order represents '15' with '3908'
-3906 3908 0
c Var 'aux516' direct represents '15' with '3909'
3906 -3908 3909 0
-3909 3908 0
-3909 -3906 0
c Var 'aux516' direct represents '16' with '-3908'
3879 3881 3883 3885 3887 3889 3891 3893 3895 3897 3899 3901 3903 3905 3907 3909 -3908 0
c Encoding variable: aux517 with domain: int(0..16) (representing constraint (shift(x_00005_00009, -1) + shift(x_00008_00009, -1)))
c Both direct and order encoding.
c Var 'aux517' order represents '0' with '3910'
c Var 'aux517' direct represents '0' with '3910'
c Var 'aux517' order represents '1' with '3911'
-3910 3911 0
c Var 'aux517' direct represents '1' with '3912'
3910 -3911 3912 0
-3912 3911 0
-3912 -3910 0
c Var 'aux517' order represents '2' with '3913'
-3911 3913 0
c Var 'aux517' direct represents '2' with '3914'
3911 -3913 3914 0
-3914 3913 0
-3914 -3911 0
c Var 'aux517' order represents '3' with '3915'
-3913 3915 0
c Var 'aux517' direct represents '3' with '3916'
3913 -3915 3916 0
-3916 3915 0
-3916 -3913 0
c Var 'aux517' order represents '4' with '3917'
-3915 3917 0
c Var 'aux517' direct represents '4' with '3918'
3915 -3917 3918 0
-3918 3917 0
-3918 -3915 0
c Var 'aux517' order represents '5' with '3919'
-3917 3919 0
c Var 'aux517' direct represents '5' with '3920'
3917 -3919 3920 0
-3920 3919 0
-3920 -3917 0
c Var 'aux517' order represents '6' with '3921'
-3919 3921 0
c Var 'aux517' direct represents '6' with '3922'
3919 -3921 3922 0
-3922 3921 0
-3922 -3919 0
c Var 'aux517' order represents '7' with '3923'
-3921 3923 0
c Var 'aux517' direct represents '7' with '3924'
3921 -3923 3924 0
-3924 3923 0
-3924 -3921 0
c Var 'aux517' order represents '8' with '3925'
-3923 3925 0
c Var 'aux517' direct represents '8' with '3926'
3923 -3925 3926 0
-3926 3925 0
-3926 -3923 0
c Var 'aux517' order represents '9' with '3927'
-3925 3927 0
c Var 'aux517' direct represents '9' with '3928'
3925 -3927 3928 0
-3928 3927 0
-3928 -3925 0
c Var 'aux517' order represents '10' with '3929'
-3927 3929 0
c Var 'aux517' direct represents '10' with '3930'
3927 -3929 3930 0
-3930 3929 0
-3930 -3927 0
c Var 'aux517' order represents '11' with '3931'
-3929 3931 0
c Var 'aux517' direct represents '11' with '3932'
3929 -3931 3932 0
-3932 3931 0
-3932 -3929 0
c Var 'aux517' order represents '12' with '3933'
-3931 3933 0
c Var 'aux517' direct represents '12' with '3934'
3931 -3933 3934 0
-3934 3933 0
-3934 -3931 0
c Var 'aux517' order represents '13' with '3935'
-3933 3935 0
c Var 'aux517' direct represents '13' with '3936'
3933 -3935 3936 0
-3936 3935 0
-3936 -3933 0
c Var 'aux517' order represents '14' with '3937'
-3935 3937 0
c Var 'aux517' direct represents '14' with '3938'
3935 -3937 3938 0
-3938 3937 0
-3938 -3935 0
c Var 'aux517' order represents '15' with '3939'
-3937 3939 0
c Var 'aux517' direct represents '15' with '3940'
3937 -3939 3940 0
-3940 3939 0
-3940 -3937 0
c Var 'aux517' direct represents '16' with '-3939'
3910 3912 3914 3916 3918 3920 3922 3924 3926 3928 3930 3932 3934 3936 3938 3940 -3939 0
c Encoding variable: aux518 with domain: int(0..16) (representing constraint (shift(x_00009_00009, -1) + shift(x_00004_00009, -1)))
c Both direct and order encoding.
c Var 'aux518' order represents '0' with '3941'
c Var 'aux518' direct represents '0' with '3941'
c Var 'aux518' order represents '1' with '3942'
-3941 3942 0
c Var 'aux518' direct represents '1' with '3943'
3941 -3942 3943 0
-3943 3942 0
-3943 -3941 0
c Var 'aux518' order represents '2' with '3944'
-3942 3944 0
c Var 'aux518' direct represents '2' with '3945'
3942 -3944 3945 0
-3945 3944 0
-3945 -3942 0
c Var 'aux518' order represents '3' with '3946'
-3944 3946 0
c Var 'aux518' direct represents '3' with '3947'
3944 -3946 3947 0
-3947 3946 0
-3947 -3944 0
c Var 'aux518' order represents '4' with '3948'
-3946 3948 0
c Var 'aux518' direct represents '4' with '3949'
3946 -3948 3949 0
-3949 3948 0
-3949 -3946 0
c Var 'aux518' order represents '5' with '3950'
-3948 3950 0
c Var 'aux518' direct represents '5' with '3951'
3948 -3950 3951 0
-3951 3950 0
-3951 -3948 0
c Var 'aux518' order represents '6' with '3952'
-3950 3952 0
c Var 'aux518' direct represents '6' with '3953'
3950 -3952 3953 0
-3953 3952 0
-3953 -3950 0
c Var 'aux518' order represents '7' with '3954'
-3952 3954 0
c Var 'aux518' direct represents '7' with '3955'
3952 -3954 3955 0
-3955 3954 0
-3955 -3952 0
c Var 'aux518' order represents '8' with '3956'
-3954 3956 0
c Var 'aux518' direct represents '8' with '3957'
3954 -3956 3957 0
-3957 3956 0
-3957 -3954 0
c Var 'aux518' order represents '9' with '3958'
-3956 3958 0
c Var 'aux518' direct represents '9' with '3959'
3956 -3958 3959 0
-3959 3958 0
-3959 -3956 0
c Var 'aux518' order represents '10' with '3960'
-3958 3960 0
c Var 'aux518' direct represents '10' with '3961'
3958 -3960 3961 0
-3961 3960 0
-3961 -3958 0
c Var 'aux518' order represents '11' with '3962'
-3960 3962 0
c Var 'aux518' direct represents '11' with '3963'
3960 -3962 3963 0
-3963 3962 0
-3963 -3960 0
c Var 'aux518' order represents '12' with '3964'
-3962 3964 0
c Var 'aux518' direct represents '12' with '3965'
3962 -3964 3965 0
-3965 3964 0
-3965 -3962 0
c Var 'aux518' order represents '13' with '3966'
-3964 3966 0
c Var 'aux518' direct represents '13' with '3967'
3964 -3966 3967 0
-3967 3966 0
-3967 -3964 0
c Var 'aux518' order represents '14' with '3968'
-3966 3968 0
c Var 'aux518' direct represents '14' with '3969'
3966 -3968 3969 0
-3969 3968 0
-3969 -3966 0
c Var 'aux518' order represents '15' with '3970'
-3968 3970 0
c Var 'aux518' direct represents '15' with '3971'
3968 -3970 3971 0
-3971 3970 0
-3971 -3968 0
c Var 'aux518' direct represents '16' with '-3970'
3941 3943 3945 3947 3949 3951 3953 3955 3957 3959 3961 3963 3965 3967 3969 3971 -3970 0
c Encoding variable: aux519 with domain: int(0..24) (representing constraint (shift(x_00003_00009, -1) + aux518))
c Both direct and order encoding.
c Var 'aux519' order represents '0' with '3972'
c Var 'aux519' direct represents '0' with '3972'
c Var 'aux519' order represents '1' with '3973'
-3972 3973 0
c Var 'aux519' direct represents '1' with '3974'
3972 -3973 3974 0
-3974 3973 0
-3974 -3972 0
c Var 'aux519' order represents '2' with '3975'
-3973 3975 0
c Var 'aux519' direct represents '2' with '3976'
3973 -3975 3976 0
-3976 3975 0
-3976 -3973 0
c Var 'aux519' order represents '3' with '3977'
-3975 3977 0
c Var 'aux519' direct represents '3' with '3978'
3975 -3977 3978 0
-3978 3977 0
-3978 -3975 0
c Var 'aux519' order represents '4' with '3979'
-3977 3979 0
c Var 'aux519' direct represents '4' with '3980'
3977 -3979 3980 0
-3980 3979 0
-3980 -3977 0
c Var 'aux519' order represents '5' with '3981'
-3979 3981 0
c Var 'aux519' direct represents '5' with '3982'
3979 -3981 3982 0
-3982 3981 0
-3982 -3979 0
c Var 'aux519' order represents '6' with '3983'
-3981 3983 0
c Var 'aux519' direct represents '6' with '3984'
3981 -3983 3984 0
-3984 3983 0
-3984 -3981 0
c Var 'aux519' order represents '7' with '3985'
-3983 3985 0
c Var 'aux519' direct represents '7' with '3986'
3983 -3985 3986 0
-3986 3985 0
-3986 -3983 0
c Var 'aux519' order represents '8' with '3987'
-3985 3987 0
c Var 'aux519' direct represents '8' with '3988'
3985 -3987 3988 0
-3988 3987 0
-3988 -3985 0
c Var 'aux519' order represents '9' with '3989'
-3987 3989 0
c Var 'aux519' direct represents '9' with '3990'
3987 -3989 3990 0
-3990 3989 0
-3990 -3987 0
c Var 'aux519' order represents '10' with '3991'
-3989 3991 0
c Var 'aux519' direct represents '10' with '3992'
3989 -3991 3992 0
-3992 3991 0
-3992 -3989 0
c Var 'aux519' order represents '11' with '3993'
-3991 3993 0
c Var 'aux519' direct represents '11' with '3994'
3991 -3993 3994 0
-3994 3993 0
-3994 -3991 0
c Var 'aux519' order represents '12' with '3995'
-3993 3995 0
c Var 'aux519' direct represents '12' with '3996'
3993 -3995 3996 0
-3996 3995 0
-3996 -3993 0
c Var 'aux519' order represents '13' with '3997'
-3995 3997 0
c Var 'aux519' direct represents '13' with '3998'
3995 -3997 3998 0
-3998 3997 0
-3998 -3995 0
c Var 'aux519' order represents '14' with '3999'
-3997 3999 0
c Var 'aux519' direct represents '14' with '4000'
3997 -3999 4000 0
-4000 3999 0
-4000 -3997 0
c Var 'aux519' order represents '15' with '4001'
-3999 4001 0
c Var 'aux519' direct represents '15' with '4002'
3999 -4001 4002 0
-4002 4001 0
-4002 -3999 0
c Var 'aux519' order represents '16' with '4003'
-4001 4003 0
c Var 'aux519' direct represents '16' with '4004'
4001 -4003 4004 0
-4004 4003 0
-4004 -4001 0
c Var 'aux519' order represents '17' with '4005'
-4003 4005 0
c Var 'aux519' direct represents '17' with '4006'
4003 -4005 4006 0
-4006 4005 0
-4006 -4003 0
c Var 'aux519' order represents '18' with '4007'
-4005 4007 0
c Var 'aux519' direct represents '18' with '4008'
4005 -4007 4008 0
-4008 4007 0
-4008 -4005 0
c Var 'aux519' order represents '19' with '4009'
-4007 4009 0
c Var 'aux519' direct represents '19' with '4010'
4007 -4009 4010 0
-4010 4009 0
-4010 -4007 0
c Var 'aux519' order represents '20' with '4011'
-4009 4011 0
c Var 'aux519' direct represents '20' with '4012'
4009 -4011 4012 0
-4012 4011 0
-4012 -4009 0
c Var 'aux519' order represents '21' with '4013'
-4011 4013 0
c Var 'aux519' direct represents '21' with '4014'
4011 -4013 4014 0
-4014 4013 0
-4014 -4011 0
c Var 'aux519' order represents '22' with '4015'
-4013 4015 0
c Var 'aux519' direct represents '22' with '4016'
4013 -4015 4016 0
-4016 4015 0
-4016 -4013 0
c Var 'aux519' order represents '23' with '4017'
-4015 4017 0
c Var 'aux519' direct represents '23' with '4018'
4015 -4017 4018 0
-4018 4017 0
-4018 -4015 0
c Var 'aux519' direct represents '24' with '-4017'
3972 3974 3976 3978 3980 3982 3984 3986 3988 3990 3992 3994 3996 3998 4000 4002 4004 4006 4008 4010 4012 4014 4016 4018 -4017 0
c Encoding variable: aux520 with domain: int(0..32) (representing constraint (aux515 + aux517))
c Both direct and order encoding.
c Var 'aux520' order represents '0' with '4019'
c Var 'aux520' direct represents '0' with '4019'
c Var 'aux520' order represents '1' with '4020'
-4019 4020 0
c Var 'aux520' direct represents '1' with '4021'
4019 -4020 4021 0
-4021 4020 0
-4021 -4019 0
c Var 'aux520' order represents '2' with '4022'
-4020 4022 0
c Var 'aux520' direct represents '2' with '4023'
4020 -4022 4023 0
-4023 4022 0
-4023 -4020 0
c Var 'aux520' order represents '3' with '4024'
-4022 4024 0
c Var 'aux520' direct represents '3' with '4025'
4022 -4024 4025 0
-4025 4024 0
-4025 -4022 0
c Var 'aux520' order represents '4' with '4026'
-4024 4026 0
c Var 'aux520' direct represents '4' with '4027'
4024 -4026 4027 0
-4027 4026 0
-4027 -4024 0
c Var 'aux520' order represents '5' with '4028'
-4026 4028 0
c Var 'aux520' direct represents '5' with '4029'
4026 -4028 4029 0
-4029 4028 0
-4029 -4026 0
c Var 'aux520' order represents '6' with '4030'
-4028 4030 0
c Var 'aux520' direct represents '6' with '4031'
4028 -4030 4031 0
-4031 4030 0
-4031 -4028 0
c Var 'aux520' order represents '7' with '4032'
-4030 4032 0
c Var 'aux520' direct represents '7' with '4033'
4030 -4032 4033 0
-4033 4032 0
-4033 -4030 0
c Var 'aux520' order represents '8' with '4034'
-4032 4034 0
c Var 'aux520' direct represents '8' with '4035'
4032 -4034 4035 0
-4035 4034 0
-4035 -4032 0
c Var 'aux520' order represents '9' with '4036'
-4034 4036 0
c Var 'aux520' direct represents '9' with '4037'
4034 -4036 4037 0
-4037 4036 0
-4037 -4034 0
c Var 'aux520' order represents '10' with '4038'
-4036 4038 0
c Var 'aux520' direct represents '10' with '4039'
4036 -4038 4039 0
-4039 4038 0
-4039 -4036 0
c Var 'aux520' order represents '11' with '4040'
-4038 4040 0
c Var 'aux520' direct represents '11' with '4041'
4038 -4040 4041 0
-4041 4040 0
-4041 -4038 0
c Var 'aux520' order represents '12' with '4042'
-4040 4042 0
c Var 'aux520' direct represents '12' with '4043'
4040 -4042 4043 0
-4043 4042 0
-4043 -4040 0
c Var 'aux520' order represents '13' with '4044'
-4042 4044 0
c Var 'aux520' direct represents '13' with '4045'
4042 -4044 4045 0
-4045 4044 0
-4045 -4042 0
c Var 'aux520' order represents '14' with '4046'
-4044 4046 0
c Var 'aux520' direct represents '14' with '4047'
4044 -4046 4047 0
-4047 4046 0
-4047 -4044 0
c Var 'aux520' order represents '15' with '4048'
-4046 4048 0
c Var 'aux520' direct represents '15' with '4049'
4046 -4048 4049 0
-4049 4048 0
-4049 -4046 0
c Var 'aux520' order represents '16' with '4050'
-4048 4050 0
c Var 'aux520' direct represents '16' with '4051'
4048 -4050 4051 0
-4051 4050 0
-4051 -4048 0
c Var 'aux520' order represents '17' with '4052'
-4050 4052 0
c Var 'aux520' direct represents '17' with '4053'
4050 -4052 4053 0
-4053 4052 0
-4053 -4050 0
c Var 'aux520' order represents '18' with '4054'
-4052 4054 0
c Var 'aux520' direct represents '18' with '4055'
4052 -4054 4055 0
-4055 4054 0
-4055 -4052 0
c Var 'aux520' order represents '19' with '4056'
-4054 4056 0
c Var 'aux520' direct represents '19' with '4057'
4054 -4056 4057 0
-4057 4056 0
-4057 -4054 0
c Var 'aux520' order represents '20' with '4058'
-4056 4058 0
c Var 'aux520' direct represents '20' with '4059'
4056 -4058 4059 0
-4059 4058 0
-4059 -4056 0
c Var 'aux520' order represents '21' with '4060'
-4058 4060 0
c Var 'aux520' direct represents '21' with '4061'
4058 -4060 4061 0
-4061 4060 0
-4061 -4058 0
c Var 'aux520' order represents '22' with '4062'
-4060 4062 0
c Var 'aux520' direct represents '22' with '4063'
4060 -4062 4063 0
-4063 4062 0
-4063 -4060 0
c Var 'aux520' order represents '23' with '4064'
-4062 4064 0
c Var 'aux520' direct represents '23' with '4065'
4062 -4064 4065 0
-4065 4064 0
-4065 -4062 0
c Var 'aux520' order represents '24' with '4066'
-4064 4066 0
c Var 'aux520' direct represents '24' with '4067'
4064 -4066 4067 0
-4067 4066 0
-4067 -4064 0
c Var 'aux520' order represents '25' with '4068'
-4066 4068 0
c Var 'aux520' direct represents '25' with '4069'
4066 -4068 4069 0
-4069 4068 0
-4069 -4066 0
c Var 'aux520' order represents '26' with '4070'
-4068 4070 0
c Var 'aux520' direct represents '26' with '4071'
4068 -4070 4071 0
-4071 4070 0
-4071 -4068 0
c Var 'aux520' order represents '27' with '4072'
-4070 4072 0
c Var 'aux520' direct represents '27' with '4073'
4070 -4072 4073 0
-4073 4072 0
-4073 -4070 0
c Var 'aux520' order represents '28' with '4074'
-4072 4074 0
c Var 'aux520' direct represents '28' with '4075'
4072 -4074 4075 0
-4075 4074 0
-4075 -4072 0
c Var 'aux520' order represents '29' with '4076'
-4074 4076 0
c Var 'aux520' direct represents '29' with '4077'
4074 -4076 4077 0
-4077 4076 0
-4077 -4074 0
c Var 'aux520' order represents '30' with '4078'
-4076 4078 0
c Var 'aux520' direct represents '30' with '4079'
4076 -4078 4079 0
-4079 4078 0
-4079 -4076 0
c Var 'aux520' order represents '31' with '4080'
-4078 4080 0
c Var 'aux520' direct represents '31' with '4081'
4078 -4080 4081 0
-4081 4080 0
-4081 -4078 0
c Var 'aux520' direct represents '32' with '-4080'
4019 4021 4023 4025 4027 4029 4031 4033 4035 4037 4039 4041 4043 4045 4047 4049 4051 4053 4055 4057 4059 4061 4063 4065 4067 4069 4071 4073 4075 4077 4079 4081 -4080 0
c Encoding variable: aux521 with domain: int(0..16) (representing constraint (shift(x_00001_00001, -1) + shift(x_00001_00009, -1)))
c Both direct and order encoding.
c Var 'aux521' order represents '0' with '4082'
c Var 'aux521' direct represents '0' with '4082'
c Var 'aux521' order represents '1' with '4083'
-4082 4083 0
c Var 'aux521' direct represents '1' with '4084'
4082 -4083 4084 0
-4084 4083 0
-4084 -4082 0
c Var 'aux521' order represents '2' with '4085'
-4083 4085 0
c Var 'aux521' direct represents '2' with '4086'
4083 -4085 4086 0
-4086 4085 0
-4086 -4083 0
c Var 'aux521' order represents '3' with '4087'
-4085 4087 0
c Var 'aux521' direct represents '3' with '4088'
4085 -4087 4088 0
-4088 4087 0
-4088 -4085 0
c Var 'aux521' order represents '4' with '4089'
-4087 4089 0
c Var 'aux521' direct represents '4' with '4090'
4087 -4089 4090 0
-4090 4089 0
-4090 -4087 0
c Var 'aux521' order represents '5' with '4091'
-4089 4091 0
c Var 'aux521' direct represents '5' with '4092'
4089 -4091 4092 0
-4092 4091 0
-4092 -4089 0
c Var 'aux521' order represents '6' with '4093'
-4091 4093 0
c Var 'aux521' direct represents '6' with '4094'
4091 -4093 4094 0
-4094 4093 0
-4094 -4091 0
c Var 'aux521' order represents '7' with '4095'
-4093 4095 0
c Var 'aux521' direct represents '7' with '4096'
4093 -4095 4096 0
-4096 4095 0
-4096 -4093 0
c Var 'aux521' order represents '8' with '4097'
-4095 4097 0
c Var 'aux521' direct represents '8' with '4098'
4095 -4097 4098 0
-4098 4097 0
-4098 -4095 0
c Var 'aux521' order represents '9' with '4099'
-4097 4099 0
c Var 'aux521' direct represents '9' with '4100'
4097 -4099 4100 0
-4100 4099 0
-4100 -4097 0
c Var 'aux521' order represents '10' with '4101'
-4099 4101 0
c Var 'aux521' direct represents '10' with '4102'
4099 -4101 4102 0
-4102 4101 0
-4102 -4099 0
c Var 'aux521' order represents '11' with '4103'
-4101 4103 0
c Var 'aux521' direct represents '11' with '4104'
4101 -4103 4104 0
-4104 4103 0
-4104 -4101 0
c Var 'aux521' order represents '12' with '4105'
-4103 4105 0
c Var 'aux521' direct represents '12' with '4106'
4103 -4105 4106 0
-4106 4105 0
-4106 -4103 0
c Var 'aux521' order represents '13' with '4107'
-4105 4107 0
c Var 'aux521' direct represents '13' with '4108'
4105 -4107 4108 0
-4108 4107 0
-4108 -4105 0
c Var 'aux521' order represents '14' with '4109'
-4107 4109 0
c Var 'aux521' direct represents '14' with '4110'
4107 -4109 4110 0
-4110 4109 0
-4110 -4107 0
c Var 'aux521' order represents '15' with '4111'
-4109 4111 0
c Var 'aux521' direct represents '15' with '4112'
4109 -4111 4112 0
-4112 4111 0
-4112 -4109 0
c Var 'aux521' direct represents '16' with '-4111'
4082 4084 4086 4088 4090 4092 4094 4096 4098 4100 4102 4104 4106 4108 4110 4112 -4111 0
c Encoding variable: aux522 with domain: int(0..16) (representing constraint (shift(x_00001_00008, -1) + shift(x_00001_00002, -1)))
c Both direct and order encoding.
c Var 'aux522' order represents '0' with '4113'
c Var 'aux522' direct represents '0' with '4113'
c Var 'aux522' order represents '1' with '4114'
-4113 4114 0
c Var 'aux522' direct represents '1' with '4115'
4113 -4114 4115 0
-4115 4114 0
-4115 -4113 0
c Var 'aux522' order represents '2' with '4116'
-4114 4116 0
c Var 'aux522' direct represents '2' with '4117'
4114 -4116 4117 0
-4117 4116 0
-4117 -4114 0
c Var 'aux522' order represents '3' with '4118'
-4116 4118 0
c Var 'aux522' direct represents '3' with '4119'
4116 -4118 4119 0
-4119 4118 0
-4119 -4116 0
c Var 'aux522' order represents '4' with '4120'
-4118 4120 0
c Var 'aux522' direct represents '4' with '4121'
4118 -4120 4121 0
-4121 4120 0
-4121 -4118 0
c Var 'aux522' order represents '5' with '4122'
-4120 4122 0
c Var 'aux522' direct represents '5' with '4123'
4120 -4122 4123 0
-4123 4122 0
-4123 -4120 0
c Var 'aux522' order represents '6' with '4124'
-4122 4124 0
c Var 'aux522' direct represents '6' with '4125'
4122 -4124 4125 0
-4125 4124 0
-4125 -4122 0
c Var 'aux522' order represents '7' with '4126'
-4124 4126 0
c Var 'aux522' direct represents '7' with '4127'
4124 -4126 4127 0
-4127 4126 0
-4127 -4124 0
c Var 'aux522' order represents '8' with '4128'
-4126 4128 0
c Var 'aux522' direct represents '8' with '4129'
4126 -4128 4129 0
-4129 4128 0
-4129 -4126 0
c Var 'aux522' order represents '9' with '4130'
-4128 4130 0
c Var 'aux522' direct represents '9' with '4131'
4128 -4130 4131 0
-4131 4130 0
-4131 -4128 0
c Var 'aux522' order represents '10' with '4132'
-4130 4132 0
c Var 'aux522' direct represents '10' with '4133'
4130 -4132 4133 0
-4133 4132 0
-4133 -4130 0
c Var 'aux522' order represents '11' with '4134'
-4132 4134 0
c Var 'aux522' direct represents '11' with '4135'
4132 -4134 4135 0
-4135 4134 0
-4135 -4132 0
c Var 'aux522' order represents '12' with '4136'
-4134 4136 0
c Var 'aux522' direct represents '12' with '4137'
4134 -4136 4137 0
-4137 4136 0
-4137 -4134 0
c Var 'aux522' order represents '13' with '4138'
-4136 4138 0
c Var 'aux522' direct represents '13' with '4139'
4136 -4138 4139 0
-4139 4138 0
-4139 -4136 0
c Var 'aux522' order represents '14' with '4140'
-4138 4140 0
c Var 'aux522' direct represents '14' with '4141'
4138 -4140 4141 0
-4141 4140 0
-4141 -4138 0
c Var 'aux522' order represents '15' with '4142'
-4140 4142 0
c Var 'aux522' direct represents '15' with '4143'
4140 -4142 4143 0
-4143 4142 0
-4143 -4140 0
c Var 'aux522' direct represents '16' with '-4142'
4113 4115 4117 4119 4121 4123 4125 4127 4129 4131 4133 4135 4137 4139 4141 4143 -4142 0
c Encoding variable: aux523 with domain: int(0..16) (representing constraint (shift(x_00001_00007, -1) + shift(x_00001_00004, -1)))
c Both direct and order encoding.
c Var 'aux523' order represents '0' with '4144'
c Var 'aux523' direct represents '0' with '4144'
c Var 'aux523' order represents '1' with '4145'
-4144 4145 0
c Var 'aux523' direct represents '1' with '4146'
4144 -4145 4146 0
-4146 4145 0
-4146 -4144 0
c Var 'aux523' order represents '2' with '4147'
-4145 4147 0
c Var 'aux523' direct represents '2' with '4148'
4145 -4147 4148 0
-4148 4147 0
-4148 -4145 0
c Var 'aux523' order represents '3' with '4149'
-4147 4149 0
c Var 'aux523' direct represents '3' with '4150'
4147 -4149 4150 0
-4150 4149 0
-4150 -4147 0
c Var 'aux523' order represents '4' with '4151'
-4149 4151 0
c Var 'aux523' direct represents '4' with '4152'
4149 -4151 4152 0
-4152 4151 0
-4152 -4149 0
c Var 'aux523' order represents '5' with '4153'
-4151 4153 0
c Var 'aux523' direct represents '5' with '4154'
4151 -4153 4154 0
-4154 4153 0
-4154 -4151 0
c Var 'aux523' order represents '6' with '4155'
-4153 4155 0
c Var 'aux523' direct represents '6' with '4156'
4153 -4155 4156 0
-4156 4155 0
-4156 -4153 0
c Var 'aux523' order represents '7' with '4157'
-4155 4157 0
c Var 'aux523' direct represents '7' with '4158'
4155 -4157 4158 0
-4158 4157 0
-4158 -4155 0
c Var 'aux523' order represents '8' with '4159'
-4157 4159 0
c Var 'aux523' direct represents '8' with '4160'
4157 -4159 4160 0
-4160 4159 0
-4160 -4157 0
c Var 'aux523' order represents '9' with '4161'
-4159 4161 0
c Var 'aux523' direct represents '9' with '4162'
4159 -4161 4162 0
-4162 4161 0
-4162 -4159 0
c Var 'aux523' order represents '10' with '4163'
-4161 4163 0
c Var 'aux523' direct represents '10' with '4164'
4161 -4163 4164 0
-4164 4163 0
-4164 -4161 0
c Var 'aux523' order represents '11' with '4165'
-4163 4165 0
c Var 'aux523' direct represents '11' with '4166'
4163 -4165 4166 0
-4166 4165 0
-4166 -4163 0
c Var 'aux523' order represents '12' with '4167'
-4165 4167 0
c Var 'aux523' direct represents '12' with '4168'
4165 -4167 4168 0
-4168 4167 0
-4168 -4165 0
c Var 'aux523' order represents '13' with '4169'
-4167 4169 0
c Var 'aux523' direct represents '13' with '4170'
4167 -4169 4170 0
-4170 4169 0
-4170 -4167 0
c Var 'aux523' order represents '14' with '4171'
-4169 4171 0
c Var 'aux523' direct represents '14' with '4172'
4169 -4171 4172 0
-4172 4171 0
-4172 -4169 0
c Var 'aux523' order represents '15' with '4173'
-4171 4173 0
c Var 'aux523' direct represents '15' with '4174'
4171 -4173 4174 0
-4174 4173 0
-4174 -4171 0
c Var 'aux523' direct represents '16' with '-4173'
4144 4146 4148 4150 4152 4154 4156 4158 4160 4162 4164 4166 4168 4170 4172 4174 -4173 0
c Encoding variable: aux524 with domain: int(0..16) (representing constraint (shift(x_00001_00006, -1) + shift(x_00001_00005, -1)))
c Both direct and order encoding.
c Var 'aux524' order represents '0' with '4175'
c Var 'aux524' direct represents '0' with '4175'
c Var 'aux524' order represents '1' with '4176'
-4175 4176 0
c Var 'aux524' direct represents '1' with '4177'
4175 -4176 4177 0
-4177 4176 0
-4177 -4175 0
c Var 'aux524' order represents '2' with '4178'
-4176 4178 0
c Var 'aux524' direct represents '2' with '4179'
4176 -4178 4179 0
-4179 4178 0
-4179 -4176 0
c Var 'aux524' order represents '3' with '4180'
-4178 4180 0
c Var 'aux524' direct represents '3' with '4181'
4178 -4180 4181 0
-4181 4180 0
-4181 -4178 0
c Var 'aux524' order represents '4' with '4182'
-4180 4182 0
c Var 'aux524' direct represents '4' with '4183'
4180 -4182 4183 0
-4183 4182 0
-4183 -4180 0
c Var 'aux524' order represents '5' with '4184'
-4182 4184 0
c Var 'aux524' direct represents '5' with '4185'
4182 -4184 4185 0
-4185 4184 0
-4185 -4182 0
c Var 'aux524' order represents '6' with '4186'
-4184 4186 0
c Var 'aux524' direct represents '6' with '4187'
4184 -4186 4187 0
-4187 4186 0
-4187 -4184 0
c Var 'aux524' order represents '7' with '4188'
-4186 4188 0
c Var 'aux524' direct represents '7' with '4189'
4186 -4188 4189 0
-4189 4188 0
-4189 -4186 0
c Var 'aux524' order represents '8' with '4190'
-4188 4190 0
c Var 'aux524' direct represents '8' with '4191'
4188 -4190 4191 0
-4191 4190 0
-4191 -4188 0
c Var 'aux524' order represents '9' with '4192'
-4190 4192 0
c Var 'aux524' direct represents '9' with '4193'
4190 -4192 4193 0
-4193 4192 0
-4193 -4190 0
c Var 'aux524' order represents '10' with '4194'
-4192 4194 0
c Var 'aux524' direct represents '10' with '4195'
4192 -4194 4195 0
-4195 4194 0
-4195 -4192 0
c Var 'aux524' order represents '11' with '4196'
-4194 4196 0
c Var 'aux524' direct represents '11' with '4197'
4194 -4196 4197 0
-4197 4196 0
-4197 -4194 0
c Var 'aux524' order represents '12' with '4198'
-4196 4198 0
c Var 'aux524' direct represents '12' with '4199'
4196 -4198 4199 0
-4199 4198 0
-4199 -4196 0
c Var 'aux524' order represents '13' with '4200'
-4198 4200 0
c Var 'aux524' direct represents '13' with '4201'
4198 -4200 4201 0
-4201 4200 0
-4201 -4198 0
c Var 'aux524' order represents '14' with '4202'
-4200 4202 0
c Var 'aux524' direct represents '14' with '4203'
4200 -4202 4203 0
-4203 4202 0
-4203 -4200 0
c Var 'aux524' order represents '15' with '4204'
-4202 4204 0
c Var 'aux524' direct represents '15' with '4205'
4202 -4204 4205 0
-4205 4204 0
-4205 -4202 0
c Var 'aux524' direct represents '16' with '-4204'
4175 4177 4179 4181 4183 4185 4187 4189 4191 4193 4195 4197 4199 4201 4203 4205 -4204 0
c Encoding variable: aux525 with domain: int(0..24) (representing constraint (shift(x_00001_00003, -1) + aux524))
c Both direct and order encoding.
c Var 'aux525' order represents '0' with '4206'
c Var 'aux525' direct represents '0' with '4206'
c Var 'aux525' order represents '1' with '4207'
-4206 4207 0
c Var 'aux525' direct represents '1' with '4208'
4206 -4207 4208 0
-4208 4207 0
-4208 -4206 0
c Var 'aux525' order represents '2' with '4209'
-4207 4209 0
c Var 'aux525' direct represents '2' with '4210'
4207 -4209 4210 0
-4210 4209 0
-4210 -4207 0
c Var 'aux525' order represents '3' with '4211'
-4209 4211 0
c Var 'aux525' direct represents '3' with '4212'
4209 -4211 4212 0
-4212 4211 0
-4212 -4209 0
c Var 'aux525' order represents '4' with '4213'
-4211 4213 0
c Var 'aux525' direct represents '4' with '4214'
4211 -4213 4214 0
-4214 4213 0
-4214 -4211 0
c Var 'aux525' order represents '5' with '4215'
-4213 4215 0
c Var 'aux525' direct represents '5' with '4216'
4213 -4215 4216 0
-4216 4215 0
-4216 -4213 0
c Var 'aux525' order represents '6' with '4217'
-4215 4217 0
c Var 'aux525' direct represents '6' with '4218'
4215 -4217 4218 0
-4218 4217 0
-4218 -4215 0
c Var 'aux525' order represents '7' with '4219'
-4217 4219 0
c Var 'aux525' direct represents '7' with '4220'
4217 -4219 4220 0
-4220 4219 0
-4220 -4217 0
c Var 'aux525' order represents '8' with '4221'
-4219 4221 0
c Var 'aux525' direct represents '8' with '4222'
4219 -4221 4222 0
-4222 4221 0
-4222 -4219 0
c Var 'aux525' order represents '9' with '4223'
-4221 4223 0
c Var 'aux525' direct represents '9' with '4224'
4221 -4223 4224 0
-4224 4223 0
-4224 -4221 0
c Var 'aux525' order represents '10' with '4225'
-4223 4225 0
c Var 'aux525' direct represents '10' with '4226'
4223 -4225 4226 0
-4226 4225 0
-4226 -4223 0
c Var 'aux525' order represents '11' with '4227'
-4225 4227 0
c Var 'aux525' direct represents '11' with '4228'
4225 -4227 4228 0
-4228 4227 0
-4228 -4225 0
c Var 'aux525' order represents '12' with '4229'
-4227 4229 0
c Var 'aux525' direct represents '12' with '4230'
4227 -4229 4230 0
-4230 4229 0
-4230 -4227 0
c Var 'aux525' order represents '13' with '4231'
-4229 4231 0
c Var 'aux525' direct represents '13' with '4232'
4229 -4231 4232 0
-4232 4231 0
-4232 -4229 0
c Var 'aux525' order represents '14' with '4233'
-4231 4233 0
c Var 'aux525' direct represents '14' with '4234'
4231 -4233 4234 0
-4234 4233 0
-4234 -4231 0
c Var 'aux525' order represents '15' with '4235'
-4233 4235 0
c Var 'aux525' direct represents '15' with '4236'
4233 -4235 4236 0
-4236 4235 0
-4236 -4233 0
c Var 'aux525' order represents '16' with '4237'
-4235 4237 0
c Var 'aux525' direct represents '16' with '4238'
4235 -4237 4238 0
-4238 4237 0
-4238 -4235 0
c Var 'aux525' order represents '17' with '4239'
-4237 4239 0
c Var 'aux525' direct represents '17' with '4240'
4237 -4239 4240 0
-4240 4239 0
-4240 -4237 0
c Var 'aux525' order represents '18' with '4241'
-4239 4241 0
c Var 'aux525' direct represents '18' with '4242'
4239 -4241 4242 0
-4242 4241 0
-4242 -4239 0
c Var 'aux525' order represents '19' with '4243'
-4241 4243 0
c Var 'aux525' direct represents '19' with '4244'
4241 -4243 4244 0
-4244 4243 0
-4244 -4241 0
c Var 'aux525' order represents '20' with '4245'
-4243 4245 0
c Var 'aux525' direct represents '20' with '4246'
4243 -4245 4246 0
-4246 4245 0
-4246 -4243 0
c Var 'aux525' order represents '21' with '4247'
-4245 4247 0
c Var 'aux525' direct represents '21' with '4248'
4245 -4247 4248 0
-4248 4247 0
-4248 -4245 0
c Var 'aux525' order represents '22' with '4249'
-4247 4249 0
c Var 'aux525' direct represents '22' with '4250'
4247 -4249 4250 0
-4250 4249 0
-4250 -4247 0
c Var 'aux525' order represents '23' with '4251'
-4249 4251 0
c Var 'aux525' direct represents '23' with '4252'
4249 -4251 4252 0
-4252 4251 0
-4252 -4249 0
c Var 'aux525' direct represents '24' with '-4251'
4206 4208 4210 4212 4214 4216 4218 4220 4222 4224 4226 4228 4230 4232 4234 4236 4238 4240 4242 4244 4246 4248 4250 4252 -4251 0
c Encoding variable: aux526 with domain: int(0..32) (representing constraint (aux521 + aux523))
c Both direct and order encoding.
c Var 'aux526' order represents '0' with '4253'
c Var 'aux526' direct represents '0' with '4253'
c Var 'aux526' order represents '1' with '4254'
-4253 4254 0
c Var 'aux526' direct represents '1' with '4255'
4253 -4254 4255 0
-4255 4254 0
-4255 -4253 0
c Var 'aux526' order represents '2' with '4256'
-4254 4256 0
c Var 'aux526' direct represents '2' with '4257'
4254 -4256 4257 0
-4257 4256 0
-4257 -4254 0
c Var 'aux526' order represents '3' with '4258'
-4256 4258 0
c Var 'aux526' direct represents '3' with '4259'
4256 -4258 4259 0
-4259 4258 0
-4259 -4256 0
c Var 'aux526' order represents '4' with '4260'
-4258 4260 0
c Var 'aux526' direct represents '4' with '4261'
4258 -4260 4261 0
-4261 4260 0
-4261 -4258 0
c Var 'aux526' order represents '5' with '4262'
-4260 4262 0
c Var 'aux526' direct represents '5' with '4263'
4260 -4262 4263 0
-4263 4262 0
-4263 -4260 0
c Var 'aux526' order represents '6' with '4264'
-4262 4264 0
c Var 'aux526' direct represents '6' with '4265'
4262 -4264 4265 0
-4265 4264 0
-4265 -4262 0
c Var 'aux526' order represents '7' with '4266'
-4264 4266 0
c Var 'aux526' direct represents '7' with '4267'
4264 -4266 4267 0
-4267 4266 0
-4267 -4264 0
c Var 'aux526' order represents '8' with '4268'
-4266 4268 0
c Var 'aux526' direct represents '8' with '4269'
4266 -4268 4269 0
-4269 4268 0
-4269 -4266 0
c Var 'aux526' order represents '9' with '4270'
-4268 4270 0
c Var 'aux526' direct represents '9' with '4271'
4268 -4270 4271 0
-4271 4270 0
-4271 -4268 0
c Var 'aux526' order represents '10' with '4272'
-4270 4272 0
c Var 'aux526' direct represents '10' with '4273'
4270 -4272 4273 0
-4273 4272 0
-4273 -4270 0
c Var 'aux526' order represents '11' with '4274'
-4272 4274 0
c Var 'aux526' direct represents '11' with '4275'
4272 -4274 4275 0
-4275 4274 0
-4275 -4272 0
c Var 'aux526' order represents '12' with '4276'
-4274 4276 0
c Var 'aux526' direct represents '12' with '4277'
4274 -4276 4277 0
-4277 4276 0
-4277 -4274 0
c Var 'aux526' order represents '13' with '4278'
-4276 4278 0
c Var 'aux526' direct represents '13' with '4279'
4276 -4278 4279 0
-4279 4278 0
-4279 -4276 0
c Var 'aux526' order represents '14' with '4280'
-4278 4280 0
c Var 'aux526' direct represents '14' with '4281'
4278 -4280 4281 0
-4281 4280 0
-4281 -4278 0
c Var 'aux526' order represents '15' with '4282'
-4280 4282 0
c Var 'aux526' direct represents '15' with '4283'
4280 -4282 4283 0
-4283 4282 0
-4283 -4280 0
c Var 'aux526' order represents '16' with '4284'
-4282 4284 0
c Var 'aux526' direct represents '16' with '4285'
4282 -4284 4285 0
-4285 4284 0
-4285 -4282 0
c Var 'aux526' order represents '17' with '4286'
-4284 4286 0
c Var 'aux526' direct represents '17' with '4287'
4284 -4286 4287 0
-4287 4286 0
-4287 -4284 0
c Var 'aux526' order represents '18' with '4288'
-4286 4288 0
c Var 'aux526' direct represents '18' with '4289'
4286 -4288 4289 0
-4289 4288 0
-4289 -4286 0
c Var 'aux526' order represents '19' with '4290'
-4288 4290 0
c Var 'aux526' direct represents '19' with '4291'
4288 -4290 4291 0
-4291 4290 0
-4291 -4288 0
c Var 'aux526' order represents '20' with '4292'
-4290 4292 0
c Var 'aux526' direct represents '20' with '4293'
4290 -4292 4293 0
-4293 4292 0
-4293 -4290 0
c Var 'aux526' order represents '21' with '4294'
-4292 4294 0
c Var 'aux526' direct represents '21' with '4295'
4292 -4294 4295 0
-4295 4294 0
-4295 -4292 0
c Var 'aux526' order represents '22' with '4296'
-4294 4296 0
c Var 'aux526' direct represents '22' with '4297'
4294 -4296 4297 0
-4297 4296 0
-4297 -4294 0
c Var 'aux526' order represents '23' with '4298'
-4296 4298 0
c Var 'aux526' direct represents '23' with '4299'
4296 -4298 4299 0
-4299 4298 0
-4299 -4296 0
c Var 'aux526' order represents '24' with '4300'
-4298 4300 0
c Var 'aux526' direct represents '24' with '4301'
4298 -4300 4301 0
-4301 4300 0
-4301 -4298 0
c Var 'aux526' order represents '25' with '4302'
-4300 4302 0
c Var 'aux526' direct represents '25' with '4303'
4300 -4302 4303 0
-4303 4302 0
-4303 -4300 0
c Var 'aux526' order represents '26' with '4304'
-4302 4304 0
c Var 'aux526' direct represents '26' with '4305'
4302 -4304 4305 0
-4305 4304 0
-4305 -4302 0
c Var 'aux526' order represents '27' with '4306'
-4304 4306 0
c Var 'aux526' direct represents '27' with '4307'
4304 -4306 4307 0
-4307 4306 0
-4307 -4304 0
c Var 'aux526' order represents '28' with '4308'
-4306 4308 0
c Var 'aux526' direct represents '28' with '4309'
4306 -4308 4309 0
-4309 4308 0
-4309 -4306 0
c Var 'aux526' order represents '29' with '4310'
-4308 4310 0
c Var 'aux526' direct represents '29' with '4311'
4308 -4310 4311 0
-4311 4310 0
-4311 -4308 0
c Var 'aux526' order represents '30' with '4312'
-4310 4312 0
c Var 'aux526' direct represents '30' with '4313'
4310 -4312 4313 0
-4313 4312 0
-4313 -4310 0
c Var 'aux526' order represents '31' with '4314'
-4312 4314 0
c Var 'aux526' direct represents '31' with '4315'
4312 -4314 4315 0
-4315 4314 0
-4315 -4312 0
c Var 'aux526' direct represents '32' with '-4314'
4253 4255 4257 4259 4261 4263 4265 4267 4269 4271 4273 4275 4277 4279 4281 4283 4285 4287 4289 4291 4293 4295 4297 4299 4301 4303 4305 4307 4309 4311 4313 4315 -4314 0
c Encoding variable: aux527 with domain: int(0..16) (representing constraint (shift(x_00002_00001, -1) + shift(x_00002_00009, -1)))
c Both direct and order encoding.
c Var 'aux527' order represents '0' with '4316'
c Var 'aux527' direct represents '0' with '4316'
c Var 'aux527' order represents '1' with '4317'
-4316 4317 0
c Var 'aux527' direct represents '1' with '4318'
4316 -4317 4318 0
-4318 4317 0
-4318 -4316 0
c Var 'aux527' order represents '2' with '4319'
-4317 4319 0
c Var 'aux527' direct represents '2' with '4320'
4317 -4319 4320 0
-4320 4319 0
-4320 -4317 0
c Var 'aux527' order represents '3' with '4321'
-4319 4321 0
c Var 'aux527' direct represents '3' with '4322'
4319 -4321 4322 0
-4322 4321 0
-4322 -4319 0
c Var 'aux527' order represents '4' with '4323'
-4321 4323 0
c Var 'aux527' direct represents '4' with '4324'
4321 -4323 4324 0
-4324 4323 0
-4324 -4321 0
c Var 'aux527' order represents '5' with '4325'
-4323 4325 0
c Var 'aux527' direct represents '5' with '4326'
4323 -4325 4326 0
-4326 4325 0
-4326 -4323 0
c Var 'aux527' order represents '6' with '4327'
-4325 4327 0
c Var 'aux527' direct represents '6' with '4328'
4325 -4327 4328 0
-4328 4327 0
-4328 -4325 0
c Var 'aux527' order represents '7' with '4329'
-4327 4329 0
c Var 'aux527' direct represents '7' with '4330'
4327 -4329 4330 0
-4330 4329 0
-4330 -4327 0
c Var 'aux527' order represents '8' with '4331'
-4329 4331 0
c Var 'aux527' direct represents '8' with '4332'
4329 -4331 4332 0
-4332 4331 0
-4332 -4329 0
c Var 'aux527' order represents '9' with '4333'
-4331 4333 0
c Var 'aux527' direct represents '9' with '4334'
4331 -4333 4334 0
-4334 4333 0
-4334 -4331 0
c Var 'aux527' order represents '10' with '4335'
-4333 4335 0
c Var 'aux527' direct represents '10' with '4336'
4333 -4335 4336 0
-4336 4335 0
-4336 -4333 0
c Var 'aux527' order represents '11' with '4337'
-4335 4337 0
c Var 'aux527' direct represents '11' with '4338'
4335 -4337 4338 0
-4338 4337 0
-4338 -4335 0
c Var 'aux527' order represents '12' with '4339'
-4337 4339 0
c Var 'aux527' direct represents '12' with '4340'
4337 -4339 4340 0
-4340 4339 0
-4340 -4337 0
c Var 'aux527' order represents '13' with '4341'
-4339 4341 0
c Var 'aux527' direct represents '13' with '4342'
4339 -4341 4342 0
-4342 4341 0
-4342 -4339 0
c Var 'aux527' order represents '14' with '4343'
-4341 4343 0
c Var 'aux527' direct represents '14' with '4344'
4341 -4343 4344 0
-4344 4343 0
-4344 -4341 0
c Var 'aux527' order represents '15' with '4345'
-4343 4345 0
c Var 'aux527' direct represents '15' with '4346'
4343 -4345 4346 0
-4346 4345 0
-4346 -4343 0
c Var 'aux527' direct represents '16' with '-4345'
4316 4318 4320 4322 4324 4326 4328 4330 4332 4334 4336 4338 4340 4342 4344 4346 -4345 0
c Encoding variable: aux528 with domain: int(0..16) (representing constraint (shift(x_00002_00008, -1) + shift(x_00002_00002, -1)))
c Both direct and order encoding.
c Var 'aux528' order represents '0' with '4347'
c Var 'aux528' direct represents '0' with '4347'
c Var 'aux528' order represents '1' with '4348'
-4347 4348 0
c Var 'aux528' direct represents '1' with '4349'
4347 -4348 4349 0
-4349 4348 0
-4349 -4347 0
c Var 'aux528' order represents '2' with '4350'
-4348 4350 0
c Var 'aux528' direct represents '2' with '4351'
4348 -4350 4351 0
-4351 4350 0
-4351 -4348 0
c Var 'aux528' order represents '3' with '4352'
-4350 4352 0
c Var 'aux528' direct represents '3' with '4353'
4350 -4352 4353 0
-4353 4352 0
-4353 -4350 0
c Var 'aux528' order represents '4' with '4354'
-4352 4354 0
c Var 'aux528' direct represents '4' with '4355'
4352 -4354 4355 0
-4355 4354 0
-4355 -4352 0
c Var 'aux528' order represents '5' with '4356'
-4354 4356 0
c Var 'aux528' direct represents '5' with '4357'
4354 -4356 4357 0
-4357 4356 0
-4357 -4354 0
c Var 'aux528' order represents '6' with '4358'
-4356 4358 0
c Var 'aux528' direct represents '6' with '4359'
4356 -4358 4359 0
-4359 4358 0
-4359 -4356 0
c Var 'aux528' order represents '7' with '4360'
-4358 4360 0
c Var 'aux528' direct represents '7' with '4361'
4358 -4360 4361 0
-4361 4360 0
-4361 -4358 0
c Var 'aux528' order represents '8' with '4362'
-4360 4362 0
c Var 'aux528' direct represents '8' with '4363'
4360 -4362 4363 0
-4363 4362 0
-4363 -4360 0
c Var 'aux528' order represents '9' with '4364'
-4362 4364 0
c Var 'aux528' direct represents '9' with '4365'
4362 -4364 4365 0
-4365 4364 0
-4365 -4362 0
c Var 'aux528' order represents '10' with '4366'
-4364 4366 0
c Var 'aux528' direct represents '10' with '4367'
4364 -4366 4367 0
-4367 4366 0
-4367 -4364 0
c Var 'aux528' order represents '11' with '4368'
-4366 4368 0
c Var 'aux528' direct represents '11' with '4369'
4366 -4368 4369 0
-4369 4368 0
-4369 -4366 0
c Var 'aux528' order represents '12' with '4370'
-4368 4370 0
c Var 'aux528' direct represents '12' with '4371'
4368 -4370 4371 0
-4371 4370 0
-4371 -4368 0
c Var 'aux528' order represents '13' with '4372'
-4370 4372 0
c Var 'aux528' direct represents '13' with '4373'
4370 -4372 4373 0
-4373 4372 0
-4373 -4370 0
c Var 'aux528' order represents '14' with '4374'
-4372 4374 0
c Var 'aux528' direct represents '14' with '4375'
4372 -4374 4375 0
-4375 4374 0
-4375 -4372 0
c Var 'aux528' order represents '15' with '4376'
-4374 4376 0
c Var 'aux528' direct represents '15' with '4377'
4374 -4376 4377 0
-4377 4376 0
-4377 -4374 0
c Var 'aux528' direct represents '16' with '-4376'
4347 4349 4351 4353 4355 4357 4359 4361 4363 4365 4367 4369 4371 4373 4375 4377 -4376 0
c Encoding variable: aux529 with domain: int(0..16) (representing constraint (shift(x_00002_00007, -1) + shift(x_00002_00004, -1)))
c Both direct and order encoding.
c Var 'aux529' order represents '0' with '4378'
c Var 'aux529' direct represents '0' with '4378'
c Var 'aux529' order represents '1' with '4379'
-4378 4379 0
c Var 'aux529' direct represents '1' with '4380'
4378 -4379 4380 0
-4380 4379 0
-4380 -4378 0
c Var 'aux529' order represents '2' with '4381'
-4379 4381 0
c Var 'aux529' direct represents '2' with '4382'
4379 -4381 4382 0
-4382 4381 0
-4382 -4379 0
c Var 'aux529' order represents '3' with '4383'
-4381 4383 0
c Var 'aux529' direct represents '3' with '4384'
4381 -4383 4384 0
-4384 4383 0
-4384 -4381 0
c Var 'aux529' order represents '4' with '4385'
-4383 4385 0
c Var 'aux529' direct represents '4' with '4386'
4383 -4385 4386 0
-4386 4385 0
-4386 -4383 0
c Var 'aux529' order represents '5' with '4387'
-4385 4387 0
c Var 'aux529' direct represents '5' with '4388'
4385 -4387 4388 0
-4388 4387 0
-4388 -4385 0
c Var 'aux529' order represents '6' with '4389'
-4387 4389 0
c Var 'aux529' direct represents '6' with '4390'
4387 -4389 4390 0
-4390 4389 0
-4390 -4387 0
c Var 'aux529' order represents '7' with '4391'
-4389 4391 0
c Var 'aux529' direct represents '7' with '4392'
4389 -4391 4392 0
-4392 4391 0
-4392 -4389 0
c Var 'aux529' order represents '8' with '4393'
-4391 4393 0
c Var 'aux529' direct represents '8' with '4394'
4391 -4393 4394 0
-4394 4393 0
-4394 -4391 0
c Var 'aux529' order represents '9' with '4395'
-4393 4395 0
c Var 'aux529' direct represents '9' with '4396'
4393 -4395 4396 0
-4396 4395 0
-4396 -4393 0
c Var 'aux529' order represents '10' with '4397'
-4395 4397 0
c Var 'aux529' direct represents '10' with '4398'
4395 -4397 4398 0
-4398 4397 0
-4398 -4395 0
c Var 'aux529' order represents '11' with '4399'
-4397 4399 0
c Var 'aux529' direct represents '11' with '4400'
4397 -4399 4400 0
-4400 4399 0
-4400 -4397 0
c Var 'aux529' order represents '12' with '4401'
-4399 4401 0
c Var 'aux529' direct represents '12' with '4402'
4399 -4401 4402 0
-4402 4401 0
-4402 -4399 0
c Var 'aux529' order represents '13' with '4403'
-4401 4403 0
c Var 'aux529' direct represents '13' with '4404'
4401 -4403 4404 0
-4404 4403 0
-4404 -4401 0
c Var 'aux529' order represents '14' with '4405'
-4403 4405 0
c Var 'aux529' direct represents '14' with '4406'
4403 -4405 4406 0
-4406 4405 0
-4406 -4403 0
c Var 'aux529' order represents '15' with '4407'
-4405 4407 0
c Var 'aux529' direct represents '15' with '4408'
4405 -4407 4408 0
-4408 4407 0
-4408 -4405 0
c Var 'aux529' direct represents '16' with '-4407'
4378 4380 4382 4384 4386 4388 4390 4392 4394 4396 4398 4400 4402 4404 4406 4408 -4407 0
c Encoding variable: aux530 with domain: int(0..16) (representing constraint (shift(x_00002_00006, -1) + shift(x_00002_00005, -1)))
c Both direct and order encoding.
c Var 'aux530' order represents '0' with '4409'
c Var 'aux530' direct represents '0' with '4409'
c Var 'aux530' order represents '1' with '4410'
-4409 4410 0
c Var 'aux530' direct represents '1' with '4411'
4409 -4410 4411 0
-4411 4410 0
-4411 -4409 0
c Var 'aux530' order represents '2' with '4412'
-4410 4412 0
c Var 'aux530' direct represents '2' with '4413'
4410 -4412 4413 0
-4413 4412 0
-4413 -4410 0
c Var 'aux530' order represents '3' with '4414'
-4412 4414 0
c Var 'aux530' direct represents '3' with '4415'
4412 -4414 4415 0
-4415 4414 0
-4415 -4412 0
c Var 'aux530' order represents '4' with '4416'
-4414 4416 0
c Var 'aux530' direct represents '4' with '4417'
4414 -4416 4417 0
-4417 4416 0
-4417 -4414 0
c Var 'aux530' order represents '5' with '4418'
-4416 4418 0
c Var 'aux530' direct represents '5' with '4419'
4416 -4418 4419 0
-4419 4418 0
-4419 -4416 0
c Var 'aux530' order represents '6' with '4420'
-4418 4420 0
c Var 'aux530' direct represents '6' with '4421'
4418 -4420 4421 0
-4421 4420 0
-4421 -4418 0
c Var 'aux530' order represents '7' with '4422'
-4420 4422 0
c Var 'aux530' direct represents '7' with '4423'
4420 -4422 4423 0
-4423 4422 0
-4423 -4420 0
c Var 'aux530' order represents '8' with '4424'
-4422 4424 0
c Var 'aux530' direct represents '8' with '4425'
4422 -4424 4425 0
-4425 4424 0
-4425 -4422 0
c Var 'aux530' order represents '9' with '4426'
-4424 4426 0
c Var 'aux530' direct represents '9' with '4427'
4424 -4426 4427 0
-4427 4426 0
-4427 -4424 0
c Var 'aux530' order represents '10' with '4428'
-4426 4428 0
c Var 'aux530' direct represents '10' with '4429'
4426 -4428 4429 0
-4429 4428 0
-4429 -4426 0
c Var 'aux530' order represents '11' with '4430'
-4428 4430 0
c Var 'aux530' direct represents '11' with '4431'
4428 -4430 4431 0
-4431 4430 0
-4431 -4428 0
c Var 'aux530' order represents '12' with '4432'
-4430 4432 0
c Var 'aux530' direct represents '12' with '4433'
4430 -4432 4433 0
-4433 4432 0
-4433 -4430 0
c Var 'aux530' order represents '13' with '4434'
-4432 4434 0
c Var 'aux530' direct represents '13' with '4435'
4432 -4434 4435 0
-4435 4434 0
-4435 -4432 0
c Var 'aux530' order represents '14' with '4436'
-4434 4436 0
c Var 'aux530' direct represents '14' with '4437'
4434 -4436 4437 0
-4437 4436 0
-4437 -4434 0
c Var 'aux530' order represents '15' with '4438'
-4436 4438 0
c Var 'aux530' direct represents '15' with '4439'
4436 -4438 4439 0
-4439 4438 0
-4439 -4436 0
c Var 'aux530' direct represents '16' with '-4438'
4409 4411 4413 4415 4417 4419 4421 4423 4425 4427 4429 4431 4433 4435 4437 4439 -4438 0
c Encoding variable: aux531 with domain: int(0..24) (representing constraint (shift(x_00002_00003, -1) + aux530))
c Both direct and order encoding.
c Var 'aux531' order represents '0' with '4440'
c Var 'aux531' direct represents '0' with '4440'
c Var 'aux531' order represents '1' with '4441'
-4440 4441 0
c Var 'aux531' direct represents '1' with '4442'
4440 -4441 4442 0
-4442 4441 0
-4442 -4440 0
c Var 'aux531' order represents '2' with '4443'
-4441 4443 0
c Var 'aux531' direct represents '2' with '4444'
4441 -4443 4444 0
-4444 4443 0
-4444 -4441 0
c Var 'aux531' order represents '3' with '4445'
-4443 4445 0
c Var 'aux531' direct represents '3' with '4446'
4443 -4445 4446 0
-4446 4445 0
-4446 -4443 0
c Var 'aux531' order represents '4' with '4447'
-4445 4447 0
c Var 'aux531' direct represents '4' with '4448'
4445 -4447 4448 0
-4448 4447 0
-4448 -4445 0
c Var 'aux531' order represents '5' with '4449'
-4447 4449 0
c Var 'aux531' direct represents '5' with '4450'
4447 -4449 4450 0
-4450 4449 0
-4450 -4447 0
c Var 'aux531' order represents '6' with '4451'
-4449 4451 0
c Var 'aux531' direct represents '6' with '4452'
4449 -4451 4452 0
-4452 4451 0
-4452 -4449 0
c Var 'aux531' order represents '7' with '4453'
-4451 4453 0
c Var 'aux531' direct represents '7' with '4454'
4451 -4453 4454 0
-4454 4453 0
-4454 -4451 0
c Var 'aux531' order represents '8' with '4455'
-4453 4455 0
c Var 'aux531' direct represents '8' with '4456'
4453 -4455 4456 0
-4456 4455 0
-4456 -4453 0
c Var 'aux531' order represents '9' with '4457'
-4455 4457 0
c Var 'aux531' direct represents '9' with '4458'
4455 -4457 4458 0
-4458 4457 0
-4458 -4455 0
c Var 'aux531' order represents '10' with '4459'
-4457 4459 0
c Var 'aux531' direct represents '10' with '4460'
4457 -4459 4460 0
-4460 4459 0
-4460 -4457 0
c Var 'aux531' order represents '11' with '4461'
-4459 4461 0
c Var 'aux531' direct represents '11' with '4462'
4459 -4461 4462 0
-4462 4461 0
-4462 -4459 0
c Var 'aux531' order represents '12' with '4463'
-4461 4463 0
c Var 'aux531' direct represents '12' with '4464'
4461 -4463 4464 0
-4464 4463 0
-4464 -4461 0
c Var 'aux531' order represents '13' with '4465'
-4463 4465 0
c Var 'aux531' direct represents '13' with '4466'
4463 -4465 4466 0
-4466 4465 0
-4466 -4463 0
c Var 'aux531' order represents '14' with '4467'
-4465 4467 0
c Var 'aux531' direct represents '14' with '4468'
4465 -4467 4468 0
-4468 4467 0
-4468 -4465 0
c Var 'aux531' order represents '15' with '4469'
-4467 4469 0
c Var 'aux531' direct represents '15' with '4470'
4467 -4469 4470 0
-4470 4469 0
-4470 -4467 0
c Var 'aux531' order represents '16' with '4471'
-4469 4471 0
c Var 'aux531' direct represents '16' with '4472'
4469 -4471 4472 0
-4472 4471 0
-4472 -4469 0
c Var 'aux531' order represents '17' with '4473'
-4471 4473 0
c Var 'aux531' direct represents '17' with '4474'
4471 -4473 4474 0
-4474 4473 0
-4474 -4471 0
c Var 'aux531' order represents '18' with '4475'
-4473 4475 0
c Var 'aux531' direct represents '18' with '4476'
4473 -4475 4476 0
-4476 4475 0
-4476 -4473 0
c Var 'aux531' order represents '19' with '4477'
-4475 4477 0
c Var 'aux531' direct represents '19' with '4478'
4475 -4477 4478 0
-4478 4477 0
-4478 -4475 0
c Var 'aux531' order represents '20' with '4479'
-4477 4479 0
c Var 'aux531' direct represents '20' with '4480'
4477 -4479 4480 0
-4480 4479 0
-4480 -4477 0
c Var 'aux531' order represents '21' with '4481'
-4479 4481 0
c Var 'aux531' direct represents '21' with '4482'
4479 -4481 4482 0
-4482 4481 0
-4482 -4479 0
c Var 'aux531' order represents '22' with '4483'
-4481 4483 0
c Var 'aux531' direct represents '22' with '4484'
4481 -4483 4484 0
-4484 4483 0
-4484 -4481 0
c Var 'aux531' order represents '23' with '4485'
-4483 4485 0
c Var 'aux531' direct represents '23' with '4486'
4483 -4485 4486 0
-4486 4485 0
-4486 -4483 0
c Var 'aux531' direct represents '24' with '-4485'
4440 4442 4444 4446 4448 4450 4452 4454 4456 4458 4460 4462 4464 4466 4468 4470 4472 4474 4476 4478 4480 4482 4484 4486 -4485 0
c Encoding variable: aux532 with domain: int(0..32) (representing constraint (aux527 + aux529))
c Both direct and order encoding.
c Var 'aux532' order represents '0' with '4487'
c Var 'aux532' direct represents '0' with '4487'
c Var 'aux532' order represents '1' with '4488'
-4487 4488 0
c Var 'aux532' direct represents '1' with '4489'
4487 -4488 4489 0
-4489 4488 0
-4489 -4487 0
c Var 'aux532' order represents '2' with '4490'
-4488 4490 0
c Var 'aux532' direct represents '2' with '4491'
4488 -4490 4491 0
-4491 4490 0
-4491 -4488 0
c Var 'aux532' order represents '3' with '4492'
-4490 4492 0
c Var 'aux532' direct represents '3' with '4493'
4490 -4492 4493 0
-4493 4492 0
-4493 -4490 0
c Var 'aux532' order represents '4' with '4494'
-4492 4494 0
c Var 'aux532' direct represents '4' with '4495'
4492 -4494 4495 0
-4495 4494 0
-4495 -4492 0
c Var 'aux532' order represents '5' with '4496'
-4494 4496 0
c Var 'aux532' direct represents '5' with '4497'
4494 -4496 4497 0
-4497 4496 0
-4497 -4494 0
c Var 'aux532' order represents '6' with '4498'
-4496 4498 0
c Var 'aux532' direct represents '6' with '4499'
4496 -4498 4499 0
-4499 4498 0
-4499 -4496 0
c Var 'aux532' order represents '7' with '4500'
-4498 4500 0
c Var 'aux532' direct represents '7' with '4501'
4498 -4500 4501 0
-4501 4500 0
-4501 -4498 0
c Var 'aux532' order represents '8' with '4502'
-4500 4502 0
c Var 'aux532' direct represents '8' with '4503'
4500 -4502 4503 0
-4503 4502 0
-4503 -4500 0
c Var 'aux532' order represents '9' with '4504'
-4502 4504 0
c Var 'aux532' direct represents '9' with '4505'
4502 -4504 4505 0
-4505 4504 0
-4505 -4502 0
c Var 'aux532' order represents '10' with '4506'
-4504 4506 0
c Var 'aux532' direct represents '10' with '4507'
4504 -4506 4507 0
-4507 4506 0
-4507 -4504 0
c Var 'aux532' order represents '11' with '4508'
-4506 4508 0
c Var 'aux532' direct represents '11' with '4509'
4506 -4508 4509 0
-4509 4508 0
-4509 -4506 0
c Var 'aux532' order represents '12' with '4510'
-4508 4510 0
c Var 'aux532' direct represents '12' with '4511'
4508 -4510 4511 0
-4511 4510 0
-4511 -4508 0
c Var 'aux532' order represents '13' with '4512'
-4510 4512 0
c Var 'aux532' direct represents '13' with '4513'
4510 -4512 4513 0
-4513 4512 0
-4513 -4510 0
c Var 'aux532' order represents '14' with '4514'
-4512 4514 0
c Var 'aux532' direct represents '14' with '4515'
4512 -4514 4515 0
-4515 4514 0
-4515 -4512 0
c Var 'aux532' order represents '15' with '4516'
-4514 4516 0
c Var 'aux532' direct represents '15' with '4517'
4514 -4516 4517 0
-4517 4516 0
-4517 -4514 0
c Var 'aux532' order represents '16' with '4518'
-4516 4518 0
c Var 'aux532' direct represents '16' with '4519'
4516 -4518 4519 0
-4519 4518 0
-4519 -4516 0
c Var 'aux532' order represents '17' with '4520'
-4518 4520 0
c Var 'aux532' direct represents '17' with '4521'
4518 -4520 4521 0
-4521 4520 0
-4521 -4518 0
c Var 'aux532' order represents '18' with '4522'
-4520 4522 0
c Var 'aux532' direct represents '18' with '4523'
4520 -4522 4523 0
-4523 4522 0
-4523 -4520 0
c Var 'aux532' order represents '19' with '4524'
-4522 4524 0
c Var 'aux532' direct represents '19' with '4525'
4522 -4524 4525 0
-4525 4524 0
-4525 -4522 0
c Var 'aux532' order represents '20' with '4526'
-4524 4526 0
c Var 'aux532' direct represents '20' with '4527'
4524 -4526 4527 0
-4527 4526 0
-4527 -4524 0
c Var 'aux532' order represents '21' with '4528'
-4526 4528 0
c Var 'aux532' direct represents '21' with '4529'
4526 -4528 4529 0
-4529 4528 0
-4529 -4526 0
c Var 'aux532' order represents '22' with '4530'
-4528 4530 0
c Var 'aux532' direct represents '22' with '4531'
4528 -4530 4531 0
-4531 4530 0
-4531 -4528 0
c Var 'aux532' order represents '23' with '4532'
-4530 4532 0
c Var 'aux532' direct represents '23' with '4533'
4530 -4532 4533 0
-4533 4532 0
-4533 -4530 0
c Var 'aux532' order represents '24' with '4534'
-4532 4534 0
c Var 'aux532' direct represents '24' with '4535'
4532 -4534 4535 0
-4535 4534 0
-4535 -4532 0
c Var 'aux532' order represents '25' with '4536'
-4534 4536 0
c Var 'aux532' direct represents '25' with '4537'
4534 -4536 4537 0
-4537 4536 0
-4537 -4534 0
c Var 'aux532' order represents '26' with '4538'
-4536 4538 0
c Var 'aux532' direct represents '26' with '4539'
4536 -4538 4539 0
-4539 4538 0
-4539 -4536 0
c Var 'aux532' order represents '27' with '4540'
-4538 4540 0
c Var 'aux532' direct represents '27' with '4541'
4538 -4540 4541 0
-4541 4540 0
-4541 -4538 0
c Var 'aux532' order represents '28' with '4542'
-4540 4542 0
c Var 'aux532' direct represents '28' with '4543'
4540 -4542 4543 0
-4543 4542 0
-4543 -4540 0
c Var 'aux532' order represents '29' with '4544'
-4542 4544 0
c Var 'aux532' direct represents '29' with '4545'
4542 -4544 4545 0
-4545 4544 0
-4545 -4542 0
c Var 'aux532' order represents '30' with '4546'
-4544 4546 0
c Var 'aux532' direct represents '30' with '4547'
4544 -4546 4547 0
-4547 4546 0
-4547 -4544 0
c Var 'aux532' order represents '31' with '4548'
-4546 4548 0
c Var 'aux532' direct represents '31' with '4549'
4546 -4548 4549 0
-4549 4548 0
-4549 -4546 0
c Var 'aux532' direct represents '32' with '-4548'
4487 4489 4491 4493 4495 4497 4499 4501 4503 4505 4507 4509 4511 4513 4515 4517 4519 4521 4523 4525 4527 4529 4531 4533 4535 4537 4539 4541 4543 4545 4547 4549 -4548 0
c Encoding variable: aux533 with domain: int(0..16) (representing constraint (shift(x_00003_00001, -1) + shift(x_00003_00009, -1)))
c Both direct and order encoding.
c Var 'aux533' order represents '0' with '4550'
c Var 'aux533' direct represents '0' with '4550'
c Var 'aux533' order represents '1' with '4551'
-4550 4551 0
c Var 'aux533' direct represents '1' with '4552'
4550 -4551 4552 0
-4552 4551 0
-4552 -4550 0
c Var 'aux533' order represents '2' with '4553'
-4551 4553 0
c Var 'aux533' direct represents '2' with '4554'
4551 -4553 4554 0
-4554 4553 0
-4554 -4551 0
c Var 'aux533' order represents '3' with '4555'
-4553 4555 0
c Var 'aux533' direct represents '3' with '4556'
4553 -4555 4556 0
-4556 4555 0
-4556 -4553 0
c Var 'aux533' order represents '4' with '4557'
-4555 4557 0
c Var 'aux533' direct represents '4' with '4558'
4555 -4557 4558 0
-4558 4557 0
-4558 -4555 0
c Var 'aux533' order represents '5' with '4559'
-4557 4559 0
c Var 'aux533' direct represents '5' with '4560'
4557 -4559 4560 0
-4560 4559 0
-4560 -4557 0
c Var 'aux533' order represents '6' with '4561'
-4559 4561 0
c Var 'aux533' direct represents '6' with '4562'
4559 -4561 4562 0
-4562 4561 0
-4562 -4559 0
c Var 'aux533' order represents '7' with '4563'
-4561 4563 0
c Var 'aux533' direct represents '7' with '4564'
4561 -4563 4564 0
-4564 4563 0
-4564 -4561 0
c Var 'aux533' order represents '8' with '4565'
-4563 4565 0
c Var 'aux533' direct represents '8' with '4566'
4563 -4565 4566 0
-4566 4565 0
-4566 -4563 0
c Var 'aux533' order represents '9' with '4567'
-4565 4567 0
c Var 'aux533' direct represents '9' with '4568'
4565 -4567 4568 0
-4568 4567 0
-4568 -4565 0
c Var 'aux533' order represents '10' with '4569'
-4567 4569 0
c Var 'aux533' direct represents '10' with '4570'
4567 -4569 4570 0
-4570 4569 0
-4570 -4567 0
c Var 'aux533' order represents '11' with '4571'
-4569 4571 0
c Var 'aux533' direct represents '11' with '4572'
4569 -4571 4572 0
-4572 4571 0
-4572 -4569 0
c Var 'aux533' order represents '12' with '4573'
-4571 4573 0
c Var 'aux533' direct represents '12' with '4574'
4571 -4573 4574 0
-4574 4573 0
-4574 -4571 0
c Var 'aux533' order represents '13' with '4575'
-4573 4575 0
c Var 'aux533' direct represents '13' with '4576'
4573 -4575 4576 0
-4576 4575 0
-4576 -4573 0
c Var 'aux533' order represents '14' with '4577'
-4575 4577 0
c Var 'aux533' direct represents '14' with '4578'
4575 -4577 4578 0
-4578 4577 0
-4578 -4575 0
c Var 'aux533' order represents '15' with '4579'
-4577 4579 0
c Var 'aux533' direct represents '15' with '4580'
4577 -4579 4580 0
-4580 4579 0
-4580 -4577 0
c Var 'aux533' direct represents '16' with '-4579'
4550 4552 4554 4556 4558 4560 4562 4564 4566 4568 4570 4572 4574 4576 4578 4580 -4579 0
c Encoding variable: aux534 with domain: int(0..16) (representing constraint (shift(x_00003_00008, -1) + shift(x_00003_00002, -1)))
c Both direct and order encoding.
c Var 'aux534' order represents '0' with '4581'
c Var 'aux534' direct represents '0' with '4581'
c Var 'aux534' order represents '1' with '4582'
-4581 4582 0
c Var 'aux534' direct represents '1' with '4583'
4581 -4582 4583 0
-4583 4582 0
-4583 -4581 0
c Var 'aux534' order represents '2' with '4584'
-4582 4584 0
c Var 'aux534' direct represents '2' with '4585'
4582 -4584 4585 0
-4585 4584 0
-4585 -4582 0
c Var 'aux534' order represents '3' with '4586'
-4584 4586 0
c Var 'aux534' direct represents '3' with '4587'
4584 -4586 4587 0
-4587 4586 0
-4587 -4584 0
c Var 'aux534' order represents '4' with '4588'
-4586 4588 0
c Var 'aux534' direct represents '4' with '4589'
4586 -4588 4589 0
-4589 4588 0
-4589 -4586 0
c Var 'aux534' order represents '5' with '4590'
-4588 4590 0
c Var 'aux534' direct represents '5' with '4591'
4588 -4590 4591 0
-4591 4590 0
-4591 -4588 0
c Var 'aux534' order represents '6' with '4592'
-4590 4592 0
c Var 'aux534' direct represents '6' with '4593'
4590 -4592 4593 0
-4593 4592 0
-4593 -4590 0
c Var 'aux534' order represents '7' with '4594'
-4592 4594 0
c Var 'aux534' direct represents '7' with '4595'
4592 -4594 4595 0
-4595 4594 0
-4595 -4592 0
c Var 'aux534' order represents '8' with '4596'
-4594 4596 0
c Var 'aux534' direct represents '8' with '4597'
4594 -4596 4597 0
-4597 4596 0
-4597 -4594 0
c Var 'aux534' order represents '9' with '4598'
-4596 4598 0
c Var 'aux534' direct represents '9' with '4599'
4596 -4598 4599 0
-4599 4598 0
-4599 -4596 0
c Var 'aux534' order represents '10' with '4600'
-4598 4600 0
c Var 'aux534' direct represents '10' with '4601'
4598 -4600 4601 0
-4601 4600 0
-4601 -4598 0
c Var 'aux534' order represents '11' with '4602'
-4600 4602 0
c Var 'aux534' direct represents '11' with '4603'
4600 -4602 4603 0
-4603 4602 0
-4603 -4600 0
c Var 'aux534' order represents '12' with '4604'
-4602 4604 0
c Var 'aux534' direct represents '12' with '4605'
4602 -4604 4605 0
-4605 4604 0
-4605 -4602 0
c Var 'aux534' order represents '13' with '4606'
-4604 4606 0
c Var 'aux534' direct represents '13' with '4607'
4604 -4606 4607 0
-4607 4606 0
-4607 -4604 0
c Var 'aux534' order represents '14' with '4608'
-4606 4608 0
c Var 'aux534' direct represents '14' with '4609'
4606 -4608 4609 0
-4609 4608 0
-4609 -4606 0
c Var 'aux534' order represents '15' with '4610'
-4608 4610 0
c Var 'aux534' direct represents '15' with '4611'
4608 -4610 4611 0
-4611 4610 0
-4611 -4608 0
c Var 'aux534' direct represents '16' with '-4610'
4581 4583 4585 4587 4589 4591 4593 4595 4597 4599 4601 4603 4605 4607 4609 4611 -4610 0
c Encoding variable: aux535 with domain: int(0..16) (representing constraint (shift(x_00003_00007, -1) + shift(x_00003_00004, -1)))
c Both direct and order encoding.
c Var 'aux535' order represents '0' with '4612'
c Var 'aux535' direct represents '0' with '4612'
c Var 'aux535' order represents '1' with '4613'
-4612 4613 0
c Var 'aux535' direct represents '1' with '4614'
4612 -4613 4614 0
-4614 4613 0
-4614 -4612 0
c Var 'aux535' order represents '2' with '4615'
-4613 4615 0
c Var 'aux535' direct represents '2' with '4616'
4613 -4615 4616 0
-4616 4615 0
-4616 -4613 0
c Var 'aux535' order represents '3' with '4617'
-4615 4617 0
c Var 'aux535' direct represents '3' with '4618'
4615 -4617 4618 0
-4618 4617 0
-4618 -4615 0
c Var 'aux535' order represents '4' with '4619'
-4617 4619 0
c Var 'aux535' direct represents '4' with '4620'
4617 -4619 4620 0
-4620 4619 0
-4620 -4617 0
c Var 'aux535' order represents '5' with '4621'
-4619 4621 0
c Var 'aux535' direct represents '5' with '4622'
4619 -4621 4622 0
-4622 4621 0
-4622 -4619 0
c Var 'aux535' order represents '6' with '4623'
-4621 4623 0
c Var 'aux535' direct represents '6' with '4624'
4621 -4623 4624 0
-4624 4623 0
-4624 -4621 0
c Var 'aux535' order represents '7' with '4625'
-4623 4625 0
c Var 'aux535' direct represents '7' with '4626'
4623 -4625 4626 0
-4626 4625 0
-4626 -4623 0
c Var 'aux535' order represents '8' with '4627'
-4625 4627 0
c Var 'aux535' direct represents '8' with '4628'
4625 -4627 4628 0
-4628 4627 0
-4628 -4625 0
c Var 'aux535' order represents '9' with '4629'
-4627 4629 0
c Var 'aux535' direct represents '9' with '4630'
4627 -4629 4630 0
-4630 4629 0
-4630 -4627 0
c Var 'aux535' order represents '10' with '4631'
-4629 4631 0
c Var 'aux535' direct represents '10' with '4632'
4629 -4631 4632 0
-4632 4631 0
-4632 -4629 0
c Var 'aux535' order represents '11' with '4633'
-4631 4633 0
c Var 'aux535' direct represents '11' with '4634'
4631 -4633 4634 0
-4634 4633 0
-4634 -4631 0
c Var 'aux535' order represents '12' with '4635'
-4633 4635 0
c Var 'aux535' direct represents '12' with '4636'
4633 -4635 4636 0
-4636 4635 0
-4636 -4633 0
c Var 'aux535' order represents '13' with '4637'
-4635 4637 0
c Var 'aux535' direct represents '13' with '4638'
4635 -4637 4638 0
-4638 4637 0
-4638 -4635 0
c Var 'aux535' order represents '14' with '4639'
-4637 4639 0
c Var 'aux535' direct represents '14' with '4640'
4637 -4639 4640 0
-4640 4639 0
-4640 -4637 0
c Var 'aux535' order represents '15' with '4641'
-4639 4641 0
c Var 'aux535' direct represents '15' with '4642'
4639 -4641 4642 0
-4642 4641 0
-4642 -4639 0
c Var 'aux535' direct represents '16' with '-4641'
4612 4614 4616 4618 4620 4622 4624 4626 4628 4630 4632 4634 4636 4638 4640 4642 -4641 0
c Encoding variable: aux536 with domain: int(0..16) (representing constraint (shift(x_00003_00006, -1) + shift(x_00003_00005, -1)))
c Both direct and order encoding.
c Var 'aux536' order represents '0' with '4643'
c Var 'aux536' direct represents '0' with '4643'
c Var 'aux536' order represents '1' with '4644'
-4643 4644 0
c Var 'aux536' direct represents '1' with '4645'
4643 -4644 4645 0
-4645 4644 0
-4645 -4643 0
c Var 'aux536' order represents '2' with '4646'
-4644 4646 0
c Var 'aux536' direct represents '2' with '4647'
4644 -4646 4647 0
-4647 4646 0
-4647 -4644 0
c Var 'aux536' order represents '3' with '4648'
-4646 4648 0
c Var 'aux536' direct represents '3' with '4649'
4646 -4648 4649 0
-4649 4648 0
-4649 -4646 0
c Var 'aux536' order represents '4' with '4650'
-4648 4650 0
c Var 'aux536' direct represents '4' with '4651'
4648 -4650 4651 0
-4651 4650 0
-4651 -4648 0
c Var 'aux536' order represents '5' with '4652'
-4650 4652 0
c Var 'aux536' direct represents '5' with '4653'
4650 -4652 4653 0
-4653 4652 0
-4653 -4650 0
c Var 'aux536' order represents '6' with '4654'
-4652 4654 0
c Var 'aux536' direct represents '6' with '4655'
4652 -4654 4655 0
-4655 4654 0
-4655 -4652 0
c Var 'aux536' order represents '7' with '4656'
-4654 4656 0
c Var 'aux536' direct represents '7' with '4657'
4654 -4656 4657 0
-4657 4656 0
-4657 -4654 0
c Var 'aux536' order represents '8' with '4658'
-4656 4658 0
c Var 'aux536' direct represents '8' with '4659'
4656 -4658 4659 0
-4659 4658 0
-4659 -4656 0
c Var 'aux536' order represents '9' with '4660'
-4658 4660 0
c Var 'aux536' direct represents '9' with '4661'
4658 -4660 4661 0
-4661 4660 0
-4661 -4658 0
c Var 'aux536' order represents '10' with '4662'
-4660 4662 0
c Var 'aux536' direct represents '10' with '4663'
4660 -4662 4663 0
-4663 4662 0
-4663 -4660 0
c Var 'aux536' order represents '11' with '4664'
-4662 4664 0
c Var 'aux536' direct represents '11' with '4665'
4662 -4664 4665 0
-4665 4664 0
-4665 -4662 0
c Var 'aux536' order represents '12' with '4666'
-4664 4666 0
c Var 'aux536' direct represents '12' with '4667'
4664 -4666 4667 0
-4667 4666 0
-4667 -4664 0
c Var 'aux536' order represents '13' with '4668'
-4666 4668 0
c Var 'aux536' direct represents '13' with '4669'
4666 -4668 4669 0
-4669 4668 0
-4669 -4666 0
c Var 'aux536' order represents '14' with '4670'
-4668 4670 0
c Var 'aux536' direct represents '14' with '4671'
4668 -4670 4671 0
-4671 4670 0
-4671 -4668 0
c Var 'aux536' order represents '15' with '4672'
-4670 4672 0
c Var 'aux536' direct represents '15' with '4673'
4670 -4672 4673 0
-4673 4672 0
-4673 -4670 0
c Var 'aux536' direct represents '16' with '-4672'
4643 4645 4647 4649 4651 4653 4655 4657 4659 4661 4663 4665 4667 4669 4671 4673 -4672 0
c Encoding variable: aux537 with domain: int(0..24) (representing constraint (shift(x_00003_00003, -1) + aux536))
c Both direct and order encoding.
c Var 'aux537' order represents '0' with '4674'
c Var 'aux537' direct represents '0' with '4674'
c Var 'aux537' order represents '1' with '4675'
-4674 4675 0
c Var 'aux537' direct represents '1' with '4676'
4674 -4675 4676 0
-4676 4675 0
-4676 -4674 0
c Var 'aux537' order represents '2' with '4677'
-4675 4677 0
c Var 'aux537' direct represents '2' with '4678'
4675 -4677 4678 0
-4678 4677 0
-4678 -4675 0
c Var 'aux537' order represents '3' with '4679'
-4677 4679 0
c Var 'aux537' direct represents '3' with '4680'
4677 -4679 4680 0
-4680 4679 0
-4680 -4677 0
c Var 'aux537' order represents '4' with '4681'
-4679 4681 0
c Var 'aux537' direct represents '4' with '4682'
4679 -4681 4682 0
-4682 4681 0
-4682 -4679 0
c Var 'aux537' order represents '5' with '4683'
-4681 4683 0
c Var 'aux537' direct represents '5' with '4684'
4681 -4683 4684 0
-4684 4683 0
-4684 -4681 0
c Var 'aux537' order represents '6' with '4685'
-4683 4685 0
c Var 'aux537' direct represents '6' with '4686'
4683 -4685 4686 0
-4686 4685 0
-4686 -4683 0
c Var 'aux537' order represents '7' with '4687'
-4685 4687 0
c Var 'aux537' direct represents '7' with '4688'
4685 -4687 4688 0
-4688 4687 0
-4688 -4685 0
c Var 'aux537' order represents '8' with '4689'
-4687 4689 0
c Var 'aux537' direct represents '8' with '4690'
4687 -4689 4690 0
-4690 4689 0
-4690 -4687 0
c Var 'aux537' order represents '9' with '4691'
-4689 4691 0
c Var 'aux537' direct represents '9' with '4692'
4689 -4691 4692 0
-4692 4691 0
-4692 -4689 0
c Var 'aux537' order represents '10' with '4693'
-4691 4693 0
c Var 'aux537' direct represents '10' with '4694'
4691 -4693 4694 0
-4694 4693 0
-4694 -4691 0
c Var 'aux537' order represents '11' with '4695'
-4693 4695 0
c Var 'aux537' direct represents '11' with '4696'
4693 -4695 4696 0
-4696 4695 0
-4696 -4693 0
c Var 'aux537' order represents '12' with '4697'
-4695 4697 0
c Var 'aux537' direct represents '12' with '4698'
4695 -4697 4698 0
-4698 4697 0
-4698 -4695 0
c Var 'aux537' order represents '13' with '4699'
-4697 4699 0
c Var 'aux537' direct represents '13' with '4700'
4697 -4699 4700 0
-4700 4699 0
-4700 -4697 0
c Var 'aux537' order represents '14' with '4701'
-4699 4701 0
c Var 'aux537' direct represents '14' with '4702'
4699 -4701 4702 0
-4702 4701 0
-4702 -4699 0
c Var 'aux537' order represents '15' with '4703'
-4701 4703 0
c Var 'aux537' direct represents '15' with '4704'
4701 -4703 4704 0
-4704 4703 0
-4704 -4701 0
c Var 'aux537' order represents '16' with '4705'
-4703 4705 0
c Var 'aux537' direct represents '16' with '4706'
4703 -4705 4706 0
-4706 4705 0
-4706 -4703 0
c Var 'aux537' order represents '17' with '4707'
-4705 4707 0
c Var 'aux537' direct represents '17' with '4708'
4705 -4707 4708 0
-4708 4707 0
-4708 -4705 0
c Var 'aux537' order represents '18' with '4709'
-4707 4709 0
c Var 'aux537' direct represents '18' with '4710'
4707 -4709 4710 0
-4710 4709 0
-4710 -4707 0
c Var 'aux537' order represents '19' with '4711'
-4709 4711 0
c Var 'aux537' direct represents '19' with '4712'
4709 -4711 4712 0
-4712 4711 0
-4712 -4709 0
c Var 'aux537' order represents '20' with '4713'
-4711 4713 0
c Var 'aux537' direct represents '20' with '4714'
4711 -4713 4714 0
-4714 4713 0
-4714 -4711 0
c Var 'aux537' order represents '21' with '4715'
-4713 4715 0
c Var 'aux537' direct represents '21' with '4716'
4713 -4715 4716 0
-4716 4715 0
-4716 -4713 0
c Var 'aux537' order represents '22' with '4717'
-4715 4717 0
c Var 'aux537' direct represents '22' with '4718'
4715 -4717 4718 0
-4718 4717 0
-4718 -4715 0
c Var 'aux537' order represents '23' with '4719'
-4717 4719 0
c Var 'aux537' direct represents '23' with '4720'
4717 -4719 4720 0
-4720 4719 0
-4720 -4717 0
c Var 'aux537' direct represents '24' with '-4719'
4674 4676 4678 4680 4682 4684 4686 4688 4690 4692 4694 4696 4698 4700 4702 4704 4706 4708 4710 4712 4714 4716 4718 4720 -4719 0
c Encoding variable: aux538 with domain: int(0..32) (representing constraint (aux533 + aux535))
c Both direct and order encoding.
c Var 'aux538' order represents '0' with '4721'
c Var 'aux538' direct represents '0' with '4721'
c Var 'aux538' order represents '1' with '4722'
-4721 4722 0
c Var 'aux538' direct represents '1' with '4723'
4721 -4722 4723 0
-4723 4722 0
-4723 -4721 0
c Var 'aux538' order represents '2' with '4724'
-4722 4724 0
c Var 'aux538' direct represents '2' with '4725'
4722 -4724 4725 0
-4725 4724 0
-4725 -4722 0
c Var 'aux538' order represents '3' with '4726'
-4724 4726 0
c Var 'aux538' direct represents '3' with '4727'
4724 -4726 4727 0
-4727 4726 0
-4727 -4724 0
c Var 'aux538' order represents '4' with '4728'
-4726 4728 0
c Var 'aux538' direct represents '4' with '4729'
4726 -4728 4729 0
-4729 4728 0
-4729 -4726 0
c Var 'aux538' order represents '5' with '4730'
-4728 4730 0
c Var 'aux538' direct represents '5' with '4731'
4728 -4730 4731 0
-4731 4730 0
-4731 -4728 0
c Var 'aux538' order represents '6' with '4732'
-4730 4732 0
c Var 'aux538' direct represents '6' with '4733'
4730 -4732 4733 0
-4733 4732 0
-4733 -4730 0
c Var 'aux538' order represents '7' with '4734'
-4732 4734 0
c Var 'aux538' direct represents '7' with '4735'
4732 -4734 4735 0
-4735 4734 0
-4735 -4732 0
c Var 'aux538' order represents '8' with '4736'
-4734 4736 0
c Var 'aux538' direct represents '8' with '4737'
4734 -4736 4737 0
-4737 4736 0
-4737 -4734 0
c Var 'aux538' order represents '9' with '4738'
-4736 4738 0
c Var 'aux538' direct represents '9' with '4739'
4736 -4738 4739 0
-4739 4738 0
-4739 -4736 0
c Var 'aux538' order represents '10' with '4740'
-4738 4740 0
c Var 'aux538' direct represents '10' with '4741'
4738 -4740 4741 0
-4741 4740 0
-4741 -4738 0
c Var 'aux538' order represents '11' with '4742'
-4740 4742 0
c Var 'aux538' direct represents '11' with '4743'
4740 -4742 4743 0
-4743 4742 0
-4743 -4740 0
c Var 'aux538' order represents '12' with '4744'
-4742 4744 0
c Var 'aux538' direct represents '12' with '4745'
4742 -4744 4745 0
-4745 4744 0
-4745 -4742 0
c Var 'aux538' order represents '13' with '4746'
-4744 4746 0
c Var 'aux538' direct represents '13' with '4747'
4744 -4746 4747 0
-4747 4746 0
-4747 -4744 0
c Var 'aux538' order represents '14' with '4748'
-4746 4748 0
c Var 'aux538' direct represents '14' with '4749'
4746 -4748 4749 0
-4749 4748 0
-4749 -4746 0
c Var 'aux538' order represents '15' with '4750'
-4748 4750 0
c Var 'aux538' direct represents '15' with '4751'
4748 -4750 4751 0
-4751 4750 0
-4751 -4748 0
c Var 'aux538' order represents '16' with '4752'
-4750 4752 0
c Var 'aux538' direct represents '16' with '4753'
4750 -4752 4753 0
-4753 4752 0
-4753 -4750 0
c Var 'aux538' order represents '17' with '4754'
-4752 4754 0
c Var 'aux538' direct represents '17' with '4755'
4752 -4754 4755 0
-4755 4754 0
-4755 -4752 0
c Var 'aux538' order represents '18' with '4756'
-4754 4756 0
c Var 'aux538' direct represents '18' with '4757'
4754 -4756 4757 0
-4757 4756 0
-4757 -4754 0
c Var 'aux538' order represents '19' with '4758'
-4756 4758 0
c Var 'aux538' direct represents '19' with '4759'
4756 -4758 4759 0
-4759 4758 0
-4759 -4756 0
c Var 'aux538' order represents '20' with '4760'
-4758 4760 0
c Var 'aux538' direct represents '20' with '4761'
4758 -4760 4761 0
-4761 4760 0
-4761 -4758 0
c Var 'aux538' order represents '21' with '4762'
-4760 4762 0
c Var 'aux538' direct represents '21' with '4763'
4760 -4762 4763 0
-4763 4762 0
-4763 -4760 0
c Var 'aux538' order represents '22' with '4764'
-4762 4764 0
c Var 'aux538' direct represents '22' with '4765'
4762 -4764 4765 0
-4765 4764 0
-4765 -4762 0
c Var 'aux538' order represents '23' with '4766'
-4764 4766 0
c Var 'aux538' direct represents '23' with '4767'
4764 -4766 4767 0
-4767 4766 0
-4767 -4764 0
c Var 'aux538' order represents '24' with '4768'
-4766 4768 0
c Var 'aux538' direct represents '24' with '4769'
4766 -4768 4769 0
-4769 4768 0
-4769 -4766 0
c Var 'aux538' order represents '25' with '4770'
-4768 4770 0
c Var 'aux538' direct represents '25' with '4771'
4768 -4770 4771 0
-4771 4770 0
-4771 -4768 0
c Var 'aux538' order represents '26' with '4772'
-4770 4772 0
c Var 'aux538' direct represents '26' with '4773'
4770 -4772 4773 0
-4773 4772 0
-4773 -4770 0
c Var 'aux538' order represents '27' with '4774'
-4772 4774 0
c Var 'aux538' direct represents '27' with '4775'
4772 -4774 4775 0
-4775 4774 0
-4775 -4772 0
c Var 'aux538' order represents '28' with '4776'
-4774 4776 0
c Var 'aux538' direct represents '28' with '4777'
4774 -4776 4777 0
-4777 4776 0
-4777 -4774 0
c Var 'aux538' order represents '29' with '4778'
-4776 4778 0
c Var 'aux538' direct represents '29' with '4779'
4776 -4778 4779 0
-4779 4778 0
-4779 -4776 0
c Var 'aux538' order represents '30' with '4780'
-4778 4780 0
c Var 'aux538' direct represents '30' with '4781'
4778 -4780 4781 0
-4781 4780 0
-4781 -4778 0
c Var 'aux538' order represents '31' with '4782'
-4780 4782 0
c Var 'aux538' direct represents '31' with '4783'
4780 -4782 4783 0
-4783 4782 0
-4783 -4780 0
c Var 'aux538' direct represents '32' with '-4782'
4721 4723 4725 4727 4729 4731 4733 4735 4737 4739 4741 4743 4745 4747 4749 4751 4753 4755 4757 4759 4761 4763 4765 4767 4769 4771 4773 4775 4777 4779 4781 4783 -4782 0
c Encoding variable: aux539 with domain: int(0..16) (representing constraint (shift(x_00004_00001, -1) + shift(x_00004_00009, -1)))
c Both direct and order encoding.
c Var 'aux539' order represents '0' with '4784'
c Var 'aux539' direct represents '0' with '4784'
c Var 'aux539' order represents '1' with '4785'
-4784 4785 0
c Var 'aux539' direct represents '1' with '4786'
4784 -4785 4786 0
-4786 4785 0
-4786 -4784 0
c Var 'aux539' order represents '2' with '4787'
-4785 4787 0
c Var 'aux539' direct represents '2' with '4788'
4785 -4787 4788 0
-4788 4787 0
-4788 -4785 0
c Var 'aux539' order represents '3' with '4789'
-4787 4789 0
c Var 'aux539' direct represents '3' with '4790'
4787 -4789 4790 0
-4790 4789 0
-4790 -4787 0
c Var 'aux539' order represents '4' with '4791'
-4789 4791 0
c Var 'aux539' direct represents '4' with '4792'
4789 -4791 4792 0
-4792 4791 0
-4792 -4789 0
c Var 'aux539' order represents '5' with '4793'
-4791 4793 0
c Var 'aux539' direct represents '5' with '4794'
4791 -4793 4794 0
-4794 4793 0
-4794 -4791 0
c Var 'aux539' order represents '6' with '4795'
-4793 4795 0
c Var 'aux539' direct represents '6' with '4796'
4793 -4795 4796 0
-4796 4795 0
-4796 -4793 0
c Var 'aux539' order represents '7' with '4797'
-4795 4797 0
c Var 'aux539' direct represents '7' with '4798'
4795 -4797 4798 0
-4798 4797 0
-4798 -4795 0
c Var 'aux539' order represents '8' with '4799'
-4797 4799 0
c Var 'aux539' direct represents '8' with '4800'
4797 -4799 4800 0
-4800 4799 0
-4800 -4797 0
c Var 'aux539' order represents '9' with '4801'
-4799 4801 0
c Var 'aux539' direct represents '9' with '4802'
4799 -4801 4802 0
-4802 4801 0
-4802 -4799 0
c Var 'aux539' order represents '10' with '4803'
-4801 4803 0
c Var 'aux539' direct represents '10' with '4804'
4801 -4803 4804 0
-4804 4803 0
-4804 -4801 0
c Var 'aux539' order represents '11' with '4805'
-4803 4805 0
c Var 'aux539' direct represents '11' with '4806'
4803 -4805 4806 0
-4806 4805 0
-4806 -4803 0
c Var 'aux539' order represents '12' with '4807'
-4805 4807 0
c Var 'aux539' direct represents '12' with '4808'
4805 -4807 4808 0
-4808 4807 0
-4808 -4805 0
c Var 'aux539' order represents '13' with '4809'
-4807 4809 0
c Var 'aux539' direct represents '13' with '4810'
4807 -4809 4810 0
-4810 4809 0
-4810 -4807 0
c Var 'aux539' order represents '14' with '4811'
-4809 4811 0
c Var 'aux539' direct represents '14' with '4812'
4809 -4811 4812 0
-4812 4811 0
-4812 -4809 0
c Var 'aux539' order represents '15' with '4813'
-4811 4813 0
c Var 'aux539' direct represents '15' with '4814'
4811 -4813 4814 0
-4814 4813 0
-4814 -4811 0
c Var 'aux539' direct represents '16' with '-4813'
4784 4786 4788 4790 4792 4794 4796 4798 4800 4802 4804 4806 4808 4810 4812 4814 -4813 0
c Encoding variable: aux540 with domain: int(0..16) (representing constraint (shift(x_00004_00008, -1) + shift(x_00004_00002, -1)))
c Both direct and order encoding.
c Var 'aux540' order represents '0' with '4815'
c Var 'aux540' direct represents '0' with '4815'
c Var 'aux540' order represents '1' with '4816'
-4815 4816 0
c Var 'aux540' direct represents '1' with '4817'
4815 -4816 4817 0
-4817 4816 0
-4817 -4815 0
c Var 'aux540' order represents '2' with '4818'
-4816 4818 0
c Var 'aux540' direct represents '2' with '4819'
4816 -4818 4819 0
-4819 4818 0
-4819 -4816 0
c Var 'aux540' order represents '3' with '4820'
-4818 4820 0
c Var 'aux540' direct represents '3' with '4821'
4818 -4820 4821 0
-4821 4820 0
-4821 -4818 0
c Var 'aux540' order represents '4' with '4822'
-4820 4822 0
c Var 'aux540' direct represents '4' with '4823'
4820 -4822 4823 0
-4823 4822 0
-4823 -4820 0
c Var 'aux540' order represents '5' with '4824'
-4822 4824 0
c Var 'aux540' direct represents '5' with '4825'
4822 -4824 4825 0
-4825 4824 0
-4825 -4822 0
c Var 'aux540' order represents '6' with '4826'
-4824 4826 0
c Var 'aux540' direct represents '6' with '4827'
4824 -4826 4827 0
-4827 4826 0
-4827 -4824 0
c Var 'aux540' order represents '7' with '4828'
-4826 4828 0
c Var 'aux540' direct represents '7' with '4829'
4826 -4828 4829 0
-4829 4828 0
-4829 -4826 0
c Var 'aux540' order represents '8' with '4830'
-4828 4830 0
c Var 'aux540' direct represents '8' with '4831'
4828 -4830 4831 0
-4831 4830 0
-4831 -4828 0
c Var 'aux540' order represents '9' with '4832'
-4830 4832 0
c Var 'aux540' direct represents '9' with '4833'
4830 -4832 4833 0
-4833 4832 0
-4833 -4830 0
c Var 'aux540' order represents '10' with '4834'
-4832 4834 0
c Var 'aux540' direct represents '10' with '4835'
4832 -4834 4835 0
-4835 4834 0
-4835 -4832 0
c Var 'aux540' order represents '11' with '4836'
-4834 4836 0
c Var 'aux540' direct represents '11' with '4837'
4834 -4836 4837 0
-4837 4836 0
-4837 -4834 0
c Var 'aux540' order represents '12' with '4838'
-4836 4838 0
c Var 'aux540' direct represents '12' with '4839'
4836 -4838 4839 0
-4839 4838 0
-4839 -4836 0
c Var 'aux540' order represents '13' with '4840'
-4838 4840 0
c Var 'aux540' direct represents '13' with '4841'
4838 -4840 4841 0
-4841 4840 0
-4841 -4838 0
c Var 'aux540' order represents '14' with '4842'
-4840 4842 0
c Var 'aux540' direct represents '14' with '4843'
4840 -4842 4843 0
-4843 4842 0
-4843 -4840 0
c Var 'aux540' order represents '15' with '4844'
-4842 4844 0
c Var 'aux540' direct represents '15' with '4845'
4842 -4844 4845 0
-4845 4844 0
-4845 -4842 0
c Var 'aux540' direct represents '16' with '-4844'
4815 4817 4819 4821 4823 4825 4827 4829 4831 4833 4835 4837 4839 4841 4843 4845 -4844 0
c Encoding variable: aux541 with domain: int(0..16) (representing constraint (shift(x_00004_00007, -1) + shift(x_00004_00004, -1)))
c Both direct and order encoding.
c Var 'aux541' order represents '0' with '4846'
c Var 'aux541' direct represents '0' with '4846'
c Var 'aux541' order represents '1' with '4847'
-4846 4847 0
c Var 'aux541' direct represents '1' with '4848'
4846 -4847 4848 0
-4848 4847 0
-4848 -4846 0
c Var 'aux541' order represents '2' with '4849'
-4847 4849 0
c Var 'aux541' direct represents '2' with '4850'
4847 -4849 4850 0
-4850 4849 0
-4850 -4847 0
c Var 'aux541' order represents '3' with '4851'
-4849 4851 0
c Var 'aux541' direct represents '3' with '4852'
4849 -4851 4852 0
-4852 4851 0
-4852 -4849 0
c Var 'aux541' order represents '4' with '4853'
-4851 4853 0
c Var 'aux541' direct represents '4' with '4854'
4851 -4853 4854 0
-4854 4853 0
-4854 -4851 0
c Var 'aux541' order represents '5' with '4855'
-4853 4855 0
c Var 'aux541' direct represents '5' with '4856'
4853 -4855 4856 0
-4856 4855 0
-4856 -4853 0
c Var 'aux541' order represents '6' with '4857'
-4855 4857 0
c Var 'aux541' direct represents '6' with '4858'
4855 -4857 4858 0
-4858 4857 0
-4858 -4855 0
c Var 'aux541' order represents '7' with '4859'
-4857 4859 0
c Var 'aux541' direct represents '7' with '4860'
4857 -4859 4860 0
-4860 4859 0
-4860 -4857 0
c Var 'aux541' order represents '8' with '4861'
-4859 4861 0
c Var 'aux541' direct represents '8' with '4862'
4859 -4861 4862 0
-4862 4861 0
-4862 -4859 0
c Var 'aux541' order represents '9' with '4863'
-4861 4863 0
c Var 'aux541' direct represents '9' with '4864'
4861 -4863 4864 0
-4864 4863 0
-4864 -4861 0
c Var 'aux541' order represents '10' with '4865'
-4863 4865 0
c Var 'aux541' direct represents '10' with '4866'
4863 -4865 4866 0
-4866 4865 0
-4866 -4863 0
c Var 'aux541' order represents '11' with '4867'
-4865 4867 0
c Var 'aux541' direct represents '11' with '4868'
4865 -4867 4868 0
-4868 4867 0
-4868 -4865 0
c Var 'aux541' order represents '12' with '4869'
-4867 4869 0
c Var 'aux541' direct represents '12' with '4870'
4867 -4869 4870 0
-4870 4869 0
-4870 -4867 0
c Var 'aux541' order represents '13' with '4871'
-4869 4871 0
c Var 'aux541' direct represents '13' with '4872'
4869 -4871 4872 0
-4872 4871 0
-4872 -4869 0
c Var 'aux541' order represents '14' with '4873'
-4871 4873 0
c Var 'aux541' direct represents '14' with '4874'
4871 -4873 4874 0
-4874 4873 0
-4874 -4871 0
c Var 'aux541' order represents '15' with '4875'
-4873 4875 0
c Var 'aux541' direct represents '15' with '4876'
4873 -4875 4876 0
-4876 4875 0
-4876 -4873 0
c Var 'aux541' direct represents '16' with '-4875'
4846 4848 4850 4852 4854 4856 4858 4860 4862 4864 4866 4868 4870 4872 4874 4876 -4875 0
c Encoding variable: aux542 with domain: int(0..16) (representing constraint (shift(x_00004_00006, -1) + shift(x_00004_00005, -1)))
c Both direct and order encoding.
c Var 'aux542' order represents '0' with '4877'
c Var 'aux542' direct represents '0' with '4877'
c Var 'aux542' order represents '1' with '4878'
-4877 4878 0
c Var 'aux542' direct represents '1' with '4879'
4877 -4878 4879 0
-4879 4878 0
-4879 -4877 0
c Var 'aux542' order represents '2' with '4880'
-4878 4880 0
c Var 'aux542' direct represents '2' with '4881'
4878 -4880 4881 0
-4881 4880 0
-4881 -4878 0
c Var 'aux542' order represents '3' with '4882'
-4880 4882 0
c Var 'aux542' direct represents '3' with '4883'
4880 -4882 4883 0
-4883 4882 0
-4883 -4880 0
c Var 'aux542' order represents '4' with '4884'
-4882 4884 0
c Var 'aux542' direct represents '4' with '4885'
4882 -4884 4885 0
-4885 4884 0
-4885 -4882 0
c Var 'aux542' order represents '5' with '4886'
-4884 4886 0
c Var 'aux542' direct represents '5' with '4887'
4884 -4886 4887 0
-4887 4886 0
-4887 -4884 0
c Var 'aux542' order represents '6' with '4888'
-4886 4888 0
c Var 'aux542' direct represents '6' with '4889'
4886 -4888 4889 0
-4889 4888 0
-4889 -4886 0
c Var 'aux542' order represents '7' with '4890'
-4888 4890 0
c Var 'aux542' direct represents '7' with '4891'
4888 -4890 4891 0
-4891 4890 0
-4891 -4888 0
c Var 'aux542' order represents '8' with '4892'
-4890 4892 0
c Var 'aux542' direct represents '8' with '4893'
4890 -4892 4893 0
-4893 4892 0
-4893 -4890 0
c Var 'aux542' order represents '9' with '4894'
-4892 4894 0
c Var 'aux542' direct represents '9' with '4895'
4892 -4894 4895 0
-4895 4894 0
-4895 -4892 0
c Var 'aux542' order represents '10' with '4896'
-4894 4896 0
c Var 'aux542' direct represents '10' with '4897'
4894 -4896 4897 0
-4897 4896 0
-4897 -4894 0
c Var 'aux542' order represents '11' with '4898'
-4896 4898 0
c Var 'aux542' direct represents '11' with '4899'
4896 -4898 4899 0
-4899 4898 0
-4899 -4896 0
c Var 'aux542' order represents '12' with '4900'
-4898 4900 0
c Var 'aux542' direct represents '12' with '4901'
4898 -4900 4901 0
-4901 4900 0
-4901 -4898 0
c Var 'aux542' order represents '13' with '4902'
-4900 4902 0
c Var 'aux542' direct represents '13' with '4903'
4900 -4902 4903 0
-4903 4902 0
-4903 -4900 0
c Var 'aux542' order represents '14' with '4904'
-4902 4904 0
c Var 'aux542' direct represents '14' with '4905'
4902 -4904 4905 0
-4905 4904 0
-4905 -4902 0
c Var 'aux542' order represents '15' with '4906'
-4904 4906 0
c Var 'aux542' direct represents '15' with '4907'
4904 -4906 4907 0
-4907 4906 0
-4907 -4904 0
c Var 'aux542' direct represents '16' with '-4906'
4877 4879 4881 4883 4885 4887 4889 4891 4893 4895 4897 4899 4901 4903 4905 4907 -4906 0
c Encoding variable: aux543 with domain: int(0..24) (representing constraint (shift(x_00004_00003, -1) + aux542))
c Both direct and order encoding.
c Var 'aux543' order represents '0' with '4908'
c Var 'aux543' direct represents '0' with '4908'
c Var 'aux543' order represents '1' with '4909'
-4908 4909 0
c Var 'aux543' direct represents '1' with '4910'
4908 -4909 4910 0
-4910 4909 0
-4910 -4908 0
c Var 'aux543' order represents '2' with '4911'
-4909 4911 0
c Var 'aux543' direct represents '2' with '4912'
4909 -4911 4912 0
-4912 4911 0
-4912 -4909 0
c Var 'aux543' order represents '3' with '4913'
-4911 4913 0
c Var 'aux543' direct represents '3' with '4914'
4911 -4913 4914 0
-4914 4913 0
-4914 -4911 0
c Var 'aux543' order represents '4' with '4915'
-4913 4915 0
c Var 'aux543' direct represents '4' with '4916'
4913 -4915 4916 0
-4916 4915 0
-4916 -4913 0
c Var 'aux543' order represents '5' with '4917'
-4915 4917 0
c Var 'aux543' direct represents '5' with '4918'
4915 -4917 4918 0
-4918 4917 0
-4918 -4915 0
c Var 'aux543' order represents '6' with '4919'
-4917 4919 0
c Var 'aux543' direct represents '6' with '4920'
4917 -4919 4920 0
-4920 4919 0
-4920 -4917 0
c Var 'aux543' order represents '7' with '4921'
-4919 4921 0
c Var 'aux543' direct represents '7' with '4922'
4919 -4921 4922 0
-4922 4921 0
-4922 -4919 0
c Var 'aux543' order represents '8' with '4923'
-4921 4923 0
c Var 'aux543' direct represents '8' with '4924'
4921 -4923 4924 0
-4924 4923 0
-4924 -4921 0
c Var 'aux543' order represents '9' with '4925'
-4923 4925 0
c Var 'aux543' direct represents '9' with '4926'
4923 -4925 4926 0
-4926 4925 0
-4926 -4923 0
c Var 'aux543' order represents '10' with '4927'
-4925 4927 0
c Var 'aux543' direct represents '10' with '4928'
4925 -4927 4928 0
-4928 4927 0
-4928 -4925 0
c Var 'aux543' order represents '11' with '4929'
-4927 4929 0
c Var 'aux543' direct represents '11' with '4930'
4927 -4929 4930 0
-4930 4929 0
-4930 -4927 0
c Var 'aux543' order represents '12' with '4931'
-4929 4931 0
c Var 'aux543' direct represents '12' with '4932'
4929 -4931 4932 0
-4932 4931 0
-4932 -4929 0
c Var 'aux543' order represents '13' with '4933'
-4931 4933 0
c Var 'aux543' direct represents '13' with '4934'
4931 -4933 4934 0
-4934 4933 0
-4934 -4931 0
c Var 'aux543' order represents '14' with '4935'
-4933 4935 0
c Var 'aux543' direct represents '14' with '4936'
4933 -4935 4936 0
-4936 4935 0
-4936 -4933 0
c Var 'aux543' order represents '15' with '4937'
-4935 4937 0
c Var 'aux543' direct represents '15' with '4938'
4935 -4937 4938 0
-4938 4937 0
-4938 -4935 0
c Var 'aux543' order represents '16' with '4939'
-4937 4939 0
c Var 'aux543' direct represents '16' with '4940'
4937 -4939 4940 0
-4940 4939 0
-4940 -4937 0
c Var 'aux543' order represents '17' with '4941'
-4939 4941 0
c Var 'aux543' direct represents '17' with '4942'
4939 -4941 4942 0
-4942 4941 0
-4942 -4939 0
c Var 'aux543' order represents '18' with '4943'
-4941 4943 0
c Var 'aux543' direct represents '18' with '4944'
4941 -4943 4944 0
-4944 4943 0
-4944 -4941 0
c Var 'aux543' order represents '19' with '4945'
-4943 4945 0
c Var 'aux543' direct represents '19' with '4946'
4943 -4945 4946 0
-4946 4945 0
-4946 -4943 0
c Var 'aux543' order represents '20' with '4947'
-4945 4947 0
c Var 'aux543' direct represents '20' with '4948'
4945 -4947 4948 0
-4948 4947 0
-4948 -4945 0
c Var 'aux543' order represents '21' with '4949'
-4947 4949 0
c Var 'aux543' direct represents '21' with '4950'
4947 -4949 4950 0
-4950 4949 0
-4950 -4947 0
c Var 'aux543' order represents '22' with '4951'
-4949 4951 0
c Var 'aux543' direct represents '22' with '4952'
4949 -4951 4952 0
-4952 4951 0
-4952 -4949 0
c Var 'aux543' order represents '23' with '4953'
-4951 4953 0
c Var 'aux543' direct represents '23' with '4954'
4951 -4953 4954 0
-4954 4953 0
-4954 -4951 0
c Var 'aux543' direct represents '24' with '-4953'
4908 4910 4912 4914 4916 4918 4920 4922 4924 4926 4928 4930 4932 4934 4936 4938 4940 4942 4944 4946 4948 4950 4952 4954 -4953 0
c Encoding variable: aux544 with domain: int(0..32) (representing constraint (aux539 + aux541))
c Both direct and order encoding.
c Var 'aux544' order represents '0' with '4955'
c Var 'aux544' direct represents '0' with '4955'
c Var 'aux544' order represents '1' with '4956'
-4955 4956 0
c Var 'aux544' direct represents '1' with '4957'
4955 -4956 4957 0
-4957 4956 0
-4957 -4955 0
c Var 'aux544' order represents '2' with '4958'
-4956 4958 0
c Var 'aux544' direct represents '2' with '4959'
4956 -4958 4959 0
-4959 4958 0
-4959 -4956 0
c Var 'aux544' order represents '3' with '4960'
-4958 4960 0
c Var 'aux544' direct represents '3' with '4961'
4958 -4960 4961 0
-4961 4960 0
-4961 -4958 0
c Var 'aux544' order represents '4' with '4962'
-4960 4962 0
c Var 'aux544' direct represents '4' with '4963'
4960 -4962 4963 0
-4963 4962 0
-4963 -4960 0
c Var 'aux544' order represents '5' with '4964'
-4962 4964 0
c Var 'aux544' direct represents '5' with '4965'
4962 -4964 4965 0
-4965 4964 0
-4965 -4962 0
c Var 'aux544' order represents '6' with '4966'
-4964 4966 0
c Var 'aux544' direct represents '6' with '4967'
4964 -4966 4967 0
-4967 4966 0
-4967 -4964 0
c Var 'aux544' order represents '7' with '4968'
-4966 4968 0
c Var 'aux544' direct represents '7' with '4969'
4966 -4968 4969 0
-4969 4968 0
-4969 -4966 0
c Var 'aux544' order represents '8' with '4970'
-4968 4970 0
c Var 'aux544' direct represents '8' with '4971'
4968 -4970 4971 0
-4971 4970 0
-4971 -4968 0
c Var 'aux544' order represents '9' with '4972'
-4970 4972 0
c Var 'aux544' direct represents '9' with '4973'
4970 -4972 4973 0
-4973 4972 0
-4973 -4970 0
c Var 'aux544' order represents '10' with '4974'
-4972 4974 0
c Var 'aux544' direct represents '10' with '4975'
4972 -4974 4975 0
-4975 4974 0
-4975 -4972 0
c Var 'aux544' order represents '11' with '4976'
-4974 4976 0
c Var 'aux544' direct represents '11' with '4977'
4974 -4976 4977 0
-4977 4976 0
-4977 -4974 0
c Var 'aux544' order represents '12' with '4978'
-4976 4978 0
c Var 'aux544' direct represents '12' with '4979'
4976 -4978 4979 0
-4979 4978 0
-4979 -4976 0
c Var 'aux544' order represents '13' with '4980'
-4978 4980 0
c Var 'aux544' direct represents '13' with '4981'
4978 -4980 4981 0
-4981 4980 0
-4981 -4978 0
c Var 'aux544' order represents '14' with '4982'
-4980 4982 0
c Var 'aux544' direct represents '14' with '4983'
4980 -4982 4983 0
-4983 4982 0
-4983 -4980 0
c Var 'aux544' order represents '15' with '4984'
-4982 4984 0
c Var 'aux544' direct represents '15' with '4985'
4982 -4984 4985 0
-4985 4984 0
-4985 -4982 0
c Var 'aux544' order represents '16' with '4986'
-4984 4986 0
c Var 'aux544' direct represents '16' with '4987'
4984 -4986 4987 0
-4987 4986 0
-4987 -4984 0
c Var 'aux544' order represents '17' with '4988'
-4986 4988 0
c Var 'aux544' direct represents '17' with '4989'
4986 -4988 4989 0
-4989 4988 0
-4989 -4986 0
c Var 'aux544' order represents '18' with '4990'
-4988 4990 0
c Var 'aux544' direct represents '18' with '4991'
4988 -4990 4991 0
-4991 4990 0
-4991 -4988 0
c Var 'aux544' order represents '19' with '4992'
-4990 4992 0
c Var 'aux544' direct represents '19' with '4993'
4990 -4992 4993 0
-4993 4992 0
-4993 -4990 0
c Var 'aux544' order represents '20' with '4994'
-4992 4994 0
c Var 'aux544' direct represents '20' with '4995'
4992 -4994 4995 0
-4995 4994 0
-4995 -4992 0
c Var 'aux544' order represents '21' with '4996'
-4994 4996 0
c Var 'aux544' direct represents '21' with '4997'
4994 -4996 4997 0
-4997 4996 0
-4997 -4994 0
c Var 'aux544' order represents '22' with '4998'
-4996 4998 0
c Var 'aux544' direct represents '22' with '4999'
4996 -4998 4999 0
-4999 4998 0
-4999 -4996 0
c Var 'aux544' order represents '23' with '5000'
-4998 5000 0
c Var 'aux544' direct represents '23' with '5001'
4998 -5000 5001 0
-5001 5000 0
-5001 -4998 0
c Var 'aux544' order represents '24' with '5002'
-5000 5002 0
c Var 'aux544' direct represents '24' with '5003'
5000 -5002 5003 0
-5003 5002 0
-5003 -5000 0
c Var 'aux544' order represents '25' with '5004'
-5002 5004 0
c Var 'aux544' direct represents '25' with '5005'
5002 -5004 5005 0
-5005 5004 0
-5005 -5002 0
c Var 'aux544' order represents '26' with '5006'
-5004 5006 0
c Var 'aux544' direct represents '26' with '5007'
5004 -5006 5007 0
-5007 5006 0
-5007 -5004 0
c Var 'aux544' order represents '27' with '5008'
-5006 5008 0
c Var 'aux544' direct represents '27' with '5009'
5006 -5008 5009 0
-5009 5008 0
-5009 -5006 0
c Var 'aux544' order represents '28' with '5010'
-5008 5010 0
c Var 'aux544' direct represents '28' with '5011'
5008 -5010 5011 0
-5011 5010 0
-5011 -5008 0
c Var 'aux544' order represents '29' with '5012'
-5010 5012 0
c Var 'aux544' direct represents '29' with '5013'
5010 -5012 5013 0
-5013 5012 0
-5013 -5010 0
c Var 'aux544' order represents '30' with '5014'
-5012 5014 0
c Var 'aux544' direct represents '30' with '5015'
5012 -5014 5015 0
-5015 5014 0
-5015 -5012 0
c Var 'aux544' order represents '31' with '5016'
-5014 5016 0
c Var 'aux544' direct represents '31' with '5017'
5014 -5016 5017 0
-5017 5016 0
-5017 -5014 0
c Var 'aux544' direct represents '32' with '-5016'
4955 4957 4959 4961 4963 4965 4967 4969 4971 4973 4975 4977 4979 4981 4983 4985 4987 4989 4991 4993 4995 4997 4999 5001 5003 5005 5007 5009 5011 5013 5015 5017 -5016 0
c Encoding variable: aux545 with domain: int(0..16) (representing constraint (shift(x_00005_00001, -1) + shift(x_00005_00009, -1)))
c Both direct and order encoding.
c Var 'aux545' order represents '0' with '5018'
c Var 'aux545' direct represents '0' with '5018'
c Var 'aux545' order represents '1' with '5019'
-5018 5019 0
c Var 'aux545' direct represents '1' with '5020'
5018 -5019 5020 0
-5020 5019 0
-5020 -5018 0
c Var 'aux545' order represents '2' with '5021'
-5019 5021 0
c Var 'aux545' direct represents '2' with '5022'
5019 -5021 5022 0
-5022 5021 0
-5022 -5019 0
c Var 'aux545' order represents '3' with '5023'
-5021 5023 0
c Var 'aux545' direct represents '3' with '5024'
5021 -5023 5024 0
-5024 5023 0
-5024 -5021 0
c Var 'aux545' order represents '4' with '5025'
-5023 5025 0
c Var 'aux545' direct represents '4' with '5026'
5023 -5025 5026 0
-5026 5025 0
-5026 -5023 0
c Var 'aux545' order represents '5' with '5027'
-5025 5027 0
c Var 'aux545' direct represents '5' with '5028'
5025 -5027 5028 0
-5028 5027 0
-5028 -5025 0
c Var 'aux545' order represents '6' with '5029'
-5027 5029 0
c Var 'aux545' direct represents '6' with '5030'
5027 -5029 5030 0
-5030 5029 0
-5030 -5027 0
c Var 'aux545' order represents '7' with '5031'
-5029 5031 0
c Var 'aux545' direct represents '7' with '5032'
5029 -5031 5032 0
-5032 5031 0
-5032 -5029 0
c Var 'aux545' order represents '8' with '5033'
-5031 5033 0
c Var 'aux545' direct represents '8' with '5034'
5031 -5033 5034 0
-5034 5033 0
-5034 -5031 0
c Var 'aux545' order represents '9' with '5035'
-5033 5035 0
c Var 'aux545' direct represents '9' with '5036'
5033 -5035 5036 0
-5036 5035 0
-5036 -5033 0
c Var 'aux545' order represents '10' with '5037'
-5035 5037 0
c Var 'aux545' direct represents '10' with '5038'
5035 -5037 5038 0
-5038 5037 0
-5038 -5035 0
c Var 'aux545' order represents '11' with '5039'
-5037 5039 0
c Var 'aux545' direct represents '11' with '5040'
5037 -5039 5040 0
-5040 5039 0
-5040 -5037 0
c Var 'aux545' order represents '12' with '5041'
-5039 5041 0
c Var 'aux545' direct represents '12' with '5042'
5039 -5041 5042 0
-5042 5041 0
-5042 -5039 0
c Var 'aux545' order represents '13' with '5043'
-5041 5043 0
c Var 'aux545' direct represents '13' with '5044'
5041 -5043 5044 0
-5044 5043 0
-5044 -5041 0
c Var 'aux545' order represents '14' with '5045'
-5043 5045 0
c Var 'aux545' direct represents '14' with '5046'
5043 -5045 5046 0
-5046 5045 0
-5046 -5043 0
c Var 'aux545' order represents '15' with '5047'
-5045 5047 0
c Var 'aux545' direct represents '15' with '5048'
5045 -5047 5048 0
-5048 5047 0
-5048 -5045 0
c Var 'aux545' direct represents '16' with '-5047'
5018 5020 5022 5024 5026 5028 5030 5032 5034 5036 5038 5040 5042 5044 5046 5048 -5047 0
c Encoding variable: aux546 with domain: int(0..16) (representing constraint (shift(x_00005_00008, -1) + shift(x_00005_00002, -1)))
c Both direct and order encoding.
c Var 'aux546' order represents '0' with '5049'
c Var 'aux546' direct represents '0' with '5049'
c Var 'aux546' order represents '1' with '5050'
-5049 5050 0
c Var 'aux546' direct represents '1' with '5051'
5049 -5050 5051 0
-5051 5050 0
-5051 -5049 0
c Var 'aux546' order represents '2' with '5052'
-5050 5052 0
c Var 'aux546' direct represents '2' with '5053'
5050 -5052 5053 0
-5053 5052 0
-5053 -5050 0
c Var 'aux546' order represents '3' with '5054'
-5052 5054 0
c Var 'aux546' direct represents '3' with '5055'
5052 -5054 5055 0
-5055 5054 0
-5055 -5052 0
c Var 'aux546' order represents '4' with '5056'
-5054 5056 0
c Var 'aux546' direct represents '4' with '5057'
5054 -5056 5057 0
-5057 5056 0
-5057 -5054 0
c Var 'aux546' order represents '5' with '5058'
-5056 5058 0
c Var 'aux546' direct represents '5' with '5059'
5056 -5058 5059 0
-5059 5058 0
-5059 -5056 0
c Var 'aux546' order represents '6' with '5060'
-5058 5060 0
c Var 'aux546' direct represents '6' with '5061'
5058 -5060 5061 0
-5061 5060 0
-5061 -5058 0
c Var 'aux546' order represents '7' with '5062'
-5060 5062 0
c Var 'aux546' direct represents '7' with '5063'
5060 -5062 5063 0
-5063 5062 0
-5063 -5060 0
c Var 'aux546' order represents '8' with '5064'
-5062 5064 0
c Var 'aux546' direct represents '8' with '5065'
5062 -5064 5065 0
-5065 5064 0
-5065 -5062 0
c Var 'aux546' order represents '9' with '5066'
-5064 5066 0
c Var 'aux546' direct represents '9' with '5067'
5064 -5066 5067 0
-5067 5066 0
-5067 -5064 0
c Var 'aux546' order represents '10' with '5068'
-5066 5068 0
c Var 'aux546' direct represents '10' with '5069'
5066 -5068 5069 0
-5069 5068 0
-5069 -5066 0
c Var 'aux546' order represents '11' with '5070'
-5068 5070 0
c Var 'aux546' direct represents '11' with '5071'
5068 -5070 5071 0
-5071 5070 0
-5071 -5068 0
c Var 'aux546' order represents '12' with '5072'
-5070 5072 0
c Var 'aux546' direct represents '12' with '5073'
5070 -5072 5073 0
-5073 5072 0
-5073 -5070 0
c Var 'aux546' order represents '13' with '5074'
-5072 5074 0
c Var 'aux546' direct represents '13' with '5075'
5072 -5074 5075 0
-5075 5074 0
-5075 -5072 0
c Var 'aux546' order represents '14' with '5076'
-5074 5076 0
c Var 'aux546' direct represents '14' with '5077'
5074 -5076 5077 0
-5077 5076 0
-5077 -5074 0
c Var 'aux546' order represents '15' with '5078'
-5076 5078 0
c Var 'aux546' direct represents '15' with '5079'
5076 -5078 5079 0
-5079 5078 0
-5079 -5076 0
c Var 'aux546' direct represents '16' with '-5078'
5049 5051 5053 5055 5057 5059 5061 5063 5065 5067 5069 5071 5073 5075 5077 5079 -5078 0
c Encoding variable: aux547 with domain: int(0..16) (representing constraint (shift(x_00005_00007, -1) + shift(x_00005_00004, -1)))
c Both direct and order encoding.
c Var 'aux547' order represents '0' with '5080'
c Var 'aux547' direct represents '0' with '5080'
c Var 'aux547' order represents '1' with '5081'
-5080 5081 0
c Var 'aux547' direct represents '1' with '5082'
5080 -5081 5082 0
-5082 5081 0
-5082 -5080 0
c Var 'aux547' order represents '2' with '5083'
-5081 5083 0
c Var 'aux547' direct represents '2' with '5084'
5081 -5083 5084 0
-5084 5083 0
-5084 -5081 0
c Var 'aux547' order represents '3' with '5085'
-5083 5085 0
c Var 'aux547' direct represents '3' with '5086'
5083 -5085 5086 0
-5086 5085 0
-5086 -5083 0
c Var 'aux547' order represents '4' with '5087'
-5085 5087 0
c Var 'aux547' direct represents '4' with '5088'
5085 -5087 5088 0
-5088 5087 0
-5088 -5085 0
c Var 'aux547' order represents '5' with '5089'
-5087 5089 0
c Var 'aux547' direct represents '5' with '5090'
5087 -5089 5090 0
-5090 5089 0
-5090 -5087 0
c Var 'aux547' order represents '6' with '5091'
-5089 5091 0
c Var 'aux547' direct represents '6' with '5092'
5089 -5091 5092 0
-5092 5091 0
-5092 -5089 0
c Var 'aux547' order represents '7' with '5093'
-5091 5093 0
c Var 'aux547' direct represents '7' with '5094'
5091 -5093 5094 0
-5094 5093 0
-5094 -5091 0
c Var 'aux547' order represents '8' with '5095'
-5093 5095 0
c Var 'aux547' direct represents '8' with '5096'
5093 -5095 5096 0
-5096 5095 0
-5096 -5093 0
c Var 'aux547' order represents '9' with '5097'
-5095 5097 0
c Var 'aux547' direct represents '9' with '5098'
5095 -5097 5098 0
-5098 5097 0
-5098 -5095 0
c Var 'aux547' order represents '10' with '5099'
-5097 5099 0
c Var 'aux547' direct represents '10' with '5100'
5097 -5099 5100 0
-5100 5099 0
-5100 -5097 0
c Var 'aux547' order represents '11' with '5101'
-5099 5101 0
c Var 'aux547' direct represents '11' with '5102'
5099 -5101 5102 0
-5102 5101 0
-5102 -5099 0
c Var 'aux547' order represents '12' with '5103'
-5101 5103 0
c Var 'aux547' direct represents '12' with '5104'
5101 -5103 5104 0
-5104 5103 0
-5104 -5101 0
c Var 'aux547' order represents '13' with '5105'
-5103 5105 0
c Var 'aux547' direct represents '13' with '5106'
5103 -5105 5106 0
-5106 5105 0
-5106 -5103 0
c Var 'aux547' order represents '14' with '5107'
-5105 5107 0
c Var 'aux547' direct represents '14' with '5108'
5105 -5107 5108 0
-5108 5107 0
-5108 -5105 0
c Var 'aux547' order represents '15' with '5109'
-5107 5109 0
c Var 'aux547' direct represents '15' with '5110'
5107 -5109 5110 0
-5110 5109 0
-5110 -5107 0
c Var 'aux547' direct represents '16' with '-5109'
5080 5082 5084 5086 5088 5090 5092 5094 5096 5098 5100 5102 5104 5106 5108 5110 -5109 0
c Encoding variable: aux548 with domain: int(0..16) (representing constraint (shift(x_00005_00006, -1) + shift(x_00005_00005, -1)))
c Both direct and order encoding.
c Var 'aux548' order represents '0' with '5111'
c Var 'aux548' direct represents '0' with '5111'
c Var 'aux548' order represents '1' with '5112'
-5111 5112 0
c Var 'aux548' direct represents '1' with '5113'
5111 -5112 5113 0
-5113 5112 0
-5113 -5111 0
c Var 'aux548' order represents '2' with '5114'
-5112 5114 0
c Var 'aux548' direct represents '2' with '5115'
5112 -5114 5115 0
-5115 5114 0
-5115 -5112 0
c Var 'aux548' order represents '3' with '5116'
-5114 5116 0
c Var 'aux548' direct represents '3' with '5117'
5114 -5116 5117 0
-5117 5116 0
-5117 -5114 0
c Var 'aux548' order represents '4' with '5118'
-5116 5118 0
c Var 'aux548' direct represents '4' with '5119'
5116 -5118 5119 0
-5119 5118 0
-5119 -5116 0
c Var 'aux548' order represents '5' with '5120'
-5118 5120 0
c Var 'aux548' direct represents '5' with '5121'
5118 -5120 5121 0
-5121 5120 0
-5121 -5118 0
c Var 'aux548' order represents '6' with '5122'
-5120 5122 0
c Var 'aux548' direct represents '6' with '5123'
5120 -5122 5123 0
-5123 5122 0
-5123 -5120 0
c Var 'aux548' order represents '7' with '5124'
-5122 5124 0
c Var 'aux548' direct represents '7' with '5125'
5122 -5124 5125 0
-5125 5124 0
-5125 -5122 0
c Var 'aux548' order represents '8' with '5126'
-5124 5126 0
c Var 'aux548' direct represents '8' with '5127'
5124 -5126 5127 0
-5127 5126 0
-5127 -5124 0
c Var 'aux548' order represents '9' with '5128'
-5126 5128 0
c Var 'aux548' direct represents '9' with '5129'
5126 -5128 5129 0
-5129 5128 0
-5129 -5126 0
c Var 'aux548' order represents '10' with '5130'
-5128 5130 0
c Var 'aux548' direct represents '10' with '5131'
5128 -5130 5131 0
-5131 5130 0
-5131 -5128 0
c Var 'aux548' order represents '11' with '5132'
-5130 5132 0
c Var 'aux548' direct represents '11' with '5133'
5130 -5132 5133 0
-5133 5132 0
-5133 -5130 0
c Var 'aux548' order represents '12' with '5134'
-5132 5134 0
c Var 'aux548' direct represents '12' with '5135'
5132 -5134 5135 0
-5135 5134 0
-5135 -5132 0
c Var 'aux548' order represents '13' with '5136'
-5134 5136 0
c Var 'aux548' direct represents '13' with '5137'
5134 -5136 5137 0
-5137 5136 0
-5137 -5134 0
c Var 'aux548' order represents '14' with '5138'
-5136 5138 0
c Var 'aux548' direct represents '14' with '5139'
5136 -5138 5139 0
-5139 5138 0
-5139 -5136 0
c Var 'aux548' order represents '15' with '5140'
-5138 5140 0
c Var 'aux548' direct represents '15' with '5141'
5138 -5140 5141 0
-5141 5140 0
-5141 -5138 0
c Var 'aux548' direct represents '16' with '-5140'
5111 5113 5115 5117 5119 5121 5123 5125 5127 5129 5131 5133 5135 5137 5139 5141 -5140 0
c Encoding variable: aux549 with domain: int(0..24) (representing constraint (shift(x_00005_00003, -1) + aux548))
c Both direct and order encoding.
c Var 'aux549' order represents '0' with '5142'
c Var 'aux549' direct represents '0' with '5142'
c Var 'aux549' order represents '1' with '5143'
-5142 5143 0
c Var 'aux549' direct represents '1' with '5144'
5142 -5143 5144 0
-5144 5143 0
-5144 -5142 0
c Var 'aux549' order represents '2' with '5145'
-5143 5145 0
c Var 'aux549' direct represents '2' with '5146'
5143 -5145 5146 0
-5146 5145 0
-5146 -5143 0
c Var 'aux549' order represents '3' with '5147'
-5145 5147 0
c Var 'aux549' direct represents '3' with '5148'
5145 -5147 5148 0
-5148 5147 0
-5148 -5145 0
c Var 'aux549' order represents '4' with '5149'
-5147 5149 0
c Var 'aux549' direct represents '4' with '5150'
5147 -5149 5150 0
-5150 5149 0
-5150 -5147 0
c Var 'aux549' order represents '5' with '5151'
-5149 5151 0
c Var 'aux549' direct represents '5' with '5152'
5149 -5151 5152 0
-5152 5151 0
-5152 -5149 0
c Var 'aux549' order represents '6' with '5153'
-5151 5153 0
c Var 'aux549' direct represents '6' with '5154'
5151 -5153 5154 0
-5154 5153 0
-5154 -5151 0
c Var 'aux549' order represents '7' with '5155'
-5153 5155 0
c Var 'aux549' direct represents '7' with '5156'
5153 -5155 5156 0
-5156 5155 0
-5156 -5153 0
c Var 'aux549' order represents '8' with '5157'
-5155 5157 0
c Var 'aux549' direct represents '8' with '5158'
5155 -5157 5158 0
-5158 5157 0
-5158 -5155 0
c Var 'aux549' order represents '9' with '5159'
-5157 5159 0
c Var 'aux549' direct represents '9' with '5160'
5157 -5159 5160 0
-5160 5159 0
-5160 -5157 0
c Var 'aux549' order represents '10' with '5161'
-5159 5161 0
c Var 'aux549' direct represents '10' with '5162'
5159 -5161 5162 0
-5162 5161 0
-5162 -5159 0
c Var 'aux549' order represents '11' with '5163'
-5161 5163 0
c Var 'aux549' direct represents '11' with '5164'
5161 -5163 5164 0
-5164 5163 0
-5164 -5161 0
c Var 'aux549' order represents '12' with '5165'
-5163 5165 0
c Var 'aux549' direct represents '12' with '5166'
5163 -5165 5166 0
-5166 5165 0
-5166 -5163 0
c Var 'aux549' order represents '13' with '5167'
-5165 5167 0
c Var 'aux549' direct represents '13' with '5168'
5165 -5167 5168 0
-5168 5167 0
-5168 -5165 0
c Var 'aux549' order represents '14' with '5169'
-5167 5169 0
c Var 'aux549' direct represents '14' with '5170'
5167 -5169 5170 0
-5170 5169 0
-5170 -5167 0
c Var 'aux549' order represents '15' with '5171'
-5169 5171 0
c Var 'aux549' direct represents '15' with '5172'
5169 -5171 5172 0
-5172 5171 0
-5172 -5169 0
c Var 'aux549' order represents '16' with '5173'
-5171 5173 0
c Var 'aux549' direct represents '16' with '5174'
5171 -5173 5174 0
-5174 5173 0
-5174 -5171 0
c Var 'aux549' order represents '17' with '5175'
-5173 5175 0
c Var 'aux549' direct represents '17' with '5176'
5173 -5175 5176 0
-5176 5175 0
-5176 -5173 0
c Var 'aux549' order represents '18' with '5177'
-5175 5177 0
c Var 'aux549' direct represents '18' with '5178'
5175 -5177 5178 0
-5178 5177 0
-5178 -5175 0
c Var 'aux549' order represents '19' with '5179'
-5177 5179 0
c Var 'aux549' direct represents '19' with '5180'
5177 -5179 5180 0
-5180 5179 0
-5180 -5177 0
c Var 'aux549' order represents '20' with '5181'
-5179 5181 0
c Var 'aux549' direct represents '20' with '5182'
5179 -5181 5182 0
-5182 5181 0
-5182 -5179 0
c Var 'aux549' order represents '21' with '5183'
-5181 5183 0
c Var 'aux549' direct represents '21' with '5184'
5181 -5183 5184 0
-5184 5183 0
-5184 -5181 0
c Var 'aux549' order represents '22' with '5185'
-5183 5185 0
c Var 'aux549' direct represents '22' with '5186'
5183 -5185 5186 0
-5186 5185 0
-5186 -5183 0
c Var 'aux549' order represents '23' with '5187'
-5185 5187 0
c Var 'aux549' direct represents '23' with '5188'
5185 -5187 5188 0
-5188 5187 0
-5188 -5185 0
c Var 'aux549' direct represents '24' with '-5187'
5142 5144 5146 5148 5150 5152 5154 5156 5158 5160 5162 5164 5166 5168 5170 5172 5174 5176 5178 5180 5182 5184 5186 5188 -5187 0
c Encoding variable: aux550 with domain: int(0..32) (representing constraint (aux545 + aux547))
c Both direct and order encoding.
c Var 'aux550' order represents '0' with '5189'
c Var 'aux550' direct represents '0' with '5189'
c Var 'aux550' order represents '1' with '5190'
-5189 5190 0
c Var 'aux550' direct represents '1' with '5191'
5189 -5190 5191 0
-5191 5190 0
-5191 -5189 0
c Var 'aux550' order represents '2' with '5192'
-5190 5192 0
c Var 'aux550' direct represents '2' with '5193'
5190 -5192 5193 0
-5193 5192 0
-5193 -5190 0
c Var 'aux550' order represents '3' with '5194'
-5192 5194 0
c Var 'aux550' direct represents '3' with '5195'
5192 -5194 5195 0
-5195 5194 0
-5195 -5192 0
c Var 'aux550' order represents '4' with '5196'
-5194 5196 0
c Var 'aux550' direct represents '4' with '5197'
5194 -5196 5197 0
-5197 5196 0
-5197 -5194 0
c Var 'aux550' order represents '5' with '5198'
-5196 5198 0
c Var 'aux550' direct represents '5' with '5199'
5196 -5198 5199 0
-5199 5198 0
-5199 -5196 0
c Var 'aux550' order represents '6' with '5200'
-5198 5200 0
c Var 'aux550' direct represents '6' with '5201'
5198 -5200 5201 0
-5201 5200 0
-5201 -5198 0
c Var 'aux550' order represents '7' with '5202'
-5200 5202 0
c Var 'aux550' direct represents '7' with '5203'
5200 -5202 5203 0
-5203 5202 0
-5203 -5200 0
c Var 'aux550' order represents '8' with '5204'
-5202 5204 0
c Var 'aux550' direct represents '8' with '5205'
5202 -5204 5205 0
-5205 5204 0
-5205 -5202 0
c Var 'aux550' order represents '9' with '5206'
-5204 5206 0
c Var 'aux550' direct represents '9' with '5207'
5204 -5206 5207 0
-5207 5206 0
-5207 -5204 0
c Var 'aux550' order represents '10' with '5208'
-5206 5208 0
c Var 'aux550' direct represents '10' with '5209'
5206 -5208 5209 0
-5209 5208 0
-5209 -5206 0
c Var 'aux550' order represents '11' with '5210'
-5208 5210 0
c Var 'aux550' direct represents '11' with '5211'
5208 -5210 5211 0
-5211 5210 0
-5211 -5208 0
c Var 'aux550' order represents '12' with '5212'
-5210 5212 0
c Var 'aux550' direct represents '12' with '5213'
5210 -5212 5213 0
-5213 5212 0
-5213 -5210 0
c Var 'aux550' order represents '13' with '5214'
-5212 5214 0
c Var 'aux550' direct represents '13' with '5215'
5212 -5214 5215 0
-5215 5214 0
-5215 -5212 0
c Var 'aux550' order represents '14' with '5216'
-5214 5216 0
c Var 'aux550' direct represents '14' with '5217'
5214 -5216 5217 0
-5217 5216 0
-5217 -5214 0
c Var 'aux550' order represents '15' with '5218'
-5216 5218 0
c Var 'aux550' direct represents '15' with '5219'
5216 -5218 5219 0
-5219 5218 0
-5219 -5216 0
c Var 'aux550' order represents '16' with '5220'
-5218 5220 0
c Var 'aux550' direct represents '16' with '5221'
5218 -5220 5221 0
-5221 5220 0
-5221 -5218 0
c Var 'aux550' order represents '17' with '5222'
-5220 5222 0
c Var 'aux550' direct represents '17' with '5223'
5220 -5222 5223 0
-5223 5222 0
-5223 -5220 0
c Var 'aux550' order represents '18' with '5224'
-5222 5224 0
c Var 'aux550' direct represents '18' with '5225'
5222 -5224 5225 0
-5225 5224 0
-5225 -5222 0
c Var 'aux550' order represents '19' with '5226'
-5224 5226 0
c Var 'aux550' direct represents '19' with '5227'
5224 -5226 5227 0
-5227 5226 0
-5227 -5224 0
c Var 'aux550' order represents '20' with '5228'
-5226 5228 0
c Var 'aux550' direct represents '20' with '5229'
5226 -5228 5229 0
-5229 5228 0
-5229 -5226 0
c Var 'aux550' order represents '21' with '5230'
-5228 5230 0
c Var 'aux550' direct represents '21' with '5231'
5228 -5230 5231 0
-5231 5230 0
-5231 -5228 0
c Var 'aux550' order represents '22' with '5232'
-5230 5232 0
c Var 'aux550' direct represents '22' with '5233'
5230 -5232 5233 0
-5233 5232 0
-5233 -5230 0
c Var 'aux550' order represents '23' with '5234'
-5232 5234 0
c Var 'aux550' direct represents '23' with '5235'
5232 -5234 5235 0
-5235 5234 0
-5235 -5232 0
c Var 'aux550' order represents '24' with '5236'
-5234 5236 0
c Var 'aux550' direct represents '24' with '5237'
5234 -5236 5237 0
-5237 5236 0
-5237 -5234 0
c Var 'aux550' order represents '25' with '5238'
-5236 5238 0
c Var 'aux550' direct represents '25' with '5239'
5236 -5238 5239 0
-5239 5238 0
-5239 -5236 0
c Var 'aux550' order represents '26' with '5240'
-5238 5240 0
c Var 'aux550' direct represents '26' with '5241'
5238 -5240 5241 0
-5241 5240 0
-5241 -5238 0
c Var 'aux550' order represents '27' with '5242'
-5240 5242 0
c Var 'aux550' direct represents '27' with '5243'
5240 -5242 5243 0
-5243 5242 0
-5243 -5240 0
c Var 'aux550' order represents '28' with '5244'
-5242 5244 0
c Var 'aux550' direct represents '28' with '5245'
5242 -5244 5245 0
-5245 5244 0
-5245 -5242 0
c Var 'aux550' order represents '29' with '5246'
-5244 5246 0
c Var 'aux550' direct represents '29' with '5247'
5244 -5246 5247 0
-5247 5246 0
-5247 -5244 0
c Var 'aux550' order represents '30' with '5248'
-5246 5248 0
c Var 'aux550' direct represents '30' with '5249'
5246 -5248 5249 0
-5249 5248 0
-5249 -5246 0
c Var 'aux550' order represents '31' with '5250'
-5248 5250 0
c Var 'aux550' direct represents '31' with '5251'
5248 -5250 5251 0
-5251 5250 0
-5251 -5248 0
c Var 'aux550' direct represents '32' with '-5250'
5189 5191 5193 5195 5197 5199 5201 5203 5205 5207 5209 5211 5213 5215 5217 5219 5221 5223 5225 5227 5229 5231 5233 5235 5237 5239 5241 5243 5245 5247 5249 5251 -5250 0
c Encoding variable: aux551 with domain: int(0..16) (representing constraint (shift(x_00006_00001, -1) + shift(x_00006_00009, -1)))
c Both direct and order encoding.
c Var 'aux551' order represents '0' with '5252'
c Var 'aux551' direct represents '0' with '5252'
c Var 'aux551' order represents '1' with '5253'
-5252 5253 0
c Var 'aux551' direct represents '1' with '5254'
5252 -5253 5254 0
-5254 5253 0
-5254 -5252 0
c Var 'aux551' order represents '2' with '5255'
-5253 5255 0
c Var 'aux551' direct represents '2' with '5256'
5253 -5255 5256 0
-5256 5255 0
-5256 -5253 0
c Var 'aux551' order represents '3' with '5257'
-5255 5257 0
c Var 'aux551' direct represents '3' with '5258'
5255 -5257 5258 0
-5258 5257 0
-5258 -5255 0
c Var 'aux551' order represents '4' with '5259'
-5257 5259 0
c Var 'aux551' direct represents '4' with '5260'
5257 -5259 5260 0
-5260 5259 0
-5260 -5257 0
c Var 'aux551' order represents '5' with '5261'
-5259 5261 0
c Var 'aux551' direct represents '5' with '5262'
5259 -5261 5262 0
-5262 5261 0
-5262 -5259 0
c Var 'aux551' order represents '6' with '5263'
-5261 5263 0
c Var 'aux551' direct represents '6' with '5264'
5261 -5263 5264 0
-5264 5263 0
-5264 -5261 0
c Var 'aux551' order represents '7' with '5265'
-5263 5265 0
c Var 'aux551' direct represents '7' with '5266'
5263 -5265 5266 0
-5266 5265 0
-5266 -5263 0
c Var 'aux551' order represents '8' with '5267'
-5265 5267 0
c Var 'aux551' direct represents '8' with '5268'
5265 -5267 5268 0
-5268 5267 0
-5268 -5265 0
c Var 'aux551' order represents '9' with '5269'
-5267 5269 0
c Var 'aux551' direct represents '9' with '5270'
5267 -5269 5270 0
-5270 5269 0
-5270 -5267 0
c Var 'aux551' order represents '10' with '5271'
-5269 5271 0
c Var 'aux551' direct represents '10' with '5272'
5269 -5271 5272 0
-5272 5271 0
-5272 -5269 0
c Var 'aux551' order represents '11' with '5273'
-5271 5273 0
c Var 'aux551' direct represents '11' with '5274'
5271 -5273 5274 0
-5274 5273 0
-5274 -5271 0
c Var 'aux551' order represents '12' with '5275'
-5273 5275 0
c Var 'aux551' direct represents '12' with '5276'
5273 -5275 5276 0
-5276 5275 0
-5276 -5273 0
c Var 'aux551' order represents '13' with '5277'
-5275 5277 0
c Var 'aux551' direct represents '13' with '5278'
5275 -5277 5278 0
-5278 5277 0
-5278 -5275 0
c Var 'aux551' order represents '14' with '5279'
-5277 5279 0
c Var 'aux551' direct represents '14' with '5280'
5277 -5279 5280 0
-5280 5279 0
-5280 -5277 0
c Var 'aux551' order represents '15' with '5281'
-5279 5281 0
c Var 'aux551' direct represents '15' with '5282'
5279 -5281 5282 0
-5282 5281 0
-5282 -5279 0
c Var 'aux551' direct represents '16' with '-5281'
5252 5254 5256 5258 5260 5262 5264 5266 5268 5270 5272 5274 5276 5278 5280 5282 -5281 0
c Encoding variable: aux552 with domain: int(0..16) (representing constraint (shift(x_00006_00008, -1) + shift(x_00006_00002, -1)))
c Both direct and order encoding.
c Var 'aux552' order represents '0' with '5283'
c Var 'aux552' direct represents '0' with '5283'
c Var 'aux552' order represents '1' with '5284'
-5283 5284 0
c Var 'aux552' direct represents '1' with '5285'
5283 -5284 5285 0
-5285 5284 0
-5285 -5283 0
c Var 'aux552' order represents '2' with '5286'
-5284 5286 0
c Var 'aux552' direct represents '2' with '5287'
5284 -5286 5287 0
-5287 5286 0
-5287 -5284 0
c Var 'aux552' order represents '3' with '5288'
-5286 5288 0
c Var 'aux552' direct represents '3' with '5289'
5286 -5288 5289 0
-5289 5288 0
-5289 -5286 0
c Var 'aux552' order represents '4' with '5290'
-5288 5290 0
c Var 'aux552' direct represents '4' with '5291'
5288 -5290 5291 0
-5291 5290 0
-5291 -5288 0
c Var 'aux552' order represents '5' with '5292'
-5290 5292 0
c Var 'aux552' direct represents '5' with '5293'
5290 -5292 5293 0
-5293 5292 0
-5293 -5290 0
c Var 'aux552' order represents '6' with '5294'
-5292 5294 0
c Var 'aux552' direct represents '6' with '5295'
5292 -5294 5295 0
-5295 5294 0
-5295 -5292 0
c Var 'aux552' order represents '7' with '5296'
-5294 5296 0
c Var 'aux552' direct represents '7' with '5297'
5294 -5296 5297 0
-5297 5296 0
-5297 -5294 0
c Var 'aux552' order represents '8' with '5298'
-5296 5298 0
c Var 'aux552' direct represents '8' with '5299'
5296 -5298 5299 0
-5299 5298 0
-5299 -5296 0
c Var 'aux552' order represents '9' with '5300'
-5298 5300 0
c Var 'aux552' direct represents '9' with '5301'
5298 -5300 5301 0
-5301 5300 0
-5301 -5298 0
c Var 'aux552' order represents '10' with '5302'
-5300 5302 0
c Var 'aux552' direct represents '10' with '5303'
5300 -5302 5303 0
-5303 5302 0
-5303 -5300 0
c Var 'aux552' order represents '11' with '5304'
-5302 5304 0
c Var 'aux552' direct represents '11' with '5305'
5302 -5304 5305 0
-5305 5304 0
-5305 -5302 0
c Var 'aux552' order represents '12' with '5306'
-5304 5306 0
c Var 'aux552' direct represents '12' with '5307'
5304 -5306 5307 0
-5307 5306 0
-5307 -5304 0
c Var 'aux552' order represents '13' with '5308'
-5306 5308 0
c Var 'aux552' direct represents '13' with '5309'
5306 -5308 5309 0
-5309 5308 0
-5309 -5306 0
c Var 'aux552' order represents '14' with '5310'
-5308 5310 0
c Var 'aux552' direct represents '14' with '5311'
5308 -5310 5311 0
-5311 5310 0
-5311 -5308 0
c Var 'aux552' order represents '15' with '5312'
-5310 5312 0
c Var 'aux552' direct represents '15' with '5313'
5310 -5312 5313 0
-5313 5312 0
-5313 -5310 0
c Var 'aux552' direct represents '16' with '-5312'
5283 5285 5287 5289 5291 5293 5295 5297 5299 5301 5303 5305 5307 5309 5311 5313 -5312 0
c Encoding variable: aux553 with domain: int(0..16) (representing constraint (shift(x_00006_00007, -1) + shift(x_00006_00004, -1)))
c Both direct and order encoding.
c Var 'aux553' order represents '0' with '5314'
c Var 'aux553' direct represents '0' with '5314'
c Var 'aux553' order represents '1' with '5315'
-5314 5315 0
c Var 'aux553' direct represents '1' with '5316'
5314 -5315 5316 0
-5316 5315 0
-5316 -5314 0
c Var 'aux553' order represents '2' with '5317'
-5315 5317 0
c Var 'aux553' direct represents '2' with '5318'
5315 -5317 5318 0
-5318 5317 0
-5318 -5315 0
c Var 'aux553' order represents '3' with '5319'
-5317 5319 0
c Var 'aux553' direct represents '3' with '5320'
5317 -5319 5320 0
-5320 5319 0
-5320 -5317 0
c Var 'aux553' order represents '4' with '5321'
-5319 5321 0
c Var 'aux553' direct represents '4' with '5322'
5319 -5321 5322 0
-5322 5321 0
-5322 -5319 0
c Var 'aux553' order represents '5' with '5323'
-5321 5323 0
c Var 'aux553' direct represents '5' with '5324'
5321 -5323 5324 0
-5324 5323 0
-5324 -5321 0
c Var 'aux553' order represents '6' with '5325'
-5323 5325 0
c Var 'aux553' direct represents '6' with '5326'
5323 -5325 5326 0
-5326 5325 0
-5326 -5323 0
c Var 'aux553' order represents '7' with '5327'
-5325 5327 0
c Var 'aux553' direct represents '7' with '5328'
5325 -5327 5328 0
-5328 5327 0
-5328 -5325 0
c Var 'aux553' order represents '8' with '5329'
-5327 5329 0
c Var 'aux553' direct represents '8' with '5330'
5327 -5329 5330 0
-5330 5329 0
-5330 -5327 0
c Var 'aux553' order represents '9' with '5331'
-5329 5331 0
c Var 'aux553' direct represents '9' with '5332'
5329 -5331 5332 0
-5332 5331 0
-5332 -5329 0
c Var 'aux553' order represents '10' with '5333'
-5331 5333 0
c Var 'aux553' direct represents '10' with '5334'
5331 -5333 5334 0
-5334 5333 0
-5334 -5331 0
c Var 'aux553' order represents '11' with '5335'
-5333 5335 0
c Var 'aux553' direct represents '11' with '5336'
5333 -5335 5336 0
-5336 5335 0
-5336 -5333 0
c Var 'aux553' order represents '12' with '5337'
-5335 5337 0
c Var 'aux553' direct represents '12' with '5338'
5335 -5337 5338 0
-5338 5337 0
-5338 -5335 0
c Var 'aux553' order represents '13' with '5339'
-5337 5339 0
c Var 'aux553' direct represents '13' with '5340'
5337 -5339 5340 0
-5340 5339 0
-5340 -5337 0
c Var 'aux553' order represents '14' with '5341'
-5339 5341 0
c Var 'aux553' direct represents '14' with '5342'
5339 -5341 5342 0
-5342 5341 0
-5342 -5339 0
c Var 'aux553' order represents '15' with '5343'
-5341 5343 0
c Var 'aux553' direct represents '15' with '5344'
5341 -5343 5344 0
-5344 5343 0
-5344 -5341 0
c Var 'aux553' direct represents '16' with '-5343'
5314 5316 5318 5320 5322 5324 5326 5328 5330 5332 5334 5336 5338 5340 5342 5344 -5343 0
c Encoding variable: aux554 with domain: int(0..16) (representing constraint (shift(x_00006_00006, -1) + shift(x_00006_00005, -1)))
c Both direct and order encoding.
c Var 'aux554' order represents '0' with '5345'
c Var 'aux554' direct represents '0' with '5345'
c Var 'aux554' order represents '1' with '5346'
-5345 5346 0
c Var 'aux554' direct represents '1' with '5347'
5345 -5346 5347 0
-5347 5346 0
-5347 -5345 0
c Var 'aux554' order represents '2' with '5348'
-5346 5348 0
c Var 'aux554' direct represents '2' with '5349'
5346 -5348 5349 0
-5349 5348 0
-5349 -5346 0
c Var 'aux554' order represents '3' with '5350'
-5348 5350 0
c Var 'aux554' direct represents '3' with '5351'
5348 -5350 5351 0
-5351 5350 0
-5351 -5348 0
c Var 'aux554' order represents '4' with '5352'
-5350 5352 0
c Var 'aux554' direct represents '4' with '5353'
5350 -5352 5353 0
-5353 5352 0
-5353 -5350 0
c Var 'aux554' order represents '5' with '5354'
-5352 5354 0
c Var 'aux554' direct represents '5' with '5355'
5352 -5354 5355 0
-5355 5354 0
-5355 -5352 0
c Var 'aux554' order represents '6' with '5356'
-5354 5356 0
c Var 'aux554' direct represents '6' with '5357'
5354 -5356 5357 0
-5357 5356 0
-5357 -5354 0
c Var 'aux554' order represents '7' with '5358'
-5356 5358 0
c Var 'aux554' direct represents '7' with '5359'
5356 -5358 5359 0
-5359 5358 0
-5359 -5356 0
c Var 'aux554' order represents '8' with '5360'
-5358 5360 0
c Var 'aux554' direct represents '8' with '5361'
5358 -5360 5361 0
-5361 5360 0
-5361 -5358 0
c Var 'aux554' order represents '9' with '5362'
-5360 5362 0
c Var 'aux554' direct represents '9' with '5363'
5360 -5362 5363 0
-5363 5362 0
-5363 -5360 0
c Var 'aux554' order represents '10' with '5364'
-5362 5364 0
c Var 'aux554' direct represents '10' with '5365'
5362 -5364 5365 0
-5365 5364 0
-5365 -5362 0
c Var 'aux554' order represents '11' with '5366'
-5364 5366 0
c Var 'aux554' direct represents '11' with '5367'
5364 -5366 5367 0
-5367 5366 0
-5367 -5364 0
c Var 'aux554' order represents '12' with '5368'
-5366 5368 0
c Var 'aux554' direct represents '12' with '5369'
5366 -5368 5369 0
-5369 5368 0
-5369 -5366 0
c Var 'aux554' order represents '13' with '5370'
-5368 5370 0
c Var 'aux554' direct represents '13' with '5371'
5368 -5370 5371 0
-5371 5370 0
-5371 -5368 0
c Var 'aux554' order represents '14' with '5372'
-5370 5372 0
c Var 'aux554' direct represents '14' with '5373'
5370 -5372 5373 0
-5373 5372 0
-5373 -5370 0
c Var 'aux554' order represents '15' with '5374'
-5372 5374 0
c Var 'aux554' direct represents '15' with '5375'
5372 -5374 5375 0
-5375 5374 0
-5375 -5372 0
c Var 'aux554' direct represents '16' with '-5374'
5345 5347 5349 5351 5353 5355 5357 5359 5361 5363 5365 5367 5369 5371 5373 5375 -5374 0
c Encoding variable: aux555 with domain: int(0..24) (representing constraint (shift(x_00006_00003, -1) + aux554))
c Both direct and order encoding.
c Var 'aux555' order represents '0' with '5376'
c Var 'aux555' direct represents '0' with '5376'
c Var 'aux555' order represents '1' with '5377'
-5376 5377 0
c Var 'aux555' direct represents '1' with '5378'
5376 -5377 5378 0
-5378 5377 0
-5378 -5376 0
c Var 'aux555' order represents '2' with '5379'
-5377 5379 0
c Var 'aux555' direct represents '2' with '5380'
5377 -5379 5380 0
-5380 5379 0
-5380 -5377 0
c Var 'aux555' order represents '3' with '5381'
-5379 5381 0
c Var 'aux555' direct represents '3' with '5382'
5379 -5381 5382 0
-5382 5381 0
-5382 -5379 0
c Var 'aux555' order represents '4' with '5383'
-5381 5383 0
c Var 'aux555' direct represents '4' with '5384'
5381 -5383 5384 0
-5384 5383 0
-5384 -5381 0
c Var 'aux555' order represents '5' with '5385'
-5383 5385 0
c Var 'aux555' direct represents '5' with '5386'
5383 -5385 5386 0
-5386 5385 0
-5386 -5383 0
c Var 'aux555' order represents '6' with '5387'
-5385 5387 0
c Var 'aux555' direct represents '6' with '5388'
5385 -5387 5388 0
-5388 5387 0
-5388 -5385 0
c Var 'aux555' order represents '7' with '5389'
-5387 5389 0
c Var 'aux555' direct represents '7' with '5390'
5387 -5389 5390 0
-5390 5389 0
-5390 -5387 0
c Var 'aux555' order represents '8' with '5391'
-5389 5391 0
c Var 'aux555' direct represents '8' with '5392'
5389 -5391 5392 0
-5392 5391 0
-5392 -5389 0
c Var 'aux555' order represents '9' with '5393'
-5391 5393 0
c Var 'aux555' direct represents '9' with '5394'
5391 -5393 5394 0
-5394 5393 0
-5394 -5391 0
c Var 'aux555' order represents '10' with '5395'
-5393 5395 0
c Var 'aux555' direct represents '10' with '5396'
5393 -5395 5396 0
-5396 5395 0
-5396 -5393 0
c Var 'aux555' order represents '11' with '5397'
-5395 5397 0
c Var 'aux555' direct represents '11' with '5398'
5395 -5397 5398 0
-5398 5397 0
-5398 -5395 0
c Var 'aux555' order represents '12' with '5399'
-5397 5399 0
c Var 'aux555' direct represents '12' with '5400'
5397 -5399 5400 0
-5400 5399 0
-5400 -5397 0
c Var 'aux555' order represents '13' with '5401'
-5399 5401 0
c Var 'aux555' direct represents '13' with '5402'
5399 -5401 5402 0
-5402 5401 0
-5402 -5399 0
c Var 'aux555' order represents '14' with '5403'
-5401 5403 0
c Var 'aux555' direct represents '14' with '5404'
5401 -5403 5404 0
-5404 5403 0
-5404 -5401 0
c Var 'aux555' order represents '15' with '5405'
-5403 5405 0
c Var 'aux555' direct represents '15' with '5406'
5403 -5405 5406 0
-5406 5405 0
-5406 -5403 0
c Var 'aux555' order represents '16' with '5407'
-5405 5407 0
c Var 'aux555' direct represents '16' with '5408'
5405 -5407 5408 0
-5408 5407 0
-5408 -5405 0
c Var 'aux555' order represents '17' with '5409'
-5407 5409 0
c Var 'aux555' direct represents '17' with '5410'
5407 -5409 5410 0
-5410 5409 0
-5410 -5407 0
c Var 'aux555' order represents '18' with '5411'
-5409 5411 0
c Var 'aux555' direct represents '18' with '5412'
5409 -5411 5412 0
-5412 5411 0
-5412 -5409 0
c Var 'aux555' order represents '19' with '5413'
-5411 5413 0
c Var 'aux555' direct represents '19' with '5414'
5411 -5413 5414 0
-5414 5413 0
-5414 -5411 0
c Var 'aux555' order represents '20' with '5415'
-5413 5415 0
c Var 'aux555' direct represents '20' with '5416'
5413 -5415 5416 0
-5416 5415 0
-5416 -5413 0
c Var 'aux555' order represents '21' with '5417'
-5415 5417 0
c Var 'aux555' direct represents '21' with '5418'
5415 -5417 5418 0
-5418 5417 0
-5418 -5415 0
c Var 'aux555' order represents '22' with '5419'
-5417 5419 0
c Var 'aux555' direct represents '22' with '5420'
5417 -5419 5420 0
-5420 5419 0
-5420 -5417 0
c Var 'aux555' order represents '23' with '5421'
-5419 5421 0
c Var 'aux555' direct represents '23' with '5422'
5419 -5421 5422 0
-5422 5421 0
-5422 -5419 0
c Var 'aux555' direct represents '24' with '-5421'
5376 5378 5380 5382 5384 5386 5388 5390 5392 5394 5396 5398 5400 5402 5404 5406 5408 5410 5412 5414 5416 5418 5420 5422 -5421 0
c Encoding variable: aux556 with domain: int(0..32) (representing constraint (aux551 + aux553))
c Both direct and order encoding.
c Var 'aux556' order represents '0' with '5423'
c Var 'aux556' direct represents '0' with '5423'
c Var 'aux556' order represents '1' with '5424'
-5423 5424 0
c Var 'aux556' direct represents '1' with '5425'
5423 -5424 5425 0
-5425 5424 0
-5425 -5423 0
c Var 'aux556' order represents '2' with '5426'
-5424 5426 0
c Var 'aux556' direct represents '2' with '5427'
5424 -5426 5427 0
-5427 5426 0
-5427 -5424 0
c Var 'aux556' order represents '3' with '5428'
-5426 5428 0
c Var 'aux556' direct represents '3' with '5429'
5426 -5428 5429 0
-5429 5428 0
-5429 -5426 0
c Var 'aux556' order represents '4' with '5430'
-5428 5430 0
c Var 'aux556' direct represents '4' with '5431'
5428 -5430 5431 0
-5431 5430 0
-5431 -5428 0
c Var 'aux556' order represents '5' with '5432'
-5430 5432 0
c Var 'aux556' direct represents '5' with '5433'
5430 -5432 5433 0
-5433 5432 0
-5433 -5430 0
c Var 'aux556' order represents '6' with '5434'
-5432 5434 0
c Var 'aux556' direct represents '6' with '5435'
5432 -5434 5435 0
-5435 5434 0
-5435 -5432 0
c Var 'aux556' order represents '7' with '5436'
-5434 5436 0
c Var 'aux556' direct represents '7' with '5437'
5434 -5436 5437 0
-5437 5436 0
-5437 -5434 0
c Var 'aux556' order represents '8' with '5438'
-5436 5438 0
c Var 'aux556' direct represents '8' with '5439'
5436 -5438 5439 0
-5439 5438 0
-5439 -5436 0
c Var 'aux556' order represents '9' with '5440'
-5438 5440 0
c Var 'aux556' direct represents '9' with '5441'
5438 -5440 5441 0
-5441 5440 0
-5441 -5438 0
c Var 'aux556' order represents '10' with '5442'
-5440 5442 0
c Var 'aux556' direct represents '10' with '5443'
5440 -5442 5443 0
-5443 5442 0
-5443 -5440 0
c Var 'aux556' order represents '11' with '5444'
-5442 5444 0
c Var 'aux556' direct represents '11' with '5445'
5442 -5444 5445 0
-5445 5444 0
-5445 -5442 0
c Var 'aux556' order represents '12' with '5446'
-5444 5446 0
c Var 'aux556' direct represents '12' with '5447'
5444 -5446 5447 0
-5447 5446 0
-5447 -5444 0
c Var 'aux556' order represents '13' with '5448'
-5446 5448 0
c Var 'aux556' direct represents '13' with '5449'
5446 -5448 5449 0
-5449 5448 0
-5449 -5446 0
c Var 'aux556' order represents '14' with '5450'
-5448 5450 0
c Var 'aux556' direct represents '14' with '5451'
5448 -5450 5451 0
-5451 5450 0
-5451 -5448 0
c Var 'aux556' order represents '15' with '5452'
-5450 5452 0
c Var 'aux556' direct represents '15' with '5453'
5450 -5452 5453 0
-5453 5452 0
-5453 -5450 0
c Var 'aux556' order represents '16' with '5454'
-5452 5454 0
c Var 'aux556' direct represents '16' with '5455'
5452 -5454 5455 0
-5455 5454 0
-5455 -5452 0
c Var 'aux556' order represents '17' with '5456'
-5454 5456 0
c Var 'aux556' direct represents '17' with '5457'
5454 -5456 5457 0
-5457 5456 0
-5457 -5454 0
c Var 'aux556' order represents '18' with '5458'
-5456 5458 0
c Var 'aux556' direct represents '18' with '5459'
5456 -5458 5459 0
-5459 5458 0
-5459 -5456 0
c Var 'aux556' order represents '19' with '5460'
-5458 5460 0
c Var 'aux556' direct represents '19' with '5461'
5458 -5460 5461 0
-5461 5460 0
-5461 -5458 0
c Var 'aux556' order represents '20' with '5462'
-5460 5462 0
c Var 'aux556' direct represents '20' with '5463'
5460 -5462 5463 0
-5463 5462 0
-5463 -5460 0
c Var 'aux556' order represents '21' with '5464'
-5462 5464 0
c Var 'aux556' direct represents '21' with '5465'
5462 -5464 5465 0
-5465 5464 0
-5465 -5462 0
c Var 'aux556' order represents '22' with '5466'
-5464 5466 0
c Var 'aux556' direct represents '22' with '5467'
5464 -5466 5467 0
-5467 5466 0
-5467 -5464 0
c Var 'aux556' order represents '23' with '5468'
-5466 5468 0
c Var 'aux556' direct represents '23' with '5469'
5466 -5468 5469 0
-5469 5468 0
-5469 -5466 0
c Var 'aux556' order represents '24' with '5470'
-5468 5470 0
c Var 'aux556' direct represents '24' with '5471'
5468 -5470 5471 0
-5471 5470 0
-5471 -5468 0
c Var 'aux556' order represents '25' with '5472'
-5470 5472 0
c Var 'aux556' direct represents '25' with '5473'
5470 -5472 5473 0
-5473 5472 0
-5473 -5470 0
c Var 'aux556' order represents '26' with '5474'
-5472 5474 0
c Var 'aux556' direct represents '26' with '5475'
5472 -5474 5475 0
-5475 5474 0
-5475 -5472 0
c Var 'aux556' order represents '27' with '5476'
-5474 5476 0
c Var 'aux556' direct represents '27' with '5477'
5474 -5476 5477 0
-5477 5476 0
-5477 -5474 0
c Var 'aux556' order represents '28' with '5478'
-5476 5478 0
c Var 'aux556' direct represents '28' with '5479'
5476 -5478 5479 0
-5479 5478 0
-5479 -5476 0
c Var 'aux556' order represents '29' with '5480'
-5478 5480 0
c Var 'aux556' direct represents '29' with '5481'
5478 -5480 5481 0
-5481 5480 0
-5481 -5478 0
c Var 'aux556' order represents '30' with '5482'
-5480 5482 0
c Var 'aux556' direct represents '30' with '5483'
5480 -5482 5483 0
-5483 5482 0
-5483 -5480 0
c Var 'aux556' order represents '31' with '5484'
-5482 5484 0
c Var 'aux556' direct represents '31' with '5485'
5482 -5484 5485 0
-5485 5484 0
-5485 -5482 0
c Var 'aux556' direct represents '32' with '-5484'
5423 5425 5427 5429 5431 5433 5435 5437 5439 5441 5443 5445 5447 5449 5451 5453 5455 5457 5459 5461 5463 5465 5467 5469 5471 5473 5475 5477 5479 5481 5483 5485 -5484 0
c Encoding variable: aux557 with domain: int(0..16) (representing constraint (shift(x_00007_00001, -1) + shift(x_00007_00009, -1)))
c Both direct and order encoding.
c Var 'aux557' order represents '0' with '5486'
c Var 'aux557' direct represents '0' with '5486'
c Var 'aux557' order represents '1' with '5487'
-5486 5487 0
c Var 'aux557' direct represents '1' with '5488'
5486 -5487 5488 0
-5488 5487 0
-5488 -5486 0
c Var 'aux557' order represents '2' with '5489'
-5487 5489 0
c Var 'aux557' direct represents '2' with '5490'
5487 -5489 5490 0
-5490 5489 0
-5490 -5487 0
c Var 'aux557' order represents '3' with '5491'
-5489 5491 0
c Var 'aux557' direct represents '3' with '5492'
5489 -5491 5492 0
-5492 5491 0
-5492 -5489 0
c Var 'aux557' order represents '4' with '5493'
-5491 5493 0
c Var 'aux557' direct represents '4' with '5494'
5491 -5493 5494 0
-5494 5493 0
-5494 -5491 0
c Var 'aux557' order represents '5' with '5495'
-5493 5495 0
c Var 'aux557' direct represents '5' with '5496'
5493 -5495 5496 0
-5496 5495 0
-5496 -5493 0
c Var 'aux557' order represents '6' with '5497'
-5495 5497 0
c Var 'aux557' direct represents '6' with '5498'
5495 -5497 5498 0
-5498 5497 0
-5498 -5495 0
c Var 'aux557' order represents '7' with '5499'
-5497 5499 0
c Var 'aux557' direct represents '7' with '5500'
5497 -5499 5500 0
-5500 5499 0
-5500 -5497 0
c Var 'aux557' order represents '8' with '5501'
-5499 5501 0
c Var 'aux557' direct represents '8' with '5502'
5499 -5501 5502 0
-5502 5501 0
-5502 -5499 0
c Var 'aux557' order represents '9' with '5503'
-5501 5503 0
c Var 'aux557' direct represents '9' with '5504'
5501 -5503 5504 0
-5504 5503 0
-5504 -5501 0
c Var 'aux557' order represents '10' with '5505'
-5503 5505 0
c Var 'aux557' direct represents '10' with '5506'
5503 -5505 5506 0
-5506 5505 0
-5506 -5503 0
c Var 'aux557' order represents '11' with '5507'
-5505 5507 0
c Var 'aux557' direct represents '11' with '5508'
5505 -5507 5508 0
-5508 5507 0
-5508 -5505 0
c Var 'aux557' order represents '12' with '5509'
-5507 5509 0
c Var 'aux557' direct represents '12' with '5510'
5507 -5509 5510 0
-5510 5509 0
-5510 -5507 0
c Var 'aux557' order represents '13' with '5511'
-5509 5511 0
c Var 'aux557' direct represents '13' with '5512'
5509 -5511 5512 0
-5512 5511 0
-5512 -5509 0
c Var 'aux557' order represents '14' with '5513'
-5511 5513 0
c Var 'aux557' direct represents '14' with '5514'
5511 -5513 5514 0
-5514 5513 0
-5514 -5511 0
c Var 'aux557' order represents '15' with '5515'
-5513 5515 0
c Var 'aux557' direct represents '15' with '5516'
5513 -5515 5516 0
-5516 5515 0
-5516 -5513 0
c Var 'aux557' direct represents '16' with '-5515'
5486 5488 5490 5492 5494 5496 5498 5500 5502 5504 5506 5508 5510 5512 5514 5516 -5515 0
c Encoding variable: aux558 with domain: int(0..16) (representing constraint (shift(x_00007_00008, -1) + shift(x_00007_00002, -1)))
c Both direct and order encoding.
c Var 'aux558' order represents '0' with '5517'
c Var 'aux558' direct represents '0' with '5517'
c Var 'aux558' order represents '1' with '5518'
-5517 5518 0
c Var 'aux558' direct represents '1' with '5519'
5517 -5518 5519 0
-5519 5518 0
-5519 -5517 0
c Var 'aux558' order represents '2' with '5520'
-5518 5520 0
c Var 'aux558' direct represents '2' with '5521'
5518 -5520 5521 0
-5521 5520 0
-5521 -5518 0
c Var 'aux558' order represents '3' with '5522'
-5520 5522 0
c Var 'aux558' direct represents '3' with '5523'
5520 -5522 5523 0
-5523 5522 0
-5523 -5520 0
c Var 'aux558' order represents '4' with '5524'
-5522 5524 0
c Var 'aux558' direct represents '4' with '5525'
5522 -5524 5525 0
-5525 5524 0
-5525 -5522 0
c Var 'aux558' order represents '5' with '5526'
-5524 5526 0
c Var 'aux558' direct represents '5' with '5527'
5524 -5526 5527 0
-5527 5526 0
-5527 -5524 0
c Var 'aux558' order represents '6' with '5528'
-5526 5528 0
c Var 'aux558' direct represents '6' with '5529'
5526 -5528 5529 0
-5529 5528 0
-5529 -5526 0
c Var 'aux558' order represents '7' with '5530'
-5528 5530 0
c Var 'aux558' direct represents '7' with '5531'
5528 -5530 5531 0
-5531 5530 0
-5531 -5528 0
c Var 'aux558' order represents '8' with '5532'
-5530 5532 0
c Var 'aux558' direct represents '8' with '5533'
5530 -5532 5533 0
-5533 5532 0
-5533 -5530 0
c Var 'aux558' order represents '9' with '5534'
-5532 5534 0
c Var 'aux558' direct represents '9' with '5535'
5532 -5534 5535 0
-5535 5534 0
-5535 -5532 0
c Var 'aux558' order represents '10' with '5536'
-5534 5536 0
c Var 'aux558' direct represents '10' with '5537'
5534 -5536 5537 0
-5537 5536 0
-5537 -5534 0
c Var 'aux558' order represents '11' with '5538'
-5536 5538 0
c Var 'aux558' direct represents '11' with '5539'
5536 -5538 5539 0
-5539 5538 0
-5539 -5536 0
c Var 'aux558' order represents '12' with '5540'
-5538 5540 0
c Var 'aux558' direct represents '12' with '5541'
5538 -5540 5541 0
-5541 5540 0
-5541 -5538 0
c Var 'aux558' order represents '13' with '5542'
-5540 5542 0
c Var 'aux558' direct represents '13' with '5543'
5540 -5542 5543 0
-5543 5542 0
-5543 -5540 0
c Var 'aux558' order represents '14' with '5544'
-5542 5544 0
c Var 'aux558' direct represents '14' with '5545'
5542 -5544 5545 0
-5545 5544 0
-5545 -5542 0
c Var 'aux558' order represents '15' with '5546'
-5544 5546 0
c Var 'aux558' direct represents '15' with '5547'
5544 -5546 5547 0
-5547 5546 0
-5547 -5544 0
c Var 'aux558' direct represents '16' with '-5546'
5517 5519 5521 5523 5525 5527 5529 5531 5533 5535 5537 5539 5541 5543 5545 5547 -5546 0
c Encoding variable: aux559 with domain: int(0..16) (representing constraint (shift(x_00007_00007, -1) + shift(x_00007_00004, -1)))
c Both direct and order encoding.
c Var 'aux559' order represents '0' with '5548'
c Var 'aux559' direct represents '0' with '5548'
c Var 'aux559' order represents '1' with '5549'
-5548 5549 0
c Var 'aux559' direct represents '1' with '5550'
5548 -5549 5550 0
-5550 5549 0
-5550 -5548 0
c Var 'aux559' order represents '2' with '5551'
-5549 5551 0
c Var 'aux559' direct represents '2' with '5552'
5549 -5551 5552 0
-5552 5551 0
-5552 -5549 0
c Var 'aux559' order represents '3' with '5553'
-5551 5553 0
c Var 'aux559' direct represents '3' with '5554'
5551 -5553 5554 0
-5554 5553 0
-5554 -5551 0
c Var 'aux559' order represents '4' with '5555'
-5553 5555 0
c Var 'aux559' direct represents '4' with '5556'
5553 -5555 5556 0
-5556 5555 0
-5556 -5553 0
c Var 'aux559' order represents '5' with '5557'
-5555 5557 0
c Var 'aux559' direct represents '5' with '5558'
5555 -5557 5558 0
-5558 5557 0
-5558 -5555 0
c Var 'aux559' order represents '6' with '5559'
-5557 5559 0
c Var 'aux559' direct represents '6' with '5560'
5557 -5559 5560 0
-5560 5559 0
-5560 -5557 0
c Var 'aux559' order represents '7' with '5561'
-5559 5561 0
c Var 'aux559' direct represents '7' with '5562'
5559 -5561 5562 0
-5562 5561 0
-5562 -5559 0
c Var 'aux559' order represents '8' with '5563'
-5561 5563 0
c Var 'aux559' direct represents '8' with '5564'
5561 -5563 5564 0
-5564 5563 0
-5564 -5561 0
c Var 'aux559' order represents '9' with '5565'
-5563 5565 0
c Var 'aux559' direct represents '9' with '5566'
5563 -5565 5566 0
-5566 5565 0
-5566 -5563 0
c Var 'aux559' order represents '10' with '5567'
-5565 5567 0
c Var 'aux559' direct represents '10' with '5568'
5565 -5567 5568 0
-5568 5567 0
-5568 -5565 0
c Var 'aux559' order represents '11' with '5569'
-5567 5569 0
c Var 'aux559' direct represents '11' with '5570'
5567 -5569 5570 0
-5570 5569 0
-5570 -5567 0
c Var 'aux559' order represents '12' with '5571'
-5569 5571 0
c Var 'aux559' direct represents '12' with '5572'
5569 -5571 5572 0
-5572 5571 0
-5572 -5569 0
c Var 'aux559' order represents '13' with '5573'
-5571 5573 0
c Var 'aux559' direct represents '13' with '5574'
5571 -5573 5574 0
-5574 5573 0
-5574 -5571 0
c Var 'aux559' order represents '14' with '5575'
-5573 5575 0
c Var 'aux559' direct represents '14' with '5576'
5573 -5575 5576 0
-5576 5575 0
-5576 -5573 0
c Var 'aux559' order represents '15' with '5577'
-5575 5577 0
c Var 'aux559' direct represents '15' with '5578'
5575 -5577 5578 0
-5578 5577 0
-5578 -5575 0
c Var 'aux559' direct represents '16' with '-5577'
5548 5550 5552 5554 5556 5558 5560 5562 5564 5566 5568 5570 5572 5574 5576 5578 -5577 0
c Encoding variable: aux560 with domain: int(0..16) (representing constraint (shift(x_00007_00006, -1) + shift(x_00007_00005, -1)))
c Both direct and order encoding.
c Var 'aux560' order represents '0' with '5579'
c Var 'aux560' direct represents '0' with '5579'
c Var 'aux560' order represents '1' with '5580'
-5579 5580 0
c Var 'aux560' direct represents '1' with '5581'
5579 -5580 5581 0
-5581 5580 0
-5581 -5579 0
c Var 'aux560' order represents '2' with '5582'
-5580 5582 0
c Var 'aux560' direct represents '2' with '5583'
5580 -5582 5583 0
-5583 5582 0
-5583 -5580 0
c Var 'aux560' order represents '3' with '5584'
-5582 5584 0
c Var 'aux560' direct represents '3' with '5585'
5582 -5584 5585 0
-5585 5584 0
-5585 -5582 0
c Var 'aux560' order represents '4' with '5586'
-5584 5586 0
c Var 'aux560' direct represents '4' with '5587'
5584 -5586 5587 0
-5587 5586 0
-5587 -5584 0
c Var 'aux560' order represents '5' with '5588'
-5586 5588 0
c Var 'aux560' direct represents '5' with '5589'
5586 -5588 5589 0
-5589 5588 0
-5589 -5586 0
c Var 'aux560' order represents '6' with '5590'
-5588 5590 0
c Var 'aux560' direct represents '6' with '5591'
5588 -5590 5591 0
-5591 5590 0
-5591 -5588 0
c Var 'aux560' order represents '7' with '5592'
-5590 5592 0
c Var 'aux560' direct represents '7' with '5593'
5590 -5592 5593 0
-5593 5592 0
-5593 -5590 0
c Var 'aux560' order represents '8' with '5594'
-5592 5594 0
c Var 'aux560' direct represents '8' with '5595'
5592 -5594 5595 0
-5595 5594 0
-5595 -5592 0
c Var 'aux560' order represents '9' with '5596'
-5594 5596 0
c Var 'aux560' direct represents '9' with '5597'
5594 -5596 5597 0
-5597 5596 0
-5597 -5594 0
c Var 'aux560' order represents '10' with '5598'
-5596 5598 0
c Var 'aux560' direct represents '10' with '5599'
5596 -5598 5599 0
-5599 5598 0
-5599 -5596 0
c Var 'aux560' order represents '11' with '5600'
-5598 5600 0
c Var 'aux560' direct represents '11' with '5601'
5598 -5600 5601 0
-5601 5600 0
-5601 -5598 0
c Var 'aux560' order represents '12' with '5602'
-5600 5602 0
c Var 'aux560' direct represents '12' with '5603'
5600 -5602 5603 0
-5603 5602 0
-5603 -5600 0
c Var 'aux560' order represents '13' with '5604'
-5602 5604 0
c Var 'aux560' direct represents '13' with '5605'
5602 -5604 5605 0
-5605 5604 0
-5605 -5602 0
c Var 'aux560' order represents '14' with '5606'
-5604 5606 0
c Var 'aux560' direct represents '14' with '5607'
5604 -5606 5607 0
-5607 5606 0
-5607 -5604 0
c Var 'aux560' order represents '15' with '5608'
-5606 5608 0
c Var 'aux560' direct represents '15' with '5609'
5606 -5608 5609 0
-5609 5608 0
-5609 -5606 0
c Var 'aux560' direct represents '16' with '-5608'
5579 5581 5583 5585 5587 5589 5591 5593 5595 5597 5599 5601 5603 5605 5607 5609 -5608 0
c Encoding variable: aux561 with domain: int(0..24) (representing constraint (shift(x_00007_00003, -1) + aux560))
c Both direct and order encoding.
c Var 'aux561' order represents '0' with '5610'
c Var 'aux561' direct represents '0' with '5610'
c Var 'aux561' order represents '1' with '5611'
-5610 5611 0
c Var 'aux561' direct represents '1' with '5612'
5610 -5611 5612 0
-5612 5611 0
-5612 -5610 0
c Var 'aux561' order represents '2' with '5613'
-5611 5613 0
c Var 'aux561' direct represents '2' with '5614'
5611 -5613 5614 0
-5614 5613 0
-5614 -5611 0
c Var 'aux561' order represents '3' with '5615'
-5613 5615 0
c Var 'aux561' direct represents '3' with '5616'
5613 -5615 5616 0
-5616 5615 0
-5616 -5613 0
c Var 'aux561' order represents '4' with '5617'
-5615 5617 0
c Var 'aux561' direct represents '4' with '5618'
5615 -5617 5618 0
-5618 5617 0
-5618 -5615 0
c Var 'aux561' order represents '5' with '5619'
-5617 5619 0
c Var 'aux561' direct represents '5' with '5620'
5617 -5619 5620 0
-5620 5619 0
-5620 -5617 0
c Var 'aux561' order represents '6' with '5621'
-5619 5621 0
c Var 'aux561' direct represents '6' with '5622'
5619 -5621 5622 0
-5622 5621 0
-5622 -5619 0
c Var 'aux561' order represents '7' with '5623'
-5621 5623 0
c Var 'aux561' direct represents '7' with '5624'
5621 -5623 5624 0
-5624 5623 0
-5624 -5621 0
c Var 'aux561' order represents '8' with '5625'
-5623 5625 0
c Var 'aux561' direct represents '8' with '5626'
5623 -5625 5626 0
-5626 5625 0
-5626 -5623 0
c Var 'aux561' order represents '9' with '5627'
-5625 5627 0
c Var 'aux561' direct represents '9' with '5628'
5625 -5627 5628 0
-5628 5627 0
-5628 -5625 0
c Var 'aux561' order represents '10' with '5629'
-5627 5629 0
c Var 'aux561' direct represents '10' with '5630'
5627 -5629 5630 0
-5630 5629 0
-5630 -5627 0
c Var 'aux561' order represents '11' with '5631'
-5629 5631 0
c Var 'aux561' direct represents '11' with '5632'
5629 -5631 5632 0
-5632 5631 0
-5632 -5629 0
c Var 'aux561' order represents '12' with '5633'
-5631 5633 0
c Var 'aux561' direct represents '12' with '5634'
5631 -5633 5634 0
-5634 5633 0
-5634 -5631 0
c Var 'aux561' order represents '13' with '5635'
-5633 5635 0
c Var 'aux561' direct represents '13' with '5636'
5633 -5635 5636 0
-5636 5635 0
-5636 -5633 0
c Var 'aux561' order represents '14' with '5637'
-5635 5637 0
c Var 'aux561' direct represents '14' with '5638'
5635 -5637 5638 0
-5638 5637 0
-5638 -5635 0
c Var 'aux561' order represents '15' with '5639'
-5637 5639 0
c Var 'aux561' direct represents '15' with '5640'
5637 -5639 5640 0
-5640 5639 0
-5640 -5637 0
c Var 'aux561' order represents '16' with '5641'
-5639 5641 0
c Var 'aux561' direct represents '16' with '5642'
5639 -5641 5642 0
-5642 5641 0
-5642 -5639 0
c Var 'aux561' order represents '17' with '5643'
-5641 5643 0
c Var 'aux561' direct represents '17' with '5644'
5641 -5643 5644 0
-5644 5643 0
-5644 -5641 0
c Var 'aux561' order represents '18' with '5645'
-5643 5645 0
c Var 'aux561' direct represents '18' with '5646'
5643 -5645 5646 0
-5646 5645 0
-5646 -5643 0
c Var 'aux561' order represents '19' with '5647'
-5645 5647 0
c Var 'aux561' direct represents '19' with '5648'
5645 -5647 5648 0
-5648 5647 0
-5648 -5645 0
c Var 'aux561' order represents '20' with '5649'
-5647 5649 0
c Var 'aux561' direct represents '20' with '5650'
5647 -5649 5650 0
-5650 5649 0
-5650 -5647 0
c Var 'aux561' order represents '21' with '5651'
-5649 5651 0
c Var 'aux561' direct represents '21' with '5652'
5649 -5651 5652 0
-5652 5651 0
-5652 -5649 0
c Var 'aux561' order represents '22' with '5653'
-5651 5653 0
c Var 'aux561' direct represents '22' with '5654'
5651 -5653 5654 0
-5654 5653 0
-5654 -5651 0
c Var 'aux561' order represents '23' with '5655'
-5653 5655 0
c Var 'aux561' direct represents '23' with '5656'
5653 -5655 5656 0
-5656 5655 0
-5656 -5653 0
c Var 'aux561' direct represents '24' with '-5655'
5610 5612 5614 5616 5618 5620 5622 5624 5626 5628 5630 5632 5634 5636 5638 5640 5642 5644 5646 5648 5650 5652 5654 5656 -5655 0
c Encoding variable: aux562 with domain: int(0..32) (representing constraint (aux557 + aux559))
c Both direct and order encoding.
c Var 'aux562' order represents '0' with '5657'
c Var 'aux562' direct represents '0' with '5657'
c Var 'aux562' order represents '1' with '5658'
-5657 5658 0
c Var 'aux562' direct represents '1' with '5659'
5657 -5658 5659 0
-5659 5658 0
-5659 -5657 0
c Var 'aux562' order represents '2' with '5660'
-5658 5660 0
c Var 'aux562' direct represents '2' with '5661'
5658 -5660 5661 0
-5661 5660 0
-5661 -5658 0
c Var 'aux562' order represents '3' with '5662'
-5660 5662 0
c Var 'aux562' direct represents '3' with '5663'
5660 -5662 5663 0
-5663 5662 0
-5663 -5660 0
c Var 'aux562' order represents '4' with '5664'
-5662 5664 0
c Var 'aux562' direct represents '4' with '5665'
5662 -5664 5665 0
-5665 5664 0
-5665 -5662 0
c Var 'aux562' order represents '5' with '5666'
-5664 5666 0
c Var 'aux562' direct represents '5' with '5667'
5664 -5666 5667 0
-5667 5666 0
-5667 -5664 0
c Var 'aux562' order represents '6' with '5668'
-5666 5668 0
c Var 'aux562' direct represents '6' with '5669'
5666 -5668 5669 0
-5669 5668 0
-5669 -5666 0
c Var 'aux562' order represents '7' with '5670'
-5668 5670 0
c Var 'aux562' direct represents '7' with '5671'
5668 -5670 5671 0
-5671 5670 0
-5671 -5668 0
c Var 'aux562' order represents '8' with '5672'
-5670 5672 0
c Var 'aux562' direct represents '8' with '5673'
5670 -5672 5673 0
-5673 5672 0
-5673 -5670 0
c Var 'aux562' order represents '9' with '5674'
-5672 5674 0
c Var 'aux562' direct represents '9' with '5675'
5672 -5674 5675 0
-5675 5674 0
-5675 -5672 0
c Var 'aux562' order represents '10' with '5676'
-5674 5676 0
c Var 'aux562' direct represents '10' with '5677'
5674 -5676 5677 0
-5677 5676 0
-5677 -5674 0
c Var 'aux562' order represents '11' with '5678'
-5676 5678 0
c Var 'aux562' direct represents '11' with '5679'
5676 -5678 5679 0
-5679 5678 0
-5679 -5676 0
c Var 'aux562' order represents '12' with '5680'
-5678 5680 0
c Var 'aux562' direct represents '12' with '5681'
5678 -5680 5681 0
-5681 5680 0
-5681 -5678 0
c Var 'aux562' order represents '13' with '5682'
-5680 5682 0
c Var 'aux562' direct represents '13' with '5683'
5680 -5682 5683 0
-5683 5682 0
-5683 -5680 0
c Var 'aux562' order represents '14' with '5684'
-5682 5684 0
c Var 'aux562' direct represents '14' with '5685'
5682 -5684 5685 0
-5685 5684 0
-5685 -5682 0
c Var 'aux562' order represents '15' with '5686'
-5684 5686 0
c Var 'aux562' direct represents '15' with '5687'
5684 -5686 5687 0
-5687 5686 0
-5687 -5684 0
c Var 'aux562' order represents '16' with '5688'
-5686 5688 0
c Var 'aux562' direct represents '16' with '5689'
5686 -5688 5689 0
-5689 5688 0
-5689 -5686 0
c Var 'aux562' order represents '17' with '5690'
-5688 5690 0
c Var 'aux562' direct represents '17' with '5691'
5688 -5690 5691 0
-5691 5690 0
-5691 -5688 0
c Var 'aux562' order represents '18' with '5692'
-5690 5692 0
c Var 'aux562' direct represents '18' with '5693'
5690 -5692 5693 0
-5693 5692 0
-5693 -5690 0
c Var 'aux562' order represents '19' with '5694'
-5692 5694 0
c Var 'aux562' direct represents '19' with '5695'
5692 -5694 5695 0
-5695 5694 0
-5695 -5692 0
c Var 'aux562' order represents '20' with '5696'
-5694 5696 0
c Var 'aux562' direct represents '20' with '5697'
5694 -5696 5697 0
-5697 5696 0
-5697 -5694 0
c Var 'aux562' order represents '21' with '5698'
-5696 5698 0
c Var 'aux562' direct represents '21' with '5699'
5696 -5698 5699 0
-5699 5698 0
-5699 -5696 0
c Var 'aux562' order represents '22' with '5700'
-5698 5700 0
c Var 'aux562' direct represents '22' with '5701'
5698 -5700 5701 0
-5701 5700 0
-5701 -5698 0
c Var 'aux562' order represents '23' with '5702'
-5700 5702 0
c Var 'aux562' direct represents '23' with '5703'
5700 -5702 5703 0
-5703 5702 0
-5703 -5700 0
c Var 'aux562' order represents '24' with '5704'
-5702 5704 0
c Var 'aux562' direct represents '24' with '5705'
5702 -5704 5705 0
-5705 5704 0
-5705 -5702 0
c Var 'aux562' order represents '25' with '5706'
-5704 5706 0
c Var 'aux562' direct represents '25' with '5707'
5704 -5706 5707 0
-5707 5706 0
-5707 -5704 0
c Var 'aux562' order represents '26' with '5708'
-5706 5708 0
c Var 'aux562' direct represents '26' with '5709'
5706 -5708 5709 0
-5709 5708 0
-5709 -5706 0
c Var 'aux562' order represents '27' with '5710'
-5708 5710 0
c Var 'aux562' direct represents '27' with '5711'
5708 -5710 5711 0
-5711 5710 0
-5711 -5708 0
c Var 'aux562' order represents '28' with '5712'
-5710 5712 0
c Var 'aux562' direct represents '28' with '5713'
5710 -5712 5713 0
-5713 5712 0
-5713 -5710 0
c Var 'aux562' order represents '29' with '5714'
-5712 5714 0
c Var 'aux562' direct represents '29' with '5715'
5712 -5714 5715 0
-5715 5714 0
-5715 -5712 0
c Var 'aux562' order represents '30' with '5716'
-5714 5716 0
c Var 'aux562' direct represents '30' with '5717'
5714 -5716 5717 0
-5717 5716 0
-5717 -5714 0
c Var 'aux562' order represents '31' with '5718'
-5716 5718 0
c Var 'aux562' direct represents '31' with '5719'
5716 -5718 5719 0
-5719 5718 0
-5719 -5716 0
c Var 'aux562' direct represents '32' with '-5718'
5657 5659 5661 5663 5665 5667 5669 5671 5673 5675 5677 5679 5681 5683 5685 5687 5689 5691 5693 5695 5697 5699 5701 5703 5705 5707 5709 5711 5713 5715 5717 5719 -5718 0
c Encoding variable: aux563 with domain: int(0..16) (representing constraint (shift(x_00008_00001, -1) + shift(x_00008_00009, -1)))
c Both direct and order encoding.
c Var 'aux563' order represents '0' with '5720'
c Var 'aux563' direct represents '0' with '5720'
c Var 'aux563' order represents '1' with '5721'
-5720 5721 0
c Var 'aux563' direct represents '1' with '5722'
5720 -5721 5722 0
-5722 5721 0
-5722 -5720 0
c Var 'aux563' order represents '2' with '5723'
-5721 5723 0
c Var 'aux563' direct represents '2' with '5724'
5721 -5723 5724 0
-5724 5723 0
-5724 -5721 0
c Var 'aux563' order represents '3' with '5725'
-5723 5725 0
c Var 'aux563' direct represents '3' with '5726'
5723 -5725 5726 0
-5726 5725 0
-5726 -5723 0
c Var 'aux563' order represents '4' with '5727'
-5725 5727 0
c Var 'aux563' direct represents '4' with '5728'
5725 -5727 5728 0
-5728 5727 0
-5728 -5725 0
c Var 'aux563' order represents '5' with '5729'
-5727 5729 0
c Var 'aux563' direct represents '5' with '5730'
5727 -5729 5730 0
-5730 5729 0
-5730 -5727 0
c Var 'aux563' order represents '6' with '5731'
-5729 5731 0
c Var 'aux563' direct represents '6' with '5732'
5729 -5731 5732 0
-5732 5731 0
-5732 -5729 0
c Var 'aux563' order represents '7' with '5733'
-5731 5733 0
c Var 'aux563' direct represents '7' with '5734'
5731 -5733 5734 0
-5734 5733 0
-5734 -5731 0
c Var 'aux563' order represents '8' with '5735'
-5733 5735 0
c Var 'aux563' direct represents '8' with '5736'
5733 -5735 5736 0
-5736 5735 0
-5736 -5733 0
c Var 'aux563' order represents '9' with '5737'
-5735 5737 0
c Var 'aux563' direct represents '9' with '5738'
5735 -5737 5738 0
-5738 5737 0
-5738 -5735 0
c Var 'aux563' order represents '10' with '5739'
-5737 5739 0
c Var 'aux563' direct represents '10' with '5740'
5737 -5739 5740 0
-5740 5739 0
-5740 -5737 0
c Var 'aux563' order represents '11' with '5741'
-5739 5741 0
c Var 'aux563' direct represents '11' with '5742'
5739 -5741 5742 0
-5742 5741 0
-5742 -5739 0
c Var 'aux563' order represents '12' with '5743'
-5741 5743 0
c Var 'aux563' direct represents '12' with '5744'
5741 -5743 5744 0
-5744 5743 0
-5744 -5741 0
c Var 'aux563' order represents '13' with '5745'
-5743 5745 0
c Var 'aux563' direct represents '13' with '5746'
5743 -5745 5746 0
-5746 5745 0
-5746 -5743 0
c Var 'aux563' order represents '14' with '5747'
-5745 5747 0
c Var 'aux563' direct represents '14' with '5748'
5745 -5747 5748 0
-5748 5747 0
-5748 -5745 0
c Var 'aux563' order represents '15' with '5749'
-5747 5749 0
c Var 'aux563' direct represents '15' with '5750'
5747 -5749 5750 0
-5750 5749 0
-5750 -5747 0
c Var 'aux563' direct represents '16' with '-5749'
5720 5722 5724 5726 5728 5730 5732 5734 5736 5738 5740 5742 5744 5746 5748 5750 -5749 0
c Encoding variable: aux564 with domain: int(0..16) (representing constraint (shift(x_00008_00008, -1) + shift(x_00008_00002, -1)))
c Both direct and order encoding.
c Var 'aux564' order represents '0' with '5751'
c Var 'aux564' direct represents '0' with '5751'
c Var 'aux564' order represents '1' with '5752'
-5751 5752 0
c Var 'aux564' direct represents '1' with '5753'
5751 -5752 5753 0
-5753 5752 0
-5753 -5751 0
c Var 'aux564' order represents '2' with '5754'
-5752 5754 0
c Var 'aux564' direct represents '2' with '5755'
5752 -5754 5755 0
-5755 5754 0
-5755 -5752 0
c Var 'aux564' order represents '3' with '5756'
-5754 5756 0
c Var 'aux564' direct represents '3' with '5757'
5754 -5756 5757 0
-5757 5756 0
-5757 -5754 0
c Var 'aux564' order represents '4' with '5758'
-5756 5758 0
c Var 'aux564' direct represents '4' with '5759'
5756 -5758 5759 0
-5759 5758 0
-5759 -5756 0
c Var 'aux564' order represents '5' with '5760'
-5758 5760 0
c Var 'aux564' direct represents '5' with '5761'
5758 -5760 5761 0
-5761 5760 0
-5761 -5758 0
c Var 'aux564' order represents '6' with '5762'
-5760 5762 0
c Var 'aux564' direct represents '6' with '5763'
5760 -5762 5763 0
-5763 5762 0
-5763 -5760 0
c Var 'aux564' order represents '7' with '5764'
-5762 5764 0
c Var 'aux564' direct represents '7' with '5765'
5762 -5764 5765 0
-5765 5764 0
-5765 -5762 0
c Var 'aux564' order represents '8' with '5766'
-5764 5766 0
c Var 'aux564' direct represents '8' with '5767'
5764 -5766 5767 0
-5767 5766 0
-5767 -5764 0
c Var 'aux564' order represents '9' with '5768'
-5766 5768 0
c Var 'aux564' direct represents '9' with '5769'
5766 -5768 5769 0
-5769 5768 0
-5769 -5766 0
c Var 'aux564' order represents '10' with '5770'
-5768 5770 0
c Var 'aux564' direct represents '10' with '5771'
5768 -5770 5771 0
-5771 5770 0
-5771 -5768 0
c Var 'aux564' order represents '11' with '5772'
-5770 5772 0
c Var 'aux564' direct represents '11' with '5773'
5770 -5772 5773 0
-5773 5772 0
-5773 -5770 0
c Var 'aux564' order represents '12' with '5774'
-5772 5774 0
c Var 'aux564' direct represents '12' with '5775'
5772 -5774 5775 0
-5775 5774 0
-5775 -5772 0
c Var 'aux564' order represents '13' with '5776'
-5774 5776 0
c Var 'aux564' direct represents '13' with '5777'
5774 -5776 5777 0
-5777 5776 0
-5777 -5774 0
c Var 'aux564' order represents '14' with '5778'
-5776 5778 0
c Var 'aux564' direct represents '14' with '5779'
5776 -5778 5779 0
-5779 5778 0
-5779 -5776 0
c Var 'aux564' order represents '15' with '5780'
-5778 5780 0
c Var 'aux564' direct represents '15' with '5781'
5778 -5780 5781 0
-5781 5780 0
-5781 -5778 0
c Var 'aux564' direct represents '16' with '-5780'
5751 5753 5755 5757 5759 5761 5763 5765 5767 5769 5771 5773 5775 5777 5779 5781 -5780 0
c Encoding variable: aux565 with domain: int(0..16) (representing constraint (shift(x_00008_00007, -1) + shift(x_00008_00004, -1)))
c Both direct and order encoding.
c Var 'aux565' order represents '0' with '5782'
c Var 'aux565' direct represents '0' with '5782'
c Var 'aux565' order represents '1' with '5783'
-5782 5783 0
c Var 'aux565' direct represents '1' with '5784'
5782 -5783 5784 0
-5784 5783 0
-5784 -5782 0
c Var 'aux565' order represents '2' with '5785'
-5783 5785 0
c Var 'aux565' direct represents '2' with '5786'
5783 -5785 5786 0
-5786 5785 0
-5786 -5783 0
c Var 'aux565' order represents '3' with '5787'
-5785 5787 0
c Var 'aux565' direct represents '3' with '5788'
5785 -5787 5788 0
-5788 5787 0
-5788 -5785 0
c Var 'aux565' order represents '4' with '5789'
-5787 5789 0
c Var 'aux565' direct represents '4' with '5790'
5787 -5789 5790 0
-5790 5789 0
-5790 -5787 0
c Var 'aux565' order represents '5' with '5791'
-5789 5791 0
c Var 'aux565' direct represents '5' with '5792'
5789 -5791 5792 0
-5792 5791 0
-5792 -5789 0
c Var 'aux565' order represents '6' with '5793'
-5791 5793 0
c Var 'aux565' direct represents '6' with '5794'
5791 -5793 5794 0
-5794 5793 0
-5794 -5791 0
c Var 'aux565' order represents '7' with '5795'
-5793 5795 0
c Var 'aux565' direct represents '7' with '5796'
5793 -5795 5796 0
-5796 5795 0
-5796 -5793 0
c Var 'aux565' order represents '8' with '5797'
-5795 5797 0
c Var 'aux565' direct represents '8' with '5798'
5795 -5797 5798 0
-5798 5797 0
-5798 -5795 0
c Var 'aux565' order represents '9' with '5799'
-5797 5799 0
c Var 'aux565' direct represents '9' with '5800'
5797 -5799 5800 0
-5800 5799 0
-5800 -5797 0
c Var 'aux565' order represents '10' with '5801'
-5799 5801 0
c Var 'aux565' direct represents '10' with '5802'
5799 -5801 5802 0
-5802 5801 0
-5802 -5799 0
c Var 'aux565' order represents '11' with '5803'
-5801 5803 0
c Var 'aux565' direct represents '11' with '5804'
5801 -5803 5804 0
-5804 5803 0
-5804 -5801 0
c Var 'aux565' order represents '12' with '5805'
-5803 5805 0
c Var 'aux565' direct represents '12' with '5806'
5803 -5805 5806 0
-5806 5805 0
-5806 -5803 0
c Var 'aux565' order represents '13' with '5807'
-5805 5807 0
c Var 'aux565' direct represents '13' with '5808'
5805 -5807 5808 0
-5808 5807 0
-5808 -5805 0
c Var 'aux565' order represents '14' with '5809'
-5807 5809 0
c Var 'aux565' direct represents '14' with '5810'
5807 -5809 5810 0
-5810 5809 0
-5810 -5807 0
c Var 'aux565' order represents '15' with '5811'
-5809 5811 0
c Var 'aux565' direct represents '15' with '5812'
5809 -5811 5812 0
-5812 5811 0
-5812 -5809 0
c Var 'aux565' direct represents '16' with '-5811'
5782 5784 5786 5788 5790 5792 5794 5796 5798 5800 5802 5804 5806 5808 5810 5812 -5811 0
c Encoding variable: aux566 with domain: int(0..16) (representing constraint (shift(x_00008_00006, -1) + shift(x_00008_00005, -1)))
c Both direct and order encoding.
c Var 'aux566' order represents '0' with '5813'
c Var 'aux566' direct represents '0' with '5813'
c Var 'aux566' order represents '1' with '5814'
-5813 5814 0
c Var 'aux566' direct represents '1' with '5815'
5813 -5814 5815 0
-5815 5814 0
-5815 -5813 0
c Var 'aux566' order represents '2' with '5816'
-5814 5816 0
c Var 'aux566' direct represents '2' with '5817'
5814 -5816 5817 0
-5817 5816 0
-5817 -5814 0
c Var 'aux566' order represents '3' with '5818'
-5816 5818 0
c Var 'aux566' direct represents '3' with '5819'
5816 -5818 5819 0
-5819 5818 0
-5819 -5816 0
c Var 'aux566' order represents '4' with '5820'
-5818 5820 0
c Var 'aux566' direct represents '4' with '5821'
5818 -5820 5821 0
-5821 5820 0
-5821 -5818 0
c Var 'aux566' order represents '5' with '5822'
-5820 5822 0
c Var 'aux566' direct represents '5' with '5823'
5820 -5822 5823 0
-5823 5822 0
-5823 -5820 0
c Var 'aux566' order represents '6' with '5824'
-5822 5824 0
c Var 'aux566' direct represents '6' with '5825'
5822 -5824 5825 0
-5825 5824 0
-5825 -5822 0
c Var 'aux566' order represents '7' with '5826'
-5824 5826 0
c Var 'aux566' direct represents '7' with '5827'
5824 -5826 5827 0
-5827 5826 0
-5827 -5824 0
c Var 'aux566' order represents '8' with '5828'
-5826 5828 0
c Var 'aux566' direct represents '8' with '5829'
5826 -5828 5829 0
-5829 5828 0
-5829 -5826 0
c Var 'aux566' order represents '9' with '5830'
-5828 5830 0
c Var 'aux566' direct represents '9' with '5831'
5828 -5830 5831 0
-5831 5830 0
-5831 -5828 0
c Var 'aux566' order represents '10' with '5832'
-5830 5832 0
c Var 'aux566' direct represents '10' with '5833'
5830 -5832 5833 0
-5833 5832 0
-5833 -5830 0
c Var 'aux566' order represents '11' with '5834'
-5832 5834 0
c Var 'aux566' direct represents '11' with '5835'
5832 -5834 5835 0
-5835 5834 0
-5835 -5832 0
c Var 'aux566' order represents '12' with '5836'
-5834 5836 0
c Var 'aux566' direct represents '12' with '5837'
5834 -5836 5837 0
-5837 5836 0
-5837 -5834 0
c Var 'aux566' order represents '13' with '5838'
-5836 5838 0
c Var 'aux566' direct represents '13' with '5839'
5836 -5838 5839 0
-5839 5838 0
-5839 -5836 0
c Var 'aux566' order represents '14' with '5840'
-5838 5840 0
c Var 'aux566' direct represents '14' with '5841'
5838 -5840 5841 0
-5841 5840 0
-5841 -5838 0
c Var 'aux566' order represents '15' with '5842'
-5840 5842 0
c Var 'aux566' direct represents '15' with '5843'
5840 -5842 5843 0
-5843 5842 0
-5843 -5840 0
c Var 'aux566' direct represents '16' with '-5842'
5813 5815 5817 5819 5821 5823 5825 5827 5829 5831 5833 5835 5837 5839 5841 5843 -5842 0
c Encoding variable: aux567 with domain: int(0..24) (representing constraint (shift(x_00008_00003, -1) + aux566))
c Both direct and order encoding.
c Var 'aux567' order represents '0' with '5844'
c Var 'aux567' direct represents '0' with '5844'
c Var 'aux567' order represents '1' with '5845'
-5844 5845 0
c Var 'aux567' direct represents '1' with '5846'
5844 -5845 5846 0
-5846 5845 0
-5846 -5844 0
c Var 'aux567' order represents '2' with '5847'
-5845 5847 0
c Var 'aux567' direct represents '2' with '5848'
5845 -5847 5848 0
-5848 5847 0
-5848 -5845 0
c Var 'aux567' order represents '3' with '5849'
-5847 5849 0
c Var 'aux567' direct represents '3' with '5850'
5847 -5849 5850 0
-5850 5849 0
-5850 -5847 0
c Var 'aux567' order represents '4' with '5851'
-5849 5851 0
c Var 'aux567' direct represents '4' with '5852'
5849 -5851 5852 0
-5852 5851 0
-5852 -5849 0
c Var 'aux567' order represents '5' with '5853'
-5851 5853 0
c Var 'aux567' direct represents '5' with '5854'
5851 -5853 5854 0
-5854 5853 0
-5854 -5851 0
c Var 'aux567' order represents '6' with '5855'
-5853 5855 0
c Var 'aux567' direct represents '6' with '5856'
5853 -5855 5856 0
-5856 5855 0
-5856 -5853 0
c Var 'aux567' order represents '7' with '5857'
-5855 5857 0
c Var 'aux567' direct represents '7' with '5858'
5855 -5857 5858 0
-5858 5857 0
-5858 -5855 0
c Var 'aux567' order represents '8' with '5859'
-5857 5859 0
c Var 'aux567' direct represents '8' with '5860'
5857 -5859 5860 0
-5860 5859 0
-5860 -5857 0
c Var 'aux567' order represents '9' with '5861'
-5859 5861 0
c Var 'aux567' direct represents '9' with '5862'
5859 -5861 5862 0
-5862 5861 0
-5862 -5859 0
c Var 'aux567' order represents '10' with '5863'
-5861 5863 0
c Var 'aux567' direct represents '10' with '5864'
5861 -5863 5864 0
-5864 5863 0
-5864 -5861 0
c Var 'aux567' order represents '11' with '5865'
-5863 5865 0
c Var 'aux567' direct represents '11' with '5866'
5863 -5865 5866 0
-5866 5865 0
-5866 -5863 0
c Var 'aux567' order represents '12' with '5867'
-5865 5867 0
c Var 'aux567' direct represents '12' with '5868'
5865 -5867 5868 0
-5868 5867 0
-5868 -5865 0
c Var 'aux567' order represents '13' with '5869'
-5867 5869 0
c Var 'aux567' direct represents '13' with '5870'
5867 -5869 5870 0
-5870 5869 0
-5870 -5867 0
c Var 'aux567' order represents '14' with '5871'
-5869 5871 0
c Var 'aux567' direct represents '14' with '5872'
5869 -5871 5872 0
-5872 5871 0
-5872 -5869 0
c Var 'aux567' order represents '15' with '5873'
-5871 5873 0
c Var 'aux567' direct represents '15' with '5874'
5871 -5873 5874 0
-5874 5873 0
-5874 -5871 0
c Var 'aux567' order represents '16' with '5875'
-5873 5875 0
c Var 'aux567' direct represents '16' with '5876'
5873 -5875 5876 0
-5876 5875 0
-5876 -5873 0
c Var 'aux567' order represents '17' with '5877'
-5875 5877 0
c Var 'aux567' direct represents '17' with '5878'
5875 -5877 5878 0
-5878 5877 0
-5878 -5875 0
c Var 'aux567' order represents '18' with '5879'
-5877 5879 0
c Var 'aux567' direct represents '18' with '5880'
5877 -5879 5880 0
-5880 5879 0
-5880 -5877 0
c Var 'aux567' order represents '19' with '5881'
-5879 5881 0
c Var 'aux567' direct represents '19' with '5882'
5879 -5881 5882 0
-5882 5881 0
-5882 -5879 0
c Var 'aux567' order represents '20' with '5883'
-5881 5883 0
c Var 'aux567' direct represents '20' with '5884'
5881 -5883 5884 0
-5884 5883 0
-5884 -5881 0
c Var 'aux567' order represents '21' with '5885'
-5883 5885 0
c Var 'aux567' direct represents '21' with '5886'
5883 -5885 5886 0
-5886 5885 0
-5886 -5883 0
c Var 'aux567' order represents '22' with '5887'
-5885 5887 0
c Var 'aux567' direct represents '22' with '5888'
5885 -5887 5888 0
-5888 5887 0
-5888 -5885 0
c Var 'aux567' order represents '23' with '5889'
-5887 5889 0
c Var 'aux567' direct represents '23' with '5890'
5887 -5889 5890 0
-5890 5889 0
-5890 -5887 0
c Var 'aux567' direct represents '24' with '-5889'
5844 5846 5848 5850 5852 5854 5856 5858 5860 5862 5864 5866 5868 5870 5872 5874 5876 5878 5880 5882 5884 5886 5888 5890 -5889 0
c Encoding variable: aux568 with domain: int(0..32) (representing constraint (aux563 + aux565))
c Both direct and order encoding.
c Var 'aux568' order represents '0' with '5891'
c Var 'aux568' direct represents '0' with '5891'
c Var 'aux568' order represents '1' with '5892'
-5891 5892 0
c Var 'aux568' direct represents '1' with '5893'
5891 -5892 5893 0
-5893 5892 0
-5893 -5891 0
c Var 'aux568' order represents '2' with '5894'
-5892 5894 0
c Var 'aux568' direct represents '2' with '5895'
5892 -5894 5895 0
-5895 5894 0
-5895 -5892 0
c Var 'aux568' order represents '3' with '5896'
-5894 5896 0
c Var 'aux568' direct represents '3' with '5897'
5894 -5896 5897 0
-5897 5896 0
-5897 -5894 0
c Var 'aux568' order represents '4' with '5898'
-5896 5898 0
c Var 'aux568' direct represents '4' with '5899'
5896 -5898 5899 0
-5899 5898 0
-5899 -5896 0
c Var 'aux568' order represents '5' with '5900'
-5898 5900 0
c Var 'aux568' direct represents '5' with '5901'
5898 -5900 5901 0
-5901 5900 0
-5901 -5898 0
c Var 'aux568' order represents '6' with '5902'
-5900 5902 0
c Var 'aux568' direct represents '6' with '5903'
5900 -5902 5903 0
-5903 5902 0
-5903 -5900 0
c Var 'aux568' order represents '7' with '5904'
-5902 5904 0
c Var 'aux568' direct represents '7' with '5905'
5902 -5904 5905 0
-5905 5904 0
-5905 -5902 0
c Var 'aux568' order represents '8' with '5906'
-5904 5906 0
c Var 'aux568' direct represents '8' with '5907'
5904 -5906 5907 0
-5907 5906 0
-5907 -5904 0
c Var 'aux568' order represents '9' with '5908'
-5906 5908 0
c Var 'aux568' direct represents '9' with '5909'
5906 -5908 5909 0
-5909 5908 0
-5909 -5906 0
c Var 'aux568' order represents '10' with '5910'
-5908 5910 0
c Var 'aux568' direct represents '10' with '5911'
5908 -5910 5911 0
-5911 5910 0
-5911 -5908 0
c Var 'aux568' order represents '11' with '5912'
-5910 5912 0
c Var 'aux568' direct represents '11' with '5913'
5910 -5912 5913 0
-5913 5912 0
-5913 -5910 0
c Var 'aux568' order represents '12' with '5914'
-5912 5914 0
c Var 'aux568' direct represents '12' with '5915'
5912 -5914 5915 0
-5915 5914 0
-5915 -5912 0
c Var 'aux568' order represents '13' with '5916'
-5914 5916 0
c Var 'aux568' direct represents '13' with '5917'
5914 -5916 5917 0
-5917 5916 0
-5917 -5914 0
c Var 'aux568' order represents '14' with '5918'
-5916 5918 0
c Var 'aux568' direct represents '14' with '5919'
5916 -5918 5919 0
-5919 5918 0
-5919 -5916 0
c Var 'aux568' order represents '15' with '5920'
-5918 5920 0
c Var 'aux568' direct represents '15' with '5921'
5918 -5920 5921 0
-5921 5920 0
-5921 -5918 0
c Var 'aux568' order represents '16' with '5922'
-5920 5922 0
c Var 'aux568' direct represents '16' with '5923'
5920 -5922 5923 0
-5923 5922 0
-5923 -5920 0
c Var 'aux568' order represents '17' with '5924'
-5922 5924 0
c Var 'aux568' direct represents '17' with '5925'
5922 -5924 5925 0
-5925 5924 0
-5925 -5922 0
c Var 'aux568' order represents '18' with '5926'
-5924 5926 0
c Var 'aux568' direct represents '18' with '5927'
5924 -5926 5927 0
-5927 5926 0
-5927 -5924 0
c Var 'aux568' order represents '19' with '5928'
-5926 5928 0
c Var 'aux568' direct represents '19' with '5929'
5926 -5928 5929 0
-5929 5928 0
-5929 -5926 0
c Var 'aux568' order represents '20' with '5930'
-5928 5930 0
c Var 'aux568' direct represents '20' with '5931'
5928 -5930 5931 0
-5931 5930 0
-5931 -5928 0
c Var 'aux568' order represents '21' with '5932'
-5930 5932 0
c Var 'aux568' direct represents '21' with '5933'
5930 -5932 5933 0
-5933 5932 0
-5933 -5930 0
c Var 'aux568' order represents '22' with '5934'
-5932 5934 0
c Var 'aux568' direct represents '22' with '5935'
5932 -5934 5935 0
-5935 5934 0
-5935 -5932 0
c Var 'aux568' order represents '23' with '5936'
-5934 5936 0
c Var 'aux568' direct represents '23' with '5937'
5934 -5936 5937 0
-5937 5936 0
-5937 -5934 0
c Var 'aux568' order represents '24' with '5938'
-5936 5938 0
c Var 'aux568' direct represents '24' with '5939'
5936 -5938 5939 0
-5939 5938 0
-5939 -5936 0
c Var 'aux568' order represents '25' with '5940'
-5938 5940 0
c Var 'aux568' direct represents '25' with '5941'
5938 -5940 5941 0
-5941 5940 0
-5941 -5938 0
c Var 'aux568' order represents '26' with '5942'
-5940 5942 0
c Var 'aux568' direct represents '26' with '5943'
5940 -5942 5943 0
-5943 5942 0
-5943 -5940 0
c Var 'aux568' order represents '27' with '5944'
-5942 5944 0
c Var 'aux568' direct represents '27' with '5945'
5942 -5944 5945 0
-5945 5944 0
-5945 -5942 0
c Var 'aux568' order represents '28' with '5946'
-5944 5946 0
c Var 'aux568' direct represents '28' with '5947'
5944 -5946 5947 0
-5947 5946 0
-5947 -5944 0
c Var 'aux568' order represents '29' with '5948'
-5946 5948 0
c Var 'aux568' direct represents '29' with '5949'
5946 -5948 5949 0
-5949 5948 0
-5949 -5946 0
c Var 'aux568' order represents '30' with '5950'
-5948 5950 0
c Var 'aux568' direct represents '30' with '5951'
5948 -5950 5951 0
-5951 5950 0
-5951 -5948 0
c Var 'aux568' order represents '31' with '5952'
-5950 5952 0
c Var 'aux568' direct represents '31' with '5953'
5950 -5952 5953 0
-5953 5952 0
-5953 -5950 0
c Var 'aux568' direct represents '32' with '-5952'
5891 5893 5895 5897 5899 5901 5903 5905 5907 5909 5911 5913 5915 5917 5919 5921 5923 5925 5927 5929 5931 5933 5935 5937 5939 5941 5943 5945 5947 5949 5951 5953 -5952 0
c Encoding variable: aux569 with domain: int(0..16) (representing constraint (shift(x_00009_00001, -1) + shift(x_00009_00009, -1)))
c Both direct and order encoding.
c Var 'aux569' order represents '0' with '5954'
c Var 'aux569' direct represents '0' with '5954'
c Var 'aux569' order represents '1' with '5955'
-5954 5955 0
c Var 'aux569' direct represents '1' with '5956'
5954 -5955 5956 0
-5956 5955 0
-5956 -5954 0
c Var 'aux569' order represents '2' with '5957'
-5955 5957 0
c Var 'aux569' direct represents '2' with '5958'
5955 -5957 5958 0
-5958 5957 0
-5958 -5955 0
c Var 'aux569' order represents '3' with '5959'
-5957 5959 0
c Var 'aux569' direct represents '3' with '5960'
5957 -5959 5960 0
-5960 5959 0
-5960 -5957 0
c Var 'aux569' order represents '4' with '5961'
-5959 5961 0
c Var 'aux569' direct represents '4' with '5962'
5959 -5961 5962 0
-5962 5961 0
-5962 -5959 0
c Var 'aux569' order represents '5' with '5963'
-5961 5963 0
c Var 'aux569' direct represents '5' with '5964'
5961 -5963 5964 0
-5964 5963 0
-5964 -5961 0
c Var 'aux569' order represents '6' with '5965'
-5963 5965 0
c Var 'aux569' direct represents '6' with '5966'
5963 -5965 5966 0
-5966 5965 0
-5966 -5963 0
c Var 'aux569' order represents '7' with '5967'
-5965 5967 0
c Var 'aux569' direct represents '7' with '5968'
5965 -5967 5968 0
-5968 5967 0
-5968 -5965 0
c Var 'aux569' order represents '8' with '5969'
-5967 5969 0
c Var 'aux569' direct represents '8' with '5970'
5967 -5969 5970 0
-5970 5969 0
-5970 -5967 0
c Var 'aux569' order represents '9' with '5971'
-5969 5971 0
c Var 'aux569' direct represents '9' with '5972'
5969 -5971 5972 0
-5972 5971 0
-5972 -5969 0
c Var 'aux569' order represents '10' with '5973'
-5971 5973 0
c Var 'aux569' direct represents '10' with '5974'
5971 -5973 5974 0
-5974 5973 0
-5974 -5971 0
c Var 'aux569' order represents '11' with '5975'
-5973 5975 0
c Var 'aux569' direct represents '11' with '5976'
5973 -5975 5976 0
-5976 5975 0
-5976 -5973 0
c Var 'aux569' order represents '12' with '5977'
-5975 5977 0
c Var 'aux569' direct represents '12' with '5978'
5975 -5977 5978 0
-5978 5977 0
-5978 -5975 0
c Var 'aux569' order represents '13' with '5979'
-5977 5979 0
c Var 'aux569' direct represents '13' with '5980'
5977 -5979 5980 0
-5980 5979 0
-5980 -5977 0
c Var 'aux569' order represents '14' with '5981'
-5979 5981 0
c Var 'aux569' direct represents '14' with '5982'
5979 -5981 5982 0
-5982 5981 0
-5982 -5979 0
c Var 'aux569' order represents '15' with '5983'
-5981 5983 0
c Var 'aux569' direct represents '15' with '5984'
5981 -5983 5984 0
-5984 5983 0
-5984 -5981 0
c Var 'aux569' direct represents '16' with '-5983'
5954 5956 5958 5960 5962 5964 5966 5968 5970 5972 5974 5976 5978 5980 5982 5984 -5983 0
c Encoding variable: aux570 with domain: int(0..16) (representing constraint (shift(x_00009_00008, -1) + shift(x_00009_00002, -1)))
c Both direct and order encoding.
c Var 'aux570' order represents '0' with '5985'
c Var 'aux570' direct represents '0' with '5985'
c Var 'aux570' order represents '1' with '5986'
-5985 5986 0
c Var 'aux570' direct represents '1' with '5987'
5985 -5986 5987 0
-5987 5986 0
-5987 -5985 0
c Var 'aux570' order represents '2' with '5988'
-5986 5988 0
c Var 'aux570' direct represents '2' with '5989'
5986 -5988 5989 0
-5989 5988 0
-5989 -5986 0
c Var 'aux570' order represents '3' with '5990'
-5988 5990 0
c Var 'aux570' direct represents '3' with '5991'
5988 -5990 5991 0
-5991 5990 0
-5991 -5988 0
c Var 'aux570' order represents '4' with '5992'
-5990 5992 0
c Var 'aux570' direct represents '4' with '5993'
5990 -5992 5993 0
-5993 5992 0
-5993 -5990 0
c Var 'aux570' order represents '5' with '5994'
-5992 5994 0
c Var 'aux570' direct represents '5' with '5995'
5992 -5994 5995 0
-5995 5994 0
-5995 -5992 0
c Var 'aux570' order represents '6' with '5996'
-5994 5996 0
c Var 'aux570' direct represents '6' with '5997'
5994 -5996 5997 0
-5997 5996 0
-5997 -5994 0
c Var 'aux570' order represents '7' with '5998'
-5996 5998 0
c Var 'aux570' direct represents '7' with '5999'
5996 -5998 5999 0
-5999 5998 0
-5999 -5996 0
c Var 'aux570' order represents '8' with '6000'
-5998 6000 0
c Var 'aux570' direct represents '8' with '6001'
5998 -6000 6001 0
-6001 6000 0
-6001 -5998 0
c Var 'aux570' order represents '9' with '6002'
-6000 6002 0
c Var 'aux570' direct represents '9' with '6003'
6000 -6002 6003 0
-6003 6002 0
-6003 -6000 0
c Var 'aux570' order represents '10' with '6004'
-6002 6004 0
c Var 'aux570' direct represents '10' with '6005'
6002 -6004 6005 0
-6005 6004 0
-6005 -6002 0
c Var 'aux570' order represents '11' with '6006'
-6004 6006 0
c Var 'aux570' direct represents '11' with '6007'
6004 -6006 6007 0
-6007 6006 0
-6007 -6004 0
c Var 'aux570' order represents '12' with '6008'
-6006 6008 0
c Var 'aux570' direct represents '12' with '6009'
6006 -6008 6009 0
-6009 6008 0
-6009 -6006 0
c Var 'aux570' order represents '13' with '6010'
-6008 6010 0
c Var 'aux570' direct represents '13' with '6011'
6008 -6010 6011 0
-6011 6010 0
-6011 -6008 0
c Var 'aux570' order represents '14' with '6012'
-6010 6012 0
c Var 'aux570' direct represents '14' with '6013'
6010 -6012 6013 0
-6013 6012 0
-6013 -6010 0
c Var 'aux570' order represents '15' with '6014'
-6012 6014 0
c Var 'aux570' direct represents '15' with '6015'
6012 -6014 6015 0
-6015 6014 0
-6015 -6012 0
c Var 'aux570' direct represents '16' with '-6014'
5985 5987 5989 5991 5993 5995 5997 5999 6001 6003 6005 6007 6009 6011 6013 6015 -6014 0
c Encoding variable: aux571 with domain: int(0..16) (representing constraint (shift(x_00009_00007, -1) + shift(x_00009_00004, -1)))
c Both direct and order encoding.
c Var 'aux571' order represents '0' with '6016'
c Var 'aux571' direct represents '0' with '6016'
c Var 'aux571' order represents '1' with '6017'
-6016 6017 0
c Var 'aux571' direct represents '1' with '6018'
6016 -6017 6018 0
-6018 6017 0
-6018 -6016 0
c Var 'aux571' order represents '2' with '6019'
-6017 6019 0
c Var 'aux571' direct represents '2' with '6020'
6017 -6019 6020 0
-6020 6019 0
-6020 -6017 0
c Var 'aux571' order represents '3' with '6021'
-6019 6021 0
c Var 'aux571' direct represents '3' with '6022'
6019 -6021 6022 0
-6022 6021 0
-6022 -6019 0
c Var 'aux571' order represents '4' with '6023'
-6021 6023 0
c Var 'aux571' direct represents '4' with '6024'
6021 -6023 6024 0
-6024 6023 0
-6024 -6021 0
c Var 'aux571' order represents '5' with '6025'
-6023 6025 0
c Var 'aux571' direct represents '5' with '6026'
6023 -6025 6026 0
-6026 6025 0
-6026 -6023 0
c Var 'aux571' order represents '6' with '6027'
-6025 6027 0
c Var 'aux571' direct represents '6' with '6028'
6025 -6027 6028 0
-6028 6027 0
-6028 -6025 0
c Var 'aux571' order represents '7' with '6029'
-6027 6029 0
c Var 'aux571' direct represents '7' with '6030'
6027 -6029 6030 0
-6030 6029 0
-6030 -6027 0
c Var 'aux571' order represents '8' with '6031'
-6029 6031 0
c Var 'aux571' direct represents '8' with '6032'
6029 -6031 6032 0
-6032 6031 0
-6032 -6029 0
c Var 'aux571' order represents '9' with '6033'
-6031 6033 0
c Var 'aux571' direct represents '9' with '6034'
6031 -6033 6034 0
-6034 6033 0
-6034 -6031 0
c Var 'aux571' order represents '10' with '6035'
-6033 6035 0
c Var 'aux571' direct represents '10' with '6036'
6033 -6035 6036 0
-6036 6035 0
-6036 -6033 0
c Var 'aux571' order represents '11' with '6037'
-6035 6037 0
c Var 'aux571' direct represents '11' with '6038'
6035 -6037 6038 0
-6038 6037 0
-6038 -6035 0
c Var 'aux571' order represents '12' with '6039'
-6037 6039 0
c Var 'aux571' direct represents '12' with '6040'
6037 -6039 6040 0
-6040 6039 0
-6040 -6037 0
c Var 'aux571' order represents '13' with '6041'
-6039 6041 0
c Var 'aux571' direct represents '13' with '6042'
6039 -6041 6042 0
-6042 6041 0
-6042 -6039 0
c Var 'aux571' order represents '14' with '6043'
-6041 6043 0
c Var 'aux571' direct represents '14' with '6044'
6041 -6043 6044 0
-6044 6043 0
-6044 -6041 0
c Var 'aux571' order represents '15' with '6045'
-6043 6045 0
c Var 'aux571' direct represents '15' with '6046'
6043 -6045 6046 0
-6046 6045 0
-6046 -6043 0
c Var 'aux571' direct represents '16' with '-6045'
6016 6018 6020 6022 6024 6026 6028 6030 6032 6034 6036 6038 6040 6042 6044 6046 -6045 0
c Encoding variable: aux572 with domain: int(0..16) (representing constraint (shift(x_00009_00006, -1) + shift(x_00009_00005, -1)))
c Both direct and order encoding.
c Var 'aux572' order represents '0' with '6047'
c Var 'aux572' direct represents '0' with '6047'
c Var 'aux572' order represents '1' with '6048'
-6047 6048 0
c Var 'aux572' direct represents '1' with '6049'
6047 -6048 6049 0
-6049 6048 0
-6049 -6047 0
c Var 'aux572' order represents '2' with '6050'
-6048 6050 0
c Var 'aux572' direct represents '2' with '6051'
6048 -6050 6051 0
-6051 6050 0
-6051 -6048 0
c Var 'aux572' order represents '3' with '6052'
-6050 6052 0
c Var 'aux572' direct represents '3' with '6053'
6050 -6052 6053 0
-6053 6052 0
-6053 -6050 0
c Var 'aux572' order represents '4' with '6054'
-6052 6054 0
c Var 'aux572' direct represents '4' with '6055'
6052 -6054 6055 0
-6055 6054 0
-6055 -6052 0
c Var 'aux572' order represents '5' with '6056'
-6054 6056 0
c Var 'aux572' direct represents '5' with '6057'
6054 -6056 6057 0
-6057 6056 0
-6057 -6054 0
c Var 'aux572' order represents '6' with '6058'
-6056 6058 0
c Var 'aux572' direct represents '6' with '6059'
6056 -6058 6059 0
-6059 6058 0
-6059 -6056 0
c Var 'aux572' order represents '7' with '6060'
-6058 6060 0
c Var 'aux572' direct represents '7' with '6061'
6058 -6060 6061 0
-6061 6060 0
-6061 -6058 0
c Var 'aux572' order represents '8' with '6062'
-6060 6062 0
c Var 'aux572' direct represents '8' with '6063'
6060 -6062 6063 0
-6063 6062 0
-6063 -6060 0
c Var 'aux572' order represents '9' with '6064'
-6062 6064 0
c Var 'aux572' direct represents '9' with '6065'
6062 -6064 6065 0
-6065 6064 0
-6065 -6062 0
c Var 'aux572' order represents '10' with '6066'
-6064 6066 0
c Var 'aux572' direct represents '10' with '6067'
6064 -6066 6067 0
-6067 6066 0
-6067 -6064 0
c Var 'aux572' order represents '11' with '6068'
-6066 6068 0
c Var 'aux572' direct represents '11' with '6069'
6066 -6068 6069 0
-6069 6068 0
-6069 -6066 0
c Var 'aux572' order represents '12' with '6070'
-6068 6070 0
c Var 'aux572' direct represents '12' with '6071'
6068 -6070 6071 0
-6071 6070 0
-6071 -6068 0
c Var 'aux572' order represents '13' with '6072'
-6070 6072 0
c Var 'aux572' direct represents '13' with '6073'
6070 -6072 6073 0
-6073 6072 0
-6073 -6070 0
c Var 'aux572' order represents '14' with '6074'
-6072 6074 0
c Var 'aux572' direct represents '14' with '6075'
6072 -6074 6075 0
-6075 6074 0
-6075 -6072 0
c Var 'aux572' order represents '15' with '6076'
-6074 6076 0
c Var 'aux572' direct represents '15' with '6077'
6074 -6076 6077 0
-6077 6076 0
-6077 -6074 0
c Var 'aux572' direct represents '16' with '-6076'
6047 6049 6051 6053 6055 6057 6059 6061 6063 6065 6067 6069 6071 6073 6075 6077 -6076 0
c Encoding variable: aux573 with domain: int(0..24) (representing constraint (shift(x_00009_00003, -1) + aux572))
c Both direct and order encoding.
c Var 'aux573' order represents '0' with '6078'
c Var 'aux573' direct represents '0' with '6078'
c Var 'aux573' order represents '1' with '6079'
-6078 6079 0
c Var 'aux573' direct represents '1' with '6080'
6078 -6079 6080 0
-6080 6079 0
-6080 -6078 0
c Var 'aux573' order represents '2' with '6081'
-6079 6081 0
c Var 'aux573' direct represents '2' with '6082'
6079 -6081 6082 0
-6082 6081 0
-6082 -6079 0
c Var 'aux573' order represents '3' with '6083'
-6081 6083 0
c Var 'aux573' direct represents '3' with '6084'
6081 -6083 6084 0
-6084 6083 0
-6084 -6081 0
c Var 'aux573' order represents '4' with '6085'
-6083 6085 0
c Var 'aux573' direct represents '4' with '6086'
6083 -6085 6086 0
-6086 6085 0
-6086 -6083 0
c Var 'aux573' order represents '5' with '6087'
-6085 6087 0
c Var 'aux573' direct represents '5' with '6088'
6085 -6087 6088 0
-6088 6087 0
-6088 -6085 0
c Var 'aux573' order represents '6' with '6089'
-6087 6089 0
c Var 'aux573' direct represents '6' with '6090'
6087 -6089 6090 0
-6090 6089 0
-6090 -6087 0
c Var 'aux573' order represents '7' with '6091'
-6089 6091 0
c Var 'aux573' direct represents '7' with '6092'
6089 -6091 6092 0
-6092 6091 0
-6092 -6089 0
c Var 'aux573' order represents '8' with '6093'
-6091 6093 0
c Var 'aux573' direct represents '8' with '6094'
6091 -6093 6094 0
-6094 6093 0
-6094 -6091 0
c Var 'aux573' order represents '9' with '6095'
-6093 6095 0
c Var 'aux573' direct represents '9' with '6096'
6093 -6095 6096 0
-6096 6095 0
-6096 -6093 0
c Var 'aux573' order represents '10' with '6097'
-6095 6097 0
c Var 'aux573' direct represents '10' with '6098'
6095 -6097 6098 0
-6098 6097 0
-6098 -6095 0
c Var 'aux573' order represents '11' with '6099'
-6097 6099 0
c Var 'aux573' direct represents '11' with '6100'
6097 -6099 6100 0
-6100 6099 0
-6100 -6097 0
c Var 'aux573' order represents '12' with '6101'
-6099 6101 0
c Var 'aux573' direct represents '12' with '6102'
6099 -6101 6102 0
-6102 6101 0
-6102 -6099 0
c Var 'aux573' order represents '13' with '6103'
-6101 6103 0
c Var 'aux573' direct represents '13' with '6104'
6101 -6103 6104 0
-6104 6103 0
-6104 -6101 0
c Var 'aux573' order represents '14' with '6105'
-6103 6105 0
c Var 'aux573' direct represents '14' with '6106'
6103 -6105 6106 0
-6106 6105 0
-6106 -6103 0
c Var 'aux573' order represents '15' with '6107'
-6105 6107 0
c Var 'aux573' direct represents '15' with '6108'
6105 -6107 6108 0
-6108 6107 0
-6108 -6105 0
c Var 'aux573' order represents '16' with '6109'
-6107 6109 0
c Var 'aux573' direct represents '16' with '6110'
6107 -6109 6110 0
-6110 6109 0
-6110 -6107 0
c Var 'aux573' order represents '17' with '6111'
-6109 6111 0
c Var 'aux573' direct represents '17' with '6112'
6109 -6111 6112 0
-6112 6111 0
-6112 -6109 0
c Var 'aux573' order represents '18' with '6113'
-6111 6113 0
c Var 'aux573' direct represents '18' with '6114'
6111 -6113 6114 0
-6114 6113 0
-6114 -6111 0
c Var 'aux573' order represents '19' with '6115'
-6113 6115 0
c Var 'aux573' direct represents '19' with '6116'
6113 -6115 6116 0
-6116 6115 0
-6116 -6113 0
c Var 'aux573' order represents '20' with '6117'
-6115 6117 0
c Var 'aux573' direct represents '20' with '6118'
6115 -6117 6118 0
-6118 6117 0
-6118 -6115 0
c Var 'aux573' order represents '21' with '6119'
-6117 6119 0
c Var 'aux573' direct represents '21' with '6120'
6117 -6119 6120 0
-6120 6119 0
-6120 -6117 0
c Var 'aux573' order represents '22' with '6121'
-6119 6121 0
c Var 'aux573' direct represents '22' with '6122'
6119 -6121 6122 0
-6122 6121 0
-6122 -6119 0
c Var 'aux573' order represents '23' with '6123'
-6121 6123 0
c Var 'aux573' direct represents '23' with '6124'
6121 -6123 6124 0
-6124 6123 0
-6124 -6121 0
c Var 'aux573' direct represents '24' with '-6123'
6078 6080 6082 6084 6086 6088 6090 6092 6094 6096 6098 6100 6102 6104 6106 6108 6110 6112 6114 6116 6118 6120 6122 6124 -6123 0
c Encoding variable: aux574 with domain: int(0..32) (representing constraint (aux569 + aux571))
c Both direct and order encoding.
c Var 'aux574' order represents '0' with '6125'
c Var 'aux574' direct represents '0' with '6125'
c Var 'aux574' order represents '1' with '6126'
-6125 6126 0
c Var 'aux574' direct represents '1' with '6127'
6125 -6126 6127 0
-6127 6126 0
-6127 -6125 0
c Var 'aux574' order represents '2' with '6128'
-6126 6128 0
c Var 'aux574' direct represents '2' with '6129'
6126 -6128 6129 0
-6129 6128 0
-6129 -6126 0
c Var 'aux574' order represents '3' with '6130'
-6128 6130 0
c Var 'aux574' direct represents '3' with '6131'
6128 -6130 6131 0
-6131 6130 0
-6131 -6128 0
c Var 'aux574' order represents '4' with '6132'
-6130 6132 0
c Var 'aux574' direct represents '4' with '6133'
6130 -6132 6133 0
-6133 6132 0
-6133 -6130 0
c Var 'aux574' order represents '5' with '6134'
-6132 6134 0
c Var 'aux574' direct represents '5' with '6135'
6132 -6134 6135 0
-6135 6134 0
-6135 -6132 0
c Var 'aux574' order represents '6' with '6136'
-6134 6136 0
c Var 'aux574' direct represents '6' with '6137'
6134 -6136 6137 0
-6137 6136 0
-6137 -6134 0
c Var 'aux574' order represents '7' with '6138'
-6136 6138 0
c Var 'aux574' direct represents '7' with '6139'
6136 -6138 6139 0
-6139 6138 0
-6139 -6136 0
c Var 'aux574' order represents '8' with '6140'
-6138 6140 0
c Var 'aux574' direct represents '8' with '6141'
6138 -6140 6141 0
-6141 6140 0
-6141 -6138 0
c Var 'aux574' order represents '9' with '6142'
-6140 6142 0
c Var 'aux574' direct represents '9' with '6143'
6140 -6142 6143 0
-6143 6142 0
-6143 -6140 0
c Var 'aux574' order represents '10' with '6144'
-6142 6144 0
c Var 'aux574' direct represents '10' with '6145'
6142 -6144 6145 0
-6145 6144 0
-6145 -6142 0
c Var 'aux574' order represents '11' with '6146'
-6144 6146 0
c Var 'aux574' direct represents '11' with '6147'
6144 -6146 6147 0
-6147 6146 0
-6147 -6144 0
c Var 'aux574' order represents '12' with '6148'
-6146 6148 0
c Var 'aux574' direct represents '12' with '6149'
6146 -6148 6149 0
-6149 6148 0
-6149 -6146 0
c Var 'aux574' order represents '13' with '6150'
-6148 6150 0
c Var 'aux574' direct represents '13' with '6151'
6148 -6150 6151 0
-6151 6150 0
-6151 -6148 0
c Var 'aux574' order represents '14' with '6152'
-6150 6152 0
c Var 'aux574' direct represents '14' with '6153'
6150 -6152 6153 0
-6153 6152 0
-6153 -6150 0
c Var 'aux574' order represents '15' with '6154'
-6152 6154 0
c Var 'aux574' direct represents '15' with '6155'
6152 -6154 6155 0
-6155 6154 0
-6155 -6152 0
c Var 'aux574' order represents '16' with '6156'
-6154 6156 0
c Var 'aux574' direct represents '16' with '6157'
6154 -6156 6157 0
-6157 6156 0
-6157 -6154 0
c Var 'aux574' order represents '17' with '6158'
-6156 6158 0
c Var 'aux574' direct represents '17' with '6159'
6156 -6158 6159 0
-6159 6158 0
-6159 -6156 0
c Var 'aux574' order represents '18' with '6160'
-6158 6160 0
c Var 'aux574' direct represents '18' with '6161'
6158 -6160 6161 0
-6161 6160 0
-6161 -6158 0
c Var 'aux574' order represents '19' with '6162'
-6160 6162 0
c Var 'aux574' direct represents '19' with '6163'
6160 -6162 6163 0
-6163 6162 0
-6163 -6160 0
c Var 'aux574' order represents '20' with '6164'
-6162 6164 0
c Var 'aux574' direct represents '20' with '6165'
6162 -6164 6165 0
-6165 6164 0
-6165 -6162 0
c Var 'aux574' order represents '21' with '6166'
-6164 6166 0
c Var 'aux574' direct represents '21' with '6167'
6164 -6166 6167 0
-6167 6166 0
-6167 -6164 0
c Var 'aux574' order represents '22' with '6168'
-6166 6168 0
c Var 'aux574' direct represents '22' with '6169'
6166 -6168 6169 0
-6169 6168 0
-6169 -6166 0
c Var 'aux574' order represents '23' with '6170'
-6168 6170 0
c Var 'aux574' direct represents '23' with '6171'
6168 -6170 6171 0
-6171 6170 0
-6171 -6168 0
c Var 'aux574' order represents '24' with '6172'
-6170 6172 0
c Var 'aux574' direct represents '24' with '6173'
6170 -6172 6173 0
-6173 6172 0
-6173 -6170 0
c Var 'aux574' order represents '25' with '6174'
-6172 6174 0
c Var 'aux574' direct represents '25' with '6175'
6172 -6174 6175 0
-6175 6174 0
-6175 -6172 0
c Var 'aux574' order represents '26' with '6176'
-6174 6176 0
c Var 'aux574' direct represents '26' with '6177'
6174 -6176 6177 0
-6177 6176 0
-6177 -6174 0
c Var 'aux574' order represents '27' with '6178'
-6176 6178 0
c Var 'aux574' direct represents '27' with '6179'
6176 -6178 6179 0
-6179 6178 0
-6179 -6176 0
c Var 'aux574' order represents '28' with '6180'
-6178 6180 0
c Var 'aux574' direct represents '28' with '6181'
6178 -6180 6181 0
-6181 6180 0
-6181 -6178 0
c Var 'aux574' order represents '29' with '6182'
-6180 6182 0
c Var 'aux574' direct represents '29' with '6183'
6180 -6182 6183 0
-6183 6182 0
-6183 -6180 0
c Var 'aux574' order represents '30' with '6184'
-6182 6184 0
c Var 'aux574' direct represents '30' with '6185'
6182 -6184 6185 0
-6185 6184 0
-6185 -6182 0
c Var 'aux574' order represents '31' with '6186'
-6184 6186 0
c Var 'aux574' direct represents '31' with '6187'
6184 -6186 6187 0
-6187 6186 0
-6187 -6184 0
c Var 'aux574' direct represents '32' with '-6186'
6125 6127 6129 6131 6133 6135 6137 6139 6141 6143 6145 6147 6149 6151 6153 6155 6157 6159 6161 6163 6165 6167 6169 6171 6173 6175 6177 6179 6181 6183 6185 6187 -6186 0
c Encoding variable: aux575 with domain: int(0..16) (representing constraint (shift(x_00004_00001, -1) + shift(x_00006_00003, -1)))
c Both direct and order encoding.
c Var 'aux575' order represents '0' with '6188'
c Var 'aux575' direct represents '0' with '6188'
c Var 'aux575' order represents '1' with '6189'
-6188 6189 0
c Var 'aux575' direct represents '1' with '6190'
6188 -6189 6190 0
-6190 6189 0
-6190 -6188 0
c Var 'aux575' order represents '2' with '6191'
-6189 6191 0
c Var 'aux575' direct represents '2' with '6192'
6189 -6191 6192 0
-6192 6191 0
-6192 -6189 0
c Var 'aux575' order represents '3' with '6193'
-6191 6193 0
c Var 'aux575' direct represents '3' with '6194'
6191 -6193 6194 0
-6194 6193 0
-6194 -6191 0
c Var 'aux575' order represents '4' with '6195'
-6193 6195 0
c Var 'aux575' direct represents '4' with '6196'
6193 -6195 6196 0
-6196 6195 0
-6196 -6193 0
c Var 'aux575' order represents '5' with '6197'
-6195 6197 0
c Var 'aux575' direct represents '5' with '6198'
6195 -6197 6198 0
-6198 6197 0
-6198 -6195 0
c Var 'aux575' order represents '6' with '6199'
-6197 6199 0
c Var 'aux575' direct represents '6' with '6200'
6197 -6199 6200 0
-6200 6199 0
-6200 -6197 0
c Var 'aux575' order represents '7' with '6201'
-6199 6201 0
c Var 'aux575' direct represents '7' with '6202'
6199 -6201 6202 0
-6202 6201 0
-6202 -6199 0
c Var 'aux575' order represents '8' with '6203'
-6201 6203 0
c Var 'aux575' direct represents '8' with '6204'
6201 -6203 6204 0
-6204 6203 0
-6204 -6201 0
c Var 'aux575' order represents '9' with '6205'
-6203 6205 0
c Var 'aux575' direct represents '9' with '6206'
6203 -6205 6206 0
-6206 6205 0
-6206 -6203 0
c Var 'aux575' order represents '10' with '6207'
-6205 6207 0
c Var 'aux575' direct represents '10' with '6208'
6205 -6207 6208 0
-6208 6207 0
-6208 -6205 0
c Var 'aux575' order represents '11' with '6209'
-6207 6209 0
c Var 'aux575' direct represents '11' with '6210'
6207 -6209 6210 0
-6210 6209 0
-6210 -6207 0
c Var 'aux575' order represents '12' with '6211'
-6209 6211 0
c Var 'aux575' direct represents '12' with '6212'
6209 -6211 6212 0
-6212 6211 0
-6212 -6209 0
c Var 'aux575' order represents '13' with '6213'
-6211 6213 0
c Var 'aux575' direct represents '13' with '6214'
6211 -6213 6214 0
-6214 6213 0
-6214 -6211 0
c Var 'aux575' order represents '14' with '6215'
-6213 6215 0
c Var 'aux575' direct represents '14' with '6216'
6213 -6215 6216 0
-6216 6215 0
-6216 -6213 0
c Var 'aux575' order represents '15' with '6217'
-6215 6217 0
c Var 'aux575' direct represents '15' with '6218'
6215 -6217 6218 0
-6218 6217 0
-6218 -6215 0
c Var 'aux575' direct represents '16' with '-6217'
6188 6190 6192 6194 6196 6198 6200 6202 6204 6206 6208 6210 6212 6214 6216 6218 -6217 0
c Encoding variable: aux576 with domain: int(0..16) (representing constraint (shift(x_00006_00002, -1) + shift(x_00004_00002, -1)))
c Both direct and order encoding.
c Var 'aux576' order represents '0' with '6219'
c Var 'aux576' direct represents '0' with '6219'
c Var 'aux576' order represents '1' with '6220'
-6219 6220 0
c Var 'aux576' direct represents '1' with '6221'
6219 -6220 6221 0
-6221 6220 0
-6221 -6219 0
c Var 'aux576' order represents '2' with '6222'
-6220 6222 0
c Var 'aux576' direct represents '2' with '6223'
6220 -6222 6223 0
-6223 6222 0
-6223 -6220 0
c Var 'aux576' order represents '3' with '6224'
-6222 6224 0
c Var 'aux576' direct represents '3' with '6225'
6222 -6224 6225 0
-6225 6224 0
-6225 -6222 0
c Var 'aux576' order represents '4' with '6226'
-6224 6226 0
c Var 'aux576' direct represents '4' with '6227'
6224 -6226 6227 0
-6227 6226 0
-6227 -6224 0
c Var 'aux576' order represents '5' with '6228'
-6226 6228 0
c Var 'aux576' direct represents '5' with '6229'
6226 -6228 6229 0
-6229 6228 0
-6229 -6226 0
c Var 'aux576' order represents '6' with '6230'
-6228 6230 0
c Var 'aux576' direct represents '6' with '6231'
6228 -6230 6231 0
-6231 6230 0
-6231 -6228 0
c Var 'aux576' order represents '7' with '6232'
-6230 6232 0
c Var 'aux576' direct represents '7' with '6233'
6230 -6232 6233 0
-6233 6232 0
-6233 -6230 0
c Var 'aux576' order represents '8' with '6234'
-6232 6234 0
c Var 'aux576' direct represents '8' with '6235'
6232 -6234 6235 0
-6235 6234 0
-6235 -6232 0
c Var 'aux576' order represents '9' with '6236'
-6234 6236 0
c Var 'aux576' direct represents '9' with '6237'
6234 -6236 6237 0
-6237 6236 0
-6237 -6234 0
c Var 'aux576' order represents '10' with '6238'
-6236 6238 0
c Var 'aux576' direct represents '10' with '6239'
6236 -6238 6239 0
-6239 6238 0
-6239 -6236 0
c Var 'aux576' order represents '11' with '6240'
-6238 6240 0
c Var 'aux576' direct represents '11' with '6241'
6238 -6240 6241 0
-6241 6240 0
-6241 -6238 0
c Var 'aux576' order represents '12' with '6242'
-6240 6242 0
c Var 'aux576' direct represents '12' with '6243'
6240 -6242 6243 0
-6243 6242 0
-6243 -6240 0
c Var 'aux576' order represents '13' with '6244'
-6242 6244 0
c Var 'aux576' direct represents '13' with '6245'
6242 -6244 6245 0
-6245 6244 0
-6245 -6242 0
c Var 'aux576' order represents '14' with '6246'
-6244 6246 0
c Var 'aux576' direct represents '14' with '6247'
6244 -6246 6247 0
-6247 6246 0
-6247 -6244 0
c Var 'aux576' order represents '15' with '6248'
-6246 6248 0
c Var 'aux576' direct represents '15' with '6249'
6246 -6248 6249 0
-6249 6248 0
-6249 -6246 0
c Var 'aux576' direct represents '16' with '-6248'
6219 6221 6223 6225 6227 6229 6231 6233 6235 6237 6239 6241 6243 6245 6247 6249 -6248 0
c Encoding variable: aux577 with domain: int(0..16) (representing constraint (shift(x_00006_00001, -1) + shift(x_00005_00001, -1)))
c Both direct and order encoding.
c Var 'aux577' order represents '0' with '6250'
c Var 'aux577' direct represents '0' with '6250'
c Var 'aux577' order represents '1' with '6251'
-6250 6251 0
c Var 'aux577' direct represents '1' with '6252'
6250 -6251 6252 0
-6252 6251 0
-6252 -6250 0
c Var 'aux577' order represents '2' with '6253'
-6251 6253 0
c Var 'aux577' direct represents '2' with '6254'
6251 -6253 6254 0
-6254 6253 0
-6254 -6251 0
c Var 'aux577' order represents '3' with '6255'
-6253 6255 0
c Var 'aux577' direct represents '3' with '6256'
6253 -6255 6256 0
-6256 6255 0
-6256 -6253 0
c Var 'aux577' order represents '4' with '6257'
-6255 6257 0
c Var 'aux577' direct represents '4' with '6258'
6255 -6257 6258 0
-6258 6257 0
-6258 -6255 0
c Var 'aux577' order represents '5' with '6259'
-6257 6259 0
c Var 'aux577' direct represents '5' with '6260'
6257 -6259 6260 0
-6260 6259 0
-6260 -6257 0
c Var 'aux577' order represents '6' with '6261'
-6259 6261 0
c Var 'aux577' direct represents '6' with '6262'
6259 -6261 6262 0
-6262 6261 0
-6262 -6259 0
c Var 'aux577' order represents '7' with '6263'
-6261 6263 0
c Var 'aux577' direct represents '7' with '6264'
6261 -6263 6264 0
-6264 6263 0
-6264 -6261 0
c Var 'aux577' order represents '8' with '6265'
-6263 6265 0
c Var 'aux577' direct represents '8' with '6266'
6263 -6265 6266 0
-6266 6265 0
-6266 -6263 0
c Var 'aux577' order represents '9' with '6267'
-6265 6267 0
c Var 'aux577' direct represents '9' with '6268'
6265 -6267 6268 0
-6268 6267 0
-6268 -6265 0
c Var 'aux577' order represents '10' with '6269'
-6267 6269 0
c Var 'aux577' direct represents '10' with '6270'
6267 -6269 6270 0
-6270 6269 0
-6270 -6267 0
c Var 'aux577' order represents '11' with '6271'
-6269 6271 0
c Var 'aux577' direct represents '11' with '6272'
6269 -6271 6272 0
-6272 6271 0
-6272 -6269 0
c Var 'aux577' order represents '12' with '6273'
-6271 6273 0
c Var 'aux577' direct represents '12' with '6274'
6271 -6273 6274 0
-6274 6273 0
-6274 -6271 0
c Var 'aux577' order represents '13' with '6275'
-6273 6275 0
c Var 'aux577' direct represents '13' with '6276'
6273 -6275 6276 0
-6276 6275 0
-6276 -6273 0
c Var 'aux577' order represents '14' with '6277'
-6275 6277 0
c Var 'aux577' direct represents '14' with '6278'
6275 -6277 6278 0
-6278 6277 0
-6278 -6275 0
c Var 'aux577' order represents '15' with '6279'
-6277 6279 0
c Var 'aux577' direct represents '15' with '6280'
6277 -6279 6280 0
-6280 6279 0
-6280 -6277 0
c Var 'aux577' direct represents '16' with '-6279'
6250 6252 6254 6256 6258 6260 6262 6264 6266 6268 6270 6272 6274 6276 6278 6280 -6279 0
c Encoding variable: aux578 with domain: int(0..16) (representing constraint (shift(x_00005_00003, -1) + shift(x_00005_00002, -1)))
c Both direct and order encoding.
c Var 'aux578' order represents '0' with '6281'
c Var 'aux578' direct represents '0' with '6281'
c Var 'aux578' order represents '1' with '6282'
-6281 6282 0
c Var 'aux578' direct represents '1' with '6283'
6281 -6282 6283 0
-6283 6282 0
-6283 -6281 0
c Var 'aux578' order represents '2' with '6284'
-6282 6284 0
c Var 'aux578' direct represents '2' with '6285'
6282 -6284 6285 0
-6285 6284 0
-6285 -6282 0
c Var 'aux578' order represents '3' with '6286'
-6284 6286 0
c Var 'aux578' direct represents '3' with '6287'
6284 -6286 6287 0
-6287 6286 0
-6287 -6284 0
c Var 'aux578' order represents '4' with '6288'
-6286 6288 0
c Var 'aux578' direct represents '4' with '6289'
6286 -6288 6289 0
-6289 6288 0
-6289 -6286 0
c Var 'aux578' order represents '5' with '6290'
-6288 6290 0
c Var 'aux578' direct represents '5' with '6291'
6288 -6290 6291 0
-6291 6290 0
-6291 -6288 0
c Var 'aux578' order represents '6' with '6292'
-6290 6292 0
c Var 'aux578' direct represents '6' with '6293'
6290 -6292 6293 0
-6293 6292 0
-6293 -6290 0
c Var 'aux578' order represents '7' with '6294'
-6292 6294 0
c Var 'aux578' direct represents '7' with '6295'
6292 -6294 6295 0
-6295 6294 0
-6295 -6292 0
c Var 'aux578' order represents '8' with '6296'
-6294 6296 0
c Var 'aux578' direct represents '8' with '6297'
6294 -6296 6297 0
-6297 6296 0
-6297 -6294 0
c Var 'aux578' order represents '9' with '6298'
-6296 6298 0
c Var 'aux578' direct represents '9' with '6299'
6296 -6298 6299 0
-6299 6298 0
-6299 -6296 0
c Var 'aux578' order represents '10' with '6300'
-6298 6300 0
c Var 'aux578' direct represents '10' with '6301'
6298 -6300 6301 0
-6301 6300 0
-6301 -6298 0
c Var 'aux578' order represents '11' with '6302'
-6300 6302 0
c Var 'aux578' direct represents '11' with '6303'
6300 -6302 6303 0
-6303 6302 0
-6303 -6300 0
c Var 'aux578' order represents '12' with '6304'
-6302 6304 0
c Var 'aux578' direct represents '12' with '6305'
6302 -6304 6305 0
-6305 6304 0
-6305 -6302 0
c Var 'aux578' order represents '13' with '6306'
-6304 6306 0
c Var 'aux578' direct represents '13' with '6307'
6304 -6306 6307 0
-6307 6306 0
-6307 -6304 0
c Var 'aux578' order represents '14' with '6308'
-6306 6308 0
c Var 'aux578' direct represents '14' with '6309'
6306 -6308 6309 0
-6309 6308 0
-6309 -6306 0
c Var 'aux578' order represents '15' with '6310'
-6308 6310 0
c Var 'aux578' direct represents '15' with '6311'
6308 -6310 6311 0
-6311 6310 0
-6311 -6308 0
c Var 'aux578' direct represents '16' with '-6310'
6281 6283 6285 6287 6289 6291 6293 6295 6297 6299 6301 6303 6305 6307 6309 6311 -6310 0
c Encoding variable: aux579 with domain: int(0..24) (representing constraint (shift(x_00004_00003, -1) + aux578))
c Both direct and order encoding.
c Var 'aux579' order represents '0' with '6312'
c Var 'aux579' direct represents '0' with '6312'
c Var 'aux579' order represents '1' with '6313'
-6312 6313 0
c Var 'aux579' direct represents '1' with '6314'
6312 -6313 6314 0
-6314 6313 0
-6314 -6312 0
c Var 'aux579' order represents '2' with '6315'
-6313 6315 0
c Var 'aux579' direct represents '2' with '6316'
6313 -6315 6316 0
-6316 6315 0
-6316 -6313 0
c Var 'aux579' order represents '3' with '6317'
-6315 6317 0
c Var 'aux579' direct represents '3' with '6318'
6315 -6317 6318 0
-6318 6317 0
-6318 -6315 0
c Var 'aux579' order represents '4' with '6319'
-6317 6319 0
c Var 'aux579' direct represents '4' with '6320'
6317 -6319 6320 0
-6320 6319 0
-6320 -6317 0
c Var 'aux579' order represents '5' with '6321'
-6319 6321 0
c Var 'aux579' direct represents '5' with '6322'
6319 -6321 6322 0
-6322 6321 0
-6322 -6319 0
c Var 'aux579' order represents '6' with '6323'
-6321 6323 0
c Var 'aux579' direct represents '6' with '6324'
6321 -6323 6324 0
-6324 6323 0
-6324 -6321 0
c Var 'aux579' order represents '7' with '6325'
-6323 6325 0
c Var 'aux579' direct represents '7' with '6326'
6323 -6325 6326 0
-6326 6325 0
-6326 -6323 0
c Var 'aux579' order represents '8' with '6327'
-6325 6327 0
c Var 'aux579' direct represents '8' with '6328'
6325 -6327 6328 0
-6328 6327 0
-6328 -6325 0
c Var 'aux579' order represents '9' with '6329'
-6327 6329 0
c Var 'aux579' direct represents '9' with '6330'
6327 -6329 6330 0
-6330 6329 0
-6330 -6327 0
c Var 'aux579' order represents '10' with '6331'
-6329 6331 0
c Var 'aux579' direct represents '10' with '6332'
6329 -6331 6332 0
-6332 6331 0
-6332 -6329 0
c Var 'aux579' order represents '11' with '6333'
-6331 6333 0
c Var 'aux579' direct represents '11' with '6334'
6331 -6333 6334 0
-6334 6333 0
-6334 -6331 0
c Var 'aux579' order represents '12' with '6335'
-6333 6335 0
c Var 'aux579' direct represents '12' with '6336'
6333 -6335 6336 0
-6336 6335 0
-6336 -6333 0
c Var 'aux579' order represents '13' with '6337'
-6335 6337 0
c Var 'aux579' direct represents '13' with '6338'
6335 -6337 6338 0
-6338 6337 0
-6338 -6335 0
c Var 'aux579' order represents '14' with '6339'
-6337 6339 0
c Var 'aux579' direct represents '14' with '6340'
6337 -6339 6340 0
-6340 6339 0
-6340 -6337 0
c Var 'aux579' order represents '15' with '6341'
-6339 6341 0
c Var 'aux579' direct represents '15' with '6342'
6339 -6341 6342 0
-6342 6341 0
-6342 -6339 0
c Var 'aux579' order represents '16' with '6343'
-6341 6343 0
c Var 'aux579' direct represents '16' with '6344'
6341 -6343 6344 0
-6344 6343 0
-6344 -6341 0
c Var 'aux579' order represents '17' with '6345'
-6343 6345 0
c Var 'aux579' direct represents '17' with '6346'
6343 -6345 6346 0
-6346 6345 0
-6346 -6343 0
c Var 'aux579' order represents '18' with '6347'
-6345 6347 0
c Var 'aux579' direct represents '18' with '6348'
6345 -6347 6348 0
-6348 6347 0
-6348 -6345 0
c Var 'aux579' order represents '19' with '6349'
-6347 6349 0
c Var 'aux579' direct represents '19' with '6350'
6347 -6349 6350 0
-6350 6349 0
-6350 -6347 0
c Var 'aux579' order represents '20' with '6351'
-6349 6351 0
c Var 'aux579' direct represents '20' with '6352'
6349 -6351 6352 0
-6352 6351 0
-6352 -6349 0
c Var 'aux579' order represents '21' with '6353'
-6351 6353 0
c Var 'aux579' direct represents '21' with '6354'
6351 -6353 6354 0
-6354 6353 0
-6354 -6351 0
c Var 'aux579' order represents '22' with '6355'
-6353 6355 0
c Var 'aux579' direct represents '22' with '6356'
6353 -6355 6356 0
-6356 6355 0
-6356 -6353 0
c Var 'aux579' order represents '23' with '6357'
-6355 6357 0
c Var 'aux579' direct represents '23' with '6358'
6355 -6357 6358 0
-6358 6357 0
-6358 -6355 0
c Var 'aux579' direct represents '24' with '-6357'
6312 6314 6316 6318 6320 6322 6324 6326 6328 6330 6332 6334 6336 6338 6340 6342 6344 6346 6348 6350 6352 6354 6356 6358 -6357 0
c Encoding variable: aux580 with domain: int(0..32) (representing constraint (aux575 + aux577))
c Both direct and order encoding.
c Var 'aux580' order represents '0' with '6359'
c Var 'aux580' direct represents '0' with '6359'
c Var 'aux580' order represents '1' with '6360'
-6359 6360 0
c Var 'aux580' direct represents '1' with '6361'
6359 -6360 6361 0
-6361 6360 0
-6361 -6359 0
c Var 'aux580' order represents '2' with '6362'
-6360 6362 0
c Var 'aux580' direct represents '2' with '6363'
6360 -6362 6363 0
-6363 6362 0
-6363 -6360 0
c Var 'aux580' order represents '3' with '6364'
-6362 6364 0
c Var 'aux580' direct represents '3' with '6365'
6362 -6364 6365 0
-6365 6364 0
-6365 -6362 0
c Var 'aux580' order represents '4' with '6366'
-6364 6366 0
c Var 'aux580' direct represents '4' with '6367'
6364 -6366 6367 0
-6367 6366 0
-6367 -6364 0
c Var 'aux580' order represents '5' with '6368'
-6366 6368 0
c Var 'aux580' direct represents '5' with '6369'
6366 -6368 6369 0
-6369 6368 0
-6369 -6366 0
c Var 'aux580' order represents '6' with '6370'
-6368 6370 0
c Var 'aux580' direct represents '6' with '6371'
6368 -6370 6371 0
-6371 6370 0
-6371 -6368 0
c Var 'aux580' order represents '7' with '6372'
-6370 6372 0
c Var 'aux580' direct represents '7' with '6373'
6370 -6372 6373 0
-6373 6372 0
-6373 -6370 0
c Var 'aux580' order represents '8' with '6374'
-6372 6374 0
c Var 'aux580' direct represents '8' with '6375'
6372 -6374 6375 0
-6375 6374 0
-6375 -6372 0
c Var 'aux580' order represents '9' with '6376'
-6374 6376 0
c Var 'aux580' direct represents '9' with '6377'
6374 -6376 6377 0
-6377 6376 0
-6377 -6374 0
c Var 'aux580' order represents '10' with '6378'
-6376 6378 0
c Var 'aux580' direct represents '10' with '6379'
6376 -6378 6379 0
-6379 6378 0
-6379 -6376 0
c Var 'aux580' order represents '11' with '6380'
-6378 6380 0
c Var 'aux580' direct represents '11' with '6381'
6378 -6380 6381 0
-6381 6380 0
-6381 -6378 0
c Var 'aux580' order represents '12' with '6382'
-6380 6382 0
c Var 'aux580' direct represents '12' with '6383'
6380 -6382 6383 0
-6383 6382 0
-6383 -6380 0
c Var 'aux580' order represents '13' with '6384'
-6382 6384 0
c Var 'aux580' direct represents '13' with '6385'
6382 -6384 6385 0
-6385 6384 0
-6385 -6382 0
c Var 'aux580' order represents '14' with '6386'
-6384 6386 0
c Var 'aux580' direct represents '14' with '6387'
6384 -6386 6387 0
-6387 6386 0
-6387 -6384 0
c Var 'aux580' order represents '15' with '6388'
-6386 6388 0
c Var 'aux580' direct represents '15' with '6389'
6386 -6388 6389 0
-6389 6388 0
-6389 -6386 0
c Var 'aux580' order represents '16' with '6390'
-6388 6390 0
c Var 'aux580' direct represents '16' with '6391'
6388 -6390 6391 0
-6391 6390 0
-6391 -6388 0
c Var 'aux580' order represents '17' with '6392'
-6390 6392 0
c Var 'aux580' direct represents '17' with '6393'
6390 -6392 6393 0
-6393 6392 0
-6393 -6390 0
c Var 'aux580' order represents '18' with '6394'
-6392 6394 0
c Var 'aux580' direct represents '18' with '6395'
6392 -6394 6395 0
-6395 6394 0
-6395 -6392 0
c Var 'aux580' order represents '19' with '6396'
-6394 6396 0
c Var 'aux580' direct represents '19' with '6397'
6394 -6396 6397 0
-6397 6396 0
-6397 -6394 0
c Var 'aux580' order represents '20' with '6398'
-6396 6398 0
c Var 'aux580' direct represents '20' with '6399'
6396 -6398 6399 0
-6399 6398 0
-6399 -6396 0
c Var 'aux580' order represents '21' with '6400'
-6398 6400 0
c Var 'aux580' direct represents '21' with '6401'
6398 -6400 6401 0
-6401 6400 0
-6401 -6398 0
c Var 'aux580' order represents '22' with '6402'
-6400 6402 0
c Var 'aux580' direct represents '22' with '6403'
6400 -6402 6403 0
-6403 6402 0
-6403 -6400 0
c Var 'aux580' order represents '23' with '6404'
-6402 6404 0
c Var 'aux580' direct represents '23' with '6405'
6402 -6404 6405 0
-6405 6404 0
-6405 -6402 0
c Var 'aux580' order represents '24' with '6406'
-6404 6406 0
c Var 'aux580' direct represents '24' with '6407'
6404 -6406 6407 0
-6407 6406 0
-6407 -6404 0
c Var 'aux580' order represents '25' with '6408'
-6406 6408 0
c Var 'aux580' direct represents '25' with '6409'
6406 -6408 6409 0
-6409 6408 0
-6409 -6406 0
c Var 'aux580' order represents '26' with '6410'
-6408 6410 0
c Var 'aux580' direct represents '26' with '6411'
6408 -6410 6411 0
-6411 6410 0
-6411 -6408 0
c Var 'aux580' order represents '27' with '6412'
-6410 6412 0
c Var 'aux580' direct represents '27' with '6413'
6410 -6412 6413 0
-6413 6412 0
-6413 -6410 0
c Var 'aux580' order represents '28' with '6414'
-6412 6414 0
c Var 'aux580' direct represents '28' with '6415'
6412 -6414 6415 0
-6415 6414 0
-6415 -6412 0
c Var 'aux580' order represents '29' with '6416'
-6414 6416 0
c Var 'aux580' direct represents '29' with '6417'
6414 -6416 6417 0
-6417 6416 0
-6417 -6414 0
c Var 'aux580' order represents '30' with '6418'
-6416 6418 0
c Var 'aux580' direct represents '30' with '6419'
6416 -6418 6419 0
-6419 6418 0
-6419 -6416 0
c Var 'aux580' order represents '31' with '6420'
-6418 6420 0
c Var 'aux580' direct represents '31' with '6421'
6418 -6420 6421 0
-6421 6420 0
-6421 -6418 0
c Var 'aux580' direct represents '32' with '-6420'
6359 6361 6363 6365 6367 6369 6371 6373 6375 6377 6379 6381 6383 6385 6387 6389 6391 6393 6395 6397 6399 6401 6403 6405 6407 6409 6411 6413 6415 6417 6419 6421 -6420 0
c Encoding variable: aux581 with domain: int(0..16) (representing constraint (shift(x_00004_00004, -1) + shift(x_00006_00006, -1)))
c Both direct and order encoding.
c Var 'aux581' order represents '0' with '6422'
c Var 'aux581' direct represents '0' with '6422'
c Var 'aux581' order represents '1' with '6423'
-6422 6423 0
c Var 'aux581' direct represents '1' with '6424'
6422 -6423 6424 0
-6424 6423 0
-6424 -6422 0
c Var 'aux581' order represents '2' with '6425'
-6423 6425 0
c Var 'aux581' direct represents '2' with '6426'
6423 -6425 6426 0
-6426 6425 0
-6426 -6423 0
c Var 'aux581' order represents '3' with '6427'
-6425 6427 0
c Var 'aux581' direct represents '3' with '6428'
6425 -6427 6428 0
-6428 6427 0
-6428 -6425 0
c Var 'aux581' order represents '4' with '6429'
-6427 6429 0
c Var 'aux581' direct represents '4' with '6430'
6427 -6429 6430 0
-6430 6429 0
-6430 -6427 0
c Var 'aux581' order represents '5' with '6431'
-6429 6431 0
c Var 'aux581' direct represents '5' with '6432'
6429 -6431 6432 0
-6432 6431 0
-6432 -6429 0
c Var 'aux581' order represents '6' with '6433'
-6431 6433 0
c Var 'aux581' direct represents '6' with '6434'
6431 -6433 6434 0
-6434 6433 0
-6434 -6431 0
c Var 'aux581' order represents '7' with '6435'
-6433 6435 0
c Var 'aux581' direct represents '7' with '6436'
6433 -6435 6436 0
-6436 6435 0
-6436 -6433 0
c Var 'aux581' order represents '8' with '6437'
-6435 6437 0
c Var 'aux581' direct represents '8' with '6438'
6435 -6437 6438 0
-6438 6437 0
-6438 -6435 0
c Var 'aux581' order represents '9' with '6439'
-6437 6439 0
c Var 'aux581' direct represents '9' with '6440'
6437 -6439 6440 0
-6440 6439 0
-6440 -6437 0
c Var 'aux581' order represents '10' with '6441'
-6439 6441 0
c Var 'aux581' direct represents '10' with '6442'
6439 -6441 6442 0
-6442 6441 0
-6442 -6439 0
c Var 'aux581' order represents '11' with '6443'
-6441 6443 0
c Var 'aux581' direct represents '11' with '6444'
6441 -6443 6444 0
-6444 6443 0
-6444 -6441 0
c Var 'aux581' order represents '12' with '6445'
-6443 6445 0
c Var 'aux581' direct represents '12' with '6446'
6443 -6445 6446 0
-6446 6445 0
-6446 -6443 0
c Var 'aux581' order represents '13' with '6447'
-6445 6447 0
c Var 'aux581' direct represents '13' with '6448'
6445 -6447 6448 0
-6448 6447 0
-6448 -6445 0
c Var 'aux581' order represents '14' with '6449'
-6447 6449 0
c Var 'aux581' direct represents '14' with '6450'
6447 -6449 6450 0
-6450 6449 0
-6450 -6447 0
c Var 'aux581' order represents '15' with '6451'
-6449 6451 0
c Var 'aux581' direct represents '15' with '6452'
6449 -6451 6452 0
-6452 6451 0
-6452 -6449 0
c Var 'aux581' direct represents '16' with '-6451'
6422 6424 6426 6428 6430 6432 6434 6436 6438 6440 6442 6444 6446 6448 6450 6452 -6451 0
c Encoding variable: aux582 with domain: int(0..16) (representing constraint (shift(x_00006_00005, -1) + shift(x_00004_00005, -1)))
c Both direct and order encoding.
c Var 'aux582' order represents '0' with '6453'
c Var 'aux582' direct represents '0' with '6453'
c Var 'aux582' order represents '1' with '6454'
-6453 6454 0
c Var 'aux582' direct represents '1' with '6455'
6453 -6454 6455 0
-6455 6454 0
-6455 -6453 0
c Var 'aux582' order represents '2' with '6456'
-6454 6456 0
c Var 'aux582' direct represents '2' with '6457'
6454 -6456 6457 0
-6457 6456 0
-6457 -6454 0
c Var 'aux582' order represents '3' with '6458'
-6456 6458 0
c Var 'aux582' direct represents '3' with '6459'
6456 -6458 6459 0
-6459 6458 0
-6459 -6456 0
c Var 'aux582' order represents '4' with '6460'
-6458 6460 0
c Var 'aux582' direct represents '4' with '6461'
6458 -6460 6461 0
-6461 6460 0
-6461 -6458 0
c Var 'aux582' order represents '5' with '6462'
-6460 6462 0
c Var 'aux582' direct represents '5' with '6463'
6460 -6462 6463 0
-6463 6462 0
-6463 -6460 0
c Var 'aux582' order represents '6' with '6464'
-6462 6464 0
c Var 'aux582' direct represents '6' with '6465'
6462 -6464 6465 0
-6465 6464 0
-6465 -6462 0
c Var 'aux582' order represents '7' with '6466'
-6464 6466 0
c Var 'aux582' direct represents '7' with '6467'
6464 -6466 6467 0
-6467 6466 0
-6467 -6464 0
c Var 'aux582' order represents '8' with '6468'
-6466 6468 0
c Var 'aux582' direct represents '8' with '6469'
6466 -6468 6469 0
-6469 6468 0
-6469 -6466 0
c Var 'aux582' order represents '9' with '6470'
-6468 6470 0
c Var 'aux582' direct represents '9' with '6471'
6468 -6470 6471 0
-6471 6470 0
-6471 -6468 0
c Var 'aux582' order represents '10' with '6472'
-6470 6472 0
c Var 'aux582' direct represents '10' with '6473'
6470 -6472 6473 0
-6473 6472 0
-6473 -6470 0
c Var 'aux582' order represents '11' with '6474'
-6472 6474 0
c Var 'aux582' direct represents '11' with '6475'
6472 -6474 6475 0
-6475 6474 0
-6475 -6472 0
c Var 'aux582' order represents '12' with '6476'
-6474 6476 0
c Var 'aux582' direct represents '12' with '6477'
6474 -6476 6477 0
-6477 6476 0
-6477 -6474 0
c Var 'aux582' order represents '13' with '6478'
-6476 6478 0
c Var 'aux582' direct represents '13' with '6479'
6476 -6478 6479 0
-6479 6478 0
-6479 -6476 0
c Var 'aux582' order represents '14' with '6480'
-6478 6480 0
c Var 'aux582' direct represents '14' with '6481'
6478 -6480 6481 0
-6481 6480 0
-6481 -6478 0
c Var 'aux582' order represents '15' with '6482'
-6480 6482 0
c Var 'aux582' direct represents '15' with '6483'
6480 -6482 6483 0
-6483 6482 0
-6483 -6480 0
c Var 'aux582' direct represents '16' with '-6482'
6453 6455 6457 6459 6461 6463 6465 6467 6469 6471 6473 6475 6477 6479 6481 6483 -6482 0
c Encoding variable: aux583 with domain: int(0..16) (representing constraint (shift(x_00006_00004, -1) + shift(x_00005_00004, -1)))
c Both direct and order encoding.
c Var 'aux583' order represents '0' with '6484'
c Var 'aux583' direct represents '0' with '6484'
c Var 'aux583' order represents '1' with '6485'
-6484 6485 0
c Var 'aux583' direct represents '1' with '6486'
6484 -6485 6486 0
-6486 6485 0
-6486 -6484 0
c Var 'aux583' order represents '2' with '6487'
-6485 6487 0
c Var 'aux583' direct represents '2' with '6488'
6485 -6487 6488 0
-6488 6487 0
-6488 -6485 0
c Var 'aux583' order represents '3' with '6489'
-6487 6489 0
c Var 'aux583' direct represents '3' with '6490'
6487 -6489 6490 0
-6490 6489 0
-6490 -6487 0
c Var 'aux583' order represents '4' with '6491'
-6489 6491 0
c Var 'aux583' direct represents '4' with '6492'
6489 -6491 6492 0
-6492 6491 0
-6492 -6489 0
c Var 'aux583' order represents '5' with '6493'
-6491 6493 0
c Var 'aux583' direct represents '5' with '6494'
6491 -6493 6494 0
-6494 6493 0
-6494 -6491 0
c Var 'aux583' order represents '6' with '6495'
-6493 6495 0
c Var 'aux583' direct represents '6' with '6496'
6493 -6495 6496 0
-6496 6495 0
-6496 -6493 0
c Var 'aux583' order represents '7' with '6497'
-6495 6497 0
c Var 'aux583' direct represents '7' with '6498'
6495 -6497 6498 0
-6498 6497 0
-6498 -6495 0
c Var 'aux583' order represents '8' with '6499'
-6497 6499 0
c Var 'aux583' direct represents '8' with '6500'
6497 -6499 6500 0
-6500 6499 0
-6500 -6497 0
c Var 'aux583' order represents '9' with '6501'
-6499 6501 0
c Var 'aux583' direct represents '9' with '6502'
6499 -6501 6502 0
-6502 6501 0
-6502 -6499 0
c Var 'aux583' order represents '10' with '6503'
-6501 6503 0
c Var 'aux583' direct represents '10' with '6504'
6501 -6503 6504 0
-6504 6503 0
-6504 -6501 0
c Var 'aux583' order represents '11' with '6505'
-6503 6505 0
c Var 'aux583' direct represents '11' with '6506'
6503 -6505 6506 0
-6506 6505 0
-6506 -6503 0
c Var 'aux583' order represents '12' with '6507'
-6505 6507 0
c Var 'aux583' direct represents '12' with '6508'
6505 -6507 6508 0
-6508 6507 0
-6508 -6505 0
c Var 'aux583' order represents '13' with '6509'
-6507 6509 0
c Var 'aux583' direct represents '13' with '6510'
6507 -6509 6510 0
-6510 6509 0
-6510 -6507 0
c Var 'aux583' order represents '14' with '6511'
-6509 6511 0
c Var 'aux583' direct represents '14' with '6512'
6509 -6511 6512 0
-6512 6511 0
-6512 -6509 0
c Var 'aux583' order represents '15' with '6513'
-6511 6513 0
c Var 'aux583' direct represents '15' with '6514'
6511 -6513 6514 0
-6514 6513 0
-6514 -6511 0
c Var 'aux583' direct represents '16' with '-6513'
6484 6486 6488 6490 6492 6494 6496 6498 6500 6502 6504 6506 6508 6510 6512 6514 -6513 0
c Encoding variable: aux584 with domain: int(0..16) (representing constraint (shift(x_00005_00006, -1) + shift(x_00005_00005, -1)))
c Both direct and order encoding.
c Var 'aux584' order represents '0' with '6515'
c Var 'aux584' direct represents '0' with '6515'
c Var 'aux584' order represents '1' with '6516'
-6515 6516 0
c Var 'aux584' direct represents '1' with '6517'
6515 -6516 6517 0
-6517 6516 0
-6517 -6515 0
c Var 'aux584' order represents '2' with '6518'
-6516 6518 0
c Var 'aux584' direct represents '2' with '6519'
6516 -6518 6519 0
-6519 6518 0
-6519 -6516 0
c Var 'aux584' order represents '3' with '6520'
-6518 6520 0
c Var 'aux584' direct represents '3' with '6521'
6518 -6520 6521 0
-6521 6520 0
-6521 -6518 0
c Var 'aux584' order represents '4' with '6522'
-6520 6522 0
c Var 'aux584' direct represents '4' with '6523'
6520 -6522 6523 0
-6523 6522 0
-6523 -6520 0
c Var 'aux584' order represents '5' with '6524'
-6522 6524 0
c Var 'aux584' direct represents '5' with '6525'
6522 -6524 6525 0
-6525 6524 0
-6525 -6522 0
c Var 'aux584' order represents '6' with '6526'
-6524 6526 0
c Var 'aux584' direct represents '6' with '6527'
6524 -6526 6527 0
-6527 6526 0
-6527 -6524 0
c Var 'aux584' order represents '7' with '6528'
-6526 6528 0
c Var 'aux584' direct represents '7' with '6529'
6526 -6528 6529 0
-6529 6528 0
-6529 -6526 0
c Var 'aux584' order represents '8' with '6530'
-6528 6530 0
c Var 'aux584' direct represents '8' with '6531'
6528 -6530 6531 0
-6531 6530 0
-6531 -6528 0
c Var 'aux584' order represents '9' with '6532'
-6530 6532 0
c Var 'aux584' direct represents '9' with '6533'
6530 -6532 6533 0
-6533 6532 0
-6533 -6530 0
c Var 'aux584' order represents '10' with '6534'
-6532 6534 0
c Var 'aux584' direct represents '10' with '6535'
6532 -6534 6535 0
-6535 6534 0
-6535 -6532 0
c Var 'aux584' order represents '11' with '6536'
-6534 6536 0
c Var 'aux584' direct represents '11' with '6537'
6534 -6536 6537 0
-6537 6536 0
-6537 -6534 0
c Var 'aux584' order represents '12' with '6538'
-6536 6538 0
c Var 'aux584' direct represents '12' with '6539'
6536 -6538 6539 0
-6539 6538 0
-6539 -6536 0
c Var 'aux584' order represents '13' with '6540'
-6538 6540 0
c Var 'aux584' direct represents '13' with '6541'
6538 -6540 6541 0
-6541 6540 0
-6541 -6538 0
c Var 'aux584' order represents '14' with '6542'
-6540 6542 0
c Var 'aux584' direct represents '14' with '6543'
6540 -6542 6543 0
-6543 6542 0
-6543 -6540 0
c Var 'aux584' order represents '15' with '6544'
-6542 6544 0
c Var 'aux584' direct represents '15' with '6545'
6542 -6544 6545 0
-6545 6544 0
-6545 -6542 0
c Var 'aux584' direct represents '16' with '-6544'
6515 6517 6519 6521 6523 6525 6527 6529 6531 6533 6535 6537 6539 6541 6543 6545 -6544 0
c Encoding variable: aux585 with domain: int(0..24) (representing constraint (shift(x_00004_00006, -1) + aux584))
c Both direct and order encoding.
c Var 'aux585' order represents '0' with '6546'
c Var 'aux585' direct represents '0' with '6546'
c Var 'aux585' order represents '1' with '6547'
-6546 6547 0
c Var 'aux585' direct represents '1' with '6548'
6546 -6547 6548 0
-6548 6547 0
-6548 -6546 0
c Var 'aux585' order represents '2' with '6549'
-6547 6549 0
c Var 'aux585' direct represents '2' with '6550'
6547 -6549 6550 0
-6550 6549 0
-6550 -6547 0
c Var 'aux585' order represents '3' with '6551'
-6549 6551 0
c Var 'aux585' direct represents '3' with '6552'
6549 -6551 6552 0
-6552 6551 0
-6552 -6549 0
c Var 'aux585' order represents '4' with '6553'
-6551 6553 0
c Var 'aux585' direct represents '4' with '6554'
6551 -6553 6554 0
-6554 6553 0
-6554 -6551 0
c Var 'aux585' order represents '5' with '6555'
-6553 6555 0
c Var 'aux585' direct represents '5' with '6556'
6553 -6555 6556 0
-6556 6555 0
-6556 -6553 0
c Var 'aux585' order represents '6' with '6557'
-6555 6557 0
c Var 'aux585' direct represents '6' with '6558'
6555 -6557 6558 0
-6558 6557 0
-6558 -6555 0
c Var 'aux585' order represents '7' with '6559'
-6557 6559 0
c Var 'aux585' direct represents '7' with '6560'
6557 -6559 6560 0
-6560 6559 0
-6560 -6557 0
c Var 'aux585' order represents '8' with '6561'
-6559 6561 0
c Var 'aux585' direct represents '8' with '6562'
6559 -6561 6562 0
-6562 6561 0
-6562 -6559 0
c Var 'aux585' order represents '9' with '6563'
-6561 6563 0
c Var 'aux585' direct represents '9' with '6564'
6561 -6563 6564 0
-6564 6563 0
-6564 -6561 0
c Var 'aux585' order represents '10' with '6565'
-6563 6565 0
c Var 'aux585' direct represents '10' with '6566'
6563 -6565 6566 0
-6566 6565 0
-6566 -6563 0
c Var 'aux585' order represents '11' with '6567'
-6565 6567 0
c Var 'aux585' direct represents '11' with '6568'
6565 -6567 6568 0
-6568 6567 0
-6568 -6565 0
c Var 'aux585' order represents '12' with '6569'
-6567 6569 0
c Var 'aux585' direct represents '12' with '6570'
6567 -6569 6570 0
-6570 6569 0
-6570 -6567 0
c Var 'aux585' order represents '13' with '6571'
-6569 6571 0
c Var 'aux585' direct represents '13' with '6572'
6569 -6571 6572 0
-6572 6571 0
-6572 -6569 0
c Var 'aux585' order represents '14' with '6573'
-6571 6573 0
c Var 'aux585' direct represents '14' with '6574'
6571 -6573 6574 0
-6574 6573 0
-6574 -6571 0
c Var 'aux585' order represents '15' with '6575'
-6573 6575 0
c Var 'aux585' direct represents '15' with '6576'
6573 -6575 6576 0
-6576 6575 0
-6576 -6573 0
c Var 'aux585' order represents '16' with '6577'
-6575 6577 0
c Var 'aux585' direct represents '16' with '6578'
6575 -6577 6578 0
-6578 6577 0
-6578 -6575 0
c Var 'aux585' order represents '17' with '6579'
-6577 6579 0
c Var 'aux585' direct represents '17' with '6580'
6577 -6579 6580 0
-6580 6579 0
-6580 -6577 0
c Var 'aux585' order represents '18' with '6581'
-6579 6581 0
c Var 'aux585' direct represents '18' with '6582'
6579 -6581 6582 0
-6582 6581 0
-6582 -6579 0
c Var 'aux585' order represents '19' with '6583'
-6581 6583 0
c Var 'aux585' direct represents '19' with '6584'
6581 -6583 6584 0
-6584 6583 0
-6584 -6581 0
c Var 'aux585' order represents '20' with '6585'
-6583 6585 0
c Var 'aux585' direct represents '20' with '6586'
6583 -6585 6586 0
-6586 6585 0
-6586 -6583 0
c Var 'aux585' order represents '21' with '6587'
-6585 6587 0
c Var 'aux585' direct represents '21' with '6588'
6585 -6587 6588 0
-6588 6587 0
-6588 -6585 0
c Var 'aux585' order represents '22' with '6589'
-6587 6589 0
c Var 'aux585' direct represents '22' with '6590'
6587 -6589 6590 0
-6590 6589 0
-6590 -6587 0
c Var 'aux585' order represents '23' with '6591'
-6589 6591 0
c Var 'aux585' direct represents '23' with '6592'
6589 -6591 6592 0
-6592 6591 0
-6592 -6589 0
c Var 'aux585' direct represents '24' with '-6591'
6546 6548 6550 6552 6554 6556 6558 6560 6562 6564 6566 6568 6570 6572 6574 6576 6578 6580 6582 6584 6586 6588 6590 6592 -6591 0
c Encoding variable: aux586 with domain: int(0..32) (representing constraint (aux581 + aux583))
c Both direct and order encoding.
c Var 'aux586' order represents '0' with '6593'
c Var 'aux586' direct represents '0' with '6593'
c Var 'aux586' order represents '1' with '6594'
-6593 6594 0
c Var 'aux586' direct represents '1' with '6595'
6593 -6594 6595 0
-6595 6594 0
-6595 -6593 0
c Var 'aux586' order represents '2' with '6596'
-6594 6596 0
c Var 'aux586' direct represents '2' with '6597'
6594 -6596 6597 0
-6597 6596 0
-6597 -6594 0
c Var 'aux586' order represents '3' with '6598'
-6596 6598 0
c Var 'aux586' direct represents '3' with '6599'
6596 -6598 6599 0
-6599 6598 0
-6599 -6596 0
c Var 'aux586' order represents '4' with '6600'
-6598 6600 0
c Var 'aux586' direct represents '4' with '6601'
6598 -6600 6601 0
-6601 6600 0
-6601 -6598 0
c Var 'aux586' order represents '5' with '6602'
-6600 6602 0
c Var 'aux586' direct represents '5' with '6603'
6600 -6602 6603 0
-6603 6602 0
-6603 -6600 0
c Var 'aux586' order represents '6' with '6604'
-6602 6604 0
c Var 'aux586' direct represents '6' with '6605'
6602 -6604 6605 0
-6605 6604 0
-6605 -6602 0
c Var 'aux586' order represents '7' with '6606'
-6604 6606 0
c Var 'aux586' direct represents '7' with '6607'
6604 -6606 6607 0
-6607 6606 0
-6607 -6604 0
c Var 'aux586' order represents '8' with '6608'
-6606 6608 0
c Var 'aux586' direct represents '8' with '6609'
6606 -6608 6609 0
-6609 6608 0
-6609 -6606 0
c Var 'aux586' order represents '9' with '6610'
-6608 6610 0
c Var 'aux586' direct represents '9' with '6611'
6608 -6610 6611 0
-6611 6610 0
-6611 -6608 0
c Var 'aux586' order represents '10' with '6612'
-6610 6612 0
c Var 'aux586' direct represents '10' with '6613'
6610 -6612 6613 0
-6613 6612 0
-6613 -6610 0
c Var 'aux586' order represents '11' with '6614'
-6612 6614 0
c Var 'aux586' direct represents '11' with '6615'
6612 -6614 6615 0
-6615 6614 0
-6615 -6612 0
c Var 'aux586' order represents '12' with '6616'
-6614 6616 0
c Var 'aux586' direct represents '12' with '6617'
6614 -6616 6617 0
-6617 6616 0
-6617 -6614 0
c Var 'aux586' order represents '13' with '6618'
-6616 6618 0
c Var 'aux586' direct represents '13' with '6619'
6616 -6618 6619 0
-6619 6618 0
-6619 -6616 0
c Var 'aux586' order represents '14' with '6620'
-6618 6620 0
c Var 'aux586' direct represents '14' with '6621'
6618 -6620 6621 0
-6621 6620 0
-6621 -6618 0
c Var 'aux586' order represents '15' with '6622'
-6620 6622 0
c Var 'aux586' direct represents '15' with '6623'
6620 -6622 6623 0
-6623 6622 0
-6623 -6620 0
c Var 'aux586' order represents '16' with '6624'
-6622 6624 0
c Var 'aux586' direct represents '16' with '6625'
6622 -6624 6625 0
-6625 6624 0
-6625 -6622 0
c Var 'aux586' order represents '17' with '6626'
-6624 6626 0
c Var 'aux586' direct represents '17' with '6627'
6624 -6626 6627 0
-6627 6626 0
-6627 -6624 0
c Var 'aux586' order represents '18' with '6628'
-6626 6628 0
c Var 'aux586' direct represents '18' with '6629'
6626 -6628 6629 0
-6629 6628 0
-6629 -6626 0
c Var 'aux586' order represents '19' with '6630'
-6628 6630 0
c Var 'aux586' direct represents '19' with '6631'
6628 -6630 6631 0
-6631 6630 0
-6631 -6628 0
c Var 'aux586' order represents '20' with '6632'
-6630 6632 0
c Var 'aux586' direct represents '20' with '6633'
6630 -6632 6633 0
-6633 6632 0
-6633 -6630 0
c Var 'aux586' order represents '21' with '6634'
-6632 6634 0
c Var 'aux586' direct represents '21' with '6635'
6632 -6634 6635 0
-6635 6634 0
-6635 -6632 0
c Var 'aux586' order represents '22' with '6636'
-6634 6636 0
c Var 'aux586' direct represents '22' with '6637'
6634 -6636 6637 0
-6637 6636 0
-6637 -6634 0
c Var 'aux586' order represents '23' with '6638'
-6636 6638 0
c Var 'aux586' direct represents '23' with '6639'
6636 -6638 6639 0
-6639 6638 0
-6639 -6636 0
c Var 'aux586' order represents '24' with '6640'
-6638 6640 0
c Var 'aux586' direct represents '24' with '6641'
6638 -6640 6641 0
-6641 6640 0
-6641 -6638 0
c Var 'aux586' order represents '25' with '6642'
-6640 6642 0
c Var 'aux586' direct represents '25' with '6643'
6640 -6642 6643 0
-6643 6642 0
-6643 -6640 0
c Var 'aux586' order represents '26' with '6644'
-6642 6644 0
c Var 'aux586' direct represents '26' with '6645'
6642 -6644 6645 0
-6645 6644 0
-6645 -6642 0
c Var 'aux586' order represents '27' with '6646'
-6644 6646 0
c Var 'aux586' direct represents '27' with '6647'
6644 -6646 6647 0
-6647 6646 0
-6647 -6644 0
c Var 'aux586' order represents '28' with '6648'
-6646 6648 0
c Var 'aux586' direct represents '28' with '6649'
6646 -6648 6649 0
-6649 6648 0
-6649 -6646 0
c Var 'aux586' order represents '29' with '6650'
-6648 6650 0
c Var 'aux586' direct represents '29' with '6651'
6648 -6650 6651 0
-6651 6650 0
-6651 -6648 0
c Var 'aux586' order represents '30' with '6652'
-6650 6652 0
c Var 'aux586' direct represents '30' with '6653'
6650 -6652 6653 0
-6653 6652 0
-6653 -6650 0
c Var 'aux586' order represents '31' with '6654'
-6652 6654 0
c Var 'aux586' direct represents '31' with '6655'
6652 -6654 6655 0
-6655 6654 0
-6655 -6652 0
c Var 'aux586' direct represents '32' with '-6654'
6593 6595 6597 6599 6601 6603 6605 6607 6609 6611 6613 6615 6617 6619 6621 6623 6625 6627 6629 6631 6633 6635 6637 6639 6641 6643 6645 6647 6649 6651 6653 6655 -6654 0
c Encoding variable: aux587 with domain: int(0..16) (representing constraint (shift(x_00004_00007, -1) + shift(x_00006_00009, -1)))
c Both direct and order encoding.
c Var 'aux587' order represents '0' with '6656'
c Var 'aux587' direct represents '0' with '6656'
c Var 'aux587' order represents '1' with '6657'
-6656 6657 0
c Var 'aux587' direct represents '1' with '6658'
6656 -6657 6658 0
-6658 6657 0
-6658 -6656 0
c Var 'aux587' order represents '2' with '6659'
-6657 6659 0
c Var 'aux587' direct represents '2' with '6660'
6657 -6659 6660 0
-6660 6659 0
-6660 -6657 0
c Var 'aux587' order represents '3' with '6661'
-6659 6661 0
c Var 'aux587' direct represents '3' with '6662'
6659 -6661 6662 0
-6662 6661 0
-6662 -6659 0
c Var 'aux587' order represents '4' with '6663'
-6661 6663 0
c Var 'aux587' direct represents '4' with '6664'
6661 -6663 6664 0
-6664 6663 0
-6664 -6661 0
c Var 'aux587' order represents '5' with '6665'
-6663 6665 0
c Var 'aux587' direct represents '5' with '6666'
6663 -6665 6666 0
-6666 6665 0
-6666 -6663 0
c Var 'aux587' order represents '6' with '6667'
-6665 6667 0
c Var 'aux587' direct represents '6' with '6668'
6665 -6667 6668 0
-6668 6667 0
-6668 -6665 0
c Var 'aux587' order represents '7' with '6669'
-6667 6669 0
c Var 'aux587' direct represents '7' with '6670'
6667 -6669 6670 0
-6670 6669 0
-6670 -6667 0
c Var 'aux587' order represents '8' with '6671'
-6669 6671 0
c Var 'aux587' direct represents '8' with '6672'
6669 -6671 6672 0
-6672 6671 0
-6672 -6669 0
c Var 'aux587' order represents '9' with '6673'
-6671 6673 0
c Var 'aux587' direct represents '9' with '6674'
6671 -6673 6674 0
-6674 6673 0
-6674 -6671 0
c Var 'aux587' order represents '10' with '6675'
-6673 6675 0
c Var 'aux587' direct represents '10' with '6676'
6673 -6675 6676 0
-6676 6675 0
-6676 -6673 0
c Var 'aux587' order represents '11' with '6677'
-6675 6677 0
c Var 'aux587' direct represents '11' with '6678'
6675 -6677 6678 0
-6678 6677 0
-6678 -6675 0
c Var 'aux587' order represents '12' with '6679'
-6677 6679 0
c Var 'aux587' direct represents '12' with '6680'
6677 -6679 6680 0
-6680 6679 0
-6680 -6677 0
c Var 'aux587' order represents '13' with '6681'
-6679 6681 0
c Var 'aux587' direct represents '13' with '6682'
6679 -6681 6682 0
-6682 6681 0
-6682 -6679 0
c Var 'aux587' order represents '14' with '6683'
-6681 6683 0
c Var 'aux587' direct represents '14' with '6684'
6681 -6683 6684 0
-6684 6683 0
-6684 -6681 0
c Var 'aux587' order represents '15' with '6685'
-6683 6685 0
c Var 'aux587' direct represents '15' with '6686'
6683 -6685 6686 0
-6686 6685 0
-6686 -6683 0
c Var 'aux587' direct represents '16' with '-6685'
6656 6658 6660 6662 6664 6666 6668 6670 6672 6674 6676 6678 6680 6682 6684 6686 -6685 0
c Encoding variable: aux588 with domain: int(0..16) (representing constraint (shift(x_00006_00008, -1) + shift(x_00004_00008, -1)))
c Both direct and order encoding.
c Var 'aux588' order represents '0' with '6687'
c Var 'aux588' direct represents '0' with '6687'
c Var 'aux588' order represents '1' with '6688'
-6687 6688 0
c Var 'aux588' direct represents '1' with '6689'
6687 -6688 6689 0
-6689 6688 0
-6689 -6687 0
c Var 'aux588' order represents '2' with '6690'
-6688 6690 0
c Var 'aux588' direct represents '2' with '6691'
6688 -6690 6691 0
-6691 6690 0
-6691 -6688 0
c Var 'aux588' order represents '3' with '6692'
-6690 6692 0
c Var 'aux588' direct represents '3' with '6693'
6690 -6692 6693 0
-6693 6692 0
-6693 -6690 0
c Var 'aux588' order represents '4' with '6694'
-6692 6694 0
c Var 'aux588' direct represents '4' with '6695'
6692 -6694 6695 0
-6695 6694 0
-6695 -6692 0
c Var 'aux588' order represents '5' with '6696'
-6694 6696 0
c Var 'aux588' direct represents '5' with '6697'
6694 -6696 6697 0
-6697 6696 0
-6697 -6694 0
c Var 'aux588' order represents '6' with '6698'
-6696 6698 0
c Var 'aux588' direct represents '6' with '6699'
6696 -6698 6699 0
-6699 6698 0
-6699 -6696 0
c Var 'aux588' order represents '7' with '6700'
-6698 6700 0
c Var 'aux588' direct represents '7' with '6701'
6698 -6700 6701 0
-6701 6700 0
-6701 -6698 0
c Var 'aux588' order represents '8' with '6702'
-6700 6702 0
c Var 'aux588' direct represents '8' with '6703'
6700 -6702 6703 0
-6703 6702 0
-6703 -6700 0
c Var 'aux588' order represents '9' with '6704'
-6702 6704 0
c Var 'aux588' direct represents '9' with '6705'
6702 -6704 6705 0
-6705 6704 0
-6705 -6702 0
c Var 'aux588' order represents '10' with '6706'
-6704 6706 0
c Var 'aux588' direct represents '10' with '6707'
6704 -6706 6707 0
-6707 6706 0
-6707 -6704 0
c Var 'aux588' order represents '11' with '6708'
-6706 6708 0
c Var 'aux588' direct represents '11' with '6709'
6706 -6708 6709 0
-6709 6708 0
-6709 -6706 0
c Var 'aux588' order represents '12' with '6710'
-6708 6710 0
c Var 'aux588' direct represents '12' with '6711'
6708 -6710 6711 0
-6711 6710 0
-6711 -6708 0
c Var 'aux588' order represents '13' with '6712'
-6710 6712 0
c Var 'aux588' direct represents '13' with '6713'
6710 -6712 6713 0
-6713 6712 0
-6713 -6710 0
c Var 'aux588' order represents '14' with '6714'
-6712 6714 0
c Var 'aux588' direct represents '14' with '6715'
6712 -6714 6715 0
-6715 6714 0
-6715 -6712 0
c Var 'aux588' order represents '15' with '6716'
-6714 6716 0
c Var 'aux588' direct represents '15' with '6717'
6714 -6716 6717 0
-6717 6716 0
-6717 -6714 0
c Var 'aux588' direct represents '16' with '-6716'
6687 6689 6691 6693 6695 6697 6699 6701 6703 6705 6707 6709 6711 6713 6715 6717 -6716 0
c Encoding variable: aux589 with domain: int(0..16) (representing constraint (shift(x_00006_00007, -1) + shift(x_00005_00007, -1)))
c Both direct and order encoding.
c Var 'aux589' order represents '0' with '6718'
c Var 'aux589' direct represents '0' with '6718'
c Var 'aux589' order represents '1' with '6719'
-6718 6719 0
c Var 'aux589' direct represents '1' with '6720'
6718 -6719 6720 0
-6720 6719 0
-6720 -6718 0
c Var 'aux589' order represents '2' with '6721'
-6719 6721 0
c Var 'aux589' direct represents '2' with '6722'
6719 -6721 6722 0
-6722 6721 0
-6722 -6719 0
c Var 'aux589' order represents '3' with '6723'
-6721 6723 0
c Var 'aux589' direct represents '3' with '6724'
6721 -6723 6724 0
-6724 6723 0
-6724 -6721 0
c Var 'aux589' order represents '4' with '6725'
-6723 6725 0
c Var 'aux589' direct represents '4' with '6726'
6723 -6725 6726 0
-6726 6725 0
-6726 -6723 0
c Var 'aux589' order represents '5' with '6727'
-6725 6727 0
c Var 'aux589' direct represents '5' with '6728'
6725 -6727 6728 0
-6728 6727 0
-6728 -6725 0
c Var 'aux589' order represents '6' with '6729'
-6727 6729 0
c Var 'aux589' direct represents '6' with '6730'
6727 -6729 6730 0
-6730 6729 0
-6730 -6727 0
c Var 'aux589' order represents '7' with '6731'
-6729 6731 0
c Var 'aux589' direct represents '7' with '6732'
6729 -6731 6732 0
-6732 6731 0
-6732 -6729 0
c Var 'aux589' order represents '8' with '6733'
-6731 6733 0
c Var 'aux589' direct represents '8' with '6734'
6731 -6733 6734 0
-6734 6733 0
-6734 -6731 0
c Var 'aux589' order represents '9' with '6735'
-6733 6735 0
c Var 'aux589' direct represents '9' with '6736'
6733 -6735 6736 0
-6736 6735 0
-6736 -6733 0
c Var 'aux589' order represents '10' with '6737'
-6735 6737 0
c Var 'aux589' direct represents '10' with '6738'
6735 -6737 6738 0
-6738 6737 0
-6738 -6735 0
c Var 'aux589' order represents '11' with '6739'
-6737 6739 0
c Var 'aux589' direct represents '11' with '6740'
6737 -6739 6740 0
-6740 6739 0
-6740 -6737 0
c Var 'aux589' order represents '12' with '6741'
-6739 6741 0
c Var 'aux589' direct represents '12' with '6742'
6739 -6741 6742 0
-6742 6741 0
-6742 -6739 0
c Var 'aux589' order represents '13' with '6743'
-6741 6743 0
c Var 'aux589' direct represents '13' with '6744'
6741 -6743 6744 0
-6744 6743 0
-6744 -6741 0
c Var 'aux589' order represents '14' with '6745'
-6743 6745 0
c Var 'aux589' direct represents '14' with '6746'
6743 -6745 6746 0
-6746 6745 0
-6746 -6743 0
c Var 'aux589' order represents '15' with '6747'
-6745 6747 0
c Var 'aux589' direct represents '15' with '6748'
6745 -6747 6748 0
-6748 6747 0
-6748 -6745 0
c Var 'aux589' direct represents '16' with '-6747'
6718 6720 6722 6724 6726 6728 6730 6732 6734 6736 6738 6740 6742 6744 6746 6748 -6747 0
c Encoding variable: aux590 with domain: int(0..16) (representing constraint (shift(x_00005_00009, -1) + shift(x_00005_00008, -1)))
c Both direct and order encoding.
c Var 'aux590' order represents '0' with '6749'
c Var 'aux590' direct represents '0' with '6749'
c Var 'aux590' order represents '1' with '6750'
-6749 6750 0
c Var 'aux590' direct represents '1' with '6751'
6749 -6750 6751 0
-6751 6750 0
-6751 -6749 0
c Var 'aux590' order represents '2' with '6752'
-6750 6752 0
c Var 'aux590' direct represents '2' with '6753'
6750 -6752 6753 0
-6753 6752 0
-6753 -6750 0
c Var 'aux590' order represents '3' with '6754'
-6752 6754 0
c Var 'aux590' direct represents '3' with '6755'
6752 -6754 6755 0
-6755 6754 0
-6755 -6752 0
c Var 'aux590' order represents '4' with '6756'
-6754 6756 0
c Var 'aux590' direct represents '4' with '6757'
6754 -6756 6757 0
-6757 6756 0
-6757 -6754 0
c Var 'aux590' order represents '5' with '6758'
-6756 6758 0
c Var 'aux590' direct represents '5' with '6759'
6756 -6758 6759 0
-6759 6758 0
-6759 -6756 0
c Var 'aux590' order represents '6' with '6760'
-6758 6760 0
c Var 'aux590' direct represents '6' with '6761'
6758 -6760 6761 0
-6761 6760 0
-6761 -6758 0
c Var 'aux590' order represents '7' with '6762'
-6760 6762 0
c Var 'aux590' direct represents '7' with '6763'
6760 -6762 6763 0
-6763 6762 0
-6763 -6760 0
c Var 'aux590' order represents '8' with '6764'
-6762 6764 0
c Var 'aux590' direct represents '8' with '6765'
6762 -6764 6765 0
-6765 6764 0
-6765 -6762 0
c Var 'aux590' order represents '9' with '6766'
-6764 6766 0
c Var 'aux590' direct represents '9' with '6767'
6764 -6766 6767 0
-6767 6766 0
-6767 -6764 0
c Var 'aux590' order represents '10' with '6768'
-6766 6768 0
c Var 'aux590' direct represents '10' with '6769'
6766 -6768 6769 0
-6769 6768 0
-6769 -6766 0
c Var 'aux590' order represents '11' with '6770'
-6768 6770 0
c Var 'aux590' direct represents '11' with '6771'
6768 -6770 6771 0
-6771 6770 0
-6771 -6768 0
c Var 'aux590' order represents '12' with '6772'
-6770 6772 0
c Var 'aux590' direct represents '12' with '6773'
6770 -6772 6773 0
-6773 6772 0
-6773 -6770 0
c Var 'aux590' order represents '13' with '6774'
-6772 6774 0
c Var 'aux590' direct represents '13' with '6775'
6772 -6774 6775 0
-6775 6774 0
-6775 -6772 0
c Var 'aux590' order represents '14' with '6776'
-6774 6776 0
c Var 'aux590' direct represents '14' with '6777'
6774 -6776 6777 0
-6777 6776 0
-6777 -6774 0
c Var 'aux590' order represents '15' with '6778'
-6776 6778 0
c Var 'aux590' direct represents '15' with '6779'
6776 -6778 6779 0
-6779 6778 0
-6779 -6776 0
c Var 'aux590' direct represents '16' with '-6778'
6749 6751 6753 6755 6757 6759 6761 6763 6765 6767 6769 6771 6773 6775 6777 6779 -6778 0
c Encoding variable: aux591 with domain: int(0..24) (representing constraint (shift(x_00004_00009, -1) + aux590))
c Both direct and order encoding.
c Var 'aux591' order represents '0' with '6780'
c Var 'aux591' direct represents '0' with '6780'
c Var 'aux591' order represents '1' with '6781'
-6780 6781 0
c Var 'aux591' direct represents '1' with '6782'
6780 -6781 6782 0
-6782 6781 0
-6782 -6780 0
c Var 'aux591' order represents '2' with '6783'
-6781 6783 0
c Var 'aux591' direct represents '2' with '6784'
6781 -6783 6784 0
-6784 6783 0
-6784 -6781 0
c Var 'aux591' order represents '3' with '6785'
-6783 6785 0
c Var 'aux591' direct represents '3' with '6786'
6783 -6785 6786 0
-6786 6785 0
-6786 -6783 0
c Var 'aux591' order represents '4' with '6787'
-6785 6787 0
c Var 'aux591' direct represents '4' with '6788'
6785 -6787 6788 0
-6788 6787 0
-6788 -6785 0
c Var 'aux591' order represents '5' with '6789'
-6787 6789 0
c Var 'aux591' direct represents '5' with '6790'
6787 -6789 6790 0
-6790 6789 0
-6790 -6787 0
c Var 'aux591' order represents '6' with '6791'
-6789 6791 0
c Var 'aux591' direct represents '6' with '6792'
6789 -6791 6792 0
-6792 6791 0
-6792 -6789 0
c Var 'aux591' order represents '7' with '6793'
-6791 6793 0
c Var 'aux591' direct represents '7' with '6794'
6791 -6793 6794 0
-6794 6793 0
-6794 -6791 0
c Var 'aux591' order represents '8' with '6795'
-6793 6795 0
c Var 'aux591' direct represents '8' with '6796'
6793 -6795 6796 0
-6796 6795 0
-6796 -6793 0
c Var 'aux591' order represents '9' with '6797'
-6795 6797 0
c Var 'aux591' direct represents '9' with '6798'
6795 -6797 6798 0
-6798 6797 0
-6798 -6795 0
c Var 'aux591' order represents '10' with '6799'
-6797 6799 0
c Var 'aux591' direct represents '10' with '6800'
6797 -6799 6800 0
-6800 6799 0
-6800 -6797 0
c Var 'aux591' order represents '11' with '6801'
-6799 6801 0
c Var 'aux591' direct represents '11' with '6802'
6799 -6801 6802 0
-6802 6801 0
-6802 -6799 0
c Var 'aux591' order represents '12' with '6803'
-6801 6803 0
c Var 'aux591' direct represents '12' with '6804'
6801 -6803 6804 0
-6804 6803 0
-6804 -6801 0
c Var 'aux591' order represents '13' with '6805'
-6803 6805 0
c Var 'aux591' direct represents '13' with '6806'
6803 -6805 6806 0
-6806 6805 0
-6806 -6803 0
c Var 'aux591' order represents '14' with '6807'
-6805 6807 0
c Var 'aux591' direct represents '14' with '6808'
6805 -6807 6808 0
-6808 6807 0
-6808 -6805 0
c Var 'aux591' order represents '15' with '6809'
-6807 6809 0
c Var 'aux591' direct represents '15' with '6810'
6807 -6809 6810 0
-6810 6809 0
-6810 -6807 0
c Var 'aux591' order represents '16' with '6811'
-6809 6811 0
c Var 'aux591' direct represents '16' with '6812'
6809 -6811 6812 0
-6812 6811 0
-6812 -6809 0
c Var 'aux591' order represents '17' with '6813'
-6811 6813 0
c Var 'aux591' direct represents '17' with '6814'
6811 -6813 6814 0
-6814 6813 0
-6814 -6811 0
c Var 'aux591' order represents '18' with '6815'
-6813 6815 0
c Var 'aux591' direct represents '18' with '6816'
6813 -6815 6816 0
-6816 6815 0
-6816 -6813 0
c Var 'aux591' order represents '19' with '6817'
-6815 6817 0
c Var 'aux591' direct represents '19' with '6818'
6815 -6817 6818 0
-6818 6817 0
-6818 -6815 0
c Var 'aux591' order represents '20' with '6819'
-6817 6819 0
c Var 'aux591' direct represents '20' with '6820'
6817 -6819 6820 0
-6820 6819 0
-6820 -6817 0
c Var 'aux591' order represents '21' with '6821'
-6819 6821 0
c Var 'aux591' direct represents '21' with '6822'
6819 -6821 6822 0
-6822 6821 0
-6822 -6819 0
c Var 'aux591' order represents '22' with '6823'
-6821 6823 0
c Var 'aux591' direct represents '22' with '6824'
6821 -6823 6824 0
-6824 6823 0
-6824 -6821 0
c Var 'aux591' order represents '23' with '6825'
-6823 6825 0
c Var 'aux591' direct represents '23' with '6826'
6823 -6825 6826 0
-6826 6825 0
-6826 -6823 0
c Var 'aux591' direct represents '24' with '-6825'
6780 6782 6784 6786 6788 6790 6792 6794 6796 6798 6800 6802 6804 6806 6808 6810 6812 6814 6816 6818 6820 6822 6824 6826 -6825 0
c Encoding variable: aux592 with domain: int(0..32) (representing constraint (aux587 + aux589))
c Both direct and order encoding.
c Var 'aux592' order represents '0' with '6827'
c Var 'aux592' direct represents '0' with '6827'
c Var 'aux592' order represents '1' with '6828'
-6827 6828 0
c Var 'aux592' direct represents '1' with '6829'
6827 -6828 6829 0
-6829 6828 0
-6829 -6827 0
c Var 'aux592' order represents '2' with '6830'
-6828 6830 0
c Var 'aux592' direct represents '2' with '6831'
6828 -6830 6831 0
-6831 6830 0
-6831 -6828 0
c Var 'aux592' order represents '3' with '6832'
-6830 6832 0
c Var 'aux592' direct represents '3' with '6833'
6830 -6832 6833 0
-6833 6832 0
-6833 -6830 0
c Var 'aux592' order represents '4' with '6834'
-6832 6834 0
c Var 'aux592' direct represents '4' with '6835'
6832 -6834 6835 0
-6835 6834 0
-6835 -6832 0
c Var 'aux592' order represents '5' with '6836'
-6834 6836 0
c Var 'aux592' direct represents '5' with '6837'
6834 -6836 6837 0
-6837 6836 0
-6837 -6834 0
c Var 'aux592' order represents '6' with '6838'
-6836 6838 0
c Var 'aux592' direct represents '6' with '6839'
6836 -6838 6839 0
-6839 6838 0
-6839 -6836 0
c Var 'aux592' order represents '7' with '6840'
-6838 6840 0
c Var 'aux592' direct represents '7' with '6841'
6838 -6840 6841 0
-6841 6840 0
-6841 -6838 0
c Var 'aux592' order represents '8' with '6842'
-6840 6842 0
c Var 'aux592' direct represents '8' with '6843'
6840 -6842 6843 0
-6843 6842 0
-6843 -6840 0
c Var 'aux592' order represents '9' with '6844'
-6842 6844 0
c Var 'aux592' direct represents '9' with '6845'
6842 -6844 6845 0
-6845 6844 0
-6845 -6842 0
c Var 'aux592' order represents '10' with '6846'
-6844 6846 0
c Var 'aux592' direct represents '10' with '6847'
6844 -6846 6847 0
-6847 6846 0
-6847 -6844 0
c Var 'aux592' order represents '11' with '6848'
-6846 6848 0
c Var 'aux592' direct represents '11' with '6849'
6846 -6848 6849 0
-6849 6848 0
-6849 -6846 0
c Var 'aux592' order represents '12' with '6850'
-6848 6850 0
c Var 'aux592' direct represents '12' with '6851'
6848 -6850 6851 0
-6851 6850 0
-6851 -6848 0
c Var 'aux592' order represents '13' with '6852'
-6850 6852 0
c Var 'aux592' direct represents '13' with '6853'
6850 -6852 6853 0
-6853 6852 0
-6853 -6850 0
c Var 'aux592' order represents '14' with '6854'
-6852 6854 0
c Var 'aux592' direct represents '14' with '6855'
6852 -6854 6855 0
-6855 6854 0
-6855 -6852 0
c Var 'aux592' order represents '15' with '6856'
-6854 6856 0
c Var 'aux592' direct represents '15' with '6857'
6854 -6856 6857 0
-6857 6856 0
-6857 -6854 0
c Var 'aux592' order represents '16' with '6858'
-6856 6858 0
c Var 'aux592' direct represents '16' with '6859'
6856 -6858 6859 0
-6859 6858 0
-6859 -6856 0
c Var 'aux592' order represents '17' with '6860'
-6858 6860 0
c Var 'aux592' direct represents '17' with '6861'
6858 -6860 6861 0
-6861 6860 0
-6861 -6858 0
c Var 'aux592' order represents '18' with '6862'
-6860 6862 0
c Var 'aux592' direct represents '18' with '6863'
6860 -6862 6863 0
-6863 6862 0
-6863 -6860 0
c Var 'aux592' order represents '19' with '6864'
-6862 6864 0
c Var 'aux592' direct represents '19' with '6865'
6862 -6864 6865 0
-6865 6864 0
-6865 -6862 0
c Var 'aux592' order represents '20' with '6866'
-6864 6866 0
c Var 'aux592' direct represents '20' with '6867'
6864 -6866 6867 0
-6867 6866 0
-6867 -6864 0
c Var 'aux592' order represents '21' with '6868'
-6866 6868 0
c Var 'aux592' direct represents '21' with '6869'
6866 -6868 6869 0
-6869 6868 0
-6869 -6866 0
c Var 'aux592' order represents '22' with '6870'
-6868 6870 0
c Var 'aux592' direct represents '22' with '6871'
6868 -6870 6871 0
-6871 6870 0
-6871 -6868 0
c Var 'aux592' order represents '23' with '6872'
-6870 6872 0
c Var 'aux592' direct represents '23' with '6873'
6870 -6872 6873 0
-6873 6872 0
-6873 -6870 0
c Var 'aux592' order represents '24' with '6874'
-6872 6874 0
c Var 'aux592' direct represents '24' with '6875'
6872 -6874 6875 0
-6875 6874 0
-6875 -6872 0
c Var 'aux592' order represents '25' with '6876'
-6874 6876 0
c Var 'aux592' direct represents '25' with '6877'
6874 -6876 6877 0
-6877 6876 0
-6877 -6874 0
c Var 'aux592' order represents '26' with '6878'
-6876 6878 0
c Var 'aux592' direct represents '26' with '6879'
6876 -6878 6879 0
-6879 6878 0
-6879 -6876 0
c Var 'aux592' order represents '27' with '6880'
-6878 6880 0
c Var 'aux592' direct represents '27' with '6881'
6878 -6880 6881 0
-6881 6880 0
-6881 -6878 0
c Var 'aux592' order represents '28' with '6882'
-6880 6882 0
c Var 'aux592' direct represents '28' with '6883'
6880 -6882 6883 0
-6883 6882 0
-6883 -6880 0
c Var 'aux592' order represents '29' with '6884'
-6882 6884 0
c Var 'aux592' direct represents '29' with '6885'
6882 -6884 6885 0
-6885 6884 0
-6885 -6882 0
c Var 'aux592' order represents '30' with '6886'
-6884 6886 0
c Var 'aux592' direct represents '30' with '6887'
6884 -6886 6887 0
-6887 6886 0
-6887 -6884 0
c Var 'aux592' order represents '31' with '6888'
-6886 6888 0
c Var 'aux592' direct represents '31' with '6889'
6886 -6888 6889 0
-6889 6888 0
-6889 -6886 0
c Var 'aux592' direct represents '32' with '-6888'
6827 6829 6831 6833 6835 6837 6839 6841 6843 6845 6847 6849 6851 6853 6855 6857 6859 6861 6863 6865 6867 6869 6871 6873 6875 6877 6879 6881 6883 6885 6887 6889 -6888 0
c Encoding variable: aux593 with domain: int(0..16) (representing constraint (shift(x_00007_00001, -1) + shift(x_00009_00003, -1)))
c Both direct and order encoding.
c Var 'aux593' order represents '0' with '6890'
c Var 'aux593' direct represents '0' with '6890'
c Var 'aux593' order represents '1' with '6891'
-6890 6891 0
c Var 'aux593' direct represents '1' with '6892'
6890 -6891 6892 0
-6892 6891 0
-6892 -6890 0
c Var 'aux593' order represents '2' with '6893'
-6891 6893 0
c Var 'aux593' direct represents '2' with '6894'
6891 -6893 6894 0
-6894 6893 0
-6894 -6891 0
c Var 'aux593' order represents '3' with '6895'
-6893 6895 0
c Var 'aux593' direct represents '3' with '6896'
6893 -6895 6896 0
-6896 6895 0
-6896 -6893 0
c Var 'aux593' order represents '4' with '6897'
-6895 6897 0
c Var 'aux593' direct represents '4' with '6898'
6895 -6897 6898 0
-6898 6897 0
-6898 -6895 0
c Var 'aux593' order represents '5' with '6899'
-6897 6899 0
c Var 'aux593' direct represents '5' with '6900'
6897 -6899 6900 0
-6900 6899 0
-6900 -6897 0
c Var 'aux593' order represents '6' with '6901'
-6899 6901 0
c Var 'aux593' direct represents '6' with '6902'
6899 -6901 6902 0
-6902 6901 0
-6902 -6899 0
c Var 'aux593' order represents '7' with '6903'
-6901 6903 0
c Var 'aux593' direct represents '7' with '6904'
6901 -6903 6904 0
-6904 6903 0
-6904 -6901 0
c Var 'aux593' order represents '8' with '6905'
-6903 6905 0
c Var 'aux593' direct represents '8' with '6906'
6903 -6905 6906 0
-6906 6905 0
-6906 -6903 0
c Var 'aux593' order represents '9' with '6907'
-6905 6907 0
c Var 'aux593' direct represents '9' with '6908'
6905 -6907 6908 0
-6908 6907 0
-6908 -6905 0
c Var 'aux593' order represents '10' with '6909'
-6907 6909 0
c Var 'aux593' direct represents '10' with '6910'
6907 -6909 6910 0
-6910 6909 0
-6910 -6907 0
c Var 'aux593' order represents '11' with '6911'
-6909 6911 0
c Var 'aux593' direct represents '11' with '6912'
6909 -6911 6912 0
-6912 6911 0
-6912 -6909 0
c Var 'aux593' order represents '12' with '6913'
-6911 6913 0
c Var 'aux593' direct represents '12' with '6914'
6911 -6913 6914 0
-6914 6913 0
-6914 -6911 0
c Var 'aux593' order represents '13' with '6915'
-6913 6915 0
c Var 'aux593' direct represents '13' with '6916'
6913 -6915 6916 0
-6916 6915 0
-6916 -6913 0
c Var 'aux593' order represents '14' with '6917'
-6915 6917 0
c Var 'aux593' direct represents '14' with '6918'
6915 -6917 6918 0
-6918 6917 0
-6918 -6915 0
c Var 'aux593' order represents '15' with '6919'
-6917 6919 0
c Var 'aux593' direct represents '15' with '6920'
6917 -6919 6920 0
-6920 6919 0
-6920 -6917 0
c Var 'aux593' direct represents '16' with '-6919'
6890 6892 6894 6896 6898 6900 6902 6904 6906 6908 6910 6912 6914 6916 6918 6920 -6919 0
c Encoding variable: aux594 with domain: int(0..16) (representing constraint (shift(x_00009_00002, -1) + shift(x_00007_00002, -1)))
c Both direct and order encoding.
c Var 'aux594' order represents '0' with '6921'
c Var 'aux594' direct represents '0' with '6921'
c Var 'aux594' order represents '1' with '6922'
-6921 6922 0
c Var 'aux594' direct represents '1' with '6923'
6921 -6922 6923 0
-6923 6922 0
-6923 -6921 0
c Var 'aux594' order represents '2' with '6924'
-6922 6924 0
c Var 'aux594' direct represents '2' with '6925'
6922 -6924 6925 0
-6925 6924 0
-6925 -6922 0
c Var 'aux594' order represents '3' with '6926'
-6924 6926 0
c Var 'aux594' direct represents '3' with '6927'
6924 -6926 6927 0
-6927 6926 0
-6927 -6924 0
c Var 'aux594' order represents '4' with '6928'
-6926 6928 0
c Var 'aux594' direct represents '4' with '6929'
6926 -6928 6929 0
-6929 6928 0
-6929 -6926 0
c Var 'aux594' order represents '5' with '6930'
-6928 6930 0
c Var 'aux594' direct represents '5' with '6931'
6928 -6930 6931 0
-6931 6930 0
-6931 -6928 0
c Var 'aux594' order represents '6' with '6932'
-6930 6932 0
c Var 'aux594' direct represents '6' with '6933'
6930 -6932 6933 0
-6933 6932 0
-6933 -6930 0
c Var 'aux594' order represents '7' with '6934'
-6932 6934 0
c Var 'aux594' direct represents '7' with '6935'
6932 -6934 6935 0
-6935 6934 0
-6935 -6932 0
c Var 'aux594' order represents '8' with '6936'
-6934 6936 0
c Var 'aux594' direct represents '8' with '6937'
6934 -6936 6937 0
-6937 6936 0
-6937 -6934 0
c Var 'aux594' order represents '9' with '6938'
-6936 6938 0
c Var 'aux594' direct represents '9' with '6939'
6936 -6938 6939 0
-6939 6938 0
-6939 -6936 0
c Var 'aux594' order represents '10' with '6940'
-6938 6940 0
c Var 'aux594' direct represents '10' with '6941'
6938 -6940 6941 0
-6941 6940 0
-6941 -6938 0
c Var 'aux594' order represents '11' with '6942'
-6940 6942 0
c Var 'aux594' direct represents '11' with '6943'
6940 -6942 6943 0
-6943 6942 0
-6943 -6940 0
c Var 'aux594' order represents '12' with '6944'
-6942 6944 0
c Var 'aux594' direct represents '12' with '6945'
6942 -6944 6945 0
-6945 6944 0
-6945 -6942 0
c Var 'aux594' order represents '13' with '6946'
-6944 6946 0
c Var 'aux594' direct represents '13' with '6947'
6944 -6946 6947 0
-6947 6946 0
-6947 -6944 0
c Var 'aux594' order represents '14' with '6948'
-6946 6948 0
c Var 'aux594' direct represents '14' with '6949'
6946 -6948 6949 0
-6949 6948 0
-6949 -6946 0
c Var 'aux594' order represents '15' with '6950'
-6948 6950 0
c Var 'aux594' direct represents '15' with '6951'
6948 -6950 6951 0
-6951 6950 0
-6951 -6948 0
c Var 'aux594' direct represents '16' with '-6950'
6921 6923 6925 6927 6929 6931 6933 6935 6937 6939 6941 6943 6945 6947 6949 6951 -6950 0
c Encoding variable: aux595 with domain: int(0..16) (representing constraint (shift(x_00009_00001, -1) + shift(x_00008_00001, -1)))
c Both direct and order encoding.
c Var 'aux595' order represents '0' with '6952'
c Var 'aux595' direct represents '0' with '6952'
c Var 'aux595' order represents '1' with '6953'
-6952 6953 0
c Var 'aux595' direct represents '1' with '6954'
6952 -6953 6954 0
-6954 6953 0
-6954 -6952 0
c Var 'aux595' order represents '2' with '6955'
-6953 6955 0
c Var 'aux595' direct represents '2' with '6956'
6953 -6955 6956 0
-6956 6955 0
-6956 -6953 0
c Var 'aux595' order represents '3' with '6957'
-6955 6957 0
c Var 'aux595' direct represents '3' with '6958'
6955 -6957 6958 0
-6958 6957 0
-6958 -6955 0
c Var 'aux595' order represents '4' with '6959'
-6957 6959 0
c Var 'aux595' direct represents '4' with '6960'
6957 -6959 6960 0
-6960 6959 0
-6960 -6957 0
c Var 'aux595' order represents '5' with '6961'
-6959 6961 0
c Var 'aux595' direct represents '5' with '6962'
6959 -6961 6962 0
-6962 6961 0
-6962 -6959 0
c Var 'aux595' order represents '6' with '6963'
-6961 6963 0
c Var 'aux595' direct represents '6' with '6964'
6961 -6963 6964 0
-6964 6963 0
-6964 -6961 0
c Var 'aux595' order represents '7' with '6965'
-6963 6965 0
c Var 'aux595' direct represents '7' with '6966'
6963 -6965 6966 0
-6966 6965 0
-6966 -6963 0
c Var 'aux595' order represents '8' with '6967'
-6965 6967 0
c Var 'aux595' direct represents '8' with '6968'
6965 -6967 6968 0
-6968 6967 0
-6968 -6965 0
c Var 'aux595' order represents '9' with '6969'
-6967 6969 0
c Var 'aux595' direct represents '9' with '6970'
6967 -6969 6970 0
-6970 6969 0
-6970 -6967 0
c Var 'aux595' order represents '10' with '6971'
-6969 6971 0
c Var 'aux595' direct represents '10' with '6972'
6969 -6971 6972 0
-6972 6971 0
-6972 -6969 0
c Var 'aux595' order represents '11' with '6973'
-6971 6973 0
c Var 'aux595' direct represents '11' with '6974'
6971 -6973 6974 0
-6974 6973 0
-6974 -6971 0
c Var 'aux595' order represents '12' with '6975'
-6973 6975 0
c Var 'aux595' direct represents '12' with '6976'
6973 -6975 6976 0
-6976 6975 0
-6976 -6973 0
c Var 'aux595' order represents '13' with '6977'
-6975 6977 0
c Var 'aux595' direct represents '13' with '6978'
6975 -6977 6978 0
-6978 6977 0
-6978 -6975 0
c Var 'aux595' order represents '14' with '6979'
-6977 6979 0
c Var 'aux595' direct represents '14' with '6980'
6977 -6979 6980 0
-6980 6979 0
-6980 -6977 0
c Var 'aux595' order represents '15' with '6981'
-6979 6981 0
c Var 'aux595' direct represents '15' with '6982'
6979 -6981 6982 0
-6982 6981 0
-6982 -6979 0
c Var 'aux595' direct represents '16' with '-6981'
6952 6954 6956 6958 6960 6962 6964 6966 6968 6970 6972 6974 6976 6978 6980 6982 -6981 0
c Encoding variable: aux596 with domain: int(0..16) (representing constraint (shift(x_00008_00003, -1) + shift(x_00008_00002, -1)))
c Both direct and order encoding.
c Var 'aux596' order represents '0' with '6983'
c Var 'aux596' direct represents '0' with '6983'
c Var 'aux596' order represents '1' with '6984'
-6983 6984 0
c Var 'aux596' direct represents '1' with '6985'
6983 -6984 6985 0
-6985 6984 0
-6985 -6983 0
c Var 'aux596' order represents '2' with '6986'
-6984 6986 0
c Var 'aux596' direct represents '2' with '6987'
6984 -6986 6987 0
-6987 6986 0
-6987 -6984 0
c Var 'aux596' order represents '3' with '6988'
-6986 6988 0
c Var 'aux596' direct represents '3' with '6989'
6986 -6988 6989 0
-6989 6988 0
-6989 -6986 0
c Var 'aux596' order represents '4' with '6990'
-6988 6990 0
c Var 'aux596' direct represents '4' with '6991'
6988 -6990 6991 0
-6991 6990 0
-6991 -6988 0
c Var 'aux596' order represents '5' with '6992'
-6990 6992 0
c Var 'aux596' direct represents '5' with '6993'
6990 -6992 6993 0
-6993 6992 0
-6993 -6990 0
c Var 'aux596' order represents '6' with '6994'
-6992 6994 0
c Var 'aux596' direct represents '6' with '6995'
6992 -6994 6995 0
-6995 6994 0
-6995 -6992 0
c Var 'aux596' order represents '7' with '6996'
-6994 6996 0
c Var 'aux596' direct represents '7' with '6997'
6994 -6996 6997 0
-6997 6996 0
-6997 -6994 0
c Var 'aux596' order represents '8' with '6998'
-6996 6998 0
c Var 'aux596' direct represents '8' with '6999'
6996 -6998 6999 0
-6999 6998 0
-6999 -6996 0
c Var 'aux596' order represents '9' with '7000'
-6998 7000 0
c Var 'aux596' direct represents '9' with '7001'
6998 -7000 7001 0
-7001 7000 0
-7001 -6998 0
c Var 'aux596' order represents '10' with '7002'
-7000 7002 0
c Var 'aux596' direct represents '10' with '7003'
7000 -7002 7003 0
-7003 7002 0
-7003 -7000 0
c Var 'aux596' order represents '11' with '7004'
-7002 7004 0
c Var 'aux596' direct represents '11' with '7005'
7002 -7004 7005 0
-7005 7004 0
-7005 -7002 0
c Var 'aux596' order represents '12' with '7006'
-7004 7006 0
c Var 'aux596' direct represents '12' with '7007'
7004 -7006 7007 0
-7007 7006 0
-7007 -7004 0
c Var 'aux596' order represents '13' with '7008'
-7006 7008 0
c Var 'aux596' direct represents '13' with '7009'
7006 -7008 7009 0
-7009 7008 0
-7009 -7006 0
c Var 'aux596' order represents '14' with '7010'
-7008 7010 0
c Var 'aux596' direct represents '14' with '7011'
7008 -7010 7011 0
-7011 7010 0
-7011 -7008 0
c Var 'aux596' order represents '15' with '7012'
-7010 7012 0
c Var 'aux596' direct represents '15' with '7013'
7010 -7012 7013 0
-7013 7012 0
-7013 -7010 0
c Var 'aux596' direct represents '16' with '-7012'
6983 6985 6987 6989 6991 6993 6995 6997 6999 7001 7003 7005 7007 7009 7011 7013 -7012 0
c Encoding variable: aux597 with domain: int(0..24) (representing constraint (shift(x_00007_00003, -1) + aux596))
c Both direct and order encoding.
c Var 'aux597' order represents '0' with '7014'
c Var 'aux597' direct represents '0' with '7014'
c Var 'aux597' order represents '1' with '7015'
-7014 7015 0
c Var 'aux597' direct represents '1' with '7016'
7014 -7015 7016 0
-7016 7015 0
-7016 -7014 0
c Var 'aux597' order represents '2' with '7017'
-7015 7017 0
c Var 'aux597' direct represents '2' with '7018'
7015 -7017 7018 0
-7018 7017 0
-7018 -7015 0
c Var 'aux597' order represents '3' with '7019'
-7017 7019 0
c Var 'aux597' direct represents '3' with '7020'
7017 -7019 7020 0
-7020 7019 0
-7020 -7017 0
c Var 'aux597' order represents '4' with '7021'
-7019 7021 0
c Var 'aux597' direct represents '4' with '7022'
7019 -7021 7022 0
-7022 7021 0
-7022 -7019 0
c Var 'aux597' order represents '5' with '7023'
-7021 7023 0
c Var 'aux597' direct represents '5' with '7024'
7021 -7023 7024 0
-7024 7023 0
-7024 -7021 0
c Var 'aux597' order represents '6' with '7025'
-7023 7025 0
c Var 'aux597' direct represents '6' with '7026'
7023 -7025 7026 0
-7026 7025 0
-7026 -7023 0
c Var 'aux597' order represents '7' with '7027'
-7025 7027 0
c Var 'aux597' direct represents '7' with '7028'
7025 -7027 7028 0
-7028 7027 0
-7028 -7025 0
c Var 'aux597' order represents '8' with '7029'
-7027 7029 0
c Var 'aux597' direct represents '8' with '7030'
7027 -7029 7030 0
-7030 7029 0
-7030 -7027 0
c Var 'aux597' order represents '9' with '7031'
-7029 7031 0
c Var 'aux597' direct represents '9' with '7032'
7029 -7031 7032 0
-7032 7031 0
-7032 -7029 0
c Var 'aux597' order represents '10' with '7033'
-7031 7033 0
c Var 'aux597' direct represents '10' with '7034'
7031 -7033 7034 0
-7034 7033 0
-7034 -7031 0
c Var 'aux597' order represents '11' with '7035'
-7033 7035 0
c Var 'aux597' direct represents '11' with '7036'
7033 -7035 7036 0
-7036 7035 0
-7036 -7033 0
c Var 'aux597' order represents '12' with '7037'
-7035 7037 0
c Var 'aux597' direct represents '12' with '7038'
7035 -7037 7038 0
-7038 7037 0
-7038 -7035 0
c Var 'aux597' order represents '13' with '7039'
-7037 7039 0
c Var 'aux597' direct represents '13' with '7040'
7037 -7039 7040 0
-7040 7039 0
-7040 -7037 0
c Var 'aux597' order represents '14' with '7041'
-7039 7041 0
c Var 'aux597' direct represents '14' with '7042'
7039 -7041 7042 0
-7042 7041 0
-7042 -7039 0
c Var 'aux597' order represents '15' with '7043'
-7041 7043 0
c Var 'aux597' direct represents '15' with '7044'
7041 -7043 7044 0
-7044 7043 0
-7044 -7041 0
c Var 'aux597' order represents '16' with '7045'
-7043 7045 0
c Var 'aux597' direct represents '16' with '7046'
7043 -7045 7046 0
-7046 7045 0
-7046 -7043 0
c Var 'aux597' order represents '17' with '7047'
-7045 7047 0
c Var 'aux597' direct represents '17' with '7048'
7045 -7047 7048 0
-7048 7047 0
-7048 -7045 0
c Var 'aux597' order represents '18' with '7049'
-7047 7049 0
c Var 'aux597' direct represents '18' with '7050'
7047 -7049 7050 0
-7050 7049 0
-7050 -7047 0
c Var 'aux597' order represents '19' with '7051'
-7049 7051 0
c Var 'aux597' direct represents '19' with '7052'
7049 -7051 7052 0
-7052 7051 0
-7052 -7049 0
c Var 'aux597' order represents '20' with '7053'
-7051 7053 0
c Var 'aux597' direct represents '20' with '7054'
7051 -7053 7054 0
-7054 7053 0
-7054 -7051 0
c Var 'aux597' order represents '21' with '7055'
-7053 7055 0
c Var 'aux597' direct represents '21' with '7056'
7053 -7055 7056 0
-7056 7055 0
-7056 -7053 0
c Var 'aux597' order represents '22' with '7057'
-7055 7057 0
c Var 'aux597' direct represents '22' with '7058'
7055 -7057 7058 0
-7058 7057 0
-7058 -7055 0
c Var 'aux597' order represents '23' with '7059'
-7057 7059 0
c Var 'aux597' direct represents '23' with '7060'
7057 -7059 7060 0
-7060 7059 0
-7060 -7057 0
c Var 'aux597' direct represents '24' with '-7059'
7014 7016 7018 7020 7022 7024 7026 7028 7030 7032 7034 7036 7038 7040 7042 7044 7046 7048 7050 7052 7054 7056 7058 7060 -7059 0
c Encoding variable: aux598 with domain: int(0..32) (representing constraint (aux593 + aux595))
c Both direct and order encoding.
c Var 'aux598' order represents '0' with '7061'
c Var 'aux598' direct represents '0' with '7061'
c Var 'aux598' order represents '1' with '7062'
-7061 7062 0
c Var 'aux598' direct represents '1' with '7063'
7061 -7062 7063 0
-7063 7062 0
-7063 -7061 0
c Var 'aux598' order represents '2' with '7064'
-7062 7064 0
c Var 'aux598' direct represents '2' with '7065'
7062 -7064 7065 0
-7065 7064 0
-7065 -7062 0
c Var 'aux598' order represents '3' with '7066'
-7064 7066 0
c Var 'aux598' direct represents '3' with '7067'
7064 -7066 7067 0
-7067 7066 0
-7067 -7064 0
c Var 'aux598' order represents '4' with '7068'
-7066 7068 0
c Var 'aux598' direct represents '4' with '7069'
7066 -7068 7069 0
-7069 7068 0
-7069 -7066 0
c Var 'aux598' order represents '5' with '7070'
-7068 7070 0
c Var 'aux598' direct represents '5' with '7071'
7068 -7070 7071 0
-7071 7070 0
-7071 -7068 0
c Var 'aux598' order represents '6' with '7072'
-7070 7072 0
c Var 'aux598' direct represents '6' with '7073'
7070 -7072 7073 0
-7073 7072 0
-7073 -7070 0
c Var 'aux598' order represents '7' with '7074'
-7072 7074 0
c Var 'aux598' direct represents '7' with '7075'
7072 -7074 7075 0
-7075 7074 0
-7075 -7072 0
c Var 'aux598' order represents '8' with '7076'
-7074 7076 0
c Var 'aux598' direct represents '8' with '7077'
7074 -7076 7077 0
-7077 7076 0
-7077 -7074 0
c Var 'aux598' order represents '9' with '7078'
-7076 7078 0
c Var 'aux598' direct represents '9' with '7079'
7076 -7078 7079 0
-7079 7078 0
-7079 -7076 0
c Var 'aux598' order represents '10' with '7080'
-7078 7080 0
c Var 'aux598' direct represents '10' with '7081'
7078 -7080 7081 0
-7081 7080 0
-7081 -7078 0
c Var 'aux598' order represents '11' with '7082'
-7080 7082 0
c Var 'aux598' direct represents '11' with '7083'
7080 -7082 7083 0
-7083 7082 0
-7083 -7080 0
c Var 'aux598' order represents '12' with '7084'
-7082 7084 0
c Var 'aux598' direct represents '12' with '7085'
7082 -7084 7085 0
-7085 7084 0
-7085 -7082 0
c Var 'aux598' order represents '13' with '7086'
-7084 7086 0
c Var 'aux598' direct represents '13' with '7087'
7084 -7086 7087 0
-7087 7086 0
-7087 -7084 0
c Var 'aux598' order represents '14' with '7088'
-7086 7088 0
c Var 'aux598' direct represents '14' with '7089'
7086 -7088 7089 0
-7089 7088 0
-7089 -7086 0
c Var 'aux598' order represents '15' with '7090'
-7088 7090 0
c Var 'aux598' direct represents '15' with '7091'
7088 -7090 7091 0
-7091 7090 0
-7091 -7088 0
c Var 'aux598' order represents '16' with '7092'
-7090 7092 0
c Var 'aux598' direct represents '16' with '7093'
7090 -7092 7093 0
-7093 7092 0
-7093 -7090 0
c Var 'aux598' order represents '17' with '7094'
-7092 7094 0
c Var 'aux598' direct represents '17' with '7095'
7092 -7094 7095 0
-7095 7094 0
-7095 -7092 0
c Var 'aux598' order represents '18' with '7096'
-7094 7096 0
c Var 'aux598' direct represents '18' with '7097'
7094 -7096 7097 0
-7097 7096 0
-7097 -7094 0
c Var 'aux598' order represents '19' with '7098'
-7096 7098 0
c Var 'aux598' direct represents '19' with '7099'
7096 -7098 7099 0
-7099 7098 0
-7099 -7096 0
c Var 'aux598' order represents '20' with '7100'
-7098 7100 0
c Var 'aux598' direct represents '20' with '7101'
7098 -7100 7101 0
-7101 7100 0
-7101 -7098 0
c Var 'aux598' order represents '21' with '7102'
-7100 7102 0
c Var 'aux598' direct represents '21' with '7103'
7100 -7102 7103 0
-7103 7102 0
-7103 -7100 0
c Var 'aux598' order represents '22' with '7104'
-7102 7104 0
c Var 'aux598' direct represents '22' with '7105'
7102 -7104 7105 0
-7105 7104 0
-7105 -7102 0
c Var 'aux598' order represents '23' with '7106'
-7104 7106 0
c Var 'aux598' direct represents '23' with '7107'
7104 -7106 7107 0
-7107 7106 0
-7107 -7104 0
c Var 'aux598' order represents '24' with '7108'
-7106 7108 0
c Var 'aux598' direct represents '24' with '7109'
7106 -7108 7109 0
-7109 7108 0
-7109 -7106 0
c Var 'aux598' order represents '25' with '7110'
-7108 7110 0
c Var 'aux598' direct represents '25' with '7111'
7108 -7110 7111 0
-7111 7110 0
-7111 -7108 0
c Var 'aux598' order represents '26' with '7112'
-7110 7112 0
c Var 'aux598' direct represents '26' with '7113'
7110 -7112 7113 0
-7113 7112 0
-7113 -7110 0
c Var 'aux598' order represents '27' with '7114'
-7112 7114 0
c Var 'aux598' direct represents '27' with '7115'
7112 -7114 7115 0
-7115 7114 0
-7115 -7112 0
c Var 'aux598' order represents '28' with '7116'
-7114 7116 0
c Var 'aux598' direct represents '28' with '7117'
7114 -7116 7117 0
-7117 7116 0
-7117 -7114 0
c Var 'aux598' order represents '29' with '7118'
-7116 7118 0
c Var 'aux598' direct represents '29' with '7119'
7116 -7118 7119 0
-7119 7118 0
-7119 -7116 0
c Var 'aux598' order represents '30' with '7120'
-7118 7120 0
c Var 'aux598' direct represents '30' with '7121'
7118 -7120 7121 0
-7121 7120 0
-7121 -7118 0
c Var 'aux598' order represents '31' with '7122'
-7120 7122 0
c Var 'aux598' direct represents '31' with '7123'
7120 -7122 7123 0
-7123 7122 0
-7123 -7120 0
c Var 'aux598' direct represents '32' with '-7122'
7061 7063 7065 7067 7069 7071 7073 7075 7077 7079 7081 7083 7085 7087 7089 7091 7093 7095 7097 7099 7101 7103 7105 7107 7109 7111 7113 7115 7117 7119 7121 7123 -7122 0
c Encoding variable: aux599 with domain: int(0..16) (representing constraint (shift(x_00007_00004, -1) + shift(x_00009_00006, -1)))
c Both direct and order encoding.
c Var 'aux599' order represents '0' with '7124'
c Var 'aux599' direct represents '0' with '7124'
c Var 'aux599' order represents '1' with '7125'
-7124 7125 0
c Var 'aux599' direct represents '1' with '7126'
7124 -7125 7126 0
-7126 7125 0
-7126 -7124 0
c Var 'aux599' order represents '2' with '7127'
-7125 7127 0
c Var 'aux599' direct represents '2' with '7128'
7125 -7127 7128 0
-7128 7127 0
-7128 -7125 0
c Var 'aux599' order represents '3' with '7129'
-7127 7129 0
c Var 'aux599' direct represents '3' with '7130'
7127 -7129 7130 0
-7130 7129 0
-7130 -7127 0
c Var 'aux599' order represents '4' with '7131'
-7129 7131 0
c Var 'aux599' direct represents '4' with '7132'
7129 -7131 7132 0
-7132 7131 0
-7132 -7129 0
c Var 'aux599' order represents '5' with '7133'
-7131 7133 0
c Var 'aux599' direct represents '5' with '7134'
7131 -7133 7134 0
-7134 7133 0
-7134 -7131 0
c Var 'aux599' order represents '6' with '7135'
-7133 7135 0
c Var 'aux599' direct represents '6' with '7136'
7133 -7135 7136 0
-7136 7135 0
-7136 -7133 0
c Var 'aux599' order represents '7' with '7137'
-7135 7137 0
c Var 'aux599' direct represents '7' with '7138'
7135 -7137 7138 0
-7138 7137 0
-7138 -7135 0
c Var 'aux599' order represents '8' with '7139'
-7137 7139 0
c Var 'aux599' direct represents '8' with '7140'
7137 -7139 7140 0
-7140 7139 0
-7140 -7137 0
c Var 'aux599' order represents '9' with '7141'
-7139 7141 0
c Var 'aux599' direct represents '9' with '7142'
7139 -7141 7142 0
-7142 7141 0
-7142 -7139 0
c Var 'aux599' order represents '10' with '7143'
-7141 7143 0
c Var 'aux599' direct represents '10' with '7144'
7141 -7143 7144 0
-7144 7143 0
-7144 -7141 0
c Var 'aux599' order represents '11' with '7145'
-7143 7145 0
c Var 'aux599' direct represents '11' with '7146'
7143 -7145 7146 0
-7146 7145 0
-7146 -7143 0
c Var 'aux599' order represents '12' with '7147'
-7145 7147 0
c Var 'aux599' direct represents '12' with '7148'
7145 -7147 7148 0
-7148 7147 0
-7148 -7145 0
c Var 'aux599' order represents '13' with '7149'
-7147 7149 0
c Var 'aux599' direct represents '13' with '7150'
7147 -7149 7150 0
-7150 7149 0
-7150 -7147 0
c Var 'aux599' order represents '14' with '7151'
-7149 7151 0
c Var 'aux599' direct represents '14' with '7152'
7149 -7151 7152 0
-7152 7151 0
-7152 -7149 0
c Var 'aux599' order represents '15' with '7153'
-7151 7153 0
c Var 'aux599' direct represents '15' with '7154'
7151 -7153 7154 0
-7154 7153 0
-7154 -7151 0
c Var 'aux599' direct represents '16' with '-7153'
7124 7126 7128 7130 7132 7134 7136 7138 7140 7142 7144 7146 7148 7150 7152 7154 -7153 0
c Encoding variable: aux600 with domain: int(0..16) (representing constraint (shift(x_00009_00005, -1) + shift(x_00007_00005, -1)))
c Both direct and order encoding.
c Var 'aux600' order represents '0' with '7155'
c Var 'aux600' direct represents '0' with '7155'
c Var 'aux600' order represents '1' with '7156'
-7155 7156 0
c Var 'aux600' direct represents '1' with '7157'
7155 -7156 7157 0
-7157 7156 0
-7157 -7155 0
c Var 'aux600' order represents '2' with '7158'
-7156 7158 0
c Var 'aux600' direct represents '2' with '7159'
7156 -7158 7159 0
-7159 7158 0
-7159 -7156 0
c Var 'aux600' order represents '3' with '7160'
-7158 7160 0
c Var 'aux600' direct represents '3' with '7161'
7158 -7160 7161 0
-7161 7160 0
-7161 -7158 0
c Var 'aux600' order represents '4' with '7162'
-7160 7162 0
c Var 'aux600' direct represents '4' with '7163'
7160 -7162 7163 0
-7163 7162 0
-7163 -7160 0
c Var 'aux600' order represents '5' with '7164'
-7162 7164 0
c Var 'aux600' direct represents '5' with '7165'
7162 -7164 7165 0
-7165 7164 0
-7165 -7162 0
c Var 'aux600' order represents '6' with '7166'
-7164 7166 0
c Var 'aux600' direct represents '6' with '7167'
7164 -7166 7167 0
-7167 7166 0
-7167 -7164 0
c Var 'aux600' order represents '7' with '7168'
-7166 7168 0
c Var 'aux600' direct represents '7' with '7169'
7166 -7168 7169 0
-7169 7168 0
-7169 -7166 0
c Var 'aux600' order represents '8' with '7170'
-7168 7170 0
c Var 'aux600' direct represents '8' with '7171'
7168 -7170 7171 0
-7171 7170 0
-7171 -7168 0
c Var 'aux600' order represents '9' with '7172'
-7170 7172 0
c Var 'aux600' direct represents '9' with '7173'
7170 -7172 7173 0
-7173 7172 0
-7173 -7170 0
c Var 'aux600' order represents '10' with '7174'
-7172 7174 0
c Var 'aux600' direct represents '10' with '7175'
7172 -7174 7175 0
-7175 7174 0
-7175 -7172 0
c Var 'aux600' order represents '11' with '7176'
-7174 7176 0
c Var 'aux600' direct represents '11' with '7177'
7174 -7176 7177 0
-7177 7176 0
-7177 -7174 0
c Var 'aux600' order represents '12' with '7178'
-7176 7178 0
c Var 'aux600' direct represents '12' with '7179'
7176 -7178 7179 0
-7179 7178 0
-7179 -7176 0
c Var 'aux600' order represents '13' with '7180'
-7178 7180 0
c Var 'aux600' direct represents '13' with '7181'
7178 -7180 7181 0
-7181 7180 0
-7181 -7178 0
c Var 'aux600' order represents '14' with '7182'
-7180 7182 0
c Var 'aux600' direct represents '14' with '7183'
7180 -7182 7183 0
-7183 7182 0
-7183 -7180 0
c Var 'aux600' order represents '15' with '7184'
-7182 7184 0
c Var 'aux600' direct represents '15' with '7185'
7182 -7184 7185 0
-7185 7184 0
-7185 -7182 0
c Var 'aux600' direct represents '16' with '-7184'
7155 7157 7159 7161 7163 7165 7167 7169 7171 7173 7175 7177 7179 7181 7183 7185 -7184 0
c Encoding variable: aux601 with domain: int(0..16) (representing constraint (shift(x_00009_00004, -1) + shift(x_00008_00004, -1)))
c Both direct and order encoding.
c Var 'aux601' order represents '0' with '7186'
c Var 'aux601' direct represents '0' with '7186'
c Var 'aux601' order represents '1' with '7187'
-7186 7187 0
c Var 'aux601' direct represents '1' with '7188'
7186 -7187 7188 0
-7188 7187 0
-7188 -7186 0
c Var 'aux601' order represents '2' with '7189'
-7187 7189 0
c Var 'aux601' direct represents '2' with '7190'
7187 -7189 7190 0
-7190 7189 0
-7190 -7187 0
c Var 'aux601' order represents '3' with '7191'
-7189 7191 0
c Var 'aux601' direct represents '3' with '7192'
7189 -7191 7192 0
-7192 7191 0
-7192 -7189 0
c Var 'aux601' order represents '4' with '7193'
-7191 7193 0
c Var 'aux601' direct represents '4' with '7194'
7191 -7193 7194 0
-7194 7193 0
-7194 -7191 0
c Var 'aux601' order represents '5' with '7195'
-7193 7195 0
c Var 'aux601' direct represents '5' with '7196'
7193 -7195 7196 0
-7196 7195 0
-7196 -7193 0
c Var 'aux601' order represents '6' with '7197'
-7195 7197 0
c Var 'aux601' direct represents '6' with '7198'
7195 -7197 7198 0
-7198 7197 0
-7198 -7195 0
c Var 'aux601' order represents '7' with '7199'
-7197 7199 0
c Var 'aux601' direct represents '7' with '7200'
7197 -7199 7200 0
-7200 7199 0
-7200 -7197 0
c Var 'aux601' order represents '8' with '7201'
-7199 7201 0
c Var 'aux601' direct represents '8' with '7202'
7199 -7201 7202 0
-7202 7201 0
-7202 -7199 0
c Var 'aux601' order represents '9' with '7203'
-7201 7203 0
c Var 'aux601' direct represents '9' with '7204'
7201 -7203 7204 0
-7204 7203 0
-7204 -7201 0
c Var 'aux601' order represents '10' with '7205'
-7203 7205 0
c Var 'aux601' direct represents '10' with '7206'
7203 -7205 7206 0
-7206 7205 0
-7206 -7203 0
c Var 'aux601' order represents '11' with '7207'
-7205 7207 0
c Var 'aux601' direct represents '11' with '7208'
7205 -7207 7208 0
-7208 7207 0
-7208 -7205 0
c Var 'aux601' order represents '12' with '7209'
-7207 7209 0
c Var 'aux601' direct represents '12' with '7210'
7207 -7209 7210 0
-7210 7209 0
-7210 -7207 0
c Var 'aux601' order represents '13' with '7211'
-7209 7211 0
c Var 'aux601' direct represents '13' with '7212'
7209 -7211 7212 0
-7212 7211 0
-7212 -7209 0
c Var 'aux601' order represents '14' with '7213'
-7211 7213 0
c Var 'aux601' direct represents '14' with '7214'
7211 -7213 7214 0
-7214 7213 0
-7214 -7211 0
c Var 'aux601' order represents '15' with '7215'
-7213 7215 0
c Var 'aux601' direct represents '15' with '7216'
7213 -7215 7216 0
-7216 7215 0
-7216 -7213 0
c Var 'aux601' direct represents '16' with '-7215'
7186 7188 7190 7192 7194 7196 7198 7200 7202 7204 7206 7208 7210 7212 7214 7216 -7215 0
c Encoding variable: aux602 with domain: int(0..16) (representing constraint (shift(x_00008_00006, -1) + shift(x_00008_00005, -1)))
c Both direct and order encoding.
c Var 'aux602' order represents '0' with '7217'
c Var 'aux602' direct represents '0' with '7217'
c Var 'aux602' order represents '1' with '7218'
-7217 7218 0
c Var 'aux602' direct represents '1' with '7219'
7217 -7218 7219 0
-7219 7218 0
-7219 -7217 0
c Var 'aux602' order represents '2' with '7220'
-7218 7220 0
c Var 'aux602' direct represents '2' with '7221'
7218 -7220 7221 0
-7221 7220 0
-7221 -7218 0
c Var 'aux602' order represents '3' with '7222'
-7220 7222 0
c Var 'aux602' direct represents '3' with '7223'
7220 -7222 7223 0
-7223 7222 0
-7223 -7220 0
c Var 'aux602' order represents '4' with '7224'
-7222 7224 0
c Var 'aux602' direct represents '4' with '7225'
7222 -7224 7225 0
-7225 7224 0
-7225 -7222 0
c Var 'aux602' order represents '5' with '7226'
-7224 7226 0
c Var 'aux602' direct represents '5' with '7227'
7224 -7226 7227 0
-7227 7226 0
-7227 -7224 0
c Var 'aux602' order represents '6' with '7228'
-7226 7228 0
c Var 'aux602' direct represents '6' with '7229'
7226 -7228 7229 0
-7229 7228 0
-7229 -7226 0
c Var 'aux602' order represents '7' with '7230'
-7228 7230 0
c Var 'aux602' direct represents '7' with '7231'
7228 -7230 7231 0
-7231 7230 0
-7231 -7228 0
c Var 'aux602' order represents '8' with '7232'
-7230 7232 0
c Var 'aux602' direct represents '8' with '7233'
7230 -7232 7233 0
-7233 7232 0
-7233 -7230 0
c Var 'aux602' order represents '9' with '7234'
-7232 7234 0
c Var 'aux602' direct represents '9' with '7235'
7232 -7234 7235 0
-7235 7234 0
-7235 -7232 0
c Var 'aux602' order represents '10' with '7236'
-7234 7236 0
c Var 'aux602' direct represents '10' with '7237'
7234 -7236 7237 0
-7237 7236 0
-7237 -7234 0
c Var 'aux602' order represents '11' with '7238'
-7236 7238 0
c Var 'aux602' direct represents '11' with '7239'
7236 -7238 7239 0
-7239 7238 0
-7239 -7236 0
c Var 'aux602' order represents '12' with '7240'
-7238 7240 0
c Var 'aux602' direct represents '12' with '7241'
7238 -7240 7241 0
-7241 7240 0
-7241 -7238 0
c Var 'aux602' order represents '13' with '7242'
-7240 7242 0
c Var 'aux602' direct represents '13' with '7243'
7240 -7242 7243 0
-7243 7242 0
-7243 -7240 0
c Var 'aux602' order represents '14' with '7244'
-7242 7244 0
c Var 'aux602' direct represents '14' with '7245'
7242 -7244 7245 0
-7245 7244 0
-7245 -7242 0
c Var 'aux602' order represents '15' with '7246'
-7244 7246 0
c Var 'aux602' direct represents '15' with '7247'
7244 -7246 7247 0
-7247 7246 0
-7247 -7244 0
c Var 'aux602' direct represents '16' with '-7246'
7217 7219 7221 7223 7225 7227 7229 7231 7233 7235 7237 7239 7241 7243 7245 7247 -7246 0
c Encoding variable: aux603 with domain: int(0..24) (representing constraint (shift(x_00007_00006, -1) + aux602))
c Both direct and order encoding.
c Var 'aux603' order represents '0' with '7248'
c Var 'aux603' direct represents '0' with '7248'
c Var 'aux603' order represents '1' with '7249'
-7248 7249 0
c Var 'aux603' direct represents '1' with '7250'
7248 -7249 7250 0
-7250 7249 0
-7250 -7248 0
c Var 'aux603' order represents '2' with '7251'
-7249 7251 0
c Var 'aux603' direct represents '2' with '7252'
7249 -7251 7252 0
-7252 7251 0
-7252 -7249 0
c Var 'aux603' order represents '3' with '7253'
-7251 7253 0
c Var 'aux603' direct represents '3' with '7254'
7251 -7253 7254 0
-7254 7253 0
-7254 -7251 0
c Var 'aux603' order represents '4' with '7255'
-7253 7255 0
c Var 'aux603' direct represents '4' with '7256'
7253 -7255 7256 0
-7256 7255 0
-7256 -7253 0
c Var 'aux603' order represents '5' with '7257'
-7255 7257 0
c Var 'aux603' direct represents '5' with '7258'
7255 -7257 7258 0
-7258 7257 0
-7258 -7255 0
c Var 'aux603' order represents '6' with '7259'
-7257 7259 0
c Var 'aux603' direct represents '6' with '7260'
7257 -7259 7260 0
-7260 7259 0
-7260 -7257 0
c Var 'aux603' order represents '7' with '7261'
-7259 7261 0
c Var 'aux603' direct represents '7' with '7262'
7259 -7261 7262 0
-7262 7261 0
-7262 -7259 0
c Var 'aux603' order represents '8' with '7263'
-7261 7263 0
c Var 'aux603' direct represents '8' with '7264'
7261 -7263 7264 0
-7264 7263 0
-7264 -7261 0
c Var 'aux603' order represents '9' with '7265'
-7263 7265 0
c Var 'aux603' direct represents '9' with '7266'
7263 -7265 7266 0
-7266 7265 0
-7266 -7263 0
c Var 'aux603' order represents '10' with '7267'
-7265 7267 0
c Var 'aux603' direct represents '10' with '7268'
7265 -7267 7268 0
-7268 7267 0
-7268 -7265 0
c Var 'aux603' order represents '11' with '7269'
-7267 7269 0
c Var 'aux603' direct represents '11' with '7270'
7267 -7269 7270 0
-7270 7269 0
-7270 -7267 0
c Var 'aux603' order represents '12' with '7271'
-7269 7271 0
c Var 'aux603' direct represents '12' with '7272'
7269 -7271 7272 0
-7272 7271 0
-7272 -7269 0
c Var 'aux603' order represents '13' with '7273'
-7271 7273 0
c Var 'aux603' direct represents '13' with '7274'
7271 -7273 7274 0
-7274 7273 0
-7274 -7271 0
c Var 'aux603' order represents '14' with '7275'
-7273 7275 0
c Var 'aux603' direct represents '14' with '7276'
7273 -7275 7276 0
-7276 7275 0
-7276 -7273 0
c Var 'aux603' order represents '15' with '7277'
-7275 7277 0
c Var 'aux603' direct represents '15' with '7278'
7275 -7277 7278 0
-7278 7277 0
-7278 -7275 0
c Var 'aux603' order represents '16' with '7279'
-7277 7279 0
c Var 'aux603' direct represents '16' with '7280'
7277 -7279 7280 0
-7280 7279 0
-7280 -7277 0
c Var 'aux603' order represents '17' with '7281'
-7279 7281 0
c Var 'aux603' direct represents '17' with '7282'
7279 -7281 7282 0
-7282 7281 0
-7282 -7279 0
c Var 'aux603' order represents '18' with '7283'
-7281 7283 0
c Var 'aux603' direct represents '18' with '7284'
7281 -7283 7284 0
-7284 7283 0
-7284 -7281 0
c Var 'aux603' order represents '19' with '7285'
-7283 7285 0
c Var 'aux603' direct represents '19' with '7286'
7283 -7285 7286 0
-7286 7285 0
-7286 -7283 0
c Var 'aux603' order represents '20' with '7287'
-7285 7287 0
c Var 'aux603' direct represents '20' with '7288'
7285 -7287 7288 0
-7288 7287 0
-7288 -7285 0
c Var 'aux603' order represents '21' with '7289'
-7287 7289 0
c Var 'aux603' direct represents '21' with '7290'
7287 -7289 7290 0
-7290 7289 0
-7290 -7287 0
c Var 'aux603' order represents '22' with '7291'
-7289 7291 0
c Var 'aux603' direct represents '22' with '7292'
7289 -7291 7292 0
-7292 7291 0
-7292 -7289 0
c Var 'aux603' order represents '23' with '7293'
-7291 7293 0
c Var 'aux603' direct represents '23' with '7294'
7291 -7293 7294 0
-7294 7293 0
-7294 -7291 0
c Var 'aux603' direct represents '24' with '-7293'
7248 7250 7252 7254 7256 7258 7260 7262 7264 7266 7268 7270 7272 7274 7276 7278 7280 7282 7284 7286 7288 7290 7292 7294 -7293 0
c Encoding variable: aux604 with domain: int(0..32) (representing constraint (aux599 + aux601))
c Both direct and order encoding.
c Var 'aux604' order represents '0' with '7295'
c Var 'aux604' direct represents '0' with '7295'
c Var 'aux604' order represents '1' with '7296'
-7295 7296 0
c Var 'aux604' direct represents '1' with '7297'
7295 -7296 7297 0
-7297 7296 0
-7297 -7295 0
c Var 'aux604' order represents '2' with '7298'
-7296 7298 0
c Var 'aux604' direct represents '2' with '7299'
7296 -7298 7299 0
-7299 7298 0
-7299 -7296 0
c Var 'aux604' order represents '3' with '7300'
-7298 7300 0
c Var 'aux604' direct represents '3' with '7301'
7298 -7300 7301 0
-7301 7300 0
-7301 -7298 0
c Var 'aux604' order represents '4' with '7302'
-7300 7302 0
c Var 'aux604' direct represents '4' with '7303'
7300 -7302 7303 0
-7303 7302 0
-7303 -7300 0
c Var 'aux604' order represents '5' with '7304'
-7302 7304 0
c Var 'aux604' direct represents '5' with '7305'
7302 -7304 7305 0
-7305 7304 0
-7305 -7302 0
c Var 'aux604' order represents '6' with '7306'
-7304 7306 0
c Var 'aux604' direct represents '6' with '7307'
7304 -7306 7307 0
-7307 7306 0
-7307 -7304 0
c Var 'aux604' order represents '7' with '7308'
-7306 7308 0
c Var 'aux604' direct represents '7' with '7309'
7306 -7308 7309 0
-7309 7308 0
-7309 -7306 0
c Var 'aux604' order represents '8' with '7310'
-7308 7310 0
c Var 'aux604' direct represents '8' with '7311'
7308 -7310 7311 0
-7311 7310 0
-7311 -7308 0
c Var 'aux604' order represents '9' with '7312'
-7310 7312 0
c Var 'aux604' direct represents '9' with '7313'
7310 -7312 7313 0
-7313 7312 0
-7313 -7310 0
c Var 'aux604' order represents '10' with '7314'
-7312 7314 0
c Var 'aux604' direct represents '10' with '7315'
7312 -7314 7315 0
-7315 7314 0
-7315 -7312 0
c Var 'aux604' order represents '11' with '7316'
-7314 7316 0
c Var 'aux604' direct represents '11' with '7317'
7314 -7316 7317 0
-7317 7316 0
-7317 -7314 0
c Var 'aux604' order represents '12' with '7318'
-7316 7318 0
c Var 'aux604' direct represents '12' with '7319'
7316 -7318 7319 0
-7319 7318 0
-7319 -7316 0
c Var 'aux604' order represents '13' with '7320'
-7318 7320 0
c Var 'aux604' direct represents '13' with '7321'
7318 -7320 7321 0
-7321 7320 0
-7321 -7318 0
c Var 'aux604' order represents '14' with '7322'
-7320 7322 0
c Var 'aux604' direct represents '14' with '7323'
7320 -7322 7323 0
-7323 7322 0
-7323 -7320 0
c Var 'aux604' order represents '15' with '7324'
-7322 7324 0
c Var 'aux604' direct represents '15' with '7325'
7322 -7324 7325 0
-7325 7324 0
-7325 -7322 0
c Var 'aux604' order represents '16' with '7326'
-7324 7326 0
c Var 'aux604' direct represents '16' with '7327'
7324 -7326 7327 0
-7327 7326 0
-7327 -7324 0
c Var 'aux604' order represents '17' with '7328'
-7326 7328 0
c Var 'aux604' direct represents '17' with '7329'
7326 -7328 7329 0
-7329 7328 0
-7329 -7326 0
c Var 'aux604' order represents '18' with '7330'
-7328 7330 0
c Var 'aux604' direct represents '18' with '7331'
7328 -7330 7331 0
-7331 7330 0
-7331 -7328 0
c Var 'aux604' order represents '19' with '7332'
-7330 7332 0
c Var 'aux604' direct represents '19' with '7333'
7330 -7332 7333 0
-7333 7332 0
-7333 -7330 0
c Var 'aux604' order represents '20' with '7334'
-7332 7334 0
c Var 'aux604' direct represents '20' with '7335'
7332 -7334 7335 0
-7335 7334 0
-7335 -7332 0
c Var 'aux604' order represents '21' with '7336'
-7334 7336 0
c Var 'aux604' direct represents '21' with '7337'
7334 -7336 7337 0
-7337 7336 0
-7337 -7334 0
c Var 'aux604' order represents '22' with '7338'
-7336 7338 0
c Var 'aux604' direct represents '22' with '7339'
7336 -7338 7339 0
-7339 7338 0
-7339 -7336 0
c Var 'aux604' order represents '23' with '7340'
-7338 7340 0
c Var 'aux604' direct represents '23' with '7341'
7338 -7340 7341 0
-7341 7340 0
-7341 -7338 0
c Var 'aux604' order represents '24' with '7342'
-7340 7342 0
c Var 'aux604' direct represents '24' with '7343'
7340 -7342 7343 0
-7343 7342 0
-7343 -7340 0
c Var 'aux604' order represents '25' with '7344'
-7342 7344 0
c Var 'aux604' direct represents '25' with '7345'
7342 -7344 7345 0
-7345 7344 0
-7345 -7342 0
c Var 'aux604' order represents '26' with '7346'
-7344 7346 0
c Var 'aux604' direct represents '26' with '7347'
7344 -7346 7347 0
-7347 7346 0
-7347 -7344 0
c Var 'aux604' order represents '27' with '7348'
-7346 7348 0
c Var 'aux604' direct represents '27' with '7349'
7346 -7348 7349 0
-7349 7348 0
-7349 -7346 0
c Var 'aux604' order represents '28' with '7350'
-7348 7350 0
c Var 'aux604' direct represents '28' with '7351'
7348 -7350 7351 0
-7351 7350 0
-7351 -7348 0
c Var 'aux604' order represents '29' with '7352'
-7350 7352 0
c Var 'aux604' direct represents '29' with '7353'
7350 -7352 7353 0
-7353 7352 0
-7353 -7350 0
c Var 'aux604' order represents '30' with '7354'
-7352 7354 0
c Var 'aux604' direct represents '30' with '7355'
7352 -7354 7355 0
-7355 7354 0
-7355 -7352 0
c Var 'aux604' order represents '31' with '7356'
-7354 7356 0
c Var 'aux604' direct represents '31' with '7357'
7354 -7356 7357 0
-7357 7356 0
-7357 -7354 0
c Var 'aux604' direct represents '32' with '-7356'
7295 7297 7299 7301 7303 7305 7307 7309 7311 7313 7315 7317 7319 7321 7323 7325 7327 7329 7331 7333 7335 7337 7339 7341 7343 7345 7347 7349 7351 7353 7355 7357 -7356 0
c Encoding variable: aux605 with domain: int(0..16) (representing constraint (shift(x_00007_00007, -1) + shift(x_00009_00009, -1)))
c Both direct and order encoding.
c Var 'aux605' order represents '0' with '7358'
c Var 'aux605' direct represents '0' with '7358'
c Var 'aux605' order represents '1' with '7359'
-7358 7359 0
c Var 'aux605' direct represents '1' with '7360'
7358 -7359 7360 0
-7360 7359 0
-7360 -7358 0
c Var 'aux605' order represents '2' with '7361'
-7359 7361 0
c Var 'aux605' direct represents '2' with '7362'
7359 -7361 7362 0
-7362 7361 0
-7362 -7359 0
c Var 'aux605' order represents '3' with '7363'
-7361 7363 0
c Var 'aux605' direct represents '3' with '7364'
7361 -7363 7364 0
-7364 7363 0
-7364 -7361 0
c Var 'aux605' order represents '4' with '7365'
-7363 7365 0
c Var 'aux605' direct represents '4' with '7366'
7363 -7365 7366 0
-7366 7365 0
-7366 -7363 0
c Var 'aux605' order represents '5' with '7367'
-7365 7367 0
c Var 'aux605' direct represents '5' with '7368'
7365 -7367 7368 0
-7368 7367 0
-7368 -7365 0
c Var 'aux605' order represents '6' with '7369'
-7367 7369 0
c Var 'aux605' direct represents '6' with '7370'
7367 -7369 7370 0
-7370 7369 0
-7370 -7367 0
c Var 'aux605' order represents '7' with '7371'
-7369 7371 0
c Var 'aux605' direct represents '7' with '7372'
7369 -7371 7372 0
-7372 7371 0
-7372 -7369 0
c Var 'aux605' order represents '8' with '7373'
-7371 7373 0
c Var 'aux605' direct represents '8' with '7374'
7371 -7373 7374 0
-7374 7373 0
-7374 -7371 0
c Var 'aux605' order represents '9' with '7375'
-7373 7375 0
c Var 'aux605' direct represents '9' with '7376'
7373 -7375 7376 0
-7376 7375 0
-7376 -7373 0
c Var 'aux605' order represents '10' with '7377'
-7375 7377 0
c Var 'aux605' direct represents '10' with '7378'
7375 -7377 7378 0
-7378 7377 0
-7378 -7375 0
c Var 'aux605' order represents '11' with '7379'
-7377 7379 0
c Var 'aux605' direct represents '11' with '7380'
7377 -7379 7380 0
-7380 7379 0
-7380 -7377 0
c Var 'aux605' order represents '12' with '7381'
-7379 7381 0
c Var 'aux605' direct represents '12' with '7382'
7379 -7381 7382 0
-7382 7381 0
-7382 -7379 0
c Var 'aux605' order represents '13' with '7383'
-7381 7383 0
c Var 'aux605' direct represents '13' with '7384'
7381 -7383 7384 0
-7384 7383 0
-7384 -7381 0
c Var 'aux605' order represents '14' with '7385'
-7383 7385 0
c Var 'aux605' direct represents '14' with '7386'
7383 -7385 7386 0
-7386 7385 0
-7386 -7383 0
c Var 'aux605' order represents '15' with '7387'
-7385 7387 0
c Var 'aux605' direct represents '15' with '7388'
7385 -7387 7388 0
-7388 7387 0
-7388 -7385 0
c Var 'aux605' direct represents '16' with '-7387'
7358 7360 7362 7364 7366 7368 7370 7372 7374 7376 7378 7380 7382 7384 7386 7388 -7387 0
c Encoding variable: aux606 with domain: int(0..16) (representing constraint (shift(x_00009_00008, -1) + shift(x_00007_00008, -1)))
c Both direct and order encoding.
c Var 'aux606' order represents '0' with '7389'
c Var 'aux606' direct represents '0' with '7389'
c Var 'aux606' order represents '1' with '7390'
-7389 7390 0
c Var 'aux606' direct represents '1' with '7391'
7389 -7390 7391 0
-7391 7390 0
-7391 -7389 0
c Var 'aux606' order represents '2' with '7392'
-7390 7392 0
c Var 'aux606' direct represents '2' with '7393'
7390 -7392 7393 0
-7393 7392 0
-7393 -7390 0
c Var 'aux606' order represents '3' with '7394'
-7392 7394 0
c Var 'aux606' direct represents '3' with '7395'
7392 -7394 7395 0
-7395 7394 0
-7395 -7392 0
c Var 'aux606' order represents '4' with '7396'
-7394 7396 0
c Var 'aux606' direct represents '4' with '7397'
7394 -7396 7397 0
-7397 7396 0
-7397 -7394 0
c Var 'aux606' order represents '5' with '7398'
-7396 7398 0
c Var 'aux606' direct represents '5' with '7399'
7396 -7398 7399 0
-7399 7398 0
-7399 -7396 0
c Var 'aux606' order represents '6' with '7400'
-7398 7400 0
c Var 'aux606' direct represents '6' with '7401'
7398 -7400 7401 0
-7401 7400 0
-7401 -7398 0
c Var 'aux606' order represents '7' with '7402'
-7400 7402 0
c Var 'aux606' direct represents '7' with '7403'
7400 -7402 7403 0
-7403 7402 0
-7403 -7400 0
c Var 'aux606' order represents '8' with '7404'
-7402 7404 0
c Var 'aux606' direct represents '8' with '7405'
7402 -7404 7405 0
-7405 7404 0
-7405 -7402 0
c Var 'aux606' order represents '9' with '7406'
-7404 7406 0
c Var 'aux606' direct represents '9' with '7407'
7404 -7406 7407 0
-7407 7406 0
-7407 -7404 0
c Var 'aux606' order represents '10' with '7408'
-7406 7408 0
c Var 'aux606' direct represents '10' with '7409'
7406 -7408 7409 0
-7409 7408 0
-7409 -7406 0
c Var 'aux606' order represents '11' with '7410'
-7408 7410 0
c Var 'aux606' direct represents '11' with '7411'
7408 -7410 7411 0
-7411 7410 0
-7411 -7408 0
c Var 'aux606' order represents '12' with '7412'
-7410 7412 0
c Var 'aux606' direct represents '12' with '7413'
7410 -7412 7413 0
-7413 7412 0
-7413 -7410 0
c Var 'aux606' order represents '13' with '7414'
-7412 7414 0
c Var 'aux606' direct represents '13' with '7415'
7412 -7414 7415 0
-7415 7414 0
-7415 -7412 0
c Var 'aux606' order represents '14' with '7416'
-7414 7416 0
c Var 'aux606' direct represents '14' with '7417'
7414 -7416 7417 0
-7417 7416 0
-7417 -7414 0
c Var 'aux606' order represents '15' with '7418'
-7416 7418 0
c Var 'aux606' direct represents '15' with '7419'
7416 -7418 7419 0
-7419 7418 0
-7419 -7416 0
c Var 'aux606' direct represents '16' with '-7418'
7389 7391 7393 7395 7397 7399 7401 7403 7405 7407 7409 7411 7413 7415 7417 7419 -7418 0
c Encoding variable: aux607 with domain: int(0..16) (representing constraint (shift(x_00009_00007, -1) + shift(x_00008_00007, -1)))
c Both direct and order encoding.
c Var 'aux607' order represents '0' with '7420'
c Var 'aux607' direct represents '0' with '7420'
c Var 'aux607' order represents '1' with '7421'
-7420 7421 0
c Var 'aux607' direct represents '1' with '7422'
7420 -7421 7422 0
-7422 7421 0
-7422 -7420 0
c Var 'aux607' order represents '2' with '7423'
-7421 7423 0
c Var 'aux607' direct represents '2' with '7424'
7421 -7423 7424 0
-7424 7423 0
-7424 -7421 0
c Var 'aux607' order represents '3' with '7425'
-7423 7425 0
c Var 'aux607' direct represents '3' with '7426'
7423 -7425 7426 0
-7426 7425 0
-7426 -7423 0
c Var 'aux607' order represents '4' with '7427'
-7425 7427 0
c Var 'aux607' direct represents '4' with '7428'
7425 -7427 7428 0
-7428 7427 0
-7428 -7425 0
c Var 'aux607' order represents '5' with '7429'
-7427 7429 0
c Var 'aux607' direct represents '5' with '7430'
7427 -7429 7430 0
-7430 7429 0
-7430 -7427 0
c Var 'aux607' order represents '6' with '7431'
-7429 7431 0
c Var 'aux607' direct represents '6' with '7432'
7429 -7431 7432 0
-7432 7431 0
-7432 -7429 0
c Var 'aux607' order represents '7' with '7433'
-7431 7433 0
c Var 'aux607' direct represents '7' with '7434'
7431 -7433 7434 0
-7434 7433 0
-7434 -7431 0
c Var 'aux607' order represents '8' with '7435'
-7433 7435 0
c Var 'aux607' direct represents '8' with '7436'
7433 -7435 7436 0
-7436 7435 0
-7436 -7433 0
c Var 'aux607' order represents '9' with '7437'
-7435 7437 0
c Var 'aux607' direct represents '9' with '7438'
7435 -7437 7438 0
-7438 7437 0
-7438 -7435 0
c Var 'aux607' order represents '10' with '7439'
-7437 7439 0
c Var 'aux607' direct represents '10' with '7440'
7437 -7439 7440 0
-7440 7439 0
-7440 -7437 0
c Var 'aux607' order represents '11' with '7441'
-7439 7441 0
c Var 'aux607' direct represents '11' with '7442'
7439 -7441 7442 0
-7442 7441 0
-7442 -7439 0
c Var 'aux607' order represents '12' with '7443'
-7441 7443 0
c Var 'aux607' direct represents '12' with '7444'
7441 -7443 7444 0
-7444 7443 0
-7444 -7441 0
c Var 'aux607' order represents '13' with '7445'
-7443 7445 0
c Var 'aux607' direct represents '13' with '7446'
7443 -7445 7446 0
-7446 7445 0
-7446 -7443 0
c Var 'aux607' order represents '14' with '7447'
-7445 7447 0
c Var 'aux607' direct represents '14' with '7448'
7445 -7447 7448 0
-7448 7447 0
-7448 -7445 0
c Var 'aux607' order represents '15' with '7449'
-7447 7449 0
c Var 'aux607' direct represents '15' with '7450'
7447 -7449 7450 0
-7450 7449 0
-7450 -7447 0
c Var 'aux607' direct represents '16' with '-7449'
7420 7422 7424 7426 7428 7430 7432 7434 7436 7438 7440 7442 7444 7446 7448 7450 -7449 0
c Encoding variable: aux608 with domain: int(0..16) (representing constraint (shift(x_00008_00009, -1) + shift(x_00008_00008, -1)))
c Both direct and order encoding.
c Var 'aux608' order represents '0' with '7451'
c Var 'aux608' direct represents '0' with '7451'
c Var 'aux608' order represents '1' with '7452'
-7451 7452 0
c Var 'aux608' direct represents '1' with '7453'
7451 -7452 7453 0
-7453 7452 0
-7453 -7451 0
c Var 'aux608' order represents '2' with '7454'
-7452 7454 0
c Var 'aux608' direct represents '2' with '7455'
7452 -7454 7455 0
-7455 7454 0
-7455 -7452 0
c Var 'aux608' order represents '3' with '7456'
-7454 7456 0
c Var 'aux608' direct represents '3' with '7457'
7454 -7456 7457 0
-7457 7456 0
-7457 -7454 0
c Var 'aux608' order represents '4' with '7458'
-7456 7458 0
c Var 'aux608' direct represents '4' with '7459'
7456 -7458 7459 0
-7459 7458 0
-7459 -7456 0
c Var 'aux608' order represents '5' with '7460'
-7458 7460 0
c Var 'aux608' direct represents '5' with '7461'
7458 -7460 7461 0
-7461 7460 0
-7461 -7458 0
c Var 'aux608' order represents '6' with '7462'
-7460 7462 0
c Var 'aux608' direct represents '6' with '7463'
7460 -7462 7463 0
-7463 7462 0
-7463 -7460 0
c Var 'aux608' order represents '7' with '7464'
-7462 7464 0
c Var 'aux608' direct represents '7' with '7465'
7462 -7464 7465 0
-7465 7464 0
-7465 -7462 0
c Var 'aux608' order represents '8' with '7466'
-7464 7466 0
c Var 'aux608' direct represents '8' with '7467'
7464 -7466 7467 0
-7467 7466 0
-7467 -7464 0
c Var 'aux608' order represents '9' with '7468'
-7466 7468 0
c Var 'aux608' direct represents '9' with '7469'
7466 -7468 7469 0
-7469 7468 0
-7469 -7466 0
c Var 'aux608' order represents '10' with '7470'
-7468 7470 0
c Var 'aux608' direct represents '10' with '7471'
7468 -7470 7471 0
-7471 7470 0
-7471 -7468 0
c Var 'aux608' order represents '11' with '7472'
-7470 7472 0
c Var 'aux608' direct represents '11' with '7473'
7470 -7472 7473 0
-7473 7472 0
-7473 -7470 0
c Var 'aux608' order represents '12' with '7474'
-7472 7474 0
c Var 'aux608' direct represents '12' with '7475'
7472 -7474 7475 0
-7475 7474 0
-7475 -7472 0
c Var 'aux608' order represents '13' with '7476'
-7474 7476 0
c Var 'aux608' direct represents '13' with '7477'
7474 -7476 7477 0
-7477 7476 0
-7477 -7474 0
c Var 'aux608' order represents '14' with '7478'
-7476 7478 0
c Var 'aux608' direct represents '14' with '7479'
7476 -7478 7479 0
-7479 7478 0
-7479 -7476 0
c Var 'aux608' order represents '15' with '7480'
-7478 7480 0
c Var 'aux608' direct represents '15' with '7481'
7478 -7480 7481 0
-7481 7480 0
-7481 -7478 0
c Var 'aux608' direct represents '16' with '-7480'
7451 7453 7455 7457 7459 7461 7463 7465 7467 7469 7471 7473 7475 7477 7479 7481 -7480 0
c Encoding variable: aux609 with domain: int(0..24) (representing constraint (shift(x_00007_00009, -1) + aux608))
c Both direct and order encoding.
c Var 'aux609' order represents '0' with '7482'
c Var 'aux609' direct represents '0' with '7482'
c Var 'aux609' order represents '1' with '7483'
-7482 7483 0
c Var 'aux609' direct represents '1' with '7484'
7482 -7483 7484 0
-7484 7483 0
-7484 -7482 0
c Var 'aux609' order represents '2' with '7485'
-7483 7485 0
c Var 'aux609' direct represents '2' with '7486'
7483 -7485 7486 0
-7486 7485 0
-7486 -7483 0
c Var 'aux609' order represents '3' with '7487'
-7485 7487 0
c Var 'aux609' direct represents '3' with '7488'
7485 -7487 7488 0
-7488 7487 0
-7488 -7485 0
c Var 'aux609' order represents '4' with '7489'
-7487 7489 0
c Var 'aux609' direct represents '4' with '7490'
7487 -7489 7490 0
-7490 7489 0
-7490 -7487 0
c Var 'aux609' order represents '5' with '7491'
-7489 7491 0
c Var 'aux609' direct represents '5' with '7492'
7489 -7491 7492 0
-7492 7491 0
-7492 -7489 0
c Var 'aux609' order represents '6' with '7493'
-7491 7493 0
c Var 'aux609' direct represents '6' with '7494'
7491 -7493 7494 0
-7494 7493 0
-7494 -7491 0
c Var 'aux609' order represents '7' with '7495'
-7493 7495 0
c Var 'aux609' direct represents '7' with '7496'
7493 -7495 7496 0
-7496 7495 0
-7496 -7493 0
c Var 'aux609' order represents '8' with '7497'
-7495 7497 0
c Var 'aux609' direct represents '8' with '7498'
7495 -7497 7498 0
-7498 7497 0
-7498 -7495 0
c Var 'aux609' order represents '9' with '7499'
-7497 7499 0
c Var 'aux609' direct represents '9' with '7500'
7497 -7499 7500 0
-7500 7499 0
-7500 -7497 0
c Var 'aux609' order represents '10' with '7501'
-7499 7501 0
c Var 'aux609' direct represents '10' with '7502'
7499 -7501 7502 0
-7502 7501 0
-7502 -7499 0
c Var 'aux609' order represents '11' with '7503'
-7501 7503 0
c Var 'aux609' direct represents '11' with '7504'
7501 -7503 7504 0
-7504 7503 0
-7504 -7501 0
c Var 'aux609' order represents '12' with '7505'
-7503 7505 0
c Var 'aux609' direct represents '12' with '7506'
7503 -7505 7506 0
-7506 7505 0
-7506 -7503 0
c Var 'aux609' order represents '13' with '7507'
-7505 7507 0
c Var 'aux609' direct represents '13' with '7508'
7505 -7507 7508 0
-7508 7507 0
-7508 -7505 0
c Var 'aux609' order represents '14' with '7509'
-7507 7509 0
c Var 'aux609' direct represents '14' with '7510'
7507 -7509 7510 0
-7510 7509 0
-7510 -7507 0
c Var 'aux609' order represents '15' with '7511'
-7509 7511 0
c Var 'aux609' direct represents '15' with '7512'
7509 -7511 7512 0
-7512 7511 0
-7512 -7509 0
c Var 'aux609' order represents '16' with '7513'
-7511 7513 0
c Var 'aux609' direct represents '16' with '7514'
7511 -7513 7514 0
-7514 7513 0
-7514 -7511 0
c Var 'aux609' order represents '17' with '7515'
-7513 7515 0
c Var 'aux609' direct represents '17' with '7516'
7513 -7515 7516 0
-7516 7515 0
-7516 -7513 0
c Var 'aux609' order represents '18' with '7517'
-7515 7517 0
c Var 'aux609' direct represents '18' with '7518'
7515 -7517 7518 0
-7518 7517 0
-7518 -7515 0
c Var 'aux609' order represents '19' with '7519'
-7517 7519 0
c Var 'aux609' direct represents '19' with '7520'
7517 -7519 7520 0
-7520 7519 0
-7520 -7517 0
c Var 'aux609' order represents '20' with '7521'
-7519 7521 0
c Var 'aux609' direct represents '20' with '7522'
7519 -7521 7522 0
-7522 7521 0
-7522 -7519 0
c Var 'aux609' order represents '21' with '7523'
-7521 7523 0
c Var 'aux609' direct represents '21' with '7524'
7521 -7523 7524 0
-7524 7523 0
-7524 -7521 0
c Var 'aux609' order represents '22' with '7525'
-7523 7525 0
c Var 'aux609' direct represents '22' with '7526'
7523 -7525 7526 0
-7526 7525 0
-7526 -7523 0
c Var 'aux609' order represents '23' with '7527'
-7525 7527 0
c Var 'aux609' direct represents '23' with '7528'
7525 -7527 7528 0
-7528 7527 0
-7528 -7525 0
c Var 'aux609' direct represents '24' with '-7527'
7482 7484 7486 7488 7490 7492 7494 7496 7498 7500 7502 7504 7506 7508 7510 7512 7514 7516 7518 7520 7522 7524 7526 7528 -7527 0
c Encoding variable: aux610 with domain: int(0..32) (representing constraint (aux605 + aux607))
c Both direct and order encoding.
c Var 'aux610' order represents '0' with '7529'
c Var 'aux610' direct represents '0' with '7529'
c Var 'aux610' order represents '1' with '7530'
-7529 7530 0
c Var 'aux610' direct represents '1' with '7531'
7529 -7530 7531 0
-7531 7530 0
-7531 -7529 0
c Var 'aux610' order represents '2' with '7532'
-7530 7532 0
c Var 'aux610' direct represents '2' with '7533'
7530 -7532 7533 0
-7533 7532 0
-7533 -7530 0
c Var 'aux610' order represents '3' with '7534'
-7532 7534 0
c Var 'aux610' direct represents '3' with '7535'
7532 -7534 7535 0
-7535 7534 0
-7535 -7532 0
c Var 'aux610' order represents '4' with '7536'
-7534 7536 0
c Var 'aux610' direct represents '4' with '7537'
7534 -7536 7537 0
-7537 7536 0
-7537 -7534 0
c Var 'aux610' order represents '5' with '7538'
-7536 7538 0
c Var 'aux610' direct represents '5' with '7539'
7536 -7538 7539 0
-7539 7538 0
-7539 -7536 0
c Var 'aux610' order represents '6' with '7540'
-7538 7540 0
c Var 'aux610' direct represents '6' with '7541'
7538 -7540 7541 0
-7541 7540 0
-7541 -7538 0
c Var 'aux610' order represents '7' with '7542'
-7540 7542 0
c Var 'aux610' direct represents '7' with '7543'
7540 -7542 7543 0
-7543 7542 0
-7543 -7540 0
c Var 'aux610' order represents '8' with '7544'
-7542 7544 0
c Var 'aux610' direct represents '8' with '7545'
7542 -7544 7545 0
-7545 7544 0
-7545 -7542 0
c Var 'aux610' order represents '9' with '7546'
-7544 7546 0
c Var 'aux610' direct represents '9' with '7547'
7544 -7546 7547 0
-7547 7546 0
-7547 -7544 0
c Var 'aux610' order represents '10' with '7548'
-7546 7548 0
c Var 'aux610' direct represents '10' with '7549'
7546 -7548 7549 0
-7549 7548 0
-7549 -7546 0
c Var 'aux610' order represents '11' with '7550'
-7548 7550 0
c Var 'aux610' direct represents '11' with '7551'
7548 -7550 7551 0
-7551 7550 0
-7551 -7548 0
c Var 'aux610' order represents '12' with '7552'
-7550 7552 0
c Var 'aux610' direct represents '12' with '7553'
7550 -7552 7553 0
-7553 7552 0
-7553 -7550 0
c Var 'aux610' order represents '13' with '7554'
-7552 7554 0
c Var 'aux610' direct represents '13' with '7555'
7552 -7554 7555 0
-7555 7554 0
-7555 -7552 0
c Var 'aux610' order represents '14' with '7556'
-7554 7556 0
c Var 'aux610' direct represents '14' with '7557'
7554 -7556 7557 0
-7557 7556 0
-7557 -7554 0
c Var 'aux610' order represents '15' with '7558'
-7556 7558 0
c Var 'aux610' direct represents '15' with '7559'
7556 -7558 7559 0
-7559 7558 0
-7559 -7556 0
c Var 'aux610' order represents '16' with '7560'
-7558 7560 0
c Var 'aux610' direct represents '16' with '7561'
7558 -7560 7561 0
-7561 7560 0
-7561 -7558 0
c Var 'aux610' order represents '17' with '7562'
-7560 7562 0
c Var 'aux610' direct represents '17' with '7563'
7560 -7562 7563 0
-7563 7562 0
-7563 -7560 0
c Var 'aux610' order represents '18' with '7564'
-7562 7564 0
c Var 'aux610' direct represents '18' with '7565'
7562 -7564 7565 0
-7565 7564 0
-7565 -7562 0
c Var 'aux610' order represents '19' with '7566'
-7564 7566 0
c Var 'aux610' direct represents '19' with '7567'
7564 -7566 7567 0
-7567 7566 0
-7567 -7564 0
c Var 'aux610' order represents '20' with '7568'
-7566 7568 0
c Var 'aux610' direct represents '20' with '7569'
7566 -7568 7569 0
-7569 7568 0
-7569 -7566 0
c Var 'aux610' order represents '21' with '7570'
-7568 7570 0
c Var 'aux610' direct represents '21' with '7571'
7568 -7570 7571 0
-7571 7570 0
-7571 -7568 0
c Var 'aux610' order represents '22' with '7572'
-7570 7572 0
c Var 'aux610' direct represents '22' with '7573'
7570 -7572 7573 0
-7573 7572 0
-7573 -7570 0
c Var 'aux610' order represents '23' with '7574'
-7572 7574 0
c Var 'aux610' direct represents '23' with '7575'
7572 -7574 7575 0
-7575 7574 0
-7575 -7572 0
c Var 'aux610' order represents '24' with '7576'
-7574 7576 0
c Var 'aux610' direct represents '24' with '7577'
7574 -7576 7577 0
-7577 7576 0
-7577 -7574 0
c Var 'aux610' order represents '25' with '7578'
-7576 7578 0
c Var 'aux610' direct represents '25' with '7579'
7576 -7578 7579 0
-7579 7578 0
-7579 -7576 0
c Var 'aux610' order represents '26' with '7580'
-7578 7580 0
c Var 'aux610' direct represents '26' with '7581'
7578 -7580 7581 0
-7581 7580 0
-7581 -7578 0
c Var 'aux610' order represents '27' with '7582'
-7580 7582 0
c Var 'aux610' direct represents '27' with '7583'
7580 -7582 7583 0
-7583 7582 0
-7583 -7580 0
c Var 'aux610' order represents '28' with '7584'
-7582 7584 0
c Var 'aux610' direct represents '28' with '7585'
7582 -7584 7585 0
-7585 7584 0
-7585 -7582 0
c Var 'aux610' order represents '29' with '7586'
-7584 7586 0
c Var 'aux610' direct represents '29' with '7587'
7584 -7586 7587 0
-7587 7586 0
-7587 -7584 0
c Var 'aux610' order represents '30' with '7588'
-7586 7588 0
c Var 'aux610' direct represents '30' with '7589'
7586 -7588 7589 0
-7589 7588 0
-7589 -7586 0
c Var 'aux610' order represents '31' with '7590'
-7588 7590 0
c Var 'aux610' direct represents '31' with '7591'
7588 -7590 7591 0
-7591 7590 0
-7591 -7588 0
c Var 'aux610' direct represents '32' with '-7590'
7529 7531 7533 7535 7537 7539 7541 7543 7545 7547 7549 7551 7553 7555 7557 7559 7561 7563 7565 7567 7569 7571 7573 7575 7577 7579 7581 7583 7585 7587 7589 7591 -7590 0
c Encoding variable: aux611 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00005_00001=1)))
c Both direct and order encoding.
c Var 'aux611' order represents '0' with '7592'
c Var 'aux611' direct represents '0' with '7592'
c Var 'aux611' order represents '1' with '7593'
-7592 7593 0
c Var 'aux611' direct represents '1' with '7594'
7592 -7593 7594 0
-7594 7593 0
-7594 -7592 0
c Var 'aux611' direct represents '2' with '-7593'
7592 7594 -7593 0
c Encoding variable: aux612 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00008_00001=1)))
c Both direct and order encoding.
c Var 'aux612' order represents '0' with '7595'
c Var 'aux612' direct represents '0' with '7595'
c Var 'aux612' order represents '1' with '7596'
-7595 7596 0
c Var 'aux612' direct represents '1' with '7597'
7595 -7596 7597 0
-7597 7596 0
-7597 -7595 0
c Var 'aux612' direct represents '2' with '-7596'
7595 7597 -7596 0
c Encoding variable: aux613 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00006_00001=1)))
c Both direct and order encoding.
c Var 'aux613' order represents '0' with '7598'
c Var 'aux613' direct represents '0' with '7598'
c Var 'aux613' order represents '1' with '7599'
-7598 7599 0
c Var 'aux613' direct represents '1' with '7600'
7598 -7599 7600 0
-7600 7599 0
-7600 -7598 0
c Var 'aux613' direct represents '2' with '-7599'
7598 7600 -7599 0
c Encoding variable: aux614 with domain: int(0..2) (representing constraint ((x_00009_00001=1) + (x_00004_00001=1)))
c Both direct and order encoding.
c Var 'aux614' order represents '0' with '7601'
c Var 'aux614' direct represents '0' with '7601'
c Var 'aux614' order represents '1' with '7602'
-7601 7602 0
c Var 'aux614' direct represents '1' with '7603'
7601 -7602 7603 0
-7603 7602 0
-7603 -7601 0
c Var 'aux614' direct represents '2' with '-7602'
7601 7603 -7602 0
c Encoding variable: aux615 with domain: int(0..3) (representing constraint ((x_00001_00001=1) + aux614))
c Both direct and order encoding.
c Var 'aux615' order represents '0' with '7604'
c Var 'aux615' direct represents '0' with '7604'
c Var 'aux615' order represents '1' with '7605'
-7604 7605 0
c Var 'aux615' direct represents '1' with '7606'
7604 -7605 7606 0
-7606 7605 0
-7606 -7604 0
c Var 'aux615' order represents '2' with '7607'
-7605 7607 0
c Var 'aux615' direct represents '2' with '7608'
7605 -7607 7608 0
-7608 7607 0
-7608 -7605 0
c Var 'aux615' direct represents '3' with '-7607'
7604 7606 7608 -7607 0
c Encoding variable: aux616 with domain: int(0..4) (representing constraint (aux611 + aux613))
c Both direct and order encoding.
c Var 'aux616' order represents '0' with '7609'
c Var 'aux616' direct represents '0' with '7609'
c Var 'aux616' order represents '1' with '7610'
-7609 7610 0
c Var 'aux616' direct represents '1' with '7611'
7609 -7610 7611 0
-7611 7610 0
-7611 -7609 0
c Var 'aux616' order represents '2' with '7612'
-7610 7612 0
c Var 'aux616' direct represents '2' with '7613'
7610 -7612 7613 0
-7613 7612 0
-7613 -7610 0
c Var 'aux616' order represents '3' with '7614'
-7612 7614 0
c Var 'aux616' direct represents '3' with '7615'
7612 -7614 7615 0
-7615 7614 0
-7615 -7612 0
c Var 'aux616' direct represents '4' with '-7614'
7609 7611 7613 7615 -7614 0
c Encoding variable: aux617 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00005_00001=2)))
c Both direct and order encoding.
c Var 'aux617' order represents '0' with '7616'
c Var 'aux617' direct represents '0' with '7616'
c Var 'aux617' order represents '1' with '7617'
-7616 7617 0
c Var 'aux617' direct represents '1' with '7618'
7616 -7617 7618 0
-7618 7617 0
-7618 -7616 0
c Var 'aux617' direct represents '2' with '-7617'
7616 7618 -7617 0
c Encoding variable: aux618 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00008_00001=2)))
c Both direct and order encoding.
c Var 'aux618' order represents '0' with '7619'
c Var 'aux618' direct represents '0' with '7619'
c Var 'aux618' order represents '1' with '7620'
-7619 7620 0
c Var 'aux618' direct represents '1' with '7621'
7619 -7620 7621 0
-7621 7620 0
-7621 -7619 0
c Var 'aux618' direct represents '2' with '-7620'
7619 7621 -7620 0
c Encoding variable: aux619 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00006_00001=2)))
c Both direct and order encoding.
c Var 'aux619' order represents '0' with '7622'
c Var 'aux619' direct represents '0' with '7622'
c Var 'aux619' order represents '1' with '7623'
-7622 7623 0
c Var 'aux619' direct represents '1' with '7624'
7622 -7623 7624 0
-7624 7623 0
-7624 -7622 0
c Var 'aux619' direct represents '2' with '-7623'
7622 7624 -7623 0
c Encoding variable: aux620 with domain: int(0..2) (representing constraint ((x_00009_00001=2) + (x_00004_00001=2)))
c Both direct and order encoding.
c Var 'aux620' order represents '0' with '7625'
c Var 'aux620' direct represents '0' with '7625'
c Var 'aux620' order represents '1' with '7626'
-7625 7626 0
c Var 'aux620' direct represents '1' with '7627'
7625 -7626 7627 0
-7627 7626 0
-7627 -7625 0
c Var 'aux620' direct represents '2' with '-7626'
7625 7627 -7626 0
c Encoding variable: aux621 with domain: int(0..3) (representing constraint ((x_00001_00001=2) + aux620))
c Both direct and order encoding.
c Var 'aux621' order represents '0' with '7628'
c Var 'aux621' direct represents '0' with '7628'
c Var 'aux621' order represents '1' with '7629'
-7628 7629 0
c Var 'aux621' direct represents '1' with '7630'
7628 -7629 7630 0
-7630 7629 0
-7630 -7628 0
c Var 'aux621' order represents '2' with '7631'
-7629 7631 0
c Var 'aux621' direct represents '2' with '7632'
7629 -7631 7632 0
-7632 7631 0
-7632 -7629 0
c Var 'aux621' direct represents '3' with '-7631'
7628 7630 7632 -7631 0
c Encoding variable: aux622 with domain: int(0..4) (representing constraint (aux617 + aux619))
c Both direct and order encoding.
c Var 'aux622' order represents '0' with '7633'
c Var 'aux622' direct represents '0' with '7633'
c Var 'aux622' order represents '1' with '7634'
-7633 7634 0
c Var 'aux622' direct represents '1' with '7635'
7633 -7634 7635 0
-7635 7634 0
-7635 -7633 0
c Var 'aux622' order represents '2' with '7636'
-7634 7636 0
c Var 'aux622' direct represents '2' with '7637'
7634 -7636 7637 0
-7637 7636 0
-7637 -7634 0
c Var 'aux622' order represents '3' with '7638'
-7636 7638 0
c Var 'aux622' direct represents '3' with '7639'
7636 -7638 7639 0
-7639 7638 0
-7639 -7636 0
c Var 'aux622' direct represents '4' with '-7638'
7633 7635 7637 7639 -7638 0
c Encoding variable: aux623 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00005_00001=3)))
c Both direct and order encoding.
c Var 'aux623' order represents '0' with '7640'
c Var 'aux623' direct represents '0' with '7640'
c Var 'aux623' order represents '1' with '7641'
-7640 7641 0
c Var 'aux623' direct represents '1' with '7642'
7640 -7641 7642 0
-7642 7641 0
-7642 -7640 0
c Var 'aux623' direct represents '2' with '-7641'
7640 7642 -7641 0
c Encoding variable: aux624 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00008_00001=3)))
c Both direct and order encoding.
c Var 'aux624' order represents '0' with '7643'
c Var 'aux624' direct represents '0' with '7643'
c Var 'aux624' order represents '1' with '7644'
-7643 7644 0
c Var 'aux624' direct represents '1' with '7645'
7643 -7644 7645 0
-7645 7644 0
-7645 -7643 0
c Var 'aux624' direct represents '2' with '-7644'
7643 7645 -7644 0
c Encoding variable: aux625 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00006_00001=3)))
c Both direct and order encoding.
c Var 'aux625' order represents '0' with '7646'
c Var 'aux625' direct represents '0' with '7646'
c Var 'aux625' order represents '1' with '7647'
-7646 7647 0
c Var 'aux625' direct represents '1' with '7648'
7646 -7647 7648 0
-7648 7647 0
-7648 -7646 0
c Var 'aux625' direct represents '2' with '-7647'
7646 7648 -7647 0
c Encoding variable: aux626 with domain: int(0..2) (representing constraint ((x_00009_00001=3) + (x_00004_00001=3)))
c Both direct and order encoding.
c Var 'aux626' order represents '0' with '7649'
c Var 'aux626' direct represents '0' with '7649'
c Var 'aux626' order represents '1' with '7650'
-7649 7650 0
c Var 'aux626' direct represents '1' with '7651'
7649 -7650 7651 0
-7651 7650 0
-7651 -7649 0
c Var 'aux626' direct represents '2' with '-7650'
7649 7651 -7650 0
c Encoding variable: aux627 with domain: int(0..3) (representing constraint ((x_00001_00001=3) + aux626))
c Both direct and order encoding.
c Var 'aux627' order represents '0' with '7652'
c Var 'aux627' direct represents '0' with '7652'
c Var 'aux627' order represents '1' with '7653'
-7652 7653 0
c Var 'aux627' direct represents '1' with '7654'
7652 -7653 7654 0
-7654 7653 0
-7654 -7652 0
c Var 'aux627' order represents '2' with '7655'
-7653 7655 0
c Var 'aux627' direct represents '2' with '7656'
7653 -7655 7656 0
-7656 7655 0
-7656 -7653 0
c Var 'aux627' direct represents '3' with '-7655'
7652 7654 7656 -7655 0
c Encoding variable: aux628 with domain: int(0..4) (representing constraint (aux623 + aux625))
c Both direct and order encoding.
c Var 'aux628' order represents '0' with '7657'
c Var 'aux628' direct represents '0' with '7657'
c Var 'aux628' order represents '1' with '7658'
-7657 7658 0
c Var 'aux628' direct represents '1' with '7659'
7657 -7658 7659 0
-7659 7658 0
-7659 -7657 0
c Var 'aux628' order represents '2' with '7660'
-7658 7660 0
c Var 'aux628' direct represents '2' with '7661'
7658 -7660 7661 0
-7661 7660 0
-7661 -7658 0
c Var 'aux628' order represents '3' with '7662'
-7660 7662 0
c Var 'aux628' direct represents '3' with '7663'
7660 -7662 7663 0
-7663 7662 0
-7663 -7660 0
c Var 'aux628' direct represents '4' with '-7662'
7657 7659 7661 7663 -7662 0
c Encoding variable: aux629 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00005_00001=4)))
c Both direct and order encoding.
c Var 'aux629' order represents '0' with '7664'
c Var 'aux629' direct represents '0' with '7664'
c Var 'aux629' order represents '1' with '7665'
-7664 7665 0
c Var 'aux629' direct represents '1' with '7666'
7664 -7665 7666 0
-7666 7665 0
-7666 -7664 0
c Var 'aux629' direct represents '2' with '-7665'
7664 7666 -7665 0
c Encoding variable: aux630 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00008_00001=4)))
c Both direct and order encoding.
c Var 'aux630' order represents '0' with '7667'
c Var 'aux630' direct represents '0' with '7667'
c Var 'aux630' order represents '1' with '7668'
-7667 7668 0
c Var 'aux630' direct represents '1' with '7669'
7667 -7668 7669 0
-7669 7668 0
-7669 -7667 0
c Var 'aux630' direct represents '2' with '-7668'
7667 7669 -7668 0
c Encoding variable: aux631 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00006_00001=4)))
c Both direct and order encoding.
c Var 'aux631' order represents '0' with '7670'
c Var 'aux631' direct represents '0' with '7670'
c Var 'aux631' order represents '1' with '7671'
-7670 7671 0
c Var 'aux631' direct represents '1' with '7672'
7670 -7671 7672 0
-7672 7671 0
-7672 -7670 0
c Var 'aux631' direct represents '2' with '-7671'
7670 7672 -7671 0
c Encoding variable: aux632 with domain: int(0..2) (representing constraint ((x_00009_00001=4) + (x_00004_00001=4)))
c Both direct and order encoding.
c Var 'aux632' order represents '0' with '7673'
c Var 'aux632' direct represents '0' with '7673'
c Var 'aux632' order represents '1' with '7674'
-7673 7674 0
c Var 'aux632' direct represents '1' with '7675'
7673 -7674 7675 0
-7675 7674 0
-7675 -7673 0
c Var 'aux632' direct represents '2' with '-7674'
7673 7675 -7674 0
c Encoding variable: aux633 with domain: int(0..3) (representing constraint ((x_00001_00001=4) + aux632))
c Both direct and order encoding.
c Var 'aux633' order represents '0' with '7676'
c Var 'aux633' direct represents '0' with '7676'
c Var 'aux633' order represents '1' with '7677'
-7676 7677 0
c Var 'aux633' direct represents '1' with '7678'
7676 -7677 7678 0
-7678 7677 0
-7678 -7676 0
c Var 'aux633' order represents '2' with '7679'
-7677 7679 0
c Var 'aux633' direct represents '2' with '7680'
7677 -7679 7680 0
-7680 7679 0
-7680 -7677 0
c Var 'aux633' direct represents '3' with '-7679'
7676 7678 7680 -7679 0
c Encoding variable: aux634 with domain: int(0..4) (representing constraint (aux629 + aux631))
c Both direct and order encoding.
c Var 'aux634' order represents '0' with '7681'
c Var 'aux634' direct represents '0' with '7681'
c Var 'aux634' order represents '1' with '7682'
-7681 7682 0
c Var 'aux634' direct represents '1' with '7683'
7681 -7682 7683 0
-7683 7682 0
-7683 -7681 0
c Var 'aux634' order represents '2' with '7684'
-7682 7684 0
c Var 'aux634' direct represents '2' with '7685'
7682 -7684 7685 0
-7685 7684 0
-7685 -7682 0
c Var 'aux634' order represents '3' with '7686'
-7684 7686 0
c Var 'aux634' direct represents '3' with '7687'
7684 -7686 7687 0
-7687 7686 0
-7687 -7684 0
c Var 'aux634' direct represents '4' with '-7686'
7681 7683 7685 7687 -7686 0
c Encoding variable: aux635 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00005_00001=5)))
c Both direct and order encoding.
c Var 'aux635' order represents '0' with '7688'
c Var 'aux635' direct represents '0' with '7688'
c Var 'aux635' order represents '1' with '7689'
-7688 7689 0
c Var 'aux635' direct represents '1' with '7690'
7688 -7689 7690 0
-7690 7689 0
-7690 -7688 0
c Var 'aux635' direct represents '2' with '-7689'
7688 7690 -7689 0
c Encoding variable: aux636 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00008_00001=5)))
c Both direct and order encoding.
c Var 'aux636' order represents '0' with '7691'
c Var 'aux636' direct represents '0' with '7691'
c Var 'aux636' order represents '1' with '7692'
-7691 7692 0
c Var 'aux636' direct represents '1' with '7693'
7691 -7692 7693 0
-7693 7692 0
-7693 -7691 0
c Var 'aux636' direct represents '2' with '-7692'
7691 7693 -7692 0
c Encoding variable: aux637 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00006_00001=5)))
c Both direct and order encoding.
c Var 'aux637' order represents '0' with '7694'
c Var 'aux637' direct represents '0' with '7694'
c Var 'aux637' order represents '1' with '7695'
-7694 7695 0
c Var 'aux637' direct represents '1' with '7696'
7694 -7695 7696 0
-7696 7695 0
-7696 -7694 0
c Var 'aux637' direct represents '2' with '-7695'
7694 7696 -7695 0
c Encoding variable: aux638 with domain: int(0..2) (representing constraint ((x_00009_00001=5) + (x_00004_00001=5)))
c Both direct and order encoding.
c Var 'aux638' order represents '0' with '7697'
c Var 'aux638' direct represents '0' with '7697'
c Var 'aux638' order represents '1' with '7698'
-7697 7698 0
c Var 'aux638' direct represents '1' with '7699'
7697 -7698 7699 0
-7699 7698 0
-7699 -7697 0
c Var 'aux638' direct represents '2' with '-7698'
7697 7699 -7698 0
c Encoding variable: aux639 with domain: int(0..3) (representing constraint ((x_00001_00001=5) + aux638))
c Both direct and order encoding.
c Var 'aux639' order represents '0' with '7700'
c Var 'aux639' direct represents '0' with '7700'
c Var 'aux639' order represents '1' with '7701'
-7700 7701 0
c Var 'aux639' direct represents '1' with '7702'
7700 -7701 7702 0
-7702 7701 0
-7702 -7700 0
c Var 'aux639' order represents '2' with '7703'
-7701 7703 0
c Var 'aux639' direct represents '2' with '7704'
7701 -7703 7704 0
-7704 7703 0
-7704 -7701 0
c Var 'aux639' direct represents '3' with '-7703'
7700 7702 7704 -7703 0
c Encoding variable: aux640 with domain: int(0..4) (representing constraint (aux635 + aux637))
c Both direct and order encoding.
c Var 'aux640' order represents '0' with '7705'
c Var 'aux640' direct represents '0' with '7705'
c Var 'aux640' order represents '1' with '7706'
-7705 7706 0
c Var 'aux640' direct represents '1' with '7707'
7705 -7706 7707 0
-7707 7706 0
-7707 -7705 0
c Var 'aux640' order represents '2' with '7708'
-7706 7708 0
c Var 'aux640' direct represents '2' with '7709'
7706 -7708 7709 0
-7709 7708 0
-7709 -7706 0
c Var 'aux640' order represents '3' with '7710'
-7708 7710 0
c Var 'aux640' direct represents '3' with '7711'
7708 -7710 7711 0
-7711 7710 0
-7711 -7708 0
c Var 'aux640' direct represents '4' with '-7710'
7705 7707 7709 7711 -7710 0
c Encoding variable: aux641 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00005_00001=6)))
c Both direct and order encoding.
c Var 'aux641' order represents '0' with '7712'
c Var 'aux641' direct represents '0' with '7712'
c Var 'aux641' order represents '1' with '7713'
-7712 7713 0
c Var 'aux641' direct represents '1' with '7714'
7712 -7713 7714 0
-7714 7713 0
-7714 -7712 0
c Var 'aux641' direct represents '2' with '-7713'
7712 7714 -7713 0
c Encoding variable: aux642 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00008_00001=6)))
c Both direct and order encoding.
c Var 'aux642' order represents '0' with '7715'
c Var 'aux642' direct represents '0' with '7715'
c Var 'aux642' order represents '1' with '7716'
-7715 7716 0
c Var 'aux642' direct represents '1' with '7717'
7715 -7716 7717 0
-7717 7716 0
-7717 -7715 0
c Var 'aux642' direct represents '2' with '-7716'
7715 7717 -7716 0
c Encoding variable: aux643 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00006_00001=6)))
c Both direct and order encoding.
c Var 'aux643' order represents '0' with '7718'
c Var 'aux643' direct represents '0' with '7718'
c Var 'aux643' order represents '1' with '7719'
-7718 7719 0
c Var 'aux643' direct represents '1' with '7720'
7718 -7719 7720 0
-7720 7719 0
-7720 -7718 0
c Var 'aux643' direct represents '2' with '-7719'
7718 7720 -7719 0
c Encoding variable: aux644 with domain: int(0..2) (representing constraint ((x_00009_00001=6) + (x_00004_00001=6)))
c Both direct and order encoding.
c Var 'aux644' order represents '0' with '7721'
c Var 'aux644' direct represents '0' with '7721'
c Var 'aux644' order represents '1' with '7722'
-7721 7722 0
c Var 'aux644' direct represents '1' with '7723'
7721 -7722 7723 0
-7723 7722 0
-7723 -7721 0
c Var 'aux644' direct represents '2' with '-7722'
7721 7723 -7722 0
c Encoding variable: aux645 with domain: int(0..3) (representing constraint ((x_00001_00001=6) + aux644))
c Both direct and order encoding.
c Var 'aux645' order represents '0' with '7724'
c Var 'aux645' direct represents '0' with '7724'
c Var 'aux645' order represents '1' with '7725'
-7724 7725 0
c Var 'aux645' direct represents '1' with '7726'
7724 -7725 7726 0
-7726 7725 0
-7726 -7724 0
c Var 'aux645' order represents '2' with '7727'
-7725 7727 0
c Var 'aux645' direct represents '2' with '7728'
7725 -7727 7728 0
-7728 7727 0
-7728 -7725 0
c Var 'aux645' direct represents '3' with '-7727'
7724 7726 7728 -7727 0
c Encoding variable: aux646 with domain: int(0..4) (representing constraint (aux641 + aux643))
c Both direct and order encoding.
c Var 'aux646' order represents '0' with '7729'
c Var 'aux646' direct represents '0' with '7729'
c Var 'aux646' order represents '1' with '7730'
-7729 7730 0
c Var 'aux646' direct represents '1' with '7731'
7729 -7730 7731 0
-7731 7730 0
-7731 -7729 0
c Var 'aux646' order represents '2' with '7732'
-7730 7732 0
c Var 'aux646' direct represents '2' with '7733'
7730 -7732 7733 0
-7733 7732 0
-7733 -7730 0
c Var 'aux646' order represents '3' with '7734'
-7732 7734 0
c Var 'aux646' direct represents '3' with '7735'
7732 -7734 7735 0
-7735 7734 0
-7735 -7732 0
c Var 'aux646' direct represents '4' with '-7734'
7729 7731 7733 7735 -7734 0
c Encoding variable: aux647 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00005_00001=7)))
c Both direct and order encoding.
c Var 'aux647' order represents '0' with '7736'
c Var 'aux647' direct represents '0' with '7736'
c Var 'aux647' order represents '1' with '7737'
-7736 7737 0
c Var 'aux647' direct represents '1' with '7738'
7736 -7737 7738 0
-7738 7737 0
-7738 -7736 0
c Var 'aux647' direct represents '2' with '-7737'
7736 7738 -7737 0
c Encoding variable: aux648 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00008_00001=7)))
c Both direct and order encoding.
c Var 'aux648' order represents '0' with '7739'
c Var 'aux648' direct represents '0' with '7739'
c Var 'aux648' order represents '1' with '7740'
-7739 7740 0
c Var 'aux648' direct represents '1' with '7741'
7739 -7740 7741 0
-7741 7740 0
-7741 -7739 0
c Var 'aux648' direct represents '2' with '-7740'
7739 7741 -7740 0
c Encoding variable: aux649 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00006_00001=7)))
c Both direct and order encoding.
c Var 'aux649' order represents '0' with '7742'
c Var 'aux649' direct represents '0' with '7742'
c Var 'aux649' order represents '1' with '7743'
-7742 7743 0
c Var 'aux649' direct represents '1' with '7744'
7742 -7743 7744 0
-7744 7743 0
-7744 -7742 0
c Var 'aux649' direct represents '2' with '-7743'
7742 7744 -7743 0
c Encoding variable: aux650 with domain: int(0..2) (representing constraint ((x_00009_00001=7) + (x_00004_00001=7)))
c Both direct and order encoding.
c Var 'aux650' order represents '0' with '7745'
c Var 'aux650' direct represents '0' with '7745'
c Var 'aux650' order represents '1' with '7746'
-7745 7746 0
c Var 'aux650' direct represents '1' with '7747'
7745 -7746 7747 0
-7747 7746 0
-7747 -7745 0
c Var 'aux650' direct represents '2' with '-7746'
7745 7747 -7746 0
c Encoding variable: aux651 with domain: int(0..3) (representing constraint ((x_00001_00001=7) + aux650))
c Both direct and order encoding.
c Var 'aux651' order represents '0' with '7748'
c Var 'aux651' direct represents '0' with '7748'
c Var 'aux651' order represents '1' with '7749'
-7748 7749 0
c Var 'aux651' direct represents '1' with '7750'
7748 -7749 7750 0
-7750 7749 0
-7750 -7748 0
c Var 'aux651' order represents '2' with '7751'
-7749 7751 0
c Var 'aux651' direct represents '2' with '7752'
7749 -7751 7752 0
-7752 7751 0
-7752 -7749 0
c Var 'aux651' direct represents '3' with '-7751'
7748 7750 7752 -7751 0
c Encoding variable: aux652 with domain: int(0..4) (representing constraint (aux647 + aux649))
c Both direct and order encoding.
c Var 'aux652' order represents '0' with '7753'
c Var 'aux652' direct represents '0' with '7753'
c Var 'aux652' order represents '1' with '7754'
-7753 7754 0
c Var 'aux652' direct represents '1' with '7755'
7753 -7754 7755 0
-7755 7754 0
-7755 -7753 0
c Var 'aux652' order represents '2' with '7756'
-7754 7756 0
c Var 'aux652' direct represents '2' with '7757'
7754 -7756 7757 0
-7757 7756 0
-7757 -7754 0
c Var 'aux652' order represents '3' with '7758'
-7756 7758 0
c Var 'aux652' direct represents '3' with '7759'
7756 -7758 7759 0
-7759 7758 0
-7759 -7756 0
c Var 'aux652' direct represents '4' with '-7758'
7753 7755 7757 7759 -7758 0
c Encoding variable: aux653 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00005_00001=8)))
c Both direct and order encoding.
c Var 'aux653' order represents '0' with '7760'
c Var 'aux653' direct represents '0' with '7760'
c Var 'aux653' order represents '1' with '7761'
-7760 7761 0
c Var 'aux653' direct represents '1' with '7762'
7760 -7761 7762 0
-7762 7761 0
-7762 -7760 0
c Var 'aux653' direct represents '2' with '-7761'
7760 7762 -7761 0
c Encoding variable: aux654 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00008_00001=8)))
c Both direct and order encoding.
c Var 'aux654' order represents '0' with '7763'
c Var 'aux654' direct represents '0' with '7763'
c Var 'aux654' order represents '1' with '7764'
-7763 7764 0
c Var 'aux654' direct represents '1' with '7765'
7763 -7764 7765 0
-7765 7764 0
-7765 -7763 0
c Var 'aux654' direct represents '2' with '-7764'
7763 7765 -7764 0
c Encoding variable: aux655 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00006_00001=8)))
c Both direct and order encoding.
c Var 'aux655' order represents '0' with '7766'
c Var 'aux655' direct represents '0' with '7766'
c Var 'aux655' order represents '1' with '7767'
-7766 7767 0
c Var 'aux655' direct represents '1' with '7768'
7766 -7767 7768 0
-7768 7767 0
-7768 -7766 0
c Var 'aux655' direct represents '2' with '-7767'
7766 7768 -7767 0
c Encoding variable: aux656 with domain: int(0..2) (representing constraint ((x_00009_00001=8) + (x_00004_00001=8)))
c Both direct and order encoding.
c Var 'aux656' order represents '0' with '7769'
c Var 'aux656' direct represents '0' with '7769'
c Var 'aux656' order represents '1' with '7770'
-7769 7770 0
c Var 'aux656' direct represents '1' with '7771'
7769 -7770 7771 0
-7771 7770 0
-7771 -7769 0
c Var 'aux656' direct represents '2' with '-7770'
7769 7771 -7770 0
c Encoding variable: aux657 with domain: int(0..3) (representing constraint ((x_00001_00001=8) + aux656))
c Both direct and order encoding.
c Var 'aux657' order represents '0' with '7772'
c Var 'aux657' direct represents '0' with '7772'
c Var 'aux657' order represents '1' with '7773'
-7772 7773 0
c Var 'aux657' direct represents '1' with '7774'
7772 -7773 7774 0
-7774 7773 0
-7774 -7772 0
c Var 'aux657' order represents '2' with '7775'
-7773 7775 0
c Var 'aux657' direct represents '2' with '7776'
7773 -7775 7776 0
-7776 7775 0
-7776 -7773 0
c Var 'aux657' direct represents '3' with '-7775'
7772 7774 7776 -7775 0
c Encoding variable: aux658 with domain: int(0..4) (representing constraint (aux653 + aux655))
c Both direct and order encoding.
c Var 'aux658' order represents '0' with '7777'
c Var 'aux658' direct represents '0' with '7777'
c Var 'aux658' order represents '1' with '7778'
-7777 7778 0
c Var 'aux658' direct represents '1' with '7779'
7777 -7778 7779 0
-7779 7778 0
-7779 -7777 0
c Var 'aux658' order represents '2' with '7780'
-7778 7780 0
c Var 'aux658' direct represents '2' with '7781'
7778 -7780 7781 0
-7781 7780 0
-7781 -7778 0
c Var 'aux658' order represents '3' with '7782'
-7780 7782 0
c Var 'aux658' direct represents '3' with '7783'
7780 -7782 7783 0
-7783 7782 0
-7783 -7780 0
c Var 'aux658' direct represents '4' with '-7782'
7777 7779 7781 7783 -7782 0
c Encoding variable: aux659 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00005_00001=9)))
c Both direct and order encoding.
c Var 'aux659' order represents '0' with '7784'
c Var 'aux659' direct represents '0' with '7784'
c Var 'aux659' order represents '1' with '7785'
-7784 7785 0
c Var 'aux659' direct represents '1' with '7786'
7784 -7785 7786 0
-7786 7785 0
-7786 -7784 0
c Var 'aux659' direct represents '2' with '-7785'
7784 7786 -7785 0
c Encoding variable: aux660 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00008_00001=9)))
c Both direct and order encoding.
c Var 'aux660' order represents '0' with '7787'
c Var 'aux660' direct represents '0' with '7787'
c Var 'aux660' order represents '1' with '7788'
-7787 7788 0
c Var 'aux660' direct represents '1' with '7789'
7787 -7788 7789 0
-7789 7788 0
-7789 -7787 0
c Var 'aux660' direct represents '2' with '-7788'
7787 7789 -7788 0
c Encoding variable: aux661 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00006_00001=9)))
c Both direct and order encoding.
c Var 'aux661' order represents '0' with '7790'
c Var 'aux661' direct represents '0' with '7790'
c Var 'aux661' order represents '1' with '7791'
-7790 7791 0
c Var 'aux661' direct represents '1' with '7792'
7790 -7791 7792 0
-7792 7791 0
-7792 -7790 0
c Var 'aux661' direct represents '2' with '-7791'
7790 7792 -7791 0
c Encoding variable: aux662 with domain: int(0..2) (representing constraint ((x_00009_00001=9) + (x_00004_00001=9)))
c Both direct and order encoding.
c Var 'aux662' order represents '0' with '7793'
c Var 'aux662' direct represents '0' with '7793'
c Var 'aux662' order represents '1' with '7794'
-7793 7794 0
c Var 'aux662' direct represents '1' with '7795'
7793 -7794 7795 0
-7795 7794 0
-7795 -7793 0
c Var 'aux662' direct represents '2' with '-7794'
7793 7795 -7794 0
c Encoding variable: aux663 with domain: int(0..3) (representing constraint ((x_00001_00001=9) + aux662))
c Both direct and order encoding.
c Var 'aux663' order represents '0' with '7796'
c Var 'aux663' direct represents '0' with '7796'
c Var 'aux663' order represents '1' with '7797'
-7796 7797 0
c Var 'aux663' direct represents '1' with '7798'
7796 -7797 7798 0
-7798 7797 0
-7798 -7796 0
c Var 'aux663' order represents '2' with '7799'
-7797 7799 0
c Var 'aux663' direct represents '2' with '7800'
7797 -7799 7800 0
-7800 7799 0
-7800 -7797 0
c Var 'aux663' direct represents '3' with '-7799'
7796 7798 7800 -7799 0
c Encoding variable: aux664 with domain: int(0..4) (representing constraint (aux659 + aux661))
c Both direct and order encoding.
c Var 'aux664' order represents '0' with '7801'
c Var 'aux664' direct represents '0' with '7801'
c Var 'aux664' order represents '1' with '7802'
-7801 7802 0
c Var 'aux664' direct represents '1' with '7803'
7801 -7802 7803 0
-7803 7802 0
-7803 -7801 0
c Var 'aux664' order represents '2' with '7804'
-7802 7804 0
c Var 'aux664' direct represents '2' with '7805'
7802 -7804 7805 0
-7805 7804 0
-7805 -7802 0
c Var 'aux664' order represents '3' with '7806'
-7804 7806 0
c Var 'aux664' direct represents '3' with '7807'
7804 -7806 7807 0
-7807 7806 0
-7807 -7804 0
c Var 'aux664' direct represents '4' with '-7806'
7801 7803 7805 7807 -7806 0
c Encoding variable: aux665 with domain: int(0..2) (representing constraint ((x_00003_00002=1) + (x_00005_00002=1)))
c Both direct and order encoding.
c Var 'aux665' order represents '0' with '7808'
c Var 'aux665' direct represents '0' with '7808'
c Var 'aux665' order represents '1' with '7809'
-7808 7809 0
c Var 'aux665' direct represents '1' with '7810'
7808 -7809 7810 0
-7810 7809 0
-7810 -7808 0
c Var 'aux665' direct represents '2' with '-7809'
7808 7810 -7809 0
c Encoding variable: aux666 with domain: int(0..2) (representing constraint ((x_00007_00002=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux666' order represents '0' with '7811'
c Var 'aux666' direct represents '0' with '7811'
c Var 'aux666' order represents '1' with '7812'
-7811 7812 0
c Var 'aux666' direct represents '1' with '7813'
7811 -7812 7813 0
-7813 7812 0
-7813 -7811 0
c Var 'aux666' direct represents '2' with '-7812'
7811 7813 -7812 0
c Encoding variable: aux667 with domain: int(0..2) (representing constraint ((x_00002_00002=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux667' order represents '0' with '7814'
c Var 'aux667' direct represents '0' with '7814'
c Var 'aux667' order represents '1' with '7815'
-7814 7815 0
c Var 'aux667' direct represents '1' with '7816'
7814 -7815 7816 0
-7816 7815 0
-7816 -7814 0
c Var 'aux667' direct represents '2' with '-7815'
7814 7816 -7815 0
c Encoding variable: aux668 with domain: int(0..2) (representing constraint ((x_00009_00002=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux668' order represents '0' with '7817'
c Var 'aux668' direct represents '0' with '7817'
c Var 'aux668' order represents '1' with '7818'
-7817 7818 0
c Var 'aux668' direct represents '1' with '7819'
7817 -7818 7819 0
-7819 7818 0
-7819 -7817 0
c Var 'aux668' direct represents '2' with '-7818'
7817 7819 -7818 0
c Encoding variable: aux669 with domain: int(0..3) (representing constraint ((x_00001_00002=1) + aux668))
c Both direct and order encoding.
c Var 'aux669' order represents '0' with '7820'
c Var 'aux669' direct represents '0' with '7820'
c Var 'aux669' order represents '1' with '7821'
-7820 7821 0
c Var 'aux669' direct represents '1' with '7822'
7820 -7821 7822 0
-7822 7821 0
-7822 -7820 0
c Var 'aux669' order represents '2' with '7823'
-7821 7823 0
c Var 'aux669' direct represents '2' with '7824'
7821 -7823 7824 0
-7824 7823 0
-7824 -7821 0
c Var 'aux669' direct represents '3' with '-7823'
7820 7822 7824 -7823 0
c Encoding variable: aux670 with domain: int(0..4) (representing constraint (aux665 + aux667))
c Both direct and order encoding.
c Var 'aux670' order represents '0' with '7825'
c Var 'aux670' direct represents '0' with '7825'
c Var 'aux670' order represents '1' with '7826'
-7825 7826 0
c Var 'aux670' direct represents '1' with '7827'
7825 -7826 7827 0
-7827 7826 0
-7827 -7825 0
c Var 'aux670' order represents '2' with '7828'
-7826 7828 0
c Var 'aux670' direct represents '2' with '7829'
7826 -7828 7829 0
-7829 7828 0
-7829 -7826 0
c Var 'aux670' order represents '3' with '7830'
-7828 7830 0
c Var 'aux670' direct represents '3' with '7831'
7828 -7830 7831 0
-7831 7830 0
-7831 -7828 0
c Var 'aux670' direct represents '4' with '-7830'
7825 7827 7829 7831 -7830 0
c Encoding variable: aux671 with domain: int(0..2) (representing constraint ((x_00003_00002=2) + (x_00005_00002=2)))
c Both direct and order encoding.
c Var 'aux671' order represents '0' with '7832'
c Var 'aux671' direct represents '0' with '7832'
c Var 'aux671' order represents '1' with '7833'
-7832 7833 0
c Var 'aux671' direct represents '1' with '7834'
7832 -7833 7834 0
-7834 7833 0
-7834 -7832 0
c Var 'aux671' direct represents '2' with '-7833'
7832 7834 -7833 0
c Encoding variable: aux672 with domain: int(0..2) (representing constraint ((x_00007_00002=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux672' order represents '0' with '7835'
c Var 'aux672' direct represents '0' with '7835'
c Var 'aux672' order represents '1' with '7836'
-7835 7836 0
c Var 'aux672' direct represents '1' with '7837'
7835 -7836 7837 0
-7837 7836 0
-7837 -7835 0
c Var 'aux672' direct represents '2' with '-7836'
7835 7837 -7836 0
c Encoding variable: aux673 with domain: int(0..2) (representing constraint ((x_00002_00002=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux673' order represents '0' with '7838'
c Var 'aux673' direct represents '0' with '7838'
c Var 'aux673' order represents '1' with '7839'
-7838 7839 0
c Var 'aux673' direct represents '1' with '7840'
7838 -7839 7840 0
-7840 7839 0
-7840 -7838 0
c Var 'aux673' direct represents '2' with '-7839'
7838 7840 -7839 0
c Encoding variable: aux674 with domain: int(0..2) (representing constraint ((x_00009_00002=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux674' order represents '0' with '7841'
c Var 'aux674' direct represents '0' with '7841'
c Var 'aux674' order represents '1' with '7842'
-7841 7842 0
c Var 'aux674' direct represents '1' with '7843'
7841 -7842 7843 0
-7843 7842 0
-7843 -7841 0
c Var 'aux674' direct represents '2' with '-7842'
7841 7843 -7842 0
c Encoding variable: aux675 with domain: int(0..3) (representing constraint ((x_00001_00002=2) + aux674))
c Both direct and order encoding.
c Var 'aux675' order represents '0' with '7844'
c Var 'aux675' direct represents '0' with '7844'
c Var 'aux675' order represents '1' with '7845'
-7844 7845 0
c Var 'aux675' direct represents '1' with '7846'
7844 -7845 7846 0
-7846 7845 0
-7846 -7844 0
c Var 'aux675' order represents '2' with '7847'
-7845 7847 0
c Var 'aux675' direct represents '2' with '7848'
7845 -7847 7848 0
-7848 7847 0
-7848 -7845 0
c Var 'aux675' direct represents '3' with '-7847'
7844 7846 7848 -7847 0
c Encoding variable: aux676 with domain: int(0..4) (representing constraint (aux671 + aux673))
c Both direct and order encoding.
c Var 'aux676' order represents '0' with '7849'
c Var 'aux676' direct represents '0' with '7849'
c Var 'aux676' order represents '1' with '7850'
-7849 7850 0
c Var 'aux676' direct represents '1' with '7851'
7849 -7850 7851 0
-7851 7850 0
-7851 -7849 0
c Var 'aux676' order represents '2' with '7852'
-7850 7852 0
c Var 'aux676' direct represents '2' with '7853'
7850 -7852 7853 0
-7853 7852 0
-7853 -7850 0
c Var 'aux676' order represents '3' with '7854'
-7852 7854 0
c Var 'aux676' direct represents '3' with '7855'
7852 -7854 7855 0
-7855 7854 0
-7855 -7852 0
c Var 'aux676' direct represents '4' with '-7854'
7849 7851 7853 7855 -7854 0
c Encoding variable: aux677 with domain: int(0..2) (representing constraint ((x_00003_00002=3) + (x_00005_00002=3)))
c Both direct and order encoding.
c Var 'aux677' order represents '0' with '7856'
c Var 'aux677' direct represents '0' with '7856'
c Var 'aux677' order represents '1' with '7857'
-7856 7857 0
c Var 'aux677' direct represents '1' with '7858'
7856 -7857 7858 0
-7858 7857 0
-7858 -7856 0
c Var 'aux677' direct represents '2' with '-7857'
7856 7858 -7857 0
c Encoding variable: aux678 with domain: int(0..2) (representing constraint ((x_00007_00002=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux678' order represents '0' with '7859'
c Var 'aux678' direct represents '0' with '7859'
c Var 'aux678' order represents '1' with '7860'
-7859 7860 0
c Var 'aux678' direct represents '1' with '7861'
7859 -7860 7861 0
-7861 7860 0
-7861 -7859 0
c Var 'aux678' direct represents '2' with '-7860'
7859 7861 -7860 0
c Encoding variable: aux679 with domain: int(0..2) (representing constraint ((x_00002_00002=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux679' order represents '0' with '7862'
c Var 'aux679' direct represents '0' with '7862'
c Var 'aux679' order represents '1' with '7863'
-7862 7863 0
c Var 'aux679' direct represents '1' with '7864'
7862 -7863 7864 0
-7864 7863 0
-7864 -7862 0
c Var 'aux679' direct represents '2' with '-7863'
7862 7864 -7863 0
c Encoding variable: aux680 with domain: int(0..2) (representing constraint ((x_00009_00002=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux680' order represents '0' with '7865'
c Var 'aux680' direct represents '0' with '7865'
c Var 'aux680' order represents '1' with '7866'
-7865 7866 0
c Var 'aux680' direct represents '1' with '7867'
7865 -7866 7867 0
-7867 7866 0
-7867 -7865 0
c Var 'aux680' direct represents '2' with '-7866'
7865 7867 -7866 0
c Encoding variable: aux681 with domain: int(0..3) (representing constraint ((x_00001_00002=3) + aux680))
c Both direct and order encoding.
c Var 'aux681' order represents '0' with '7868'
c Var 'aux681' direct represents '0' with '7868'
c Var 'aux681' order represents '1' with '7869'
-7868 7869 0
c Var 'aux681' direct represents '1' with '7870'
7868 -7869 7870 0
-7870 7869 0
-7870 -7868 0
c Var 'aux681' order represents '2' with '7871'
-7869 7871 0
c Var 'aux681' direct represents '2' with '7872'
7869 -7871 7872 0
-7872 7871 0
-7872 -7869 0
c Var 'aux681' direct represents '3' with '-7871'
7868 7870 7872 -7871 0
c Encoding variable: aux682 with domain: int(0..4) (representing constraint (aux677 + aux679))
c Both direct and order encoding.
c Var 'aux682' order represents '0' with '7873'
c Var 'aux682' direct represents '0' with '7873'
c Var 'aux682' order represents '1' with '7874'
-7873 7874 0
c Var 'aux682' direct represents '1' with '7875'
7873 -7874 7875 0
-7875 7874 0
-7875 -7873 0
c Var 'aux682' order represents '2' with '7876'
-7874 7876 0
c Var 'aux682' direct represents '2' with '7877'
7874 -7876 7877 0
-7877 7876 0
-7877 -7874 0
c Var 'aux682' order represents '3' with '7878'
-7876 7878 0
c Var 'aux682' direct represents '3' with '7879'
7876 -7878 7879 0
-7879 7878 0
-7879 -7876 0
c Var 'aux682' direct represents '4' with '-7878'
7873 7875 7877 7879 -7878 0
c Encoding variable: aux683 with domain: int(0..2) (representing constraint ((x_00003_00002=4) + (x_00005_00002=4)))
c Both direct and order encoding.
c Var 'aux683' order represents '0' with '7880'
c Var 'aux683' direct represents '0' with '7880'
c Var 'aux683' order represents '1' with '7881'
-7880 7881 0
c Var 'aux683' direct represents '1' with '7882'
7880 -7881 7882 0
-7882 7881 0
-7882 -7880 0
c Var 'aux683' direct represents '2' with '-7881'
7880 7882 -7881 0
c Encoding variable: aux684 with domain: int(0..2) (representing constraint ((x_00007_00002=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux684' order represents '0' with '7883'
c Var 'aux684' direct represents '0' with '7883'
c Var 'aux684' order represents '1' with '7884'
-7883 7884 0
c Var 'aux684' direct represents '1' with '7885'
7883 -7884 7885 0
-7885 7884 0
-7885 -7883 0
c Var 'aux684' direct represents '2' with '-7884'
7883 7885 -7884 0
c Encoding variable: aux685 with domain: int(0..2) (representing constraint ((x_00002_00002=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux685' order represents '0' with '7886'
c Var 'aux685' direct represents '0' with '7886'
c Var 'aux685' order represents '1' with '7887'
-7886 7887 0
c Var 'aux685' direct represents '1' with '7888'
7886 -7887 7888 0
-7888 7887 0
-7888 -7886 0
c Var 'aux685' direct represents '2' with '-7887'
7886 7888 -7887 0
c Encoding variable: aux686 with domain: int(0..2) (representing constraint ((x_00009_00002=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux686' order represents '0' with '7889'
c Var 'aux686' direct represents '0' with '7889'
c Var 'aux686' order represents '1' with '7890'
-7889 7890 0
c Var 'aux686' direct represents '1' with '7891'
7889 -7890 7891 0
-7891 7890 0
-7891 -7889 0
c Var 'aux686' direct represents '2' with '-7890'
7889 7891 -7890 0
c Encoding variable: aux687 with domain: int(0..3) (representing constraint ((x_00001_00002=4) + aux686))
c Both direct and order encoding.
c Var 'aux687' order represents '0' with '7892'
c Var 'aux687' direct represents '0' with '7892'
c Var 'aux687' order represents '1' with '7893'
-7892 7893 0
c Var 'aux687' direct represents '1' with '7894'
7892 -7893 7894 0
-7894 7893 0
-7894 -7892 0
c Var 'aux687' order represents '2' with '7895'
-7893 7895 0
c Var 'aux687' direct represents '2' with '7896'
7893 -7895 7896 0
-7896 7895 0
-7896 -7893 0
c Var 'aux687' direct represents '3' with '-7895'
7892 7894 7896 -7895 0
c Encoding variable: aux688 with domain: int(0..4) (representing constraint (aux683 + aux685))
c Both direct and order encoding.
c Var 'aux688' order represents '0' with '7897'
c Var 'aux688' direct represents '0' with '7897'
c Var 'aux688' order represents '1' with '7898'
-7897 7898 0
c Var 'aux688' direct represents '1' with '7899'
7897 -7898 7899 0
-7899 7898 0
-7899 -7897 0
c Var 'aux688' order represents '2' with '7900'
-7898 7900 0
c Var 'aux688' direct represents '2' with '7901'
7898 -7900 7901 0
-7901 7900 0
-7901 -7898 0
c Var 'aux688' order represents '3' with '7902'
-7900 7902 0
c Var 'aux688' direct represents '3' with '7903'
7900 -7902 7903 0
-7903 7902 0
-7903 -7900 0
c Var 'aux688' direct represents '4' with '-7902'
7897 7899 7901 7903 -7902 0
c Encoding variable: aux689 with domain: int(0..2) (representing constraint ((x_00003_00002=5) + (x_00005_00002=5)))
c Both direct and order encoding.
c Var 'aux689' order represents '0' with '7904'
c Var 'aux689' direct represents '0' with '7904'
c Var 'aux689' order represents '1' with '7905'
-7904 7905 0
c Var 'aux689' direct represents '1' with '7906'
7904 -7905 7906 0
-7906 7905 0
-7906 -7904 0
c Var 'aux689' direct represents '2' with '-7905'
7904 7906 -7905 0
c Encoding variable: aux690 with domain: int(0..2) (representing constraint ((x_00007_00002=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux690' order represents '0' with '7907'
c Var 'aux690' direct represents '0' with '7907'
c Var 'aux690' order represents '1' with '7908'
-7907 7908 0
c Var 'aux690' direct represents '1' with '7909'
7907 -7908 7909 0
-7909 7908 0
-7909 -7907 0
c Var 'aux690' direct represents '2' with '-7908'
7907 7909 -7908 0
c Encoding variable: aux691 with domain: int(0..2) (representing constraint ((x_00002_00002=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux691' order represents '0' with '7910'
c Var 'aux691' direct represents '0' with '7910'
c Var 'aux691' order represents '1' with '7911'
-7910 7911 0
c Var 'aux691' direct represents '1' with '7912'
7910 -7911 7912 0
-7912 7911 0
-7912 -7910 0
c Var 'aux691' direct represents '2' with '-7911'
7910 7912 -7911 0
c Encoding variable: aux692 with domain: int(0..2) (representing constraint ((x_00009_00002=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux692' order represents '0' with '7913'
c Var 'aux692' direct represents '0' with '7913'
c Var 'aux692' order represents '1' with '7914'
-7913 7914 0
c Var 'aux692' direct represents '1' with '7915'
7913 -7914 7915 0
-7915 7914 0
-7915 -7913 0
c Var 'aux692' direct represents '2' with '-7914'
7913 7915 -7914 0
c Encoding variable: aux693 with domain: int(0..3) (representing constraint ((x_00001_00002=5) + aux692))
c Both direct and order encoding.
c Var 'aux693' order represents '0' with '7916'
c Var 'aux693' direct represents '0' with '7916'
c Var 'aux693' order represents '1' with '7917'
-7916 7917 0
c Var 'aux693' direct represents '1' with '7918'
7916 -7917 7918 0
-7918 7917 0
-7918 -7916 0
c Var 'aux693' order represents '2' with '7919'
-7917 7919 0
c Var 'aux693' direct represents '2' with '7920'
7917 -7919 7920 0
-7920 7919 0
-7920 -7917 0
c Var 'aux693' direct represents '3' with '-7919'
7916 7918 7920 -7919 0
c Encoding variable: aux694 with domain: int(0..4) (representing constraint (aux689 + aux691))
c Both direct and order encoding.
c Var 'aux694' order represents '0' with '7921'
c Var 'aux694' direct represents '0' with '7921'
c Var 'aux694' order represents '1' with '7922'
-7921 7922 0
c Var 'aux694' direct represents '1' with '7923'
7921 -7922 7923 0
-7923 7922 0
-7923 -7921 0
c Var 'aux694' order represents '2' with '7924'
-7922 7924 0
c Var 'aux694' direct represents '2' with '7925'
7922 -7924 7925 0
-7925 7924 0
-7925 -7922 0
c Var 'aux694' order represents '3' with '7926'
-7924 7926 0
c Var 'aux694' direct represents '3' with '7927'
7924 -7926 7927 0
-7927 7926 0
-7927 -7924 0
c Var 'aux694' direct represents '4' with '-7926'
7921 7923 7925 7927 -7926 0
c Encoding variable: aux695 with domain: int(0..2) (representing constraint ((x_00003_00002=6) + (x_00005_00002=6)))
c Both direct and order encoding.
c Var 'aux695' order represents '0' with '7928'
c Var 'aux695' direct represents '0' with '7928'
c Var 'aux695' order represents '1' with '7929'
-7928 7929 0
c Var 'aux695' direct represents '1' with '7930'
7928 -7929 7930 0
-7930 7929 0
-7930 -7928 0
c Var 'aux695' direct represents '2' with '-7929'
7928 7930 -7929 0
c Encoding variable: aux696 with domain: int(0..2) (representing constraint ((x_00007_00002=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux696' order represents '0' with '7931'
c Var 'aux696' direct represents '0' with '7931'
c Var 'aux696' order represents '1' with '7932'
-7931 7932 0
c Var 'aux696' direct represents '1' with '7933'
7931 -7932 7933 0
-7933 7932 0
-7933 -7931 0
c Var 'aux696' direct represents '2' with '-7932'
7931 7933 -7932 0
c Encoding variable: aux697 with domain: int(0..2) (representing constraint ((x_00002_00002=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux697' order represents '0' with '7934'
c Var 'aux697' direct represents '0' with '7934'
c Var 'aux697' order represents '1' with '7935'
-7934 7935 0
c Var 'aux697' direct represents '1' with '7936'
7934 -7935 7936 0
-7936 7935 0
-7936 -7934 0
c Var 'aux697' direct represents '2' with '-7935'
7934 7936 -7935 0
c Encoding variable: aux698 with domain: int(0..2) (representing constraint ((x_00009_00002=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux698' order represents '0' with '7937'
c Var 'aux698' direct represents '0' with '7937'
c Var 'aux698' order represents '1' with '7938'
-7937 7938 0
c Var 'aux698' direct represents '1' with '7939'
7937 -7938 7939 0
-7939 7938 0
-7939 -7937 0
c Var 'aux698' direct represents '2' with '-7938'
7937 7939 -7938 0
c Encoding variable: aux699 with domain: int(0..3) (representing constraint ((x_00001_00002=6) + aux698))
c Both direct and order encoding.
c Var 'aux699' order represents '0' with '7940'
c Var 'aux699' direct represents '0' with '7940'
c Var 'aux699' order represents '1' with '7941'
-7940 7941 0
c Var 'aux699' direct represents '1' with '7942'
7940 -7941 7942 0
-7942 7941 0
-7942 -7940 0
c Var 'aux699' order represents '2' with '7943'
-7941 7943 0
c Var 'aux699' direct represents '2' with '7944'
7941 -7943 7944 0
-7944 7943 0
-7944 -7941 0
c Var 'aux699' direct represents '3' with '-7943'
7940 7942 7944 -7943 0
c Encoding variable: aux700 with domain: int(0..4) (representing constraint (aux695 + aux697))
c Both direct and order encoding.
c Var 'aux700' order represents '0' with '7945'
c Var 'aux700' direct represents '0' with '7945'
c Var 'aux700' order represents '1' with '7946'
-7945 7946 0
c Var 'aux700' direct represents '1' with '7947'
7945 -7946 7947 0
-7947 7946 0
-7947 -7945 0
c Var 'aux700' order represents '2' with '7948'
-7946 7948 0
c Var 'aux700' direct represents '2' with '7949'
7946 -7948 7949 0
-7949 7948 0
-7949 -7946 0
c Var 'aux700' order represents '3' with '7950'
-7948 7950 0
c Var 'aux700' direct represents '3' with '7951'
7948 -7950 7951 0
-7951 7950 0
-7951 -7948 0
c Var 'aux700' direct represents '4' with '-7950'
7945 7947 7949 7951 -7950 0
c Encoding variable: aux701 with domain: int(0..2) (representing constraint ((x_00003_00002=7) + (x_00005_00002=7)))
c Both direct and order encoding.
c Var 'aux701' order represents '0' with '7952'
c Var 'aux701' direct represents '0' with '7952'
c Var 'aux701' order represents '1' with '7953'
-7952 7953 0
c Var 'aux701' direct represents '1' with '7954'
7952 -7953 7954 0
-7954 7953 0
-7954 -7952 0
c Var 'aux701' direct represents '2' with '-7953'
7952 7954 -7953 0
c Encoding variable: aux702 with domain: int(0..2) (representing constraint ((x_00007_00002=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux702' order represents '0' with '7955'
c Var 'aux702' direct represents '0' with '7955'
c Var 'aux702' order represents '1' with '7956'
-7955 7956 0
c Var 'aux702' direct represents '1' with '7957'
7955 -7956 7957 0
-7957 7956 0
-7957 -7955 0
c Var 'aux702' direct represents '2' with '-7956'
7955 7957 -7956 0
c Encoding variable: aux703 with domain: int(0..2) (representing constraint ((x_00002_00002=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux703' order represents '0' with '7958'
c Var 'aux703' direct represents '0' with '7958'
c Var 'aux703' order represents '1' with '7959'
-7958 7959 0
c Var 'aux703' direct represents '1' with '7960'
7958 -7959 7960 0
-7960 7959 0
-7960 -7958 0
c Var 'aux703' direct represents '2' with '-7959'
7958 7960 -7959 0
c Encoding variable: aux704 with domain: int(0..2) (representing constraint ((x_00009_00002=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux704' order represents '0' with '7961'
c Var 'aux704' direct represents '0' with '7961'
c Var 'aux704' order represents '1' with '7962'
-7961 7962 0
c Var 'aux704' direct represents '1' with '7963'
7961 -7962 7963 0
-7963 7962 0
-7963 -7961 0
c Var 'aux704' direct represents '2' with '-7962'
7961 7963 -7962 0
c Encoding variable: aux705 with domain: int(0..3) (representing constraint ((x_00001_00002=7) + aux704))
c Both direct and order encoding.
c Var 'aux705' order represents '0' with '7964'
c Var 'aux705' direct represents '0' with '7964'
c Var 'aux705' order represents '1' with '7965'
-7964 7965 0
c Var 'aux705' direct represents '1' with '7966'
7964 -7965 7966 0
-7966 7965 0
-7966 -7964 0
c Var 'aux705' order represents '2' with '7967'
-7965 7967 0
c Var 'aux705' direct represents '2' with '7968'
7965 -7967 7968 0
-7968 7967 0
-7968 -7965 0
c Var 'aux705' direct represents '3' with '-7967'
7964 7966 7968 -7967 0
c Encoding variable: aux706 with domain: int(0..4) (representing constraint (aux701 + aux703))
c Both direct and order encoding.
c Var 'aux706' order represents '0' with '7969'
c Var 'aux706' direct represents '0' with '7969'
c Var 'aux706' order represents '1' with '7970'
-7969 7970 0
c Var 'aux706' direct represents '1' with '7971'
7969 -7970 7971 0
-7971 7970 0
-7971 -7969 0
c Var 'aux706' order represents '2' with '7972'
-7970 7972 0
c Var 'aux706' direct represents '2' with '7973'
7970 -7972 7973 0
-7973 7972 0
-7973 -7970 0
c Var 'aux706' order represents '3' with '7974'
-7972 7974 0
c Var 'aux706' direct represents '3' with '7975'
7972 -7974 7975 0
-7975 7974 0
-7975 -7972 0
c Var 'aux706' direct represents '4' with '-7974'
7969 7971 7973 7975 -7974 0
c Encoding variable: aux707 with domain: int(0..2) (representing constraint ((x_00003_00002=8) + (x_00005_00002=8)))
c Both direct and order encoding.
c Var 'aux707' order represents '0' with '7976'
c Var 'aux707' direct represents '0' with '7976'
c Var 'aux707' order represents '1' with '7977'
-7976 7977 0
c Var 'aux707' direct represents '1' with '7978'
7976 -7977 7978 0
-7978 7977 0
-7978 -7976 0
c Var 'aux707' direct represents '2' with '-7977'
7976 7978 -7977 0
c Encoding variable: aux708 with domain: int(0..2) (representing constraint ((x_00007_00002=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux708' order represents '0' with '7979'
c Var 'aux708' direct represents '0' with '7979'
c Var 'aux708' order represents '1' with '7980'
-7979 7980 0
c Var 'aux708' direct represents '1' with '7981'
7979 -7980 7981 0
-7981 7980 0
-7981 -7979 0
c Var 'aux708' direct represents '2' with '-7980'
7979 7981 -7980 0
c Encoding variable: aux709 with domain: int(0..2) (representing constraint ((x_00002_00002=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux709' order represents '0' with '7982'
c Var 'aux709' direct represents '0' with '7982'
c Var 'aux709' order represents '1' with '7983'
-7982 7983 0
c Var 'aux709' direct represents '1' with '7984'
7982 -7983 7984 0
-7984 7983 0
-7984 -7982 0
c Var 'aux709' direct represents '2' with '-7983'
7982 7984 -7983 0
c Encoding variable: aux710 with domain: int(0..2) (representing constraint ((x_00009_00002=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux710' order represents '0' with '7985'
c Var 'aux710' direct represents '0' with '7985'
c Var 'aux710' order represents '1' with '7986'
-7985 7986 0
c Var 'aux710' direct represents '1' with '7987'
7985 -7986 7987 0
-7987 7986 0
-7987 -7985 0
c Var 'aux710' direct represents '2' with '-7986'
7985 7987 -7986 0
c Encoding variable: aux711 with domain: int(0..3) (representing constraint ((x_00001_00002=8) + aux710))
c Both direct and order encoding.
c Var 'aux711' order represents '0' with '7988'
c Var 'aux711' direct represents '0' with '7988'
c Var 'aux711' order represents '1' with '7989'
-7988 7989 0
c Var 'aux711' direct represents '1' with '7990'
7988 -7989 7990 0
-7990 7989 0
-7990 -7988 0
c Var 'aux711' order represents '2' with '7991'
-7989 7991 0
c Var 'aux711' direct represents '2' with '7992'
7989 -7991 7992 0
-7992 7991 0
-7992 -7989 0
c Var 'aux711' direct represents '3' with '-7991'
7988 7990 7992 -7991 0
c Encoding variable: aux712 with domain: int(0..4) (representing constraint (aux707 + aux709))
c Both direct and order encoding.
c Var 'aux712' order represents '0' with '7993'
c Var 'aux712' direct represents '0' with '7993'
c Var 'aux712' order represents '1' with '7994'
-7993 7994 0
c Var 'aux712' direct represents '1' with '7995'
7993 -7994 7995 0
-7995 7994 0
-7995 -7993 0
c Var 'aux712' order represents '2' with '7996'
-7994 7996 0
c Var 'aux712' direct represents '2' with '7997'
7994 -7996 7997 0
-7997 7996 0
-7997 -7994 0
c Var 'aux712' order represents '3' with '7998'
-7996 7998 0
c Var 'aux712' direct represents '3' with '7999'
7996 -7998 7999 0
-7999 7998 0
-7999 -7996 0
c Var 'aux712' direct represents '4' with '-7998'
7993 7995 7997 7999 -7998 0
c Encoding variable: aux713 with domain: int(0..2) (representing constraint ((x_00003_00002=9) + (x_00005_00002=9)))
c Both direct and order encoding.
c Var 'aux713' order represents '0' with '8000'
c Var 'aux713' direct represents '0' with '8000'
c Var 'aux713' order represents '1' with '8001'
-8000 8001 0
c Var 'aux713' direct represents '1' with '8002'
8000 -8001 8002 0
-8002 8001 0
-8002 -8000 0
c Var 'aux713' direct represents '2' with '-8001'
8000 8002 -8001 0
c Encoding variable: aux714 with domain: int(0..2) (representing constraint ((x_00007_00002=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux714' order represents '0' with '8003'
c Var 'aux714' direct represents '0' with '8003'
c Var 'aux714' order represents '1' with '8004'
-8003 8004 0
c Var 'aux714' direct represents '1' with '8005'
8003 -8004 8005 0
-8005 8004 0
-8005 -8003 0
c Var 'aux714' direct represents '2' with '-8004'
8003 8005 -8004 0
c Encoding variable: aux715 with domain: int(0..2) (representing constraint ((x_00002_00002=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux715' order represents '0' with '8006'
c Var 'aux715' direct represents '0' with '8006'
c Var 'aux715' order represents '1' with '8007'
-8006 8007 0
c Var 'aux715' direct represents '1' with '8008'
8006 -8007 8008 0
-8008 8007 0
-8008 -8006 0
c Var 'aux715' direct represents '2' with '-8007'
8006 8008 -8007 0
c Encoding variable: aux716 with domain: int(0..2) (representing constraint ((x_00009_00002=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux716' order represents '0' with '8009'
c Var 'aux716' direct represents '0' with '8009'
c Var 'aux716' order represents '1' with '8010'
-8009 8010 0
c Var 'aux716' direct represents '1' with '8011'
8009 -8010 8011 0
-8011 8010 0
-8011 -8009 0
c Var 'aux716' direct represents '2' with '-8010'
8009 8011 -8010 0
c Encoding variable: aux717 with domain: int(0..3) (representing constraint ((x_00001_00002=9) + aux716))
c Both direct and order encoding.
c Var 'aux717' order represents '0' with '8012'
c Var 'aux717' direct represents '0' with '8012'
c Var 'aux717' order represents '1' with '8013'
-8012 8013 0
c Var 'aux717' direct represents '1' with '8014'
8012 -8013 8014 0
-8014 8013 0
-8014 -8012 0
c Var 'aux717' order represents '2' with '8015'
-8013 8015 0
c Var 'aux717' direct represents '2' with '8016'
8013 -8015 8016 0
-8016 8015 0
-8016 -8013 0
c Var 'aux717' direct represents '3' with '-8015'
8012 8014 8016 -8015 0
c Encoding variable: aux718 with domain: int(0..4) (representing constraint (aux713 + aux715))
c Both direct and order encoding.
c Var 'aux718' order represents '0' with '8017'
c Var 'aux718' direct represents '0' with '8017'
c Var 'aux718' order represents '1' with '8018'
-8017 8018 0
c Var 'aux718' direct represents '1' with '8019'
8017 -8018 8019 0
-8019 8018 0
-8019 -8017 0
c Var 'aux718' order represents '2' with '8020'
-8018 8020 0
c Var 'aux718' direct represents '2' with '8021'
8018 -8020 8021 0
-8021 8020 0
-8021 -8018 0
c Var 'aux718' order represents '3' with '8022'
-8020 8022 0
c Var 'aux718' direct represents '3' with '8023'
8020 -8022 8023 0
-8023 8022 0
-8023 -8020 0
c Var 'aux718' direct represents '4' with '-8022'
8017 8019 8021 8023 -8022 0
c Encoding variable: aux719 with domain: int(0..2) (representing constraint ((x_00003_00003=1) + (x_00005_00003=1)))
c Both direct and order encoding.
c Var 'aux719' order represents '0' with '8024'
c Var 'aux719' direct represents '0' with '8024'
c Var 'aux719' order represents '1' with '8025'
-8024 8025 0
c Var 'aux719' direct represents '1' with '8026'
8024 -8025 8026 0
-8026 8025 0
-8026 -8024 0
c Var 'aux719' direct represents '2' with '-8025'
8024 8026 -8025 0
c Encoding variable: aux720 with domain: int(0..2) (representing constraint ((x_00007_00003=1) + (x_00008_00003=1)))
c Both direct and order encoding.
c Var 'aux720' order represents '0' with '8027'
c Var 'aux720' direct represents '0' with '8027'
c Var 'aux720' order represents '1' with '8028'
-8027 8028 0
c Var 'aux720' direct represents '1' with '8029'
8027 -8028 8029 0
-8029 8028 0
-8029 -8027 0
c Var 'aux720' direct represents '2' with '-8028'
8027 8029 -8028 0
c Encoding variable: aux721 with domain: int(0..2) (representing constraint ((x_00002_00003=1) + (x_00006_00003=1)))
c Both direct and order encoding.
c Var 'aux721' order represents '0' with '8030'
c Var 'aux721' direct represents '0' with '8030'
c Var 'aux721' order represents '1' with '8031'
-8030 8031 0
c Var 'aux721' direct represents '1' with '8032'
8030 -8031 8032 0
-8032 8031 0
-8032 -8030 0
c Var 'aux721' direct represents '2' with '-8031'
8030 8032 -8031 0
c Encoding variable: aux722 with domain: int(0..2) (representing constraint ((x_00009_00003=1) + (x_00004_00003=1)))
c Both direct and order encoding.
c Var 'aux722' order represents '0' with '8033'
c Var 'aux722' direct represents '0' with '8033'
c Var 'aux722' order represents '1' with '8034'
-8033 8034 0
c Var 'aux722' direct represents '1' with '8035'
8033 -8034 8035 0
-8035 8034 0
-8035 -8033 0
c Var 'aux722' direct represents '2' with '-8034'
8033 8035 -8034 0
c Encoding variable: aux723 with domain: int(0..3) (representing constraint ((x_00001_00003=1) + aux722))
c Both direct and order encoding.
c Var 'aux723' order represents '0' with '8036'
c Var 'aux723' direct represents '0' with '8036'
c Var 'aux723' order represents '1' with '8037'
-8036 8037 0
c Var 'aux723' direct represents '1' with '8038'
8036 -8037 8038 0
-8038 8037 0
-8038 -8036 0
c Var 'aux723' order represents '2' with '8039'
-8037 8039 0
c Var 'aux723' direct represents '2' with '8040'
8037 -8039 8040 0
-8040 8039 0
-8040 -8037 0
c Var 'aux723' direct represents '3' with '-8039'
8036 8038 8040 -8039 0
c Encoding variable: aux724 with domain: int(0..4) (representing constraint (aux719 + aux721))
c Both direct and order encoding.
c Var 'aux724' order represents '0' with '8041'
c Var 'aux724' direct represents '0' with '8041'
c Var 'aux724' order represents '1' with '8042'
-8041 8042 0
c Var 'aux724' direct represents '1' with '8043'
8041 -8042 8043 0
-8043 8042 0
-8043 -8041 0
c Var 'aux724' order represents '2' with '8044'
-8042 8044 0
c Var 'aux724' direct represents '2' with '8045'
8042 -8044 8045 0
-8045 8044 0
-8045 -8042 0
c Var 'aux724' order represents '3' with '8046'
-8044 8046 0
c Var 'aux724' direct represents '3' with '8047'
8044 -8046 8047 0
-8047 8046 0
-8047 -8044 0
c Var 'aux724' direct represents '4' with '-8046'
8041 8043 8045 8047 -8046 0
c Encoding variable: aux725 with domain: int(0..2) (representing constraint ((x_00003_00003=2) + (x_00005_00003=2)))
c Both direct and order encoding.
c Var 'aux725' order represents '0' with '8048'
c Var 'aux725' direct represents '0' with '8048'
c Var 'aux725' order represents '1' with '8049'
-8048 8049 0
c Var 'aux725' direct represents '1' with '8050'
8048 -8049 8050 0
-8050 8049 0
-8050 -8048 0
c Var 'aux725' direct represents '2' with '-8049'
8048 8050 -8049 0
c Encoding variable: aux726 with domain: int(0..2) (representing constraint ((x_00007_00003=2) + (x_00008_00003=2)))
c Both direct and order encoding.
c Var 'aux726' order represents '0' with '8051'
c Var 'aux726' direct represents '0' with '8051'
c Var 'aux726' order represents '1' with '8052'
-8051 8052 0
c Var 'aux726' direct represents '1' with '8053'
8051 -8052 8053 0
-8053 8052 0
-8053 -8051 0
c Var 'aux726' direct represents '2' with '-8052'
8051 8053 -8052 0
c Encoding variable: aux727 with domain: int(0..2) (representing constraint ((x_00002_00003=2) + (x_00006_00003=2)))
c Both direct and order encoding.
c Var 'aux727' order represents '0' with '8054'
c Var 'aux727' direct represents '0' with '8054'
c Var 'aux727' order represents '1' with '8055'
-8054 8055 0
c Var 'aux727' direct represents '1' with '8056'
8054 -8055 8056 0
-8056 8055 0
-8056 -8054 0
c Var 'aux727' direct represents '2' with '-8055'
8054 8056 -8055 0
c Encoding variable: aux728 with domain: int(0..2) (representing constraint ((x_00009_00003=2) + (x_00004_00003=2)))
c Both direct and order encoding.
c Var 'aux728' order represents '0' with '8057'
c Var 'aux728' direct represents '0' with '8057'
c Var 'aux728' order represents '1' with '8058'
-8057 8058 0
c Var 'aux728' direct represents '1' with '8059'
8057 -8058 8059 0
-8059 8058 0
-8059 -8057 0
c Var 'aux728' direct represents '2' with '-8058'
8057 8059 -8058 0
c Encoding variable: aux729 with domain: int(0..3) (representing constraint ((x_00001_00003=2) + aux728))
c Both direct and order encoding.
c Var 'aux729' order represents '0' with '8060'
c Var 'aux729' direct represents '0' with '8060'
c Var 'aux729' order represents '1' with '8061'
-8060 8061 0
c Var 'aux729' direct represents '1' with '8062'
8060 -8061 8062 0
-8062 8061 0
-8062 -8060 0
c Var 'aux729' order represents '2' with '8063'
-8061 8063 0
c Var 'aux729' direct represents '2' with '8064'
8061 -8063 8064 0
-8064 8063 0
-8064 -8061 0
c Var 'aux729' direct represents '3' with '-8063'
8060 8062 8064 -8063 0
c Encoding variable: aux730 with domain: int(0..4) (representing constraint (aux725 + aux727))
c Both direct and order encoding.
c Var 'aux730' order represents '0' with '8065'
c Var 'aux730' direct represents '0' with '8065'
c Var 'aux730' order represents '1' with '8066'
-8065 8066 0
c Var 'aux730' direct represents '1' with '8067'
8065 -8066 8067 0
-8067 8066 0
-8067 -8065 0
c Var 'aux730' order represents '2' with '8068'
-8066 8068 0
c Var 'aux730' direct represents '2' with '8069'
8066 -8068 8069 0
-8069 8068 0
-8069 -8066 0
c Var 'aux730' order represents '3' with '8070'
-8068 8070 0
c Var 'aux730' direct represents '3' with '8071'
8068 -8070 8071 0
-8071 8070 0
-8071 -8068 0
c Var 'aux730' direct represents '4' with '-8070'
8065 8067 8069 8071 -8070 0
c Encoding variable: aux731 with domain: int(0..2) (representing constraint ((x_00003_00003=3) + (x_00005_00003=3)))
c Both direct and order encoding.
c Var 'aux731' order represents '0' with '8072'
c Var 'aux731' direct represents '0' with '8072'
c Var 'aux731' order represents '1' with '8073'
-8072 8073 0
c Var 'aux731' direct represents '1' with '8074'
8072 -8073 8074 0
-8074 8073 0
-8074 -8072 0
c Var 'aux731' direct represents '2' with '-8073'
8072 8074 -8073 0
c Encoding variable: aux732 with domain: int(0..2) (representing constraint ((x_00007_00003=3) + (x_00008_00003=3)))
c Both direct and order encoding.
c Var 'aux732' order represents '0' with '8075'
c Var 'aux732' direct represents '0' with '8075'
c Var 'aux732' order represents '1' with '8076'
-8075 8076 0
c Var 'aux732' direct represents '1' with '8077'
8075 -8076 8077 0
-8077 8076 0
-8077 -8075 0
c Var 'aux732' direct represents '2' with '-8076'
8075 8077 -8076 0
c Encoding variable: aux733 with domain: int(0..2) (representing constraint ((x_00002_00003=3) + (x_00006_00003=3)))
c Both direct and order encoding.
c Var 'aux733' order represents '0' with '8078'
c Var 'aux733' direct represents '0' with '8078'
c Var 'aux733' order represents '1' with '8079'
-8078 8079 0
c Var 'aux733' direct represents '1' with '8080'
8078 -8079 8080 0
-8080 8079 0
-8080 -8078 0
c Var 'aux733' direct represents '2' with '-8079'
8078 8080 -8079 0
c Encoding variable: aux734 with domain: int(0..2) (representing constraint ((x_00009_00003=3) + (x_00004_00003=3)))
c Both direct and order encoding.
c Var 'aux734' order represents '0' with '8081'
c Var 'aux734' direct represents '0' with '8081'
c Var 'aux734' order represents '1' with '8082'
-8081 8082 0
c Var 'aux734' direct represents '1' with '8083'
8081 -8082 8083 0
-8083 8082 0
-8083 -8081 0
c Var 'aux734' direct represents '2' with '-8082'
8081 8083 -8082 0
c Encoding variable: aux735 with domain: int(0..3) (representing constraint ((x_00001_00003=3) + aux734))
c Both direct and order encoding.
c Var 'aux735' order represents '0' with '8084'
c Var 'aux735' direct represents '0' with '8084'
c Var 'aux735' order represents '1' with '8085'
-8084 8085 0
c Var 'aux735' direct represents '1' with '8086'
8084 -8085 8086 0
-8086 8085 0
-8086 -8084 0
c Var 'aux735' order represents '2' with '8087'
-8085 8087 0
c Var 'aux735' direct represents '2' with '8088'
8085 -8087 8088 0
-8088 8087 0
-8088 -8085 0
c Var 'aux735' direct represents '3' with '-8087'
8084 8086 8088 -8087 0
c Encoding variable: aux736 with domain: int(0..4) (representing constraint (aux731 + aux733))
c Both direct and order encoding.
c Var 'aux736' order represents '0' with '8089'
c Var 'aux736' direct represents '0' with '8089'
c Var 'aux736' order represents '1' with '8090'
-8089 8090 0
c Var 'aux736' direct represents '1' with '8091'
8089 -8090 8091 0
-8091 8090 0
-8091 -8089 0
c Var 'aux736' order represents '2' with '8092'
-8090 8092 0
c Var 'aux736' direct represents '2' with '8093'
8090 -8092 8093 0
-8093 8092 0
-8093 -8090 0
c Var 'aux736' order represents '3' with '8094'
-8092 8094 0
c Var 'aux736' direct represents '3' with '8095'
8092 -8094 8095 0
-8095 8094 0
-8095 -8092 0
c Var 'aux736' direct represents '4' with '-8094'
8089 8091 8093 8095 -8094 0
c Encoding variable: aux737 with domain: int(0..2) (representing constraint ((x_00003_00003=4) + (x_00005_00003=4)))
c Both direct and order encoding.
c Var 'aux737' order represents '0' with '8096'
c Var 'aux737' direct represents '0' with '8096'
c Var 'aux737' order represents '1' with '8097'
-8096 8097 0
c Var 'aux737' direct represents '1' with '8098'
8096 -8097 8098 0
-8098 8097 0
-8098 -8096 0
c Var 'aux737' direct represents '2' with '-8097'
8096 8098 -8097 0
c Encoding variable: aux738 with domain: int(0..2) (representing constraint ((x_00007_00003=4) + (x_00008_00003=4)))
c Both direct and order encoding.
c Var 'aux738' order represents '0' with '8099'
c Var 'aux738' direct represents '0' with '8099'
c Var 'aux738' order represents '1' with '8100'
-8099 8100 0
c Var 'aux738' direct represents '1' with '8101'
8099 -8100 8101 0
-8101 8100 0
-8101 -8099 0
c Var 'aux738' direct represents '2' with '-8100'
8099 8101 -8100 0
c Encoding variable: aux739 with domain: int(0..2) (representing constraint ((x_00002_00003=4) + (x_00006_00003=4)))
c Both direct and order encoding.
c Var 'aux739' order represents '0' with '8102'
c Var 'aux739' direct represents '0' with '8102'
c Var 'aux739' order represents '1' with '8103'
-8102 8103 0
c Var 'aux739' direct represents '1' with '8104'
8102 -8103 8104 0
-8104 8103 0
-8104 -8102 0
c Var 'aux739' direct represents '2' with '-8103'
8102 8104 -8103 0
c Encoding variable: aux740 with domain: int(0..2) (representing constraint ((x_00009_00003=4) + (x_00004_00003=4)))
c Both direct and order encoding.
c Var 'aux740' order represents '0' with '8105'
c Var 'aux740' direct represents '0' with '8105'
c Var 'aux740' order represents '1' with '8106'
-8105 8106 0
c Var 'aux740' direct represents '1' with '8107'
8105 -8106 8107 0
-8107 8106 0
-8107 -8105 0
c Var 'aux740' direct represents '2' with '-8106'
8105 8107 -8106 0
c Encoding variable: aux741 with domain: int(0..3) (representing constraint ((x_00001_00003=4) + aux740))
c Both direct and order encoding.
c Var 'aux741' order represents '0' with '8108'
c Var 'aux741' direct represents '0' with '8108'
c Var 'aux741' order represents '1' with '8109'
-8108 8109 0
c Var 'aux741' direct represents '1' with '8110'
8108 -8109 8110 0
-8110 8109 0
-8110 -8108 0
c Var 'aux741' order represents '2' with '8111'
-8109 8111 0
c Var 'aux741' direct represents '2' with '8112'
8109 -8111 8112 0
-8112 8111 0
-8112 -8109 0
c Var 'aux741' direct represents '3' with '-8111'
8108 8110 8112 -8111 0
c Encoding variable: aux742 with domain: int(0..4) (representing constraint (aux737 + aux739))
c Both direct and order encoding.
c Var 'aux742' order represents '0' with '8113'
c Var 'aux742' direct represents '0' with '8113'
c Var 'aux742' order represents '1' with '8114'
-8113 8114 0
c Var 'aux742' direct represents '1' with '8115'
8113 -8114 8115 0
-8115 8114 0
-8115 -8113 0
c Var 'aux742' order represents '2' with '8116'
-8114 8116 0
c Var 'aux742' direct represents '2' with '8117'
8114 -8116 8117 0
-8117 8116 0
-8117 -8114 0
c Var 'aux742' order represents '3' with '8118'
-8116 8118 0
c Var 'aux742' direct represents '3' with '8119'
8116 -8118 8119 0
-8119 8118 0
-8119 -8116 0
c Var 'aux742' direct represents '4' with '-8118'
8113 8115 8117 8119 -8118 0
c Encoding variable: aux743 with domain: int(0..2) (representing constraint ((x_00003_00003=5) + (x_00005_00003=5)))
c Both direct and order encoding.
c Var 'aux743' order represents '0' with '8120'
c Var 'aux743' direct represents '0' with '8120'
c Var 'aux743' order represents '1' with '8121'
-8120 8121 0
c Var 'aux743' direct represents '1' with '8122'
8120 -8121 8122 0
-8122 8121 0
-8122 -8120 0
c Var 'aux743' direct represents '2' with '-8121'
8120 8122 -8121 0
c Encoding variable: aux744 with domain: int(0..2) (representing constraint ((x_00007_00003=5) + (x_00008_00003=5)))
c Both direct and order encoding.
c Var 'aux744' order represents '0' with '8123'
c Var 'aux744' direct represents '0' with '8123'
c Var 'aux744' order represents '1' with '8124'
-8123 8124 0
c Var 'aux744' direct represents '1' with '8125'
8123 -8124 8125 0
-8125 8124 0
-8125 -8123 0
c Var 'aux744' direct represents '2' with '-8124'
8123 8125 -8124 0
c Encoding variable: aux745 with domain: int(0..2) (representing constraint ((x_00002_00003=5) + (x_00006_00003=5)))
c Both direct and order encoding.
c Var 'aux745' order represents '0' with '8126'
c Var 'aux745' direct represents '0' with '8126'
c Var 'aux745' order represents '1' with '8127'
-8126 8127 0
c Var 'aux745' direct represents '1' with '8128'
8126 -8127 8128 0
-8128 8127 0
-8128 -8126 0
c Var 'aux745' direct represents '2' with '-8127'
8126 8128 -8127 0
c Encoding variable: aux746 with domain: int(0..2) (representing constraint ((x_00009_00003=5) + (x_00004_00003=5)))
c Both direct and order encoding.
c Var 'aux746' order represents '0' with '8129'
c Var 'aux746' direct represents '0' with '8129'
c Var 'aux746' order represents '1' with '8130'
-8129 8130 0
c Var 'aux746' direct represents '1' with '8131'
8129 -8130 8131 0
-8131 8130 0
-8131 -8129 0
c Var 'aux746' direct represents '2' with '-8130'
8129 8131 -8130 0
c Encoding variable: aux747 with domain: int(0..3) (representing constraint ((x_00001_00003=5) + aux746))
c Both direct and order encoding.
c Var 'aux747' order represents '0' with '8132'
c Var 'aux747' direct represents '0' with '8132'
c Var 'aux747' order represents '1' with '8133'
-8132 8133 0
c Var 'aux747' direct represents '1' with '8134'
8132 -8133 8134 0
-8134 8133 0
-8134 -8132 0
c Var 'aux747' order represents '2' with '8135'
-8133 8135 0
c Var 'aux747' direct represents '2' with '8136'
8133 -8135 8136 0
-8136 8135 0
-8136 -8133 0
c Var 'aux747' direct represents '3' with '-8135'
8132 8134 8136 -8135 0
c Encoding variable: aux748 with domain: int(0..4) (representing constraint (aux743 + aux745))
c Both direct and order encoding.
c Var 'aux748' order represents '0' with '8137'
c Var 'aux748' direct represents '0' with '8137'
c Var 'aux748' order represents '1' with '8138'
-8137 8138 0
c Var 'aux748' direct represents '1' with '8139'
8137 -8138 8139 0
-8139 8138 0
-8139 -8137 0
c Var 'aux748' order represents '2' with '8140'
-8138 8140 0
c Var 'aux748' direct represents '2' with '8141'
8138 -8140 8141 0
-8141 8140 0
-8141 -8138 0
c Var 'aux748' order represents '3' with '8142'
-8140 8142 0
c Var 'aux748' direct represents '3' with '8143'
8140 -8142 8143 0
-8143 8142 0
-8143 -8140 0
c Var 'aux748' direct represents '4' with '-8142'
8137 8139 8141 8143 -8142 0
c Encoding variable: aux749 with domain: int(0..2) (representing constraint ((x_00003_00003=6) + (x_00005_00003=6)))
c Both direct and order encoding.
c Var 'aux749' order represents '0' with '8144'
c Var 'aux749' direct represents '0' with '8144'
c Var 'aux749' order represents '1' with '8145'
-8144 8145 0
c Var 'aux749' direct represents '1' with '8146'
8144 -8145 8146 0
-8146 8145 0
-8146 -8144 0
c Var 'aux749' direct represents '2' with '-8145'
8144 8146 -8145 0
c Encoding variable: aux750 with domain: int(0..2) (representing constraint ((x_00007_00003=6) + (x_00008_00003=6)))
c Both direct and order encoding.
c Var 'aux750' order represents '0' with '8147'
c Var 'aux750' direct represents '0' with '8147'
c Var 'aux750' order represents '1' with '8148'
-8147 8148 0
c Var 'aux750' direct represents '1' with '8149'
8147 -8148 8149 0
-8149 8148 0
-8149 -8147 0
c Var 'aux750' direct represents '2' with '-8148'
8147 8149 -8148 0
c Encoding variable: aux751 with domain: int(0..2) (representing constraint ((x_00002_00003=6) + (x_00006_00003=6)))
c Both direct and order encoding.
c Var 'aux751' order represents '0' with '8150'
c Var 'aux751' direct represents '0' with '8150'
c Var 'aux751' order represents '1' with '8151'
-8150 8151 0
c Var 'aux751' direct represents '1' with '8152'
8150 -8151 8152 0
-8152 8151 0
-8152 -8150 0
c Var 'aux751' direct represents '2' with '-8151'
8150 8152 -8151 0
c Encoding variable: aux752 with domain: int(0..2) (representing constraint ((x_00009_00003=6) + (x_00004_00003=6)))
c Both direct and order encoding.
c Var 'aux752' order represents '0' with '8153'
c Var 'aux752' direct represents '0' with '8153'
c Var 'aux752' order represents '1' with '8154'
-8153 8154 0
c Var 'aux752' direct represents '1' with '8155'
8153 -8154 8155 0
-8155 8154 0
-8155 -8153 0
c Var 'aux752' direct represents '2' with '-8154'
8153 8155 -8154 0
c Encoding variable: aux753 with domain: int(0..3) (representing constraint ((x_00001_00003=6) + aux752))
c Both direct and order encoding.
c Var 'aux753' order represents '0' with '8156'
c Var 'aux753' direct represents '0' with '8156'
c Var 'aux753' order represents '1' with '8157'
-8156 8157 0
c Var 'aux753' direct represents '1' with '8158'
8156 -8157 8158 0
-8158 8157 0
-8158 -8156 0
c Var 'aux753' order represents '2' with '8159'
-8157 8159 0
c Var 'aux753' direct represents '2' with '8160'
8157 -8159 8160 0
-8160 8159 0
-8160 -8157 0
c Var 'aux753' direct represents '3' with '-8159'
8156 8158 8160 -8159 0
c Encoding variable: aux754 with domain: int(0..4) (representing constraint (aux749 + aux751))
c Both direct and order encoding.
c Var 'aux754' order represents '0' with '8161'
c Var 'aux754' direct represents '0' with '8161'
c Var 'aux754' order represents '1' with '8162'
-8161 8162 0
c Var 'aux754' direct represents '1' with '8163'
8161 -8162 8163 0
-8163 8162 0
-8163 -8161 0
c Var 'aux754' order represents '2' with '8164'
-8162 8164 0
c Var 'aux754' direct represents '2' with '8165'
8162 -8164 8165 0
-8165 8164 0
-8165 -8162 0
c Var 'aux754' order represents '3' with '8166'
-8164 8166 0
c Var 'aux754' direct represents '3' with '8167'
8164 -8166 8167 0
-8167 8166 0
-8167 -8164 0
c Var 'aux754' direct represents '4' with '-8166'
8161 8163 8165 8167 -8166 0
c Encoding variable: aux755 with domain: int(0..2) (representing constraint ((x_00003_00003=7) + (x_00005_00003=7)))
c Both direct and order encoding.
c Var 'aux755' order represents '0' with '8168'
c Var 'aux755' direct represents '0' with '8168'
c Var 'aux755' order represents '1' with '8169'
-8168 8169 0
c Var 'aux755' direct represents '1' with '8170'
8168 -8169 8170 0
-8170 8169 0
-8170 -8168 0
c Var 'aux755' direct represents '2' with '-8169'
8168 8170 -8169 0
c Encoding variable: aux756 with domain: int(0..2) (representing constraint ((x_00007_00003=7) + (x_00008_00003=7)))
c Both direct and order encoding.
c Var 'aux756' order represents '0' with '8171'
c Var 'aux756' direct represents '0' with '8171'
c Var 'aux756' order represents '1' with '8172'
-8171 8172 0
c Var 'aux756' direct represents '1' with '8173'
8171 -8172 8173 0
-8173 8172 0
-8173 -8171 0
c Var 'aux756' direct represents '2' with '-8172'
8171 8173 -8172 0
c Encoding variable: aux757 with domain: int(0..2) (representing constraint ((x_00002_00003=7) + (x_00006_00003=7)))
c Both direct and order encoding.
c Var 'aux757' order represents '0' with '8174'
c Var 'aux757' direct represents '0' with '8174'
c Var 'aux757' order represents '1' with '8175'
-8174 8175 0
c Var 'aux757' direct represents '1' with '8176'
8174 -8175 8176 0
-8176 8175 0
-8176 -8174 0
c Var 'aux757' direct represents '2' with '-8175'
8174 8176 -8175 0
c Encoding variable: aux758 with domain: int(0..2) (representing constraint ((x_00009_00003=7) + (x_00004_00003=7)))
c Both direct and order encoding.
c Var 'aux758' order represents '0' with '8177'
c Var 'aux758' direct represents '0' with '8177'
c Var 'aux758' order represents '1' with '8178'
-8177 8178 0
c Var 'aux758' direct represents '1' with '8179'
8177 -8178 8179 0
-8179 8178 0
-8179 -8177 0
c Var 'aux758' direct represents '2' with '-8178'
8177 8179 -8178 0
c Encoding variable: aux759 with domain: int(0..3) (representing constraint ((x_00001_00003=7) + aux758))
c Both direct and order encoding.
c Var 'aux759' order represents '0' with '8180'
c Var 'aux759' direct represents '0' with '8180'
c Var 'aux759' order represents '1' with '8181'
-8180 8181 0
c Var 'aux759' direct represents '1' with '8182'
8180 -8181 8182 0
-8182 8181 0
-8182 -8180 0
c Var 'aux759' order represents '2' with '8183'
-8181 8183 0
c Var 'aux759' direct represents '2' with '8184'
8181 -8183 8184 0
-8184 8183 0
-8184 -8181 0
c Var 'aux759' direct represents '3' with '-8183'
8180 8182 8184 -8183 0
c Encoding variable: aux760 with domain: int(0..4) (representing constraint (aux755 + aux757))
c Both direct and order encoding.
c Var 'aux760' order represents '0' with '8185'
c Var 'aux760' direct represents '0' with '8185'
c Var 'aux760' order represents '1' with '8186'
-8185 8186 0
c Var 'aux760' direct represents '1' with '8187'
8185 -8186 8187 0
-8187 8186 0
-8187 -8185 0
c Var 'aux760' order represents '2' with '8188'
-8186 8188 0
c Var 'aux760' direct represents '2' with '8189'
8186 -8188 8189 0
-8189 8188 0
-8189 -8186 0
c Var 'aux760' order represents '3' with '8190'
-8188 8190 0
c Var 'aux760' direct represents '3' with '8191'
8188 -8190 8191 0
-8191 8190 0
-8191 -8188 0
c Var 'aux760' direct represents '4' with '-8190'
8185 8187 8189 8191 -8190 0
c Encoding variable: aux761 with domain: int(0..2) (representing constraint ((x_00003_00003=8) + (x_00005_00003=8)))
c Both direct and order encoding.
c Var 'aux761' order represents '0' with '8192'
c Var 'aux761' direct represents '0' with '8192'
c Var 'aux761' order represents '1' with '8193'
-8192 8193 0
c Var 'aux761' direct represents '1' with '8194'
8192 -8193 8194 0
-8194 8193 0
-8194 -8192 0
c Var 'aux761' direct represents '2' with '-8193'
8192 8194 -8193 0
c Encoding variable: aux762 with domain: int(0..2) (representing constraint ((x_00007_00003=8) + (x_00008_00003=8)))
c Both direct and order encoding.
c Var 'aux762' order represents '0' with '8195'
c Var 'aux762' direct represents '0' with '8195'
c Var 'aux762' order represents '1' with '8196'
-8195 8196 0
c Var 'aux762' direct represents '1' with '8197'
8195 -8196 8197 0
-8197 8196 0
-8197 -8195 0
c Var 'aux762' direct represents '2' with '-8196'
8195 8197 -8196 0
c Encoding variable: aux763 with domain: int(0..2) (representing constraint ((x_00002_00003=8) + (x_00006_00003=8)))
c Both direct and order encoding.
c Var 'aux763' order represents '0' with '8198'
c Var 'aux763' direct represents '0' with '8198'
c Var 'aux763' order represents '1' with '8199'
-8198 8199 0
c Var 'aux763' direct represents '1' with '8200'
8198 -8199 8200 0
-8200 8199 0
-8200 -8198 0
c Var 'aux763' direct represents '2' with '-8199'
8198 8200 -8199 0
c Encoding variable: aux764 with domain: int(0..2) (representing constraint ((x_00009_00003=8) + (x_00004_00003=8)))
c Both direct and order encoding.
c Var 'aux764' order represents '0' with '8201'
c Var 'aux764' direct represents '0' with '8201'
c Var 'aux764' order represents '1' with '8202'
-8201 8202 0
c Var 'aux764' direct represents '1' with '8203'
8201 -8202 8203 0
-8203 8202 0
-8203 -8201 0
c Var 'aux764' direct represents '2' with '-8202'
8201 8203 -8202 0
c Encoding variable: aux765 with domain: int(0..3) (representing constraint ((x_00001_00003=8) + aux764))
c Both direct and order encoding.
c Var 'aux765' order represents '0' with '8204'
c Var 'aux765' direct represents '0' with '8204'
c Var 'aux765' order represents '1' with '8205'
-8204 8205 0
c Var 'aux765' direct represents '1' with '8206'
8204 -8205 8206 0
-8206 8205 0
-8206 -8204 0
c Var 'aux765' order represents '2' with '8207'
-8205 8207 0
c Var 'aux765' direct represents '2' with '8208'
8205 -8207 8208 0
-8208 8207 0
-8208 -8205 0
c Var 'aux765' direct represents '3' with '-8207'
8204 8206 8208 -8207 0
c Encoding variable: aux766 with domain: int(0..4) (representing constraint (aux761 + aux763))
c Both direct and order encoding.
c Var 'aux766' order represents '0' with '8209'
c Var 'aux766' direct represents '0' with '8209'
c Var 'aux766' order represents '1' with '8210'
-8209 8210 0
c Var 'aux766' direct represents '1' with '8211'
8209 -8210 8211 0
-8211 8210 0
-8211 -8209 0
c Var 'aux766' order represents '2' with '8212'
-8210 8212 0
c Var 'aux766' direct represents '2' with '8213'
8210 -8212 8213 0
-8213 8212 0
-8213 -8210 0
c Var 'aux766' order represents '3' with '8214'
-8212 8214 0
c Var 'aux766' direct represents '3' with '8215'
8212 -8214 8215 0
-8215 8214 0
-8215 -8212 0
c Var 'aux766' direct represents '4' with '-8214'
8209 8211 8213 8215 -8214 0
c Encoding variable: aux767 with domain: int(0..2) (representing constraint ((x_00003_00003=9) + (x_00005_00003=9)))
c Both direct and order encoding.
c Var 'aux767' order represents '0' with '8216'
c Var 'aux767' direct represents '0' with '8216'
c Var 'aux767' order represents '1' with '8217'
-8216 8217 0
c Var 'aux767' direct represents '1' with '8218'
8216 -8217 8218 0
-8218 8217 0
-8218 -8216 0
c Var 'aux767' direct represents '2' with '-8217'
8216 8218 -8217 0
c Encoding variable: aux768 with domain: int(0..2) (representing constraint ((x_00007_00003=9) + (x_00008_00003=9)))
c Both direct and order encoding.
c Var 'aux768' order represents '0' with '8219'
c Var 'aux768' direct represents '0' with '8219'
c Var 'aux768' order represents '1' with '8220'
-8219 8220 0
c Var 'aux768' direct represents '1' with '8221'
8219 -8220 8221 0
-8221 8220 0
-8221 -8219 0
c Var 'aux768' direct represents '2' with '-8220'
8219 8221 -8220 0
c Encoding variable: aux769 with domain: int(0..2) (representing constraint ((x_00002_00003=9) + (x_00006_00003=9)))
c Both direct and order encoding.
c Var 'aux769' order represents '0' with '8222'
c Var 'aux769' direct represents '0' with '8222'
c Var 'aux769' order represents '1' with '8223'
-8222 8223 0
c Var 'aux769' direct represents '1' with '8224'
8222 -8223 8224 0
-8224 8223 0
-8224 -8222 0
c Var 'aux769' direct represents '2' with '-8223'
8222 8224 -8223 0
c Encoding variable: aux770 with domain: int(0..2) (representing constraint ((x_00009_00003=9) + (x_00004_00003=9)))
c Both direct and order encoding.
c Var 'aux770' order represents '0' with '8225'
c Var 'aux770' direct represents '0' with '8225'
c Var 'aux770' order represents '1' with '8226'
-8225 8226 0
c Var 'aux770' direct represents '1' with '8227'
8225 -8226 8227 0
-8227 8226 0
-8227 -8225 0
c Var 'aux770' direct represents '2' with '-8226'
8225 8227 -8226 0
c Encoding variable: aux771 with domain: int(0..3) (representing constraint ((x_00001_00003=9) + aux770))
c Both direct and order encoding.
c Var 'aux771' order represents '0' with '8228'
c Var 'aux771' direct represents '0' with '8228'
c Var 'aux771' order represents '1' with '8229'
-8228 8229 0
c Var 'aux771' direct represents '1' with '8230'
8228 -8229 8230 0
-8230 8229 0
-8230 -8228 0
c Var 'aux771' order represents '2' with '8231'
-8229 8231 0
c Var 'aux771' direct represents '2' with '8232'
8229 -8231 8232 0
-8232 8231 0
-8232 -8229 0
c Var 'aux771' direct represents '3' with '-8231'
8228 8230 8232 -8231 0
c Encoding variable: aux772 with domain: int(0..4) (representing constraint (aux767 + aux769))
c Both direct and order encoding.
c Var 'aux772' order represents '0' with '8233'
c Var 'aux772' direct represents '0' with '8233'
c Var 'aux772' order represents '1' with '8234'
-8233 8234 0
c Var 'aux772' direct represents '1' with '8235'
8233 -8234 8235 0
-8235 8234 0
-8235 -8233 0
c Var 'aux772' order represents '2' with '8236'
-8234 8236 0
c Var 'aux772' direct represents '2' with '8237'
8234 -8236 8237 0
-8237 8236 0
-8237 -8234 0
c Var 'aux772' order represents '3' with '8238'
-8236 8238 0
c Var 'aux772' direct represents '3' with '8239'
8236 -8238 8239 0
-8239 8238 0
-8239 -8236 0
c Var 'aux772' direct represents '4' with '-8238'
8233 8235 8237 8239 -8238 0
c Encoding variable: aux773 with domain: int(0..2) (representing constraint ((x_00003_00004=1) + (x_00005_00004=1)))
c Both direct and order encoding.
c Var 'aux773' order represents '0' with '8240'
c Var 'aux773' direct represents '0' with '8240'
c Var 'aux773' order represents '1' with '8241'
-8240 8241 0
c Var 'aux773' direct represents '1' with '8242'
8240 -8241 8242 0
-8242 8241 0
-8242 -8240 0
c Var 'aux773' direct represents '2' with '-8241'
8240 8242 -8241 0
c Encoding variable: aux774 with domain: int(0..2) (representing constraint ((x_00007_00004=1) + (x_00008_00004=1)))
c Both direct and order encoding.
c Var 'aux774' order represents '0' with '8243'
c Var 'aux774' direct represents '0' with '8243'
c Var 'aux774' order represents '1' with '8244'
-8243 8244 0
c Var 'aux774' direct represents '1' with '8245'
8243 -8244 8245 0
-8245 8244 0
-8245 -8243 0
c Var 'aux774' direct represents '2' with '-8244'
8243 8245 -8244 0
c Encoding variable: aux775 with domain: int(0..2) (representing constraint ((x_00002_00004=1) + (x_00006_00004=1)))
c Both direct and order encoding.
c Var 'aux775' order represents '0' with '8246'
c Var 'aux775' direct represents '0' with '8246'
c Var 'aux775' order represents '1' with '8247'
-8246 8247 0
c Var 'aux775' direct represents '1' with '8248'
8246 -8247 8248 0
-8248 8247 0
-8248 -8246 0
c Var 'aux775' direct represents '2' with '-8247'
8246 8248 -8247 0
c Encoding variable: aux776 with domain: int(0..2) (representing constraint ((x_00009_00004=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux776' order represents '0' with '8249'
c Var 'aux776' direct represents '0' with '8249'
c Var 'aux776' order represents '1' with '8250'
-8249 8250 0
c Var 'aux776' direct represents '1' with '8251'
8249 -8250 8251 0
-8251 8250 0
-8251 -8249 0
c Var 'aux776' direct represents '2' with '-8250'
8249 8251 -8250 0
c Encoding variable: aux777 with domain: int(0..3) (representing constraint ((x_00001_00004=1) + aux776))
c Both direct and order encoding.
c Var 'aux777' order represents '0' with '8252'
c Var 'aux777' direct represents '0' with '8252'
c Var 'aux777' order represents '1' with '8253'
-8252 8253 0
c Var 'aux777' direct represents '1' with '8254'
8252 -8253 8254 0
-8254 8253 0
-8254 -8252 0
c Var 'aux777' order represents '2' with '8255'
-8253 8255 0
c Var 'aux777' direct represents '2' with '8256'
8253 -8255 8256 0
-8256 8255 0
-8256 -8253 0
c Var 'aux777' direct represents '3' with '-8255'
8252 8254 8256 -8255 0
c Encoding variable: aux778 with domain: int(0..4) (representing constraint (aux773 + aux775))
c Both direct and order encoding.
c Var 'aux778' order represents '0' with '8257'
c Var 'aux778' direct represents '0' with '8257'
c Var 'aux778' order represents '1' with '8258'
-8257 8258 0
c Var 'aux778' direct represents '1' with '8259'
8257 -8258 8259 0
-8259 8258 0
-8259 -8257 0
c Var 'aux778' order represents '2' with '8260'
-8258 8260 0
c Var 'aux778' direct represents '2' with '8261'
8258 -8260 8261 0
-8261 8260 0
-8261 -8258 0
c Var 'aux778' order represents '3' with '8262'
-8260 8262 0
c Var 'aux778' direct represents '3' with '8263'
8260 -8262 8263 0
-8263 8262 0
-8263 -8260 0
c Var 'aux778' direct represents '4' with '-8262'
8257 8259 8261 8263 -8262 0
c Encoding variable: aux779 with domain: int(0..2) (representing constraint ((x_00003_00004=2) + (x_00005_00004=2)))
c Both direct and order encoding.
c Var 'aux779' order represents '0' with '8264'
c Var 'aux779' direct represents '0' with '8264'
c Var 'aux779' order represents '1' with '8265'
-8264 8265 0
c Var 'aux779' direct represents '1' with '8266'
8264 -8265 8266 0
-8266 8265 0
-8266 -8264 0
c Var 'aux779' direct represents '2' with '-8265'
8264 8266 -8265 0
c Encoding variable: aux780 with domain: int(0..2) (representing constraint ((x_00007_00004=2) + (x_00008_00004=2)))
c Both direct and order encoding.
c Var 'aux780' order represents '0' with '8267'
c Var 'aux780' direct represents '0' with '8267'
c Var 'aux780' order represents '1' with '8268'
-8267 8268 0
c Var 'aux780' direct represents '1' with '8269'
8267 -8268 8269 0
-8269 8268 0
-8269 -8267 0
c Var 'aux780' direct represents '2' with '-8268'
8267 8269 -8268 0
c Encoding variable: aux781 with domain: int(0..2) (representing constraint ((x_00002_00004=2) + (x_00006_00004=2)))
c Both direct and order encoding.
c Var 'aux781' order represents '0' with '8270'
c Var 'aux781' direct represents '0' with '8270'
c Var 'aux781' order represents '1' with '8271'
-8270 8271 0
c Var 'aux781' direct represents '1' with '8272'
8270 -8271 8272 0
-8272 8271 0
-8272 -8270 0
c Var 'aux781' direct represents '2' with '-8271'
8270 8272 -8271 0
c Encoding variable: aux782 with domain: int(0..2) (representing constraint ((x_00009_00004=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux782' order represents '0' with '8273'
c Var 'aux782' direct represents '0' with '8273'
c Var 'aux782' order represents '1' with '8274'
-8273 8274 0
c Var 'aux782' direct represents '1' with '8275'
8273 -8274 8275 0
-8275 8274 0
-8275 -8273 0
c Var 'aux782' direct represents '2' with '-8274'
8273 8275 -8274 0
c Encoding variable: aux783 with domain: int(0..3) (representing constraint ((x_00001_00004=2) + aux782))
c Both direct and order encoding.
c Var 'aux783' order represents '0' with '8276'
c Var 'aux783' direct represents '0' with '8276'
c Var 'aux783' order represents '1' with '8277'
-8276 8277 0
c Var 'aux783' direct represents '1' with '8278'
8276 -8277 8278 0
-8278 8277 0
-8278 -8276 0
c Var 'aux783' order represents '2' with '8279'
-8277 8279 0
c Var 'aux783' direct represents '2' with '8280'
8277 -8279 8280 0
-8280 8279 0
-8280 -8277 0
c Var 'aux783' direct represents '3' with '-8279'
8276 8278 8280 -8279 0
c Encoding variable: aux784 with domain: int(0..4) (representing constraint (aux779 + aux781))
c Both direct and order encoding.
c Var 'aux784' order represents '0' with '8281'
c Var 'aux784' direct represents '0' with '8281'
c Var 'aux784' order represents '1' with '8282'
-8281 8282 0
c Var 'aux784' direct represents '1' with '8283'
8281 -8282 8283 0
-8283 8282 0
-8283 -8281 0
c Var 'aux784' order represents '2' with '8284'
-8282 8284 0
c Var 'aux784' direct represents '2' with '8285'
8282 -8284 8285 0
-8285 8284 0
-8285 -8282 0
c Var 'aux784' order represents '3' with '8286'
-8284 8286 0
c Var 'aux784' direct represents '3' with '8287'
8284 -8286 8287 0
-8287 8286 0
-8287 -8284 0
c Var 'aux784' direct represents '4' with '-8286'
8281 8283 8285 8287 -8286 0
c Encoding variable: aux785 with domain: int(0..2) (representing constraint ((x_00003_00004=3) + (x_00005_00004=3)))
c Both direct and order encoding.
c Var 'aux785' order represents '0' with '8288'
c Var 'aux785' direct represents '0' with '8288'
c Var 'aux785' order represents '1' with '8289'
-8288 8289 0
c Var 'aux785' direct represents '1' with '8290'
8288 -8289 8290 0
-8290 8289 0
-8290 -8288 0
c Var 'aux785' direct represents '2' with '-8289'
8288 8290 -8289 0
c Encoding variable: aux786 with domain: int(0..2) (representing constraint ((x_00007_00004=3) + (x_00008_00004=3)))
c Both direct and order encoding.
c Var 'aux786' order represents '0' with '8291'
c Var 'aux786' direct represents '0' with '8291'
c Var 'aux786' order represents '1' with '8292'
-8291 8292 0
c Var 'aux786' direct represents '1' with '8293'
8291 -8292 8293 0
-8293 8292 0
-8293 -8291 0
c Var 'aux786' direct represents '2' with '-8292'
8291 8293 -8292 0
c Encoding variable: aux787 with domain: int(0..2) (representing constraint ((x_00002_00004=3) + (x_00006_00004=3)))
c Both direct and order encoding.
c Var 'aux787' order represents '0' with '8294'
c Var 'aux787' direct represents '0' with '8294'
c Var 'aux787' order represents '1' with '8295'
-8294 8295 0
c Var 'aux787' direct represents '1' with '8296'
8294 -8295 8296 0
-8296 8295 0
-8296 -8294 0
c Var 'aux787' direct represents '2' with '-8295'
8294 8296 -8295 0
c Encoding variable: aux788 with domain: int(0..2) (representing constraint ((x_00009_00004=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux788' order represents '0' with '8297'
c Var 'aux788' direct represents '0' with '8297'
c Var 'aux788' order represents '1' with '8298'
-8297 8298 0
c Var 'aux788' direct represents '1' with '8299'
8297 -8298 8299 0
-8299 8298 0
-8299 -8297 0
c Var 'aux788' direct represents '2' with '-8298'
8297 8299 -8298 0
c Encoding variable: aux789 with domain: int(0..3) (representing constraint ((x_00001_00004=3) + aux788))
c Both direct and order encoding.
c Var 'aux789' order represents '0' with '8300'
c Var 'aux789' direct represents '0' with '8300'
c Var 'aux789' order represents '1' with '8301'
-8300 8301 0
c Var 'aux789' direct represents '1' with '8302'
8300 -8301 8302 0
-8302 8301 0
-8302 -8300 0
c Var 'aux789' order represents '2' with '8303'
-8301 8303 0
c Var 'aux789' direct represents '2' with '8304'
8301 -8303 8304 0
-8304 8303 0
-8304 -8301 0
c Var 'aux789' direct represents '3' with '-8303'
8300 8302 8304 -8303 0
c Encoding variable: aux790 with domain: int(0..4) (representing constraint (aux785 + aux787))
c Both direct and order encoding.
c Var 'aux790' order represents '0' with '8305'
c Var 'aux790' direct represents '0' with '8305'
c Var 'aux790' order represents '1' with '8306'
-8305 8306 0
c Var 'aux790' direct represents '1' with '8307'
8305 -8306 8307 0
-8307 8306 0
-8307 -8305 0
c Var 'aux790' order represents '2' with '8308'
-8306 8308 0
c Var 'aux790' direct represents '2' with '8309'
8306 -8308 8309 0
-8309 8308 0
-8309 -8306 0
c Var 'aux790' order represents '3' with '8310'
-8308 8310 0
c Var 'aux790' direct represents '3' with '8311'
8308 -8310 8311 0
-8311 8310 0
-8311 -8308 0
c Var 'aux790' direct represents '4' with '-8310'
8305 8307 8309 8311 -8310 0
c Encoding variable: aux791 with domain: int(0..2) (representing constraint ((x_00003_00004=4) + (x_00005_00004=4)))
c Both direct and order encoding.
c Var 'aux791' order represents '0' with '8312'
c Var 'aux791' direct represents '0' with '8312'
c Var 'aux791' order represents '1' with '8313'
-8312 8313 0
c Var 'aux791' direct represents '1' with '8314'
8312 -8313 8314 0
-8314 8313 0
-8314 -8312 0
c Var 'aux791' direct represents '2' with '-8313'
8312 8314 -8313 0
c Encoding variable: aux792 with domain: int(0..2) (representing constraint ((x_00007_00004=4) + (x_00008_00004=4)))
c Both direct and order encoding.
c Var 'aux792' order represents '0' with '8315'
c Var 'aux792' direct represents '0' with '8315'
c Var 'aux792' order represents '1' with '8316'
-8315 8316 0
c Var 'aux792' direct represents '1' with '8317'
8315 -8316 8317 0
-8317 8316 0
-8317 -8315 0
c Var 'aux792' direct represents '2' with '-8316'
8315 8317 -8316 0
c Encoding variable: aux793 with domain: int(0..2) (representing constraint ((x_00002_00004=4) + (x_00006_00004=4)))
c Both direct and order encoding.
c Var 'aux793' order represents '0' with '8318'
c Var 'aux793' direct represents '0' with '8318'
c Var 'aux793' order represents '1' with '8319'
-8318 8319 0
c Var 'aux793' direct represents '1' with '8320'
8318 -8319 8320 0
-8320 8319 0
-8320 -8318 0
c Var 'aux793' direct represents '2' with '-8319'
8318 8320 -8319 0
c Encoding variable: aux794 with domain: int(0..2) (representing constraint ((x_00009_00004=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux794' order represents '0' with '8321'
c Var 'aux794' direct represents '0' with '8321'
c Var 'aux794' order represents '1' with '8322'
-8321 8322 0
c Var 'aux794' direct represents '1' with '8323'
8321 -8322 8323 0
-8323 8322 0
-8323 -8321 0
c Var 'aux794' direct represents '2' with '-8322'
8321 8323 -8322 0
c Encoding variable: aux795 with domain: int(0..3) (representing constraint ((x_00001_00004=4) + aux794))
c Both direct and order encoding.
c Var 'aux795' order represents '0' with '8324'
c Var 'aux795' direct represents '0' with '8324'
c Var 'aux795' order represents '1' with '8325'
-8324 8325 0
c Var 'aux795' direct represents '1' with '8326'
8324 -8325 8326 0
-8326 8325 0
-8326 -8324 0
c Var 'aux795' order represents '2' with '8327'
-8325 8327 0
c Var 'aux795' direct represents '2' with '8328'
8325 -8327 8328 0
-8328 8327 0
-8328 -8325 0
c Var 'aux795' direct represents '3' with '-8327'
8324 8326 8328 -8327 0
c Encoding variable: aux796 with domain: int(0..4) (representing constraint (aux791 + aux793))
c Both direct and order encoding.
c Var 'aux796' order represents '0' with '8329'
c Var 'aux796' direct represents '0' with '8329'
c Var 'aux796' order represents '1' with '8330'
-8329 8330 0
c Var 'aux796' direct represents '1' with '8331'
8329 -8330 8331 0
-8331 8330 0
-8331 -8329 0
c Var 'aux796' order represents '2' with '8332'
-8330 8332 0
c Var 'aux796' direct represents '2' with '8333'
8330 -8332 8333 0
-8333 8332 0
-8333 -8330 0
c Var 'aux796' order represents '3' with '8334'
-8332 8334 0
c Var 'aux796' direct represents '3' with '8335'
8332 -8334 8335 0
-8335 8334 0
-8335 -8332 0
c Var 'aux796' direct represents '4' with '-8334'
8329 8331 8333 8335 -8334 0
c Encoding variable: aux797 with domain: int(0..2) (representing constraint ((x_00003_00004=5) + (x_00005_00004=5)))
c Both direct and order encoding.
c Var 'aux797' order represents '0' with '8336'
c Var 'aux797' direct represents '0' with '8336'
c Var 'aux797' order represents '1' with '8337'
-8336 8337 0
c Var 'aux797' direct represents '1' with '8338'
8336 -8337 8338 0
-8338 8337 0
-8338 -8336 0
c Var 'aux797' direct represents '2' with '-8337'
8336 8338 -8337 0
c Encoding variable: aux798 with domain: int(0..2) (representing constraint ((x_00007_00004=5) + (x_00008_00004=5)))
c Both direct and order encoding.
c Var 'aux798' order represents '0' with '8339'
c Var 'aux798' direct represents '0' with '8339'
c Var 'aux798' order represents '1' with '8340'
-8339 8340 0
c Var 'aux798' direct represents '1' with '8341'
8339 -8340 8341 0
-8341 8340 0
-8341 -8339 0
c Var 'aux798' direct represents '2' with '-8340'
8339 8341 -8340 0
c Encoding variable: aux799 with domain: int(0..2) (representing constraint ((x_00002_00004=5) + (x_00006_00004=5)))
c Both direct and order encoding.
c Var 'aux799' order represents '0' with '8342'
c Var 'aux799' direct represents '0' with '8342'
c Var 'aux799' order represents '1' with '8343'
-8342 8343 0
c Var 'aux799' direct represents '1' with '8344'
8342 -8343 8344 0
-8344 8343 0
-8344 -8342 0
c Var 'aux799' direct represents '2' with '-8343'
8342 8344 -8343 0
c Encoding variable: aux800 with domain: int(0..2) (representing constraint ((x_00009_00004=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux800' order represents '0' with '8345'
c Var 'aux800' direct represents '0' with '8345'
c Var 'aux800' order represents '1' with '8346'
-8345 8346 0
c Var 'aux800' direct represents '1' with '8347'
8345 -8346 8347 0
-8347 8346 0
-8347 -8345 0
c Var 'aux800' direct represents '2' with '-8346'
8345 8347 -8346 0
c Encoding variable: aux801 with domain: int(0..3) (representing constraint ((x_00001_00004=5) + aux800))
c Both direct and order encoding.
c Var 'aux801' order represents '0' with '8348'
c Var 'aux801' direct represents '0' with '8348'
c Var 'aux801' order represents '1' with '8349'
-8348 8349 0
c Var 'aux801' direct represents '1' with '8350'
8348 -8349 8350 0
-8350 8349 0
-8350 -8348 0
c Var 'aux801' order represents '2' with '8351'
-8349 8351 0
c Var 'aux801' direct represents '2' with '8352'
8349 -8351 8352 0
-8352 8351 0
-8352 -8349 0
c Var 'aux801' direct represents '3' with '-8351'
8348 8350 8352 -8351 0
c Encoding variable: aux802 with domain: int(0..4) (representing constraint (aux797 + aux799))
c Both direct and order encoding.
c Var 'aux802' order represents '0' with '8353'
c Var 'aux802' direct represents '0' with '8353'
c Var 'aux802' order represents '1' with '8354'
-8353 8354 0
c Var 'aux802' direct represents '1' with '8355'
8353 -8354 8355 0
-8355 8354 0
-8355 -8353 0
c Var 'aux802' order represents '2' with '8356'
-8354 8356 0
c Var 'aux802' direct represents '2' with '8357'
8354 -8356 8357 0
-8357 8356 0
-8357 -8354 0
c Var 'aux802' order represents '3' with '8358'
-8356 8358 0
c Var 'aux802' direct represents '3' with '8359'
8356 -8358 8359 0
-8359 8358 0
-8359 -8356 0
c Var 'aux802' direct represents '4' with '-8358'
8353 8355 8357 8359 -8358 0
c Encoding variable: aux803 with domain: int(0..2) (representing constraint ((x_00003_00004=6) + (x_00005_00004=6)))
c Both direct and order encoding.
c Var 'aux803' order represents '0' with '8360'
c Var 'aux803' direct represents '0' with '8360'
c Var 'aux803' order represents '1' with '8361'
-8360 8361 0
c Var 'aux803' direct represents '1' with '8362'
8360 -8361 8362 0
-8362 8361 0
-8362 -8360 0
c Var 'aux803' direct represents '2' with '-8361'
8360 8362 -8361 0
c Encoding variable: aux804 with domain: int(0..2) (representing constraint ((x_00007_00004=6) + (x_00008_00004=6)))
c Both direct and order encoding.
c Var 'aux804' order represents '0' with '8363'
c Var 'aux804' direct represents '0' with '8363'
c Var 'aux804' order represents '1' with '8364'
-8363 8364 0
c Var 'aux804' direct represents '1' with '8365'
8363 -8364 8365 0
-8365 8364 0
-8365 -8363 0
c Var 'aux804' direct represents '2' with '-8364'
8363 8365 -8364 0
c Encoding variable: aux805 with domain: int(0..2) (representing constraint ((x_00002_00004=6) + (x_00006_00004=6)))
c Both direct and order encoding.
c Var 'aux805' order represents '0' with '8366'
c Var 'aux805' direct represents '0' with '8366'
c Var 'aux805' order represents '1' with '8367'
-8366 8367 0
c Var 'aux805' direct represents '1' with '8368'
8366 -8367 8368 0
-8368 8367 0
-8368 -8366 0
c Var 'aux805' direct represents '2' with '-8367'
8366 8368 -8367 0
c Encoding variable: aux806 with domain: int(0..2) (representing constraint ((x_00009_00004=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux806' order represents '0' with '8369'
c Var 'aux806' direct represents '0' with '8369'
c Var 'aux806' order represents '1' with '8370'
-8369 8370 0
c Var 'aux806' direct represents '1' with '8371'
8369 -8370 8371 0
-8371 8370 0
-8371 -8369 0
c Var 'aux806' direct represents '2' with '-8370'
8369 8371 -8370 0
c Encoding variable: aux807 with domain: int(0..3) (representing constraint ((x_00001_00004=6) + aux806))
c Both direct and order encoding.
c Var 'aux807' order represents '0' with '8372'
c Var 'aux807' direct represents '0' with '8372'
c Var 'aux807' order represents '1' with '8373'
-8372 8373 0
c Var 'aux807' direct represents '1' with '8374'
8372 -8373 8374 0
-8374 8373 0
-8374 -8372 0
c Var 'aux807' order represents '2' with '8375'
-8373 8375 0
c Var 'aux807' direct represents '2' with '8376'
8373 -8375 8376 0
-8376 8375 0
-8376 -8373 0
c Var 'aux807' direct represents '3' with '-8375'
8372 8374 8376 -8375 0
c Encoding variable: aux808 with domain: int(0..4) (representing constraint (aux803 + aux805))
c Both direct and order encoding.
c Var 'aux808' order represents '0' with '8377'
c Var 'aux808' direct represents '0' with '8377'
c Var 'aux808' order represents '1' with '8378'
-8377 8378 0
c Var 'aux808' direct represents '1' with '8379'
8377 -8378 8379 0
-8379 8378 0
-8379 -8377 0
c Var 'aux808' order represents '2' with '8380'
-8378 8380 0
c Var 'aux808' direct represents '2' with '8381'
8378 -8380 8381 0
-8381 8380 0
-8381 -8378 0
c Var 'aux808' order represents '3' with '8382'
-8380 8382 0
c Var 'aux808' direct represents '3' with '8383'
8380 -8382 8383 0
-8383 8382 0
-8383 -8380 0
c Var 'aux808' direct represents '4' with '-8382'
8377 8379 8381 8383 -8382 0
c Encoding variable: aux809 with domain: int(0..2) (representing constraint ((x_00003_00004=7) + (x_00005_00004=7)))
c Both direct and order encoding.
c Var 'aux809' order represents '0' with '8384'
c Var 'aux809' direct represents '0' with '8384'
c Var 'aux809' order represents '1' with '8385'
-8384 8385 0
c Var 'aux809' direct represents '1' with '8386'
8384 -8385 8386 0
-8386 8385 0
-8386 -8384 0
c Var 'aux809' direct represents '2' with '-8385'
8384 8386 -8385 0
c Encoding variable: aux810 with domain: int(0..2) (representing constraint ((x_00007_00004=7) + (x_00008_00004=7)))
c Both direct and order encoding.
c Var 'aux810' order represents '0' with '8387'
c Var 'aux810' direct represents '0' with '8387'
c Var 'aux810' order represents '1' with '8388'
-8387 8388 0
c Var 'aux810' direct represents '1' with '8389'
8387 -8388 8389 0
-8389 8388 0
-8389 -8387 0
c Var 'aux810' direct represents '2' with '-8388'
8387 8389 -8388 0
c Encoding variable: aux811 with domain: int(0..2) (representing constraint ((x_00002_00004=7) + (x_00006_00004=7)))
c Both direct and order encoding.
c Var 'aux811' order represents '0' with '8390'
c Var 'aux811' direct represents '0' with '8390'
c Var 'aux811' order represents '1' with '8391'
-8390 8391 0
c Var 'aux811' direct represents '1' with '8392'
8390 -8391 8392 0
-8392 8391 0
-8392 -8390 0
c Var 'aux811' direct represents '2' with '-8391'
8390 8392 -8391 0
c Encoding variable: aux812 with domain: int(0..2) (representing constraint ((x_00009_00004=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux812' order represents '0' with '8393'
c Var 'aux812' direct represents '0' with '8393'
c Var 'aux812' order represents '1' with '8394'
-8393 8394 0
c Var 'aux812' direct represents '1' with '8395'
8393 -8394 8395 0
-8395 8394 0
-8395 -8393 0
c Var 'aux812' direct represents '2' with '-8394'
8393 8395 -8394 0
c Encoding variable: aux813 with domain: int(0..3) (representing constraint ((x_00001_00004=7) + aux812))
c Both direct and order encoding.
c Var 'aux813' order represents '0' with '8396'
c Var 'aux813' direct represents '0' with '8396'
c Var 'aux813' order represents '1' with '8397'
-8396 8397 0
c Var 'aux813' direct represents '1' with '8398'
8396 -8397 8398 0
-8398 8397 0
-8398 -8396 0
c Var 'aux813' order represents '2' with '8399'
-8397 8399 0
c Var 'aux813' direct represents '2' with '8400'
8397 -8399 8400 0
-8400 8399 0
-8400 -8397 0
c Var 'aux813' direct represents '3' with '-8399'
8396 8398 8400 -8399 0
c Encoding variable: aux814 with domain: int(0..4) (representing constraint (aux809 + aux811))
c Both direct and order encoding.
c Var 'aux814' order represents '0' with '8401'
c Var 'aux814' direct represents '0' with '8401'
c Var 'aux814' order represents '1' with '8402'
-8401 8402 0
c Var 'aux814' direct represents '1' with '8403'
8401 -8402 8403 0
-8403 8402 0
-8403 -8401 0
c Var 'aux814' order represents '2' with '8404'
-8402 8404 0
c Var 'aux814' direct represents '2' with '8405'
8402 -8404 8405 0
-8405 8404 0
-8405 -8402 0
c Var 'aux814' order represents '3' with '8406'
-8404 8406 0
c Var 'aux814' direct represents '3' with '8407'
8404 -8406 8407 0
-8407 8406 0
-8407 -8404 0
c Var 'aux814' direct represents '4' with '-8406'
8401 8403 8405 8407 -8406 0
c Encoding variable: aux815 with domain: int(0..2) (representing constraint ((x_00003_00004=8) + (x_00005_00004=8)))
c Both direct and order encoding.
c Var 'aux815' order represents '0' with '8408'
c Var 'aux815' direct represents '0' with '8408'
c Var 'aux815' order represents '1' with '8409'
-8408 8409 0
c Var 'aux815' direct represents '1' with '8410'
8408 -8409 8410 0
-8410 8409 0
-8410 -8408 0
c Var 'aux815' direct represents '2' with '-8409'
8408 8410 -8409 0
c Encoding variable: aux816 with domain: int(0..2) (representing constraint ((x_00007_00004=8) + (x_00008_00004=8)))
c Both direct and order encoding.
c Var 'aux816' order represents '0' with '8411'
c Var 'aux816' direct represents '0' with '8411'
c Var 'aux816' order represents '1' with '8412'
-8411 8412 0
c Var 'aux816' direct represents '1' with '8413'
8411 -8412 8413 0
-8413 8412 0
-8413 -8411 0
c Var 'aux816' direct represents '2' with '-8412'
8411 8413 -8412 0
c Encoding variable: aux817 with domain: int(0..2) (representing constraint ((x_00002_00004=8) + (x_00006_00004=8)))
c Both direct and order encoding.
c Var 'aux817' order represents '0' with '8414'
c Var 'aux817' direct represents '0' with '8414'
c Var 'aux817' order represents '1' with '8415'
-8414 8415 0
c Var 'aux817' direct represents '1' with '8416'
8414 -8415 8416 0
-8416 8415 0
-8416 -8414 0
c Var 'aux817' direct represents '2' with '-8415'
8414 8416 -8415 0
c Encoding variable: aux818 with domain: int(0..2) (representing constraint ((x_00009_00004=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux818' order represents '0' with '8417'
c Var 'aux818' direct represents '0' with '8417'
c Var 'aux818' order represents '1' with '8418'
-8417 8418 0
c Var 'aux818' direct represents '1' with '8419'
8417 -8418 8419 0
-8419 8418 0
-8419 -8417 0
c Var 'aux818' direct represents '2' with '-8418'
8417 8419 -8418 0
c Encoding variable: aux819 with domain: int(0..3) (representing constraint ((x_00001_00004=8) + aux818))
c Both direct and order encoding.
c Var 'aux819' order represents '0' with '8420'
c Var 'aux819' direct represents '0' with '8420'
c Var 'aux819' order represents '1' with '8421'
-8420 8421 0
c Var 'aux819' direct represents '1' with '8422'
8420 -8421 8422 0
-8422 8421 0
-8422 -8420 0
c Var 'aux819' order represents '2' with '8423'
-8421 8423 0
c Var 'aux819' direct represents '2' with '8424'
8421 -8423 8424 0
-8424 8423 0
-8424 -8421 0
c Var 'aux819' direct represents '3' with '-8423'
8420 8422 8424 -8423 0
c Encoding variable: aux820 with domain: int(0..4) (representing constraint (aux815 + aux817))
c Both direct and order encoding.
c Var 'aux820' order represents '0' with '8425'
c Var 'aux820' direct represents '0' with '8425'
c Var 'aux820' order represents '1' with '8426'
-8425 8426 0
c Var 'aux820' direct represents '1' with '8427'
8425 -8426 8427 0
-8427 8426 0
-8427 -8425 0
c Var 'aux820' order represents '2' with '8428'
-8426 8428 0
c Var 'aux820' direct represents '2' with '8429'
8426 -8428 8429 0
-8429 8428 0
-8429 -8426 0
c Var 'aux820' order represents '3' with '8430'
-8428 8430 0
c Var 'aux820' direct represents '3' with '8431'
8428 -8430 8431 0
-8431 8430 0
-8431 -8428 0
c Var 'aux820' direct represents '4' with '-8430'
8425 8427 8429 8431 -8430 0
c Encoding variable: aux821 with domain: int(0..2) (representing constraint ((x_00003_00004=9) + (x_00005_00004=9)))
c Both direct and order encoding.
c Var 'aux821' order represents '0' with '8432'
c Var 'aux821' direct represents '0' with '8432'
c Var 'aux821' order represents '1' with '8433'
-8432 8433 0
c Var 'aux821' direct represents '1' with '8434'
8432 -8433 8434 0
-8434 8433 0
-8434 -8432 0
c Var 'aux821' direct represents '2' with '-8433'
8432 8434 -8433 0
c Encoding variable: aux822 with domain: int(0..2) (representing constraint ((x_00007_00004=9) + (x_00008_00004=9)))
c Both direct and order encoding.
c Var 'aux822' order represents '0' with '8435'
c Var 'aux822' direct represents '0' with '8435'
c Var 'aux822' order represents '1' with '8436'
-8435 8436 0
c Var 'aux822' direct represents '1' with '8437'
8435 -8436 8437 0
-8437 8436 0
-8437 -8435 0
c Var 'aux822' direct represents '2' with '-8436'
8435 8437 -8436 0
c Encoding variable: aux823 with domain: int(0..2) (representing constraint ((x_00002_00004=9) + (x_00006_00004=9)))
c Both direct and order encoding.
c Var 'aux823' order represents '0' with '8438'
c Var 'aux823' direct represents '0' with '8438'
c Var 'aux823' order represents '1' with '8439'
-8438 8439 0
c Var 'aux823' direct represents '1' with '8440'
8438 -8439 8440 0
-8440 8439 0
-8440 -8438 0
c Var 'aux823' direct represents '2' with '-8439'
8438 8440 -8439 0
c Encoding variable: aux824 with domain: int(0..2) (representing constraint ((x_00009_00004=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux824' order represents '0' with '8441'
c Var 'aux824' direct represents '0' with '8441'
c Var 'aux824' order represents '1' with '8442'
-8441 8442 0
c Var 'aux824' direct represents '1' with '8443'
8441 -8442 8443 0
-8443 8442 0
-8443 -8441 0
c Var 'aux824' direct represents '2' with '-8442'
8441 8443 -8442 0
c Encoding variable: aux825 with domain: int(0..3) (representing constraint ((x_00001_00004=9) + aux824))
c Both direct and order encoding.
c Var 'aux825' order represents '0' with '8444'
c Var 'aux825' direct represents '0' with '8444'
c Var 'aux825' order represents '1' with '8445'
-8444 8445 0
c Var 'aux825' direct represents '1' with '8446'
8444 -8445 8446 0
-8446 8445 0
-8446 -8444 0
c Var 'aux825' order represents '2' with '8447'
-8445 8447 0
c Var 'aux825' direct represents '2' with '8448'
8445 -8447 8448 0
-8448 8447 0
-8448 -8445 0
c Var 'aux825' direct represents '3' with '-8447'
8444 8446 8448 -8447 0
c Encoding variable: aux826 with domain: int(0..4) (representing constraint (aux821 + aux823))
c Both direct and order encoding.
c Var 'aux826' order represents '0' with '8449'
c Var 'aux826' direct represents '0' with '8449'
c Var 'aux826' order represents '1' with '8450'
-8449 8450 0
c Var 'aux826' direct represents '1' with '8451'
8449 -8450 8451 0
-8451 8450 0
-8451 -8449 0
c Var 'aux826' order represents '2' with '8452'
-8450 8452 0
c Var 'aux826' direct represents '2' with '8453'
8450 -8452 8453 0
-8453 8452 0
-8453 -8450 0
c Var 'aux826' order represents '3' with '8454'
-8452 8454 0
c Var 'aux826' direct represents '3' with '8455'
8452 -8454 8455 0
-8455 8454 0
-8455 -8452 0
c Var 'aux826' direct represents '4' with '-8454'
8449 8451 8453 8455 -8454 0
c Encoding variable: aux827 with domain: int(0..2) (representing constraint ((x_00003_00005=1) + (x_00005_00005=1)))
c Both direct and order encoding.
c Var 'aux827' order represents '0' with '8456'
c Var 'aux827' direct represents '0' with '8456'
c Var 'aux827' order represents '1' with '8457'
-8456 8457 0
c Var 'aux827' direct represents '1' with '8458'
8456 -8457 8458 0
-8458 8457 0
-8458 -8456 0
c Var 'aux827' direct represents '2' with '-8457'
8456 8458 -8457 0
c Encoding variable: aux828 with domain: int(0..2) (representing constraint ((x_00007_00005=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux828' order represents '0' with '8459'
c Var 'aux828' direct represents '0' with '8459'
c Var 'aux828' order represents '1' with '8460'
-8459 8460 0
c Var 'aux828' direct represents '1' with '8461'
8459 -8460 8461 0
-8461 8460 0
-8461 -8459 0
c Var 'aux828' direct represents '2' with '-8460'
8459 8461 -8460 0
c Encoding variable: aux829 with domain: int(0..2) (representing constraint ((x_00002_00005=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux829' order represents '0' with '8462'
c Var 'aux829' direct represents '0' with '8462'
c Var 'aux829' order represents '1' with '8463'
-8462 8463 0
c Var 'aux829' direct represents '1' with '8464'
8462 -8463 8464 0
-8464 8463 0
-8464 -8462 0
c Var 'aux829' direct represents '2' with '-8463'
8462 8464 -8463 0
c Encoding variable: aux830 with domain: int(0..2) (representing constraint ((x_00009_00005=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux830' order represents '0' with '8465'
c Var 'aux830' direct represents '0' with '8465'
c Var 'aux830' order represents '1' with '8466'
-8465 8466 0
c Var 'aux830' direct represents '1' with '8467'
8465 -8466 8467 0
-8467 8466 0
-8467 -8465 0
c Var 'aux830' direct represents '2' with '-8466'
8465 8467 -8466 0
c Encoding variable: aux831 with domain: int(0..3) (representing constraint ((x_00001_00005=1) + aux830))
c Both direct and order encoding.
c Var 'aux831' order represents '0' with '8468'
c Var 'aux831' direct represents '0' with '8468'
c Var 'aux831' order represents '1' with '8469'
-8468 8469 0
c Var 'aux831' direct represents '1' with '8470'
8468 -8469 8470 0
-8470 8469 0
-8470 -8468 0
c Var 'aux831' order represents '2' with '8471'
-8469 8471 0
c Var 'aux831' direct represents '2' with '8472'
8469 -8471 8472 0
-8472 8471 0
-8472 -8469 0
c Var 'aux831' direct represents '3' with '-8471'
8468 8470 8472 -8471 0
c Encoding variable: aux832 with domain: int(0..4) (representing constraint (aux827 + aux829))
c Both direct and order encoding.
c Var 'aux832' order represents '0' with '8473'
c Var 'aux832' direct represents '0' with '8473'
c Var 'aux832' order represents '1' with '8474'
-8473 8474 0
c Var 'aux832' direct represents '1' with '8475'
8473 -8474 8475 0
-8475 8474 0
-8475 -8473 0
c Var 'aux832' order represents '2' with '8476'
-8474 8476 0
c Var 'aux832' direct represents '2' with '8477'
8474 -8476 8477 0
-8477 8476 0
-8477 -8474 0
c Var 'aux832' order represents '3' with '8478'
-8476 8478 0
c Var 'aux832' direct represents '3' with '8479'
8476 -8478 8479 0
-8479 8478 0
-8479 -8476 0
c Var 'aux832' direct represents '4' with '-8478'
8473 8475 8477 8479 -8478 0
c Encoding variable: aux833 with domain: int(0..2) (representing constraint ((x_00003_00005=2) + (x_00005_00005=2)))
c Both direct and order encoding.
c Var 'aux833' order represents '0' with '8480'
c Var 'aux833' direct represents '0' with '8480'
c Var 'aux833' order represents '1' with '8481'
-8480 8481 0
c Var 'aux833' direct represents '1' with '8482'
8480 -8481 8482 0
-8482 8481 0
-8482 -8480 0
c Var 'aux833' direct represents '2' with '-8481'
8480 8482 -8481 0
c Encoding variable: aux834 with domain: int(0..2) (representing constraint ((x_00007_00005=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux834' order represents '0' with '8483'
c Var 'aux834' direct represents '0' with '8483'
c Var 'aux834' order represents '1' with '8484'
-8483 8484 0
c Var 'aux834' direct represents '1' with '8485'
8483 -8484 8485 0
-8485 8484 0
-8485 -8483 0
c Var 'aux834' direct represents '2' with '-8484'
8483 8485 -8484 0
c Encoding variable: aux835 with domain: int(0..2) (representing constraint ((x_00002_00005=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux835' order represents '0' with '8486'
c Var 'aux835' direct represents '0' with '8486'
c Var 'aux835' order represents '1' with '8487'
-8486 8487 0
c Var 'aux835' direct represents '1' with '8488'
8486 -8487 8488 0
-8488 8487 0
-8488 -8486 0
c Var 'aux835' direct represents '2' with '-8487'
8486 8488 -8487 0
c Encoding variable: aux836 with domain: int(0..2) (representing constraint ((x_00009_00005=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux836' order represents '0' with '8489'
c Var 'aux836' direct represents '0' with '8489'
c Var 'aux836' order represents '1' with '8490'
-8489 8490 0
c Var 'aux836' direct represents '1' with '8491'
8489 -8490 8491 0
-8491 8490 0
-8491 -8489 0
c Var 'aux836' direct represents '2' with '-8490'
8489 8491 -8490 0
c Encoding variable: aux837 with domain: int(0..3) (representing constraint ((x_00001_00005=2) + aux836))
c Both direct and order encoding.
c Var 'aux837' order represents '0' with '8492'
c Var 'aux837' direct represents '0' with '8492'
c Var 'aux837' order represents '1' with '8493'
-8492 8493 0
c Var 'aux837' direct represents '1' with '8494'
8492 -8493 8494 0
-8494 8493 0
-8494 -8492 0
c Var 'aux837' order represents '2' with '8495'
-8493 8495 0
c Var 'aux837' direct represents '2' with '8496'
8493 -8495 8496 0
-8496 8495 0
-8496 -8493 0
c Var 'aux837' direct represents '3' with '-8495'
8492 8494 8496 -8495 0
c Encoding variable: aux838 with domain: int(0..4) (representing constraint (aux833 + aux835))
c Both direct and order encoding.
c Var 'aux838' order represents '0' with '8497'
c Var 'aux838' direct represents '0' with '8497'
c Var 'aux838' order represents '1' with '8498'
-8497 8498 0
c Var 'aux838' direct represents '1' with '8499'
8497 -8498 8499 0
-8499 8498 0
-8499 -8497 0
c Var 'aux838' order represents '2' with '8500'
-8498 8500 0
c Var 'aux838' direct represents '2' with '8501'
8498 -8500 8501 0
-8501 8500 0
-8501 -8498 0
c Var 'aux838' order represents '3' with '8502'
-8500 8502 0
c Var 'aux838' direct represents '3' with '8503'
8500 -8502 8503 0
-8503 8502 0
-8503 -8500 0
c Var 'aux838' direct represents '4' with '-8502'
8497 8499 8501 8503 -8502 0
c Encoding variable: aux839 with domain: int(0..2) (representing constraint ((x_00003_00005=3) + (x_00005_00005=3)))
c Both direct and order encoding.
c Var 'aux839' order represents '0' with '8504'
c Var 'aux839' direct represents '0' with '8504'
c Var 'aux839' order represents '1' with '8505'
-8504 8505 0
c Var 'aux839' direct represents '1' with '8506'
8504 -8505 8506 0
-8506 8505 0
-8506 -8504 0
c Var 'aux839' direct represents '2' with '-8505'
8504 8506 -8505 0
c Encoding variable: aux840 with domain: int(0..2) (representing constraint ((x_00007_00005=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux840' order represents '0' with '8507'
c Var 'aux840' direct represents '0' with '8507'
c Var 'aux840' order represents '1' with '8508'
-8507 8508 0
c Var 'aux840' direct represents '1' with '8509'
8507 -8508 8509 0
-8509 8508 0
-8509 -8507 0
c Var 'aux840' direct represents '2' with '-8508'
8507 8509 -8508 0
c Encoding variable: aux841 with domain: int(0..2) (representing constraint ((x_00002_00005=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux841' order represents '0' with '8510'
c Var 'aux841' direct represents '0' with '8510'
c Var 'aux841' order represents '1' with '8511'
-8510 8511 0
c Var 'aux841' direct represents '1' with '8512'
8510 -8511 8512 0
-8512 8511 0
-8512 -8510 0
c Var 'aux841' direct represents '2' with '-8511'
8510 8512 -8511 0
c Encoding variable: aux842 with domain: int(0..2) (representing constraint ((x_00009_00005=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux842' order represents '0' with '8513'
c Var 'aux842' direct represents '0' with '8513'
c Var 'aux842' order represents '1' with '8514'
-8513 8514 0
c Var 'aux842' direct represents '1' with '8515'
8513 -8514 8515 0
-8515 8514 0
-8515 -8513 0
c Var 'aux842' direct represents '2' with '-8514'
8513 8515 -8514 0
c Encoding variable: aux843 with domain: int(0..3) (representing constraint ((x_00001_00005=3) + aux842))
c Both direct and order encoding.
c Var 'aux843' order represents '0' with '8516'
c Var 'aux843' direct represents '0' with '8516'
c Var 'aux843' order represents '1' with '8517'
-8516 8517 0
c Var 'aux843' direct represents '1' with '8518'
8516 -8517 8518 0
-8518 8517 0
-8518 -8516 0
c Var 'aux843' order represents '2' with '8519'
-8517 8519 0
c Var 'aux843' direct represents '2' with '8520'
8517 -8519 8520 0
-8520 8519 0
-8520 -8517 0
c Var 'aux843' direct represents '3' with '-8519'
8516 8518 8520 -8519 0
c Encoding variable: aux844 with domain: int(0..4) (representing constraint (aux839 + aux841))
c Both direct and order encoding.
c Var 'aux844' order represents '0' with '8521'
c Var 'aux844' direct represents '0' with '8521'
c Var 'aux844' order represents '1' with '8522'
-8521 8522 0
c Var 'aux844' direct represents '1' with '8523'
8521 -8522 8523 0
-8523 8522 0
-8523 -8521 0
c Var 'aux844' order represents '2' with '8524'
-8522 8524 0
c Var 'aux844' direct represents '2' with '8525'
8522 -8524 8525 0
-8525 8524 0
-8525 -8522 0
c Var 'aux844' order represents '3' with '8526'
-8524 8526 0
c Var 'aux844' direct represents '3' with '8527'
8524 -8526 8527 0
-8527 8526 0
-8527 -8524 0
c Var 'aux844' direct represents '4' with '-8526'
8521 8523 8525 8527 -8526 0
c Encoding variable: aux845 with domain: int(0..2) (representing constraint ((x_00003_00005=4) + (x_00005_00005=4)))
c Both direct and order encoding.
c Var 'aux845' order represents '0' with '8528'
c Var 'aux845' direct represents '0' with '8528'
c Var 'aux845' order represents '1' with '8529'
-8528 8529 0
c Var 'aux845' direct represents '1' with '8530'
8528 -8529 8530 0
-8530 8529 0
-8530 -8528 0
c Var 'aux845' direct represents '2' with '-8529'
8528 8530 -8529 0
c Encoding variable: aux846 with domain: int(0..2) (representing constraint ((x_00007_00005=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux846' order represents '0' with '8531'
c Var 'aux846' direct represents '0' with '8531'
c Var 'aux846' order represents '1' with '8532'
-8531 8532 0
c Var 'aux846' direct represents '1' with '8533'
8531 -8532 8533 0
-8533 8532 0
-8533 -8531 0
c Var 'aux846' direct represents '2' with '-8532'
8531 8533 -8532 0
c Encoding variable: aux847 with domain: int(0..2) (representing constraint ((x_00002_00005=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux847' order represents '0' with '8534'
c Var 'aux847' direct represents '0' with '8534'
c Var 'aux847' order represents '1' with '8535'
-8534 8535 0
c Var 'aux847' direct represents '1' with '8536'
8534 -8535 8536 0
-8536 8535 0
-8536 -8534 0
c Var 'aux847' direct represents '2' with '-8535'
8534 8536 -8535 0
c Encoding variable: aux848 with domain: int(0..2) (representing constraint ((x_00009_00005=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux848' order represents '0' with '8537'
c Var 'aux848' direct represents '0' with '8537'
c Var 'aux848' order represents '1' with '8538'
-8537 8538 0
c Var 'aux848' direct represents '1' with '8539'
8537 -8538 8539 0
-8539 8538 0
-8539 -8537 0
c Var 'aux848' direct represents '2' with '-8538'
8537 8539 -8538 0
c Encoding variable: aux849 with domain: int(0..3) (representing constraint ((x_00001_00005=4) + aux848))
c Both direct and order encoding.
c Var 'aux849' order represents '0' with '8540'
c Var 'aux849' direct represents '0' with '8540'
c Var 'aux849' order represents '1' with '8541'
-8540 8541 0
c Var 'aux849' direct represents '1' with '8542'
8540 -8541 8542 0
-8542 8541 0
-8542 -8540 0
c Var 'aux849' order represents '2' with '8543'
-8541 8543 0
c Var 'aux849' direct represents '2' with '8544'
8541 -8543 8544 0
-8544 8543 0
-8544 -8541 0
c Var 'aux849' direct represents '3' with '-8543'
8540 8542 8544 -8543 0
c Encoding variable: aux850 with domain: int(0..4) (representing constraint (aux845 + aux847))
c Both direct and order encoding.
c Var 'aux850' order represents '0' with '8545'
c Var 'aux850' direct represents '0' with '8545'
c Var 'aux850' order represents '1' with '8546'
-8545 8546 0
c Var 'aux850' direct represents '1' with '8547'
8545 -8546 8547 0
-8547 8546 0
-8547 -8545 0
c Var 'aux850' order represents '2' with '8548'
-8546 8548 0
c Var 'aux850' direct represents '2' with '8549'
8546 -8548 8549 0
-8549 8548 0
-8549 -8546 0
c Var 'aux850' order represents '3' with '8550'
-8548 8550 0
c Var 'aux850' direct represents '3' with '8551'
8548 -8550 8551 0
-8551 8550 0
-8551 -8548 0
c Var 'aux850' direct represents '4' with '-8550'
8545 8547 8549 8551 -8550 0
c Encoding variable: aux851 with domain: int(0..2) (representing constraint ((x_00003_00005=5) + (x_00005_00005=5)))
c Both direct and order encoding.
c Var 'aux851' order represents '0' with '8552'
c Var 'aux851' direct represents '0' with '8552'
c Var 'aux851' order represents '1' with '8553'
-8552 8553 0
c Var 'aux851' direct represents '1' with '8554'
8552 -8553 8554 0
-8554 8553 0
-8554 -8552 0
c Var 'aux851' direct represents '2' with '-8553'
8552 8554 -8553 0
c Encoding variable: aux852 with domain: int(0..2) (representing constraint ((x_00007_00005=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux852' order represents '0' with '8555'
c Var 'aux852' direct represents '0' with '8555'
c Var 'aux852' order represents '1' with '8556'
-8555 8556 0
c Var 'aux852' direct represents '1' with '8557'
8555 -8556 8557 0
-8557 8556 0
-8557 -8555 0
c Var 'aux852' direct represents '2' with '-8556'
8555 8557 -8556 0
c Encoding variable: aux853 with domain: int(0..2) (representing constraint ((x_00002_00005=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux853' order represents '0' with '8558'
c Var 'aux853' direct represents '0' with '8558'
c Var 'aux853' order represents '1' with '8559'
-8558 8559 0
c Var 'aux853' direct represents '1' with '8560'
8558 -8559 8560 0
-8560 8559 0
-8560 -8558 0
c Var 'aux853' direct represents '2' with '-8559'
8558 8560 -8559 0
c Encoding variable: aux854 with domain: int(0..2) (representing constraint ((x_00009_00005=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux854' order represents '0' with '8561'
c Var 'aux854' direct represents '0' with '8561'
c Var 'aux854' order represents '1' with '8562'
-8561 8562 0
c Var 'aux854' direct represents '1' with '8563'
8561 -8562 8563 0
-8563 8562 0
-8563 -8561 0
c Var 'aux854' direct represents '2' with '-8562'
8561 8563 -8562 0
c Encoding variable: aux855 with domain: int(0..3) (representing constraint ((x_00001_00005=5) + aux854))
c Both direct and order encoding.
c Var 'aux855' order represents '0' with '8564'
c Var 'aux855' direct represents '0' with '8564'
c Var 'aux855' order represents '1' with '8565'
-8564 8565 0
c Var 'aux855' direct represents '1' with '8566'
8564 -8565 8566 0
-8566 8565 0
-8566 -8564 0
c Var 'aux855' order represents '2' with '8567'
-8565 8567 0
c Var 'aux855' direct represents '2' with '8568'
8565 -8567 8568 0
-8568 8567 0
-8568 -8565 0
c Var 'aux855' direct represents '3' with '-8567'
8564 8566 8568 -8567 0
c Encoding variable: aux856 with domain: int(0..4) (representing constraint (aux851 + aux853))
c Both direct and order encoding.
c Var 'aux856' order represents '0' with '8569'
c Var 'aux856' direct represents '0' with '8569'
c Var 'aux856' order represents '1' with '8570'
-8569 8570 0
c Var 'aux856' direct represents '1' with '8571'
8569 -8570 8571 0
-8571 8570 0
-8571 -8569 0
c Var 'aux856' order represents '2' with '8572'
-8570 8572 0
c Var 'aux856' direct represents '2' with '8573'
8570 -8572 8573 0
-8573 8572 0
-8573 -8570 0
c Var 'aux856' order represents '3' with '8574'
-8572 8574 0
c Var 'aux856' direct represents '3' with '8575'
8572 -8574 8575 0
-8575 8574 0
-8575 -8572 0
c Var 'aux856' direct represents '4' with '-8574'
8569 8571 8573 8575 -8574 0
c Encoding variable: aux857 with domain: int(0..2) (representing constraint ((x_00003_00005=6) + (x_00005_00005=6)))
c Both direct and order encoding.
c Var 'aux857' order represents '0' with '8576'
c Var 'aux857' direct represents '0' with '8576'
c Var 'aux857' order represents '1' with '8577'
-8576 8577 0
c Var 'aux857' direct represents '1' with '8578'
8576 -8577 8578 0
-8578 8577 0
-8578 -8576 0
c Var 'aux857' direct represents '2' with '-8577'
8576 8578 -8577 0
c Encoding variable: aux858 with domain: int(0..2) (representing constraint ((x_00007_00005=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux858' order represents '0' with '8579'
c Var 'aux858' direct represents '0' with '8579'
c Var 'aux858' order represents '1' with '8580'
-8579 8580 0
c Var 'aux858' direct represents '1' with '8581'
8579 -8580 8581 0
-8581 8580 0
-8581 -8579 0
c Var 'aux858' direct represents '2' with '-8580'
8579 8581 -8580 0
c Encoding variable: aux859 with domain: int(0..2) (representing constraint ((x_00002_00005=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux859' order represents '0' with '8582'
c Var 'aux859' direct represents '0' with '8582'
c Var 'aux859' order represents '1' with '8583'
-8582 8583 0
c Var 'aux859' direct represents '1' with '8584'
8582 -8583 8584 0
-8584 8583 0
-8584 -8582 0
c Var 'aux859' direct represents '2' with '-8583'
8582 8584 -8583 0
c Encoding variable: aux860 with domain: int(0..2) (representing constraint ((x_00009_00005=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux860' order represents '0' with '8585'
c Var 'aux860' direct represents '0' with '8585'
c Var 'aux860' order represents '1' with '8586'
-8585 8586 0
c Var 'aux860' direct represents '1' with '8587'
8585 -8586 8587 0
-8587 8586 0
-8587 -8585 0
c Var 'aux860' direct represents '2' with '-8586'
8585 8587 -8586 0
c Encoding variable: aux861 with domain: int(0..3) (representing constraint ((x_00001_00005=6) + aux860))
c Both direct and order encoding.
c Var 'aux861' order represents '0' with '8588'
c Var 'aux861' direct represents '0' with '8588'
c Var 'aux861' order represents '1' with '8589'
-8588 8589 0
c Var 'aux861' direct represents '1' with '8590'
8588 -8589 8590 0
-8590 8589 0
-8590 -8588 0
c Var 'aux861' order represents '2' with '8591'
-8589 8591 0
c Var 'aux861' direct represents '2' with '8592'
8589 -8591 8592 0
-8592 8591 0
-8592 -8589 0
c Var 'aux861' direct represents '3' with '-8591'
8588 8590 8592 -8591 0
c Encoding variable: aux862 with domain: int(0..4) (representing constraint (aux857 + aux859))
c Both direct and order encoding.
c Var 'aux862' order represents '0' with '8593'
c Var 'aux862' direct represents '0' with '8593'
c Var 'aux862' order represents '1' with '8594'
-8593 8594 0
c Var 'aux862' direct represents '1' with '8595'
8593 -8594 8595 0
-8595 8594 0
-8595 -8593 0
c Var 'aux862' order represents '2' with '8596'
-8594 8596 0
c Var 'aux862' direct represents '2' with '8597'
8594 -8596 8597 0
-8597 8596 0
-8597 -8594 0
c Var 'aux862' order represents '3' with '8598'
-8596 8598 0
c Var 'aux862' direct represents '3' with '8599'
8596 -8598 8599 0
-8599 8598 0
-8599 -8596 0
c Var 'aux862' direct represents '4' with '-8598'
8593 8595 8597 8599 -8598 0
c Encoding variable: aux863 with domain: int(0..2) (representing constraint ((x_00003_00005=7) + (x_00005_00005=7)))
c Both direct and order encoding.
c Var 'aux863' order represents '0' with '8600'
c Var 'aux863' direct represents '0' with '8600'
c Var 'aux863' order represents '1' with '8601'
-8600 8601 0
c Var 'aux863' direct represents '1' with '8602'
8600 -8601 8602 0
-8602 8601 0
-8602 -8600 0
c Var 'aux863' direct represents '2' with '-8601'
8600 8602 -8601 0
c Encoding variable: aux864 with domain: int(0..2) (representing constraint ((x_00007_00005=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux864' order represents '0' with '8603'
c Var 'aux864' direct represents '0' with '8603'
c Var 'aux864' order represents '1' with '8604'
-8603 8604 0
c Var 'aux864' direct represents '1' with '8605'
8603 -8604 8605 0
-8605 8604 0
-8605 -8603 0
c Var 'aux864' direct represents '2' with '-8604'
8603 8605 -8604 0
c Encoding variable: aux865 with domain: int(0..2) (representing constraint ((x_00002_00005=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux865' order represents '0' with '8606'
c Var 'aux865' direct represents '0' with '8606'
c Var 'aux865' order represents '1' with '8607'
-8606 8607 0
c Var 'aux865' direct represents '1' with '8608'
8606 -8607 8608 0
-8608 8607 0
-8608 -8606 0
c Var 'aux865' direct represents '2' with '-8607'
8606 8608 -8607 0
c Encoding variable: aux866 with domain: int(0..2) (representing constraint ((x_00009_00005=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux866' order represents '0' with '8609'
c Var 'aux866' direct represents '0' with '8609'
c Var 'aux866' order represents '1' with '8610'
-8609 8610 0
c Var 'aux866' direct represents '1' with '8611'
8609 -8610 8611 0
-8611 8610 0
-8611 -8609 0
c Var 'aux866' direct represents '2' with '-8610'
8609 8611 -8610 0
c Encoding variable: aux867 with domain: int(0..3) (representing constraint ((x_00001_00005=7) + aux866))
c Both direct and order encoding.
c Var 'aux867' order represents '0' with '8612'
c Var 'aux867' direct represents '0' with '8612'
c Var 'aux867' order represents '1' with '8613'
-8612 8613 0
c Var 'aux867' direct represents '1' with '8614'
8612 -8613 8614 0
-8614 8613 0
-8614 -8612 0
c Var 'aux867' order represents '2' with '8615'
-8613 8615 0
c Var 'aux867' direct represents '2' with '8616'
8613 -8615 8616 0
-8616 8615 0
-8616 -8613 0
c Var 'aux867' direct represents '3' with '-8615'
8612 8614 8616 -8615 0
c Encoding variable: aux868 with domain: int(0..4) (representing constraint (aux863 + aux865))
c Both direct and order encoding.
c Var 'aux868' order represents '0' with '8617'
c Var 'aux868' direct represents '0' with '8617'
c Var 'aux868' order represents '1' with '8618'
-8617 8618 0
c Var 'aux868' direct represents '1' with '8619'
8617 -8618 8619 0
-8619 8618 0
-8619 -8617 0
c Var 'aux868' order represents '2' with '8620'
-8618 8620 0
c Var 'aux868' direct represents '2' with '8621'
8618 -8620 8621 0
-8621 8620 0
-8621 -8618 0
c Var 'aux868' order represents '3' with '8622'
-8620 8622 0
c Var 'aux868' direct represents '3' with '8623'
8620 -8622 8623 0
-8623 8622 0
-8623 -8620 0
c Var 'aux868' direct represents '4' with '-8622'
8617 8619 8621 8623 -8622 0
c Encoding variable: aux869 with domain: int(0..2) (representing constraint ((x_00003_00005=8) + (x_00005_00005=8)))
c Both direct and order encoding.
c Var 'aux869' order represents '0' with '8624'
c Var 'aux869' direct represents '0' with '8624'
c Var 'aux869' order represents '1' with '8625'
-8624 8625 0
c Var 'aux869' direct represents '1' with '8626'
8624 -8625 8626 0
-8626 8625 0
-8626 -8624 0
c Var 'aux869' direct represents '2' with '-8625'
8624 8626 -8625 0
c Encoding variable: aux870 with domain: int(0..2) (representing constraint ((x_00007_00005=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux870' order represents '0' with '8627'
c Var 'aux870' direct represents '0' with '8627'
c Var 'aux870' order represents '1' with '8628'
-8627 8628 0
c Var 'aux870' direct represents '1' with '8629'
8627 -8628 8629 0
-8629 8628 0
-8629 -8627 0
c Var 'aux870' direct represents '2' with '-8628'
8627 8629 -8628 0
c Encoding variable: aux871 with domain: int(0..2) (representing constraint ((x_00002_00005=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux871' order represents '0' with '8630'
c Var 'aux871' direct represents '0' with '8630'
c Var 'aux871' order represents '1' with '8631'
-8630 8631 0
c Var 'aux871' direct represents '1' with '8632'
8630 -8631 8632 0
-8632 8631 0
-8632 -8630 0
c Var 'aux871' direct represents '2' with '-8631'
8630 8632 -8631 0
c Encoding variable: aux872 with domain: int(0..2) (representing constraint ((x_00009_00005=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux872' order represents '0' with '8633'
c Var 'aux872' direct represents '0' with '8633'
c Var 'aux872' order represents '1' with '8634'
-8633 8634 0
c Var 'aux872' direct represents '1' with '8635'
8633 -8634 8635 0
-8635 8634 0
-8635 -8633 0
c Var 'aux872' direct represents '2' with '-8634'
8633 8635 -8634 0
c Encoding variable: aux873 with domain: int(0..3) (representing constraint ((x_00001_00005=8) + aux872))
c Both direct and order encoding.
c Var 'aux873' order represents '0' with '8636'
c Var 'aux873' direct represents '0' with '8636'
c Var 'aux873' order represents '1' with '8637'
-8636 8637 0
c Var 'aux873' direct represents '1' with '8638'
8636 -8637 8638 0
-8638 8637 0
-8638 -8636 0
c Var 'aux873' order represents '2' with '8639'
-8637 8639 0
c Var 'aux873' direct represents '2' with '8640'
8637 -8639 8640 0
-8640 8639 0
-8640 -8637 0
c Var 'aux873' direct represents '3' with '-8639'
8636 8638 8640 -8639 0
c Encoding variable: aux874 with domain: int(0..4) (representing constraint (aux869 + aux871))
c Both direct and order encoding.
c Var 'aux874' order represents '0' with '8641'
c Var 'aux874' direct represents '0' with '8641'
c Var 'aux874' order represents '1' with '8642'
-8641 8642 0
c Var 'aux874' direct represents '1' with '8643'
8641 -8642 8643 0
-8643 8642 0
-8643 -8641 0
c Var 'aux874' order represents '2' with '8644'
-8642 8644 0
c Var 'aux874' direct represents '2' with '8645'
8642 -8644 8645 0
-8645 8644 0
-8645 -8642 0
c Var 'aux874' order represents '3' with '8646'
-8644 8646 0
c Var 'aux874' direct represents '3' with '8647'
8644 -8646 8647 0
-8647 8646 0
-8647 -8644 0
c Var 'aux874' direct represents '4' with '-8646'
8641 8643 8645 8647 -8646 0
c Encoding variable: aux875 with domain: int(0..2) (representing constraint ((x_00003_00005=9) + (x_00005_00005=9)))
c Both direct and order encoding.
c Var 'aux875' order represents '0' with '8648'
c Var 'aux875' direct represents '0' with '8648'
c Var 'aux875' order represents '1' with '8649'
-8648 8649 0
c Var 'aux875' direct represents '1' with '8650'
8648 -8649 8650 0
-8650 8649 0
-8650 -8648 0
c Var 'aux875' direct represents '2' with '-8649'
8648 8650 -8649 0
c Encoding variable: aux876 with domain: int(0..2) (representing constraint ((x_00007_00005=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux876' order represents '0' with '8651'
c Var 'aux876' direct represents '0' with '8651'
c Var 'aux876' order represents '1' with '8652'
-8651 8652 0
c Var 'aux876' direct represents '1' with '8653'
8651 -8652 8653 0
-8653 8652 0
-8653 -8651 0
c Var 'aux876' direct represents '2' with '-8652'
8651 8653 -8652 0
c Encoding variable: aux877 with domain: int(0..2) (representing constraint ((x_00002_00005=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux877' order represents '0' with '8654'
c Var 'aux877' direct represents '0' with '8654'
c Var 'aux877' order represents '1' with '8655'
-8654 8655 0
c Var 'aux877' direct represents '1' with '8656'
8654 -8655 8656 0
-8656 8655 0
-8656 -8654 0
c Var 'aux877' direct represents '2' with '-8655'
8654 8656 -8655 0
c Encoding variable: aux878 with domain: int(0..2) (representing constraint ((x_00009_00005=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux878' order represents '0' with '8657'
c Var 'aux878' direct represents '0' with '8657'
c Var 'aux878' order represents '1' with '8658'
-8657 8658 0
c Var 'aux878' direct represents '1' with '8659'
8657 -8658 8659 0
-8659 8658 0
-8659 -8657 0
c Var 'aux878' direct represents '2' with '-8658'
8657 8659 -8658 0
c Encoding variable: aux879 with domain: int(0..3) (representing constraint ((x_00001_00005=9) + aux878))
c Both direct and order encoding.
c Var 'aux879' order represents '0' with '8660'
c Var 'aux879' direct represents '0' with '8660'
c Var 'aux879' order represents '1' with '8661'
-8660 8661 0
c Var 'aux879' direct represents '1' with '8662'
8660 -8661 8662 0
-8662 8661 0
-8662 -8660 0
c Var 'aux879' order represents '2' with '8663'
-8661 8663 0
c Var 'aux879' direct represents '2' with '8664'
8661 -8663 8664 0
-8664 8663 0
-8664 -8661 0
c Var 'aux879' direct represents '3' with '-8663'
8660 8662 8664 -8663 0
c Encoding variable: aux880 with domain: int(0..4) (representing constraint (aux875 + aux877))
c Both direct and order encoding.
c Var 'aux880' order represents '0' with '8665'
c Var 'aux880' direct represents '0' with '8665'
c Var 'aux880' order represents '1' with '8666'
-8665 8666 0
c Var 'aux880' direct represents '1' with '8667'
8665 -8666 8667 0
-8667 8666 0
-8667 -8665 0
c Var 'aux880' order represents '2' with '8668'
-8666 8668 0
c Var 'aux880' direct represents '2' with '8669'
8666 -8668 8669 0
-8669 8668 0
-8669 -8666 0
c Var 'aux880' order represents '3' with '8670'
-8668 8670 0
c Var 'aux880' direct represents '3' with '8671'
8668 -8670 8671 0
-8671 8670 0
-8671 -8668 0
c Var 'aux880' direct represents '4' with '-8670'
8665 8667 8669 8671 -8670 0
c Encoding variable: aux881 with domain: int(0..2) (representing constraint ((x_00003_00006=1) + (x_00005_00006=1)))
c Both direct and order encoding.
c Var 'aux881' order represents '0' with '8672'
c Var 'aux881' direct represents '0' with '8672'
c Var 'aux881' order represents '1' with '8673'
-8672 8673 0
c Var 'aux881' direct represents '1' with '8674'
8672 -8673 8674 0
-8674 8673 0
-8674 -8672 0
c Var 'aux881' direct represents '2' with '-8673'
8672 8674 -8673 0
c Encoding variable: aux882 with domain: int(0..2) (representing constraint ((x_00007_00006=1) + (x_00008_00006=1)))
c Both direct and order encoding.
c Var 'aux882' order represents '0' with '8675'
c Var 'aux882' direct represents '0' with '8675'
c Var 'aux882' order represents '1' with '8676'
-8675 8676 0
c Var 'aux882' direct represents '1' with '8677'
8675 -8676 8677 0
-8677 8676 0
-8677 -8675 0
c Var 'aux882' direct represents '2' with '-8676'
8675 8677 -8676 0
c Encoding variable: aux883 with domain: int(0..2) (representing constraint ((x_00002_00006=1) + (x_00006_00006=1)))
c Both direct and order encoding.
c Var 'aux883' order represents '0' with '8678'
c Var 'aux883' direct represents '0' with '8678'
c Var 'aux883' order represents '1' with '8679'
-8678 8679 0
c Var 'aux883' direct represents '1' with '8680'
8678 -8679 8680 0
-8680 8679 0
-8680 -8678 0
c Var 'aux883' direct represents '2' with '-8679'
8678 8680 -8679 0
c Encoding variable: aux884 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00004_00006=1)))
c Both direct and order encoding.
c Var 'aux884' order represents '0' with '8681'
c Var 'aux884' direct represents '0' with '8681'
c Var 'aux884' order represents '1' with '8682'
-8681 8682 0
c Var 'aux884' direct represents '1' with '8683'
8681 -8682 8683 0
-8683 8682 0
-8683 -8681 0
c Var 'aux884' direct represents '2' with '-8682'
8681 8683 -8682 0
c Encoding variable: aux885 with domain: int(0..3) (representing constraint ((x_00001_00006=1) + aux884))
c Both direct and order encoding.
c Var 'aux885' order represents '0' with '8684'
c Var 'aux885' direct represents '0' with '8684'
c Var 'aux885' order represents '1' with '8685'
-8684 8685 0
c Var 'aux885' direct represents '1' with '8686'
8684 -8685 8686 0
-8686 8685 0
-8686 -8684 0
c Var 'aux885' order represents '2' with '8687'
-8685 8687 0
c Var 'aux885' direct represents '2' with '8688'
8685 -8687 8688 0
-8688 8687 0
-8688 -8685 0
c Var 'aux885' direct represents '3' with '-8687'
8684 8686 8688 -8687 0
c Encoding variable: aux886 with domain: int(0..4) (representing constraint (aux881 + aux883))
c Both direct and order encoding.
c Var 'aux886' order represents '0' with '8689'
c Var 'aux886' direct represents '0' with '8689'
c Var 'aux886' order represents '1' with '8690'
-8689 8690 0
c Var 'aux886' direct represents '1' with '8691'
8689 -8690 8691 0
-8691 8690 0
-8691 -8689 0
c Var 'aux886' order represents '2' with '8692'
-8690 8692 0
c Var 'aux886' direct represents '2' with '8693'
8690 -8692 8693 0
-8693 8692 0
-8693 -8690 0
c Var 'aux886' order represents '3' with '8694'
-8692 8694 0
c Var 'aux886' direct represents '3' with '8695'
8692 -8694 8695 0
-8695 8694 0
-8695 -8692 0
c Var 'aux886' direct represents '4' with '-8694'
8689 8691 8693 8695 -8694 0
c Encoding variable: aux887 with domain: int(0..2) (representing constraint ((x_00003_00006=2) + (x_00005_00006=2)))
c Both direct and order encoding.
c Var 'aux887' order represents '0' with '8696'
c Var 'aux887' direct represents '0' with '8696'
c Var 'aux887' order represents '1' with '8697'
-8696 8697 0
c Var 'aux887' direct represents '1' with '8698'
8696 -8697 8698 0
-8698 8697 0
-8698 -8696 0
c Var 'aux887' direct represents '2' with '-8697'
8696 8698 -8697 0
c Encoding variable: aux888 with domain: int(0..2) (representing constraint ((x_00007_00006=2) + (x_00008_00006=2)))
c Both direct and order encoding.
c Var 'aux888' order represents '0' with '8699'
c Var 'aux888' direct represents '0' with '8699'
c Var 'aux888' order represents '1' with '8700'
-8699 8700 0
c Var 'aux888' direct represents '1' with '8701'
8699 -8700 8701 0
-8701 8700 0
-8701 -8699 0
c Var 'aux888' direct represents '2' with '-8700'
8699 8701 -8700 0
c Encoding variable: aux889 with domain: int(0..2) (representing constraint ((x_00002_00006=2) + (x_00006_00006=2)))
c Both direct and order encoding.
c Var 'aux889' order represents '0' with '8702'
c Var 'aux889' direct represents '0' with '8702'
c Var 'aux889' order represents '1' with '8703'
-8702 8703 0
c Var 'aux889' direct represents '1' with '8704'
8702 -8703 8704 0
-8704 8703 0
-8704 -8702 0
c Var 'aux889' direct represents '2' with '-8703'
8702 8704 -8703 0
c Encoding variable: aux890 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00004_00006=2)))
c Both direct and order encoding.
c Var 'aux890' order represents '0' with '8705'
c Var 'aux890' direct represents '0' with '8705'
c Var 'aux890' order represents '1' with '8706'
-8705 8706 0
c Var 'aux890' direct represents '1' with '8707'
8705 -8706 8707 0
-8707 8706 0
-8707 -8705 0
c Var 'aux890' direct represents '2' with '-8706'
8705 8707 -8706 0
c Encoding variable: aux891 with domain: int(0..3) (representing constraint ((x_00001_00006=2) + aux890))
c Both direct and order encoding.
c Var 'aux891' order represents '0' with '8708'
c Var 'aux891' direct represents '0' with '8708'
c Var 'aux891' order represents '1' with '8709'
-8708 8709 0
c Var 'aux891' direct represents '1' with '8710'
8708 -8709 8710 0
-8710 8709 0
-8710 -8708 0
c Var 'aux891' order represents '2' with '8711'
-8709 8711 0
c Var 'aux891' direct represents '2' with '8712'
8709 -8711 8712 0
-8712 8711 0
-8712 -8709 0
c Var 'aux891' direct represents '3' with '-8711'
8708 8710 8712 -8711 0
c Encoding variable: aux892 with domain: int(0..4) (representing constraint (aux887 + aux889))
c Both direct and order encoding.
c Var 'aux892' order represents '0' with '8713'
c Var 'aux892' direct represents '0' with '8713'
c Var 'aux892' order represents '1' with '8714'
-8713 8714 0
c Var 'aux892' direct represents '1' with '8715'
8713 -8714 8715 0
-8715 8714 0
-8715 -8713 0
c Var 'aux892' order represents '2' with '8716'
-8714 8716 0
c Var 'aux892' direct represents '2' with '8717'
8714 -8716 8717 0
-8717 8716 0
-8717 -8714 0
c Var 'aux892' order represents '3' with '8718'
-8716 8718 0
c Var 'aux892' direct represents '3' with '8719'
8716 -8718 8719 0
-8719 8718 0
-8719 -8716 0
c Var 'aux892' direct represents '4' with '-8718'
8713 8715 8717 8719 -8718 0
c Encoding variable: aux893 with domain: int(0..2) (representing constraint ((x_00003_00006=3) + (x_00005_00006=3)))
c Both direct and order encoding.
c Var 'aux893' order represents '0' with '8720'
c Var 'aux893' direct represents '0' with '8720'
c Var 'aux893' order represents '1' with '8721'
-8720 8721 0
c Var 'aux893' direct represents '1' with '8722'
8720 -8721 8722 0
-8722 8721 0
-8722 -8720 0
c Var 'aux893' direct represents '2' with '-8721'
8720 8722 -8721 0
c Encoding variable: aux894 with domain: int(0..2) (representing constraint ((x_00007_00006=3) + (x_00008_00006=3)))
c Both direct and order encoding.
c Var 'aux894' order represents '0' with '8723'
c Var 'aux894' direct represents '0' with '8723'
c Var 'aux894' order represents '1' with '8724'
-8723 8724 0
c Var 'aux894' direct represents '1' with '8725'
8723 -8724 8725 0
-8725 8724 0
-8725 -8723 0
c Var 'aux894' direct represents '2' with '-8724'
8723 8725 -8724 0
c Encoding variable: aux895 with domain: int(0..2) (representing constraint ((x_00002_00006=3) + (x_00006_00006=3)))
c Both direct and order encoding.
c Var 'aux895' order represents '0' with '8726'
c Var 'aux895' direct represents '0' with '8726'
c Var 'aux895' order represents '1' with '8727'
-8726 8727 0
c Var 'aux895' direct represents '1' with '8728'
8726 -8727 8728 0
-8728 8727 0
-8728 -8726 0
c Var 'aux895' direct represents '2' with '-8727'
8726 8728 -8727 0
c Encoding variable: aux896 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00004_00006=3)))
c Both direct and order encoding.
c Var 'aux896' order represents '0' with '8729'
c Var 'aux896' direct represents '0' with '8729'
c Var 'aux896' order represents '1' with '8730'
-8729 8730 0
c Var 'aux896' direct represents '1' with '8731'
8729 -8730 8731 0
-8731 8730 0
-8731 -8729 0
c Var 'aux896' direct represents '2' with '-8730'
8729 8731 -8730 0
c Encoding variable: aux897 with domain: int(0..3) (representing constraint ((x_00001_00006=3) + aux896))
c Both direct and order encoding.
c Var 'aux897' order represents '0' with '8732'
c Var 'aux897' direct represents '0' with '8732'
c Var 'aux897' order represents '1' with '8733'
-8732 8733 0
c Var 'aux897' direct represents '1' with '8734'
8732 -8733 8734 0
-8734 8733 0
-8734 -8732 0
c Var 'aux897' order represents '2' with '8735'
-8733 8735 0
c Var 'aux897' direct represents '2' with '8736'
8733 -8735 8736 0
-8736 8735 0
-8736 -8733 0
c Var 'aux897' direct represents '3' with '-8735'
8732 8734 8736 -8735 0
c Encoding variable: aux898 with domain: int(0..4) (representing constraint (aux893 + aux895))
c Both direct and order encoding.
c Var 'aux898' order represents '0' with '8737'
c Var 'aux898' direct represents '0' with '8737'
c Var 'aux898' order represents '1' with '8738'
-8737 8738 0
c Var 'aux898' direct represents '1' with '8739'
8737 -8738 8739 0
-8739 8738 0
-8739 -8737 0
c Var 'aux898' order represents '2' with '8740'
-8738 8740 0
c Var 'aux898' direct represents '2' with '8741'
8738 -8740 8741 0
-8741 8740 0
-8741 -8738 0
c Var 'aux898' order represents '3' with '8742'
-8740 8742 0
c Var 'aux898' direct represents '3' with '8743'
8740 -8742 8743 0
-8743 8742 0
-8743 -8740 0
c Var 'aux898' direct represents '4' with '-8742'
8737 8739 8741 8743 -8742 0
c Encoding variable: aux899 with domain: int(0..2) (representing constraint ((x_00003_00006=4) + (x_00005_00006=4)))
c Both direct and order encoding.
c Var 'aux899' order represents '0' with '8744'
c Var 'aux899' direct represents '0' with '8744'
c Var 'aux899' order represents '1' with '8745'
-8744 8745 0
c Var 'aux899' direct represents '1' with '8746'
8744 -8745 8746 0
-8746 8745 0
-8746 -8744 0
c Var 'aux899' direct represents '2' with '-8745'
8744 8746 -8745 0
c Encoding variable: aux900 with domain: int(0..2) (representing constraint ((x_00007_00006=4) + (x_00008_00006=4)))
c Both direct and order encoding.
c Var 'aux900' order represents '0' with '8747'
c Var 'aux900' direct represents '0' with '8747'
c Var 'aux900' order represents '1' with '8748'
-8747 8748 0
c Var 'aux900' direct represents '1' with '8749'
8747 -8748 8749 0
-8749 8748 0
-8749 -8747 0
c Var 'aux900' direct represents '2' with '-8748'
8747 8749 -8748 0
c Encoding variable: aux901 with domain: int(0..2) (representing constraint ((x_00002_00006=4) + (x_00006_00006=4)))
c Both direct and order encoding.
c Var 'aux901' order represents '0' with '8750'
c Var 'aux901' direct represents '0' with '8750'
c Var 'aux901' order represents '1' with '8751'
-8750 8751 0
c Var 'aux901' direct represents '1' with '8752'
8750 -8751 8752 0
-8752 8751 0
-8752 -8750 0
c Var 'aux901' direct represents '2' with '-8751'
8750 8752 -8751 0
c Encoding variable: aux902 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00004_00006=4)))
c Both direct and order encoding.
c Var 'aux902' order represents '0' with '8753'
c Var 'aux902' direct represents '0' with '8753'
c Var 'aux902' order represents '1' with '8754'
-8753 8754 0
c Var 'aux902' direct represents '1' with '8755'
8753 -8754 8755 0
-8755 8754 0
-8755 -8753 0
c Var 'aux902' direct represents '2' with '-8754'
8753 8755 -8754 0
c Encoding variable: aux903 with domain: int(0..3) (representing constraint ((x_00001_00006=4) + aux902))
c Both direct and order encoding.
c Var 'aux903' order represents '0' with '8756'
c Var 'aux903' direct represents '0' with '8756'
c Var 'aux903' order represents '1' with '8757'
-8756 8757 0
c Var 'aux903' direct represents '1' with '8758'
8756 -8757 8758 0
-8758 8757 0
-8758 -8756 0
c Var 'aux903' order represents '2' with '8759'
-8757 8759 0
c Var 'aux903' direct represents '2' with '8760'
8757 -8759 8760 0
-8760 8759 0
-8760 -8757 0
c Var 'aux903' direct represents '3' with '-8759'
8756 8758 8760 -8759 0
c Encoding variable: aux904 with domain: int(0..4) (representing constraint (aux899 + aux901))
c Both direct and order encoding.
c Var 'aux904' order represents '0' with '8761'
c Var 'aux904' direct represents '0' with '8761'
c Var 'aux904' order represents '1' with '8762'
-8761 8762 0
c Var 'aux904' direct represents '1' with '8763'
8761 -8762 8763 0
-8763 8762 0
-8763 -8761 0
c Var 'aux904' order represents '2' with '8764'
-8762 8764 0
c Var 'aux904' direct represents '2' with '8765'
8762 -8764 8765 0
-8765 8764 0
-8765 -8762 0
c Var 'aux904' order represents '3' with '8766'
-8764 8766 0
c Var 'aux904' direct represents '3' with '8767'
8764 -8766 8767 0
-8767 8766 0
-8767 -8764 0
c Var 'aux904' direct represents '4' with '-8766'
8761 8763 8765 8767 -8766 0
c Encoding variable: aux905 with domain: int(0..2) (representing constraint ((x_00003_00006=5) + (x_00005_00006=5)))
c Both direct and order encoding.
c Var 'aux905' order represents '0' with '8768'
c Var 'aux905' direct represents '0' with '8768'
c Var 'aux905' order represents '1' with '8769'
-8768 8769 0
c Var 'aux905' direct represents '1' with '8770'
8768 -8769 8770 0
-8770 8769 0
-8770 -8768 0
c Var 'aux905' direct represents '2' with '-8769'
8768 8770 -8769 0
c Encoding variable: aux906 with domain: int(0..2) (representing constraint ((x_00007_00006=5) + (x_00008_00006=5)))
c Both direct and order encoding.
c Var 'aux906' order represents '0' with '8771'
c Var 'aux906' direct represents '0' with '8771'
c Var 'aux906' order represents '1' with '8772'
-8771 8772 0
c Var 'aux906' direct represents '1' with '8773'
8771 -8772 8773 0
-8773 8772 0
-8773 -8771 0
c Var 'aux906' direct represents '2' with '-8772'
8771 8773 -8772 0
c Encoding variable: aux907 with domain: int(0..2) (representing constraint ((x_00002_00006=5) + (x_00006_00006=5)))
c Both direct and order encoding.
c Var 'aux907' order represents '0' with '8774'
c Var 'aux907' direct represents '0' with '8774'
c Var 'aux907' order represents '1' with '8775'
-8774 8775 0
c Var 'aux907' direct represents '1' with '8776'
8774 -8775 8776 0
-8776 8775 0
-8776 -8774 0
c Var 'aux907' direct represents '2' with '-8775'
8774 8776 -8775 0
c Encoding variable: aux908 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00004_00006=5)))
c Both direct and order encoding.
c Var 'aux908' order represents '0' with '8777'
c Var 'aux908' direct represents '0' with '8777'
c Var 'aux908' order represents '1' with '8778'
-8777 8778 0
c Var 'aux908' direct represents '1' with '8779'
8777 -8778 8779 0
-8779 8778 0
-8779 -8777 0
c Var 'aux908' direct represents '2' with '-8778'
8777 8779 -8778 0
c Encoding variable: aux909 with domain: int(0..3) (representing constraint ((x_00001_00006=5) + aux908))
c Both direct and order encoding.
c Var 'aux909' order represents '0' with '8780'
c Var 'aux909' direct represents '0' with '8780'
c Var 'aux909' order represents '1' with '8781'
-8780 8781 0
c Var 'aux909' direct represents '1' with '8782'
8780 -8781 8782 0
-8782 8781 0
-8782 -8780 0
c Var 'aux909' order represents '2' with '8783'
-8781 8783 0
c Var 'aux909' direct represents '2' with '8784'
8781 -8783 8784 0
-8784 8783 0
-8784 -8781 0
c Var 'aux909' direct represents '3' with '-8783'
8780 8782 8784 -8783 0
c Encoding variable: aux910 with domain: int(0..4) (representing constraint (aux905 + aux907))
c Both direct and order encoding.
c Var 'aux910' order represents '0' with '8785'
c Var 'aux910' direct represents '0' with '8785'
c Var 'aux910' order represents '1' with '8786'
-8785 8786 0
c Var 'aux910' direct represents '1' with '8787'
8785 -8786 8787 0
-8787 8786 0
-8787 -8785 0
c Var 'aux910' order represents '2' with '8788'
-8786 8788 0
c Var 'aux910' direct represents '2' with '8789'
8786 -8788 8789 0
-8789 8788 0
-8789 -8786 0
c Var 'aux910' order represents '3' with '8790'
-8788 8790 0
c Var 'aux910' direct represents '3' with '8791'
8788 -8790 8791 0
-8791 8790 0
-8791 -8788 0
c Var 'aux910' direct represents '4' with '-8790'
8785 8787 8789 8791 -8790 0
c Encoding variable: aux911 with domain: int(0..2) (representing constraint ((x_00003_00006=6) + (x_00005_00006=6)))
c Both direct and order encoding.
c Var 'aux911' order represents '0' with '8792'
c Var 'aux911' direct represents '0' with '8792'
c Var 'aux911' order represents '1' with '8793'
-8792 8793 0
c Var 'aux911' direct represents '1' with '8794'
8792 -8793 8794 0
-8794 8793 0
-8794 -8792 0
c Var 'aux911' direct represents '2' with '-8793'
8792 8794 -8793 0
c Encoding variable: aux912 with domain: int(0..2) (representing constraint ((x_00007_00006=6) + (x_00008_00006=6)))
c Both direct and order encoding.
c Var 'aux912' order represents '0' with '8795'
c Var 'aux912' direct represents '0' with '8795'
c Var 'aux912' order represents '1' with '8796'
-8795 8796 0
c Var 'aux912' direct represents '1' with '8797'
8795 -8796 8797 0
-8797 8796 0
-8797 -8795 0
c Var 'aux912' direct represents '2' with '-8796'
8795 8797 -8796 0
c Encoding variable: aux913 with domain: int(0..2) (representing constraint ((x_00002_00006=6) + (x_00006_00006=6)))
c Both direct and order encoding.
c Var 'aux913' order represents '0' with '8798'
c Var 'aux913' direct represents '0' with '8798'
c Var 'aux913' order represents '1' with '8799'
-8798 8799 0
c Var 'aux913' direct represents '1' with '8800'
8798 -8799 8800 0
-8800 8799 0
-8800 -8798 0
c Var 'aux913' direct represents '2' with '-8799'
8798 8800 -8799 0
c Encoding variable: aux914 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00004_00006=6)))
c Both direct and order encoding.
c Var 'aux914' order represents '0' with '8801'
c Var 'aux914' direct represents '0' with '8801'
c Var 'aux914' order represents '1' with '8802'
-8801 8802 0
c Var 'aux914' direct represents '1' with '8803'
8801 -8802 8803 0
-8803 8802 0
-8803 -8801 0
c Var 'aux914' direct represents '2' with '-8802'
8801 8803 -8802 0
c Encoding variable: aux915 with domain: int(0..3) (representing constraint ((x_00001_00006=6) + aux914))
c Both direct and order encoding.
c Var 'aux915' order represents '0' with '8804'
c Var 'aux915' direct represents '0' with '8804'
c Var 'aux915' order represents '1' with '8805'
-8804 8805 0
c Var 'aux915' direct represents '1' with '8806'
8804 -8805 8806 0
-8806 8805 0
-8806 -8804 0
c Var 'aux915' order represents '2' with '8807'
-8805 8807 0
c Var 'aux915' direct represents '2' with '8808'
8805 -8807 8808 0
-8808 8807 0
-8808 -8805 0
c Var 'aux915' direct represents '3' with '-8807'
8804 8806 8808 -8807 0
c Encoding variable: aux916 with domain: int(0..4) (representing constraint (aux911 + aux913))
c Both direct and order encoding.
c Var 'aux916' order represents '0' with '8809'
c Var 'aux916' direct represents '0' with '8809'
c Var 'aux916' order represents '1' with '8810'
-8809 8810 0
c Var 'aux916' direct represents '1' with '8811'
8809 -8810 8811 0
-8811 8810 0
-8811 -8809 0
c Var 'aux916' order represents '2' with '8812'
-8810 8812 0
c Var 'aux916' direct represents '2' with '8813'
8810 -8812 8813 0
-8813 8812 0
-8813 -8810 0
c Var 'aux916' order represents '3' with '8814'
-8812 8814 0
c Var 'aux916' direct represents '3' with '8815'
8812 -8814 8815 0
-8815 8814 0
-8815 -8812 0
c Var 'aux916' direct represents '4' with '-8814'
8809 8811 8813 8815 -8814 0
c Encoding variable: aux917 with domain: int(0..2) (representing constraint ((x_00003_00006=7) + (x_00005_00006=7)))
c Both direct and order encoding.
c Var 'aux917' order represents '0' with '8816'
c Var 'aux917' direct represents '0' with '8816'
c Var 'aux917' order represents '1' with '8817'
-8816 8817 0
c Var 'aux917' direct represents '1' with '8818'
8816 -8817 8818 0
-8818 8817 0
-8818 -8816 0
c Var 'aux917' direct represents '2' with '-8817'
8816 8818 -8817 0
c Encoding variable: aux918 with domain: int(0..2) (representing constraint ((x_00007_00006=7) + (x_00008_00006=7)))
c Both direct and order encoding.
c Var 'aux918' order represents '0' with '8819'
c Var 'aux918' direct represents '0' with '8819'
c Var 'aux918' order represents '1' with '8820'
-8819 8820 0
c Var 'aux918' direct represents '1' with '8821'
8819 -8820 8821 0
-8821 8820 0
-8821 -8819 0
c Var 'aux918' direct represents '2' with '-8820'
8819 8821 -8820 0
c Encoding variable: aux919 with domain: int(0..2) (representing constraint ((x_00002_00006=7) + (x_00006_00006=7)))
c Both direct and order encoding.
c Var 'aux919' order represents '0' with '8822'
c Var 'aux919' direct represents '0' with '8822'
c Var 'aux919' order represents '1' with '8823'
-8822 8823 0
c Var 'aux919' direct represents '1' with '8824'
8822 -8823 8824 0
-8824 8823 0
-8824 -8822 0
c Var 'aux919' direct represents '2' with '-8823'
8822 8824 -8823 0
c Encoding variable: aux920 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00004_00006=7)))
c Both direct and order encoding.
c Var 'aux920' order represents '0' with '8825'
c Var 'aux920' direct represents '0' with '8825'
c Var 'aux920' order represents '1' with '8826'
-8825 8826 0
c Var 'aux920' direct represents '1' with '8827'
8825 -8826 8827 0
-8827 8826 0
-8827 -8825 0
c Var 'aux920' direct represents '2' with '-8826'
8825 8827 -8826 0
c Encoding variable: aux921 with domain: int(0..3) (representing constraint ((x_00001_00006=7) + aux920))
c Both direct and order encoding.
c Var 'aux921' order represents '0' with '8828'
c Var 'aux921' direct represents '0' with '8828'
c Var 'aux921' order represents '1' with '8829'
-8828 8829 0
c Var 'aux921' direct represents '1' with '8830'
8828 -8829 8830 0
-8830 8829 0
-8830 -8828 0
c Var 'aux921' order represents '2' with '8831'
-8829 8831 0
c Var 'aux921' direct represents '2' with '8832'
8829 -8831 8832 0
-8832 8831 0
-8832 -8829 0
c Var 'aux921' direct represents '3' with '-8831'
8828 8830 8832 -8831 0
c Encoding variable: aux922 with domain: int(0..4) (representing constraint (aux917 + aux919))
c Both direct and order encoding.
c Var 'aux922' order represents '0' with '8833'
c Var 'aux922' direct represents '0' with '8833'
c Var 'aux922' order represents '1' with '8834'
-8833 8834 0
c Var 'aux922' direct represents '1' with '8835'
8833 -8834 8835 0
-8835 8834 0
-8835 -8833 0
c Var 'aux922' order represents '2' with '8836'
-8834 8836 0
c Var 'aux922' direct represents '2' with '8837'
8834 -8836 8837 0
-8837 8836 0
-8837 -8834 0
c Var 'aux922' order represents '3' with '8838'
-8836 8838 0
c Var 'aux922' direct represents '3' with '8839'
8836 -8838 8839 0
-8839 8838 0
-8839 -8836 0
c Var 'aux922' direct represents '4' with '-8838'
8833 8835 8837 8839 -8838 0
c Encoding variable: aux923 with domain: int(0..2) (representing constraint ((x_00003_00006=8) + (x_00005_00006=8)))
c Both direct and order encoding.
c Var 'aux923' order represents '0' with '8840'
c Var 'aux923' direct represents '0' with '8840'
c Var 'aux923' order represents '1' with '8841'
-8840 8841 0
c Var 'aux923' direct represents '1' with '8842'
8840 -8841 8842 0
-8842 8841 0
-8842 -8840 0
c Var 'aux923' direct represents '2' with '-8841'
8840 8842 -8841 0
c Encoding variable: aux924 with domain: int(0..2) (representing constraint ((x_00007_00006=8) + (x_00008_00006=8)))
c Both direct and order encoding.
c Var 'aux924' order represents '0' with '8843'
c Var 'aux924' direct represents '0' with '8843'
c Var 'aux924' order represents '1' with '8844'
-8843 8844 0
c Var 'aux924' direct represents '1' with '8845'
8843 -8844 8845 0
-8845 8844 0
-8845 -8843 0
c Var 'aux924' direct represents '2' with '-8844'
8843 8845 -8844 0
c Encoding variable: aux925 with domain: int(0..2) (representing constraint ((x_00002_00006=8) + (x_00006_00006=8)))
c Both direct and order encoding.
c Var 'aux925' order represents '0' with '8846'
c Var 'aux925' direct represents '0' with '8846'
c Var 'aux925' order represents '1' with '8847'
-8846 8847 0
c Var 'aux925' direct represents '1' with '8848'
8846 -8847 8848 0
-8848 8847 0
-8848 -8846 0
c Var 'aux925' direct represents '2' with '-8847'
8846 8848 -8847 0
c Encoding variable: aux926 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00004_00006=8)))
c Both direct and order encoding.
c Var 'aux926' order represents '0' with '8849'
c Var 'aux926' direct represents '0' with '8849'
c Var 'aux926' order represents '1' with '8850'
-8849 8850 0
c Var 'aux926' direct represents '1' with '8851'
8849 -8850 8851 0
-8851 8850 0
-8851 -8849 0
c Var 'aux926' direct represents '2' with '-8850'
8849 8851 -8850 0
c Encoding variable: aux927 with domain: int(0..3) (representing constraint ((x_00001_00006=8) + aux926))
c Both direct and order encoding.
c Var 'aux927' order represents '0' with '8852'
c Var 'aux927' direct represents '0' with '8852'
c Var 'aux927' order represents '1' with '8853'
-8852 8853 0
c Var 'aux927' direct represents '1' with '8854'
8852 -8853 8854 0
-8854 8853 0
-8854 -8852 0
c Var 'aux927' order represents '2' with '8855'
-8853 8855 0
c Var 'aux927' direct represents '2' with '8856'
8853 -8855 8856 0
-8856 8855 0
-8856 -8853 0
c Var 'aux927' direct represents '3' with '-8855'
8852 8854 8856 -8855 0
c Encoding variable: aux928 with domain: int(0..4) (representing constraint (aux923 + aux925))
c Both direct and order encoding.
c Var 'aux928' order represents '0' with '8857'
c Var 'aux928' direct represents '0' with '8857'
c Var 'aux928' order represents '1' with '8858'
-8857 8858 0
c Var 'aux928' direct represents '1' with '8859'
8857 -8858 8859 0
-8859 8858 0
-8859 -8857 0
c Var 'aux928' order represents '2' with '8860'
-8858 8860 0
c Var 'aux928' direct represents '2' with '8861'
8858 -8860 8861 0
-8861 8860 0
-8861 -8858 0
c Var 'aux928' order represents '3' with '8862'
-8860 8862 0
c Var 'aux928' direct represents '3' with '8863'
8860 -8862 8863 0
-8863 8862 0
-8863 -8860 0
c Var 'aux928' direct represents '4' with '-8862'
8857 8859 8861 8863 -8862 0
c Encoding variable: aux929 with domain: int(0..2) (representing constraint ((x_00003_00006=9) + (x_00005_00006=9)))
c Both direct and order encoding.
c Var 'aux929' order represents '0' with '8864'
c Var 'aux929' direct represents '0' with '8864'
c Var 'aux929' order represents '1' with '8865'
-8864 8865 0
c Var 'aux929' direct represents '1' with '8866'
8864 -8865 8866 0
-8866 8865 0
-8866 -8864 0
c Var 'aux929' direct represents '2' with '-8865'
8864 8866 -8865 0
c Encoding variable: aux930 with domain: int(0..2) (representing constraint ((x_00007_00006=9) + (x_00008_00006=9)))
c Both direct and order encoding.
c Var 'aux930' order represents '0' with '8867'
c Var 'aux930' direct represents '0' with '8867'
c Var 'aux930' order represents '1' with '8868'
-8867 8868 0
c Var 'aux930' direct represents '1' with '8869'
8867 -8868 8869 0
-8869 8868 0
-8869 -8867 0
c Var 'aux930' direct represents '2' with '-8868'
8867 8869 -8868 0
c Encoding variable: aux931 with domain: int(0..2) (representing constraint ((x_00002_00006=9) + (x_00006_00006=9)))
c Both direct and order encoding.
c Var 'aux931' order represents '0' with '8870'
c Var 'aux931' direct represents '0' with '8870'
c Var 'aux931' order represents '1' with '8871'
-8870 8871 0
c Var 'aux931' direct represents '1' with '8872'
8870 -8871 8872 0
-8872 8871 0
-8872 -8870 0
c Var 'aux931' direct represents '2' with '-8871'
8870 8872 -8871 0
c Encoding variable: aux932 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00004_00006=9)))
c Both direct and order encoding.
c Var 'aux932' order represents '0' with '8873'
c Var 'aux932' direct represents '0' with '8873'
c Var 'aux932' order represents '1' with '8874'
-8873 8874 0
c Var 'aux932' direct represents '1' with '8875'
8873 -8874 8875 0
-8875 8874 0
-8875 -8873 0
c Var 'aux932' direct represents '2' with '-8874'
8873 8875 -8874 0
c Encoding variable: aux933 with domain: int(0..3) (representing constraint ((x_00001_00006=9) + aux932))
c Both direct and order encoding.
c Var 'aux933' order represents '0' with '8876'
c Var 'aux933' direct represents '0' with '8876'
c Var 'aux933' order represents '1' with '8877'
-8876 8877 0
c Var 'aux933' direct represents '1' with '8878'
8876 -8877 8878 0
-8878 8877 0
-8878 -8876 0
c Var 'aux933' order represents '2' with '8879'
-8877 8879 0
c Var 'aux933' direct represents '2' with '8880'
8877 -8879 8880 0
-8880 8879 0
-8880 -8877 0
c Var 'aux933' direct represents '3' with '-8879'
8876 8878 8880 -8879 0
c Encoding variable: aux934 with domain: int(0..4) (representing constraint (aux929 + aux931))
c Both direct and order encoding.
c Var 'aux934' order represents '0' with '8881'
c Var 'aux934' direct represents '0' with '8881'
c Var 'aux934' order represents '1' with '8882'
-8881 8882 0
c Var 'aux934' direct represents '1' with '8883'
8881 -8882 8883 0
-8883 8882 0
-8883 -8881 0
c Var 'aux934' order represents '2' with '8884'
-8882 8884 0
c Var 'aux934' direct represents '2' with '8885'
8882 -8884 8885 0
-8885 8884 0
-8885 -8882 0
c Var 'aux934' order represents '3' with '8886'
-8884 8886 0
c Var 'aux934' direct represents '3' with '8887'
8884 -8886 8887 0
-8887 8886 0
-8887 -8884 0
c Var 'aux934' direct represents '4' with '-8886'
8881 8883 8885 8887 -8886 0
c Encoding variable: aux935 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00005_00007=1)))
c Both direct and order encoding.
c Var 'aux935' order represents '0' with '8888'
c Var 'aux935' direct represents '0' with '8888'
c Var 'aux935' order represents '1' with '8889'
-8888 8889 0
c Var 'aux935' direct represents '1' with '8890'
8888 -8889 8890 0
-8890 8889 0
-8890 -8888 0
c Var 'aux935' direct represents '2' with '-8889'
8888 8890 -8889 0
c Encoding variable: aux936 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00008_00007=1)))
c Both direct and order encoding.
c Var 'aux936' order represents '0' with '8891'
c Var 'aux936' direct represents '0' with '8891'
c Var 'aux936' order represents '1' with '8892'
-8891 8892 0
c Var 'aux936' direct represents '1' with '8893'
8891 -8892 8893 0
-8893 8892 0
-8893 -8891 0
c Var 'aux936' direct represents '2' with '-8892'
8891 8893 -8892 0
c Encoding variable: aux937 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00006_00007=1)))
c Both direct and order encoding.
c Var 'aux937' order represents '0' with '8894'
c Var 'aux937' direct represents '0' with '8894'
c Var 'aux937' order represents '1' with '8895'
-8894 8895 0
c Var 'aux937' direct represents '1' with '8896'
8894 -8895 8896 0
-8896 8895 0
-8896 -8894 0
c Var 'aux937' direct represents '2' with '-8895'
8894 8896 -8895 0
c Encoding variable: aux938 with domain: int(0..2) (representing constraint ((x_00009_00007=1) + (x_00004_00007=1)))
c Both direct and order encoding.
c Var 'aux938' order represents '0' with '8897'
c Var 'aux938' direct represents '0' with '8897'
c Var 'aux938' order represents '1' with '8898'
-8897 8898 0
c Var 'aux938' direct represents '1' with '8899'
8897 -8898 8899 0
-8899 8898 0
-8899 -8897 0
c Var 'aux938' direct represents '2' with '-8898'
8897 8899 -8898 0
c Encoding variable: aux939 with domain: int(0..3) (representing constraint ((x_00001_00007=1) + aux938))
c Both direct and order encoding.
c Var 'aux939' order represents '0' with '8900'
c Var 'aux939' direct represents '0' with '8900'
c Var 'aux939' order represents '1' with '8901'
-8900 8901 0
c Var 'aux939' direct represents '1' with '8902'
8900 -8901 8902 0
-8902 8901 0
-8902 -8900 0
c Var 'aux939' order represents '2' with '8903'
-8901 8903 0
c Var 'aux939' direct represents '2' with '8904'
8901 -8903 8904 0
-8904 8903 0
-8904 -8901 0
c Var 'aux939' direct represents '3' with '-8903'
8900 8902 8904 -8903 0
c Encoding variable: aux940 with domain: int(0..4) (representing constraint (aux935 + aux937))
c Both direct and order encoding.
c Var 'aux940' order represents '0' with '8905'
c Var 'aux940' direct represents '0' with '8905'
c Var 'aux940' order represents '1' with '8906'
-8905 8906 0
c Var 'aux940' direct represents '1' with '8907'
8905 -8906 8907 0
-8907 8906 0
-8907 -8905 0
c Var 'aux940' order represents '2' with '8908'
-8906 8908 0
c Var 'aux940' direct represents '2' with '8909'
8906 -8908 8909 0
-8909 8908 0
-8909 -8906 0
c Var 'aux940' order represents '3' with '8910'
-8908 8910 0
c Var 'aux940' direct represents '3' with '8911'
8908 -8910 8911 0
-8911 8910 0
-8911 -8908 0
c Var 'aux940' direct represents '4' with '-8910'
8905 8907 8909 8911 -8910 0
c Encoding variable: aux941 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00005_00007=2)))
c Both direct and order encoding.
c Var 'aux941' order represents '0' with '8912'
c Var 'aux941' direct represents '0' with '8912'
c Var 'aux941' order represents '1' with '8913'
-8912 8913 0
c Var 'aux941' direct represents '1' with '8914'
8912 -8913 8914 0
-8914 8913 0
-8914 -8912 0
c Var 'aux941' direct represents '2' with '-8913'
8912 8914 -8913 0
c Encoding variable: aux942 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00008_00007=2)))
c Both direct and order encoding.
c Var 'aux942' order represents '0' with '8915'
c Var 'aux942' direct represents '0' with '8915'
c Var 'aux942' order represents '1' with '8916'
-8915 8916 0
c Var 'aux942' direct represents '1' with '8917'
8915 -8916 8917 0
-8917 8916 0
-8917 -8915 0
c Var 'aux942' direct represents '2' with '-8916'
8915 8917 -8916 0
c Encoding variable: aux943 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00006_00007=2)))
c Both direct and order encoding.
c Var 'aux943' order represents '0' with '8918'
c Var 'aux943' direct represents '0' with '8918'
c Var 'aux943' order represents '1' with '8919'
-8918 8919 0
c Var 'aux943' direct represents '1' with '8920'
8918 -8919 8920 0
-8920 8919 0
-8920 -8918 0
c Var 'aux943' direct represents '2' with '-8919'
8918 8920 -8919 0
c Encoding variable: aux944 with domain: int(0..2) (representing constraint ((x_00009_00007=2) + (x_00004_00007=2)))
c Both direct and order encoding.
c Var 'aux944' order represents '0' with '8921'
c Var 'aux944' direct represents '0' with '8921'
c Var 'aux944' order represents '1' with '8922'
-8921 8922 0
c Var 'aux944' direct represents '1' with '8923'
8921 -8922 8923 0
-8923 8922 0
-8923 -8921 0
c Var 'aux944' direct represents '2' with '-8922'
8921 8923 -8922 0
c Encoding variable: aux945 with domain: int(0..3) (representing constraint ((x_00001_00007=2) + aux944))
c Both direct and order encoding.
c Var 'aux945' order represents '0' with '8924'
c Var 'aux945' direct represents '0' with '8924'
c Var 'aux945' order represents '1' with '8925'
-8924 8925 0
c Var 'aux945' direct represents '1' with '8926'
8924 -8925 8926 0
-8926 8925 0
-8926 -8924 0
c Var 'aux945' order represents '2' with '8927'
-8925 8927 0
c Var 'aux945' direct represents '2' with '8928'
8925 -8927 8928 0
-8928 8927 0
-8928 -8925 0
c Var 'aux945' direct represents '3' with '-8927'
8924 8926 8928 -8927 0
c Encoding variable: aux946 with domain: int(0..4) (representing constraint (aux941 + aux943))
c Both direct and order encoding.
c Var 'aux946' order represents '0' with '8929'
c Var 'aux946' direct represents '0' with '8929'
c Var 'aux946' order represents '1' with '8930'
-8929 8930 0
c Var 'aux946' direct represents '1' with '8931'
8929 -8930 8931 0
-8931 8930 0
-8931 -8929 0
c Var 'aux946' order represents '2' with '8932'
-8930 8932 0
c Var 'aux946' direct represents '2' with '8933'
8930 -8932 8933 0
-8933 8932 0
-8933 -8930 0
c Var 'aux946' order represents '3' with '8934'
-8932 8934 0
c Var 'aux946' direct represents '3' with '8935'
8932 -8934 8935 0
-8935 8934 0
-8935 -8932 0
c Var 'aux946' direct represents '4' with '-8934'
8929 8931 8933 8935 -8934 0
c Encoding variable: aux947 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00005_00007=3)))
c Both direct and order encoding.
c Var 'aux947' order represents '0' with '8936'
c Var 'aux947' direct represents '0' with '8936'
c Var 'aux947' order represents '1' with '8937'
-8936 8937 0
c Var 'aux947' direct represents '1' with '8938'
8936 -8937 8938 0
-8938 8937 0
-8938 -8936 0
c Var 'aux947' direct represents '2' with '-8937'
8936 8938 -8937 0
c Encoding variable: aux948 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00008_00007=3)))
c Both direct and order encoding.
c Var 'aux948' order represents '0' with '8939'
c Var 'aux948' direct represents '0' with '8939'
c Var 'aux948' order represents '1' with '8940'
-8939 8940 0
c Var 'aux948' direct represents '1' with '8941'
8939 -8940 8941 0
-8941 8940 0
-8941 -8939 0
c Var 'aux948' direct represents '2' with '-8940'
8939 8941 -8940 0
c Encoding variable: aux949 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00006_00007=3)))
c Both direct and order encoding.
c Var 'aux949' order represents '0' with '8942'
c Var 'aux949' direct represents '0' with '8942'
c Var 'aux949' order represents '1' with '8943'
-8942 8943 0
c Var 'aux949' direct represents '1' with '8944'
8942 -8943 8944 0
-8944 8943 0
-8944 -8942 0
c Var 'aux949' direct represents '2' with '-8943'
8942 8944 -8943 0
c Encoding variable: aux950 with domain: int(0..2) (representing constraint ((x_00009_00007=3) + (x_00004_00007=3)))
c Both direct and order encoding.
c Var 'aux950' order represents '0' with '8945'
c Var 'aux950' direct represents '0' with '8945'
c Var 'aux950' order represents '1' with '8946'
-8945 8946 0
c Var 'aux950' direct represents '1' with '8947'
8945 -8946 8947 0
-8947 8946 0
-8947 -8945 0
c Var 'aux950' direct represents '2' with '-8946'
8945 8947 -8946 0
c Encoding variable: aux951 with domain: int(0..3) (representing constraint ((x_00001_00007=3) + aux950))
c Both direct and order encoding.
c Var 'aux951' order represents '0' with '8948'
c Var 'aux951' direct represents '0' with '8948'
c Var 'aux951' order represents '1' with '8949'
-8948 8949 0
c Var 'aux951' direct represents '1' with '8950'
8948 -8949 8950 0
-8950 8949 0
-8950 -8948 0
c Var 'aux951' order represents '2' with '8951'
-8949 8951 0
c Var 'aux951' direct represents '2' with '8952'
8949 -8951 8952 0
-8952 8951 0
-8952 -8949 0
c Var 'aux951' direct represents '3' with '-8951'
8948 8950 8952 -8951 0
c Encoding variable: aux952 with domain: int(0..4) (representing constraint (aux947 + aux949))
c Both direct and order encoding.
c Var 'aux952' order represents '0' with '8953'
c Var 'aux952' direct represents '0' with '8953'
c Var 'aux952' order represents '1' with '8954'
-8953 8954 0
c Var 'aux952' direct represents '1' with '8955'
8953 -8954 8955 0
-8955 8954 0
-8955 -8953 0
c Var 'aux952' order represents '2' with '8956'
-8954 8956 0
c Var 'aux952' direct represents '2' with '8957'
8954 -8956 8957 0
-8957 8956 0
-8957 -8954 0
c Var 'aux952' order represents '3' with '8958'
-8956 8958 0
c Var 'aux952' direct represents '3' with '8959'
8956 -8958 8959 0
-8959 8958 0
-8959 -8956 0
c Var 'aux952' direct represents '4' with '-8958'
8953 8955 8957 8959 -8958 0
c Encoding variable: aux953 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00005_00007=4)))
c Both direct and order encoding.
c Var 'aux953' order represents '0' with '8960'
c Var 'aux953' direct represents '0' with '8960'
c Var 'aux953' order represents '1' with '8961'
-8960 8961 0
c Var 'aux953' direct represents '1' with '8962'
8960 -8961 8962 0
-8962 8961 0
-8962 -8960 0
c Var 'aux953' direct represents '2' with '-8961'
8960 8962 -8961 0
c Encoding variable: aux954 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00008_00007=4)))
c Both direct and order encoding.
c Var 'aux954' order represents '0' with '8963'
c Var 'aux954' direct represents '0' with '8963'
c Var 'aux954' order represents '1' with '8964'
-8963 8964 0
c Var 'aux954' direct represents '1' with '8965'
8963 -8964 8965 0
-8965 8964 0
-8965 -8963 0
c Var 'aux954' direct represents '2' with '-8964'
8963 8965 -8964 0
c Encoding variable: aux955 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00006_00007=4)))
c Both direct and order encoding.
c Var 'aux955' order represents '0' with '8966'
c Var 'aux955' direct represents '0' with '8966'
c Var 'aux955' order represents '1' with '8967'
-8966 8967 0
c Var 'aux955' direct represents '1' with '8968'
8966 -8967 8968 0
-8968 8967 0
-8968 -8966 0
c Var 'aux955' direct represents '2' with '-8967'
8966 8968 -8967 0
c Encoding variable: aux956 with domain: int(0..2) (representing constraint ((x_00009_00007=4) + (x_00004_00007=4)))
c Both direct and order encoding.
c Var 'aux956' order represents '0' with '8969'
c Var 'aux956' direct represents '0' with '8969'
c Var 'aux956' order represents '1' with '8970'
-8969 8970 0
c Var 'aux956' direct represents '1' with '8971'
8969 -8970 8971 0
-8971 8970 0
-8971 -8969 0
c Var 'aux956' direct represents '2' with '-8970'
8969 8971 -8970 0
c Encoding variable: aux957 with domain: int(0..3) (representing constraint ((x_00001_00007=4) + aux956))
c Both direct and order encoding.
c Var 'aux957' order represents '0' with '8972'
c Var 'aux957' direct represents '0' with '8972'
c Var 'aux957' order represents '1' with '8973'
-8972 8973 0
c Var 'aux957' direct represents '1' with '8974'
8972 -8973 8974 0
-8974 8973 0
-8974 -8972 0
c Var 'aux957' order represents '2' with '8975'
-8973 8975 0
c Var 'aux957' direct represents '2' with '8976'
8973 -8975 8976 0
-8976 8975 0
-8976 -8973 0
c Var 'aux957' direct represents '3' with '-8975'
8972 8974 8976 -8975 0
c Encoding variable: aux958 with domain: int(0..4) (representing constraint (aux953 + aux955))
c Both direct and order encoding.
c Var 'aux958' order represents '0' with '8977'
c Var 'aux958' direct represents '0' with '8977'
c Var 'aux958' order represents '1' with '8978'
-8977 8978 0
c Var 'aux958' direct represents '1' with '8979'
8977 -8978 8979 0
-8979 8978 0
-8979 -8977 0
c Var 'aux958' order represents '2' with '8980'
-8978 8980 0
c Var 'aux958' direct represents '2' with '8981'
8978 -8980 8981 0
-8981 8980 0
-8981 -8978 0
c Var 'aux958' order represents '3' with '8982'
-8980 8982 0
c Var 'aux958' direct represents '3' with '8983'
8980 -8982 8983 0
-8983 8982 0
-8983 -8980 0
c Var 'aux958' direct represents '4' with '-8982'
8977 8979 8981 8983 -8982 0
c Encoding variable: aux959 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00005_00007=5)))
c Both direct and order encoding.
c Var 'aux959' order represents '0' with '8984'
c Var 'aux959' direct represents '0' with '8984'
c Var 'aux959' order represents '1' with '8985'
-8984 8985 0
c Var 'aux959' direct represents '1' with '8986'
8984 -8985 8986 0
-8986 8985 0
-8986 -8984 0
c Var 'aux959' direct represents '2' with '-8985'
8984 8986 -8985 0
c Encoding variable: aux960 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00008_00007=5)))
c Both direct and order encoding.
c Var 'aux960' order represents '0' with '8987'
c Var 'aux960' direct represents '0' with '8987'
c Var 'aux960' order represents '1' with '8988'
-8987 8988 0
c Var 'aux960' direct represents '1' with '8989'
8987 -8988 8989 0
-8989 8988 0
-8989 -8987 0
c Var 'aux960' direct represents '2' with '-8988'
8987 8989 -8988 0
c Encoding variable: aux961 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00006_00007=5)))
c Both direct and order encoding.
c Var 'aux961' order represents '0' with '8990'
c Var 'aux961' direct represents '0' with '8990'
c Var 'aux961' order represents '1' with '8991'
-8990 8991 0
c Var 'aux961' direct represents '1' with '8992'
8990 -8991 8992 0
-8992 8991 0
-8992 -8990 0
c Var 'aux961' direct represents '2' with '-8991'
8990 8992 -8991 0
c Encoding variable: aux962 with domain: int(0..2) (representing constraint ((x_00009_00007=5) + (x_00004_00007=5)))
c Both direct and order encoding.
c Var 'aux962' order represents '0' with '8993'
c Var 'aux962' direct represents '0' with '8993'
c Var 'aux962' order represents '1' with '8994'
-8993 8994 0
c Var 'aux962' direct represents '1' with '8995'
8993 -8994 8995 0
-8995 8994 0
-8995 -8993 0
c Var 'aux962' direct represents '2' with '-8994'
8993 8995 -8994 0
c Encoding variable: aux963 with domain: int(0..3) (representing constraint ((x_00001_00007=5) + aux962))
c Both direct and order encoding.
c Var 'aux963' order represents '0' with '8996'
c Var 'aux963' direct represents '0' with '8996'
c Var 'aux963' order represents '1' with '8997'
-8996 8997 0
c Var 'aux963' direct represents '1' with '8998'
8996 -8997 8998 0
-8998 8997 0
-8998 -8996 0
c Var 'aux963' order represents '2' with '8999'
-8997 8999 0
c Var 'aux963' direct represents '2' with '9000'
8997 -8999 9000 0
-9000 8999 0
-9000 -8997 0
c Var 'aux963' direct represents '3' with '-8999'
8996 8998 9000 -8999 0
c Encoding variable: aux964 with domain: int(0..4) (representing constraint (aux959 + aux961))
c Both direct and order encoding.
c Var 'aux964' order represents '0' with '9001'
c Var 'aux964' direct represents '0' with '9001'
c Var 'aux964' order represents '1' with '9002'
-9001 9002 0
c Var 'aux964' direct represents '1' with '9003'
9001 -9002 9003 0
-9003 9002 0
-9003 -9001 0
c Var 'aux964' order represents '2' with '9004'
-9002 9004 0
c Var 'aux964' direct represents '2' with '9005'
9002 -9004 9005 0
-9005 9004 0
-9005 -9002 0
c Var 'aux964' order represents '3' with '9006'
-9004 9006 0
c Var 'aux964' direct represents '3' with '9007'
9004 -9006 9007 0
-9007 9006 0
-9007 -9004 0
c Var 'aux964' direct represents '4' with '-9006'
9001 9003 9005 9007 -9006 0
c Encoding variable: aux965 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00005_00007=6)))
c Both direct and order encoding.
c Var 'aux965' order represents '0' with '9008'
c Var 'aux965' direct represents '0' with '9008'
c Var 'aux965' order represents '1' with '9009'
-9008 9009 0
c Var 'aux965' direct represents '1' with '9010'
9008 -9009 9010 0
-9010 9009 0
-9010 -9008 0
c Var 'aux965' direct represents '2' with '-9009'
9008 9010 -9009 0
c Encoding variable: aux966 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00008_00007=6)))
c Both direct and order encoding.
c Var 'aux966' order represents '0' with '9011'
c Var 'aux966' direct represents '0' with '9011'
c Var 'aux966' order represents '1' with '9012'
-9011 9012 0
c Var 'aux966' direct represents '1' with '9013'
9011 -9012 9013 0
-9013 9012 0
-9013 -9011 0
c Var 'aux966' direct represents '2' with '-9012'
9011 9013 -9012 0
c Encoding variable: aux967 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00006_00007=6)))
c Both direct and order encoding.
c Var 'aux967' order represents '0' with '9014'
c Var 'aux967' direct represents '0' with '9014'
c Var 'aux967' order represents '1' with '9015'
-9014 9015 0
c Var 'aux967' direct represents '1' with '9016'
9014 -9015 9016 0
-9016 9015 0
-9016 -9014 0
c Var 'aux967' direct represents '2' with '-9015'
9014 9016 -9015 0
c Encoding variable: aux968 with domain: int(0..2) (representing constraint ((x_00009_00007=6) + (x_00004_00007=6)))
c Both direct and order encoding.
c Var 'aux968' order represents '0' with '9017'
c Var 'aux968' direct represents '0' with '9017'
c Var 'aux968' order represents '1' with '9018'
-9017 9018 0
c Var 'aux968' direct represents '1' with '9019'
9017 -9018 9019 0
-9019 9018 0
-9019 -9017 0
c Var 'aux968' direct represents '2' with '-9018'
9017 9019 -9018 0
c Encoding variable: aux969 with domain: int(0..3) (representing constraint ((x_00001_00007=6) + aux968))
c Both direct and order encoding.
c Var 'aux969' order represents '0' with '9020'
c Var 'aux969' direct represents '0' with '9020'
c Var 'aux969' order represents '1' with '9021'
-9020 9021 0
c Var 'aux969' direct represents '1' with '9022'
9020 -9021 9022 0
-9022 9021 0
-9022 -9020 0
c Var 'aux969' order represents '2' with '9023'
-9021 9023 0
c Var 'aux969' direct represents '2' with '9024'
9021 -9023 9024 0
-9024 9023 0
-9024 -9021 0
c Var 'aux969' direct represents '3' with '-9023'
9020 9022 9024 -9023 0
c Encoding variable: aux970 with domain: int(0..4) (representing constraint (aux965 + aux967))
c Both direct and order encoding.
c Var 'aux970' order represents '0' with '9025'
c Var 'aux970' direct represents '0' with '9025'
c Var 'aux970' order represents '1' with '9026'
-9025 9026 0
c Var 'aux970' direct represents '1' with '9027'
9025 -9026 9027 0
-9027 9026 0
-9027 -9025 0
c Var 'aux970' order represents '2' with '9028'
-9026 9028 0
c Var 'aux970' direct represents '2' with '9029'
9026 -9028 9029 0
-9029 9028 0
-9029 -9026 0
c Var 'aux970' order represents '3' with '9030'
-9028 9030 0
c Var 'aux970' direct represents '3' with '9031'
9028 -9030 9031 0
-9031 9030 0
-9031 -9028 0
c Var 'aux970' direct represents '4' with '-9030'
9025 9027 9029 9031 -9030 0
c Encoding variable: aux971 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00005_00007=7)))
c Both direct and order encoding.
c Var 'aux971' order represents '0' with '9032'
c Var 'aux971' direct represents '0' with '9032'
c Var 'aux971' order represents '1' with '9033'
-9032 9033 0
c Var 'aux971' direct represents '1' with '9034'
9032 -9033 9034 0
-9034 9033 0
-9034 -9032 0
c Var 'aux971' direct represents '2' with '-9033'
9032 9034 -9033 0
c Encoding variable: aux972 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00008_00007=7)))
c Both direct and order encoding.
c Var 'aux972' order represents '0' with '9035'
c Var 'aux972' direct represents '0' with '9035'
c Var 'aux972' order represents '1' with '9036'
-9035 9036 0
c Var 'aux972' direct represents '1' with '9037'
9035 -9036 9037 0
-9037 9036 0
-9037 -9035 0
c Var 'aux972' direct represents '2' with '-9036'
9035 9037 -9036 0
c Encoding variable: aux973 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00006_00007=7)))
c Both direct and order encoding.
c Var 'aux973' order represents '0' with '9038'
c Var 'aux973' direct represents '0' with '9038'
c Var 'aux973' order represents '1' with '9039'
-9038 9039 0
c Var 'aux973' direct represents '1' with '9040'
9038 -9039 9040 0
-9040 9039 0
-9040 -9038 0
c Var 'aux973' direct represents '2' with '-9039'
9038 9040 -9039 0
c Encoding variable: aux974 with domain: int(0..2) (representing constraint ((x_00009_00007=7) + (x_00004_00007=7)))
c Both direct and order encoding.
c Var 'aux974' order represents '0' with '9041'
c Var 'aux974' direct represents '0' with '9041'
c Var 'aux974' order represents '1' with '9042'
-9041 9042 0
c Var 'aux974' direct represents '1' with '9043'
9041 -9042 9043 0
-9043 9042 0
-9043 -9041 0
c Var 'aux974' direct represents '2' with '-9042'
9041 9043 -9042 0
c Encoding variable: aux975 with domain: int(0..3) (representing constraint ((x_00001_00007=7) + aux974))
c Both direct and order encoding.
c Var 'aux975' order represents '0' with '9044'
c Var 'aux975' direct represents '0' with '9044'
c Var 'aux975' order represents '1' with '9045'
-9044 9045 0
c Var 'aux975' direct represents '1' with '9046'
9044 -9045 9046 0
-9046 9045 0
-9046 -9044 0
c Var 'aux975' order represents '2' with '9047'
-9045 9047 0
c Var 'aux975' direct represents '2' with '9048'
9045 -9047 9048 0
-9048 9047 0
-9048 -9045 0
c Var 'aux975' direct represents '3' with '-9047'
9044 9046 9048 -9047 0
c Encoding variable: aux976 with domain: int(0..4) (representing constraint (aux971 + aux973))
c Both direct and order encoding.
c Var 'aux976' order represents '0' with '9049'
c Var 'aux976' direct represents '0' with '9049'
c Var 'aux976' order represents '1' with '9050'
-9049 9050 0
c Var 'aux976' direct represents '1' with '9051'
9049 -9050 9051 0
-9051 9050 0
-9051 -9049 0
c Var 'aux976' order represents '2' with '9052'
-9050 9052 0
c Var 'aux976' direct represents '2' with '9053'
9050 -9052 9053 0
-9053 9052 0
-9053 -9050 0
c Var 'aux976' order represents '3' with '9054'
-9052 9054 0
c Var 'aux976' direct represents '3' with '9055'
9052 -9054 9055 0
-9055 9054 0
-9055 -9052 0
c Var 'aux976' direct represents '4' with '-9054'
9049 9051 9053 9055 -9054 0
c Encoding variable: aux977 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00005_00007=8)))
c Both direct and order encoding.
c Var 'aux977' order represents '0' with '9056'
c Var 'aux977' direct represents '0' with '9056'
c Var 'aux977' order represents '1' with '9057'
-9056 9057 0
c Var 'aux977' direct represents '1' with '9058'
9056 -9057 9058 0
-9058 9057 0
-9058 -9056 0
c Var 'aux977' direct represents '2' with '-9057'
9056 9058 -9057 0
c Encoding variable: aux978 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00008_00007=8)))
c Both direct and order encoding.
c Var 'aux978' order represents '0' with '9059'
c Var 'aux978' direct represents '0' with '9059'
c Var 'aux978' order represents '1' with '9060'
-9059 9060 0
c Var 'aux978' direct represents '1' with '9061'
9059 -9060 9061 0
-9061 9060 0
-9061 -9059 0
c Var 'aux978' direct represents '2' with '-9060'
9059 9061 -9060 0
c Encoding variable: aux979 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00006_00007=8)))
c Both direct and order encoding.
c Var 'aux979' order represents '0' with '9062'
c Var 'aux979' direct represents '0' with '9062'
c Var 'aux979' order represents '1' with '9063'
-9062 9063 0
c Var 'aux979' direct represents '1' with '9064'
9062 -9063 9064 0
-9064 9063 0
-9064 -9062 0
c Var 'aux979' direct represents '2' with '-9063'
9062 9064 -9063 0
c Encoding variable: aux980 with domain: int(0..2) (representing constraint ((x_00009_00007=8) + (x_00004_00007=8)))
c Both direct and order encoding.
c Var 'aux980' order represents '0' with '9065'
c Var 'aux980' direct represents '0' with '9065'
c Var 'aux980' order represents '1' with '9066'
-9065 9066 0
c Var 'aux980' direct represents '1' with '9067'
9065 -9066 9067 0
-9067 9066 0
-9067 -9065 0
c Var 'aux980' direct represents '2' with '-9066'
9065 9067 -9066 0
c Encoding variable: aux981 with domain: int(0..3) (representing constraint ((x_00001_00007=8) + aux980))
c Both direct and order encoding.
c Var 'aux981' order represents '0' with '9068'
c Var 'aux981' direct represents '0' with '9068'
c Var 'aux981' order represents '1' with '9069'
-9068 9069 0
c Var 'aux981' direct represents '1' with '9070'
9068 -9069 9070 0
-9070 9069 0
-9070 -9068 0
c Var 'aux981' order represents '2' with '9071'
-9069 9071 0
c Var 'aux981' direct represents '2' with '9072'
9069 -9071 9072 0
-9072 9071 0
-9072 -9069 0
c Var 'aux981' direct represents '3' with '-9071'
9068 9070 9072 -9071 0
c Encoding variable: aux982 with domain: int(0..4) (representing constraint (aux977 + aux979))
c Both direct and order encoding.
c Var 'aux982' order represents '0' with '9073'
c Var 'aux982' direct represents '0' with '9073'
c Var 'aux982' order represents '1' with '9074'
-9073 9074 0
c Var 'aux982' direct represents '1' with '9075'
9073 -9074 9075 0
-9075 9074 0
-9075 -9073 0
c Var 'aux982' order represents '2' with '9076'
-9074 9076 0
c Var 'aux982' direct represents '2' with '9077'
9074 -9076 9077 0
-9077 9076 0
-9077 -9074 0
c Var 'aux982' order represents '3' with '9078'
-9076 9078 0
c Var 'aux982' direct represents '3' with '9079'
9076 -9078 9079 0
-9079 9078 0
-9079 -9076 0
c Var 'aux982' direct represents '4' with '-9078'
9073 9075 9077 9079 -9078 0
c Encoding variable: aux983 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00005_00007=9)))
c Both direct and order encoding.
c Var 'aux983' order represents '0' with '9080'
c Var 'aux983' direct represents '0' with '9080'
c Var 'aux983' order represents '1' with '9081'
-9080 9081 0
c Var 'aux983' direct represents '1' with '9082'
9080 -9081 9082 0
-9082 9081 0
-9082 -9080 0
c Var 'aux983' direct represents '2' with '-9081'
9080 9082 -9081 0
c Encoding variable: aux984 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00008_00007=9)))
c Both direct and order encoding.
c Var 'aux984' order represents '0' with '9083'
c Var 'aux984' direct represents '0' with '9083'
c Var 'aux984' order represents '1' with '9084'
-9083 9084 0
c Var 'aux984' direct represents '1' with '9085'
9083 -9084 9085 0
-9085 9084 0
-9085 -9083 0
c Var 'aux984' direct represents '2' with '-9084'
9083 9085 -9084 0
c Encoding variable: aux985 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00006_00007=9)))
c Both direct and order encoding.
c Var 'aux985' order represents '0' with '9086'
c Var 'aux985' direct represents '0' with '9086'
c Var 'aux985' order represents '1' with '9087'
-9086 9087 0
c Var 'aux985' direct represents '1' with '9088'
9086 -9087 9088 0
-9088 9087 0
-9088 -9086 0
c Var 'aux985' direct represents '2' with '-9087'
9086 9088 -9087 0
c Encoding variable: aux986 with domain: int(0..2) (representing constraint ((x_00009_00007=9) + (x_00004_00007=9)))
c Both direct and order encoding.
c Var 'aux986' order represents '0' with '9089'
c Var 'aux986' direct represents '0' with '9089'
c Var 'aux986' order represents '1' with '9090'
-9089 9090 0
c Var 'aux986' direct represents '1' with '9091'
9089 -9090 9091 0
-9091 9090 0
-9091 -9089 0
c Var 'aux986' direct represents '2' with '-9090'
9089 9091 -9090 0
c Encoding variable: aux987 with domain: int(0..3) (representing constraint ((x_00001_00007=9) + aux986))
c Both direct and order encoding.
c Var 'aux987' order represents '0' with '9092'
c Var 'aux987' direct represents '0' with '9092'
c Var 'aux987' order represents '1' with '9093'
-9092 9093 0
c Var 'aux987' direct represents '1' with '9094'
9092 -9093 9094 0
-9094 9093 0
-9094 -9092 0
c Var 'aux987' order represents '2' with '9095'
-9093 9095 0
c Var 'aux987' direct represents '2' with '9096'
9093 -9095 9096 0
-9096 9095 0
-9096 -9093 0
c Var 'aux987' direct represents '3' with '-9095'
9092 9094 9096 -9095 0
c Encoding variable: aux988 with domain: int(0..4) (representing constraint (aux983 + aux985))
c Both direct and order encoding.
c Var 'aux988' order represents '0' with '9097'
c Var 'aux988' direct represents '0' with '9097'
c Var 'aux988' order represents '1' with '9098'
-9097 9098 0
c Var 'aux988' direct represents '1' with '9099'
9097 -9098 9099 0
-9099 9098 0
-9099 -9097 0
c Var 'aux988' order represents '2' with '9100'
-9098 9100 0
c Var 'aux988' direct represents '2' with '9101'
9098 -9100 9101 0
-9101 9100 0
-9101 -9098 0
c Var 'aux988' order represents '3' with '9102'
-9100 9102 0
c Var 'aux988' direct represents '3' with '9103'
9100 -9102 9103 0
-9103 9102 0
-9103 -9100 0
c Var 'aux988' direct represents '4' with '-9102'
9097 9099 9101 9103 -9102 0
c Encoding variable: aux989 with domain: int(0..2) (representing constraint ((x_00003_00008=1) + (x_00005_00008=1)))
c Both direct and order encoding.
c Var 'aux989' order represents '0' with '9104'
c Var 'aux989' direct represents '0' with '9104'
c Var 'aux989' order represents '1' with '9105'
-9104 9105 0
c Var 'aux989' direct represents '1' with '9106'
9104 -9105 9106 0
-9106 9105 0
-9106 -9104 0
c Var 'aux989' direct represents '2' with '-9105'
9104 9106 -9105 0
c Encoding variable: aux990 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00008_00008=1)))
c Both direct and order encoding.
c Var 'aux990' order represents '0' with '9107'
c Var 'aux990' direct represents '0' with '9107'
c Var 'aux990' order represents '1' with '9108'
-9107 9108 0
c Var 'aux990' direct represents '1' with '9109'
9107 -9108 9109 0
-9109 9108 0
-9109 -9107 0
c Var 'aux990' direct represents '2' with '-9108'
9107 9109 -9108 0
c Encoding variable: aux991 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00006_00008=1)))
c Both direct and order encoding.
c Var 'aux991' order represents '0' with '9110'
c Var 'aux991' direct represents '0' with '9110'
c Var 'aux991' order represents '1' with '9111'
-9110 9111 0
c Var 'aux991' direct represents '1' with '9112'
9110 -9111 9112 0
-9112 9111 0
-9112 -9110 0
c Var 'aux991' direct represents '2' with '-9111'
9110 9112 -9111 0
c Encoding variable: aux992 with domain: int(0..2) (representing constraint ((x_00009_00008=1) + (x_00004_00008=1)))
c Both direct and order encoding.
c Var 'aux992' order represents '0' with '9113'
c Var 'aux992' direct represents '0' with '9113'
c Var 'aux992' order represents '1' with '9114'
-9113 9114 0
c Var 'aux992' direct represents '1' with '9115'
9113 -9114 9115 0
-9115 9114 0
-9115 -9113 0
c Var 'aux992' direct represents '2' with '-9114'
9113 9115 -9114 0
c Encoding variable: aux993 with domain: int(0..3) (representing constraint ((x_00001_00008=1) + aux992))
c Both direct and order encoding.
c Var 'aux993' order represents '0' with '9116'
c Var 'aux993' direct represents '0' with '9116'
c Var 'aux993' order represents '1' with '9117'
-9116 9117 0
c Var 'aux993' direct represents '1' with '9118'
9116 -9117 9118 0
-9118 9117 0
-9118 -9116 0
c Var 'aux993' order represents '2' with '9119'
-9117 9119 0
c Var 'aux993' direct represents '2' with '9120'
9117 -9119 9120 0
-9120 9119 0
-9120 -9117 0
c Var 'aux993' direct represents '3' with '-9119'
9116 9118 9120 -9119 0
c Encoding variable: aux994 with domain: int(0..4) (representing constraint (aux989 + aux991))
c Both direct and order encoding.
c Var 'aux994' order represents '0' with '9121'
c Var 'aux994' direct represents '0' with '9121'
c Var 'aux994' order represents '1' with '9122'
-9121 9122 0
c Var 'aux994' direct represents '1' with '9123'
9121 -9122 9123 0
-9123 9122 0
-9123 -9121 0
c Var 'aux994' order represents '2' with '9124'
-9122 9124 0
c Var 'aux994' direct represents '2' with '9125'
9122 -9124 9125 0
-9125 9124 0
-9125 -9122 0
c Var 'aux994' order represents '3' with '9126'
-9124 9126 0
c Var 'aux994' direct represents '3' with '9127'
9124 -9126 9127 0
-9127 9126 0
-9127 -9124 0
c Var 'aux994' direct represents '4' with '-9126'
9121 9123 9125 9127 -9126 0
c Encoding variable: aux995 with domain: int(0..2) (representing constraint ((x_00003_00008=2) + (x_00005_00008=2)))
c Both direct and order encoding.
c Var 'aux995' order represents '0' with '9128'
c Var 'aux995' direct represents '0' with '9128'
c Var 'aux995' order represents '1' with '9129'
-9128 9129 0
c Var 'aux995' direct represents '1' with '9130'
9128 -9129 9130 0
-9130 9129 0
-9130 -9128 0
c Var 'aux995' direct represents '2' with '-9129'
9128 9130 -9129 0
c Encoding variable: aux996 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00008_00008=2)))
c Both direct and order encoding.
c Var 'aux996' order represents '0' with '9131'
c Var 'aux996' direct represents '0' with '9131'
c Var 'aux996' order represents '1' with '9132'
-9131 9132 0
c Var 'aux996' direct represents '1' with '9133'
9131 -9132 9133 0
-9133 9132 0
-9133 -9131 0
c Var 'aux996' direct represents '2' with '-9132'
9131 9133 -9132 0
c Encoding variable: aux997 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00006_00008=2)))
c Both direct and order encoding.
c Var 'aux997' order represents '0' with '9134'
c Var 'aux997' direct represents '0' with '9134'
c Var 'aux997' order represents '1' with '9135'
-9134 9135 0
c Var 'aux997' direct represents '1' with '9136'
9134 -9135 9136 0
-9136 9135 0
-9136 -9134 0
c Var 'aux997' direct represents '2' with '-9135'
9134 9136 -9135 0
c Encoding variable: aux998 with domain: int(0..2) (representing constraint ((x_00009_00008=2) + (x_00004_00008=2)))
c Both direct and order encoding.
c Var 'aux998' order represents '0' with '9137'
c Var 'aux998' direct represents '0' with '9137'
c Var 'aux998' order represents '1' with '9138'
-9137 9138 0
c Var 'aux998' direct represents '1' with '9139'
9137 -9138 9139 0
-9139 9138 0
-9139 -9137 0
c Var 'aux998' direct represents '2' with '-9138'
9137 9139 -9138 0
c Encoding variable: aux999 with domain: int(0..3) (representing constraint ((x_00001_00008=2) + aux998))
c Both direct and order encoding.
c Var 'aux999' order represents '0' with '9140'
c Var 'aux999' direct represents '0' with '9140'
c Var 'aux999' order represents '1' with '9141'
-9140 9141 0
c Var 'aux999' direct represents '1' with '9142'
9140 -9141 9142 0
-9142 9141 0
-9142 -9140 0
c Var 'aux999' order represents '2' with '9143'
-9141 9143 0
c Var 'aux999' direct represents '2' with '9144'
9141 -9143 9144 0
-9144 9143 0
-9144 -9141 0
c Var 'aux999' direct represents '3' with '-9143'
9140 9142 9144 -9143 0
c Encoding variable: aux1000 with domain: int(0..4) (representing constraint (aux995 + aux997))
c Both direct and order encoding.
c Var 'aux1000' order represents '0' with '9145'
c Var 'aux1000' direct represents '0' with '9145'
c Var 'aux1000' order represents '1' with '9146'
-9145 9146 0
c Var 'aux1000' direct represents '1' with '9147'
9145 -9146 9147 0
-9147 9146 0
-9147 -9145 0
c Var 'aux1000' order represents '2' with '9148'
-9146 9148 0
c Var 'aux1000' direct represents '2' with '9149'
9146 -9148 9149 0
-9149 9148 0
-9149 -9146 0
c Var 'aux1000' order represents '3' with '9150'
-9148 9150 0
c Var 'aux1000' direct represents '3' with '9151'
9148 -9150 9151 0
-9151 9150 0
-9151 -9148 0
c Var 'aux1000' direct represents '4' with '-9150'
9145 9147 9149 9151 -9150 0
c Encoding variable: aux1001 with domain: int(0..2) (representing constraint ((x_00003_00008=3) + (x_00005_00008=3)))
c Both direct and order encoding.
c Var 'aux1001' order represents '0' with '9152'
c Var 'aux1001' direct represents '0' with '9152'
c Var 'aux1001' order represents '1' with '9153'
-9152 9153 0
c Var 'aux1001' direct represents '1' with '9154'
9152 -9153 9154 0
-9154 9153 0
-9154 -9152 0
c Var 'aux1001' direct represents '2' with '-9153'
9152 9154 -9153 0
c Encoding variable: aux1002 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00008_00008=3)))
c Both direct and order encoding.
c Var 'aux1002' order represents '0' with '9155'
c Var 'aux1002' direct represents '0' with '9155'
c Var 'aux1002' order represents '1' with '9156'
-9155 9156 0
c Var 'aux1002' direct represents '1' with '9157'
9155 -9156 9157 0
-9157 9156 0
-9157 -9155 0
c Var 'aux1002' direct represents '2' with '-9156'
9155 9157 -9156 0
c Encoding variable: aux1003 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00006_00008=3)))
c Both direct and order encoding.
c Var 'aux1003' order represents '0' with '9158'
c Var 'aux1003' direct represents '0' with '9158'
c Var 'aux1003' order represents '1' with '9159'
-9158 9159 0
c Var 'aux1003' direct represents '1' with '9160'
9158 -9159 9160 0
-9160 9159 0
-9160 -9158 0
c Var 'aux1003' direct represents '2' with '-9159'
9158 9160 -9159 0
c Encoding variable: aux1004 with domain: int(0..2) (representing constraint ((x_00009_00008=3) + (x_00004_00008=3)))
c Both direct and order encoding.
c Var 'aux1004' order represents '0' with '9161'
c Var 'aux1004' direct represents '0' with '9161'
c Var 'aux1004' order represents '1' with '9162'
-9161 9162 0
c Var 'aux1004' direct represents '1' with '9163'
9161 -9162 9163 0
-9163 9162 0
-9163 -9161 0
c Var 'aux1004' direct represents '2' with '-9162'
9161 9163 -9162 0
c Encoding variable: aux1005 with domain: int(0..3) (representing constraint ((x_00001_00008=3) + aux1004))
c Both direct and order encoding.
c Var 'aux1005' order represents '0' with '9164'
c Var 'aux1005' direct represents '0' with '9164'
c Var 'aux1005' order represents '1' with '9165'
-9164 9165 0
c Var 'aux1005' direct represents '1' with '9166'
9164 -9165 9166 0
-9166 9165 0
-9166 -9164 0
c Var 'aux1005' order represents '2' with '9167'
-9165 9167 0
c Var 'aux1005' direct represents '2' with '9168'
9165 -9167 9168 0
-9168 9167 0
-9168 -9165 0
c Var 'aux1005' direct represents '3' with '-9167'
9164 9166 9168 -9167 0
c Encoding variable: aux1006 with domain: int(0..4) (representing constraint (aux1001 + aux1003))
c Both direct and order encoding.
c Var 'aux1006' order represents '0' with '9169'
c Var 'aux1006' direct represents '0' with '9169'
c Var 'aux1006' order represents '1' with '9170'
-9169 9170 0
c Var 'aux1006' direct represents '1' with '9171'
9169 -9170 9171 0
-9171 9170 0
-9171 -9169 0
c Var 'aux1006' order represents '2' with '9172'
-9170 9172 0
c Var 'aux1006' direct represents '2' with '9173'
9170 -9172 9173 0
-9173 9172 0
-9173 -9170 0
c Var 'aux1006' order represents '3' with '9174'
-9172 9174 0
c Var 'aux1006' direct represents '3' with '9175'
9172 -9174 9175 0
-9175 9174 0
-9175 -9172 0
c Var 'aux1006' direct represents '4' with '-9174'
9169 9171 9173 9175 -9174 0
c Encoding variable: aux1007 with domain: int(0..2) (representing constraint ((x_00003_00008=4) + (x_00005_00008=4)))
c Both direct and order encoding.
c Var 'aux1007' order represents '0' with '9176'
c Var 'aux1007' direct represents '0' with '9176'
c Var 'aux1007' order represents '1' with '9177'
-9176 9177 0
c Var 'aux1007' direct represents '1' with '9178'
9176 -9177 9178 0
-9178 9177 0
-9178 -9176 0
c Var 'aux1007' direct represents '2' with '-9177'
9176 9178 -9177 0
c Encoding variable: aux1008 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00008_00008=4)))
c Both direct and order encoding.
c Var 'aux1008' order represents '0' with '9179'
c Var 'aux1008' direct represents '0' with '9179'
c Var 'aux1008' order represents '1' with '9180'
-9179 9180 0
c Var 'aux1008' direct represents '1' with '9181'
9179 -9180 9181 0
-9181 9180 0
-9181 -9179 0
c Var 'aux1008' direct represents '2' with '-9180'
9179 9181 -9180 0
c Encoding variable: aux1009 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00006_00008=4)))
c Both direct and order encoding.
c Var 'aux1009' order represents '0' with '9182'
c Var 'aux1009' direct represents '0' with '9182'
c Var 'aux1009' order represents '1' with '9183'
-9182 9183 0
c Var 'aux1009' direct represents '1' with '9184'
9182 -9183 9184 0
-9184 9183 0
-9184 -9182 0
c Var 'aux1009' direct represents '2' with '-9183'
9182 9184 -9183 0
c Encoding variable: aux1010 with domain: int(0..2) (representing constraint ((x_00009_00008=4) + (x_00004_00008=4)))
c Both direct and order encoding.
c Var 'aux1010' order represents '0' with '9185'
c Var 'aux1010' direct represents '0' with '9185'
c Var 'aux1010' order represents '1' with '9186'
-9185 9186 0
c Var 'aux1010' direct represents '1' with '9187'
9185 -9186 9187 0
-9187 9186 0
-9187 -9185 0
c Var 'aux1010' direct represents '2' with '-9186'
9185 9187 -9186 0
c Encoding variable: aux1011 with domain: int(0..3) (representing constraint ((x_00001_00008=4) + aux1010))
c Both direct and order encoding.
c Var 'aux1011' order represents '0' with '9188'
c Var 'aux1011' direct represents '0' with '9188'
c Var 'aux1011' order represents '1' with '9189'
-9188 9189 0
c Var 'aux1011' direct represents '1' with '9190'
9188 -9189 9190 0
-9190 9189 0
-9190 -9188 0
c Var 'aux1011' order represents '2' with '9191'
-9189 9191 0
c Var 'aux1011' direct represents '2' with '9192'
9189 -9191 9192 0
-9192 9191 0
-9192 -9189 0
c Var 'aux1011' direct represents '3' with '-9191'
9188 9190 9192 -9191 0
c Encoding variable: aux1012 with domain: int(0..4) (representing constraint (aux1007 + aux1009))
c Both direct and order encoding.
c Var 'aux1012' order represents '0' with '9193'
c Var 'aux1012' direct represents '0' with '9193'
c Var 'aux1012' order represents '1' with '9194'
-9193 9194 0
c Var 'aux1012' direct represents '1' with '9195'
9193 -9194 9195 0
-9195 9194 0
-9195 -9193 0
c Var 'aux1012' order represents '2' with '9196'
-9194 9196 0
c Var 'aux1012' direct represents '2' with '9197'
9194 -9196 9197 0
-9197 9196 0
-9197 -9194 0
c Var 'aux1012' order represents '3' with '9198'
-9196 9198 0
c Var 'aux1012' direct represents '3' with '9199'
9196 -9198 9199 0
-9199 9198 0
-9199 -9196 0
c Var 'aux1012' direct represents '4' with '-9198'
9193 9195 9197 9199 -9198 0
c Encoding variable: aux1013 with domain: int(0..2) (representing constraint ((x_00003_00008=5) + (x_00005_00008=5)))
c Both direct and order encoding.
c Var 'aux1013' order represents '0' with '9200'
c Var 'aux1013' direct represents '0' with '9200'
c Var 'aux1013' order represents '1' with '9201'
-9200 9201 0
c Var 'aux1013' direct represents '1' with '9202'
9200 -9201 9202 0
-9202 9201 0
-9202 -9200 0
c Var 'aux1013' direct represents '2' with '-9201'
9200 9202 -9201 0
c Encoding variable: aux1014 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00008_00008=5)))
c Both direct and order encoding.
c Var 'aux1014' order represents '0' with '9203'
c Var 'aux1014' direct represents '0' with '9203'
c Var 'aux1014' order represents '1' with '9204'
-9203 9204 0
c Var 'aux1014' direct represents '1' with '9205'
9203 -9204 9205 0
-9205 9204 0
-9205 -9203 0
c Var 'aux1014' direct represents '2' with '-9204'
9203 9205 -9204 0
c Encoding variable: aux1015 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00006_00008=5)))
c Both direct and order encoding.
c Var 'aux1015' order represents '0' with '9206'
c Var 'aux1015' direct represents '0' with '9206'
c Var 'aux1015' order represents '1' with '9207'
-9206 9207 0
c Var 'aux1015' direct represents '1' with '9208'
9206 -9207 9208 0
-9208 9207 0
-9208 -9206 0
c Var 'aux1015' direct represents '2' with '-9207'
9206 9208 -9207 0
c Encoding variable: aux1016 with domain: int(0..2) (representing constraint ((x_00009_00008=5) + (x_00004_00008=5)))
c Both direct and order encoding.
c Var 'aux1016' order represents '0' with '9209'
c Var 'aux1016' direct represents '0' with '9209'
c Var 'aux1016' order represents '1' with '9210'
-9209 9210 0
c Var 'aux1016' direct represents '1' with '9211'
9209 -9210 9211 0
-9211 9210 0
-9211 -9209 0
c Var 'aux1016' direct represents '2' with '-9210'
9209 9211 -9210 0
c Encoding variable: aux1017 with domain: int(0..3) (representing constraint ((x_00001_00008=5) + aux1016))
c Both direct and order encoding.
c Var 'aux1017' order represents '0' with '9212'
c Var 'aux1017' direct represents '0' with '9212'
c Var 'aux1017' order represents '1' with '9213'
-9212 9213 0
c Var 'aux1017' direct represents '1' with '9214'
9212 -9213 9214 0
-9214 9213 0
-9214 -9212 0
c Var 'aux1017' order represents '2' with '9215'
-9213 9215 0
c Var 'aux1017' direct represents '2' with '9216'
9213 -9215 9216 0
-9216 9215 0
-9216 -9213 0
c Var 'aux1017' direct represents '3' with '-9215'
9212 9214 9216 -9215 0
c Encoding variable: aux1018 with domain: int(0..4) (representing constraint (aux1013 + aux1015))
c Both direct and order encoding.
c Var 'aux1018' order represents '0' with '9217'
c Var 'aux1018' direct represents '0' with '9217'
c Var 'aux1018' order represents '1' with '9218'
-9217 9218 0
c Var 'aux1018' direct represents '1' with '9219'
9217 -9218 9219 0
-9219 9218 0
-9219 -9217 0
c Var 'aux1018' order represents '2' with '9220'
-9218 9220 0
c Var 'aux1018' direct represents '2' with '9221'
9218 -9220 9221 0
-9221 9220 0
-9221 -9218 0
c Var 'aux1018' order represents '3' with '9222'
-9220 9222 0
c Var 'aux1018' direct represents '3' with '9223'
9220 -9222 9223 0
-9223 9222 0
-9223 -9220 0
c Var 'aux1018' direct represents '4' with '-9222'
9217 9219 9221 9223 -9222 0
c Encoding variable: aux1019 with domain: int(0..2) (representing constraint ((x_00003_00008=6) + (x_00005_00008=6)))
c Both direct and order encoding.
c Var 'aux1019' order represents '0' with '9224'
c Var 'aux1019' direct represents '0' with '9224'
c Var 'aux1019' order represents '1' with '9225'
-9224 9225 0
c Var 'aux1019' direct represents '1' with '9226'
9224 -9225 9226 0
-9226 9225 0
-9226 -9224 0
c Var 'aux1019' direct represents '2' with '-9225'
9224 9226 -9225 0
c Encoding variable: aux1020 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00008_00008=6)))
c Both direct and order encoding.
c Var 'aux1020' order represents '0' with '9227'
c Var 'aux1020' direct represents '0' with '9227'
c Var 'aux1020' order represents '1' with '9228'
-9227 9228 0
c Var 'aux1020' direct represents '1' with '9229'
9227 -9228 9229 0
-9229 9228 0
-9229 -9227 0
c Var 'aux1020' direct represents '2' with '-9228'
9227 9229 -9228 0
c Encoding variable: aux1021 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00006_00008=6)))
c Both direct and order encoding.
c Var 'aux1021' order represents '0' with '9230'
c Var 'aux1021' direct represents '0' with '9230'
c Var 'aux1021' order represents '1' with '9231'
-9230 9231 0
c Var 'aux1021' direct represents '1' with '9232'
9230 -9231 9232 0
-9232 9231 0
-9232 -9230 0
c Var 'aux1021' direct represents '2' with '-9231'
9230 9232 -9231 0
c Encoding variable: aux1022 with domain: int(0..2) (representing constraint ((x_00009_00008=6) + (x_00004_00008=6)))
c Both direct and order encoding.
c Var 'aux1022' order represents '0' with '9233'
c Var 'aux1022' direct represents '0' with '9233'
c Var 'aux1022' order represents '1' with '9234'
-9233 9234 0
c Var 'aux1022' direct represents '1' with '9235'
9233 -9234 9235 0
-9235 9234 0
-9235 -9233 0
c Var 'aux1022' direct represents '2' with '-9234'
9233 9235 -9234 0
c Encoding variable: aux1023 with domain: int(0..3) (representing constraint ((x_00001_00008=6) + aux1022))
c Both direct and order encoding.
c Var 'aux1023' order represents '0' with '9236'
c Var 'aux1023' direct represents '0' with '9236'
c Var 'aux1023' order represents '1' with '9237'
-9236 9237 0
c Var 'aux1023' direct represents '1' with '9238'
9236 -9237 9238 0
-9238 9237 0
-9238 -9236 0
c Var 'aux1023' order represents '2' with '9239'
-9237 9239 0
c Var 'aux1023' direct represents '2' with '9240'
9237 -9239 9240 0
-9240 9239 0
-9240 -9237 0
c Var 'aux1023' direct represents '3' with '-9239'
9236 9238 9240 -9239 0
c Encoding variable: aux1024 with domain: int(0..4) (representing constraint (aux1019 + aux1021))
c Both direct and order encoding.
c Var 'aux1024' order represents '0' with '9241'
c Var 'aux1024' direct represents '0' with '9241'
c Var 'aux1024' order represents '1' with '9242'
-9241 9242 0
c Var 'aux1024' direct represents '1' with '9243'
9241 -9242 9243 0
-9243 9242 0
-9243 -9241 0
c Var 'aux1024' order represents '2' with '9244'
-9242 9244 0
c Var 'aux1024' direct represents '2' with '9245'
9242 -9244 9245 0
-9245 9244 0
-9245 -9242 0
c Var 'aux1024' order represents '3' with '9246'
-9244 9246 0
c Var 'aux1024' direct represents '3' with '9247'
9244 -9246 9247 0
-9247 9246 0
-9247 -9244 0
c Var 'aux1024' direct represents '4' with '-9246'
9241 9243 9245 9247 -9246 0
c Encoding variable: aux1025 with domain: int(0..2) (representing constraint ((x_00003_00008=7) + (x_00005_00008=7)))
c Both direct and order encoding.
c Var 'aux1025' order represents '0' with '9248'
c Var 'aux1025' direct represents '0' with '9248'
c Var 'aux1025' order represents '1' with '9249'
-9248 9249 0
c Var 'aux1025' direct represents '1' with '9250'
9248 -9249 9250 0
-9250 9249 0
-9250 -9248 0
c Var 'aux1025' direct represents '2' with '-9249'
9248 9250 -9249 0
c Encoding variable: aux1026 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00008_00008=7)))
c Both direct and order encoding.
c Var 'aux1026' order represents '0' with '9251'
c Var 'aux1026' direct represents '0' with '9251'
c Var 'aux1026' order represents '1' with '9252'
-9251 9252 0
c Var 'aux1026' direct represents '1' with '9253'
9251 -9252 9253 0
-9253 9252 0
-9253 -9251 0
c Var 'aux1026' direct represents '2' with '-9252'
9251 9253 -9252 0
c Encoding variable: aux1027 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00006_00008=7)))
c Both direct and order encoding.
c Var 'aux1027' order represents '0' with '9254'
c Var 'aux1027' direct represents '0' with '9254'
c Var 'aux1027' order represents '1' with '9255'
-9254 9255 0
c Var 'aux1027' direct represents '1' with '9256'
9254 -9255 9256 0
-9256 9255 0
-9256 -9254 0
c Var 'aux1027' direct represents '2' with '-9255'
9254 9256 -9255 0
c Encoding variable: aux1028 with domain: int(0..2) (representing constraint ((x_00009_00008=7) + (x_00004_00008=7)))
c Both direct and order encoding.
c Var 'aux1028' order represents '0' with '9257'
c Var 'aux1028' direct represents '0' with '9257'
c Var 'aux1028' order represents '1' with '9258'
-9257 9258 0
c Var 'aux1028' direct represents '1' with '9259'
9257 -9258 9259 0
-9259 9258 0
-9259 -9257 0
c Var 'aux1028' direct represents '2' with '-9258'
9257 9259 -9258 0
c Encoding variable: aux1029 with domain: int(0..3) (representing constraint ((x_00001_00008=7) + aux1028))
c Both direct and order encoding.
c Var 'aux1029' order represents '0' with '9260'
c Var 'aux1029' direct represents '0' with '9260'
c Var 'aux1029' order represents '1' with '9261'
-9260 9261 0
c Var 'aux1029' direct represents '1' with '9262'
9260 -9261 9262 0
-9262 9261 0
-9262 -9260 0
c Var 'aux1029' order represents '2' with '9263'
-9261 9263 0
c Var 'aux1029' direct represents '2' with '9264'
9261 -9263 9264 0
-9264 9263 0
-9264 -9261 0
c Var 'aux1029' direct represents '3' with '-9263'
9260 9262 9264 -9263 0
c Encoding variable: aux1030 with domain: int(0..4) (representing constraint (aux1025 + aux1027))
c Both direct and order encoding.
c Var 'aux1030' order represents '0' with '9265'
c Var 'aux1030' direct represents '0' with '9265'
c Var 'aux1030' order represents '1' with '9266'
-9265 9266 0
c Var 'aux1030' direct represents '1' with '9267'
9265 -9266 9267 0
-9267 9266 0
-9267 -9265 0
c Var 'aux1030' order represents '2' with '9268'
-9266 9268 0
c Var 'aux1030' direct represents '2' with '9269'
9266 -9268 9269 0
-9269 9268 0
-9269 -9266 0
c Var 'aux1030' order represents '3' with '9270'
-9268 9270 0
c Var 'aux1030' direct represents '3' with '9271'
9268 -9270 9271 0
-9271 9270 0
-9271 -9268 0
c Var 'aux1030' direct represents '4' with '-9270'
9265 9267 9269 9271 -9270 0
c Encoding variable: aux1031 with domain: int(0..2) (representing constraint ((x_00003_00008=8) + (x_00005_00008=8)))
c Both direct and order encoding.
c Var 'aux1031' order represents '0' with '9272'
c Var 'aux1031' direct represents '0' with '9272'
c Var 'aux1031' order represents '1' with '9273'
-9272 9273 0
c Var 'aux1031' direct represents '1' with '9274'
9272 -9273 9274 0
-9274 9273 0
-9274 -9272 0
c Var 'aux1031' direct represents '2' with '-9273'
9272 9274 -9273 0
c Encoding variable: aux1032 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00008_00008=8)))
c Both direct and order encoding.
c Var 'aux1032' order represents '0' with '9275'
c Var 'aux1032' direct represents '0' with '9275'
c Var 'aux1032' order represents '1' with '9276'
-9275 9276 0
c Var 'aux1032' direct represents '1' with '9277'
9275 -9276 9277 0
-9277 9276 0
-9277 -9275 0
c Var 'aux1032' direct represents '2' with '-9276'
9275 9277 -9276 0
c Encoding variable: aux1033 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00006_00008=8)))
c Both direct and order encoding.
c Var 'aux1033' order represents '0' with '9278'
c Var 'aux1033' direct represents '0' with '9278'
c Var 'aux1033' order represents '1' with '9279'
-9278 9279 0
c Var 'aux1033' direct represents '1' with '9280'
9278 -9279 9280 0
-9280 9279 0
-9280 -9278 0
c Var 'aux1033' direct represents '2' with '-9279'
9278 9280 -9279 0
c Encoding variable: aux1034 with domain: int(0..2) (representing constraint ((x_00009_00008=8) + (x_00004_00008=8)))
c Both direct and order encoding.
c Var 'aux1034' order represents '0' with '9281'
c Var 'aux1034' direct represents '0' with '9281'
c Var 'aux1034' order represents '1' with '9282'
-9281 9282 0
c Var 'aux1034' direct represents '1' with '9283'
9281 -9282 9283 0
-9283 9282 0
-9283 -9281 0
c Var 'aux1034' direct represents '2' with '-9282'
9281 9283 -9282 0
c Encoding variable: aux1035 with domain: int(0..3) (representing constraint ((x_00001_00008=8) + aux1034))
c Both direct and order encoding.
c Var 'aux1035' order represents '0' with '9284'
c Var 'aux1035' direct represents '0' with '9284'
c Var 'aux1035' order represents '1' with '9285'
-9284 9285 0
c Var 'aux1035' direct represents '1' with '9286'
9284 -9285 9286 0
-9286 9285 0
-9286 -9284 0
c Var 'aux1035' order represents '2' with '9287'
-9285 9287 0
c Var 'aux1035' direct represents '2' with '9288'
9285 -9287 9288 0
-9288 9287 0
-9288 -9285 0
c Var 'aux1035' direct represents '3' with '-9287'
9284 9286 9288 -9287 0
c Encoding variable: aux1036 with domain: int(0..4) (representing constraint (aux1031 + aux1033))
c Both direct and order encoding.
c Var 'aux1036' order represents '0' with '9289'
c Var 'aux1036' direct represents '0' with '9289'
c Var 'aux1036' order represents '1' with '9290'
-9289 9290 0
c Var 'aux1036' direct represents '1' with '9291'
9289 -9290 9291 0
-9291 9290 0
-9291 -9289 0
c Var 'aux1036' order represents '2' with '9292'
-9290 9292 0
c Var 'aux1036' direct represents '2' with '9293'
9290 -9292 9293 0
-9293 9292 0
-9293 -9290 0
c Var 'aux1036' order represents '3' with '9294'
-9292 9294 0
c Var 'aux1036' direct represents '3' with '9295'
9292 -9294 9295 0
-9295 9294 0
-9295 -9292 0
c Var 'aux1036' direct represents '4' with '-9294'
9289 9291 9293 9295 -9294 0
c Encoding variable: aux1037 with domain: int(0..2) (representing constraint ((x_00003_00008=9) + (x_00005_00008=9)))
c Both direct and order encoding.
c Var 'aux1037' order represents '0' with '9296'
c Var 'aux1037' direct represents '0' with '9296'
c Var 'aux1037' order represents '1' with '9297'
-9296 9297 0
c Var 'aux1037' direct represents '1' with '9298'
9296 -9297 9298 0
-9298 9297 0
-9298 -9296 0
c Var 'aux1037' direct represents '2' with '-9297'
9296 9298 -9297 0
c Encoding variable: aux1038 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00008_00008=9)))
c Both direct and order encoding.
c Var 'aux1038' order represents '0' with '9299'
c Var 'aux1038' direct represents '0' with '9299'
c Var 'aux1038' order represents '1' with '9300'
-9299 9300 0
c Var 'aux1038' direct represents '1' with '9301'
9299 -9300 9301 0
-9301 9300 0
-9301 -9299 0
c Var 'aux1038' direct represents '2' with '-9300'
9299 9301 -9300 0
c Encoding variable: aux1039 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00006_00008=9)))
c Both direct and order encoding.
c Var 'aux1039' order represents '0' with '9302'
c Var 'aux1039' direct represents '0' with '9302'
c Var 'aux1039' order represents '1' with '9303'
-9302 9303 0
c Var 'aux1039' direct represents '1' with '9304'
9302 -9303 9304 0
-9304 9303 0
-9304 -9302 0
c Var 'aux1039' direct represents '2' with '-9303'
9302 9304 -9303 0
c Encoding variable: aux1040 with domain: int(0..2) (representing constraint ((x_00009_00008=9) + (x_00004_00008=9)))
c Both direct and order encoding.
c Var 'aux1040' order represents '0' with '9305'
c Var 'aux1040' direct represents '0' with '9305'
c Var 'aux1040' order represents '1' with '9306'
-9305 9306 0
c Var 'aux1040' direct represents '1' with '9307'
9305 -9306 9307 0
-9307 9306 0
-9307 -9305 0
c Var 'aux1040' direct represents '2' with '-9306'
9305 9307 -9306 0
c Encoding variable: aux1041 with domain: int(0..3) (representing constraint ((x_00001_00008=9) + aux1040))
c Both direct and order encoding.
c Var 'aux1041' order represents '0' with '9308'
c Var 'aux1041' direct represents '0' with '9308'
c Var 'aux1041' order represents '1' with '9309'
-9308 9309 0
c Var 'aux1041' direct represents '1' with '9310'
9308 -9309 9310 0
-9310 9309 0
-9310 -9308 0
c Var 'aux1041' order represents '2' with '9311'
-9309 9311 0
c Var 'aux1041' direct represents '2' with '9312'
9309 -9311 9312 0
-9312 9311 0
-9312 -9309 0
c Var 'aux1041' direct represents '3' with '-9311'
9308 9310 9312 -9311 0
c Encoding variable: aux1042 with domain: int(0..4) (representing constraint (aux1037 + aux1039))
c Both direct and order encoding.
c Var 'aux1042' order represents '0' with '9313'
c Var 'aux1042' direct represents '0' with '9313'
c Var 'aux1042' order represents '1' with '9314'
-9313 9314 0
c Var 'aux1042' direct represents '1' with '9315'
9313 -9314 9315 0
-9315 9314 0
-9315 -9313 0
c Var 'aux1042' order represents '2' with '9316'
-9314 9316 0
c Var 'aux1042' direct represents '2' with '9317'
9314 -9316 9317 0
-9317 9316 0
-9317 -9314 0
c Var 'aux1042' order represents '3' with '9318'
-9316 9318 0
c Var 'aux1042' direct represents '3' with '9319'
9316 -9318 9319 0
-9319 9318 0
-9319 -9316 0
c Var 'aux1042' direct represents '4' with '-9318'
9313 9315 9317 9319 -9318 0
c Encoding variable: aux1043 with domain: int(0..2) (representing constraint ((x_00003_00009=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux1043' order represents '0' with '9320'
c Var 'aux1043' direct represents '0' with '9320'
c Var 'aux1043' order represents '1' with '9321'
-9320 9321 0
c Var 'aux1043' direct represents '1' with '9322'
9320 -9321 9322 0
-9322 9321 0
-9322 -9320 0
c Var 'aux1043' direct represents '2' with '-9321'
9320 9322 -9321 0
c Encoding variable: aux1044 with domain: int(0..2) (representing constraint ((x_00007_00009=1) + (x_00008_00009=1)))
c Both direct and order encoding.
c Var 'aux1044' order represents '0' with '9323'
c Var 'aux1044' direct represents '0' with '9323'
c Var 'aux1044' order represents '1' with '9324'
-9323 9324 0
c Var 'aux1044' direct represents '1' with '9325'
9323 -9324 9325 0
-9325 9324 0
-9325 -9323 0
c Var 'aux1044' direct represents '2' with '-9324'
9323 9325 -9324 0
c Encoding variable: aux1045 with domain: int(0..2) (representing constraint ((x_00002_00009=1) + (x_00006_00009=1)))
c Both direct and order encoding.
c Var 'aux1045' order represents '0' with '9326'
c Var 'aux1045' direct represents '0' with '9326'
c Var 'aux1045' order represents '1' with '9327'
-9326 9327 0
c Var 'aux1045' direct represents '1' with '9328'
9326 -9327 9328 0
-9328 9327 0
-9328 -9326 0
c Var 'aux1045' direct represents '2' with '-9327'
9326 9328 -9327 0
c Encoding variable: aux1046 with domain: int(0..2) (representing constraint ((x_00009_00009=1) + (x_00004_00009=1)))
c Both direct and order encoding.
c Var 'aux1046' order represents '0' with '9329'
c Var 'aux1046' direct represents '0' with '9329'
c Var 'aux1046' order represents '1' with '9330'
-9329 9330 0
c Var 'aux1046' direct represents '1' with '9331'
9329 -9330 9331 0
-9331 9330 0
-9331 -9329 0
c Var 'aux1046' direct represents '2' with '-9330'
9329 9331 -9330 0
c Encoding variable: aux1047 with domain: int(0..3) (representing constraint ((x_00001_00009=1) + aux1046))
c Both direct and order encoding.
c Var 'aux1047' order represents '0' with '9332'
c Var 'aux1047' direct represents '0' with '9332'
c Var 'aux1047' order represents '1' with '9333'
-9332 9333 0
c Var 'aux1047' direct represents '1' with '9334'
9332 -9333 9334 0
-9334 9333 0
-9334 -9332 0
c Var 'aux1047' order represents '2' with '9335'
-9333 9335 0
c Var 'aux1047' direct represents '2' with '9336'
9333 -9335 9336 0
-9336 9335 0
-9336 -9333 0
c Var 'aux1047' direct represents '3' with '-9335'
9332 9334 9336 -9335 0
c Encoding variable: aux1048 with domain: int(0..4) (representing constraint (aux1043 + aux1045))
c Both direct and order encoding.
c Var 'aux1048' order represents '0' with '9337'
c Var 'aux1048' direct represents '0' with '9337'
c Var 'aux1048' order represents '1' with '9338'
-9337 9338 0
c Var 'aux1048' direct represents '1' with '9339'
9337 -9338 9339 0
-9339 9338 0
-9339 -9337 0
c Var 'aux1048' order represents '2' with '9340'
-9338 9340 0
c Var 'aux1048' direct represents '2' with '9341'
9338 -9340 9341 0
-9341 9340 0
-9341 -9338 0
c Var 'aux1048' order represents '3' with '9342'
-9340 9342 0
c Var 'aux1048' direct represents '3' with '9343'
9340 -9342 9343 0
-9343 9342 0
-9343 -9340 0
c Var 'aux1048' direct represents '4' with '-9342'
9337 9339 9341 9343 -9342 0
c Encoding variable: aux1049 with domain: int(0..2) (representing constraint ((x_00003_00009=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux1049' order represents '0' with '9344'
c Var 'aux1049' direct represents '0' with '9344'
c Var 'aux1049' order represents '1' with '9345'
-9344 9345 0
c Var 'aux1049' direct represents '1' with '9346'
9344 -9345 9346 0
-9346 9345 0
-9346 -9344 0
c Var 'aux1049' direct represents '2' with '-9345'
9344 9346 -9345 0
c Encoding variable: aux1050 with domain: int(0..2) (representing constraint ((x_00007_00009=2) + (x_00008_00009=2)))
c Both direct and order encoding.
c Var 'aux1050' order represents '0' with '9347'
c Var 'aux1050' direct represents '0' with '9347'
c Var 'aux1050' order represents '1' with '9348'
-9347 9348 0
c Var 'aux1050' direct represents '1' with '9349'
9347 -9348 9349 0
-9349 9348 0
-9349 -9347 0
c Var 'aux1050' direct represents '2' with '-9348'
9347 9349 -9348 0
c Encoding variable: aux1051 with domain: int(0..2) (representing constraint ((x_00002_00009=2) + (x_00006_00009=2)))
c Both direct and order encoding.
c Var 'aux1051' order represents '0' with '9350'
c Var 'aux1051' direct represents '0' with '9350'
c Var 'aux1051' order represents '1' with '9351'
-9350 9351 0
c Var 'aux1051' direct represents '1' with '9352'
9350 -9351 9352 0
-9352 9351 0
-9352 -9350 0
c Var 'aux1051' direct represents '2' with '-9351'
9350 9352 -9351 0
c Encoding variable: aux1052 with domain: int(0..2) (representing constraint ((x_00009_00009=2) + (x_00004_00009=2)))
c Both direct and order encoding.
c Var 'aux1052' order represents '0' with '9353'
c Var 'aux1052' direct represents '0' with '9353'
c Var 'aux1052' order represents '1' with '9354'
-9353 9354 0
c Var 'aux1052' direct represents '1' with '9355'
9353 -9354 9355 0
-9355 9354 0
-9355 -9353 0
c Var 'aux1052' direct represents '2' with '-9354'
9353 9355 -9354 0
c Encoding variable: aux1053 with domain: int(0..3) (representing constraint ((x_00001_00009=2) + aux1052))
c Both direct and order encoding.
c Var 'aux1053' order represents '0' with '9356'
c Var 'aux1053' direct represents '0' with '9356'
c Var 'aux1053' order represents '1' with '9357'
-9356 9357 0
c Var 'aux1053' direct represents '1' with '9358'
9356 -9357 9358 0
-9358 9357 0
-9358 -9356 0
c Var 'aux1053' order represents '2' with '9359'
-9357 9359 0
c Var 'aux1053' direct represents '2' with '9360'
9357 -9359 9360 0
-9360 9359 0
-9360 -9357 0
c Var 'aux1053' direct represents '3' with '-9359'
9356 9358 9360 -9359 0
c Encoding variable: aux1054 with domain: int(0..4) (representing constraint (aux1049 + aux1051))
c Both direct and order encoding.
c Var 'aux1054' order represents '0' with '9361'
c Var 'aux1054' direct represents '0' with '9361'
c Var 'aux1054' order represents '1' with '9362'
-9361 9362 0
c Var 'aux1054' direct represents '1' with '9363'
9361 -9362 9363 0
-9363 9362 0
-9363 -9361 0
c Var 'aux1054' order represents '2' with '9364'
-9362 9364 0
c Var 'aux1054' direct represents '2' with '9365'
9362 -9364 9365 0
-9365 9364 0
-9365 -9362 0
c Var 'aux1054' order represents '3' with '9366'
-9364 9366 0
c Var 'aux1054' direct represents '3' with '9367'
9364 -9366 9367 0
-9367 9366 0
-9367 -9364 0
c Var 'aux1054' direct represents '4' with '-9366'
9361 9363 9365 9367 -9366 0
c Encoding variable: aux1055 with domain: int(0..2) (representing constraint ((x_00003_00009=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux1055' order represents '0' with '9368'
c Var 'aux1055' direct represents '0' with '9368'
c Var 'aux1055' order represents '1' with '9369'
-9368 9369 0
c Var 'aux1055' direct represents '1' with '9370'
9368 -9369 9370 0
-9370 9369 0
-9370 -9368 0
c Var 'aux1055' direct represents '2' with '-9369'
9368 9370 -9369 0
c Encoding variable: aux1056 with domain: int(0..2) (representing constraint ((x_00007_00009=3) + (x_00008_00009=3)))
c Both direct and order encoding.
c Var 'aux1056' order represents '0' with '9371'
c Var 'aux1056' direct represents '0' with '9371'
c Var 'aux1056' order represents '1' with '9372'
-9371 9372 0
c Var 'aux1056' direct represents '1' with '9373'
9371 -9372 9373 0
-9373 9372 0
-9373 -9371 0
c Var 'aux1056' direct represents '2' with '-9372'
9371 9373 -9372 0
c Encoding variable: aux1057 with domain: int(0..2) (representing constraint ((x_00002_00009=3) + (x_00006_00009=3)))
c Both direct and order encoding.
c Var 'aux1057' order represents '0' with '9374'
c Var 'aux1057' direct represents '0' with '9374'
c Var 'aux1057' order represents '1' with '9375'
-9374 9375 0
c Var 'aux1057' direct represents '1' with '9376'
9374 -9375 9376 0
-9376 9375 0
-9376 -9374 0
c Var 'aux1057' direct represents '2' with '-9375'
9374 9376 -9375 0
c Encoding variable: aux1058 with domain: int(0..2) (representing constraint ((x_00009_00009=3) + (x_00004_00009=3)))
c Both direct and order encoding.
c Var 'aux1058' order represents '0' with '9377'
c Var 'aux1058' direct represents '0' with '9377'
c Var 'aux1058' order represents '1' with '9378'
-9377 9378 0
c Var 'aux1058' direct represents '1' with '9379'
9377 -9378 9379 0
-9379 9378 0
-9379 -9377 0
c Var 'aux1058' direct represents '2' with '-9378'
9377 9379 -9378 0
c Encoding variable: aux1059 with domain: int(0..3) (representing constraint ((x_00001_00009=3) + aux1058))
c Both direct and order encoding.
c Var 'aux1059' order represents '0' with '9380'
c Var 'aux1059' direct represents '0' with '9380'
c Var 'aux1059' order represents '1' with '9381'
-9380 9381 0
c Var 'aux1059' direct represents '1' with '9382'
9380 -9381 9382 0
-9382 9381 0
-9382 -9380 0
c Var 'aux1059' order represents '2' with '9383'
-9381 9383 0
c Var 'aux1059' direct represents '2' with '9384'
9381 -9383 9384 0
-9384 9383 0
-9384 -9381 0
c Var 'aux1059' direct represents '3' with '-9383'
9380 9382 9384 -9383 0
c Encoding variable: aux1060 with domain: int(0..4) (representing constraint (aux1055 + aux1057))
c Both direct and order encoding.
c Var 'aux1060' order represents '0' with '9385'
c Var 'aux1060' direct represents '0' with '9385'
c Var 'aux1060' order represents '1' with '9386'
-9385 9386 0
c Var 'aux1060' direct represents '1' with '9387'
9385 -9386 9387 0
-9387 9386 0
-9387 -9385 0
c Var 'aux1060' order represents '2' with '9388'
-9386 9388 0
c Var 'aux1060' direct represents '2' with '9389'
9386 -9388 9389 0
-9389 9388 0
-9389 -9386 0
c Var 'aux1060' order represents '3' with '9390'
-9388 9390 0
c Var 'aux1060' direct represents '3' with '9391'
9388 -9390 9391 0
-9391 9390 0
-9391 -9388 0
c Var 'aux1060' direct represents '4' with '-9390'
9385 9387 9389 9391 -9390 0
c Encoding variable: aux1061 with domain: int(0..2) (representing constraint ((x_00003_00009=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux1061' order represents '0' with '9392'
c Var 'aux1061' direct represents '0' with '9392'
c Var 'aux1061' order represents '1' with '9393'
-9392 9393 0
c Var 'aux1061' direct represents '1' with '9394'
9392 -9393 9394 0
-9394 9393 0
-9394 -9392 0
c Var 'aux1061' direct represents '2' with '-9393'
9392 9394 -9393 0
c Encoding variable: aux1062 with domain: int(0..2) (representing constraint ((x_00007_00009=4) + (x_00008_00009=4)))
c Both direct and order encoding.
c Var 'aux1062' order represents '0' with '9395'
c Var 'aux1062' direct represents '0' with '9395'
c Var 'aux1062' order represents '1' with '9396'
-9395 9396 0
c Var 'aux1062' direct represents '1' with '9397'
9395 -9396 9397 0
-9397 9396 0
-9397 -9395 0
c Var 'aux1062' direct represents '2' with '-9396'
9395 9397 -9396 0
c Encoding variable: aux1063 with domain: int(0..2) (representing constraint ((x_00002_00009=4) + (x_00006_00009=4)))
c Both direct and order encoding.
c Var 'aux1063' order represents '0' with '9398'
c Var 'aux1063' direct represents '0' with '9398'
c Var 'aux1063' order represents '1' with '9399'
-9398 9399 0
c Var 'aux1063' direct represents '1' with '9400'
9398 -9399 9400 0
-9400 9399 0
-9400 -9398 0
c Var 'aux1063' direct represents '2' with '-9399'
9398 9400 -9399 0
c Encoding variable: aux1064 with domain: int(0..2) (representing constraint ((x_00009_00009=4) + (x_00004_00009=4)))
c Both direct and order encoding.
c Var 'aux1064' order represents '0' with '9401'
c Var 'aux1064' direct represents '0' with '9401'
c Var 'aux1064' order represents '1' with '9402'
-9401 9402 0
c Var 'aux1064' direct represents '1' with '9403'
9401 -9402 9403 0
-9403 9402 0
-9403 -9401 0
c Var 'aux1064' direct represents '2' with '-9402'
9401 9403 -9402 0
c Encoding variable: aux1065 with domain: int(0..3) (representing constraint ((x_00001_00009=4) + aux1064))
c Both direct and order encoding.
c Var 'aux1065' order represents '0' with '9404'
c Var 'aux1065' direct represents '0' with '9404'
c Var 'aux1065' order represents '1' with '9405'
-9404 9405 0
c Var 'aux1065' direct represents '1' with '9406'
9404 -9405 9406 0
-9406 9405 0
-9406 -9404 0
c Var 'aux1065' order represents '2' with '9407'
-9405 9407 0
c Var 'aux1065' direct represents '2' with '9408'
9405 -9407 9408 0
-9408 9407 0
-9408 -9405 0
c Var 'aux1065' direct represents '3' with '-9407'
9404 9406 9408 -9407 0
c Encoding variable: aux1066 with domain: int(0..4) (representing constraint (aux1061 + aux1063))
c Both direct and order encoding.
c Var 'aux1066' order represents '0' with '9409'
c Var 'aux1066' direct represents '0' with '9409'
c Var 'aux1066' order represents '1' with '9410'
-9409 9410 0
c Var 'aux1066' direct represents '1' with '9411'
9409 -9410 9411 0
-9411 9410 0
-9411 -9409 0
c Var 'aux1066' order represents '2' with '9412'
-9410 9412 0
c Var 'aux1066' direct represents '2' with '9413'
9410 -9412 9413 0
-9413 9412 0
-9413 -9410 0
c Var 'aux1066' order represents '3' with '9414'
-9412 9414 0
c Var 'aux1066' direct represents '3' with '9415'
9412 -9414 9415 0
-9415 9414 0
-9415 -9412 0
c Var 'aux1066' direct represents '4' with '-9414'
9409 9411 9413 9415 -9414 0
c Encoding variable: aux1067 with domain: int(0..2) (representing constraint ((x_00003_00009=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux1067' order represents '0' with '9416'
c Var 'aux1067' direct represents '0' with '9416'
c Var 'aux1067' order represents '1' with '9417'
-9416 9417 0
c Var 'aux1067' direct represents '1' with '9418'
9416 -9417 9418 0
-9418 9417 0
-9418 -9416 0
c Var 'aux1067' direct represents '2' with '-9417'
9416 9418 -9417 0
c Encoding variable: aux1068 with domain: int(0..2) (representing constraint ((x_00007_00009=5) + (x_00008_00009=5)))
c Both direct and order encoding.
c Var 'aux1068' order represents '0' with '9419'
c Var 'aux1068' direct represents '0' with '9419'
c Var 'aux1068' order represents '1' with '9420'
-9419 9420 0
c Var 'aux1068' direct represents '1' with '9421'
9419 -9420 9421 0
-9421 9420 0
-9421 -9419 0
c Var 'aux1068' direct represents '2' with '-9420'
9419 9421 -9420 0
c Encoding variable: aux1069 with domain: int(0..2) (representing constraint ((x_00002_00009=5) + (x_00006_00009=5)))
c Both direct and order encoding.
c Var 'aux1069' order represents '0' with '9422'
c Var 'aux1069' direct represents '0' with '9422'
c Var 'aux1069' order represents '1' with '9423'
-9422 9423 0
c Var 'aux1069' direct represents '1' with '9424'
9422 -9423 9424 0
-9424 9423 0
-9424 -9422 0
c Var 'aux1069' direct represents '2' with '-9423'
9422 9424 -9423 0
c Encoding variable: aux1070 with domain: int(0..2) (representing constraint ((x_00009_00009=5) + (x_00004_00009=5)))
c Both direct and order encoding.
c Var 'aux1070' order represents '0' with '9425'
c Var 'aux1070' direct represents '0' with '9425'
c Var 'aux1070' order represents '1' with '9426'
-9425 9426 0
c Var 'aux1070' direct represents '1' with '9427'
9425 -9426 9427 0
-9427 9426 0
-9427 -9425 0
c Var 'aux1070' direct represents '2' with '-9426'
9425 9427 -9426 0
c Encoding variable: aux1071 with domain: int(0..3) (representing constraint ((x_00001_00009=5) + aux1070))
c Both direct and order encoding.
c Var 'aux1071' order represents '0' with '9428'
c Var 'aux1071' direct represents '0' with '9428'
c Var 'aux1071' order represents '1' with '9429'
-9428 9429 0
c Var 'aux1071' direct represents '1' with '9430'
9428 -9429 9430 0
-9430 9429 0
-9430 -9428 0
c Var 'aux1071' order represents '2' with '9431'
-9429 9431 0
c Var 'aux1071' direct represents '2' with '9432'
9429 -9431 9432 0
-9432 9431 0
-9432 -9429 0
c Var 'aux1071' direct represents '3' with '-9431'
9428 9430 9432 -9431 0
c Encoding variable: aux1072 with domain: int(0..4) (representing constraint (aux1067 + aux1069))
c Both direct and order encoding.
c Var 'aux1072' order represents '0' with '9433'
c Var 'aux1072' direct represents '0' with '9433'
c Var 'aux1072' order represents '1' with '9434'
-9433 9434 0
c Var 'aux1072' direct represents '1' with '9435'
9433 -9434 9435 0
-9435 9434 0
-9435 -9433 0
c Var 'aux1072' order represents '2' with '9436'
-9434 9436 0
c Var 'aux1072' direct represents '2' with '9437'
9434 -9436 9437 0
-9437 9436 0
-9437 -9434 0
c Var 'aux1072' order represents '3' with '9438'
-9436 9438 0
c Var 'aux1072' direct represents '3' with '9439'
9436 -9438 9439 0
-9439 9438 0
-9439 -9436 0
c Var 'aux1072' direct represents '4' with '-9438'
9433 9435 9437 9439 -9438 0
c Encoding variable: aux1073 with domain: int(0..2) (representing constraint ((x_00003_00009=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux1073' order represents '0' with '9440'
c Var 'aux1073' direct represents '0' with '9440'
c Var 'aux1073' order represents '1' with '9441'
-9440 9441 0
c Var 'aux1073' direct represents '1' with '9442'
9440 -9441 9442 0
-9442 9441 0
-9442 -9440 0
c Var 'aux1073' direct represents '2' with '-9441'
9440 9442 -9441 0
c Encoding variable: aux1074 with domain: int(0..2) (representing constraint ((x_00007_00009=6) + (x_00008_00009=6)))
c Both direct and order encoding.
c Var 'aux1074' order represents '0' with '9443'
c Var 'aux1074' direct represents '0' with '9443'
c Var 'aux1074' order represents '1' with '9444'
-9443 9444 0
c Var 'aux1074' direct represents '1' with '9445'
9443 -9444 9445 0
-9445 9444 0
-9445 -9443 0
c Var 'aux1074' direct represents '2' with '-9444'
9443 9445 -9444 0
c Encoding variable: aux1075 with domain: int(0..2) (representing constraint ((x_00002_00009=6) + (x_00006_00009=6)))
c Both direct and order encoding.
c Var 'aux1075' order represents '0' with '9446'
c Var 'aux1075' direct represents '0' with '9446'
c Var 'aux1075' order represents '1' with '9447'
-9446 9447 0
c Var 'aux1075' direct represents '1' with '9448'
9446 -9447 9448 0
-9448 9447 0
-9448 -9446 0
c Var 'aux1075' direct represents '2' with '-9447'
9446 9448 -9447 0
c Encoding variable: aux1076 with domain: int(0..2) (representing constraint ((x_00009_00009=6) + (x_00004_00009=6)))
c Both direct and order encoding.
c Var 'aux1076' order represents '0' with '9449'
c Var 'aux1076' direct represents '0' with '9449'
c Var 'aux1076' order represents '1' with '9450'
-9449 9450 0
c Var 'aux1076' direct represents '1' with '9451'
9449 -9450 9451 0
-9451 9450 0
-9451 -9449 0
c Var 'aux1076' direct represents '2' with '-9450'
9449 9451 -9450 0
c Encoding variable: aux1077 with domain: int(0..3) (representing constraint ((x_00001_00009=6) + aux1076))
c Both direct and order encoding.
c Var 'aux1077' order represents '0' with '9452'
c Var 'aux1077' direct represents '0' with '9452'
c Var 'aux1077' order represents '1' with '9453'
-9452 9453 0
c Var 'aux1077' direct represents '1' with '9454'
9452 -9453 9454 0
-9454 9453 0
-9454 -9452 0
c Var 'aux1077' order represents '2' with '9455'
-9453 9455 0
c Var 'aux1077' direct represents '2' with '9456'
9453 -9455 9456 0
-9456 9455 0
-9456 -9453 0
c Var 'aux1077' direct represents '3' with '-9455'
9452 9454 9456 -9455 0
c Encoding variable: aux1078 with domain: int(0..4) (representing constraint (aux1073 + aux1075))
c Both direct and order encoding.
c Var 'aux1078' order represents '0' with '9457'
c Var 'aux1078' direct represents '0' with '9457'
c Var 'aux1078' order represents '1' with '9458'
-9457 9458 0
c Var 'aux1078' direct represents '1' with '9459'
9457 -9458 9459 0
-9459 9458 0
-9459 -9457 0
c Var 'aux1078' order represents '2' with '9460'
-9458 9460 0
c Var 'aux1078' direct represents '2' with '9461'
9458 -9460 9461 0
-9461 9460 0
-9461 -9458 0
c Var 'aux1078' order represents '3' with '9462'
-9460 9462 0
c Var 'aux1078' direct represents '3' with '9463'
9460 -9462 9463 0
-9463 9462 0
-9463 -9460 0
c Var 'aux1078' direct represents '4' with '-9462'
9457 9459 9461 9463 -9462 0
c Encoding variable: aux1079 with domain: int(0..2) (representing constraint ((x_00003_00009=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux1079' order represents '0' with '9464'
c Var 'aux1079' direct represents '0' with '9464'
c Var 'aux1079' order represents '1' with '9465'
-9464 9465 0
c Var 'aux1079' direct represents '1' with '9466'
9464 -9465 9466 0
-9466 9465 0
-9466 -9464 0
c Var 'aux1079' direct represents '2' with '-9465'
9464 9466 -9465 0
c Encoding variable: aux1080 with domain: int(0..2) (representing constraint ((x_00007_00009=7) + (x_00008_00009=7)))
c Both direct and order encoding.
c Var 'aux1080' order represents '0' with '9467'
c Var 'aux1080' direct represents '0' with '9467'
c Var 'aux1080' order represents '1' with '9468'
-9467 9468 0
c Var 'aux1080' direct represents '1' with '9469'
9467 -9468 9469 0
-9469 9468 0
-9469 -9467 0
c Var 'aux1080' direct represents '2' with '-9468'
9467 9469 -9468 0
c Encoding variable: aux1081 with domain: int(0..2) (representing constraint ((x_00002_00009=7) + (x_00006_00009=7)))
c Both direct and order encoding.
c Var 'aux1081' order represents '0' with '9470'
c Var 'aux1081' direct represents '0' with '9470'
c Var 'aux1081' order represents '1' with '9471'
-9470 9471 0
c Var 'aux1081' direct represents '1' with '9472'
9470 -9471 9472 0
-9472 9471 0
-9472 -9470 0
c Var 'aux1081' direct represents '2' with '-9471'
9470 9472 -9471 0
c Encoding variable: aux1082 with domain: int(0..2) (representing constraint ((x_00009_00009=7) + (x_00004_00009=7)))
c Both direct and order encoding.
c Var 'aux1082' order represents '0' with '9473'
c Var 'aux1082' direct represents '0' with '9473'
c Var 'aux1082' order represents '1' with '9474'
-9473 9474 0
c Var 'aux1082' direct represents '1' with '9475'
9473 -9474 9475 0
-9475 9474 0
-9475 -9473 0
c Var 'aux1082' direct represents '2' with '-9474'
9473 9475 -9474 0
c Encoding variable: aux1083 with domain: int(0..3) (representing constraint ((x_00001_00009=7) + aux1082))
c Both direct and order encoding.
c Var 'aux1083' order represents '0' with '9476'
c Var 'aux1083' direct represents '0' with '9476'
c Var 'aux1083' order represents '1' with '9477'
-9476 9477 0
c Var 'aux1083' direct represents '1' with '9478'
9476 -9477 9478 0
-9478 9477 0
-9478 -9476 0
c Var 'aux1083' order represents '2' with '9479'
-9477 9479 0
c Var 'aux1083' direct represents '2' with '9480'
9477 -9479 9480 0
-9480 9479 0
-9480 -9477 0
c Var 'aux1083' direct represents '3' with '-9479'
9476 9478 9480 -9479 0
c Encoding variable: aux1084 with domain: int(0..4) (representing constraint (aux1079 + aux1081))
c Both direct and order encoding.
c Var 'aux1084' order represents '0' with '9481'
c Var 'aux1084' direct represents '0' with '9481'
c Var 'aux1084' order represents '1' with '9482'
-9481 9482 0
c Var 'aux1084' direct represents '1' with '9483'
9481 -9482 9483 0
-9483 9482 0
-9483 -9481 0
c Var 'aux1084' order represents '2' with '9484'
-9482 9484 0
c Var 'aux1084' direct represents '2' with '9485'
9482 -9484 9485 0
-9485 9484 0
-9485 -9482 0
c Var 'aux1084' order represents '3' with '9486'
-9484 9486 0
c Var 'aux1084' direct represents '3' with '9487'
9484 -9486 9487 0
-9487 9486 0
-9487 -9484 0
c Var 'aux1084' direct represents '4' with '-9486'
9481 9483 9485 9487 -9486 0
c Encoding variable: aux1085 with domain: int(0..2) (representing constraint ((x_00003_00009=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux1085' order represents '0' with '9488'
c Var 'aux1085' direct represents '0' with '9488'
c Var 'aux1085' order represents '1' with '9489'
-9488 9489 0
c Var 'aux1085' direct represents '1' with '9490'
9488 -9489 9490 0
-9490 9489 0
-9490 -9488 0
c Var 'aux1085' direct represents '2' with '-9489'
9488 9490 -9489 0
c Encoding variable: aux1086 with domain: int(0..2) (representing constraint ((x_00007_00009=8) + (x_00008_00009=8)))
c Both direct and order encoding.
c Var 'aux1086' order represents '0' with '9491'
c Var 'aux1086' direct represents '0' with '9491'
c Var 'aux1086' order represents '1' with '9492'
-9491 9492 0
c Var 'aux1086' direct represents '1' with '9493'
9491 -9492 9493 0
-9493 9492 0
-9493 -9491 0
c Var 'aux1086' direct represents '2' with '-9492'
9491 9493 -9492 0
c Encoding variable: aux1087 with domain: int(0..2) (representing constraint ((x_00002_00009=8) + (x_00006_00009=8)))
c Both direct and order encoding.
c Var 'aux1087' order represents '0' with '9494'
c Var 'aux1087' direct represents '0' with '9494'
c Var 'aux1087' order represents '1' with '9495'
-9494 9495 0
c Var 'aux1087' direct represents '1' with '9496'
9494 -9495 9496 0
-9496 9495 0
-9496 -9494 0
c Var 'aux1087' direct represents '2' with '-9495'
9494 9496 -9495 0
c Encoding variable: aux1088 with domain: int(0..2) (representing constraint ((x_00009_00009=8) + (x_00004_00009=8)))
c Both direct and order encoding.
c Var 'aux1088' order represents '0' with '9497'
c Var 'aux1088' direct represents '0' with '9497'
c Var 'aux1088' order represents '1' with '9498'
-9497 9498 0
c Var 'aux1088' direct represents '1' with '9499'
9497 -9498 9499 0
-9499 9498 0
-9499 -9497 0
c Var 'aux1088' direct represents '2' with '-9498'
9497 9499 -9498 0
c Encoding variable: aux1089 with domain: int(0..3) (representing constraint ((x_00001_00009=8) + aux1088))
c Both direct and order encoding.
c Var 'aux1089' order represents '0' with '9500'
c Var 'aux1089' direct represents '0' with '9500'
c Var 'aux1089' order represents '1' with '9501'
-9500 9501 0
c Var 'aux1089' direct represents '1' with '9502'
9500 -9501 9502 0
-9502 9501 0
-9502 -9500 0
c Var 'aux1089' order represents '2' with '9503'
-9501 9503 0
c Var 'aux1089' direct represents '2' with '9504'
9501 -9503 9504 0
-9504 9503 0
-9504 -9501 0
c Var 'aux1089' direct represents '3' with '-9503'
9500 9502 9504 -9503 0
c Encoding variable: aux1090 with domain: int(0..4) (representing constraint (aux1085 + aux1087))
c Both direct and order encoding.
c Var 'aux1090' order represents '0' with '9505'
c Var 'aux1090' direct represents '0' with '9505'
c Var 'aux1090' order represents '1' with '9506'
-9505 9506 0
c Var 'aux1090' direct represents '1' with '9507'
9505 -9506 9507 0
-9507 9506 0
-9507 -9505 0
c Var 'aux1090' order represents '2' with '9508'
-9506 9508 0
c Var 'aux1090' direct represents '2' with '9509'
9506 -9508 9509 0
-9509 9508 0
-9509 -9506 0
c Var 'aux1090' order represents '3' with '9510'
-9508 9510 0
c Var 'aux1090' direct represents '3' with '9511'
9508 -9510 9511 0
-9511 9510 0
-9511 -9508 0
c Var 'aux1090' direct represents '4' with '-9510'
9505 9507 9509 9511 -9510 0
c Encoding variable: aux1091 with domain: int(0..2) (representing constraint ((x_00003_00009=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux1091' order represents '0' with '9512'
c Var 'aux1091' direct represents '0' with '9512'
c Var 'aux1091' order represents '1' with '9513'
-9512 9513 0
c Var 'aux1091' direct represents '1' with '9514'
9512 -9513 9514 0
-9514 9513 0
-9514 -9512 0
c Var 'aux1091' direct represents '2' with '-9513'
9512 9514 -9513 0
c Encoding variable: aux1092 with domain: int(0..2) (representing constraint ((x_00007_00009=9) + (x_00008_00009=9)))
c Both direct and order encoding.
c Var 'aux1092' order represents '0' with '9515'
c Var 'aux1092' direct represents '0' with '9515'
c Var 'aux1092' order represents '1' with '9516'
-9515 9516 0
c Var 'aux1092' direct represents '1' with '9517'
9515 -9516 9517 0
-9517 9516 0
-9517 -9515 0
c Var 'aux1092' direct represents '2' with '-9516'
9515 9517 -9516 0
c Encoding variable: aux1093 with domain: int(0..2) (representing constraint ((x_00002_00009=9) + (x_00006_00009=9)))
c Both direct and order encoding.
c Var 'aux1093' order represents '0' with '9518'
c Var 'aux1093' direct represents '0' with '9518'
c Var 'aux1093' order represents '1' with '9519'
-9518 9519 0
c Var 'aux1093' direct represents '1' with '9520'
9518 -9519 9520 0
-9520 9519 0
-9520 -9518 0
c Var 'aux1093' direct represents '2' with '-9519'
9518 9520 -9519 0
c Encoding variable: aux1094 with domain: int(0..2) (representing constraint ((x_00009_00009=9) + (x_00004_00009=9)))
c Both direct and order encoding.
c Var 'aux1094' order represents '0' with '9521'
c Var 'aux1094' direct represents '0' with '9521'
c Var 'aux1094' order represents '1' with '9522'
-9521 9522 0
c Var 'aux1094' direct represents '1' with '9523'
9521 -9522 9523 0
-9523 9522 0
-9523 -9521 0
c Var 'aux1094' direct represents '2' with '-9522'
9521 9523 -9522 0
c Encoding variable: aux1095 with domain: int(0..3) (representing constraint ((x_00001_00009=9) + aux1094))
c Both direct and order encoding.
c Var 'aux1095' order represents '0' with '9524'
c Var 'aux1095' direct represents '0' with '9524'
c Var 'aux1095' order represents '1' with '9525'
-9524 9525 0
c Var 'aux1095' direct represents '1' with '9526'
9524 -9525 9526 0
-9526 9525 0
-9526 -9524 0
c Var 'aux1095' order represents '2' with '9527'
-9525 9527 0
c Var 'aux1095' direct represents '2' with '9528'
9525 -9527 9528 0
-9528 9527 0
-9528 -9525 0
c Var 'aux1095' direct represents '3' with '-9527'
9524 9526 9528 -9527 0
c Encoding variable: aux1096 with domain: int(0..4) (representing constraint (aux1091 + aux1093))
c Both direct and order encoding.
c Var 'aux1096' order represents '0' with '9529'
c Var 'aux1096' direct represents '0' with '9529'
c Var 'aux1096' order represents '1' with '9530'
-9529 9530 0
c Var 'aux1096' direct represents '1' with '9531'
9529 -9530 9531 0
-9531 9530 0
-9531 -9529 0
c Var 'aux1096' order represents '2' with '9532'
-9530 9532 0
c Var 'aux1096' direct represents '2' with '9533'
9530 -9532 9533 0
-9533 9532 0
-9533 -9530 0
c Var 'aux1096' order represents '3' with '9534'
-9532 9534 0
c Var 'aux1096' direct represents '3' with '9535'
9532 -9534 9535 0
-9535 9534 0
-9535 -9532 0
c Var 'aux1096' direct represents '4' with '-9534'
9529 9531 9533 9535 -9534 0
c Encoding variable: aux1097 with domain: int(0..2) (representing constraint ((x_00001_00001=1) + (x_00001_00009=1)))
c Both direct and order encoding.
c Var 'aux1097' order represents '0' with '9536'
c Var 'aux1097' direct represents '0' with '9536'
c Var 'aux1097' order represents '1' with '9537'
-9536 9537 0
c Var 'aux1097' direct represents '1' with '9538'
9536 -9537 9538 0
-9538 9537 0
-9538 -9536 0
c Var 'aux1097' direct represents '2' with '-9537'
9536 9538 -9537 0
c Encoding variable: aux1098 with domain: int(0..2) (representing constraint ((x_00001_00008=1) + (x_00001_00002=1)))
c Both direct and order encoding.
c Var 'aux1098' order represents '0' with '9539'
c Var 'aux1098' direct represents '0' with '9539'
c Var 'aux1098' order represents '1' with '9540'
-9539 9540 0
c Var 'aux1098' direct represents '1' with '9541'
9539 -9540 9541 0
-9541 9540 0
-9541 -9539 0
c Var 'aux1098' direct represents '2' with '-9540'
9539 9541 -9540 0
c Encoding variable: aux1099 with domain: int(0..2) (representing constraint ((x_00001_00007=1) + (x_00001_00004=1)))
c Both direct and order encoding.
c Var 'aux1099' order represents '0' with '9542'
c Var 'aux1099' direct represents '0' with '9542'
c Var 'aux1099' order represents '1' with '9543'
-9542 9543 0
c Var 'aux1099' direct represents '1' with '9544'
9542 -9543 9544 0
-9544 9543 0
-9544 -9542 0
c Var 'aux1099' direct represents '2' with '-9543'
9542 9544 -9543 0
c Encoding variable: aux1100 with domain: int(0..2) (representing constraint ((x_00001_00006=1) + (x_00001_00005=1)))
c Both direct and order encoding.
c Var 'aux1100' order represents '0' with '9545'
c Var 'aux1100' direct represents '0' with '9545'
c Var 'aux1100' order represents '1' with '9546'
-9545 9546 0
c Var 'aux1100' direct represents '1' with '9547'
9545 -9546 9547 0
-9547 9546 0
-9547 -9545 0
c Var 'aux1100' direct represents '2' with '-9546'
9545 9547 -9546 0
c Encoding variable: aux1101 with domain: int(0..3) (representing constraint ((x_00001_00003=1) + aux1100))
c Both direct and order encoding.
c Var 'aux1101' order represents '0' with '9548'
c Var 'aux1101' direct represents '0' with '9548'
c Var 'aux1101' order represents '1' with '9549'
-9548 9549 0
c Var 'aux1101' direct represents '1' with '9550'
9548 -9549 9550 0
-9550 9549 0
-9550 -9548 0
c Var 'aux1101' order represents '2' with '9551'
-9549 9551 0
c Var 'aux1101' direct represents '2' with '9552'
9549 -9551 9552 0
-9552 9551 0
-9552 -9549 0
c Var 'aux1101' direct represents '3' with '-9551'
9548 9550 9552 -9551 0
c Encoding variable: aux1102 with domain: int(0..4) (representing constraint (aux1097 + aux1099))
c Both direct and order encoding.
c Var 'aux1102' order represents '0' with '9553'
c Var 'aux1102' direct represents '0' with '9553'
c Var 'aux1102' order represents '1' with '9554'
-9553 9554 0
c Var 'aux1102' direct represents '1' with '9555'
9553 -9554 9555 0
-9555 9554 0
-9555 -9553 0
c Var 'aux1102' order represents '2' with '9556'
-9554 9556 0
c Var 'aux1102' direct represents '2' with '9557'
9554 -9556 9557 0
-9557 9556 0
-9557 -9554 0
c Var 'aux1102' order represents '3' with '9558'
-9556 9558 0
c Var 'aux1102' direct represents '3' with '9559'
9556 -9558 9559 0
-9559 9558 0
-9559 -9556 0
c Var 'aux1102' direct represents '4' with '-9558'
9553 9555 9557 9559 -9558 0
c Encoding variable: aux1103 with domain: int(0..2) (representing constraint ((x_00001_00001=2) + (x_00001_00009=2)))
c Both direct and order encoding.
c Var 'aux1103' order represents '0' with '9560'
c Var 'aux1103' direct represents '0' with '9560'
c Var 'aux1103' order represents '1' with '9561'
-9560 9561 0
c Var 'aux1103' direct represents '1' with '9562'
9560 -9561 9562 0
-9562 9561 0
-9562 -9560 0
c Var 'aux1103' direct represents '2' with '-9561'
9560 9562 -9561 0
c Encoding variable: aux1104 with domain: int(0..2) (representing constraint ((x_00001_00008=2) + (x_00001_00002=2)))
c Both direct and order encoding.
c Var 'aux1104' order represents '0' with '9563'
c Var 'aux1104' direct represents '0' with '9563'
c Var 'aux1104' order represents '1' with '9564'
-9563 9564 0
c Var 'aux1104' direct represents '1' with '9565'
9563 -9564 9565 0
-9565 9564 0
-9565 -9563 0
c Var 'aux1104' direct represents '2' with '-9564'
9563 9565 -9564 0
c Encoding variable: aux1105 with domain: int(0..2) (representing constraint ((x_00001_00007=2) + (x_00001_00004=2)))
c Both direct and order encoding.
c Var 'aux1105' order represents '0' with '9566'
c Var 'aux1105' direct represents '0' with '9566'
c Var 'aux1105' order represents '1' with '9567'
-9566 9567 0
c Var 'aux1105' direct represents '1' with '9568'
9566 -9567 9568 0
-9568 9567 0
-9568 -9566 0
c Var 'aux1105' direct represents '2' with '-9567'
9566 9568 -9567 0
c Encoding variable: aux1106 with domain: int(0..2) (representing constraint ((x_00001_00006=2) + (x_00001_00005=2)))
c Both direct and order encoding.
c Var 'aux1106' order represents '0' with '9569'
c Var 'aux1106' direct represents '0' with '9569'
c Var 'aux1106' order represents '1' with '9570'
-9569 9570 0
c Var 'aux1106' direct represents '1' with '9571'
9569 -9570 9571 0
-9571 9570 0
-9571 -9569 0
c Var 'aux1106' direct represents '2' with '-9570'
9569 9571 -9570 0
c Encoding variable: aux1107 with domain: int(0..3) (representing constraint ((x_00001_00003=2) + aux1106))
c Both direct and order encoding.
c Var 'aux1107' order represents '0' with '9572'
c Var 'aux1107' direct represents '0' with '9572'
c Var 'aux1107' order represents '1' with '9573'
-9572 9573 0
c Var 'aux1107' direct represents '1' with '9574'
9572 -9573 9574 0
-9574 9573 0
-9574 -9572 0
c Var 'aux1107' order represents '2' with '9575'
-9573 9575 0
c Var 'aux1107' direct represents '2' with '9576'
9573 -9575 9576 0
-9576 9575 0
-9576 -9573 0
c Var 'aux1107' direct represents '3' with '-9575'
9572 9574 9576 -9575 0
c Encoding variable: aux1108 with domain: int(0..4) (representing constraint (aux1103 + aux1105))
c Both direct and order encoding.
c Var 'aux1108' order represents '0' with '9577'
c Var 'aux1108' direct represents '0' with '9577'
c Var 'aux1108' order represents '1' with '9578'
-9577 9578 0
c Var 'aux1108' direct represents '1' with '9579'
9577 -9578 9579 0
-9579 9578 0
-9579 -9577 0
c Var 'aux1108' order represents '2' with '9580'
-9578 9580 0
c Var 'aux1108' direct represents '2' with '9581'
9578 -9580 9581 0
-9581 9580 0
-9581 -9578 0
c Var 'aux1108' order represents '3' with '9582'
-9580 9582 0
c Var 'aux1108' direct represents '3' with '9583'
9580 -9582 9583 0
-9583 9582 0
-9583 -9580 0
c Var 'aux1108' direct represents '4' with '-9582'
9577 9579 9581 9583 -9582 0
c Encoding variable: aux1109 with domain: int(0..2) (representing constraint ((x_00001_00001=3) + (x_00001_00009=3)))
c Both direct and order encoding.
c Var 'aux1109' order represents '0' with '9584'
c Var 'aux1109' direct represents '0' with '9584'
c Var 'aux1109' order represents '1' with '9585'
-9584 9585 0
c Var 'aux1109' direct represents '1' with '9586'
9584 -9585 9586 0
-9586 9585 0
-9586 -9584 0
c Var 'aux1109' direct represents '2' with '-9585'
9584 9586 -9585 0
c Encoding variable: aux1110 with domain: int(0..2) (representing constraint ((x_00001_00008=3) + (x_00001_00002=3)))
c Both direct and order encoding.
c Var 'aux1110' order represents '0' with '9587'
c Var 'aux1110' direct represents '0' with '9587'
c Var 'aux1110' order represents '1' with '9588'
-9587 9588 0
c Var 'aux1110' direct represents '1' with '9589'
9587 -9588 9589 0
-9589 9588 0
-9589 -9587 0
c Var 'aux1110' direct represents '2' with '-9588'
9587 9589 -9588 0
c Encoding variable: aux1111 with domain: int(0..2) (representing constraint ((x_00001_00007=3) + (x_00001_00004=3)))
c Both direct and order encoding.
c Var 'aux1111' order represents '0' with '9590'
c Var 'aux1111' direct represents '0' with '9590'
c Var 'aux1111' order represents '1' with '9591'
-9590 9591 0
c Var 'aux1111' direct represents '1' with '9592'
9590 -9591 9592 0
-9592 9591 0
-9592 -9590 0
c Var 'aux1111' direct represents '2' with '-9591'
9590 9592 -9591 0
c Encoding variable: aux1112 with domain: int(0..2) (representing constraint ((x_00001_00006=3) + (x_00001_00005=3)))
c Both direct and order encoding.
c Var 'aux1112' order represents '0' with '9593'
c Var 'aux1112' direct represents '0' with '9593'
c Var 'aux1112' order represents '1' with '9594'
-9593 9594 0
c Var 'aux1112' direct represents '1' with '9595'
9593 -9594 9595 0
-9595 9594 0
-9595 -9593 0
c Var 'aux1112' direct represents '2' with '-9594'
9593 9595 -9594 0
c Encoding variable: aux1113 with domain: int(0..3) (representing constraint ((x_00001_00003=3) + aux1112))
c Both direct and order encoding.
c Var 'aux1113' order represents '0' with '9596'
c Var 'aux1113' direct represents '0' with '9596'
c Var 'aux1113' order represents '1' with '9597'
-9596 9597 0
c Var 'aux1113' direct represents '1' with '9598'
9596 -9597 9598 0
-9598 9597 0
-9598 -9596 0
c Var 'aux1113' order represents '2' with '9599'
-9597 9599 0
c Var 'aux1113' direct represents '2' with '9600'
9597 -9599 9600 0
-9600 9599 0
-9600 -9597 0
c Var 'aux1113' direct represents '3' with '-9599'
9596 9598 9600 -9599 0
c Encoding variable: aux1114 with domain: int(0..4) (representing constraint (aux1109 + aux1111))
c Both direct and order encoding.
c Var 'aux1114' order represents '0' with '9601'
c Var 'aux1114' direct represents '0' with '9601'
c Var 'aux1114' order represents '1' with '9602'
-9601 9602 0
c Var 'aux1114' direct represents '1' with '9603'
9601 -9602 9603 0
-9603 9602 0
-9603 -9601 0
c Var 'aux1114' order represents '2' with '9604'
-9602 9604 0
c Var 'aux1114' direct represents '2' with '9605'
9602 -9604 9605 0
-9605 9604 0
-9605 -9602 0
c Var 'aux1114' order represents '3' with '9606'
-9604 9606 0
c Var 'aux1114' direct represents '3' with '9607'
9604 -9606 9607 0
-9607 9606 0
-9607 -9604 0
c Var 'aux1114' direct represents '4' with '-9606'
9601 9603 9605 9607 -9606 0
c Encoding variable: aux1115 with domain: int(0..2) (representing constraint ((x_00001_00001=4) + (x_00001_00009=4)))
c Both direct and order encoding.
c Var 'aux1115' order represents '0' with '9608'
c Var 'aux1115' direct represents '0' with '9608'
c Var 'aux1115' order represents '1' with '9609'
-9608 9609 0
c Var 'aux1115' direct represents '1' with '9610'
9608 -9609 9610 0
-9610 9609 0
-9610 -9608 0
c Var 'aux1115' direct represents '2' with '-9609'
9608 9610 -9609 0
c Encoding variable: aux1116 with domain: int(0..2) (representing constraint ((x_00001_00008=4) + (x_00001_00002=4)))
c Both direct and order encoding.
c Var 'aux1116' order represents '0' with '9611'
c Var 'aux1116' direct represents '0' with '9611'
c Var 'aux1116' order represents '1' with '9612'
-9611 9612 0
c Var 'aux1116' direct represents '1' with '9613'
9611 -9612 9613 0
-9613 9612 0
-9613 -9611 0
c Var 'aux1116' direct represents '2' with '-9612'
9611 9613 -9612 0
c Encoding variable: aux1117 with domain: int(0..2) (representing constraint ((x_00001_00007=4) + (x_00001_00004=4)))
c Both direct and order encoding.
c Var 'aux1117' order represents '0' with '9614'
c Var 'aux1117' direct represents '0' with '9614'
c Var 'aux1117' order represents '1' with '9615'
-9614 9615 0
c Var 'aux1117' direct represents '1' with '9616'
9614 -9615 9616 0
-9616 9615 0
-9616 -9614 0
c Var 'aux1117' direct represents '2' with '-9615'
9614 9616 -9615 0
c Encoding variable: aux1118 with domain: int(0..2) (representing constraint ((x_00001_00006=4) + (x_00001_00005=4)))
c Both direct and order encoding.
c Var 'aux1118' order represents '0' with '9617'
c Var 'aux1118' direct represents '0' with '9617'
c Var 'aux1118' order represents '1' with '9618'
-9617 9618 0
c Var 'aux1118' direct represents '1' with '9619'
9617 -9618 9619 0
-9619 9618 0
-9619 -9617 0
c Var 'aux1118' direct represents '2' with '-9618'
9617 9619 -9618 0
c Encoding variable: aux1119 with domain: int(0..3) (representing constraint ((x_00001_00003=4) + aux1118))
c Both direct and order encoding.
c Var 'aux1119' order represents '0' with '9620'
c Var 'aux1119' direct represents '0' with '9620'
c Var 'aux1119' order represents '1' with '9621'
-9620 9621 0
c Var 'aux1119' direct represents '1' with '9622'
9620 -9621 9622 0
-9622 9621 0
-9622 -9620 0
c Var 'aux1119' order represents '2' with '9623'
-9621 9623 0
c Var 'aux1119' direct represents '2' with '9624'
9621 -9623 9624 0
-9624 9623 0
-9624 -9621 0
c Var 'aux1119' direct represents '3' with '-9623'
9620 9622 9624 -9623 0
c Encoding variable: aux1120 with domain: int(0..4) (representing constraint (aux1115 + aux1117))
c Both direct and order encoding.
c Var 'aux1120' order represents '0' with '9625'
c Var 'aux1120' direct represents '0' with '9625'
c Var 'aux1120' order represents '1' with '9626'
-9625 9626 0
c Var 'aux1120' direct represents '1' with '9627'
9625 -9626 9627 0
-9627 9626 0
-9627 -9625 0
c Var 'aux1120' order represents '2' with '9628'
-9626 9628 0
c Var 'aux1120' direct represents '2' with '9629'
9626 -9628 9629 0
-9629 9628 0
-9629 -9626 0
c Var 'aux1120' order represents '3' with '9630'
-9628 9630 0
c Var 'aux1120' direct represents '3' with '9631'
9628 -9630 9631 0
-9631 9630 0
-9631 -9628 0
c Var 'aux1120' direct represents '4' with '-9630'
9625 9627 9629 9631 -9630 0
c Encoding variable: aux1121 with domain: int(0..2) (representing constraint ((x_00001_00001=5) + (x_00001_00009=5)))
c Both direct and order encoding.
c Var 'aux1121' order represents '0' with '9632'
c Var 'aux1121' direct represents '0' with '9632'
c Var 'aux1121' order represents '1' with '9633'
-9632 9633 0
c Var 'aux1121' direct represents '1' with '9634'
9632 -9633 9634 0
-9634 9633 0
-9634 -9632 0
c Var 'aux1121' direct represents '2' with '-9633'
9632 9634 -9633 0
c Encoding variable: aux1122 with domain: int(0..2) (representing constraint ((x_00001_00008=5) + (x_00001_00002=5)))
c Both direct and order encoding.
c Var 'aux1122' order represents '0' with '9635'
c Var 'aux1122' direct represents '0' with '9635'
c Var 'aux1122' order represents '1' with '9636'
-9635 9636 0
c Var 'aux1122' direct represents '1' with '9637'
9635 -9636 9637 0
-9637 9636 0
-9637 -9635 0
c Var 'aux1122' direct represents '2' with '-9636'
9635 9637 -9636 0
c Encoding variable: aux1123 with domain: int(0..2) (representing constraint ((x_00001_00007=5) + (x_00001_00004=5)))
c Both direct and order encoding.
c Var 'aux1123' order represents '0' with '9638'
c Var 'aux1123' direct represents '0' with '9638'
c Var 'aux1123' order represents '1' with '9639'
-9638 9639 0
c Var 'aux1123' direct represents '1' with '9640'
9638 -9639 9640 0
-9640 9639 0
-9640 -9638 0
c Var 'aux1123' direct represents '2' with '-9639'
9638 9640 -9639 0
c Encoding variable: aux1124 with domain: int(0..2) (representing constraint ((x_00001_00006=5) + (x_00001_00005=5)))
c Both direct and order encoding.
c Var 'aux1124' order represents '0' with '9641'
c Var 'aux1124' direct represents '0' with '9641'
c Var 'aux1124' order represents '1' with '9642'
-9641 9642 0
c Var 'aux1124' direct represents '1' with '9643'
9641 -9642 9643 0
-9643 9642 0
-9643 -9641 0
c Var 'aux1124' direct represents '2' with '-9642'
9641 9643 -9642 0
c Encoding variable: aux1125 with domain: int(0..3) (representing constraint ((x_00001_00003=5) + aux1124))
c Both direct and order encoding.
c Var 'aux1125' order represents '0' with '9644'
c Var 'aux1125' direct represents '0' with '9644'
c Var 'aux1125' order represents '1' with '9645'
-9644 9645 0
c Var 'aux1125' direct represents '1' with '9646'
9644 -9645 9646 0
-9646 9645 0
-9646 -9644 0
c Var 'aux1125' order represents '2' with '9647'
-9645 9647 0
c Var 'aux1125' direct represents '2' with '9648'
9645 -9647 9648 0
-9648 9647 0
-9648 -9645 0
c Var 'aux1125' direct represents '3' with '-9647'
9644 9646 9648 -9647 0
c Encoding variable: aux1126 with domain: int(0..4) (representing constraint (aux1121 + aux1123))
c Both direct and order encoding.
c Var 'aux1126' order represents '0' with '9649'
c Var 'aux1126' direct represents '0' with '9649'
c Var 'aux1126' order represents '1' with '9650'
-9649 9650 0
c Var 'aux1126' direct represents '1' with '9651'
9649 -9650 9651 0
-9651 9650 0
-9651 -9649 0
c Var 'aux1126' order represents '2' with '9652'
-9650 9652 0
c Var 'aux1126' direct represents '2' with '9653'
9650 -9652 9653 0
-9653 9652 0
-9653 -9650 0
c Var 'aux1126' order represents '3' with '9654'
-9652 9654 0
c Var 'aux1126' direct represents '3' with '9655'
9652 -9654 9655 0
-9655 9654 0
-9655 -9652 0
c Var 'aux1126' direct represents '4' with '-9654'
9649 9651 9653 9655 -9654 0
c Encoding variable: aux1127 with domain: int(0..2) (representing constraint ((x_00001_00001=6) + (x_00001_00009=6)))
c Both direct and order encoding.
c Var 'aux1127' order represents '0' with '9656'
c Var 'aux1127' direct represents '0' with '9656'
c Var 'aux1127' order represents '1' with '9657'
-9656 9657 0
c Var 'aux1127' direct represents '1' with '9658'
9656 -9657 9658 0
-9658 9657 0
-9658 -9656 0
c Var 'aux1127' direct represents '2' with '-9657'
9656 9658 -9657 0
c Encoding variable: aux1128 with domain: int(0..2) (representing constraint ((x_00001_00008=6) + (x_00001_00002=6)))
c Both direct and order encoding.
c Var 'aux1128' order represents '0' with '9659'
c Var 'aux1128' direct represents '0' with '9659'
c Var 'aux1128' order represents '1' with '9660'
-9659 9660 0
c Var 'aux1128' direct represents '1' with '9661'
9659 -9660 9661 0
-9661 9660 0
-9661 -9659 0
c Var 'aux1128' direct represents '2' with '-9660'
9659 9661 -9660 0
c Encoding variable: aux1129 with domain: int(0..2) (representing constraint ((x_00001_00007=6) + (x_00001_00004=6)))
c Both direct and order encoding.
c Var 'aux1129' order represents '0' with '9662'
c Var 'aux1129' direct represents '0' with '9662'
c Var 'aux1129' order represents '1' with '9663'
-9662 9663 0
c Var 'aux1129' direct represents '1' with '9664'
9662 -9663 9664 0
-9664 9663 0
-9664 -9662 0
c Var 'aux1129' direct represents '2' with '-9663'
9662 9664 -9663 0
c Encoding variable: aux1130 with domain: int(0..2) (representing constraint ((x_00001_00006=6) + (x_00001_00005=6)))
c Both direct and order encoding.
c Var 'aux1130' order represents '0' with '9665'
c Var 'aux1130' direct represents '0' with '9665'
c Var 'aux1130' order represents '1' with '9666'
-9665 9666 0
c Var 'aux1130' direct represents '1' with '9667'
9665 -9666 9667 0
-9667 9666 0
-9667 -9665 0
c Var 'aux1130' direct represents '2' with '-9666'
9665 9667 -9666 0
c Encoding variable: aux1131 with domain: int(0..3) (representing constraint ((x_00001_00003=6) + aux1130))
c Both direct and order encoding.
c Var 'aux1131' order represents '0' with '9668'
c Var 'aux1131' direct represents '0' with '9668'
c Var 'aux1131' order represents '1' with '9669'
-9668 9669 0
c Var 'aux1131' direct represents '1' with '9670'
9668 -9669 9670 0
-9670 9669 0
-9670 -9668 0
c Var 'aux1131' order represents '2' with '9671'
-9669 9671 0
c Var 'aux1131' direct represents '2' with '9672'
9669 -9671 9672 0
-9672 9671 0
-9672 -9669 0
c Var 'aux1131' direct represents '3' with '-9671'
9668 9670 9672 -9671 0
c Encoding variable: aux1132 with domain: int(0..4) (representing constraint (aux1127 + aux1129))
c Both direct and order encoding.
c Var 'aux1132' order represents '0' with '9673'
c Var 'aux1132' direct represents '0' with '9673'
c Var 'aux1132' order represents '1' with '9674'
-9673 9674 0
c Var 'aux1132' direct represents '1' with '9675'
9673 -9674 9675 0
-9675 9674 0
-9675 -9673 0
c Var 'aux1132' order represents '2' with '9676'
-9674 9676 0
c Var 'aux1132' direct represents '2' with '9677'
9674 -9676 9677 0
-9677 9676 0
-9677 -9674 0
c Var 'aux1132' order represents '3' with '9678'
-9676 9678 0
c Var 'aux1132' direct represents '3' with '9679'
9676 -9678 9679 0
-9679 9678 0
-9679 -9676 0
c Var 'aux1132' direct represents '4' with '-9678'
9673 9675 9677 9679 -9678 0
c Encoding variable: aux1133 with domain: int(0..2) (representing constraint ((x_00001_00001=7) + (x_00001_00009=7)))
c Both direct and order encoding.
c Var 'aux1133' order represents '0' with '9680'
c Var 'aux1133' direct represents '0' with '9680'
c Var 'aux1133' order represents '1' with '9681'
-9680 9681 0
c Var 'aux1133' direct represents '1' with '9682'
9680 -9681 9682 0
-9682 9681 0
-9682 -9680 0
c Var 'aux1133' direct represents '2' with '-9681'
9680 9682 -9681 0
c Encoding variable: aux1134 with domain: int(0..2) (representing constraint ((x_00001_00008=7) + (x_00001_00002=7)))
c Both direct and order encoding.
c Var 'aux1134' order represents '0' with '9683'
c Var 'aux1134' direct represents '0' with '9683'
c Var 'aux1134' order represents '1' with '9684'
-9683 9684 0
c Var 'aux1134' direct represents '1' with '9685'
9683 -9684 9685 0
-9685 9684 0
-9685 -9683 0
c Var 'aux1134' direct represents '2' with '-9684'
9683 9685 -9684 0
c Encoding variable: aux1135 with domain: int(0..2) (representing constraint ((x_00001_00007=7) + (x_00001_00004=7)))
c Both direct and order encoding.
c Var 'aux1135' order represents '0' with '9686'
c Var 'aux1135' direct represents '0' with '9686'
c Var 'aux1135' order represents '1' with '9687'
-9686 9687 0
c Var 'aux1135' direct represents '1' with '9688'
9686 -9687 9688 0
-9688 9687 0
-9688 -9686 0
c Var 'aux1135' direct represents '2' with '-9687'
9686 9688 -9687 0
c Encoding variable: aux1136 with domain: int(0..2) (representing constraint ((x_00001_00006=7) + (x_00001_00005=7)))
c Both direct and order encoding.
c Var 'aux1136' order represents '0' with '9689'
c Var 'aux1136' direct represents '0' with '9689'
c Var 'aux1136' order represents '1' with '9690'
-9689 9690 0
c Var 'aux1136' direct represents '1' with '9691'
9689 -9690 9691 0
-9691 9690 0
-9691 -9689 0
c Var 'aux1136' direct represents '2' with '-9690'
9689 9691 -9690 0
c Encoding variable: aux1137 with domain: int(0..3) (representing constraint ((x_00001_00003=7) + aux1136))
c Both direct and order encoding.
c Var 'aux1137' order represents '0' with '9692'
c Var 'aux1137' direct represents '0' with '9692'
c Var 'aux1137' order represents '1' with '9693'
-9692 9693 0
c Var 'aux1137' direct represents '1' with '9694'
9692 -9693 9694 0
-9694 9693 0
-9694 -9692 0
c Var 'aux1137' order represents '2' with '9695'
-9693 9695 0
c Var 'aux1137' direct represents '2' with '9696'
9693 -9695 9696 0
-9696 9695 0
-9696 -9693 0
c Var 'aux1137' direct represents '3' with '-9695'
9692 9694 9696 -9695 0
c Encoding variable: aux1138 with domain: int(0..4) (representing constraint (aux1133 + aux1135))
c Both direct and order encoding.
c Var 'aux1138' order represents '0' with '9697'
c Var 'aux1138' direct represents '0' with '9697'
c Var 'aux1138' order represents '1' with '9698'
-9697 9698 0
c Var 'aux1138' direct represents '1' with '9699'
9697 -9698 9699 0
-9699 9698 0
-9699 -9697 0
c Var 'aux1138' order represents '2' with '9700'
-9698 9700 0
c Var 'aux1138' direct represents '2' with '9701'
9698 -9700 9701 0
-9701 9700 0
-9701 -9698 0
c Var 'aux1138' order represents '3' with '9702'
-9700 9702 0
c Var 'aux1138' direct represents '3' with '9703'
9700 -9702 9703 0
-9703 9702 0
-9703 -9700 0
c Var 'aux1138' direct represents '4' with '-9702'
9697 9699 9701 9703 -9702 0
c Encoding variable: aux1139 with domain: int(0..2) (representing constraint ((x_00001_00001=8) + (x_00001_00009=8)))
c Both direct and order encoding.
c Var 'aux1139' order represents '0' with '9704'
c Var 'aux1139' direct represents '0' with '9704'
c Var 'aux1139' order represents '1' with '9705'
-9704 9705 0
c Var 'aux1139' direct represents '1' with '9706'
9704 -9705 9706 0
-9706 9705 0
-9706 -9704 0
c Var 'aux1139' direct represents '2' with '-9705'
9704 9706 -9705 0
c Encoding variable: aux1140 with domain: int(0..2) (representing constraint ((x_00001_00008=8) + (x_00001_00002=8)))
c Both direct and order encoding.
c Var 'aux1140' order represents '0' with '9707'
c Var 'aux1140' direct represents '0' with '9707'
c Var 'aux1140' order represents '1' with '9708'
-9707 9708 0
c Var 'aux1140' direct represents '1' with '9709'
9707 -9708 9709 0
-9709 9708 0
-9709 -9707 0
c Var 'aux1140' direct represents '2' with '-9708'
9707 9709 -9708 0
c Encoding variable: aux1141 with domain: int(0..2) (representing constraint ((x_00001_00007=8) + (x_00001_00004=8)))
c Both direct and order encoding.
c Var 'aux1141' order represents '0' with '9710'
c Var 'aux1141' direct represents '0' with '9710'
c Var 'aux1141' order represents '1' with '9711'
-9710 9711 0
c Var 'aux1141' direct represents '1' with '9712'
9710 -9711 9712 0
-9712 9711 0
-9712 -9710 0
c Var 'aux1141' direct represents '2' with '-9711'
9710 9712 -9711 0
c Encoding variable: aux1142 with domain: int(0..2) (representing constraint ((x_00001_00006=8) + (x_00001_00005=8)))
c Both direct and order encoding.
c Var 'aux1142' order represents '0' with '9713'
c Var 'aux1142' direct represents '0' with '9713'
c Var 'aux1142' order represents '1' with '9714'
-9713 9714 0
c Var 'aux1142' direct represents '1' with '9715'
9713 -9714 9715 0
-9715 9714 0
-9715 -9713 0
c Var 'aux1142' direct represents '2' with '-9714'
9713 9715 -9714 0
c Encoding variable: aux1143 with domain: int(0..3) (representing constraint ((x_00001_00003=8) + aux1142))
c Both direct and order encoding.
c Var 'aux1143' order represents '0' with '9716'
c Var 'aux1143' direct represents '0' with '9716'
c Var 'aux1143' order represents '1' with '9717'
-9716 9717 0
c Var 'aux1143' direct represents '1' with '9718'
9716 -9717 9718 0
-9718 9717 0
-9718 -9716 0
c Var 'aux1143' order represents '2' with '9719'
-9717 9719 0
c Var 'aux1143' direct represents '2' with '9720'
9717 -9719 9720 0
-9720 9719 0
-9720 -9717 0
c Var 'aux1143' direct represents '3' with '-9719'
9716 9718 9720 -9719 0
c Encoding variable: aux1144 with domain: int(0..4) (representing constraint (aux1139 + aux1141))
c Both direct and order encoding.
c Var 'aux1144' order represents '0' with '9721'
c Var 'aux1144' direct represents '0' with '9721'
c Var 'aux1144' order represents '1' with '9722'
-9721 9722 0
c Var 'aux1144' direct represents '1' with '9723'
9721 -9722 9723 0
-9723 9722 0
-9723 -9721 0
c Var 'aux1144' order represents '2' with '9724'
-9722 9724 0
c Var 'aux1144' direct represents '2' with '9725'
9722 -9724 9725 0
-9725 9724 0
-9725 -9722 0
c Var 'aux1144' order represents '3' with '9726'
-9724 9726 0
c Var 'aux1144' direct represents '3' with '9727'
9724 -9726 9727 0
-9727 9726 0
-9727 -9724 0
c Var 'aux1144' direct represents '4' with '-9726'
9721 9723 9725 9727 -9726 0
c Encoding variable: aux1145 with domain: int(0..2) (representing constraint ((x_00001_00001=9) + (x_00001_00009=9)))
c Both direct and order encoding.
c Var 'aux1145' order represents '0' with '9728'
c Var 'aux1145' direct represents '0' with '9728'
c Var 'aux1145' order represents '1' with '9729'
-9728 9729 0
c Var 'aux1145' direct represents '1' with '9730'
9728 -9729 9730 0
-9730 9729 0
-9730 -9728 0
c Var 'aux1145' direct represents '2' with '-9729'
9728 9730 -9729 0
c Encoding variable: aux1146 with domain: int(0..2) (representing constraint ((x_00001_00008=9) + (x_00001_00002=9)))
c Both direct and order encoding.
c Var 'aux1146' order represents '0' with '9731'
c Var 'aux1146' direct represents '0' with '9731'
c Var 'aux1146' order represents '1' with '9732'
-9731 9732 0
c Var 'aux1146' direct represents '1' with '9733'
9731 -9732 9733 0
-9733 9732 0
-9733 -9731 0
c Var 'aux1146' direct represents '2' with '-9732'
9731 9733 -9732 0
c Encoding variable: aux1147 with domain: int(0..2) (representing constraint ((x_00001_00007=9) + (x_00001_00004=9)))
c Both direct and order encoding.
c Var 'aux1147' order represents '0' with '9734'
c Var 'aux1147' direct represents '0' with '9734'
c Var 'aux1147' order represents '1' with '9735'
-9734 9735 0
c Var 'aux1147' direct represents '1' with '9736'
9734 -9735 9736 0
-9736 9735 0
-9736 -9734 0
c Var 'aux1147' direct represents '2' with '-9735'
9734 9736 -9735 0
c Encoding variable: aux1148 with domain: int(0..2) (representing constraint ((x_00001_00006=9) + (x_00001_00005=9)))
c Both direct and order encoding.
c Var 'aux1148' order represents '0' with '9737'
c Var 'aux1148' direct represents '0' with '9737'
c Var 'aux1148' order represents '1' with '9738'
-9737 9738 0
c Var 'aux1148' direct represents '1' with '9739'
9737 -9738 9739 0
-9739 9738 0
-9739 -9737 0
c Var 'aux1148' direct represents '2' with '-9738'
9737 9739 -9738 0
c Encoding variable: aux1149 with domain: int(0..3) (representing constraint ((x_00001_00003=9) + aux1148))
c Both direct and order encoding.
c Var 'aux1149' order represents '0' with '9740'
c Var 'aux1149' direct represents '0' with '9740'
c Var 'aux1149' order represents '1' with '9741'
-9740 9741 0
c Var 'aux1149' direct represents '1' with '9742'
9740 -9741 9742 0
-9742 9741 0
-9742 -9740 0
c Var 'aux1149' order represents '2' with '9743'
-9741 9743 0
c Var 'aux1149' direct represents '2' with '9744'
9741 -9743 9744 0
-9744 9743 0
-9744 -9741 0
c Var 'aux1149' direct represents '3' with '-9743'
9740 9742 9744 -9743 0
c Encoding variable: aux1150 with domain: int(0..4) (representing constraint (aux1145 + aux1147))
c Both direct and order encoding.
c Var 'aux1150' order represents '0' with '9745'
c Var 'aux1150' direct represents '0' with '9745'
c Var 'aux1150' order represents '1' with '9746'
-9745 9746 0
c Var 'aux1150' direct represents '1' with '9747'
9745 -9746 9747 0
-9747 9746 0
-9747 -9745 0
c Var 'aux1150' order represents '2' with '9748'
-9746 9748 0
c Var 'aux1150' direct represents '2' with '9749'
9746 -9748 9749 0
-9749 9748 0
-9749 -9746 0
c Var 'aux1150' order represents '3' with '9750'
-9748 9750 0
c Var 'aux1150' direct represents '3' with '9751'
9748 -9750 9751 0
-9751 9750 0
-9751 -9748 0
c Var 'aux1150' direct represents '4' with '-9750'
9745 9747 9749 9751 -9750 0
c Encoding variable: aux1151 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00002_00009=1)))
c Both direct and order encoding.
c Var 'aux1151' order represents '0' with '9752'
c Var 'aux1151' direct represents '0' with '9752'
c Var 'aux1151' order represents '1' with '9753'
-9752 9753 0
c Var 'aux1151' direct represents '1' with '9754'
9752 -9753 9754 0
-9754 9753 0
-9754 -9752 0
c Var 'aux1151' direct represents '2' with '-9753'
9752 9754 -9753 0
c Encoding variable: aux1152 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00002_00002=1)))
c Both direct and order encoding.
c Var 'aux1152' order represents '0' with '9755'
c Var 'aux1152' direct represents '0' with '9755'
c Var 'aux1152' order represents '1' with '9756'
-9755 9756 0
c Var 'aux1152' direct represents '1' with '9757'
9755 -9756 9757 0
-9757 9756 0
-9757 -9755 0
c Var 'aux1152' direct represents '2' with '-9756'
9755 9757 -9756 0
c Encoding variable: aux1153 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00002_00004=1)))
c Both direct and order encoding.
c Var 'aux1153' order represents '0' with '9758'
c Var 'aux1153' direct represents '0' with '9758'
c Var 'aux1153' order represents '1' with '9759'
-9758 9759 0
c Var 'aux1153' direct represents '1' with '9760'
9758 -9759 9760 0
-9760 9759 0
-9760 -9758 0
c Var 'aux1153' direct represents '2' with '-9759'
9758 9760 -9759 0
c Encoding variable: aux1154 with domain: int(0..2) (representing constraint ((x_00002_00006=1) + (x_00002_00005=1)))
c Both direct and order encoding.
c Var 'aux1154' order represents '0' with '9761'
c Var 'aux1154' direct represents '0' with '9761'
c Var 'aux1154' order represents '1' with '9762'
-9761 9762 0
c Var 'aux1154' direct represents '1' with '9763'
9761 -9762 9763 0
-9763 9762 0
-9763 -9761 0
c Var 'aux1154' direct represents '2' with '-9762'
9761 9763 -9762 0
c Encoding variable: aux1155 with domain: int(0..3) (representing constraint ((x_00002_00003=1) + aux1154))
c Both direct and order encoding.
c Var 'aux1155' order represents '0' with '9764'
c Var 'aux1155' direct represents '0' with '9764'
c Var 'aux1155' order represents '1' with '9765'
-9764 9765 0
c Var 'aux1155' direct represents '1' with '9766'
9764 -9765 9766 0
-9766 9765 0
-9766 -9764 0
c Var 'aux1155' order represents '2' with '9767'
-9765 9767 0
c Var 'aux1155' direct represents '2' with '9768'
9765 -9767 9768 0
-9768 9767 0
-9768 -9765 0
c Var 'aux1155' direct represents '3' with '-9767'
9764 9766 9768 -9767 0
c Encoding variable: aux1156 with domain: int(0..4) (representing constraint (aux1151 + aux1153))
c Both direct and order encoding.
c Var 'aux1156' order represents '0' with '9769'
c Var 'aux1156' direct represents '0' with '9769'
c Var 'aux1156' order represents '1' with '9770'
-9769 9770 0
c Var 'aux1156' direct represents '1' with '9771'
9769 -9770 9771 0
-9771 9770 0
-9771 -9769 0
c Var 'aux1156' order represents '2' with '9772'
-9770 9772 0
c Var 'aux1156' direct represents '2' with '9773'
9770 -9772 9773 0
-9773 9772 0
-9773 -9770 0
c Var 'aux1156' order represents '3' with '9774'
-9772 9774 0
c Var 'aux1156' direct represents '3' with '9775'
9772 -9774 9775 0
-9775 9774 0
-9775 -9772 0
c Var 'aux1156' direct represents '4' with '-9774'
9769 9771 9773 9775 -9774 0
c Encoding variable: aux1157 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00002_00009=2)))
c Both direct and order encoding.
c Var 'aux1157' order represents '0' with '9776'
c Var 'aux1157' direct represents '0' with '9776'
c Var 'aux1157' order represents '1' with '9777'
-9776 9777 0
c Var 'aux1157' direct represents '1' with '9778'
9776 -9777 9778 0
-9778 9777 0
-9778 -9776 0
c Var 'aux1157' direct represents '2' with '-9777'
9776 9778 -9777 0
c Encoding variable: aux1158 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00002_00002=2)))
c Both direct and order encoding.
c Var 'aux1158' order represents '0' with '9779'
c Var 'aux1158' direct represents '0' with '9779'
c Var 'aux1158' order represents '1' with '9780'
-9779 9780 0
c Var 'aux1158' direct represents '1' with '9781'
9779 -9780 9781 0
-9781 9780 0
-9781 -9779 0
c Var 'aux1158' direct represents '2' with '-9780'
9779 9781 -9780 0
c Encoding variable: aux1159 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00002_00004=2)))
c Both direct and order encoding.
c Var 'aux1159' order represents '0' with '9782'
c Var 'aux1159' direct represents '0' with '9782'
c Var 'aux1159' order represents '1' with '9783'
-9782 9783 0
c Var 'aux1159' direct represents '1' with '9784'
9782 -9783 9784 0
-9784 9783 0
-9784 -9782 0
c Var 'aux1159' direct represents '2' with '-9783'
9782 9784 -9783 0
c Encoding variable: aux1160 with domain: int(0..2) (representing constraint ((x_00002_00006=2) + (x_00002_00005=2)))
c Both direct and order encoding.
c Var 'aux1160' order represents '0' with '9785'
c Var 'aux1160' direct represents '0' with '9785'
c Var 'aux1160' order represents '1' with '9786'
-9785 9786 0
c Var 'aux1160' direct represents '1' with '9787'
9785 -9786 9787 0
-9787 9786 0
-9787 -9785 0
c Var 'aux1160' direct represents '2' with '-9786'
9785 9787 -9786 0
c Encoding variable: aux1161 with domain: int(0..3) (representing constraint ((x_00002_00003=2) + aux1160))
c Both direct and order encoding.
c Var 'aux1161' order represents '0' with '9788'
c Var 'aux1161' direct represents '0' with '9788'
c Var 'aux1161' order represents '1' with '9789'
-9788 9789 0
c Var 'aux1161' direct represents '1' with '9790'
9788 -9789 9790 0
-9790 9789 0
-9790 -9788 0
c Var 'aux1161' order represents '2' with '9791'
-9789 9791 0
c Var 'aux1161' direct represents '2' with '9792'
9789 -9791 9792 0
-9792 9791 0
-9792 -9789 0
c Var 'aux1161' direct represents '3' with '-9791'
9788 9790 9792 -9791 0
c Encoding variable: aux1162 with domain: int(0..4) (representing constraint (aux1157 + aux1159))
c Both direct and order encoding.
c Var 'aux1162' order represents '0' with '9793'
c Var 'aux1162' direct represents '0' with '9793'
c Var 'aux1162' order represents '1' with '9794'
-9793 9794 0
c Var 'aux1162' direct represents '1' with '9795'
9793 -9794 9795 0
-9795 9794 0
-9795 -9793 0
c Var 'aux1162' order represents '2' with '9796'
-9794 9796 0
c Var 'aux1162' direct represents '2' with '9797'
9794 -9796 9797 0
-9797 9796 0
-9797 -9794 0
c Var 'aux1162' order represents '3' with '9798'
-9796 9798 0
c Var 'aux1162' direct represents '3' with '9799'
9796 -9798 9799 0
-9799 9798 0
-9799 -9796 0
c Var 'aux1162' direct represents '4' with '-9798'
9793 9795 9797 9799 -9798 0
c Encoding variable: aux1163 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00002_00009=3)))
c Both direct and order encoding.
c Var 'aux1163' order represents '0' with '9800'
c Var 'aux1163' direct represents '0' with '9800'
c Var 'aux1163' order represents '1' with '9801'
-9800 9801 0
c Var 'aux1163' direct represents '1' with '9802'
9800 -9801 9802 0
-9802 9801 0
-9802 -9800 0
c Var 'aux1163' direct represents '2' with '-9801'
9800 9802 -9801 0
c Encoding variable: aux1164 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00002_00002=3)))
c Both direct and order encoding.
c Var 'aux1164' order represents '0' with '9803'
c Var 'aux1164' direct represents '0' with '9803'
c Var 'aux1164' order represents '1' with '9804'
-9803 9804 0
c Var 'aux1164' direct represents '1' with '9805'
9803 -9804 9805 0
-9805 9804 0
-9805 -9803 0
c Var 'aux1164' direct represents '2' with '-9804'
9803 9805 -9804 0
c Encoding variable: aux1165 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00002_00004=3)))
c Both direct and order encoding.
c Var 'aux1165' order represents '0' with '9806'
c Var 'aux1165' direct represents '0' with '9806'
c Var 'aux1165' order represents '1' with '9807'
-9806 9807 0
c Var 'aux1165' direct represents '1' with '9808'
9806 -9807 9808 0
-9808 9807 0
-9808 -9806 0
c Var 'aux1165' direct represents '2' with '-9807'
9806 9808 -9807 0
c Encoding variable: aux1166 with domain: int(0..2) (representing constraint ((x_00002_00006=3) + (x_00002_00005=3)))
c Both direct and order encoding.
c Var 'aux1166' order represents '0' with '9809'
c Var 'aux1166' direct represents '0' with '9809'
c Var 'aux1166' order represents '1' with '9810'
-9809 9810 0
c Var 'aux1166' direct represents '1' with '9811'
9809 -9810 9811 0
-9811 9810 0
-9811 -9809 0
c Var 'aux1166' direct represents '2' with '-9810'
9809 9811 -9810 0
c Encoding variable: aux1167 with domain: int(0..3) (representing constraint ((x_00002_00003=3) + aux1166))
c Both direct and order encoding.
c Var 'aux1167' order represents '0' with '9812'
c Var 'aux1167' direct represents '0' with '9812'
c Var 'aux1167' order represents '1' with '9813'
-9812 9813 0
c Var 'aux1167' direct represents '1' with '9814'
9812 -9813 9814 0
-9814 9813 0
-9814 -9812 0
c Var 'aux1167' order represents '2' with '9815'
-9813 9815 0
c Var 'aux1167' direct represents '2' with '9816'
9813 -9815 9816 0
-9816 9815 0
-9816 -9813 0
c Var 'aux1167' direct represents '3' with '-9815'
9812 9814 9816 -9815 0
c Encoding variable: aux1168 with domain: int(0..4) (representing constraint (aux1163 + aux1165))
c Both direct and order encoding.
c Var 'aux1168' order represents '0' with '9817'
c Var 'aux1168' direct represents '0' with '9817'
c Var 'aux1168' order represents '1' with '9818'
-9817 9818 0
c Var 'aux1168' direct represents '1' with '9819'
9817 -9818 9819 0
-9819 9818 0
-9819 -9817 0
c Var 'aux1168' order represents '2' with '9820'
-9818 9820 0
c Var 'aux1168' direct represents '2' with '9821'
9818 -9820 9821 0
-9821 9820 0
-9821 -9818 0
c Var 'aux1168' order represents '3' with '9822'
-9820 9822 0
c Var 'aux1168' direct represents '3' with '9823'
9820 -9822 9823 0
-9823 9822 0
-9823 -9820 0
c Var 'aux1168' direct represents '4' with '-9822'
9817 9819 9821 9823 -9822 0
c Encoding variable: aux1169 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00002_00009=4)))
c Both direct and order encoding.
c Var 'aux1169' order represents '0' with '9824'
c Var 'aux1169' direct represents '0' with '9824'
c Var 'aux1169' order represents '1' with '9825'
-9824 9825 0
c Var 'aux1169' direct represents '1' with '9826'
9824 -9825 9826 0
-9826 9825 0
-9826 -9824 0
c Var 'aux1169' direct represents '2' with '-9825'
9824 9826 -9825 0
c Encoding variable: aux1170 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00002_00002=4)))
c Both direct and order encoding.
c Var 'aux1170' order represents '0' with '9827'
c Var 'aux1170' direct represents '0' with '9827'
c Var 'aux1170' order represents '1' with '9828'
-9827 9828 0
c Var 'aux1170' direct represents '1' with '9829'
9827 -9828 9829 0
-9829 9828 0
-9829 -9827 0
c Var 'aux1170' direct represents '2' with '-9828'
9827 9829 -9828 0
c Encoding variable: aux1171 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00002_00004=4)))
c Both direct and order encoding.
c Var 'aux1171' order represents '0' with '9830'
c Var 'aux1171' direct represents '0' with '9830'
c Var 'aux1171' order represents '1' with '9831'
-9830 9831 0
c Var 'aux1171' direct represents '1' with '9832'
9830 -9831 9832 0
-9832 9831 0
-9832 -9830 0
c Var 'aux1171' direct represents '2' with '-9831'
9830 9832 -9831 0
c Encoding variable: aux1172 with domain: int(0..2) (representing constraint ((x_00002_00006=4) + (x_00002_00005=4)))
c Both direct and order encoding.
c Var 'aux1172' order represents '0' with '9833'
c Var 'aux1172' direct represents '0' with '9833'
c Var 'aux1172' order represents '1' with '9834'
-9833 9834 0
c Var 'aux1172' direct represents '1' with '9835'
9833 -9834 9835 0
-9835 9834 0
-9835 -9833 0
c Var 'aux1172' direct represents '2' with '-9834'
9833 9835 -9834 0
c Encoding variable: aux1173 with domain: int(0..3) (representing constraint ((x_00002_00003=4) + aux1172))
c Both direct and order encoding.
c Var 'aux1173' order represents '0' with '9836'
c Var 'aux1173' direct represents '0' with '9836'
c Var 'aux1173' order represents '1' with '9837'
-9836 9837 0
c Var 'aux1173' direct represents '1' with '9838'
9836 -9837 9838 0
-9838 9837 0
-9838 -9836 0
c Var 'aux1173' order represents '2' with '9839'
-9837 9839 0
c Var 'aux1173' direct represents '2' with '9840'
9837 -9839 9840 0
-9840 9839 0
-9840 -9837 0
c Var 'aux1173' direct represents '3' with '-9839'
9836 9838 9840 -9839 0
c Encoding variable: aux1174 with domain: int(0..4) (representing constraint (aux1169 + aux1171))
c Both direct and order encoding.
c Var 'aux1174' order represents '0' with '9841'
c Var 'aux1174' direct represents '0' with '9841'
c Var 'aux1174' order represents '1' with '9842'
-9841 9842 0
c Var 'aux1174' direct represents '1' with '9843'
9841 -9842 9843 0
-9843 9842 0
-9843 -9841 0
c Var 'aux1174' order represents '2' with '9844'
-9842 9844 0
c Var 'aux1174' direct represents '2' with '9845'
9842 -9844 9845 0
-9845 9844 0
-9845 -9842 0
c Var 'aux1174' order represents '3' with '9846'
-9844 9846 0
c Var 'aux1174' direct represents '3' with '9847'
9844 -9846 9847 0
-9847 9846 0
-9847 -9844 0
c Var 'aux1174' direct represents '4' with '-9846'
9841 9843 9845 9847 -9846 0
c Encoding variable: aux1175 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00002_00009=5)))
c Both direct and order encoding.
c Var 'aux1175' order represents '0' with '9848'
c Var 'aux1175' direct represents '0' with '9848'
c Var 'aux1175' order represents '1' with '9849'
-9848 9849 0
c Var 'aux1175' direct represents '1' with '9850'
9848 -9849 9850 0
-9850 9849 0
-9850 -9848 0
c Var 'aux1175' direct represents '2' with '-9849'
9848 9850 -9849 0
c Encoding variable: aux1176 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00002_00002=5)))
c Both direct and order encoding.
c Var 'aux1176' order represents '0' with '9851'
c Var 'aux1176' direct represents '0' with '9851'
c Var 'aux1176' order represents '1' with '9852'
-9851 9852 0
c Var 'aux1176' direct represents '1' with '9853'
9851 -9852 9853 0
-9853 9852 0
-9853 -9851 0
c Var 'aux1176' direct represents '2' with '-9852'
9851 9853 -9852 0
c Encoding variable: aux1177 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00002_00004=5)))
c Both direct and order encoding.
c Var 'aux1177' order represents '0' with '9854'
c Var 'aux1177' direct represents '0' with '9854'
c Var 'aux1177' order represents '1' with '9855'
-9854 9855 0
c Var 'aux1177' direct represents '1' with '9856'
9854 -9855 9856 0
-9856 9855 0
-9856 -9854 0
c Var 'aux1177' direct represents '2' with '-9855'
9854 9856 -9855 0
c Encoding variable: aux1178 with domain: int(0..2) (representing constraint ((x_00002_00006=5) + (x_00002_00005=5)))
c Both direct and order encoding.
c Var 'aux1178' order represents '0' with '9857'
c Var 'aux1178' direct represents '0' with '9857'
c Var 'aux1178' order represents '1' with '9858'
-9857 9858 0
c Var 'aux1178' direct represents '1' with '9859'
9857 -9858 9859 0
-9859 9858 0
-9859 -9857 0
c Var 'aux1178' direct represents '2' with '-9858'
9857 9859 -9858 0
c Encoding variable: aux1179 with domain: int(0..3) (representing constraint ((x_00002_00003=5) + aux1178))
c Both direct and order encoding.
c Var 'aux1179' order represents '0' with '9860'
c Var 'aux1179' direct represents '0' with '9860'
c Var 'aux1179' order represents '1' with '9861'
-9860 9861 0
c Var 'aux1179' direct represents '1' with '9862'
9860 -9861 9862 0
-9862 9861 0
-9862 -9860 0
c Var 'aux1179' order represents '2' with '9863'
-9861 9863 0
c Var 'aux1179' direct represents '2' with '9864'
9861 -9863 9864 0
-9864 9863 0
-9864 -9861 0
c Var 'aux1179' direct represents '3' with '-9863'
9860 9862 9864 -9863 0
c Encoding variable: aux1180 with domain: int(0..4) (representing constraint (aux1175 + aux1177))
c Both direct and order encoding.
c Var 'aux1180' order represents '0' with '9865'
c Var 'aux1180' direct represents '0' with '9865'
c Var 'aux1180' order represents '1' with '9866'
-9865 9866 0
c Var 'aux1180' direct represents '1' with '9867'
9865 -9866 9867 0
-9867 9866 0
-9867 -9865 0
c Var 'aux1180' order represents '2' with '9868'
-9866 9868 0
c Var 'aux1180' direct represents '2' with '9869'
9866 -9868 9869 0
-9869 9868 0
-9869 -9866 0
c Var 'aux1180' order represents '3' with '9870'
-9868 9870 0
c Var 'aux1180' direct represents '3' with '9871'
9868 -9870 9871 0
-9871 9870 0
-9871 -9868 0
c Var 'aux1180' direct represents '4' with '-9870'
9865 9867 9869 9871 -9870 0
c Encoding variable: aux1181 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00002_00009=6)))
c Both direct and order encoding.
c Var 'aux1181' order represents '0' with '9872'
c Var 'aux1181' direct represents '0' with '9872'
c Var 'aux1181' order represents '1' with '9873'
-9872 9873 0
c Var 'aux1181' direct represents '1' with '9874'
9872 -9873 9874 0
-9874 9873 0
-9874 -9872 0
c Var 'aux1181' direct represents '2' with '-9873'
9872 9874 -9873 0
c Encoding variable: aux1182 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00002_00002=6)))
c Both direct and order encoding.
c Var 'aux1182' order represents '0' with '9875'
c Var 'aux1182' direct represents '0' with '9875'
c Var 'aux1182' order represents '1' with '9876'
-9875 9876 0
c Var 'aux1182' direct represents '1' with '9877'
9875 -9876 9877 0
-9877 9876 0
-9877 -9875 0
c Var 'aux1182' direct represents '2' with '-9876'
9875 9877 -9876 0
c Encoding variable: aux1183 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00002_00004=6)))
c Both direct and order encoding.
c Var 'aux1183' order represents '0' with '9878'
c Var 'aux1183' direct represents '0' with '9878'
c Var 'aux1183' order represents '1' with '9879'
-9878 9879 0
c Var 'aux1183' direct represents '1' with '9880'
9878 -9879 9880 0
-9880 9879 0
-9880 -9878 0
c Var 'aux1183' direct represents '2' with '-9879'
9878 9880 -9879 0
c Encoding variable: aux1184 with domain: int(0..2) (representing constraint ((x_00002_00006=6) + (x_00002_00005=6)))
c Both direct and order encoding.
c Var 'aux1184' order represents '0' with '9881'
c Var 'aux1184' direct represents '0' with '9881'
c Var 'aux1184' order represents '1' with '9882'
-9881 9882 0
c Var 'aux1184' direct represents '1' with '9883'
9881 -9882 9883 0
-9883 9882 0
-9883 -9881 0
c Var 'aux1184' direct represents '2' with '-9882'
9881 9883 -9882 0
c Encoding variable: aux1185 with domain: int(0..3) (representing constraint ((x_00002_00003=6) + aux1184))
c Both direct and order encoding.
c Var 'aux1185' order represents '0' with '9884'
c Var 'aux1185' direct represents '0' with '9884'
c Var 'aux1185' order represents '1' with '9885'
-9884 9885 0
c Var 'aux1185' direct represents '1' with '9886'
9884 -9885 9886 0
-9886 9885 0
-9886 -9884 0
c Var 'aux1185' order represents '2' with '9887'
-9885 9887 0
c Var 'aux1185' direct represents '2' with '9888'
9885 -9887 9888 0
-9888 9887 0
-9888 -9885 0
c Var 'aux1185' direct represents '3' with '-9887'
9884 9886 9888 -9887 0
c Encoding variable: aux1186 with domain: int(0..4) (representing constraint (aux1181 + aux1183))
c Both direct and order encoding.
c Var 'aux1186' order represents '0' with '9889'
c Var 'aux1186' direct represents '0' with '9889'
c Var 'aux1186' order represents '1' with '9890'
-9889 9890 0
c Var 'aux1186' direct represents '1' with '9891'
9889 -9890 9891 0
-9891 9890 0
-9891 -9889 0
c Var 'aux1186' order represents '2' with '9892'
-9890 9892 0
c Var 'aux1186' direct represents '2' with '9893'
9890 -9892 9893 0
-9893 9892 0
-9893 -9890 0
c Var 'aux1186' order represents '3' with '9894'
-9892 9894 0
c Var 'aux1186' direct represents '3' with '9895'
9892 -9894 9895 0
-9895 9894 0
-9895 -9892 0
c Var 'aux1186' direct represents '4' with '-9894'
9889 9891 9893 9895 -9894 0
c Encoding variable: aux1187 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00002_00009=7)))
c Both direct and order encoding.
c Var 'aux1187' order represents '0' with '9896'
c Var 'aux1187' direct represents '0' with '9896'
c Var 'aux1187' order represents '1' with '9897'
-9896 9897 0
c Var 'aux1187' direct represents '1' with '9898'
9896 -9897 9898 0
-9898 9897 0
-9898 -9896 0
c Var 'aux1187' direct represents '2' with '-9897'
9896 9898 -9897 0
c Encoding variable: aux1188 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00002_00002=7)))
c Both direct and order encoding.
c Var 'aux1188' order represents '0' with '9899'
c Var 'aux1188' direct represents '0' with '9899'
c Var 'aux1188' order represents '1' with '9900'
-9899 9900 0
c Var 'aux1188' direct represents '1' with '9901'
9899 -9900 9901 0
-9901 9900 0
-9901 -9899 0
c Var 'aux1188' direct represents '2' with '-9900'
9899 9901 -9900 0
c Encoding variable: aux1189 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00002_00004=7)))
c Both direct and order encoding.
c Var 'aux1189' order represents '0' with '9902'
c Var 'aux1189' direct represents '0' with '9902'
c Var 'aux1189' order represents '1' with '9903'
-9902 9903 0
c Var 'aux1189' direct represents '1' with '9904'
9902 -9903 9904 0
-9904 9903 0
-9904 -9902 0
c Var 'aux1189' direct represents '2' with '-9903'
9902 9904 -9903 0
c Encoding variable: aux1190 with domain: int(0..2) (representing constraint ((x_00002_00006=7) + (x_00002_00005=7)))
c Both direct and order encoding.
c Var 'aux1190' order represents '0' with '9905'
c Var 'aux1190' direct represents '0' with '9905'
c Var 'aux1190' order represents '1' with '9906'
-9905 9906 0
c Var 'aux1190' direct represents '1' with '9907'
9905 -9906 9907 0
-9907 9906 0
-9907 -9905 0
c Var 'aux1190' direct represents '2' with '-9906'
9905 9907 -9906 0
c Encoding variable: aux1191 with domain: int(0..3) (representing constraint ((x_00002_00003=7) + aux1190))
c Both direct and order encoding.
c Var 'aux1191' order represents '0' with '9908'
c Var 'aux1191' direct represents '0' with '9908'
c Var 'aux1191' order represents '1' with '9909'
-9908 9909 0
c Var 'aux1191' direct represents '1' with '9910'
9908 -9909 9910 0
-9910 9909 0
-9910 -9908 0
c Var 'aux1191' order represents '2' with '9911'
-9909 9911 0
c Var 'aux1191' direct represents '2' with '9912'
9909 -9911 9912 0
-9912 9911 0
-9912 -9909 0
c Var 'aux1191' direct represents '3' with '-9911'
9908 9910 9912 -9911 0
c Encoding variable: aux1192 with domain: int(0..4) (representing constraint (aux1187 + aux1189))
c Both direct and order encoding.
c Var 'aux1192' order represents '0' with '9913'
c Var 'aux1192' direct represents '0' with '9913'
c Var 'aux1192' order represents '1' with '9914'
-9913 9914 0
c Var 'aux1192' direct represents '1' with '9915'
9913 -9914 9915 0
-9915 9914 0
-9915 -9913 0
c Var 'aux1192' order represents '2' with '9916'
-9914 9916 0
c Var 'aux1192' direct represents '2' with '9917'
9914 -9916 9917 0
-9917 9916 0
-9917 -9914 0
c Var 'aux1192' order represents '3' with '9918'
-9916 9918 0
c Var 'aux1192' direct represents '3' with '9919'
9916 -9918 9919 0
-9919 9918 0
-9919 -9916 0
c Var 'aux1192' direct represents '4' with '-9918'
9913 9915 9917 9919 -9918 0
c Encoding variable: aux1193 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00002_00009=8)))
c Both direct and order encoding.
c Var 'aux1193' order represents '0' with '9920'
c Var 'aux1193' direct represents '0' with '9920'
c Var 'aux1193' order represents '1' with '9921'
-9920 9921 0
c Var 'aux1193' direct represents '1' with '9922'
9920 -9921 9922 0
-9922 9921 0
-9922 -9920 0
c Var 'aux1193' direct represents '2' with '-9921'
9920 9922 -9921 0
c Encoding variable: aux1194 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00002_00002=8)))
c Both direct and order encoding.
c Var 'aux1194' order represents '0' with '9923'
c Var 'aux1194' direct represents '0' with '9923'
c Var 'aux1194' order represents '1' with '9924'
-9923 9924 0
c Var 'aux1194' direct represents '1' with '9925'
9923 -9924 9925 0
-9925 9924 0
-9925 -9923 0
c Var 'aux1194' direct represents '2' with '-9924'
9923 9925 -9924 0
c Encoding variable: aux1195 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00002_00004=8)))
c Both direct and order encoding.
c Var 'aux1195' order represents '0' with '9926'
c Var 'aux1195' direct represents '0' with '9926'
c Var 'aux1195' order represents '1' with '9927'
-9926 9927 0
c Var 'aux1195' direct represents '1' with '9928'
9926 -9927 9928 0
-9928 9927 0
-9928 -9926 0
c Var 'aux1195' direct represents '2' with '-9927'
9926 9928 -9927 0
c Encoding variable: aux1196 with domain: int(0..2) (representing constraint ((x_00002_00006=8) + (x_00002_00005=8)))
c Both direct and order encoding.
c Var 'aux1196' order represents '0' with '9929'
c Var 'aux1196' direct represents '0' with '9929'
c Var 'aux1196' order represents '1' with '9930'
-9929 9930 0
c Var 'aux1196' direct represents '1' with '9931'
9929 -9930 9931 0
-9931 9930 0
-9931 -9929 0
c Var 'aux1196' direct represents '2' with '-9930'
9929 9931 -9930 0
c Encoding variable: aux1197 with domain: int(0..3) (representing constraint ((x_00002_00003=8) + aux1196))
c Both direct and order encoding.
c Var 'aux1197' order represents '0' with '9932'
c Var 'aux1197' direct represents '0' with '9932'
c Var 'aux1197' order represents '1' with '9933'
-9932 9933 0
c Var 'aux1197' direct represents '1' with '9934'
9932 -9933 9934 0
-9934 9933 0
-9934 -9932 0
c Var 'aux1197' order represents '2' with '9935'
-9933 9935 0
c Var 'aux1197' direct represents '2' with '9936'
9933 -9935 9936 0
-9936 9935 0
-9936 -9933 0
c Var 'aux1197' direct represents '3' with '-9935'
9932 9934 9936 -9935 0
c Encoding variable: aux1198 with domain: int(0..4) (representing constraint (aux1193 + aux1195))
c Both direct and order encoding.
c Var 'aux1198' order represents '0' with '9937'
c Var 'aux1198' direct represents '0' with '9937'
c Var 'aux1198' order represents '1' with '9938'
-9937 9938 0
c Var 'aux1198' direct represents '1' with '9939'
9937 -9938 9939 0
-9939 9938 0
-9939 -9937 0
c Var 'aux1198' order represents '2' with '9940'
-9938 9940 0
c Var 'aux1198' direct represents '2' with '9941'
9938 -9940 9941 0
-9941 9940 0
-9941 -9938 0
c Var 'aux1198' order represents '3' with '9942'
-9940 9942 0
c Var 'aux1198' direct represents '3' with '9943'
9940 -9942 9943 0
-9943 9942 0
-9943 -9940 0
c Var 'aux1198' direct represents '4' with '-9942'
9937 9939 9941 9943 -9942 0
c Encoding variable: aux1199 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00002_00009=9)))
c Both direct and order encoding.
c Var 'aux1199' order represents '0' with '9944'
c Var 'aux1199' direct represents '0' with '9944'
c Var 'aux1199' order represents '1' with '9945'
-9944 9945 0
c Var 'aux1199' direct represents '1' with '9946'
9944 -9945 9946 0
-9946 9945 0
-9946 -9944 0
c Var 'aux1199' direct represents '2' with '-9945'
9944 9946 -9945 0
c Encoding variable: aux1200 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00002_00002=9)))
c Both direct and order encoding.
c Var 'aux1200' order represents '0' with '9947'
c Var 'aux1200' direct represents '0' with '9947'
c Var 'aux1200' order represents '1' with '9948'
-9947 9948 0
c Var 'aux1200' direct represents '1' with '9949'
9947 -9948 9949 0
-9949 9948 0
-9949 -9947 0
c Var 'aux1200' direct represents '2' with '-9948'
9947 9949 -9948 0
c Encoding variable: aux1201 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00002_00004=9)))
c Both direct and order encoding.
c Var 'aux1201' order represents '0' with '9950'
c Var 'aux1201' direct represents '0' with '9950'
c Var 'aux1201' order represents '1' with '9951'
-9950 9951 0
c Var 'aux1201' direct represents '1' with '9952'
9950 -9951 9952 0
-9952 9951 0
-9952 -9950 0
c Var 'aux1201' direct represents '2' with '-9951'
9950 9952 -9951 0
c Encoding variable: aux1202 with domain: int(0..2) (representing constraint ((x_00002_00006=9) + (x_00002_00005=9)))
c Both direct and order encoding.
c Var 'aux1202' order represents '0' with '9953'
c Var 'aux1202' direct represents '0' with '9953'
c Var 'aux1202' order represents '1' with '9954'
-9953 9954 0
c Var 'aux1202' direct represents '1' with '9955'
9953 -9954 9955 0
-9955 9954 0
-9955 -9953 0
c Var 'aux1202' direct represents '2' with '-9954'
9953 9955 -9954 0
c Encoding variable: aux1203 with domain: int(0..3) (representing constraint ((x_00002_00003=9) + aux1202))
c Both direct and order encoding.
c Var 'aux1203' order represents '0' with '9956'
c Var 'aux1203' direct represents '0' with '9956'
c Var 'aux1203' order represents '1' with '9957'
-9956 9957 0
c Var 'aux1203' direct represents '1' with '9958'
9956 -9957 9958 0
-9958 9957 0
-9958 -9956 0
c Var 'aux1203' order represents '2' with '9959'
-9957 9959 0
c Var 'aux1203' direct represents '2' with '9960'
9957 -9959 9960 0
-9960 9959 0
-9960 -9957 0
c Var 'aux1203' direct represents '3' with '-9959'
9956 9958 9960 -9959 0
c Encoding variable: aux1204 with domain: int(0..4) (representing constraint (aux1199 + aux1201))
c Both direct and order encoding.
c Var 'aux1204' order represents '0' with '9961'
c Var 'aux1204' direct represents '0' with '9961'
c Var 'aux1204' order represents '1' with '9962'
-9961 9962 0
c Var 'aux1204' direct represents '1' with '9963'
9961 -9962 9963 0
-9963 9962 0
-9963 -9961 0
c Var 'aux1204' order represents '2' with '9964'
-9962 9964 0
c Var 'aux1204' direct represents '2' with '9965'
9962 -9964 9965 0
-9965 9964 0
-9965 -9962 0
c Var 'aux1204' order represents '3' with '9966'
-9964 9966 0
c Var 'aux1204' direct represents '3' with '9967'
9964 -9966 9967 0
-9967 9966 0
-9967 -9964 0
c Var 'aux1204' direct represents '4' with '-9966'
9961 9963 9965 9967 -9966 0
c Encoding variable: aux1205 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00003_00009=1)))
c Both direct and order encoding.
c Var 'aux1205' order represents '0' with '9968'
c Var 'aux1205' direct represents '0' with '9968'
c Var 'aux1205' order represents '1' with '9969'
-9968 9969 0
c Var 'aux1205' direct represents '1' with '9970'
9968 -9969 9970 0
-9970 9969 0
-9970 -9968 0
c Var 'aux1205' direct represents '2' with '-9969'
9968 9970 -9969 0
c Encoding variable: aux1206 with domain: int(0..2) (representing constraint ((x_00003_00008=1) + (x_00003_00002=1)))
c Both direct and order encoding.
c Var 'aux1206' order represents '0' with '9971'
c Var 'aux1206' direct represents '0' with '9971'
c Var 'aux1206' order represents '1' with '9972'
-9971 9972 0
c Var 'aux1206' direct represents '1' with '9973'
9971 -9972 9973 0
-9973 9972 0
-9973 -9971 0
c Var 'aux1206' direct represents '2' with '-9972'
9971 9973 -9972 0
c Encoding variable: aux1207 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00003_00004=1)))
c Both direct and order encoding.
c Var 'aux1207' order represents '0' with '9974'
c Var 'aux1207' direct represents '0' with '9974'
c Var 'aux1207' order represents '1' with '9975'
-9974 9975 0
c Var 'aux1207' direct represents '1' with '9976'
9974 -9975 9976 0
-9976 9975 0
-9976 -9974 0
c Var 'aux1207' direct represents '2' with '-9975'
9974 9976 -9975 0
c Encoding variable: aux1208 with domain: int(0..2) (representing constraint ((x_00003_00006=1) + (x_00003_00005=1)))
c Both direct and order encoding.
c Var 'aux1208' order represents '0' with '9977'
c Var 'aux1208' direct represents '0' with '9977'
c Var 'aux1208' order represents '1' with '9978'
-9977 9978 0
c Var 'aux1208' direct represents '1' with '9979'
9977 -9978 9979 0
-9979 9978 0
-9979 -9977 0
c Var 'aux1208' direct represents '2' with '-9978'
9977 9979 -9978 0
c Encoding variable: aux1209 with domain: int(0..3) (representing constraint ((x_00003_00003=1) + aux1208))
c Both direct and order encoding.
c Var 'aux1209' order represents '0' with '9980'
c Var 'aux1209' direct represents '0' with '9980'
c Var 'aux1209' order represents '1' with '9981'
-9980 9981 0
c Var 'aux1209' direct represents '1' with '9982'
9980 -9981 9982 0
-9982 9981 0
-9982 -9980 0
c Var 'aux1209' order represents '2' with '9983'
-9981 9983 0
c Var 'aux1209' direct represents '2' with '9984'
9981 -9983 9984 0
-9984 9983 0
-9984 -9981 0
c Var 'aux1209' direct represents '3' with '-9983'
9980 9982 9984 -9983 0
c Encoding variable: aux1210 with domain: int(0..4) (representing constraint (aux1205 + aux1207))
c Both direct and order encoding.
c Var 'aux1210' order represents '0' with '9985'
c Var 'aux1210' direct represents '0' with '9985'
c Var 'aux1210' order represents '1' with '9986'
-9985 9986 0
c Var 'aux1210' direct represents '1' with '9987'
9985 -9986 9987 0
-9987 9986 0
-9987 -9985 0
c Var 'aux1210' order represents '2' with '9988'
-9986 9988 0
c Var 'aux1210' direct represents '2' with '9989'
9986 -9988 9989 0
-9989 9988 0
-9989 -9986 0
c Var 'aux1210' order represents '3' with '9990'
-9988 9990 0
c Var 'aux1210' direct represents '3' with '9991'
9988 -9990 9991 0
-9991 9990 0
-9991 -9988 0
c Var 'aux1210' direct represents '4' with '-9990'
9985 9987 9989 9991 -9990 0
c Encoding variable: aux1211 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00003_00009=2)))
c Both direct and order encoding.
c Var 'aux1211' order represents '0' with '9992'
c Var 'aux1211' direct represents '0' with '9992'
c Var 'aux1211' order represents '1' with '9993'
-9992 9993 0
c Var 'aux1211' direct represents '1' with '9994'
9992 -9993 9994 0
-9994 9993 0
-9994 -9992 0
c Var 'aux1211' direct represents '2' with '-9993'
9992 9994 -9993 0
c Encoding variable: aux1212 with domain: int(0..2) (representing constraint ((x_00003_00008=2) + (x_00003_00002=2)))
c Both direct and order encoding.
c Var 'aux1212' order represents '0' with '9995'
c Var 'aux1212' direct represents '0' with '9995'
c Var 'aux1212' order represents '1' with '9996'
-9995 9996 0
c Var 'aux1212' direct represents '1' with '9997'
9995 -9996 9997 0
-9997 9996 0
-9997 -9995 0
c Var 'aux1212' direct represents '2' with '-9996'
9995 9997 -9996 0
c Encoding variable: aux1213 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00003_00004=2)))
c Both direct and order encoding.
c Var 'aux1213' order represents '0' with '9998'
c Var 'aux1213' direct represents '0' with '9998'
c Var 'aux1213' order represents '1' with '9999'
-9998 9999 0
c Var 'aux1213' direct represents '1' with '10000'
9998 -9999 10000 0
-10000 9999 0
-10000 -9998 0
c Var 'aux1213' direct represents '2' with '-9999'
9998 10000 -9999 0
c Encoding variable: aux1214 with domain: int(0..2) (representing constraint ((x_00003_00006=2) + (x_00003_00005=2)))
c Both direct and order encoding.
c Var 'aux1214' order represents '0' with '10001'
c Var 'aux1214' direct represents '0' with '10001'
c Var 'aux1214' order represents '1' with '10002'
-10001 10002 0
c Var 'aux1214' direct represents '1' with '10003'
10001 -10002 10003 0
-10003 10002 0
-10003 -10001 0
c Var 'aux1214' direct represents '2' with '-10002'
10001 10003 -10002 0
c Encoding variable: aux1215 with domain: int(0..3) (representing constraint ((x_00003_00003=2) + aux1214))
c Both direct and order encoding.
c Var 'aux1215' order represents '0' with '10004'
c Var 'aux1215' direct represents '0' with '10004'
c Var 'aux1215' order represents '1' with '10005'
-10004 10005 0
c Var 'aux1215' direct represents '1' with '10006'
10004 -10005 10006 0
-10006 10005 0
-10006 -10004 0
c Var 'aux1215' order represents '2' with '10007'
-10005 10007 0
c Var 'aux1215' direct represents '2' with '10008'
10005 -10007 10008 0
-10008 10007 0
-10008 -10005 0
c Var 'aux1215' direct represents '3' with '-10007'
10004 10006 10008 -10007 0
c Encoding variable: aux1216 with domain: int(0..4) (representing constraint (aux1211 + aux1213))
c Both direct and order encoding.
c Var 'aux1216' order represents '0' with '10009'
c Var 'aux1216' direct represents '0' with '10009'
c Var 'aux1216' order represents '1' with '10010'
-10009 10010 0
c Var 'aux1216' direct represents '1' with '10011'
10009 -10010 10011 0
-10011 10010 0
-10011 -10009 0
c Var 'aux1216' order represents '2' with '10012'
-10010 10012 0
c Var 'aux1216' direct represents '2' with '10013'
10010 -10012 10013 0
-10013 10012 0
-10013 -10010 0
c Var 'aux1216' order represents '3' with '10014'
-10012 10014 0
c Var 'aux1216' direct represents '3' with '10015'
10012 -10014 10015 0
-10015 10014 0
-10015 -10012 0
c Var 'aux1216' direct represents '4' with '-10014'
10009 10011 10013 10015 -10014 0
c Encoding variable: aux1217 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00003_00009=3)))
c Both direct and order encoding.
c Var 'aux1217' order represents '0' with '10016'
c Var 'aux1217' direct represents '0' with '10016'
c Var 'aux1217' order represents '1' with '10017'
-10016 10017 0
c Var 'aux1217' direct represents '1' with '10018'
10016 -10017 10018 0
-10018 10017 0
-10018 -10016 0
c Var 'aux1217' direct represents '2' with '-10017'
10016 10018 -10017 0
c Encoding variable: aux1218 with domain: int(0..2) (representing constraint ((x_00003_00008=3) + (x_00003_00002=3)))
c Both direct and order encoding.
c Var 'aux1218' order represents '0' with '10019'
c Var 'aux1218' direct represents '0' with '10019'
c Var 'aux1218' order represents '1' with '10020'
-10019 10020 0
c Var 'aux1218' direct represents '1' with '10021'
10019 -10020 10021 0
-10021 10020 0
-10021 -10019 0
c Var 'aux1218' direct represents '2' with '-10020'
10019 10021 -10020 0
c Encoding variable: aux1219 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00003_00004=3)))
c Both direct and order encoding.
c Var 'aux1219' order represents '0' with '10022'
c Var 'aux1219' direct represents '0' with '10022'
c Var 'aux1219' order represents '1' with '10023'
-10022 10023 0
c Var 'aux1219' direct represents '1' with '10024'
10022 -10023 10024 0
-10024 10023 0
-10024 -10022 0
c Var 'aux1219' direct represents '2' with '-10023'
10022 10024 -10023 0
c Encoding variable: aux1220 with domain: int(0..2) (representing constraint ((x_00003_00006=3) + (x_00003_00005=3)))
c Both direct and order encoding.
c Var 'aux1220' order represents '0' with '10025'
c Var 'aux1220' direct represents '0' with '10025'
c Var 'aux1220' order represents '1' with '10026'
-10025 10026 0
c Var 'aux1220' direct represents '1' with '10027'
10025 -10026 10027 0
-10027 10026 0
-10027 -10025 0
c Var 'aux1220' direct represents '2' with '-10026'
10025 10027 -10026 0
c Encoding variable: aux1221 with domain: int(0..3) (representing constraint ((x_00003_00003=3) + aux1220))
c Both direct and order encoding.
c Var 'aux1221' order represents '0' with '10028'
c Var 'aux1221' direct represents '0' with '10028'
c Var 'aux1221' order represents '1' with '10029'
-10028 10029 0
c Var 'aux1221' direct represents '1' with '10030'
10028 -10029 10030 0
-10030 10029 0
-10030 -10028 0
c Var 'aux1221' order represents '2' with '10031'
-10029 10031 0
c Var 'aux1221' direct represents '2' with '10032'
10029 -10031 10032 0
-10032 10031 0
-10032 -10029 0
c Var 'aux1221' direct represents '3' with '-10031'
10028 10030 10032 -10031 0
c Encoding variable: aux1222 with domain: int(0..4) (representing constraint (aux1217 + aux1219))
c Both direct and order encoding.
c Var 'aux1222' order represents '0' with '10033'
c Var 'aux1222' direct represents '0' with '10033'
c Var 'aux1222' order represents '1' with '10034'
-10033 10034 0
c Var 'aux1222' direct represents '1' with '10035'
10033 -10034 10035 0
-10035 10034 0
-10035 -10033 0
c Var 'aux1222' order represents '2' with '10036'
-10034 10036 0
c Var 'aux1222' direct represents '2' with '10037'
10034 -10036 10037 0
-10037 10036 0
-10037 -10034 0
c Var 'aux1222' order represents '3' with '10038'
-10036 10038 0
c Var 'aux1222' direct represents '3' with '10039'
10036 -10038 10039 0
-10039 10038 0
-10039 -10036 0
c Var 'aux1222' direct represents '4' with '-10038'
10033 10035 10037 10039 -10038 0
c Encoding variable: aux1223 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00003_00009=4)))
c Both direct and order encoding.
c Var 'aux1223' order represents '0' with '10040'
c Var 'aux1223' direct represents '0' with '10040'
c Var 'aux1223' order represents '1' with '10041'
-10040 10041 0
c Var 'aux1223' direct represents '1' with '10042'
10040 -10041 10042 0
-10042 10041 0
-10042 -10040 0
c Var 'aux1223' direct represents '2' with '-10041'
10040 10042 -10041 0
c Encoding variable: aux1224 with domain: int(0..2) (representing constraint ((x_00003_00008=4) + (x_00003_00002=4)))
c Both direct and order encoding.
c Var 'aux1224' order represents '0' with '10043'
c Var 'aux1224' direct represents '0' with '10043'
c Var 'aux1224' order represents '1' with '10044'
-10043 10044 0
c Var 'aux1224' direct represents '1' with '10045'
10043 -10044 10045 0
-10045 10044 0
-10045 -10043 0
c Var 'aux1224' direct represents '2' with '-10044'
10043 10045 -10044 0
c Encoding variable: aux1225 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00003_00004=4)))
c Both direct and order encoding.
c Var 'aux1225' order represents '0' with '10046'
c Var 'aux1225' direct represents '0' with '10046'
c Var 'aux1225' order represents '1' with '10047'
-10046 10047 0
c Var 'aux1225' direct represents '1' with '10048'
10046 -10047 10048 0
-10048 10047 0
-10048 -10046 0
c Var 'aux1225' direct represents '2' with '-10047'
10046 10048 -10047 0
c Encoding variable: aux1226 with domain: int(0..2) (representing constraint ((x_00003_00006=4) + (x_00003_00005=4)))
c Both direct and order encoding.
c Var 'aux1226' order represents '0' with '10049'
c Var 'aux1226' direct represents '0' with '10049'
c Var 'aux1226' order represents '1' with '10050'
-10049 10050 0
c Var 'aux1226' direct represents '1' with '10051'
10049 -10050 10051 0
-10051 10050 0
-10051 -10049 0
c Var 'aux1226' direct represents '2' with '-10050'
10049 10051 -10050 0
c Encoding variable: aux1227 with domain: int(0..3) (representing constraint ((x_00003_00003=4) + aux1226))
c Both direct and order encoding.
c Var 'aux1227' order represents '0' with '10052'
c Var 'aux1227' direct represents '0' with '10052'
c Var 'aux1227' order represents '1' with '10053'
-10052 10053 0
c Var 'aux1227' direct represents '1' with '10054'
10052 -10053 10054 0
-10054 10053 0
-10054 -10052 0
c Var 'aux1227' order represents '2' with '10055'
-10053 10055 0
c Var 'aux1227' direct represents '2' with '10056'
10053 -10055 10056 0
-10056 10055 0
-10056 -10053 0
c Var 'aux1227' direct represents '3' with '-10055'
10052 10054 10056 -10055 0
c Encoding variable: aux1228 with domain: int(0..4) (representing constraint (aux1223 + aux1225))
c Both direct and order encoding.
c Var 'aux1228' order represents '0' with '10057'
c Var 'aux1228' direct represents '0' with '10057'
c Var 'aux1228' order represents '1' with '10058'
-10057 10058 0
c Var 'aux1228' direct represents '1' with '10059'
10057 -10058 10059 0
-10059 10058 0
-10059 -10057 0
c Var 'aux1228' order represents '2' with '10060'
-10058 10060 0
c Var 'aux1228' direct represents '2' with '10061'
10058 -10060 10061 0
-10061 10060 0
-10061 -10058 0
c Var 'aux1228' order represents '3' with '10062'
-10060 10062 0
c Var 'aux1228' direct represents '3' with '10063'
10060 -10062 10063 0
-10063 10062 0
-10063 -10060 0
c Var 'aux1228' direct represents '4' with '-10062'
10057 10059 10061 10063 -10062 0
c Encoding variable: aux1229 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00003_00009=5)))
c Both direct and order encoding.
c Var 'aux1229' order represents '0' with '10064'
c Var 'aux1229' direct represents '0' with '10064'
c Var 'aux1229' order represents '1' with '10065'
-10064 10065 0
c Var 'aux1229' direct represents '1' with '10066'
10064 -10065 10066 0
-10066 10065 0
-10066 -10064 0
c Var 'aux1229' direct represents '2' with '-10065'
10064 10066 -10065 0
c Encoding variable: aux1230 with domain: int(0..2) (representing constraint ((x_00003_00008=5) + (x_00003_00002=5)))
c Both direct and order encoding.
c Var 'aux1230' order represents '0' with '10067'
c Var 'aux1230' direct represents '0' with '10067'
c Var 'aux1230' order represents '1' with '10068'
-10067 10068 0
c Var 'aux1230' direct represents '1' with '10069'
10067 -10068 10069 0
-10069 10068 0
-10069 -10067 0
c Var 'aux1230' direct represents '2' with '-10068'
10067 10069 -10068 0
c Encoding variable: aux1231 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00003_00004=5)))
c Both direct and order encoding.
c Var 'aux1231' order represents '0' with '10070'
c Var 'aux1231' direct represents '0' with '10070'
c Var 'aux1231' order represents '1' with '10071'
-10070 10071 0
c Var 'aux1231' direct represents '1' with '10072'
10070 -10071 10072 0
-10072 10071 0
-10072 -10070 0
c Var 'aux1231' direct represents '2' with '-10071'
10070 10072 -10071 0
c Encoding variable: aux1232 with domain: int(0..2) (representing constraint ((x_00003_00006=5) + (x_00003_00005=5)))
c Both direct and order encoding.
c Var 'aux1232' order represents '0' with '10073'
c Var 'aux1232' direct represents '0' with '10073'
c Var 'aux1232' order represents '1' with '10074'
-10073 10074 0
c Var 'aux1232' direct represents '1' with '10075'
10073 -10074 10075 0
-10075 10074 0
-10075 -10073 0
c Var 'aux1232' direct represents '2' with '-10074'
10073 10075 -10074 0
c Encoding variable: aux1233 with domain: int(0..3) (representing constraint ((x_00003_00003=5) + aux1232))
c Both direct and order encoding.
c Var 'aux1233' order represents '0' with '10076'
c Var 'aux1233' direct represents '0' with '10076'
c Var 'aux1233' order represents '1' with '10077'
-10076 10077 0
c Var 'aux1233' direct represents '1' with '10078'
10076 -10077 10078 0
-10078 10077 0
-10078 -10076 0
c Var 'aux1233' order represents '2' with '10079'
-10077 10079 0
c Var 'aux1233' direct represents '2' with '10080'
10077 -10079 10080 0
-10080 10079 0
-10080 -10077 0
c Var 'aux1233' direct represents '3' with '-10079'
10076 10078 10080 -10079 0
c Encoding variable: aux1234 with domain: int(0..4) (representing constraint (aux1229 + aux1231))
c Both direct and order encoding.
c Var 'aux1234' order represents '0' with '10081'
c Var 'aux1234' direct represents '0' with '10081'
c Var 'aux1234' order represents '1' with '10082'
-10081 10082 0
c Var 'aux1234' direct represents '1' with '10083'
10081 -10082 10083 0
-10083 10082 0
-10083 -10081 0
c Var 'aux1234' order represents '2' with '10084'
-10082 10084 0
c Var 'aux1234' direct represents '2' with '10085'
10082 -10084 10085 0
-10085 10084 0
-10085 -10082 0
c Var 'aux1234' order represents '3' with '10086'
-10084 10086 0
c Var 'aux1234' direct represents '3' with '10087'
10084 -10086 10087 0
-10087 10086 0
-10087 -10084 0
c Var 'aux1234' direct represents '4' with '-10086'
10081 10083 10085 10087 -10086 0
c Encoding variable: aux1235 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00003_00009=6)))
c Both direct and order encoding.
c Var 'aux1235' order represents '0' with '10088'
c Var 'aux1235' direct represents '0' with '10088'
c Var 'aux1235' order represents '1' with '10089'
-10088 10089 0
c Var 'aux1235' direct represents '1' with '10090'
10088 -10089 10090 0
-10090 10089 0
-10090 -10088 0
c Var 'aux1235' direct represents '2' with '-10089'
10088 10090 -10089 0
c Encoding variable: aux1236 with domain: int(0..2) (representing constraint ((x_00003_00008=6) + (x_00003_00002=6)))
c Both direct and order encoding.
c Var 'aux1236' order represents '0' with '10091'
c Var 'aux1236' direct represents '0' with '10091'
c Var 'aux1236' order represents '1' with '10092'
-10091 10092 0
c Var 'aux1236' direct represents '1' with '10093'
10091 -10092 10093 0
-10093 10092 0
-10093 -10091 0
c Var 'aux1236' direct represents '2' with '-10092'
10091 10093 -10092 0
c Encoding variable: aux1237 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00003_00004=6)))
c Both direct and order encoding.
c Var 'aux1237' order represents '0' with '10094'
c Var 'aux1237' direct represents '0' with '10094'
c Var 'aux1237' order represents '1' with '10095'
-10094 10095 0
c Var 'aux1237' direct represents '1' with '10096'
10094 -10095 10096 0
-10096 10095 0
-10096 -10094 0
c Var 'aux1237' direct represents '2' with '-10095'
10094 10096 -10095 0
c Encoding variable: aux1238 with domain: int(0..2) (representing constraint ((x_00003_00006=6) + (x_00003_00005=6)))
c Both direct and order encoding.
c Var 'aux1238' order represents '0' with '10097'
c Var 'aux1238' direct represents '0' with '10097'
c Var 'aux1238' order represents '1' with '10098'
-10097 10098 0
c Var 'aux1238' direct represents '1' with '10099'
10097 -10098 10099 0
-10099 10098 0
-10099 -10097 0
c Var 'aux1238' direct represents '2' with '-10098'
10097 10099 -10098 0
c Encoding variable: aux1239 with domain: int(0..3) (representing constraint ((x_00003_00003=6) + aux1238))
c Both direct and order encoding.
c Var 'aux1239' order represents '0' with '10100'
c Var 'aux1239' direct represents '0' with '10100'
c Var 'aux1239' order represents '1' with '10101'
-10100 10101 0
c Var 'aux1239' direct represents '1' with '10102'
10100 -10101 10102 0
-10102 10101 0
-10102 -10100 0
c Var 'aux1239' order represents '2' with '10103'
-10101 10103 0
c Var 'aux1239' direct represents '2' with '10104'
10101 -10103 10104 0
-10104 10103 0
-10104 -10101 0
c Var 'aux1239' direct represents '3' with '-10103'
10100 10102 10104 -10103 0
c Encoding variable: aux1240 with domain: int(0..4) (representing constraint (aux1235 + aux1237))
c Both direct and order encoding.
c Var 'aux1240' order represents '0' with '10105'
c Var 'aux1240' direct represents '0' with '10105'
c Var 'aux1240' order represents '1' with '10106'
-10105 10106 0
c Var 'aux1240' direct represents '1' with '10107'
10105 -10106 10107 0
-10107 10106 0
-10107 -10105 0
c Var 'aux1240' order represents '2' with '10108'
-10106 10108 0
c Var 'aux1240' direct represents '2' with '10109'
10106 -10108 10109 0
-10109 10108 0
-10109 -10106 0
c Var 'aux1240' order represents '3' with '10110'
-10108 10110 0
c Var 'aux1240' direct represents '3' with '10111'
10108 -10110 10111 0
-10111 10110 0
-10111 -10108 0
c Var 'aux1240' direct represents '4' with '-10110'
10105 10107 10109 10111 -10110 0
c Encoding variable: aux1241 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00003_00009=7)))
c Both direct and order encoding.
c Var 'aux1241' order represents '0' with '10112'
c Var 'aux1241' direct represents '0' with '10112'
c Var 'aux1241' order represents '1' with '10113'
-10112 10113 0
c Var 'aux1241' direct represents '1' with '10114'
10112 -10113 10114 0
-10114 10113 0
-10114 -10112 0
c Var 'aux1241' direct represents '2' with '-10113'
10112 10114 -10113 0
c Encoding variable: aux1242 with domain: int(0..2) (representing constraint ((x_00003_00008=7) + (x_00003_00002=7)))
c Both direct and order encoding.
c Var 'aux1242' order represents '0' with '10115'
c Var 'aux1242' direct represents '0' with '10115'
c Var 'aux1242' order represents '1' with '10116'
-10115 10116 0
c Var 'aux1242' direct represents '1' with '10117'
10115 -10116 10117 0
-10117 10116 0
-10117 -10115 0
c Var 'aux1242' direct represents '2' with '-10116'
10115 10117 -10116 0
c Encoding variable: aux1243 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00003_00004=7)))
c Both direct and order encoding.
c Var 'aux1243' order represents '0' with '10118'
c Var 'aux1243' direct represents '0' with '10118'
c Var 'aux1243' order represents '1' with '10119'
-10118 10119 0
c Var 'aux1243' direct represents '1' with '10120'
10118 -10119 10120 0
-10120 10119 0
-10120 -10118 0
c Var 'aux1243' direct represents '2' with '-10119'
10118 10120 -10119 0
c Encoding variable: aux1244 with domain: int(0..2) (representing constraint ((x_00003_00006=7) + (x_00003_00005=7)))
c Both direct and order encoding.
c Var 'aux1244' order represents '0' with '10121'
c Var 'aux1244' direct represents '0' with '10121'
c Var 'aux1244' order represents '1' with '10122'
-10121 10122 0
c Var 'aux1244' direct represents '1' with '10123'
10121 -10122 10123 0
-10123 10122 0
-10123 -10121 0
c Var 'aux1244' direct represents '2' with '-10122'
10121 10123 -10122 0
c Encoding variable: aux1245 with domain: int(0..3) (representing constraint ((x_00003_00003=7) + aux1244))
c Both direct and order encoding.
c Var 'aux1245' order represents '0' with '10124'
c Var 'aux1245' direct represents '0' with '10124'
c Var 'aux1245' order represents '1' with '10125'
-10124 10125 0
c Var 'aux1245' direct represents '1' with '10126'
10124 -10125 10126 0
-10126 10125 0
-10126 -10124 0
c Var 'aux1245' order represents '2' with '10127'
-10125 10127 0
c Var 'aux1245' direct represents '2' with '10128'
10125 -10127 10128 0
-10128 10127 0
-10128 -10125 0
c Var 'aux1245' direct represents '3' with '-10127'
10124 10126 10128 -10127 0
c Encoding variable: aux1246 with domain: int(0..4) (representing constraint (aux1241 + aux1243))
c Both direct and order encoding.
c Var 'aux1246' order represents '0' with '10129'
c Var 'aux1246' direct represents '0' with '10129'
c Var 'aux1246' order represents '1' with '10130'
-10129 10130 0
c Var 'aux1246' direct represents '1' with '10131'
10129 -10130 10131 0
-10131 10130 0
-10131 -10129 0
c Var 'aux1246' order represents '2' with '10132'
-10130 10132 0
c Var 'aux1246' direct represents '2' with '10133'
10130 -10132 10133 0
-10133 10132 0
-10133 -10130 0
c Var 'aux1246' order represents '3' with '10134'
-10132 10134 0
c Var 'aux1246' direct represents '3' with '10135'
10132 -10134 10135 0
-10135 10134 0
-10135 -10132 0
c Var 'aux1246' direct represents '4' with '-10134'
10129 10131 10133 10135 -10134 0
c Encoding variable: aux1247 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00003_00009=8)))
c Both direct and order encoding.
c Var 'aux1247' order represents '0' with '10136'
c Var 'aux1247' direct represents '0' with '10136'
c Var 'aux1247' order represents '1' with '10137'
-10136 10137 0
c Var 'aux1247' direct represents '1' with '10138'
10136 -10137 10138 0
-10138 10137 0
-10138 -10136 0
c Var 'aux1247' direct represents '2' with '-10137'
10136 10138 -10137 0
c Encoding variable: aux1248 with domain: int(0..2) (representing constraint ((x_00003_00008=8) + (x_00003_00002=8)))
c Both direct and order encoding.
c Var 'aux1248' order represents '0' with '10139'
c Var 'aux1248' direct represents '0' with '10139'
c Var 'aux1248' order represents '1' with '10140'
-10139 10140 0
c Var 'aux1248' direct represents '1' with '10141'
10139 -10140 10141 0
-10141 10140 0
-10141 -10139 0
c Var 'aux1248' direct represents '2' with '-10140'
10139 10141 -10140 0
c Encoding variable: aux1249 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00003_00004=8)))
c Both direct and order encoding.
c Var 'aux1249' order represents '0' with '10142'
c Var 'aux1249' direct represents '0' with '10142'
c Var 'aux1249' order represents '1' with '10143'
-10142 10143 0
c Var 'aux1249' direct represents '1' with '10144'
10142 -10143 10144 0
-10144 10143 0
-10144 -10142 0
c Var 'aux1249' direct represents '2' with '-10143'
10142 10144 -10143 0
c Encoding variable: aux1250 with domain: int(0..2) (representing constraint ((x_00003_00006=8) + (x_00003_00005=8)))
c Both direct and order encoding.
c Var 'aux1250' order represents '0' with '10145'
c Var 'aux1250' direct represents '0' with '10145'
c Var 'aux1250' order represents '1' with '10146'
-10145 10146 0
c Var 'aux1250' direct represents '1' with '10147'
10145 -10146 10147 0
-10147 10146 0
-10147 -10145 0
c Var 'aux1250' direct represents '2' with '-10146'
10145 10147 -10146 0
c Encoding variable: aux1251 with domain: int(0..3) (representing constraint ((x_00003_00003=8) + aux1250))
c Both direct and order encoding.
c Var 'aux1251' order represents '0' with '10148'
c Var 'aux1251' direct represents '0' with '10148'
c Var 'aux1251' order represents '1' with '10149'
-10148 10149 0
c Var 'aux1251' direct represents '1' with '10150'
10148 -10149 10150 0
-10150 10149 0
-10150 -10148 0
c Var 'aux1251' order represents '2' with '10151'
-10149 10151 0
c Var 'aux1251' direct represents '2' with '10152'
10149 -10151 10152 0
-10152 10151 0
-10152 -10149 0
c Var 'aux1251' direct represents '3' with '-10151'
10148 10150 10152 -10151 0
c Encoding variable: aux1252 with domain: int(0..4) (representing constraint (aux1247 + aux1249))
c Both direct and order encoding.
c Var 'aux1252' order represents '0' with '10153'
c Var 'aux1252' direct represents '0' with '10153'
c Var 'aux1252' order represents '1' with '10154'
-10153 10154 0
c Var 'aux1252' direct represents '1' with '10155'
10153 -10154 10155 0
-10155 10154 0
-10155 -10153 0
c Var 'aux1252' order represents '2' with '10156'
-10154 10156 0
c Var 'aux1252' direct represents '2' with '10157'
10154 -10156 10157 0
-10157 10156 0
-10157 -10154 0
c Var 'aux1252' order represents '3' with '10158'
-10156 10158 0
c Var 'aux1252' direct represents '3' with '10159'
10156 -10158 10159 0
-10159 10158 0
-10159 -10156 0
c Var 'aux1252' direct represents '4' with '-10158'
10153 10155 10157 10159 -10158 0
c Encoding variable: aux1253 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00003_00009=9)))
c Both direct and order encoding.
c Var 'aux1253' order represents '0' with '10160'
c Var 'aux1253' direct represents '0' with '10160'
c Var 'aux1253' order represents '1' with '10161'
-10160 10161 0
c Var 'aux1253' direct represents '1' with '10162'
10160 -10161 10162 0
-10162 10161 0
-10162 -10160 0
c Var 'aux1253' direct represents '2' with '-10161'
10160 10162 -10161 0
c Encoding variable: aux1254 with domain: int(0..2) (representing constraint ((x_00003_00008=9) + (x_00003_00002=9)))
c Both direct and order encoding.
c Var 'aux1254' order represents '0' with '10163'
c Var 'aux1254' direct represents '0' with '10163'
c Var 'aux1254' order represents '1' with '10164'
-10163 10164 0
c Var 'aux1254' direct represents '1' with '10165'
10163 -10164 10165 0
-10165 10164 0
-10165 -10163 0
c Var 'aux1254' direct represents '2' with '-10164'
10163 10165 -10164 0
c Encoding variable: aux1255 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00003_00004=9)))
c Both direct and order encoding.
c Var 'aux1255' order represents '0' with '10166'
c Var 'aux1255' direct represents '0' with '10166'
c Var 'aux1255' order represents '1' with '10167'
-10166 10167 0
c Var 'aux1255' direct represents '1' with '10168'
10166 -10167 10168 0
-10168 10167 0
-10168 -10166 0
c Var 'aux1255' direct represents '2' with '-10167'
10166 10168 -10167 0
c Encoding variable: aux1256 with domain: int(0..2) (representing constraint ((x_00003_00006=9) + (x_00003_00005=9)))
c Both direct and order encoding.
c Var 'aux1256' order represents '0' with '10169'
c Var 'aux1256' direct represents '0' with '10169'
c Var 'aux1256' order represents '1' with '10170'
-10169 10170 0
c Var 'aux1256' direct represents '1' with '10171'
10169 -10170 10171 0
-10171 10170 0
-10171 -10169 0
c Var 'aux1256' direct represents '2' with '-10170'
10169 10171 -10170 0
c Encoding variable: aux1257 with domain: int(0..3) (representing constraint ((x_00003_00003=9) + aux1256))
c Both direct and order encoding.
c Var 'aux1257' order represents '0' with '10172'
c Var 'aux1257' direct represents '0' with '10172'
c Var 'aux1257' order represents '1' with '10173'
-10172 10173 0
c Var 'aux1257' direct represents '1' with '10174'
10172 -10173 10174 0
-10174 10173 0
-10174 -10172 0
c Var 'aux1257' order represents '2' with '10175'
-10173 10175 0
c Var 'aux1257' direct represents '2' with '10176'
10173 -10175 10176 0
-10176 10175 0
-10176 -10173 0
c Var 'aux1257' direct represents '3' with '-10175'
10172 10174 10176 -10175 0
c Encoding variable: aux1258 with domain: int(0..4) (representing constraint (aux1253 + aux1255))
c Both direct and order encoding.
c Var 'aux1258' order represents '0' with '10177'
c Var 'aux1258' direct represents '0' with '10177'
c Var 'aux1258' order represents '1' with '10178'
-10177 10178 0
c Var 'aux1258' direct represents '1' with '10179'
10177 -10178 10179 0
-10179 10178 0
-10179 -10177 0
c Var 'aux1258' order represents '2' with '10180'
-10178 10180 0
c Var 'aux1258' direct represents '2' with '10181'
10178 -10180 10181 0
-10181 10180 0
-10181 -10178 0
c Var 'aux1258' order represents '3' with '10182'
-10180 10182 0
c Var 'aux1258' direct represents '3' with '10183'
10180 -10182 10183 0
-10183 10182 0
-10183 -10180 0
c Var 'aux1258' direct represents '4' with '-10182'
10177 10179 10181 10183 -10182 0
c Encoding variable: aux1259 with domain: int(0..2) (representing constraint ((x_00004_00001=1) + (x_00004_00009=1)))
c Both direct and order encoding.
c Var 'aux1259' order represents '0' with '10184'
c Var 'aux1259' direct represents '0' with '10184'
c Var 'aux1259' order represents '1' with '10185'
-10184 10185 0
c Var 'aux1259' direct represents '1' with '10186'
10184 -10185 10186 0
-10186 10185 0
-10186 -10184 0
c Var 'aux1259' direct represents '2' with '-10185'
10184 10186 -10185 0
c Encoding variable: aux1260 with domain: int(0..2) (representing constraint ((x_00004_00008=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux1260' order represents '0' with '10187'
c Var 'aux1260' direct represents '0' with '10187'
c Var 'aux1260' order represents '1' with '10188'
-10187 10188 0
c Var 'aux1260' direct represents '1' with '10189'
10187 -10188 10189 0
-10189 10188 0
-10189 -10187 0
c Var 'aux1260' direct represents '2' with '-10188'
10187 10189 -10188 0
c Encoding variable: aux1261 with domain: int(0..2) (representing constraint ((x_00004_00007=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux1261' order represents '0' with '10190'
c Var 'aux1261' direct represents '0' with '10190'
c Var 'aux1261' order represents '1' with '10191'
-10190 10191 0
c Var 'aux1261' direct represents '1' with '10192'
10190 -10191 10192 0
-10192 10191 0
-10192 -10190 0
c Var 'aux1261' direct represents '2' with '-10191'
10190 10192 -10191 0
c Encoding variable: aux1262 with domain: int(0..2) (representing constraint ((x_00004_00006=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux1262' order represents '0' with '10193'
c Var 'aux1262' direct represents '0' with '10193'
c Var 'aux1262' order represents '1' with '10194'
-10193 10194 0
c Var 'aux1262' direct represents '1' with '10195'
10193 -10194 10195 0
-10195 10194 0
-10195 -10193 0
c Var 'aux1262' direct represents '2' with '-10194'
10193 10195 -10194 0
c Encoding variable: aux1263 with domain: int(0..3) (representing constraint ((x_00004_00003=1) + aux1262))
c Both direct and order encoding.
c Var 'aux1263' order represents '0' with '10196'
c Var 'aux1263' direct represents '0' with '10196'
c Var 'aux1263' order represents '1' with '10197'
-10196 10197 0
c Var 'aux1263' direct represents '1' with '10198'
10196 -10197 10198 0
-10198 10197 0
-10198 -10196 0
c Var 'aux1263' order represents '2' with '10199'
-10197 10199 0
c Var 'aux1263' direct represents '2' with '10200'
10197 -10199 10200 0
-10200 10199 0
-10200 -10197 0
c Var 'aux1263' direct represents '3' with '-10199'
10196 10198 10200 -10199 0
c Encoding variable: aux1264 with domain: int(0..4) (representing constraint (aux1259 + aux1261))
c Both direct and order encoding.
c Var 'aux1264' order represents '0' with '10201'
c Var 'aux1264' direct represents '0' with '10201'
c Var 'aux1264' order represents '1' with '10202'
-10201 10202 0
c Var 'aux1264' direct represents '1' with '10203'
10201 -10202 10203 0
-10203 10202 0
-10203 -10201 0
c Var 'aux1264' order represents '2' with '10204'
-10202 10204 0
c Var 'aux1264' direct represents '2' with '10205'
10202 -10204 10205 0
-10205 10204 0
-10205 -10202 0
c Var 'aux1264' order represents '3' with '10206'
-10204 10206 0
c Var 'aux1264' direct represents '3' with '10207'
10204 -10206 10207 0
-10207 10206 0
-10207 -10204 0
c Var 'aux1264' direct represents '4' with '-10206'
10201 10203 10205 10207 -10206 0
c Encoding variable: aux1265 with domain: int(0..2) (representing constraint ((x_00004_00001=2) + (x_00004_00009=2)))
c Both direct and order encoding.
c Var 'aux1265' order represents '0' with '10208'
c Var 'aux1265' direct represents '0' with '10208'
c Var 'aux1265' order represents '1' with '10209'
-10208 10209 0
c Var 'aux1265' direct represents '1' with '10210'
10208 -10209 10210 0
-10210 10209 0
-10210 -10208 0
c Var 'aux1265' direct represents '2' with '-10209'
10208 10210 -10209 0
c Encoding variable: aux1266 with domain: int(0..2) (representing constraint ((x_00004_00008=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux1266' order represents '0' with '10211'
c Var 'aux1266' direct represents '0' with '10211'
c Var 'aux1266' order represents '1' with '10212'
-10211 10212 0
c Var 'aux1266' direct represents '1' with '10213'
10211 -10212 10213 0
-10213 10212 0
-10213 -10211 0
c Var 'aux1266' direct represents '2' with '-10212'
10211 10213 -10212 0
c Encoding variable: aux1267 with domain: int(0..2) (representing constraint ((x_00004_00007=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux1267' order represents '0' with '10214'
c Var 'aux1267' direct represents '0' with '10214'
c Var 'aux1267' order represents '1' with '10215'
-10214 10215 0
c Var 'aux1267' direct represents '1' with '10216'
10214 -10215 10216 0
-10216 10215 0
-10216 -10214 0
c Var 'aux1267' direct represents '2' with '-10215'
10214 10216 -10215 0
c Encoding variable: aux1268 with domain: int(0..2) (representing constraint ((x_00004_00006=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux1268' order represents '0' with '10217'
c Var 'aux1268' direct represents '0' with '10217'
c Var 'aux1268' order represents '1' with '10218'
-10217 10218 0
c Var 'aux1268' direct represents '1' with '10219'
10217 -10218 10219 0
-10219 10218 0
-10219 -10217 0
c Var 'aux1268' direct represents '2' with '-10218'
10217 10219 -10218 0
c Encoding variable: aux1269 with domain: int(0..3) (representing constraint ((x_00004_00003=2) + aux1268))
c Both direct and order encoding.
c Var 'aux1269' order represents '0' with '10220'
c Var 'aux1269' direct represents '0' with '10220'
c Var 'aux1269' order represents '1' with '10221'
-10220 10221 0
c Var 'aux1269' direct represents '1' with '10222'
10220 -10221 10222 0
-10222 10221 0
-10222 -10220 0
c Var 'aux1269' order represents '2' with '10223'
-10221 10223 0
c Var 'aux1269' direct represents '2' with '10224'
10221 -10223 10224 0
-10224 10223 0
-10224 -10221 0
c Var 'aux1269' direct represents '3' with '-10223'
10220 10222 10224 -10223 0
c Encoding variable: aux1270 with domain: int(0..4) (representing constraint (aux1265 + aux1267))
c Both direct and order encoding.
c Var 'aux1270' order represents '0' with '10225'
c Var 'aux1270' direct represents '0' with '10225'
c Var 'aux1270' order represents '1' with '10226'
-10225 10226 0
c Var 'aux1270' direct represents '1' with '10227'
10225 -10226 10227 0
-10227 10226 0
-10227 -10225 0
c Var 'aux1270' order represents '2' with '10228'
-10226 10228 0
c Var 'aux1270' direct represents '2' with '10229'
10226 -10228 10229 0
-10229 10228 0
-10229 -10226 0
c Var 'aux1270' order represents '3' with '10230'
-10228 10230 0
c Var 'aux1270' direct represents '3' with '10231'
10228 -10230 10231 0
-10231 10230 0
-10231 -10228 0
c Var 'aux1270' direct represents '4' with '-10230'
10225 10227 10229 10231 -10230 0
c Encoding variable: aux1271 with domain: int(0..2) (representing constraint ((x_00004_00001=3) + (x_00004_00009=3)))
c Both direct and order encoding.
c Var 'aux1271' order represents '0' with '10232'
c Var 'aux1271' direct represents '0' with '10232'
c Var 'aux1271' order represents '1' with '10233'
-10232 10233 0
c Var 'aux1271' direct represents '1' with '10234'
10232 -10233 10234 0
-10234 10233 0
-10234 -10232 0
c Var 'aux1271' direct represents '2' with '-10233'
10232 10234 -10233 0
c Encoding variable: aux1272 with domain: int(0..2) (representing constraint ((x_00004_00008=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux1272' order represents '0' with '10235'
c Var 'aux1272' direct represents '0' with '10235'
c Var 'aux1272' order represents '1' with '10236'
-10235 10236 0
c Var 'aux1272' direct represents '1' with '10237'
10235 -10236 10237 0
-10237 10236 0
-10237 -10235 0
c Var 'aux1272' direct represents '2' with '-10236'
10235 10237 -10236 0
c Encoding variable: aux1273 with domain: int(0..2) (representing constraint ((x_00004_00007=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux1273' order represents '0' with '10238'
c Var 'aux1273' direct represents '0' with '10238'
c Var 'aux1273' order represents '1' with '10239'
-10238 10239 0
c Var 'aux1273' direct represents '1' with '10240'
10238 -10239 10240 0
-10240 10239 0
-10240 -10238 0
c Var 'aux1273' direct represents '2' with '-10239'
10238 10240 -10239 0
c Encoding variable: aux1274 with domain: int(0..2) (representing constraint ((x_00004_00006=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux1274' order represents '0' with '10241'
c Var 'aux1274' direct represents '0' with '10241'
c Var 'aux1274' order represents '1' with '10242'
-10241 10242 0
c Var 'aux1274' direct represents '1' with '10243'
10241 -10242 10243 0
-10243 10242 0
-10243 -10241 0
c Var 'aux1274' direct represents '2' with '-10242'
10241 10243 -10242 0
c Encoding variable: aux1275 with domain: int(0..3) (representing constraint ((x_00004_00003=3) + aux1274))
c Both direct and order encoding.
c Var 'aux1275' order represents '0' with '10244'
c Var 'aux1275' direct represents '0' with '10244'
c Var 'aux1275' order represents '1' with '10245'
-10244 10245 0
c Var 'aux1275' direct represents '1' with '10246'
10244 -10245 10246 0
-10246 10245 0
-10246 -10244 0
c Var 'aux1275' order represents '2' with '10247'
-10245 10247 0
c Var 'aux1275' direct represents '2' with '10248'
10245 -10247 10248 0
-10248 10247 0
-10248 -10245 0
c Var 'aux1275' direct represents '3' with '-10247'
10244 10246 10248 -10247 0
c Encoding variable: aux1276 with domain: int(0..4) (representing constraint (aux1271 + aux1273))
c Both direct and order encoding.
c Var 'aux1276' order represents '0' with '10249'
c Var 'aux1276' direct represents '0' with '10249'
c Var 'aux1276' order represents '1' with '10250'
-10249 10250 0
c Var 'aux1276' direct represents '1' with '10251'
10249 -10250 10251 0
-10251 10250 0
-10251 -10249 0
c Var 'aux1276' order represents '2' with '10252'
-10250 10252 0
c Var 'aux1276' direct represents '2' with '10253'
10250 -10252 10253 0
-10253 10252 0
-10253 -10250 0
c Var 'aux1276' order represents '3' with '10254'
-10252 10254 0
c Var 'aux1276' direct represents '3' with '10255'
10252 -10254 10255 0
-10255 10254 0
-10255 -10252 0
c Var 'aux1276' direct represents '4' with '-10254'
10249 10251 10253 10255 -10254 0
c Encoding variable: aux1277 with domain: int(0..2) (representing constraint ((x_00004_00001=4) + (x_00004_00009=4)))
c Both direct and order encoding.
c Var 'aux1277' order represents '0' with '10256'
c Var 'aux1277' direct represents '0' with '10256'
c Var 'aux1277' order represents '1' with '10257'
-10256 10257 0
c Var 'aux1277' direct represents '1' with '10258'
10256 -10257 10258 0
-10258 10257 0
-10258 -10256 0
c Var 'aux1277' direct represents '2' with '-10257'
10256 10258 -10257 0
c Encoding variable: aux1278 with domain: int(0..2) (representing constraint ((x_00004_00008=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux1278' order represents '0' with '10259'
c Var 'aux1278' direct represents '0' with '10259'
c Var 'aux1278' order represents '1' with '10260'
-10259 10260 0
c Var 'aux1278' direct represents '1' with '10261'
10259 -10260 10261 0
-10261 10260 0
-10261 -10259 0
c Var 'aux1278' direct represents '2' with '-10260'
10259 10261 -10260 0
c Encoding variable: aux1279 with domain: int(0..2) (representing constraint ((x_00004_00007=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux1279' order represents '0' with '10262'
c Var 'aux1279' direct represents '0' with '10262'
c Var 'aux1279' order represents '1' with '10263'
-10262 10263 0
c Var 'aux1279' direct represents '1' with '10264'
10262 -10263 10264 0
-10264 10263 0
-10264 -10262 0
c Var 'aux1279' direct represents '2' with '-10263'
10262 10264 -10263 0
c Encoding variable: aux1280 with domain: int(0..2) (representing constraint ((x_00004_00006=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux1280' order represents '0' with '10265'
c Var 'aux1280' direct represents '0' with '10265'
c Var 'aux1280' order represents '1' with '10266'
-10265 10266 0
c Var 'aux1280' direct represents '1' with '10267'
10265 -10266 10267 0
-10267 10266 0
-10267 -10265 0
c Var 'aux1280' direct represents '2' with '-10266'
10265 10267 -10266 0
c Encoding variable: aux1281 with domain: int(0..3) (representing constraint ((x_00004_00003=4) + aux1280))
c Both direct and order encoding.
c Var 'aux1281' order represents '0' with '10268'
c Var 'aux1281' direct represents '0' with '10268'
c Var 'aux1281' order represents '1' with '10269'
-10268 10269 0
c Var 'aux1281' direct represents '1' with '10270'
10268 -10269 10270 0
-10270 10269 0
-10270 -10268 0
c Var 'aux1281' order represents '2' with '10271'
-10269 10271 0
c Var 'aux1281' direct represents '2' with '10272'
10269 -10271 10272 0
-10272 10271 0
-10272 -10269 0
c Var 'aux1281' direct represents '3' with '-10271'
10268 10270 10272 -10271 0
c Encoding variable: aux1282 with domain: int(0..4) (representing constraint (aux1277 + aux1279))
c Both direct and order encoding.
c Var 'aux1282' order represents '0' with '10273'
c Var 'aux1282' direct represents '0' with '10273'
c Var 'aux1282' order represents '1' with '10274'
-10273 10274 0
c Var 'aux1282' direct represents '1' with '10275'
10273 -10274 10275 0
-10275 10274 0
-10275 -10273 0
c Var 'aux1282' order represents '2' with '10276'
-10274 10276 0
c Var 'aux1282' direct represents '2' with '10277'
10274 -10276 10277 0
-10277 10276 0
-10277 -10274 0
c Var 'aux1282' order represents '3' with '10278'
-10276 10278 0
c Var 'aux1282' direct represents '3' with '10279'
10276 -10278 10279 0
-10279 10278 0
-10279 -10276 0
c Var 'aux1282' direct represents '4' with '-10278'
10273 10275 10277 10279 -10278 0
c Encoding variable: aux1283 with domain: int(0..2) (representing constraint ((x_00004_00001=5) + (x_00004_00009=5)))
c Both direct and order encoding.
c Var 'aux1283' order represents '0' with '10280'
c Var 'aux1283' direct represents '0' with '10280'
c Var 'aux1283' order represents '1' with '10281'
-10280 10281 0
c Var 'aux1283' direct represents '1' with '10282'
10280 -10281 10282 0
-10282 10281 0
-10282 -10280 0
c Var 'aux1283' direct represents '2' with '-10281'
10280 10282 -10281 0
c Encoding variable: aux1284 with domain: int(0..2) (representing constraint ((x_00004_00008=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux1284' order represents '0' with '10283'
c Var 'aux1284' direct represents '0' with '10283'
c Var 'aux1284' order represents '1' with '10284'
-10283 10284 0
c Var 'aux1284' direct represents '1' with '10285'
10283 -10284 10285 0
-10285 10284 0
-10285 -10283 0
c Var 'aux1284' direct represents '2' with '-10284'
10283 10285 -10284 0
c Encoding variable: aux1285 with domain: int(0..2) (representing constraint ((x_00004_00007=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux1285' order represents '0' with '10286'
c Var 'aux1285' direct represents '0' with '10286'
c Var 'aux1285' order represents '1' with '10287'
-10286 10287 0
c Var 'aux1285' direct represents '1' with '10288'
10286 -10287 10288 0
-10288 10287 0
-10288 -10286 0
c Var 'aux1285' direct represents '2' with '-10287'
10286 10288 -10287 0
c Encoding variable: aux1286 with domain: int(0..2) (representing constraint ((x_00004_00006=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux1286' order represents '0' with '10289'
c Var 'aux1286' direct represents '0' with '10289'
c Var 'aux1286' order represents '1' with '10290'
-10289 10290 0
c Var 'aux1286' direct represents '1' with '10291'
10289 -10290 10291 0
-10291 10290 0
-10291 -10289 0
c Var 'aux1286' direct represents '2' with '-10290'
10289 10291 -10290 0
c Encoding variable: aux1287 with domain: int(0..3) (representing constraint ((x_00004_00003=5) + aux1286))
c Both direct and order encoding.
c Var 'aux1287' order represents '0' with '10292'
c Var 'aux1287' direct represents '0' with '10292'
c Var 'aux1287' order represents '1' with '10293'
-10292 10293 0
c Var 'aux1287' direct represents '1' with '10294'
10292 -10293 10294 0
-10294 10293 0
-10294 -10292 0
c Var 'aux1287' order represents '2' with '10295'
-10293 10295 0
c Var 'aux1287' direct represents '2' with '10296'
10293 -10295 10296 0
-10296 10295 0
-10296 -10293 0
c Var 'aux1287' direct represents '3' with '-10295'
10292 10294 10296 -10295 0
c Encoding variable: aux1288 with domain: int(0..4) (representing constraint (aux1283 + aux1285))
c Both direct and order encoding.
c Var 'aux1288' order represents '0' with '10297'
c Var 'aux1288' direct represents '0' with '10297'
c Var 'aux1288' order represents '1' with '10298'
-10297 10298 0
c Var 'aux1288' direct represents '1' with '10299'
10297 -10298 10299 0
-10299 10298 0
-10299 -10297 0
c Var 'aux1288' order represents '2' with '10300'
-10298 10300 0
c Var 'aux1288' direct represents '2' with '10301'
10298 -10300 10301 0
-10301 10300 0
-10301 -10298 0
c Var 'aux1288' order represents '3' with '10302'
-10300 10302 0
c Var 'aux1288' direct represents '3' with '10303'
10300 -10302 10303 0
-10303 10302 0
-10303 -10300 0
c Var 'aux1288' direct represents '4' with '-10302'
10297 10299 10301 10303 -10302 0
c Encoding variable: aux1289 with domain: int(0..2) (representing constraint ((x_00004_00001=6) + (x_00004_00009=6)))
c Both direct and order encoding.
c Var 'aux1289' order represents '0' with '10304'
c Var 'aux1289' direct represents '0' with '10304'
c Var 'aux1289' order represents '1' with '10305'
-10304 10305 0
c Var 'aux1289' direct represents '1' with '10306'
10304 -10305 10306 0
-10306 10305 0
-10306 -10304 0
c Var 'aux1289' direct represents '2' with '-10305'
10304 10306 -10305 0
c Encoding variable: aux1290 with domain: int(0..2) (representing constraint ((x_00004_00008=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux1290' order represents '0' with '10307'
c Var 'aux1290' direct represents '0' with '10307'
c Var 'aux1290' order represents '1' with '10308'
-10307 10308 0
c Var 'aux1290' direct represents '1' with '10309'
10307 -10308 10309 0
-10309 10308 0
-10309 -10307 0
c Var 'aux1290' direct represents '2' with '-10308'
10307 10309 -10308 0
c Encoding variable: aux1291 with domain: int(0..2) (representing constraint ((x_00004_00007=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux1291' order represents '0' with '10310'
c Var 'aux1291' direct represents '0' with '10310'
c Var 'aux1291' order represents '1' with '10311'
-10310 10311 0
c Var 'aux1291' direct represents '1' with '10312'
10310 -10311 10312 0
-10312 10311 0
-10312 -10310 0
c Var 'aux1291' direct represents '2' with '-10311'
10310 10312 -10311 0
c Encoding variable: aux1292 with domain: int(0..2) (representing constraint ((x_00004_00006=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux1292' order represents '0' with '10313'
c Var 'aux1292' direct represents '0' with '10313'
c Var 'aux1292' order represents '1' with '10314'
-10313 10314 0
c Var 'aux1292' direct represents '1' with '10315'
10313 -10314 10315 0
-10315 10314 0
-10315 -10313 0
c Var 'aux1292' direct represents '2' with '-10314'
10313 10315 -10314 0
c Encoding variable: aux1293 with domain: int(0..3) (representing constraint ((x_00004_00003=6) + aux1292))
c Both direct and order encoding.
c Var 'aux1293' order represents '0' with '10316'
c Var 'aux1293' direct represents '0' with '10316'
c Var 'aux1293' order represents '1' with '10317'
-10316 10317 0
c Var 'aux1293' direct represents '1' with '10318'
10316 -10317 10318 0
-10318 10317 0
-10318 -10316 0
c Var 'aux1293' order represents '2' with '10319'
-10317 10319 0
c Var 'aux1293' direct represents '2' with '10320'
10317 -10319 10320 0
-10320 10319 0
-10320 -10317 0
c Var 'aux1293' direct represents '3' with '-10319'
10316 10318 10320 -10319 0
c Encoding variable: aux1294 with domain: int(0..4) (representing constraint (aux1289 + aux1291))
c Both direct and order encoding.
c Var 'aux1294' order represents '0' with '10321'
c Var 'aux1294' direct represents '0' with '10321'
c Var 'aux1294' order represents '1' with '10322'
-10321 10322 0
c Var 'aux1294' direct represents '1' with '10323'
10321 -10322 10323 0
-10323 10322 0
-10323 -10321 0
c Var 'aux1294' order represents '2' with '10324'
-10322 10324 0
c Var 'aux1294' direct represents '2' with '10325'
10322 -10324 10325 0
-10325 10324 0
-10325 -10322 0
c Var 'aux1294' order represents '3' with '10326'
-10324 10326 0
c Var 'aux1294' direct represents '3' with '10327'
10324 -10326 10327 0
-10327 10326 0
-10327 -10324 0
c Var 'aux1294' direct represents '4' with '-10326'
10321 10323 10325 10327 -10326 0
c Encoding variable: aux1295 with domain: int(0..2) (representing constraint ((x_00004_00001=7) + (x_00004_00009=7)))
c Both direct and order encoding.
c Var 'aux1295' order represents '0' with '10328'
c Var 'aux1295' direct represents '0' with '10328'
c Var 'aux1295' order represents '1' with '10329'
-10328 10329 0
c Var 'aux1295' direct represents '1' with '10330'
10328 -10329 10330 0
-10330 10329 0
-10330 -10328 0
c Var 'aux1295' direct represents '2' with '-10329'
10328 10330 -10329 0
c Encoding variable: aux1296 with domain: int(0..2) (representing constraint ((x_00004_00008=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux1296' order represents '0' with '10331'
c Var 'aux1296' direct represents '0' with '10331'
c Var 'aux1296' order represents '1' with '10332'
-10331 10332 0
c Var 'aux1296' direct represents '1' with '10333'
10331 -10332 10333 0
-10333 10332 0
-10333 -10331 0
c Var 'aux1296' direct represents '2' with '-10332'
10331 10333 -10332 0
c Encoding variable: aux1297 with domain: int(0..2) (representing constraint ((x_00004_00007=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux1297' order represents '0' with '10334'
c Var 'aux1297' direct represents '0' with '10334'
c Var 'aux1297' order represents '1' with '10335'
-10334 10335 0
c Var 'aux1297' direct represents '1' with '10336'
10334 -10335 10336 0
-10336 10335 0
-10336 -10334 0
c Var 'aux1297' direct represents '2' with '-10335'
10334 10336 -10335 0
c Encoding variable: aux1298 with domain: int(0..2) (representing constraint ((x_00004_00006=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux1298' order represents '0' with '10337'
c Var 'aux1298' direct represents '0' with '10337'
c Var 'aux1298' order represents '1' with '10338'
-10337 10338 0
c Var 'aux1298' direct represents '1' with '10339'
10337 -10338 10339 0
-10339 10338 0
-10339 -10337 0
c Var 'aux1298' direct represents '2' with '-10338'
10337 10339 -10338 0
c Encoding variable: aux1299 with domain: int(0..3) (representing constraint ((x_00004_00003=7) + aux1298))
c Both direct and order encoding.
c Var 'aux1299' order represents '0' with '10340'
c Var 'aux1299' direct represents '0' with '10340'
c Var 'aux1299' order represents '1' with '10341'
-10340 10341 0
c Var 'aux1299' direct represents '1' with '10342'
10340 -10341 10342 0
-10342 10341 0
-10342 -10340 0
c Var 'aux1299' order represents '2' with '10343'
-10341 10343 0
c Var 'aux1299' direct represents '2' with '10344'
10341 -10343 10344 0
-10344 10343 0
-10344 -10341 0
c Var 'aux1299' direct represents '3' with '-10343'
10340 10342 10344 -10343 0
c Encoding variable: aux1300 with domain: int(0..4) (representing constraint (aux1295 + aux1297))
c Both direct and order encoding.
c Var 'aux1300' order represents '0' with '10345'
c Var 'aux1300' direct represents '0' with '10345'
c Var 'aux1300' order represents '1' with '10346'
-10345 10346 0
c Var 'aux1300' direct represents '1' with '10347'
10345 -10346 10347 0
-10347 10346 0
-10347 -10345 0
c Var 'aux1300' order represents '2' with '10348'
-10346 10348 0
c Var 'aux1300' direct represents '2' with '10349'
10346 -10348 10349 0
-10349 10348 0
-10349 -10346 0
c Var 'aux1300' order represents '3' with '10350'
-10348 10350 0
c Var 'aux1300' direct represents '3' with '10351'
10348 -10350 10351 0
-10351 10350 0
-10351 -10348 0
c Var 'aux1300' direct represents '4' with '-10350'
10345 10347 10349 10351 -10350 0
c Encoding variable: aux1301 with domain: int(0..2) (representing constraint ((x_00004_00001=8) + (x_00004_00009=8)))
c Both direct and order encoding.
c Var 'aux1301' order represents '0' with '10352'
c Var 'aux1301' direct represents '0' with '10352'
c Var 'aux1301' order represents '1' with '10353'
-10352 10353 0
c Var 'aux1301' direct represents '1' with '10354'
10352 -10353 10354 0
-10354 10353 0
-10354 -10352 0
c Var 'aux1301' direct represents '2' with '-10353'
10352 10354 -10353 0
c Encoding variable: aux1302 with domain: int(0..2) (representing constraint ((x_00004_00008=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux1302' order represents '0' with '10355'
c Var 'aux1302' direct represents '0' with '10355'
c Var 'aux1302' order represents '1' with '10356'
-10355 10356 0
c Var 'aux1302' direct represents '1' with '10357'
10355 -10356 10357 0
-10357 10356 0
-10357 -10355 0
c Var 'aux1302' direct represents '2' with '-10356'
10355 10357 -10356 0
c Encoding variable: aux1303 with domain: int(0..2) (representing constraint ((x_00004_00007=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux1303' order represents '0' with '10358'
c Var 'aux1303' direct represents '0' with '10358'
c Var 'aux1303' order represents '1' with '10359'
-10358 10359 0
c Var 'aux1303' direct represents '1' with '10360'
10358 -10359 10360 0
-10360 10359 0
-10360 -10358 0
c Var 'aux1303' direct represents '2' with '-10359'
10358 10360 -10359 0
c Encoding variable: aux1304 with domain: int(0..2) (representing constraint ((x_00004_00006=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux1304' order represents '0' with '10361'
c Var 'aux1304' direct represents '0' with '10361'
c Var 'aux1304' order represents '1' with '10362'
-10361 10362 0
c Var 'aux1304' direct represents '1' with '10363'
10361 -10362 10363 0
-10363 10362 0
-10363 -10361 0
c Var 'aux1304' direct represents '2' with '-10362'
10361 10363 -10362 0
c Encoding variable: aux1305 with domain: int(0..3) (representing constraint ((x_00004_00003=8) + aux1304))
c Both direct and order encoding.
c Var 'aux1305' order represents '0' with '10364'
c Var 'aux1305' direct represents '0' with '10364'
c Var 'aux1305' order represents '1' with '10365'
-10364 10365 0
c Var 'aux1305' direct represents '1' with '10366'
10364 -10365 10366 0
-10366 10365 0
-10366 -10364 0
c Var 'aux1305' order represents '2' with '10367'
-10365 10367 0
c Var 'aux1305' direct represents '2' with '10368'
10365 -10367 10368 0
-10368 10367 0
-10368 -10365 0
c Var 'aux1305' direct represents '3' with '-10367'
10364 10366 10368 -10367 0
c Encoding variable: aux1306 with domain: int(0..4) (representing constraint (aux1301 + aux1303))
c Both direct and order encoding.
c Var 'aux1306' order represents '0' with '10369'
c Var 'aux1306' direct represents '0' with '10369'
c Var 'aux1306' order represents '1' with '10370'
-10369 10370 0
c Var 'aux1306' direct represents '1' with '10371'
10369 -10370 10371 0
-10371 10370 0
-10371 -10369 0
c Var 'aux1306' order represents '2' with '10372'
-10370 10372 0
c Var 'aux1306' direct represents '2' with '10373'
10370 -10372 10373 0
-10373 10372 0
-10373 -10370 0
c Var 'aux1306' order represents '3' with '10374'
-10372 10374 0
c Var 'aux1306' direct represents '3' with '10375'
10372 -10374 10375 0
-10375 10374 0
-10375 -10372 0
c Var 'aux1306' direct represents '4' with '-10374'
10369 10371 10373 10375 -10374 0
c Encoding variable: aux1307 with domain: int(0..2) (representing constraint ((x_00004_00001=9) + (x_00004_00009=9)))
c Both direct and order encoding.
c Var 'aux1307' order represents '0' with '10376'
c Var 'aux1307' direct represents '0' with '10376'
c Var 'aux1307' order represents '1' with '10377'
-10376 10377 0
c Var 'aux1307' direct represents '1' with '10378'
10376 -10377 10378 0
-10378 10377 0
-10378 -10376 0
c Var 'aux1307' direct represents '2' with '-10377'
10376 10378 -10377 0
c Encoding variable: aux1308 with domain: int(0..2) (representing constraint ((x_00004_00008=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux1308' order represents '0' with '10379'
c Var 'aux1308' direct represents '0' with '10379'
c Var 'aux1308' order represents '1' with '10380'
-10379 10380 0
c Var 'aux1308' direct represents '1' with '10381'
10379 -10380 10381 0
-10381 10380 0
-10381 -10379 0
c Var 'aux1308' direct represents '2' with '-10380'
10379 10381 -10380 0
c Encoding variable: aux1309 with domain: int(0..2) (representing constraint ((x_00004_00007=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux1309' order represents '0' with '10382'
c Var 'aux1309' direct represents '0' with '10382'
c Var 'aux1309' order represents '1' with '10383'
-10382 10383 0
c Var 'aux1309' direct represents '1' with '10384'
10382 -10383 10384 0
-10384 10383 0
-10384 -10382 0
c Var 'aux1309' direct represents '2' with '-10383'
10382 10384 -10383 0
c Encoding variable: aux1310 with domain: int(0..2) (representing constraint ((x_00004_00006=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux1310' order represents '0' with '10385'
c Var 'aux1310' direct represents '0' with '10385'
c Var 'aux1310' order represents '1' with '10386'
-10385 10386 0
c Var 'aux1310' direct represents '1' with '10387'
10385 -10386 10387 0
-10387 10386 0
-10387 -10385 0
c Var 'aux1310' direct represents '2' with '-10386'
10385 10387 -10386 0
c Encoding variable: aux1311 with domain: int(0..3) (representing constraint ((x_00004_00003=9) + aux1310))
c Both direct and order encoding.
c Var 'aux1311' order represents '0' with '10388'
c Var 'aux1311' direct represents '0' with '10388'
c Var 'aux1311' order represents '1' with '10389'
-10388 10389 0
c Var 'aux1311' direct represents '1' with '10390'
10388 -10389 10390 0
-10390 10389 0
-10390 -10388 0
c Var 'aux1311' order represents '2' with '10391'
-10389 10391 0
c Var 'aux1311' direct represents '2' with '10392'
10389 -10391 10392 0
-10392 10391 0
-10392 -10389 0
c Var 'aux1311' direct represents '3' with '-10391'
10388 10390 10392 -10391 0
c Encoding variable: aux1312 with domain: int(0..4) (representing constraint (aux1307 + aux1309))
c Both direct and order encoding.
c Var 'aux1312' order represents '0' with '10393'
c Var 'aux1312' direct represents '0' with '10393'
c Var 'aux1312' order represents '1' with '10394'
-10393 10394 0
c Var 'aux1312' direct represents '1' with '10395'
10393 -10394 10395 0
-10395 10394 0
-10395 -10393 0
c Var 'aux1312' order represents '2' with '10396'
-10394 10396 0
c Var 'aux1312' direct represents '2' with '10397'
10394 -10396 10397 0
-10397 10396 0
-10397 -10394 0
c Var 'aux1312' order represents '3' with '10398'
-10396 10398 0
c Var 'aux1312' direct represents '3' with '10399'
10396 -10398 10399 0
-10399 10398 0
-10399 -10396 0
c Var 'aux1312' direct represents '4' with '-10398'
10393 10395 10397 10399 -10398 0
c Encoding variable: aux1313 with domain: int(0..2) (representing constraint ((x_00005_00001=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux1313' order represents '0' with '10400'
c Var 'aux1313' direct represents '0' with '10400'
c Var 'aux1313' order represents '1' with '10401'
-10400 10401 0
c Var 'aux1313' direct represents '1' with '10402'
10400 -10401 10402 0
-10402 10401 0
-10402 -10400 0
c Var 'aux1313' direct represents '2' with '-10401'
10400 10402 -10401 0
c Encoding variable: aux1314 with domain: int(0..2) (representing constraint ((x_00005_00008=1) + (x_00005_00002=1)))
c Both direct and order encoding.
c Var 'aux1314' order represents '0' with '10403'
c Var 'aux1314' direct represents '0' with '10403'
c Var 'aux1314' order represents '1' with '10404'
-10403 10404 0
c Var 'aux1314' direct represents '1' with '10405'
10403 -10404 10405 0
-10405 10404 0
-10405 -10403 0
c Var 'aux1314' direct represents '2' with '-10404'
10403 10405 -10404 0
c Encoding variable: aux1315 with domain: int(0..2) (representing constraint ((x_00005_00007=1) + (x_00005_00004=1)))
c Both direct and order encoding.
c Var 'aux1315' order represents '0' with '10406'
c Var 'aux1315' direct represents '0' with '10406'
c Var 'aux1315' order represents '1' with '10407'
-10406 10407 0
c Var 'aux1315' direct represents '1' with '10408'
10406 -10407 10408 0
-10408 10407 0
-10408 -10406 0
c Var 'aux1315' direct represents '2' with '-10407'
10406 10408 -10407 0
c Encoding variable: aux1316 with domain: int(0..2) (representing constraint ((x_00005_00006=1) + (x_00005_00005=1)))
c Both direct and order encoding.
c Var 'aux1316' order represents '0' with '10409'
c Var 'aux1316' direct represents '0' with '10409'
c Var 'aux1316' order represents '1' with '10410'
-10409 10410 0
c Var 'aux1316' direct represents '1' with '10411'
10409 -10410 10411 0
-10411 10410 0
-10411 -10409 0
c Var 'aux1316' direct represents '2' with '-10410'
10409 10411 -10410 0
c Encoding variable: aux1317 with domain: int(0..3) (representing constraint ((x_00005_00003=1) + aux1316))
c Both direct and order encoding.
c Var 'aux1317' order represents '0' with '10412'
c Var 'aux1317' direct represents '0' with '10412'
c Var 'aux1317' order represents '1' with '10413'
-10412 10413 0
c Var 'aux1317' direct represents '1' with '10414'
10412 -10413 10414 0
-10414 10413 0
-10414 -10412 0
c Var 'aux1317' order represents '2' with '10415'
-10413 10415 0
c Var 'aux1317' direct represents '2' with '10416'
10413 -10415 10416 0
-10416 10415 0
-10416 -10413 0
c Var 'aux1317' direct represents '3' with '-10415'
10412 10414 10416 -10415 0
c Encoding variable: aux1318 with domain: int(0..4) (representing constraint (aux1313 + aux1315))
c Both direct and order encoding.
c Var 'aux1318' order represents '0' with '10417'
c Var 'aux1318' direct represents '0' with '10417'
c Var 'aux1318' order represents '1' with '10418'
-10417 10418 0
c Var 'aux1318' direct represents '1' with '10419'
10417 -10418 10419 0
-10419 10418 0
-10419 -10417 0
c Var 'aux1318' order represents '2' with '10420'
-10418 10420 0
c Var 'aux1318' direct represents '2' with '10421'
10418 -10420 10421 0
-10421 10420 0
-10421 -10418 0
c Var 'aux1318' order represents '3' with '10422'
-10420 10422 0
c Var 'aux1318' direct represents '3' with '10423'
10420 -10422 10423 0
-10423 10422 0
-10423 -10420 0
c Var 'aux1318' direct represents '4' with '-10422'
10417 10419 10421 10423 -10422 0
c Encoding variable: aux1319 with domain: int(0..2) (representing constraint ((x_00005_00001=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux1319' order represents '0' with '10424'
c Var 'aux1319' direct represents '0' with '10424'
c Var 'aux1319' order represents '1' with '10425'
-10424 10425 0
c Var 'aux1319' direct represents '1' with '10426'
10424 -10425 10426 0
-10426 10425 0
-10426 -10424 0
c Var 'aux1319' direct represents '2' with '-10425'
10424 10426 -10425 0
c Encoding variable: aux1320 with domain: int(0..2) (representing constraint ((x_00005_00008=2) + (x_00005_00002=2)))
c Both direct and order encoding.
c Var 'aux1320' order represents '0' with '10427'
c Var 'aux1320' direct represents '0' with '10427'
c Var 'aux1320' order represents '1' with '10428'
-10427 10428 0
c Var 'aux1320' direct represents '1' with '10429'
10427 -10428 10429 0
-10429 10428 0
-10429 -10427 0
c Var 'aux1320' direct represents '2' with '-10428'
10427 10429 -10428 0
c Encoding variable: aux1321 with domain: int(0..2) (representing constraint ((x_00005_00007=2) + (x_00005_00004=2)))
c Both direct and order encoding.
c Var 'aux1321' order represents '0' with '10430'
c Var 'aux1321' direct represents '0' with '10430'
c Var 'aux1321' order represents '1' with '10431'
-10430 10431 0
c Var 'aux1321' direct represents '1' with '10432'
10430 -10431 10432 0
-10432 10431 0
-10432 -10430 0
c Var 'aux1321' direct represents '2' with '-10431'
10430 10432 -10431 0
c Encoding variable: aux1322 with domain: int(0..2) (representing constraint ((x_00005_00006=2) + (x_00005_00005=2)))
c Both direct and order encoding.
c Var 'aux1322' order represents '0' with '10433'
c Var 'aux1322' direct represents '0' with '10433'
c Var 'aux1322' order represents '1' with '10434'
-10433 10434 0
c Var 'aux1322' direct represents '1' with '10435'
10433 -10434 10435 0
-10435 10434 0
-10435 -10433 0
c Var 'aux1322' direct represents '2' with '-10434'
10433 10435 -10434 0
c Encoding variable: aux1323 with domain: int(0..3) (representing constraint ((x_00005_00003=2) + aux1322))
c Both direct and order encoding.
c Var 'aux1323' order represents '0' with '10436'
c Var 'aux1323' direct represents '0' with '10436'
c Var 'aux1323' order represents '1' with '10437'
-10436 10437 0
c Var 'aux1323' direct represents '1' with '10438'
10436 -10437 10438 0
-10438 10437 0
-10438 -10436 0
c Var 'aux1323' order represents '2' with '10439'
-10437 10439 0
c Var 'aux1323' direct represents '2' with '10440'
10437 -10439 10440 0
-10440 10439 0
-10440 -10437 0
c Var 'aux1323' direct represents '3' with '-10439'
10436 10438 10440 -10439 0
c Encoding variable: aux1324 with domain: int(0..4) (representing constraint (aux1319 + aux1321))
c Both direct and order encoding.
c Var 'aux1324' order represents '0' with '10441'
c Var 'aux1324' direct represents '0' with '10441'
c Var 'aux1324' order represents '1' with '10442'
-10441 10442 0
c Var 'aux1324' direct represents '1' with '10443'
10441 -10442 10443 0
-10443 10442 0
-10443 -10441 0
c Var 'aux1324' order represents '2' with '10444'
-10442 10444 0
c Var 'aux1324' direct represents '2' with '10445'
10442 -10444 10445 0
-10445 10444 0
-10445 -10442 0
c Var 'aux1324' order represents '3' with '10446'
-10444 10446 0
c Var 'aux1324' direct represents '3' with '10447'
10444 -10446 10447 0
-10447 10446 0
-10447 -10444 0
c Var 'aux1324' direct represents '4' with '-10446'
10441 10443 10445 10447 -10446 0
c Encoding variable: aux1325 with domain: int(0..2) (representing constraint ((x_00005_00001=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux1325' order represents '0' with '10448'
c Var 'aux1325' direct represents '0' with '10448'
c Var 'aux1325' order represents '1' with '10449'
-10448 10449 0
c Var 'aux1325' direct represents '1' with '10450'
10448 -10449 10450 0
-10450 10449 0
-10450 -10448 0
c Var 'aux1325' direct represents '2' with '-10449'
10448 10450 -10449 0
c Encoding variable: aux1326 with domain: int(0..2) (representing constraint ((x_00005_00008=3) + (x_00005_00002=3)))
c Both direct and order encoding.
c Var 'aux1326' order represents '0' with '10451'
c Var 'aux1326' direct represents '0' with '10451'
c Var 'aux1326' order represents '1' with '10452'
-10451 10452 0
c Var 'aux1326' direct represents '1' with '10453'
10451 -10452 10453 0
-10453 10452 0
-10453 -10451 0
c Var 'aux1326' direct represents '2' with '-10452'
10451 10453 -10452 0
c Encoding variable: aux1327 with domain: int(0..2) (representing constraint ((x_00005_00007=3) + (x_00005_00004=3)))
c Both direct and order encoding.
c Var 'aux1327' order represents '0' with '10454'
c Var 'aux1327' direct represents '0' with '10454'
c Var 'aux1327' order represents '1' with '10455'
-10454 10455 0
c Var 'aux1327' direct represents '1' with '10456'
10454 -10455 10456 0
-10456 10455 0
-10456 -10454 0
c Var 'aux1327' direct represents '2' with '-10455'
10454 10456 -10455 0
c Encoding variable: aux1328 with domain: int(0..2) (representing constraint ((x_00005_00006=3) + (x_00005_00005=3)))
c Both direct and order encoding.
c Var 'aux1328' order represents '0' with '10457'
c Var 'aux1328' direct represents '0' with '10457'
c Var 'aux1328' order represents '1' with '10458'
-10457 10458 0
c Var 'aux1328' direct represents '1' with '10459'
10457 -10458 10459 0
-10459 10458 0
-10459 -10457 0
c Var 'aux1328' direct represents '2' with '-10458'
10457 10459 -10458 0
c Encoding variable: aux1329 with domain: int(0..3) (representing constraint ((x_00005_00003=3) + aux1328))
c Both direct and order encoding.
c Var 'aux1329' order represents '0' with '10460'
c Var 'aux1329' direct represents '0' with '10460'
c Var 'aux1329' order represents '1' with '10461'
-10460 10461 0
c Var 'aux1329' direct represents '1' with '10462'
10460 -10461 10462 0
-10462 10461 0
-10462 -10460 0
c Var 'aux1329' order represents '2' with '10463'
-10461 10463 0
c Var 'aux1329' direct represents '2' with '10464'
10461 -10463 10464 0
-10464 10463 0
-10464 -10461 0
c Var 'aux1329' direct represents '3' with '-10463'
10460 10462 10464 -10463 0
c Encoding variable: aux1330 with domain: int(0..4) (representing constraint (aux1325 + aux1327))
c Both direct and order encoding.
c Var 'aux1330' order represents '0' with '10465'
c Var 'aux1330' direct represents '0' with '10465'
c Var 'aux1330' order represents '1' with '10466'
-10465 10466 0
c Var 'aux1330' direct represents '1' with '10467'
10465 -10466 10467 0
-10467 10466 0
-10467 -10465 0
c Var 'aux1330' order represents '2' with '10468'
-10466 10468 0
c Var 'aux1330' direct represents '2' with '10469'
10466 -10468 10469 0
-10469 10468 0
-10469 -10466 0
c Var 'aux1330' order represents '3' with '10470'
-10468 10470 0
c Var 'aux1330' direct represents '3' with '10471'
10468 -10470 10471 0
-10471 10470 0
-10471 -10468 0
c Var 'aux1330' direct represents '4' with '-10470'
10465 10467 10469 10471 -10470 0
c Encoding variable: aux1331 with domain: int(0..2) (representing constraint ((x_00005_00001=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux1331' order represents '0' with '10472'
c Var 'aux1331' direct represents '0' with '10472'
c Var 'aux1331' order represents '1' with '10473'
-10472 10473 0
c Var 'aux1331' direct represents '1' with '10474'
10472 -10473 10474 0
-10474 10473 0
-10474 -10472 0
c Var 'aux1331' direct represents '2' with '-10473'
10472 10474 -10473 0
c Encoding variable: aux1332 with domain: int(0..2) (representing constraint ((x_00005_00008=4) + (x_00005_00002=4)))
c Both direct and order encoding.
c Var 'aux1332' order represents '0' with '10475'
c Var 'aux1332' direct represents '0' with '10475'
c Var 'aux1332' order represents '1' with '10476'
-10475 10476 0
c Var 'aux1332' direct represents '1' with '10477'
10475 -10476 10477 0
-10477 10476 0
-10477 -10475 0
c Var 'aux1332' direct represents '2' with '-10476'
10475 10477 -10476 0
c Encoding variable: aux1333 with domain: int(0..2) (representing constraint ((x_00005_00007=4) + (x_00005_00004=4)))
c Both direct and order encoding.
c Var 'aux1333' order represents '0' with '10478'
c Var 'aux1333' direct represents '0' with '10478'
c Var 'aux1333' order represents '1' with '10479'
-10478 10479 0
c Var 'aux1333' direct represents '1' with '10480'
10478 -10479 10480 0
-10480 10479 0
-10480 -10478 0
c Var 'aux1333' direct represents '2' with '-10479'
10478 10480 -10479 0
c Encoding variable: aux1334 with domain: int(0..2) (representing constraint ((x_00005_00006=4) + (x_00005_00005=4)))
c Both direct and order encoding.
c Var 'aux1334' order represents '0' with '10481'
c Var 'aux1334' direct represents '0' with '10481'
c Var 'aux1334' order represents '1' with '10482'
-10481 10482 0
c Var 'aux1334' direct represents '1' with '10483'
10481 -10482 10483 0
-10483 10482 0
-10483 -10481 0
c Var 'aux1334' direct represents '2' with '-10482'
10481 10483 -10482 0
c Encoding variable: aux1335 with domain: int(0..3) (representing constraint ((x_00005_00003=4) + aux1334))
c Both direct and order encoding.
c Var 'aux1335' order represents '0' with '10484'
c Var 'aux1335' direct represents '0' with '10484'
c Var 'aux1335' order represents '1' with '10485'
-10484 10485 0
c Var 'aux1335' direct represents '1' with '10486'
10484 -10485 10486 0
-10486 10485 0
-10486 -10484 0
c Var 'aux1335' order represents '2' with '10487'
-10485 10487 0
c Var 'aux1335' direct represents '2' with '10488'
10485 -10487 10488 0
-10488 10487 0
-10488 -10485 0
c Var 'aux1335' direct represents '3' with '-10487'
10484 10486 10488 -10487 0
c Encoding variable: aux1336 with domain: int(0..4) (representing constraint (aux1331 + aux1333))
c Both direct and order encoding.
c Var 'aux1336' order represents '0' with '10489'
c Var 'aux1336' direct represents '0' with '10489'
c Var 'aux1336' order represents '1' with '10490'
-10489 10490 0
c Var 'aux1336' direct represents '1' with '10491'
10489 -10490 10491 0
-10491 10490 0
-10491 -10489 0
c Var 'aux1336' order represents '2' with '10492'
-10490 10492 0
c Var 'aux1336' direct represents '2' with '10493'
10490 -10492 10493 0
-10493 10492 0
-10493 -10490 0
c Var 'aux1336' order represents '3' with '10494'
-10492 10494 0
c Var 'aux1336' direct represents '3' with '10495'
10492 -10494 10495 0
-10495 10494 0
-10495 -10492 0
c Var 'aux1336' direct represents '4' with '-10494'
10489 10491 10493 10495 -10494 0
c Encoding variable: aux1337 with domain: int(0..2) (representing constraint ((x_00005_00001=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux1337' order represents '0' with '10496'
c Var 'aux1337' direct represents '0' with '10496'
c Var 'aux1337' order represents '1' with '10497'
-10496 10497 0
c Var 'aux1337' direct represents '1' with '10498'
10496 -10497 10498 0
-10498 10497 0
-10498 -10496 0
c Var 'aux1337' direct represents '2' with '-10497'
10496 10498 -10497 0
c Encoding variable: aux1338 with domain: int(0..2) (representing constraint ((x_00005_00008=5) + (x_00005_00002=5)))
c Both direct and order encoding.
c Var 'aux1338' order represents '0' with '10499'
c Var 'aux1338' direct represents '0' with '10499'
c Var 'aux1338' order represents '1' with '10500'
-10499 10500 0
c Var 'aux1338' direct represents '1' with '10501'
10499 -10500 10501 0
-10501 10500 0
-10501 -10499 0
c Var 'aux1338' direct represents '2' with '-10500'
10499 10501 -10500 0
c Encoding variable: aux1339 with domain: int(0..2) (representing constraint ((x_00005_00007=5) + (x_00005_00004=5)))
c Both direct and order encoding.
c Var 'aux1339' order represents '0' with '10502'
c Var 'aux1339' direct represents '0' with '10502'
c Var 'aux1339' order represents '1' with '10503'
-10502 10503 0
c Var 'aux1339' direct represents '1' with '10504'
10502 -10503 10504 0
-10504 10503 0
-10504 -10502 0
c Var 'aux1339' direct represents '2' with '-10503'
10502 10504 -10503 0
c Encoding variable: aux1340 with domain: int(0..2) (representing constraint ((x_00005_00006=5) + (x_00005_00005=5)))
c Both direct and order encoding.
c Var 'aux1340' order represents '0' with '10505'
c Var 'aux1340' direct represents '0' with '10505'
c Var 'aux1340' order represents '1' with '10506'
-10505 10506 0
c Var 'aux1340' direct represents '1' with '10507'
10505 -10506 10507 0
-10507 10506 0
-10507 -10505 0
c Var 'aux1340' direct represents '2' with '-10506'
10505 10507 -10506 0
c Encoding variable: aux1341 with domain: int(0..3) (representing constraint ((x_00005_00003=5) + aux1340))
c Both direct and order encoding.
c Var 'aux1341' order represents '0' with '10508'
c Var 'aux1341' direct represents '0' with '10508'
c Var 'aux1341' order represents '1' with '10509'
-10508 10509 0
c Var 'aux1341' direct represents '1' with '10510'
10508 -10509 10510 0
-10510 10509 0
-10510 -10508 0
c Var 'aux1341' order represents '2' with '10511'
-10509 10511 0
c Var 'aux1341' direct represents '2' with '10512'
10509 -10511 10512 0
-10512 10511 0
-10512 -10509 0
c Var 'aux1341' direct represents '3' with '-10511'
10508 10510 10512 -10511 0
c Encoding variable: aux1342 with domain: int(0..4) (representing constraint (aux1337 + aux1339))
c Both direct and order encoding.
c Var 'aux1342' order represents '0' with '10513'
c Var 'aux1342' direct represents '0' with '10513'
c Var 'aux1342' order represents '1' with '10514'
-10513 10514 0
c Var 'aux1342' direct represents '1' with '10515'
10513 -10514 10515 0
-10515 10514 0
-10515 -10513 0
c Var 'aux1342' order represents '2' with '10516'
-10514 10516 0
c Var 'aux1342' direct represents '2' with '10517'
10514 -10516 10517 0
-10517 10516 0
-10517 -10514 0
c Var 'aux1342' order represents '3' with '10518'
-10516 10518 0
c Var 'aux1342' direct represents '3' with '10519'
10516 -10518 10519 0
-10519 10518 0
-10519 -10516 0
c Var 'aux1342' direct represents '4' with '-10518'
10513 10515 10517 10519 -10518 0
c Encoding variable: aux1343 with domain: int(0..2) (representing constraint ((x_00005_00001=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux1343' order represents '0' with '10520'
c Var 'aux1343' direct represents '0' with '10520'
c Var 'aux1343' order represents '1' with '10521'
-10520 10521 0
c Var 'aux1343' direct represents '1' with '10522'
10520 -10521 10522 0
-10522 10521 0
-10522 -10520 0
c Var 'aux1343' direct represents '2' with '-10521'
10520 10522 -10521 0
c Encoding variable: aux1344 with domain: int(0..2) (representing constraint ((x_00005_00008=6) + (x_00005_00002=6)))
c Both direct and order encoding.
c Var 'aux1344' order represents '0' with '10523'
c Var 'aux1344' direct represents '0' with '10523'
c Var 'aux1344' order represents '1' with '10524'
-10523 10524 0
c Var 'aux1344' direct represents '1' with '10525'
10523 -10524 10525 0
-10525 10524 0
-10525 -10523 0
c Var 'aux1344' direct represents '2' with '-10524'
10523 10525 -10524 0
c Encoding variable: aux1345 with domain: int(0..2) (representing constraint ((x_00005_00007=6) + (x_00005_00004=6)))
c Both direct and order encoding.
c Var 'aux1345' order represents '0' with '10526'
c Var 'aux1345' direct represents '0' with '10526'
c Var 'aux1345' order represents '1' with '10527'
-10526 10527 0
c Var 'aux1345' direct represents '1' with '10528'
10526 -10527 10528 0
-10528 10527 0
-10528 -10526 0
c Var 'aux1345' direct represents '2' with '-10527'
10526 10528 -10527 0
c Encoding variable: aux1346 with domain: int(0..2) (representing constraint ((x_00005_00006=6) + (x_00005_00005=6)))
c Both direct and order encoding.
c Var 'aux1346' order represents '0' with '10529'
c Var 'aux1346' direct represents '0' with '10529'
c Var 'aux1346' order represents '1' with '10530'
-10529 10530 0
c Var 'aux1346' direct represents '1' with '10531'
10529 -10530 10531 0
-10531 10530 0
-10531 -10529 0
c Var 'aux1346' direct represents '2' with '-10530'
10529 10531 -10530 0
c Encoding variable: aux1347 with domain: int(0..3) (representing constraint ((x_00005_00003=6) + aux1346))
c Both direct and order encoding.
c Var 'aux1347' order represents '0' with '10532'
c Var 'aux1347' direct represents '0' with '10532'
c Var 'aux1347' order represents '1' with '10533'
-10532 10533 0
c Var 'aux1347' direct represents '1' with '10534'
10532 -10533 10534 0
-10534 10533 0
-10534 -10532 0
c Var 'aux1347' order represents '2' with '10535'
-10533 10535 0
c Var 'aux1347' direct represents '2' with '10536'
10533 -10535 10536 0
-10536 10535 0
-10536 -10533 0
c Var 'aux1347' direct represents '3' with '-10535'
10532 10534 10536 -10535 0
c Encoding variable: aux1348 with domain: int(0..4) (representing constraint (aux1343 + aux1345))
c Both direct and order encoding.
c Var 'aux1348' order represents '0' with '10537'
c Var 'aux1348' direct represents '0' with '10537'
c Var 'aux1348' order represents '1' with '10538'
-10537 10538 0
c Var 'aux1348' direct represents '1' with '10539'
10537 -10538 10539 0
-10539 10538 0
-10539 -10537 0
c Var 'aux1348' order represents '2' with '10540'
-10538 10540 0
c Var 'aux1348' direct represents '2' with '10541'
10538 -10540 10541 0
-10541 10540 0
-10541 -10538 0
c Var 'aux1348' order represents '3' with '10542'
-10540 10542 0
c Var 'aux1348' direct represents '3' with '10543'
10540 -10542 10543 0
-10543 10542 0
-10543 -10540 0
c Var 'aux1348' direct represents '4' with '-10542'
10537 10539 10541 10543 -10542 0
c Encoding variable: aux1349 with domain: int(0..2) (representing constraint ((x_00005_00001=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux1349' order represents '0' with '10544'
c Var 'aux1349' direct represents '0' with '10544'
c Var 'aux1349' order represents '1' with '10545'
-10544 10545 0
c Var 'aux1349' direct represents '1' with '10546'
10544 -10545 10546 0
-10546 10545 0
-10546 -10544 0
c Var 'aux1349' direct represents '2' with '-10545'
10544 10546 -10545 0
c Encoding variable: aux1350 with domain: int(0..2) (representing constraint ((x_00005_00008=7) + (x_00005_00002=7)))
c Both direct and order encoding.
c Var 'aux1350' order represents '0' with '10547'
c Var 'aux1350' direct represents '0' with '10547'
c Var 'aux1350' order represents '1' with '10548'
-10547 10548 0
c Var 'aux1350' direct represents '1' with '10549'
10547 -10548 10549 0
-10549 10548 0
-10549 -10547 0
c Var 'aux1350' direct represents '2' with '-10548'
10547 10549 -10548 0
c Encoding variable: aux1351 with domain: int(0..2) (representing constraint ((x_00005_00007=7) + (x_00005_00004=7)))
c Both direct and order encoding.
c Var 'aux1351' order represents '0' with '10550'
c Var 'aux1351' direct represents '0' with '10550'
c Var 'aux1351' order represents '1' with '10551'
-10550 10551 0
c Var 'aux1351' direct represents '1' with '10552'
10550 -10551 10552 0
-10552 10551 0
-10552 -10550 0
c Var 'aux1351' direct represents '2' with '-10551'
10550 10552 -10551 0
c Encoding variable: aux1352 with domain: int(0..2) (representing constraint ((x_00005_00006=7) + (x_00005_00005=7)))
c Both direct and order encoding.
c Var 'aux1352' order represents '0' with '10553'
c Var 'aux1352' direct represents '0' with '10553'
c Var 'aux1352' order represents '1' with '10554'
-10553 10554 0
c Var 'aux1352' direct represents '1' with '10555'
10553 -10554 10555 0
-10555 10554 0
-10555 -10553 0
c Var 'aux1352' direct represents '2' with '-10554'
10553 10555 -10554 0
c Encoding variable: aux1353 with domain: int(0..3) (representing constraint ((x_00005_00003=7) + aux1352))
c Both direct and order encoding.
c Var 'aux1353' order represents '0' with '10556'
c Var 'aux1353' direct represents '0' with '10556'
c Var 'aux1353' order represents '1' with '10557'
-10556 10557 0
c Var 'aux1353' direct represents '1' with '10558'
10556 -10557 10558 0
-10558 10557 0
-10558 -10556 0
c Var 'aux1353' order represents '2' with '10559'
-10557 10559 0
c Var 'aux1353' direct represents '2' with '10560'
10557 -10559 10560 0
-10560 10559 0
-10560 -10557 0
c Var 'aux1353' direct represents '3' with '-10559'
10556 10558 10560 -10559 0
c Encoding variable: aux1354 with domain: int(0..4) (representing constraint (aux1349 + aux1351))
c Both direct and order encoding.
c Var 'aux1354' order represents '0' with '10561'
c Var 'aux1354' direct represents '0' with '10561'
c Var 'aux1354' order represents '1' with '10562'
-10561 10562 0
c Var 'aux1354' direct represents '1' with '10563'
10561 -10562 10563 0
-10563 10562 0
-10563 -10561 0
c Var 'aux1354' order represents '2' with '10564'
-10562 10564 0
c Var 'aux1354' direct represents '2' with '10565'
10562 -10564 10565 0
-10565 10564 0
-10565 -10562 0
c Var 'aux1354' order represents '3' with '10566'
-10564 10566 0
c Var 'aux1354' direct represents '3' with '10567'
10564 -10566 10567 0
-10567 10566 0
-10567 -10564 0
c Var 'aux1354' direct represents '4' with '-10566'
10561 10563 10565 10567 -10566 0
c Encoding variable: aux1355 with domain: int(0..2) (representing constraint ((x_00005_00001=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux1355' order represents '0' with '10568'
c Var 'aux1355' direct represents '0' with '10568'
c Var 'aux1355' order represents '1' with '10569'
-10568 10569 0
c Var 'aux1355' direct represents '1' with '10570'
10568 -10569 10570 0
-10570 10569 0
-10570 -10568 0
c Var 'aux1355' direct represents '2' with '-10569'
10568 10570 -10569 0
c Encoding variable: aux1356 with domain: int(0..2) (representing constraint ((x_00005_00008=8) + (x_00005_00002=8)))
c Both direct and order encoding.
c Var 'aux1356' order represents '0' with '10571'
c Var 'aux1356' direct represents '0' with '10571'
c Var 'aux1356' order represents '1' with '10572'
-10571 10572 0
c Var 'aux1356' direct represents '1' with '10573'
10571 -10572 10573 0
-10573 10572 0
-10573 -10571 0
c Var 'aux1356' direct represents '2' with '-10572'
10571 10573 -10572 0
c Encoding variable: aux1357 with domain: int(0..2) (representing constraint ((x_00005_00007=8) + (x_00005_00004=8)))
c Both direct and order encoding.
c Var 'aux1357' order represents '0' with '10574'
c Var 'aux1357' direct represents '0' with '10574'
c Var 'aux1357' order represents '1' with '10575'
-10574 10575 0
c Var 'aux1357' direct represents '1' with '10576'
10574 -10575 10576 0
-10576 10575 0
-10576 -10574 0
c Var 'aux1357' direct represents '2' with '-10575'
10574 10576 -10575 0
c Encoding variable: aux1358 with domain: int(0..2) (representing constraint ((x_00005_00006=8) + (x_00005_00005=8)))
c Both direct and order encoding.
c Var 'aux1358' order represents '0' with '10577'
c Var 'aux1358' direct represents '0' with '10577'
c Var 'aux1358' order represents '1' with '10578'
-10577 10578 0
c Var 'aux1358' direct represents '1' with '10579'
10577 -10578 10579 0
-10579 10578 0
-10579 -10577 0
c Var 'aux1358' direct represents '2' with '-10578'
10577 10579 -10578 0
c Encoding variable: aux1359 with domain: int(0..3) (representing constraint ((x_00005_00003=8) + aux1358))
c Both direct and order encoding.
c Var 'aux1359' order represents '0' with '10580'
c Var 'aux1359' direct represents '0' with '10580'
c Var 'aux1359' order represents '1' with '10581'
-10580 10581 0
c Var 'aux1359' direct represents '1' with '10582'
10580 -10581 10582 0
-10582 10581 0
-10582 -10580 0
c Var 'aux1359' order represents '2' with '10583'
-10581 10583 0
c Var 'aux1359' direct represents '2' with '10584'
10581 -10583 10584 0
-10584 10583 0
-10584 -10581 0
c Var 'aux1359' direct represents '3' with '-10583'
10580 10582 10584 -10583 0
c Encoding variable: aux1360 with domain: int(0..4) (representing constraint (aux1355 + aux1357))
c Both direct and order encoding.
c Var 'aux1360' order represents '0' with '10585'
c Var 'aux1360' direct represents '0' with '10585'
c Var 'aux1360' order represents '1' with '10586'
-10585 10586 0
c Var 'aux1360' direct represents '1' with '10587'
10585 -10586 10587 0
-10587 10586 0
-10587 -10585 0
c Var 'aux1360' order represents '2' with '10588'
-10586 10588 0
c Var 'aux1360' direct represents '2' with '10589'
10586 -10588 10589 0
-10589 10588 0
-10589 -10586 0
c Var 'aux1360' order represents '3' with '10590'
-10588 10590 0
c Var 'aux1360' direct represents '3' with '10591'
10588 -10590 10591 0
-10591 10590 0
-10591 -10588 0
c Var 'aux1360' direct represents '4' with '-10590'
10585 10587 10589 10591 -10590 0
c Encoding variable: aux1361 with domain: int(0..2) (representing constraint ((x_00005_00001=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux1361' order represents '0' with '10592'
c Var 'aux1361' direct represents '0' with '10592'
c Var 'aux1361' order represents '1' with '10593'
-10592 10593 0
c Var 'aux1361' direct represents '1' with '10594'
10592 -10593 10594 0
-10594 10593 0
-10594 -10592 0
c Var 'aux1361' direct represents '2' with '-10593'
10592 10594 -10593 0
c Encoding variable: aux1362 with domain: int(0..2) (representing constraint ((x_00005_00008=9) + (x_00005_00002=9)))
c Both direct and order encoding.
c Var 'aux1362' order represents '0' with '10595'
c Var 'aux1362' direct represents '0' with '10595'
c Var 'aux1362' order represents '1' with '10596'
-10595 10596 0
c Var 'aux1362' direct represents '1' with '10597'
10595 -10596 10597 0
-10597 10596 0
-10597 -10595 0
c Var 'aux1362' direct represents '2' with '-10596'
10595 10597 -10596 0
c Encoding variable: aux1363 with domain: int(0..2) (representing constraint ((x_00005_00007=9) + (x_00005_00004=9)))
c Both direct and order encoding.
c Var 'aux1363' order represents '0' with '10598'
c Var 'aux1363' direct represents '0' with '10598'
c Var 'aux1363' order represents '1' with '10599'
-10598 10599 0
c Var 'aux1363' direct represents '1' with '10600'
10598 -10599 10600 0
-10600 10599 0
-10600 -10598 0
c Var 'aux1363' direct represents '2' with '-10599'
10598 10600 -10599 0
c Encoding variable: aux1364 with domain: int(0..2) (representing constraint ((x_00005_00006=9) + (x_00005_00005=9)))
c Both direct and order encoding.
c Var 'aux1364' order represents '0' with '10601'
c Var 'aux1364' direct represents '0' with '10601'
c Var 'aux1364' order represents '1' with '10602'
-10601 10602 0
c Var 'aux1364' direct represents '1' with '10603'
10601 -10602 10603 0
-10603 10602 0
-10603 -10601 0
c Var 'aux1364' direct represents '2' with '-10602'
10601 10603 -10602 0
c Encoding variable: aux1365 with domain: int(0..3) (representing constraint ((x_00005_00003=9) + aux1364))
c Both direct and order encoding.
c Var 'aux1365' order represents '0' with '10604'
c Var 'aux1365' direct represents '0' with '10604'
c Var 'aux1365' order represents '1' with '10605'
-10604 10605 0
c Var 'aux1365' direct represents '1' with '10606'
10604 -10605 10606 0
-10606 10605 0
-10606 -10604 0
c Var 'aux1365' order represents '2' with '10607'
-10605 10607 0
c Var 'aux1365' direct represents '2' with '10608'
10605 -10607 10608 0
-10608 10607 0
-10608 -10605 0
c Var 'aux1365' direct represents '3' with '-10607'
10604 10606 10608 -10607 0
c Encoding variable: aux1366 with domain: int(0..4) (representing constraint (aux1361 + aux1363))
c Both direct and order encoding.
c Var 'aux1366' order represents '0' with '10609'
c Var 'aux1366' direct represents '0' with '10609'
c Var 'aux1366' order represents '1' with '10610'
-10609 10610 0
c Var 'aux1366' direct represents '1' with '10611'
10609 -10610 10611 0
-10611 10610 0
-10611 -10609 0
c Var 'aux1366' order represents '2' with '10612'
-10610 10612 0
c Var 'aux1366' direct represents '2' with '10613'
10610 -10612 10613 0
-10613 10612 0
-10613 -10610 0
c Var 'aux1366' order represents '3' with '10614'
-10612 10614 0
c Var 'aux1366' direct represents '3' with '10615'
10612 -10614 10615 0
-10615 10614 0
-10615 -10612 0
c Var 'aux1366' direct represents '4' with '-10614'
10609 10611 10613 10615 -10614 0
c Encoding variable: aux1367 with domain: int(0..2) (representing constraint ((x_00006_00001=1) + (x_00006_00009=1)))
c Both direct and order encoding.
c Var 'aux1367' order represents '0' with '10616'
c Var 'aux1367' direct represents '0' with '10616'
c Var 'aux1367' order represents '1' with '10617'
-10616 10617 0
c Var 'aux1367' direct represents '1' with '10618'
10616 -10617 10618 0
-10618 10617 0
-10618 -10616 0
c Var 'aux1367' direct represents '2' with '-10617'
10616 10618 -10617 0
c Encoding variable: aux1368 with domain: int(0..2) (representing constraint ((x_00006_00008=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux1368' order represents '0' with '10619'
c Var 'aux1368' direct represents '0' with '10619'
c Var 'aux1368' order represents '1' with '10620'
-10619 10620 0
c Var 'aux1368' direct represents '1' with '10621'
10619 -10620 10621 0
-10621 10620 0
-10621 -10619 0
c Var 'aux1368' direct represents '2' with '-10620'
10619 10621 -10620 0
c Encoding variable: aux1369 with domain: int(0..2) (representing constraint ((x_00006_00007=1) + (x_00006_00004=1)))
c Both direct and order encoding.
c Var 'aux1369' order represents '0' with '10622'
c Var 'aux1369' direct represents '0' with '10622'
c Var 'aux1369' order represents '1' with '10623'
-10622 10623 0
c Var 'aux1369' direct represents '1' with '10624'
10622 -10623 10624 0
-10624 10623 0
-10624 -10622 0
c Var 'aux1369' direct represents '2' with '-10623'
10622 10624 -10623 0
c Encoding variable: aux1370 with domain: int(0..2) (representing constraint ((x_00006_00006=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux1370' order represents '0' with '10625'
c Var 'aux1370' direct represents '0' with '10625'
c Var 'aux1370' order represents '1' with '10626'
-10625 10626 0
c Var 'aux1370' direct represents '1' with '10627'
10625 -10626 10627 0
-10627 10626 0
-10627 -10625 0
c Var 'aux1370' direct represents '2' with '-10626'
10625 10627 -10626 0
c Encoding variable: aux1371 with domain: int(0..3) (representing constraint ((x_00006_00003=1) + aux1370))
c Both direct and order encoding.
c Var 'aux1371' order represents '0' with '10628'
c Var 'aux1371' direct represents '0' with '10628'
c Var 'aux1371' order represents '1' with '10629'
-10628 10629 0
c Var 'aux1371' direct represents '1' with '10630'
10628 -10629 10630 0
-10630 10629 0
-10630 -10628 0
c Var 'aux1371' order represents '2' with '10631'
-10629 10631 0
c Var 'aux1371' direct represents '2' with '10632'
10629 -10631 10632 0
-10632 10631 0
-10632 -10629 0
c Var 'aux1371' direct represents '3' with '-10631'
10628 10630 10632 -10631 0
c Encoding variable: aux1372 with domain: int(0..4) (representing constraint (aux1367 + aux1369))
c Both direct and order encoding.
c Var 'aux1372' order represents '0' with '10633'
c Var 'aux1372' direct represents '0' with '10633'
c Var 'aux1372' order represents '1' with '10634'
-10633 10634 0
c Var 'aux1372' direct represents '1' with '10635'
10633 -10634 10635 0
-10635 10634 0
-10635 -10633 0
c Var 'aux1372' order represents '2' with '10636'
-10634 10636 0
c Var 'aux1372' direct represents '2' with '10637'
10634 -10636 10637 0
-10637 10636 0
-10637 -10634 0
c Var 'aux1372' order represents '3' with '10638'
-10636 10638 0
c Var 'aux1372' direct represents '3' with '10639'
10636 -10638 10639 0
-10639 10638 0
-10639 -10636 0
c Var 'aux1372' direct represents '4' with '-10638'
10633 10635 10637 10639 -10638 0
c Encoding variable: aux1373 with domain: int(0..2) (representing constraint ((x_00006_00001=2) + (x_00006_00009=2)))
c Both direct and order encoding.
c Var 'aux1373' order represents '0' with '10640'
c Var 'aux1373' direct represents '0' with '10640'
c Var 'aux1373' order represents '1' with '10641'
-10640 10641 0
c Var 'aux1373' direct represents '1' with '10642'
10640 -10641 10642 0
-10642 10641 0
-10642 -10640 0
c Var 'aux1373' direct represents '2' with '-10641'
10640 10642 -10641 0
c Encoding variable: aux1374 with domain: int(0..2) (representing constraint ((x_00006_00008=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux1374' order represents '0' with '10643'
c Var 'aux1374' direct represents '0' with '10643'
c Var 'aux1374' order represents '1' with '10644'
-10643 10644 0
c Var 'aux1374' direct represents '1' with '10645'
10643 -10644 10645 0
-10645 10644 0
-10645 -10643 0
c Var 'aux1374' direct represents '2' with '-10644'
10643 10645 -10644 0
c Encoding variable: aux1375 with domain: int(0..2) (representing constraint ((x_00006_00007=2) + (x_00006_00004=2)))
c Both direct and order encoding.
c Var 'aux1375' order represents '0' with '10646'
c Var 'aux1375' direct represents '0' with '10646'
c Var 'aux1375' order represents '1' with '10647'
-10646 10647 0
c Var 'aux1375' direct represents '1' with '10648'
10646 -10647 10648 0
-10648 10647 0
-10648 -10646 0
c Var 'aux1375' direct represents '2' with '-10647'
10646 10648 -10647 0
c Encoding variable: aux1376 with domain: int(0..2) (representing constraint ((x_00006_00006=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux1376' order represents '0' with '10649'
c Var 'aux1376' direct represents '0' with '10649'
c Var 'aux1376' order represents '1' with '10650'
-10649 10650 0
c Var 'aux1376' direct represents '1' with '10651'
10649 -10650 10651 0
-10651 10650 0
-10651 -10649 0
c Var 'aux1376' direct represents '2' with '-10650'
10649 10651 -10650 0
c Encoding variable: aux1377 with domain: int(0..3) (representing constraint ((x_00006_00003=2) + aux1376))
c Both direct and order encoding.
c Var 'aux1377' order represents '0' with '10652'
c Var 'aux1377' direct represents '0' with '10652'
c Var 'aux1377' order represents '1' with '10653'
-10652 10653 0
c Var 'aux1377' direct represents '1' with '10654'
10652 -10653 10654 0
-10654 10653 0
-10654 -10652 0
c Var 'aux1377' order represents '2' with '10655'
-10653 10655 0
c Var 'aux1377' direct represents '2' with '10656'
10653 -10655 10656 0
-10656 10655 0
-10656 -10653 0
c Var 'aux1377' direct represents '3' with '-10655'
10652 10654 10656 -10655 0
c Encoding variable: aux1378 with domain: int(0..4) (representing constraint (aux1373 + aux1375))
c Both direct and order encoding.
c Var 'aux1378' order represents '0' with '10657'
c Var 'aux1378' direct represents '0' with '10657'
c Var 'aux1378' order represents '1' with '10658'
-10657 10658 0
c Var 'aux1378' direct represents '1' with '10659'
10657 -10658 10659 0
-10659 10658 0
-10659 -10657 0
c Var 'aux1378' order represents '2' with '10660'
-10658 10660 0
c Var 'aux1378' direct represents '2' with '10661'
10658 -10660 10661 0
-10661 10660 0
-10661 -10658 0
c Var 'aux1378' order represents '3' with '10662'
-10660 10662 0
c Var 'aux1378' direct represents '3' with '10663'
10660 -10662 10663 0
-10663 10662 0
-10663 -10660 0
c Var 'aux1378' direct represents '4' with '-10662'
10657 10659 10661 10663 -10662 0
c Encoding variable: aux1379 with domain: int(0..2) (representing constraint ((x_00006_00001=3) + (x_00006_00009=3)))
c Both direct and order encoding.
c Var 'aux1379' order represents '0' with '10664'
c Var 'aux1379' direct represents '0' with '10664'
c Var 'aux1379' order represents '1' with '10665'
-10664 10665 0
c Var 'aux1379' direct represents '1' with '10666'
10664 -10665 10666 0
-10666 10665 0
-10666 -10664 0
c Var 'aux1379' direct represents '2' with '-10665'
10664 10666 -10665 0
c Encoding variable: aux1380 with domain: int(0..2) (representing constraint ((x_00006_00008=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux1380' order represents '0' with '10667'
c Var 'aux1380' direct represents '0' with '10667'
c Var 'aux1380' order represents '1' with '10668'
-10667 10668 0
c Var 'aux1380' direct represents '1' with '10669'
10667 -10668 10669 0
-10669 10668 0
-10669 -10667 0
c Var 'aux1380' direct represents '2' with '-10668'
10667 10669 -10668 0
c Encoding variable: aux1381 with domain: int(0..2) (representing constraint ((x_00006_00007=3) + (x_00006_00004=3)))
c Both direct and order encoding.
c Var 'aux1381' order represents '0' with '10670'
c Var 'aux1381' direct represents '0' with '10670'
c Var 'aux1381' order represents '1' with '10671'
-10670 10671 0
c Var 'aux1381' direct represents '1' with '10672'
10670 -10671 10672 0
-10672 10671 0
-10672 -10670 0
c Var 'aux1381' direct represents '2' with '-10671'
10670 10672 -10671 0
c Encoding variable: aux1382 with domain: int(0..2) (representing constraint ((x_00006_00006=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux1382' order represents '0' with '10673'
c Var 'aux1382' direct represents '0' with '10673'
c Var 'aux1382' order represents '1' with '10674'
-10673 10674 0
c Var 'aux1382' direct represents '1' with '10675'
10673 -10674 10675 0
-10675 10674 0
-10675 -10673 0
c Var 'aux1382' direct represents '2' with '-10674'
10673 10675 -10674 0
c Encoding variable: aux1383 with domain: int(0..3) (representing constraint ((x_00006_00003=3) + aux1382))
c Both direct and order encoding.
c Var 'aux1383' order represents '0' with '10676'
c Var 'aux1383' direct represents '0' with '10676'
c Var 'aux1383' order represents '1' with '10677'
-10676 10677 0
c Var 'aux1383' direct represents '1' with '10678'
10676 -10677 10678 0
-10678 10677 0
-10678 -10676 0
c Var 'aux1383' order represents '2' with '10679'
-10677 10679 0
c Var 'aux1383' direct represents '2' with '10680'
10677 -10679 10680 0
-10680 10679 0
-10680 -10677 0
c Var 'aux1383' direct represents '3' with '-10679'
10676 10678 10680 -10679 0
c Encoding variable: aux1384 with domain: int(0..4) (representing constraint (aux1379 + aux1381))
c Both direct and order encoding.
c Var 'aux1384' order represents '0' with '10681'
c Var 'aux1384' direct represents '0' with '10681'
c Var 'aux1384' order represents '1' with '10682'
-10681 10682 0
c Var 'aux1384' direct represents '1' with '10683'
10681 -10682 10683 0
-10683 10682 0
-10683 -10681 0
c Var 'aux1384' order represents '2' with '10684'
-10682 10684 0
c Var 'aux1384' direct represents '2' with '10685'
10682 -10684 10685 0
-10685 10684 0
-10685 -10682 0
c Var 'aux1384' order represents '3' with '10686'
-10684 10686 0
c Var 'aux1384' direct represents '3' with '10687'
10684 -10686 10687 0
-10687 10686 0
-10687 -10684 0
c Var 'aux1384' direct represents '4' with '-10686'
10681 10683 10685 10687 -10686 0
c Encoding variable: aux1385 with domain: int(0..2) (representing constraint ((x_00006_00001=4) + (x_00006_00009=4)))
c Both direct and order encoding.
c Var 'aux1385' order represents '0' with '10688'
c Var 'aux1385' direct represents '0' with '10688'
c Var 'aux1385' order represents '1' with '10689'
-10688 10689 0
c Var 'aux1385' direct represents '1' with '10690'
10688 -10689 10690 0
-10690 10689 0
-10690 -10688 0
c Var 'aux1385' direct represents '2' with '-10689'
10688 10690 -10689 0
c Encoding variable: aux1386 with domain: int(0..2) (representing constraint ((x_00006_00008=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux1386' order represents '0' with '10691'
c Var 'aux1386' direct represents '0' with '10691'
c Var 'aux1386' order represents '1' with '10692'
-10691 10692 0
c Var 'aux1386' direct represents '1' with '10693'
10691 -10692 10693 0
-10693 10692 0
-10693 -10691 0
c Var 'aux1386' direct represents '2' with '-10692'
10691 10693 -10692 0
c Encoding variable: aux1387 with domain: int(0..2) (representing constraint ((x_00006_00007=4) + (x_00006_00004=4)))
c Both direct and order encoding.
c Var 'aux1387' order represents '0' with '10694'
c Var 'aux1387' direct represents '0' with '10694'
c Var 'aux1387' order represents '1' with '10695'
-10694 10695 0
c Var 'aux1387' direct represents '1' with '10696'
10694 -10695 10696 0
-10696 10695 0
-10696 -10694 0
c Var 'aux1387' direct represents '2' with '-10695'
10694 10696 -10695 0
c Encoding variable: aux1388 with domain: int(0..2) (representing constraint ((x_00006_00006=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux1388' order represents '0' with '10697'
c Var 'aux1388' direct represents '0' with '10697'
c Var 'aux1388' order represents '1' with '10698'
-10697 10698 0
c Var 'aux1388' direct represents '1' with '10699'
10697 -10698 10699 0
-10699 10698 0
-10699 -10697 0
c Var 'aux1388' direct represents '2' with '-10698'
10697 10699 -10698 0
c Encoding variable: aux1389 with domain: int(0..3) (representing constraint ((x_00006_00003=4) + aux1388))
c Both direct and order encoding.
c Var 'aux1389' order represents '0' with '10700'
c Var 'aux1389' direct represents '0' with '10700'
c Var 'aux1389' order represents '1' with '10701'
-10700 10701 0
c Var 'aux1389' direct represents '1' with '10702'
10700 -10701 10702 0
-10702 10701 0
-10702 -10700 0
c Var 'aux1389' order represents '2' with '10703'
-10701 10703 0
c Var 'aux1389' direct represents '2' with '10704'
10701 -10703 10704 0
-10704 10703 0
-10704 -10701 0
c Var 'aux1389' direct represents '3' with '-10703'
10700 10702 10704 -10703 0
c Encoding variable: aux1390 with domain: int(0..4) (representing constraint (aux1385 + aux1387))
c Both direct and order encoding.
c Var 'aux1390' order represents '0' with '10705'
c Var 'aux1390' direct represents '0' with '10705'
c Var 'aux1390' order represents '1' with '10706'
-10705 10706 0
c Var 'aux1390' direct represents '1' with '10707'
10705 -10706 10707 0
-10707 10706 0
-10707 -10705 0
c Var 'aux1390' order represents '2' with '10708'
-10706 10708 0
c Var 'aux1390' direct represents '2' with '10709'
10706 -10708 10709 0
-10709 10708 0
-10709 -10706 0
c Var 'aux1390' order represents '3' with '10710'
-10708 10710 0
c Var 'aux1390' direct represents '3' with '10711'
10708 -10710 10711 0
-10711 10710 0
-10711 -10708 0
c Var 'aux1390' direct represents '4' with '-10710'
10705 10707 10709 10711 -10710 0
c Encoding variable: aux1391 with domain: int(0..2) (representing constraint ((x_00006_00001=5) + (x_00006_00009=5)))
c Both direct and order encoding.
c Var 'aux1391' order represents '0' with '10712'
c Var 'aux1391' direct represents '0' with '10712'
c Var 'aux1391' order represents '1' with '10713'
-10712 10713 0
c Var 'aux1391' direct represents '1' with '10714'
10712 -10713 10714 0
-10714 10713 0
-10714 -10712 0
c Var 'aux1391' direct represents '2' with '-10713'
10712 10714 -10713 0
c Encoding variable: aux1392 with domain: int(0..2) (representing constraint ((x_00006_00008=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux1392' order represents '0' with '10715'
c Var 'aux1392' direct represents '0' with '10715'
c Var 'aux1392' order represents '1' with '10716'
-10715 10716 0
c Var 'aux1392' direct represents '1' with '10717'
10715 -10716 10717 0
-10717 10716 0
-10717 -10715 0
c Var 'aux1392' direct represents '2' with '-10716'
10715 10717 -10716 0
c Encoding variable: aux1393 with domain: int(0..2) (representing constraint ((x_00006_00007=5) + (x_00006_00004=5)))
c Both direct and order encoding.
c Var 'aux1393' order represents '0' with '10718'
c Var 'aux1393' direct represents '0' with '10718'
c Var 'aux1393' order represents '1' with '10719'
-10718 10719 0
c Var 'aux1393' direct represents '1' with '10720'
10718 -10719 10720 0
-10720 10719 0
-10720 -10718 0
c Var 'aux1393' direct represents '2' with '-10719'
10718 10720 -10719 0
c Encoding variable: aux1394 with domain: int(0..2) (representing constraint ((x_00006_00006=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux1394' order represents '0' with '10721'
c Var 'aux1394' direct represents '0' with '10721'
c Var 'aux1394' order represents '1' with '10722'
-10721 10722 0
c Var 'aux1394' direct represents '1' with '10723'
10721 -10722 10723 0
-10723 10722 0
-10723 -10721 0
c Var 'aux1394' direct represents '2' with '-10722'
10721 10723 -10722 0
c Encoding variable: aux1395 with domain: int(0..3) (representing constraint ((x_00006_00003=5) + aux1394))
c Both direct and order encoding.
c Var 'aux1395' order represents '0' with '10724'
c Var 'aux1395' direct represents '0' with '10724'
c Var 'aux1395' order represents '1' with '10725'
-10724 10725 0
c Var 'aux1395' direct represents '1' with '10726'
10724 -10725 10726 0
-10726 10725 0
-10726 -10724 0
c Var 'aux1395' order represents '2' with '10727'
-10725 10727 0
c Var 'aux1395' direct represents '2' with '10728'
10725 -10727 10728 0
-10728 10727 0
-10728 -10725 0
c Var 'aux1395' direct represents '3' with '-10727'
10724 10726 10728 -10727 0
c Encoding variable: aux1396 with domain: int(0..4) (representing constraint (aux1391 + aux1393))
c Both direct and order encoding.
c Var 'aux1396' order represents '0' with '10729'
c Var 'aux1396' direct represents '0' with '10729'
c Var 'aux1396' order represents '1' with '10730'
-10729 10730 0
c Var 'aux1396' direct represents '1' with '10731'
10729 -10730 10731 0
-10731 10730 0
-10731 -10729 0
c Var 'aux1396' order represents '2' with '10732'
-10730 10732 0
c Var 'aux1396' direct represents '2' with '10733'
10730 -10732 10733 0
-10733 10732 0
-10733 -10730 0
c Var 'aux1396' order represents '3' with '10734'
-10732 10734 0
c Var 'aux1396' direct represents '3' with '10735'
10732 -10734 10735 0
-10735 10734 0
-10735 -10732 0
c Var 'aux1396' direct represents '4' with '-10734'
10729 10731 10733 10735 -10734 0
c Encoding variable: aux1397 with domain: int(0..2) (representing constraint ((x_00006_00001=6) + (x_00006_00009=6)))
c Both direct and order encoding.
c Var 'aux1397' order represents '0' with '10736'
c Var 'aux1397' direct represents '0' with '10736'
c Var 'aux1397' order represents '1' with '10737'
-10736 10737 0
c Var 'aux1397' direct represents '1' with '10738'
10736 -10737 10738 0
-10738 10737 0
-10738 -10736 0
c Var 'aux1397' direct represents '2' with '-10737'
10736 10738 -10737 0
c Encoding variable: aux1398 with domain: int(0..2) (representing constraint ((x_00006_00008=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux1398' order represents '0' with '10739'
c Var 'aux1398' direct represents '0' with '10739'
c Var 'aux1398' order represents '1' with '10740'
-10739 10740 0
c Var 'aux1398' direct represents '1' with '10741'
10739 -10740 10741 0
-10741 10740 0
-10741 -10739 0
c Var 'aux1398' direct represents '2' with '-10740'
10739 10741 -10740 0
c Encoding variable: aux1399 with domain: int(0..2) (representing constraint ((x_00006_00007=6) + (x_00006_00004=6)))
c Both direct and order encoding.
c Var 'aux1399' order represents '0' with '10742'
c Var 'aux1399' direct represents '0' with '10742'
c Var 'aux1399' order represents '1' with '10743'
-10742 10743 0
c Var 'aux1399' direct represents '1' with '10744'
10742 -10743 10744 0
-10744 10743 0
-10744 -10742 0
c Var 'aux1399' direct represents '2' with '-10743'
10742 10744 -10743 0
c Encoding variable: aux1400 with domain: int(0..2) (representing constraint ((x_00006_00006=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux1400' order represents '0' with '10745'
c Var 'aux1400' direct represents '0' with '10745'
c Var 'aux1400' order represents '1' with '10746'
-10745 10746 0
c Var 'aux1400' direct represents '1' with '10747'
10745 -10746 10747 0
-10747 10746 0
-10747 -10745 0
c Var 'aux1400' direct represents '2' with '-10746'
10745 10747 -10746 0
c Encoding variable: aux1401 with domain: int(0..3) (representing constraint ((x_00006_00003=6) + aux1400))
c Both direct and order encoding.
c Var 'aux1401' order represents '0' with '10748'
c Var 'aux1401' direct represents '0' with '10748'
c Var 'aux1401' order represents '1' with '10749'
-10748 10749 0
c Var 'aux1401' direct represents '1' with '10750'
10748 -10749 10750 0
-10750 10749 0
-10750 -10748 0
c Var 'aux1401' order represents '2' with '10751'
-10749 10751 0
c Var 'aux1401' direct represents '2' with '10752'
10749 -10751 10752 0
-10752 10751 0
-10752 -10749 0
c Var 'aux1401' direct represents '3' with '-10751'
10748 10750 10752 -10751 0
c Encoding variable: aux1402 with domain: int(0..4) (representing constraint (aux1397 + aux1399))
c Both direct and order encoding.
c Var 'aux1402' order represents '0' with '10753'
c Var 'aux1402' direct represents '0' with '10753'
c Var 'aux1402' order represents '1' with '10754'
-10753 10754 0
c Var 'aux1402' direct represents '1' with '10755'
10753 -10754 10755 0
-10755 10754 0
-10755 -10753 0
c Var 'aux1402' order represents '2' with '10756'
-10754 10756 0
c Var 'aux1402' direct represents '2' with '10757'
10754 -10756 10757 0
-10757 10756 0
-10757 -10754 0
c Var 'aux1402' order represents '3' with '10758'
-10756 10758 0
c Var 'aux1402' direct represents '3' with '10759'
10756 -10758 10759 0
-10759 10758 0
-10759 -10756 0
c Var 'aux1402' direct represents '4' with '-10758'
10753 10755 10757 10759 -10758 0
c Encoding variable: aux1403 with domain: int(0..2) (representing constraint ((x_00006_00001=7) + (x_00006_00009=7)))
c Both direct and order encoding.
c Var 'aux1403' order represents '0' with '10760'
c Var 'aux1403' direct represents '0' with '10760'
c Var 'aux1403' order represents '1' with '10761'
-10760 10761 0
c Var 'aux1403' direct represents '1' with '10762'
10760 -10761 10762 0
-10762 10761 0
-10762 -10760 0
c Var 'aux1403' direct represents '2' with '-10761'
10760 10762 -10761 0
c Encoding variable: aux1404 with domain: int(0..2) (representing constraint ((x_00006_00008=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux1404' order represents '0' with '10763'
c Var 'aux1404' direct represents '0' with '10763'
c Var 'aux1404' order represents '1' with '10764'
-10763 10764 0
c Var 'aux1404' direct represents '1' with '10765'
10763 -10764 10765 0
-10765 10764 0
-10765 -10763 0
c Var 'aux1404' direct represents '2' with '-10764'
10763 10765 -10764 0
c Encoding variable: aux1405 with domain: int(0..2) (representing constraint ((x_00006_00007=7) + (x_00006_00004=7)))
c Both direct and order encoding.
c Var 'aux1405' order represents '0' with '10766'
c Var 'aux1405' direct represents '0' with '10766'
c Var 'aux1405' order represents '1' with '10767'
-10766 10767 0
c Var 'aux1405' direct represents '1' with '10768'
10766 -10767 10768 0
-10768 10767 0
-10768 -10766 0
c Var 'aux1405' direct represents '2' with '-10767'
10766 10768 -10767 0
c Encoding variable: aux1406 with domain: int(0..2) (representing constraint ((x_00006_00006=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux1406' order represents '0' with '10769'
c Var 'aux1406' direct represents '0' with '10769'
c Var 'aux1406' order represents '1' with '10770'
-10769 10770 0
c Var 'aux1406' direct represents '1' with '10771'
10769 -10770 10771 0
-10771 10770 0
-10771 -10769 0
c Var 'aux1406' direct represents '2' with '-10770'
10769 10771 -10770 0
c Encoding variable: aux1407 with domain: int(0..3) (representing constraint ((x_00006_00003=7) + aux1406))
c Both direct and order encoding.
c Var 'aux1407' order represents '0' with '10772'
c Var 'aux1407' direct represents '0' with '10772'
c Var 'aux1407' order represents '1' with '10773'
-10772 10773 0
c Var 'aux1407' direct represents '1' with '10774'
10772 -10773 10774 0
-10774 10773 0
-10774 -10772 0
c Var 'aux1407' order represents '2' with '10775'
-10773 10775 0
c Var 'aux1407' direct represents '2' with '10776'
10773 -10775 10776 0
-10776 10775 0
-10776 -10773 0
c Var 'aux1407' direct represents '3' with '-10775'
10772 10774 10776 -10775 0
c Encoding variable: aux1408 with domain: int(0..4) (representing constraint (aux1403 + aux1405))
c Both direct and order encoding.
c Var 'aux1408' order represents '0' with '10777'
c Var 'aux1408' direct represents '0' with '10777'
c Var 'aux1408' order represents '1' with '10778'
-10777 10778 0
c Var 'aux1408' direct represents '1' with '10779'
10777 -10778 10779 0
-10779 10778 0
-10779 -10777 0
c Var 'aux1408' order represents '2' with '10780'
-10778 10780 0
c Var 'aux1408' direct represents '2' with '10781'
10778 -10780 10781 0
-10781 10780 0
-10781 -10778 0
c Var 'aux1408' order represents '3' with '10782'
-10780 10782 0
c Var 'aux1408' direct represents '3' with '10783'
10780 -10782 10783 0
-10783 10782 0
-10783 -10780 0
c Var 'aux1408' direct represents '4' with '-10782'
10777 10779 10781 10783 -10782 0
c Encoding variable: aux1409 with domain: int(0..2) (representing constraint ((x_00006_00001=8) + (x_00006_00009=8)))
c Both direct and order encoding.
c Var 'aux1409' order represents '0' with '10784'
c Var 'aux1409' direct represents '0' with '10784'
c Var 'aux1409' order represents '1' with '10785'
-10784 10785 0
c Var 'aux1409' direct represents '1' with '10786'
10784 -10785 10786 0
-10786 10785 0
-10786 -10784 0
c Var 'aux1409' direct represents '2' with '-10785'
10784 10786 -10785 0
c Encoding variable: aux1410 with domain: int(0..2) (representing constraint ((x_00006_00008=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux1410' order represents '0' with '10787'
c Var 'aux1410' direct represents '0' with '10787'
c Var 'aux1410' order represents '1' with '10788'
-10787 10788 0
c Var 'aux1410' direct represents '1' with '10789'
10787 -10788 10789 0
-10789 10788 0
-10789 -10787 0
c Var 'aux1410' direct represents '2' with '-10788'
10787 10789 -10788 0
c Encoding variable: aux1411 with domain: int(0..2) (representing constraint ((x_00006_00007=8) + (x_00006_00004=8)))
c Both direct and order encoding.
c Var 'aux1411' order represents '0' with '10790'
c Var 'aux1411' direct represents '0' with '10790'
c Var 'aux1411' order represents '1' with '10791'
-10790 10791 0
c Var 'aux1411' direct represents '1' with '10792'
10790 -10791 10792 0
-10792 10791 0
-10792 -10790 0
c Var 'aux1411' direct represents '2' with '-10791'
10790 10792 -10791 0
c Encoding variable: aux1412 with domain: int(0..2) (representing constraint ((x_00006_00006=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux1412' order represents '0' with '10793'
c Var 'aux1412' direct represents '0' with '10793'
c Var 'aux1412' order represents '1' with '10794'
-10793 10794 0
c Var 'aux1412' direct represents '1' with '10795'
10793 -10794 10795 0
-10795 10794 0
-10795 -10793 0
c Var 'aux1412' direct represents '2' with '-10794'
10793 10795 -10794 0
c Encoding variable: aux1413 with domain: int(0..3) (representing constraint ((x_00006_00003=8) + aux1412))
c Both direct and order encoding.
c Var 'aux1413' order represents '0' with '10796'
c Var 'aux1413' direct represents '0' with '10796'
c Var 'aux1413' order represents '1' with '10797'
-10796 10797 0
c Var 'aux1413' direct represents '1' with '10798'
10796 -10797 10798 0
-10798 10797 0
-10798 -10796 0
c Var 'aux1413' order represents '2' with '10799'
-10797 10799 0
c Var 'aux1413' direct represents '2' with '10800'
10797 -10799 10800 0
-10800 10799 0
-10800 -10797 0
c Var 'aux1413' direct represents '3' with '-10799'
10796 10798 10800 -10799 0
c Encoding variable: aux1414 with domain: int(0..4) (representing constraint (aux1409 + aux1411))
c Both direct and order encoding.
c Var 'aux1414' order represents '0' with '10801'
c Var 'aux1414' direct represents '0' with '10801'
c Var 'aux1414' order represents '1' with '10802'
-10801 10802 0
c Var 'aux1414' direct represents '1' with '10803'
10801 -10802 10803 0
-10803 10802 0
-10803 -10801 0
c Var 'aux1414' order represents '2' with '10804'
-10802 10804 0
c Var 'aux1414' direct represents '2' with '10805'
10802 -10804 10805 0
-10805 10804 0
-10805 -10802 0
c Var 'aux1414' order represents '3' with '10806'
-10804 10806 0
c Var 'aux1414' direct represents '3' with '10807'
10804 -10806 10807 0
-10807 10806 0
-10807 -10804 0
c Var 'aux1414' direct represents '4' with '-10806'
10801 10803 10805 10807 -10806 0
c Encoding variable: aux1415 with domain: int(0..2) (representing constraint ((x_00006_00001=9) + (x_00006_00009=9)))
c Both direct and order encoding.
c Var 'aux1415' order represents '0' with '10808'
c Var 'aux1415' direct represents '0' with '10808'
c Var 'aux1415' order represents '1' with '10809'
-10808 10809 0
c Var 'aux1415' direct represents '1' with '10810'
10808 -10809 10810 0
-10810 10809 0
-10810 -10808 0
c Var 'aux1415' direct represents '2' with '-10809'
10808 10810 -10809 0
c Encoding variable: aux1416 with domain: int(0..2) (representing constraint ((x_00006_00008=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux1416' order represents '0' with '10811'
c Var 'aux1416' direct represents '0' with '10811'
c Var 'aux1416' order represents '1' with '10812'
-10811 10812 0
c Var 'aux1416' direct represents '1' with '10813'
10811 -10812 10813 0
-10813 10812 0
-10813 -10811 0
c Var 'aux1416' direct represents '2' with '-10812'
10811 10813 -10812 0
c Encoding variable: aux1417 with domain: int(0..2) (representing constraint ((x_00006_00007=9) + (x_00006_00004=9)))
c Both direct and order encoding.
c Var 'aux1417' order represents '0' with '10814'
c Var 'aux1417' direct represents '0' with '10814'
c Var 'aux1417' order represents '1' with '10815'
-10814 10815 0
c Var 'aux1417' direct represents '1' with '10816'
10814 -10815 10816 0
-10816 10815 0
-10816 -10814 0
c Var 'aux1417' direct represents '2' with '-10815'
10814 10816 -10815 0
c Encoding variable: aux1418 with domain: int(0..2) (representing constraint ((x_00006_00006=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux1418' order represents '0' with '10817'
c Var 'aux1418' direct represents '0' with '10817'
c Var 'aux1418' order represents '1' with '10818'
-10817 10818 0
c Var 'aux1418' direct represents '1' with '10819'
10817 -10818 10819 0
-10819 10818 0
-10819 -10817 0
c Var 'aux1418' direct represents '2' with '-10818'
10817 10819 -10818 0
c Encoding variable: aux1419 with domain: int(0..3) (representing constraint ((x_00006_00003=9) + aux1418))
c Both direct and order encoding.
c Var 'aux1419' order represents '0' with '10820'
c Var 'aux1419' direct represents '0' with '10820'
c Var 'aux1419' order represents '1' with '10821'
-10820 10821 0
c Var 'aux1419' direct represents '1' with '10822'
10820 -10821 10822 0
-10822 10821 0
-10822 -10820 0
c Var 'aux1419' order represents '2' with '10823'
-10821 10823 0
c Var 'aux1419' direct represents '2' with '10824'
10821 -10823 10824 0
-10824 10823 0
-10824 -10821 0
c Var 'aux1419' direct represents '3' with '-10823'
10820 10822 10824 -10823 0
c Encoding variable: aux1420 with domain: int(0..4) (representing constraint (aux1415 + aux1417))
c Both direct and order encoding.
c Var 'aux1420' order represents '0' with '10825'
c Var 'aux1420' direct represents '0' with '10825'
c Var 'aux1420' order represents '1' with '10826'
-10825 10826 0
c Var 'aux1420' direct represents '1' with '10827'
10825 -10826 10827 0
-10827 10826 0
-10827 -10825 0
c Var 'aux1420' order represents '2' with '10828'
-10826 10828 0
c Var 'aux1420' direct represents '2' with '10829'
10826 -10828 10829 0
-10829 10828 0
-10829 -10826 0
c Var 'aux1420' order represents '3' with '10830'
-10828 10830 0
c Var 'aux1420' direct represents '3' with '10831'
10828 -10830 10831 0
-10831 10830 0
-10831 -10828 0
c Var 'aux1420' direct represents '4' with '-10830'
10825 10827 10829 10831 -10830 0
c Encoding variable: aux1421 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00007_00009=1)))
c Both direct and order encoding.
c Var 'aux1421' order represents '0' with '10832'
c Var 'aux1421' direct represents '0' with '10832'
c Var 'aux1421' order represents '1' with '10833'
-10832 10833 0
c Var 'aux1421' direct represents '1' with '10834'
10832 -10833 10834 0
-10834 10833 0
-10834 -10832 0
c Var 'aux1421' direct represents '2' with '-10833'
10832 10834 -10833 0
c Encoding variable: aux1422 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00007_00002=1)))
c Both direct and order encoding.
c Var 'aux1422' order represents '0' with '10835'
c Var 'aux1422' direct represents '0' with '10835'
c Var 'aux1422' order represents '1' with '10836'
-10835 10836 0
c Var 'aux1422' direct represents '1' with '10837'
10835 -10836 10837 0
-10837 10836 0
-10837 -10835 0
c Var 'aux1422' direct represents '2' with '-10836'
10835 10837 -10836 0
c Encoding variable: aux1423 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00007_00004=1)))
c Both direct and order encoding.
c Var 'aux1423' order represents '0' with '10838'
c Var 'aux1423' direct represents '0' with '10838'
c Var 'aux1423' order represents '1' with '10839'
-10838 10839 0
c Var 'aux1423' direct represents '1' with '10840'
10838 -10839 10840 0
-10840 10839 0
-10840 -10838 0
c Var 'aux1423' direct represents '2' with '-10839'
10838 10840 -10839 0
c Encoding variable: aux1424 with domain: int(0..2) (representing constraint ((x_00007_00006=1) + (x_00007_00005=1)))
c Both direct and order encoding.
c Var 'aux1424' order represents '0' with '10841'
c Var 'aux1424' direct represents '0' with '10841'
c Var 'aux1424' order represents '1' with '10842'
-10841 10842 0
c Var 'aux1424' direct represents '1' with '10843'
10841 -10842 10843 0
-10843 10842 0
-10843 -10841 0
c Var 'aux1424' direct represents '2' with '-10842'
10841 10843 -10842 0
c Encoding variable: aux1425 with domain: int(0..3) (representing constraint ((x_00007_00003=1) + aux1424))
c Both direct and order encoding.
c Var 'aux1425' order represents '0' with '10844'
c Var 'aux1425' direct represents '0' with '10844'
c Var 'aux1425' order represents '1' with '10845'
-10844 10845 0
c Var 'aux1425' direct represents '1' with '10846'
10844 -10845 10846 0
-10846 10845 0
-10846 -10844 0
c Var 'aux1425' order represents '2' with '10847'
-10845 10847 0
c Var 'aux1425' direct represents '2' with '10848'
10845 -10847 10848 0
-10848 10847 0
-10848 -10845 0
c Var 'aux1425' direct represents '3' with '-10847'
10844 10846 10848 -10847 0
c Encoding variable: aux1426 with domain: int(0..4) (representing constraint (aux1421 + aux1423))
c Both direct and order encoding.
c Var 'aux1426' order represents '0' with '10849'
c Var 'aux1426' direct represents '0' with '10849'
c Var 'aux1426' order represents '1' with '10850'
-10849 10850 0
c Var 'aux1426' direct represents '1' with '10851'
10849 -10850 10851 0
-10851 10850 0
-10851 -10849 0
c Var 'aux1426' order represents '2' with '10852'
-10850 10852 0
c Var 'aux1426' direct represents '2' with '10853'
10850 -10852 10853 0
-10853 10852 0
-10853 -10850 0
c Var 'aux1426' order represents '3' with '10854'
-10852 10854 0
c Var 'aux1426' direct represents '3' with '10855'
10852 -10854 10855 0
-10855 10854 0
-10855 -10852 0
c Var 'aux1426' direct represents '4' with '-10854'
10849 10851 10853 10855 -10854 0
c Encoding variable: aux1427 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00007_00009=2)))
c Both direct and order encoding.
c Var 'aux1427' order represents '0' with '10856'
c Var 'aux1427' direct represents '0' with '10856'
c Var 'aux1427' order represents '1' with '10857'
-10856 10857 0
c Var 'aux1427' direct represents '1' with '10858'
10856 -10857 10858 0
-10858 10857 0
-10858 -10856 0
c Var 'aux1427' direct represents '2' with '-10857'
10856 10858 -10857 0
c Encoding variable: aux1428 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00007_00002=2)))
c Both direct and order encoding.
c Var 'aux1428' order represents '0' with '10859'
c Var 'aux1428' direct represents '0' with '10859'
c Var 'aux1428' order represents '1' with '10860'
-10859 10860 0
c Var 'aux1428' direct represents '1' with '10861'
10859 -10860 10861 0
-10861 10860 0
-10861 -10859 0
c Var 'aux1428' direct represents '2' with '-10860'
10859 10861 -10860 0
c Encoding variable: aux1429 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00007_00004=2)))
c Both direct and order encoding.
c Var 'aux1429' order represents '0' with '10862'
c Var 'aux1429' direct represents '0' with '10862'
c Var 'aux1429' order represents '1' with '10863'
-10862 10863 0
c Var 'aux1429' direct represents '1' with '10864'
10862 -10863 10864 0
-10864 10863 0
-10864 -10862 0
c Var 'aux1429' direct represents '2' with '-10863'
10862 10864 -10863 0
c Encoding variable: aux1430 with domain: int(0..2) (representing constraint ((x_00007_00006=2) + (x_00007_00005=2)))
c Both direct and order encoding.
c Var 'aux1430' order represents '0' with '10865'
c Var 'aux1430' direct represents '0' with '10865'
c Var 'aux1430' order represents '1' with '10866'
-10865 10866 0
c Var 'aux1430' direct represents '1' with '10867'
10865 -10866 10867 0
-10867 10866 0
-10867 -10865 0
c Var 'aux1430' direct represents '2' with '-10866'
10865 10867 -10866 0
c Encoding variable: aux1431 with domain: int(0..3) (representing constraint ((x_00007_00003=2) + aux1430))
c Both direct and order encoding.
c Var 'aux1431' order represents '0' with '10868'
c Var 'aux1431' direct represents '0' with '10868'
c Var 'aux1431' order represents '1' with '10869'
-10868 10869 0
c Var 'aux1431' direct represents '1' with '10870'
10868 -10869 10870 0
-10870 10869 0
-10870 -10868 0
c Var 'aux1431' order represents '2' with '10871'
-10869 10871 0
c Var 'aux1431' direct represents '2' with '10872'
10869 -10871 10872 0
-10872 10871 0
-10872 -10869 0
c Var 'aux1431' direct represents '3' with '-10871'
10868 10870 10872 -10871 0
c Encoding variable: aux1432 with domain: int(0..4) (representing constraint (aux1427 + aux1429))
c Both direct and order encoding.
c Var 'aux1432' order represents '0' with '10873'
c Var 'aux1432' direct represents '0' with '10873'
c Var 'aux1432' order represents '1' with '10874'
-10873 10874 0
c Var 'aux1432' direct represents '1' with '10875'
10873 -10874 10875 0
-10875 10874 0
-10875 -10873 0
c Var 'aux1432' order represents '2' with '10876'
-10874 10876 0
c Var 'aux1432' direct represents '2' with '10877'
10874 -10876 10877 0
-10877 10876 0
-10877 -10874 0
c Var 'aux1432' order represents '3' with '10878'
-10876 10878 0
c Var 'aux1432' direct represents '3' with '10879'
10876 -10878 10879 0
-10879 10878 0
-10879 -10876 0
c Var 'aux1432' direct represents '4' with '-10878'
10873 10875 10877 10879 -10878 0
c Encoding variable: aux1433 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00007_00009=3)))
c Both direct and order encoding.
c Var 'aux1433' order represents '0' with '10880'
c Var 'aux1433' direct represents '0' with '10880'
c Var 'aux1433' order represents '1' with '10881'
-10880 10881 0
c Var 'aux1433' direct represents '1' with '10882'
10880 -10881 10882 0
-10882 10881 0
-10882 -10880 0
c Var 'aux1433' direct represents '2' with '-10881'
10880 10882 -10881 0
c Encoding variable: aux1434 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00007_00002=3)))
c Both direct and order encoding.
c Var 'aux1434' order represents '0' with '10883'
c Var 'aux1434' direct represents '0' with '10883'
c Var 'aux1434' order represents '1' with '10884'
-10883 10884 0
c Var 'aux1434' direct represents '1' with '10885'
10883 -10884 10885 0
-10885 10884 0
-10885 -10883 0
c Var 'aux1434' direct represents '2' with '-10884'
10883 10885 -10884 0
c Encoding variable: aux1435 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00007_00004=3)))
c Both direct and order encoding.
c Var 'aux1435' order represents '0' with '10886'
c Var 'aux1435' direct represents '0' with '10886'
c Var 'aux1435' order represents '1' with '10887'
-10886 10887 0
c Var 'aux1435' direct represents '1' with '10888'
10886 -10887 10888 0
-10888 10887 0
-10888 -10886 0
c Var 'aux1435' direct represents '2' with '-10887'
10886 10888 -10887 0
c Encoding variable: aux1436 with domain: int(0..2) (representing constraint ((x_00007_00006=3) + (x_00007_00005=3)))
c Both direct and order encoding.
c Var 'aux1436' order represents '0' with '10889'
c Var 'aux1436' direct represents '0' with '10889'
c Var 'aux1436' order represents '1' with '10890'
-10889 10890 0
c Var 'aux1436' direct represents '1' with '10891'
10889 -10890 10891 0
-10891 10890 0
-10891 -10889 0
c Var 'aux1436' direct represents '2' with '-10890'
10889 10891 -10890 0
c Encoding variable: aux1437 with domain: int(0..3) (representing constraint ((x_00007_00003=3) + aux1436))
c Both direct and order encoding.
c Var 'aux1437' order represents '0' with '10892'
c Var 'aux1437' direct represents '0' with '10892'
c Var 'aux1437' order represents '1' with '10893'
-10892 10893 0
c Var 'aux1437' direct represents '1' with '10894'
10892 -10893 10894 0
-10894 10893 0
-10894 -10892 0
c Var 'aux1437' order represents '2' with '10895'
-10893 10895 0
c Var 'aux1437' direct represents '2' with '10896'
10893 -10895 10896 0
-10896 10895 0
-10896 -10893 0
c Var 'aux1437' direct represents '3' with '-10895'
10892 10894 10896 -10895 0
c Encoding variable: aux1438 with domain: int(0..4) (representing constraint (aux1433 + aux1435))
c Both direct and order encoding.
c Var 'aux1438' order represents '0' with '10897'
c Var 'aux1438' direct represents '0' with '10897'
c Var 'aux1438' order represents '1' with '10898'
-10897 10898 0
c Var 'aux1438' direct represents '1' with '10899'
10897 -10898 10899 0
-10899 10898 0
-10899 -10897 0
c Var 'aux1438' order represents '2' with '10900'
-10898 10900 0
c Var 'aux1438' direct represents '2' with '10901'
10898 -10900 10901 0
-10901 10900 0
-10901 -10898 0
c Var 'aux1438' order represents '3' with '10902'
-10900 10902 0
c Var 'aux1438' direct represents '3' with '10903'
10900 -10902 10903 0
-10903 10902 0
-10903 -10900 0
c Var 'aux1438' direct represents '4' with '-10902'
10897 10899 10901 10903 -10902 0
c Encoding variable: aux1439 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00007_00009=4)))
c Both direct and order encoding.
c Var 'aux1439' order represents '0' with '10904'
c Var 'aux1439' direct represents '0' with '10904'
c Var 'aux1439' order represents '1' with '10905'
-10904 10905 0
c Var 'aux1439' direct represents '1' with '10906'
10904 -10905 10906 0
-10906 10905 0
-10906 -10904 0
c Var 'aux1439' direct represents '2' with '-10905'
10904 10906 -10905 0
c Encoding variable: aux1440 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00007_00002=4)))
c Both direct and order encoding.
c Var 'aux1440' order represents '0' with '10907'
c Var 'aux1440' direct represents '0' with '10907'
c Var 'aux1440' order represents '1' with '10908'
-10907 10908 0
c Var 'aux1440' direct represents '1' with '10909'
10907 -10908 10909 0
-10909 10908 0
-10909 -10907 0
c Var 'aux1440' direct represents '2' with '-10908'
10907 10909 -10908 0
c Encoding variable: aux1441 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00007_00004=4)))
c Both direct and order encoding.
c Var 'aux1441' order represents '0' with '10910'
c Var 'aux1441' direct represents '0' with '10910'
c Var 'aux1441' order represents '1' with '10911'
-10910 10911 0
c Var 'aux1441' direct represents '1' with '10912'
10910 -10911 10912 0
-10912 10911 0
-10912 -10910 0
c Var 'aux1441' direct represents '2' with '-10911'
10910 10912 -10911 0
c Encoding variable: aux1442 with domain: int(0..2) (representing constraint ((x_00007_00006=4) + (x_00007_00005=4)))
c Both direct and order encoding.
c Var 'aux1442' order represents '0' with '10913'
c Var 'aux1442' direct represents '0' with '10913'
c Var 'aux1442' order represents '1' with '10914'
-10913 10914 0
c Var 'aux1442' direct represents '1' with '10915'
10913 -10914 10915 0
-10915 10914 0
-10915 -10913 0
c Var 'aux1442' direct represents '2' with '-10914'
10913 10915 -10914 0
c Encoding variable: aux1443 with domain: int(0..3) (representing constraint ((x_00007_00003=4) + aux1442))
c Both direct and order encoding.
c Var 'aux1443' order represents '0' with '10916'
c Var 'aux1443' direct represents '0' with '10916'
c Var 'aux1443' order represents '1' with '10917'
-10916 10917 0
c Var 'aux1443' direct represents '1' with '10918'
10916 -10917 10918 0
-10918 10917 0
-10918 -10916 0
c Var 'aux1443' order represents '2' with '10919'
-10917 10919 0
c Var 'aux1443' direct represents '2' with '10920'
10917 -10919 10920 0
-10920 10919 0
-10920 -10917 0
c Var 'aux1443' direct represents '3' with '-10919'
10916 10918 10920 -10919 0
c Encoding variable: aux1444 with domain: int(0..4) (representing constraint (aux1439 + aux1441))
c Both direct and order encoding.
c Var 'aux1444' order represents '0' with '10921'
c Var 'aux1444' direct represents '0' with '10921'
c Var 'aux1444' order represents '1' with '10922'
-10921 10922 0
c Var 'aux1444' direct represents '1' with '10923'
10921 -10922 10923 0
-10923 10922 0
-10923 -10921 0
c Var 'aux1444' order represents '2' with '10924'
-10922 10924 0
c Var 'aux1444' direct represents '2' with '10925'
10922 -10924 10925 0
-10925 10924 0
-10925 -10922 0
c Var 'aux1444' order represents '3' with '10926'
-10924 10926 0
c Var 'aux1444' direct represents '3' with '10927'
10924 -10926 10927 0
-10927 10926 0
-10927 -10924 0
c Var 'aux1444' direct represents '4' with '-10926'
10921 10923 10925 10927 -10926 0
c Encoding variable: aux1445 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00007_00009=5)))
c Both direct and order encoding.
c Var 'aux1445' order represents '0' with '10928'
c Var 'aux1445' direct represents '0' with '10928'
c Var 'aux1445' order represents '1' with '10929'
-10928 10929 0
c Var 'aux1445' direct represents '1' with '10930'
10928 -10929 10930 0
-10930 10929 0
-10930 -10928 0
c Var 'aux1445' direct represents '2' with '-10929'
10928 10930 -10929 0
c Encoding variable: aux1446 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00007_00002=5)))
c Both direct and order encoding.
c Var 'aux1446' order represents '0' with '10931'
c Var 'aux1446' direct represents '0' with '10931'
c Var 'aux1446' order represents '1' with '10932'
-10931 10932 0
c Var 'aux1446' direct represents '1' with '10933'
10931 -10932 10933 0
-10933 10932 0
-10933 -10931 0
c Var 'aux1446' direct represents '2' with '-10932'
10931 10933 -10932 0
c Encoding variable: aux1447 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00007_00004=5)))
c Both direct and order encoding.
c Var 'aux1447' order represents '0' with '10934'
c Var 'aux1447' direct represents '0' with '10934'
c Var 'aux1447' order represents '1' with '10935'
-10934 10935 0
c Var 'aux1447' direct represents '1' with '10936'
10934 -10935 10936 0
-10936 10935 0
-10936 -10934 0
c Var 'aux1447' direct represents '2' with '-10935'
10934 10936 -10935 0
c Encoding variable: aux1448 with domain: int(0..2) (representing constraint ((x_00007_00006=5) + (x_00007_00005=5)))
c Both direct and order encoding.
c Var 'aux1448' order represents '0' with '10937'
c Var 'aux1448' direct represents '0' with '10937'
c Var 'aux1448' order represents '1' with '10938'
-10937 10938 0
c Var 'aux1448' direct represents '1' with '10939'
10937 -10938 10939 0
-10939 10938 0
-10939 -10937 0
c Var 'aux1448' direct represents '2' with '-10938'
10937 10939 -10938 0
c Encoding variable: aux1449 with domain: int(0..3) (representing constraint ((x_00007_00003=5) + aux1448))
c Both direct and order encoding.
c Var 'aux1449' order represents '0' with '10940'
c Var 'aux1449' direct represents '0' with '10940'
c Var 'aux1449' order represents '1' with '10941'
-10940 10941 0
c Var 'aux1449' direct represents '1' with '10942'
10940 -10941 10942 0
-10942 10941 0
-10942 -10940 0
c Var 'aux1449' order represents '2' with '10943'
-10941 10943 0
c Var 'aux1449' direct represents '2' with '10944'
10941 -10943 10944 0
-10944 10943 0
-10944 -10941 0
c Var 'aux1449' direct represents '3' with '-10943'
10940 10942 10944 -10943 0
c Encoding variable: aux1450 with domain: int(0..4) (representing constraint (aux1445 + aux1447))
c Both direct and order encoding.
c Var 'aux1450' order represents '0' with '10945'
c Var 'aux1450' direct represents '0' with '10945'
c Var 'aux1450' order represents '1' with '10946'
-10945 10946 0
c Var 'aux1450' direct represents '1' with '10947'
10945 -10946 10947 0
-10947 10946 0
-10947 -10945 0
c Var 'aux1450' order represents '2' with '10948'
-10946 10948 0
c Var 'aux1450' direct represents '2' with '10949'
10946 -10948 10949 0
-10949 10948 0
-10949 -10946 0
c Var 'aux1450' order represents '3' with '10950'
-10948 10950 0
c Var 'aux1450' direct represents '3' with '10951'
10948 -10950 10951 0
-10951 10950 0
-10951 -10948 0
c Var 'aux1450' direct represents '4' with '-10950'
10945 10947 10949 10951 -10950 0
c Encoding variable: aux1451 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00007_00009=6)))
c Both direct and order encoding.
c Var 'aux1451' order represents '0' with '10952'
c Var 'aux1451' direct represents '0' with '10952'
c Var 'aux1451' order represents '1' with '10953'
-10952 10953 0
c Var 'aux1451' direct represents '1' with '10954'
10952 -10953 10954 0
-10954 10953 0
-10954 -10952 0
c Var 'aux1451' direct represents '2' with '-10953'
10952 10954 -10953 0
c Encoding variable: aux1452 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00007_00002=6)))
c Both direct and order encoding.
c Var 'aux1452' order represents '0' with '10955'
c Var 'aux1452' direct represents '0' with '10955'
c Var 'aux1452' order represents '1' with '10956'
-10955 10956 0
c Var 'aux1452' direct represents '1' with '10957'
10955 -10956 10957 0
-10957 10956 0
-10957 -10955 0
c Var 'aux1452' direct represents '2' with '-10956'
10955 10957 -10956 0
c Encoding variable: aux1453 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00007_00004=6)))
c Both direct and order encoding.
c Var 'aux1453' order represents '0' with '10958'
c Var 'aux1453' direct represents '0' with '10958'
c Var 'aux1453' order represents '1' with '10959'
-10958 10959 0
c Var 'aux1453' direct represents '1' with '10960'
10958 -10959 10960 0
-10960 10959 0
-10960 -10958 0
c Var 'aux1453' direct represents '2' with '-10959'
10958 10960 -10959 0
c Encoding variable: aux1454 with domain: int(0..2) (representing constraint ((x_00007_00006=6) + (x_00007_00005=6)))
c Both direct and order encoding.
c Var 'aux1454' order represents '0' with '10961'
c Var 'aux1454' direct represents '0' with '10961'
c Var 'aux1454' order represents '1' with '10962'
-10961 10962 0
c Var 'aux1454' direct represents '1' with '10963'
10961 -10962 10963 0
-10963 10962 0
-10963 -10961 0
c Var 'aux1454' direct represents '2' with '-10962'
10961 10963 -10962 0
c Encoding variable: aux1455 with domain: int(0..3) (representing constraint ((x_00007_00003=6) + aux1454))
c Both direct and order encoding.
c Var 'aux1455' order represents '0' with '10964'
c Var 'aux1455' direct represents '0' with '10964'
c Var 'aux1455' order represents '1' with '10965'
-10964 10965 0
c Var 'aux1455' direct represents '1' with '10966'
10964 -10965 10966 0
-10966 10965 0
-10966 -10964 0
c Var 'aux1455' order represents '2' with '10967'
-10965 10967 0
c Var 'aux1455' direct represents '2' with '10968'
10965 -10967 10968 0
-10968 10967 0
-10968 -10965 0
c Var 'aux1455' direct represents '3' with '-10967'
10964 10966 10968 -10967 0
c Encoding variable: aux1456 with domain: int(0..4) (representing constraint (aux1451 + aux1453))
c Both direct and order encoding.
c Var 'aux1456' order represents '0' with '10969'
c Var 'aux1456' direct represents '0' with '10969'
c Var 'aux1456' order represents '1' with '10970'
-10969 10970 0
c Var 'aux1456' direct represents '1' with '10971'
10969 -10970 10971 0
-10971 10970 0
-10971 -10969 0
c Var 'aux1456' order represents '2' with '10972'
-10970 10972 0
c Var 'aux1456' direct represents '2' with '10973'
10970 -10972 10973 0
-10973 10972 0
-10973 -10970 0
c Var 'aux1456' order represents '3' with '10974'
-10972 10974 0
c Var 'aux1456' direct represents '3' with '10975'
10972 -10974 10975 0
-10975 10974 0
-10975 -10972 0
c Var 'aux1456' direct represents '4' with '-10974'
10969 10971 10973 10975 -10974 0
c Encoding variable: aux1457 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00007_00009=7)))
c Both direct and order encoding.
c Var 'aux1457' order represents '0' with '10976'
c Var 'aux1457' direct represents '0' with '10976'
c Var 'aux1457' order represents '1' with '10977'
-10976 10977 0
c Var 'aux1457' direct represents '1' with '10978'
10976 -10977 10978 0
-10978 10977 0
-10978 -10976 0
c Var 'aux1457' direct represents '2' with '-10977'
10976 10978 -10977 0
c Encoding variable: aux1458 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00007_00002=7)))
c Both direct and order encoding.
c Var 'aux1458' order represents '0' with '10979'
c Var 'aux1458' direct represents '0' with '10979'
c Var 'aux1458' order represents '1' with '10980'
-10979 10980 0
c Var 'aux1458' direct represents '1' with '10981'
10979 -10980 10981 0
-10981 10980 0
-10981 -10979 0
c Var 'aux1458' direct represents '2' with '-10980'
10979 10981 -10980 0
c Encoding variable: aux1459 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00007_00004=7)))
c Both direct and order encoding.
c Var 'aux1459' order represents '0' with '10982'
c Var 'aux1459' direct represents '0' with '10982'
c Var 'aux1459' order represents '1' with '10983'
-10982 10983 0
c Var 'aux1459' direct represents '1' with '10984'
10982 -10983 10984 0
-10984 10983 0
-10984 -10982 0
c Var 'aux1459' direct represents '2' with '-10983'
10982 10984 -10983 0
c Encoding variable: aux1460 with domain: int(0..2) (representing constraint ((x_00007_00006=7) + (x_00007_00005=7)))
c Both direct and order encoding.
c Var 'aux1460' order represents '0' with '10985'
c Var 'aux1460' direct represents '0' with '10985'
c Var 'aux1460' order represents '1' with '10986'
-10985 10986 0
c Var 'aux1460' direct represents '1' with '10987'
10985 -10986 10987 0
-10987 10986 0
-10987 -10985 0
c Var 'aux1460' direct represents '2' with '-10986'
10985 10987 -10986 0
c Encoding variable: aux1461 with domain: int(0..3) (representing constraint ((x_00007_00003=7) + aux1460))
c Both direct and order encoding.
c Var 'aux1461' order represents '0' with '10988'
c Var 'aux1461' direct represents '0' with '10988'
c Var 'aux1461' order represents '1' with '10989'
-10988 10989 0
c Var 'aux1461' direct represents '1' with '10990'
10988 -10989 10990 0
-10990 10989 0
-10990 -10988 0
c Var 'aux1461' order represents '2' with '10991'
-10989 10991 0
c Var 'aux1461' direct represents '2' with '10992'
10989 -10991 10992 0
-10992 10991 0
-10992 -10989 0
c Var 'aux1461' direct represents '3' with '-10991'
10988 10990 10992 -10991 0
c Encoding variable: aux1462 with domain: int(0..4) (representing constraint (aux1457 + aux1459))
c Both direct and order encoding.
c Var 'aux1462' order represents '0' with '10993'
c Var 'aux1462' direct represents '0' with '10993'
c Var 'aux1462' order represents '1' with '10994'
-10993 10994 0
c Var 'aux1462' direct represents '1' with '10995'
10993 -10994 10995 0
-10995 10994 0
-10995 -10993 0
c Var 'aux1462' order represents '2' with '10996'
-10994 10996 0
c Var 'aux1462' direct represents '2' with '10997'
10994 -10996 10997 0
-10997 10996 0
-10997 -10994 0
c Var 'aux1462' order represents '3' with '10998'
-10996 10998 0
c Var 'aux1462' direct represents '3' with '10999'
10996 -10998 10999 0
-10999 10998 0
-10999 -10996 0
c Var 'aux1462' direct represents '4' with '-10998'
10993 10995 10997 10999 -10998 0
c Encoding variable: aux1463 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00007_00009=8)))
c Both direct and order encoding.
c Var 'aux1463' order represents '0' with '11000'
c Var 'aux1463' direct represents '0' with '11000'
c Var 'aux1463' order represents '1' with '11001'
-11000 11001 0
c Var 'aux1463' direct represents '1' with '11002'
11000 -11001 11002 0
-11002 11001 0
-11002 -11000 0
c Var 'aux1463' direct represents '2' with '-11001'
11000 11002 -11001 0
c Encoding variable: aux1464 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00007_00002=8)))
c Both direct and order encoding.
c Var 'aux1464' order represents '0' with '11003'
c Var 'aux1464' direct represents '0' with '11003'
c Var 'aux1464' order represents '1' with '11004'
-11003 11004 0
c Var 'aux1464' direct represents '1' with '11005'
11003 -11004 11005 0
-11005 11004 0
-11005 -11003 0
c Var 'aux1464' direct represents '2' with '-11004'
11003 11005 -11004 0
c Encoding variable: aux1465 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00007_00004=8)))
c Both direct and order encoding.
c Var 'aux1465' order represents '0' with '11006'
c Var 'aux1465' direct represents '0' with '11006'
c Var 'aux1465' order represents '1' with '11007'
-11006 11007 0
c Var 'aux1465' direct represents '1' with '11008'
11006 -11007 11008 0
-11008 11007 0
-11008 -11006 0
c Var 'aux1465' direct represents '2' with '-11007'
11006 11008 -11007 0
c Encoding variable: aux1466 with domain: int(0..2) (representing constraint ((x_00007_00006=8) + (x_00007_00005=8)))
c Both direct and order encoding.
c Var 'aux1466' order represents '0' with '11009'
c Var 'aux1466' direct represents '0' with '11009'
c Var 'aux1466' order represents '1' with '11010'
-11009 11010 0
c Var 'aux1466' direct represents '1' with '11011'
11009 -11010 11011 0
-11011 11010 0
-11011 -11009 0
c Var 'aux1466' direct represents '2' with '-11010'
11009 11011 -11010 0
c Encoding variable: aux1467 with domain: int(0..3) (representing constraint ((x_00007_00003=8) + aux1466))
c Both direct and order encoding.
c Var 'aux1467' order represents '0' with '11012'
c Var 'aux1467' direct represents '0' with '11012'
c Var 'aux1467' order represents '1' with '11013'
-11012 11013 0
c Var 'aux1467' direct represents '1' with '11014'
11012 -11013 11014 0
-11014 11013 0
-11014 -11012 0
c Var 'aux1467' order represents '2' with '11015'
-11013 11015 0
c Var 'aux1467' direct represents '2' with '11016'
11013 -11015 11016 0
-11016 11015 0
-11016 -11013 0
c Var 'aux1467' direct represents '3' with '-11015'
11012 11014 11016 -11015 0
c Encoding variable: aux1468 with domain: int(0..4) (representing constraint (aux1463 + aux1465))
c Both direct and order encoding.
c Var 'aux1468' order represents '0' with '11017'
c Var 'aux1468' direct represents '0' with '11017'
c Var 'aux1468' order represents '1' with '11018'
-11017 11018 0
c Var 'aux1468' direct represents '1' with '11019'
11017 -11018 11019 0
-11019 11018 0
-11019 -11017 0
c Var 'aux1468' order represents '2' with '11020'
-11018 11020 0
c Var 'aux1468' direct represents '2' with '11021'
11018 -11020 11021 0
-11021 11020 0
-11021 -11018 0
c Var 'aux1468' order represents '3' with '11022'
-11020 11022 0
c Var 'aux1468' direct represents '3' with '11023'
11020 -11022 11023 0
-11023 11022 0
-11023 -11020 0
c Var 'aux1468' direct represents '4' with '-11022'
11017 11019 11021 11023 -11022 0
c Encoding variable: aux1469 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00007_00009=9)))
c Both direct and order encoding.
c Var 'aux1469' order represents '0' with '11024'
c Var 'aux1469' direct represents '0' with '11024'
c Var 'aux1469' order represents '1' with '11025'
-11024 11025 0
c Var 'aux1469' direct represents '1' with '11026'
11024 -11025 11026 0
-11026 11025 0
-11026 -11024 0
c Var 'aux1469' direct represents '2' with '-11025'
11024 11026 -11025 0
c Encoding variable: aux1470 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00007_00002=9)))
c Both direct and order encoding.
c Var 'aux1470' order represents '0' with '11027'
c Var 'aux1470' direct represents '0' with '11027'
c Var 'aux1470' order represents '1' with '11028'
-11027 11028 0
c Var 'aux1470' direct represents '1' with '11029'
11027 -11028 11029 0
-11029 11028 0
-11029 -11027 0
c Var 'aux1470' direct represents '2' with '-11028'
11027 11029 -11028 0
c Encoding variable: aux1471 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00007_00004=9)))
c Both direct and order encoding.
c Var 'aux1471' order represents '0' with '11030'
c Var 'aux1471' direct represents '0' with '11030'
c Var 'aux1471' order represents '1' with '11031'
-11030 11031 0
c Var 'aux1471' direct represents '1' with '11032'
11030 -11031 11032 0
-11032 11031 0
-11032 -11030 0
c Var 'aux1471' direct represents '2' with '-11031'
11030 11032 -11031 0
c Encoding variable: aux1472 with domain: int(0..2) (representing constraint ((x_00007_00006=9) + (x_00007_00005=9)))
c Both direct and order encoding.
c Var 'aux1472' order represents '0' with '11033'
c Var 'aux1472' direct represents '0' with '11033'
c Var 'aux1472' order represents '1' with '11034'
-11033 11034 0
c Var 'aux1472' direct represents '1' with '11035'
11033 -11034 11035 0
-11035 11034 0
-11035 -11033 0
c Var 'aux1472' direct represents '2' with '-11034'
11033 11035 -11034 0
c Encoding variable: aux1473 with domain: int(0..3) (representing constraint ((x_00007_00003=9) + aux1472))
c Both direct and order encoding.
c Var 'aux1473' order represents '0' with '11036'
c Var 'aux1473' direct represents '0' with '11036'
c Var 'aux1473' order represents '1' with '11037'
-11036 11037 0
c Var 'aux1473' direct represents '1' with '11038'
11036 -11037 11038 0
-11038 11037 0
-11038 -11036 0
c Var 'aux1473' order represents '2' with '11039'
-11037 11039 0
c Var 'aux1473' direct represents '2' with '11040'
11037 -11039 11040 0
-11040 11039 0
-11040 -11037 0
c Var 'aux1473' direct represents '3' with '-11039'
11036 11038 11040 -11039 0
c Encoding variable: aux1474 with domain: int(0..4) (representing constraint (aux1469 + aux1471))
c Both direct and order encoding.
c Var 'aux1474' order represents '0' with '11041'
c Var 'aux1474' direct represents '0' with '11041'
c Var 'aux1474' order represents '1' with '11042'
-11041 11042 0
c Var 'aux1474' direct represents '1' with '11043'
11041 -11042 11043 0
-11043 11042 0
-11043 -11041 0
c Var 'aux1474' order represents '2' with '11044'
-11042 11044 0
c Var 'aux1474' direct represents '2' with '11045'
11042 -11044 11045 0
-11045 11044 0
-11045 -11042 0
c Var 'aux1474' order represents '3' with '11046'
-11044 11046 0
c Var 'aux1474' direct represents '3' with '11047'
11044 -11046 11047 0
-11047 11046 0
-11047 -11044 0
c Var 'aux1474' direct represents '4' with '-11046'
11041 11043 11045 11047 -11046 0
c Encoding variable: aux1475 with domain: int(0..2) (representing constraint ((x_00008_00001=1) + (x_00008_00009=1)))
c Both direct and order encoding.
c Var 'aux1475' order represents '0' with '11048'
c Var 'aux1475' direct represents '0' with '11048'
c Var 'aux1475' order represents '1' with '11049'
-11048 11049 0
c Var 'aux1475' direct represents '1' with '11050'
11048 -11049 11050 0
-11050 11049 0
-11050 -11048 0
c Var 'aux1475' direct represents '2' with '-11049'
11048 11050 -11049 0
c Encoding variable: aux1476 with domain: int(0..2) (representing constraint ((x_00008_00008=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux1476' order represents '0' with '11051'
c Var 'aux1476' direct represents '0' with '11051'
c Var 'aux1476' order represents '1' with '11052'
-11051 11052 0
c Var 'aux1476' direct represents '1' with '11053'
11051 -11052 11053 0
-11053 11052 0
-11053 -11051 0
c Var 'aux1476' direct represents '2' with '-11052'
11051 11053 -11052 0
c Encoding variable: aux1477 with domain: int(0..2) (representing constraint ((x_00008_00007=1) + (x_00008_00004=1)))
c Both direct and order encoding.
c Var 'aux1477' order represents '0' with '11054'
c Var 'aux1477' direct represents '0' with '11054'
c Var 'aux1477' order represents '1' with '11055'
-11054 11055 0
c Var 'aux1477' direct represents '1' with '11056'
11054 -11055 11056 0
-11056 11055 0
-11056 -11054 0
c Var 'aux1477' direct represents '2' with '-11055'
11054 11056 -11055 0
c Encoding variable: aux1478 with domain: int(0..2) (representing constraint ((x_00008_00006=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux1478' order represents '0' with '11057'
c Var 'aux1478' direct represents '0' with '11057'
c Var 'aux1478' order represents '1' with '11058'
-11057 11058 0
c Var 'aux1478' direct represents '1' with '11059'
11057 -11058 11059 0
-11059 11058 0
-11059 -11057 0
c Var 'aux1478' direct represents '2' with '-11058'
11057 11059 -11058 0
c Encoding variable: aux1479 with domain: int(0..3) (representing constraint ((x_00008_00003=1) + aux1478))
c Both direct and order encoding.
c Var 'aux1479' order represents '0' with '11060'
c Var 'aux1479' direct represents '0' with '11060'
c Var 'aux1479' order represents '1' with '11061'
-11060 11061 0
c Var 'aux1479' direct represents '1' with '11062'
11060 -11061 11062 0
-11062 11061 0
-11062 -11060 0
c Var 'aux1479' order represents '2' with '11063'
-11061 11063 0
c Var 'aux1479' direct represents '2' with '11064'
11061 -11063 11064 0
-11064 11063 0
-11064 -11061 0
c Var 'aux1479' direct represents '3' with '-11063'
11060 11062 11064 -11063 0
c Encoding variable: aux1480 with domain: int(0..4) (representing constraint (aux1475 + aux1477))
c Both direct and order encoding.
c Var 'aux1480' order represents '0' with '11065'
c Var 'aux1480' direct represents '0' with '11065'
c Var 'aux1480' order represents '1' with '11066'
-11065 11066 0
c Var 'aux1480' direct represents '1' with '11067'
11065 -11066 11067 0
-11067 11066 0
-11067 -11065 0
c Var 'aux1480' order represents '2' with '11068'
-11066 11068 0
c Var 'aux1480' direct represents '2' with '11069'
11066 -11068 11069 0
-11069 11068 0
-11069 -11066 0
c Var 'aux1480' order represents '3' with '11070'
-11068 11070 0
c Var 'aux1480' direct represents '3' with '11071'
11068 -11070 11071 0
-11071 11070 0
-11071 -11068 0
c Var 'aux1480' direct represents '4' with '-11070'
11065 11067 11069 11071 -11070 0
c Encoding variable: aux1481 with domain: int(0..2) (representing constraint ((x_00008_00001=2) + (x_00008_00009=2)))
c Both direct and order encoding.
c Var 'aux1481' order represents '0' with '11072'
c Var 'aux1481' direct represents '0' with '11072'
c Var 'aux1481' order represents '1' with '11073'
-11072 11073 0
c Var 'aux1481' direct represents '1' with '11074'
11072 -11073 11074 0
-11074 11073 0
-11074 -11072 0
c Var 'aux1481' direct represents '2' with '-11073'
11072 11074 -11073 0
c Encoding variable: aux1482 with domain: int(0..2) (representing constraint ((x_00008_00008=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux1482' order represents '0' with '11075'
c Var 'aux1482' direct represents '0' with '11075'
c Var 'aux1482' order represents '1' with '11076'
-11075 11076 0
c Var 'aux1482' direct represents '1' with '11077'
11075 -11076 11077 0
-11077 11076 0
-11077 -11075 0
c Var 'aux1482' direct represents '2' with '-11076'
11075 11077 -11076 0
c Encoding variable: aux1483 with domain: int(0..2) (representing constraint ((x_00008_00007=2) + (x_00008_00004=2)))
c Both direct and order encoding.
c Var 'aux1483' order represents '0' with '11078'
c Var 'aux1483' direct represents '0' with '11078'
c Var 'aux1483' order represents '1' with '11079'
-11078 11079 0
c Var 'aux1483' direct represents '1' with '11080'
11078 -11079 11080 0
-11080 11079 0
-11080 -11078 0
c Var 'aux1483' direct represents '2' with '-11079'
11078 11080 -11079 0
c Encoding variable: aux1484 with domain: int(0..2) (representing constraint ((x_00008_00006=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux1484' order represents '0' with '11081'
c Var 'aux1484' direct represents '0' with '11081'
c Var 'aux1484' order represents '1' with '11082'
-11081 11082 0
c Var 'aux1484' direct represents '1' with '11083'
11081 -11082 11083 0
-11083 11082 0
-11083 -11081 0
c Var 'aux1484' direct represents '2' with '-11082'
11081 11083 -11082 0
c Encoding variable: aux1485 with domain: int(0..3) (representing constraint ((x_00008_00003=2) + aux1484))
c Both direct and order encoding.
c Var 'aux1485' order represents '0' with '11084'
c Var 'aux1485' direct represents '0' with '11084'
c Var 'aux1485' order represents '1' with '11085'
-11084 11085 0
c Var 'aux1485' direct represents '1' with '11086'
11084 -11085 11086 0
-11086 11085 0
-11086 -11084 0
c Var 'aux1485' order represents '2' with '11087'
-11085 11087 0
c Var 'aux1485' direct represents '2' with '11088'
11085 -11087 11088 0
-11088 11087 0
-11088 -11085 0
c Var 'aux1485' direct represents '3' with '-11087'
11084 11086 11088 -11087 0
c Encoding variable: aux1486 with domain: int(0..4) (representing constraint (aux1481 + aux1483))
c Both direct and order encoding.
c Var 'aux1486' order represents '0' with '11089'
c Var 'aux1486' direct represents '0' with '11089'
c Var 'aux1486' order represents '1' with '11090'
-11089 11090 0
c Var 'aux1486' direct represents '1' with '11091'
11089 -11090 11091 0
-11091 11090 0
-11091 -11089 0
c Var 'aux1486' order represents '2' with '11092'
-11090 11092 0
c Var 'aux1486' direct represents '2' with '11093'
11090 -11092 11093 0
-11093 11092 0
-11093 -11090 0
c Var 'aux1486' order represents '3' with '11094'
-11092 11094 0
c Var 'aux1486' direct represents '3' with '11095'
11092 -11094 11095 0
-11095 11094 0
-11095 -11092 0
c Var 'aux1486' direct represents '4' with '-11094'
11089 11091 11093 11095 -11094 0
c Encoding variable: aux1487 with domain: int(0..2) (representing constraint ((x_00008_00001=3) + (x_00008_00009=3)))
c Both direct and order encoding.
c Var 'aux1487' order represents '0' with '11096'
c Var 'aux1487' direct represents '0' with '11096'
c Var 'aux1487' order represents '1' with '11097'
-11096 11097 0
c Var 'aux1487' direct represents '1' with '11098'
11096 -11097 11098 0
-11098 11097 0
-11098 -11096 0
c Var 'aux1487' direct represents '2' with '-11097'
11096 11098 -11097 0
c Encoding variable: aux1488 with domain: int(0..2) (representing constraint ((x_00008_00008=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux1488' order represents '0' with '11099'
c Var 'aux1488' direct represents '0' with '11099'
c Var 'aux1488' order represents '1' with '11100'
-11099 11100 0
c Var 'aux1488' direct represents '1' with '11101'
11099 -11100 11101 0
-11101 11100 0
-11101 -11099 0
c Var 'aux1488' direct represents '2' with '-11100'
11099 11101 -11100 0
c Encoding variable: aux1489 with domain: int(0..2) (representing constraint ((x_00008_00007=3) + (x_00008_00004=3)))
c Both direct and order encoding.
c Var 'aux1489' order represents '0' with '11102'
c Var 'aux1489' direct represents '0' with '11102'
c Var 'aux1489' order represents '1' with '11103'
-11102 11103 0
c Var 'aux1489' direct represents '1' with '11104'
11102 -11103 11104 0
-11104 11103 0
-11104 -11102 0
c Var 'aux1489' direct represents '2' with '-11103'
11102 11104 -11103 0
c Encoding variable: aux1490 with domain: int(0..2) (representing constraint ((x_00008_00006=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux1490' order represents '0' with '11105'
c Var 'aux1490' direct represents '0' with '11105'
c Var 'aux1490' order represents '1' with '11106'
-11105 11106 0
c Var 'aux1490' direct represents '1' with '11107'
11105 -11106 11107 0
-11107 11106 0
-11107 -11105 0
c Var 'aux1490' direct represents '2' with '-11106'
11105 11107 -11106 0
c Encoding variable: aux1491 with domain: int(0..3) (representing constraint ((x_00008_00003=3) + aux1490))
c Both direct and order encoding.
c Var 'aux1491' order represents '0' with '11108'
c Var 'aux1491' direct represents '0' with '11108'
c Var 'aux1491' order represents '1' with '11109'
-11108 11109 0
c Var 'aux1491' direct represents '1' with '11110'
11108 -11109 11110 0
-11110 11109 0
-11110 -11108 0
c Var 'aux1491' order represents '2' with '11111'
-11109 11111 0
c Var 'aux1491' direct represents '2' with '11112'
11109 -11111 11112 0
-11112 11111 0
-11112 -11109 0
c Var 'aux1491' direct represents '3' with '-11111'
11108 11110 11112 -11111 0
c Encoding variable: aux1492 with domain: int(0..4) (representing constraint (aux1487 + aux1489))
c Both direct and order encoding.
c Var 'aux1492' order represents '0' with '11113'
c Var 'aux1492' direct represents '0' with '11113'
c Var 'aux1492' order represents '1' with '11114'
-11113 11114 0
c Var 'aux1492' direct represents '1' with '11115'
11113 -11114 11115 0
-11115 11114 0
-11115 -11113 0
c Var 'aux1492' order represents '2' with '11116'
-11114 11116 0
c Var 'aux1492' direct represents '2' with '11117'
11114 -11116 11117 0
-11117 11116 0
-11117 -11114 0
c Var 'aux1492' order represents '3' with '11118'
-11116 11118 0
c Var 'aux1492' direct represents '3' with '11119'
11116 -11118 11119 0
-11119 11118 0
-11119 -11116 0
c Var 'aux1492' direct represents '4' with '-11118'
11113 11115 11117 11119 -11118 0
c Encoding variable: aux1493 with domain: int(0..2) (representing constraint ((x_00008_00001=4) + (x_00008_00009=4)))
c Both direct and order encoding.
c Var 'aux1493' order represents '0' with '11120'
c Var 'aux1493' direct represents '0' with '11120'
c Var 'aux1493' order represents '1' with '11121'
-11120 11121 0
c Var 'aux1493' direct represents '1' with '11122'
11120 -11121 11122 0
-11122 11121 0
-11122 -11120 0
c Var 'aux1493' direct represents '2' with '-11121'
11120 11122 -11121 0
c Encoding variable: aux1494 with domain: int(0..2) (representing constraint ((x_00008_00008=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux1494' order represents '0' with '11123'
c Var 'aux1494' direct represents '0' with '11123'
c Var 'aux1494' order represents '1' with '11124'
-11123 11124 0
c Var 'aux1494' direct represents '1' with '11125'
11123 -11124 11125 0
-11125 11124 0
-11125 -11123 0
c Var 'aux1494' direct represents '2' with '-11124'
11123 11125 -11124 0
c Encoding variable: aux1495 with domain: int(0..2) (representing constraint ((x_00008_00007=4) + (x_00008_00004=4)))
c Both direct and order encoding.
c Var 'aux1495' order represents '0' with '11126'
c Var 'aux1495' direct represents '0' with '11126'
c Var 'aux1495' order represents '1' with '11127'
-11126 11127 0
c Var 'aux1495' direct represents '1' with '11128'
11126 -11127 11128 0
-11128 11127 0
-11128 -11126 0
c Var 'aux1495' direct represents '2' with '-11127'
11126 11128 -11127 0
c Encoding variable: aux1496 with domain: int(0..2) (representing constraint ((x_00008_00006=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux1496' order represents '0' with '11129'
c Var 'aux1496' direct represents '0' with '11129'
c Var 'aux1496' order represents '1' with '11130'
-11129 11130 0
c Var 'aux1496' direct represents '1' with '11131'
11129 -11130 11131 0
-11131 11130 0
-11131 -11129 0
c Var 'aux1496' direct represents '2' with '-11130'
11129 11131 -11130 0
c Encoding variable: aux1497 with domain: int(0..3) (representing constraint ((x_00008_00003=4) + aux1496))
c Both direct and order encoding.
c Var 'aux1497' order represents '0' with '11132'
c Var 'aux1497' direct represents '0' with '11132'
c Var 'aux1497' order represents '1' with '11133'
-11132 11133 0
c Var 'aux1497' direct represents '1' with '11134'
11132 -11133 11134 0
-11134 11133 0
-11134 -11132 0
c Var 'aux1497' order represents '2' with '11135'
-11133 11135 0
c Var 'aux1497' direct represents '2' with '11136'
11133 -11135 11136 0
-11136 11135 0
-11136 -11133 0
c Var 'aux1497' direct represents '3' with '-11135'
11132 11134 11136 -11135 0
c Encoding variable: aux1498 with domain: int(0..4) (representing constraint (aux1493 + aux1495))
c Both direct and order encoding.
c Var 'aux1498' order represents '0' with '11137'
c Var 'aux1498' direct represents '0' with '11137'
c Var 'aux1498' order represents '1' with '11138'
-11137 11138 0
c Var 'aux1498' direct represents '1' with '11139'
11137 -11138 11139 0
-11139 11138 0
-11139 -11137 0
c Var 'aux1498' order represents '2' with '11140'
-11138 11140 0
c Var 'aux1498' direct represents '2' with '11141'
11138 -11140 11141 0
-11141 11140 0
-11141 -11138 0
c Var 'aux1498' order represents '3' with '11142'
-11140 11142 0
c Var 'aux1498' direct represents '3' with '11143'
11140 -11142 11143 0
-11143 11142 0
-11143 -11140 0
c Var 'aux1498' direct represents '4' with '-11142'
11137 11139 11141 11143 -11142 0
c Encoding variable: aux1499 with domain: int(0..2) (representing constraint ((x_00008_00001=5) + (x_00008_00009=5)))
c Both direct and order encoding.
c Var 'aux1499' order represents '0' with '11144'
c Var 'aux1499' direct represents '0' with '11144'
c Var 'aux1499' order represents '1' with '11145'
-11144 11145 0
c Var 'aux1499' direct represents '1' with '11146'
11144 -11145 11146 0
-11146 11145 0
-11146 -11144 0
c Var 'aux1499' direct represents '2' with '-11145'
11144 11146 -11145 0
c Encoding variable: aux1500 with domain: int(0..2) (representing constraint ((x_00008_00008=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux1500' order represents '0' with '11147'
c Var 'aux1500' direct represents '0' with '11147'
c Var 'aux1500' order represents '1' with '11148'
-11147 11148 0
c Var 'aux1500' direct represents '1' with '11149'
11147 -11148 11149 0
-11149 11148 0
-11149 -11147 0
c Var 'aux1500' direct represents '2' with '-11148'
11147 11149 -11148 0
c Encoding variable: aux1501 with domain: int(0..2) (representing constraint ((x_00008_00007=5) + (x_00008_00004=5)))
c Both direct and order encoding.
c Var 'aux1501' order represents '0' with '11150'
c Var 'aux1501' direct represents '0' with '11150'
c Var 'aux1501' order represents '1' with '11151'
-11150 11151 0
c Var 'aux1501' direct represents '1' with '11152'
11150 -11151 11152 0
-11152 11151 0
-11152 -11150 0
c Var 'aux1501' direct represents '2' with '-11151'
11150 11152 -11151 0
c Encoding variable: aux1502 with domain: int(0..2) (representing constraint ((x_00008_00006=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux1502' order represents '0' with '11153'
c Var 'aux1502' direct represents '0' with '11153'
c Var 'aux1502' order represents '1' with '11154'
-11153 11154 0
c Var 'aux1502' direct represents '1' with '11155'
11153 -11154 11155 0
-11155 11154 0
-11155 -11153 0
c Var 'aux1502' direct represents '2' with '-11154'
11153 11155 -11154 0
c Encoding variable: aux1503 with domain: int(0..3) (representing constraint ((x_00008_00003=5) + aux1502))
c Both direct and order encoding.
c Var 'aux1503' order represents '0' with '11156'
c Var 'aux1503' direct represents '0' with '11156'
c Var 'aux1503' order represents '1' with '11157'
-11156 11157 0
c Var 'aux1503' direct represents '1' with '11158'
11156 -11157 11158 0
-11158 11157 0
-11158 -11156 0
c Var 'aux1503' order represents '2' with '11159'
-11157 11159 0
c Var 'aux1503' direct represents '2' with '11160'
11157 -11159 11160 0
-11160 11159 0
-11160 -11157 0
c Var 'aux1503' direct represents '3' with '-11159'
11156 11158 11160 -11159 0
c Encoding variable: aux1504 with domain: int(0..4) (representing constraint (aux1499 + aux1501))
c Both direct and order encoding.
c Var 'aux1504' order represents '0' with '11161'
c Var 'aux1504' direct represents '0' with '11161'
c Var 'aux1504' order represents '1' with '11162'
-11161 11162 0
c Var 'aux1504' direct represents '1' with '11163'
11161 -11162 11163 0
-11163 11162 0
-11163 -11161 0
c Var 'aux1504' order represents '2' with '11164'
-11162 11164 0
c Var 'aux1504' direct represents '2' with '11165'
11162 -11164 11165 0
-11165 11164 0
-11165 -11162 0
c Var 'aux1504' order represents '3' with '11166'
-11164 11166 0
c Var 'aux1504' direct represents '3' with '11167'
11164 -11166 11167 0
-11167 11166 0
-11167 -11164 0
c Var 'aux1504' direct represents '4' with '-11166'
11161 11163 11165 11167 -11166 0
c Encoding variable: aux1505 with domain: int(0..2) (representing constraint ((x_00008_00001=6) + (x_00008_00009=6)))
c Both direct and order encoding.
c Var 'aux1505' order represents '0' with '11168'
c Var 'aux1505' direct represents '0' with '11168'
c Var 'aux1505' order represents '1' with '11169'
-11168 11169 0
c Var 'aux1505' direct represents '1' with '11170'
11168 -11169 11170 0
-11170 11169 0
-11170 -11168 0
c Var 'aux1505' direct represents '2' with '-11169'
11168 11170 -11169 0
c Encoding variable: aux1506 with domain: int(0..2) (representing constraint ((x_00008_00008=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux1506' order represents '0' with '11171'
c Var 'aux1506' direct represents '0' with '11171'
c Var 'aux1506' order represents '1' with '11172'
-11171 11172 0
c Var 'aux1506' direct represents '1' with '11173'
11171 -11172 11173 0
-11173 11172 0
-11173 -11171 0
c Var 'aux1506' direct represents '2' with '-11172'
11171 11173 -11172 0
c Encoding variable: aux1507 with domain: int(0..2) (representing constraint ((x_00008_00007=6) + (x_00008_00004=6)))
c Both direct and order encoding.
c Var 'aux1507' order represents '0' with '11174'
c Var 'aux1507' direct represents '0' with '11174'
c Var 'aux1507' order represents '1' with '11175'
-11174 11175 0
c Var 'aux1507' direct represents '1' with '11176'
11174 -11175 11176 0
-11176 11175 0
-11176 -11174 0
c Var 'aux1507' direct represents '2' with '-11175'
11174 11176 -11175 0
c Encoding variable: aux1508 with domain: int(0..2) (representing constraint ((x_00008_00006=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux1508' order represents '0' with '11177'
c Var 'aux1508' direct represents '0' with '11177'
c Var 'aux1508' order represents '1' with '11178'
-11177 11178 0
c Var 'aux1508' direct represents '1' with '11179'
11177 -11178 11179 0
-11179 11178 0
-11179 -11177 0
c Var 'aux1508' direct represents '2' with '-11178'
11177 11179 -11178 0
c Encoding variable: aux1509 with domain: int(0..3) (representing constraint ((x_00008_00003=6) + aux1508))
c Both direct and order encoding.
c Var 'aux1509' order represents '0' with '11180'
c Var 'aux1509' direct represents '0' with '11180'
c Var 'aux1509' order represents '1' with '11181'
-11180 11181 0
c Var 'aux1509' direct represents '1' with '11182'
11180 -11181 11182 0
-11182 11181 0
-11182 -11180 0
c Var 'aux1509' order represents '2' with '11183'
-11181 11183 0
c Var 'aux1509' direct represents '2' with '11184'
11181 -11183 11184 0
-11184 11183 0
-11184 -11181 0
c Var 'aux1509' direct represents '3' with '-11183'
11180 11182 11184 -11183 0
c Encoding variable: aux1510 with domain: int(0..4) (representing constraint (aux1505 + aux1507))
c Both direct and order encoding.
c Var 'aux1510' order represents '0' with '11185'
c Var 'aux1510' direct represents '0' with '11185'
c Var 'aux1510' order represents '1' with '11186'
-11185 11186 0
c Var 'aux1510' direct represents '1' with '11187'
11185 -11186 11187 0
-11187 11186 0
-11187 -11185 0
c Var 'aux1510' order represents '2' with '11188'
-11186 11188 0
c Var 'aux1510' direct represents '2' with '11189'
11186 -11188 11189 0
-11189 11188 0
-11189 -11186 0
c Var 'aux1510' order represents '3' with '11190'
-11188 11190 0
c Var 'aux1510' direct represents '3' with '11191'
11188 -11190 11191 0
-11191 11190 0
-11191 -11188 0
c Var 'aux1510' direct represents '4' with '-11190'
11185 11187 11189 11191 -11190 0
c Encoding variable: aux1511 with domain: int(0..2) (representing constraint ((x_00008_00001=7) + (x_00008_00009=7)))
c Both direct and order encoding.
c Var 'aux1511' order represents '0' with '11192'
c Var 'aux1511' direct represents '0' with '11192'
c Var 'aux1511' order represents '1' with '11193'
-11192 11193 0
c Var 'aux1511' direct represents '1' with '11194'
11192 -11193 11194 0
-11194 11193 0
-11194 -11192 0
c Var 'aux1511' direct represents '2' with '-11193'
11192 11194 -11193 0
c Encoding variable: aux1512 with domain: int(0..2) (representing constraint ((x_00008_00008=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux1512' order represents '0' with '11195'
c Var 'aux1512' direct represents '0' with '11195'
c Var 'aux1512' order represents '1' with '11196'
-11195 11196 0
c Var 'aux1512' direct represents '1' with '11197'
11195 -11196 11197 0
-11197 11196 0
-11197 -11195 0
c Var 'aux1512' direct represents '2' with '-11196'
11195 11197 -11196 0
c Encoding variable: aux1513 with domain: int(0..2) (representing constraint ((x_00008_00007=7) + (x_00008_00004=7)))
c Both direct and order encoding.
c Var 'aux1513' order represents '0' with '11198'
c Var 'aux1513' direct represents '0' with '11198'
c Var 'aux1513' order represents '1' with '11199'
-11198 11199 0
c Var 'aux1513' direct represents '1' with '11200'
11198 -11199 11200 0
-11200 11199 0
-11200 -11198 0
c Var 'aux1513' direct represents '2' with '-11199'
11198 11200 -11199 0
c Encoding variable: aux1514 with domain: int(0..2) (representing constraint ((x_00008_00006=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux1514' order represents '0' with '11201'
c Var 'aux1514' direct represents '0' with '11201'
c Var 'aux1514' order represents '1' with '11202'
-11201 11202 0
c Var 'aux1514' direct represents '1' with '11203'
11201 -11202 11203 0
-11203 11202 0
-11203 -11201 0
c Var 'aux1514' direct represents '2' with '-11202'
11201 11203 -11202 0
c Encoding variable: aux1515 with domain: int(0..3) (representing constraint ((x_00008_00003=7) + aux1514))
c Both direct and order encoding.
c Var 'aux1515' order represents '0' with '11204'
c Var 'aux1515' direct represents '0' with '11204'
c Var 'aux1515' order represents '1' with '11205'
-11204 11205 0
c Var 'aux1515' direct represents '1' with '11206'
11204 -11205 11206 0
-11206 11205 0
-11206 -11204 0
c Var 'aux1515' order represents '2' with '11207'
-11205 11207 0
c Var 'aux1515' direct represents '2' with '11208'
11205 -11207 11208 0
-11208 11207 0
-11208 -11205 0
c Var 'aux1515' direct represents '3' with '-11207'
11204 11206 11208 -11207 0
c Encoding variable: aux1516 with domain: int(0..4) (representing constraint (aux1511 + aux1513))
c Both direct and order encoding.
c Var 'aux1516' order represents '0' with '11209'
c Var 'aux1516' direct represents '0' with '11209'
c Var 'aux1516' order represents '1' with '11210'
-11209 11210 0
c Var 'aux1516' direct represents '1' with '11211'
11209 -11210 11211 0
-11211 11210 0
-11211 -11209 0
c Var 'aux1516' order represents '2' with '11212'
-11210 11212 0
c Var 'aux1516' direct represents '2' with '11213'
11210 -11212 11213 0
-11213 11212 0
-11213 -11210 0
c Var 'aux1516' order represents '3' with '11214'
-11212 11214 0
c Var 'aux1516' direct represents '3' with '11215'
11212 -11214 11215 0
-11215 11214 0
-11215 -11212 0
c Var 'aux1516' direct represents '4' with '-11214'
11209 11211 11213 11215 -11214 0
c Encoding variable: aux1517 with domain: int(0..2) (representing constraint ((x_00008_00001=8) + (x_00008_00009=8)))
c Both direct and order encoding.
c Var 'aux1517' order represents '0' with '11216'
c Var 'aux1517' direct represents '0' with '11216'
c Var 'aux1517' order represents '1' with '11217'
-11216 11217 0
c Var 'aux1517' direct represents '1' with '11218'
11216 -11217 11218 0
-11218 11217 0
-11218 -11216 0
c Var 'aux1517' direct represents '2' with '-11217'
11216 11218 -11217 0
c Encoding variable: aux1518 with domain: int(0..2) (representing constraint ((x_00008_00008=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux1518' order represents '0' with '11219'
c Var 'aux1518' direct represents '0' with '11219'
c Var 'aux1518' order represents '1' with '11220'
-11219 11220 0
c Var 'aux1518' direct represents '1' with '11221'
11219 -11220 11221 0
-11221 11220 0
-11221 -11219 0
c Var 'aux1518' direct represents '2' with '-11220'
11219 11221 -11220 0
c Encoding variable: aux1519 with domain: int(0..2) (representing constraint ((x_00008_00007=8) + (x_00008_00004=8)))
c Both direct and order encoding.
c Var 'aux1519' order represents '0' with '11222'
c Var 'aux1519' direct represents '0' with '11222'
c Var 'aux1519' order represents '1' with '11223'
-11222 11223 0
c Var 'aux1519' direct represents '1' with '11224'
11222 -11223 11224 0
-11224 11223 0
-11224 -11222 0
c Var 'aux1519' direct represents '2' with '-11223'
11222 11224 -11223 0
c Encoding variable: aux1520 with domain: int(0..2) (representing constraint ((x_00008_00006=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux1520' order represents '0' with '11225'
c Var 'aux1520' direct represents '0' with '11225'
c Var 'aux1520' order represents '1' with '11226'
-11225 11226 0
c Var 'aux1520' direct represents '1' with '11227'
11225 -11226 11227 0
-11227 11226 0
-11227 -11225 0
c Var 'aux1520' direct represents '2' with '-11226'
11225 11227 -11226 0
c Encoding variable: aux1521 with domain: int(0..3) (representing constraint ((x_00008_00003=8) + aux1520))
c Both direct and order encoding.
c Var 'aux1521' order represents '0' with '11228'
c Var 'aux1521' direct represents '0' with '11228'
c Var 'aux1521' order represents '1' with '11229'
-11228 11229 0
c Var 'aux1521' direct represents '1' with '11230'
11228 -11229 11230 0
-11230 11229 0
-11230 -11228 0
c Var 'aux1521' order represents '2' with '11231'
-11229 11231 0
c Var 'aux1521' direct represents '2' with '11232'
11229 -11231 11232 0
-11232 11231 0
-11232 -11229 0
c Var 'aux1521' direct represents '3' with '-11231'
11228 11230 11232 -11231 0
c Encoding variable: aux1522 with domain: int(0..4) (representing constraint (aux1517 + aux1519))
c Both direct and order encoding.
c Var 'aux1522' order represents '0' with '11233'
c Var 'aux1522' direct represents '0' with '11233'
c Var 'aux1522' order represents '1' with '11234'
-11233 11234 0
c Var 'aux1522' direct represents '1' with '11235'
11233 -11234 11235 0
-11235 11234 0
-11235 -11233 0
c Var 'aux1522' order represents '2' with '11236'
-11234 11236 0
c Var 'aux1522' direct represents '2' with '11237'
11234 -11236 11237 0
-11237 11236 0
-11237 -11234 0
c Var 'aux1522' order represents '3' with '11238'
-11236 11238 0
c Var 'aux1522' direct represents '3' with '11239'
11236 -11238 11239 0
-11239 11238 0
-11239 -11236 0
c Var 'aux1522' direct represents '4' with '-11238'
11233 11235 11237 11239 -11238 0
c Encoding variable: aux1523 with domain: int(0..2) (representing constraint ((x_00008_00001=9) + (x_00008_00009=9)))
c Both direct and order encoding.
c Var 'aux1523' order represents '0' with '11240'
c Var 'aux1523' direct represents '0' with '11240'
c Var 'aux1523' order represents '1' with '11241'
-11240 11241 0
c Var 'aux1523' direct represents '1' with '11242'
11240 -11241 11242 0
-11242 11241 0
-11242 -11240 0
c Var 'aux1523' direct represents '2' with '-11241'
11240 11242 -11241 0
c Encoding variable: aux1524 with domain: int(0..2) (representing constraint ((x_00008_00008=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux1524' order represents '0' with '11243'
c Var 'aux1524' direct represents '0' with '11243'
c Var 'aux1524' order represents '1' with '11244'
-11243 11244 0
c Var 'aux1524' direct represents '1' with '11245'
11243 -11244 11245 0
-11245 11244 0
-11245 -11243 0
c Var 'aux1524' direct represents '2' with '-11244'
11243 11245 -11244 0
c Encoding variable: aux1525 with domain: int(0..2) (representing constraint ((x_00008_00007=9) + (x_00008_00004=9)))
c Both direct and order encoding.
c Var 'aux1525' order represents '0' with '11246'
c Var 'aux1525' direct represents '0' with '11246'
c Var 'aux1525' order represents '1' with '11247'
-11246 11247 0
c Var 'aux1525' direct represents '1' with '11248'
11246 -11247 11248 0
-11248 11247 0
-11248 -11246 0
c Var 'aux1525' direct represents '2' with '-11247'
11246 11248 -11247 0
c Encoding variable: aux1526 with domain: int(0..2) (representing constraint ((x_00008_00006=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux1526' order represents '0' with '11249'
c Var 'aux1526' direct represents '0' with '11249'
c Var 'aux1526' order represents '1' with '11250'
-11249 11250 0
c Var 'aux1526' direct represents '1' with '11251'
11249 -11250 11251 0
-11251 11250 0
-11251 -11249 0
c Var 'aux1526' direct represents '2' with '-11250'
11249 11251 -11250 0
c Encoding variable: aux1527 with domain: int(0..3) (representing constraint ((x_00008_00003=9) + aux1526))
c Both direct and order encoding.
c Var 'aux1527' order represents '0' with '11252'
c Var 'aux1527' direct represents '0' with '11252'
c Var 'aux1527' order represents '1' with '11253'
-11252 11253 0
c Var 'aux1527' direct represents '1' with '11254'
11252 -11253 11254 0
-11254 11253 0
-11254 -11252 0
c Var 'aux1527' order represents '2' with '11255'
-11253 11255 0
c Var 'aux1527' direct represents '2' with '11256'
11253 -11255 11256 0
-11256 11255 0
-11256 -11253 0
c Var 'aux1527' direct represents '3' with '-11255'
11252 11254 11256 -11255 0
c Encoding variable: aux1528 with domain: int(0..4) (representing constraint (aux1523 + aux1525))
c Both direct and order encoding.
c Var 'aux1528' order represents '0' with '11257'
c Var 'aux1528' direct represents '0' with '11257'
c Var 'aux1528' order represents '1' with '11258'
-11257 11258 0
c Var 'aux1528' direct represents '1' with '11259'
11257 -11258 11259 0
-11259 11258 0
-11259 -11257 0
c Var 'aux1528' order represents '2' with '11260'
-11258 11260 0
c Var 'aux1528' direct represents '2' with '11261'
11258 -11260 11261 0
-11261 11260 0
-11261 -11258 0
c Var 'aux1528' order represents '3' with '11262'
-11260 11262 0
c Var 'aux1528' direct represents '3' with '11263'
11260 -11262 11263 0
-11263 11262 0
-11263 -11260 0
c Var 'aux1528' direct represents '4' with '-11262'
11257 11259 11261 11263 -11262 0
c Encoding variable: aux1529 with domain: int(0..2) (representing constraint ((x_00009_00001=1) + (x_00009_00009=1)))
c Both direct and order encoding.
c Var 'aux1529' order represents '0' with '11264'
c Var 'aux1529' direct represents '0' with '11264'
c Var 'aux1529' order represents '1' with '11265'
-11264 11265 0
c Var 'aux1529' direct represents '1' with '11266'
11264 -11265 11266 0
-11266 11265 0
-11266 -11264 0
c Var 'aux1529' direct represents '2' with '-11265'
11264 11266 -11265 0
c Encoding variable: aux1530 with domain: int(0..2) (representing constraint ((x_00009_00008=1) + (x_00009_00002=1)))
c Both direct and order encoding.
c Var 'aux1530' order represents '0' with '11267'
c Var 'aux1530' direct represents '0' with '11267'
c Var 'aux1530' order represents '1' with '11268'
-11267 11268 0
c Var 'aux1530' direct represents '1' with '11269'
11267 -11268 11269 0
-11269 11268 0
-11269 -11267 0
c Var 'aux1530' direct represents '2' with '-11268'
11267 11269 -11268 0
c Encoding variable: aux1531 with domain: int(0..2) (representing constraint ((x_00009_00007=1) + (x_00009_00004=1)))
c Both direct and order encoding.
c Var 'aux1531' order represents '0' with '11270'
c Var 'aux1531' direct represents '0' with '11270'
c Var 'aux1531' order represents '1' with '11271'
-11270 11271 0
c Var 'aux1531' direct represents '1' with '11272'
11270 -11271 11272 0
-11272 11271 0
-11272 -11270 0
c Var 'aux1531' direct represents '2' with '-11271'
11270 11272 -11271 0
c Encoding variable: aux1532 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00009_00005=1)))
c Both direct and order encoding.
c Var 'aux1532' order represents '0' with '11273'
c Var 'aux1532' direct represents '0' with '11273'
c Var 'aux1532' order represents '1' with '11274'
-11273 11274 0
c Var 'aux1532' direct represents '1' with '11275'
11273 -11274 11275 0
-11275 11274 0
-11275 -11273 0
c Var 'aux1532' direct represents '2' with '-11274'
11273 11275 -11274 0
c Encoding variable: aux1533 with domain: int(0..3) (representing constraint ((x_00009_00003=1) + aux1532))
c Both direct and order encoding.
c Var 'aux1533' order represents '0' with '11276'
c Var 'aux1533' direct represents '0' with '11276'
c Var 'aux1533' order represents '1' with '11277'
-11276 11277 0
c Var 'aux1533' direct represents '1' with '11278'
11276 -11277 11278 0
-11278 11277 0
-11278 -11276 0
c Var 'aux1533' order represents '2' with '11279'
-11277 11279 0
c Var 'aux1533' direct represents '2' with '11280'
11277 -11279 11280 0
-11280 11279 0
-11280 -11277 0
c Var 'aux1533' direct represents '3' with '-11279'
11276 11278 11280 -11279 0
c Encoding variable: aux1534 with domain: int(0..4) (representing constraint (aux1529 + aux1531))
c Both direct and order encoding.
c Var 'aux1534' order represents '0' with '11281'
c Var 'aux1534' direct represents '0' with '11281'
c Var 'aux1534' order represents '1' with '11282'
-11281 11282 0
c Var 'aux1534' direct represents '1' with '11283'
11281 -11282 11283 0
-11283 11282 0
-11283 -11281 0
c Var 'aux1534' order represents '2' with '11284'
-11282 11284 0
c Var 'aux1534' direct represents '2' with '11285'
11282 -11284 11285 0
-11285 11284 0
-11285 -11282 0
c Var 'aux1534' order represents '3' with '11286'
-11284 11286 0
c Var 'aux1534' direct represents '3' with '11287'
11284 -11286 11287 0
-11287 11286 0
-11287 -11284 0
c Var 'aux1534' direct represents '4' with '-11286'
11281 11283 11285 11287 -11286 0
c Encoding variable: aux1535 with domain: int(0..2) (representing constraint ((x_00009_00001=2) + (x_00009_00009=2)))
c Both direct and order encoding.
c Var 'aux1535' order represents '0' with '11288'
c Var 'aux1535' direct represents '0' with '11288'
c Var 'aux1535' order represents '1' with '11289'
-11288 11289 0
c Var 'aux1535' direct represents '1' with '11290'
11288 -11289 11290 0
-11290 11289 0
-11290 -11288 0
c Var 'aux1535' direct represents '2' with '-11289'
11288 11290 -11289 0
c Encoding variable: aux1536 with domain: int(0..2) (representing constraint ((x_00009_00008=2) + (x_00009_00002=2)))
c Both direct and order encoding.
c Var 'aux1536' order represents '0' with '11291'
c Var 'aux1536' direct represents '0' with '11291'
c Var 'aux1536' order represents '1' with '11292'
-11291 11292 0
c Var 'aux1536' direct represents '1' with '11293'
11291 -11292 11293 0
-11293 11292 0
-11293 -11291 0
c Var 'aux1536' direct represents '2' with '-11292'
11291 11293 -11292 0
c Encoding variable: aux1537 with domain: int(0..2) (representing constraint ((x_00009_00007=2) + (x_00009_00004=2)))
c Both direct and order encoding.
c Var 'aux1537' order represents '0' with '11294'
c Var 'aux1537' direct represents '0' with '11294'
c Var 'aux1537' order represents '1' with '11295'
-11294 11295 0
c Var 'aux1537' direct represents '1' with '11296'
11294 -11295 11296 0
-11296 11295 0
-11296 -11294 0
c Var 'aux1537' direct represents '2' with '-11295'
11294 11296 -11295 0
c Encoding variable: aux1538 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00009_00005=2)))
c Both direct and order encoding.
c Var 'aux1538' order represents '0' with '11297'
c Var 'aux1538' direct represents '0' with '11297'
c Var 'aux1538' order represents '1' with '11298'
-11297 11298 0
c Var 'aux1538' direct represents '1' with '11299'
11297 -11298 11299 0
-11299 11298 0
-11299 -11297 0
c Var 'aux1538' direct represents '2' with '-11298'
11297 11299 -11298 0
c Encoding variable: aux1539 with domain: int(0..3) (representing constraint ((x_00009_00003=2) + aux1538))
c Both direct and order encoding.
c Var 'aux1539' order represents '0' with '11300'
c Var 'aux1539' direct represents '0' with '11300'
c Var 'aux1539' order represents '1' with '11301'
-11300 11301 0
c Var 'aux1539' direct represents '1' with '11302'
11300 -11301 11302 0
-11302 11301 0
-11302 -11300 0
c Var 'aux1539' order represents '2' with '11303'
-11301 11303 0
c Var 'aux1539' direct represents '2' with '11304'
11301 -11303 11304 0
-11304 11303 0
-11304 -11301 0
c Var 'aux1539' direct represents '3' with '-11303'
11300 11302 11304 -11303 0
c Encoding variable: aux1540 with domain: int(0..4) (representing constraint (aux1535 + aux1537))
c Both direct and order encoding.
c Var 'aux1540' order represents '0' with '11305'
c Var 'aux1540' direct represents '0' with '11305'
c Var 'aux1540' order represents '1' with '11306'
-11305 11306 0
c Var 'aux1540' direct represents '1' with '11307'
11305 -11306 11307 0
-11307 11306 0
-11307 -11305 0
c Var 'aux1540' order represents '2' with '11308'
-11306 11308 0
c Var 'aux1540' direct represents '2' with '11309'
11306 -11308 11309 0
-11309 11308 0
-11309 -11306 0
c Var 'aux1540' order represents '3' with '11310'
-11308 11310 0
c Var 'aux1540' direct represents '3' with '11311'
11308 -11310 11311 0
-11311 11310 0
-11311 -11308 0
c Var 'aux1540' direct represents '4' with '-11310'
11305 11307 11309 11311 -11310 0
c Encoding variable: aux1541 with domain: int(0..2) (representing constraint ((x_00009_00001=3) + (x_00009_00009=3)))
c Both direct and order encoding.
c Var 'aux1541' order represents '0' with '11312'
c Var 'aux1541' direct represents '0' with '11312'
c Var 'aux1541' order represents '1' with '11313'
-11312 11313 0
c Var 'aux1541' direct represents '1' with '11314'
11312 -11313 11314 0
-11314 11313 0
-11314 -11312 0
c Var 'aux1541' direct represents '2' with '-11313'
11312 11314 -11313 0
c Encoding variable: aux1542 with domain: int(0..2) (representing constraint ((x_00009_00008=3) + (x_00009_00002=3)))
c Both direct and order encoding.
c Var 'aux1542' order represents '0' with '11315'
c Var 'aux1542' direct represents '0' with '11315'
c Var 'aux1542' order represents '1' with '11316'
-11315 11316 0
c Var 'aux1542' direct represents '1' with '11317'
11315 -11316 11317 0
-11317 11316 0
-11317 -11315 0
c Var 'aux1542' direct represents '2' with '-11316'
11315 11317 -11316 0
c Encoding variable: aux1543 with domain: int(0..2) (representing constraint ((x_00009_00007=3) + (x_00009_00004=3)))
c Both direct and order encoding.
c Var 'aux1543' order represents '0' with '11318'
c Var 'aux1543' direct represents '0' with '11318'
c Var 'aux1543' order represents '1' with '11319'
-11318 11319 0
c Var 'aux1543' direct represents '1' with '11320'
11318 -11319 11320 0
-11320 11319 0
-11320 -11318 0
c Var 'aux1543' direct represents '2' with '-11319'
11318 11320 -11319 0
c Encoding variable: aux1544 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00009_00005=3)))
c Both direct and order encoding.
c Var 'aux1544' order represents '0' with '11321'
c Var 'aux1544' direct represents '0' with '11321'
c Var 'aux1544' order represents '1' with '11322'
-11321 11322 0
c Var 'aux1544' direct represents '1' with '11323'
11321 -11322 11323 0
-11323 11322 0
-11323 -11321 0
c Var 'aux1544' direct represents '2' with '-11322'
11321 11323 -11322 0
c Encoding variable: aux1545 with domain: int(0..3) (representing constraint ((x_00009_00003=3) + aux1544))
c Both direct and order encoding.
c Var 'aux1545' order represents '0' with '11324'
c Var 'aux1545' direct represents '0' with '11324'
c Var 'aux1545' order represents '1' with '11325'
-11324 11325 0
c Var 'aux1545' direct represents '1' with '11326'
11324 -11325 11326 0
-11326 11325 0
-11326 -11324 0
c Var 'aux1545' order represents '2' with '11327'
-11325 11327 0
c Var 'aux1545' direct represents '2' with '11328'
11325 -11327 11328 0
-11328 11327 0
-11328 -11325 0
c Var 'aux1545' direct represents '3' with '-11327'
11324 11326 11328 -11327 0
c Encoding variable: aux1546 with domain: int(0..4) (representing constraint (aux1541 + aux1543))
c Both direct and order encoding.
c Var 'aux1546' order represents '0' with '11329'
c Var 'aux1546' direct represents '0' with '11329'
c Var 'aux1546' order represents '1' with '11330'
-11329 11330 0
c Var 'aux1546' direct represents '1' with '11331'
11329 -11330 11331 0
-11331 11330 0
-11331 -11329 0
c Var 'aux1546' order represents '2' with '11332'
-11330 11332 0
c Var 'aux1546' direct represents '2' with '11333'
11330 -11332 11333 0
-11333 11332 0
-11333 -11330 0
c Var 'aux1546' order represents '3' with '11334'
-11332 11334 0
c Var 'aux1546' direct represents '3' with '11335'
11332 -11334 11335 0
-11335 11334 0
-11335 -11332 0
c Var 'aux1546' direct represents '4' with '-11334'
11329 11331 11333 11335 -11334 0
c Encoding variable: aux1547 with domain: int(0..2) (representing constraint ((x_00009_00001=4) + (x_00009_00009=4)))
c Both direct and order encoding.
c Var 'aux1547' order represents '0' with '11336'
c Var 'aux1547' direct represents '0' with '11336'
c Var 'aux1547' order represents '1' with '11337'
-11336 11337 0
c Var 'aux1547' direct represents '1' with '11338'
11336 -11337 11338 0
-11338 11337 0
-11338 -11336 0
c Var 'aux1547' direct represents '2' with '-11337'
11336 11338 -11337 0
c Encoding variable: aux1548 with domain: int(0..2) (representing constraint ((x_00009_00008=4) + (x_00009_00002=4)))
c Both direct and order encoding.
c Var 'aux1548' order represents '0' with '11339'
c Var 'aux1548' direct represents '0' with '11339'
c Var 'aux1548' order represents '1' with '11340'
-11339 11340 0
c Var 'aux1548' direct represents '1' with '11341'
11339 -11340 11341 0
-11341 11340 0
-11341 -11339 0
c Var 'aux1548' direct represents '2' with '-11340'
11339 11341 -11340 0
c Encoding variable: aux1549 with domain: int(0..2) (representing constraint ((x_00009_00007=4) + (x_00009_00004=4)))
c Both direct and order encoding.
c Var 'aux1549' order represents '0' with '11342'
c Var 'aux1549' direct represents '0' with '11342'
c Var 'aux1549' order represents '1' with '11343'
-11342 11343 0
c Var 'aux1549' direct represents '1' with '11344'
11342 -11343 11344 0
-11344 11343 0
-11344 -11342 0
c Var 'aux1549' direct represents '2' with '-11343'
11342 11344 -11343 0
c Encoding variable: aux1550 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00009_00005=4)))
c Both direct and order encoding.
c Var 'aux1550' order represents '0' with '11345'
c Var 'aux1550' direct represents '0' with '11345'
c Var 'aux1550' order represents '1' with '11346'
-11345 11346 0
c Var 'aux1550' direct represents '1' with '11347'
11345 -11346 11347 0
-11347 11346 0
-11347 -11345 0
c Var 'aux1550' direct represents '2' with '-11346'
11345 11347 -11346 0
c Encoding variable: aux1551 with domain: int(0..3) (representing constraint ((x_00009_00003=4) + aux1550))
c Both direct and order encoding.
c Var 'aux1551' order represents '0' with '11348'
c Var 'aux1551' direct represents '0' with '11348'
c Var 'aux1551' order represents '1' with '11349'
-11348 11349 0
c Var 'aux1551' direct represents '1' with '11350'
11348 -11349 11350 0
-11350 11349 0
-11350 -11348 0
c Var 'aux1551' order represents '2' with '11351'
-11349 11351 0
c Var 'aux1551' direct represents '2' with '11352'
11349 -11351 11352 0
-11352 11351 0
-11352 -11349 0
c Var 'aux1551' direct represents '3' with '-11351'
11348 11350 11352 -11351 0
c Encoding variable: aux1552 with domain: int(0..4) (representing constraint (aux1547 + aux1549))
c Both direct and order encoding.
c Var 'aux1552' order represents '0' with '11353'
c Var 'aux1552' direct represents '0' with '11353'
c Var 'aux1552' order represents '1' with '11354'
-11353 11354 0
c Var 'aux1552' direct represents '1' with '11355'
11353 -11354 11355 0
-11355 11354 0
-11355 -11353 0
c Var 'aux1552' order represents '2' with '11356'
-11354 11356 0
c Var 'aux1552' direct represents '2' with '11357'
11354 -11356 11357 0
-11357 11356 0
-11357 -11354 0
c Var 'aux1552' order represents '3' with '11358'
-11356 11358 0
c Var 'aux1552' direct represents '3' with '11359'
11356 -11358 11359 0
-11359 11358 0
-11359 -11356 0
c Var 'aux1552' direct represents '4' with '-11358'
11353 11355 11357 11359 -11358 0
c Encoding variable: aux1553 with domain: int(0..2) (representing constraint ((x_00009_00001=5) + (x_00009_00009=5)))
c Both direct and order encoding.
c Var 'aux1553' order represents '0' with '11360'
c Var 'aux1553' direct represents '0' with '11360'
c Var 'aux1553' order represents '1' with '11361'
-11360 11361 0
c Var 'aux1553' direct represents '1' with '11362'
11360 -11361 11362 0
-11362 11361 0
-11362 -11360 0
c Var 'aux1553' direct represents '2' with '-11361'
11360 11362 -11361 0
c Encoding variable: aux1554 with domain: int(0..2) (representing constraint ((x_00009_00008=5) + (x_00009_00002=5)))
c Both direct and order encoding.
c Var 'aux1554' order represents '0' with '11363'
c Var 'aux1554' direct represents '0' with '11363'
c Var 'aux1554' order represents '1' with '11364'
-11363 11364 0
c Var 'aux1554' direct represents '1' with '11365'
11363 -11364 11365 0
-11365 11364 0
-11365 -11363 0
c Var 'aux1554' direct represents '2' with '-11364'
11363 11365 -11364 0
c Encoding variable: aux1555 with domain: int(0..2) (representing constraint ((x_00009_00007=5) + (x_00009_00004=5)))
c Both direct and order encoding.
c Var 'aux1555' order represents '0' with '11366'
c Var 'aux1555' direct represents '0' with '11366'
c Var 'aux1555' order represents '1' with '11367'
-11366 11367 0
c Var 'aux1555' direct represents '1' with '11368'
11366 -11367 11368 0
-11368 11367 0
-11368 -11366 0
c Var 'aux1555' direct represents '2' with '-11367'
11366 11368 -11367 0
c Encoding variable: aux1556 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00009_00005=5)))
c Both direct and order encoding.
c Var 'aux1556' order represents '0' with '11369'
c Var 'aux1556' direct represents '0' with '11369'
c Var 'aux1556' order represents '1' with '11370'
-11369 11370 0
c Var 'aux1556' direct represents '1' with '11371'
11369 -11370 11371 0
-11371 11370 0
-11371 -11369 0
c Var 'aux1556' direct represents '2' with '-11370'
11369 11371 -11370 0
c Encoding variable: aux1557 with domain: int(0..3) (representing constraint ((x_00009_00003=5) + aux1556))
c Both direct and order encoding.
c Var 'aux1557' order represents '0' with '11372'
c Var 'aux1557' direct represents '0' with '11372'
c Var 'aux1557' order represents '1' with '11373'
-11372 11373 0
c Var 'aux1557' direct represents '1' with '11374'
11372 -11373 11374 0
-11374 11373 0
-11374 -11372 0
c Var 'aux1557' order represents '2' with '11375'
-11373 11375 0
c Var 'aux1557' direct represents '2' with '11376'
11373 -11375 11376 0
-11376 11375 0
-11376 -11373 0
c Var 'aux1557' direct represents '3' with '-11375'
11372 11374 11376 -11375 0
c Encoding variable: aux1558 with domain: int(0..4) (representing constraint (aux1553 + aux1555))
c Both direct and order encoding.
c Var 'aux1558' order represents '0' with '11377'
c Var 'aux1558' direct represents '0' with '11377'
c Var 'aux1558' order represents '1' with '11378'
-11377 11378 0
c Var 'aux1558' direct represents '1' with '11379'
11377 -11378 11379 0
-11379 11378 0
-11379 -11377 0
c Var 'aux1558' order represents '2' with '11380'
-11378 11380 0
c Var 'aux1558' direct represents '2' with '11381'
11378 -11380 11381 0
-11381 11380 0
-11381 -11378 0
c Var 'aux1558' order represents '3' with '11382'
-11380 11382 0
c Var 'aux1558' direct represents '3' with '11383'
11380 -11382 11383 0
-11383 11382 0
-11383 -11380 0
c Var 'aux1558' direct represents '4' with '-11382'
11377 11379 11381 11383 -11382 0
c Encoding variable: aux1559 with domain: int(0..2) (representing constraint ((x_00009_00001=6) + (x_00009_00009=6)))
c Both direct and order encoding.
c Var 'aux1559' order represents '0' with '11384'
c Var 'aux1559' direct represents '0' with '11384'
c Var 'aux1559' order represents '1' with '11385'
-11384 11385 0
c Var 'aux1559' direct represents '1' with '11386'
11384 -11385 11386 0
-11386 11385 0
-11386 -11384 0
c Var 'aux1559' direct represents '2' with '-11385'
11384 11386 -11385 0
c Encoding variable: aux1560 with domain: int(0..2) (representing constraint ((x_00009_00008=6) + (x_00009_00002=6)))
c Both direct and order encoding.
c Var 'aux1560' order represents '0' with '11387'
c Var 'aux1560' direct represents '0' with '11387'
c Var 'aux1560' order represents '1' with '11388'
-11387 11388 0
c Var 'aux1560' direct represents '1' with '11389'
11387 -11388 11389 0
-11389 11388 0
-11389 -11387 0
c Var 'aux1560' direct represents '2' with '-11388'
11387 11389 -11388 0
c Encoding variable: aux1561 with domain: int(0..2) (representing constraint ((x_00009_00007=6) + (x_00009_00004=6)))
c Both direct and order encoding.
c Var 'aux1561' order represents '0' with '11390'
c Var 'aux1561' direct represents '0' with '11390'
c Var 'aux1561' order represents '1' with '11391'
-11390 11391 0
c Var 'aux1561' direct represents '1' with '11392'
11390 -11391 11392 0
-11392 11391 0
-11392 -11390 0
c Var 'aux1561' direct represents '2' with '-11391'
11390 11392 -11391 0
c Encoding variable: aux1562 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00009_00005=6)))
c Both direct and order encoding.
c Var 'aux1562' order represents '0' with '11393'
c Var 'aux1562' direct represents '0' with '11393'
c Var 'aux1562' order represents '1' with '11394'
-11393 11394 0
c Var 'aux1562' direct represents '1' with '11395'
11393 -11394 11395 0
-11395 11394 0
-11395 -11393 0
c Var 'aux1562' direct represents '2' with '-11394'
11393 11395 -11394 0
c Encoding variable: aux1563 with domain: int(0..3) (representing constraint ((x_00009_00003=6) + aux1562))
c Both direct and order encoding.
c Var 'aux1563' order represents '0' with '11396'
c Var 'aux1563' direct represents '0' with '11396'
c Var 'aux1563' order represents '1' with '11397'
-11396 11397 0
c Var 'aux1563' direct represents '1' with '11398'
11396 -11397 11398 0
-11398 11397 0
-11398 -11396 0
c Var 'aux1563' order represents '2' with '11399'
-11397 11399 0
c Var 'aux1563' direct represents '2' with '11400'
11397 -11399 11400 0
-11400 11399 0
-11400 -11397 0
c Var 'aux1563' direct represents '3' with '-11399'
11396 11398 11400 -11399 0
c Encoding variable: aux1564 with domain: int(0..4) (representing constraint (aux1559 + aux1561))
c Both direct and order encoding.
c Var 'aux1564' order represents '0' with '11401'
c Var 'aux1564' direct represents '0' with '11401'
c Var 'aux1564' order represents '1' with '11402'
-11401 11402 0
c Var 'aux1564' direct represents '1' with '11403'
11401 -11402 11403 0
-11403 11402 0
-11403 -11401 0
c Var 'aux1564' order represents '2' with '11404'
-11402 11404 0
c Var 'aux1564' direct represents '2' with '11405'
11402 -11404 11405 0
-11405 11404 0
-11405 -11402 0
c Var 'aux1564' order represents '3' with '11406'
-11404 11406 0
c Var 'aux1564' direct represents '3' with '11407'
11404 -11406 11407 0
-11407 11406 0
-11407 -11404 0
c Var 'aux1564' direct represents '4' with '-11406'
11401 11403 11405 11407 -11406 0
c Encoding variable: aux1565 with domain: int(0..2) (representing constraint ((x_00009_00001=7) + (x_00009_00009=7)))
c Both direct and order encoding.
c Var 'aux1565' order represents '0' with '11408'
c Var 'aux1565' direct represents '0' with '11408'
c Var 'aux1565' order represents '1' with '11409'
-11408 11409 0
c Var 'aux1565' direct represents '1' with '11410'
11408 -11409 11410 0
-11410 11409 0
-11410 -11408 0
c Var 'aux1565' direct represents '2' with '-11409'
11408 11410 -11409 0
c Encoding variable: aux1566 with domain: int(0..2) (representing constraint ((x_00009_00008=7) + (x_00009_00002=7)))
c Both direct and order encoding.
c Var 'aux1566' order represents '0' with '11411'
c Var 'aux1566' direct represents '0' with '11411'
c Var 'aux1566' order represents '1' with '11412'
-11411 11412 0
c Var 'aux1566' direct represents '1' with '11413'
11411 -11412 11413 0
-11413 11412 0
-11413 -11411 0
c Var 'aux1566' direct represents '2' with '-11412'
11411 11413 -11412 0
c Encoding variable: aux1567 with domain: int(0..2) (representing constraint ((x_00009_00007=7) + (x_00009_00004=7)))
c Both direct and order encoding.
c Var 'aux1567' order represents '0' with '11414'
c Var 'aux1567' direct represents '0' with '11414'
c Var 'aux1567' order represents '1' with '11415'
-11414 11415 0
c Var 'aux1567' direct represents '1' with '11416'
11414 -11415 11416 0
-11416 11415 0
-11416 -11414 0
c Var 'aux1567' direct represents '2' with '-11415'
11414 11416 -11415 0
c Encoding variable: aux1568 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00009_00005=7)))
c Both direct and order encoding.
c Var 'aux1568' order represents '0' with '11417'
c Var 'aux1568' direct represents '0' with '11417'
c Var 'aux1568' order represents '1' with '11418'
-11417 11418 0
c Var 'aux1568' direct represents '1' with '11419'
11417 -11418 11419 0
-11419 11418 0
-11419 -11417 0
c Var 'aux1568' direct represents '2' with '-11418'
11417 11419 -11418 0
c Encoding variable: aux1569 with domain: int(0..3) (representing constraint ((x_00009_00003=7) + aux1568))
c Both direct and order encoding.
c Var 'aux1569' order represents '0' with '11420'
c Var 'aux1569' direct represents '0' with '11420'
c Var 'aux1569' order represents '1' with '11421'
-11420 11421 0
c Var 'aux1569' direct represents '1' with '11422'
11420 -11421 11422 0
-11422 11421 0
-11422 -11420 0
c Var 'aux1569' order represents '2' with '11423'
-11421 11423 0
c Var 'aux1569' direct represents '2' with '11424'
11421 -11423 11424 0
-11424 11423 0
-11424 -11421 0
c Var 'aux1569' direct represents '3' with '-11423'
11420 11422 11424 -11423 0
c Encoding variable: aux1570 with domain: int(0..4) (representing constraint (aux1565 + aux1567))
c Both direct and order encoding.
c Var 'aux1570' order represents '0' with '11425'
c Var 'aux1570' direct represents '0' with '11425'
c Var 'aux1570' order represents '1' with '11426'
-11425 11426 0
c Var 'aux1570' direct represents '1' with '11427'
11425 -11426 11427 0
-11427 11426 0
-11427 -11425 0
c Var 'aux1570' order represents '2' with '11428'
-11426 11428 0
c Var 'aux1570' direct represents '2' with '11429'
11426 -11428 11429 0
-11429 11428 0
-11429 -11426 0
c Var 'aux1570' order represents '3' with '11430'
-11428 11430 0
c Var 'aux1570' direct represents '3' with '11431'
11428 -11430 11431 0
-11431 11430 0
-11431 -11428 0
c Var 'aux1570' direct represents '4' with '-11430'
11425 11427 11429 11431 -11430 0
c Encoding variable: aux1571 with domain: int(0..2) (representing constraint ((x_00009_00001=8) + (x_00009_00009=8)))
c Both direct and order encoding.
c Var 'aux1571' order represents '0' with '11432'
c Var 'aux1571' direct represents '0' with '11432'
c Var 'aux1571' order represents '1' with '11433'
-11432 11433 0
c Var 'aux1571' direct represents '1' with '11434'
11432 -11433 11434 0
-11434 11433 0
-11434 -11432 0
c Var 'aux1571' direct represents '2' with '-11433'
11432 11434 -11433 0
c Encoding variable: aux1572 with domain: int(0..2) (representing constraint ((x_00009_00008=8) + (x_00009_00002=8)))
c Both direct and order encoding.
c Var 'aux1572' order represents '0' with '11435'
c Var 'aux1572' direct represents '0' with '11435'
c Var 'aux1572' order represents '1' with '11436'
-11435 11436 0
c Var 'aux1572' direct represents '1' with '11437'
11435 -11436 11437 0
-11437 11436 0
-11437 -11435 0
c Var 'aux1572' direct represents '2' with '-11436'
11435 11437 -11436 0
c Encoding variable: aux1573 with domain: int(0..2) (representing constraint ((x_00009_00007=8) + (x_00009_00004=8)))
c Both direct and order encoding.
c Var 'aux1573' order represents '0' with '11438'
c Var 'aux1573' direct represents '0' with '11438'
c Var 'aux1573' order represents '1' with '11439'
-11438 11439 0
c Var 'aux1573' direct represents '1' with '11440'
11438 -11439 11440 0
-11440 11439 0
-11440 -11438 0
c Var 'aux1573' direct represents '2' with '-11439'
11438 11440 -11439 0
c Encoding variable: aux1574 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00009_00005=8)))
c Both direct and order encoding.
c Var 'aux1574' order represents '0' with '11441'
c Var 'aux1574' direct represents '0' with '11441'
c Var 'aux1574' order represents '1' with '11442'
-11441 11442 0
c Var 'aux1574' direct represents '1' with '11443'
11441 -11442 11443 0
-11443 11442 0
-11443 -11441 0
c Var 'aux1574' direct represents '2' with '-11442'
11441 11443 -11442 0
c Encoding variable: aux1575 with domain: int(0..3) (representing constraint ((x_00009_00003=8) + aux1574))
c Both direct and order encoding.
c Var 'aux1575' order represents '0' with '11444'
c Var 'aux1575' direct represents '0' with '11444'
c Var 'aux1575' order represents '1' with '11445'
-11444 11445 0
c Var 'aux1575' direct represents '1' with '11446'
11444 -11445 11446 0
-11446 11445 0
-11446 -11444 0
c Var 'aux1575' order represents '2' with '11447'
-11445 11447 0
c Var 'aux1575' direct represents '2' with '11448'
11445 -11447 11448 0
-11448 11447 0
-11448 -11445 0
c Var 'aux1575' direct represents '3' with '-11447'
11444 11446 11448 -11447 0
c Encoding variable: aux1576 with domain: int(0..4) (representing constraint (aux1571 + aux1573))
c Both direct and order encoding.
c Var 'aux1576' order represents '0' with '11449'
c Var 'aux1576' direct represents '0' with '11449'
c Var 'aux1576' order represents '1' with '11450'
-11449 11450 0
c Var 'aux1576' direct represents '1' with '11451'
11449 -11450 11451 0
-11451 11450 0
-11451 -11449 0
c Var 'aux1576' order represents '2' with '11452'
-11450 11452 0
c Var 'aux1576' direct represents '2' with '11453'
11450 -11452 11453 0
-11453 11452 0
-11453 -11450 0
c Var 'aux1576' order represents '3' with '11454'
-11452 11454 0
c Var 'aux1576' direct represents '3' with '11455'
11452 -11454 11455 0
-11455 11454 0
-11455 -11452 0
c Var 'aux1576' direct represents '4' with '-11454'
11449 11451 11453 11455 -11454 0
c Encoding variable: aux1577 with domain: int(0..2) (representing constraint ((x_00009_00001=9) + (x_00009_00009=9)))
c Both direct and order encoding.
c Var 'aux1577' order represents '0' with '11456'
c Var 'aux1577' direct represents '0' with '11456'
c Var 'aux1577' order represents '1' with '11457'
-11456 11457 0
c Var 'aux1577' direct represents '1' with '11458'
11456 -11457 11458 0
-11458 11457 0
-11458 -11456 0
c Var 'aux1577' direct represents '2' with '-11457'
11456 11458 -11457 0
c Encoding variable: aux1578 with domain: int(0..2) (representing constraint ((x_00009_00008=9) + (x_00009_00002=9)))
c Both direct and order encoding.
c Var 'aux1578' order represents '0' with '11459'
c Var 'aux1578' direct represents '0' with '11459'
c Var 'aux1578' order represents '1' with '11460'
-11459 11460 0
c Var 'aux1578' direct represents '1' with '11461'
11459 -11460 11461 0
-11461 11460 0
-11461 -11459 0
c Var 'aux1578' direct represents '2' with '-11460'
11459 11461 -11460 0
c Encoding variable: aux1579 with domain: int(0..2) (representing constraint ((x_00009_00007=9) + (x_00009_00004=9)))
c Both direct and order encoding.
c Var 'aux1579' order represents '0' with '11462'
c Var 'aux1579' direct represents '0' with '11462'
c Var 'aux1579' order represents '1' with '11463'
-11462 11463 0
c Var 'aux1579' direct represents '1' with '11464'
11462 -11463 11464 0
-11464 11463 0
-11464 -11462 0
c Var 'aux1579' direct represents '2' with '-11463'
11462 11464 -11463 0
c Encoding variable: aux1580 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00009_00005=9)))
c Both direct and order encoding.
c Var 'aux1580' order represents '0' with '11465'
c Var 'aux1580' direct represents '0' with '11465'
c Var 'aux1580' order represents '1' with '11466'
-11465 11466 0
c Var 'aux1580' direct represents '1' with '11467'
11465 -11466 11467 0
-11467 11466 0
-11467 -11465 0
c Var 'aux1580' direct represents '2' with '-11466'
11465 11467 -11466 0
c Encoding variable: aux1581 with domain: int(0..3) (representing constraint ((x_00009_00003=9) + aux1580))
c Both direct and order encoding.
c Var 'aux1581' order represents '0' with '11468'
c Var 'aux1581' direct represents '0' with '11468'
c Var 'aux1581' order represents '1' with '11469'
-11468 11469 0
c Var 'aux1581' direct represents '1' with '11470'
11468 -11469 11470 0
-11470 11469 0
-11470 -11468 0
c Var 'aux1581' order represents '2' with '11471'
-11469 11471 0
c Var 'aux1581' direct represents '2' with '11472'
11469 -11471 11472 0
-11472 11471 0
-11472 -11469 0
c Var 'aux1581' direct represents '3' with '-11471'
11468 11470 11472 -11471 0
c Encoding variable: aux1582 with domain: int(0..4) (representing constraint (aux1577 + aux1579))
c Both direct and order encoding.
c Var 'aux1582' order represents '0' with '11473'
c Var 'aux1582' direct represents '0' with '11473'
c Var 'aux1582' order represents '1' with '11474'
-11473 11474 0
c Var 'aux1582' direct represents '1' with '11475'
11473 -11474 11475 0
-11475 11474 0
-11475 -11473 0
c Var 'aux1582' order represents '2' with '11476'
-11474 11476 0
c Var 'aux1582' direct represents '2' with '11477'
11474 -11476 11477 0
-11477 11476 0
-11477 -11474 0
c Var 'aux1582' order represents '3' with '11478'
-11476 11478 0
c Var 'aux1582' direct represents '3' with '11479'
11476 -11478 11479 0
-11479 11478 0
-11479 -11476 0
c Var 'aux1582' direct represents '4' with '-11478'
11473 11475 11477 11479 -11478 0
c Encoding variable: aux1583 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00002_00003=1)))
c Both direct and order encoding.
c Var 'aux1583' order represents '0' with '11480'
c Var 'aux1583' direct represents '0' with '11480'
c Var 'aux1583' order represents '1' with '11481'
-11480 11481 0
c Var 'aux1583' direct represents '1' with '11482'
11480 -11481 11482 0
-11482 11481 0
-11482 -11480 0
c Var 'aux1583' direct represents '2' with '-11481'
11480 11482 -11481 0
c Encoding variable: aux1584 with domain: int(0..2) (representing constraint ((x_00002_00002=1) + (x_00003_00002=1)))
c Both direct and order encoding.
c Var 'aux1584' order represents '0' with '11483'
c Var 'aux1584' direct represents '0' with '11483'
c Var 'aux1584' order represents '1' with '11484'
-11483 11484 0
c Var 'aux1584' direct represents '1' with '11485'
11483 -11484 11485 0
-11485 11484 0
-11485 -11483 0
c Var 'aux1584' direct represents '2' with '-11484'
11483 11485 -11484 0
c Encoding variable: aux1585 with domain: int(0..2) (representing constraint ((x_00002_00001=1) + (x_00001_00001=1)))
c Both direct and order encoding.
c Var 'aux1585' order represents '0' with '11486'
c Var 'aux1585' direct represents '0' with '11486'
c Var 'aux1585' order represents '1' with '11487'
-11486 11487 0
c Var 'aux1585' direct represents '1' with '11488'
11486 -11487 11488 0
-11488 11487 0
-11488 -11486 0
c Var 'aux1585' direct represents '2' with '-11487'
11486 11488 -11487 0
c Encoding variable: aux1586 with domain: int(0..2) (representing constraint ((x_00001_00003=1) + (x_00001_00002=1)))
c Both direct and order encoding.
c Var 'aux1586' order represents '0' with '11489'
c Var 'aux1586' direct represents '0' with '11489'
c Var 'aux1586' order represents '1' with '11490'
-11489 11490 0
c Var 'aux1586' direct represents '1' with '11491'
11489 -11490 11491 0
-11491 11490 0
-11491 -11489 0
c Var 'aux1586' direct represents '2' with '-11490'
11489 11491 -11490 0
c Encoding variable: aux1587 with domain: int(0..3) (representing constraint ((x_00003_00003=1) + aux1586))
c Both direct and order encoding.
c Var 'aux1587' order represents '0' with '11492'
c Var 'aux1587' direct represents '0' with '11492'
c Var 'aux1587' order represents '1' with '11493'
-11492 11493 0
c Var 'aux1587' direct represents '1' with '11494'
11492 -11493 11494 0
-11494 11493 0
-11494 -11492 0
c Var 'aux1587' order represents '2' with '11495'
-11493 11495 0
c Var 'aux1587' direct represents '2' with '11496'
11493 -11495 11496 0
-11496 11495 0
-11496 -11493 0
c Var 'aux1587' direct represents '3' with '-11495'
11492 11494 11496 -11495 0
c Encoding variable: aux1588 with domain: int(0..4) (representing constraint (aux1583 + aux1585))
c Both direct and order encoding.
c Var 'aux1588' order represents '0' with '11497'
c Var 'aux1588' direct represents '0' with '11497'
c Var 'aux1588' order represents '1' with '11498'
-11497 11498 0
c Var 'aux1588' direct represents '1' with '11499'
11497 -11498 11499 0
-11499 11498 0
-11499 -11497 0
c Var 'aux1588' order represents '2' with '11500'
-11498 11500 0
c Var 'aux1588' direct represents '2' with '11501'
11498 -11500 11501 0
-11501 11500 0
-11501 -11498 0
c Var 'aux1588' order represents '3' with '11502'
-11500 11502 0
c Var 'aux1588' direct represents '3' with '11503'
11500 -11502 11503 0
-11503 11502 0
-11503 -11500 0
c Var 'aux1588' direct represents '4' with '-11502'
11497 11499 11501 11503 -11502 0
c Encoding variable: aux1589 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00002_00003=2)))
c Both direct and order encoding.
c Var 'aux1589' order represents '0' with '11504'
c Var 'aux1589' direct represents '0' with '11504'
c Var 'aux1589' order represents '1' with '11505'
-11504 11505 0
c Var 'aux1589' direct represents '1' with '11506'
11504 -11505 11506 0
-11506 11505 0
-11506 -11504 0
c Var 'aux1589' direct represents '2' with '-11505'
11504 11506 -11505 0
c Encoding variable: aux1590 with domain: int(0..2) (representing constraint ((x_00002_00002=2) + (x_00003_00002=2)))
c Both direct and order encoding.
c Var 'aux1590' order represents '0' with '11507'
c Var 'aux1590' direct represents '0' with '11507'
c Var 'aux1590' order represents '1' with '11508'
-11507 11508 0
c Var 'aux1590' direct represents '1' with '11509'
11507 -11508 11509 0
-11509 11508 0
-11509 -11507 0
c Var 'aux1590' direct represents '2' with '-11508'
11507 11509 -11508 0
c Encoding variable: aux1591 with domain: int(0..2) (representing constraint ((x_00002_00001=2) + (x_00001_00001=2)))
c Both direct and order encoding.
c Var 'aux1591' order represents '0' with '11510'
c Var 'aux1591' direct represents '0' with '11510'
c Var 'aux1591' order represents '1' with '11511'
-11510 11511 0
c Var 'aux1591' direct represents '1' with '11512'
11510 -11511 11512 0
-11512 11511 0
-11512 -11510 0
c Var 'aux1591' direct represents '2' with '-11511'
11510 11512 -11511 0
c Encoding variable: aux1592 with domain: int(0..2) (representing constraint ((x_00001_00003=2) + (x_00001_00002=2)))
c Both direct and order encoding.
c Var 'aux1592' order represents '0' with '11513'
c Var 'aux1592' direct represents '0' with '11513'
c Var 'aux1592' order represents '1' with '11514'
-11513 11514 0
c Var 'aux1592' direct represents '1' with '11515'
11513 -11514 11515 0
-11515 11514 0
-11515 -11513 0
c Var 'aux1592' direct represents '2' with '-11514'
11513 11515 -11514 0
c Encoding variable: aux1593 with domain: int(0..3) (representing constraint ((x_00003_00003=2) + aux1592))
c Both direct and order encoding.
c Var 'aux1593' order represents '0' with '11516'
c Var 'aux1593' direct represents '0' with '11516'
c Var 'aux1593' order represents '1' with '11517'
-11516 11517 0
c Var 'aux1593' direct represents '1' with '11518'
11516 -11517 11518 0
-11518 11517 0
-11518 -11516 0
c Var 'aux1593' order represents '2' with '11519'
-11517 11519 0
c Var 'aux1593' direct represents '2' with '11520'
11517 -11519 11520 0
-11520 11519 0
-11520 -11517 0
c Var 'aux1593' direct represents '3' with '-11519'
11516 11518 11520 -11519 0
c Encoding variable: aux1594 with domain: int(0..4) (representing constraint (aux1589 + aux1591))
c Both direct and order encoding.
c Var 'aux1594' order represents '0' with '11521'
c Var 'aux1594' direct represents '0' with '11521'
c Var 'aux1594' order represents '1' with '11522'
-11521 11522 0
c Var 'aux1594' direct represents '1' with '11523'
11521 -11522 11523 0
-11523 11522 0
-11523 -11521 0
c Var 'aux1594' order represents '2' with '11524'
-11522 11524 0
c Var 'aux1594' direct represents '2' with '11525'
11522 -11524 11525 0
-11525 11524 0
-11525 -11522 0
c Var 'aux1594' order represents '3' with '11526'
-11524 11526 0
c Var 'aux1594' direct represents '3' with '11527'
11524 -11526 11527 0
-11527 11526 0
-11527 -11524 0
c Var 'aux1594' direct represents '4' with '-11526'
11521 11523 11525 11527 -11526 0
c Encoding variable: aux1595 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00002_00003=3)))
c Both direct and order encoding.
c Var 'aux1595' order represents '0' with '11528'
c Var 'aux1595' direct represents '0' with '11528'
c Var 'aux1595' order represents '1' with '11529'
-11528 11529 0
c Var 'aux1595' direct represents '1' with '11530'
11528 -11529 11530 0
-11530 11529 0
-11530 -11528 0
c Var 'aux1595' direct represents '2' with '-11529'
11528 11530 -11529 0
c Encoding variable: aux1596 with domain: int(0..2) (representing constraint ((x_00002_00002=3) + (x_00003_00002=3)))
c Both direct and order encoding.
c Var 'aux1596' order represents '0' with '11531'
c Var 'aux1596' direct represents '0' with '11531'
c Var 'aux1596' order represents '1' with '11532'
-11531 11532 0
c Var 'aux1596' direct represents '1' with '11533'
11531 -11532 11533 0
-11533 11532 0
-11533 -11531 0
c Var 'aux1596' direct represents '2' with '-11532'
11531 11533 -11532 0
c Encoding variable: aux1597 with domain: int(0..2) (representing constraint ((x_00002_00001=3) + (x_00001_00001=3)))
c Both direct and order encoding.
c Var 'aux1597' order represents '0' with '11534'
c Var 'aux1597' direct represents '0' with '11534'
c Var 'aux1597' order represents '1' with '11535'
-11534 11535 0
c Var 'aux1597' direct represents '1' with '11536'
11534 -11535 11536 0
-11536 11535 0
-11536 -11534 0
c Var 'aux1597' direct represents '2' with '-11535'
11534 11536 -11535 0
c Encoding variable: aux1598 with domain: int(0..2) (representing constraint ((x_00001_00003=3) + (x_00001_00002=3)))
c Both direct and order encoding.
c Var 'aux1598' order represents '0' with '11537'
c Var 'aux1598' direct represents '0' with '11537'
c Var 'aux1598' order represents '1' with '11538'
-11537 11538 0
c Var 'aux1598' direct represents '1' with '11539'
11537 -11538 11539 0
-11539 11538 0
-11539 -11537 0
c Var 'aux1598' direct represents '2' with '-11538'
11537 11539 -11538 0
c Encoding variable: aux1599 with domain: int(0..3) (representing constraint ((x_00003_00003=3) + aux1598))
c Both direct and order encoding.
c Var 'aux1599' order represents '0' with '11540'
c Var 'aux1599' direct represents '0' with '11540'
c Var 'aux1599' order represents '1' with '11541'
-11540 11541 0
c Var 'aux1599' direct represents '1' with '11542'
11540 -11541 11542 0
-11542 11541 0
-11542 -11540 0
c Var 'aux1599' order represents '2' with '11543'
-11541 11543 0
c Var 'aux1599' direct represents '2' with '11544'
11541 -11543 11544 0
-11544 11543 0
-11544 -11541 0
c Var 'aux1599' direct represents '3' with '-11543'
11540 11542 11544 -11543 0
c Encoding variable: aux1600 with domain: int(0..4) (representing constraint (aux1595 + aux1597))
c Both direct and order encoding.
c Var 'aux1600' order represents '0' with '11545'
c Var 'aux1600' direct represents '0' with '11545'
c Var 'aux1600' order represents '1' with '11546'
-11545 11546 0
c Var 'aux1600' direct represents '1' with '11547'
11545 -11546 11547 0
-11547 11546 0
-11547 -11545 0
c Var 'aux1600' order represents '2' with '11548'
-11546 11548 0
c Var 'aux1600' direct represents '2' with '11549'
11546 -11548 11549 0
-11549 11548 0
-11549 -11546 0
c Var 'aux1600' order represents '3' with '11550'
-11548 11550 0
c Var 'aux1600' direct represents '3' with '11551'
11548 -11550 11551 0
-11551 11550 0
-11551 -11548 0
c Var 'aux1600' direct represents '4' with '-11550'
11545 11547 11549 11551 -11550 0
c Encoding variable: aux1601 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00002_00003=4)))
c Both direct and order encoding.
c Var 'aux1601' order represents '0' with '11552'
c Var 'aux1601' direct represents '0' with '11552'
c Var 'aux1601' order represents '1' with '11553'
-11552 11553 0
c Var 'aux1601' direct represents '1' with '11554'
11552 -11553 11554 0
-11554 11553 0
-11554 -11552 0
c Var 'aux1601' direct represents '2' with '-11553'
11552 11554 -11553 0
c Encoding variable: aux1602 with domain: int(0..2) (representing constraint ((x_00002_00002=4) + (x_00003_00002=4)))
c Both direct and order encoding.
c Var 'aux1602' order represents '0' with '11555'
c Var 'aux1602' direct represents '0' with '11555'
c Var 'aux1602' order represents '1' with '11556'
-11555 11556 0
c Var 'aux1602' direct represents '1' with '11557'
11555 -11556 11557 0
-11557 11556 0
-11557 -11555 0
c Var 'aux1602' direct represents '2' with '-11556'
11555 11557 -11556 0
c Encoding variable: aux1603 with domain: int(0..2) (representing constraint ((x_00002_00001=4) + (x_00001_00001=4)))
c Both direct and order encoding.
c Var 'aux1603' order represents '0' with '11558'
c Var 'aux1603' direct represents '0' with '11558'
c Var 'aux1603' order represents '1' with '11559'
-11558 11559 0
c Var 'aux1603' direct represents '1' with '11560'
11558 -11559 11560 0
-11560 11559 0
-11560 -11558 0
c Var 'aux1603' direct represents '2' with '-11559'
11558 11560 -11559 0
c Encoding variable: aux1604 with domain: int(0..2) (representing constraint ((x_00001_00003=4) + (x_00001_00002=4)))
c Both direct and order encoding.
c Var 'aux1604' order represents '0' with '11561'
c Var 'aux1604' direct represents '0' with '11561'
c Var 'aux1604' order represents '1' with '11562'
-11561 11562 0
c Var 'aux1604' direct represents '1' with '11563'
11561 -11562 11563 0
-11563 11562 0
-11563 -11561 0
c Var 'aux1604' direct represents '2' with '-11562'
11561 11563 -11562 0
c Encoding variable: aux1605 with domain: int(0..3) (representing constraint ((x_00003_00003=4) + aux1604))
c Both direct and order encoding.
c Var 'aux1605' order represents '0' with '11564'
c Var 'aux1605' direct represents '0' with '11564'
c Var 'aux1605' order represents '1' with '11565'
-11564 11565 0
c Var 'aux1605' direct represents '1' with '11566'
11564 -11565 11566 0
-11566 11565 0
-11566 -11564 0
c Var 'aux1605' order represents '2' with '11567'
-11565 11567 0
c Var 'aux1605' direct represents '2' with '11568'
11565 -11567 11568 0
-11568 11567 0
-11568 -11565 0
c Var 'aux1605' direct represents '3' with '-11567'
11564 11566 11568 -11567 0
c Encoding variable: aux1606 with domain: int(0..4) (representing constraint (aux1601 + aux1603))
c Both direct and order encoding.
c Var 'aux1606' order represents '0' with '11569'
c Var 'aux1606' direct represents '0' with '11569'
c Var 'aux1606' order represents '1' with '11570'
-11569 11570 0
c Var 'aux1606' direct represents '1' with '11571'
11569 -11570 11571 0
-11571 11570 0
-11571 -11569 0
c Var 'aux1606' order represents '2' with '11572'
-11570 11572 0
c Var 'aux1606' direct represents '2' with '11573'
11570 -11572 11573 0
-11573 11572 0
-11573 -11570 0
c Var 'aux1606' order represents '3' with '11574'
-11572 11574 0
c Var 'aux1606' direct represents '3' with '11575'
11572 -11574 11575 0
-11575 11574 0
-11575 -11572 0
c Var 'aux1606' direct represents '4' with '-11574'
11569 11571 11573 11575 -11574 0
c Encoding variable: aux1607 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00002_00003=5)))
c Both direct and order encoding.
c Var 'aux1607' order represents '0' with '11576'
c Var 'aux1607' direct represents '0' with '11576'
c Var 'aux1607' order represents '1' with '11577'
-11576 11577 0
c Var 'aux1607' direct represents '1' with '11578'
11576 -11577 11578 0
-11578 11577 0
-11578 -11576 0
c Var 'aux1607' direct represents '2' with '-11577'
11576 11578 -11577 0
c Encoding variable: aux1608 with domain: int(0..2) (representing constraint ((x_00002_00002=5) + (x_00003_00002=5)))
c Both direct and order encoding.
c Var 'aux1608' order represents '0' with '11579'
c Var 'aux1608' direct represents '0' with '11579'
c Var 'aux1608' order represents '1' with '11580'
-11579 11580 0
c Var 'aux1608' direct represents '1' with '11581'
11579 -11580 11581 0
-11581 11580 0
-11581 -11579 0
c Var 'aux1608' direct represents '2' with '-11580'
11579 11581 -11580 0
c Encoding variable: aux1609 with domain: int(0..2) (representing constraint ((x_00002_00001=5) + (x_00001_00001=5)))
c Both direct and order encoding.
c Var 'aux1609' order represents '0' with '11582'
c Var 'aux1609' direct represents '0' with '11582'
c Var 'aux1609' order represents '1' with '11583'
-11582 11583 0
c Var 'aux1609' direct represents '1' with '11584'
11582 -11583 11584 0
-11584 11583 0
-11584 -11582 0
c Var 'aux1609' direct represents '2' with '-11583'
11582 11584 -11583 0
c Encoding variable: aux1610 with domain: int(0..2) (representing constraint ((x_00001_00003=5) + (x_00001_00002=5)))
c Both direct and order encoding.
c Var 'aux1610' order represents '0' with '11585'
c Var 'aux1610' direct represents '0' with '11585'
c Var 'aux1610' order represents '1' with '11586'
-11585 11586 0
c Var 'aux1610' direct represents '1' with '11587'
11585 -11586 11587 0
-11587 11586 0
-11587 -11585 0
c Var 'aux1610' direct represents '2' with '-11586'
11585 11587 -11586 0
c Encoding variable: aux1611 with domain: int(0..3) (representing constraint ((x_00003_00003=5) + aux1610))
c Both direct and order encoding.
c Var 'aux1611' order represents '0' with '11588'
c Var 'aux1611' direct represents '0' with '11588'
c Var 'aux1611' order represents '1' with '11589'
-11588 11589 0
c Var 'aux1611' direct represents '1' with '11590'
11588 -11589 11590 0
-11590 11589 0
-11590 -11588 0
c Var 'aux1611' order represents '2' with '11591'
-11589 11591 0
c Var 'aux1611' direct represents '2' with '11592'
11589 -11591 11592 0
-11592 11591 0
-11592 -11589 0
c Var 'aux1611' direct represents '3' with '-11591'
11588 11590 11592 -11591 0
c Encoding variable: aux1612 with domain: int(0..4) (representing constraint (aux1607 + aux1609))
c Both direct and order encoding.
c Var 'aux1612' order represents '0' with '11593'
c Var 'aux1612' direct represents '0' with '11593'
c Var 'aux1612' order represents '1' with '11594'
-11593 11594 0
c Var 'aux1612' direct represents '1' with '11595'
11593 -11594 11595 0
-11595 11594 0
-11595 -11593 0
c Var 'aux1612' order represents '2' with '11596'
-11594 11596 0
c Var 'aux1612' direct represents '2' with '11597'
11594 -11596 11597 0
-11597 11596 0
-11597 -11594 0
c Var 'aux1612' order represents '3' with '11598'
-11596 11598 0
c Var 'aux1612' direct represents '3' with '11599'
11596 -11598 11599 0
-11599 11598 0
-11599 -11596 0
c Var 'aux1612' direct represents '4' with '-11598'
11593 11595 11597 11599 -11598 0
c Encoding variable: aux1613 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00002_00003=6)))
c Both direct and order encoding.
c Var 'aux1613' order represents '0' with '11600'
c Var 'aux1613' direct represents '0' with '11600'
c Var 'aux1613' order represents '1' with '11601'
-11600 11601 0
c Var 'aux1613' direct represents '1' with '11602'
11600 -11601 11602 0
-11602 11601 0
-11602 -11600 0
c Var 'aux1613' direct represents '2' with '-11601'
11600 11602 -11601 0
c Encoding variable: aux1614 with domain: int(0..2) (representing constraint ((x_00002_00002=6) + (x_00003_00002=6)))
c Both direct and order encoding.
c Var 'aux1614' order represents '0' with '11603'
c Var 'aux1614' direct represents '0' with '11603'
c Var 'aux1614' order represents '1' with '11604'
-11603 11604 0
c Var 'aux1614' direct represents '1' with '11605'
11603 -11604 11605 0
-11605 11604 0
-11605 -11603 0
c Var 'aux1614' direct represents '2' with '-11604'
11603 11605 -11604 0
c Encoding variable: aux1615 with domain: int(0..2) (representing constraint ((x_00002_00001=6) + (x_00001_00001=6)))
c Both direct and order encoding.
c Var 'aux1615' order represents '0' with '11606'
c Var 'aux1615' direct represents '0' with '11606'
c Var 'aux1615' order represents '1' with '11607'
-11606 11607 0
c Var 'aux1615' direct represents '1' with '11608'
11606 -11607 11608 0
-11608 11607 0
-11608 -11606 0
c Var 'aux1615' direct represents '2' with '-11607'
11606 11608 -11607 0
c Encoding variable: aux1616 with domain: int(0..2) (representing constraint ((x_00001_00003=6) + (x_00001_00002=6)))
c Both direct and order encoding.
c Var 'aux1616' order represents '0' with '11609'
c Var 'aux1616' direct represents '0' with '11609'
c Var 'aux1616' order represents '1' with '11610'
-11609 11610 0
c Var 'aux1616' direct represents '1' with '11611'
11609 -11610 11611 0
-11611 11610 0
-11611 -11609 0
c Var 'aux1616' direct represents '2' with '-11610'
11609 11611 -11610 0
c Encoding variable: aux1617 with domain: int(0..3) (representing constraint ((x_00003_00003=6) + aux1616))
c Both direct and order encoding.
c Var 'aux1617' order represents '0' with '11612'
c Var 'aux1617' direct represents '0' with '11612'
c Var 'aux1617' order represents '1' with '11613'
-11612 11613 0
c Var 'aux1617' direct represents '1' with '11614'
11612 -11613 11614 0
-11614 11613 0
-11614 -11612 0
c Var 'aux1617' order represents '2' with '11615'
-11613 11615 0
c Var 'aux1617' direct represents '2' with '11616'
11613 -11615 11616 0
-11616 11615 0
-11616 -11613 0
c Var 'aux1617' direct represents '3' with '-11615'
11612 11614 11616 -11615 0
c Encoding variable: aux1618 with domain: int(0..4) (representing constraint (aux1613 + aux1615))
c Both direct and order encoding.
c Var 'aux1618' order represents '0' with '11617'
c Var 'aux1618' direct represents '0' with '11617'
c Var 'aux1618' order represents '1' with '11618'
-11617 11618 0
c Var 'aux1618' direct represents '1' with '11619'
11617 -11618 11619 0
-11619 11618 0
-11619 -11617 0
c Var 'aux1618' order represents '2' with '11620'
-11618 11620 0
c Var 'aux1618' direct represents '2' with '11621'
11618 -11620 11621 0
-11621 11620 0
-11621 -11618 0
c Var 'aux1618' order represents '3' with '11622'
-11620 11622 0
c Var 'aux1618' direct represents '3' with '11623'
11620 -11622 11623 0
-11623 11622 0
-11623 -11620 0
c Var 'aux1618' direct represents '4' with '-11622'
11617 11619 11621 11623 -11622 0
c Encoding variable: aux1619 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00002_00003=7)))
c Both direct and order encoding.
c Var 'aux1619' order represents '0' with '11624'
c Var 'aux1619' direct represents '0' with '11624'
c Var 'aux1619' order represents '1' with '11625'
-11624 11625 0
c Var 'aux1619' direct represents '1' with '11626'
11624 -11625 11626 0
-11626 11625 0
-11626 -11624 0
c Var 'aux1619' direct represents '2' with '-11625'
11624 11626 -11625 0
c Encoding variable: aux1620 with domain: int(0..2) (representing constraint ((x_00002_00002=7) + (x_00003_00002=7)))
c Both direct and order encoding.
c Var 'aux1620' order represents '0' with '11627'
c Var 'aux1620' direct represents '0' with '11627'
c Var 'aux1620' order represents '1' with '11628'
-11627 11628 0
c Var 'aux1620' direct represents '1' with '11629'
11627 -11628 11629 0
-11629 11628 0
-11629 -11627 0
c Var 'aux1620' direct represents '2' with '-11628'
11627 11629 -11628 0
c Encoding variable: aux1621 with domain: int(0..2) (representing constraint ((x_00002_00001=7) + (x_00001_00001=7)))
c Both direct and order encoding.
c Var 'aux1621' order represents '0' with '11630'
c Var 'aux1621' direct represents '0' with '11630'
c Var 'aux1621' order represents '1' with '11631'
-11630 11631 0
c Var 'aux1621' direct represents '1' with '11632'
11630 -11631 11632 0
-11632 11631 0
-11632 -11630 0
c Var 'aux1621' direct represents '2' with '-11631'
11630 11632 -11631 0
c Encoding variable: aux1622 with domain: int(0..2) (representing constraint ((x_00001_00003=7) + (x_00001_00002=7)))
c Both direct and order encoding.
c Var 'aux1622' order represents '0' with '11633'
c Var 'aux1622' direct represents '0' with '11633'
c Var 'aux1622' order represents '1' with '11634'
-11633 11634 0
c Var 'aux1622' direct represents '1' with '11635'
11633 -11634 11635 0
-11635 11634 0
-11635 -11633 0
c Var 'aux1622' direct represents '2' with '-11634'
11633 11635 -11634 0
c Encoding variable: aux1623 with domain: int(0..3) (representing constraint ((x_00003_00003=7) + aux1622))
c Both direct and order encoding.
c Var 'aux1623' order represents '0' with '11636'
c Var 'aux1623' direct represents '0' with '11636'
c Var 'aux1623' order represents '1' with '11637'
-11636 11637 0
c Var 'aux1623' direct represents '1' with '11638'
11636 -11637 11638 0
-11638 11637 0
-11638 -11636 0
c Var 'aux1623' order represents '2' with '11639'
-11637 11639 0
c Var 'aux1623' direct represents '2' with '11640'
11637 -11639 11640 0
-11640 11639 0
-11640 -11637 0
c Var 'aux1623' direct represents '3' with '-11639'
11636 11638 11640 -11639 0
c Encoding variable: aux1624 with domain: int(0..4) (representing constraint (aux1619 + aux1621))
c Both direct and order encoding.
c Var 'aux1624' order represents '0' with '11641'
c Var 'aux1624' direct represents '0' with '11641'
c Var 'aux1624' order represents '1' with '11642'
-11641 11642 0
c Var 'aux1624' direct represents '1' with '11643'
11641 -11642 11643 0
-11643 11642 0
-11643 -11641 0
c Var 'aux1624' order represents '2' with '11644'
-11642 11644 0
c Var 'aux1624' direct represents '2' with '11645'
11642 -11644 11645 0
-11645 11644 0
-11645 -11642 0
c Var 'aux1624' order represents '3' with '11646'
-11644 11646 0
c Var 'aux1624' direct represents '3' with '11647'
11644 -11646 11647 0
-11647 11646 0
-11647 -11644 0
c Var 'aux1624' direct represents '4' with '-11646'
11641 11643 11645 11647 -11646 0
c Encoding variable: aux1625 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00002_00003=8)))
c Both direct and order encoding.
c Var 'aux1625' order represents '0' with '11648'
c Var 'aux1625' direct represents '0' with '11648'
c Var 'aux1625' order represents '1' with '11649'
-11648 11649 0
c Var 'aux1625' direct represents '1' with '11650'
11648 -11649 11650 0
-11650 11649 0
-11650 -11648 0
c Var 'aux1625' direct represents '2' with '-11649'
11648 11650 -11649 0
c Encoding variable: aux1626 with domain: int(0..2) (representing constraint ((x_00002_00002=8) + (x_00003_00002=8)))
c Both direct and order encoding.
c Var 'aux1626' order represents '0' with '11651'
c Var 'aux1626' direct represents '0' with '11651'
c Var 'aux1626' order represents '1' with '11652'
-11651 11652 0
c Var 'aux1626' direct represents '1' with '11653'
11651 -11652 11653 0
-11653 11652 0
-11653 -11651 0
c Var 'aux1626' direct represents '2' with '-11652'
11651 11653 -11652 0
c Encoding variable: aux1627 with domain: int(0..2) (representing constraint ((x_00002_00001=8) + (x_00001_00001=8)))
c Both direct and order encoding.
c Var 'aux1627' order represents '0' with '11654'
c Var 'aux1627' direct represents '0' with '11654'
c Var 'aux1627' order represents '1' with '11655'
-11654 11655 0
c Var 'aux1627' direct represents '1' with '11656'
11654 -11655 11656 0
-11656 11655 0
-11656 -11654 0
c Var 'aux1627' direct represents '2' with '-11655'
11654 11656 -11655 0
c Encoding variable: aux1628 with domain: int(0..2) (representing constraint ((x_00001_00003=8) + (x_00001_00002=8)))
c Both direct and order encoding.
c Var 'aux1628' order represents '0' with '11657'
c Var 'aux1628' direct represents '0' with '11657'
c Var 'aux1628' order represents '1' with '11658'
-11657 11658 0
c Var 'aux1628' direct represents '1' with '11659'
11657 -11658 11659 0
-11659 11658 0
-11659 -11657 0
c Var 'aux1628' direct represents '2' with '-11658'
11657 11659 -11658 0
c Encoding variable: aux1629 with domain: int(0..3) (representing constraint ((x_00003_00003=8) + aux1628))
c Both direct and order encoding.
c Var 'aux1629' order represents '0' with '11660'
c Var 'aux1629' direct represents '0' with '11660'
c Var 'aux1629' order represents '1' with '11661'
-11660 11661 0
c Var 'aux1629' direct represents '1' with '11662'
11660 -11661 11662 0
-11662 11661 0
-11662 -11660 0
c Var 'aux1629' order represents '2' with '11663'
-11661 11663 0
c Var 'aux1629' direct represents '2' with '11664'
11661 -11663 11664 0
-11664 11663 0
-11664 -11661 0
c Var 'aux1629' direct represents '3' with '-11663'
11660 11662 11664 -11663 0
c Encoding variable: aux1630 with domain: int(0..4) (representing constraint (aux1625 + aux1627))
c Both direct and order encoding.
c Var 'aux1630' order represents '0' with '11665'
c Var 'aux1630' direct represents '0' with '11665'
c Var 'aux1630' order represents '1' with '11666'
-11665 11666 0
c Var 'aux1630' direct represents '1' with '11667'
11665 -11666 11667 0
-11667 11666 0
-11667 -11665 0
c Var 'aux1630' order represents '2' with '11668'
-11666 11668 0
c Var 'aux1630' direct represents '2' with '11669'
11666 -11668 11669 0
-11669 11668 0
-11669 -11666 0
c Var 'aux1630' order represents '3' with '11670'
-11668 11670 0
c Var 'aux1630' direct represents '3' with '11671'
11668 -11670 11671 0
-11671 11670 0
-11671 -11668 0
c Var 'aux1630' direct represents '4' with '-11670'
11665 11667 11669 11671 -11670 0
c Encoding variable: aux1631 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00002_00003=9)))
c Both direct and order encoding.
c Var 'aux1631' order represents '0' with '11672'
c Var 'aux1631' direct represents '0' with '11672'
c Var 'aux1631' order represents '1' with '11673'
-11672 11673 0
c Var 'aux1631' direct represents '1' with '11674'
11672 -11673 11674 0
-11674 11673 0
-11674 -11672 0
c Var 'aux1631' direct represents '2' with '-11673'
11672 11674 -11673 0
c Encoding variable: aux1632 with domain: int(0..2) (representing constraint ((x_00002_00002=9) + (x_00003_00002=9)))
c Both direct and order encoding.
c Var 'aux1632' order represents '0' with '11675'
c Var 'aux1632' direct represents '0' with '11675'
c Var 'aux1632' order represents '1' with '11676'
-11675 11676 0
c Var 'aux1632' direct represents '1' with '11677'
11675 -11676 11677 0
-11677 11676 0
-11677 -11675 0
c Var 'aux1632' direct represents '2' with '-11676'
11675 11677 -11676 0
c Encoding variable: aux1633 with domain: int(0..2) (representing constraint ((x_00002_00001=9) + (x_00001_00001=9)))
c Both direct and order encoding.
c Var 'aux1633' order represents '0' with '11678'
c Var 'aux1633' direct represents '0' with '11678'
c Var 'aux1633' order represents '1' with '11679'
-11678 11679 0
c Var 'aux1633' direct represents '1' with '11680'
11678 -11679 11680 0
-11680 11679 0
-11680 -11678 0
c Var 'aux1633' direct represents '2' with '-11679'
11678 11680 -11679 0
c Encoding variable: aux1634 with domain: int(0..2) (representing constraint ((x_00001_00003=9) + (x_00001_00002=9)))
c Both direct and order encoding.
c Var 'aux1634' order represents '0' with '11681'
c Var 'aux1634' direct represents '0' with '11681'
c Var 'aux1634' order represents '1' with '11682'
-11681 11682 0
c Var 'aux1634' direct represents '1' with '11683'
11681 -11682 11683 0
-11683 11682 0
-11683 -11681 0
c Var 'aux1634' direct represents '2' with '-11682'
11681 11683 -11682 0
c Encoding variable: aux1635 with domain: int(0..3) (representing constraint ((x_00003_00003=9) + aux1634))
c Both direct and order encoding.
c Var 'aux1635' order represents '0' with '11684'
c Var 'aux1635' direct represents '0' with '11684'
c Var 'aux1635' order represents '1' with '11685'
-11684 11685 0
c Var 'aux1635' direct represents '1' with '11686'
11684 -11685 11686 0
-11686 11685 0
-11686 -11684 0
c Var 'aux1635' order represents '2' with '11687'
-11685 11687 0
c Var 'aux1635' direct represents '2' with '11688'
11685 -11687 11688 0
-11688 11687 0
-11688 -11685 0
c Var 'aux1635' direct represents '3' with '-11687'
11684 11686 11688 -11687 0
c Encoding variable: aux1636 with domain: int(0..4) (representing constraint (aux1631 + aux1633))
c Both direct and order encoding.
c Var 'aux1636' order represents '0' with '11689'
c Var 'aux1636' direct represents '0' with '11689'
c Var 'aux1636' order represents '1' with '11690'
-11689 11690 0
c Var 'aux1636' direct represents '1' with '11691'
11689 -11690 11691 0
-11691 11690 0
-11691 -11689 0
c Var 'aux1636' order represents '2' with '11692'
-11690 11692 0
c Var 'aux1636' direct represents '2' with '11693'
11690 -11692 11693 0
-11693 11692 0
-11693 -11690 0
c Var 'aux1636' order represents '3' with '11694'
-11692 11694 0
c Var 'aux1636' direct represents '3' with '11695'
11692 -11694 11695 0
-11695 11694 0
-11695 -11692 0
c Var 'aux1636' direct represents '4' with '-11694'
11689 11691 11693 11695 -11694 0
c Encoding variable: aux1637 with domain: int(0..2) (representing constraint ((x_00003_00004=1) + (x_00002_00006=1)))
c Both direct and order encoding.
c Var 'aux1637' order represents '0' with '11696'
c Var 'aux1637' direct represents '0' with '11696'
c Var 'aux1637' order represents '1' with '11697'
-11696 11697 0
c Var 'aux1637' direct represents '1' with '11698'
11696 -11697 11698 0
-11698 11697 0
-11698 -11696 0
c Var 'aux1637' direct represents '2' with '-11697'
11696 11698 -11697 0
c Encoding variable: aux1638 with domain: int(0..2) (representing constraint ((x_00002_00005=1) + (x_00003_00005=1)))
c Both direct and order encoding.
c Var 'aux1638' order represents '0' with '11699'
c Var 'aux1638' direct represents '0' with '11699'
c Var 'aux1638' order represents '1' with '11700'
-11699 11700 0
c Var 'aux1638' direct represents '1' with '11701'
11699 -11700 11701 0
-11701 11700 0
-11701 -11699 0
c Var 'aux1638' direct represents '2' with '-11700'
11699 11701 -11700 0
c Encoding variable: aux1639 with domain: int(0..2) (representing constraint ((x_00002_00004=1) + (x_00001_00004=1)))
c Both direct and order encoding.
c Var 'aux1639' order represents '0' with '11702'
c Var 'aux1639' direct represents '0' with '11702'
c Var 'aux1639' order represents '1' with '11703'
-11702 11703 0
c Var 'aux1639' direct represents '1' with '11704'
11702 -11703 11704 0
-11704 11703 0
-11704 -11702 0
c Var 'aux1639' direct represents '2' with '-11703'
11702 11704 -11703 0
c Encoding variable: aux1640 with domain: int(0..2) (representing constraint ((x_00001_00006=1) + (x_00001_00005=1)))
c Both direct and order encoding.
c Var 'aux1640' order represents '0' with '11705'
c Var 'aux1640' direct represents '0' with '11705'
c Var 'aux1640' order represents '1' with '11706'
-11705 11706 0
c Var 'aux1640' direct represents '1' with '11707'
11705 -11706 11707 0
-11707 11706 0
-11707 -11705 0
c Var 'aux1640' direct represents '2' with '-11706'
11705 11707 -11706 0
c Encoding variable: aux1641 with domain: int(0..3) (representing constraint ((x_00003_00006=1) + aux1640))
c Both direct and order encoding.
c Var 'aux1641' order represents '0' with '11708'
c Var 'aux1641' direct represents '0' with '11708'
c Var 'aux1641' order represents '1' with '11709'
-11708 11709 0
c Var 'aux1641' direct represents '1' with '11710'
11708 -11709 11710 0
-11710 11709 0
-11710 -11708 0
c Var 'aux1641' order represents '2' with '11711'
-11709 11711 0
c Var 'aux1641' direct represents '2' with '11712'
11709 -11711 11712 0
-11712 11711 0
-11712 -11709 0
c Var 'aux1641' direct represents '3' with '-11711'
11708 11710 11712 -11711 0
c Encoding variable: aux1642 with domain: int(0..4) (representing constraint (aux1637 + aux1639))
c Both direct and order encoding.
c Var 'aux1642' order represents '0' with '11713'
c Var 'aux1642' direct represents '0' with '11713'
c Var 'aux1642' order represents '1' with '11714'
-11713 11714 0
c Var 'aux1642' direct represents '1' with '11715'
11713 -11714 11715 0
-11715 11714 0
-11715 -11713 0
c Var 'aux1642' order represents '2' with '11716'
-11714 11716 0
c Var 'aux1642' direct represents '2' with '11717'
11714 -11716 11717 0
-11717 11716 0
-11717 -11714 0
c Var 'aux1642' order represents '3' with '11718'
-11716 11718 0
c Var 'aux1642' direct represents '3' with '11719'
11716 -11718 11719 0
-11719 11718 0
-11719 -11716 0
c Var 'aux1642' direct represents '4' with '-11718'
11713 11715 11717 11719 -11718 0
c Encoding variable: aux1643 with domain: int(0..2) (representing constraint ((x_00003_00004=2) + (x_00002_00006=2)))
c Both direct and order encoding.
c Var 'aux1643' order represents '0' with '11720'
c Var 'aux1643' direct represents '0' with '11720'
c Var 'aux1643' order represents '1' with '11721'
-11720 11721 0
c Var 'aux1643' direct represents '1' with '11722'
11720 -11721 11722 0
-11722 11721 0
-11722 -11720 0
c Var 'aux1643' direct represents '2' with '-11721'
11720 11722 -11721 0
c Encoding variable: aux1644 with domain: int(0..2) (representing constraint ((x_00002_00005=2) + (x_00003_00005=2)))
c Both direct and order encoding.
c Var 'aux1644' order represents '0' with '11723'
c Var 'aux1644' direct represents '0' with '11723'
c Var 'aux1644' order represents '1' with '11724'
-11723 11724 0
c Var 'aux1644' direct represents '1' with '11725'
11723 -11724 11725 0
-11725 11724 0
-11725 -11723 0
c Var 'aux1644' direct represents '2' with '-11724'
11723 11725 -11724 0
c Encoding variable: aux1645 with domain: int(0..2) (representing constraint ((x_00002_00004=2) + (x_00001_00004=2)))
c Both direct and order encoding.
c Var 'aux1645' order represents '0' with '11726'
c Var 'aux1645' direct represents '0' with '11726'
c Var 'aux1645' order represents '1' with '11727'
-11726 11727 0
c Var 'aux1645' direct represents '1' with '11728'
11726 -11727 11728 0
-11728 11727 0
-11728 -11726 0
c Var 'aux1645' direct represents '2' with '-11727'
11726 11728 -11727 0
c Encoding variable: aux1646 with domain: int(0..2) (representing constraint ((x_00001_00006=2) + (x_00001_00005=2)))
c Both direct and order encoding.
c Var 'aux1646' order represents '0' with '11729'
c Var 'aux1646' direct represents '0' with '11729'
c Var 'aux1646' order represents '1' with '11730'
-11729 11730 0
c Var 'aux1646' direct represents '1' with '11731'
11729 -11730 11731 0
-11731 11730 0
-11731 -11729 0
c Var 'aux1646' direct represents '2' with '-11730'
11729 11731 -11730 0
c Encoding variable: aux1647 with domain: int(0..3) (representing constraint ((x_00003_00006=2) + aux1646))
c Both direct and order encoding.
c Var 'aux1647' order represents '0' with '11732'
c Var 'aux1647' direct represents '0' with '11732'
c Var 'aux1647' order represents '1' with '11733'
-11732 11733 0
c Var 'aux1647' direct represents '1' with '11734'
11732 -11733 11734 0
-11734 11733 0
-11734 -11732 0
c Var 'aux1647' order represents '2' with '11735'
-11733 11735 0
c Var 'aux1647' direct represents '2' with '11736'
11733 -11735 11736 0
-11736 11735 0
-11736 -11733 0
c Var 'aux1647' direct represents '3' with '-11735'
11732 11734 11736 -11735 0
c Encoding variable: aux1648 with domain: int(0..4) (representing constraint (aux1643 + aux1645))
c Both direct and order encoding.
c Var 'aux1648' order represents '0' with '11737'
c Var 'aux1648' direct represents '0' with '11737'
c Var 'aux1648' order represents '1' with '11738'
-11737 11738 0
c Var 'aux1648' direct represents '1' with '11739'
11737 -11738 11739 0
-11739 11738 0
-11739 -11737 0
c Var 'aux1648' order represents '2' with '11740'
-11738 11740 0
c Var 'aux1648' direct represents '2' with '11741'
11738 -11740 11741 0
-11741 11740 0
-11741 -11738 0
c Var 'aux1648' order represents '3' with '11742'
-11740 11742 0
c Var 'aux1648' direct represents '3' with '11743'
11740 -11742 11743 0
-11743 11742 0
-11743 -11740 0
c Var 'aux1648' direct represents '4' with '-11742'
11737 11739 11741 11743 -11742 0
c Encoding variable: aux1649 with domain: int(0..2) (representing constraint ((x_00003_00004=3) + (x_00002_00006=3)))
c Both direct and order encoding.
c Var 'aux1649' order represents '0' with '11744'
c Var 'aux1649' direct represents '0' with '11744'
c Var 'aux1649' order represents '1' with '11745'
-11744 11745 0
c Var 'aux1649' direct represents '1' with '11746'
11744 -11745 11746 0
-11746 11745 0
-11746 -11744 0
c Var 'aux1649' direct represents '2' with '-11745'
11744 11746 -11745 0
c Encoding variable: aux1650 with domain: int(0..2) (representing constraint ((x_00002_00005=3) + (x_00003_00005=3)))
c Both direct and order encoding.
c Var 'aux1650' order represents '0' with '11747'
c Var 'aux1650' direct represents '0' with '11747'
c Var 'aux1650' order represents '1' with '11748'
-11747 11748 0
c Var 'aux1650' direct represents '1' with '11749'
11747 -11748 11749 0
-11749 11748 0
-11749 -11747 0
c Var 'aux1650' direct represents '2' with '-11748'
11747 11749 -11748 0
c Encoding variable: aux1651 with domain: int(0..2) (representing constraint ((x_00002_00004=3) + (x_00001_00004=3)))
c Both direct and order encoding.
c Var 'aux1651' order represents '0' with '11750'
c Var 'aux1651' direct represents '0' with '11750'
c Var 'aux1651' order represents '1' with '11751'
-11750 11751 0
c Var 'aux1651' direct represents '1' with '11752'
11750 -11751 11752 0
-11752 11751 0
-11752 -11750 0
c Var 'aux1651' direct represents '2' with '-11751'
11750 11752 -11751 0
c Encoding variable: aux1652 with domain: int(0..2) (representing constraint ((x_00001_00006=3) + (x_00001_00005=3)))
c Both direct and order encoding.
c Var 'aux1652' order represents '0' with '11753'
c Var 'aux1652' direct represents '0' with '11753'
c Var 'aux1652' order represents '1' with '11754'
-11753 11754 0
c Var 'aux1652' direct represents '1' with '11755'
11753 -11754 11755 0
-11755 11754 0
-11755 -11753 0
c Var 'aux1652' direct represents '2' with '-11754'
11753 11755 -11754 0
c Encoding variable: aux1653 with domain: int(0..3) (representing constraint ((x_00003_00006=3) + aux1652))
c Both direct and order encoding.
c Var 'aux1653' order represents '0' with '11756'
c Var 'aux1653' direct represents '0' with '11756'
c Var 'aux1653' order represents '1' with '11757'
-11756 11757 0
c Var 'aux1653' direct represents '1' with '11758'
11756 -11757 11758 0
-11758 11757 0
-11758 -11756 0
c Var 'aux1653' order represents '2' with '11759'
-11757 11759 0
c Var 'aux1653' direct represents '2' with '11760'
11757 -11759 11760 0
-11760 11759 0
-11760 -11757 0
c Var 'aux1653' direct represents '3' with '-11759'
11756 11758 11760 -11759 0
c Encoding variable: aux1654 with domain: int(0..4) (representing constraint (aux1649 + aux1651))
c Both direct and order encoding.
c Var 'aux1654' order represents '0' with '11761'
c Var 'aux1654' direct represents '0' with '11761'
c Var 'aux1654' order represents '1' with '11762'
-11761 11762 0
c Var 'aux1654' direct represents '1' with '11763'
11761 -11762 11763 0
-11763 11762 0
-11763 -11761 0
c Var 'aux1654' order represents '2' with '11764'
-11762 11764 0
c Var 'aux1654' direct represents '2' with '11765'
11762 -11764 11765 0
-11765 11764 0
-11765 -11762 0
c Var 'aux1654' order represents '3' with '11766'
-11764 11766 0
c Var 'aux1654' direct represents '3' with '11767'
11764 -11766 11767 0
-11767 11766 0
-11767 -11764 0
c Var 'aux1654' direct represents '4' with '-11766'
11761 11763 11765 11767 -11766 0
c Encoding variable: aux1655 with domain: int(0..2) (representing constraint ((x_00003_00004=4) + (x_00002_00006=4)))
c Both direct and order encoding.
c Var 'aux1655' order represents '0' with '11768'
c Var 'aux1655' direct represents '0' with '11768'
c Var 'aux1655' order represents '1' with '11769'
-11768 11769 0
c Var 'aux1655' direct represents '1' with '11770'
11768 -11769 11770 0
-11770 11769 0
-11770 -11768 0
c Var 'aux1655' direct represents '2' with '-11769'
11768 11770 -11769 0
c Encoding variable: aux1656 with domain: int(0..2) (representing constraint ((x_00002_00005=4) + (x_00003_00005=4)))
c Both direct and order encoding.
c Var 'aux1656' order represents '0' with '11771'
c Var 'aux1656' direct represents '0' with '11771'
c Var 'aux1656' order represents '1' with '11772'
-11771 11772 0
c Var 'aux1656' direct represents '1' with '11773'
11771 -11772 11773 0
-11773 11772 0
-11773 -11771 0
c Var 'aux1656' direct represents '2' with '-11772'
11771 11773 -11772 0
c Encoding variable: aux1657 with domain: int(0..2) (representing constraint ((x_00002_00004=4) + (x_00001_00004=4)))
c Both direct and order encoding.
c Var 'aux1657' order represents '0' with '11774'
c Var 'aux1657' direct represents '0' with '11774'
c Var 'aux1657' order represents '1' with '11775'
-11774 11775 0
c Var 'aux1657' direct represents '1' with '11776'
11774 -11775 11776 0
-11776 11775 0
-11776 -11774 0
c Var 'aux1657' direct represents '2' with '-11775'
11774 11776 -11775 0
c Encoding variable: aux1658 with domain: int(0..2) (representing constraint ((x_00001_00006=4) + (x_00001_00005=4)))
c Both direct and order encoding.
c Var 'aux1658' order represents '0' with '11777'
c Var 'aux1658' direct represents '0' with '11777'
c Var 'aux1658' order represents '1' with '11778'
-11777 11778 0
c Var 'aux1658' direct represents '1' with '11779'
11777 -11778 11779 0
-11779 11778 0
-11779 -11777 0
c Var 'aux1658' direct represents '2' with '-11778'
11777 11779 -11778 0
c Encoding variable: aux1659 with domain: int(0..3) (representing constraint ((x_00003_00006=4) + aux1658))
c Both direct and order encoding.
c Var 'aux1659' order represents '0' with '11780'
c Var 'aux1659' direct represents '0' with '11780'
c Var 'aux1659' order represents '1' with '11781'
-11780 11781 0
c Var 'aux1659' direct represents '1' with '11782'
11780 -11781 11782 0
-11782 11781 0
-11782 -11780 0
c Var 'aux1659' order represents '2' with '11783'
-11781 11783 0
c Var 'aux1659' direct represents '2' with '11784'
11781 -11783 11784 0
-11784 11783 0
-11784 -11781 0
c Var 'aux1659' direct represents '3' with '-11783'
11780 11782 11784 -11783 0
c Encoding variable: aux1660 with domain: int(0..4) (representing constraint (aux1655 + aux1657))
c Both direct and order encoding.
c Var 'aux1660' order represents '0' with '11785'
c Var 'aux1660' direct represents '0' with '11785'
c Var 'aux1660' order represents '1' with '11786'
-11785 11786 0
c Var 'aux1660' direct represents '1' with '11787'
11785 -11786 11787 0
-11787 11786 0
-11787 -11785 0
c Var 'aux1660' order represents '2' with '11788'
-11786 11788 0
c Var 'aux1660' direct represents '2' with '11789'
11786 -11788 11789 0
-11789 11788 0
-11789 -11786 0
c Var 'aux1660' order represents '3' with '11790'
-11788 11790 0
c Var 'aux1660' direct represents '3' with '11791'
11788 -11790 11791 0
-11791 11790 0
-11791 -11788 0
c Var 'aux1660' direct represents '4' with '-11790'
11785 11787 11789 11791 -11790 0
c Encoding variable: aux1661 with domain: int(0..2) (representing constraint ((x_00003_00004=5) + (x_00002_00006=5)))
c Both direct and order encoding.
c Var 'aux1661' order represents '0' with '11792'
c Var 'aux1661' direct represents '0' with '11792'
c Var 'aux1661' order represents '1' with '11793'
-11792 11793 0
c Var 'aux1661' direct represents '1' with '11794'
11792 -11793 11794 0
-11794 11793 0
-11794 -11792 0
c Var 'aux1661' direct represents '2' with '-11793'
11792 11794 -11793 0
c Encoding variable: aux1662 with domain: int(0..2) (representing constraint ((x_00002_00005=5) + (x_00003_00005=5)))
c Both direct and order encoding.
c Var 'aux1662' order represents '0' with '11795'
c Var 'aux1662' direct represents '0' with '11795'
c Var 'aux1662' order represents '1' with '11796'
-11795 11796 0
c Var 'aux1662' direct represents '1' with '11797'
11795 -11796 11797 0
-11797 11796 0
-11797 -11795 0
c Var 'aux1662' direct represents '2' with '-11796'
11795 11797 -11796 0
c Encoding variable: aux1663 with domain: int(0..2) (representing constraint ((x_00002_00004=5) + (x_00001_00004=5)))
c Both direct and order encoding.
c Var 'aux1663' order represents '0' with '11798'
c Var 'aux1663' direct represents '0' with '11798'
c Var 'aux1663' order represents '1' with '11799'
-11798 11799 0
c Var 'aux1663' direct represents '1' with '11800'
11798 -11799 11800 0
-11800 11799 0
-11800 -11798 0
c Var 'aux1663' direct represents '2' with '-11799'
11798 11800 -11799 0
c Encoding variable: aux1664 with domain: int(0..2) (representing constraint ((x_00001_00006=5) + (x_00001_00005=5)))
c Both direct and order encoding.
c Var 'aux1664' order represents '0' with '11801'
c Var 'aux1664' direct represents '0' with '11801'
c Var 'aux1664' order represents '1' with '11802'
-11801 11802 0
c Var 'aux1664' direct represents '1' with '11803'
11801 -11802 11803 0
-11803 11802 0
-11803 -11801 0
c Var 'aux1664' direct represents '2' with '-11802'
11801 11803 -11802 0
c Encoding variable: aux1665 with domain: int(0..3) (representing constraint ((x_00003_00006=5) + aux1664))
c Both direct and order encoding.
c Var 'aux1665' order represents '0' with '11804'
c Var 'aux1665' direct represents '0' with '11804'
c Var 'aux1665' order represents '1' with '11805'
-11804 11805 0
c Var 'aux1665' direct represents '1' with '11806'
11804 -11805 11806 0
-11806 11805 0
-11806 -11804 0
c Var 'aux1665' order represents '2' with '11807'
-11805 11807 0
c Var 'aux1665' direct represents '2' with '11808'
11805 -11807 11808 0
-11808 11807 0
-11808 -11805 0
c Var 'aux1665' direct represents '3' with '-11807'
11804 11806 11808 -11807 0
c Encoding variable: aux1666 with domain: int(0..4) (representing constraint (aux1661 + aux1663))
c Both direct and order encoding.
c Var 'aux1666' order represents '0' with '11809'
c Var 'aux1666' direct represents '0' with '11809'
c Var 'aux1666' order represents '1' with '11810'
-11809 11810 0
c Var 'aux1666' direct represents '1' with '11811'
11809 -11810 11811 0
-11811 11810 0
-11811 -11809 0
c Var 'aux1666' order represents '2' with '11812'
-11810 11812 0
c Var 'aux1666' direct represents '2' with '11813'
11810 -11812 11813 0
-11813 11812 0
-11813 -11810 0
c Var 'aux1666' order represents '3' with '11814'
-11812 11814 0
c Var 'aux1666' direct represents '3' with '11815'
11812 -11814 11815 0
-11815 11814 0
-11815 -11812 0
c Var 'aux1666' direct represents '4' with '-11814'
11809 11811 11813 11815 -11814 0
c Encoding variable: aux1667 with domain: int(0..2) (representing constraint ((x_00003_00004=6) + (x_00002_00006=6)))
c Both direct and order encoding.
c Var 'aux1667' order represents '0' with '11816'
c Var 'aux1667' direct represents '0' with '11816'
c Var 'aux1667' order represents '1' with '11817'
-11816 11817 0
c Var 'aux1667' direct represents '1' with '11818'
11816 -11817 11818 0
-11818 11817 0
-11818 -11816 0
c Var 'aux1667' direct represents '2' with '-11817'
11816 11818 -11817 0
c Encoding variable: aux1668 with domain: int(0..2) (representing constraint ((x_00002_00005=6) + (x_00003_00005=6)))
c Both direct and order encoding.
c Var 'aux1668' order represents '0' with '11819'
c Var 'aux1668' direct represents '0' with '11819'
c Var 'aux1668' order represents '1' with '11820'
-11819 11820 0
c Var 'aux1668' direct represents '1' with '11821'
11819 -11820 11821 0
-11821 11820 0
-11821 -11819 0
c Var 'aux1668' direct represents '2' with '-11820'
11819 11821 -11820 0
c Encoding variable: aux1669 with domain: int(0..2) (representing constraint ((x_00002_00004=6) + (x_00001_00004=6)))
c Both direct and order encoding.
c Var 'aux1669' order represents '0' with '11822'
c Var 'aux1669' direct represents '0' with '11822'
c Var 'aux1669' order represents '1' with '11823'
-11822 11823 0
c Var 'aux1669' direct represents '1' with '11824'
11822 -11823 11824 0
-11824 11823 0
-11824 -11822 0
c Var 'aux1669' direct represents '2' with '-11823'
11822 11824 -11823 0
c Encoding variable: aux1670 with domain: int(0..2) (representing constraint ((x_00001_00006=6) + (x_00001_00005=6)))
c Both direct and order encoding.
c Var 'aux1670' order represents '0' with '11825'
c Var 'aux1670' direct represents '0' with '11825'
c Var 'aux1670' order represents '1' with '11826'
-11825 11826 0
c Var 'aux1670' direct represents '1' with '11827'
11825 -11826 11827 0
-11827 11826 0
-11827 -11825 0
c Var 'aux1670' direct represents '2' with '-11826'
11825 11827 -11826 0
c Encoding variable: aux1671 with domain: int(0..3) (representing constraint ((x_00003_00006=6) + aux1670))
c Both direct and order encoding.
c Var 'aux1671' order represents '0' with '11828'
c Var 'aux1671' direct represents '0' with '11828'
c Var 'aux1671' order represents '1' with '11829'
-11828 11829 0
c Var 'aux1671' direct represents '1' with '11830'
11828 -11829 11830 0
-11830 11829 0
-11830 -11828 0
c Var 'aux1671' order represents '2' with '11831'
-11829 11831 0
c Var 'aux1671' direct represents '2' with '11832'
11829 -11831 11832 0
-11832 11831 0
-11832 -11829 0
c Var 'aux1671' direct represents '3' with '-11831'
11828 11830 11832 -11831 0
c Encoding variable: aux1672 with domain: int(0..4) (representing constraint (aux1667 + aux1669))
c Both direct and order encoding.
c Var 'aux1672' order represents '0' with '11833'
c Var 'aux1672' direct represents '0' with '11833'
c Var 'aux1672' order represents '1' with '11834'
-11833 11834 0
c Var 'aux1672' direct represents '1' with '11835'
11833 -11834 11835 0
-11835 11834 0
-11835 -11833 0
c Var 'aux1672' order represents '2' with '11836'
-11834 11836 0
c Var 'aux1672' direct represents '2' with '11837'
11834 -11836 11837 0
-11837 11836 0
-11837 -11834 0
c Var 'aux1672' order represents '3' with '11838'
-11836 11838 0
c Var 'aux1672' direct represents '3' with '11839'
11836 -11838 11839 0
-11839 11838 0
-11839 -11836 0
c Var 'aux1672' direct represents '4' with '-11838'
11833 11835 11837 11839 -11838 0
c Encoding variable: aux1673 with domain: int(0..2) (representing constraint ((x_00003_00004=7) + (x_00002_00006=7)))
c Both direct and order encoding.
c Var 'aux1673' order represents '0' with '11840'
c Var 'aux1673' direct represents '0' with '11840'
c Var 'aux1673' order represents '1' with '11841'
-11840 11841 0
c Var 'aux1673' direct represents '1' with '11842'
11840 -11841 11842 0
-11842 11841 0
-11842 -11840 0
c Var 'aux1673' direct represents '2' with '-11841'
11840 11842 -11841 0
c Encoding variable: aux1674 with domain: int(0..2) (representing constraint ((x_00002_00005=7) + (x_00003_00005=7)))
c Both direct and order encoding.
c Var 'aux1674' order represents '0' with '11843'
c Var 'aux1674' direct represents '0' with '11843'
c Var 'aux1674' order represents '1' with '11844'
-11843 11844 0
c Var 'aux1674' direct represents '1' with '11845'
11843 -11844 11845 0
-11845 11844 0
-11845 -11843 0
c Var 'aux1674' direct represents '2' with '-11844'
11843 11845 -11844 0
c Encoding variable: aux1675 with domain: int(0..2) (representing constraint ((x_00002_00004=7) + (x_00001_00004=7)))
c Both direct and order encoding.
c Var 'aux1675' order represents '0' with '11846'
c Var 'aux1675' direct represents '0' with '11846'
c Var 'aux1675' order represents '1' with '11847'
-11846 11847 0
c Var 'aux1675' direct represents '1' with '11848'
11846 -11847 11848 0
-11848 11847 0
-11848 -11846 0
c Var 'aux1675' direct represents '2' with '-11847'
11846 11848 -11847 0
c Encoding variable: aux1676 with domain: int(0..2) (representing constraint ((x_00001_00006=7) + (x_00001_00005=7)))
c Both direct and order encoding.
c Var 'aux1676' order represents '0' with '11849'
c Var 'aux1676' direct represents '0' with '11849'
c Var 'aux1676' order represents '1' with '11850'
-11849 11850 0
c Var 'aux1676' direct represents '1' with '11851'
11849 -11850 11851 0
-11851 11850 0
-11851 -11849 0
c Var 'aux1676' direct represents '2' with '-11850'
11849 11851 -11850 0
c Encoding variable: aux1677 with domain: int(0..3) (representing constraint ((x_00003_00006=7) + aux1676))
c Both direct and order encoding.
c Var 'aux1677' order represents '0' with '11852'
c Var 'aux1677' direct represents '0' with '11852'
c Var 'aux1677' order represents '1' with '11853'
-11852 11853 0
c Var 'aux1677' direct represents '1' with '11854'
11852 -11853 11854 0
-11854 11853 0
-11854 -11852 0
c Var 'aux1677' order represents '2' with '11855'
-11853 11855 0
c Var 'aux1677' direct represents '2' with '11856'
11853 -11855 11856 0
-11856 11855 0
-11856 -11853 0
c Var 'aux1677' direct represents '3' with '-11855'
11852 11854 11856 -11855 0
c Encoding variable: aux1678 with domain: int(0..4) (representing constraint (aux1673 + aux1675))
c Both direct and order encoding.
c Var 'aux1678' order represents '0' with '11857'
c Var 'aux1678' direct represents '0' with '11857'
c Var 'aux1678' order represents '1' with '11858'
-11857 11858 0
c Var 'aux1678' direct represents '1' with '11859'
11857 -11858 11859 0
-11859 11858 0
-11859 -11857 0
c Var 'aux1678' order represents '2' with '11860'
-11858 11860 0
c Var 'aux1678' direct represents '2' with '11861'
11858 -11860 11861 0
-11861 11860 0
-11861 -11858 0
c Var 'aux1678' order represents '3' with '11862'
-11860 11862 0
c Var 'aux1678' direct represents '3' with '11863'
11860 -11862 11863 0
-11863 11862 0
-11863 -11860 0
c Var 'aux1678' direct represents '4' with '-11862'
11857 11859 11861 11863 -11862 0
c Encoding variable: aux1679 with domain: int(0..2) (representing constraint ((x_00003_00004=8) + (x_00002_00006=8)))
c Both direct and order encoding.
c Var 'aux1679' order represents '0' with '11864'
c Var 'aux1679' direct represents '0' with '11864'
c Var 'aux1679' order represents '1' with '11865'
-11864 11865 0
c Var 'aux1679' direct represents '1' with '11866'
11864 -11865 11866 0
-11866 11865 0
-11866 -11864 0
c Var 'aux1679' direct represents '2' with '-11865'
11864 11866 -11865 0
c Encoding variable: aux1680 with domain: int(0..2) (representing constraint ((x_00002_00005=8) + (x_00003_00005=8)))
c Both direct and order encoding.
c Var 'aux1680' order represents '0' with '11867'
c Var 'aux1680' direct represents '0' with '11867'
c Var 'aux1680' order represents '1' with '11868'
-11867 11868 0
c Var 'aux1680' direct represents '1' with '11869'
11867 -11868 11869 0
-11869 11868 0
-11869 -11867 0
c Var 'aux1680' direct represents '2' with '-11868'
11867 11869 -11868 0
c Encoding variable: aux1681 with domain: int(0..2) (representing constraint ((x_00002_00004=8) + (x_00001_00004=8)))
c Both direct and order encoding.
c Var 'aux1681' order represents '0' with '11870'
c Var 'aux1681' direct represents '0' with '11870'
c Var 'aux1681' order represents '1' with '11871'
-11870 11871 0
c Var 'aux1681' direct represents '1' with '11872'
11870 -11871 11872 0
-11872 11871 0
-11872 -11870 0
c Var 'aux1681' direct represents '2' with '-11871'
11870 11872 -11871 0
c Encoding variable: aux1682 with domain: int(0..2) (representing constraint ((x_00001_00006=8) + (x_00001_00005=8)))
c Both direct and order encoding.
c Var 'aux1682' order represents '0' with '11873'
c Var 'aux1682' direct represents '0' with '11873'
c Var 'aux1682' order represents '1' with '11874'
-11873 11874 0
c Var 'aux1682' direct represents '1' with '11875'
11873 -11874 11875 0
-11875 11874 0
-11875 -11873 0
c Var 'aux1682' direct represents '2' with '-11874'
11873 11875 -11874 0
c Encoding variable: aux1683 with domain: int(0..3) (representing constraint ((x_00003_00006=8) + aux1682))
c Both direct and order encoding.
c Var 'aux1683' order represents '0' with '11876'
c Var 'aux1683' direct represents '0' with '11876'
c Var 'aux1683' order represents '1' with '11877'
-11876 11877 0
c Var 'aux1683' direct represents '1' with '11878'
11876 -11877 11878 0
-11878 11877 0
-11878 -11876 0
c Var 'aux1683' order represents '2' with '11879'
-11877 11879 0
c Var 'aux1683' direct represents '2' with '11880'
11877 -11879 11880 0
-11880 11879 0
-11880 -11877 0
c Var 'aux1683' direct represents '3' with '-11879'
11876 11878 11880 -11879 0
c Encoding variable: aux1684 with domain: int(0..4) (representing constraint (aux1679 + aux1681))
c Both direct and order encoding.
c Var 'aux1684' order represents '0' with '11881'
c Var 'aux1684' direct represents '0' with '11881'
c Var 'aux1684' order represents '1' with '11882'
-11881 11882 0
c Var 'aux1684' direct represents '1' with '11883'
11881 -11882 11883 0
-11883 11882 0
-11883 -11881 0
c Var 'aux1684' order represents '2' with '11884'
-11882 11884 0
c Var 'aux1684' direct represents '2' with '11885'
11882 -11884 11885 0
-11885 11884 0
-11885 -11882 0
c Var 'aux1684' order represents '3' with '11886'
-11884 11886 0
c Var 'aux1684' direct represents '3' with '11887'
11884 -11886 11887 0
-11887 11886 0
-11887 -11884 0
c Var 'aux1684' direct represents '4' with '-11886'
11881 11883 11885 11887 -11886 0
c Encoding variable: aux1685 with domain: int(0..2) (representing constraint ((x_00003_00004=9) + (x_00002_00006=9)))
c Both direct and order encoding.
c Var 'aux1685' order represents '0' with '11888'
c Var 'aux1685' direct represents '0' with '11888'
c Var 'aux1685' order represents '1' with '11889'
-11888 11889 0
c Var 'aux1685' direct represents '1' with '11890'
11888 -11889 11890 0
-11890 11889 0
-11890 -11888 0
c Var 'aux1685' direct represents '2' with '-11889'
11888 11890 -11889 0
c Encoding variable: aux1686 with domain: int(0..2) (representing constraint ((x_00002_00005=9) + (x_00003_00005=9)))
c Both direct and order encoding.
c Var 'aux1686' order represents '0' with '11891'
c Var 'aux1686' direct represents '0' with '11891'
c Var 'aux1686' order represents '1' with '11892'
-11891 11892 0
c Var 'aux1686' direct represents '1' with '11893'
11891 -11892 11893 0
-11893 11892 0
-11893 -11891 0
c Var 'aux1686' direct represents '2' with '-11892'
11891 11893 -11892 0
c Encoding variable: aux1687 with domain: int(0..2) (representing constraint ((x_00002_00004=9) + (x_00001_00004=9)))
c Both direct and order encoding.
c Var 'aux1687' order represents '0' with '11894'
c Var 'aux1687' direct represents '0' with '11894'
c Var 'aux1687' order represents '1' with '11895'
-11894 11895 0
c Var 'aux1687' direct represents '1' with '11896'
11894 -11895 11896 0
-11896 11895 0
-11896 -11894 0
c Var 'aux1687' direct represents '2' with '-11895'
11894 11896 -11895 0
c Encoding variable: aux1688 with domain: int(0..2) (representing constraint ((x_00001_00006=9) + (x_00001_00005=9)))
c Both direct and order encoding.
c Var 'aux1688' order represents '0' with '11897'
c Var 'aux1688' direct represents '0' with '11897'
c Var 'aux1688' order represents '1' with '11898'
-11897 11898 0
c Var 'aux1688' direct represents '1' with '11899'
11897 -11898 11899 0
-11899 11898 0
-11899 -11897 0
c Var 'aux1688' direct represents '2' with '-11898'
11897 11899 -11898 0
c Encoding variable: aux1689 with domain: int(0..3) (representing constraint ((x_00003_00006=9) + aux1688))
c Both direct and order encoding.
c Var 'aux1689' order represents '0' with '11900'
c Var 'aux1689' direct represents '0' with '11900'
c Var 'aux1689' order represents '1' with '11901'
-11900 11901 0
c Var 'aux1689' direct represents '1' with '11902'
11900 -11901 11902 0
-11902 11901 0
-11902 -11900 0
c Var 'aux1689' order represents '2' with '11903'
-11901 11903 0
c Var 'aux1689' direct represents '2' with '11904'
11901 -11903 11904 0
-11904 11903 0
-11904 -11901 0
c Var 'aux1689' direct represents '3' with '-11903'
11900 11902 11904 -11903 0
c Encoding variable: aux1690 with domain: int(0..4) (representing constraint (aux1685 + aux1687))
c Both direct and order encoding.
c Var 'aux1690' order represents '0' with '11905'
c Var 'aux1690' direct represents '0' with '11905'
c Var 'aux1690' order represents '1' with '11906'
-11905 11906 0
c Var 'aux1690' direct represents '1' with '11907'
11905 -11906 11907 0
-11907 11906 0
-11907 -11905 0
c Var 'aux1690' order represents '2' with '11908'
-11906 11908 0
c Var 'aux1690' direct represents '2' with '11909'
11906 -11908 11909 0
-11909 11908 0
-11909 -11906 0
c Var 'aux1690' order represents '3' with '11910'
-11908 11910 0
c Var 'aux1690' direct represents '3' with '11911'
11908 -11910 11911 0
-11911 11910 0
-11911 -11908 0
c Var 'aux1690' direct represents '4' with '-11910'
11905 11907 11909 11911 -11910 0
c Encoding variable: aux1691 with domain: int(0..2) (representing constraint ((x_00003_00007=1) + (x_00002_00009=1)))
c Both direct and order encoding.
c Var 'aux1691' order represents '0' with '11912'
c Var 'aux1691' direct represents '0' with '11912'
c Var 'aux1691' order represents '1' with '11913'
-11912 11913 0
c Var 'aux1691' direct represents '1' with '11914'
11912 -11913 11914 0
-11914 11913 0
-11914 -11912 0
c Var 'aux1691' direct represents '2' with '-11913'
11912 11914 -11913 0
c Encoding variable: aux1692 with domain: int(0..2) (representing constraint ((x_00002_00008=1) + (x_00003_00008=1)))
c Both direct and order encoding.
c Var 'aux1692' order represents '0' with '11915'
c Var 'aux1692' direct represents '0' with '11915'
c Var 'aux1692' order represents '1' with '11916'
-11915 11916 0
c Var 'aux1692' direct represents '1' with '11917'
11915 -11916 11917 0
-11917 11916 0
-11917 -11915 0
c Var 'aux1692' direct represents '2' with '-11916'
11915 11917 -11916 0
c Encoding variable: aux1693 with domain: int(0..2) (representing constraint ((x_00002_00007=1) + (x_00001_00007=1)))
c Both direct and order encoding.
c Var 'aux1693' order represents '0' with '11918'
c Var 'aux1693' direct represents '0' with '11918'
c Var 'aux1693' order represents '1' with '11919'
-11918 11919 0
c Var 'aux1693' direct represents '1' with '11920'
11918 -11919 11920 0
-11920 11919 0
-11920 -11918 0
c Var 'aux1693' direct represents '2' with '-11919'
11918 11920 -11919 0
c Encoding variable: aux1694 with domain: int(0..2) (representing constraint ((x_00001_00009=1) + (x_00001_00008=1)))
c Both direct and order encoding.
c Var 'aux1694' order represents '0' with '11921'
c Var 'aux1694' direct represents '0' with '11921'
c Var 'aux1694' order represents '1' with '11922'
-11921 11922 0
c Var 'aux1694' direct represents '1' with '11923'
11921 -11922 11923 0
-11923 11922 0
-11923 -11921 0
c Var 'aux1694' direct represents '2' with '-11922'
11921 11923 -11922 0
c Encoding variable: aux1695 with domain: int(0..3) (representing constraint ((x_00003_00009=1) + aux1694))
c Both direct and order encoding.
c Var 'aux1695' order represents '0' with '11924'
c Var 'aux1695' direct represents '0' with '11924'
c Var 'aux1695' order represents '1' with '11925'
-11924 11925 0
c Var 'aux1695' direct represents '1' with '11926'
11924 -11925 11926 0
-11926 11925 0
-11926 -11924 0
c Var 'aux1695' order represents '2' with '11927'
-11925 11927 0
c Var 'aux1695' direct represents '2' with '11928'
11925 -11927 11928 0
-11928 11927 0
-11928 -11925 0
c Var 'aux1695' direct represents '3' with '-11927'
11924 11926 11928 -11927 0
c Encoding variable: aux1696 with domain: int(0..4) (representing constraint (aux1691 + aux1693))
c Both direct and order encoding.
c Var 'aux1696' order represents '0' with '11929'
c Var 'aux1696' direct represents '0' with '11929'
c Var 'aux1696' order represents '1' with '11930'
-11929 11930 0
c Var 'aux1696' direct represents '1' with '11931'
11929 -11930 11931 0
-11931 11930 0
-11931 -11929 0
c Var 'aux1696' order represents '2' with '11932'
-11930 11932 0
c Var 'aux1696' direct represents '2' with '11933'
11930 -11932 11933 0
-11933 11932 0
-11933 -11930 0
c Var 'aux1696' order represents '3' with '11934'
-11932 11934 0
c Var 'aux1696' direct represents '3' with '11935'
11932 -11934 11935 0
-11935 11934 0
-11935 -11932 0
c Var 'aux1696' direct represents '4' with '-11934'
11929 11931 11933 11935 -11934 0
c Encoding variable: aux1697 with domain: int(0..2) (representing constraint ((x_00003_00007=2) + (x_00002_00009=2)))
c Both direct and order encoding.
c Var 'aux1697' order represents '0' with '11936'
c Var 'aux1697' direct represents '0' with '11936'
c Var 'aux1697' order represents '1' with '11937'
-11936 11937 0
c Var 'aux1697' direct represents '1' with '11938'
11936 -11937 11938 0
-11938 11937 0
-11938 -11936 0
c Var 'aux1697' direct represents '2' with '-11937'
11936 11938 -11937 0
c Encoding variable: aux1698 with domain: int(0..2) (representing constraint ((x_00002_00008=2) + (x_00003_00008=2)))
c Both direct and order encoding.
c Var 'aux1698' order represents '0' with '11939'
c Var 'aux1698' direct represents '0' with '11939'
c Var 'aux1698' order represents '1' with '11940'
-11939 11940 0
c Var 'aux1698' direct represents '1' with '11941'
11939 -11940 11941 0
-11941 11940 0
-11941 -11939 0
c Var 'aux1698' direct represents '2' with '-11940'
11939 11941 -11940 0
c Encoding variable: aux1699 with domain: int(0..2) (representing constraint ((x_00002_00007=2) + (x_00001_00007=2)))
c Both direct and order encoding.
c Var 'aux1699' order represents '0' with '11942'
c Var 'aux1699' direct represents '0' with '11942'
c Var 'aux1699' order represents '1' with '11943'
-11942 11943 0
c Var 'aux1699' direct represents '1' with '11944'
11942 -11943 11944 0
-11944 11943 0
-11944 -11942 0
c Var 'aux1699' direct represents '2' with '-11943'
11942 11944 -11943 0
c Encoding variable: aux1700 with domain: int(0..2) (representing constraint ((x_00001_00009=2) + (x_00001_00008=2)))
c Both direct and order encoding.
c Var 'aux1700' order represents '0' with '11945'
c Var 'aux1700' direct represents '0' with '11945'
c Var 'aux1700' order represents '1' with '11946'
-11945 11946 0
c Var 'aux1700' direct represents '1' with '11947'
11945 -11946 11947 0
-11947 11946 0
-11947 -11945 0
c Var 'aux1700' direct represents '2' with '-11946'
11945 11947 -11946 0
c Encoding variable: aux1701 with domain: int(0..3) (representing constraint ((x_00003_00009=2) + aux1700))
c Both direct and order encoding.
c Var 'aux1701' order represents '0' with '11948'
c Var 'aux1701' direct represents '0' with '11948'
c Var 'aux1701' order represents '1' with '11949'
-11948 11949 0
c Var 'aux1701' direct represents '1' with '11950'
11948 -11949 11950 0
-11950 11949 0
-11950 -11948 0
c Var 'aux1701' order represents '2' with '11951'
-11949 11951 0
c Var 'aux1701' direct represents '2' with '11952'
11949 -11951 11952 0
-11952 11951 0
-11952 -11949 0
c Var 'aux1701' direct represents '3' with '-11951'
11948 11950 11952 -11951 0
c Encoding variable: aux1702 with domain: int(0..4) (representing constraint (aux1697 + aux1699))
c Both direct and order encoding.
c Var 'aux1702' order represents '0' with '11953'
c Var 'aux1702' direct represents '0' with '11953'
c Var 'aux1702' order represents '1' with '11954'
-11953 11954 0
c Var 'aux1702' direct represents '1' with '11955'
11953 -11954 11955 0
-11955 11954 0
-11955 -11953 0
c Var 'aux1702' order represents '2' with '11956'
-11954 11956 0
c Var 'aux1702' direct represents '2' with '11957'
11954 -11956 11957 0
-11957 11956 0
-11957 -11954 0
c Var 'aux1702' order represents '3' with '11958'
-11956 11958 0
c Var 'aux1702' direct represents '3' with '11959'
11956 -11958 11959 0
-11959 11958 0
-11959 -11956 0
c Var 'aux1702' direct represents '4' with '-11958'
11953 11955 11957 11959 -11958 0
c Encoding variable: aux1703 with domain: int(0..2) (representing constraint ((x_00003_00007=3) + (x_00002_00009=3)))
c Both direct and order encoding.
c Var 'aux1703' order represents '0' with '11960'
c Var 'aux1703' direct represents '0' with '11960'
c Var 'aux1703' order represents '1' with '11961'
-11960 11961 0
c Var 'aux1703' direct represents '1' with '11962'
11960 -11961 11962 0
-11962 11961 0
-11962 -11960 0
c Var 'aux1703' direct represents '2' with '-11961'
11960 11962 -11961 0
c Encoding variable: aux1704 with domain: int(0..2) (representing constraint ((x_00002_00008=3) + (x_00003_00008=3)))
c Both direct and order encoding.
c Var 'aux1704' order represents '0' with '11963'
c Var 'aux1704' direct represents '0' with '11963'
c Var 'aux1704' order represents '1' with '11964'
-11963 11964 0
c Var 'aux1704' direct represents '1' with '11965'
11963 -11964 11965 0
-11965 11964 0
-11965 -11963 0
c Var 'aux1704' direct represents '2' with '-11964'
11963 11965 -11964 0
c Encoding variable: aux1705 with domain: int(0..2) (representing constraint ((x_00002_00007=3) + (x_00001_00007=3)))
c Both direct and order encoding.
c Var 'aux1705' order represents '0' with '11966'
c Var 'aux1705' direct represents '0' with '11966'
c Var 'aux1705' order represents '1' with '11967'
-11966 11967 0
c Var 'aux1705' direct represents '1' with '11968'
11966 -11967 11968 0
-11968 11967 0
-11968 -11966 0
c Var 'aux1705' direct represents '2' with '-11967'
11966 11968 -11967 0
c Encoding variable: aux1706 with domain: int(0..2) (representing constraint ((x_00001_00009=3) + (x_00001_00008=3)))
c Both direct and order encoding.
c Var 'aux1706' order represents '0' with '11969'
c Var 'aux1706' direct represents '0' with '11969'
c Var 'aux1706' order represents '1' with '11970'
-11969 11970 0
c Var 'aux1706' direct represents '1' with '11971'
11969 -11970 11971 0
-11971 11970 0
-11971 -11969 0
c Var 'aux1706' direct represents '2' with '-11970'
11969 11971 -11970 0
c Encoding variable: aux1707 with domain: int(0..3) (representing constraint ((x_00003_00009=3) + aux1706))
c Both direct and order encoding.
c Var 'aux1707' order represents '0' with '11972'
c Var 'aux1707' direct represents '0' with '11972'
c Var 'aux1707' order represents '1' with '11973'
-11972 11973 0
c Var 'aux1707' direct represents '1' with '11974'
11972 -11973 11974 0
-11974 11973 0
-11974 -11972 0
c Var 'aux1707' order represents '2' with '11975'
-11973 11975 0
c Var 'aux1707' direct represents '2' with '11976'
11973 -11975 11976 0
-11976 11975 0
-11976 -11973 0
c Var 'aux1707' direct represents '3' with '-11975'
11972 11974 11976 -11975 0
c Encoding variable: aux1708 with domain: int(0..4) (representing constraint (aux1703 + aux1705))
c Both direct and order encoding.
c Var 'aux1708' order represents '0' with '11977'
c Var 'aux1708' direct represents '0' with '11977'
c Var 'aux1708' order represents '1' with '11978'
-11977 11978 0
c Var 'aux1708' direct represents '1' with '11979'
11977 -11978 11979 0
-11979 11978 0
-11979 -11977 0
c Var 'aux1708' order represents '2' with '11980'
-11978 11980 0
c Var 'aux1708' direct represents '2' with '11981'
11978 -11980 11981 0
-11981 11980 0
-11981 -11978 0
c Var 'aux1708' order represents '3' with '11982'
-11980 11982 0
c Var 'aux1708' direct represents '3' with '11983'
11980 -11982 11983 0
-11983 11982 0
-11983 -11980 0
c Var 'aux1708' direct represents '4' with '-11982'
11977 11979 11981 11983 -11982 0
c Encoding variable: aux1709 with domain: int(0..2) (representing constraint ((x_00003_00007=4) + (x_00002_00009=4)))
c Both direct and order encoding.
c Var 'aux1709' order represents '0' with '11984'
c Var 'aux1709' direct represents '0' with '11984'
c Var 'aux1709' order represents '1' with '11985'
-11984 11985 0
c Var 'aux1709' direct represents '1' with '11986'
11984 -11985 11986 0
-11986 11985 0
-11986 -11984 0
c Var 'aux1709' direct represents '2' with '-11985'
11984 11986 -11985 0
c Encoding variable: aux1710 with domain: int(0..2) (representing constraint ((x_00002_00008=4) + (x_00003_00008=4)))
c Both direct and order encoding.
c Var 'aux1710' order represents '0' with '11987'
c Var 'aux1710' direct represents '0' with '11987'
c Var 'aux1710' order represents '1' with '11988'
-11987 11988 0
c Var 'aux1710' direct represents '1' with '11989'
11987 -11988 11989 0
-11989 11988 0
-11989 -11987 0
c Var 'aux1710' direct represents '2' with '-11988'
11987 11989 -11988 0
c Encoding variable: aux1711 with domain: int(0..2) (representing constraint ((x_00002_00007=4) + (x_00001_00007=4)))
c Both direct and order encoding.
c Var 'aux1711' order represents '0' with '11990'
c Var 'aux1711' direct represents '0' with '11990'
c Var 'aux1711' order represents '1' with '11991'
-11990 11991 0
c Var 'aux1711' direct represents '1' with '11992'
11990 -11991 11992 0
-11992 11991 0
-11992 -11990 0
c Var 'aux1711' direct represents '2' with '-11991'
11990 11992 -11991 0
c Encoding variable: aux1712 with domain: int(0..2) (representing constraint ((x_00001_00009=4) + (x_00001_00008=4)))
c Both direct and order encoding.
c Var 'aux1712' order represents '0' with '11993'
c Var 'aux1712' direct represents '0' with '11993'
c Var 'aux1712' order represents '1' with '11994'
-11993 11994 0
c Var 'aux1712' direct represents '1' with '11995'
11993 -11994 11995 0
-11995 11994 0
-11995 -11993 0
c Var 'aux1712' direct represents '2' with '-11994'
11993 11995 -11994 0
c Encoding variable: aux1713 with domain: int(0..3) (representing constraint ((x_00003_00009=4) + aux1712))
c Both direct and order encoding.
c Var 'aux1713' order represents '0' with '11996'
c Var 'aux1713' direct represents '0' with '11996'
c Var 'aux1713' order represents '1' with '11997'
-11996 11997 0
c Var 'aux1713' direct represents '1' with '11998'
11996 -11997 11998 0
-11998 11997 0
-11998 -11996 0
c Var 'aux1713' order represents '2' with '11999'
-11997 11999 0
c Var 'aux1713' direct represents '2' with '12000'
11997 -11999 12000 0
-12000 11999 0
-12000 -11997 0
c Var 'aux1713' direct represents '3' with '-11999'
11996 11998 12000 -11999 0
c Encoding variable: aux1714 with domain: int(0..4) (representing constraint (aux1709 + aux1711))
c Both direct and order encoding.
c Var 'aux1714' order represents '0' with '12001'
c Var 'aux1714' direct represents '0' with '12001'
c Var 'aux1714' order represents '1' with '12002'
-12001 12002 0
c Var 'aux1714' direct represents '1' with '12003'
12001 -12002 12003 0
-12003 12002 0
-12003 -12001 0
c Var 'aux1714' order represents '2' with '12004'
-12002 12004 0
c Var 'aux1714' direct represents '2' with '12005'
12002 -12004 12005 0
-12005 12004 0
-12005 -12002 0
c Var 'aux1714' order represents '3' with '12006'
-12004 12006 0
c Var 'aux1714' direct represents '3' with '12007'
12004 -12006 12007 0
-12007 12006 0
-12007 -12004 0
c Var 'aux1714' direct represents '4' with '-12006'
12001 12003 12005 12007 -12006 0
c Encoding variable: aux1715 with domain: int(0..2) (representing constraint ((x_00003_00007=5) + (x_00002_00009=5)))
c Both direct and order encoding.
c Var 'aux1715' order represents '0' with '12008'
c Var 'aux1715' direct represents '0' with '12008'
c Var 'aux1715' order represents '1' with '12009'
-12008 12009 0
c Var 'aux1715' direct represents '1' with '12010'
12008 -12009 12010 0
-12010 12009 0
-12010 -12008 0
c Var 'aux1715' direct represents '2' with '-12009'
12008 12010 -12009 0
c Encoding variable: aux1716 with domain: int(0..2) (representing constraint ((x_00002_00008=5) + (x_00003_00008=5)))
c Both direct and order encoding.
c Var 'aux1716' order represents '0' with '12011'
c Var 'aux1716' direct represents '0' with '12011'
c Var 'aux1716' order represents '1' with '12012'
-12011 12012 0
c Var 'aux1716' direct represents '1' with '12013'
12011 -12012 12013 0
-12013 12012 0
-12013 -12011 0
c Var 'aux1716' direct represents '2' with '-12012'
12011 12013 -12012 0
c Encoding variable: aux1717 with domain: int(0..2) (representing constraint ((x_00002_00007=5) + (x_00001_00007=5)))
c Both direct and order encoding.
c Var 'aux1717' order represents '0' with '12014'
c Var 'aux1717' direct represents '0' with '12014'
c Var 'aux1717' order represents '1' with '12015'
-12014 12015 0
c Var 'aux1717' direct represents '1' with '12016'
12014 -12015 12016 0
-12016 12015 0
-12016 -12014 0
c Var 'aux1717' direct represents '2' with '-12015'
12014 12016 -12015 0
c Encoding variable: aux1718 with domain: int(0..2) (representing constraint ((x_00001_00009=5) + (x_00001_00008=5)))
c Both direct and order encoding.
c Var 'aux1718' order represents '0' with '12017'
c Var 'aux1718' direct represents '0' with '12017'
c Var 'aux1718' order represents '1' with '12018'
-12017 12018 0
c Var 'aux1718' direct represents '1' with '12019'
12017 -12018 12019 0
-12019 12018 0
-12019 -12017 0
c Var 'aux1718' direct represents '2' with '-12018'
12017 12019 -12018 0
c Encoding variable: aux1719 with domain: int(0..3) (representing constraint ((x_00003_00009=5) + aux1718))
c Both direct and order encoding.
c Var 'aux1719' order represents '0' with '12020'
c Var 'aux1719' direct represents '0' with '12020'
c Var 'aux1719' order represents '1' with '12021'
-12020 12021 0
c Var 'aux1719' direct represents '1' with '12022'
12020 -12021 12022 0
-12022 12021 0
-12022 -12020 0
c Var 'aux1719' order represents '2' with '12023'
-12021 12023 0
c Var 'aux1719' direct represents '2' with '12024'
12021 -12023 12024 0
-12024 12023 0
-12024 -12021 0
c Var 'aux1719' direct represents '3' with '-12023'
12020 12022 12024 -12023 0
c Encoding variable: aux1720 with domain: int(0..4) (representing constraint (aux1715 + aux1717))
c Both direct and order encoding.
c Var 'aux1720' order represents '0' with '12025'
c Var 'aux1720' direct represents '0' with '12025'
c Var 'aux1720' order represents '1' with '12026'
-12025 12026 0
c Var 'aux1720' direct represents '1' with '12027'
12025 -12026 12027 0
-12027 12026 0
-12027 -12025 0
c Var 'aux1720' order represents '2' with '12028'
-12026 12028 0
c Var 'aux1720' direct represents '2' with '12029'
12026 -12028 12029 0
-12029 12028 0
-12029 -12026 0
c Var 'aux1720' order represents '3' with '12030'
-12028 12030 0
c Var 'aux1720' direct represents '3' with '12031'
12028 -12030 12031 0
-12031 12030 0
-12031 -12028 0
c Var 'aux1720' direct represents '4' with '-12030'
12025 12027 12029 12031 -12030 0
c Encoding variable: aux1721 with domain: int(0..2) (representing constraint ((x_00003_00007=6) + (x_00002_00009=6)))
c Both direct and order encoding.
c Var 'aux1721' order represents '0' with '12032'
c Var 'aux1721' direct represents '0' with '12032'
c Var 'aux1721' order represents '1' with '12033'
-12032 12033 0
c Var 'aux1721' direct represents '1' with '12034'
12032 -12033 12034 0
-12034 12033 0
-12034 -12032 0
c Var 'aux1721' direct represents '2' with '-12033'
12032 12034 -12033 0
c Encoding variable: aux1722 with domain: int(0..2) (representing constraint ((x_00002_00008=6) + (x_00003_00008=6)))
c Both direct and order encoding.
c Var 'aux1722' order represents '0' with '12035'
c Var 'aux1722' direct represents '0' with '12035'
c Var 'aux1722' order represents '1' with '12036'
-12035 12036 0
c Var 'aux1722' direct represents '1' with '12037'
12035 -12036 12037 0
-12037 12036 0
-12037 -12035 0
c Var 'aux1722' direct represents '2' with '-12036'
12035 12037 -12036 0
c Encoding variable: aux1723 with domain: int(0..2) (representing constraint ((x_00002_00007=6) + (x_00001_00007=6)))
c Both direct and order encoding.
c Var 'aux1723' order represents '0' with '12038'
c Var 'aux1723' direct represents '0' with '12038'
c Var 'aux1723' order represents '1' with '12039'
-12038 12039 0
c Var 'aux1723' direct represents '1' with '12040'
12038 -12039 12040 0
-12040 12039 0
-12040 -12038 0
c Var 'aux1723' direct represents '2' with '-12039'
12038 12040 -12039 0
c Encoding variable: aux1724 with domain: int(0..2) (representing constraint ((x_00001_00009=6) + (x_00001_00008=6)))
c Both direct and order encoding.
c Var 'aux1724' order represents '0' with '12041'
c Var 'aux1724' direct represents '0' with '12041'
c Var 'aux1724' order represents '1' with '12042'
-12041 12042 0
c Var 'aux1724' direct represents '1' with '12043'
12041 -12042 12043 0
-12043 12042 0
-12043 -12041 0
c Var 'aux1724' direct represents '2' with '-12042'
12041 12043 -12042 0
c Encoding variable: aux1725 with domain: int(0..3) (representing constraint ((x_00003_00009=6) + aux1724))
c Both direct and order encoding.
c Var 'aux1725' order represents '0' with '12044'
c Var 'aux1725' direct represents '0' with '12044'
c Var 'aux1725' order represents '1' with '12045'
-12044 12045 0
c Var 'aux1725' direct represents '1' with '12046'
12044 -12045 12046 0
-12046 12045 0
-12046 -12044 0
c Var 'aux1725' order represents '2' with '12047'
-12045 12047 0
c Var 'aux1725' direct represents '2' with '12048'
12045 -12047 12048 0
-12048 12047 0
-12048 -12045 0
c Var 'aux1725' direct represents '3' with '-12047'
12044 12046 12048 -12047 0
c Encoding variable: aux1726 with domain: int(0..4) (representing constraint (aux1721 + aux1723))
c Both direct and order encoding.
c Var 'aux1726' order represents '0' with '12049'
c Var 'aux1726' direct represents '0' with '12049'
c Var 'aux1726' order represents '1' with '12050'
-12049 12050 0
c Var 'aux1726' direct represents '1' with '12051'
12049 -12050 12051 0
-12051 12050 0
-12051 -12049 0
c Var 'aux1726' order represents '2' with '12052'
-12050 12052 0
c Var 'aux1726' direct represents '2' with '12053'
12050 -12052 12053 0
-12053 12052 0
-12053 -12050 0
c Var 'aux1726' order represents '3' with '12054'
-12052 12054 0
c Var 'aux1726' direct represents '3' with '12055'
12052 -12054 12055 0
-12055 12054 0
-12055 -12052 0
c Var 'aux1726' direct represents '4' with '-12054'
12049 12051 12053 12055 -12054 0
c Encoding variable: aux1727 with domain: int(0..2) (representing constraint ((x_00003_00007=7) + (x_00002_00009=7)))
c Both direct and order encoding.
c Var 'aux1727' order represents '0' with '12056'
c Var 'aux1727' direct represents '0' with '12056'
c Var 'aux1727' order represents '1' with '12057'
-12056 12057 0
c Var 'aux1727' direct represents '1' with '12058'
12056 -12057 12058 0
-12058 12057 0
-12058 -12056 0
c Var 'aux1727' direct represents '2' with '-12057'
12056 12058 -12057 0
c Encoding variable: aux1728 with domain: int(0..2) (representing constraint ((x_00002_00008=7) + (x_00003_00008=7)))
c Both direct and order encoding.
c Var 'aux1728' order represents '0' with '12059'
c Var 'aux1728' direct represents '0' with '12059'
c Var 'aux1728' order represents '1' with '12060'
-12059 12060 0
c Var 'aux1728' direct represents '1' with '12061'
12059 -12060 12061 0
-12061 12060 0
-12061 -12059 0
c Var 'aux1728' direct represents '2' with '-12060'
12059 12061 -12060 0
c Encoding variable: aux1729 with domain: int(0..2) (representing constraint ((x_00002_00007=7) + (x_00001_00007=7)))
c Both direct and order encoding.
c Var 'aux1729' order represents '0' with '12062'
c Var 'aux1729' direct represents '0' with '12062'
c Var 'aux1729' order represents '1' with '12063'
-12062 12063 0
c Var 'aux1729' direct represents '1' with '12064'
12062 -12063 12064 0
-12064 12063 0
-12064 -12062 0
c Var 'aux1729' direct represents '2' with '-12063'
12062 12064 -12063 0
c Encoding variable: aux1730 with domain: int(0..2) (representing constraint ((x_00001_00009=7) + (x_00001_00008=7)))
c Both direct and order encoding.
c Var 'aux1730' order represents '0' with '12065'
c Var 'aux1730' direct represents '0' with '12065'
c Var 'aux1730' order represents '1' with '12066'
-12065 12066 0
c Var 'aux1730' direct represents '1' with '12067'
12065 -12066 12067 0
-12067 12066 0
-12067 -12065 0
c Var 'aux1730' direct represents '2' with '-12066'
12065 12067 -12066 0
c Encoding variable: aux1731 with domain: int(0..3) (representing constraint ((x_00003_00009=7) + aux1730))
c Both direct and order encoding.
c Var 'aux1731' order represents '0' with '12068'
c Var 'aux1731' direct represents '0' with '12068'
c Var 'aux1731' order represents '1' with '12069'
-12068 12069 0
c Var 'aux1731' direct represents '1' with '12070'
12068 -12069 12070 0
-12070 12069 0
-12070 -12068 0
c Var 'aux1731' order represents '2' with '12071'
-12069 12071 0
c Var 'aux1731' direct represents '2' with '12072'
12069 -12071 12072 0
-12072 12071 0
-12072 -12069 0
c Var 'aux1731' direct represents '3' with '-12071'
12068 12070 12072 -12071 0
c Encoding variable: aux1732 with domain: int(0..4) (representing constraint (aux1727 + aux1729))
c Both direct and order encoding.
c Var 'aux1732' order represents '0' with '12073'
c Var 'aux1732' direct represents '0' with '12073'
c Var 'aux1732' order represents '1' with '12074'
-12073 12074 0
c Var 'aux1732' direct represents '1' with '12075'
12073 -12074 12075 0
-12075 12074 0
-12075 -12073 0
c Var 'aux1732' order represents '2' with '12076'
-12074 12076 0
c Var 'aux1732' direct represents '2' with '12077'
12074 -12076 12077 0
-12077 12076 0
-12077 -12074 0
c Var 'aux1732' order represents '3' with '12078'
-12076 12078 0
c Var 'aux1732' direct represents '3' with '12079'
12076 -12078 12079 0
-12079 12078 0
-12079 -12076 0
c Var 'aux1732' direct represents '4' with '-12078'
12073 12075 12077 12079 -12078 0
c Encoding variable: aux1733 with domain: int(0..2) (representing constraint ((x_00003_00007=8) + (x_00002_00009=8)))
c Both direct and order encoding.
c Var 'aux1733' order represents '0' with '12080'
c Var 'aux1733' direct represents '0' with '12080'
c Var 'aux1733' order represents '1' with '12081'
-12080 12081 0
c Var 'aux1733' direct represents '1' with '12082'
12080 -12081 12082 0
-12082 12081 0
-12082 -12080 0
c Var 'aux1733' direct represents '2' with '-12081'
12080 12082 -12081 0
c Encoding variable: aux1734 with domain: int(0..2) (representing constraint ((x_00002_00008=8) + (x_00003_00008=8)))
c Both direct and order encoding.
c Var 'aux1734' order represents '0' with '12083'
c Var 'aux1734' direct represents '0' with '12083'
c Var 'aux1734' order represents '1' with '12084'
-12083 12084 0
c Var 'aux1734' direct represents '1' with '12085'
12083 -12084 12085 0
-12085 12084 0
-12085 -12083 0
c Var 'aux1734' direct represents '2' with '-12084'
12083 12085 -12084 0
c Encoding variable: aux1735 with domain: int(0..2) (representing constraint ((x_00002_00007=8) + (x_00001_00007=8)))
c Both direct and order encoding.
c Var 'aux1735' order represents '0' with '12086'
c Var 'aux1735' direct represents '0' with '12086'
c Var 'aux1735' order represents '1' with '12087'
-12086 12087 0
c Var 'aux1735' direct represents '1' with '12088'
12086 -12087 12088 0
-12088 12087 0
-12088 -12086 0
c Var 'aux1735' direct represents '2' with '-12087'
12086 12088 -12087 0
c Encoding variable: aux1736 with domain: int(0..2) (representing constraint ((x_00001_00009=8) + (x_00001_00008=8)))
c Both direct and order encoding.
c Var 'aux1736' order represents '0' with '12089'
c Var 'aux1736' direct represents '0' with '12089'
c Var 'aux1736' order represents '1' with '12090'
-12089 12090 0
c Var 'aux1736' direct represents '1' with '12091'
12089 -12090 12091 0
-12091 12090 0
-12091 -12089 0
c Var 'aux1736' direct represents '2' with '-12090'
12089 12091 -12090 0
c Encoding variable: aux1737 with domain: int(0..3) (representing constraint ((x_00003_00009=8) + aux1736))
c Both direct and order encoding.
c Var 'aux1737' order represents '0' with '12092'
c Var 'aux1737' direct represents '0' with '12092'
c Var 'aux1737' order represents '1' with '12093'
-12092 12093 0
c Var 'aux1737' direct represents '1' with '12094'
12092 -12093 12094 0
-12094 12093 0
-12094 -12092 0
c Var 'aux1737' order represents '2' with '12095'
-12093 12095 0
c Var 'aux1737' direct represents '2' with '12096'
12093 -12095 12096 0
-12096 12095 0
-12096 -12093 0
c Var 'aux1737' direct represents '3' with '-12095'
12092 12094 12096 -12095 0
c Encoding variable: aux1738 with domain: int(0..4) (representing constraint (aux1733 + aux1735))
c Both direct and order encoding.
c Var 'aux1738' order represents '0' with '12097'
c Var 'aux1738' direct represents '0' with '12097'
c Var 'aux1738' order represents '1' with '12098'
-12097 12098 0
c Var 'aux1738' direct represents '1' with '12099'
12097 -12098 12099 0
-12099 12098 0
-12099 -12097 0
c Var 'aux1738' order represents '2' with '12100'
-12098 12100 0
c Var 'aux1738' direct represents '2' with '12101'
12098 -12100 12101 0
-12101 12100 0
-12101 -12098 0
c Var 'aux1738' order represents '3' with '12102'
-12100 12102 0
c Var 'aux1738' direct represents '3' with '12103'
12100 -12102 12103 0
-12103 12102 0
-12103 -12100 0
c Var 'aux1738' direct represents '4' with '-12102'
12097 12099 12101 12103 -12102 0
c Encoding variable: aux1739 with domain: int(0..2) (representing constraint ((x_00003_00007=9) + (x_00002_00009=9)))
c Both direct and order encoding.
c Var 'aux1739' order represents '0' with '12104'
c Var 'aux1739' direct represents '0' with '12104'
c Var 'aux1739' order represents '1' with '12105'
-12104 12105 0
c Var 'aux1739' direct represents '1' with '12106'
12104 -12105 12106 0
-12106 12105 0
-12106 -12104 0
c Var 'aux1739' direct represents '2' with '-12105'
12104 12106 -12105 0
c Encoding variable: aux1740 with domain: int(0..2) (representing constraint ((x_00002_00008=9) + (x_00003_00008=9)))
c Both direct and order encoding.
c Var 'aux1740' order represents '0' with '12107'
c Var 'aux1740' direct represents '0' with '12107'
c Var 'aux1740' order represents '1' with '12108'
-12107 12108 0
c Var 'aux1740' direct represents '1' with '12109'
12107 -12108 12109 0
-12109 12108 0
-12109 -12107 0
c Var 'aux1740' direct represents '2' with '-12108'
12107 12109 -12108 0
c Encoding variable: aux1741 with domain: int(0..2) (representing constraint ((x_00002_00007=9) + (x_00001_00007=9)))
c Both direct and order encoding.
c Var 'aux1741' order represents '0' with '12110'
c Var 'aux1741' direct represents '0' with '12110'
c Var 'aux1741' order represents '1' with '12111'
-12110 12111 0
c Var 'aux1741' direct represents '1' with '12112'
12110 -12111 12112 0
-12112 12111 0
-12112 -12110 0
c Var 'aux1741' direct represents '2' with '-12111'
12110 12112 -12111 0
c Encoding variable: aux1742 with domain: int(0..2) (representing constraint ((x_00001_00009=9) + (x_00001_00008=9)))
c Both direct and order encoding.
c Var 'aux1742' order represents '0' with '12113'
c Var 'aux1742' direct represents '0' with '12113'
c Var 'aux1742' order represents '1' with '12114'
-12113 12114 0
c Var 'aux1742' direct represents '1' with '12115'
12113 -12114 12115 0
-12115 12114 0
-12115 -12113 0
c Var 'aux1742' direct represents '2' with '-12114'
12113 12115 -12114 0
c Encoding variable: aux1743 with domain: int(0..3) (representing constraint ((x_00003_00009=9) + aux1742))
c Both direct and order encoding.
c Var 'aux1743' order represents '0' with '12116'
c Var 'aux1743' direct represents '0' with '12116'
c Var 'aux1743' order represents '1' with '12117'
-12116 12117 0
c Var 'aux1743' direct represents '1' with '12118'
12116 -12117 12118 0
-12118 12117 0
-12118 -12116 0
c Var 'aux1743' order represents '2' with '12119'
-12117 12119 0
c Var 'aux1743' direct represents '2' with '12120'
12117 -12119 12120 0
-12120 12119 0
-12120 -12117 0
c Var 'aux1743' direct represents '3' with '-12119'
12116 12118 12120 -12119 0
c Encoding variable: aux1744 with domain: int(0..4) (representing constraint (aux1739 + aux1741))
c Both direct and order encoding.
c Var 'aux1744' order represents '0' with '12121'
c Var 'aux1744' direct represents '0' with '12121'
c Var 'aux1744' order represents '1' with '12122'
-12121 12122 0
c Var 'aux1744' direct represents '1' with '12123'
12121 -12122 12123 0
-12123 12122 0
-12123 -12121 0
c Var 'aux1744' order represents '2' with '12124'
-12122 12124 0
c Var 'aux1744' direct represents '2' with '12125'
12122 -12124 12125 0
-12125 12124 0
-12125 -12122 0
c Var 'aux1744' order represents '3' with '12126'
-12124 12126 0
c Var 'aux1744' direct represents '3' with '12127'
12124 -12126 12127 0
-12127 12126 0
-12127 -12124 0
c Var 'aux1744' direct represents '4' with '-12126'
12121 12123 12125 12127 -12126 0
c Encoding variable: aux1745 with domain: int(0..2) (representing constraint ((x_00006_00001=1) + (x_00005_00003=1)))
c Both direct and order encoding.
c Var 'aux1745' order represents '0' with '12128'
c Var 'aux1745' direct represents '0' with '12128'
c Var 'aux1745' order represents '1' with '12129'
-12128 12129 0
c Var 'aux1745' direct represents '1' with '12130'
12128 -12129 12130 0
-12130 12129 0
-12130 -12128 0
c Var 'aux1745' direct represents '2' with '-12129'
12128 12130 -12129 0
c Encoding variable: aux1746 with domain: int(0..2) (representing constraint ((x_00005_00002=1) + (x_00006_00002=1)))
c Both direct and order encoding.
c Var 'aux1746' order represents '0' with '12131'
c Var 'aux1746' direct represents '0' with '12131'
c Var 'aux1746' order represents '1' with '12132'
-12131 12132 0
c Var 'aux1746' direct represents '1' with '12133'
12131 -12132 12133 0
-12133 12132 0
-12133 -12131 0
c Var 'aux1746' direct represents '2' with '-12132'
12131 12133 -12132 0
c Encoding variable: aux1747 with domain: int(0..2) (representing constraint ((x_00005_00001=1) + (x_00004_00001=1)))
c Both direct and order encoding.
c Var 'aux1747' order represents '0' with '12134'
c Var 'aux1747' direct represents '0' with '12134'
c Var 'aux1747' order represents '1' with '12135'
-12134 12135 0
c Var 'aux1747' direct represents '1' with '12136'
12134 -12135 12136 0
-12136 12135 0
-12136 -12134 0
c Var 'aux1747' direct represents '2' with '-12135'
12134 12136 -12135 0
c Encoding variable: aux1748 with domain: int(0..2) (representing constraint ((x_00004_00003=1) + (x_00004_00002=1)))
c Both direct and order encoding.
c Var 'aux1748' order represents '0' with '12137'
c Var 'aux1748' direct represents '0' with '12137'
c Var 'aux1748' order represents '1' with '12138'
-12137 12138 0
c Var 'aux1748' direct represents '1' with '12139'
12137 -12138 12139 0
-12139 12138 0
-12139 -12137 0
c Var 'aux1748' direct represents '2' with '-12138'
12137 12139 -12138 0
c Encoding variable: aux1749 with domain: int(0..3) (representing constraint ((x_00006_00003=1) + aux1748))
c Both direct and order encoding.
c Var 'aux1749' order represents '0' with '12140'
c Var 'aux1749' direct represents '0' with '12140'
c Var 'aux1749' order represents '1' with '12141'
-12140 12141 0
c Var 'aux1749' direct represents '1' with '12142'
12140 -12141 12142 0
-12142 12141 0
-12142 -12140 0
c Var 'aux1749' order represents '2' with '12143'
-12141 12143 0
c Var 'aux1749' direct represents '2' with '12144'
12141 -12143 12144 0
-12144 12143 0
-12144 -12141 0
c Var 'aux1749' direct represents '3' with '-12143'
12140 12142 12144 -12143 0
c Encoding variable: aux1750 with domain: int(0..4) (representing constraint (aux1745 + aux1747))
c Both direct and order encoding.
c Var 'aux1750' order represents '0' with '12145'
c Var 'aux1750' direct represents '0' with '12145'
c Var 'aux1750' order represents '1' with '12146'
-12145 12146 0
c Var 'aux1750' direct represents '1' with '12147'
12145 -12146 12147 0
-12147 12146 0
-12147 -12145 0
c Var 'aux1750' order represents '2' with '12148'
-12146 12148 0
c Var 'aux1750' direct represents '2' with '12149'
12146 -12148 12149 0
-12149 12148 0
-12149 -12146 0
c Var 'aux1750' order represents '3' with '12150'
-12148 12150 0
c Var 'aux1750' direct represents '3' with '12151'
12148 -12150 12151 0
-12151 12150 0
-12151 -12148 0
c Var 'aux1750' direct represents '4' with '-12150'
12145 12147 12149 12151 -12150 0
c Encoding variable: aux1751 with domain: int(0..2) (representing constraint ((x_00006_00001=2) + (x_00005_00003=2)))
c Both direct and order encoding.
c Var 'aux1751' order represents '0' with '12152'
c Var 'aux1751' direct represents '0' with '12152'
c Var 'aux1751' order represents '1' with '12153'
-12152 12153 0
c Var 'aux1751' direct represents '1' with '12154'
12152 -12153 12154 0
-12154 12153 0
-12154 -12152 0
c Var 'aux1751' direct represents '2' with '-12153'
12152 12154 -12153 0
c Encoding variable: aux1752 with domain: int(0..2) (representing constraint ((x_00005_00002=2) + (x_00006_00002=2)))
c Both direct and order encoding.
c Var 'aux1752' order represents '0' with '12155'
c Var 'aux1752' direct represents '0' with '12155'
c Var 'aux1752' order represents '1' with '12156'
-12155 12156 0
c Var 'aux1752' direct represents '1' with '12157'
12155 -12156 12157 0
-12157 12156 0
-12157 -12155 0
c Var 'aux1752' direct represents '2' with '-12156'
12155 12157 -12156 0
c Encoding variable: aux1753 with domain: int(0..2) (representing constraint ((x_00005_00001=2) + (x_00004_00001=2)))
c Both direct and order encoding.
c Var 'aux1753' order represents '0' with '12158'
c Var 'aux1753' direct represents '0' with '12158'
c Var 'aux1753' order represents '1' with '12159'
-12158 12159 0
c Var 'aux1753' direct represents '1' with '12160'
12158 -12159 12160 0
-12160 12159 0
-12160 -12158 0
c Var 'aux1753' direct represents '2' with '-12159'
12158 12160 -12159 0
c Encoding variable: aux1754 with domain: int(0..2) (representing constraint ((x_00004_00003=2) + (x_00004_00002=2)))
c Both direct and order encoding.
c Var 'aux1754' order represents '0' with '12161'
c Var 'aux1754' direct represents '0' with '12161'
c Var 'aux1754' order represents '1' with '12162'
-12161 12162 0
c Var 'aux1754' direct represents '1' with '12163'
12161 -12162 12163 0
-12163 12162 0
-12163 -12161 0
c Var 'aux1754' direct represents '2' with '-12162'
12161 12163 -12162 0
c Encoding variable: aux1755 with domain: int(0..3) (representing constraint ((x_00006_00003=2) + aux1754))
c Both direct and order encoding.
c Var 'aux1755' order represents '0' with '12164'
c Var 'aux1755' direct represents '0' with '12164'
c Var 'aux1755' order represents '1' with '12165'
-12164 12165 0
c Var 'aux1755' direct represents '1' with '12166'
12164 -12165 12166 0
-12166 12165 0
-12166 -12164 0
c Var 'aux1755' order represents '2' with '12167'
-12165 12167 0
c Var 'aux1755' direct represents '2' with '12168'
12165 -12167 12168 0
-12168 12167 0
-12168 -12165 0
c Var 'aux1755' direct represents '3' with '-12167'
12164 12166 12168 -12167 0
c Encoding variable: aux1756 with domain: int(0..4) (representing constraint (aux1751 + aux1753))
c Both direct and order encoding.
c Var 'aux1756' order represents '0' with '12169'
c Var 'aux1756' direct represents '0' with '12169'
c Var 'aux1756' order represents '1' with '12170'
-12169 12170 0
c Var 'aux1756' direct represents '1' with '12171'
12169 -12170 12171 0
-12171 12170 0
-12171 -12169 0
c Var 'aux1756' order represents '2' with '12172'
-12170 12172 0
c Var 'aux1756' direct represents '2' with '12173'
12170 -12172 12173 0
-12173 12172 0
-12173 -12170 0
c Var 'aux1756' order represents '3' with '12174'
-12172 12174 0
c Var 'aux1756' direct represents '3' with '12175'
12172 -12174 12175 0
-12175 12174 0
-12175 -12172 0
c Var 'aux1756' direct represents '4' with '-12174'
12169 12171 12173 12175 -12174 0
c Encoding variable: aux1757 with domain: int(0..2) (representing constraint ((x_00006_00001=3) + (x_00005_00003=3)))
c Both direct and order encoding.
c Var 'aux1757' order represents '0' with '12176'
c Var 'aux1757' direct represents '0' with '12176'
c Var 'aux1757' order represents '1' with '12177'
-12176 12177 0
c Var 'aux1757' direct represents '1' with '12178'
12176 -12177 12178 0
-12178 12177 0
-12178 -12176 0
c Var 'aux1757' direct represents '2' with '-12177'
12176 12178 -12177 0
c Encoding variable: aux1758 with domain: int(0..2) (representing constraint ((x_00005_00002=3) + (x_00006_00002=3)))
c Both direct and order encoding.
c Var 'aux1758' order represents '0' with '12179'
c Var 'aux1758' direct represents '0' with '12179'
c Var 'aux1758' order represents '1' with '12180'
-12179 12180 0
c Var 'aux1758' direct represents '1' with '12181'
12179 -12180 12181 0
-12181 12180 0
-12181 -12179 0
c Var 'aux1758' direct represents '2' with '-12180'
12179 12181 -12180 0
c Encoding variable: aux1759 with domain: int(0..2) (representing constraint ((x_00005_00001=3) + (x_00004_00001=3)))
c Both direct and order encoding.
c Var 'aux1759' order represents '0' with '12182'
c Var 'aux1759' direct represents '0' with '12182'
c Var 'aux1759' order represents '1' with '12183'
-12182 12183 0
c Var 'aux1759' direct represents '1' with '12184'
12182 -12183 12184 0
-12184 12183 0
-12184 -12182 0
c Var 'aux1759' direct represents '2' with '-12183'
12182 12184 -12183 0
c Encoding variable: aux1760 with domain: int(0..2) (representing constraint ((x_00004_00003=3) + (x_00004_00002=3)))
c Both direct and order encoding.
c Var 'aux1760' order represents '0' with '12185'
c Var 'aux1760' direct represents '0' with '12185'
c Var 'aux1760' order represents '1' with '12186'
-12185 12186 0
c Var 'aux1760' direct represents '1' with '12187'
12185 -12186 12187 0
-12187 12186 0
-12187 -12185 0
c Var 'aux1760' direct represents '2' with '-12186'
12185 12187 -12186 0
c Encoding variable: aux1761 with domain: int(0..3) (representing constraint ((x_00006_00003=3) + aux1760))
c Both direct and order encoding.
c Var 'aux1761' order represents '0' with '12188'
c Var 'aux1761' direct represents '0' with '12188'
c Var 'aux1761' order represents '1' with '12189'
-12188 12189 0
c Var 'aux1761' direct represents '1' with '12190'
12188 -12189 12190 0
-12190 12189 0
-12190 -12188 0
c Var 'aux1761' order represents '2' with '12191'
-12189 12191 0
c Var 'aux1761' direct represents '2' with '12192'
12189 -12191 12192 0
-12192 12191 0
-12192 -12189 0
c Var 'aux1761' direct represents '3' with '-12191'
12188 12190 12192 -12191 0
c Encoding variable: aux1762 with domain: int(0..4) (representing constraint (aux1757 + aux1759))
c Both direct and order encoding.
c Var 'aux1762' order represents '0' with '12193'
c Var 'aux1762' direct represents '0' with '12193'
c Var 'aux1762' order represents '1' with '12194'
-12193 12194 0
c Var 'aux1762' direct represents '1' with '12195'
12193 -12194 12195 0
-12195 12194 0
-12195 -12193 0
c Var 'aux1762' order represents '2' with '12196'
-12194 12196 0
c Var 'aux1762' direct represents '2' with '12197'
12194 -12196 12197 0
-12197 12196 0
-12197 -12194 0
c Var 'aux1762' order represents '3' with '12198'
-12196 12198 0
c Var 'aux1762' direct represents '3' with '12199'
12196 -12198 12199 0
-12199 12198 0
-12199 -12196 0
c Var 'aux1762' direct represents '4' with '-12198'
12193 12195 12197 12199 -12198 0
c Encoding variable: aux1763 with domain: int(0..2) (representing constraint ((x_00006_00001=4) + (x_00005_00003=4)))
c Both direct and order encoding.
c Var 'aux1763' order represents '0' with '12200'
c Var 'aux1763' direct represents '0' with '12200'
c Var 'aux1763' order represents '1' with '12201'
-12200 12201 0
c Var 'aux1763' direct represents '1' with '12202'
12200 -12201 12202 0
-12202 12201 0
-12202 -12200 0
c Var 'aux1763' direct represents '2' with '-12201'
12200 12202 -12201 0
c Encoding variable: aux1764 with domain: int(0..2) (representing constraint ((x_00005_00002=4) + (x_00006_00002=4)))
c Both direct and order encoding.
c Var 'aux1764' order represents '0' with '12203'
c Var 'aux1764' direct represents '0' with '12203'
c Var 'aux1764' order represents '1' with '12204'
-12203 12204 0
c Var 'aux1764' direct represents '1' with '12205'
12203 -12204 12205 0
-12205 12204 0
-12205 -12203 0
c Var 'aux1764' direct represents '2' with '-12204'
12203 12205 -12204 0
c Encoding variable: aux1765 with domain: int(0..2) (representing constraint ((x_00005_00001=4) + (x_00004_00001=4)))
c Both direct and order encoding.
c Var 'aux1765' order represents '0' with '12206'
c Var 'aux1765' direct represents '0' with '12206'
c Var 'aux1765' order represents '1' with '12207'
-12206 12207 0
c Var 'aux1765' direct represents '1' with '12208'
12206 -12207 12208 0
-12208 12207 0
-12208 -12206 0
c Var 'aux1765' direct represents '2' with '-12207'
12206 12208 -12207 0
c Encoding variable: aux1766 with domain: int(0..2) (representing constraint ((x_00004_00003=4) + (x_00004_00002=4)))
c Both direct and order encoding.
c Var 'aux1766' order represents '0' with '12209'
c Var 'aux1766' direct represents '0' with '12209'
c Var 'aux1766' order represents '1' with '12210'
-12209 12210 0
c Var 'aux1766' direct represents '1' with '12211'
12209 -12210 12211 0
-12211 12210 0
-12211 -12209 0
c Var 'aux1766' direct represents '2' with '-12210'
12209 12211 -12210 0
c Encoding variable: aux1767 with domain: int(0..3) (representing constraint ((x_00006_00003=4) + aux1766))
c Both direct and order encoding.
c Var 'aux1767' order represents '0' with '12212'
c Var 'aux1767' direct represents '0' with '12212'
c Var 'aux1767' order represents '1' with '12213'
-12212 12213 0
c Var 'aux1767' direct represents '1' with '12214'
12212 -12213 12214 0
-12214 12213 0
-12214 -12212 0
c Var 'aux1767' order represents '2' with '12215'
-12213 12215 0
c Var 'aux1767' direct represents '2' with '12216'
12213 -12215 12216 0
-12216 12215 0
-12216 -12213 0
c Var 'aux1767' direct represents '3' with '-12215'
12212 12214 12216 -12215 0
c Encoding variable: aux1768 with domain: int(0..4) (representing constraint (aux1763 + aux1765))
c Both direct and order encoding.
c Var 'aux1768' order represents '0' with '12217'
c Var 'aux1768' direct represents '0' with '12217'
c Var 'aux1768' order represents '1' with '12218'
-12217 12218 0
c Var 'aux1768' direct represents '1' with '12219'
12217 -12218 12219 0
-12219 12218 0
-12219 -12217 0
c Var 'aux1768' order represents '2' with '12220'
-12218 12220 0
c Var 'aux1768' direct represents '2' with '12221'
12218 -12220 12221 0
-12221 12220 0
-12221 -12218 0
c Var 'aux1768' order represents '3' with '12222'
-12220 12222 0
c Var 'aux1768' direct represents '3' with '12223'
12220 -12222 12223 0
-12223 12222 0
-12223 -12220 0
c Var 'aux1768' direct represents '4' with '-12222'
12217 12219 12221 12223 -12222 0
c Encoding variable: aux1769 with domain: int(0..2) (representing constraint ((x_00006_00001=5) + (x_00005_00003=5)))
c Both direct and order encoding.
c Var 'aux1769' order represents '0' with '12224'
c Var 'aux1769' direct represents '0' with '12224'
c Var 'aux1769' order represents '1' with '12225'
-12224 12225 0
c Var 'aux1769' direct represents '1' with '12226'
12224 -12225 12226 0
-12226 12225 0
-12226 -12224 0
c Var 'aux1769' direct represents '2' with '-12225'
12224 12226 -12225 0
c Encoding variable: aux1770 with domain: int(0..2) (representing constraint ((x_00005_00002=5) + (x_00006_00002=5)))
c Both direct and order encoding.
c Var 'aux1770' order represents '0' with '12227'
c Var 'aux1770' direct represents '0' with '12227'
c Var 'aux1770' order represents '1' with '12228'
-12227 12228 0
c Var 'aux1770' direct represents '1' with '12229'
12227 -12228 12229 0
-12229 12228 0
-12229 -12227 0
c Var 'aux1770' direct represents '2' with '-12228'
12227 12229 -12228 0
c Encoding variable: aux1771 with domain: int(0..2) (representing constraint ((x_00005_00001=5) + (x_00004_00001=5)))
c Both direct and order encoding.
c Var 'aux1771' order represents '0' with '12230'
c Var 'aux1771' direct represents '0' with '12230'
c Var 'aux1771' order represents '1' with '12231'
-12230 12231 0
c Var 'aux1771' direct represents '1' with '12232'
12230 -12231 12232 0
-12232 12231 0
-12232 -12230 0
c Var 'aux1771' direct represents '2' with '-12231'
12230 12232 -12231 0
c Encoding variable: aux1772 with domain: int(0..2) (representing constraint ((x_00004_00003=5) + (x_00004_00002=5)))
c Both direct and order encoding.
c Var 'aux1772' order represents '0' with '12233'
c Var 'aux1772' direct represents '0' with '12233'
c Var 'aux1772' order represents '1' with '12234'
-12233 12234 0
c Var 'aux1772' direct represents '1' with '12235'
12233 -12234 12235 0
-12235 12234 0
-12235 -12233 0
c Var 'aux1772' direct represents '2' with '-12234'
12233 12235 -12234 0
c Encoding variable: aux1773 with domain: int(0..3) (representing constraint ((x_00006_00003=5) + aux1772))
c Both direct and order encoding.
c Var 'aux1773' order represents '0' with '12236'
c Var 'aux1773' direct represents '0' with '12236'
c Var 'aux1773' order represents '1' with '12237'
-12236 12237 0
c Var 'aux1773' direct represents '1' with '12238'
12236 -12237 12238 0
-12238 12237 0
-12238 -12236 0
c Var 'aux1773' order represents '2' with '12239'
-12237 12239 0
c Var 'aux1773' direct represents '2' with '12240'
12237 -12239 12240 0
-12240 12239 0
-12240 -12237 0
c Var 'aux1773' direct represents '3' with '-12239'
12236 12238 12240 -12239 0
c Encoding variable: aux1774 with domain: int(0..4) (representing constraint (aux1769 + aux1771))
c Both direct and order encoding.
c Var 'aux1774' order represents '0' with '12241'
c Var 'aux1774' direct represents '0' with '12241'
c Var 'aux1774' order represents '1' with '12242'
-12241 12242 0
c Var 'aux1774' direct represents '1' with '12243'
12241 -12242 12243 0
-12243 12242 0
-12243 -12241 0
c Var 'aux1774' order represents '2' with '12244'
-12242 12244 0
c Var 'aux1774' direct represents '2' with '12245'
12242 -12244 12245 0
-12245 12244 0
-12245 -12242 0
c Var 'aux1774' order represents '3' with '12246'
-12244 12246 0
c Var 'aux1774' direct represents '3' with '12247'
12244 -12246 12247 0
-12247 12246 0
-12247 -12244 0
c Var 'aux1774' direct represents '4' with '-12246'
12241 12243 12245 12247 -12246 0
c Encoding variable: aux1775 with domain: int(0..2) (representing constraint ((x_00006_00001=6) + (x_00005_00003=6)))
c Both direct and order encoding.
c Var 'aux1775' order represents '0' with '12248'
c Var 'aux1775' direct represents '0' with '12248'
c Var 'aux1775' order represents '1' with '12249'
-12248 12249 0
c Var 'aux1775' direct represents '1' with '12250'
12248 -12249 12250 0
-12250 12249 0
-12250 -12248 0
c Var 'aux1775' direct represents '2' with '-12249'
12248 12250 -12249 0
c Encoding variable: aux1776 with domain: int(0..2) (representing constraint ((x_00005_00002=6) + (x_00006_00002=6)))
c Both direct and order encoding.
c Var 'aux1776' order represents '0' with '12251'
c Var 'aux1776' direct represents '0' with '12251'
c Var 'aux1776' order represents '1' with '12252'
-12251 12252 0
c Var 'aux1776' direct represents '1' with '12253'
12251 -12252 12253 0
-12253 12252 0
-12253 -12251 0
c Var 'aux1776' direct represents '2' with '-12252'
12251 12253 -12252 0
c Encoding variable: aux1777 with domain: int(0..2) (representing constraint ((x_00005_00001=6) + (x_00004_00001=6)))
c Both direct and order encoding.
c Var 'aux1777' order represents '0' with '12254'
c Var 'aux1777' direct represents '0' with '12254'
c Var 'aux1777' order represents '1' with '12255'
-12254 12255 0
c Var 'aux1777' direct represents '1' with '12256'
12254 -12255 12256 0
-12256 12255 0
-12256 -12254 0
c Var 'aux1777' direct represents '2' with '-12255'
12254 12256 -12255 0
c Encoding variable: aux1778 with domain: int(0..2) (representing constraint ((x_00004_00003=6) + (x_00004_00002=6)))
c Both direct and order encoding.
c Var 'aux1778' order represents '0' with '12257'
c Var 'aux1778' direct represents '0' with '12257'
c Var 'aux1778' order represents '1' with '12258'
-12257 12258 0
c Var 'aux1778' direct represents '1' with '12259'
12257 -12258 12259 0
-12259 12258 0
-12259 -12257 0
c Var 'aux1778' direct represents '2' with '-12258'
12257 12259 -12258 0
c Encoding variable: aux1779 with domain: int(0..3) (representing constraint ((x_00006_00003=6) + aux1778))
c Both direct and order encoding.
c Var 'aux1779' order represents '0' with '12260'
c Var 'aux1779' direct represents '0' with '12260'
c Var 'aux1779' order represents '1' with '12261'
-12260 12261 0
c Var 'aux1779' direct represents '1' with '12262'
12260 -12261 12262 0
-12262 12261 0
-12262 -12260 0
c Var 'aux1779' order represents '2' with '12263'
-12261 12263 0
c Var 'aux1779' direct represents '2' with '12264'
12261 -12263 12264 0
-12264 12263 0
-12264 -12261 0
c Var 'aux1779' direct represents '3' with '-12263'
12260 12262 12264 -12263 0
c Encoding variable: aux1780 with domain: int(0..4) (representing constraint (aux1775 + aux1777))
c Both direct and order encoding.
c Var 'aux1780' order represents '0' with '12265'
c Var 'aux1780' direct represents '0' with '12265'
c Var 'aux1780' order represents '1' with '12266'
-12265 12266 0
c Var 'aux1780' direct represents '1' with '12267'
12265 -12266 12267 0
-12267 12266 0
-12267 -12265 0
c Var 'aux1780' order represents '2' with '12268'
-12266 12268 0
c Var 'aux1780' direct represents '2' with '12269'
12266 -12268 12269 0
-12269 12268 0
-12269 -12266 0
c Var 'aux1780' order represents '3' with '12270'
-12268 12270 0
c Var 'aux1780' direct represents '3' with '12271'
12268 -12270 12271 0
-12271 12270 0
-12271 -12268 0
c Var 'aux1780' direct represents '4' with '-12270'
12265 12267 12269 12271 -12270 0
c Encoding variable: aux1781 with domain: int(0..2) (representing constraint ((x_00006_00001=7) + (x_00005_00003=7)))
c Both direct and order encoding.
c Var 'aux1781' order represents '0' with '12272'
c Var 'aux1781' direct represents '0' with '12272'
c Var 'aux1781' order represents '1' with '12273'
-12272 12273 0
c Var 'aux1781' direct represents '1' with '12274'
12272 -12273 12274 0
-12274 12273 0
-12274 -12272 0
c Var 'aux1781' direct represents '2' with '-12273'
12272 12274 -12273 0
c Encoding variable: aux1782 with domain: int(0..2) (representing constraint ((x_00005_00002=7) + (x_00006_00002=7)))
c Both direct and order encoding.
c Var 'aux1782' order represents '0' with '12275'
c Var 'aux1782' direct represents '0' with '12275'
c Var 'aux1782' order represents '1' with '12276'
-12275 12276 0
c Var 'aux1782' direct represents '1' with '12277'
12275 -12276 12277 0
-12277 12276 0
-12277 -12275 0
c Var 'aux1782' direct represents '2' with '-12276'
12275 12277 -12276 0
c Encoding variable: aux1783 with domain: int(0..2) (representing constraint ((x_00005_00001=7) + (x_00004_00001=7)))
c Both direct and order encoding.
c Var 'aux1783' order represents '0' with '12278'
c Var 'aux1783' direct represents '0' with '12278'
c Var 'aux1783' order represents '1' with '12279'
-12278 12279 0
c Var 'aux1783' direct represents '1' with '12280'
12278 -12279 12280 0
-12280 12279 0
-12280 -12278 0
c Var 'aux1783' direct represents '2' with '-12279'
12278 12280 -12279 0
c Encoding variable: aux1784 with domain: int(0..2) (representing constraint ((x_00004_00003=7) + (x_00004_00002=7)))
c Both direct and order encoding.
c Var 'aux1784' order represents '0' with '12281'
c Var 'aux1784' direct represents '0' with '12281'
c Var 'aux1784' order represents '1' with '12282'
-12281 12282 0
c Var 'aux1784' direct represents '1' with '12283'
12281 -12282 12283 0
-12283 12282 0
-12283 -12281 0
c Var 'aux1784' direct represents '2' with '-12282'
12281 12283 -12282 0
c Encoding variable: aux1785 with domain: int(0..3) (representing constraint ((x_00006_00003=7) + aux1784))
c Both direct and order encoding.
c Var 'aux1785' order represents '0' with '12284'
c Var 'aux1785' direct represents '0' with '12284'
c Var 'aux1785' order represents '1' with '12285'
-12284 12285 0
c Var 'aux1785' direct represents '1' with '12286'
12284 -12285 12286 0
-12286 12285 0
-12286 -12284 0
c Var 'aux1785' order represents '2' with '12287'
-12285 12287 0
c Var 'aux1785' direct represents '2' with '12288'
12285 -12287 12288 0
-12288 12287 0
-12288 -12285 0
c Var 'aux1785' direct represents '3' with '-12287'
12284 12286 12288 -12287 0
c Encoding variable: aux1786 with domain: int(0..4) (representing constraint (aux1781 + aux1783))
c Both direct and order encoding.
c Var 'aux1786' order represents '0' with '12289'
c Var 'aux1786' direct represents '0' with '12289'
c Var 'aux1786' order represents '1' with '12290'
-12289 12290 0
c Var 'aux1786' direct represents '1' with '12291'
12289 -12290 12291 0
-12291 12290 0
-12291 -12289 0
c Var 'aux1786' order represents '2' with '12292'
-12290 12292 0
c Var 'aux1786' direct represents '2' with '12293'
12290 -12292 12293 0
-12293 12292 0
-12293 -12290 0
c Var 'aux1786' order represents '3' with '12294'
-12292 12294 0
c Var 'aux1786' direct represents '3' with '12295'
12292 -12294 12295 0
-12295 12294 0
-12295 -12292 0
c Var 'aux1786' direct represents '4' with '-12294'
12289 12291 12293 12295 -12294 0
c Encoding variable: aux1787 with domain: int(0..2) (representing constraint ((x_00006_00001=8) + (x_00005_00003=8)))
c Both direct and order encoding.
c Var 'aux1787' order represents '0' with '12296'
c Var 'aux1787' direct represents '0' with '12296'
c Var 'aux1787' order represents '1' with '12297'
-12296 12297 0
c Var 'aux1787' direct represents '1' with '12298'
12296 -12297 12298 0
-12298 12297 0
-12298 -12296 0
c Var 'aux1787' direct represents '2' with '-12297'
12296 12298 -12297 0
c Encoding variable: aux1788 with domain: int(0..2) (representing constraint ((x_00005_00002=8) + (x_00006_00002=8)))
c Both direct and order encoding.
c Var 'aux1788' order represents '0' with '12299'
c Var 'aux1788' direct represents '0' with '12299'
c Var 'aux1788' order represents '1' with '12300'
-12299 12300 0
c Var 'aux1788' direct represents '1' with '12301'
12299 -12300 12301 0
-12301 12300 0
-12301 -12299 0
c Var 'aux1788' direct represents '2' with '-12300'
12299 12301 -12300 0
c Encoding variable: aux1789 with domain: int(0..2) (representing constraint ((x_00005_00001=8) + (x_00004_00001=8)))
c Both direct and order encoding.
c Var 'aux1789' order represents '0' with '12302'
c Var 'aux1789' direct represents '0' with '12302'
c Var 'aux1789' order represents '1' with '12303'
-12302 12303 0
c Var 'aux1789' direct represents '1' with '12304'
12302 -12303 12304 0
-12304 12303 0
-12304 -12302 0
c Var 'aux1789' direct represents '2' with '-12303'
12302 12304 -12303 0
c Encoding variable: aux1790 with domain: int(0..2) (representing constraint ((x_00004_00003=8) + (x_00004_00002=8)))
c Both direct and order encoding.
c Var 'aux1790' order represents '0' with '12305'
c Var 'aux1790' direct represents '0' with '12305'
c Var 'aux1790' order represents '1' with '12306'
-12305 12306 0
c Var 'aux1790' direct represents '1' with '12307'
12305 -12306 12307 0
-12307 12306 0
-12307 -12305 0
c Var 'aux1790' direct represents '2' with '-12306'
12305 12307 -12306 0
c Encoding variable: aux1791 with domain: int(0..3) (representing constraint ((x_00006_00003=8) + aux1790))
c Both direct and order encoding.
c Var 'aux1791' order represents '0' with '12308'
c Var 'aux1791' direct represents '0' with '12308'
c Var 'aux1791' order represents '1' with '12309'
-12308 12309 0
c Var 'aux1791' direct represents '1' with '12310'
12308 -12309 12310 0
-12310 12309 0
-12310 -12308 0
c Var 'aux1791' order represents '2' with '12311'
-12309 12311 0
c Var 'aux1791' direct represents '2' with '12312'
12309 -12311 12312 0
-12312 12311 0
-12312 -12309 0
c Var 'aux1791' direct represents '3' with '-12311'
12308 12310 12312 -12311 0
c Encoding variable: aux1792 with domain: int(0..4) (representing constraint (aux1787 + aux1789))
c Both direct and order encoding.
c Var 'aux1792' order represents '0' with '12313'
c Var 'aux1792' direct represents '0' with '12313'
c Var 'aux1792' order represents '1' with '12314'
-12313 12314 0
c Var 'aux1792' direct represents '1' with '12315'
12313 -12314 12315 0
-12315 12314 0
-12315 -12313 0
c Var 'aux1792' order represents '2' with '12316'
-12314 12316 0
c Var 'aux1792' direct represents '2' with '12317'
12314 -12316 12317 0
-12317 12316 0
-12317 -12314 0
c Var 'aux1792' order represents '3' with '12318'
-12316 12318 0
c Var 'aux1792' direct represents '3' with '12319'
12316 -12318 12319 0
-12319 12318 0
-12319 -12316 0
c Var 'aux1792' direct represents '4' with '-12318'
12313 12315 12317 12319 -12318 0
c Encoding variable: aux1793 with domain: int(0..2) (representing constraint ((x_00006_00001=9) + (x_00005_00003=9)))
c Both direct and order encoding.
c Var 'aux1793' order represents '0' with '12320'
c Var 'aux1793' direct represents '0' with '12320'
c Var 'aux1793' order represents '1' with '12321'
-12320 12321 0
c Var 'aux1793' direct represents '1' with '12322'
12320 -12321 12322 0
-12322 12321 0
-12322 -12320 0
c Var 'aux1793' direct represents '2' with '-12321'
12320 12322 -12321 0
c Encoding variable: aux1794 with domain: int(0..2) (representing constraint ((x_00005_00002=9) + (x_00006_00002=9)))
c Both direct and order encoding.
c Var 'aux1794' order represents '0' with '12323'
c Var 'aux1794' direct represents '0' with '12323'
c Var 'aux1794' order represents '1' with '12324'
-12323 12324 0
c Var 'aux1794' direct represents '1' with '12325'
12323 -12324 12325 0
-12325 12324 0
-12325 -12323 0
c Var 'aux1794' direct represents '2' with '-12324'
12323 12325 -12324 0
c Encoding variable: aux1795 with domain: int(0..2) (representing constraint ((x_00005_00001=9) + (x_00004_00001=9)))
c Both direct and order encoding.
c Var 'aux1795' order represents '0' with '12326'
c Var 'aux1795' direct represents '0' with '12326'
c Var 'aux1795' order represents '1' with '12327'
-12326 12327 0
c Var 'aux1795' direct represents '1' with '12328'
12326 -12327 12328 0
-12328 12327 0
-12328 -12326 0
c Var 'aux1795' direct represents '2' with '-12327'
12326 12328 -12327 0
c Encoding variable: aux1796 with domain: int(0..2) (representing constraint ((x_00004_00003=9) + (x_00004_00002=9)))
c Both direct and order encoding.
c Var 'aux1796' order represents '0' with '12329'
c Var 'aux1796' direct represents '0' with '12329'
c Var 'aux1796' order represents '1' with '12330'
-12329 12330 0
c Var 'aux1796' direct represents '1' with '12331'
12329 -12330 12331 0
-12331 12330 0
-12331 -12329 0
c Var 'aux1796' direct represents '2' with '-12330'
12329 12331 -12330 0
c Encoding variable: aux1797 with domain: int(0..3) (representing constraint ((x_00006_00003=9) + aux1796))
c Both direct and order encoding.
c Var 'aux1797' order represents '0' with '12332'
c Var 'aux1797' direct represents '0' with '12332'
c Var 'aux1797' order represents '1' with '12333'
-12332 12333 0
c Var 'aux1797' direct represents '1' with '12334'
12332 -12333 12334 0
-12334 12333 0
-12334 -12332 0
c Var 'aux1797' order represents '2' with '12335'
-12333 12335 0
c Var 'aux1797' direct represents '2' with '12336'
12333 -12335 12336 0
-12336 12335 0
-12336 -12333 0
c Var 'aux1797' direct represents '3' with '-12335'
12332 12334 12336 -12335 0
c Encoding variable: aux1798 with domain: int(0..4) (representing constraint (aux1793 + aux1795))
c Both direct and order encoding.
c Var 'aux1798' order represents '0' with '12337'
c Var 'aux1798' direct represents '0' with '12337'
c Var 'aux1798' order represents '1' with '12338'
-12337 12338 0
c Var 'aux1798' direct represents '1' with '12339'
12337 -12338 12339 0
-12339 12338 0
-12339 -12337 0
c Var 'aux1798' order represents '2' with '12340'
-12338 12340 0
c Var 'aux1798' direct represents '2' with '12341'
12338 -12340 12341 0
-12341 12340 0
-12341 -12338 0
c Var 'aux1798' order represents '3' with '12342'
-12340 12342 0
c Var 'aux1798' direct represents '3' with '12343'
12340 -12342 12343 0
-12343 12342 0
-12343 -12340 0
c Var 'aux1798' direct represents '4' with '-12342'
12337 12339 12341 12343 -12342 0
c Encoding variable: aux1799 with domain: int(0..2) (representing constraint ((x_00006_00004=1) + (x_00005_00006=1)))
c Both direct and order encoding.
c Var 'aux1799' order represents '0' with '12344'
c Var 'aux1799' direct represents '0' with '12344'
c Var 'aux1799' order represents '1' with '12345'
-12344 12345 0
c Var 'aux1799' direct represents '1' with '12346'
12344 -12345 12346 0
-12346 12345 0
-12346 -12344 0
c Var 'aux1799' direct represents '2' with '-12345'
12344 12346 -12345 0
c Encoding variable: aux1800 with domain: int(0..2) (representing constraint ((x_00005_00005=1) + (x_00006_00005=1)))
c Both direct and order encoding.
c Var 'aux1800' order represents '0' with '12347'
c Var 'aux1800' direct represents '0' with '12347'
c Var 'aux1800' order represents '1' with '12348'
-12347 12348 0
c Var 'aux1800' direct represents '1' with '12349'
12347 -12348 12349 0
-12349 12348 0
-12349 -12347 0
c Var 'aux1800' direct represents '2' with '-12348'
12347 12349 -12348 0
c Encoding variable: aux1801 with domain: int(0..2) (representing constraint ((x_00005_00004=1) + (x_00004_00004=1)))
c Both direct and order encoding.
c Var 'aux1801' order represents '0' with '12350'
c Var 'aux1801' direct represents '0' with '12350'
c Var 'aux1801' order represents '1' with '12351'
-12350 12351 0
c Var 'aux1801' direct represents '1' with '12352'
12350 -12351 12352 0
-12352 12351 0
-12352 -12350 0
c Var 'aux1801' direct represents '2' with '-12351'
12350 12352 -12351 0
c Encoding variable: aux1802 with domain: int(0..2) (representing constraint ((x_00004_00006=1) + (x_00004_00005=1)))
c Both direct and order encoding.
c Var 'aux1802' order represents '0' with '12353'
c Var 'aux1802' direct represents '0' with '12353'
c Var 'aux1802' order represents '1' with '12354'
-12353 12354 0
c Var 'aux1802' direct represents '1' with '12355'
12353 -12354 12355 0
-12355 12354 0
-12355 -12353 0
c Var 'aux1802' direct represents '2' with '-12354'
12353 12355 -12354 0
c Encoding variable: aux1803 with domain: int(0..3) (representing constraint ((x_00006_00006=1) + aux1802))
c Both direct and order encoding.
c Var 'aux1803' order represents '0' with '12356'
c Var 'aux1803' direct represents '0' with '12356'
c Var 'aux1803' order represents '1' with '12357'
-12356 12357 0
c Var 'aux1803' direct represents '1' with '12358'
12356 -12357 12358 0
-12358 12357 0
-12358 -12356 0
c Var 'aux1803' order represents '2' with '12359'
-12357 12359 0
c Var 'aux1803' direct represents '2' with '12360'
12357 -12359 12360 0
-12360 12359 0
-12360 -12357 0
c Var 'aux1803' direct represents '3' with '-12359'
12356 12358 12360 -12359 0
c Encoding variable: aux1804 with domain: int(0..4) (representing constraint (aux1799 + aux1801))
c Both direct and order encoding.
c Var 'aux1804' order represents '0' with '12361'
c Var 'aux1804' direct represents '0' with '12361'
c Var 'aux1804' order represents '1' with '12362'
-12361 12362 0
c Var 'aux1804' direct represents '1' with '12363'
12361 -12362 12363 0
-12363 12362 0
-12363 -12361 0
c Var 'aux1804' order represents '2' with '12364'
-12362 12364 0
c Var 'aux1804' direct represents '2' with '12365'
12362 -12364 12365 0
-12365 12364 0
-12365 -12362 0
c Var 'aux1804' order represents '3' with '12366'
-12364 12366 0
c Var 'aux1804' direct represents '3' with '12367'
12364 -12366 12367 0
-12367 12366 0
-12367 -12364 0
c Var 'aux1804' direct represents '4' with '-12366'
12361 12363 12365 12367 -12366 0
c Encoding variable: aux1805 with domain: int(0..2) (representing constraint ((x_00006_00004=2) + (x_00005_00006=2)))
c Both direct and order encoding.
c Var 'aux1805' order represents '0' with '12368'
c Var 'aux1805' direct represents '0' with '12368'
c Var 'aux1805' order represents '1' with '12369'
-12368 12369 0
c Var 'aux1805' direct represents '1' with '12370'
12368 -12369 12370 0
-12370 12369 0
-12370 -12368 0
c Var 'aux1805' direct represents '2' with '-12369'
12368 12370 -12369 0
c Encoding variable: aux1806 with domain: int(0..2) (representing constraint ((x_00005_00005=2) + (x_00006_00005=2)))
c Both direct and order encoding.
c Var 'aux1806' order represents '0' with '12371'
c Var 'aux1806' direct represents '0' with '12371'
c Var 'aux1806' order represents '1' with '12372'
-12371 12372 0
c Var 'aux1806' direct represents '1' with '12373'
12371 -12372 12373 0
-12373 12372 0
-12373 -12371 0
c Var 'aux1806' direct represents '2' with '-12372'
12371 12373 -12372 0
c Encoding variable: aux1807 with domain: int(0..2) (representing constraint ((x_00005_00004=2) + (x_00004_00004=2)))
c Both direct and order encoding.
c Var 'aux1807' order represents '0' with '12374'
c Var 'aux1807' direct represents '0' with '12374'
c Var 'aux1807' order represents '1' with '12375'
-12374 12375 0
c Var 'aux1807' direct represents '1' with '12376'
12374 -12375 12376 0
-12376 12375 0
-12376 -12374 0
c Var 'aux1807' direct represents '2' with '-12375'
12374 12376 -12375 0
c Encoding variable: aux1808 with domain: int(0..2) (representing constraint ((x_00004_00006=2) + (x_00004_00005=2)))
c Both direct and order encoding.
c Var 'aux1808' order represents '0' with '12377'
c Var 'aux1808' direct represents '0' with '12377'
c Var 'aux1808' order represents '1' with '12378'
-12377 12378 0
c Var 'aux1808' direct represents '1' with '12379'
12377 -12378 12379 0
-12379 12378 0
-12379 -12377 0
c Var 'aux1808' direct represents '2' with '-12378'
12377 12379 -12378 0
c Encoding variable: aux1809 with domain: int(0..3) (representing constraint ((x_00006_00006=2) + aux1808))
c Both direct and order encoding.
c Var 'aux1809' order represents '0' with '12380'
c Var 'aux1809' direct represents '0' with '12380'
c Var 'aux1809' order represents '1' with '12381'
-12380 12381 0
c Var 'aux1809' direct represents '1' with '12382'
12380 -12381 12382 0
-12382 12381 0
-12382 -12380 0
c Var 'aux1809' order represents '2' with '12383'
-12381 12383 0
c Var 'aux1809' direct represents '2' with '12384'
12381 -12383 12384 0
-12384 12383 0
-12384 -12381 0
c Var 'aux1809' direct represents '3' with '-12383'
12380 12382 12384 -12383 0
c Encoding variable: aux1810 with domain: int(0..4) (representing constraint (aux1805 + aux1807))
c Both direct and order encoding.
c Var 'aux1810' order represents '0' with '12385'
c Var 'aux1810' direct represents '0' with '12385'
c Var 'aux1810' order represents '1' with '12386'
-12385 12386 0
c Var 'aux1810' direct represents '1' with '12387'
12385 -12386 12387 0
-12387 12386 0
-12387 -12385 0
c Var 'aux1810' order represents '2' with '12388'
-12386 12388 0
c Var 'aux1810' direct represents '2' with '12389'
12386 -12388 12389 0
-12389 12388 0
-12389 -12386 0
c Var 'aux1810' order represents '3' with '12390'
-12388 12390 0
c Var 'aux1810' direct represents '3' with '12391'
12388 -12390 12391 0
-12391 12390 0
-12391 -12388 0
c Var 'aux1810' direct represents '4' with '-12390'
12385 12387 12389 12391 -12390 0
c Encoding variable: aux1811 with domain: int(0..2) (representing constraint ((x_00006_00004=3) + (x_00005_00006=3)))
c Both direct and order encoding.
c Var 'aux1811' order represents '0' with '12392'
c Var 'aux1811' direct represents '0' with '12392'
c Var 'aux1811' order represents '1' with '12393'
-12392 12393 0
c Var 'aux1811' direct represents '1' with '12394'
12392 -12393 12394 0
-12394 12393 0
-12394 -12392 0
c Var 'aux1811' direct represents '2' with '-12393'
12392 12394 -12393 0
c Encoding variable: aux1812 with domain: int(0..2) (representing constraint ((x_00005_00005=3) + (x_00006_00005=3)))
c Both direct and order encoding.
c Var 'aux1812' order represents '0' with '12395'
c Var 'aux1812' direct represents '0' with '12395'
c Var 'aux1812' order represents '1' with '12396'
-12395 12396 0
c Var 'aux1812' direct represents '1' with '12397'
12395 -12396 12397 0
-12397 12396 0
-12397 -12395 0
c Var 'aux1812' direct represents '2' with '-12396'
12395 12397 -12396 0
c Encoding variable: aux1813 with domain: int(0..2) (representing constraint ((x_00005_00004=3) + (x_00004_00004=3)))
c Both direct and order encoding.
c Var 'aux1813' order represents '0' with '12398'
c Var 'aux1813' direct represents '0' with '12398'
c Var 'aux1813' order represents '1' with '12399'
-12398 12399 0
c Var 'aux1813' direct represents '1' with '12400'
12398 -12399 12400 0
-12400 12399 0
-12400 -12398 0
c Var 'aux1813' direct represents '2' with '-12399'
12398 12400 -12399 0
c Encoding variable: aux1814 with domain: int(0..2) (representing constraint ((x_00004_00006=3) + (x_00004_00005=3)))
c Both direct and order encoding.
c Var 'aux1814' order represents '0' with '12401'
c Var 'aux1814' direct represents '0' with '12401'
c Var 'aux1814' order represents '1' with '12402'
-12401 12402 0
c Var 'aux1814' direct represents '1' with '12403'
12401 -12402 12403 0
-12403 12402 0
-12403 -12401 0
c Var 'aux1814' direct represents '2' with '-12402'
12401 12403 -12402 0
c Encoding variable: aux1815 with domain: int(0..3) (representing constraint ((x_00006_00006=3) + aux1814))
c Both direct and order encoding.
c Var 'aux1815' order represents '0' with '12404'
c Var 'aux1815' direct represents '0' with '12404'
c Var 'aux1815' order represents '1' with '12405'
-12404 12405 0
c Var 'aux1815' direct represents '1' with '12406'
12404 -12405 12406 0
-12406 12405 0
-12406 -12404 0
c Var 'aux1815' order represents '2' with '12407'
-12405 12407 0
c Var 'aux1815' direct represents '2' with '12408'
12405 -12407 12408 0
-12408 12407 0
-12408 -12405 0
c Var 'aux1815' direct represents '3' with '-12407'
12404 12406 12408 -12407 0
c Encoding variable: aux1816 with domain: int(0..4) (representing constraint (aux1811 + aux1813))
c Both direct and order encoding.
c Var 'aux1816' order represents '0' with '12409'
c Var 'aux1816' direct represents '0' with '12409'
c Var 'aux1816' order represents '1' with '12410'
-12409 12410 0
c Var 'aux1816' direct represents '1' with '12411'
12409 -12410 12411 0
-12411 12410 0
-12411 -12409 0
c Var 'aux1816' order represents '2' with '12412'
-12410 12412 0
c Var 'aux1816' direct represents '2' with '12413'
12410 -12412 12413 0
-12413 12412 0
-12413 -12410 0
c Var 'aux1816' order represents '3' with '12414'
-12412 12414 0
c Var 'aux1816' direct represents '3' with '12415'
12412 -12414 12415 0
-12415 12414 0
-12415 -12412 0
c Var 'aux1816' direct represents '4' with '-12414'
12409 12411 12413 12415 -12414 0
c Encoding variable: aux1817 with domain: int(0..2) (representing constraint ((x_00006_00004=4) + (x_00005_00006=4)))
c Both direct and order encoding.
c Var 'aux1817' order represents '0' with '12416'
c Var 'aux1817' direct represents '0' with '12416'
c Var 'aux1817' order represents '1' with '12417'
-12416 12417 0
c Var 'aux1817' direct represents '1' with '12418'
12416 -12417 12418 0
-12418 12417 0
-12418 -12416 0
c Var 'aux1817' direct represents '2' with '-12417'
12416 12418 -12417 0
c Encoding variable: aux1818 with domain: int(0..2) (representing constraint ((x_00005_00005=4) + (x_00006_00005=4)))
c Both direct and order encoding.
c Var 'aux1818' order represents '0' with '12419'
c Var 'aux1818' direct represents '0' with '12419'
c Var 'aux1818' order represents '1' with '12420'
-12419 12420 0
c Var 'aux1818' direct represents '1' with '12421'
12419 -12420 12421 0
-12421 12420 0
-12421 -12419 0
c Var 'aux1818' direct represents '2' with '-12420'
12419 12421 -12420 0
c Encoding variable: aux1819 with domain: int(0..2) (representing constraint ((x_00005_00004=4) + (x_00004_00004=4)))
c Both direct and order encoding.
c Var 'aux1819' order represents '0' with '12422'
c Var 'aux1819' direct represents '0' with '12422'
c Var 'aux1819' order represents '1' with '12423'
-12422 12423 0
c Var 'aux1819' direct represents '1' with '12424'
12422 -12423 12424 0
-12424 12423 0
-12424 -12422 0
c Var 'aux1819' direct represents '2' with '-12423'
12422 12424 -12423 0
c Encoding variable: aux1820 with domain: int(0..2) (representing constraint ((x_00004_00006=4) + (x_00004_00005=4)))
c Both direct and order encoding.
c Var 'aux1820' order represents '0' with '12425'
c Var 'aux1820' direct represents '0' with '12425'
c Var 'aux1820' order represents '1' with '12426'
-12425 12426 0
c Var 'aux1820' direct represents '1' with '12427'
12425 -12426 12427 0
-12427 12426 0
-12427 -12425 0
c Var 'aux1820' direct represents '2' with '-12426'
12425 12427 -12426 0
c Encoding variable: aux1821 with domain: int(0..3) (representing constraint ((x_00006_00006=4) + aux1820))
c Both direct and order encoding.
c Var 'aux1821' order represents '0' with '12428'
c Var 'aux1821' direct represents '0' with '12428'
c Var 'aux1821' order represents '1' with '12429'
-12428 12429 0
c Var 'aux1821' direct represents '1' with '12430'
12428 -12429 12430 0
-12430 12429 0
-12430 -12428 0
c Var 'aux1821' order represents '2' with '12431'
-12429 12431 0
c Var 'aux1821' direct represents '2' with '12432'
12429 -12431 12432 0
-12432 12431 0
-12432 -12429 0
c Var 'aux1821' direct represents '3' with '-12431'
12428 12430 12432 -12431 0
c Encoding variable: aux1822 with domain: int(0..4) (representing constraint (aux1817 + aux1819))
c Both direct and order encoding.
c Var 'aux1822' order represents '0' with '12433'
c Var 'aux1822' direct represents '0' with '12433'
c Var 'aux1822' order represents '1' with '12434'
-12433 12434 0
c Var 'aux1822' direct represents '1' with '12435'
12433 -12434 12435 0
-12435 12434 0
-12435 -12433 0
c Var 'aux1822' order represents '2' with '12436'
-12434 12436 0
c Var 'aux1822' direct represents '2' with '12437'
12434 -12436 12437 0
-12437 12436 0
-12437 -12434 0
c Var 'aux1822' order represents '3' with '12438'
-12436 12438 0
c Var 'aux1822' direct represents '3' with '12439'
12436 -12438 12439 0
-12439 12438 0
-12439 -12436 0
c Var 'aux1822' direct represents '4' with '-12438'
12433 12435 12437 12439 -12438 0
c Encoding variable: aux1823 with domain: int(0..2) (representing constraint ((x_00006_00004=5) + (x_00005_00006=5)))
c Both direct and order encoding.
c Var 'aux1823' order represents '0' with '12440'
c Var 'aux1823' direct represents '0' with '12440'
c Var 'aux1823' order represents '1' with '12441'
-12440 12441 0
c Var 'aux1823' direct represents '1' with '12442'
12440 -12441 12442 0
-12442 12441 0
-12442 -12440 0
c Var 'aux1823' direct represents '2' with '-12441'
12440 12442 -12441 0
c Encoding variable: aux1824 with domain: int(0..2) (representing constraint ((x_00005_00005=5) + (x_00006_00005=5)))
c Both direct and order encoding.
c Var 'aux1824' order represents '0' with '12443'
c Var 'aux1824' direct represents '0' with '12443'
c Var 'aux1824' order represents '1' with '12444'
-12443 12444 0
c Var 'aux1824' direct represents '1' with '12445'
12443 -12444 12445 0
-12445 12444 0
-12445 -12443 0
c Var 'aux1824' direct represents '2' with '-12444'
12443 12445 -12444 0
c Encoding variable: aux1825 with domain: int(0..2) (representing constraint ((x_00005_00004=5) + (x_00004_00004=5)))
c Both direct and order encoding.
c Var 'aux1825' order represents '0' with '12446'
c Var 'aux1825' direct represents '0' with '12446'
c Var 'aux1825' order represents '1' with '12447'
-12446 12447 0
c Var 'aux1825' direct represents '1' with '12448'
12446 -12447 12448 0
-12448 12447 0
-12448 -12446 0
c Var 'aux1825' direct represents '2' with '-12447'
12446 12448 -12447 0
c Encoding variable: aux1826 with domain: int(0..2) (representing constraint ((x_00004_00006=5) + (x_00004_00005=5)))
c Both direct and order encoding.
c Var 'aux1826' order represents '0' with '12449'
c Var 'aux1826' direct represents '0' with '12449'
c Var 'aux1826' order represents '1' with '12450'
-12449 12450 0
c Var 'aux1826' direct represents '1' with '12451'
12449 -12450 12451 0
-12451 12450 0
-12451 -12449 0
c Var 'aux1826' direct represents '2' with '-12450'
12449 12451 -12450 0
c Encoding variable: aux1827 with domain: int(0..3) (representing constraint ((x_00006_00006=5) + aux1826))
c Both direct and order encoding.
c Var 'aux1827' order represents '0' with '12452'
c Var 'aux1827' direct represents '0' with '12452'
c Var 'aux1827' order represents '1' with '12453'
-12452 12453 0
c Var 'aux1827' direct represents '1' with '12454'
12452 -12453 12454 0
-12454 12453 0
-12454 -12452 0
c Var 'aux1827' order represents '2' with '12455'
-12453 12455 0
c Var 'aux1827' direct represents '2' with '12456'
12453 -12455 12456 0
-12456 12455 0
-12456 -12453 0
c Var 'aux1827' direct represents '3' with '-12455'
12452 12454 12456 -12455 0
c Encoding variable: aux1828 with domain: int(0..4) (representing constraint (aux1823 + aux1825))
c Both direct and order encoding.
c Var 'aux1828' order represents '0' with '12457'
c Var 'aux1828' direct represents '0' with '12457'
c Var 'aux1828' order represents '1' with '12458'
-12457 12458 0
c Var 'aux1828' direct represents '1' with '12459'
12457 -12458 12459 0
-12459 12458 0
-12459 -12457 0
c Var 'aux1828' order represents '2' with '12460'
-12458 12460 0
c Var 'aux1828' direct represents '2' with '12461'
12458 -12460 12461 0
-12461 12460 0
-12461 -12458 0
c Var 'aux1828' order represents '3' with '12462'
-12460 12462 0
c Var 'aux1828' direct represents '3' with '12463'
12460 -12462 12463 0
-12463 12462 0
-12463 -12460 0
c Var 'aux1828' direct represents '4' with '-12462'
12457 12459 12461 12463 -12462 0
c Encoding variable: aux1829 with domain: int(0..2) (representing constraint ((x_00006_00004=6) + (x_00005_00006=6)))
c Both direct and order encoding.
c Var 'aux1829' order represents '0' with '12464'
c Var 'aux1829' direct represents '0' with '12464'
c Var 'aux1829' order represents '1' with '12465'
-12464 12465 0
c Var 'aux1829' direct represents '1' with '12466'
12464 -12465 12466 0
-12466 12465 0
-12466 -12464 0
c Var 'aux1829' direct represents '2' with '-12465'
12464 12466 -12465 0
c Encoding variable: aux1830 with domain: int(0..2) (representing constraint ((x_00005_00005=6) + (x_00006_00005=6)))
c Both direct and order encoding.
c Var 'aux1830' order represents '0' with '12467'
c Var 'aux1830' direct represents '0' with '12467'
c Var 'aux1830' order represents '1' with '12468'
-12467 12468 0
c Var 'aux1830' direct represents '1' with '12469'
12467 -12468 12469 0
-12469 12468 0
-12469 -12467 0
c Var 'aux1830' direct represents '2' with '-12468'
12467 12469 -12468 0
c Encoding variable: aux1831 with domain: int(0..2) (representing constraint ((x_00005_00004=6) + (x_00004_00004=6)))
c Both direct and order encoding.
c Var 'aux1831' order represents '0' with '12470'
c Var 'aux1831' direct represents '0' with '12470'
c Var 'aux1831' order represents '1' with '12471'
-12470 12471 0
c Var 'aux1831' direct represents '1' with '12472'
12470 -12471 12472 0
-12472 12471 0
-12472 -12470 0
c Var 'aux1831' direct represents '2' with '-12471'
12470 12472 -12471 0
c Encoding variable: aux1832 with domain: int(0..2) (representing constraint ((x_00004_00006=6) + (x_00004_00005=6)))
c Both direct and order encoding.
c Var 'aux1832' order represents '0' with '12473'
c Var 'aux1832' direct represents '0' with '12473'
c Var 'aux1832' order represents '1' with '12474'
-12473 12474 0
c Var 'aux1832' direct represents '1' with '12475'
12473 -12474 12475 0
-12475 12474 0
-12475 -12473 0
c Var 'aux1832' direct represents '2' with '-12474'
12473 12475 -12474 0
c Encoding variable: aux1833 with domain: int(0..3) (representing constraint ((x_00006_00006=6) + aux1832))
c Both direct and order encoding.
c Var 'aux1833' order represents '0' with '12476'
c Var 'aux1833' direct represents '0' with '12476'
c Var 'aux1833' order represents '1' with '12477'
-12476 12477 0
c Var 'aux1833' direct represents '1' with '12478'
12476 -12477 12478 0
-12478 12477 0
-12478 -12476 0
c Var 'aux1833' order represents '2' with '12479'
-12477 12479 0
c Var 'aux1833' direct represents '2' with '12480'
12477 -12479 12480 0
-12480 12479 0
-12480 -12477 0
c Var 'aux1833' direct represents '3' with '-12479'
12476 12478 12480 -12479 0
c Encoding variable: aux1834 with domain: int(0..4) (representing constraint (aux1829 + aux1831))
c Both direct and order encoding.
c Var 'aux1834' order represents '0' with '12481'
c Var 'aux1834' direct represents '0' with '12481'
c Var 'aux1834' order represents '1' with '12482'
-12481 12482 0
c Var 'aux1834' direct represents '1' with '12483'
12481 -12482 12483 0
-12483 12482 0
-12483 -12481 0
c Var 'aux1834' order represents '2' with '12484'
-12482 12484 0
c Var 'aux1834' direct represents '2' with '12485'
12482 -12484 12485 0
-12485 12484 0
-12485 -12482 0
c Var 'aux1834' order represents '3' with '12486'
-12484 12486 0
c Var 'aux1834' direct represents '3' with '12487'
12484 -12486 12487 0
-12487 12486 0
-12487 -12484 0
c Var 'aux1834' direct represents '4' with '-12486'
12481 12483 12485 12487 -12486 0
c Encoding variable: aux1835 with domain: int(0..2) (representing constraint ((x_00006_00004=7) + (x_00005_00006=7)))
c Both direct and order encoding.
c Var 'aux1835' order represents '0' with '12488'
c Var 'aux1835' direct represents '0' with '12488'
c Var 'aux1835' order represents '1' with '12489'
-12488 12489 0
c Var 'aux1835' direct represents '1' with '12490'
12488 -12489 12490 0
-12490 12489 0
-12490 -12488 0
c Var 'aux1835' direct represents '2' with '-12489'
12488 12490 -12489 0
c Encoding variable: aux1836 with domain: int(0..2) (representing constraint ((x_00005_00005=7) + (x_00006_00005=7)))
c Both direct and order encoding.
c Var 'aux1836' order represents '0' with '12491'
c Var 'aux1836' direct represents '0' with '12491'
c Var 'aux1836' order represents '1' with '12492'
-12491 12492 0
c Var 'aux1836' direct represents '1' with '12493'
12491 -12492 12493 0
-12493 12492 0
-12493 -12491 0
c Var 'aux1836' direct represents '2' with '-12492'
12491 12493 -12492 0
c Encoding variable: aux1837 with domain: int(0..2) (representing constraint ((x_00005_00004=7) + (x_00004_00004=7)))
c Both direct and order encoding.
c Var 'aux1837' order represents '0' with '12494'
c Var 'aux1837' direct represents '0' with '12494'
c Var 'aux1837' order represents '1' with '12495'
-12494 12495 0
c Var 'aux1837' direct represents '1' with '12496'
12494 -12495 12496 0
-12496 12495 0
-12496 -12494 0
c Var 'aux1837' direct represents '2' with '-12495'
12494 12496 -12495 0
c Encoding variable: aux1838 with domain: int(0..2) (representing constraint ((x_00004_00006=7) + (x_00004_00005=7)))
c Both direct and order encoding.
c Var 'aux1838' order represents '0' with '12497'
c Var 'aux1838' direct represents '0' with '12497'
c Var 'aux1838' order represents '1' with '12498'
-12497 12498 0
c Var 'aux1838' direct represents '1' with '12499'
12497 -12498 12499 0
-12499 12498 0
-12499 -12497 0
c Var 'aux1838' direct represents '2' with '-12498'
12497 12499 -12498 0
c Encoding variable: aux1839 with domain: int(0..3) (representing constraint ((x_00006_00006=7) + aux1838))
c Both direct and order encoding.
c Var 'aux1839' order represents '0' with '12500'
c Var 'aux1839' direct represents '0' with '12500'
c Var 'aux1839' order represents '1' with '12501'
-12500 12501 0
c Var 'aux1839' direct represents '1' with '12502'
12500 -12501 12502 0
-12502 12501 0
-12502 -12500 0
c Var 'aux1839' order represents '2' with '12503'
-12501 12503 0
c Var 'aux1839' direct represents '2' with '12504'
12501 -12503 12504 0
-12504 12503 0
-12504 -12501 0
c Var 'aux1839' direct represents '3' with '-12503'
12500 12502 12504 -12503 0
c Encoding variable: aux1840 with domain: int(0..4) (representing constraint (aux1835 + aux1837))
c Both direct and order encoding.
c Var 'aux1840' order represents '0' with '12505'
c Var 'aux1840' direct represents '0' with '12505'
c Var 'aux1840' order represents '1' with '12506'
-12505 12506 0
c Var 'aux1840' direct represents '1' with '12507'
12505 -12506 12507 0
-12507 12506 0
-12507 -12505 0
c Var 'aux1840' order represents '2' with '12508'
-12506 12508 0
c Var 'aux1840' direct represents '2' with '12509'
12506 -12508 12509 0
-12509 12508 0
-12509 -12506 0
c Var 'aux1840' order represents '3' with '12510'
-12508 12510 0
c Var 'aux1840' direct represents '3' with '12511'
12508 -12510 12511 0
-12511 12510 0
-12511 -12508 0
c Var 'aux1840' direct represents '4' with '-12510'
12505 12507 12509 12511 -12510 0
c Encoding variable: aux1841 with domain: int(0..2) (representing constraint ((x_00006_00004=8) + (x_00005_00006=8)))
c Both direct and order encoding.
c Var 'aux1841' order represents '0' with '12512'
c Var 'aux1841' direct represents '0' with '12512'
c Var 'aux1841' order represents '1' with '12513'
-12512 12513 0
c Var 'aux1841' direct represents '1' with '12514'
12512 -12513 12514 0
-12514 12513 0
-12514 -12512 0
c Var 'aux1841' direct represents '2' with '-12513'
12512 12514 -12513 0
c Encoding variable: aux1842 with domain: int(0..2) (representing constraint ((x_00005_00005=8) + (x_00006_00005=8)))
c Both direct and order encoding.
c Var 'aux1842' order represents '0' with '12515'
c Var 'aux1842' direct represents '0' with '12515'
c Var 'aux1842' order represents '1' with '12516'
-12515 12516 0
c Var 'aux1842' direct represents '1' with '12517'
12515 -12516 12517 0
-12517 12516 0
-12517 -12515 0
c Var 'aux1842' direct represents '2' with '-12516'
12515 12517 -12516 0
c Encoding variable: aux1843 with domain: int(0..2) (representing constraint ((x_00005_00004=8) + (x_00004_00004=8)))
c Both direct and order encoding.
c Var 'aux1843' order represents '0' with '12518'
c Var 'aux1843' direct represents '0' with '12518'
c Var 'aux1843' order represents '1' with '12519'
-12518 12519 0
c Var 'aux1843' direct represents '1' with '12520'
12518 -12519 12520 0
-12520 12519 0
-12520 -12518 0
c Var 'aux1843' direct represents '2' with '-12519'
12518 12520 -12519 0
c Encoding variable: aux1844 with domain: int(0..2) (representing constraint ((x_00004_00006=8) + (x_00004_00005=8)))
c Both direct and order encoding.
c Var 'aux1844' order represents '0' with '12521'
c Var 'aux1844' direct represents '0' with '12521'
c Var 'aux1844' order represents '1' with '12522'
-12521 12522 0
c Var 'aux1844' direct represents '1' with '12523'
12521 -12522 12523 0
-12523 12522 0
-12523 -12521 0
c Var 'aux1844' direct represents '2' with '-12522'
12521 12523 -12522 0
c Encoding variable: aux1845 with domain: int(0..3) (representing constraint ((x_00006_00006=8) + aux1844))
c Both direct and order encoding.
c Var 'aux1845' order represents '0' with '12524'
c Var 'aux1845' direct represents '0' with '12524'
c Var 'aux1845' order represents '1' with '12525'
-12524 12525 0
c Var 'aux1845' direct represents '1' with '12526'
12524 -12525 12526 0
-12526 12525 0
-12526 -12524 0
c Var 'aux1845' order represents '2' with '12527'
-12525 12527 0
c Var 'aux1845' direct represents '2' with '12528'
12525 -12527 12528 0
-12528 12527 0
-12528 -12525 0
c Var 'aux1845' direct represents '3' with '-12527'
12524 12526 12528 -12527 0
c Encoding variable: aux1846 with domain: int(0..4) (representing constraint (aux1841 + aux1843))
c Both direct and order encoding.
c Var 'aux1846' order represents '0' with '12529'
c Var 'aux1846' direct represents '0' with '12529'
c Var 'aux1846' order represents '1' with '12530'
-12529 12530 0
c Var 'aux1846' direct represents '1' with '12531'
12529 -12530 12531 0
-12531 12530 0
-12531 -12529 0
c Var 'aux1846' order represents '2' with '12532'
-12530 12532 0
c Var 'aux1846' direct represents '2' with '12533'
12530 -12532 12533 0
-12533 12532 0
-12533 -12530 0
c Var 'aux1846' order represents '3' with '12534'
-12532 12534 0
c Var 'aux1846' direct represents '3' with '12535'
12532 -12534 12535 0
-12535 12534 0
-12535 -12532 0
c Var 'aux1846' direct represents '4' with '-12534'
12529 12531 12533 12535 -12534 0
c Encoding variable: aux1847 with domain: int(0..2) (representing constraint ((x_00006_00004=9) + (x_00005_00006=9)))
c Both direct and order encoding.
c Var 'aux1847' order represents '0' with '12536'
c Var 'aux1847' direct represents '0' with '12536'
c Var 'aux1847' order represents '1' with '12537'
-12536 12537 0
c Var 'aux1847' direct represents '1' with '12538'
12536 -12537 12538 0
-12538 12537 0
-12538 -12536 0
c Var 'aux1847' direct represents '2' with '-12537'
12536 12538 -12537 0
c Encoding variable: aux1848 with domain: int(0..2) (representing constraint ((x_00005_00005=9) + (x_00006_00005=9)))
c Both direct and order encoding.
c Var 'aux1848' order represents '0' with '12539'
c Var 'aux1848' direct represents '0' with '12539'
c Var 'aux1848' order represents '1' with '12540'
-12539 12540 0
c Var 'aux1848' direct represents '1' with '12541'
12539 -12540 12541 0
-12541 12540 0
-12541 -12539 0
c Var 'aux1848' direct represents '2' with '-12540'
12539 12541 -12540 0
c Encoding variable: aux1849 with domain: int(0..2) (representing constraint ((x_00005_00004=9) + (x_00004_00004=9)))
c Both direct and order encoding.
c Var 'aux1849' order represents '0' with '12542'
c Var 'aux1849' direct represents '0' with '12542'
c Var 'aux1849' order represents '1' with '12543'
-12542 12543 0
c Var 'aux1849' direct represents '1' with '12544'
12542 -12543 12544 0
-12544 12543 0
-12544 -12542 0
c Var 'aux1849' direct represents '2' with '-12543'
12542 12544 -12543 0
c Encoding variable: aux1850 with domain: int(0..2) (representing constraint ((x_00004_00006=9) + (x_00004_00005=9)))
c Both direct and order encoding.
c Var 'aux1850' order represents '0' with '12545'
c Var 'aux1850' direct represents '0' with '12545'
c Var 'aux1850' order represents '1' with '12546'
-12545 12546 0
c Var 'aux1850' direct represents '1' with '12547'
12545 -12546 12547 0
-12547 12546 0
-12547 -12545 0
c Var 'aux1850' direct represents '2' with '-12546'
12545 12547 -12546 0
c Encoding variable: aux1851 with domain: int(0..3) (representing constraint ((x_00006_00006=9) + aux1850))
c Both direct and order encoding.
c Var 'aux1851' order represents '0' with '12548'
c Var 'aux1851' direct represents '0' with '12548'
c Var 'aux1851' order represents '1' with '12549'
-12548 12549 0
c Var 'aux1851' direct represents '1' with '12550'
12548 -12549 12550 0
-12550 12549 0
-12550 -12548 0
c Var 'aux1851' order represents '2' with '12551'
-12549 12551 0
c Var 'aux1851' direct represents '2' with '12552'
12549 -12551 12552 0
-12552 12551 0
-12552 -12549 0
c Var 'aux1851' direct represents '3' with '-12551'
12548 12550 12552 -12551 0
c Encoding variable: aux1852 with domain: int(0..4) (representing constraint (aux1847 + aux1849))
c Both direct and order encoding.
c Var 'aux1852' order represents '0' with '12553'
c Var 'aux1852' direct represents '0' with '12553'
c Var 'aux1852' order represents '1' with '12554'
-12553 12554 0
c Var 'aux1852' direct represents '1' with '12555'
12553 -12554 12555 0
-12555 12554 0
-12555 -12553 0
c Var 'aux1852' order represents '2' with '12556'
-12554 12556 0
c Var 'aux1852' direct represents '2' with '12557'
12554 -12556 12557 0
-12557 12556 0
-12557 -12554 0
c Var 'aux1852' order represents '3' with '12558'
-12556 12558 0
c Var 'aux1852' direct represents '3' with '12559'
12556 -12558 12559 0
-12559 12558 0
-12559 -12556 0
c Var 'aux1852' direct represents '4' with '-12558'
12553 12555 12557 12559 -12558 0
c Encoding variable: aux1853 with domain: int(0..2) (representing constraint ((x_00006_00007=1) + (x_00005_00009=1)))
c Both direct and order encoding.
c Var 'aux1853' order represents '0' with '12560'
c Var 'aux1853' direct represents '0' with '12560'
c Var 'aux1853' order represents '1' with '12561'
-12560 12561 0
c Var 'aux1853' direct represents '1' with '12562'
12560 -12561 12562 0
-12562 12561 0
-12562 -12560 0
c Var 'aux1853' direct represents '2' with '-12561'
12560 12562 -12561 0
c Encoding variable: aux1854 with domain: int(0..2) (representing constraint ((x_00005_00008=1) + (x_00006_00008=1)))
c Both direct and order encoding.
c Var 'aux1854' order represents '0' with '12563'
c Var 'aux1854' direct represents '0' with '12563'
c Var 'aux1854' order represents '1' with '12564'
-12563 12564 0
c Var 'aux1854' direct represents '1' with '12565'
12563 -12564 12565 0
-12565 12564 0
-12565 -12563 0
c Var 'aux1854' direct represents '2' with '-12564'
12563 12565 -12564 0
c Encoding variable: aux1855 with domain: int(0..2) (representing constraint ((x_00005_00007=1) + (x_00004_00007=1)))
c Both direct and order encoding.
c Var 'aux1855' order represents '0' with '12566'
c Var 'aux1855' direct represents '0' with '12566'
c Var 'aux1855' order represents '1' with '12567'
-12566 12567 0
c Var 'aux1855' direct represents '1' with '12568'
12566 -12567 12568 0
-12568 12567 0
-12568 -12566 0
c Var 'aux1855' direct represents '2' with '-12567'
12566 12568 -12567 0
c Encoding variable: aux1856 with domain: int(0..2) (representing constraint ((x_00004_00009=1) + (x_00004_00008=1)))
c Both direct and order encoding.
c Var 'aux1856' order represents '0' with '12569'
c Var 'aux1856' direct represents '0' with '12569'
c Var 'aux1856' order represents '1' with '12570'
-12569 12570 0
c Var 'aux1856' direct represents '1' with '12571'
12569 -12570 12571 0
-12571 12570 0
-12571 -12569 0
c Var 'aux1856' direct represents '2' with '-12570'
12569 12571 -12570 0
c Encoding variable: aux1857 with domain: int(0..3) (representing constraint ((x_00006_00009=1) + aux1856))
c Both direct and order encoding.
c Var 'aux1857' order represents '0' with '12572'
c Var 'aux1857' direct represents '0' with '12572'
c Var 'aux1857' order represents '1' with '12573'
-12572 12573 0
c Var 'aux1857' direct represents '1' with '12574'
12572 -12573 12574 0
-12574 12573 0
-12574 -12572 0
c Var 'aux1857' order represents '2' with '12575'
-12573 12575 0
c Var 'aux1857' direct represents '2' with '12576'
12573 -12575 12576 0
-12576 12575 0
-12576 -12573 0
c Var 'aux1857' direct represents '3' with '-12575'
12572 12574 12576 -12575 0
c Encoding variable: aux1858 with domain: int(0..4) (representing constraint (aux1853 + aux1855))
c Both direct and order encoding.
c Var 'aux1858' order represents '0' with '12577'
c Var 'aux1858' direct represents '0' with '12577'
c Var 'aux1858' order represents '1' with '12578'
-12577 12578 0
c Var 'aux1858' direct represents '1' with '12579'
12577 -12578 12579 0
-12579 12578 0
-12579 -12577 0
c Var 'aux1858' order represents '2' with '12580'
-12578 12580 0
c Var 'aux1858' direct represents '2' with '12581'
12578 -12580 12581 0
-12581 12580 0
-12581 -12578 0
c Var 'aux1858' order represents '3' with '12582'
-12580 12582 0
c Var 'aux1858' direct represents '3' with '12583'
12580 -12582 12583 0
-12583 12582 0
-12583 -12580 0
c Var 'aux1858' direct represents '4' with '-12582'
12577 12579 12581 12583 -12582 0
c Encoding variable: aux1859 with domain: int(0..2) (representing constraint ((x_00006_00007=2) + (x_00005_00009=2)))
c Both direct and order encoding.
c Var 'aux1859' order represents '0' with '12584'
c Var 'aux1859' direct represents '0' with '12584'
c Var 'aux1859' order represents '1' with '12585'
-12584 12585 0
c Var 'aux1859' direct represents '1' with '12586'
12584 -12585 12586 0
-12586 12585 0
-12586 -12584 0
c Var 'aux1859' direct represents '2' with '-12585'
12584 12586 -12585 0
c Encoding variable: aux1860 with domain: int(0..2) (representing constraint ((x_00005_00008=2) + (x_00006_00008=2)))
c Both direct and order encoding.
c Var 'aux1860' order represents '0' with '12587'
c Var 'aux1860' direct represents '0' with '12587'
c Var 'aux1860' order represents '1' with '12588'
-12587 12588 0
c Var 'aux1860' direct represents '1' with '12589'
12587 -12588 12589 0
-12589 12588 0
-12589 -12587 0
c Var 'aux1860' direct represents '2' with '-12588'
12587 12589 -12588 0
c Encoding variable: aux1861 with domain: int(0..2) (representing constraint ((x_00005_00007=2) + (x_00004_00007=2)))
c Both direct and order encoding.
c Var 'aux1861' order represents '0' with '12590'
c Var 'aux1861' direct represents '0' with '12590'
c Var 'aux1861' order represents '1' with '12591'
-12590 12591 0
c Var 'aux1861' direct represents '1' with '12592'
12590 -12591 12592 0
-12592 12591 0
-12592 -12590 0
c Var 'aux1861' direct represents '2' with '-12591'
12590 12592 -12591 0
c Encoding variable: aux1862 with domain: int(0..2) (representing constraint ((x_00004_00009=2) + (x_00004_00008=2)))
c Both direct and order encoding.
c Var 'aux1862' order represents '0' with '12593'
c Var 'aux1862' direct represents '0' with '12593'
c Var 'aux1862' order represents '1' with '12594'
-12593 12594 0
c Var 'aux1862' direct represents '1' with '12595'
12593 -12594 12595 0
-12595 12594 0
-12595 -12593 0
c Var 'aux1862' direct represents '2' with '-12594'
12593 12595 -12594 0
c Encoding variable: aux1863 with domain: int(0..3) (representing constraint ((x_00006_00009=2) + aux1862))
c Both direct and order encoding.
c Var 'aux1863' order represents '0' with '12596'
c Var 'aux1863' direct represents '0' with '12596'
c Var 'aux1863' order represents '1' with '12597'
-12596 12597 0
c Var 'aux1863' direct represents '1' with '12598'
12596 -12597 12598 0
-12598 12597 0
-12598 -12596 0
c Var 'aux1863' order represents '2' with '12599'
-12597 12599 0
c Var 'aux1863' direct represents '2' with '12600'
12597 -12599 12600 0
-12600 12599 0
-12600 -12597 0
c Var 'aux1863' direct represents '3' with '-12599'
12596 12598 12600 -12599 0
c Encoding variable: aux1864 with domain: int(0..4) (representing constraint (aux1859 + aux1861))
c Both direct and order encoding.
c Var 'aux1864' order represents '0' with '12601'
c Var 'aux1864' direct represents '0' with '12601'
c Var 'aux1864' order represents '1' with '12602'
-12601 12602 0
c Var 'aux1864' direct represents '1' with '12603'
12601 -12602 12603 0
-12603 12602 0
-12603 -12601 0
c Var 'aux1864' order represents '2' with '12604'
-12602 12604 0
c Var 'aux1864' direct represents '2' with '12605'
12602 -12604 12605 0
-12605 12604 0
-12605 -12602 0
c Var 'aux1864' order represents '3' with '12606'
-12604 12606 0
c Var 'aux1864' direct represents '3' with '12607'
12604 -12606 12607 0
-12607 12606 0
-12607 -12604 0
c Var 'aux1864' direct represents '4' with '-12606'
12601 12603 12605 12607 -12606 0
c Encoding variable: aux1865 with domain: int(0..2) (representing constraint ((x_00006_00007=3) + (x_00005_00009=3)))
c Both direct and order encoding.
c Var 'aux1865' order represents '0' with '12608'
c Var 'aux1865' direct represents '0' with '12608'
c Var 'aux1865' order represents '1' with '12609'
-12608 12609 0
c Var 'aux1865' direct represents '1' with '12610'
12608 -12609 12610 0
-12610 12609 0
-12610 -12608 0
c Var 'aux1865' direct represents '2' with '-12609'
12608 12610 -12609 0
c Encoding variable: aux1866 with domain: int(0..2) (representing constraint ((x_00005_00008=3) + (x_00006_00008=3)))
c Both direct and order encoding.
c Var 'aux1866' order represents '0' with '12611'
c Var 'aux1866' direct represents '0' with '12611'
c Var 'aux1866' order represents '1' with '12612'
-12611 12612 0
c Var 'aux1866' direct represents '1' with '12613'
12611 -12612 12613 0
-12613 12612 0
-12613 -12611 0
c Var 'aux1866' direct represents '2' with '-12612'
12611 12613 -12612 0
c Encoding variable: aux1867 with domain: int(0..2) (representing constraint ((x_00005_00007=3) + (x_00004_00007=3)))
c Both direct and order encoding.
c Var 'aux1867' order represents '0' with '12614'
c Var 'aux1867' direct represents '0' with '12614'
c Var 'aux1867' order represents '1' with '12615'
-12614 12615 0
c Var 'aux1867' direct represents '1' with '12616'
12614 -12615 12616 0
-12616 12615 0
-12616 -12614 0
c Var 'aux1867' direct represents '2' with '-12615'
12614 12616 -12615 0
c Encoding variable: aux1868 with domain: int(0..2) (representing constraint ((x_00004_00009=3) + (x_00004_00008=3)))
c Both direct and order encoding.
c Var 'aux1868' order represents '0' with '12617'
c Var 'aux1868' direct represents '0' with '12617'
c Var 'aux1868' order represents '1' with '12618'
-12617 12618 0
c Var 'aux1868' direct represents '1' with '12619'
12617 -12618 12619 0
-12619 12618 0
-12619 -12617 0
c Var 'aux1868' direct represents '2' with '-12618'
12617 12619 -12618 0
c Encoding variable: aux1869 with domain: int(0..3) (representing constraint ((x_00006_00009=3) + aux1868))
c Both direct and order encoding.
c Var 'aux1869' order represents '0' with '12620'
c Var 'aux1869' direct represents '0' with '12620'
c Var 'aux1869' order represents '1' with '12621'
-12620 12621 0
c Var 'aux1869' direct represents '1' with '12622'
12620 -12621 12622 0
-12622 12621 0
-12622 -12620 0
c Var 'aux1869' order represents '2' with '12623'
-12621 12623 0
c Var 'aux1869' direct represents '2' with '12624'
12621 -12623 12624 0
-12624 12623 0
-12624 -12621 0
c Var 'aux1869' direct represents '3' with '-12623'
12620 12622 12624 -12623 0
c Encoding variable: aux1870 with domain: int(0..4) (representing constraint (aux1865 + aux1867))
c Both direct and order encoding.
c Var 'aux1870' order represents '0' with '12625'
c Var 'aux1870' direct represents '0' with '12625'
c Var 'aux1870' order represents '1' with '12626'
-12625 12626 0
c Var 'aux1870' direct represents '1' with '12627'
12625 -12626 12627 0
-12627 12626 0
-12627 -12625 0
c Var 'aux1870' order represents '2' with '12628'
-12626 12628 0
c Var 'aux1870' direct represents '2' with '12629'
12626 -12628 12629 0
-12629 12628 0
-12629 -12626 0
c Var 'aux1870' order represents '3' with '12630'
-12628 12630 0
c Var 'aux1870' direct represents '3' with '12631'
12628 -12630 12631 0
-12631 12630 0
-12631 -12628 0
c Var 'aux1870' direct represents '4' with '-12630'
12625 12627 12629 12631 -12630 0
c Encoding variable: aux1871 with domain: int(0..2) (representing constraint ((x_00006_00007=4) + (x_00005_00009=4)))
c Both direct and order encoding.
c Var 'aux1871' order represents '0' with '12632'
c Var 'aux1871' direct represents '0' with '12632'
c Var 'aux1871' order represents '1' with '12633'
-12632 12633 0
c Var 'aux1871' direct represents '1' with '12634'
12632 -12633 12634 0
-12634 12633 0
-12634 -12632 0
c Var 'aux1871' direct represents '2' with '-12633'
12632 12634 -12633 0
c Encoding variable: aux1872 with domain: int(0..2) (representing constraint ((x_00005_00008=4) + (x_00006_00008=4)))
c Both direct and order encoding.
c Var 'aux1872' order represents '0' with '12635'
c Var 'aux1872' direct represents '0' with '12635'
c Var 'aux1872' order represents '1' with '12636'
-12635 12636 0
c Var 'aux1872' direct represents '1' with '12637'
12635 -12636 12637 0
-12637 12636 0
-12637 -12635 0
c Var 'aux1872' direct represents '2' with '-12636'
12635 12637 -12636 0
c Encoding variable: aux1873 with domain: int(0..2) (representing constraint ((x_00005_00007=4) + (x_00004_00007=4)))
c Both direct and order encoding.
c Var 'aux1873' order represents '0' with '12638'
c Var 'aux1873' direct represents '0' with '12638'
c Var 'aux1873' order represents '1' with '12639'
-12638 12639 0
c Var 'aux1873' direct represents '1' with '12640'
12638 -12639 12640 0
-12640 12639 0
-12640 -12638 0
c Var 'aux1873' direct represents '2' with '-12639'
12638 12640 -12639 0
c Encoding variable: aux1874 with domain: int(0..2) (representing constraint ((x_00004_00009=4) + (x_00004_00008=4)))
c Both direct and order encoding.
c Var 'aux1874' order represents '0' with '12641'
c Var 'aux1874' direct represents '0' with '12641'
c Var 'aux1874' order represents '1' with '12642'
-12641 12642 0
c Var 'aux1874' direct represents '1' with '12643'
12641 -12642 12643 0
-12643 12642 0
-12643 -12641 0
c Var 'aux1874' direct represents '2' with '-12642'
12641 12643 -12642 0
c Encoding variable: aux1875 with domain: int(0..3) (representing constraint ((x_00006_00009=4) + aux1874))
c Both direct and order encoding.
c Var 'aux1875' order represents '0' with '12644'
c Var 'aux1875' direct represents '0' with '12644'
c Var 'aux1875' order represents '1' with '12645'
-12644 12645 0
c Var 'aux1875' direct represents '1' with '12646'
12644 -12645 12646 0
-12646 12645 0
-12646 -12644 0
c Var 'aux1875' order represents '2' with '12647'
-12645 12647 0
c Var 'aux1875' direct represents '2' with '12648'
12645 -12647 12648 0
-12648 12647 0
-12648 -12645 0
c Var 'aux1875' direct represents '3' with '-12647'
12644 12646 12648 -12647 0
c Encoding variable: aux1876 with domain: int(0..4) (representing constraint (aux1871 + aux1873))
c Both direct and order encoding.
c Var 'aux1876' order represents '0' with '12649'
c Var 'aux1876' direct represents '0' with '12649'
c Var 'aux1876' order represents '1' with '12650'
-12649 12650 0
c Var 'aux1876' direct represents '1' with '12651'
12649 -12650 12651 0
-12651 12650 0
-12651 -12649 0
c Var 'aux1876' order represents '2' with '12652'
-12650 12652 0
c Var 'aux1876' direct represents '2' with '12653'
12650 -12652 12653 0
-12653 12652 0
-12653 -12650 0
c Var 'aux1876' order represents '3' with '12654'
-12652 12654 0
c Var 'aux1876' direct represents '3' with '12655'
12652 -12654 12655 0
-12655 12654 0
-12655 -12652 0
c Var 'aux1876' direct represents '4' with '-12654'
12649 12651 12653 12655 -12654 0
c Encoding variable: aux1877 with domain: int(0..2) (representing constraint ((x_00006_00007=5) + (x_00005_00009=5)))
c Both direct and order encoding.
c Var 'aux1877' order represents '0' with '12656'
c Var 'aux1877' direct represents '0' with '12656'
c Var 'aux1877' order represents '1' with '12657'
-12656 12657 0
c Var 'aux1877' direct represents '1' with '12658'
12656 -12657 12658 0
-12658 12657 0
-12658 -12656 0
c Var 'aux1877' direct represents '2' with '-12657'
12656 12658 -12657 0
c Encoding variable: aux1878 with domain: int(0..2) (representing constraint ((x_00005_00008=5) + (x_00006_00008=5)))
c Both direct and order encoding.
c Var 'aux1878' order represents '0' with '12659'
c Var 'aux1878' direct represents '0' with '12659'
c Var 'aux1878' order represents '1' with '12660'
-12659 12660 0
c Var 'aux1878' direct represents '1' with '12661'
12659 -12660 12661 0
-12661 12660 0
-12661 -12659 0
c Var 'aux1878' direct represents '2' with '-12660'
12659 12661 -12660 0
c Encoding variable: aux1879 with domain: int(0..2) (representing constraint ((x_00005_00007=5) + (x_00004_00007=5)))
c Both direct and order encoding.
c Var 'aux1879' order represents '0' with '12662'
c Var 'aux1879' direct represents '0' with '12662'
c Var 'aux1879' order represents '1' with '12663'
-12662 12663 0
c Var 'aux1879' direct represents '1' with '12664'
12662 -12663 12664 0
-12664 12663 0
-12664 -12662 0
c Var 'aux1879' direct represents '2' with '-12663'
12662 12664 -12663 0
c Encoding variable: aux1880 with domain: int(0..2) (representing constraint ((x_00004_00009=5) + (x_00004_00008=5)))
c Both direct and order encoding.
c Var 'aux1880' order represents '0' with '12665'
c Var 'aux1880' direct represents '0' with '12665'
c Var 'aux1880' order represents '1' with '12666'
-12665 12666 0
c Var 'aux1880' direct represents '1' with '12667'
12665 -12666 12667 0
-12667 12666 0
-12667 -12665 0
c Var 'aux1880' direct represents '2' with '-12666'
12665 12667 -12666 0
c Encoding variable: aux1881 with domain: int(0..3) (representing constraint ((x_00006_00009=5) + aux1880))
c Both direct and order encoding.
c Var 'aux1881' order represents '0' with '12668'
c Var 'aux1881' direct represents '0' with '12668'
c Var 'aux1881' order represents '1' with '12669'
-12668 12669 0
c Var 'aux1881' direct represents '1' with '12670'
12668 -12669 12670 0
-12670 12669 0
-12670 -12668 0
c Var 'aux1881' order represents '2' with '12671'
-12669 12671 0
c Var 'aux1881' direct represents '2' with '12672'
12669 -12671 12672 0
-12672 12671 0
-12672 -12669 0
c Var 'aux1881' direct represents '3' with '-12671'
12668 12670 12672 -12671 0
c Encoding variable: aux1882 with domain: int(0..4) (representing constraint (aux1877 + aux1879))
c Both direct and order encoding.
c Var 'aux1882' order represents '0' with '12673'
c Var 'aux1882' direct represents '0' with '12673'
c Var 'aux1882' order represents '1' with '12674'
-12673 12674 0
c Var 'aux1882' direct represents '1' with '12675'
12673 -12674 12675 0
-12675 12674 0
-12675 -12673 0
c Var 'aux1882' order represents '2' with '12676'
-12674 12676 0
c Var 'aux1882' direct represents '2' with '12677'
12674 -12676 12677 0
-12677 12676 0
-12677 -12674 0
c Var 'aux1882' order represents '3' with '12678'
-12676 12678 0
c Var 'aux1882' direct represents '3' with '12679'
12676 -12678 12679 0
-12679 12678 0
-12679 -12676 0
c Var 'aux1882' direct represents '4' with '-12678'
12673 12675 12677 12679 -12678 0
c Encoding variable: aux1883 with domain: int(0..2) (representing constraint ((x_00006_00007=6) + (x_00005_00009=6)))
c Both direct and order encoding.
c Var 'aux1883' order represents '0' with '12680'
c Var 'aux1883' direct represents '0' with '12680'
c Var 'aux1883' order represents '1' with '12681'
-12680 12681 0
c Var 'aux1883' direct represents '1' with '12682'
12680 -12681 12682 0
-12682 12681 0
-12682 -12680 0
c Var 'aux1883' direct represents '2' with '-12681'
12680 12682 -12681 0
c Encoding variable: aux1884 with domain: int(0..2) (representing constraint ((x_00005_00008=6) + (x_00006_00008=6)))
c Both direct and order encoding.
c Var 'aux1884' order represents '0' with '12683'
c Var 'aux1884' direct represents '0' with '12683'
c Var 'aux1884' order represents '1' with '12684'
-12683 12684 0
c Var 'aux1884' direct represents '1' with '12685'
12683 -12684 12685 0
-12685 12684 0
-12685 -12683 0
c Var 'aux1884' direct represents '2' with '-12684'
12683 12685 -12684 0
c Encoding variable: aux1885 with domain: int(0..2) (representing constraint ((x_00005_00007=6) + (x_00004_00007=6)))
c Both direct and order encoding.
c Var 'aux1885' order represents '0' with '12686'
c Var 'aux1885' direct represents '0' with '12686'
c Var 'aux1885' order represents '1' with '12687'
-12686 12687 0
c Var 'aux1885' direct represents '1' with '12688'
12686 -12687 12688 0
-12688 12687 0
-12688 -12686 0
c Var 'aux1885' direct represents '2' with '-12687'
12686 12688 -12687 0
c Encoding variable: aux1886 with domain: int(0..2) (representing constraint ((x_00004_00009=6) + (x_00004_00008=6)))
c Both direct and order encoding.
c Var 'aux1886' order represents '0' with '12689'
c Var 'aux1886' direct represents '0' with '12689'
c Var 'aux1886' order represents '1' with '12690'
-12689 12690 0
c Var 'aux1886' direct represents '1' with '12691'
12689 -12690 12691 0
-12691 12690 0
-12691 -12689 0
c Var 'aux1886' direct represents '2' with '-12690'
12689 12691 -12690 0
c Encoding variable: aux1887 with domain: int(0..3) (representing constraint ((x_00006_00009=6) + aux1886))
c Both direct and order encoding.
c Var 'aux1887' order represents '0' with '12692'
c Var 'aux1887' direct represents '0' with '12692'
c Var 'aux1887' order represents '1' with '12693'
-12692 12693 0
c Var 'aux1887' direct represents '1' with '12694'
12692 -12693 12694 0
-12694 12693 0
-12694 -12692 0
c Var 'aux1887' order represents '2' with '12695'
-12693 12695 0
c Var 'aux1887' direct represents '2' with '12696'
12693 -12695 12696 0
-12696 12695 0
-12696 -12693 0
c Var 'aux1887' direct represents '3' with '-12695'
12692 12694 12696 -12695 0
c Encoding variable: aux1888 with domain: int(0..4) (representing constraint (aux1883 + aux1885))
c Both direct and order encoding.
c Var 'aux1888' order represents '0' with '12697'
c Var 'aux1888' direct represents '0' with '12697'
c Var 'aux1888' order represents '1' with '12698'
-12697 12698 0
c Var 'aux1888' direct represents '1' with '12699'
12697 -12698 12699 0
-12699 12698 0
-12699 -12697 0
c Var 'aux1888' order represents '2' with '12700'
-12698 12700 0
c Var 'aux1888' direct represents '2' with '12701'
12698 -12700 12701 0
-12701 12700 0
-12701 -12698 0
c Var 'aux1888' order represents '3' with '12702'
-12700 12702 0
c Var 'aux1888' direct represents '3' with '12703'
12700 -12702 12703 0
-12703 12702 0
-12703 -12700 0
c Var 'aux1888' direct represents '4' with '-12702'
12697 12699 12701 12703 -12702 0
c Encoding variable: aux1889 with domain: int(0..2) (representing constraint ((x_00006_00007=7) + (x_00005_00009=7)))
c Both direct and order encoding.
c Var 'aux1889' order represents '0' with '12704'
c Var 'aux1889' direct represents '0' with '12704'
c Var 'aux1889' order represents '1' with '12705'
-12704 12705 0
c Var 'aux1889' direct represents '1' with '12706'
12704 -12705 12706 0
-12706 12705 0
-12706 -12704 0
c Var 'aux1889' direct represents '2' with '-12705'
12704 12706 -12705 0
c Encoding variable: aux1890 with domain: int(0..2) (representing constraint ((x_00005_00008=7) + (x_00006_00008=7)))
c Both direct and order encoding.
c Var 'aux1890' order represents '0' with '12707'
c Var 'aux1890' direct represents '0' with '12707'
c Var 'aux1890' order represents '1' with '12708'
-12707 12708 0
c Var 'aux1890' direct represents '1' with '12709'
12707 -12708 12709 0
-12709 12708 0
-12709 -12707 0
c Var 'aux1890' direct represents '2' with '-12708'
12707 12709 -12708 0
c Encoding variable: aux1891 with domain: int(0..2) (representing constraint ((x_00005_00007=7) + (x_00004_00007=7)))
c Both direct and order encoding.
c Var 'aux1891' order represents '0' with '12710'
c Var 'aux1891' direct represents '0' with '12710'
c Var 'aux1891' order represents '1' with '12711'
-12710 12711 0
c Var 'aux1891' direct represents '1' with '12712'
12710 -12711 12712 0
-12712 12711 0
-12712 -12710 0
c Var 'aux1891' direct represents '2' with '-12711'
12710 12712 -12711 0
c Encoding variable: aux1892 with domain: int(0..2) (representing constraint ((x_00004_00009=7) + (x_00004_00008=7)))
c Both direct and order encoding.
c Var 'aux1892' order represents '0' with '12713'
c Var 'aux1892' direct represents '0' with '12713'
c Var 'aux1892' order represents '1' with '12714'
-12713 12714 0
c Var 'aux1892' direct represents '1' with '12715'
12713 -12714 12715 0
-12715 12714 0
-12715 -12713 0
c Var 'aux1892' direct represents '2' with '-12714'
12713 12715 -12714 0
c Encoding variable: aux1893 with domain: int(0..3) (representing constraint ((x_00006_00009=7) + aux1892))
c Both direct and order encoding.
c Var 'aux1893' order represents '0' with '12716'
c Var 'aux1893' direct represents '0' with '12716'
c Var 'aux1893' order represents '1' with '12717'
-12716 12717 0
c Var 'aux1893' direct represents '1' with '12718'
12716 -12717 12718 0
-12718 12717 0
-12718 -12716 0
c Var 'aux1893' order represents '2' with '12719'
-12717 12719 0
c Var 'aux1893' direct represents '2' with '12720'
12717 -12719 12720 0
-12720 12719 0
-12720 -12717 0
c Var 'aux1893' direct represents '3' with '-12719'
12716 12718 12720 -12719 0
c Encoding variable: aux1894 with domain: int(0..4) (representing constraint (aux1889 + aux1891))
c Both direct and order encoding.
c Var 'aux1894' order represents '0' with '12721'
c Var 'aux1894' direct represents '0' with '12721'
c Var 'aux1894' order represents '1' with '12722'
-12721 12722 0
c Var 'aux1894' direct represents '1' with '12723'
12721 -12722 12723 0
-12723 12722 0
-12723 -12721 0
c Var 'aux1894' order represents '2' with '12724'
-12722 12724 0
c Var 'aux1894' direct represents '2' with '12725'
12722 -12724 12725 0
-12725 12724 0
-12725 -12722 0
c Var 'aux1894' order represents '3' with '12726'
-12724 12726 0
c Var 'aux1894' direct represents '3' with '12727'
12724 -12726 12727 0
-12727 12726 0
-12727 -12724 0
c Var 'aux1894' direct represents '4' with '-12726'
12721 12723 12725 12727 -12726 0
c Encoding variable: aux1895 with domain: int(0..2) (representing constraint ((x_00006_00007=8) + (x_00005_00009=8)))
c Both direct and order encoding.
c Var 'aux1895' order represents '0' with '12728'
c Var 'aux1895' direct represents '0' with '12728'
c Var 'aux1895' order represents '1' with '12729'
-12728 12729 0
c Var 'aux1895' direct represents '1' with '12730'
12728 -12729 12730 0
-12730 12729 0
-12730 -12728 0
c Var 'aux1895' direct represents '2' with '-12729'
12728 12730 -12729 0
c Encoding variable: aux1896 with domain: int(0..2) (representing constraint ((x_00005_00008=8) + (x_00006_00008=8)))
c Both direct and order encoding.
c Var 'aux1896' order represents '0' with '12731'
c Var 'aux1896' direct represents '0' with '12731'
c Var 'aux1896' order represents '1' with '12732'
-12731 12732 0
c Var 'aux1896' direct represents '1' with '12733'
12731 -12732 12733 0
-12733 12732 0
-12733 -12731 0
c Var 'aux1896' direct represents '2' with '-12732'
12731 12733 -12732 0
c Encoding variable: aux1897 with domain: int(0..2) (representing constraint ((x_00005_00007=8) + (x_00004_00007=8)))
c Both direct and order encoding.
c Var 'aux1897' order represents '0' with '12734'
c Var 'aux1897' direct represents '0' with '12734'
c Var 'aux1897' order represents '1' with '12735'
-12734 12735 0
c Var 'aux1897' direct represents '1' with '12736'
12734 -12735 12736 0
-12736 12735 0
-12736 -12734 0
c Var 'aux1897' direct represents '2' with '-12735'
12734 12736 -12735 0
c Encoding variable: aux1898 with domain: int(0..2) (representing constraint ((x_00004_00009=8) + (x_00004_00008=8)))
c Both direct and order encoding.
c Var 'aux1898' order represents '0' with '12737'
c Var 'aux1898' direct represents '0' with '12737'
c Var 'aux1898' order represents '1' with '12738'
-12737 12738 0
c Var 'aux1898' direct represents '1' with '12739'
12737 -12738 12739 0
-12739 12738 0
-12739 -12737 0
c Var 'aux1898' direct represents '2' with '-12738'
12737 12739 -12738 0
c Encoding variable: aux1899 with domain: int(0..3) (representing constraint ((x_00006_00009=8) + aux1898))
c Both direct and order encoding.
c Var 'aux1899' order represents '0' with '12740'
c Var 'aux1899' direct represents '0' with '12740'
c Var 'aux1899' order represents '1' with '12741'
-12740 12741 0
c Var 'aux1899' direct represents '1' with '12742'
12740 -12741 12742 0
-12742 12741 0
-12742 -12740 0
c Var 'aux1899' order represents '2' with '12743'
-12741 12743 0
c Var 'aux1899' direct represents '2' with '12744'
12741 -12743 12744 0
-12744 12743 0
-12744 -12741 0
c Var 'aux1899' direct represents '3' with '-12743'
12740 12742 12744 -12743 0
c Encoding variable: aux1900 with domain: int(0..4) (representing constraint (aux1895 + aux1897))
c Both direct and order encoding.
c Var 'aux1900' order represents '0' with '12745'
c Var 'aux1900' direct represents '0' with '12745'
c Var 'aux1900' order represents '1' with '12746'
-12745 12746 0
c Var 'aux1900' direct represents '1' with '12747'
12745 -12746 12747 0
-12747 12746 0
-12747 -12745 0
c Var 'aux1900' order represents '2' with '12748'
-12746 12748 0
c Var 'aux1900' direct represents '2' with '12749'
12746 -12748 12749 0
-12749 12748 0
-12749 -12746 0
c Var 'aux1900' order represents '3' with '12750'
-12748 12750 0
c Var 'aux1900' direct represents '3' with '12751'
12748 -12750 12751 0
-12751 12750 0
-12751 -12748 0
c Var 'aux1900' direct represents '4' with '-12750'
12745 12747 12749 12751 -12750 0
c Encoding variable: aux1901 with domain: int(0..2) (representing constraint ((x_00006_00007=9) + (x_00005_00009=9)))
c Both direct and order encoding.
c Var 'aux1901' order represents '0' with '12752'
c Var 'aux1901' direct represents '0' with '12752'
c Var 'aux1901' order represents '1' with '12753'
-12752 12753 0
c Var 'aux1901' direct represents '1' with '12754'
12752 -12753 12754 0
-12754 12753 0
-12754 -12752 0
c Var 'aux1901' direct represents '2' with '-12753'
12752 12754 -12753 0
c Encoding variable: aux1902 with domain: int(0..2) (representing constraint ((x_00005_00008=9) + (x_00006_00008=9)))
c Both direct and order encoding.
c Var 'aux1902' order represents '0' with '12755'
c Var 'aux1902' direct represents '0' with '12755'
c Var 'aux1902' order represents '1' with '12756'
-12755 12756 0
c Var 'aux1902' direct represents '1' with '12757'
12755 -12756 12757 0
-12757 12756 0
-12757 -12755 0
c Var 'aux1902' direct represents '2' with '-12756'
12755 12757 -12756 0
c Encoding variable: aux1903 with domain: int(0..2) (representing constraint ((x_00005_00007=9) + (x_00004_00007=9)))
c Both direct and order encoding.
c Var 'aux1903' order represents '0' with '12758'
c Var 'aux1903' direct represents '0' with '12758'
c Var 'aux1903' order represents '1' with '12759'
-12758 12759 0
c Var 'aux1903' direct represents '1' with '12760'
12758 -12759 12760 0
-12760 12759 0
-12760 -12758 0
c Var 'aux1903' direct represents '2' with '-12759'
12758 12760 -12759 0
c Encoding variable: aux1904 with domain: int(0..2) (representing constraint ((x_00004_00009=9) + (x_00004_00008=9)))
c Both direct and order encoding.
c Var 'aux1904' order represents '0' with '12761'
c Var 'aux1904' direct represents '0' with '12761'
c Var 'aux1904' order represents '1' with '12762'
-12761 12762 0
c Var 'aux1904' direct represents '1' with '12763'
12761 -12762 12763 0
-12763 12762 0
-12763 -12761 0
c Var 'aux1904' direct represents '2' with '-12762'
12761 12763 -12762 0
c Encoding variable: aux1905 with domain: int(0..3) (representing constraint ((x_00006_00009=9) + aux1904))
c Both direct and order encoding.
c Var 'aux1905' order represents '0' with '12764'
c Var 'aux1905' direct represents '0' with '12764'
c Var 'aux1905' order represents '1' with '12765'
-12764 12765 0
c Var 'aux1905' direct represents '1' with '12766'
12764 -12765 12766 0
-12766 12765 0
-12766 -12764 0
c Var 'aux1905' order represents '2' with '12767'
-12765 12767 0
c Var 'aux1905' direct represents '2' with '12768'
12765 -12767 12768 0
-12768 12767 0
-12768 -12765 0
c Var 'aux1905' direct represents '3' with '-12767'
12764 12766 12768 -12767 0
c Encoding variable: aux1906 with domain: int(0..4) (representing constraint (aux1901 + aux1903))
c Both direct and order encoding.
c Var 'aux1906' order represents '0' with '12769'
c Var 'aux1906' direct represents '0' with '12769'
c Var 'aux1906' order represents '1' with '12770'
-12769 12770 0
c Var 'aux1906' direct represents '1' with '12771'
12769 -12770 12771 0
-12771 12770 0
-12771 -12769 0
c Var 'aux1906' order represents '2' with '12772'
-12770 12772 0
c Var 'aux1906' direct represents '2' with '12773'
12770 -12772 12773 0
-12773 12772 0
-12773 -12770 0
c Var 'aux1906' order represents '3' with '12774'
-12772 12774 0
c Var 'aux1906' direct represents '3' with '12775'
12772 -12774 12775 0
-12775 12774 0
-12775 -12772 0
c Var 'aux1906' direct represents '4' with '-12774'
12769 12771 12773 12775 -12774 0
c Encoding variable: aux1907 with domain: int(0..2) (representing constraint ((x_00008_00001=1) + (x_00007_00003=1)))
c Both direct and order encoding.
c Var 'aux1907' order represents '0' with '12776'
c Var 'aux1907' direct represents '0' with '12776'
c Var 'aux1907' order represents '1' with '12777'
-12776 12777 0
c Var 'aux1907' direct represents '1' with '12778'
12776 -12777 12778 0
-12778 12777 0
-12778 -12776 0
c Var 'aux1907' direct represents '2' with '-12777'
12776 12778 -12777 0
c Encoding variable: aux1908 with domain: int(0..2) (representing constraint ((x_00007_00002=1) + (x_00008_00002=1)))
c Both direct and order encoding.
c Var 'aux1908' order represents '0' with '12779'
c Var 'aux1908' direct represents '0' with '12779'
c Var 'aux1908' order represents '1' with '12780'
-12779 12780 0
c Var 'aux1908' direct represents '1' with '12781'
12779 -12780 12781 0
-12781 12780 0
-12781 -12779 0
c Var 'aux1908' direct represents '2' with '-12780'
12779 12781 -12780 0
c Encoding variable: aux1909 with domain: int(0..2) (representing constraint ((x_00007_00001=1) + (x_00009_00001=1)))
c Both direct and order encoding.
c Var 'aux1909' order represents '0' with '12782'
c Var 'aux1909' direct represents '0' with '12782'
c Var 'aux1909' order represents '1' with '12783'
-12782 12783 0
c Var 'aux1909' direct represents '1' with '12784'
12782 -12783 12784 0
-12784 12783 0
-12784 -12782 0
c Var 'aux1909' direct represents '2' with '-12783'
12782 12784 -12783 0
c Encoding variable: aux1910 with domain: int(0..2) (representing constraint ((x_00009_00003=1) + (x_00009_00002=1)))
c Both direct and order encoding.
c Var 'aux1910' order represents '0' with '12785'
c Var 'aux1910' direct represents '0' with '12785'
c Var 'aux1910' order represents '1' with '12786'
-12785 12786 0
c Var 'aux1910' direct represents '1' with '12787'
12785 -12786 12787 0
-12787 12786 0
-12787 -12785 0
c Var 'aux1910' direct represents '2' with '-12786'
12785 12787 -12786 0
c Encoding variable: aux1911 with domain: int(0..3) (representing constraint ((x_00008_00003=1) + aux1910))
c Both direct and order encoding.
c Var 'aux1911' order represents '0' with '12788'
c Var 'aux1911' direct represents '0' with '12788'
c Var 'aux1911' order represents '1' with '12789'
-12788 12789 0
c Var 'aux1911' direct represents '1' with '12790'
12788 -12789 12790 0
-12790 12789 0
-12790 -12788 0
c Var 'aux1911' order represents '2' with '12791'
-12789 12791 0
c Var 'aux1911' direct represents '2' with '12792'
12789 -12791 12792 0
-12792 12791 0
-12792 -12789 0
c Var 'aux1911' direct represents '3' with '-12791'
12788 12790 12792 -12791 0
c Encoding variable: aux1912 with domain: int(0..4) (representing constraint (aux1907 + aux1909))
c Both direct and order encoding.
c Var 'aux1912' order represents '0' with '12793'
c Var 'aux1912' direct represents '0' with '12793'
c Var 'aux1912' order represents '1' with '12794'
-12793 12794 0
c Var 'aux1912' direct represents '1' with '12795'
12793 -12794 12795 0
-12795 12794 0
-12795 -12793 0
c Var 'aux1912' order represents '2' with '12796'
-12794 12796 0
c Var 'aux1912' direct represents '2' with '12797'
12794 -12796 12797 0
-12797 12796 0
-12797 -12794 0
c Var 'aux1912' order represents '3' with '12798'
-12796 12798 0
c Var 'aux1912' direct represents '3' with '12799'
12796 -12798 12799 0
-12799 12798 0
-12799 -12796 0
c Var 'aux1912' direct represents '4' with '-12798'
12793 12795 12797 12799 -12798 0
c Encoding variable: aux1913 with domain: int(0..2) (representing constraint ((x_00008_00001=2) + (x_00007_00003=2)))
c Both direct and order encoding.
c Var 'aux1913' order represents '0' with '12800'
c Var 'aux1913' direct represents '0' with '12800'
c Var 'aux1913' order represents '1' with '12801'
-12800 12801 0
c Var 'aux1913' direct represents '1' with '12802'
12800 -12801 12802 0
-12802 12801 0
-12802 -12800 0
c Var 'aux1913' direct represents '2' with '-12801'
12800 12802 -12801 0
c Encoding variable: aux1914 with domain: int(0..2) (representing constraint ((x_00007_00002=2) + (x_00008_00002=2)))
c Both direct and order encoding.
c Var 'aux1914' order represents '0' with '12803'
c Var 'aux1914' direct represents '0' with '12803'
c Var 'aux1914' order represents '1' with '12804'
-12803 12804 0
c Var 'aux1914' direct represents '1' with '12805'
12803 -12804 12805 0
-12805 12804 0
-12805 -12803 0
c Var 'aux1914' direct represents '2' with '-12804'
12803 12805 -12804 0
c Encoding variable: aux1915 with domain: int(0..2) (representing constraint ((x_00007_00001=2) + (x_00009_00001=2)))
c Both direct and order encoding.
c Var 'aux1915' order represents '0' with '12806'
c Var 'aux1915' direct represents '0' with '12806'
c Var 'aux1915' order represents '1' with '12807'
-12806 12807 0
c Var 'aux1915' direct represents '1' with '12808'
12806 -12807 12808 0
-12808 12807 0
-12808 -12806 0
c Var 'aux1915' direct represents '2' with '-12807'
12806 12808 -12807 0
c Encoding variable: aux1916 with domain: int(0..2) (representing constraint ((x_00009_00003=2) + (x_00009_00002=2)))
c Both direct and order encoding.
c Var 'aux1916' order represents '0' with '12809'
c Var 'aux1916' direct represents '0' with '12809'
c Var 'aux1916' order represents '1' with '12810'
-12809 12810 0
c Var 'aux1916' direct represents '1' with '12811'
12809 -12810 12811 0
-12811 12810 0
-12811 -12809 0
c Var 'aux1916' direct represents '2' with '-12810'
12809 12811 -12810 0
c Encoding variable: aux1917 with domain: int(0..3) (representing constraint ((x_00008_00003=2) + aux1916))
c Both direct and order encoding.
c Var 'aux1917' order represents '0' with '12812'
c Var 'aux1917' direct represents '0' with '12812'
c Var 'aux1917' order represents '1' with '12813'
-12812 12813 0
c Var 'aux1917' direct represents '1' with '12814'
12812 -12813 12814 0
-12814 12813 0
-12814 -12812 0
c Var 'aux1917' order represents '2' with '12815'
-12813 12815 0
c Var 'aux1917' direct represents '2' with '12816'
12813 -12815 12816 0
-12816 12815 0
-12816 -12813 0
c Var 'aux1917' direct represents '3' with '-12815'
12812 12814 12816 -12815 0
c Encoding variable: aux1918 with domain: int(0..4) (representing constraint (aux1913 + aux1915))
c Both direct and order encoding.
c Var 'aux1918' order represents '0' with '12817'
c Var 'aux1918' direct represents '0' with '12817'
c Var 'aux1918' order represents '1' with '12818'
-12817 12818 0
c Var 'aux1918' direct represents '1' with '12819'
12817 -12818 12819 0
-12819 12818 0
-12819 -12817 0
c Var 'aux1918' order represents '2' with '12820'
-12818 12820 0
c Var 'aux1918' direct represents '2' with '12821'
12818 -12820 12821 0
-12821 12820 0
-12821 -12818 0
c Var 'aux1918' order represents '3' with '12822'
-12820 12822 0
c Var 'aux1918' direct represents '3' with '12823'
12820 -12822 12823 0
-12823 12822 0
-12823 -12820 0
c Var 'aux1918' direct represents '4' with '-12822'
12817 12819 12821 12823 -12822 0
c Encoding variable: aux1919 with domain: int(0..2) (representing constraint ((x_00008_00001=3) + (x_00007_00003=3)))
c Both direct and order encoding.
c Var 'aux1919' order represents '0' with '12824'
c Var 'aux1919' direct represents '0' with '12824'
c Var 'aux1919' order represents '1' with '12825'
-12824 12825 0
c Var 'aux1919' direct represents '1' with '12826'
12824 -12825 12826 0
-12826 12825 0
-12826 -12824 0
c Var 'aux1919' direct represents '2' with '-12825'
12824 12826 -12825 0
c Encoding variable: aux1920 with domain: int(0..2) (representing constraint ((x_00007_00002=3) + (x_00008_00002=3)))
c Both direct and order encoding.
c Var 'aux1920' order represents '0' with '12827'
c Var 'aux1920' direct represents '0' with '12827'
c Var 'aux1920' order represents '1' with '12828'
-12827 12828 0
c Var 'aux1920' direct represents '1' with '12829'
12827 -12828 12829 0
-12829 12828 0
-12829 -12827 0
c Var 'aux1920' direct represents '2' with '-12828'
12827 12829 -12828 0
c Encoding variable: aux1921 with domain: int(0..2) (representing constraint ((x_00007_00001=3) + (x_00009_00001=3)))
c Both direct and order encoding.
c Var 'aux1921' order represents '0' with '12830'
c Var 'aux1921' direct represents '0' with '12830'
c Var 'aux1921' order represents '1' with '12831'
-12830 12831 0
c Var 'aux1921' direct represents '1' with '12832'
12830 -12831 12832 0
-12832 12831 0
-12832 -12830 0
c Var 'aux1921' direct represents '2' with '-12831'
12830 12832 -12831 0
c Encoding variable: aux1922 with domain: int(0..2) (representing constraint ((x_00009_00003=3) + (x_00009_00002=3)))
c Both direct and order encoding.
c Var 'aux1922' order represents '0' with '12833'
c Var 'aux1922' direct represents '0' with '12833'
c Var 'aux1922' order represents '1' with '12834'
-12833 12834 0
c Var 'aux1922' direct represents '1' with '12835'
12833 -12834 12835 0
-12835 12834 0
-12835 -12833 0
c Var 'aux1922' direct represents '2' with '-12834'
12833 12835 -12834 0
c Encoding variable: aux1923 with domain: int(0..3) (representing constraint ((x_00008_00003=3) + aux1922))
c Both direct and order encoding.
c Var 'aux1923' order represents '0' with '12836'
c Var 'aux1923' direct represents '0' with '12836'
c Var 'aux1923' order represents '1' with '12837'
-12836 12837 0
c Var 'aux1923' direct represents '1' with '12838'
12836 -12837 12838 0
-12838 12837 0
-12838 -12836 0
c Var 'aux1923' order represents '2' with '12839'
-12837 12839 0
c Var 'aux1923' direct represents '2' with '12840'
12837 -12839 12840 0
-12840 12839 0
-12840 -12837 0
c Var 'aux1923' direct represents '3' with '-12839'
12836 12838 12840 -12839 0
c Encoding variable: aux1924 with domain: int(0..4) (representing constraint (aux1919 + aux1921))
c Both direct and order encoding.
c Var 'aux1924' order represents '0' with '12841'
c Var 'aux1924' direct represents '0' with '12841'
c Var 'aux1924' order represents '1' with '12842'
-12841 12842 0
c Var 'aux1924' direct represents '1' with '12843'
12841 -12842 12843 0
-12843 12842 0
-12843 -12841 0
c Var 'aux1924' order represents '2' with '12844'
-12842 12844 0
c Var 'aux1924' direct represents '2' with '12845'
12842 -12844 12845 0
-12845 12844 0
-12845 -12842 0
c Var 'aux1924' order represents '3' with '12846'
-12844 12846 0
c Var 'aux1924' direct represents '3' with '12847'
12844 -12846 12847 0
-12847 12846 0
-12847 -12844 0
c Var 'aux1924' direct represents '4' with '-12846'
12841 12843 12845 12847 -12846 0
c Encoding variable: aux1925 with domain: int(0..2) (representing constraint ((x_00008_00001=4) + (x_00007_00003=4)))
c Both direct and order encoding.
c Var 'aux1925' order represents '0' with '12848'
c Var 'aux1925' direct represents '0' with '12848'
c Var 'aux1925' order represents '1' with '12849'
-12848 12849 0
c Var 'aux1925' direct represents '1' with '12850'
12848 -12849 12850 0
-12850 12849 0
-12850 -12848 0
c Var 'aux1925' direct represents '2' with '-12849'
12848 12850 -12849 0
c Encoding variable: aux1926 with domain: int(0..2) (representing constraint ((x_00007_00002=4) + (x_00008_00002=4)))
c Both direct and order encoding.
c Var 'aux1926' order represents '0' with '12851'
c Var 'aux1926' direct represents '0' with '12851'
c Var 'aux1926' order represents '1' with '12852'
-12851 12852 0
c Var 'aux1926' direct represents '1' with '12853'
12851 -12852 12853 0
-12853 12852 0
-12853 -12851 0
c Var 'aux1926' direct represents '2' with '-12852'
12851 12853 -12852 0
c Encoding variable: aux1927 with domain: int(0..2) (representing constraint ((x_00007_00001=4) + (x_00009_00001=4)))
c Both direct and order encoding.
c Var 'aux1927' order represents '0' with '12854'
c Var 'aux1927' direct represents '0' with '12854'
c Var 'aux1927' order represents '1' with '12855'
-12854 12855 0
c Var 'aux1927' direct represents '1' with '12856'
12854 -12855 12856 0
-12856 12855 0
-12856 -12854 0
c Var 'aux1927' direct represents '2' with '-12855'
12854 12856 -12855 0
c Encoding variable: aux1928 with domain: int(0..2) (representing constraint ((x_00009_00003=4) + (x_00009_00002=4)))
c Both direct and order encoding.
c Var 'aux1928' order represents '0' with '12857'
c Var 'aux1928' direct represents '0' with '12857'
c Var 'aux1928' order represents '1' with '12858'
-12857 12858 0
c Var 'aux1928' direct represents '1' with '12859'
12857 -12858 12859 0
-12859 12858 0
-12859 -12857 0
c Var 'aux1928' direct represents '2' with '-12858'
12857 12859 -12858 0
c Encoding variable: aux1929 with domain: int(0..3) (representing constraint ((x_00008_00003=4) + aux1928))
c Both direct and order encoding.
c Var 'aux1929' order represents '0' with '12860'
c Var 'aux1929' direct represents '0' with '12860'
c Var 'aux1929' order represents '1' with '12861'
-12860 12861 0
c Var 'aux1929' direct represents '1' with '12862'
12860 -12861 12862 0
-12862 12861 0
-12862 -12860 0
c Var 'aux1929' order represents '2' with '12863'
-12861 12863 0
c Var 'aux1929' direct represents '2' with '12864'
12861 -12863 12864 0
-12864 12863 0
-12864 -12861 0
c Var 'aux1929' direct represents '3' with '-12863'
12860 12862 12864 -12863 0
c Encoding variable: aux1930 with domain: int(0..4) (representing constraint (aux1925 + aux1927))
c Both direct and order encoding.
c Var 'aux1930' order represents '0' with '12865'
c Var 'aux1930' direct represents '0' with '12865'
c Var 'aux1930' order represents '1' with '12866'
-12865 12866 0
c Var 'aux1930' direct represents '1' with '12867'
12865 -12866 12867 0
-12867 12866 0
-12867 -12865 0
c Var 'aux1930' order represents '2' with '12868'
-12866 12868 0
c Var 'aux1930' direct represents '2' with '12869'
12866 -12868 12869 0
-12869 12868 0
-12869 -12866 0
c Var 'aux1930' order represents '3' with '12870'
-12868 12870 0
c Var 'aux1930' direct represents '3' with '12871'
12868 -12870 12871 0
-12871 12870 0
-12871 -12868 0
c Var 'aux1930' direct represents '4' with '-12870'
12865 12867 12869 12871 -12870 0
c Encoding variable: aux1931 with domain: int(0..2) (representing constraint ((x_00008_00001=5) + (x_00007_00003=5)))
c Both direct and order encoding.
c Var 'aux1931' order represents '0' with '12872'
c Var 'aux1931' direct represents '0' with '12872'
c Var 'aux1931' order represents '1' with '12873'
-12872 12873 0
c Var 'aux1931' direct represents '1' with '12874'
12872 -12873 12874 0
-12874 12873 0
-12874 -12872 0
c Var 'aux1931' direct represents '2' with '-12873'
12872 12874 -12873 0
c Encoding variable: aux1932 with domain: int(0..2) (representing constraint ((x_00007_00002=5) + (x_00008_00002=5)))
c Both direct and order encoding.
c Var 'aux1932' order represents '0' with '12875'
c Var 'aux1932' direct represents '0' with '12875'
c Var 'aux1932' order represents '1' with '12876'
-12875 12876 0
c Var 'aux1932' direct represents '1' with '12877'
12875 -12876 12877 0
-12877 12876 0
-12877 -12875 0
c Var 'aux1932' direct represents '2' with '-12876'
12875 12877 -12876 0
c Encoding variable: aux1933 with domain: int(0..2) (representing constraint ((x_00007_00001=5) + (x_00009_00001=5)))
c Both direct and order encoding.
c Var 'aux1933' order represents '0' with '12878'
c Var 'aux1933' direct represents '0' with '12878'
c Var 'aux1933' order represents '1' with '12879'
-12878 12879 0
c Var 'aux1933' direct represents '1' with '12880'
12878 -12879 12880 0
-12880 12879 0
-12880 -12878 0
c Var 'aux1933' direct represents '2' with '-12879'
12878 12880 -12879 0
c Encoding variable: aux1934 with domain: int(0..2) (representing constraint ((x_00009_00003=5) + (x_00009_00002=5)))
c Both direct and order encoding.
c Var 'aux1934' order represents '0' with '12881'
c Var 'aux1934' direct represents '0' with '12881'
c Var 'aux1934' order represents '1' with '12882'
-12881 12882 0
c Var 'aux1934' direct represents '1' with '12883'
12881 -12882 12883 0
-12883 12882 0
-12883 -12881 0
c Var 'aux1934' direct represents '2' with '-12882'
12881 12883 -12882 0
c Encoding variable: aux1935 with domain: int(0..3) (representing constraint ((x_00008_00003=5) + aux1934))
c Both direct and order encoding.
c Var 'aux1935' order represents '0' with '12884'
c Var 'aux1935' direct represents '0' with '12884'
c Var 'aux1935' order represents '1' with '12885'
-12884 12885 0
c Var 'aux1935' direct represents '1' with '12886'
12884 -12885 12886 0
-12886 12885 0
-12886 -12884 0
c Var 'aux1935' order represents '2' with '12887'
-12885 12887 0
c Var 'aux1935' direct represents '2' with '12888'
12885 -12887 12888 0
-12888 12887 0
-12888 -12885 0
c Var 'aux1935' direct represents '3' with '-12887'
12884 12886 12888 -12887 0
c Encoding variable: aux1936 with domain: int(0..4) (representing constraint (aux1931 + aux1933))
c Both direct and order encoding.
c Var 'aux1936' order represents '0' with '12889'
c Var 'aux1936' direct represents '0' with '12889'
c Var 'aux1936' order represents '1' with '12890'
-12889 12890 0
c Var 'aux1936' direct represents '1' with '12891'
12889 -12890 12891 0
-12891 12890 0
-12891 -12889 0
c Var 'aux1936' order represents '2' with '12892'
-12890 12892 0
c Var 'aux1936' direct represents '2' with '12893'
12890 -12892 12893 0
-12893 12892 0
-12893 -12890 0
c Var 'aux1936' order represents '3' with '12894'
-12892 12894 0
c Var 'aux1936' direct represents '3' with '12895'
12892 -12894 12895 0
-12895 12894 0
-12895 -12892 0
c Var 'aux1936' direct represents '4' with '-12894'
12889 12891 12893 12895 -12894 0
c Encoding variable: aux1937 with domain: int(0..2) (representing constraint ((x_00008_00001=6) + (x_00007_00003=6)))
c Both direct and order encoding.
c Var 'aux1937' order represents '0' with '12896'
c Var 'aux1937' direct represents '0' with '12896'
c Var 'aux1937' order represents '1' with '12897'
-12896 12897 0
c Var 'aux1937' direct represents '1' with '12898'
12896 -12897 12898 0
-12898 12897 0
-12898 -12896 0
c Var 'aux1937' direct represents '2' with '-12897'
12896 12898 -12897 0
c Encoding variable: aux1938 with domain: int(0..2) (representing constraint ((x_00007_00002=6) + (x_00008_00002=6)))
c Both direct and order encoding.
c Var 'aux1938' order represents '0' with '12899'
c Var 'aux1938' direct represents '0' with '12899'
c Var 'aux1938' order represents '1' with '12900'
-12899 12900 0
c Var 'aux1938' direct represents '1' with '12901'
12899 -12900 12901 0
-12901 12900 0
-12901 -12899 0
c Var 'aux1938' direct represents '2' with '-12900'
12899 12901 -12900 0
c Encoding variable: aux1939 with domain: int(0..2) (representing constraint ((x_00007_00001=6) + (x_00009_00001=6)))
c Both direct and order encoding.
c Var 'aux1939' order represents '0' with '12902'
c Var 'aux1939' direct represents '0' with '12902'
c Var 'aux1939' order represents '1' with '12903'
-12902 12903 0
c Var 'aux1939' direct represents '1' with '12904'
12902 -12903 12904 0
-12904 12903 0
-12904 -12902 0
c Var 'aux1939' direct represents '2' with '-12903'
12902 12904 -12903 0
c Encoding variable: aux1940 with domain: int(0..2) (representing constraint ((x_00009_00003=6) + (x_00009_00002=6)))
c Both direct and order encoding.
c Var 'aux1940' order represents '0' with '12905'
c Var 'aux1940' direct represents '0' with '12905'
c Var 'aux1940' order represents '1' with '12906'
-12905 12906 0
c Var 'aux1940' direct represents '1' with '12907'
12905 -12906 12907 0
-12907 12906 0
-12907 -12905 0
c Var 'aux1940' direct represents '2' with '-12906'
12905 12907 -12906 0
c Encoding variable: aux1941 with domain: int(0..3) (representing constraint ((x_00008_00003=6) + aux1940))
c Both direct and order encoding.
c Var 'aux1941' order represents '0' with '12908'
c Var 'aux1941' direct represents '0' with '12908'
c Var 'aux1941' order represents '1' with '12909'
-12908 12909 0
c Var 'aux1941' direct represents '1' with '12910'
12908 -12909 12910 0
-12910 12909 0
-12910 -12908 0
c Var 'aux1941' order represents '2' with '12911'
-12909 12911 0
c Var 'aux1941' direct represents '2' with '12912'
12909 -12911 12912 0
-12912 12911 0
-12912 -12909 0
c Var 'aux1941' direct represents '3' with '-12911'
12908 12910 12912 -12911 0
c Encoding variable: aux1942 with domain: int(0..4) (representing constraint (aux1937 + aux1939))
c Both direct and order encoding.
c Var 'aux1942' order represents '0' with '12913'
c Var 'aux1942' direct represents '0' with '12913'
c Var 'aux1942' order represents '1' with '12914'
-12913 12914 0
c Var 'aux1942' direct represents '1' with '12915'
12913 -12914 12915 0
-12915 12914 0
-12915 -12913 0
c Var 'aux1942' order represents '2' with '12916'
-12914 12916 0
c Var 'aux1942' direct represents '2' with '12917'
12914 -12916 12917 0
-12917 12916 0
-12917 -12914 0
c Var 'aux1942' order represents '3' with '12918'
-12916 12918 0
c Var 'aux1942' direct represents '3' with '12919'
12916 -12918 12919 0
-12919 12918 0
-12919 -12916 0
c Var 'aux1942' direct represents '4' with '-12918'
12913 12915 12917 12919 -12918 0
c Encoding variable: aux1943 with domain: int(0..2) (representing constraint ((x_00008_00001=7) + (x_00007_00003=7)))
c Both direct and order encoding.
c Var 'aux1943' order represents '0' with '12920'
c Var 'aux1943' direct represents '0' with '12920'
c Var 'aux1943' order represents '1' with '12921'
-12920 12921 0
c Var 'aux1943' direct represents '1' with '12922'
12920 -12921 12922 0
-12922 12921 0
-12922 -12920 0
c Var 'aux1943' direct represents '2' with '-12921'
12920 12922 -12921 0
c Encoding variable: aux1944 with domain: int(0..2) (representing constraint ((x_00007_00002=7) + (x_00008_00002=7)))
c Both direct and order encoding.
c Var 'aux1944' order represents '0' with '12923'
c Var 'aux1944' direct represents '0' with '12923'
c Var 'aux1944' order represents '1' with '12924'
-12923 12924 0
c Var 'aux1944' direct represents '1' with '12925'
12923 -12924 12925 0
-12925 12924 0
-12925 -12923 0
c Var 'aux1944' direct represents '2' with '-12924'
12923 12925 -12924 0
c Encoding variable: aux1945 with domain: int(0..2) (representing constraint ((x_00007_00001=7) + (x_00009_00001=7)))
c Both direct and order encoding.
c Var 'aux1945' order represents '0' with '12926'
c Var 'aux1945' direct represents '0' with '12926'
c Var 'aux1945' order represents '1' with '12927'
-12926 12927 0
c Var 'aux1945' direct represents '1' with '12928'
12926 -12927 12928 0
-12928 12927 0
-12928 -12926 0
c Var 'aux1945' direct represents '2' with '-12927'
12926 12928 -12927 0
c Encoding variable: aux1946 with domain: int(0..2) (representing constraint ((x_00009_00003=7) + (x_00009_00002=7)))
c Both direct and order encoding.
c Var 'aux1946' order represents '0' with '12929'
c Var 'aux1946' direct represents '0' with '12929'
c Var 'aux1946' order represents '1' with '12930'
-12929 12930 0
c Var 'aux1946' direct represents '1' with '12931'
12929 -12930 12931 0
-12931 12930 0
-12931 -12929 0
c Var 'aux1946' direct represents '2' with '-12930'
12929 12931 -12930 0
c Encoding variable: aux1947 with domain: int(0..3) (representing constraint ((x_00008_00003=7) + aux1946))
c Both direct and order encoding.
c Var 'aux1947' order represents '0' with '12932'
c Var 'aux1947' direct represents '0' with '12932'
c Var 'aux1947' order represents '1' with '12933'
-12932 12933 0
c Var 'aux1947' direct represents '1' with '12934'
12932 -12933 12934 0
-12934 12933 0
-12934 -12932 0
c Var 'aux1947' order represents '2' with '12935'
-12933 12935 0
c Var 'aux1947' direct represents '2' with '12936'
12933 -12935 12936 0
-12936 12935 0
-12936 -12933 0
c Var 'aux1947' direct represents '3' with '-12935'
12932 12934 12936 -12935 0
c Encoding variable: aux1948 with domain: int(0..4) (representing constraint (aux1943 + aux1945))
c Both direct and order encoding.
c Var 'aux1948' order represents '0' with '12937'
c Var 'aux1948' direct represents '0' with '12937'
c Var 'aux1948' order represents '1' with '12938'
-12937 12938 0
c Var 'aux1948' direct represents '1' with '12939'
12937 -12938 12939 0
-12939 12938 0
-12939 -12937 0
c Var 'aux1948' order represents '2' with '12940'
-12938 12940 0
c Var 'aux1948' direct represents '2' with '12941'
12938 -12940 12941 0
-12941 12940 0
-12941 -12938 0
c Var 'aux1948' order represents '3' with '12942'
-12940 12942 0
c Var 'aux1948' direct represents '3' with '12943'
12940 -12942 12943 0
-12943 12942 0
-12943 -12940 0
c Var 'aux1948' direct represents '4' with '-12942'
12937 12939 12941 12943 -12942 0
c Encoding variable: aux1949 with domain: int(0..2) (representing constraint ((x_00008_00001=8) + (x_00007_00003=8)))
c Both direct and order encoding.
c Var 'aux1949' order represents '0' with '12944'
c Var 'aux1949' direct represents '0' with '12944'
c Var 'aux1949' order represents '1' with '12945'
-12944 12945 0
c Var 'aux1949' direct represents '1' with '12946'
12944 -12945 12946 0
-12946 12945 0
-12946 -12944 0
c Var 'aux1949' direct represents '2' with '-12945'
12944 12946 -12945 0
c Encoding variable: aux1950 with domain: int(0..2) (representing constraint ((x_00007_00002=8) + (x_00008_00002=8)))
c Both direct and order encoding.
c Var 'aux1950' order represents '0' with '12947'
c Var 'aux1950' direct represents '0' with '12947'
c Var 'aux1950' order represents '1' with '12948'
-12947 12948 0
c Var 'aux1950' direct represents '1' with '12949'
12947 -12948 12949 0
-12949 12948 0
-12949 -12947 0
c Var 'aux1950' direct represents '2' with '-12948'
12947 12949 -12948 0
c Encoding variable: aux1951 with domain: int(0..2) (representing constraint ((x_00007_00001=8) + (x_00009_00001=8)))
c Both direct and order encoding.
c Var 'aux1951' order represents '0' with '12950'
c Var 'aux1951' direct represents '0' with '12950'
c Var 'aux1951' order represents '1' with '12951'
-12950 12951 0
c Var 'aux1951' direct represents '1' with '12952'
12950 -12951 12952 0
-12952 12951 0
-12952 -12950 0
c Var 'aux1951' direct represents '2' with '-12951'
12950 12952 -12951 0
c Encoding variable: aux1952 with domain: int(0..2) (representing constraint ((x_00009_00003=8) + (x_00009_00002=8)))
c Both direct and order encoding.
c Var 'aux1952' order represents '0' with '12953'
c Var 'aux1952' direct represents '0' with '12953'
c Var 'aux1952' order represents '1' with '12954'
-12953 12954 0
c Var 'aux1952' direct represents '1' with '12955'
12953 -12954 12955 0
-12955 12954 0
-12955 -12953 0
c Var 'aux1952' direct represents '2' with '-12954'
12953 12955 -12954 0
c Encoding variable: aux1953 with domain: int(0..3) (representing constraint ((x_00008_00003=8) + aux1952))
c Both direct and order encoding.
c Var 'aux1953' order represents '0' with '12956'
c Var 'aux1953' direct represents '0' with '12956'
c Var 'aux1953' order represents '1' with '12957'
-12956 12957 0
c Var 'aux1953' direct represents '1' with '12958'
12956 -12957 12958 0
-12958 12957 0
-12958 -12956 0
c Var 'aux1953' order represents '2' with '12959'
-12957 12959 0
c Var 'aux1953' direct represents '2' with '12960'
12957 -12959 12960 0
-12960 12959 0
-12960 -12957 0
c Var 'aux1953' direct represents '3' with '-12959'
12956 12958 12960 -12959 0
c Encoding variable: aux1954 with domain: int(0..4) (representing constraint (aux1949 + aux1951))
c Both direct and order encoding.
c Var 'aux1954' order represents '0' with '12961'
c Var 'aux1954' direct represents '0' with '12961'
c Var 'aux1954' order represents '1' with '12962'
-12961 12962 0
c Var 'aux1954' direct represents '1' with '12963'
12961 -12962 12963 0
-12963 12962 0
-12963 -12961 0
c Var 'aux1954' order represents '2' with '12964'
-12962 12964 0
c Var 'aux1954' direct represents '2' with '12965'
12962 -12964 12965 0
-12965 12964 0
-12965 -12962 0
c Var 'aux1954' order represents '3' with '12966'
-12964 12966 0
c Var 'aux1954' direct represents '3' with '12967'
12964 -12966 12967 0
-12967 12966 0
-12967 -12964 0
c Var 'aux1954' direct represents '4' with '-12966'
12961 12963 12965 12967 -12966 0
c Encoding variable: aux1955 with domain: int(0..2) (representing constraint ((x_00008_00001=9) + (x_00007_00003=9)))
c Both direct and order encoding.
c Var 'aux1955' order represents '0' with '12968'
c Var 'aux1955' direct represents '0' with '12968'
c Var 'aux1955' order represents '1' with '12969'
-12968 12969 0
c Var 'aux1955' direct represents '1' with '12970'
12968 -12969 12970 0
-12970 12969 0
-12970 -12968 0
c Var 'aux1955' direct represents '2' with '-12969'
12968 12970 -12969 0
c Encoding variable: aux1956 with domain: int(0..2) (representing constraint ((x_00007_00002=9) + (x_00008_00002=9)))
c Both direct and order encoding.
c Var 'aux1956' order represents '0' with '12971'
c Var 'aux1956' direct represents '0' with '12971'
c Var 'aux1956' order represents '1' with '12972'
-12971 12972 0
c Var 'aux1956' direct represents '1' with '12973'
12971 -12972 12973 0
-12973 12972 0
-12973 -12971 0
c Var 'aux1956' direct represents '2' with '-12972'
12971 12973 -12972 0
c Encoding variable: aux1957 with domain: int(0..2) (representing constraint ((x_00007_00001=9) + (x_00009_00001=9)))
c Both direct and order encoding.
c Var 'aux1957' order represents '0' with '12974'
c Var 'aux1957' direct represents '0' with '12974'
c Var 'aux1957' order represents '1' with '12975'
-12974 12975 0
c Var 'aux1957' direct represents '1' with '12976'
12974 -12975 12976 0
-12976 12975 0
-12976 -12974 0
c Var 'aux1957' direct represents '2' with '-12975'
12974 12976 -12975 0
c Encoding variable: aux1958 with domain: int(0..2) (representing constraint ((x_00009_00003=9) + (x_00009_00002=9)))
c Both direct and order encoding.
c Var 'aux1958' order represents '0' with '12977'
c Var 'aux1958' direct represents '0' with '12977'
c Var 'aux1958' order represents '1' with '12978'
-12977 12978 0
c Var 'aux1958' direct represents '1' with '12979'
12977 -12978 12979 0
-12979 12978 0
-12979 -12977 0
c Var 'aux1958' direct represents '2' with '-12978'
12977 12979 -12978 0
c Encoding variable: aux1959 with domain: int(0..3) (representing constraint ((x_00008_00003=9) + aux1958))
c Both direct and order encoding.
c Var 'aux1959' order represents '0' with '12980'
c Var 'aux1959' direct represents '0' with '12980'
c Var 'aux1959' order represents '1' with '12981'
-12980 12981 0
c Var 'aux1959' direct represents '1' with '12982'
12980 -12981 12982 0
-12982 12981 0
-12982 -12980 0
c Var 'aux1959' order represents '2' with '12983'
-12981 12983 0
c Var 'aux1959' direct represents '2' with '12984'
12981 -12983 12984 0
-12984 12983 0
-12984 -12981 0
c Var 'aux1959' direct represents '3' with '-12983'
12980 12982 12984 -12983 0
c Encoding variable: aux1960 with domain: int(0..4) (representing constraint (aux1955 + aux1957))
c Both direct and order encoding.
c Var 'aux1960' order represents '0' with '12985'
c Var 'aux1960' direct represents '0' with '12985'
c Var 'aux1960' order represents '1' with '12986'
-12985 12986 0
c Var 'aux1960' direct represents '1' with '12987'
12985 -12986 12987 0
-12987 12986 0
-12987 -12985 0
c Var 'aux1960' order represents '2' with '12988'
-12986 12988 0
c Var 'aux1960' direct represents '2' with '12989'
12986 -12988 12989 0
-12989 12988 0
-12989 -12986 0
c Var 'aux1960' order represents '3' with '12990'
-12988 12990 0
c Var 'aux1960' direct represents '3' with '12991'
12988 -12990 12991 0
-12991 12990 0
-12991 -12988 0
c Var 'aux1960' direct represents '4' with '-12990'
12985 12987 12989 12991 -12990 0
c Encoding variable: aux1961 with domain: int(0..2) (representing constraint ((x_00008_00004=1) + (x_00007_00006=1)))
c Both direct and order encoding.
c Var 'aux1961' order represents '0' with '12992'
c Var 'aux1961' direct represents '0' with '12992'
c Var 'aux1961' order represents '1' with '12993'
-12992 12993 0
c Var 'aux1961' direct represents '1' with '12994'
12992 -12993 12994 0
-12994 12993 0
-12994 -12992 0
c Var 'aux1961' direct represents '2' with '-12993'
12992 12994 -12993 0
c Encoding variable: aux1962 with domain: int(0..2) (representing constraint ((x_00007_00005=1) + (x_00008_00005=1)))
c Both direct and order encoding.
c Var 'aux1962' order represents '0' with '12995'
c Var 'aux1962' direct represents '0' with '12995'
c Var 'aux1962' order represents '1' with '12996'
-12995 12996 0
c Var 'aux1962' direct represents '1' with '12997'
12995 -12996 12997 0
-12997 12996 0
-12997 -12995 0
c Var 'aux1962' direct represents '2' with '-12996'
12995 12997 -12996 0
c Encoding variable: aux1963 with domain: int(0..2) (representing constraint ((x_00007_00004=1) + (x_00009_00004=1)))
c Both direct and order encoding.
c Var 'aux1963' order represents '0' with '12998'
c Var 'aux1963' direct represents '0' with '12998'
c Var 'aux1963' order represents '1' with '12999'
-12998 12999 0
c Var 'aux1963' direct represents '1' with '13000'
12998 -12999 13000 0
-13000 12999 0
-13000 -12998 0
c Var 'aux1963' direct represents '2' with '-12999'
12998 13000 -12999 0
c Encoding variable: aux1964 with domain: int(0..2) (representing constraint ((x_00009_00006=1) + (x_00009_00005=1)))
c Both direct and order encoding.
c Var 'aux1964' order represents '0' with '13001'
c Var 'aux1964' direct represents '0' with '13001'
c Var 'aux1964' order represents '1' with '13002'
-13001 13002 0
c Var 'aux1964' direct represents '1' with '13003'
13001 -13002 13003 0
-13003 13002 0
-13003 -13001 0
c Var 'aux1964' direct represents '2' with '-13002'
13001 13003 -13002 0
c Encoding variable: aux1965 with domain: int(0..3) (representing constraint ((x_00008_00006=1) + aux1964))
c Both direct and order encoding.
c Var 'aux1965' order represents '0' with '13004'
c Var 'aux1965' direct represents '0' with '13004'
c Var 'aux1965' order represents '1' with '13005'
-13004 13005 0
c Var 'aux1965' direct represents '1' with '13006'
13004 -13005 13006 0
-13006 13005 0
-13006 -13004 0
c Var 'aux1965' order represents '2' with '13007'
-13005 13007 0
c Var 'aux1965' direct represents '2' with '13008'
13005 -13007 13008 0
-13008 13007 0
-13008 -13005 0
c Var 'aux1965' direct represents '3' with '-13007'
13004 13006 13008 -13007 0
c Encoding variable: aux1966 with domain: int(0..4) (representing constraint (aux1961 + aux1963))
c Both direct and order encoding.
c Var 'aux1966' order represents '0' with '13009'
c Var 'aux1966' direct represents '0' with '13009'
c Var 'aux1966' order represents '1' with '13010'
-13009 13010 0
c Var 'aux1966' direct represents '1' with '13011'
13009 -13010 13011 0
-13011 13010 0
-13011 -13009 0
c Var 'aux1966' order represents '2' with '13012'
-13010 13012 0
c Var 'aux1966' direct represents '2' with '13013'
13010 -13012 13013 0
-13013 13012 0
-13013 -13010 0
c Var 'aux1966' order represents '3' with '13014'
-13012 13014 0
c Var 'aux1966' direct represents '3' with '13015'
13012 -13014 13015 0
-13015 13014 0
-13015 -13012 0
c Var 'aux1966' direct represents '4' with '-13014'
13009 13011 13013 13015 -13014 0
c Encoding variable: aux1967 with domain: int(0..2) (representing constraint ((x_00008_00004=2) + (x_00007_00006=2)))
c Both direct and order encoding.
c Var 'aux1967' order represents '0' with '13016'
c Var 'aux1967' direct represents '0' with '13016'
c Var 'aux1967' order represents '1' with '13017'
-13016 13017 0
c Var 'aux1967' direct represents '1' with '13018'
13016 -13017 13018 0
-13018 13017 0
-13018 -13016 0
c Var 'aux1967' direct represents '2' with '-13017'
13016 13018 -13017 0
c Encoding variable: aux1968 with domain: int(0..2) (representing constraint ((x_00007_00005=2) + (x_00008_00005=2)))
c Both direct and order encoding.
c Var 'aux1968' order represents '0' with '13019'
c Var 'aux1968' direct represents '0' with '13019'
c Var 'aux1968' order represents '1' with '13020'
-13019 13020 0
c Var 'aux1968' direct represents '1' with '13021'
13019 -13020 13021 0
-13021 13020 0
-13021 -13019 0
c Var 'aux1968' direct represents '2' with '-13020'
13019 13021 -13020 0
c Encoding variable: aux1969 with domain: int(0..2) (representing constraint ((x_00007_00004=2) + (x_00009_00004=2)))
c Both direct and order encoding.
c Var 'aux1969' order represents '0' with '13022'
c Var 'aux1969' direct represents '0' with '13022'
c Var 'aux1969' order represents '1' with '13023'
-13022 13023 0
c Var 'aux1969' direct represents '1' with '13024'
13022 -13023 13024 0
-13024 13023 0
-13024 -13022 0
c Var 'aux1969' direct represents '2' with '-13023'
13022 13024 -13023 0
c Encoding variable: aux1970 with domain: int(0..2) (representing constraint ((x_00009_00006=2) + (x_00009_00005=2)))
c Both direct and order encoding.
c Var 'aux1970' order represents '0' with '13025'
c Var 'aux1970' direct represents '0' with '13025'
c Var 'aux1970' order represents '1' with '13026'
-13025 13026 0
c Var 'aux1970' direct represents '1' with '13027'
13025 -13026 13027 0
-13027 13026 0
-13027 -13025 0
c Var 'aux1970' direct represents '2' with '-13026'
13025 13027 -13026 0
c Encoding variable: aux1971 with domain: int(0..3) (representing constraint ((x_00008_00006=2) + aux1970))
c Both direct and order encoding.
c Var 'aux1971' order represents '0' with '13028'
c Var 'aux1971' direct represents '0' with '13028'
c Var 'aux1971' order represents '1' with '13029'
-13028 13029 0
c Var 'aux1971' direct represents '1' with '13030'
13028 -13029 13030 0
-13030 13029 0
-13030 -13028 0
c Var 'aux1971' order represents '2' with '13031'
-13029 13031 0
c Var 'aux1971' direct represents '2' with '13032'
13029 -13031 13032 0
-13032 13031 0
-13032 -13029 0
c Var 'aux1971' direct represents '3' with '-13031'
13028 13030 13032 -13031 0
c Encoding variable: aux1972 with domain: int(0..4) (representing constraint (aux1967 + aux1969))
c Both direct and order encoding.
c Var 'aux1972' order represents '0' with '13033'
c Var 'aux1972' direct represents '0' with '13033'
c Var 'aux1972' order represents '1' with '13034'
-13033 13034 0
c Var 'aux1972' direct represents '1' with '13035'
13033 -13034 13035 0
-13035 13034 0
-13035 -13033 0
c Var 'aux1972' order represents '2' with '13036'
-13034 13036 0
c Var 'aux1972' direct represents '2' with '13037'
13034 -13036 13037 0
-13037 13036 0
-13037 -13034 0
c Var 'aux1972' order represents '3' with '13038'
-13036 13038 0
c Var 'aux1972' direct represents '3' with '13039'
13036 -13038 13039 0
-13039 13038 0
-13039 -13036 0
c Var 'aux1972' direct represents '4' with '-13038'
13033 13035 13037 13039 -13038 0
c Encoding variable: aux1973 with domain: int(0..2) (representing constraint ((x_00008_00004=3) + (x_00007_00006=3)))
c Both direct and order encoding.
c Var 'aux1973' order represents '0' with '13040'
c Var 'aux1973' direct represents '0' with '13040'
c Var 'aux1973' order represents '1' with '13041'
-13040 13041 0
c Var 'aux1973' direct represents '1' with '13042'
13040 -13041 13042 0
-13042 13041 0
-13042 -13040 0
c Var 'aux1973' direct represents '2' with '-13041'
13040 13042 -13041 0
c Encoding variable: aux1974 with domain: int(0..2) (representing constraint ((x_00007_00005=3) + (x_00008_00005=3)))
c Both direct and order encoding.
c Var 'aux1974' order represents '0' with '13043'
c Var 'aux1974' direct represents '0' with '13043'
c Var 'aux1974' order represents '1' with '13044'
-13043 13044 0
c Var 'aux1974' direct represents '1' with '13045'
13043 -13044 13045 0
-13045 13044 0
-13045 -13043 0
c Var 'aux1974' direct represents '2' with '-13044'
13043 13045 -13044 0
c Encoding variable: aux1975 with domain: int(0..2) (representing constraint ((x_00007_00004=3) + (x_00009_00004=3)))
c Both direct and order encoding.
c Var 'aux1975' order represents '0' with '13046'
c Var 'aux1975' direct represents '0' with '13046'
c Var 'aux1975' order represents '1' with '13047'
-13046 13047 0
c Var 'aux1975' direct represents '1' with '13048'
13046 -13047 13048 0
-13048 13047 0
-13048 -13046 0
c Var 'aux1975' direct represents '2' with '-13047'
13046 13048 -13047 0
c Encoding variable: aux1976 with domain: int(0..2) (representing constraint ((x_00009_00006=3) + (x_00009_00005=3)))
c Both direct and order encoding.
c Var 'aux1976' order represents '0' with '13049'
c Var 'aux1976' direct represents '0' with '13049'
c Var 'aux1976' order represents '1' with '13050'
-13049 13050 0
c Var 'aux1976' direct represents '1' with '13051'
13049 -13050 13051 0
-13051 13050 0
-13051 -13049 0
c Var 'aux1976' direct represents '2' with '-13050'
13049 13051 -13050 0
c Encoding variable: aux1977 with domain: int(0..3) (representing constraint ((x_00008_00006=3) + aux1976))
c Both direct and order encoding.
c Var 'aux1977' order represents '0' with '13052'
c Var 'aux1977' direct represents '0' with '13052'
c Var 'aux1977' order represents '1' with '13053'
-13052 13053 0
c Var 'aux1977' direct represents '1' with '13054'
13052 -13053 13054 0
-13054 13053 0
-13054 -13052 0
c Var 'aux1977' order represents '2' with '13055'
-13053 13055 0
c Var 'aux1977' direct represents '2' with '13056'
13053 -13055 13056 0
-13056 13055 0
-13056 -13053 0
c Var 'aux1977' direct represents '3' with '-13055'
13052 13054 13056 -13055 0
c Encoding variable: aux1978 with domain: int(0..4) (representing constraint (aux1973 + aux1975))
c Both direct and order encoding.
c Var 'aux1978' order represents '0' with '13057'
c Var 'aux1978' direct represents '0' with '13057'
c Var 'aux1978' order represents '1' with '13058'
-13057 13058 0
c Var 'aux1978' direct represents '1' with '13059'
13057 -13058 13059 0
-13059 13058 0
-13059 -13057 0
c Var 'aux1978' order represents '2' with '13060'
-13058 13060 0
c Var 'aux1978' direct represents '2' with '13061'
13058 -13060 13061 0
-13061 13060 0
-13061 -13058 0
c Var 'aux1978' order represents '3' with '13062'
-13060 13062 0
c Var 'aux1978' direct represents '3' with '13063'
13060 -13062 13063 0
-13063 13062 0
-13063 -13060 0
c Var 'aux1978' direct represents '4' with '-13062'
13057 13059 13061 13063 -13062 0
c Encoding variable: aux1979 with domain: int(0..2) (representing constraint ((x_00008_00004=4) + (x_00007_00006=4)))
c Both direct and order encoding.
c Var 'aux1979' order represents '0' with '13064'
c Var 'aux1979' direct represents '0' with '13064'
c Var 'aux1979' order represents '1' with '13065'
-13064 13065 0
c Var 'aux1979' direct represents '1' with '13066'
13064 -13065 13066 0
-13066 13065 0
-13066 -13064 0
c Var 'aux1979' direct represents '2' with '-13065'
13064 13066 -13065 0
c Encoding variable: aux1980 with domain: int(0..2) (representing constraint ((x_00007_00005=4) + (x_00008_00005=4)))
c Both direct and order encoding.
c Var 'aux1980' order represents '0' with '13067'
c Var 'aux1980' direct represents '0' with '13067'
c Var 'aux1980' order represents '1' with '13068'
-13067 13068 0
c Var 'aux1980' direct represents '1' with '13069'
13067 -13068 13069 0
-13069 13068 0
-13069 -13067 0
c Var 'aux1980' direct represents '2' with '-13068'
13067 13069 -13068 0
c Encoding variable: aux1981 with domain: int(0..2) (representing constraint ((x_00007_00004=4) + (x_00009_00004=4)))
c Both direct and order encoding.
c Var 'aux1981' order represents '0' with '13070'
c Var 'aux1981' direct represents '0' with '13070'
c Var 'aux1981' order represents '1' with '13071'
-13070 13071 0
c Var 'aux1981' direct represents '1' with '13072'
13070 -13071 13072 0
-13072 13071 0
-13072 -13070 0
c Var 'aux1981' direct represents '2' with '-13071'
13070 13072 -13071 0
c Encoding variable: aux1982 with domain: int(0..2) (representing constraint ((x_00009_00006=4) + (x_00009_00005=4)))
c Both direct and order encoding.
c Var 'aux1982' order represents '0' with '13073'
c Var 'aux1982' direct represents '0' with '13073'
c Var 'aux1982' order represents '1' with '13074'
-13073 13074 0
c Var 'aux1982' direct represents '1' with '13075'
13073 -13074 13075 0
-13075 13074 0
-13075 -13073 0
c Var 'aux1982' direct represents '2' with '-13074'
13073 13075 -13074 0
c Encoding variable: aux1983 with domain: int(0..3) (representing constraint ((x_00008_00006=4) + aux1982))
c Both direct and order encoding.
c Var 'aux1983' order represents '0' with '13076'
c Var 'aux1983' direct represents '0' with '13076'
c Var 'aux1983' order represents '1' with '13077'
-13076 13077 0
c Var 'aux1983' direct represents '1' with '13078'
13076 -13077 13078 0
-13078 13077 0
-13078 -13076 0
c Var 'aux1983' order represents '2' with '13079'
-13077 13079 0
c Var 'aux1983' direct represents '2' with '13080'
13077 -13079 13080 0
-13080 13079 0
-13080 -13077 0
c Var 'aux1983' direct represents '3' with '-13079'
13076 13078 13080 -13079 0
c Encoding variable: aux1984 with domain: int(0..4) (representing constraint (aux1979 + aux1981))
c Both direct and order encoding.
c Var 'aux1984' order represents '0' with '13081'
c Var 'aux1984' direct represents '0' with '13081'
c Var 'aux1984' order represents '1' with '13082'
-13081 13082 0
c Var 'aux1984' direct represents '1' with '13083'
13081 -13082 13083 0
-13083 13082 0
-13083 -13081 0
c Var 'aux1984' order represents '2' with '13084'
-13082 13084 0
c Var 'aux1984' direct represents '2' with '13085'
13082 -13084 13085 0
-13085 13084 0
-13085 -13082 0
c Var 'aux1984' order represents '3' with '13086'
-13084 13086 0
c Var 'aux1984' direct represents '3' with '13087'
13084 -13086 13087 0
-13087 13086 0
-13087 -13084 0
c Var 'aux1984' direct represents '4' with '-13086'
13081 13083 13085 13087 -13086 0
c Encoding variable: aux1985 with domain: int(0..2) (representing constraint ((x_00008_00004=5) + (x_00007_00006=5)))
c Both direct and order encoding.
c Var 'aux1985' order represents '0' with '13088'
c Var 'aux1985' direct represents '0' with '13088'
c Var 'aux1985' order represents '1' with '13089'
-13088 13089 0
c Var 'aux1985' direct represents '1' with '13090'
13088 -13089 13090 0
-13090 13089 0
-13090 -13088 0
c Var 'aux1985' direct represents '2' with '-13089'
13088 13090 -13089 0
c Encoding variable: aux1986 with domain: int(0..2) (representing constraint ((x_00007_00005=5) + (x_00008_00005=5)))
c Both direct and order encoding.
c Var 'aux1986' order represents '0' with '13091'
c Var 'aux1986' direct represents '0' with '13091'
c Var 'aux1986' order represents '1' with '13092'
-13091 13092 0
c Var 'aux1986' direct represents '1' with '13093'
13091 -13092 13093 0
-13093 13092 0
-13093 -13091 0
c Var 'aux1986' direct represents '2' with '-13092'
13091 13093 -13092 0
c Encoding variable: aux1987 with domain: int(0..2) (representing constraint ((x_00007_00004=5) + (x_00009_00004=5)))
c Both direct and order encoding.
c Var 'aux1987' order represents '0' with '13094'
c Var 'aux1987' direct represents '0' with '13094'
c Var 'aux1987' order represents '1' with '13095'
-13094 13095 0
c Var 'aux1987' direct represents '1' with '13096'
13094 -13095 13096 0
-13096 13095 0
-13096 -13094 0
c Var 'aux1987' direct represents '2' with '-13095'
13094 13096 -13095 0
c Encoding variable: aux1988 with domain: int(0..2) (representing constraint ((x_00009_00006=5) + (x_00009_00005=5)))
c Both direct and order encoding.
c Var 'aux1988' order represents '0' with '13097'
c Var 'aux1988' direct represents '0' with '13097'
c Var 'aux1988' order represents '1' with '13098'
-13097 13098 0
c Var 'aux1988' direct represents '1' with '13099'
13097 -13098 13099 0
-13099 13098 0
-13099 -13097 0
c Var 'aux1988' direct represents '2' with '-13098'
13097 13099 -13098 0
c Encoding variable: aux1989 with domain: int(0..3) (representing constraint ((x_00008_00006=5) + aux1988))
c Both direct and order encoding.
c Var 'aux1989' order represents '0' with '13100'
c Var 'aux1989' direct represents '0' with '13100'
c Var 'aux1989' order represents '1' with '13101'
-13100 13101 0
c Var 'aux1989' direct represents '1' with '13102'
13100 -13101 13102 0
-13102 13101 0
-13102 -13100 0
c Var 'aux1989' order represents '2' with '13103'
-13101 13103 0
c Var 'aux1989' direct represents '2' with '13104'
13101 -13103 13104 0
-13104 13103 0
-13104 -13101 0
c Var 'aux1989' direct represents '3' with '-13103'
13100 13102 13104 -13103 0
c Encoding variable: aux1990 with domain: int(0..4) (representing constraint (aux1985 + aux1987))
c Both direct and order encoding.
c Var 'aux1990' order represents '0' with '13105'
c Var 'aux1990' direct represents '0' with '13105'
c Var 'aux1990' order represents '1' with '13106'
-13105 13106 0
c Var 'aux1990' direct represents '1' with '13107'
13105 -13106 13107 0
-13107 13106 0
-13107 -13105 0
c Var 'aux1990' order represents '2' with '13108'
-13106 13108 0
c Var 'aux1990' direct represents '2' with '13109'
13106 -13108 13109 0
-13109 13108 0
-13109 -13106 0
c Var 'aux1990' order represents '3' with '13110'
-13108 13110 0
c Var 'aux1990' direct represents '3' with '13111'
13108 -13110 13111 0
-13111 13110 0
-13111 -13108 0
c Var 'aux1990' direct represents '4' with '-13110'
13105 13107 13109 13111 -13110 0
c Encoding variable: aux1991 with domain: int(0..2) (representing constraint ((x_00008_00004=6) + (x_00007_00006=6)))
c Both direct and order encoding.
c Var 'aux1991' order represents '0' with '13112'
c Var 'aux1991' direct represents '0' with '13112'
c Var 'aux1991' order represents '1' with '13113'
-13112 13113 0
c Var 'aux1991' direct represents '1' with '13114'
13112 -13113 13114 0
-13114 13113 0
-13114 -13112 0
c Var 'aux1991' direct represents '2' with '-13113'
13112 13114 -13113 0
c Encoding variable: aux1992 with domain: int(0..2) (representing constraint ((x_00007_00005=6) + (x_00008_00005=6)))
c Both direct and order encoding.
c Var 'aux1992' order represents '0' with '13115'
c Var 'aux1992' direct represents '0' with '13115'
c Var 'aux1992' order represents '1' with '13116'
-13115 13116 0
c Var 'aux1992' direct represents '1' with '13117'
13115 -13116 13117 0
-13117 13116 0
-13117 -13115 0
c Var 'aux1992' direct represents '2' with '-13116'
13115 13117 -13116 0
c Encoding variable: aux1993 with domain: int(0..2) (representing constraint ((x_00007_00004=6) + (x_00009_00004=6)))
c Both direct and order encoding.
c Var 'aux1993' order represents '0' with '13118'
c Var 'aux1993' direct represents '0' with '13118'
c Var 'aux1993' order represents '1' with '13119'
-13118 13119 0
c Var 'aux1993' direct represents '1' with '13120'
13118 -13119 13120 0
-13120 13119 0
-13120 -13118 0
c Var 'aux1993' direct represents '2' with '-13119'
13118 13120 -13119 0
c Encoding variable: aux1994 with domain: int(0..2) (representing constraint ((x_00009_00006=6) + (x_00009_00005=6)))
c Both direct and order encoding.
c Var 'aux1994' order represents '0' with '13121'
c Var 'aux1994' direct represents '0' with '13121'
c Var 'aux1994' order represents '1' with '13122'
-13121 13122 0
c Var 'aux1994' direct represents '1' with '13123'
13121 -13122 13123 0
-13123 13122 0
-13123 -13121 0
c Var 'aux1994' direct represents '2' with '-13122'
13121 13123 -13122 0
c Encoding variable: aux1995 with domain: int(0..3) (representing constraint ((x_00008_00006=6) + aux1994))
c Both direct and order encoding.
c Var 'aux1995' order represents '0' with '13124'
c Var 'aux1995' direct represents '0' with '13124'
c Var 'aux1995' order represents '1' with '13125'
-13124 13125 0
c Var 'aux1995' direct represents '1' with '13126'
13124 -13125 13126 0
-13126 13125 0
-13126 -13124 0
c Var 'aux1995' order represents '2' with '13127'
-13125 13127 0
c Var 'aux1995' direct represents '2' with '13128'
13125 -13127 13128 0
-13128 13127 0
-13128 -13125 0
c Var 'aux1995' direct represents '3' with '-13127'
13124 13126 13128 -13127 0
c Encoding variable: aux1996 with domain: int(0..4) (representing constraint (aux1991 + aux1993))
c Both direct and order encoding.
c Var 'aux1996' order represents '0' with '13129'
c Var 'aux1996' direct represents '0' with '13129'
c Var 'aux1996' order represents '1' with '13130'
-13129 13130 0
c Var 'aux1996' direct represents '1' with '13131'
13129 -13130 13131 0
-13131 13130 0
-13131 -13129 0
c Var 'aux1996' order represents '2' with '13132'
-13130 13132 0
c Var 'aux1996' direct represents '2' with '13133'
13130 -13132 13133 0
-13133 13132 0
-13133 -13130 0
c Var 'aux1996' order represents '3' with '13134'
-13132 13134 0
c Var 'aux1996' direct represents '3' with '13135'
13132 -13134 13135 0
-13135 13134 0
-13135 -13132 0
c Var 'aux1996' direct represents '4' with '-13134'
13129 13131 13133 13135 -13134 0
c Encoding variable: aux1997 with domain: int(0..2) (representing constraint ((x_00008_00004=7) + (x_00007_00006=7)))
c Both direct and order encoding.
c Var 'aux1997' order represents '0' with '13136'
c Var 'aux1997' direct represents '0' with '13136'
c Var 'aux1997' order represents '1' with '13137'
-13136 13137 0
c Var 'aux1997' direct represents '1' with '13138'
13136 -13137 13138 0
-13138 13137 0
-13138 -13136 0
c Var 'aux1997' direct represents '2' with '-13137'
13136 13138 -13137 0
c Encoding variable: aux1998 with domain: int(0..2) (representing constraint ((x_00007_00005=7) + (x_00008_00005=7)))
c Both direct and order encoding.
c Var 'aux1998' order represents '0' with '13139'
c Var 'aux1998' direct represents '0' with '13139'
c Var 'aux1998' order represents '1' with '13140'
-13139 13140 0
c Var 'aux1998' direct represents '1' with '13141'
13139 -13140 13141 0
-13141 13140 0
-13141 -13139 0
c Var 'aux1998' direct represents '2' with '-13140'
13139 13141 -13140 0
c Encoding variable: aux1999 with domain: int(0..2) (representing constraint ((x_00007_00004=7) + (x_00009_00004=7)))
c Both direct and order encoding.
c Var 'aux1999' order represents '0' with '13142'
c Var 'aux1999' direct represents '0' with '13142'
c Var 'aux1999' order represents '1' with '13143'
-13142 13143 0
c Var 'aux1999' direct represents '1' with '13144'
13142 -13143 13144 0
-13144 13143 0
-13144 -13142 0
c Var 'aux1999' direct represents '2' with '-13143'
13142 13144 -13143 0
c Encoding variable: aux2000 with domain: int(0..2) (representing constraint ((x_00009_00006=7) + (x_00009_00005=7)))
c Both direct and order encoding.
c Var 'aux2000' order represents '0' with '13145'
c Var 'aux2000' direct represents '0' with '13145'
c Var 'aux2000' order represents '1' with '13146'
-13145 13146 0
c Var 'aux2000' direct represents '1' with '13147'
13145 -13146 13147 0
-13147 13146 0
-13147 -13145 0
c Var 'aux2000' direct represents '2' with '-13146'
13145 13147 -13146 0
c Encoding variable: aux2001 with domain: int(0..3) (representing constraint ((x_00008_00006=7) + aux2000))
c Both direct and order encoding.
c Var 'aux2001' order represents '0' with '13148'
c Var 'aux2001' direct represents '0' with '13148'
c Var 'aux2001' order represents '1' with '13149'
-13148 13149 0
c Var 'aux2001' direct represents '1' with '13150'
13148 -13149 13150 0
-13150 13149 0
-13150 -13148 0
c Var 'aux2001' order represents '2' with '13151'
-13149 13151 0
c Var 'aux2001' direct represents '2' with '13152'
13149 -13151 13152 0
-13152 13151 0
-13152 -13149 0
c Var 'aux2001' direct represents '3' with '-13151'
13148 13150 13152 -13151 0
c Encoding variable: aux2002 with domain: int(0..4) (representing constraint (aux1997 + aux1999))
c Both direct and order encoding.
c Var 'aux2002' order represents '0' with '13153'
c Var 'aux2002' direct represents '0' with '13153'
c Var 'aux2002' order represents '1' with '13154'
-13153 13154 0
c Var 'aux2002' direct represents '1' with '13155'
13153 -13154 13155 0
-13155 13154 0
-13155 -13153 0
c Var 'aux2002' order represents '2' with '13156'
-13154 13156 0
c Var 'aux2002' direct represents '2' with '13157'
13154 -13156 13157 0
-13157 13156 0
-13157 -13154 0
c Var 'aux2002' order represents '3' with '13158'
-13156 13158 0
c Var 'aux2002' direct represents '3' with '13159'
13156 -13158 13159 0
-13159 13158 0
-13159 -13156 0
c Var 'aux2002' direct represents '4' with '-13158'
13153 13155 13157 13159 -13158 0
c Encoding variable: aux2003 with domain: int(0..2) (representing constraint ((x_00008_00004=8) + (x_00007_00006=8)))
c Both direct and order encoding.
c Var 'aux2003' order represents '0' with '13160'
c Var 'aux2003' direct represents '0' with '13160'
c Var 'aux2003' order represents '1' with '13161'
-13160 13161 0
c Var 'aux2003' direct represents '1' with '13162'
13160 -13161 13162 0
-13162 13161 0
-13162 -13160 0
c Var 'aux2003' direct represents '2' with '-13161'
13160 13162 -13161 0
c Encoding variable: aux2004 with domain: int(0..2) (representing constraint ((x_00007_00005=8) + (x_00008_00005=8)))
c Both direct and order encoding.
c Var 'aux2004' order represents '0' with '13163'
c Var 'aux2004' direct represents '0' with '13163'
c Var 'aux2004' order represents '1' with '13164'
-13163 13164 0
c Var 'aux2004' direct represents '1' with '13165'
13163 -13164 13165 0
-13165 13164 0
-13165 -13163 0
c Var 'aux2004' direct represents '2' with '-13164'
13163 13165 -13164 0
c Encoding variable: aux2005 with domain: int(0..2) (representing constraint ((x_00007_00004=8) + (x_00009_00004=8)))
c Both direct and order encoding.
c Var 'aux2005' order represents '0' with '13166'
c Var 'aux2005' direct represents '0' with '13166'
c Var 'aux2005' order represents '1' with '13167'
-13166 13167 0
c Var 'aux2005' direct represents '1' with '13168'
13166 -13167 13168 0
-13168 13167 0
-13168 -13166 0
c Var 'aux2005' direct represents '2' with '-13167'
13166 13168 -13167 0
c Encoding variable: aux2006 with domain: int(0..2) (representing constraint ((x_00009_00006=8) + (x_00009_00005=8)))
c Both direct and order encoding.
c Var 'aux2006' order represents '0' with '13169'
c Var 'aux2006' direct represents '0' with '13169'
c Var 'aux2006' order represents '1' with '13170'
-13169 13170 0
c Var 'aux2006' direct represents '1' with '13171'
13169 -13170 13171 0
-13171 13170 0
-13171 -13169 0
c Var 'aux2006' direct represents '2' with '-13170'
13169 13171 -13170 0
c Encoding variable: aux2007 with domain: int(0..3) (representing constraint ((x_00008_00006=8) + aux2006))
c Both direct and order encoding.
c Var 'aux2007' order represents '0' with '13172'
c Var 'aux2007' direct represents '0' with '13172'
c Var 'aux2007' order represents '1' with '13173'
-13172 13173 0
c Var 'aux2007' direct represents '1' with '13174'
13172 -13173 13174 0
-13174 13173 0
-13174 -13172 0
c Var 'aux2007' order represents '2' with '13175'
-13173 13175 0
c Var 'aux2007' direct represents '2' with '13176'
13173 -13175 13176 0
-13176 13175 0
-13176 -13173 0
c Var 'aux2007' direct represents '3' with '-13175'
13172 13174 13176 -13175 0
c Encoding variable: aux2008 with domain: int(0..4) (representing constraint (aux2003 + aux2005))
c Both direct and order encoding.
c Var 'aux2008' order represents '0' with '13177'
c Var 'aux2008' direct represents '0' with '13177'
c Var 'aux2008' order represents '1' with '13178'
-13177 13178 0
c Var 'aux2008' direct represents '1' with '13179'
13177 -13178 13179 0
-13179 13178 0
-13179 -13177 0
c Var 'aux2008' order represents '2' with '13180'
-13178 13180 0
c Var 'aux2008' direct represents '2' with '13181'
13178 -13180 13181 0
-13181 13180 0
-13181 -13178 0
c Var 'aux2008' order represents '3' with '13182'
-13180 13182 0
c Var 'aux2008' direct represents '3' with '13183'
13180 -13182 13183 0
-13183 13182 0
-13183 -13180 0
c Var 'aux2008' direct represents '4' with '-13182'
13177 13179 13181 13183 -13182 0
c Encoding variable: aux2009 with domain: int(0..2) (representing constraint ((x_00008_00004=9) + (x_00007_00006=9)))
c Both direct and order encoding.
c Var 'aux2009' order represents '0' with '13184'
c Var 'aux2009' direct represents '0' with '13184'
c Var 'aux2009' order represents '1' with '13185'
-13184 13185 0
c Var 'aux2009' direct represents '1' with '13186'
13184 -13185 13186 0
-13186 13185 0
-13186 -13184 0
c Var 'aux2009' direct represents '2' with '-13185'
13184 13186 -13185 0
c Encoding variable: aux2010 with domain: int(0..2) (representing constraint ((x_00007_00005=9) + (x_00008_00005=9)))
c Both direct and order encoding.
c Var 'aux2010' order represents '0' with '13187'
c Var 'aux2010' direct represents '0' with '13187'
c Var 'aux2010' order represents '1' with '13188'
-13187 13188 0
c Var 'aux2010' direct represents '1' with '13189'
13187 -13188 13189 0
-13189 13188 0
-13189 -13187 0
c Var 'aux2010' direct represents '2' with '-13188'
13187 13189 -13188 0
c Encoding variable: aux2011 with domain: int(0..2) (representing constraint ((x_00007_00004=9) + (x_00009_00004=9)))
c Both direct and order encoding.
c Var 'aux2011' order represents '0' with '13190'
c Var 'aux2011' direct represents '0' with '13190'
c Var 'aux2011' order represents '1' with '13191'
-13190 13191 0
c Var 'aux2011' direct represents '1' with '13192'
13190 -13191 13192 0
-13192 13191 0
-13192 -13190 0
c Var 'aux2011' direct represents '2' with '-13191'
13190 13192 -13191 0
c Encoding variable: aux2012 with domain: int(0..2) (representing constraint ((x_00009_00006=9) + (x_00009_00005=9)))
c Both direct and order encoding.
c Var 'aux2012' order represents '0' with '13193'
c Var 'aux2012' direct represents '0' with '13193'
c Var 'aux2012' order represents '1' with '13194'
-13193 13194 0
c Var 'aux2012' direct represents '1' with '13195'
13193 -13194 13195 0
-13195 13194 0
-13195 -13193 0
c Var 'aux2012' direct represents '2' with '-13194'
13193 13195 -13194 0
c Encoding variable: aux2013 with domain: int(0..3) (representing constraint ((x_00008_00006=9) + aux2012))
c Both direct and order encoding.
c Var 'aux2013' order represents '0' with '13196'
c Var 'aux2013' direct represents '0' with '13196'
c Var 'aux2013' order represents '1' with '13197'
-13196 13197 0
c Var 'aux2013' direct represents '1' with '13198'
13196 -13197 13198 0
-13198 13197 0
-13198 -13196 0
c Var 'aux2013' order represents '2' with '13199'
-13197 13199 0
c Var 'aux2013' direct represents '2' with '13200'
13197 -13199 13200 0
-13200 13199 0
-13200 -13197 0
c Var 'aux2013' direct represents '3' with '-13199'
13196 13198 13200 -13199 0
c Encoding variable: aux2014 with domain: int(0..4) (representing constraint (aux2009 + aux2011))
c Both direct and order encoding.
c Var 'aux2014' order represents '0' with '13201'
c Var 'aux2014' direct represents '0' with '13201'
c Var 'aux2014' order represents '1' with '13202'
-13201 13202 0
c Var 'aux2014' direct represents '1' with '13203'
13201 -13202 13203 0
-13203 13202 0
-13203 -13201 0
c Var 'aux2014' order represents '2' with '13204'
-13202 13204 0
c Var 'aux2014' direct represents '2' with '13205'
13202 -13204 13205 0
-13205 13204 0
-13205 -13202 0
c Var 'aux2014' order represents '3' with '13206'
-13204 13206 0
c Var 'aux2014' direct represents '3' with '13207'
13204 -13206 13207 0
-13207 13206 0
-13207 -13204 0
c Var 'aux2014' direct represents '4' with '-13206'
13201 13203 13205 13207 -13206 0
c Encoding variable: aux2015 with domain: int(0..2) (representing constraint ((x_00008_00007=1) + (x_00007_00009=1)))
c Both direct and order encoding.
c Var 'aux2015' order represents '0' with '13208'
c Var 'aux2015' direct represents '0' with '13208'
c Var 'aux2015' order represents '1' with '13209'
-13208 13209 0
c Var 'aux2015' direct represents '1' with '13210'
13208 -13209 13210 0
-13210 13209 0
-13210 -13208 0
c Var 'aux2015' direct represents '2' with '-13209'
13208 13210 -13209 0
c Encoding variable: aux2016 with domain: int(0..2) (representing constraint ((x_00007_00008=1) + (x_00008_00008=1)))
c Both direct and order encoding.
c Var 'aux2016' order represents '0' with '13211'
c Var 'aux2016' direct represents '0' with '13211'
c Var 'aux2016' order represents '1' with '13212'
-13211 13212 0
c Var 'aux2016' direct represents '1' with '13213'
13211 -13212 13213 0
-13213 13212 0
-13213 -13211 0
c Var 'aux2016' direct represents '2' with '-13212'
13211 13213 -13212 0
c Encoding variable: aux2017 with domain: int(0..2) (representing constraint ((x_00007_00007=1) + (x_00009_00007=1)))
c Both direct and order encoding.
c Var 'aux2017' order represents '0' with '13214'
c Var 'aux2017' direct represents '0' with '13214'
c Var 'aux2017' order represents '1' with '13215'
-13214 13215 0
c Var 'aux2017' direct represents '1' with '13216'
13214 -13215 13216 0
-13216 13215 0
-13216 -13214 0
c Var 'aux2017' direct represents '2' with '-13215'
13214 13216 -13215 0
c Encoding variable: aux2018 with domain: int(0..2) (representing constraint ((x_00009_00009=1) + (x_00009_00008=1)))
c Both direct and order encoding.
c Var 'aux2018' order represents '0' with '13217'
c Var 'aux2018' direct represents '0' with '13217'
c Var 'aux2018' order represents '1' with '13218'
-13217 13218 0
c Var 'aux2018' direct represents '1' with '13219'
13217 -13218 13219 0
-13219 13218 0
-13219 -13217 0
c Var 'aux2018' direct represents '2' with '-13218'
13217 13219 -13218 0
c Encoding variable: aux2019 with domain: int(0..3) (representing constraint ((x_00008_00009=1) + aux2018))
c Both direct and order encoding.
c Var 'aux2019' order represents '0' with '13220'
c Var 'aux2019' direct represents '0' with '13220'
c Var 'aux2019' order represents '1' with '13221'
-13220 13221 0
c Var 'aux2019' direct represents '1' with '13222'
13220 -13221 13222 0
-13222 13221 0
-13222 -13220 0
c Var 'aux2019' order represents '2' with '13223'
-13221 13223 0
c Var 'aux2019' direct represents '2' with '13224'
13221 -13223 13224 0
-13224 13223 0
-13224 -13221 0
c Var 'aux2019' direct represents '3' with '-13223'
13220 13222 13224 -13223 0
c Encoding variable: aux2020 with domain: int(0..4) (representing constraint (aux2015 + aux2017))
c Both direct and order encoding.
c Var 'aux2020' order represents '0' with '13225'
c Var 'aux2020' direct represents '0' with '13225'
c Var 'aux2020' order represents '1' with '13226'
-13225 13226 0
c Var 'aux2020' direct represents '1' with '13227'
13225 -13226 13227 0
-13227 13226 0
-13227 -13225 0
c Var 'aux2020' order represents '2' with '13228'
-13226 13228 0
c Var 'aux2020' direct represents '2' with '13229'
13226 -13228 13229 0
-13229 13228 0
-13229 -13226 0
c Var 'aux2020' order represents '3' with '13230'
-13228 13230 0
c Var 'aux2020' direct represents '3' with '13231'
13228 -13230 13231 0
-13231 13230 0
-13231 -13228 0
c Var 'aux2020' direct represents '4' with '-13230'
13225 13227 13229 13231 -13230 0
c Encoding variable: aux2021 with domain: int(0..2) (representing constraint ((x_00008_00007=2) + (x_00007_00009=2)))
c Both direct and order encoding.
c Var 'aux2021' order represents '0' with '13232'
c Var 'aux2021' direct represents '0' with '13232'
c Var 'aux2021' order represents '1' with '13233'
-13232 13233 0
c Var 'aux2021' direct represents '1' with '13234'
13232 -13233 13234 0
-13234 13233 0
-13234 -13232 0
c Var 'aux2021' direct represents '2' with '-13233'
13232 13234 -13233 0
c Encoding variable: aux2022 with domain: int(0..2) (representing constraint ((x_00007_00008=2) + (x_00008_00008=2)))
c Both direct and order encoding.
c Var 'aux2022' order represents '0' with '13235'
c Var 'aux2022' direct represents '0' with '13235'
c Var 'aux2022' order represents '1' with '13236'
-13235 13236 0
c Var 'aux2022' direct represents '1' with '13237'
13235 -13236 13237 0
-13237 13236 0
-13237 -13235 0
c Var 'aux2022' direct represents '2' with '-13236'
13235 13237 -13236 0
c Encoding variable: aux2023 with domain: int(0..2) (representing constraint ((x_00007_00007=2) + (x_00009_00007=2)))
c Both direct and order encoding.
c Var 'aux2023' order represents '0' with '13238'
c Var 'aux2023' direct represents '0' with '13238'
c Var 'aux2023' order represents '1' with '13239'
-13238 13239 0
c Var 'aux2023' direct represents '1' with '13240'
13238 -13239 13240 0
-13240 13239 0
-13240 -13238 0
c Var 'aux2023' direct represents '2' with '-13239'
13238 13240 -13239 0
c Encoding variable: aux2024 with domain: int(0..2) (representing constraint ((x_00009_00009=2) + (x_00009_00008=2)))
c Both direct and order encoding.
c Var 'aux2024' order represents '0' with '13241'
c Var 'aux2024' direct represents '0' with '13241'
c Var 'aux2024' order represents '1' with '13242'
-13241 13242 0
c Var 'aux2024' direct represents '1' with '13243'
13241 -13242 13243 0
-13243 13242 0
-13243 -13241 0
c Var 'aux2024' direct represents '2' with '-13242'
13241 13243 -13242 0
c Encoding variable: aux2025 with domain: int(0..3) (representing constraint ((x_00008_00009=2) + aux2024))
c Both direct and order encoding.
c Var 'aux2025' order represents '0' with '13244'
c Var 'aux2025' direct represents '0' with '13244'
c Var 'aux2025' order represents '1' with '13245'
-13244 13245 0
c Var 'aux2025' direct represents '1' with '13246'
13244 -13245 13246 0
-13246 13245 0
-13246 -13244 0
c Var 'aux2025' order represents '2' with '13247'
-13245 13247 0
c Var 'aux2025' direct represents '2' with '13248'
13245 -13247 13248 0
-13248 13247 0
-13248 -13245 0
c Var 'aux2025' direct represents '3' with '-13247'
13244 13246 13248 -13247 0
c Encoding variable: aux2026 with domain: int(0..4) (representing constraint (aux2021 + aux2023))
c Both direct and order encoding.
c Var 'aux2026' order represents '0' with '13249'
c Var 'aux2026' direct represents '0' with '13249'
c Var 'aux2026' order represents '1' with '13250'
-13249 13250 0
c Var 'aux2026' direct represents '1' with '13251'
13249 -13250 13251 0
-13251 13250 0
-13251 -13249 0
c Var 'aux2026' order represents '2' with '13252'
-13250 13252 0
c Var 'aux2026' direct represents '2' with '13253'
13250 -13252 13253 0
-13253 13252 0
-13253 -13250 0
c Var 'aux2026' order represents '3' with '13254'
-13252 13254 0
c Var 'aux2026' direct represents '3' with '13255'
13252 -13254 13255 0
-13255 13254 0
-13255 -13252 0
c Var 'aux2026' direct represents '4' with '-13254'
13249 13251 13253 13255 -13254 0
c Encoding variable: aux2027 with domain: int(0..2) (representing constraint ((x_00008_00007=3) + (x_00007_00009=3)))
c Both direct and order encoding.
c Var 'aux2027' order represents '0' with '13256'
c Var 'aux2027' direct represents '0' with '13256'
c Var 'aux2027' order represents '1' with '13257'
-13256 13257 0
c Var 'aux2027' direct represents '1' with '13258'
13256 -13257 13258 0
-13258 13257 0
-13258 -13256 0
c Var 'aux2027' direct represents '2' with '-13257'
13256 13258 -13257 0
c Encoding variable: aux2028 with domain: int(0..2) (representing constraint ((x_00007_00008=3) + (x_00008_00008=3)))
c Both direct and order encoding.
c Var 'aux2028' order represents '0' with '13259'
c Var 'aux2028' direct represents '0' with '13259'
c Var 'aux2028' order represents '1' with '13260'
-13259 13260 0
c Var 'aux2028' direct represents '1' with '13261'
13259 -13260 13261 0
-13261 13260 0
-13261 -13259 0
c Var 'aux2028' direct represents '2' with '-13260'
13259 13261 -13260 0
c Encoding variable: aux2029 with domain: int(0..2) (representing constraint ((x_00007_00007=3) + (x_00009_00007=3)))
c Both direct and order encoding.
c Var 'aux2029' order represents '0' with '13262'
c Var 'aux2029' direct represents '0' with '13262'
c Var 'aux2029' order represents '1' with '13263'
-13262 13263 0
c Var 'aux2029' direct represents '1' with '13264'
13262 -13263 13264 0
-13264 13263 0
-13264 -13262 0
c Var 'aux2029' direct represents '2' with '-13263'
13262 13264 -13263 0
c Encoding variable: aux2030 with domain: int(0..2) (representing constraint ((x_00009_00009=3) + (x_00009_00008=3)))
c Both direct and order encoding.
c Var 'aux2030' order represents '0' with '13265'
c Var 'aux2030' direct represents '0' with '13265'
c Var 'aux2030' order represents '1' with '13266'
-13265 13266 0
c Var 'aux2030' direct represents '1' with '13267'
13265 -13266 13267 0
-13267 13266 0
-13267 -13265 0
c Var 'aux2030' direct represents '2' with '-13266'
13265 13267 -13266 0
c Encoding variable: aux2031 with domain: int(0..3) (representing constraint ((x_00008_00009=3) + aux2030))
c Both direct and order encoding.
c Var 'aux2031' order represents '0' with '13268'
c Var 'aux2031' direct represents '0' with '13268'
c Var 'aux2031' order represents '1' with '13269'
-13268 13269 0
c Var 'aux2031' direct represents '1' with '13270'
13268 -13269 13270 0
-13270 13269 0
-13270 -13268 0
c Var 'aux2031' order represents '2' with '13271'
-13269 13271 0
c Var 'aux2031' direct represents '2' with '13272'
13269 -13271 13272 0
-13272 13271 0
-13272 -13269 0
c Var 'aux2031' direct represents '3' with '-13271'
13268 13270 13272 -13271 0
c Encoding variable: aux2032 with domain: int(0..4) (representing constraint (aux2027 + aux2029))
c Both direct and order encoding.
c Var 'aux2032' order represents '0' with '13273'
c Var 'aux2032' direct represents '0' with '13273'
c Var 'aux2032' order represents '1' with '13274'
-13273 13274 0
c Var 'aux2032' direct represents '1' with '13275'
13273 -13274 13275 0
-13275 13274 0
-13275 -13273 0
c Var 'aux2032' order represents '2' with '13276'
-13274 13276 0
c Var 'aux2032' direct represents '2' with '13277'
13274 -13276 13277 0
-13277 13276 0
-13277 -13274 0
c Var 'aux2032' order represents '3' with '13278'
-13276 13278 0
c Var 'aux2032' direct represents '3' with '13279'
13276 -13278 13279 0
-13279 13278 0
-13279 -13276 0
c Var 'aux2032' direct represents '4' with '-13278'
13273 13275 13277 13279 -13278 0
c Encoding variable: aux2033 with domain: int(0..2) (representing constraint ((x_00008_00007=4) + (x_00007_00009=4)))
c Both direct and order encoding.
c Var 'aux2033' order represents '0' with '13280'
c Var 'aux2033' direct represents '0' with '13280'
c Var 'aux2033' order represents '1' with '13281'
-13280 13281 0
c Var 'aux2033' direct represents '1' with '13282'
13280 -13281 13282 0
-13282 13281 0
-13282 -13280 0
c Var 'aux2033' direct represents '2' with '-13281'
13280 13282 -13281 0
c Encoding variable: aux2034 with domain: int(0..2) (representing constraint ((x_00007_00008=4) + (x_00008_00008=4)))
c Both direct and order encoding.
c Var 'aux2034' order represents '0' with '13283'
c Var 'aux2034' direct represents '0' with '13283'
c Var 'aux2034' order represents '1' with '13284'
-13283 13284 0
c Var 'aux2034' direct represents '1' with '13285'
13283 -13284 13285 0
-13285 13284 0
-13285 -13283 0
c Var 'aux2034' direct represents '2' with '-13284'
13283 13285 -13284 0
c Encoding variable: aux2035 with domain: int(0..2) (representing constraint ((x_00007_00007=4) + (x_00009_00007=4)))
c Both direct and order encoding.
c Var 'aux2035' order represents '0' with '13286'
c Var 'aux2035' direct represents '0' with '13286'
c Var 'aux2035' order represents '1' with '13287'
-13286 13287 0
c Var 'aux2035' direct represents '1' with '13288'
13286 -13287 13288 0
-13288 13287 0
-13288 -13286 0
c Var 'aux2035' direct represents '2' with '-13287'
13286 13288 -13287 0
c Encoding variable: aux2036 with domain: int(0..2) (representing constraint ((x_00009_00009=4) + (x_00009_00008=4)))
c Both direct and order encoding.
c Var 'aux2036' order represents '0' with '13289'
c Var 'aux2036' direct represents '0' with '13289'
c Var 'aux2036' order represents '1' with '13290'
-13289 13290 0
c Var 'aux2036' direct represents '1' with '13291'
13289 -13290 13291 0
-13291 13290 0
-13291 -13289 0
c Var 'aux2036' direct represents '2' with '-13290'
13289 13291 -13290 0
c Encoding variable: aux2037 with domain: int(0..3) (representing constraint ((x_00008_00009=4) + aux2036))
c Both direct and order encoding.
c Var 'aux2037' order represents '0' with '13292'
c Var 'aux2037' direct represents '0' with '13292'
c Var 'aux2037' order represents '1' with '13293'
-13292 13293 0
c Var 'aux2037' direct represents '1' with '13294'
13292 -13293 13294 0
-13294 13293 0
-13294 -13292 0
c Var 'aux2037' order represents '2' with '13295'
-13293 13295 0
c Var 'aux2037' direct represents '2' with '13296'
13293 -13295 13296 0
-13296 13295 0
-13296 -13293 0
c Var 'aux2037' direct represents '3' with '-13295'
13292 13294 13296 -13295 0
c Encoding variable: aux2038 with domain: int(0..4) (representing constraint (aux2033 + aux2035))
c Both direct and order encoding.
c Var 'aux2038' order represents '0' with '13297'
c Var 'aux2038' direct represents '0' with '13297'
c Var 'aux2038' order represents '1' with '13298'
-13297 13298 0
c Var 'aux2038' direct represents '1' with '13299'
13297 -13298 13299 0
-13299 13298 0
-13299 -13297 0
c Var 'aux2038' order represents '2' with '13300'
-13298 13300 0
c Var 'aux2038' direct represents '2' with '13301'
13298 -13300 13301 0
-13301 13300 0
-13301 -13298 0
c Var 'aux2038' order represents '3' with '13302'
-13300 13302 0
c Var 'aux2038' direct represents '3' with '13303'
13300 -13302 13303 0
-13303 13302 0
-13303 -13300 0
c Var 'aux2038' direct represents '4' with '-13302'
13297 13299 13301 13303 -13302 0
c Encoding variable: aux2039 with domain: int(0..2) (representing constraint ((x_00008_00007=5) + (x_00007_00009=5)))
c Both direct and order encoding.
c Var 'aux2039' order represents '0' with '13304'
c Var 'aux2039' direct represents '0' with '13304'
c Var 'aux2039' order represents '1' with '13305'
-13304 13305 0
c Var 'aux2039' direct represents '1' with '13306'
13304 -13305 13306 0
-13306 13305 0
-13306 -13304 0
c Var 'aux2039' direct represents '2' with '-13305'
13304 13306 -13305 0
c Encoding variable: aux2040 with domain: int(0..2) (representing constraint ((x_00007_00008=5) + (x_00008_00008=5)))
c Both direct and order encoding.
c Var 'aux2040' order represents '0' with '13307'
c Var 'aux2040' direct represents '0' with '13307'
c Var 'aux2040' order represents '1' with '13308'
-13307 13308 0
c Var 'aux2040' direct represents '1' with '13309'
13307 -13308 13309 0
-13309 13308 0
-13309 -13307 0
c Var 'aux2040' direct represents '2' with '-13308'
13307 13309 -13308 0
c Encoding variable: aux2041 with domain: int(0..2) (representing constraint ((x_00007_00007=5) + (x_00009_00007=5)))
c Both direct and order encoding.
c Var 'aux2041' order represents '0' with '13310'
c Var 'aux2041' direct represents '0' with '13310'
c Var 'aux2041' order represents '1' with '13311'
-13310 13311 0
c Var 'aux2041' direct represents '1' with '13312'
13310 -13311 13312 0
-13312 13311 0
-13312 -13310 0
c Var 'aux2041' direct represents '2' with '-13311'
13310 13312 -13311 0
c Encoding variable: aux2042 with domain: int(0..2) (representing constraint ((x_00009_00009=5) + (x_00009_00008=5)))
c Both direct and order encoding.
c Var 'aux2042' order represents '0' with '13313'
c Var 'aux2042' direct represents '0' with '13313'
c Var 'aux2042' order represents '1' with '13314'
-13313 13314 0
c Var 'aux2042' direct represents '1' with '13315'
13313 -13314 13315 0
-13315 13314 0
-13315 -13313 0
c Var 'aux2042' direct represents '2' with '-13314'
13313 13315 -13314 0
c Encoding variable: aux2043 with domain: int(0..3) (representing constraint ((x_00008_00009=5) + aux2042))
c Both direct and order encoding.
c Var 'aux2043' order represents '0' with '13316'
c Var 'aux2043' direct represents '0' with '13316'
c Var 'aux2043' order represents '1' with '13317'
-13316 13317 0
c Var 'aux2043' direct represents '1' with '13318'
13316 -13317 13318 0
-13318 13317 0
-13318 -13316 0
c Var 'aux2043' order represents '2' with '13319'
-13317 13319 0
c Var 'aux2043' direct represents '2' with '13320'
13317 -13319 13320 0
-13320 13319 0
-13320 -13317 0
c Var 'aux2043' direct represents '3' with '-13319'
13316 13318 13320 -13319 0
c Encoding variable: aux2044 with domain: int(0..4) (representing constraint (aux2039 + aux2041))
c Both direct and order encoding.
c Var 'aux2044' order represents '0' with '13321'
c Var 'aux2044' direct represents '0' with '13321'
c Var 'aux2044' order represents '1' with '13322'
-13321 13322 0
c Var 'aux2044' direct represents '1' with '13323'
13321 -13322 13323 0
-13323 13322 0
-13323 -13321 0
c Var 'aux2044' order represents '2' with '13324'
-13322 13324 0
c Var 'aux2044' direct represents '2' with '13325'
13322 -13324 13325 0
-13325 13324 0
-13325 -13322 0
c Var 'aux2044' order represents '3' with '13326'
-13324 13326 0
c Var 'aux2044' direct represents '3' with '13327'
13324 -13326 13327 0
-13327 13326 0
-13327 -13324 0
c Var 'aux2044' direct represents '4' with '-13326'
13321 13323 13325 13327 -13326 0
c Encoding variable: aux2045 with domain: int(0..2) (representing constraint ((x_00008_00007=6) + (x_00007_00009=6)))
c Both direct and order encoding.
c Var 'aux2045' order represents '0' with '13328'
c Var 'aux2045' direct represents '0' with '13328'
c Var 'aux2045' order represents '1' with '13329'
-13328 13329 0
c Var 'aux2045' direct represents '1' with '13330'
13328 -13329 13330 0
-13330 13329 0
-13330 -13328 0
c Var 'aux2045' direct represents '2' with '-13329'
13328 13330 -13329 0
c Encoding variable: aux2046 with domain: int(0..2) (representing constraint ((x_00007_00008=6) + (x_00008_00008=6)))
c Both direct and order encoding.
c Var 'aux2046' order represents '0' with '13331'
c Var 'aux2046' direct represents '0' with '13331'
c Var 'aux2046' order represents '1' with '13332'
-13331 13332 0
c Var 'aux2046' direct represents '1' with '13333'
13331 -13332 13333 0
-13333 13332 0
-13333 -13331 0
c Var 'aux2046' direct represents '2' with '-13332'
13331 13333 -13332 0
c Encoding variable: aux2047 with domain: int(0..2) (representing constraint ((x_00007_00007=6) + (x_00009_00007=6)))
c Both direct and order encoding.
c Var 'aux2047' order represents '0' with '13334'
c Var 'aux2047' direct represents '0' with '13334'
c Var 'aux2047' order represents '1' with '13335'
-13334 13335 0
c Var 'aux2047' direct represents '1' with '13336'
13334 -13335 13336 0
-13336 13335 0
-13336 -13334 0
c Var 'aux2047' direct represents '2' with '-13335'
13334 13336 -13335 0
c Encoding variable: aux2048 with domain: int(0..2) (representing constraint ((x_00009_00009=6) + (x_00009_00008=6)))
c Both direct and order encoding.
c Var 'aux2048' order represents '0' with '13337'
c Var 'aux2048' direct represents '0' with '13337'
c Var 'aux2048' order represents '1' with '13338'
-13337 13338 0
c Var 'aux2048' direct represents '1' with '13339'
13337 -13338 13339 0
-13339 13338 0
-13339 -13337 0
c Var 'aux2048' direct represents '2' with '-13338'
13337 13339 -13338 0
c Encoding variable: aux2049 with domain: int(0..3) (representing constraint ((x_00008_00009=6) + aux2048))
c Both direct and order encoding.
c Var 'aux2049' order represents '0' with '13340'
c Var 'aux2049' direct represents '0' with '13340'
c Var 'aux2049' order represents '1' with '13341'
-13340 13341 0
c Var 'aux2049' direct represents '1' with '13342'
13340 -13341 13342 0
-13342 13341 0
-13342 -13340 0
c Var 'aux2049' order represents '2' with '13343'
-13341 13343 0
c Var 'aux2049' direct represents '2' with '13344'
13341 -13343 13344 0
-13344 13343 0
-13344 -13341 0
c Var 'aux2049' direct represents '3' with '-13343'
13340 13342 13344 -13343 0
c Encoding variable: aux2050 with domain: int(0..4) (representing constraint (aux2045 + aux2047))
c Both direct and order encoding.
c Var 'aux2050' order represents '0' with '13345'
c Var 'aux2050' direct represents '0' with '13345'
c Var 'aux2050' order represents '1' with '13346'
-13345 13346 0
c Var 'aux2050' direct represents '1' with '13347'
13345 -13346 13347 0
-13347 13346 0
-13347 -13345 0
c Var 'aux2050' order represents '2' with '13348'
-13346 13348 0
c Var 'aux2050' direct represents '2' with '13349'
13346 -13348 13349 0
-13349 13348 0
-13349 -13346 0
c Var 'aux2050' order represents '3' with '13350'
-13348 13350 0
c Var 'aux2050' direct represents '3' with '13351'
13348 -13350 13351 0
-13351 13350 0
-13351 -13348 0
c Var 'aux2050' direct represents '4' with '-13350'
13345 13347 13349 13351 -13350 0
c Encoding variable: aux2051 with domain: int(0..2) (representing constraint ((x_00008_00007=7) + (x_00007_00009=7)))
c Both direct and order encoding.
c Var 'aux2051' order represents '0' with '13352'
c Var 'aux2051' direct represents '0' with '13352'
c Var 'aux2051' order represents '1' with '13353'
-13352 13353 0
c Var 'aux2051' direct represents '1' with '13354'
13352 -13353 13354 0
-13354 13353 0
-13354 -13352 0
c Var 'aux2051' direct represents '2' with '-13353'
13352 13354 -13353 0
c Encoding variable: aux2052 with domain: int(0..2) (representing constraint ((x_00007_00008=7) + (x_00008_00008=7)))
c Both direct and order encoding.
c Var 'aux2052' order represents '0' with '13355'
c Var 'aux2052' direct represents '0' with '13355'
c Var 'aux2052' order represents '1' with '13356'
-13355 13356 0
c Var 'aux2052' direct represents '1' with '13357'
13355 -13356 13357 0
-13357 13356 0
-13357 -13355 0
c Var 'aux2052' direct represents '2' with '-13356'
13355 13357 -13356 0
c Encoding variable: aux2053 with domain: int(0..2) (representing constraint ((x_00007_00007=7) + (x_00009_00007=7)))
c Both direct and order encoding.
c Var 'aux2053' order represents '0' with '13358'
c Var 'aux2053' direct represents '0' with '13358'
c Var 'aux2053' order represents '1' with '13359'
-13358 13359 0
c Var 'aux2053' direct represents '1' with '13360'
13358 -13359 13360 0
-13360 13359 0
-13360 -13358 0
c Var 'aux2053' direct represents '2' with '-13359'
13358 13360 -13359 0
c Encoding variable: aux2054 with domain: int(0..2) (representing constraint ((x_00009_00009=7) + (x_00009_00008=7)))
c Both direct and order encoding.
c Var 'aux2054' order represents '0' with '13361'
c Var 'aux2054' direct represents '0' with '13361'
c Var 'aux2054' order represents '1' with '13362'
-13361 13362 0
c Var 'aux2054' direct represents '1' with '13363'
13361 -13362 13363 0
-13363 13362 0
-13363 -13361 0
c Var 'aux2054' direct represents '2' with '-13362'
13361 13363 -13362 0
c Encoding variable: aux2055 with domain: int(0..3) (representing constraint ((x_00008_00009=7) + aux2054))
c Both direct and order encoding.
c Var 'aux2055' order represents '0' with '13364'
c Var 'aux2055' direct represents '0' with '13364'
c Var 'aux2055' order represents '1' with '13365'
-13364 13365 0
c Var 'aux2055' direct represents '1' with '13366'
13364 -13365 13366 0
-13366 13365 0
-13366 -13364 0
c Var 'aux2055' order represents '2' with '13367'
-13365 13367 0
c Var 'aux2055' direct represents '2' with '13368'
13365 -13367 13368 0
-13368 13367 0
-13368 -13365 0
c Var 'aux2055' direct represents '3' with '-13367'
13364 13366 13368 -13367 0
c Encoding variable: aux2056 with domain: int(0..4) (representing constraint (aux2051 + aux2053))
c Both direct and order encoding.
c Var 'aux2056' order represents '0' with '13369'
c Var 'aux2056' direct represents '0' with '13369'
c Var 'aux2056' order represents '1' with '13370'
-13369 13370 0
c Var 'aux2056' direct represents '1' with '13371'
13369 -13370 13371 0
-13371 13370 0
-13371 -13369 0
c Var 'aux2056' order represents '2' with '13372'
-13370 13372 0
c Var 'aux2056' direct represents '2' with '13373'
13370 -13372 13373 0
-13373 13372 0
-13373 -13370 0
c Var 'aux2056' order represents '3' with '13374'
-13372 13374 0
c Var 'aux2056' direct represents '3' with '13375'
13372 -13374 13375 0
-13375 13374 0
-13375 -13372 0
c Var 'aux2056' direct represents '4' with '-13374'
13369 13371 13373 13375 -13374 0
c Encoding variable: aux2057 with domain: int(0..2) (representing constraint ((x_00008_00007=8) + (x_00007_00009=8)))
c Both direct and order encoding.
c Var 'aux2057' order represents '0' with '13376'
c Var 'aux2057' direct represents '0' with '13376'
c Var 'aux2057' order represents '1' with '13377'
-13376 13377 0
c Var 'aux2057' direct represents '1' with '13378'
13376 -13377 13378 0
-13378 13377 0
-13378 -13376 0
c Var 'aux2057' direct represents '2' with '-13377'
13376 13378 -13377 0
c Encoding variable: aux2058 with domain: int(0..2) (representing constraint ((x_00007_00008=8) + (x_00008_00008=8)))
c Both direct and order encoding.
c Var 'aux2058' order represents '0' with '13379'
c Var 'aux2058' direct represents '0' with '13379'
c Var 'aux2058' order represents '1' with '13380'
-13379 13380 0
c Var 'aux2058' direct represents '1' with '13381'
13379 -13380 13381 0
-13381 13380 0
-13381 -13379 0
c Var 'aux2058' direct represents '2' with '-13380'
13379 13381 -13380 0
c Encoding variable: aux2059 with domain: int(0..2) (representing constraint ((x_00007_00007=8) + (x_00009_00007=8)))
c Both direct and order encoding.
c Var 'aux2059' order represents '0' with '13382'
c Var 'aux2059' direct represents '0' with '13382'
c Var 'aux2059' order represents '1' with '13383'
-13382 13383 0
c Var 'aux2059' direct represents '1' with '13384'
13382 -13383 13384 0
-13384 13383 0
-13384 -13382 0
c Var 'aux2059' direct represents '2' with '-13383'
13382 13384 -13383 0
c Encoding variable: aux2060 with domain: int(0..2) (representing constraint ((x_00009_00009=8) + (x_00009_00008=8)))
c Both direct and order encoding.
c Var 'aux2060' order represents '0' with '13385'
c Var 'aux2060' direct represents '0' with '13385'
c Var 'aux2060' order represents '1' with '13386'
-13385 13386 0
c Var 'aux2060' direct represents '1' with '13387'
13385 -13386 13387 0
-13387 13386 0
-13387 -13385 0
c Var 'aux2060' direct represents '2' with '-13386'
13385 13387 -13386 0
c Encoding variable: aux2061 with domain: int(0..3) (representing constraint ((x_00008_00009=8) + aux2060))
c Both direct and order encoding.
c Var 'aux2061' order represents '0' with '13388'
c Var 'aux2061' direct represents '0' with '13388'
c Var 'aux2061' order represents '1' with '13389'
-13388 13389 0
c Var 'aux2061' direct represents '1' with '13390'
13388 -13389 13390 0
-13390 13389 0
-13390 -13388 0
c Var 'aux2061' order represents '2' with '13391'
-13389 13391 0
c Var 'aux2061' direct represents '2' with '13392'
13389 -13391 13392 0
-13392 13391 0
-13392 -13389 0
c Var 'aux2061' direct represents '3' with '-13391'
13388 13390 13392 -13391 0
c Encoding variable: aux2062 with domain: int(0..4) (representing constraint (aux2057 + aux2059))
c Both direct and order encoding.
c Var 'aux2062' order represents '0' with '13393'
c Var 'aux2062' direct represents '0' with '13393'
c Var 'aux2062' order represents '1' with '13394'
-13393 13394 0
c Var 'aux2062' direct represents '1' with '13395'
13393 -13394 13395 0
-13395 13394 0
-13395 -13393 0
c Var 'aux2062' order represents '2' with '13396'
-13394 13396 0
c Var 'aux2062' direct represents '2' with '13397'
13394 -13396 13397 0
-13397 13396 0
-13397 -13394 0
c Var 'aux2062' order represents '3' with '13398'
-13396 13398 0
c Var 'aux2062' direct represents '3' with '13399'
13396 -13398 13399 0
-13399 13398 0
-13399 -13396 0
c Var 'aux2062' direct represents '4' with '-13398'
13393 13395 13397 13399 -13398 0
c Encoding variable: aux2063 with domain: int(0..2) (representing constraint ((x_00008_00007=9) + (x_00007_00009=9)))
c Both direct and order encoding.
c Var 'aux2063' order represents '0' with '13400'
c Var 'aux2063' direct represents '0' with '13400'
c Var 'aux2063' order represents '1' with '13401'
-13400 13401 0
c Var 'aux2063' direct represents '1' with '13402'
13400 -13401 13402 0
-13402 13401 0
-13402 -13400 0
c Var 'aux2063' direct represents '2' with '-13401'
13400 13402 -13401 0
c Encoding variable: aux2064 with domain: int(0..2) (representing constraint ((x_00007_00008=9) + (x_00008_00008=9)))
c Both direct and order encoding.
c Var 'aux2064' order represents '0' with '13403'
c Var 'aux2064' direct represents '0' with '13403'
c Var 'aux2064' order represents '1' with '13404'
-13403 13404 0
c Var 'aux2064' direct represents '1' with '13405'
13403 -13404 13405 0
-13405 13404 0
-13405 -13403 0
c Var 'aux2064' direct represents '2' with '-13404'
13403 13405 -13404 0
c Encoding variable: aux2065 with domain: int(0..2) (representing constraint ((x_00007_00007=9) + (x_00009_00007=9)))
c Both direct and order encoding.
c Var 'aux2065' order represents '0' with '13406'
c Var 'aux2065' direct represents '0' with '13406'
c Var 'aux2065' order represents '1' with '13407'
-13406 13407 0
c Var 'aux2065' direct represents '1' with '13408'
13406 -13407 13408 0
-13408 13407 0
-13408 -13406 0
c Var 'aux2065' direct represents '2' with '-13407'
13406 13408 -13407 0
c Encoding variable: aux2066 with domain: int(0..2) (representing constraint ((x_00009_00009=9) + (x_00009_00008=9)))
c Both direct and order encoding.
c Var 'aux2066' order represents '0' with '13409'
c Var 'aux2066' direct represents '0' with '13409'
c Var 'aux2066' order represents '1' with '13410'
-13409 13410 0
c Var 'aux2066' direct represents '1' with '13411'
13409 -13410 13411 0
-13411 13410 0
-13411 -13409 0
c Var 'aux2066' direct represents '2' with '-13410'
13409 13411 -13410 0
c Encoding variable: aux2067 with domain: int(0..3) (representing constraint ((x_00008_00009=9) + aux2066))
c Both direct and order encoding.
c Var 'aux2067' order represents '0' with '13412'
c Var 'aux2067' direct represents '0' with '13412'
c Var 'aux2067' order represents '1' with '13413'
-13412 13413 0
c Var 'aux2067' direct represents '1' with '13414'
13412 -13413 13414 0
-13414 13413 0
-13414 -13412 0
c Var 'aux2067' order represents '2' with '13415'
-13413 13415 0
c Var 'aux2067' direct represents '2' with '13416'
13413 -13415 13416 0
-13416 13415 0
-13416 -13413 0
c Var 'aux2067' direct represents '3' with '-13415'
13412 13414 13416 -13415 0
c Encoding variable: aux2068 with domain: int(0..4) (representing constraint (aux2063 + aux2065))
c Both direct and order encoding.
c Var 'aux2068' order represents '0' with '13417'
c Var 'aux2068' direct represents '0' with '13417'
c Var 'aux2068' order represents '1' with '13418'
-13417 13418 0
c Var 'aux2068' direct represents '1' with '13419'
13417 -13418 13419 0
-13419 13418 0
-13419 -13417 0
c Var 'aux2068' order represents '2' with '13420'
-13418 13420 0
c Var 'aux2068' direct represents '2' with '13421'
13418 -13420 13421 0
-13421 13420 0
-13421 -13418 0
c Var 'aux2068' order represents '3' with '13422'
-13420 13422 0
c Var 'aux2068' direct represents '3' with '13423'
13420 -13422 13423 0
-13423 13422 0
-13423 -13420 0
c Var 'aux2068' direct represents '4' with '-13422'
13417 13419 13421 13423 -13422 0
c Encoding variable: aux2069 with domain: int(0..2) (representing constraint ((x_00003_00005=1) + (x_00002_00006=1)))
c Both direct and order encoding.
c Var 'aux2069' order represents '0' with '13424'
c Var 'aux2069' direct represents '0' with '13424'
c Var 'aux2069' order represents '1' with '13425'
-13424 13425 0
c Var 'aux2069' direct represents '1' with '13426'
13424 -13425 13426 0
-13426 13425 0
-13426 -13424 0
c Var 'aux2069' direct represents '2' with '-13425'
13424 13426 -13425 0
c Encoding variable: aux2070 with domain: int(0..2) (representing constraint ((x_00003_00005=2) + (x_00002_00006=2)))
c Both direct and order encoding.
c Var 'aux2070' order represents '0' with '13427'
c Var 'aux2070' direct represents '0' with '13427'
c Var 'aux2070' order represents '1' with '13428'
-13427 13428 0
c Var 'aux2070' direct represents '1' with '13429'
13427 -13428 13429 0
-13429 13428 0
-13429 -13427 0
c Var 'aux2070' direct represents '2' with '-13428'
13427 13429 -13428 0
c Encoding variable: aux2071 with domain: int(0..2) (representing constraint ((x_00003_00005=3) + (x_00002_00006=3)))
c Both direct and order encoding.
c Var 'aux2071' order represents '0' with '13430'
c Var 'aux2071' direct represents '0' with '13430'
c Var 'aux2071' order represents '1' with '13431'
-13430 13431 0
c Var 'aux2071' direct represents '1' with '13432'
13430 -13431 13432 0
-13432 13431 0
-13432 -13430 0
c Var 'aux2071' direct represents '2' with '-13431'
13430 13432 -13431 0
c Encoding variable: aux2072 with domain: int(0..2) (representing constraint ((x_00003_00005=4) + (x_00002_00006=4)))
c Both direct and order encoding.
c Var 'aux2072' order represents '0' with '13433'
c Var 'aux2072' direct represents '0' with '13433'
c Var 'aux2072' order represents '1' with '13434'
-13433 13434 0
c Var 'aux2072' direct represents '1' with '13435'
13433 -13434 13435 0
-13435 13434 0
-13435 -13433 0
c Var 'aux2072' direct represents '2' with '-13434'
13433 13435 -13434 0
c Encoding variable: aux2073 with domain: int(0..2) (representing constraint ((x_00003_00005=5) + (x_00002_00006=5)))
c Both direct and order encoding.
c Var 'aux2073' order represents '0' with '13436'
c Var 'aux2073' direct represents '0' with '13436'
c Var 'aux2073' order represents '1' with '13437'
-13436 13437 0
c Var 'aux2073' direct represents '1' with '13438'
13436 -13437 13438 0
-13438 13437 0
-13438 -13436 0
c Var 'aux2073' direct represents '2' with '-13437'
13436 13438 -13437 0
c Encoding variable: aux2074 with domain: int(0..2) (representing constraint ((x_00003_00005=6) + (x_00002_00006=6)))
c Both direct and order encoding.
c Var 'aux2074' order represents '0' with '13439'
c Var 'aux2074' direct represents '0' with '13439'
c Var 'aux2074' order represents '1' with '13440'
-13439 13440 0
c Var 'aux2074' direct represents '1' with '13441'
13439 -13440 13441 0
-13441 13440 0
-13441 -13439 0
c Var 'aux2074' direct represents '2' with '-13440'
13439 13441 -13440 0
c Encoding variable: aux2075 with domain: int(0..2) (representing constraint ((x_00003_00005=7) + (x_00002_00006=7)))
c Both direct and order encoding.
c Var 'aux2075' order represents '0' with '13442'
c Var 'aux2075' direct represents '0' with '13442'
c Var 'aux2075' order represents '1' with '13443'
-13442 13443 0
c Var 'aux2075' direct represents '1' with '13444'
13442 -13443 13444 0
-13444 13443 0
-13444 -13442 0
c Var 'aux2075' direct represents '2' with '-13443'
13442 13444 -13443 0
c Encoding variable: aux2076 with domain: int(0..2) (representing constraint ((x_00003_00005=8) + (x_00002_00006=8)))
c Both direct and order encoding.
c Var 'aux2076' order represents '0' with '13445'
c Var 'aux2076' direct represents '0' with '13445'
c Var 'aux2076' order represents '1' with '13446'
-13445 13446 0
c Var 'aux2076' direct represents '1' with '13447'
13445 -13446 13447 0
-13447 13446 0
-13447 -13445 0
c Var 'aux2076' direct represents '2' with '-13446'
13445 13447 -13446 0
c Encoding variable: aux2077 with domain: int(0..2) (representing constraint ((x_00003_00005=9) + (x_00002_00006=9)))
c Both direct and order encoding.
c Var 'aux2077' order represents '0' with '13448'
c Var 'aux2077' direct represents '0' with '13448'
c Var 'aux2077' order represents '1' with '13449'
-13448 13449 0
c Var 'aux2077' direct represents '1' with '13450'
13448 -13449 13450 0
-13450 13449 0
-13450 -13448 0
c Var 'aux2077' direct represents '2' with '-13449'
13448 13450 -13449 0
c Encoding variable: aux2078 with domain: int(0..2) (representing constraint ((x_00003_00009=1) + (x_00002_00009=1)))
c Both direct and order encoding.
c Var 'aux2078' order represents '0' with '13451'
c Var 'aux2078' direct represents '0' with '13451'
c Var 'aux2078' order represents '1' with '13452'
-13451 13452 0
c Var 'aux2078' direct represents '1' with '13453'
13451 -13452 13453 0
-13453 13452 0
-13453 -13451 0
c Var 'aux2078' direct represents '2' with '-13452'
13451 13453 -13452 0
c Encoding variable: aux2079 with domain: int(0..2) (representing constraint ((x_00003_00009=2) + (x_00002_00009=2)))
c Both direct and order encoding.
c Var 'aux2079' order represents '0' with '13454'
c Var 'aux2079' direct represents '0' with '13454'
c Var 'aux2079' order represents '1' with '13455'
-13454 13455 0
c Var 'aux2079' direct represents '1' with '13456'
13454 -13455 13456 0
-13456 13455 0
-13456 -13454 0
c Var 'aux2079' direct represents '2' with '-13455'
13454 13456 -13455 0
c Encoding variable: aux2080 with domain: int(0..2) (representing constraint ((x_00003_00009=3) + (x_00002_00009=3)))
c Both direct and order encoding.
c Var 'aux2080' order represents '0' with '13457'
c Var 'aux2080' direct represents '0' with '13457'
c Var 'aux2080' order represents '1' with '13458'
-13457 13458 0
c Var 'aux2080' direct represents '1' with '13459'
13457 -13458 13459 0
-13459 13458 0
-13459 -13457 0
c Var 'aux2080' direct represents '2' with '-13458'
13457 13459 -13458 0
c Encoding variable: aux2081 with domain: int(0..2) (representing constraint ((x_00003_00009=4) + (x_00002_00009=4)))
c Both direct and order encoding.
c Var 'aux2081' order represents '0' with '13460'
c Var 'aux2081' direct represents '0' with '13460'
c Var 'aux2081' order represents '1' with '13461'
-13460 13461 0
c Var 'aux2081' direct represents '1' with '13462'
13460 -13461 13462 0
-13462 13461 0
-13462 -13460 0
c Var 'aux2081' direct represents '2' with '-13461'
13460 13462 -13461 0
c Encoding variable: aux2082 with domain: int(0..2) (representing constraint ((x_00003_00009=5) + (x_00002_00009=5)))
c Both direct and order encoding.
c Var 'aux2082' order represents '0' with '13463'
c Var 'aux2082' direct represents '0' with '13463'
c Var 'aux2082' order represents '1' with '13464'
-13463 13464 0
c Var 'aux2082' direct represents '1' with '13465'
13463 -13464 13465 0
-13465 13464 0
-13465 -13463 0
c Var 'aux2082' direct represents '2' with '-13464'
13463 13465 -13464 0
c Encoding variable: aux2083 with domain: int(0..2) (representing constraint ((x_00003_00009=6) + (x_00002_00009=6)))
c Both direct and order encoding.
c Var 'aux2083' order represents '0' with '13466'
c Var 'aux2083' direct represents '0' with '13466'
c Var 'aux2083' order represents '1' with '13467'
-13466 13467 0
c Var 'aux2083' direct represents '1' with '13468'
13466 -13467 13468 0
-13468 13467 0
-13468 -13466 0
c Var 'aux2083' direct represents '2' with '-13467'
13466 13468 -13467 0
c Encoding variable: aux2084 with domain: int(0..2) (representing constraint ((x_00003_00009=7) + (x_00002_00009=7)))
c Both direct and order encoding.
c Var 'aux2084' order represents '0' with '13469'
c Var 'aux2084' direct represents '0' with '13469'
c Var 'aux2084' order represents '1' with '13470'
-13469 13470 0
c Var 'aux2084' direct represents '1' with '13471'
13469 -13470 13471 0
-13471 13470 0
-13471 -13469 0
c Var 'aux2084' direct represents '2' with '-13470'
13469 13471 -13470 0
c Encoding variable: aux2085 with domain: int(0..2) (representing constraint ((x_00003_00009=8) + (x_00002_00009=8)))
c Both direct and order encoding.
c Var 'aux2085' order represents '0' with '13472'
c Var 'aux2085' direct represents '0' with '13472'
c Var 'aux2085' order represents '1' with '13473'
-13472 13473 0
c Var 'aux2085' direct represents '1' with '13474'
13472 -13473 13474 0
-13474 13473 0
-13474 -13472 0
c Var 'aux2085' direct represents '2' with '-13473'
13472 13474 -13473 0
c Encoding variable: aux2086 with domain: int(0..2) (representing constraint ((x_00003_00009=9) + (x_00002_00009=9)))
c Both direct and order encoding.
c Var 'aux2086' order represents '0' with '13475'
c Var 'aux2086' direct represents '0' with '13475'
c Var 'aux2086' order represents '1' with '13476'
-13475 13476 0
c Var 'aux2086' direct represents '1' with '13477'
13475 -13476 13477 0
-13477 13476 0
-13477 -13475 0
c Var 'aux2086' direct represents '2' with '-13476'
13475 13477 -13476 0
c Encoding variable: aux2087 with domain: int(0..2) (representing constraint ((x_00003_00001=1) + (x_00002_00002=1)))
c Both direct and order encoding.
c Var 'aux2087' order represents '0' with '13478'
c Var 'aux2087' direct represents '0' with '13478'
c Var 'aux2087' order represents '1' with '13479'
-13478 13479 0
c Var 'aux2087' direct represents '1' with '13480'
13478 -13479 13480 0
-13480 13479 0
-13480 -13478 0
c Var 'aux2087' direct represents '2' with '-13479'
13478 13480 -13479 0
c Encoding variable: aux2088 with domain: int(0..2) (representing constraint ((x_00003_00001=2) + (x_00002_00002=2)))
c Both direct and order encoding.
c Var 'aux2088' order represents '0' with '13481'
c Var 'aux2088' direct represents '0' with '13481'
c Var 'aux2088' order represents '1' with '13482'
-13481 13482 0
c Var 'aux2088' direct represents '1' with '13483'
13481 -13482 13483 0
-13483 13482 0
-13483 -13481 0
c Var 'aux2088' direct represents '2' with '-13482'
13481 13483 -13482 0
c Encoding variable: aux2089 with domain: int(0..2) (representing constraint ((x_00003_00001=3) + (x_00002_00002=3)))
c Both direct and order encoding.
c Var 'aux2089' order represents '0' with '13484'
c Var 'aux2089' direct represents '0' with '13484'
c Var 'aux2089' order represents '1' with '13485'
-13484 13485 0
c Var 'aux2089' direct represents '1' with '13486'
13484 -13485 13486 0
-13486 13485 0
-13486 -13484 0
c Var 'aux2089' direct represents '2' with '-13485'
13484 13486 -13485 0
c Encoding variable: aux2090 with domain: int(0..2) (representing constraint ((x_00003_00001=4) + (x_00002_00002=4)))
c Both direct and order encoding.
c Var 'aux2090' order represents '0' with '13487'
c Var 'aux2090' direct represents '0' with '13487'
c Var 'aux2090' order represents '1' with '13488'
-13487 13488 0
c Var 'aux2090' direct represents '1' with '13489'
13487 -13488 13489 0
-13489 13488 0
-13489 -13487 0
c Var 'aux2090' direct represents '2' with '-13488'
13487 13489 -13488 0
c Encoding variable: aux2091 with domain: int(0..2) (representing constraint ((x_00003_00001=5) + (x_00002_00002=5)))
c Both direct and order encoding.
c Var 'aux2091' order represents '0' with '13490'
c Var 'aux2091' direct represents '0' with '13490'
c Var 'aux2091' order represents '1' with '13491'
-13490 13491 0
c Var 'aux2091' direct represents '1' with '13492'
13490 -13491 13492 0
-13492 13491 0
-13492 -13490 0
c Var 'aux2091' direct represents '2' with '-13491'
13490 13492 -13491 0
c Encoding variable: aux2092 with domain: int(0..2) (representing constraint ((x_00003_00001=6) + (x_00002_00002=6)))
c Both direct and order encoding.
c Var 'aux2092' order represents '0' with '13493'
c Var 'aux2092' direct represents '0' with '13493'
c Var 'aux2092' order represents '1' with '13494'
-13493 13494 0
c Var 'aux2092' direct represents '1' with '13495'
13493 -13494 13495 0
-13495 13494 0
-13495 -13493 0
c Var 'aux2092' direct represents '2' with '-13494'
13493 13495 -13494 0
c Encoding variable: aux2093 with domain: int(0..2) (representing constraint ((x_00003_00001=7) + (x_00002_00002=7)))
c Both direct and order encoding.
c Var 'aux2093' order represents '0' with '13496'
c Var 'aux2093' direct represents '0' with '13496'
c Var 'aux2093' order represents '1' with '13497'
-13496 13497 0
c Var 'aux2093' direct represents '1' with '13498'
13496 -13497 13498 0
-13498 13497 0
-13498 -13496 0
c Var 'aux2093' direct represents '2' with '-13497'
13496 13498 -13497 0
c Encoding variable: aux2094 with domain: int(0..2) (representing constraint ((x_00003_00001=8) + (x_00002_00002=8)))
c Both direct and order encoding.
c Var 'aux2094' order represents '0' with '13499'
c Var 'aux2094' direct represents '0' with '13499'
c Var 'aux2094' order represents '1' with '13500'
-13499 13500 0
c Var 'aux2094' direct represents '1' with '13501'
13499 -13500 13501 0
-13501 13500 0
-13501 -13499 0
c Var 'aux2094' direct represents '2' with '-13500'
13499 13501 -13500 0
c Encoding variable: aux2095 with domain: int(0..2) (representing constraint ((x_00003_00001=9) + (x_00002_00002=9)))
c Both direct and order encoding.
c Var 'aux2095' order represents '0' with '13502'
c Var 'aux2095' direct represents '0' with '13502'
c Var 'aux2095' order represents '1' with '13503'
-13502 13503 0
c Var 'aux2095' direct represents '1' with '13504'
13502 -13503 13504 0
-13504 13503 0
-13504 -13502 0
c Var 'aux2095' direct represents '2' with '-13503'
13502 13504 -13503 0
c Encoding variable: aux2096 with domain: int(0..2) (representing constraint ((x_00008_00001=1) + (x_00007_00001=1)))
c Both direct and order encoding.
c Var 'aux2096' order represents '0' with '13505'
c Var 'aux2096' direct represents '0' with '13505'
c Var 'aux2096' order represents '1' with '13506'
-13505 13506 0
c Var 'aux2096' direct represents '1' with '13507'
13505 -13506 13507 0
-13507 13506 0
-13507 -13505 0
c Var 'aux2096' direct represents '2' with '-13506'
13505 13507 -13506 0
c Encoding variable: aux2097 with domain: int(0..2) (representing constraint ((x_00008_00001=2) + (x_00007_00001=2)))
c Both direct and order encoding.
c Var 'aux2097' order represents '0' with '13508'
c Var 'aux2097' direct represents '0' with '13508'
c Var 'aux2097' order represents '1' with '13509'
-13508 13509 0
c Var 'aux2097' direct represents '1' with '13510'
13508 -13509 13510 0
-13510 13509 0
-13510 -13508 0
c Var 'aux2097' direct represents '2' with '-13509'
13508 13510 -13509 0
c Encoding variable: aux2098 with domain: int(0..2) (representing constraint ((x_00008_00001=3) + (x_00007_00001=3)))
c Both direct and order encoding.
c Var 'aux2098' order represents '0' with '13511'
c Var 'aux2098' direct represents '0' with '13511'
c Var 'aux2098' order represents '1' with '13512'
-13511 13512 0
c Var 'aux2098' direct represents '1' with '13513'
13511 -13512 13513 0
-13513 13512 0
-13513 -13511 0
c Var 'aux2098' direct represents '2' with '-13512'
13511 13513 -13512 0
c Encoding variable: aux2099 with domain: int(0..2) (representing constraint ((x_00008_00001=4) + (x_00007_00001=4)))
c Both direct and order encoding.
c Var 'aux2099' order represents '0' with '13514'
c Var 'aux2099' direct represents '0' with '13514'
c Var 'aux2099' order represents '1' with '13515'
-13514 13515 0
c Var 'aux2099' direct represents '1' with '13516'
13514 -13515 13516 0
-13516 13515 0
-13516 -13514 0
c Var 'aux2099' direct represents '2' with '-13515'
13514 13516 -13515 0
c Encoding variable: aux2100 with domain: int(0..2) (representing constraint ((x_00008_00001=5) + (x_00007_00001=5)))
c Both direct and order encoding.
c Var 'aux2100' order represents '0' with '13517'
c Var 'aux2100' direct represents '0' with '13517'
c Var 'aux2100' order represents '1' with '13518'
-13517 13518 0
c Var 'aux2100' direct represents '1' with '13519'
13517 -13518 13519 0
-13519 13518 0
-13519 -13517 0
c Var 'aux2100' direct represents '2' with '-13518'
13517 13519 -13518 0
c Encoding variable: aux2101 with domain: int(0..2) (representing constraint ((x_00008_00001=6) + (x_00007_00001=6)))
c Both direct and order encoding.
c Var 'aux2101' order represents '0' with '13520'
c Var 'aux2101' direct represents '0' with '13520'
c Var 'aux2101' order represents '1' with '13521'
-13520 13521 0
c Var 'aux2101' direct represents '1' with '13522'
13520 -13521 13522 0
-13522 13521 0
-13522 -13520 0
c Var 'aux2101' direct represents '2' with '-13521'
13520 13522 -13521 0
c Encoding variable: aux2102 with domain: int(0..2) (representing constraint ((x_00008_00001=7) + (x_00007_00001=7)))
c Both direct and order encoding.
c Var 'aux2102' order represents '0' with '13523'
c Var 'aux2102' direct represents '0' with '13523'
c Var 'aux2102' order represents '1' with '13524'
-13523 13524 0
c Var 'aux2102' direct represents '1' with '13525'
13523 -13524 13525 0
-13525 13524 0
-13525 -13523 0
c Var 'aux2102' direct represents '2' with '-13524'
13523 13525 -13524 0
c Encoding variable: aux2103 with domain: int(0..2) (representing constraint ((x_00008_00001=8) + (x_00007_00001=8)))
c Both direct and order encoding.
c Var 'aux2103' order represents '0' with '13526'
c Var 'aux2103' direct represents '0' with '13526'
c Var 'aux2103' order represents '1' with '13527'
-13526 13527 0
c Var 'aux2103' direct represents '1' with '13528'
13526 -13527 13528 0
-13528 13527 0
-13528 -13526 0
c Var 'aux2103' direct represents '2' with '-13527'
13526 13528 -13527 0
c Encoding variable: aux2104 with domain: int(0..2) (representing constraint ((x_00008_00001=9) + (x_00007_00001=9)))
c Both direct and order encoding.
c Var 'aux2104' order represents '0' with '13529'
c Var 'aux2104' direct represents '0' with '13529'
c Var 'aux2104' order represents '1' with '13530'
-13529 13530 0
c Var 'aux2104' direct represents '1' with '13531'
13529 -13530 13531 0
-13531 13530 0
-13531 -13529 0
c Var 'aux2104' direct represents '2' with '-13530'
13529 13531 -13530 0
c Encoding variable: aux2105 with domain: int(0..2) (representing constraint ((x_00008_00004=1) + (x_00007_00005=1)))
c Both direct and order encoding.
c Var 'aux2105' order represents '0' with '13532'
c Var 'aux2105' direct represents '0' with '13532'
c Var 'aux2105' order represents '1' with '13533'
-13532 13533 0
c Var 'aux2105' direct represents '1' with '13534'
13532 -13533 13534 0
-13534 13533 0
-13534 -13532 0
c Var 'aux2105' direct represents '2' with '-13533'
13532 13534 -13533 0
c Encoding variable: aux2106 with domain: int(0..2) (representing constraint ((x_00008_00004=2) + (x_00007_00005=2)))
c Both direct and order encoding.
c Var 'aux2106' order represents '0' with '13535'
c Var 'aux2106' direct represents '0' with '13535'
c Var 'aux2106' order represents '1' with '13536'
-13535 13536 0
c Var 'aux2106' direct represents '1' with '13537'
13535 -13536 13537 0
-13537 13536 0
-13537 -13535 0
c Var 'aux2106' direct represents '2' with '-13536'
13535 13537 -13536 0
c Encoding variable: aux2107 with domain: int(0..2) (representing constraint ((x_00008_00004=3) + (x_00007_00005=3)))
c Both direct and order encoding.
c Var 'aux2107' order represents '0' with '13538'
c Var 'aux2107' direct represents '0' with '13538'
c Var 'aux2107' order represents '1' with '13539'
-13538 13539 0
c Var 'aux2107' direct represents '1' with '13540'
13538 -13539 13540 0
-13540 13539 0
-13540 -13538 0
c Var 'aux2107' direct represents '2' with '-13539'
13538 13540 -13539 0
c Encoding variable: aux2108 with domain: int(0..2) (representing constraint ((x_00008_00004=4) + (x_00007_00005=4)))
c Both direct and order encoding.
c Var 'aux2108' order represents '0' with '13541'
c Var 'aux2108' direct represents '0' with '13541'
c Var 'aux2108' order represents '1' with '13542'
-13541 13542 0
c Var 'aux2108' direct represents '1' with '13543'
13541 -13542 13543 0
-13543 13542 0
-13543 -13541 0
c Var 'aux2108' direct represents '2' with '-13542'
13541 13543 -13542 0
c Encoding variable: aux2109 with domain: int(0..2) (representing constraint ((x_00008_00004=5) + (x_00007_00005=5)))
c Both direct and order encoding.
c Var 'aux2109' order represents '0' with '13544'
c Var 'aux2109' direct represents '0' with '13544'
c Var 'aux2109' order represents '1' with '13545'
-13544 13545 0
c Var 'aux2109' direct represents '1' with '13546'
13544 -13545 13546 0
-13546 13545 0
-13546 -13544 0
c Var 'aux2109' direct represents '2' with '-13545'
13544 13546 -13545 0
c Encoding variable: aux2110 with domain: int(0..2) (representing constraint ((x_00008_00004=6) + (x_00007_00005=6)))
c Both direct and order encoding.
c Var 'aux2110' order represents '0' with '13547'
c Var 'aux2110' direct represents '0' with '13547'
c Var 'aux2110' order represents '1' with '13548'
-13547 13548 0
c Var 'aux2110' direct represents '1' with '13549'
13547 -13548 13549 0
-13549 13548 0
-13549 -13547 0
c Var 'aux2110' direct represents '2' with '-13548'
13547 13549 -13548 0
c Encoding variable: aux2111 with domain: int(0..2) (representing constraint ((x_00008_00004=7) + (x_00007_00005=7)))
c Both direct and order encoding.
c Var 'aux2111' order represents '0' with '13550'
c Var 'aux2111' direct represents '0' with '13550'
c Var 'aux2111' order represents '1' with '13551'
-13550 13551 0
c Var 'aux2111' direct represents '1' with '13552'
13550 -13551 13552 0
-13552 13551 0
-13552 -13550 0
c Var 'aux2111' direct represents '2' with '-13551'
13550 13552 -13551 0
c Encoding variable: aux2112 with domain: int(0..2) (representing constraint ((x_00008_00004=8) + (x_00007_00005=8)))
c Both direct and order encoding.
c Var 'aux2112' order represents '0' with '13553'
c Var 'aux2112' direct represents '0' with '13553'
c Var 'aux2112' order represents '1' with '13554'
-13553 13554 0
c Var 'aux2112' direct represents '1' with '13555'
13553 -13554 13555 0
-13555 13554 0
-13555 -13553 0
c Var 'aux2112' direct represents '2' with '-13554'
13553 13555 -13554 0
c Encoding variable: aux2113 with domain: int(0..2) (representing constraint ((x_00008_00004=9) + (x_00007_00005=9)))
c Both direct and order encoding.
c Var 'aux2113' order represents '0' with '13556'
c Var 'aux2113' direct represents '0' with '13556'
c Var 'aux2113' order represents '1' with '13557'
-13556 13557 0
c Var 'aux2113' direct represents '1' with '13558'
13556 -13557 13558 0
-13558 13557 0
-13558 -13556 0
c Var 'aux2113' direct represents '2' with '-13557'
13556 13558 -13557 0
c Encoding variable: aux2114 with domain: int(0..2) (representing constraint ((x_00008_00008=1) + (x_00007_00009=1)))
c Both direct and order encoding.
c Var 'aux2114' order represents '0' with '13559'
c Var 'aux2114' direct represents '0' with '13559'
c Var 'aux2114' order represents '1' with '13560'
-13559 13560 0
c Var 'aux2114' direct represents '1' with '13561'
13559 -13560 13561 0
-13561 13560 0
-13561 -13559 0
c Var 'aux2114' direct represents '2' with '-13560'
13559 13561 -13560 0
c Encoding variable: aux2115 with domain: int(0..2) (representing constraint ((x_00008_00008=2) + (x_00007_00009=2)))
c Both direct and order encoding.
c Var 'aux2115' order represents '0' with '13562'
c Var 'aux2115' direct represents '0' with '13562'
c Var 'aux2115' order represents '1' with '13563'
-13562 13563 0
c Var 'aux2115' direct represents '1' with '13564'
13562 -13563 13564 0
-13564 13563 0
-13564 -13562 0
c Var 'aux2115' direct represents '2' with '-13563'
13562 13564 -13563 0
c Encoding variable: aux2116 with domain: int(0..2) (representing constraint ((x_00008_00008=3) + (x_00007_00009=3)))
c Both direct and order encoding.
c Var 'aux2116' order represents '0' with '13565'
c Var 'aux2116' direct represents '0' with '13565'
c Var 'aux2116' order represents '1' with '13566'
-13565 13566 0
c Var 'aux2116' direct represents '1' with '13567'
13565 -13566 13567 0
-13567 13566 0
-13567 -13565 0
c Var 'aux2116' direct represents '2' with '-13566'
13565 13567 -13566 0
c Encoding variable: aux2117 with domain: int(0..2) (representing constraint ((x_00008_00008=4) + (x_00007_00009=4)))
c Both direct and order encoding.
c Var 'aux2117' order represents '0' with '13568'
c Var 'aux2117' direct represents '0' with '13568'
c Var 'aux2117' order represents '1' with '13569'
-13568 13569 0
c Var 'aux2117' direct represents '1' with '13570'
13568 -13569 13570 0
-13570 13569 0
-13570 -13568 0
c Var 'aux2117' direct represents '2' with '-13569'
13568 13570 -13569 0
c Encoding variable: aux2118 with domain: int(0..2) (representing constraint ((x_00008_00008=5) + (x_00007_00009=5)))
c Both direct and order encoding.
c Var 'aux2118' order represents '0' with '13571'
c Var 'aux2118' direct represents '0' with '13571'
c Var 'aux2118' order represents '1' with '13572'
-13571 13572 0
c Var 'aux2118' direct represents '1' with '13573'
13571 -13572 13573 0
-13573 13572 0
-13573 -13571 0
c Var 'aux2118' direct represents '2' with '-13572'
13571 13573 -13572 0
c Encoding variable: aux2119 with domain: int(0..2) (representing constraint ((x_00008_00008=6) + (x_00007_00009=6)))
c Both direct and order encoding.
c Var 'aux2119' order represents '0' with '13574'
c Var 'aux2119' direct represents '0' with '13574'
c Var 'aux2119' order represents '1' with '13575'
-13574 13575 0
c Var 'aux2119' direct represents '1' with '13576'
13574 -13575 13576 0
-13576 13575 0
-13576 -13574 0
c Var 'aux2119' direct represents '2' with '-13575'
13574 13576 -13575 0
c Encoding variable: aux2120 with domain: int(0..2) (representing constraint ((x_00008_00008=7) + (x_00007_00009=7)))
c Both direct and order encoding.
c Var 'aux2120' order represents '0' with '13577'
c Var 'aux2120' direct represents '0' with '13577'
c Var 'aux2120' order represents '1' with '13578'
-13577 13578 0
c Var 'aux2120' direct represents '1' with '13579'
13577 -13578 13579 0
-13579 13578 0
-13579 -13577 0
c Var 'aux2120' direct represents '2' with '-13578'
13577 13579 -13578 0
c Encoding variable: aux2121 with domain: int(0..2) (representing constraint ((x_00008_00008=8) + (x_00007_00009=8)))
c Both direct and order encoding.
c Var 'aux2121' order represents '0' with '13580'
c Var 'aux2121' direct represents '0' with '13580'
c Var 'aux2121' order represents '1' with '13581'
-13580 13581 0
c Var 'aux2121' direct represents '1' with '13582'
13580 -13581 13582 0
-13582 13581 0
-13582 -13580 0
c Var 'aux2121' direct represents '2' with '-13581'
13580 13582 -13581 0
c Encoding variable: aux2122 with domain: int(0..2) (representing constraint ((x_00008_00008=9) + (x_00007_00009=9)))
c Both direct and order encoding.
c Var 'aux2122' order represents '0' with '13583'
c Var 'aux2122' direct represents '0' with '13583'
c Var 'aux2122' order represents '1' with '13584'
-13583 13584 0
c Var 'aux2122' direct represents '1' with '13585'
13583 -13584 13585 0
-13585 13584 0
-13585 -13583 0
c Var 'aux2122' direct represents '2' with '-13584'
13583 13585 -13584 0
c Encoding variable: aux2123 with domain: bool (representing constraint ((x_00001_00001 + x_00001_00002)<=3))
c Var 'aux2123' direct represents '0' with '-13586'
c Var 'aux2123' direct represents '1' with '13586'
c Var 'aux2123' order represents '1' with '1'
c Var 'aux2123' order represents '0' with '-13586'
c Encoding variable: aux2124 with domain: bool (representing constraint (3<=(x_00001_00001 + x_00001_00002)))
c Var 'aux2124' direct represents '0' with '-13587'
c Var 'aux2124' direct represents '1' with '13587'
c Var 'aux2124' order represents '1' with '1'
c Var 'aux2124' order represents '0' with '-13587'
c Encoding variable: aux2125 with domain: bool (representing constraint ((x_00001_00003 + x_00001_00004 + x_00001_00005)<=15))
c Var 'aux2125' direct represents '0' with '-13588'
c Var 'aux2125' direct represents '1' with '13588'
c Var 'aux2125' order represents '1' with '1'
c Var 'aux2125' order represents '0' with '-13588'
c Encoding variable: aux2126 with domain: bool (representing constraint (15<=(x_00001_00003 + x_00001_00004 + x_00001_00005)))
c Var 'aux2126' direct represents '0' with '-13589'
c Var 'aux2126' direct represents '1' with '13589'
c Var 'aux2126' order represents '1' with '1'
c Var 'aux2126' order represents '0' with '-13589'
c Encoding variable: aux2127 with domain: bool (representing constraint ((aux461 + shift(x_00003_00005, -1) + shift(x_00002_00006, -1))<=18))
c Var 'aux2127' direct represents '0' with '-13590'
c Var 'aux2127' direct represents '1' with '13590'
c Var 'aux2127' order represents '1' with '1'
c Var 'aux2127' order represents '0' with '-13590'
c Encoding variable: aux2128 with domain: bool (representing constraint (18<=(aux461 + shift(x_00003_00005, -1) + shift(x_00002_00006, -1))))
c Var 'aux2128' direct represents '0' with '-13591'
c Var 'aux2128' direct represents '1' with '13591'
c Var 'aux2128' order represents '1' with '1'
c Var 'aux2128' order represents '0' with '-13591'
c Encoding variable: aux2129 with domain: bool (representing constraint ((x_00002_00007 + x_00001_00007)<=4))
c Var 'aux2129' direct represents '0' with '-13592'
c Var 'aux2129' direct represents '1' with '13592'
c Var 'aux2129' order represents '1' with '1'
c Var 'aux2129' order represents '0' with '-13592'
c Encoding variable: aux2130 with domain: bool (representing constraint (4<=(x_00002_00007 + x_00001_00007)))
c Var 'aux2130' direct represents '0' with '-13593'
c Var 'aux2130' direct represents '1' with '13593'
c Var 'aux2130' order represents '1' with '1'
c Var 'aux2130' order represents '0' with '-13593'
c Encoding variable: aux2131 with domain: bool (representing constraint ((x_00002_00008 + x_00001_00008)<=16))
c Var 'aux2131' direct represents '0' with '-13594'
c Var 'aux2131' direct represents '1' with '13594'
c Var 'aux2131' order represents '1' with '1'
c Var 'aux2131' order represents '0' with '-13594'
c Encoding variable: aux2132 with domain: bool (representing constraint (16<=(x_00002_00008 + x_00001_00008)))
c Var 'aux2132' direct represents '0' with '-13595'
c Var 'aux2132' direct represents '1' with '13595'
c Var 'aux2132' order represents '1' with '1'
c Var 'aux2132' order represents '0' with '-13595'
c Encoding variable: aux2133 with domain: bool (representing constraint ((aux462 + shift(x_00003_00009, -1) + shift(x_00004_00009, -1))<=11))
c Var 'aux2133' direct represents '0' with '-13596'
c Var 'aux2133' direct represents '1' with '13596'
c Var 'aux2133' order represents '1' with '1'
c Var 'aux2133' order represents '0' with '-13596'
c Encoding variable: aux2134 with domain: bool (representing constraint (11<=(aux462 + shift(x_00003_00009, -1) + shift(x_00004_00009, -1))))
c Var 'aux2134' direct represents '0' with '-13597'
c Var 'aux2134' direct represents '1' with '13597'
c Var 'aux2134' order represents '1' with '1'
c Var 'aux2134' order represents '0' with '-13597'
c Encoding variable: aux2135 with domain: bool (representing constraint ((aux463 + shift(x_00003_00001, -1) + shift(x_00002_00002, -1))<=21))
c Var 'aux2135' direct represents '0' with '-13598'
c Var 'aux2135' direct represents '1' with '13598'
c Var 'aux2135' order represents '1' with '1'
c Var 'aux2135' order represents '0' with '-13598'
c Encoding variable: aux2136 with domain: bool (representing constraint (21<=(aux463 + shift(x_00003_00001, -1) + shift(x_00002_00002, -1))))
c Var 'aux2136' direct represents '0' with '-13599'
c Var 'aux2136' direct represents '1' with '13599'
c Var 'aux2136' order represents '1' with '1'
c Var 'aux2136' order represents '0' with '-13599'
c Encoding variable: aux2137 with domain: bool (representing constraint ((x_00002_00003 + x_00002_00004)<=17))
c Var 'aux2137' direct represents '0' with '-13600'
c Var 'aux2137' direct represents '1' with '13600'
c Var 'aux2137' order represents '1' with '1'
c Var 'aux2137' order represents '0' with '-13600'
c Encoding variable: aux2138 with domain: bool (representing constraint (17<=(x_00002_00003 + x_00002_00004)))
c Var 'aux2138' direct represents '0' with '-13601'
c Var 'aux2138' direct represents '1' with '13601'
c Var 'aux2138' order represents '1' with '1'
c Var 'aux2138' order represents '0' with '-13601'
c Encoding variable: aux2139 with domain: bool (representing constraint ((x_00003_00003 + x_00003_00004 + x_00004_00004)<=9))
c Var 'aux2139' direct represents '0' with '-13602'
c Var 'aux2139' direct represents '1' with '13602'
c Var 'aux2139' order represents '1' with '1'
c Var 'aux2139' order represents '0' with '-13602'
c Encoding variable: aux2140 with domain: bool (representing constraint (9<=(x_00003_00003 + x_00003_00004 + x_00004_00004)))
c Var 'aux2140' direct represents '0' with '-13603'
c Var 'aux2140' direct represents '1' with '13603'
c Var 'aux2140' order represents '1' with '1'
c Var 'aux2140' order represents '0' with '-13603'
c Encoding variable: aux2141 with domain: bool (representing constraint ((x_00003_00006 + x_00004_00006 + x_00005_00006)<=8))
c Var 'aux2141' direct represents '0' with '-13604'
c Var 'aux2141' direct represents '1' with '13604'
c Var 'aux2141' order represents '1' with '1'
c Var 'aux2141' order represents '0' with '-13604'
c Encoding variable: aux2142 with domain: bool (representing constraint (8<=(x_00003_00006 + x_00004_00006 + x_00005_00006)))
c Var 'aux2142' direct represents '0' with '-13605'
c Var 'aux2142' direct represents '1' with '13605'
c Var 'aux2142' order represents '1' with '1'
c Var 'aux2142' order represents '0' with '-13605'
c Encoding variable: aux2143 with domain: bool (representing constraint ((x_00003_00007 + x_00003_00008 + x_00004_00007)<=20))
c Var 'aux2143' direct represents '0' with '-13606'
c Var 'aux2143' direct represents '1' with '13606'
c Var 'aux2143' order represents '1' with '1'
c Var 'aux2143' order represents '0' with '-13606'
c Encoding variable: aux2144 with domain: bool (representing constraint (20<=(x_00003_00007 + x_00003_00008 + x_00004_00007)))
c Var 'aux2144' direct represents '0' with '-13607'
c Var 'aux2144' direct represents '1' with '13607'
c Var 'aux2144' order represents '1' with '1'
c Var 'aux2144' order represents '0' with '-13607'
c Encoding variable: aux2145 with domain: bool (representing constraint ((x_00004_00001 + x_00005_00001)<=6))
c Var 'aux2145' direct represents '0' with '-13608'
c Var 'aux2145' direct represents '1' with '13608'
c Var 'aux2145' order represents '1' with '1'
c Var 'aux2145' order represents '0' with '-13608'
c Encoding variable: aux2146 with domain: bool (representing constraint (6<=(x_00004_00001 + x_00005_00001)))
c Var 'aux2146' direct represents '0' with '-13609'
c Var 'aux2146' direct represents '1' with '13609'
c Var 'aux2146' order represents '1' with '1'
c Var 'aux2146' order represents '0' with '-13609'
c Encoding variable: aux2147 with domain: bool (representing constraint ((x_00004_00002 + x_00004_00003)<=14))
c Var 'aux2147' direct represents '0' with '-13610'
c Var 'aux2147' direct represents '1' with '13610'
c Var 'aux2147' order represents '1' with '1'
c Var 'aux2147' order represents '0' with '-13610'
c Encoding variable: aux2148 with domain: bool (representing constraint (14<=(x_00004_00002 + x_00004_00003)))
c Var 'aux2148' direct represents '0' with '-13611'
c Var 'aux2148' direct represents '1' with '13611'
c Var 'aux2148' order represents '1' with '1'
c Var 'aux2148' order represents '0' with '-13611'
c Encoding variable: aux2149 with domain: bool (representing constraint ((x_00004_00005 + x_00005_00005 + x_00006_00005)<=17))
c Var 'aux2149' direct represents '0' with '-13612'
c Var 'aux2149' direct represents '1' with '13612'
c Var 'aux2149' order represents '1' with '1'
c Var 'aux2149' order represents '0' with '-13612'
c Encoding variable: aux2150 with domain: bool (representing constraint (17<=(x_00004_00005 + x_00005_00005 + x_00006_00005)))
c Var 'aux2150' direct represents '0' with '-13613'
c Var 'aux2150' direct represents '1' with '13613'
c Var 'aux2150' order represents '1' with '1'
c Var 'aux2150' order represents '0' with '-13613'
c Encoding variable: aux2151 with domain: bool (representing constraint ((x_00004_00008 + x_00005_00007 + x_00005_00008)<=17))
c Var 'aux2151' direct represents '0' with '-13614'
c Var 'aux2151' direct represents '1' with '13614'
c Var 'aux2151' order represents '1' with '1'
c Var 'aux2151' order represents '0' with '-13614'
c Encoding variable: aux2152 with domain: bool (representing constraint (17<=(x_00004_00008 + x_00005_00007 + x_00005_00008)))
c Var 'aux2152' direct represents '0' with '-13615'
c Var 'aux2152' direct represents '1' with '13615'
c Var 'aux2152' order represents '1' with '1'
c Var 'aux2152' order represents '0' with '-13615'
c Encoding variable: aux2153 with domain: bool (representing constraint ((x_00005_00002 + x_00005_00003 + x_00006_00002)<=13))
c Var 'aux2153' direct represents '0' with '-13616'
c Var 'aux2153' direct represents '1' with '13616'
c Var 'aux2153' order represents '1' with '1'
c Var 'aux2153' order represents '0' with '-13616'
c Encoding variable: aux2154 with domain: bool (representing constraint (13<=(x_00005_00002 + x_00005_00003 + x_00006_00002)))
c Var 'aux2154' direct represents '0' with '-13617'
c Var 'aux2154' direct represents '1' with '13617'
c Var 'aux2154' order represents '1' with '1'
c Var 'aux2154' order represents '0' with '-13617'
c Encoding variable: aux2155 with domain: bool (representing constraint ((x_00007_00004 + x_00005_00004 + x_00006_00004)<=20))
c Var 'aux2155' direct represents '0' with '-13618'
c Var 'aux2155' direct represents '1' with '13618'
c Var 'aux2155' order represents '1' with '1'
c Var 'aux2155' order represents '0' with '-13618'
c Encoding variable: aux2156 with domain: bool (representing constraint (20<=(x_00007_00004 + x_00005_00004 + x_00006_00004)))
c Var 'aux2156' direct represents '0' with '-13619'
c Var 'aux2156' direct represents '1' with '13619'
c Var 'aux2156' order represents '1' with '1'
c Var 'aux2156' order represents '0' with '-13619'
c Encoding variable: aux2157 with domain: bool (representing constraint ((x_00005_00009 + x_00006_00009)<=12))
c Var 'aux2157' direct represents '0' with '-13620'
c Var 'aux2157' direct represents '1' with '13620'
c Var 'aux2157' order represents '1' with '1'
c Var 'aux2157' order represents '0' with '-13620'
c Encoding variable: aux2158 with domain: bool (representing constraint (12<=(x_00005_00009 + x_00006_00009)))
c Var 'aux2158' direct represents '0' with '-13621'
c Var 'aux2158' direct represents '1' with '13621'
c Var 'aux2158' order represents '1' with '1'
c Var 'aux2158' order represents '0' with '-13621'
c Encoding variable: aux2159 with domain: bool (representing constraint ((aux464 + shift(x_00008_00001, -1) + shift(x_00009_00001, -1))<=23))
c Var 'aux2159' direct represents '0' with '-13622'
c Var 'aux2159' direct represents '1' with '13622'
c Var 'aux2159' order represents '1' with '1'
c Var 'aux2159' order represents '0' with '-13622'
c Encoding variable: aux2160 with domain: bool (representing constraint (23<=(aux464 + shift(x_00008_00001, -1) + shift(x_00009_00001, -1))))
c Var 'aux2160' direct represents '0' with '-13623'
c Var 'aux2160' direct represents '1' with '13623'
c Var 'aux2160' order represents '1' with '1'
c Var 'aux2160' order represents '0' with '-13623'
c Encoding variable: aux2161 with domain: bool (representing constraint ((x_00007_00002 + x_00007_00003 + x_00006_00003)<=6))
c Var 'aux2161' direct represents '0' with '-13624'
c Var 'aux2161' direct represents '1' with '13624'
c Var 'aux2161' order represents '1' with '1'
c Var 'aux2161' order represents '0' with '-13624'
c Encoding variable: aux2162 with domain: bool (representing constraint (6<=(x_00007_00002 + x_00007_00003 + x_00006_00003)))
c Var 'aux2162' direct represents '0' with '-13625'
c Var 'aux2162' direct represents '1' with '13625'
c Var 'aux2162' order represents '1' with '1'
c Var 'aux2162' order represents '0' with '-13625'
c Encoding variable: aux2163 with domain: bool (representing constraint ((x_00007_00006 + x_00007_00007 + x_00006_00006)<=20))
c Var 'aux2163' direct represents '0' with '-13626'
c Var 'aux2163' direct represents '1' with '13626'
c Var 'aux2163' order represents '1' with '1'
c Var 'aux2163' order represents '0' with '-13626'
c Encoding variable: aux2164 with domain: bool (representing constraint (20<=(x_00007_00006 + x_00007_00007 + x_00006_00006)))
c Var 'aux2164' direct represents '0' with '-13627'
c Var 'aux2164' direct represents '1' with '13627'
c Var 'aux2164' order represents '1' with '1'
c Var 'aux2164' order represents '0' with '-13627'
c Encoding variable: aux2165 with domain: bool (representing constraint ((x_00006_00007 + x_00006_00008)<=6))
c Var 'aux2165' direct represents '0' with '-13628'
c Var 'aux2165' direct represents '1' with '13628'
c Var 'aux2165' order represents '1' with '1'
c Var 'aux2165' order represents '0' with '-13628'
c Encoding variable: aux2166 with domain: bool (representing constraint (6<=(x_00006_00007 + x_00006_00008)))
c Var 'aux2166' direct represents '0' with '-13629'
c Var 'aux2166' direct represents '1' with '13629'
c Var 'aux2166' order represents '1' with '1'
c Var 'aux2166' order represents '0' with '-13629'
c Encoding variable: aux2167 with domain: bool (representing constraint ((aux465 + shift(x_00008_00004, -1) + shift(x_00008_00005, -1))<=6))
c Var 'aux2167' direct represents '0' with '-13630'
c Var 'aux2167' direct represents '1' with '13630'
c Var 'aux2167' order represents '1' with '1'
c Var 'aux2167' order represents '0' with '-13630'
c Encoding variable: aux2168 with domain: bool (representing constraint (6<=(aux465 + shift(x_00008_00004, -1) + shift(x_00008_00005, -1))))
c Var 'aux2168' direct represents '0' with '-13631'
c Var 'aux2168' direct represents '1' with '13631'
c Var 'aux2168' order represents '1' with '1'
c Var 'aux2168' order represents '0' with '-13631'
c Encoding variable: aux2169 with domain: bool (representing constraint ((shift(x_00007_00009, -1) + aux466 + shift(x_00008_00008, -1))<=10))
c Var 'aux2169' direct represents '0' with '-13632'
c Var 'aux2169' direct represents '1' with '13632'
c Var 'aux2169' order represents '1' with '1'
c Var 'aux2169' order represents '0' with '-13632'
c Encoding variable: aux2170 with domain: bool (representing constraint (10<=(shift(x_00007_00009, -1) + aux466 + shift(x_00008_00008, -1))))
c Var 'aux2170' direct represents '0' with '-13633'
c Var 'aux2170' direct represents '1' with '13633'
c Var 'aux2170' order represents '1' with '1'
c Var 'aux2170' order represents '0' with '-13633'
c Encoding variable: aux2171 with domain: bool (representing constraint ((x_00008_00002 + x_00009_00002)<=8))
c Var 'aux2171' direct represents '0' with '-13634'
c Var 'aux2171' direct represents '1' with '13634'
c Var 'aux2171' order represents '1' with '1'
c Var 'aux2171' order represents '0' with '-13634'
c Encoding variable: aux2172 with domain: bool (representing constraint (8<=(x_00008_00002 + x_00009_00002)))
c Var 'aux2172' direct represents '0' with '-13635'
c Var 'aux2172' direct represents '1' with '13635'
c Var 'aux2172' order represents '1' with '1'
c Var 'aux2172' order represents '0' with '-13635'
c Encoding variable: aux2173 with domain: bool (representing constraint ((x_00008_00003 + x_00009_00003)<=16))
c Var 'aux2173' direct represents '0' with '-13636'
c Var 'aux2173' direct represents '1' with '13636'
c Var 'aux2173' order represents '1' with '1'
c Var 'aux2173' order represents '0' with '-13636'
c Encoding variable: aux2174 with domain: bool (representing constraint (16<=(x_00008_00003 + x_00009_00003)))
c Var 'aux2174' direct represents '0' with '-13637'
c Var 'aux2174' direct represents '1' with '13637'
c Var 'aux2174' order represents '1' with '1'
c Var 'aux2174' order represents '0' with '-13637'
c Encoding variable: aux2175 with domain: bool (representing constraint ((x_00008_00006 + x_00008_00007)<=15))
c Var 'aux2175' direct represents '0' with '-13638'
c Var 'aux2175' direct represents '1' with '13638'
c Var 'aux2175' order represents '1' with '1'
c Var 'aux2175' order represents '0' with '-13638'
c Encoding variable: aux2176 with domain: bool (representing constraint (15<=(x_00008_00006 + x_00008_00007)))
c Var 'aux2176' direct represents '0' with '-13639'
c Var 'aux2176' direct represents '1' with '13639'
c Var 'aux2176' order represents '1' with '1'
c Var 'aux2176' order represents '0' with '-13639'
c Encoding variable: aux2177 with domain: bool (representing constraint ((x_00009_00005 + x_00009_00006 + x_00009_00007)<=13))
c Var 'aux2177' direct represents '0' with '-13640'
c Var 'aux2177' direct represents '1' with '13640'
c Var 'aux2177' order represents '1' with '1'
c Var 'aux2177' order represents '0' with '-13640'
c Encoding variable: aux2178 with domain: bool (representing constraint (13<=(x_00009_00005 + x_00009_00006 + x_00009_00007)))
c Var 'aux2178' direct represents '0' with '-13641'
c Var 'aux2178' direct represents '1' with '13641'
c Var 'aux2178' order represents '1' with '1'
c Var 'aux2178' order represents '0' with '-13641'
c Encoding variable: aux2179 with domain: bool (representing constraint ((x_00009_00008 + x_00009_00009)<=17))
c Var 'aux2179' direct represents '0' with '-13642'
c Var 'aux2179' direct represents '1' with '13642'
c Var 'aux2179' order represents '1' with '1'
c Var 'aux2179' order represents '0' with '-13642'
c Encoding variable: aux2180 with domain: bool (representing constraint (17<=(x_00009_00008 + x_00009_00009)))
c Var 'aux2180' direct represents '0' with '-13643'
c Var 'aux2180' direct represents '1' with '13643'
c Var 'aux2180' order represents '1' with '1'
c Var 'aux2180' order represents '0' with '-13643'
c Encoding variable: aux2181 with domain: bool (representing constraint ((aux468 + aux471 + aux472)<=36))
c Var 'aux2181' direct represents '0' with '-13644'
c Var 'aux2181' direct represents '1' with '13644'
c Var 'aux2181' order represents '1' with '1'
c Var 'aux2181' order represents '0' with '-13644'
c Encoding variable: aux2182 with domain: bool (representing constraint (36<=(aux468 + aux471 + aux472)))
c Var 'aux2182' direct represents '0' with '-13645'
c Var 'aux2182' direct represents '1' with '13645'
c Var 'aux2182' order represents '1' with '1'
c Var 'aux2182' order represents '0' with '-13645'
c Encoding variable: aux2183 with domain: bool (representing constraint ((aux474 + aux477 + aux478)<=36))
c Var 'aux2183' direct represents '0' with '-13646'
c Var 'aux2183' direct represents '1' with '13646'
c Var 'aux2183' order represents '1' with '1'
c Var 'aux2183' order represents '0' with '-13646'
c Encoding variable: aux2184 with domain: bool (representing constraint (36<=(aux474 + aux477 + aux478)))
c Var 'aux2184' direct represents '0' with '-13647'
c Var 'aux2184' direct represents '1' with '13647'
c Var 'aux2184' order represents '1' with '1'
c Var 'aux2184' order represents '0' with '-13647'
c Encoding variable: aux2185 with domain: bool (representing constraint ((aux480 + aux483 + aux484)<=36))
c Var 'aux2185' direct represents '0' with '-13648'
c Var 'aux2185' direct represents '1' with '13648'
c Var 'aux2185' order represents '1' with '1'
c Var 'aux2185' order represents '0' with '-13648'
c Encoding variable: aux2186 with domain: bool (representing constraint (36<=(aux480 + aux483 + aux484)))
c Var 'aux2186' direct represents '0' with '-13649'
c Var 'aux2186' direct represents '1' with '13649'
c Var 'aux2186' order represents '1' with '1'
c Var 'aux2186' order represents '0' with '-13649'
c Encoding variable: aux2187 with domain: bool (representing constraint ((aux486 + aux489 + aux490)<=36))
c Var 'aux2187' direct represents '0' with '-13650'
c Var 'aux2187' direct represents '1' with '13650'
c Var 'aux2187' order represents '1' with '1'
c Var 'aux2187' order represents '0' with '-13650'
c Encoding variable: aux2188 with domain: bool (representing constraint (36<=(aux486 + aux489 + aux490)))
c Var 'aux2188' direct represents '0' with '-13651'
c Var 'aux2188' direct represents '1' with '13651'
c Var 'aux2188' order represents '1' with '1'
c Var 'aux2188' order represents '0' with '-13651'
c Encoding variable: aux2189 with domain: bool (representing constraint ((aux492 + aux495 + aux496)<=36))
c Var 'aux2189' direct represents '0' with '-13652'
c Var 'aux2189' direct represents '1' with '13652'
c Var 'aux2189' order represents '1' with '1'
c Var 'aux2189' order represents '0' with '-13652'
c Encoding variable: aux2190 with domain: bool (representing constraint (36<=(aux492 + aux495 + aux496)))
c Var 'aux2190' direct represents '0' with '-13653'
c Var 'aux2190' direct represents '1' with '13653'
c Var 'aux2190' order represents '1' with '1'
c Var 'aux2190' order represents '0' with '-13653'
c Encoding variable: aux2191 with domain: bool (representing constraint ((aux498 + aux501 + aux502)<=36))
c Var 'aux2191' direct represents '0' with '-13654'
c Var 'aux2191' direct represents '1' with '13654'
c Var 'aux2191' order represents '1' with '1'
c Var 'aux2191' order represents '0' with '-13654'
c Encoding variable: aux2192 with domain: bool (representing constraint (36<=(aux498 + aux501 + aux502)))
c Var 'aux2192' direct represents '0' with '-13655'
c Var 'aux2192' direct represents '1' with '13655'
c Var 'aux2192' order represents '1' with '1'
c Var 'aux2192' order represents '0' with '-13655'
c Encoding variable: aux2193 with domain: bool (representing constraint ((aux504 + aux507 + aux508)<=36))
c Var 'aux2193' direct represents '0' with '-13656'
c Var 'aux2193' direct represents '1' with '13656'
c Var 'aux2193' order represents '1' with '1'
c Var 'aux2193' order represents '0' with '-13656'
c Encoding variable: aux2194 with domain: bool (representing constraint (36<=(aux504 + aux507 + aux508)))
c Var 'aux2194' direct represents '0' with '-13657'
c Var 'aux2194' direct represents '1' with '13657'
c Var 'aux2194' order represents '1' with '1'
c Var 'aux2194' order represents '0' with '-13657'
c Encoding variable: aux2195 with domain: bool (representing constraint ((aux510 + aux513 + aux514)<=36))
c Var 'aux2195' direct represents '0' with '-13658'
c Var 'aux2195' direct represents '1' with '13658'
c Var 'aux2195' order represents '1' with '1'
c Var 'aux2195' order represents '0' with '-13658'
c Encoding variable: aux2196 with domain: bool (representing constraint (36<=(aux510 + aux513 + aux514)))
c Var 'aux2196' direct represents '0' with '-13659'
c Var 'aux2196' direct represents '1' with '13659'
c Var 'aux2196' order represents '1' with '1'
c Var 'aux2196' order represents '0' with '-13659'
c Encoding variable: aux2197 with domain: bool (representing constraint ((aux516 + aux519 + aux520)<=36))
c Var 'aux2197' direct represents '0' with '-13660'
c Var 'aux2197' direct represents '1' with '13660'
c Var 'aux2197' order represents '1' with '1'
c Var 'aux2197' order represents '0' with '-13660'
c Encoding variable: aux2198 with domain: bool (representing constraint (36<=(aux516 + aux519 + aux520)))
c Var 'aux2198' direct represents '0' with '-13661'
c Var 'aux2198' direct represents '1' with '13661'
c Var 'aux2198' order represents '1' with '1'
c Var 'aux2198' order represents '0' with '-13661'
c Encoding variable: aux2199 with domain: bool (representing constraint ((aux522 + aux525 + aux526)<=36))
c Var 'aux2199' direct represents '0' with '-13662'
c Var 'aux2199' direct represents '1' with '13662'
c Var 'aux2199' order represents '1' with '1'
c Var 'aux2199' order represents '0' with '-13662'
c Encoding variable: aux2200 with domain: bool (representing constraint (36<=(aux522 + aux525 + aux526)))
c Var 'aux2200' direct represents '0' with '-13663'
c Var 'aux2200' direct represents '1' with '13663'
c Var 'aux2200' order represents '1' with '1'
c Var 'aux2200' order represents '0' with '-13663'
c Encoding variable: aux2201 with domain: bool (representing constraint ((aux528 + aux531 + aux532)<=36))
c Var 'aux2201' direct represents '0' with '-13664'
c Var 'aux2201' direct represents '1' with '13664'
c Var 'aux2201' order represents '1' with '1'
c Var 'aux2201' order represents '0' with '-13664'
c Encoding variable: aux2202 with domain: bool (representing constraint (36<=(aux528 + aux531 + aux532)))
c Var 'aux2202' direct represents '0' with '-13665'
c Var 'aux2202' direct represents '1' with '13665'
c Var 'aux2202' order represents '1' with '1'
c Var 'aux2202' order represents '0' with '-13665'
c Encoding variable: aux2203 with domain: bool (representing constraint ((aux534 + aux537 + aux538)<=36))
c Var 'aux2203' direct represents '0' with '-13666'
c Var 'aux2203' direct represents '1' with '13666'
c Var 'aux2203' order represents '1' with '1'
c Var 'aux2203' order represents '0' with '-13666'
c Encoding variable: aux2204 with domain: bool (representing constraint (36<=(aux534 + aux537 + aux538)))
c Var 'aux2204' direct represents '0' with '-13667'
c Var 'aux2204' direct represents '1' with '13667'
c Var 'aux2204' order represents '1' with '1'
c Var 'aux2204' order represents '0' with '-13667'
c Encoding variable: aux2205 with domain: bool (representing constraint ((aux540 + aux543 + aux544)<=36))
c Var 'aux2205' direct represents '0' with '-13668'
c Var 'aux2205' direct represents '1' with '13668'
c Var 'aux2205' order represents '1' with '1'
c Var 'aux2205' order represents '0' with '-13668'
c Encoding variable: aux2206 with domain: bool (representing constraint (36<=(aux540 + aux543 + aux544)))
c Var 'aux2206' direct represents '0' with '-13669'
c Var 'aux2206' direct represents '1' with '13669'
c Var 'aux2206' order represents '1' with '1'
c Var 'aux2206' order represents '0' with '-13669'
c Encoding variable: aux2207 with domain: bool (representing constraint ((aux546 + aux549 + aux550)<=36))
c Var 'aux2207' direct represents '0' with '-13670'
c Var 'aux2207' direct represents '1' with '13670'
c Var 'aux2207' order represents '1' with '1'
c Var 'aux2207' order represents '0' with '-13670'
c Encoding variable: aux2208 with domain: bool (representing constraint (36<=(aux546 + aux549 + aux550)))
c Var 'aux2208' direct represents '0' with '-13671'
c Var 'aux2208' direct represents '1' with '13671'
c Var 'aux2208' order represents '1' with '1'
c Var 'aux2208' order represents '0' with '-13671'
c Encoding variable: aux2209 with domain: bool (representing constraint ((aux552 + aux555 + aux556)<=36))
c Var 'aux2209' direct represents '0' with '-13672'
c Var 'aux2209' direct represents '1' with '13672'
c Var 'aux2209' order represents '1' with '1'
c Var 'aux2209' order represents '0' with '-13672'
c Encoding variable: aux2210 with domain: bool (representing constraint (36<=(aux552 + aux555 + aux556)))
c Var 'aux2210' direct represents '0' with '-13673'
c Var 'aux2210' direct represents '1' with '13673'
c Var 'aux2210' order represents '1' with '1'
c Var 'aux2210' order represents '0' with '-13673'
c Encoding variable: aux2211 with domain: bool (representing constraint ((aux558 + aux561 + aux562)<=36))
c Var 'aux2211' direct represents '0' with '-13674'
c Var 'aux2211' direct represents '1' with '13674'
c Var 'aux2211' order represents '1' with '1'
c Var 'aux2211' order represents '0' with '-13674'
c Encoding variable: aux2212 with domain: bool (representing constraint (36<=(aux558 + aux561 + aux562)))
c Var 'aux2212' direct represents '0' with '-13675'
c Var 'aux2212' direct represents '1' with '13675'
c Var 'aux2212' order represents '1' with '1'
c Var 'aux2212' order represents '0' with '-13675'
c Encoding variable: aux2213 with domain: bool (representing constraint ((aux564 + aux567 + aux568)<=36))
c Var 'aux2213' direct represents '0' with '-13676'
c Var 'aux2213' direct represents '1' with '13676'
c Var 'aux2213' order represents '1' with '1'
c Var 'aux2213' order represents '0' with '-13676'
c Encoding variable: aux2214 with domain: bool (representing constraint (36<=(aux564 + aux567 + aux568)))
c Var 'aux2214' direct represents '0' with '-13677'
c Var 'aux2214' direct represents '1' with '13677'
c Var 'aux2214' order represents '1' with '1'
c Var 'aux2214' order represents '0' with '-13677'
c Encoding variable: aux2215 with domain: bool (representing constraint ((aux570 + aux573 + aux574)<=36))
c Var 'aux2215' direct represents '0' with '-13678'
c Var 'aux2215' direct represents '1' with '13678'
c Var 'aux2215' order represents '1' with '1'
c Var 'aux2215' order represents '0' with '-13678'
c Encoding variable: aux2216 with domain: bool (representing constraint (36<=(aux570 + aux573 + aux574)))
c Var 'aux2216' direct represents '0' with '-13679'
c Var 'aux2216' direct represents '1' with '13679'
c Var 'aux2216' order represents '1' with '1'
c Var 'aux2216' order represents '0' with '-13679'
c Encoding variable: aux2217 with domain: bool (representing constraint ((aux576 + aux579 + aux580)<=36))
c Var 'aux2217' direct represents '0' with '-13680'
c Var 'aux2217' direct represents '1' with '13680'
c Var 'aux2217' order represents '1' with '1'
c Var 'aux2217' order represents '0' with '-13680'
c Encoding variable: aux2218 with domain: bool (representing constraint (36<=(aux576 + aux579 + aux580)))
c Var 'aux2218' direct represents '0' with '-13681'
c Var 'aux2218' direct represents '1' with '13681'
c Var 'aux2218' order represents '1' with '1'
c Var 'aux2218' order represents '0' with '-13681'
c Encoding variable: aux2219 with domain: bool (representing constraint ((aux582 + aux585 + aux586)<=36))
c Var 'aux2219' direct represents '0' with '-13682'
c Var 'aux2219' direct represents '1' with '13682'
c Var 'aux2219' order represents '1' with '1'
c Var 'aux2219' order represents '0' with '-13682'
c Encoding variable: aux2220 with domain: bool (representing constraint (36<=(aux582 + aux585 + aux586)))
c Var 'aux2220' direct represents '0' with '-13683'
c Var 'aux2220' direct represents '1' with '13683'
c Var 'aux2220' order represents '1' with '1'
c Var 'aux2220' order represents '0' with '-13683'
c Encoding variable: aux2221 with domain: bool (representing constraint ((aux588 + aux591 + aux592)<=36))
c Var 'aux2221' direct represents '0' with '-13684'
c Var 'aux2221' direct represents '1' with '13684'
c Var 'aux2221' order represents '1' with '1'
c Var 'aux2221' order represents '0' with '-13684'
c Encoding variable: aux2222 with domain: bool (representing constraint (36<=(aux588 + aux591 + aux592)))
c Var 'aux2222' direct represents '0' with '-13685'
c Var 'aux2222' direct represents '1' with '13685'
c Var 'aux2222' order represents '1' with '1'
c Var 'aux2222' order represents '0' with '-13685'
c Encoding variable: aux2223 with domain: bool (representing constraint ((aux594 + aux597 + aux598)<=36))
c Var 'aux2223' direct represents '0' with '-13686'
c Var 'aux2223' direct represents '1' with '13686'
c Var 'aux2223' order represents '1' with '1'
c Var 'aux2223' order represents '0' with '-13686'
c Encoding variable: aux2224 with domain: bool (representing constraint (36<=(aux594 + aux597 + aux598)))
c Var 'aux2224' direct represents '0' with '-13687'
c Var 'aux2224' direct represents '1' with '13687'
c Var 'aux2224' order represents '1' with '1'
c Var 'aux2224' order represents '0' with '-13687'
c Encoding variable: aux2225 with domain: bool (representing constraint ((aux600 + aux603 + aux604)<=36))
c Var 'aux2225' direct represents '0' with '-13688'
c Var 'aux2225' direct represents '1' with '13688'
c Var 'aux2225' order represents '1' with '1'
c Var 'aux2225' order represents '0' with '-13688'
c Encoding variable: aux2226 with domain: bool (representing constraint (36<=(aux600 + aux603 + aux604)))
c Var 'aux2226' direct represents '0' with '-13689'
c Var 'aux2226' direct represents '1' with '13689'
c Var 'aux2226' order represents '1' with '1'
c Var 'aux2226' order represents '0' with '-13689'
c Encoding variable: aux2227 with domain: bool (representing constraint ((aux606 + aux609 + aux610)<=36))
c Var 'aux2227' direct represents '0' with '-13690'
c Var 'aux2227' direct represents '1' with '13690'
c Var 'aux2227' order represents '1' with '1'
c Var 'aux2227' order represents '0' with '-13690'
c Encoding variable: aux2228 with domain: bool (representing constraint (36<=(aux606 + aux609 + aux610)))
c Var 'aux2228' direct represents '0' with '-13691'
c Var 'aux2228' direct represents '1' with '13691'
c Var 'aux2228' order represents '1' with '1'
c Var 'aux2228' order represents '0' with '-13691'
c Encoding variable: aux2229 with domain: bool (representing constraint ((aux612 + aux615 + aux616)<=1))
c Var 'aux2229' direct represents '0' with '-13692'
c Var 'aux2229' direct represents '1' with '13692'
c Var 'aux2229' order represents '1' with '1'
c Var 'aux2229' order represents '0' with '-13692'
c Encoding variable: aux2230 with domain: bool (representing constraint (1<=(aux612 + aux615 + aux616)))
c Var 'aux2230' direct represents '0' with '-13693'
c Var 'aux2230' direct represents '1' with '13693'
c Var 'aux2230' order represents '1' with '1'
c Var 'aux2230' order represents '0' with '-13693'
c Encoding variable: aux2231 with domain: bool (representing constraint ((aux618 + aux621 + aux622)<=1))
c Var 'aux2231' direct represents '0' with '-13694'
c Var 'aux2231' direct represents '1' with '13694'
c Var 'aux2231' order represents '1' with '1'
c Var 'aux2231' order represents '0' with '-13694'
c Encoding variable: aux2232 with domain: bool (representing constraint (1<=(aux618 + aux621 + aux622)))
c Var 'aux2232' direct represents '0' with '-13695'
c Var 'aux2232' direct represents '1' with '13695'
c Var 'aux2232' order represents '1' with '1'
c Var 'aux2232' order represents '0' with '-13695'
c Encoding variable: aux2233 with domain: bool (representing constraint ((aux624 + aux627 + aux628)<=1))
c Var 'aux2233' direct represents '0' with '-13696'
c Var 'aux2233' direct represents '1' with '13696'
c Var 'aux2233' order represents '1' with '1'
c Var 'aux2233' order represents '0' with '-13696'
c Encoding variable: aux2234 with domain: bool (representing constraint (1<=(aux624 + aux627 + aux628)))
c Var 'aux2234' direct represents '0' with '-13697'
c Var 'aux2234' direct represents '1' with '13697'
c Var 'aux2234' order represents '1' with '1'
c Var 'aux2234' order represents '0' with '-13697'
c Encoding variable: aux2235 with domain: bool (representing constraint ((aux630 + aux633 + aux634)<=1))
c Var 'aux2235' direct represents '0' with '-13698'
c Var 'aux2235' direct represents '1' with '13698'
c Var 'aux2235' order represents '1' with '1'
c Var 'aux2235' order represents '0' with '-13698'
c Encoding variable: aux2236 with domain: bool (representing constraint (1<=(aux630 + aux633 + aux634)))
c Var 'aux2236' direct represents '0' with '-13699'
c Var 'aux2236' direct represents '1' with '13699'
c Var 'aux2236' order represents '1' with '1'
c Var 'aux2236' order represents '0' with '-13699'
c Encoding variable: aux2237 with domain: bool (representing constraint ((aux636 + aux639 + aux640)<=1))
c Var 'aux2237' direct represents '0' with '-13700'
c Var 'aux2237' direct represents '1' with '13700'
c Var 'aux2237' order represents '1' with '1'
c Var 'aux2237' order represents '0' with '-13700'
c Encoding variable: aux2238 with domain: bool (representing constraint (1<=(aux636 + aux639 + aux640)))
c Var 'aux2238' direct represents '0' with '-13701'
c Var 'aux2238' direct represents '1' with '13701'
c Var 'aux2238' order represents '1' with '1'
c Var 'aux2238' order represents '0' with '-13701'
c Encoding variable: aux2239 with domain: bool (representing constraint ((aux642 + aux645 + aux646)<=1))
c Var 'aux2239' direct represents '0' with '-13702'
c Var 'aux2239' direct represents '1' with '13702'
c Var 'aux2239' order represents '1' with '1'
c Var 'aux2239' order represents '0' with '-13702'
c Encoding variable: aux2240 with domain: bool (representing constraint (1<=(aux642 + aux645 + aux646)))
c Var 'aux2240' direct represents '0' with '-13703'
c Var 'aux2240' direct represents '1' with '13703'
c Var 'aux2240' order represents '1' with '1'
c Var 'aux2240' order represents '0' with '-13703'
c Encoding variable: aux2241 with domain: bool (representing constraint ((aux648 + aux651 + aux652)<=1))
c Var 'aux2241' direct represents '0' with '-13704'
c Var 'aux2241' direct represents '1' with '13704'
c Var 'aux2241' order represents '1' with '1'
c Var 'aux2241' order represents '0' with '-13704'
c Encoding variable: aux2242 with domain: bool (representing constraint (1<=(aux648 + aux651 + aux652)))
c Var 'aux2242' direct represents '0' with '-13705'
c Var 'aux2242' direct represents '1' with '13705'
c Var 'aux2242' order represents '1' with '1'
c Var 'aux2242' order represents '0' with '-13705'
c Encoding variable: aux2243 with domain: bool (representing constraint ((aux654 + aux657 + aux658)<=1))
c Var 'aux2243' direct represents '0' with '-13706'
c Var 'aux2243' direct represents '1' with '13706'
c Var 'aux2243' order represents '1' with '1'
c Var 'aux2243' order represents '0' with '-13706'
c Encoding variable: aux2244 with domain: bool (representing constraint (1<=(aux654 + aux657 + aux658)))
c Var 'aux2244' direct represents '0' with '-13707'
c Var 'aux2244' direct represents '1' with '13707'
c Var 'aux2244' order represents '1' with '1'
c Var 'aux2244' order represents '0' with '-13707'
c Encoding variable: aux2245 with domain: bool (representing constraint ((aux660 + aux663 + aux664)<=1))
c Var 'aux2245' direct represents '0' with '-13708'
c Var 'aux2245' direct represents '1' with '13708'
c Var 'aux2245' order represents '1' with '1'
c Var 'aux2245' order represents '0' with '-13708'
c Encoding variable: aux2246 with domain: bool (representing constraint (1<=(aux660 + aux663 + aux664)))
c Var 'aux2246' direct represents '0' with '-13709'
c Var 'aux2246' direct represents '1' with '13709'
c Var 'aux2246' order represents '1' with '1'
c Var 'aux2246' order represents '0' with '-13709'
c Encoding variable: aux2247 with domain: bool (representing constraint ((aux666 + aux669 + aux670)<=1))
c Var 'aux2247' direct represents '0' with '-13710'
c Var 'aux2247' direct represents '1' with '13710'
c Var 'aux2247' order represents '1' with '1'
c Var 'aux2247' order represents '0' with '-13710'
c Encoding variable: aux2248 with domain: bool (representing constraint (1<=(aux666 + aux669 + aux670)))
c Var 'aux2248' direct represents '0' with '-13711'
c Var 'aux2248' direct represents '1' with '13711'
c Var 'aux2248' order represents '1' with '1'
c Var 'aux2248' order represents '0' with '-13711'
c Encoding variable: aux2249 with domain: bool (representing constraint ((aux672 + aux675 + aux676)<=1))
c Var 'aux2249' direct represents '0' with '-13712'
c Var 'aux2249' direct represents '1' with '13712'
c Var 'aux2249' order represents '1' with '1'
c Var 'aux2249' order represents '0' with '-13712'
c Encoding variable: aux2250 with domain: bool (representing constraint (1<=(aux672 + aux675 + aux676)))
c Var 'aux2250' direct represents '0' with '-13713'
c Var 'aux2250' direct represents '1' with '13713'
c Var 'aux2250' order represents '1' with '1'
c Var 'aux2250' order represents '0' with '-13713'
c Encoding variable: aux2251 with domain: bool (representing constraint ((aux678 + aux681 + aux682)<=1))
c Var 'aux2251' direct represents '0' with '-13714'
c Var 'aux2251' direct represents '1' with '13714'
c Var 'aux2251' order represents '1' with '1'
c Var 'aux2251' order represents '0' with '-13714'
c Encoding variable: aux2252 with domain: bool (representing constraint (1<=(aux678 + aux681 + aux682)))
c Var 'aux2252' direct represents '0' with '-13715'
c Var 'aux2252' direct represents '1' with '13715'
c Var 'aux2252' order represents '1' with '1'
c Var 'aux2252' order represents '0' with '-13715'
c Encoding variable: aux2253 with domain: bool (representing constraint ((aux684 + aux687 + aux688)<=1))
c Var 'aux2253' direct represents '0' with '-13716'
c Var 'aux2253' direct represents '1' with '13716'
c Var 'aux2253' order represents '1' with '1'
c Var 'aux2253' order represents '0' with '-13716'
c Encoding variable: aux2254 with domain: bool (representing constraint (1<=(aux684 + aux687 + aux688)))
c Var 'aux2254' direct represents '0' with '-13717'
c Var 'aux2254' direct represents '1' with '13717'
c Var 'aux2254' order represents '1' with '1'
c Var 'aux2254' order represents '0' with '-13717'
c Encoding variable: aux2255 with domain: bool (representing constraint ((aux690 + aux693 + aux694)<=1))
c Var 'aux2255' direct represents '0' with '-13718'
c Var 'aux2255' direct represents '1' with '13718'
c Var 'aux2255' order represents '1' with '1'
c Var 'aux2255' order represents '0' with '-13718'
c Encoding variable: aux2256 with domain: bool (representing constraint (1<=(aux690 + aux693 + aux694)))
c Var 'aux2256' direct represents '0' with '-13719'
c Var 'aux2256' direct represents '1' with '13719'
c Var 'aux2256' order represents '1' with '1'
c Var 'aux2256' order represents '0' with '-13719'
c Encoding variable: aux2257 with domain: bool (representing constraint ((aux696 + aux699 + aux700)<=1))
c Var 'aux2257' direct represents '0' with '-13720'
c Var 'aux2257' direct represents '1' with '13720'
c Var 'aux2257' order represents '1' with '1'
c Var 'aux2257' order represents '0' with '-13720'
c Encoding variable: aux2258 with domain: bool (representing constraint (1<=(aux696 + aux699 + aux700)))
c Var 'aux2258' direct represents '0' with '-13721'
c Var 'aux2258' direct represents '1' with '13721'
c Var 'aux2258' order represents '1' with '1'
c Var 'aux2258' order represents '0' with '-13721'
c Encoding variable: aux2259 with domain: bool (representing constraint ((aux702 + aux705 + aux706)<=1))
c Var 'aux2259' direct represents '0' with '-13722'
c Var 'aux2259' direct represents '1' with '13722'
c Var 'aux2259' order represents '1' with '1'
c Var 'aux2259' order represents '0' with '-13722'
c Encoding variable: aux2260 with domain: bool (representing constraint (1<=(aux702 + aux705 + aux706)))
c Var 'aux2260' direct represents '0' with '-13723'
c Var 'aux2260' direct represents '1' with '13723'
c Var 'aux2260' order represents '1' with '1'
c Var 'aux2260' order represents '0' with '-13723'
c Encoding variable: aux2261 with domain: bool (representing constraint ((aux708 + aux711 + aux712)<=1))
c Var 'aux2261' direct represents '0' with '-13724'
c Var 'aux2261' direct represents '1' with '13724'
c Var 'aux2261' order represents '1' with '1'
c Var 'aux2261' order represents '0' with '-13724'
c Encoding variable: aux2262 with domain: bool (representing constraint (1<=(aux708 + aux711 + aux712)))
c Var 'aux2262' direct represents '0' with '-13725'
c Var 'aux2262' direct represents '1' with '13725'
c Var 'aux2262' order represents '1' with '1'
c Var 'aux2262' order represents '0' with '-13725'
c Encoding variable: aux2263 with domain: bool (representing constraint ((aux714 + aux717 + aux718)<=1))
c Var 'aux2263' direct represents '0' with '-13726'
c Var 'aux2263' direct represents '1' with '13726'
c Var 'aux2263' order represents '1' with '1'
c Var 'aux2263' order represents '0' with '-13726'
c Encoding variable: aux2264 with domain: bool (representing constraint (1<=(aux714 + aux717 + aux718)))
c Var 'aux2264' direct represents '0' with '-13727'
c Var 'aux2264' direct represents '1' with '13727'
c Var 'aux2264' order represents '1' with '1'
c Var 'aux2264' order represents '0' with '-13727'
c Encoding variable: aux2265 with domain: bool (representing constraint ((aux720 + aux723 + aux724)<=1))
c Var 'aux2265' direct represents '0' with '-13728'
c Var 'aux2265' direct represents '1' with '13728'
c Var 'aux2265' order represents '1' with '1'
c Var 'aux2265' order represents '0' with '-13728'
c Encoding variable: aux2266 with domain: bool (representing constraint (1<=(aux720 + aux723 + aux724)))
c Var 'aux2266' direct represents '0' with '-13729'
c Var 'aux2266' direct represents '1' with '13729'
c Var 'aux2266' order represents '1' with '1'
c Var 'aux2266' order represents '0' with '-13729'
c Encoding variable: aux2267 with domain: bool (representing constraint ((aux726 + aux729 + aux730)<=1))
c Var 'aux2267' direct represents '0' with '-13730'
c Var 'aux2267' direct represents '1' with '13730'
c Var 'aux2267' order represents '1' with '1'
c Var 'aux2267' order represents '0' with '-13730'
c Encoding variable: aux2268 with domain: bool (representing constraint (1<=(aux726 + aux729 + aux730)))
c Var 'aux2268' direct represents '0' with '-13731'
c Var 'aux2268' direct represents '1' with '13731'
c Var 'aux2268' order represents '1' with '1'
c Var 'aux2268' order represents '0' with '-13731'
c Encoding variable: aux2269 with domain: bool (representing constraint ((aux732 + aux735 + aux736)<=1))
c Var 'aux2269' direct represents '0' with '-13732'
c Var 'aux2269' direct represents '1' with '13732'
c Var 'aux2269' order represents '1' with '1'
c Var 'aux2269' order represents '0' with '-13732'
c Encoding variable: aux2270 with domain: bool (representing constraint (1<=(aux732 + aux735 + aux736)))
c Var 'aux2270' direct represents '0' with '-13733'
c Var 'aux2270' direct represents '1' with '13733'
c Var 'aux2270' order represents '1' with '1'
c Var 'aux2270' order represents '0' with '-13733'
c Encoding variable: aux2271 with domain: bool (representing constraint ((aux738 + aux741 + aux742)<=1))
c Var 'aux2271' direct represents '0' with '-13734'
c Var 'aux2271' direct represents '1' with '13734'
c Var 'aux2271' order represents '1' with '1'
c Var 'aux2271' order represents '0' with '-13734'
c Encoding variable: aux2272 with domain: bool (representing constraint (1<=(aux738 + aux741 + aux742)))
c Var 'aux2272' direct represents '0' with '-13735'
c Var 'aux2272' direct represents '1' with '13735'
c Var 'aux2272' order represents '1' with '1'
c Var 'aux2272' order represents '0' with '-13735'
c Encoding variable: aux2273 with domain: bool (representing constraint ((aux744 + aux747 + aux748)<=1))
c Var 'aux2273' direct represents '0' with '-13736'
c Var 'aux2273' direct represents '1' with '13736'
c Var 'aux2273' order represents '1' with '1'
c Var 'aux2273' order represents '0' with '-13736'
c Encoding variable: aux2274 with domain: bool (representing constraint (1<=(aux744 + aux747 + aux748)))
c Var 'aux2274' direct represents '0' with '-13737'
c Var 'aux2274' direct represents '1' with '13737'
c Var 'aux2274' order represents '1' with '1'
c Var 'aux2274' order represents '0' with '-13737'
c Encoding variable: aux2275 with domain: bool (representing constraint ((aux750 + aux753 + aux754)<=1))
c Var 'aux2275' direct represents '0' with '-13738'
c Var 'aux2275' direct represents '1' with '13738'
c Var 'aux2275' order represents '1' with '1'
c Var 'aux2275' order represents '0' with '-13738'
c Encoding variable: aux2276 with domain: bool (representing constraint (1<=(aux750 + aux753 + aux754)))
c Var 'aux2276' direct represents '0' with '-13739'
c Var 'aux2276' direct represents '1' with '13739'
c Var 'aux2276' order represents '1' with '1'
c Var 'aux2276' order represents '0' with '-13739'
c Encoding variable: aux2277 with domain: bool (representing constraint ((aux756 + aux759 + aux760)<=1))
c Var 'aux2277' direct represents '0' with '-13740'
c Var 'aux2277' direct represents '1' with '13740'
c Var 'aux2277' order represents '1' with '1'
c Var 'aux2277' order represents '0' with '-13740'
c Encoding variable: aux2278 with domain: bool (representing constraint (1<=(aux756 + aux759 + aux760)))
c Var 'aux2278' direct represents '0' with '-13741'
c Var 'aux2278' direct represents '1' with '13741'
c Var 'aux2278' order represents '1' with '1'
c Var 'aux2278' order represents '0' with '-13741'
c Encoding variable: aux2279 with domain: bool (representing constraint ((aux762 + aux765 + aux766)<=1))
c Var 'aux2279' direct represents '0' with '-13742'
c Var 'aux2279' direct represents '1' with '13742'
c Var 'aux2279' order represents '1' with '1'
c Var 'aux2279' order represents '0' with '-13742'
c Encoding variable: aux2280 with domain: bool (representing constraint (1<=(aux762 + aux765 + aux766)))
c Var 'aux2280' direct represents '0' with '-13743'
c Var 'aux2280' direct represents '1' with '13743'
c Var 'aux2280' order represents '1' with '1'
c Var 'aux2280' order represents '0' with '-13743'
c Encoding variable: aux2281 with domain: bool (representing constraint ((aux768 + aux771 + aux772)<=1))
c Var 'aux2281' direct represents '0' with '-13744'
c Var 'aux2281' direct represents '1' with '13744'
c Var 'aux2281' order represents '1' with '1'
c Var 'aux2281' order represents '0' with '-13744'
c Encoding variable: aux2282 with domain: bool (representing constraint (1<=(aux768 + aux771 + aux772)))
c Var 'aux2282' direct represents '0' with '-13745'
c Var 'aux2282' direct represents '1' with '13745'
c Var 'aux2282' order represents '1' with '1'
c Var 'aux2282' order represents '0' with '-13745'
c Encoding variable: aux2283 with domain: bool (representing constraint ((aux774 + aux777 + aux778)<=1))
c Var 'aux2283' direct represents '0' with '-13746'
c Var 'aux2283' direct represents '1' with '13746'
c Var 'aux2283' order represents '1' with '1'
c Var 'aux2283' order represents '0' with '-13746'
c Encoding variable: aux2284 with domain: bool (representing constraint (1<=(aux774 + aux777 + aux778)))
c Var 'aux2284' direct represents '0' with '-13747'
c Var 'aux2284' direct represents '1' with '13747'
c Var 'aux2284' order represents '1' with '1'
c Var 'aux2284' order represents '0' with '-13747'
c Encoding variable: aux2285 with domain: bool (representing constraint ((aux780 + aux783 + aux784)<=1))
c Var 'aux2285' direct represents '0' with '-13748'
c Var 'aux2285' direct represents '1' with '13748'
c Var 'aux2285' order represents '1' with '1'
c Var 'aux2285' order represents '0' with '-13748'
c Encoding variable: aux2286 with domain: bool (representing constraint (1<=(aux780 + aux783 + aux784)))
c Var 'aux2286' direct represents '0' with '-13749'
c Var 'aux2286' direct represents '1' with '13749'
c Var 'aux2286' order represents '1' with '1'
c Var 'aux2286' order represents '0' with '-13749'
c Encoding variable: aux2287 with domain: bool (representing constraint ((aux786 + aux789 + aux790)<=1))
c Var 'aux2287' direct represents '0' with '-13750'
c Var 'aux2287' direct represents '1' with '13750'
c Var 'aux2287' order represents '1' with '1'
c Var 'aux2287' order represents '0' with '-13750'
c Encoding variable: aux2288 with domain: bool (representing constraint (1<=(aux786 + aux789 + aux790)))
c Var 'aux2288' direct represents '0' with '-13751'
c Var 'aux2288' direct represents '1' with '13751'
c Var 'aux2288' order represents '1' with '1'
c Var 'aux2288' order represents '0' with '-13751'
c Encoding variable: aux2289 with domain: bool (representing constraint ((aux792 + aux795 + aux796)<=1))
c Var 'aux2289' direct represents '0' with '-13752'
c Var 'aux2289' direct represents '1' with '13752'
c Var 'aux2289' order represents '1' with '1'
c Var 'aux2289' order represents '0' with '-13752'
c Encoding variable: aux2290 with domain: bool (representing constraint (1<=(aux792 + aux795 + aux796)))
c Var 'aux2290' direct represents '0' with '-13753'
c Var 'aux2290' direct represents '1' with '13753'
c Var 'aux2290' order represents '1' with '1'
c Var 'aux2290' order represents '0' with '-13753'
c Encoding variable: aux2291 with domain: bool (representing constraint ((aux798 + aux801 + aux802)<=1))
c Var 'aux2291' direct represents '0' with '-13754'
c Var 'aux2291' direct represents '1' with '13754'
c Var 'aux2291' order represents '1' with '1'
c Var 'aux2291' order represents '0' with '-13754'
c Encoding variable: aux2292 with domain: bool (representing constraint (1<=(aux798 + aux801 + aux802)))
c Var 'aux2292' direct represents '0' with '-13755'
c Var 'aux2292' direct represents '1' with '13755'
c Var 'aux2292' order represents '1' with '1'
c Var 'aux2292' order represents '0' with '-13755'
c Encoding variable: aux2293 with domain: bool (representing constraint ((aux804 + aux807 + aux808)<=1))
c Var 'aux2293' direct represents '0' with '-13756'
c Var 'aux2293' direct represents '1' with '13756'
c Var 'aux2293' order represents '1' with '1'
c Var 'aux2293' order represents '0' with '-13756'
c Encoding variable: aux2294 with domain: bool (representing constraint (1<=(aux804 + aux807 + aux808)))
c Var 'aux2294' direct represents '0' with '-13757'
c Var 'aux2294' direct represents '1' with '13757'
c Var 'aux2294' order represents '1' with '1'
c Var 'aux2294' order represents '0' with '-13757'
c Encoding variable: aux2295 with domain: bool (representing constraint ((aux810 + aux813 + aux814)<=1))
c Var 'aux2295' direct represents '0' with '-13758'
c Var 'aux2295' direct represents '1' with '13758'
c Var 'aux2295' order represents '1' with '1'
c Var 'aux2295' order represents '0' with '-13758'
c Encoding variable: aux2296 with domain: bool (representing constraint (1<=(aux810 + aux813 + aux814)))
c Var 'aux2296' direct represents '0' with '-13759'
c Var 'aux2296' direct represents '1' with '13759'
c Var 'aux2296' order represents '1' with '1'
c Var 'aux2296' order represents '0' with '-13759'
c Encoding variable: aux2297 with domain: bool (representing constraint ((aux816 + aux819 + aux820)<=1))
c Var 'aux2297' direct represents '0' with '-13760'
c Var 'aux2297' direct represents '1' with '13760'
c Var 'aux2297' order represents '1' with '1'
c Var 'aux2297' order represents '0' with '-13760'
c Encoding variable: aux2298 with domain: bool (representing constraint (1<=(aux816 + aux819 + aux820)))
c Var 'aux2298' direct represents '0' with '-13761'
c Var 'aux2298' direct represents '1' with '13761'
c Var 'aux2298' order represents '1' with '1'
c Var 'aux2298' order represents '0' with '-13761'
c Encoding variable: aux2299 with domain: bool (representing constraint ((aux822 + aux825 + aux826)<=1))
c Var 'aux2299' direct represents '0' with '-13762'
c Var 'aux2299' direct represents '1' with '13762'
c Var 'aux2299' order represents '1' with '1'
c Var 'aux2299' order represents '0' with '-13762'
c Encoding variable: aux2300 with domain: bool (representing constraint (1<=(aux822 + aux825 + aux826)))
c Var 'aux2300' direct represents '0' with '-13763'
c Var 'aux2300' direct represents '1' with '13763'
c Var 'aux2300' order represents '1' with '1'
c Var 'aux2300' order represents '0' with '-13763'
c Encoding variable: aux2301 with domain: bool (representing constraint ((aux828 + aux831 + aux832)<=1))
c Var 'aux2301' direct represents '0' with '-13764'
c Var 'aux2301' direct represents '1' with '13764'
c Var 'aux2301' order represents '1' with '1'
c Var 'aux2301' order represents '0' with '-13764'
c Encoding variable: aux2302 with domain: bool (representing constraint (1<=(aux828 + aux831 + aux832)))
c Var 'aux2302' direct represents '0' with '-13765'
c Var 'aux2302' direct represents '1' with '13765'
c Var 'aux2302' order represents '1' with '1'
c Var 'aux2302' order represents '0' with '-13765'
c Encoding variable: aux2303 with domain: bool (representing constraint ((aux834 + aux837 + aux838)<=1))
c Var 'aux2303' direct represents '0' with '-13766'
c Var 'aux2303' direct represents '1' with '13766'
c Var 'aux2303' order represents '1' with '1'
c Var 'aux2303' order represents '0' with '-13766'
c Encoding variable: aux2304 with domain: bool (representing constraint (1<=(aux834 + aux837 + aux838)))
c Var 'aux2304' direct represents '0' with '-13767'
c Var 'aux2304' direct represents '1' with '13767'
c Var 'aux2304' order represents '1' with '1'
c Var 'aux2304' order represents '0' with '-13767'
c Encoding variable: aux2305 with domain: bool (representing constraint ((aux840 + aux843 + aux844)<=1))
c Var 'aux2305' direct represents '0' with '-13768'
c Var 'aux2305' direct represents '1' with '13768'
c Var 'aux2305' order represents '1' with '1'
c Var 'aux2305' order represents '0' with '-13768'
c Encoding variable: aux2306 with domain: bool (representing constraint (1<=(aux840 + aux843 + aux844)))
c Var 'aux2306' direct represents '0' with '-13769'
c Var 'aux2306' direct represents '1' with '13769'
c Var 'aux2306' order represents '1' with '1'
c Var 'aux2306' order represents '0' with '-13769'
c Encoding variable: aux2307 with domain: bool (representing constraint ((aux846 + aux849 + aux850)<=1))
c Var 'aux2307' direct represents '0' with '-13770'
c Var 'aux2307' direct represents '1' with '13770'
c Var 'aux2307' order represents '1' with '1'
c Var 'aux2307' order represents '0' with '-13770'
c Encoding variable: aux2308 with domain: bool (representing constraint (1<=(aux846 + aux849 + aux850)))
c Var 'aux2308' direct represents '0' with '-13771'
c Var 'aux2308' direct represents '1' with '13771'
c Var 'aux2308' order represents '1' with '1'
c Var 'aux2308' order represents '0' with '-13771'
c Encoding variable: aux2309 with domain: bool (representing constraint ((aux852 + aux855 + aux856)<=1))
c Var 'aux2309' direct represents '0' with '-13772'
c Var 'aux2309' direct represents '1' with '13772'
c Var 'aux2309' order represents '1' with '1'
c Var 'aux2309' order represents '0' with '-13772'
c Encoding variable: aux2310 with domain: bool (representing constraint (1<=(aux852 + aux855 + aux856)))
c Var 'aux2310' direct represents '0' with '-13773'
c Var 'aux2310' direct represents '1' with '13773'
c Var 'aux2310' order represents '1' with '1'
c Var 'aux2310' order represents '0' with '-13773'
c Encoding variable: aux2311 with domain: bool (representing constraint ((aux858 + aux861 + aux862)<=1))
c Var 'aux2311' direct represents '0' with '-13774'
c Var 'aux2311' direct represents '1' with '13774'
c Var 'aux2311' order represents '1' with '1'
c Var 'aux2311' order represents '0' with '-13774'
c Encoding variable: aux2312 with domain: bool (representing constraint (1<=(aux858 + aux861 + aux862)))
c Var 'aux2312' direct represents '0' with '-13775'
c Var 'aux2312' direct represents '1' with '13775'
c Var 'aux2312' order represents '1' with '1'
c Var 'aux2312' order represents '0' with '-13775'
c Encoding variable: aux2313 with domain: bool (representing constraint ((aux864 + aux867 + aux868)<=1))
c Var 'aux2313' direct represents '0' with '-13776'
c Var 'aux2313' direct represents '1' with '13776'
c Var 'aux2313' order represents '1' with '1'
c Var 'aux2313' order represents '0' with '-13776'
c Encoding variable: aux2314 with domain: bool (representing constraint (1<=(aux864 + aux867 + aux868)))
c Var 'aux2314' direct represents '0' with '-13777'
c Var 'aux2314' direct represents '1' with '13777'
c Var 'aux2314' order represents '1' with '1'
c Var 'aux2314' order represents '0' with '-13777'
c Encoding variable: aux2315 with domain: bool (representing constraint ((aux870 + aux873 + aux874)<=1))
c Var 'aux2315' direct represents '0' with '-13778'
c Var 'aux2315' direct represents '1' with '13778'
c Var 'aux2315' order represents '1' with '1'
c Var 'aux2315' order represents '0' with '-13778'
c Encoding variable: aux2316 with domain: bool (representing constraint (1<=(aux870 + aux873 + aux874)))
c Var 'aux2316' direct represents '0' with '-13779'
c Var 'aux2316' direct represents '1' with '13779'
c Var 'aux2316' order represents '1' with '1'
c Var 'aux2316' order represents '0' with '-13779'
c Encoding variable: aux2317 with domain: bool (representing constraint ((aux876 + aux879 + aux880)<=1))
c Var 'aux2317' direct represents '0' with '-13780'
c Var 'aux2317' direct represents '1' with '13780'
c Var 'aux2317' order represents '1' with '1'
c Var 'aux2317' order represents '0' with '-13780'
c Encoding variable: aux2318 with domain: bool (representing constraint (1<=(aux876 + aux879 + aux880)))
c Var 'aux2318' direct represents '0' with '-13781'
c Var 'aux2318' direct represents '1' with '13781'
c Var 'aux2318' order represents '1' with '1'
c Var 'aux2318' order represents '0' with '-13781'
c Encoding variable: aux2319 with domain: bool (representing constraint ((aux882 + aux885 + aux886)<=1))
c Var 'aux2319' direct represents '0' with '-13782'
c Var 'aux2319' direct represents '1' with '13782'
c Var 'aux2319' order represents '1' with '1'
c Var 'aux2319' order represents '0' with '-13782'
c Encoding variable: aux2320 with domain: bool (representing constraint (1<=(aux882 + aux885 + aux886)))
c Var 'aux2320' direct represents '0' with '-13783'
c Var 'aux2320' direct represents '1' with '13783'
c Var 'aux2320' order represents '1' with '1'
c Var 'aux2320' order represents '0' with '-13783'
c Encoding variable: aux2321 with domain: bool (representing constraint ((aux888 + aux891 + aux892)<=1))
c Var 'aux2321' direct represents '0' with '-13784'
c Var 'aux2321' direct represents '1' with '13784'
c Var 'aux2321' order represents '1' with '1'
c Var 'aux2321' order represents '0' with '-13784'
c Encoding variable: aux2322 with domain: bool (representing constraint (1<=(aux888 + aux891 + aux892)))
c Var 'aux2322' direct represents '0' with '-13785'
c Var 'aux2322' direct represents '1' with '13785'
c Var 'aux2322' order represents '1' with '1'
c Var 'aux2322' order represents '0' with '-13785'
c Encoding variable: aux2323 with domain: bool (representing constraint ((aux894 + aux897 + aux898)<=1))
c Var 'aux2323' direct represents '0' with '-13786'
c Var 'aux2323' direct represents '1' with '13786'
c Var 'aux2323' order represents '1' with '1'
c Var 'aux2323' order represents '0' with '-13786'
c Encoding variable: aux2324 with domain: bool (representing constraint (1<=(aux894 + aux897 + aux898)))
c Var 'aux2324' direct represents '0' with '-13787'
c Var 'aux2324' direct represents '1' with '13787'
c Var 'aux2324' order represents '1' with '1'
c Var 'aux2324' order represents '0' with '-13787'
c Encoding variable: aux2325 with domain: bool (representing constraint ((aux900 + aux903 + aux904)<=1))
c Var 'aux2325' direct represents '0' with '-13788'
c Var 'aux2325' direct represents '1' with '13788'
c Var 'aux2325' order represents '1' with '1'
c Var 'aux2325' order represents '0' with '-13788'
c Encoding variable: aux2326 with domain: bool (representing constraint (1<=(aux900 + aux903 + aux904)))
c Var 'aux2326' direct represents '0' with '-13789'
c Var 'aux2326' direct represents '1' with '13789'
c Var 'aux2326' order represents '1' with '1'
c Var 'aux2326' order represents '0' with '-13789'
c Encoding variable: aux2327 with domain: bool (representing constraint ((aux906 + aux909 + aux910)<=1))
c Var 'aux2327' direct represents '0' with '-13790'
c Var 'aux2327' direct represents '1' with '13790'
c Var 'aux2327' order represents '1' with '1'
c Var 'aux2327' order represents '0' with '-13790'
c Encoding variable: aux2328 with domain: bool (representing constraint (1<=(aux906 + aux909 + aux910)))
c Var 'aux2328' direct represents '0' with '-13791'
c Var 'aux2328' direct represents '1' with '13791'
c Var 'aux2328' order represents '1' with '1'
c Var 'aux2328' order represents '0' with '-13791'
c Encoding variable: aux2329 with domain: bool (representing constraint ((aux912 + aux915 + aux916)<=1))
c Var 'aux2329' direct represents '0' with '-13792'
c Var 'aux2329' direct represents '1' with '13792'
c Var 'aux2329' order represents '1' with '1'
c Var 'aux2329' order represents '0' with '-13792'
c Encoding variable: aux2330 with domain: bool (representing constraint (1<=(aux912 + aux915 + aux916)))
c Var 'aux2330' direct represents '0' with '-13793'
c Var 'aux2330' direct represents '1' with '13793'
c Var 'aux2330' order represents '1' with '1'
c Var 'aux2330' order represents '0' with '-13793'
c Encoding variable: aux2331 with domain: bool (representing constraint ((aux918 + aux921 + aux922)<=1))
c Var 'aux2331' direct represents '0' with '-13794'
c Var 'aux2331' direct represents '1' with '13794'
c Var 'aux2331' order represents '1' with '1'
c Var 'aux2331' order represents '0' with '-13794'
c Encoding variable: aux2332 with domain: bool (representing constraint (1<=(aux918 + aux921 + aux922)))
c Var 'aux2332' direct represents '0' with '-13795'
c Var 'aux2332' direct represents '1' with '13795'
c Var 'aux2332' order represents '1' with '1'
c Var 'aux2332' order represents '0' with '-13795'
c Encoding variable: aux2333 with domain: bool (representing constraint ((aux924 + aux927 + aux928)<=1))
c Var 'aux2333' direct represents '0' with '-13796'
c Var 'aux2333' direct represents '1' with '13796'
c Var 'aux2333' order represents '1' with '1'
c Var 'aux2333' order represents '0' with '-13796'
c Encoding variable: aux2334 with domain: bool (representing constraint (1<=(aux924 + aux927 + aux928)))
c Var 'aux2334' direct represents '0' with '-13797'
c Var 'aux2334' direct represents '1' with '13797'
c Var 'aux2334' order represents '1' with '1'
c Var 'aux2334' order represents '0' with '-13797'
c Encoding variable: aux2335 with domain: bool (representing constraint ((aux930 + aux933 + aux934)<=1))
c Var 'aux2335' direct represents '0' with '-13798'
c Var 'aux2335' direct represents '1' with '13798'
c Var 'aux2335' order represents '1' with '1'
c Var 'aux2335' order represents '0' with '-13798'
c Encoding variable: aux2336 with domain: bool (representing constraint (1<=(aux930 + aux933 + aux934)))
c Var 'aux2336' direct represents '0' with '-13799'
c Var 'aux2336' direct represents '1' with '13799'
c Var 'aux2336' order represents '1' with '1'
c Var 'aux2336' order represents '0' with '-13799'
c Encoding variable: aux2337 with domain: bool (representing constraint ((aux936 + aux939 + aux940)<=1))
c Var 'aux2337' direct represents '0' with '-13800'
c Var 'aux2337' direct represents '1' with '13800'
c Var 'aux2337' order represents '1' with '1'
c Var 'aux2337' order represents '0' with '-13800'
c Encoding variable: aux2338 with domain: bool (representing constraint (1<=(aux936 + aux939 + aux940)))
c Var 'aux2338' direct represents '0' with '-13801'
c Var 'aux2338' direct represents '1' with '13801'
c Var 'aux2338' order represents '1' with '1'
c Var 'aux2338' order represents '0' with '-13801'
c Encoding variable: aux2339 with domain: bool (representing constraint ((aux942 + aux945 + aux946)<=1))
c Var 'aux2339' direct represents '0' with '-13802'
c Var 'aux2339' direct represents '1' with '13802'
c Var 'aux2339' order represents '1' with '1'
c Var 'aux2339' order represents '0' with '-13802'
c Encoding variable: aux2340 with domain: bool (representing constraint (1<=(aux942 + aux945 + aux946)))
c Var 'aux2340' direct represents '0' with '-13803'
c Var 'aux2340' direct represents '1' with '13803'
c Var 'aux2340' order represents '1' with '1'
c Var 'aux2340' order represents '0' with '-13803'
c Encoding variable: aux2341 with domain: bool (representing constraint ((aux948 + aux951 + aux952)<=1))
c Var 'aux2341' direct represents '0' with '-13804'
c Var 'aux2341' direct represents '1' with '13804'
c Var 'aux2341' order represents '1' with '1'
c Var 'aux2341' order represents '0' with '-13804'
c Encoding variable: aux2342 with domain: bool (representing constraint (1<=(aux948 + aux951 + aux952)))
c Var 'aux2342' direct represents '0' with '-13805'
c Var 'aux2342' direct represents '1' with '13805'
c Var 'aux2342' order represents '1' with '1'
c Var 'aux2342' order represents '0' with '-13805'
c Encoding variable: aux2343 with domain: bool (representing constraint ((aux954 + aux957 + aux958)<=1))
c Var 'aux2343' direct represents '0' with '-13806'
c Var 'aux2343' direct represents '1' with '13806'
c Var 'aux2343' order represents '1' with '1'
c Var 'aux2343' order represents '0' with '-13806'
c Encoding variable: aux2344 with domain: bool (representing constraint (1<=(aux954 + aux957 + aux958)))
c Var 'aux2344' direct represents '0' with '-13807'
c Var 'aux2344' direct represents '1' with '13807'
c Var 'aux2344' order represents '1' with '1'
c Var 'aux2344' order represents '0' with '-13807'
c Encoding variable: aux2345 with domain: bool (representing constraint ((aux960 + aux963 + aux964)<=1))
c Var 'aux2345' direct represents '0' with '-13808'
c Var 'aux2345' direct represents '1' with '13808'
c Var 'aux2345' order represents '1' with '1'
c Var 'aux2345' order represents '0' with '-13808'
c Encoding variable: aux2346 with domain: bool (representing constraint (1<=(aux960 + aux963 + aux964)))
c Var 'aux2346' direct represents '0' with '-13809'
c Var 'aux2346' direct represents '1' with '13809'
c Var 'aux2346' order represents '1' with '1'
c Var 'aux2346' order represents '0' with '-13809'
c Encoding variable: aux2347 with domain: bool (representing constraint ((aux966 + aux969 + aux970)<=1))
c Var 'aux2347' direct represents '0' with '-13810'
c Var 'aux2347' direct represents '1' with '13810'
c Var 'aux2347' order represents '1' with '1'
c Var 'aux2347' order represents '0' with '-13810'
c Encoding variable: aux2348 with domain: bool (representing constraint (1<=(aux966 + aux969 + aux970)))
c Var 'aux2348' direct represents '0' with '-13811'
c Var 'aux2348' direct represents '1' with '13811'
c Var 'aux2348' order represents '1' with '1'
c Var 'aux2348' order represents '0' with '-13811'
c Encoding variable: aux2349 with domain: bool (representing constraint ((aux972 + aux975 + aux976)<=1))
c Var 'aux2349' direct represents '0' with '-13812'
c Var 'aux2349' direct represents '1' with '13812'
c Var 'aux2349' order represents '1' with '1'
c Var 'aux2349' order represents '0' with '-13812'
c Encoding variable: aux2350 with domain: bool (representing constraint (1<=(aux972 + aux975 + aux976)))
c Var 'aux2350' direct represents '0' with '-13813'
c Var 'aux2350' direct represents '1' with '13813'
c Var 'aux2350' order represents '1' with '1'
c Var 'aux2350' order represents '0' with '-13813'
c Encoding variable: aux2351 with domain: bool (representing constraint ((aux978 + aux981 + aux982)<=1))
c Var 'aux2351' direct represents '0' with '-13814'
c Var 'aux2351' direct represents '1' with '13814'
c Var 'aux2351' order represents '1' with '1'
c Var 'aux2351' order represents '0' with '-13814'
c Encoding variable: aux2352 with domain: bool (representing constraint (1<=(aux978 + aux981 + aux982)))
c Var 'aux2352' direct represents '0' with '-13815'
c Var 'aux2352' direct represents '1' with '13815'
c Var 'aux2352' order represents '1' with '1'
c Var 'aux2352' order represents '0' with '-13815'
c Encoding variable: aux2353 with domain: bool (representing constraint ((aux984 + aux987 + aux988)<=1))
c Var 'aux2353' direct represents '0' with '-13816'
c Var 'aux2353' direct represents '1' with '13816'
c Var 'aux2353' order represents '1' with '1'
c Var 'aux2353' order represents '0' with '-13816'
c Encoding variable: aux2354 with domain: bool (representing constraint (1<=(aux984 + aux987 + aux988)))
c Var 'aux2354' direct represents '0' with '-13817'
c Var 'aux2354' direct represents '1' with '13817'
c Var 'aux2354' order represents '1' with '1'
c Var 'aux2354' order represents '0' with '-13817'
c Encoding variable: aux2355 with domain: bool (representing constraint ((aux990 + aux993 + aux994)<=1))
c Var 'aux2355' direct represents '0' with '-13818'
c Var 'aux2355' direct represents '1' with '13818'
c Var 'aux2355' order represents '1' with '1'
c Var 'aux2355' order represents '0' with '-13818'
c Encoding variable: aux2356 with domain: bool (representing constraint (1<=(aux990 + aux993 + aux994)))
c Var 'aux2356' direct represents '0' with '-13819'
c Var 'aux2356' direct represents '1' with '13819'
c Var 'aux2356' order represents '1' with '1'
c Var 'aux2356' order represents '0' with '-13819'
c Encoding variable: aux2357 with domain: bool (representing constraint ((aux996 + aux999 + aux1000)<=1))
c Var 'aux2357' direct represents '0' with '-13820'
c Var 'aux2357' direct represents '1' with '13820'
c Var 'aux2357' order represents '1' with '1'
c Var 'aux2357' order represents '0' with '-13820'
c Encoding variable: aux2358 with domain: bool (representing constraint (1<=(aux996 + aux999 + aux1000)))
c Var 'aux2358' direct represents '0' with '-13821'
c Var 'aux2358' direct represents '1' with '13821'
c Var 'aux2358' order represents '1' with '1'
c Var 'aux2358' order represents '0' with '-13821'
c Encoding variable: aux2359 with domain: bool (representing constraint ((aux1002 + aux1005 + aux1006)<=1))
c Var 'aux2359' direct represents '0' with '-13822'
c Var 'aux2359' direct represents '1' with '13822'
c Var 'aux2359' order represents '1' with '1'
c Var 'aux2359' order represents '0' with '-13822'
c Encoding variable: aux2360 with domain: bool (representing constraint (1<=(aux1002 + aux1005 + aux1006)))
c Var 'aux2360' direct represents '0' with '-13823'
c Var 'aux2360' direct represents '1' with '13823'
c Var 'aux2360' order represents '1' with '1'
c Var 'aux2360' order represents '0' with '-13823'
c Encoding variable: aux2361 with domain: bool (representing constraint ((aux1008 + aux1011 + aux1012)<=1))
c Var 'aux2361' direct represents '0' with '-13824'
c Var 'aux2361' direct represents '1' with '13824'
c Var 'aux2361' order represents '1' with '1'
c Var 'aux2361' order represents '0' with '-13824'
c Encoding variable: aux2362 with domain: bool (representing constraint (1<=(aux1008 + aux1011 + aux1012)))
c Var 'aux2362' direct represents '0' with '-13825'
c Var 'aux2362' direct represents '1' with '13825'
c Var 'aux2362' order represents '1' with '1'
c Var 'aux2362' order represents '0' with '-13825'
c Encoding variable: aux2363 with domain: bool (representing constraint ((aux1014 + aux1017 + aux1018)<=1))
c Var 'aux2363' direct represents '0' with '-13826'
c Var 'aux2363' direct represents '1' with '13826'
c Var 'aux2363' order represents '1' with '1'
c Var 'aux2363' order represents '0' with '-13826'
c Encoding variable: aux2364 with domain: bool (representing constraint (1<=(aux1014 + aux1017 + aux1018)))
c Var 'aux2364' direct represents '0' with '-13827'
c Var 'aux2364' direct represents '1' with '13827'
c Var 'aux2364' order represents '1' with '1'
c Var 'aux2364' order represents '0' with '-13827'
c Encoding variable: aux2365 with domain: bool (representing constraint ((aux1020 + aux1023 + aux1024)<=1))
c Var 'aux2365' direct represents '0' with '-13828'
c Var 'aux2365' direct represents '1' with '13828'
c Var 'aux2365' order represents '1' with '1'
c Var 'aux2365' order represents '0' with '-13828'
c Encoding variable: aux2366 with domain: bool (representing constraint (1<=(aux1020 + aux1023 + aux1024)))
c Var 'aux2366' direct represents '0' with '-13829'
c Var 'aux2366' direct represents '1' with '13829'
c Var 'aux2366' order represents '1' with '1'
c Var 'aux2366' order represents '0' with '-13829'
c Encoding variable: aux2367 with domain: bool (representing constraint ((aux1026 + aux1029 + aux1030)<=1))
c Var 'aux2367' direct represents '0' with '-13830'
c Var 'aux2367' direct represents '1' with '13830'
c Var 'aux2367' order represents '1' with '1'
c Var 'aux2367' order represents '0' with '-13830'
c Encoding variable: aux2368 with domain: bool (representing constraint (1<=(aux1026 + aux1029 + aux1030)))
c Var 'aux2368' direct represents '0' with '-13831'
c Var 'aux2368' direct represents '1' with '13831'
c Var 'aux2368' order represents '1' with '1'
c Var 'aux2368' order represents '0' with '-13831'
c Encoding variable: aux2369 with domain: bool (representing constraint ((aux1032 + aux1035 + aux1036)<=1))
c Var 'aux2369' direct represents '0' with '-13832'
c Var 'aux2369' direct represents '1' with '13832'
c Var 'aux2369' order represents '1' with '1'
c Var 'aux2369' order represents '0' with '-13832'
c Encoding variable: aux2370 with domain: bool (representing constraint (1<=(aux1032 + aux1035 + aux1036)))
c Var 'aux2370' direct represents '0' with '-13833'
c Var 'aux2370' direct represents '1' with '13833'
c Var 'aux2370' order represents '1' with '1'
c Var 'aux2370' order represents '0' with '-13833'
c Encoding variable: aux2371 with domain: bool (representing constraint ((aux1038 + aux1041 + aux1042)<=1))
c Var 'aux2371' direct represents '0' with '-13834'
c Var 'aux2371' direct represents '1' with '13834'
c Var 'aux2371' order represents '1' with '1'
c Var 'aux2371' order represents '0' with '-13834'
c Encoding variable: aux2372 with domain: bool (representing constraint (1<=(aux1038 + aux1041 + aux1042)))
c Var 'aux2372' direct represents '0' with '-13835'
c Var 'aux2372' direct represents '1' with '13835'
c Var 'aux2372' order represents '1' with '1'
c Var 'aux2372' order represents '0' with '-13835'
c Encoding variable: aux2373 with domain: bool (representing constraint ((aux1044 + aux1047 + aux1048)<=1))
c Var 'aux2373' direct represents '0' with '-13836'
c Var 'aux2373' direct represents '1' with '13836'
c Var 'aux2373' order represents '1' with '1'
c Var 'aux2373' order represents '0' with '-13836'
c Encoding variable: aux2374 with domain: bool (representing constraint (1<=(aux1044 + aux1047 + aux1048)))
c Var 'aux2374' direct represents '0' with '-13837'
c Var 'aux2374' direct represents '1' with '13837'
c Var 'aux2374' order represents '1' with '1'
c Var 'aux2374' order represents '0' with '-13837'
c Encoding variable: aux2375 with domain: bool (representing constraint ((aux1050 + aux1053 + aux1054)<=1))
c Var 'aux2375' direct represents '0' with '-13838'
c Var 'aux2375' direct represents '1' with '13838'
c Var 'aux2375' order represents '1' with '1'
c Var 'aux2375' order represents '0' with '-13838'
c Encoding variable: aux2376 with domain: bool (representing constraint (1<=(aux1050 + aux1053 + aux1054)))
c Var 'aux2376' direct represents '0' with '-13839'
c Var 'aux2376' direct represents '1' with '13839'
c Var 'aux2376' order represents '1' with '1'
c Var 'aux2376' order represents '0' with '-13839'
c Encoding variable: aux2377 with domain: bool (representing constraint ((aux1056 + aux1059 + aux1060)<=1))
c Var 'aux2377' direct represents '0' with '-13840'
c Var 'aux2377' direct represents '1' with '13840'
c Var 'aux2377' order represents '1' with '1'
c Var 'aux2377' order represents '0' with '-13840'
c Encoding variable: aux2378 with domain: bool (representing constraint (1<=(aux1056 + aux1059 + aux1060)))
c Var 'aux2378' direct represents '0' with '-13841'
c Var 'aux2378' direct represents '1' with '13841'
c Var 'aux2378' order represents '1' with '1'
c Var 'aux2378' order represents '0' with '-13841'
c Encoding variable: aux2379 with domain: bool (representing constraint ((aux1062 + aux1065 + aux1066)<=1))
c Var 'aux2379' direct represents '0' with '-13842'
c Var 'aux2379' direct represents '1' with '13842'
c Var 'aux2379' order represents '1' with '1'
c Var 'aux2379' order represents '0' with '-13842'
c Encoding variable: aux2380 with domain: bool (representing constraint (1<=(aux1062 + aux1065 + aux1066)))
c Var 'aux2380' direct represents '0' with '-13843'
c Var 'aux2380' direct represents '1' with '13843'
c Var 'aux2380' order represents '1' with '1'
c Var 'aux2380' order represents '0' with '-13843'
c Encoding variable: aux2381 with domain: bool (representing constraint ((aux1068 + aux1071 + aux1072)<=1))
c Var 'aux2381' direct represents '0' with '-13844'
c Var 'aux2381' direct represents '1' with '13844'
c Var 'aux2381' order represents '1' with '1'
c Var 'aux2381' order represents '0' with '-13844'
c Encoding variable: aux2382 with domain: bool (representing constraint (1<=(aux1068 + aux1071 + aux1072)))
c Var 'aux2382' direct represents '0' with '-13845'
c Var 'aux2382' direct represents '1' with '13845'
c Var 'aux2382' order represents '1' with '1'
c Var 'aux2382' order represents '0' with '-13845'
c Encoding variable: aux2383 with domain: bool (representing constraint ((aux1074 + aux1077 + aux1078)<=1))
c Var 'aux2383' direct represents '0' with '-13846'
c Var 'aux2383' direct represents '1' with '13846'
c Var 'aux2383' order represents '1' with '1'
c Var 'aux2383' order represents '0' with '-13846'
c Encoding variable: aux2384 with domain: bool (representing constraint (1<=(aux1074 + aux1077 + aux1078)))
c Var 'aux2384' direct represents '0' with '-13847'
c Var 'aux2384' direct represents '1' with '13847'
c Var 'aux2384' order represents '1' with '1'
c Var 'aux2384' order represents '0' with '-13847'
c Encoding variable: aux2385 with domain: bool (representing constraint ((aux1080 + aux1083 + aux1084)<=1))
c Var 'aux2385' direct represents '0' with '-13848'
c Var 'aux2385' direct represents '1' with '13848'
c Var 'aux2385' order represents '1' with '1'
c Var 'aux2385' order represents '0' with '-13848'
c Encoding variable: aux2386 with domain: bool (representing constraint (1<=(aux1080 + aux1083 + aux1084)))
c Var 'aux2386' direct represents '0' with '-13849'
c Var 'aux2386' direct represents '1' with '13849'
c Var 'aux2386' order represents '1' with '1'
c Var 'aux2386' order represents '0' with '-13849'
c Encoding variable: aux2387 with domain: bool (representing constraint ((aux1086 + aux1089 + aux1090)<=1))
c Var 'aux2387' direct represents '0' with '-13850'
c Var 'aux2387' direct represents '1' with '13850'
c Var 'aux2387' order represents '1' with '1'
c Var 'aux2387' order represents '0' with '-13850'
c Encoding variable: aux2388 with domain: bool (representing constraint (1<=(aux1086 + aux1089 + aux1090)))
c Var 'aux2388' direct represents '0' with '-13851'
c Var 'aux2388' direct represents '1' with '13851'
c Var 'aux2388' order represents '1' with '1'
c Var 'aux2388' order represents '0' with '-13851'
c Encoding variable: aux2389 with domain: bool (representing constraint ((aux1092 + aux1095 + aux1096)<=1))
c Var 'aux2389' direct represents '0' with '-13852'
c Var 'aux2389' direct represents '1' with '13852'
c Var 'aux2389' order represents '1' with '1'
c Var 'aux2389' order represents '0' with '-13852'
c Encoding variable: aux2390 with domain: bool (representing constraint (1<=(aux1092 + aux1095 + aux1096)))
c Var 'aux2390' direct represents '0' with '-13853'
c Var 'aux2390' direct represents '1' with '13853'
c Var 'aux2390' order represents '1' with '1'
c Var 'aux2390' order represents '0' with '-13853'
c Encoding variable: aux2391 with domain: bool (representing constraint ((aux1098 + aux1101 + aux1102)<=1))
c Var 'aux2391' direct represents '0' with '-13854'
c Var 'aux2391' direct represents '1' with '13854'
c Var 'aux2391' order represents '1' with '1'
c Var 'aux2391' order represents '0' with '-13854'
c Encoding variable: aux2392 with domain: bool (representing constraint (1<=(aux1098 + aux1101 + aux1102)))
c Var 'aux2392' direct represents '0' with '-13855'
c Var 'aux2392' direct represents '1' with '13855'
c Var 'aux2392' order represents '1' with '1'
c Var 'aux2392' order represents '0' with '-13855'
c Encoding variable: aux2393 with domain: bool (representing constraint ((aux1104 + aux1107 + aux1108)<=1))
c Var 'aux2393' direct represents '0' with '-13856'
c Var 'aux2393' direct represents '1' with '13856'
c Var 'aux2393' order represents '1' with '1'
c Var 'aux2393' order represents '0' with '-13856'
c Encoding variable: aux2394 with domain: bool (representing constraint (1<=(aux1104 + aux1107 + aux1108)))
c Var 'aux2394' direct represents '0' with '-13857'
c Var 'aux2394' direct represents '1' with '13857'
c Var 'aux2394' order represents '1' with '1'
c Var 'aux2394' order represents '0' with '-13857'
c Encoding variable: aux2395 with domain: bool (representing constraint ((aux1110 + aux1113 + aux1114)<=1))
c Var 'aux2395' direct represents '0' with '-13858'
c Var 'aux2395' direct represents '1' with '13858'
c Var 'aux2395' order represents '1' with '1'
c Var 'aux2395' order represents '0' with '-13858'
c Encoding variable: aux2396 with domain: bool (representing constraint (1<=(aux1110 + aux1113 + aux1114)))
c Var 'aux2396' direct represents '0' with '-13859'
c Var 'aux2396' direct represents '1' with '13859'
c Var 'aux2396' order represents '1' with '1'
c Var 'aux2396' order represents '0' with '-13859'
c Encoding variable: aux2397 with domain: bool (representing constraint ((aux1116 + aux1119 + aux1120)<=1))
c Var 'aux2397' direct represents '0' with '-13860'
c Var 'aux2397' direct represents '1' with '13860'
c Var 'aux2397' order represents '1' with '1'
c Var 'aux2397' order represents '0' with '-13860'
c Encoding variable: aux2398 with domain: bool (representing constraint (1<=(aux1116 + aux1119 + aux1120)))
c Var 'aux2398' direct represents '0' with '-13861'
c Var 'aux2398' direct represents '1' with '13861'
c Var 'aux2398' order represents '1' with '1'
c Var 'aux2398' order represents '0' with '-13861'
c Encoding variable: aux2399 with domain: bool (representing constraint ((aux1122 + aux1125 + aux1126)<=1))
c Var 'aux2399' direct represents '0' with '-13862'
c Var 'aux2399' direct represents '1' with '13862'
c Var 'aux2399' order represents '1' with '1'
c Var 'aux2399' order represents '0' with '-13862'
c Encoding variable: aux2400 with domain: bool (representing constraint (1<=(aux1122 + aux1125 + aux1126)))
c Var 'aux2400' direct represents '0' with '-13863'
c Var 'aux2400' direct represents '1' with '13863'
c Var 'aux2400' order represents '1' with '1'
c Var 'aux2400' order represents '0' with '-13863'
c Encoding variable: aux2401 with domain: bool (representing constraint ((aux1128 + aux1131 + aux1132)<=1))
c Var 'aux2401' direct represents '0' with '-13864'
c Var 'aux2401' direct represents '1' with '13864'
c Var 'aux2401' order represents '1' with '1'
c Var 'aux2401' order represents '0' with '-13864'
c Encoding variable: aux2402 with domain: bool (representing constraint (1<=(aux1128 + aux1131 + aux1132)))
c Var 'aux2402' direct represents '0' with '-13865'
c Var 'aux2402' direct represents '1' with '13865'
c Var 'aux2402' order represents '1' with '1'
c Var 'aux2402' order represents '0' with '-13865'
c Encoding variable: aux2403 with domain: bool (representing constraint ((aux1134 + aux1137 + aux1138)<=1))
c Var 'aux2403' direct represents '0' with '-13866'
c Var 'aux2403' direct represents '1' with '13866'
c Var 'aux2403' order represents '1' with '1'
c Var 'aux2403' order represents '0' with '-13866'
c Encoding variable: aux2404 with domain: bool (representing constraint (1<=(aux1134 + aux1137 + aux1138)))
c Var 'aux2404' direct represents '0' with '-13867'
c Var 'aux2404' direct represents '1' with '13867'
c Var 'aux2404' order represents '1' with '1'
c Var 'aux2404' order represents '0' with '-13867'
c Encoding variable: aux2405 with domain: bool (representing constraint ((aux1140 + aux1143 + aux1144)<=1))
c Var 'aux2405' direct represents '0' with '-13868'
c Var 'aux2405' direct represents '1' with '13868'
c Var 'aux2405' order represents '1' with '1'
c Var 'aux2405' order represents '0' with '-13868'
c Encoding variable: aux2406 with domain: bool (representing constraint (1<=(aux1140 + aux1143 + aux1144)))
c Var 'aux2406' direct represents '0' with '-13869'
c Var 'aux2406' direct represents '1' with '13869'
c Var 'aux2406' order represents '1' with '1'
c Var 'aux2406' order represents '0' with '-13869'
c Encoding variable: aux2407 with domain: bool (representing constraint ((aux1146 + aux1149 + aux1150)<=1))
c Var 'aux2407' direct represents '0' with '-13870'
c Var 'aux2407' direct represents '1' with '13870'
c Var 'aux2407' order represents '1' with '1'
c Var 'aux2407' order represents '0' with '-13870'
c Encoding variable: aux2408 with domain: bool (representing constraint (1<=(aux1146 + aux1149 + aux1150)))
c Var 'aux2408' direct represents '0' with '-13871'
c Var 'aux2408' direct represents '1' with '13871'
c Var 'aux2408' order represents '1' with '1'
c Var 'aux2408' order represents '0' with '-13871'
c Encoding variable: aux2409 with domain: bool (representing constraint ((aux1152 + aux1155 + aux1156)<=1))
c Var 'aux2409' direct represents '0' with '-13872'
c Var 'aux2409' direct represents '1' with '13872'
c Var 'aux2409' order represents '1' with '1'
c Var 'aux2409' order represents '0' with '-13872'
c Encoding variable: aux2410 with domain: bool (representing constraint (1<=(aux1152 + aux1155 + aux1156)))
c Var 'aux2410' direct represents '0' with '-13873'
c Var 'aux2410' direct represents '1' with '13873'
c Var 'aux2410' order represents '1' with '1'
c Var 'aux2410' order represents '0' with '-13873'
c Encoding variable: aux2411 with domain: bool (representing constraint ((aux1158 + aux1161 + aux1162)<=1))
c Var 'aux2411' direct represents '0' with '-13874'
c Var 'aux2411' direct represents '1' with '13874'
c Var 'aux2411' order represents '1' with '1'
c Var 'aux2411' order represents '0' with '-13874'
c Encoding variable: aux2412 with domain: bool (representing constraint (1<=(aux1158 + aux1161 + aux1162)))
c Var 'aux2412' direct represents '0' with '-13875'
c Var 'aux2412' direct represents '1' with '13875'
c Var 'aux2412' order represents '1' with '1'
c Var 'aux2412' order represents '0' with '-13875'
c Encoding variable: aux2413 with domain: bool (representing constraint ((aux1164 + aux1167 + aux1168)<=1))
c Var 'aux2413' direct represents '0' with '-13876'
c Var 'aux2413' direct represents '1' with '13876'
c Var 'aux2413' order represents '1' with '1'
c Var 'aux2413' order represents '0' with '-13876'
c Encoding variable: aux2414 with domain: bool (representing constraint (1<=(aux1164 + aux1167 + aux1168)))
c Var 'aux2414' direct represents '0' with '-13877'
c Var 'aux2414' direct represents '1' with '13877'
c Var 'aux2414' order represents '1' with '1'
c Var 'aux2414' order represents '0' with '-13877'
c Encoding variable: aux2415 with domain: bool (representing constraint ((aux1170 + aux1173 + aux1174)<=1))
c Var 'aux2415' direct represents '0' with '-13878'
c Var 'aux2415' direct represents '1' with '13878'
c Var 'aux2415' order represents '1' with '1'
c Var 'aux2415' order represents '0' with '-13878'
c Encoding variable: aux2416 with domain: bool (representing constraint (1<=(aux1170 + aux1173 + aux1174)))
c Var 'aux2416' direct represents '0' with '-13879'
c Var 'aux2416' direct represents '1' with '13879'
c Var 'aux2416' order represents '1' with '1'
c Var 'aux2416' order represents '0' with '-13879'
c Encoding variable: aux2417 with domain: bool (representing constraint ((aux1176 + aux1179 + aux1180)<=1))
c Var 'aux2417' direct represents '0' with '-13880'
c Var 'aux2417' direct represents '1' with '13880'
c Var 'aux2417' order represents '1' with '1'
c Var 'aux2417' order represents '0' with '-13880'
c Encoding variable: aux2418 with domain: bool (representing constraint (1<=(aux1176 + aux1179 + aux1180)))
c Var 'aux2418' direct represents '0' with '-13881'
c Var 'aux2418' direct represents '1' with '13881'
c Var 'aux2418' order represents '1' with '1'
c Var 'aux2418' order represents '0' with '-13881'
c Encoding variable: aux2419 with domain: bool (representing constraint ((aux1182 + aux1185 + aux1186)<=1))
c Var 'aux2419' direct represents '0' with '-13882'
c Var 'aux2419' direct represents '1' with '13882'
c Var 'aux2419' order represents '1' with '1'
c Var 'aux2419' order represents '0' with '-13882'
c Encoding variable: aux2420 with domain: bool (representing constraint (1<=(aux1182 + aux1185 + aux1186)))
c Var 'aux2420' direct represents '0' with '-13883'
c Var 'aux2420' direct represents '1' with '13883'
c Var 'aux2420' order represents '1' with '1'
c Var 'aux2420' order represents '0' with '-13883'
c Encoding variable: aux2421 with domain: bool (representing constraint ((aux1188 + aux1191 + aux1192)<=1))
c Var 'aux2421' direct represents '0' with '-13884'
c Var 'aux2421' direct represents '1' with '13884'
c Var 'aux2421' order represents '1' with '1'
c Var 'aux2421' order represents '0' with '-13884'
c Encoding variable: aux2422 with domain: bool (representing constraint (1<=(aux1188 + aux1191 + aux1192)))
c Var 'aux2422' direct represents '0' with '-13885'
c Var 'aux2422' direct represents '1' with '13885'
c Var 'aux2422' order represents '1' with '1'
c Var 'aux2422' order represents '0' with '-13885'
c Encoding variable: aux2423 with domain: bool (representing constraint ((aux1194 + aux1197 + aux1198)<=1))
c Var 'aux2423' direct represents '0' with '-13886'
c Var 'aux2423' direct represents '1' with '13886'
c Var 'aux2423' order represents '1' with '1'
c Var 'aux2423' order represents '0' with '-13886'
c Encoding variable: aux2424 with domain: bool (representing constraint (1<=(aux1194 + aux1197 + aux1198)))
c Var 'aux2424' direct represents '0' with '-13887'
c Var 'aux2424' direct represents '1' with '13887'
c Var 'aux2424' order represents '1' with '1'
c Var 'aux2424' order represents '0' with '-13887'
c Encoding variable: aux2425 with domain: bool (representing constraint ((aux1200 + aux1203 + aux1204)<=1))
c Var 'aux2425' direct represents '0' with '-13888'
c Var 'aux2425' direct represents '1' with '13888'
c Var 'aux2425' order represents '1' with '1'
c Var 'aux2425' order represents '0' with '-13888'
c Encoding variable: aux2426 with domain: bool (representing constraint (1<=(aux1200 + aux1203 + aux1204)))
c Var 'aux2426' direct represents '0' with '-13889'
c Var 'aux2426' direct represents '1' with '13889'
c Var 'aux2426' order represents '1' with '1'
c Var 'aux2426' order represents '0' with '-13889'
c Encoding variable: aux2427 with domain: bool (representing constraint ((aux1206 + aux1209 + aux1210)<=1))
c Var 'aux2427' direct represents '0' with '-13890'
c Var 'aux2427' direct represents '1' with '13890'
c Var 'aux2427' order represents '1' with '1'
c Var 'aux2427' order represents '0' with '-13890'
c Encoding variable: aux2428 with domain: bool (representing constraint (1<=(aux1206 + aux1209 + aux1210)))
c Var 'aux2428' direct represents '0' with '-13891'
c Var 'aux2428' direct represents '1' with '13891'
c Var 'aux2428' order represents '1' with '1'
c Var 'aux2428' order represents '0' with '-13891'
c Encoding variable: aux2429 with domain: bool (representing constraint ((aux1212 + aux1215 + aux1216)<=1))
c Var 'aux2429' direct represents '0' with '-13892'
c Var 'aux2429' direct represents '1' with '13892'
c Var 'aux2429' order represents '1' with '1'
c Var 'aux2429' order represents '0' with '-13892'
c Encoding variable: aux2430 with domain: bool (representing constraint (1<=(aux1212 + aux1215 + aux1216)))
c Var 'aux2430' direct represents '0' with '-13893'
c Var 'aux2430' direct represents '1' with '13893'
c Var 'aux2430' order represents '1' with '1'
c Var 'aux2430' order represents '0' with '-13893'
c Encoding variable: aux2431 with domain: bool (representing constraint ((aux1218 + aux1221 + aux1222)<=1))
c Var 'aux2431' direct represents '0' with '-13894'
c Var 'aux2431' direct represents '1' with '13894'
c Var 'aux2431' order represents '1' with '1'
c Var 'aux2431' order represents '0' with '-13894'
c Encoding variable: aux2432 with domain: bool (representing constraint (1<=(aux1218 + aux1221 + aux1222)))
c Var 'aux2432' direct represents '0' with '-13895'
c Var 'aux2432' direct represents '1' with '13895'
c Var 'aux2432' order represents '1' with '1'
c Var 'aux2432' order represents '0' with '-13895'
c Encoding variable: aux2433 with domain: bool (representing constraint ((aux1224 + aux1227 + aux1228)<=1))
c Var 'aux2433' direct represents '0' with '-13896'
c Var 'aux2433' direct represents '1' with '13896'
c Var 'aux2433' order represents '1' with '1'
c Var 'aux2433' order represents '0' with '-13896'
c Encoding variable: aux2434 with domain: bool (representing constraint (1<=(aux1224 + aux1227 + aux1228)))
c Var 'aux2434' direct represents '0' with '-13897'
c Var 'aux2434' direct represents '1' with '13897'
c Var 'aux2434' order represents '1' with '1'
c Var 'aux2434' order represents '0' with '-13897'
c Encoding variable: aux2435 with domain: bool (representing constraint ((aux1230 + aux1233 + aux1234)<=1))
c Var 'aux2435' direct represents '0' with '-13898'
c Var 'aux2435' direct represents '1' with '13898'
c Var 'aux2435' order represents '1' with '1'
c Var 'aux2435' order represents '0' with '-13898'
c Encoding variable: aux2436 with domain: bool (representing constraint (1<=(aux1230 + aux1233 + aux1234)))
c Var 'aux2436' direct represents '0' with '-13899'
c Var 'aux2436' direct represents '1' with '13899'
c Var 'aux2436' order represents '1' with '1'
c Var 'aux2436' order represents '0' with '-13899'
c Encoding variable: aux2437 with domain: bool (representing constraint ((aux1236 + aux1239 + aux1240)<=1))
c Var 'aux2437' direct represents '0' with '-13900'
c Var 'aux2437' direct represents '1' with '13900'
c Var 'aux2437' order represents '1' with '1'
c Var 'aux2437' order represents '0' with '-13900'
c Encoding variable: aux2438 with domain: bool (representing constraint (1<=(aux1236 + aux1239 + aux1240)))
c Var 'aux2438' direct represents '0' with '-13901'
c Var 'aux2438' direct represents '1' with '13901'
c Var 'aux2438' order represents '1' with '1'
c Var 'aux2438' order represents '0' with '-13901'
c Encoding variable: aux2439 with domain: bool (representing constraint ((aux1242 + aux1245 + aux1246)<=1))
c Var 'aux2439' direct represents '0' with '-13902'
c Var 'aux2439' direct represents '1' with '13902'
c Var 'aux2439' order represents '1' with '1'
c Var 'aux2439' order represents '0' with '-13902'
c Encoding variable: aux2440 with domain: bool (representing constraint (1<=(aux1242 + aux1245 + aux1246)))
c Var 'aux2440' direct represents '0' with '-13903'
c Var 'aux2440' direct represents '1' with '13903'
c Var 'aux2440' order represents '1' with '1'
c Var 'aux2440' order represents '0' with '-13903'
c Encoding variable: aux2441 with domain: bool (representing constraint ((aux1248 + aux1251 + aux1252)<=1))
c Var 'aux2441' direct represents '0' with '-13904'
c Var 'aux2441' direct represents '1' with '13904'
c Var 'aux2441' order represents '1' with '1'
c Var 'aux2441' order represents '0' with '-13904'
c Encoding variable: aux2442 with domain: bool (representing constraint (1<=(aux1248 + aux1251 + aux1252)))
c Var 'aux2442' direct represents '0' with '-13905'
c Var 'aux2442' direct represents '1' with '13905'
c Var 'aux2442' order represents '1' with '1'
c Var 'aux2442' order represents '0' with '-13905'
c Encoding variable: aux2443 with domain: bool (representing constraint ((aux1254 + aux1257 + aux1258)<=1))
c Var 'aux2443' direct represents '0' with '-13906'
c Var 'aux2443' direct represents '1' with '13906'
c Var 'aux2443' order represents '1' with '1'
c Var 'aux2443' order represents '0' with '-13906'
c Encoding variable: aux2444 with domain: bool (representing constraint (1<=(aux1254 + aux1257 + aux1258)))
c Var 'aux2444' direct represents '0' with '-13907'
c Var 'aux2444' direct represents '1' with '13907'
c Var 'aux2444' order represents '1' with '1'
c Var 'aux2444' order represents '0' with '-13907'
c Encoding variable: aux2445 with domain: bool (representing constraint ((aux1260 + aux1263 + aux1264)<=1))
c Var 'aux2445' direct represents '0' with '-13908'
c Var 'aux2445' direct represents '1' with '13908'
c Var 'aux2445' order represents '1' with '1'
c Var 'aux2445' order represents '0' with '-13908'
c Encoding variable: aux2446 with domain: bool (representing constraint (1<=(aux1260 + aux1263 + aux1264)))
c Var 'aux2446' direct represents '0' with '-13909'
c Var 'aux2446' direct represents '1' with '13909'
c Var 'aux2446' order represents '1' with '1'
c Var 'aux2446' order represents '0' with '-13909'
c Encoding variable: aux2447 with domain: bool (representing constraint ((aux1266 + aux1269 + aux1270)<=1))
c Var 'aux2447' direct represents '0' with '-13910'
c Var 'aux2447' direct represents '1' with '13910'
c Var 'aux2447' order represents '1' with '1'
c Var 'aux2447' order represents '0' with '-13910'
c Encoding variable: aux2448 with domain: bool (representing constraint (1<=(aux1266 + aux1269 + aux1270)))
c Var 'aux2448' direct represents '0' with '-13911'
c Var 'aux2448' direct represents '1' with '13911'
c Var 'aux2448' order represents '1' with '1'
c Var 'aux2448' order represents '0' with '-13911'
c Encoding variable: aux2449 with domain: bool (representing constraint ((aux1272 + aux1275 + aux1276)<=1))
c Var 'aux2449' direct represents '0' with '-13912'
c Var 'aux2449' direct represents '1' with '13912'
c Var 'aux2449' order represents '1' with '1'
c Var 'aux2449' order represents '0' with '-13912'
c Encoding variable: aux2450 with domain: bool (representing constraint (1<=(aux1272 + aux1275 + aux1276)))
c Var 'aux2450' direct represents '0' with '-13913'
c Var 'aux2450' direct represents '1' with '13913'
c Var 'aux2450' order represents '1' with '1'
c Var 'aux2450' order represents '0' with '-13913'
c Encoding variable: aux2451 with domain: bool (representing constraint ((aux1278 + aux1281 + aux1282)<=1))
c Var 'aux2451' direct represents '0' with '-13914'
c Var 'aux2451' direct represents '1' with '13914'
c Var 'aux2451' order represents '1' with '1'
c Var 'aux2451' order represents '0' with '-13914'
c Encoding variable: aux2452 with domain: bool (representing constraint (1<=(aux1278 + aux1281 + aux1282)))
c Var 'aux2452' direct represents '0' with '-13915'
c Var 'aux2452' direct represents '1' with '13915'
c Var 'aux2452' order represents '1' with '1'
c Var 'aux2452' order represents '0' with '-13915'
c Encoding variable: aux2453 with domain: bool (representing constraint ((aux1284 + aux1287 + aux1288)<=1))
c Var 'aux2453' direct represents '0' with '-13916'
c Var 'aux2453' direct represents '1' with '13916'
c Var 'aux2453' order represents '1' with '1'
c Var 'aux2453' order represents '0' with '-13916'
c Encoding variable: aux2454 with domain: bool (representing constraint (1<=(aux1284 + aux1287 + aux1288)))
c Var 'aux2454' direct represents '0' with '-13917'
c Var 'aux2454' direct represents '1' with '13917'
c Var 'aux2454' order represents '1' with '1'
c Var 'aux2454' order represents '0' with '-13917'
c Encoding variable: aux2455 with domain: bool (representing constraint ((aux1290 + aux1293 + aux1294)<=1))
c Var 'aux2455' direct represents '0' with '-13918'
c Var 'aux2455' direct represents '1' with '13918'
c Var 'aux2455' order represents '1' with '1'
c Var 'aux2455' order represents '0' with '-13918'
c Encoding variable: aux2456 with domain: bool (representing constraint (1<=(aux1290 + aux1293 + aux1294)))
c Var 'aux2456' direct represents '0' with '-13919'
c Var 'aux2456' direct represents '1' with '13919'
c Var 'aux2456' order represents '1' with '1'
c Var 'aux2456' order represents '0' with '-13919'
c Encoding variable: aux2457 with domain: bool (representing constraint ((aux1296 + aux1299 + aux1300)<=1))
c Var 'aux2457' direct represents '0' with '-13920'
c Var 'aux2457' direct represents '1' with '13920'
c Var 'aux2457' order represents '1' with '1'
c Var 'aux2457' order represents '0' with '-13920'
c Encoding variable: aux2458 with domain: bool (representing constraint (1<=(aux1296 + aux1299 + aux1300)))
c Var 'aux2458' direct represents '0' with '-13921'
c Var 'aux2458' direct represents '1' with '13921'
c Var 'aux2458' order represents '1' with '1'
c Var 'aux2458' order represents '0' with '-13921'
c Encoding variable: aux2459 with domain: bool (representing constraint ((aux1302 + aux1305 + aux1306)<=1))
c Var 'aux2459' direct represents '0' with '-13922'
c Var 'aux2459' direct represents '1' with '13922'
c Var 'aux2459' order represents '1' with '1'
c Var 'aux2459' order represents '0' with '-13922'
c Encoding variable: aux2460 with domain: bool (representing constraint (1<=(aux1302 + aux1305 + aux1306)))
c Var 'aux2460' direct represents '0' with '-13923'
c Var 'aux2460' direct represents '1' with '13923'
c Var 'aux2460' order represents '1' with '1'
c Var 'aux2460' order represents '0' with '-13923'
c Encoding variable: aux2461 with domain: bool (representing constraint ((aux1308 + aux1311 + aux1312)<=1))
c Var 'aux2461' direct represents '0' with '-13924'
c Var 'aux2461' direct represents '1' with '13924'
c Var 'aux2461' order represents '1' with '1'
c Var 'aux2461' order represents '0' with '-13924'
c Encoding variable: aux2462 with domain: bool (representing constraint (1<=(aux1308 + aux1311 + aux1312)))
c Var 'aux2462' direct represents '0' with '-13925'
c Var 'aux2462' direct represents '1' with '13925'
c Var 'aux2462' order represents '1' with '1'
c Var 'aux2462' order represents '0' with '-13925'
c Encoding variable: aux2463 with domain: bool (representing constraint ((aux1314 + aux1317 + aux1318)<=1))
c Var 'aux2463' direct represents '0' with '-13926'
c Var 'aux2463' direct represents '1' with '13926'
c Var 'aux2463' order represents '1' with '1'
c Var 'aux2463' order represents '0' with '-13926'
c Encoding variable: aux2464 with domain: bool (representing constraint (1<=(aux1314 + aux1317 + aux1318)))
c Var 'aux2464' direct represents '0' with '-13927'
c Var 'aux2464' direct represents '1' with '13927'
c Var 'aux2464' order represents '1' with '1'
c Var 'aux2464' order represents '0' with '-13927'
c Encoding variable: aux2465 with domain: bool (representing constraint ((aux1320 + aux1323 + aux1324)<=1))
c Var 'aux2465' direct represents '0' with '-13928'
c Var 'aux2465' direct represents '1' with '13928'
c Var 'aux2465' order represents '1' with '1'
c Var 'aux2465' order represents '0' with '-13928'
c Encoding variable: aux2466 with domain: bool (representing constraint (1<=(aux1320 + aux1323 + aux1324)))
c Var 'aux2466' direct represents '0' with '-13929'
c Var 'aux2466' direct represents '1' with '13929'
c Var 'aux2466' order represents '1' with '1'
c Var 'aux2466' order represents '0' with '-13929'
c Encoding variable: aux2467 with domain: bool (representing constraint ((aux1326 + aux1329 + aux1330)<=1))
c Var 'aux2467' direct represents '0' with '-13930'
c Var 'aux2467' direct represents '1' with '13930'
c Var 'aux2467' order represents '1' with '1'
c Var 'aux2467' order represents '0' with '-13930'
c Encoding variable: aux2468 with domain: bool (representing constraint (1<=(aux1326 + aux1329 + aux1330)))
c Var 'aux2468' direct represents '0' with '-13931'
c Var 'aux2468' direct represents '1' with '13931'
c Var 'aux2468' order represents '1' with '1'
c Var 'aux2468' order represents '0' with '-13931'
c Encoding variable: aux2469 with domain: bool (representing constraint ((aux1332 + aux1335 + aux1336)<=1))
c Var 'aux2469' direct represents '0' with '-13932'
c Var 'aux2469' direct represents '1' with '13932'
c Var 'aux2469' order represents '1' with '1'
c Var 'aux2469' order represents '0' with '-13932'
c Encoding variable: aux2470 with domain: bool (representing constraint (1<=(aux1332 + aux1335 + aux1336)))
c Var 'aux2470' direct represents '0' with '-13933'
c Var 'aux2470' direct represents '1' with '13933'
c Var 'aux2470' order represents '1' with '1'
c Var 'aux2470' order represents '0' with '-13933'
c Encoding variable: aux2471 with domain: bool (representing constraint ((aux1338 + aux1341 + aux1342)<=1))
c Var 'aux2471' direct represents '0' with '-13934'
c Var 'aux2471' direct represents '1' with '13934'
c Var 'aux2471' order represents '1' with '1'
c Var 'aux2471' order represents '0' with '-13934'
c Encoding variable: aux2472 with domain: bool (representing constraint (1<=(aux1338 + aux1341 + aux1342)))
c Var 'aux2472' direct represents '0' with '-13935'
c Var 'aux2472' direct represents '1' with '13935'
c Var 'aux2472' order represents '1' with '1'
c Var 'aux2472' order represents '0' with '-13935'
c Encoding variable: aux2473 with domain: bool (representing constraint ((aux1344 + aux1347 + aux1348)<=1))
c Var 'aux2473' direct represents '0' with '-13936'
c Var 'aux2473' direct represents '1' with '13936'
c Var 'aux2473' order represents '1' with '1'
c Var 'aux2473' order represents '0' with '-13936'
c Encoding variable: aux2474 with domain: bool (representing constraint (1<=(aux1344 + aux1347 + aux1348)))
c Var 'aux2474' direct represents '0' with '-13937'
c Var 'aux2474' direct represents '1' with '13937'
c Var 'aux2474' order represents '1' with '1'
c Var 'aux2474' order represents '0' with '-13937'
c Encoding variable: aux2475 with domain: bool (representing constraint ((aux1350 + aux1353 + aux1354)<=1))
c Var 'aux2475' direct represents '0' with '-13938'
c Var 'aux2475' direct represents '1' with '13938'
c Var 'aux2475' order represents '1' with '1'
c Var 'aux2475' order represents '0' with '-13938'
c Encoding variable: aux2476 with domain: bool (representing constraint (1<=(aux1350 + aux1353 + aux1354)))
c Var 'aux2476' direct represents '0' with '-13939'
c Var 'aux2476' direct represents '1' with '13939'
c Var 'aux2476' order represents '1' with '1'
c Var 'aux2476' order represents '0' with '-13939'
c Encoding variable: aux2477 with domain: bool (representing constraint ((aux1356 + aux1359 + aux1360)<=1))
c Var 'aux2477' direct represents '0' with '-13940'
c Var 'aux2477' direct represents '1' with '13940'
c Var 'aux2477' order represents '1' with '1'
c Var 'aux2477' order represents '0' with '-13940'
c Encoding variable: aux2478 with domain: bool (representing constraint (1<=(aux1356 + aux1359 + aux1360)))
c Var 'aux2478' direct represents '0' with '-13941'
c Var 'aux2478' direct represents '1' with '13941'
c Var 'aux2478' order represents '1' with '1'
c Var 'aux2478' order represents '0' with '-13941'
c Encoding variable: aux2479 with domain: bool (representing constraint ((aux1362 + aux1365 + aux1366)<=1))
c Var 'aux2479' direct represents '0' with '-13942'
c Var 'aux2479' direct represents '1' with '13942'
c Var 'aux2479' order represents '1' with '1'
c Var 'aux2479' order represents '0' with '-13942'
c Encoding variable: aux2480 with domain: bool (representing constraint (1<=(aux1362 + aux1365 + aux1366)))
c Var 'aux2480' direct represents '0' with '-13943'
c Var 'aux2480' direct represents '1' with '13943'
c Var 'aux2480' order represents '1' with '1'
c Var 'aux2480' order represents '0' with '-13943'
c Encoding variable: aux2481 with domain: bool (representing constraint ((aux1368 + aux1371 + aux1372)<=1))
c Var 'aux2481' direct represents '0' with '-13944'
c Var 'aux2481' direct represents '1' with '13944'
c Var 'aux2481' order represents '1' with '1'
c Var 'aux2481' order represents '0' with '-13944'
c Encoding variable: aux2482 with domain: bool (representing constraint (1<=(aux1368 + aux1371 + aux1372)))
c Var 'aux2482' direct represents '0' with '-13945'
c Var 'aux2482' direct represents '1' with '13945'
c Var 'aux2482' order represents '1' with '1'
c Var 'aux2482' order represents '0' with '-13945'
c Encoding variable: aux2483 with domain: bool (representing constraint ((aux1374 + aux1377 + aux1378)<=1))
c Var 'aux2483' direct represents '0' with '-13946'
c Var 'aux2483' direct represents '1' with '13946'
c Var 'aux2483' order represents '1' with '1'
c Var 'aux2483' order represents '0' with '-13946'
c Encoding variable: aux2484 with domain: bool (representing constraint (1<=(aux1374 + aux1377 + aux1378)))
c Var 'aux2484' direct represents '0' with '-13947'
c Var 'aux2484' direct represents '1' with '13947'
c Var 'aux2484' order represents '1' with '1'
c Var 'aux2484' order represents '0' with '-13947'
c Encoding variable: aux2485 with domain: bool (representing constraint ((aux1380 + aux1383 + aux1384)<=1))
c Var 'aux2485' direct represents '0' with '-13948'
c Var 'aux2485' direct represents '1' with '13948'
c Var 'aux2485' order represents '1' with '1'
c Var 'aux2485' order represents '0' with '-13948'
c Encoding variable: aux2486 with domain: bool (representing constraint (1<=(aux1380 + aux1383 + aux1384)))
c Var 'aux2486' direct represents '0' with '-13949'
c Var 'aux2486' direct represents '1' with '13949'
c Var 'aux2486' order represents '1' with '1'
c Var 'aux2486' order represents '0' with '-13949'
c Encoding variable: aux2487 with domain: bool (representing constraint ((aux1386 + aux1389 + aux1390)<=1))
c Var 'aux2487' direct represents '0' with '-13950'
c Var 'aux2487' direct represents '1' with '13950'
c Var 'aux2487' order represents '1' with '1'
c Var 'aux2487' order represents '0' with '-13950'
c Encoding variable: aux2488 with domain: bool (representing constraint (1<=(aux1386 + aux1389 + aux1390)))
c Var 'aux2488' direct represents '0' with '-13951'
c Var 'aux2488' direct represents '1' with '13951'
c Var 'aux2488' order represents '1' with '1'
c Var 'aux2488' order represents '0' with '-13951'
c Encoding variable: aux2489 with domain: bool (representing constraint ((aux1392 + aux1395 + aux1396)<=1))
c Var 'aux2489' direct represents '0' with '-13952'
c Var 'aux2489' direct represents '1' with '13952'
c Var 'aux2489' order represents '1' with '1'
c Var 'aux2489' order represents '0' with '-13952'
c Encoding variable: aux2490 with domain: bool (representing constraint (1<=(aux1392 + aux1395 + aux1396)))
c Var 'aux2490' direct represents '0' with '-13953'
c Var 'aux2490' direct represents '1' with '13953'
c Var 'aux2490' order represents '1' with '1'
c Var 'aux2490' order represents '0' with '-13953'
c Encoding variable: aux2491 with domain: bool (representing constraint ((aux1398 + aux1401 + aux1402)<=1))
c Var 'aux2491' direct represents '0' with '-13954'
c Var 'aux2491' direct represents '1' with '13954'
c Var 'aux2491' order represents '1' with '1'
c Var 'aux2491' order represents '0' with '-13954'
c Encoding variable: aux2492 with domain: bool (representing constraint (1<=(aux1398 + aux1401 + aux1402)))
c Var 'aux2492' direct represents '0' with '-13955'
c Var 'aux2492' direct represents '1' with '13955'
c Var 'aux2492' order represents '1' with '1'
c Var 'aux2492' order represents '0' with '-13955'
c Encoding variable: aux2493 with domain: bool (representing constraint ((aux1404 + aux1407 + aux1408)<=1))
c Var 'aux2493' direct represents '0' with '-13956'
c Var 'aux2493' direct represents '1' with '13956'
c Var 'aux2493' order represents '1' with '1'
c Var 'aux2493' order represents '0' with '-13956'
c Encoding variable: aux2494 with domain: bool (representing constraint (1<=(aux1404 + aux1407 + aux1408)))
c Var 'aux2494' direct represents '0' with '-13957'
c Var 'aux2494' direct represents '1' with '13957'
c Var 'aux2494' order represents '1' with '1'
c Var 'aux2494' order represents '0' with '-13957'
c Encoding variable: aux2495 with domain: bool (representing constraint ((aux1410 + aux1413 + aux1414)<=1))
c Var 'aux2495' direct represents '0' with '-13958'
c Var 'aux2495' direct represents '1' with '13958'
c Var 'aux2495' order represents '1' with '1'
c Var 'aux2495' order represents '0' with '-13958'
c Encoding variable: aux2496 with domain: bool (representing constraint (1<=(aux1410 + aux1413 + aux1414)))
c Var 'aux2496' direct represents '0' with '-13959'
c Var 'aux2496' direct represents '1' with '13959'
c Var 'aux2496' order represents '1' with '1'
c Var 'aux2496' order represents '0' with '-13959'
c Encoding variable: aux2497 with domain: bool (representing constraint ((aux1416 + aux1419 + aux1420)<=1))
c Var 'aux2497' direct represents '0' with '-13960'
c Var 'aux2497' direct represents '1' with '13960'
c Var 'aux2497' order represents '1' with '1'
c Var 'aux2497' order represents '0' with '-13960'
c Encoding variable: aux2498 with domain: bool (representing constraint (1<=(aux1416 + aux1419 + aux1420)))
c Var 'aux2498' direct represents '0' with '-13961'
c Var 'aux2498' direct represents '1' with '13961'
c Var 'aux2498' order represents '1' with '1'
c Var 'aux2498' order represents '0' with '-13961'
c Encoding variable: aux2499 with domain: bool (representing constraint ((aux1422 + aux1425 + aux1426)<=1))
c Var 'aux2499' direct represents '0' with '-13962'
c Var 'aux2499' direct represents '1' with '13962'
c Var 'aux2499' order represents '1' with '1'
c Var 'aux2499' order represents '0' with '-13962'
c Encoding variable: aux2500 with domain: bool (representing constraint (1<=(aux1422 + aux1425 + aux1426)))
c Var 'aux2500' direct represents '0' with '-13963'
c Var 'aux2500' direct represents '1' with '13963'
c Var 'aux2500' order represents '1' with '1'
c Var 'aux2500' order represents '0' with '-13963'
c Encoding variable: aux2501 with domain: bool (representing constraint ((aux1428 + aux1431 + aux1432)<=1))
c Var 'aux2501' direct represents '0' with '-13964'
c Var 'aux2501' direct represents '1' with '13964'
c Var 'aux2501' order represents '1' with '1'
c Var 'aux2501' order represents '0' with '-13964'
c Encoding variable: aux2502 with domain: bool (representing constraint (1<=(aux1428 + aux1431 + aux1432)))
c Var 'aux2502' direct represents '0' with '-13965'
c Var 'aux2502' direct represents '1' with '13965'
c Var 'aux2502' order represents '1' with '1'
c Var 'aux2502' order represents '0' with '-13965'
c Encoding variable: aux2503 with domain: bool (representing constraint ((aux1434 + aux1437 + aux1438)<=1))
c Var 'aux2503' direct represents '0' with '-13966'
c Var 'aux2503' direct represents '1' with '13966'
c Var 'aux2503' order represents '1' with '1'
c Var 'aux2503' order represents '0' with '-13966'
c Encoding variable: aux2504 with domain: bool (representing constraint (1<=(aux1434 + aux1437 + aux1438)))
c Var 'aux2504' direct represents '0' with '-13967'
c Var 'aux2504' direct represents '1' with '13967'
c Var 'aux2504' order represents '1' with '1'
c Var 'aux2504' order represents '0' with '-13967'
c Encoding variable: aux2505 with domain: bool (representing constraint ((aux1440 + aux1443 + aux1444)<=1))
c Var 'aux2505' direct represents '0' with '-13968'
c Var 'aux2505' direct represents '1' with '13968'
c Var 'aux2505' order represents '1' with '1'
c Var 'aux2505' order represents '0' with '-13968'
c Encoding variable: aux2506 with domain: bool (representing constraint (1<=(aux1440 + aux1443 + aux1444)))
c Var 'aux2506' direct represents '0' with '-13969'
c Var 'aux2506' direct represents '1' with '13969'
c Var 'aux2506' order represents '1' with '1'
c Var 'aux2506' order represents '0' with '-13969'
c Encoding variable: aux2507 with domain: bool (representing constraint ((aux1446 + aux1449 + aux1450)<=1))
c Var 'aux2507' direct represents '0' with '-13970'
c Var 'aux2507' direct represents '1' with '13970'
c Var 'aux2507' order represents '1' with '1'
c Var 'aux2507' order represents '0' with '-13970'
c Encoding variable: aux2508 with domain: bool (representing constraint (1<=(aux1446 + aux1449 + aux1450)))
c Var 'aux2508' direct represents '0' with '-13971'
c Var 'aux2508' direct represents '1' with '13971'
c Var 'aux2508' order represents '1' with '1'
c Var 'aux2508' order represents '0' with '-13971'
c Encoding variable: aux2509 with domain: bool (representing constraint ((aux1452 + aux1455 + aux1456)<=1))
c Var 'aux2509' direct represents '0' with '-13972'
c Var 'aux2509' direct represents '1' with '13972'
c Var 'aux2509' order represents '1' with '1'
c Var 'aux2509' order represents '0' with '-13972'
c Encoding variable: aux2510 with domain: bool (representing constraint (1<=(aux1452 + aux1455 + aux1456)))
c Var 'aux2510' direct represents '0' with '-13973'
c Var 'aux2510' direct represents '1' with '13973'
c Var 'aux2510' order represents '1' with '1'
c Var 'aux2510' order represents '0' with '-13973'
c Encoding variable: aux2511 with domain: bool (representing constraint ((aux1458 + aux1461 + aux1462)<=1))
c Var 'aux2511' direct represents '0' with '-13974'
c Var 'aux2511' direct represents '1' with '13974'
c Var 'aux2511' order represents '1' with '1'
c Var 'aux2511' order represents '0' with '-13974'
c Encoding variable: aux2512 with domain: bool (representing constraint (1<=(aux1458 + aux1461 + aux1462)))
c Var 'aux2512' direct represents '0' with '-13975'
c Var 'aux2512' direct represents '1' with '13975'
c Var 'aux2512' order represents '1' with '1'
c Var 'aux2512' order represents '0' with '-13975'
c Encoding variable: aux2513 with domain: bool (representing constraint ((aux1464 + aux1467 + aux1468)<=1))
c Var 'aux2513' direct represents '0' with '-13976'
c Var 'aux2513' direct represents '1' with '13976'
c Var 'aux2513' order represents '1' with '1'
c Var 'aux2513' order represents '0' with '-13976'
c Encoding variable: aux2514 with domain: bool (representing constraint (1<=(aux1464 + aux1467 + aux1468)))
c Var 'aux2514' direct represents '0' with '-13977'
c Var 'aux2514' direct represents '1' with '13977'
c Var 'aux2514' order represents '1' with '1'
c Var 'aux2514' order represents '0' with '-13977'
c Encoding variable: aux2515 with domain: bool (representing constraint ((aux1470 + aux1473 + aux1474)<=1))
c Var 'aux2515' direct represents '0' with '-13978'
c Var 'aux2515' direct represents '1' with '13978'
c Var 'aux2515' order represents '1' with '1'
c Var 'aux2515' order represents '0' with '-13978'
c Encoding variable: aux2516 with domain: bool (representing constraint (1<=(aux1470 + aux1473 + aux1474)))
c Var 'aux2516' direct represents '0' with '-13979'
c Var 'aux2516' direct represents '1' with '13979'
c Var 'aux2516' order represents '1' with '1'
c Var 'aux2516' order represents '0' with '-13979'
c Encoding variable: aux2517 with domain: bool (representing constraint ((aux1476 + aux1479 + aux1480)<=1))
c Var 'aux2517' direct represents '0' with '-13980'
c Var 'aux2517' direct represents '1' with '13980'
c Var 'aux2517' order represents '1' with '1'
c Var 'aux2517' order represents '0' with '-13980'
c Encoding variable: aux2518 with domain: bool (representing constraint (1<=(aux1476 + aux1479 + aux1480)))
c Var 'aux2518' direct represents '0' with '-13981'
c Var 'aux2518' direct represents '1' with '13981'
c Var 'aux2518' order represents '1' with '1'
c Var 'aux2518' order represents '0' with '-13981'
c Encoding variable: aux2519 with domain: bool (representing constraint ((aux1482 + aux1485 + aux1486)<=1))
c Var 'aux2519' direct represents '0' with '-13982'
c Var 'aux2519' direct represents '1' with '13982'
c Var 'aux2519' order represents '1' with '1'
c Var 'aux2519' order represents '0' with '-13982'
c Encoding variable: aux2520 with domain: bool (representing constraint (1<=(aux1482 + aux1485 + aux1486)))
c Var 'aux2520' direct represents '0' with '-13983'
c Var 'aux2520' direct represents '1' with '13983'
c Var 'aux2520' order represents '1' with '1'
c Var 'aux2520' order represents '0' with '-13983'
c Encoding variable: aux2521 with domain: bool (representing constraint ((aux1488 + aux1491 + aux1492)<=1))
c Var 'aux2521' direct represents '0' with '-13984'
c Var 'aux2521' direct represents '1' with '13984'
c Var 'aux2521' order represents '1' with '1'
c Var 'aux2521' order represents '0' with '-13984'
c Encoding variable: aux2522 with domain: bool (representing constraint (1<=(aux1488 + aux1491 + aux1492)))
c Var 'aux2522' direct represents '0' with '-13985'
c Var 'aux2522' direct represents '1' with '13985'
c Var 'aux2522' order represents '1' with '1'
c Var 'aux2522' order represents '0' with '-13985'
c Encoding variable: aux2523 with domain: bool (representing constraint ((aux1494 + aux1497 + aux1498)<=1))
c Var 'aux2523' direct represents '0' with '-13986'
c Var 'aux2523' direct represents '1' with '13986'
c Var 'aux2523' order represents '1' with '1'
c Var 'aux2523' order represents '0' with '-13986'
c Encoding variable: aux2524 with domain: bool (representing constraint (1<=(aux1494 + aux1497 + aux1498)))
c Var 'aux2524' direct represents '0' with '-13987'
c Var 'aux2524' direct represents '1' with '13987'
c Var 'aux2524' order represents '1' with '1'
c Var 'aux2524' order represents '0' with '-13987'
c Encoding variable: aux2525 with domain: bool (representing constraint ((aux1500 + aux1503 + aux1504)<=1))
c Var 'aux2525' direct represents '0' with '-13988'
c Var 'aux2525' direct represents '1' with '13988'
c Var 'aux2525' order represents '1' with '1'
c Var 'aux2525' order represents '0' with '-13988'
c Encoding variable: aux2526 with domain: bool (representing constraint (1<=(aux1500 + aux1503 + aux1504)))
c Var 'aux2526' direct represents '0' with '-13989'
c Var 'aux2526' direct represents '1' with '13989'
c Var 'aux2526' order represents '1' with '1'
c Var 'aux2526' order represents '0' with '-13989'
c Encoding variable: aux2527 with domain: bool (representing constraint ((aux1506 + aux1509 + aux1510)<=1))
c Var 'aux2527' direct represents '0' with '-13990'
c Var 'aux2527' direct represents '1' with '13990'
c Var 'aux2527' order represents '1' with '1'
c Var 'aux2527' order represents '0' with '-13990'
c Encoding variable: aux2528 with domain: bool (representing constraint (1<=(aux1506 + aux1509 + aux1510)))
c Var 'aux2528' direct represents '0' with '-13991'
c Var 'aux2528' direct represents '1' with '13991'
c Var 'aux2528' order represents '1' with '1'
c Var 'aux2528' order represents '0' with '-13991'
c Encoding variable: aux2529 with domain: bool (representing constraint ((aux1512 + aux1515 + aux1516)<=1))
c Var 'aux2529' direct represents '0' with '-13992'
c Var 'aux2529' direct represents '1' with '13992'
c Var 'aux2529' order represents '1' with '1'
c Var 'aux2529' order represents '0' with '-13992'
c Encoding variable: aux2530 with domain: bool (representing constraint (1<=(aux1512 + aux1515 + aux1516)))
c Var 'aux2530' direct represents '0' with '-13993'
c Var 'aux2530' direct represents '1' with '13993'
c Var 'aux2530' order represents '1' with '1'
c Var 'aux2530' order represents '0' with '-13993'
c Encoding variable: aux2531 with domain: bool (representing constraint ((aux1518 + aux1521 + aux1522)<=1))
c Var 'aux2531' direct represents '0' with '-13994'
c Var 'aux2531' direct represents '1' with '13994'
c Var 'aux2531' order represents '1' with '1'
c Var 'aux2531' order represents '0' with '-13994'
c Encoding variable: aux2532 with domain: bool (representing constraint (1<=(aux1518 + aux1521 + aux1522)))
c Var 'aux2532' direct represents '0' with '-13995'
c Var 'aux2532' direct represents '1' with '13995'
c Var 'aux2532' order represents '1' with '1'
c Var 'aux2532' order represents '0' with '-13995'
c Encoding variable: aux2533 with domain: bool (representing constraint ((aux1524 + aux1527 + aux1528)<=1))
c Var 'aux2533' direct represents '0' with '-13996'
c Var 'aux2533' direct represents '1' with '13996'
c Var 'aux2533' order represents '1' with '1'
c Var 'aux2533' order represents '0' with '-13996'
c Encoding variable: aux2534 with domain: bool (representing constraint (1<=(aux1524 + aux1527 + aux1528)))
c Var 'aux2534' direct represents '0' with '-13997'
c Var 'aux2534' direct represents '1' with '13997'
c Var 'aux2534' order represents '1' with '1'
c Var 'aux2534' order represents '0' with '-13997'
c Encoding variable: aux2535 with domain: bool (representing constraint ((aux1530 + aux1533 + aux1534)<=1))
c Var 'aux2535' direct represents '0' with '-13998'
c Var 'aux2535' direct represents '1' with '13998'
c Var 'aux2535' order represents '1' with '1'
c Var 'aux2535' order represents '0' with '-13998'
c Encoding variable: aux2536 with domain: bool (representing constraint (1<=(aux1530 + aux1533 + aux1534)))
c Var 'aux2536' direct represents '0' with '-13999'
c Var 'aux2536' direct represents '1' with '13999'
c Var 'aux2536' order represents '1' with '1'
c Var 'aux2536' order represents '0' with '-13999'
c Encoding variable: aux2537 with domain: bool (representing constraint ((aux1536 + aux1539 + aux1540)<=1))
c Var 'aux2537' direct represents '0' with '-14000'
c Var 'aux2537' direct represents '1' with '14000'
c Var 'aux2537' order represents '1' with '1'
c Var 'aux2537' order represents '0' with '-14000'
c Encoding variable: aux2538 with domain: bool (representing constraint (1<=(aux1536 + aux1539 + aux1540)))
c Var 'aux2538' direct represents '0' with '-14001'
c Var 'aux2538' direct represents '1' with '14001'
c Var 'aux2538' order represents '1' with '1'
c Var 'aux2538' order represents '0' with '-14001'
c Encoding variable: aux2539 with domain: bool (representing constraint ((aux1542 + aux1545 + aux1546)<=1))
c Var 'aux2539' direct represents '0' with '-14002'
c Var 'aux2539' direct represents '1' with '14002'
c Var 'aux2539' order represents '1' with '1'
c Var 'aux2539' order represents '0' with '-14002'
c Encoding variable: aux2540 with domain: bool (representing constraint (1<=(aux1542 + aux1545 + aux1546)))
c Var 'aux2540' direct represents '0' with '-14003'
c Var 'aux2540' direct represents '1' with '14003'
c Var 'aux2540' order represents '1' with '1'
c Var 'aux2540' order represents '0' with '-14003'
c Encoding variable: aux2541 with domain: bool (representing constraint ((aux1548 + aux1551 + aux1552)<=1))
c Var 'aux2541' direct represents '0' with '-14004'
c Var 'aux2541' direct represents '1' with '14004'
c Var 'aux2541' order represents '1' with '1'
c Var 'aux2541' order represents '0' with '-14004'
c Encoding variable: aux2542 with domain: bool (representing constraint (1<=(aux1548 + aux1551 + aux1552)))
c Var 'aux2542' direct represents '0' with '-14005'
c Var 'aux2542' direct represents '1' with '14005'
c Var 'aux2542' order represents '1' with '1'
c Var 'aux2542' order represents '0' with '-14005'
c Encoding variable: aux2543 with domain: bool (representing constraint ((aux1554 + aux1557 + aux1558)<=1))
c Var 'aux2543' direct represents '0' with '-14006'
c Var 'aux2543' direct represents '1' with '14006'
c Var 'aux2543' order represents '1' with '1'
c Var 'aux2543' order represents '0' with '-14006'
c Encoding variable: aux2544 with domain: bool (representing constraint (1<=(aux1554 + aux1557 + aux1558)))
c Var 'aux2544' direct represents '0' with '-14007'
c Var 'aux2544' direct represents '1' with '14007'
c Var 'aux2544' order represents '1' with '1'
c Var 'aux2544' order represents '0' with '-14007'
c Encoding variable: aux2545 with domain: bool (representing constraint ((aux1560 + aux1563 + aux1564)<=1))
c Var 'aux2545' direct represents '0' with '-14008'
c Var 'aux2545' direct represents '1' with '14008'
c Var 'aux2545' order represents '1' with '1'
c Var 'aux2545' order represents '0' with '-14008'
c Encoding variable: aux2546 with domain: bool (representing constraint (1<=(aux1560 + aux1563 + aux1564)))
c Var 'aux2546' direct represents '0' with '-14009'
c Var 'aux2546' direct represents '1' with '14009'
c Var 'aux2546' order represents '1' with '1'
c Var 'aux2546' order represents '0' with '-14009'
c Encoding variable: aux2547 with domain: bool (representing constraint ((aux1566 + aux1569 + aux1570)<=1))
c Var 'aux2547' direct represents '0' with '-14010'
c Var 'aux2547' direct represents '1' with '14010'
c Var 'aux2547' order represents '1' with '1'
c Var 'aux2547' order represents '0' with '-14010'
c Encoding variable: aux2548 with domain: bool (representing constraint (1<=(aux1566 + aux1569 + aux1570)))
c Var 'aux2548' direct represents '0' with '-14011'
c Var 'aux2548' direct represents '1' with '14011'
c Var 'aux2548' order represents '1' with '1'
c Var 'aux2548' order represents '0' with '-14011'
c Encoding variable: aux2549 with domain: bool (representing constraint ((aux1572 + aux1575 + aux1576)<=1))
c Var 'aux2549' direct represents '0' with '-14012'
c Var 'aux2549' direct represents '1' with '14012'
c Var 'aux2549' order represents '1' with '1'
c Var 'aux2549' order represents '0' with '-14012'
c Encoding variable: aux2550 with domain: bool (representing constraint (1<=(aux1572 + aux1575 + aux1576)))
c Var 'aux2550' direct represents '0' with '-14013'
c Var 'aux2550' direct represents '1' with '14013'
c Var 'aux2550' order represents '1' with '1'
c Var 'aux2550' order represents '0' with '-14013'
c Encoding variable: aux2551 with domain: bool (representing constraint ((aux1578 + aux1581 + aux1582)<=1))
c Var 'aux2551' direct represents '0' with '-14014'
c Var 'aux2551' direct represents '1' with '14014'
c Var 'aux2551' order represents '1' with '1'
c Var 'aux2551' order represents '0' with '-14014'
c Encoding variable: aux2552 with domain: bool (representing constraint (1<=(aux1578 + aux1581 + aux1582)))
c Var 'aux2552' direct represents '0' with '-14015'
c Var 'aux2552' direct represents '1' with '14015'
c Var 'aux2552' order represents '1' with '1'
c Var 'aux2552' order represents '0' with '-14015'
c Encoding variable: aux2553 with domain: bool (representing constraint ((aux1584 + aux1587 + aux1588)<=1))
c Var 'aux2553' direct represents '0' with '-14016'
c Var 'aux2553' direct represents '1' with '14016'
c Var 'aux2553' order represents '1' with '1'
c Var 'aux2553' order represents '0' with '-14016'
c Encoding variable: aux2554 with domain: bool (representing constraint (1<=(aux1584 + aux1587 + aux1588)))
c Var 'aux2554' direct represents '0' with '-14017'
c Var 'aux2554' direct represents '1' with '14017'
c Var 'aux2554' order represents '1' with '1'
c Var 'aux2554' order represents '0' with '-14017'
c Encoding variable: aux2555 with domain: bool (representing constraint ((aux1590 + aux1593 + aux1594)<=1))
c Var 'aux2555' direct represents '0' with '-14018'
c Var 'aux2555' direct represents '1' with '14018'
c Var 'aux2555' order represents '1' with '1'
c Var 'aux2555' order represents '0' with '-14018'
c Encoding variable: aux2556 with domain: bool (representing constraint (1<=(aux1590 + aux1593 + aux1594)))
c Var 'aux2556' direct represents '0' with '-14019'
c Var 'aux2556' direct represents '1' with '14019'
c Var 'aux2556' order represents '1' with '1'
c Var 'aux2556' order represents '0' with '-14019'
c Encoding variable: aux2557 with domain: bool (representing constraint ((aux1596 + aux1599 + aux1600)<=1))
c Var 'aux2557' direct represents '0' with '-14020'
c Var 'aux2557' direct represents '1' with '14020'
c Var 'aux2557' order represents '1' with '1'
c Var 'aux2557' order represents '0' with '-14020'
c Encoding variable: aux2558 with domain: bool (representing constraint (1<=(aux1596 + aux1599 + aux1600)))
c Var 'aux2558' direct represents '0' with '-14021'
c Var 'aux2558' direct represents '1' with '14021'
c Var 'aux2558' order represents '1' with '1'
c Var 'aux2558' order represents '0' with '-14021'
c Encoding variable: aux2559 with domain: bool (representing constraint ((aux1602 + aux1605 + aux1606)<=1))
c Var 'aux2559' direct represents '0' with '-14022'
c Var 'aux2559' direct represents '1' with '14022'
c Var 'aux2559' order represents '1' with '1'
c Var 'aux2559' order represents '0' with '-14022'
c Encoding variable: aux2560 with domain: bool (representing constraint (1<=(aux1602 + aux1605 + aux1606)))
c Var 'aux2560' direct represents '0' with '-14023'
c Var 'aux2560' direct represents '1' with '14023'
c Var 'aux2560' order represents '1' with '1'
c Var 'aux2560' order represents '0' with '-14023'
c Encoding variable: aux2561 with domain: bool (representing constraint ((aux1608 + aux1611 + aux1612)<=1))
c Var 'aux2561' direct represents '0' with '-14024'
c Var 'aux2561' direct represents '1' with '14024'
c Var 'aux2561' order represents '1' with '1'
c Var 'aux2561' order represents '0' with '-14024'
c Encoding variable: aux2562 with domain: bool (representing constraint (1<=(aux1608 + aux1611 + aux1612)))
c Var 'aux2562' direct represents '0' with '-14025'
c Var 'aux2562' direct represents '1' with '14025'
c Var 'aux2562' order represents '1' with '1'
c Var 'aux2562' order represents '0' with '-14025'
c Encoding variable: aux2563 with domain: bool (representing constraint ((aux1614 + aux1617 + aux1618)<=1))
c Var 'aux2563' direct represents '0' with '-14026'
c Var 'aux2563' direct represents '1' with '14026'
c Var 'aux2563' order represents '1' with '1'
c Var 'aux2563' order represents '0' with '-14026'
c Encoding variable: aux2564 with domain: bool (representing constraint (1<=(aux1614 + aux1617 + aux1618)))
c Var 'aux2564' direct represents '0' with '-14027'
c Var 'aux2564' direct represents '1' with '14027'
c Var 'aux2564' order represents '1' with '1'
c Var 'aux2564' order represents '0' with '-14027'
c Encoding variable: aux2565 with domain: bool (representing constraint ((aux1620 + aux1623 + aux1624)<=1))
c Var 'aux2565' direct represents '0' with '-14028'
c Var 'aux2565' direct represents '1' with '14028'
c Var 'aux2565' order represents '1' with '1'
c Var 'aux2565' order represents '0' with '-14028'
c Encoding variable: aux2566 with domain: bool (representing constraint (1<=(aux1620 + aux1623 + aux1624)))
c Var 'aux2566' direct represents '0' with '-14029'
c Var 'aux2566' direct represents '1' with '14029'
c Var 'aux2566' order represents '1' with '1'
c Var 'aux2566' order represents '0' with '-14029'
c Encoding variable: aux2567 with domain: bool (representing constraint ((aux1626 + aux1629 + aux1630)<=1))
c Var 'aux2567' direct represents '0' with '-14030'
c Var 'aux2567' direct represents '1' with '14030'
c Var 'aux2567' order represents '1' with '1'
c Var 'aux2567' order represents '0' with '-14030'
c Encoding variable: aux2568 with domain: bool (representing constraint (1<=(aux1626 + aux1629 + aux1630)))
c Var 'aux2568' direct represents '0' with '-14031'
c Var 'aux2568' direct represents '1' with '14031'
c Var 'aux2568' order represents '1' with '1'
c Var 'aux2568' order represents '0' with '-14031'
c Encoding variable: aux2569 with domain: bool (representing constraint ((aux1632 + aux1635 + aux1636)<=1))
c Var 'aux2569' direct represents '0' with '-14032'
c Var 'aux2569' direct represents '1' with '14032'
c Var 'aux2569' order represents '1' with '1'
c Var 'aux2569' order represents '0' with '-14032'
c Encoding variable: aux2570 with domain: bool (representing constraint (1<=(aux1632 + aux1635 + aux1636)))
c Var 'aux2570' direct represents '0' with '-14033'
c Var 'aux2570' direct represents '1' with '14033'
c Var 'aux2570' order represents '1' with '1'
c Var 'aux2570' order represents '0' with '-14033'
c Encoding variable: aux2571 with domain: bool (representing constraint ((aux1638 + aux1641 + aux1642)<=1))
c Var 'aux2571' direct represents '0' with '-14034'
c Var 'aux2571' direct represents '1' with '14034'
c Var 'aux2571' order represents '1' with '1'
c Var 'aux2571' order represents '0' with '-14034'
c Encoding variable: aux2572 with domain: bool (representing constraint (1<=(aux1638 + aux1641 + aux1642)))
c Var 'aux2572' direct represents '0' with '-14035'
c Var 'aux2572' direct represents '1' with '14035'
c Var 'aux2572' order represents '1' with '1'
c Var 'aux2572' order represents '0' with '-14035'
c Encoding variable: aux2573 with domain: bool (representing constraint ((aux1644 + aux1647 + aux1648)<=1))
c Var 'aux2573' direct represents '0' with '-14036'
c Var 'aux2573' direct represents '1' with '14036'
c Var 'aux2573' order represents '1' with '1'
c Var 'aux2573' order represents '0' with '-14036'
c Encoding variable: aux2574 with domain: bool (representing constraint (1<=(aux1644 + aux1647 + aux1648)))
c Var 'aux2574' direct represents '0' with '-14037'
c Var 'aux2574' direct represents '1' with '14037'
c Var 'aux2574' order represents '1' with '1'
c Var 'aux2574' order represents '0' with '-14037'
c Encoding variable: aux2575 with domain: bool (representing constraint ((aux1650 + aux1653 + aux1654)<=1))
c Var 'aux2575' direct represents '0' with '-14038'
c Var 'aux2575' direct represents '1' with '14038'
c Var 'aux2575' order represents '1' with '1'
c Var 'aux2575' order represents '0' with '-14038'
c Encoding variable: aux2576 with domain: bool (representing constraint (1<=(aux1650 + aux1653 + aux1654)))
c Var 'aux2576' direct represents '0' with '-14039'
c Var 'aux2576' direct represents '1' with '14039'
c Var 'aux2576' order represents '1' with '1'
c Var 'aux2576' order represents '0' with '-14039'
c Encoding variable: aux2577 with domain: bool (representing constraint ((aux1656 + aux1659 + aux1660)<=1))
c Var 'aux2577' direct represents '0' with '-14040'
c Var 'aux2577' direct represents '1' with '14040'
c Var 'aux2577' order represents '1' with '1'
c Var 'aux2577' order represents '0' with '-14040'
c Encoding variable: aux2578 with domain: bool (representing constraint (1<=(aux1656 + aux1659 + aux1660)))
c Var 'aux2578' direct represents '0' with '-14041'
c Var 'aux2578' direct represents '1' with '14041'
c Var 'aux2578' order represents '1' with '1'
c Var 'aux2578' order represents '0' with '-14041'
c Encoding variable: aux2579 with domain: bool (representing constraint ((aux1662 + aux1665 + aux1666)<=1))
c Var 'aux2579' direct represents '0' with '-14042'
c Var 'aux2579' direct represents '1' with '14042'
c Var 'aux2579' order represents '1' with '1'
c Var 'aux2579' order represents '0' with '-14042'
c Encoding variable: aux2580 with domain: bool (representing constraint (1<=(aux1662 + aux1665 + aux1666)))
c Var 'aux2580' direct represents '0' with '-14043'
c Var 'aux2580' direct represents '1' with '14043'
c Var 'aux2580' order represents '1' with '1'
c Var 'aux2580' order represents '0' with '-14043'
c Encoding variable: aux2581 with domain: bool (representing constraint ((aux1668 + aux1671 + aux1672)<=1))
c Var 'aux2581' direct represents '0' with '-14044'
c Var 'aux2581' direct represents '1' with '14044'
c Var 'aux2581' order represents '1' with '1'
c Var 'aux2581' order represents '0' with '-14044'
c Encoding variable: aux2582 with domain: bool (representing constraint (1<=(aux1668 + aux1671 + aux1672)))
c Var 'aux2582' direct represents '0' with '-14045'
c Var 'aux2582' direct represents '1' with '14045'
c Var 'aux2582' order represents '1' with '1'
c Var 'aux2582' order represents '0' with '-14045'
c Encoding variable: aux2583 with domain: bool (representing constraint ((aux1674 + aux1677 + aux1678)<=1))
c Var 'aux2583' direct represents '0' with '-14046'
c Var 'aux2583' direct represents '1' with '14046'
c Var 'aux2583' order represents '1' with '1'
c Var 'aux2583' order represents '0' with '-14046'
c Encoding variable: aux2584 with domain: bool (representing constraint (1<=(aux1674 + aux1677 + aux1678)))
c Var 'aux2584' direct represents '0' with '-14047'
c Var 'aux2584' direct represents '1' with '14047'
c Var 'aux2584' order represents '1' with '1'
c Var 'aux2584' order represents '0' with '-14047'
c Encoding variable: aux2585 with domain: bool (representing constraint ((aux1680 + aux1683 + aux1684)<=1))
c Var 'aux2585' direct represents '0' with '-14048'
c Var 'aux2585' direct represents '1' with '14048'
c Var 'aux2585' order represents '1' with '1'
c Var 'aux2585' order represents '0' with '-14048'
c Encoding variable: aux2586 with domain: bool (representing constraint (1<=(aux1680 + aux1683 + aux1684)))
c Var 'aux2586' direct represents '0' with '-14049'
c Var 'aux2586' direct represents '1' with '14049'
c Var 'aux2586' order represents '1' with '1'
c Var 'aux2586' order represents '0' with '-14049'
c Encoding variable: aux2587 with domain: bool (representing constraint ((aux1686 + aux1689 + aux1690)<=1))
c Var 'aux2587' direct represents '0' with '-14050'
c Var 'aux2587' direct represents '1' with '14050'
c Var 'aux2587' order represents '1' with '1'
c Var 'aux2587' order represents '0' with '-14050'
c Encoding variable: aux2588 with domain: bool (representing constraint (1<=(aux1686 + aux1689 + aux1690)))
c Var 'aux2588' direct represents '0' with '-14051'
c Var 'aux2588' direct represents '1' with '14051'
c Var 'aux2588' order represents '1' with '1'
c Var 'aux2588' order represents '0' with '-14051'
c Encoding variable: aux2589 with domain: bool (representing constraint ((aux1692 + aux1695 + aux1696)<=1))
c Var 'aux2589' direct represents '0' with '-14052'
c Var 'aux2589' direct represents '1' with '14052'
c Var 'aux2589' order represents '1' with '1'
c Var 'aux2589' order represents '0' with '-14052'
c Encoding variable: aux2590 with domain: bool (representing constraint (1<=(aux1692 + aux1695 + aux1696)))
c Var 'aux2590' direct represents '0' with '-14053'
c Var 'aux2590' direct represents '1' with '14053'
c Var 'aux2590' order represents '1' with '1'
c Var 'aux2590' order represents '0' with '-14053'
c Encoding variable: aux2591 with domain: bool (representing constraint ((aux1698 + aux1701 + aux1702)<=1))
c Var 'aux2591' direct represents '0' with '-14054'
c Var 'aux2591' direct represents '1' with '14054'
c Var 'aux2591' order represents '1' with '1'
c Var 'aux2591' order represents '0' with '-14054'
c Encoding variable: aux2592 with domain: bool (representing constraint (1<=(aux1698 + aux1701 + aux1702)))
c Var 'aux2592' direct represents '0' with '-14055'
c Var 'aux2592' direct represents '1' with '14055'
c Var 'aux2592' order represents '1' with '1'
c Var 'aux2592' order represents '0' with '-14055'
c Encoding variable: aux2593 with domain: bool (representing constraint ((aux1704 + aux1707 + aux1708)<=1))
c Var 'aux2593' direct represents '0' with '-14056'
c Var 'aux2593' direct represents '1' with '14056'
c Var 'aux2593' order represents '1' with '1'
c Var 'aux2593' order represents '0' with '-14056'
c Encoding variable: aux2594 with domain: bool (representing constraint (1<=(aux1704 + aux1707 + aux1708)))
c Var 'aux2594' direct represents '0' with '-14057'
c Var 'aux2594' direct represents '1' with '14057'
c Var 'aux2594' order represents '1' with '1'
c Var 'aux2594' order represents '0' with '-14057'
c Encoding variable: aux2595 with domain: bool (representing constraint ((aux1710 + aux1713 + aux1714)<=1))
c Var 'aux2595' direct represents '0' with '-14058'
c Var 'aux2595' direct represents '1' with '14058'
c Var 'aux2595' order represents '1' with '1'
c Var 'aux2595' order represents '0' with '-14058'
c Encoding variable: aux2596 with domain: bool (representing constraint (1<=(aux1710 + aux1713 + aux1714)))
c Var 'aux2596' direct represents '0' with '-14059'
c Var 'aux2596' direct represents '1' with '14059'
c Var 'aux2596' order represents '1' with '1'
c Var 'aux2596' order represents '0' with '-14059'
c Encoding variable: aux2597 with domain: bool (representing constraint ((aux1716 + aux1719 + aux1720)<=1))
c Var 'aux2597' direct represents '0' with '-14060'
c Var 'aux2597' direct represents '1' with '14060'
c Var 'aux2597' order represents '1' with '1'
c Var 'aux2597' order represents '0' with '-14060'
c Encoding variable: aux2598 with domain: bool (representing constraint (1<=(aux1716 + aux1719 + aux1720)))
c Var 'aux2598' direct represents '0' with '-14061'
c Var 'aux2598' direct represents '1' with '14061'
c Var 'aux2598' order represents '1' with '1'
c Var 'aux2598' order represents '0' with '-14061'
c Encoding variable: aux2599 with domain: bool (representing constraint ((aux1722 + aux1725 + aux1726)<=1))
c Var 'aux2599' direct represents '0' with '-14062'
c Var 'aux2599' direct represents '1' with '14062'
c Var 'aux2599' order represents '1' with '1'
c Var 'aux2599' order represents '0' with '-14062'
c Encoding variable: aux2600 with domain: bool (representing constraint (1<=(aux1722 + aux1725 + aux1726)))
c Var 'aux2600' direct represents '0' with '-14063'
c Var 'aux2600' direct represents '1' with '14063'
c Var 'aux2600' order represents '1' with '1'
c Var 'aux2600' order represents '0' with '-14063'
c Encoding variable: aux2601 with domain: bool (representing constraint ((aux1728 + aux1731 + aux1732)<=1))
c Var 'aux2601' direct represents '0' with '-14064'
c Var 'aux2601' direct represents '1' with '14064'
c Var 'aux2601' order represents '1' with '1'
c Var 'aux2601' order represents '0' with '-14064'
c Encoding variable: aux2602 with domain: bool (representing constraint (1<=(aux1728 + aux1731 + aux1732)))
c Var 'aux2602' direct represents '0' with '-14065'
c Var 'aux2602' direct represents '1' with '14065'
c Var 'aux2602' order represents '1' with '1'
c Var 'aux2602' order represents '0' with '-14065'
c Encoding variable: aux2603 with domain: bool (representing constraint ((aux1734 + aux1737 + aux1738)<=1))
c Var 'aux2603' direct represents '0' with '-14066'
c Var 'aux2603' direct represents '1' with '14066'
c Var 'aux2603' order represents '1' with '1'
c Var 'aux2603' order represents '0' with '-14066'
c Encoding variable: aux2604 with domain: bool (representing constraint (1<=(aux1734 + aux1737 + aux1738)))
c Var 'aux2604' direct represents '0' with '-14067'
c Var 'aux2604' direct represents '1' with '14067'
c Var 'aux2604' order represents '1' with '1'
c Var 'aux2604' order represents '0' with '-14067'
c Encoding variable: aux2605 with domain: bool (representing constraint ((aux1740 + aux1743 + aux1744)<=1))
c Var 'aux2605' direct represents '0' with '-14068'
c Var 'aux2605' direct represents '1' with '14068'
c Var 'aux2605' order represents '1' with '1'
c Var 'aux2605' order represents '0' with '-14068'
c Encoding variable: aux2606 with domain: bool (representing constraint (1<=(aux1740 + aux1743 + aux1744)))
c Var 'aux2606' direct represents '0' with '-14069'
c Var 'aux2606' direct represents '1' with '14069'
c Var 'aux2606' order represents '1' with '1'
c Var 'aux2606' order represents '0' with '-14069'
c Encoding variable: aux2607 with domain: bool (representing constraint ((aux1746 + aux1749 + aux1750)<=1))
c Var 'aux2607' direct represents '0' with '-14070'
c Var 'aux2607' direct represents '1' with '14070'
c Var 'aux2607' order represents '1' with '1'
c Var 'aux2607' order represents '0' with '-14070'
c Encoding variable: aux2608 with domain: bool (representing constraint (1<=(aux1746 + aux1749 + aux1750)))
c Var 'aux2608' direct represents '0' with '-14071'
c Var 'aux2608' direct represents '1' with '14071'
c Var 'aux2608' order represents '1' with '1'
c Var 'aux2608' order represents '0' with '-14071'
c Encoding variable: aux2609 with domain: bool (representing constraint ((aux1752 + aux1755 + aux1756)<=1))
c Var 'aux2609' direct represents '0' with '-14072'
c Var 'aux2609' direct represents '1' with '14072'
c Var 'aux2609' order represents '1' with '1'
c Var 'aux2609' order represents '0' with '-14072'
c Encoding variable: aux2610 with domain: bool (representing constraint (1<=(aux1752 + aux1755 + aux1756)))
c Var 'aux2610' direct represents '0' with '-14073'
c Var 'aux2610' direct represents '1' with '14073'
c Var 'aux2610' order represents '1' with '1'
c Var 'aux2610' order represents '0' with '-14073'
c Encoding variable: aux2611 with domain: bool (representing constraint ((aux1758 + aux1761 + aux1762)<=1))
c Var 'aux2611' direct represents '0' with '-14074'
c Var 'aux2611' direct represents '1' with '14074'
c Var 'aux2611' order represents '1' with '1'
c Var 'aux2611' order represents '0' with '-14074'
c Encoding variable: aux2612 with domain: bool (representing constraint (1<=(aux1758 + aux1761 + aux1762)))
c Var 'aux2612' direct represents '0' with '-14075'
c Var 'aux2612' direct represents '1' with '14075'
c Var 'aux2612' order represents '1' with '1'
c Var 'aux2612' order represents '0' with '-14075'
c Encoding variable: aux2613 with domain: bool (representing constraint ((aux1764 + aux1767 + aux1768)<=1))
c Var 'aux2613' direct represents '0' with '-14076'
c Var 'aux2613' direct represents '1' with '14076'
c Var 'aux2613' order represents '1' with '1'
c Var 'aux2613' order represents '0' with '-14076'
c Encoding variable: aux2614 with domain: bool (representing constraint (1<=(aux1764 + aux1767 + aux1768)))
c Var 'aux2614' direct represents '0' with '-14077'
c Var 'aux2614' direct represents '1' with '14077'
c Var 'aux2614' order represents '1' with '1'
c Var 'aux2614' order represents '0' with '-14077'
c Encoding variable: aux2615 with domain: bool (representing constraint ((aux1770 + aux1773 + aux1774)<=1))
c Var 'aux2615' direct represents '0' with '-14078'
c Var 'aux2615' direct represents '1' with '14078'
c Var 'aux2615' order represents '1' with '1'
c Var 'aux2615' order represents '0' with '-14078'
c Encoding variable: aux2616 with domain: bool (representing constraint (1<=(aux1770 + aux1773 + aux1774)))
c Var 'aux2616' direct represents '0' with '-14079'
c Var 'aux2616' direct represents '1' with '14079'
c Var 'aux2616' order represents '1' with '1'
c Var 'aux2616' order represents '0' with '-14079'
c Encoding variable: aux2617 with domain: bool (representing constraint ((aux1776 + aux1779 + aux1780)<=1))
c Var 'aux2617' direct represents '0' with '-14080'
c Var 'aux2617' direct represents '1' with '14080'
c Var 'aux2617' order represents '1' with '1'
c Var 'aux2617' order represents '0' with '-14080'
c Encoding variable: aux2618 with domain: bool (representing constraint (1<=(aux1776 + aux1779 + aux1780)))
c Var 'aux2618' direct represents '0' with '-14081'
c Var 'aux2618' direct represents '1' with '14081'
c Var 'aux2618' order represents '1' with '1'
c Var 'aux2618' order represents '0' with '-14081'
c Encoding variable: aux2619 with domain: bool (representing constraint ((aux1782 + aux1785 + aux1786)<=1))
c Var 'aux2619' direct represents '0' with '-14082'
c Var 'aux2619' direct represents '1' with '14082'
c Var 'aux2619' order represents '1' with '1'
c Var 'aux2619' order represents '0' with '-14082'
c Encoding variable: aux2620 with domain: bool (representing constraint (1<=(aux1782 + aux1785 + aux1786)))
c Var 'aux2620' direct represents '0' with '-14083'
c Var 'aux2620' direct represents '1' with '14083'
c Var 'aux2620' order represents '1' with '1'
c Var 'aux2620' order represents '0' with '-14083'
c Encoding variable: aux2621 with domain: bool (representing constraint ((aux1788 + aux1791 + aux1792)<=1))
c Var 'aux2621' direct represents '0' with '-14084'
c Var 'aux2621' direct represents '1' with '14084'
c Var 'aux2621' order represents '1' with '1'
c Var 'aux2621' order represents '0' with '-14084'
c Encoding variable: aux2622 with domain: bool (representing constraint (1<=(aux1788 + aux1791 + aux1792)))
c Var 'aux2622' direct represents '0' with '-14085'
c Var 'aux2622' direct represents '1' with '14085'
c Var 'aux2622' order represents '1' with '1'
c Var 'aux2622' order represents '0' with '-14085'
c Encoding variable: aux2623 with domain: bool (representing constraint ((aux1794 + aux1797 + aux1798)<=1))
c Var 'aux2623' direct represents '0' with '-14086'
c Var 'aux2623' direct represents '1' with '14086'
c Var 'aux2623' order represents '1' with '1'
c Var 'aux2623' order represents '0' with '-14086'
c Encoding variable: aux2624 with domain: bool (representing constraint (1<=(aux1794 + aux1797 + aux1798)))
c Var 'aux2624' direct represents '0' with '-14087'
c Var 'aux2624' direct represents '1' with '14087'
c Var 'aux2624' order represents '1' with '1'
c Var 'aux2624' order represents '0' with '-14087'
c Encoding variable: aux2625 with domain: bool (representing constraint ((aux1800 + aux1803 + aux1804)<=1))
c Var 'aux2625' direct represents '0' with '-14088'
c Var 'aux2625' direct represents '1' with '14088'
c Var 'aux2625' order represents '1' with '1'
c Var 'aux2625' order represents '0' with '-14088'
c Encoding variable: aux2626 with domain: bool (representing constraint (1<=(aux1800 + aux1803 + aux1804)))
c Var 'aux2626' direct represents '0' with '-14089'
c Var 'aux2626' direct represents '1' with '14089'
c Var 'aux2626' order represents '1' with '1'
c Var 'aux2626' order represents '0' with '-14089'
c Encoding variable: aux2627 with domain: bool (representing constraint ((aux1806 + aux1809 + aux1810)<=1))
c Var 'aux2627' direct represents '0' with '-14090'
c Var 'aux2627' direct represents '1' with '14090'
c Var 'aux2627' order represents '1' with '1'
c Var 'aux2627' order represents '0' with '-14090'
c Encoding variable: aux2628 with domain: bool (representing constraint (1<=(aux1806 + aux1809 + aux1810)))
c Var 'aux2628' direct represents '0' with '-14091'
c Var 'aux2628' direct represents '1' with '14091'
c Var 'aux2628' order represents '1' with '1'
c Var 'aux2628' order represents '0' with '-14091'
c Encoding variable: aux2629 with domain: bool (representing constraint ((aux1812 + aux1815 + aux1816)<=1))
c Var 'aux2629' direct represents '0' with '-14092'
c Var 'aux2629' direct represents '1' with '14092'
c Var 'aux2629' order represents '1' with '1'
c Var 'aux2629' order represents '0' with '-14092'
c Encoding variable: aux2630 with domain: bool (representing constraint (1<=(aux1812 + aux1815 + aux1816)))
c Var 'aux2630' direct represents '0' with '-14093'
c Var 'aux2630' direct represents '1' with '14093'
c Var 'aux2630' order represents '1' with '1'
c Var 'aux2630' order represents '0' with '-14093'
c Encoding variable: aux2631 with domain: bool (representing constraint ((aux1818 + aux1821 + aux1822)<=1))
c Var 'aux2631' direct represents '0' with '-14094'
c Var 'aux2631' direct represents '1' with '14094'
c Var 'aux2631' order represents '1' with '1'
c Var 'aux2631' order represents '0' with '-14094'
c Encoding variable: aux2632 with domain: bool (representing constraint (1<=(aux1818 + aux1821 + aux1822)))
c Var 'aux2632' direct represents '0' with '-14095'
c Var 'aux2632' direct represents '1' with '14095'
c Var 'aux2632' order represents '1' with '1'
c Var 'aux2632' order represents '0' with '-14095'
c Encoding variable: aux2633 with domain: bool (representing constraint ((aux1824 + aux1827 + aux1828)<=1))
c Var 'aux2633' direct represents '0' with '-14096'
c Var 'aux2633' direct represents '1' with '14096'
c Var 'aux2633' order represents '1' with '1'
c Var 'aux2633' order represents '0' with '-14096'
c Encoding variable: aux2634 with domain: bool (representing constraint (1<=(aux1824 + aux1827 + aux1828)))
c Var 'aux2634' direct represents '0' with '-14097'
c Var 'aux2634' direct represents '1' with '14097'
c Var 'aux2634' order represents '1' with '1'
c Var 'aux2634' order represents '0' with '-14097'
c Encoding variable: aux2635 with domain: bool (representing constraint ((aux1830 + aux1833 + aux1834)<=1))
c Var 'aux2635' direct represents '0' with '-14098'
c Var 'aux2635' direct represents '1' with '14098'
c Var 'aux2635' order represents '1' with '1'
c Var 'aux2635' order represents '0' with '-14098'
c Encoding variable: aux2636 with domain: bool (representing constraint (1<=(aux1830 + aux1833 + aux1834)))
c Var 'aux2636' direct represents '0' with '-14099'
c Var 'aux2636' direct represents '1' with '14099'
c Var 'aux2636' order represents '1' with '1'
c Var 'aux2636' order represents '0' with '-14099'
c Encoding variable: aux2637 with domain: bool (representing constraint ((aux1836 + aux1839 + aux1840)<=1))
c Var 'aux2637' direct represents '0' with '-14100'
c Var 'aux2637' direct represents '1' with '14100'
c Var 'aux2637' order represents '1' with '1'
c Var 'aux2637' order represents '0' with '-14100'
c Encoding variable: aux2638 with domain: bool (representing constraint (1<=(aux1836 + aux1839 + aux1840)))
c Var 'aux2638' direct represents '0' with '-14101'
c Var 'aux2638' direct represents '1' with '14101'
c Var 'aux2638' order represents '1' with '1'
c Var 'aux2638' order represents '0' with '-14101'
c Encoding variable: aux2639 with domain: bool (representing constraint ((aux1842 + aux1845 + aux1846)<=1))
c Var 'aux2639' direct represents '0' with '-14102'
c Var 'aux2639' direct represents '1' with '14102'
c Var 'aux2639' order represents '1' with '1'
c Var 'aux2639' order represents '0' with '-14102'
c Encoding variable: aux2640 with domain: bool (representing constraint (1<=(aux1842 + aux1845 + aux1846)))
c Var 'aux2640' direct represents '0' with '-14103'
c Var 'aux2640' direct represents '1' with '14103'
c Var 'aux2640' order represents '1' with '1'
c Var 'aux2640' order represents '0' with '-14103'
c Encoding variable: aux2641 with domain: bool (representing constraint ((aux1848 + aux1851 + aux1852)<=1))
c Var 'aux2641' direct represents '0' with '-14104'
c Var 'aux2641' direct represents '1' with '14104'
c Var 'aux2641' order represents '1' with '1'
c Var 'aux2641' order represents '0' with '-14104'
c Encoding variable: aux2642 with domain: bool (representing constraint (1<=(aux1848 + aux1851 + aux1852)))
c Var 'aux2642' direct represents '0' with '-14105'
c Var 'aux2642' direct represents '1' with '14105'
c Var 'aux2642' order represents '1' with '1'
c Var 'aux2642' order represents '0' with '-14105'
c Encoding variable: aux2643 with domain: bool (representing constraint ((aux1854 + aux1857 + aux1858)<=1))
c Var 'aux2643' direct represents '0' with '-14106'
c Var 'aux2643' direct represents '1' with '14106'
c Var 'aux2643' order represents '1' with '1'
c Var 'aux2643' order represents '0' with '-14106'
c Encoding variable: aux2644 with domain: bool (representing constraint (1<=(aux1854 + aux1857 + aux1858)))
c Var 'aux2644' direct represents '0' with '-14107'
c Var 'aux2644' direct represents '1' with '14107'
c Var 'aux2644' order represents '1' with '1'
c Var 'aux2644' order represents '0' with '-14107'
c Encoding variable: aux2645 with domain: bool (representing constraint ((aux1860 + aux1863 + aux1864)<=1))
c Var 'aux2645' direct represents '0' with '-14108'
c Var 'aux2645' direct represents '1' with '14108'
c Var 'aux2645' order represents '1' with '1'
c Var 'aux2645' order represents '0' with '-14108'
c Encoding variable: aux2646 with domain: bool (representing constraint (1<=(aux1860 + aux1863 + aux1864)))
c Var 'aux2646' direct represents '0' with '-14109'
c Var 'aux2646' direct represents '1' with '14109'
c Var 'aux2646' order represents '1' with '1'
c Var 'aux2646' order represents '0' with '-14109'
c Encoding variable: aux2647 with domain: bool (representing constraint ((aux1866 + aux1869 + aux1870)<=1))
c Var 'aux2647' direct represents '0' with '-14110'
c Var 'aux2647' direct represents '1' with '14110'
c Var 'aux2647' order represents '1' with '1'
c Var 'aux2647' order represents '0' with '-14110'
c Encoding variable: aux2648 with domain: bool (representing constraint (1<=(aux1866 + aux1869 + aux1870)))
c Var 'aux2648' direct represents '0' with '-14111'
c Var 'aux2648' direct represents '1' with '14111'
c Var 'aux2648' order represents '1' with '1'
c Var 'aux2648' order represents '0' with '-14111'
c Encoding variable: aux2649 with domain: bool (representing constraint ((aux1872 + aux1875 + aux1876)<=1))
c Var 'aux2649' direct represents '0' with '-14112'
c Var 'aux2649' direct represents '1' with '14112'
c Var 'aux2649' order represents '1' with '1'
c Var 'aux2649' order represents '0' with '-14112'
c Encoding variable: aux2650 with domain: bool (representing constraint (1<=(aux1872 + aux1875 + aux1876)))
c Var 'aux2650' direct represents '0' with '-14113'
c Var 'aux2650' direct represents '1' with '14113'
c Var 'aux2650' order represents '1' with '1'
c Var 'aux2650' order represents '0' with '-14113'
c Encoding variable: aux2651 with domain: bool (representing constraint ((aux1878 + aux1881 + aux1882)<=1))
c Var 'aux2651' direct represents '0' with '-14114'
c Var 'aux2651' direct represents '1' with '14114'
c Var 'aux2651' order represents '1' with '1'
c Var 'aux2651' order represents '0' with '-14114'
c Encoding variable: aux2652 with domain: bool (representing constraint (1<=(aux1878 + aux1881 + aux1882)))
c Var 'aux2652' direct represents '0' with '-14115'
c Var 'aux2652' direct represents '1' with '14115'
c Var 'aux2652' order represents '1' with '1'
c Var 'aux2652' order represents '0' with '-14115'
c Encoding variable: aux2653 with domain: bool (representing constraint ((aux1884 + aux1887 + aux1888)<=1))
c Var 'aux2653' direct represents '0' with '-14116'
c Var 'aux2653' direct represents '1' with '14116'
c Var 'aux2653' order represents '1' with '1'
c Var 'aux2653' order represents '0' with '-14116'
c Encoding variable: aux2654 with domain: bool (representing constraint (1<=(aux1884 + aux1887 + aux1888)))
c Var 'aux2654' direct represents '0' with '-14117'
c Var 'aux2654' direct represents '1' with '14117'
c Var 'aux2654' order represents '1' with '1'
c Var 'aux2654' order represents '0' with '-14117'
c Encoding variable: aux2655 with domain: bool (representing constraint ((aux1890 + aux1893 + aux1894)<=1))
c Var 'aux2655' direct represents '0' with '-14118'
c Var 'aux2655' direct represents '1' with '14118'
c Var 'aux2655' order represents '1' with '1'
c Var 'aux2655' order represents '0' with '-14118'
c Encoding variable: aux2656 with domain: bool (representing constraint (1<=(aux1890 + aux1893 + aux1894)))
c Var 'aux2656' direct represents '0' with '-14119'
c Var 'aux2656' direct represents '1' with '14119'
c Var 'aux2656' order represents '1' with '1'
c Var 'aux2656' order represents '0' with '-14119'
c Encoding variable: aux2657 with domain: bool (representing constraint ((aux1896 + aux1899 + aux1900)<=1))
c Var 'aux2657' direct represents '0' with '-14120'
c Var 'aux2657' direct represents '1' with '14120'
c Var 'aux2657' order represents '1' with '1'
c Var 'aux2657' order represents '0' with '-14120'
c Encoding variable: aux2658 with domain: bool (representing constraint (1<=(aux1896 + aux1899 + aux1900)))
c Var 'aux2658' direct represents '0' with '-14121'
c Var 'aux2658' direct represents '1' with '14121'
c Var 'aux2658' order represents '1' with '1'
c Var 'aux2658' order represents '0' with '-14121'
c Encoding variable: aux2659 with domain: bool (representing constraint ((aux1902 + aux1905 + aux1906)<=1))
c Var 'aux2659' direct represents '0' with '-14122'
c Var 'aux2659' direct represents '1' with '14122'
c Var 'aux2659' order represents '1' with '1'
c Var 'aux2659' order represents '0' with '-14122'
c Encoding variable: aux2660 with domain: bool (representing constraint (1<=(aux1902 + aux1905 + aux1906)))
c Var 'aux2660' direct represents '0' with '-14123'
c Var 'aux2660' direct represents '1' with '14123'
c Var 'aux2660' order represents '1' with '1'
c Var 'aux2660' order represents '0' with '-14123'
c Encoding variable: aux2661 with domain: bool (representing constraint ((aux1908 + aux1911 + aux1912)<=1))
c Var 'aux2661' direct represents '0' with '-14124'
c Var 'aux2661' direct represents '1' with '14124'
c Var 'aux2661' order represents '1' with '1'
c Var 'aux2661' order represents '0' with '-14124'
c Encoding variable: aux2662 with domain: bool (representing constraint (1<=(aux1908 + aux1911 + aux1912)))
c Var 'aux2662' direct represents '0' with '-14125'
c Var 'aux2662' direct represents '1' with '14125'
c Var 'aux2662' order represents '1' with '1'
c Var 'aux2662' order represents '0' with '-14125'
c Encoding variable: aux2663 with domain: bool (representing constraint ((aux1914 + aux1917 + aux1918)<=1))
c Var 'aux2663' direct represents '0' with '-14126'
c Var 'aux2663' direct represents '1' with '14126'
c Var 'aux2663' order represents '1' with '1'
c Var 'aux2663' order represents '0' with '-14126'
c Encoding variable: aux2664 with domain: bool (representing constraint (1<=(aux1914 + aux1917 + aux1918)))
c Var 'aux2664' direct represents '0' with '-14127'
c Var 'aux2664' direct represents '1' with '14127'
c Var 'aux2664' order represents '1' with '1'
c Var 'aux2664' order represents '0' with '-14127'
c Encoding variable: aux2665 with domain: bool (representing constraint ((aux1920 + aux1923 + aux1924)<=1))
c Var 'aux2665' direct represents '0' with '-14128'
c Var 'aux2665' direct represents '1' with '14128'
c Var 'aux2665' order represents '1' with '1'
c Var 'aux2665' order represents '0' with '-14128'
c Encoding variable: aux2666 with domain: bool (representing constraint (1<=(aux1920 + aux1923 + aux1924)))
c Var 'aux2666' direct represents '0' with '-14129'
c Var 'aux2666' direct represents '1' with '14129'
c Var 'aux2666' order represents '1' with '1'
c Var 'aux2666' order represents '0' with '-14129'
c Encoding variable: aux2667 with domain: bool (representing constraint ((aux1926 + aux1929 + aux1930)<=1))
c Var 'aux2667' direct represents '0' with '-14130'
c Var 'aux2667' direct represents '1' with '14130'
c Var 'aux2667' order represents '1' with '1'
c Var 'aux2667' order represents '0' with '-14130'
c Encoding variable: aux2668 with domain: bool (representing constraint (1<=(aux1926 + aux1929 + aux1930)))
c Var 'aux2668' direct represents '0' with '-14131'
c Var 'aux2668' direct represents '1' with '14131'
c Var 'aux2668' order represents '1' with '1'
c Var 'aux2668' order represents '0' with '-14131'
c Encoding variable: aux2669 with domain: bool (representing constraint ((aux1932 + aux1935 + aux1936)<=1))
c Var 'aux2669' direct represents '0' with '-14132'
c Var 'aux2669' direct represents '1' with '14132'
c Var 'aux2669' order represents '1' with '1'
c Var 'aux2669' order represents '0' with '-14132'
c Encoding variable: aux2670 with domain: bool (representing constraint (1<=(aux1932 + aux1935 + aux1936)))
c Var 'aux2670' direct represents '0' with '-14133'
c Var 'aux2670' direct represents '1' with '14133'
c Var 'aux2670' order represents '1' with '1'
c Var 'aux2670' order represents '0' with '-14133'
c Encoding variable: aux2671 with domain: bool (representing constraint ((aux1938 + aux1941 + aux1942)<=1))
c Var 'aux2671' direct represents '0' with '-14134'
c Var 'aux2671' direct represents '1' with '14134'
c Var 'aux2671' order represents '1' with '1'
c Var 'aux2671' order represents '0' with '-14134'
c Encoding variable: aux2672 with domain: bool (representing constraint (1<=(aux1938 + aux1941 + aux1942)))
c Var 'aux2672' direct represents '0' with '-14135'
c Var 'aux2672' direct represents '1' with '14135'
c Var 'aux2672' order represents '1' with '1'
c Var 'aux2672' order represents '0' with '-14135'
c Encoding variable: aux2673 with domain: bool (representing constraint ((aux1944 + aux1947 + aux1948)<=1))
c Var 'aux2673' direct represents '0' with '-14136'
c Var 'aux2673' direct represents '1' with '14136'
c Var 'aux2673' order represents '1' with '1'
c Var 'aux2673' order represents '0' with '-14136'
c Encoding variable: aux2674 with domain: bool (representing constraint (1<=(aux1944 + aux1947 + aux1948)))
c Var 'aux2674' direct represents '0' with '-14137'
c Var 'aux2674' direct represents '1' with '14137'
c Var 'aux2674' order represents '1' with '1'
c Var 'aux2674' order represents '0' with '-14137'
c Encoding variable: aux2675 with domain: bool (representing constraint ((aux1950 + aux1953 + aux1954)<=1))
c Var 'aux2675' direct represents '0' with '-14138'
c Var 'aux2675' direct represents '1' with '14138'
c Var 'aux2675' order represents '1' with '1'
c Var 'aux2675' order represents '0' with '-14138'
c Encoding variable: aux2676 with domain: bool (representing constraint (1<=(aux1950 + aux1953 + aux1954)))
c Var 'aux2676' direct represents '0' with '-14139'
c Var 'aux2676' direct represents '1' with '14139'
c Var 'aux2676' order represents '1' with '1'
c Var 'aux2676' order represents '0' with '-14139'
c Encoding variable: aux2677 with domain: bool (representing constraint ((aux1956 + aux1959 + aux1960)<=1))
c Var 'aux2677' direct represents '0' with '-14140'
c Var 'aux2677' direct represents '1' with '14140'
c Var 'aux2677' order represents '1' with '1'
c Var 'aux2677' order represents '0' with '-14140'
c Encoding variable: aux2678 with domain: bool (representing constraint (1<=(aux1956 + aux1959 + aux1960)))
c Var 'aux2678' direct represents '0' with '-14141'
c Var 'aux2678' direct represents '1' with '14141'
c Var 'aux2678' order represents '1' with '1'
c Var 'aux2678' order represents '0' with '-14141'
c Encoding variable: aux2679 with domain: bool (representing constraint ((aux1962 + aux1965 + aux1966)<=1))
c Var 'aux2679' direct represents '0' with '-14142'
c Var 'aux2679' direct represents '1' with '14142'
c Var 'aux2679' order represents '1' with '1'
c Var 'aux2679' order represents '0' with '-14142'
c Encoding variable: aux2680 with domain: bool (representing constraint (1<=(aux1962 + aux1965 + aux1966)))
c Var 'aux2680' direct represents '0' with '-14143'
c Var 'aux2680' direct represents '1' with '14143'
c Var 'aux2680' order represents '1' with '1'
c Var 'aux2680' order represents '0' with '-14143'
c Encoding variable: aux2681 with domain: bool (representing constraint ((aux1968 + aux1971 + aux1972)<=1))
c Var 'aux2681' direct represents '0' with '-14144'
c Var 'aux2681' direct represents '1' with '14144'
c Var 'aux2681' order represents '1' with '1'
c Var 'aux2681' order represents '0' with '-14144'
c Encoding variable: aux2682 with domain: bool (representing constraint (1<=(aux1968 + aux1971 + aux1972)))
c Var 'aux2682' direct represents '0' with '-14145'
c Var 'aux2682' direct represents '1' with '14145'
c Var 'aux2682' order represents '1' with '1'
c Var 'aux2682' order represents '0' with '-14145'
c Encoding variable: aux2683 with domain: bool (representing constraint ((aux1974 + aux1977 + aux1978)<=1))
c Var 'aux2683' direct represents '0' with '-14146'
c Var 'aux2683' direct represents '1' with '14146'
c Var 'aux2683' order represents '1' with '1'
c Var 'aux2683' order represents '0' with '-14146'
c Encoding variable: aux2684 with domain: bool (representing constraint (1<=(aux1974 + aux1977 + aux1978)))
c Var 'aux2684' direct represents '0' with '-14147'
c Var 'aux2684' direct represents '1' with '14147'
c Var 'aux2684' order represents '1' with '1'
c Var 'aux2684' order represents '0' with '-14147'
c Encoding variable: aux2685 with domain: bool (representing constraint ((aux1980 + aux1983 + aux1984)<=1))
c Var 'aux2685' direct represents '0' with '-14148'
c Var 'aux2685' direct represents '1' with '14148'
c Var 'aux2685' order represents '1' with '1'
c Var 'aux2685' order represents '0' with '-14148'
c Encoding variable: aux2686 with domain: bool (representing constraint (1<=(aux1980 + aux1983 + aux1984)))
c Var 'aux2686' direct represents '0' with '-14149'
c Var 'aux2686' direct represents '1' with '14149'
c Var 'aux2686' order represents '1' with '1'
c Var 'aux2686' order represents '0' with '-14149'
c Encoding variable: aux2687 with domain: bool (representing constraint ((aux1986 + aux1989 + aux1990)<=1))
c Var 'aux2687' direct represents '0' with '-14150'
c Var 'aux2687' direct represents '1' with '14150'
c Var 'aux2687' order represents '1' with '1'
c Var 'aux2687' order represents '0' with '-14150'
c Encoding variable: aux2688 with domain: bool (representing constraint (1<=(aux1986 + aux1989 + aux1990)))
c Var 'aux2688' direct represents '0' with '-14151'
c Var 'aux2688' direct represents '1' with '14151'
c Var 'aux2688' order represents '1' with '1'
c Var 'aux2688' order represents '0' with '-14151'
c Encoding variable: aux2689 with domain: bool (representing constraint ((aux1992 + aux1995 + aux1996)<=1))
c Var 'aux2689' direct represents '0' with '-14152'
c Var 'aux2689' direct represents '1' with '14152'
c Var 'aux2689' order represents '1' with '1'
c Var 'aux2689' order represents '0' with '-14152'
c Encoding variable: aux2690 with domain: bool (representing constraint (1<=(aux1992 + aux1995 + aux1996)))
c Var 'aux2690' direct represents '0' with '-14153'
c Var 'aux2690' direct represents '1' with '14153'
c Var 'aux2690' order represents '1' with '1'
c Var 'aux2690' order represents '0' with '-14153'
c Encoding variable: aux2691 with domain: bool (representing constraint ((aux1998 + aux2001 + aux2002)<=1))
c Var 'aux2691' direct represents '0' with '-14154'
c Var 'aux2691' direct represents '1' with '14154'
c Var 'aux2691' order represents '1' with '1'
c Var 'aux2691' order represents '0' with '-14154'
c Encoding variable: aux2692 with domain: bool (representing constraint (1<=(aux1998 + aux2001 + aux2002)))
c Var 'aux2692' direct represents '0' with '-14155'
c Var 'aux2692' direct represents '1' with '14155'
c Var 'aux2692' order represents '1' with '1'
c Var 'aux2692' order represents '0' with '-14155'
c Encoding variable: aux2693 with domain: bool (representing constraint ((aux2004 + aux2007 + aux2008)<=1))
c Var 'aux2693' direct represents '0' with '-14156'
c Var 'aux2693' direct represents '1' with '14156'
c Var 'aux2693' order represents '1' with '1'
c Var 'aux2693' order represents '0' with '-14156'
c Encoding variable: aux2694 with domain: bool (representing constraint (1<=(aux2004 + aux2007 + aux2008)))
c Var 'aux2694' direct represents '0' with '-14157'
c Var 'aux2694' direct represents '1' with '14157'
c Var 'aux2694' order represents '1' with '1'
c Var 'aux2694' order represents '0' with '-14157'
c Encoding variable: aux2695 with domain: bool (representing constraint ((aux2010 + aux2013 + aux2014)<=1))
c Var 'aux2695' direct represents '0' with '-14158'
c Var 'aux2695' direct represents '1' with '14158'
c Var 'aux2695' order represents '1' with '1'
c Var 'aux2695' order represents '0' with '-14158'
c Encoding variable: aux2696 with domain: bool (representing constraint (1<=(aux2010 + aux2013 + aux2014)))
c Var 'aux2696' direct represents '0' with '-14159'
c Var 'aux2696' direct represents '1' with '14159'
c Var 'aux2696' order represents '1' with '1'
c Var 'aux2696' order represents '0' with '-14159'
c Encoding variable: aux2697 with domain: bool (representing constraint ((aux2016 + aux2019 + aux2020)<=1))
c Var 'aux2697' direct represents '0' with '-14160'
c Var 'aux2697' direct represents '1' with '14160'
c Var 'aux2697' order represents '1' with '1'
c Var 'aux2697' order represents '0' with '-14160'
c Encoding variable: aux2698 with domain: bool (representing constraint (1<=(aux2016 + aux2019 + aux2020)))
c Var 'aux2698' direct represents '0' with '-14161'
c Var 'aux2698' direct represents '1' with '14161'
c Var 'aux2698' order represents '1' with '1'
c Var 'aux2698' order represents '0' with '-14161'
c Encoding variable: aux2699 with domain: bool (representing constraint ((aux2022 + aux2025 + aux2026)<=1))
c Var 'aux2699' direct represents '0' with '-14162'
c Var 'aux2699' direct represents '1' with '14162'
c Var 'aux2699' order represents '1' with '1'
c Var 'aux2699' order represents '0' with '-14162'
c Encoding variable: aux2700 with domain: bool (representing constraint (1<=(aux2022 + aux2025 + aux2026)))
c Var 'aux2700' direct represents '0' with '-14163'
c Var 'aux2700' direct represents '1' with '14163'
c Var 'aux2700' order represents '1' with '1'
c Var 'aux2700' order represents '0' with '-14163'
c Encoding variable: aux2701 with domain: bool (representing constraint ((aux2028 + aux2031 + aux2032)<=1))
c Var 'aux2701' direct represents '0' with '-14164'
c Var 'aux2701' direct represents '1' with '14164'
c Var 'aux2701' order represents '1' with '1'
c Var 'aux2701' order represents '0' with '-14164'
c Encoding variable: aux2702 with domain: bool (representing constraint (1<=(aux2028 + aux2031 + aux2032)))
c Var 'aux2702' direct represents '0' with '-14165'
c Var 'aux2702' direct represents '1' with '14165'
c Var 'aux2702' order represents '1' with '1'
c Var 'aux2702' order represents '0' with '-14165'
c Encoding variable: aux2703 with domain: bool (representing constraint ((aux2034 + aux2037 + aux2038)<=1))
c Var 'aux2703' direct represents '0' with '-14166'
c Var 'aux2703' direct represents '1' with '14166'
c Var 'aux2703' order represents '1' with '1'
c Var 'aux2703' order represents '0' with '-14166'
c Encoding variable: aux2704 with domain: bool (representing constraint (1<=(aux2034 + aux2037 + aux2038)))
c Var 'aux2704' direct represents '0' with '-14167'
c Var 'aux2704' direct represents '1' with '14167'
c Var 'aux2704' order represents '1' with '1'
c Var 'aux2704' order represents '0' with '-14167'
c Encoding variable: aux2705 with domain: bool (representing constraint ((aux2040 + aux2043 + aux2044)<=1))
c Var 'aux2705' direct represents '0' with '-14168'
c Var 'aux2705' direct represents '1' with '14168'
c Var 'aux2705' order represents '1' with '1'
c Var 'aux2705' order represents '0' with '-14168'
c Encoding variable: aux2706 with domain: bool (representing constraint (1<=(aux2040 + aux2043 + aux2044)))
c Var 'aux2706' direct represents '0' with '-14169'
c Var 'aux2706' direct represents '1' with '14169'
c Var 'aux2706' order represents '1' with '1'
c Var 'aux2706' order represents '0' with '-14169'
c Encoding variable: aux2707 with domain: bool (representing constraint ((aux2046 + aux2049 + aux2050)<=1))
c Var 'aux2707' direct represents '0' with '-14170'
c Var 'aux2707' direct represents '1' with '14170'
c Var 'aux2707' order represents '1' with '1'
c Var 'aux2707' order represents '0' with '-14170'
c Encoding variable: aux2708 with domain: bool (representing constraint (1<=(aux2046 + aux2049 + aux2050)))
c Var 'aux2708' direct represents '0' with '-14171'
c Var 'aux2708' direct represents '1' with '14171'
c Var 'aux2708' order represents '1' with '1'
c Var 'aux2708' order represents '0' with '-14171'
c Encoding variable: aux2709 with domain: bool (representing constraint ((aux2052 + aux2055 + aux2056)<=1))
c Var 'aux2709' direct represents '0' with '-14172'
c Var 'aux2709' direct represents '1' with '14172'
c Var 'aux2709' order represents '1' with '1'
c Var 'aux2709' order represents '0' with '-14172'
c Encoding variable: aux2710 with domain: bool (representing constraint (1<=(aux2052 + aux2055 + aux2056)))
c Var 'aux2710' direct represents '0' with '-14173'
c Var 'aux2710' direct represents '1' with '14173'
c Var 'aux2710' order represents '1' with '1'
c Var 'aux2710' order represents '0' with '-14173'
c Encoding variable: aux2711 with domain: bool (representing constraint ((aux2058 + aux2061 + aux2062)<=1))
c Var 'aux2711' direct represents '0' with '-14174'
c Var 'aux2711' direct represents '1' with '14174'
c Var 'aux2711' order represents '1' with '1'
c Var 'aux2711' order represents '0' with '-14174'
c Encoding variable: aux2712 with domain: bool (representing constraint (1<=(aux2058 + aux2061 + aux2062)))
c Var 'aux2712' direct represents '0' with '-14175'
c Var 'aux2712' direct represents '1' with '14175'
c Var 'aux2712' order represents '1' with '1'
c Var 'aux2712' order represents '0' with '-14175'
c Encoding variable: aux2713 with domain: bool (representing constraint ((aux2064 + aux2067 + aux2068)<=1))
c Var 'aux2713' direct represents '0' with '-14176'
c Var 'aux2713' direct represents '1' with '14176'
c Var 'aux2713' order represents '1' with '1'
c Var 'aux2713' order represents '0' with '-14176'
c Encoding variable: aux2714 with domain: bool (representing constraint (1<=(aux2064 + aux2067 + aux2068)))
c Var 'aux2714' direct represents '0' with '-14177'
c Var 'aux2714' direct represents '1' with '14177'
c Var 'aux2714' order represents '1' with '1'
c Var 'aux2714' order represents '0' with '-14177'
c (((x_00001_00001 + x_00001_00002)<=3)=tv=SATLiteral(13586))
-13586 18 0
-13586 2 17 0
-13586 3 0
-13586 5 0
-13586 7 0
-13586 9 0
-13586 11 0
-13586 13 0
-13586 15 0
13586 -3 -17 0
13586 -2 -18 0
c ((3<=(x_00001_00001 + x_00001_00002))=tv=SATLiteral(13587))
-13587 -2 -17 0
13587 17 0
13587 2 0
13587 3 0
13587 5 0
13587 7 0
13587 9 0
13587 11 0
13587 13 0
13587 15 0
c (((x_00001_00003 + x_00001_00004 + x_00001_00005)<=15)=tv=SATLiteral(13588))
-13588 54 75 0
-13588 56 73 0
-13588 58 71 0
-13588 60 69 0
-13588 32 52 75 0
-13588 32 54 73 0
-13588 32 56 71 0
-13588 32 58 69 0
-13588 32 60 67 0
-13588 33 50 75 0
-13588 33 52 73 0
-13588 33 54 71 0
-13588 33 56 69 0
-13588 33 58 67 0
-13588 33 60 65 0
-13588 35 48 75 0
-13588 35 50 73 0
-13588 35 52 71 0
-13588 35 54 69 0
-13588 35 56 67 0
-13588 35 58 65 0
-13588 35 60 63 0
-13588 37 47 75 0
-13588 37 48 73 0
-13588 37 50 71 0
-13588 37 52 69 0
-13588 37 54 67 0
-13588 37 56 65 0
-13588 37 58 63 0
-13588 37 60 62 0
-13588 39 75 0
-13588 39 47 73 0
-13588 39 48 71 0
-13588 39 50 69 0
-13588 39 52 67 0
-13588 39 54 65 0
-13588 39 56 63 0
-13588 39 58 62 0
-13588 39 60 0
-13588 41 73 0
-13588 41 47 71 0
-13588 41 48 69 0
-13588 41 50 67 0
-13588 41 52 65 0
-13588 41 54 63 0
-13588 41 56 62 0
-13588 41 58 0
-13588 41 60 0
-13588 43 71 0
-13588 43 47 69 0
-13588 43 48 67 0
-13588 43 50 65 0
-13588 43 52 63 0
-13588 43 54 62 0
-13588 43 56 0
-13588 43 58 0
-13588 43 60 0
-13588 45 69 0
-13588 45 47 67 0
-13588 45 48 65 0
-13588 45 50 63 0
-13588 45 52 62 0
-13588 45 54 0
-13588 45 56 0
-13588 45 58 0
-13588 45 60 0
13588 -54 -62 0
13588 -52 -63 0
13588 -50 -65 0
13588 -48 -67 0
13588 -47 -69 0
13588 -45 -56 -62 0
13588 -45 -54 -63 0
13588 -45 -52 -65 0
13588 -45 -50 -67 0
13588 -45 -48 -69 0
13588 -45 -47 -71 0
13588 -43 -58 -62 0
13588 -43 -56 -63 0
13588 -43 -54 -65 0
13588 -43 -52 -67 0
13588 -43 -50 -69 0
13588 -43 -48 -71 0
13588 -43 -47 -73 0
13588 -41 -60 -62 0
13588 -41 -58 -63 0
13588 -41 -56 -65 0
13588 -41 -54 -67 0
13588 -41 -52 -69 0
13588 -41 -50 -71 0
13588 -41 -48 -73 0
13588 -41 -47 -75 0
13588 -39 -62 0
13588 -39 -60 -63 0
13588 -39 -58 -65 0
13588 -39 -56 -67 0
13588 -39 -54 -69 0
13588 -39 -52 -71 0
13588 -39 -50 -73 0
13588 -39 -48 -75 0
13588 -39 -47 0
13588 -37 -63 0
13588 -37 -60 -65 0
13588 -37 -58 -67 0
13588 -37 -56 -69 0
13588 -37 -54 -71 0
13588 -37 -52 -73 0
13588 -37 -50 -75 0
13588 -37 -48 0
13588 -37 -47 0
13588 -35 -65 0
13588 -35 -60 -67 0
13588 -35 -58 -69 0
13588 -35 -56 -71 0
13588 -35 -54 -73 0
13588 -35 -52 -75 0
13588 -35 -50 0
13588 -35 -48 0
13588 -35 -47 0
13588 -33 -67 0
13588 -33 -60 -69 0
13588 -33 -58 -71 0
13588 -33 -56 -73 0
13588 -33 -54 -75 0
13588 -33 -52 0
13588 -33 -50 0
13588 -33 -48 0
13588 -33 -47 0
13588 -32 -69 0
13588 -32 -60 -71 0
13588 -32 -58 -73 0
13588 -32 -56 -75 0
13588 -32 -54 0
13588 -32 -52 0
13588 -32 -50 0
13588 -32 -48 0
13588 -32 -47 0
c ((15<=(x_00001_00003 + x_00001_00004 + x_00001_00005))=tv=SATLiteral(13589))
-13589 -52 -62 0
-13589 -50 -63 0
-13589 -48 -65 0
-13589 -47 -67 0
-13589 -45 -54 -62 0
-13589 -45 -52 -63 0
-13589 -45 -50 -65 0
-13589 -45 -48 -67 0
-13589 -45 -47 -69 0
-13589 -43 -56 -62 0
-13589 -43 -54 -63 0
-13589 -43 -52 -65 0
-13589 -43 -50 -67 0
-13589 -43 -48 -69 0
-13589 -43 -47 -71 0
-13589 -41 -58 -62 0
-13589 -41 -56 -63 0
-13589 -41 -54 -65 0
-13589 -41 -52 -67 0
-13589 -41 -50 -69 0
-13589 -41 -48 -71 0
-13589 -41 -47 -73 0
-13589 -39 -60 -62 0
-13589 -39 -58 -63 0
-13589 -39 -56 -65 0
-13589 -39 -54 -67 0
-13589 -39 -52 -69 0
-13589 -39 -50 -71 0
-13589 -39 -48 -73 0
-13589 -39 -47 -75 0
-13589 -37 -62 0
-13589 -37 -60 -63 0
-13589 -37 -58 -65 0
-13589 -37 -56 -67 0
-13589 -37 -54 -69 0
-13589 -37 -52 -71 0
-13589 -37 -50 -73 0
-13589 -37 -48 -75 0
-13589 -37 -47 0
-13589 -35 -63 0
-13589 -35 -60 -65 0
-13589 -35 -58 -67 0
-13589 -35 -56 -69 0
-13589 -35 -54 -71 0
-13589 -35 -52 -73 0
-13589 -35 -50 -75 0
-13589 -35 -48 0
-13589 -35 -47 0
-13589 -33 -65 0
-13589 -33 -60 -67 0
-13589 -33 -58 -69 0
-13589 -33 -56 -71 0
-13589 -33 -54 -73 0
-13589 -33 -52 -75 0
-13589 -33 -50 0
-13589 -33 -48 0
-13589 -33 -47 0
-13589 -32 -67 0
-13589 -32 -60 -69 0
-13589 -32 -58 -71 0
-13589 -32 -56 -73 0
-13589 -32 -54 -75 0
-13589 -32 -52 0
-13589 -32 -50 0
-13589 -32 -48 0
-13589 -32 -47 0
13589 52 75 0
13589 54 73 0
13589 56 71 0
13589 58 69 0
13589 60 67 0
13589 32 50 75 0
13589 32 52 73 0
13589 32 54 71 0
13589 32 56 69 0
13589 32 58 67 0
13589 32 60 65 0
13589 33 48 75 0
13589 33 50 73 0
13589 33 52 71 0
13589 33 54 69 0
13589 33 56 67 0
13589 33 58 65 0
13589 33 60 63 0
13589 35 47 75 0
13589 35 48 73 0
13589 35 50 71 0
13589 35 52 69 0
13589 35 54 67 0
13589 35 56 65 0
13589 35 58 63 0
13589 35 60 62 0
13589 37 75 0
13589 37 47 73 0
13589 37 48 71 0
13589 37 50 69 0
13589 37 52 67 0
13589 37 54 65 0
13589 37 56 63 0
13589 37 58 62 0
13589 37 60 0
13589 39 73 0
13589 39 47 71 0
13589 39 48 69 0
13589 39 50 67 0
13589 39 52 65 0
13589 39 54 63 0
13589 39 56 62 0
13589 39 58 0
13589 39 60 0
13589 41 71 0
13589 41 47 69 0
13589 41 48 67 0
13589 41 50 65 0
13589 41 52 63 0
13589 41 54 62 0
13589 41 56 0
13589 41 58 0
13589 41 60 0
13589 43 69 0
13589 43 47 67 0
13589 43 48 65 0
13589 43 50 63 0
13589 43 52 62 0
13589 43 54 0
13589 43 56 0
13589 43 58 0
13589 43 60 0
13589 45 67 0
13589 45 47 65 0
13589 45 48 63 0
13589 45 50 62 0
13589 45 52 0
13589 45 54 0
13589 45 56 0
13589 45 58 0
13589 45 60 0
c (((aux461 + shift(x_00003_00005, -1) + shift(x_00002_00006, -1))<=18)=tv=SATLiteral(13590))
-13590 215 1819 0
-13590 217 1817 0
-13590 219 1815 0
-13590 221 1813 0
-13590 223 1811 0
-13590 225 1809 0
-13590 332 213 1819 0
-13590 332 215 1817 0
-13590 332 217 1815 0
-13590 332 219 1813 0
-13590 332 221 1811 0
-13590 332 223 1809 0
-13590 332 225 1807 0
-13590 333 212 1819 0
-13590 333 213 1817 0
-13590 333 215 1815 0
-13590 333 217 1813 0
-13590 333 219 1811 0
-13590 333 221 1809 0
-13590 333 223 1807 0
-13590 333 225 1805 0
-13590 335 1819 0
-13590 335 212 1817 0
-13590 335 213 1815 0
-13590 335 215 1813 0
-13590 335 217 1811 0
-13590 335 219 1809 0
-13590 335 221 1807 0
-13590 335 223 1805 0
-13590 335 225 1803 0
-13590 337 1817 0
-13590 337 212 1815 0
-13590 337 213 1813 0
-13590 337 215 1811 0
-13590 337 217 1809 0
-13590 337 219 1807 0
-13590 337 221 1805 0
-13590 337 223 1803 0
-13590 337 225 1801 0
-13590 339 1815 0
-13590 339 212 1813 0
-13590 339 213 1811 0
-13590 339 215 1809 0
-13590 339 217 1807 0
-13590 339 219 1805 0
-13590 339 221 1803 0
-13590 339 223 1801 0
-13590 339 225 1799 0
-13590 341 1813 0
-13590 341 212 1811 0
-13590 341 213 1809 0
-13590 341 215 1807 0
-13590 341 217 1805 0
-13590 341 219 1803 0
-13590 341 221 1801 0
-13590 341 223 1799 0
-13590 341 225 1797 0
-13590 343 1811 0
-13590 343 212 1809 0
-13590 343 213 1807 0
-13590 343 215 1805 0
-13590 343 217 1803 0
-13590 343 219 1801 0
-13590 343 221 1799 0
-13590 343 223 1797 0
-13590 343 225 1795 0
-13590 345 1809 0
-13590 345 212 1807 0
-13590 345 213 1805 0
-13590 345 215 1803 0
-13590 345 217 1801 0
-13590 345 219 1799 0
-13590 345 221 1797 0
-13590 345 223 1795 0
-13590 345 225 1793 0
13590 -1793 0
13590 -225 -1795 0
13590 -223 -1797 0
13590 -221 -1799 0
13590 -219 -1801 0
13590 -217 -1803 0
13590 -215 -1805 0
13590 -213 -1807 0
13590 -212 -1809 0
13590 -345 -1795 0
13590 -345 -225 -1797 0
13590 -345 -223 -1799 0
13590 -345 -221 -1801 0
13590 -345 -219 -1803 0
13590 -345 -217 -1805 0
13590 -345 -215 -1807 0
13590 -345 -213 -1809 0
13590 -345 -212 -1811 0
13590 -343 -1797 0
13590 -343 -225 -1799 0
13590 -343 -223 -1801 0
13590 -343 -221 -1803 0
13590 -343 -219 -1805 0
13590 -343 -217 -1807 0
13590 -343 -215 -1809 0
13590 -343 -213 -1811 0
13590 -343 -212 -1813 0
13590 -341 -1799 0
13590 -341 -225 -1801 0
13590 -341 -223 -1803 0
13590 -341 -221 -1805 0
13590 -341 -219 -1807 0
13590 -341 -217 -1809 0
13590 -341 -215 -1811 0
13590 -341 -213 -1813 0
13590 -341 -212 -1815 0
13590 -339 -1801 0
13590 -339 -225 -1803 0
13590 -339 -223 -1805 0
13590 -339 -221 -1807 0
13590 -339 -219 -1809 0
13590 -339 -217 -1811 0
13590 -339 -215 -1813 0
13590 -339 -213 -1815 0
13590 -339 -212 -1817 0
13590 -337 -1803 0
13590 -337 -225 -1805 0
13590 -337 -223 -1807 0
13590 -337 -221 -1809 0
13590 -337 -219 -1811 0
13590 -337 -217 -1813 0
13590 -337 -215 -1815 0
13590 -337 -213 -1817 0
13590 -337 -212 -1819 0
13590 -335 -1805 0
13590 -335 -225 -1807 0
13590 -335 -223 -1809 0
13590 -335 -221 -1811 0
13590 -335 -219 -1813 0
13590 -335 -217 -1815 0
13590 -335 -215 -1817 0
13590 -335 -213 -1819 0
13590 -335 -212 0
13590 -333 -1807 0
13590 -333 -225 -1809 0
13590 -333 -223 -1811 0
13590 -333 -221 -1813 0
13590 -333 -219 -1815 0
13590 -333 -217 -1817 0
13590 -333 -215 -1819 0
13590 -333 -213 0
13590 -333 -212 0
13590 -332 -1809 0
13590 -332 -225 -1811 0
13590 -332 -223 -1813 0
13590 -332 -221 -1815 0
13590 -332 -219 -1817 0
13590 -332 -217 -1819 0
13590 -332 -215 0
13590 -332 -213 0
13590 -332 -212 0
c ((18<=(aux461 + shift(x_00003_00005, -1) + shift(x_00002_00006, -1)))=tv=SATLiteral(13591))
-13591 -1791 0
-13591 -225 -1793 0
-13591 -223 -1795 0
-13591 -221 -1797 0
-13591 -219 -1799 0
-13591 -217 -1801 0
-13591 -215 -1803 0
-13591 -213 -1805 0
-13591 -212 -1807 0
-13591 -345 -1793 0
-13591 -345 -225 -1795 0
-13591 -345 -223 -1797 0
-13591 -345 -221 -1799 0
-13591 -345 -219 -1801 0
-13591 -345 -217 -1803 0
-13591 -345 -215 -1805 0
-13591 -345 -213 -1807 0
-13591 -345 -212 -1809 0
-13591 -343 -1795 0
-13591 -343 -225 -1797 0
-13591 -343 -223 -1799 0
-13591 -343 -221 -1801 0
-13591 -343 -219 -1803 0
-13591 -343 -217 -1805 0
-13591 -343 -215 -1807 0
-13591 -343 -213 -1809 0
-13591 -343 -212 -1811 0
-13591 -341 -1797 0
-13591 -341 -225 -1799 0
-13591 -341 -223 -1801 0
-13591 -341 -221 -1803 0
-13591 -341 -219 -1805 0
-13591 -341 -217 -1807 0
-13591 -341 -215 -1809 0
-13591 -341 -213 -1811 0
-13591 -341 -212 -1813 0
-13591 -339 -1799 0
-13591 -339 -225 -1801 0
-13591 -339 -223 -1803 0
-13591 -339 -221 -1805 0
-13591 -339 -219 -1807 0
-13591 -339 -217 -1809 0
-13591 -339 -215 -1811 0
-13591 -339 -213 -1813 0
-13591 -339 -212 -1815 0
-13591 -337 -1801 0
-13591 -337 -225 -1803 0
-13591 -337 -223 -1805 0
-13591 -337 -221 -1807 0
-13591 -337 -219 -1809 0
-13591 -337 -217 -1811 0
-13591 -337 -215 -1813 0
-13591 -337 -213 -1815 0
-13591 -337 -212 -1817 0
-13591 -335 -1803 0
-13591 -335 -225 -1805 0
-13591 -335 -223 -1807 0
-13591 -335 -221 -1809 0
-13591 -335 -219 -1811 0
-13591 -335 -217 -1813 0
-13591 -335 -215 -1815 0
-13591 -335 -213 -1817 0
-13591 -335 -212 -1819 0
-13591 -333 -1805 0
-13591 -333 -225 -1807 0
-13591 -333 -223 -1809 0
-13591 -333 -221 -1811 0
-13591 -333 -219 -1813 0
-13591 -333 -217 -1815 0
-13591 -333 -215 -1817 0
-13591 -333 -213 -1819 0
-13591 -333 -212 0
-13591 -332 -1807 0
-13591 -332 -225 -1809 0
-13591 -332 -223 -1811 0
-13591 -332 -221 -1813 0
-13591 -332 -219 -1815 0
-13591 -332 -217 -1817 0
-13591 -332 -215 -1819 0
-13591 -332 -213 0
-13591 -332 -212 0
13591 213 1819 0
13591 215 1817 0
13591 217 1815 0
13591 219 1813 0
13591 221 1811 0
13591 223 1809 0
13591 225 1807 0
13591 332 212 1819 0
13591 332 213 1817 0
13591 332 215 1815 0
13591 332 217 1813 0
13591 332 219 1811 0
13591 332 221 1809 0
13591 332 223 1807 0
13591 332 225 1805 0
13591 333 1819 0
13591 333 212 1817 0
13591 333 213 1815 0
13591 333 215 1813 0
13591 333 217 1811 0
13591 333 219 1809 0
13591 333 221 1807 0
13591 333 223 1805 0
13591 333 225 1803 0
13591 335 1817 0
13591 335 212 1815 0
13591 335 213 1813 0
13591 335 215 1811 0
13591 335 217 1809 0
13591 335 219 1807 0
13591 335 221 1805 0
13591 335 223 1803 0
13591 335 225 1801 0
13591 337 1815 0
13591 337 212 1813 0
13591 337 213 1811 0
13591 337 215 1809 0
13591 337 217 1807 0
13591 337 219 1805 0
13591 337 221 1803 0
13591 337 223 1801 0
13591 337 225 1799 0
13591 339 1813 0
13591 339 212 1811 0
13591 339 213 1809 0
13591 339 215 1807 0
13591 339 217 1805 0
13591 339 219 1803 0
13591 339 221 1801 0
13591 339 223 1799 0
13591 339 225 1797 0
13591 341 1811 0
13591 341 212 1809 0
13591 341 213 1807 0
13591 341 215 1805 0
13591 341 217 1803 0
13591 341 219 1801 0
13591 341 221 1799 0
13591 341 223 1797 0
13591 341 225 1795 0
13591 343 1809 0
13591 343 212 1807 0
13591 343 213 1805 0
13591 343 215 1803 0
13591 343 217 1801 0
13591 343 219 1799 0
13591 343 221 1797 0
13591 343 223 1795 0
13591 343 225 1793 0
13591 345 1807 0
13591 345 212 1805 0
13591 345 213 1803 0
13591 345 215 1801 0
13591 345 217 1799 0
13591 345 219 1797 0
13591 345 221 1795 0
13591 345 223 1793 0
13591 345 225 1791 0
c (((x_00002_00007 + x_00001_00007)<=4)=tv=SATLiteral(13592))
-13592 95 0
-13592 227 93 0
-13592 228 92 0
-13592 230 0
-13592 232 0
-13592 234 0
-13592 236 0
-13592 238 0
-13592 240 0
13592 -230 -92 0
13592 -228 -93 0
13592 -227 -95 0
c ((4<=(x_00002_00007 + x_00001_00007))=tv=SATLiteral(13593))
-13593 -228 -92 0
-13593 -227 -93 0
13593 93 0
13593 227 92 0
13593 228 0
13593 230 0
13593 232 0
13593 234 0
13593 236 0
13593 238 0
13593 240 0
c (((x_00002_00008 + x_00001_00008)<=16)=tv=SATLiteral(13594))
-13594 253 120 0
-13594 255 118 0
13594 -118 0
13594 -255 -120 0
13594 -253 0
13594 -251 0
13594 -249 0
13594 -247 0
13594 -245 0
13594 -243 0
13594 -242 0
c ((16<=(x_00002_00008 + x_00001_00008))=tv=SATLiteral(13595))
-13595 -116 0
-13595 -255 -118 0
-13595 -253 -120 0
-13595 -251 0
-13595 -249 0
-13595 -247 0
-13595 -245 0
-13595 -243 0
-13595 -242 0
13595 251 120 0
13595 253 118 0
13595 255 116 0
c (((aux462 + shift(x_00003_00009, -1) + shift(x_00004_00009, -1))<=11)=tv=SATLiteral(13596))
-13596 1842 0
-13596 527 1840 0
-13596 528 1838 0
-13596 530 1836 0
-13596 532 1834 0
-13596 534 1832 0
-13596 536 1830 0
-13596 538 1828 0
-13596 540 1826 0
-13596 392 1840 0
-13596 392 527 1838 0
-13596 392 528 1836 0
-13596 392 530 1834 0
-13596 392 532 1832 0
-13596 392 534 1830 0
-13596 392 536 1828 0
-13596 392 538 1826 0
-13596 392 540 1824 0
-13596 393 1838 0
-13596 393 527 1836 0
-13596 393 528 1834 0
-13596 393 530 1832 0
-13596 393 532 1830 0
-13596 393 534 1828 0
-13596 393 536 1826 0
-13596 393 538 1824 0
-13596 393 540 1822 0
-13596 395 1836 0
-13596 395 527 1834 0
-13596 395 528 1832 0
-13596 395 530 1830 0
-13596 395 532 1828 0
-13596 395 534 1826 0
-13596 395 536 1824 0
-13596 395 538 1822 0
-13596 395 540 1821 0
-13596 397 1834 0
-13596 397 527 1832 0
-13596 397 528 1830 0
-13596 397 530 1828 0
-13596 397 532 1826 0
-13596 397 534 1824 0
-13596 397 536 1822 0
-13596 397 538 1821 0
-13596 397 540 0
-13596 399 1832 0
-13596 399 527 1830 0
-13596 399 528 1828 0
-13596 399 530 1826 0
-13596 399 532 1824 0
-13596 399 534 1822 0
-13596 399 536 1821 0
-13596 399 538 0
-13596 399 540 0
-13596 401 1830 0
-13596 401 527 1828 0
-13596 401 528 1826 0
-13596 401 530 1824 0
-13596 401 532 1822 0
-13596 401 534 1821 0
-13596 401 536 0
-13596 401 538 0
-13596 401 540 0
-13596 403 1828 0
-13596 403 527 1826 0
-13596 403 528 1824 0
-13596 403 530 1822 0
-13596 403 532 1821 0
-13596 403 534 0
-13596 403 536 0
-13596 403 538 0
-13596 403 540 0
-13596 405 1826 0
-13596 405 527 1824 0
-13596 405 528 1822 0
-13596 405 530 1821 0
-13596 405 532 0
-13596 405 534 0
-13596 405 536 0
-13596 405 538 0
-13596 405 540 0
13596 -532 -1821 0
13596 -530 -1822 0
13596 -528 -1824 0
13596 -527 -1826 0
13596 -405 -534 -1821 0
13596 -405 -532 -1822 0
13596 -405 -530 -1824 0
13596 -405 -528 -1826 0
13596 -405 -527 -1828 0
13596 -403 -536 -1821 0
13596 -403 -534 -1822 0
13596 -403 -532 -1824 0
13596 -403 -530 -1826 0
13596 -403 -528 -1828 0
13596 -403 -527 -1830 0
13596 -401 -538 -1821 0
13596 -401 -536 -1822 0
13596 -401 -534 -1824 0
13596 -401 -532 -1826 0
13596 -401 -530 -1828 0
13596 -401 -528 -1830 0
13596 -401 -527 -1832 0
13596 -399 -540 -1821 0
13596 -399 -538 -1822 0
13596 -399 -536 -1824 0
13596 -399 -534 -1826 0
13596 -399 -532 -1828 0
13596 -399 -530 -1830 0
13596 -399 -528 -1832 0
13596 -399 -527 -1834 0
13596 -397 -1821 0
13596 -397 -540 -1822 0
13596 -397 -538 -1824 0
13596 -397 -536 -1826 0
13596 -397 -534 -1828 0
13596 -397 -532 -1830 0
13596 -397 -530 -1832 0
13596 -397 -528 -1834 0
13596 -397 -527 -1836 0
13596 -395 -1822 0
13596 -395 -540 -1824 0
13596 -395 -538 -1826 0
13596 -395 -536 -1828 0
13596 -395 -534 -1830 0
13596 -395 -532 -1832 0
13596 -395 -530 -1834 0
13596 -395 -528 -1836 0
13596 -395 -527 -1838 0
13596 -393 -1824 0
13596 -393 -540 -1826 0
13596 -393 -538 -1828 0
13596 -393 -536 -1830 0
13596 -393 -534 -1832 0
13596 -393 -532 -1834 0
13596 -393 -530 -1836 0
13596 -393 -528 -1838 0
13596 -393 -527 -1840 0
13596 -392 -1826 0
13596 -392 -540 -1828 0
13596 -392 -538 -1830 0
13596 -392 -536 -1832 0
13596 -392 -534 -1834 0
13596 -392 -532 -1836 0
13596 -392 -530 -1838 0
13596 -392 -528 -1840 0
13596 -392 -527 -1842 0
c ((11<=(aux462 + shift(x_00003_00009, -1) + shift(x_00004_00009, -1)))=tv=SATLiteral(13597))
-13597 -530 -1821 0
-13597 -528 -1822 0
-13597 -527 -1824 0
-13597 -405 -532 -1821 0
-13597 -405 -530 -1822 0
-13597 -405 -528 -1824 0
-13597 -405 -527 -1826 0
-13597 -403 -534 -1821 0
-13597 -403 -532 -1822 0
-13597 -403 -530 -1824 0
-13597 -403 -528 -1826 0
-13597 -403 -527 -1828 0
-13597 -401 -536 -1821 0
-13597 -401 -534 -1822 0
-13597 -401 -532 -1824 0
-13597 -401 -530 -1826 0
-13597 -401 -528 -1828 0
-13597 -401 -527 -1830 0
-13597 -399 -538 -1821 0
-13597 -399 -536 -1822 0
-13597 -399 -534 -1824 0
-13597 -399 -532 -1826 0
-13597 -399 -530 -1828 0
-13597 -399 -528 -1830 0
-13597 -399 -527 -1832 0
-13597 -397 -540 -1821 0
-13597 -397 -538 -1822 0
-13597 -397 -536 -1824 0
-13597 -397 -534 -1826 0
-13597 -397 -532 -1828 0
-13597 -397 -530 -1830 0
-13597 -397 -528 -1832 0
-13597 -397 -527 -1834 0
-13597 -395 -1821 0
-13597 -395 -540 -1822 0
-13597 -395 -538 -1824 0
-13597 -395 -536 -1826 0
-13597 -395 -534 -1828 0
-13597 -395 -532 -1830 0
-13597 -395 -530 -1832 0
-13597 -395 -528 -1834 0
-13597 -395 -527 -1836 0
-13597 -393 -1822 0
-13597 -393 -540 -1824 0
-13597 -393 -538 -1826 0
-13597 -393 -536 -1828 0
-13597 -393 -534 -1830 0
-13597 -393 -532 -1832 0
-13597 -393 -530 -1834 0
-13597 -393 -528 -1836 0
-13597 -393 -527 -1838 0
-13597 -392 -1824 0
-13597 -392 -540 -1826 0
-13597 -392 -538 -1828 0
-13597 -392 -536 -1830 0
-13597 -392 -534 -1832 0
-13597 -392 -532 -1834 0
-13597 -392 -530 -1836 0
-13597 -392 -528 -1838 0
-13597 -392 -527 -1840 0
13597 1840 0
13597 527 1838 0
13597 528 1836 0
13597 530 1834 0
13597 532 1832 0
13597 534 1830 0
13597 536 1828 0
13597 538 1826 0
13597 540 1824 0
13597 392 1838 0
13597 392 527 1836 0
13597 392 528 1834 0
13597 392 530 1832 0
13597 392 532 1830 0
13597 392 534 1828 0
13597 392 536 1826 0
13597 392 538 1824 0
13597 392 540 1822 0
13597 393 1836 0
13597 393 527 1834 0
13597 393 528 1832 0
13597 393 530 1830 0
13597 393 532 1828 0
13597 393 534 1826 0
13597 393 536 1824 0
13597 393 538 1822 0
13597 393 540 1821 0
13597 395 1834 0
13597 395 527 1832 0
13597 395 528 1830 0
13597 395 530 1828 0
13597 395 532 1826 0
13597 395 534 1824 0
13597 395 536 1822 0
13597 395 538 1821 0
13597 395 540 0
13597 397 1832 0
13597 397 527 1830 0
13597 397 528 1828 0
13597 397 530 1826 0
13597 397 532 1824 0
13597 397 534 1822 0
13597 397 536 1821 0
13597 397 538 0
13597 397 540 0
13597 399 1830 0
13597 399 527 1828 0
13597 399 528 1826 0
13597 399 530 1824 0
13597 399 532 1822 0
13597 399 534 1821 0
13597 399 536 0
13597 399 538 0
13597 399 540 0
13597 401 1828 0
13597 401 527 1826 0
13597 401 528 1824 0
13597 401 530 1822 0
13597 401 532 1821 0
13597 401 534 0
13597 401 536 0
13597 401 538 0
13597 401 540 0
13597 403 1826 0
13597 403 527 1824 0
13597 403 528 1822 0
13597 403 530 1821 0
13597 403 532 0
13597 403 534 0
13597 403 536 0
13597 403 538 0
13597 403 540 0
13597 405 1824 0
13597 405 527 1822 0
13597 405 528 1821 0
13597 405 530 0
13597 405 532 0
13597 405 534 0
13597 405 536 0
13597 405 538 0
13597 405 540 0
c (((aux463 + shift(x_00003_00001, -1) + shift(x_00002_00002, -1))<=21)=tv=SATLiteral(13598))
-13598 161 1881 0
-13598 163 1879 0
-13598 165 1877 0
-13598 272 159 1881 0
-13598 272 161 1879 0
-13598 272 163 1877 0
-13598 272 165 1875 0
-13598 273 157 1881 0
-13598 273 159 1879 0
-13598 273 161 1877 0
-13598 273 163 1875 0
-13598 273 165 1873 0
-13598 275 155 1881 0
-13598 275 157 1879 0
-13598 275 159 1877 0
-13598 275 161 1875 0
-13598 275 163 1873 0
-13598 275 165 1871 0
-13598 277 153 1881 0
-13598 277 155 1879 0
-13598 277 157 1877 0
-13598 277 159 1875 0
-13598 277 161 1873 0
-13598 277 163 1871 0
-13598 277 165 1869 0
-13598 279 152 1881 0
-13598 279 153 1879 0
-13598 279 155 1877 0
-13598 279 157 1875 0
-13598 279 159 1873 0
-13598 279 161 1871 0
-13598 279 163 1869 0
-13598 279 165 1867 0
-13598 281 1881 0
-13598 281 152 1879 0
-13598 281 153 1877 0
-13598 281 155 1875 0
-13598 281 157 1873 0
-13598 281 159 1871 0
-13598 281 161 1869 0
-13598 281 163 1867 0
-13598 281 165 1865 0
-13598 283 1879 0
-13598 283 152 1877 0
-13598 283 153 1875 0
-13598 283 155 1873 0
-13598 283 157 1871 0
-13598 283 159 1869 0
-13598 283 161 1867 0
-13598 283 163 1865 0
-13598 283 165 1863 0
-13598 285 1877 0
-13598 285 152 1875 0
-13598 285 153 1873 0
-13598 285 155 1871 0
-13598 285 157 1869 0
-13598 285 159 1867 0
-13598 285 161 1865 0
-13598 285 163 1863 0
-13598 285 165 1861 0
13598 -1861 0
13598 -165 -1863 0
13598 -163 -1865 0
13598 -161 -1867 0
13598 -159 -1869 0
13598 -157 -1871 0
13598 -155 -1873 0
13598 -153 -1875 0
13598 -152 -1877 0
13598 -285 -1863 0
13598 -285 -165 -1865 0
13598 -285 -163 -1867 0
13598 -285 -161 -1869 0
13598 -285 -159 -1871 0
13598 -285 -157 -1873 0
13598 -285 -155 -1875 0
13598 -285 -153 -1877 0
13598 -285 -152 -1879 0
13598 -283 -1865 0
13598 -283 -165 -1867 0
13598 -283 -163 -1869 0
13598 -283 -161 -1871 0
13598 -283 -159 -1873 0
13598 -283 -157 -1875 0
13598 -283 -155 -1877 0
13598 -283 -153 -1879 0
13598 -283 -152 -1881 0
13598 -281 -1867 0
13598 -281 -165 -1869 0
13598 -281 -163 -1871 0
13598 -281 -161 -1873 0
13598 -281 -159 -1875 0
13598 -281 -157 -1877 0
13598 -281 -155 -1879 0
13598 -281 -153 -1881 0
13598 -281 -152 0
13598 -279 -1869 0
13598 -279 -165 -1871 0
13598 -279 -163 -1873 0
13598 -279 -161 -1875 0
13598 -279 -159 -1877 0
13598 -279 -157 -1879 0
13598 -279 -155 -1881 0
13598 -279 -153 0
13598 -279 -152 0
13598 -277 -1871 0
13598 -277 -165 -1873 0
13598 -277 -163 -1875 0
13598 -277 -161 -1877 0
13598 -277 -159 -1879 0
13598 -277 -157 -1881 0
13598 -277 -155 0
13598 -277 -153 0
13598 -277 -152 0
13598 -275 -1873 0
13598 -275 -165 -1875 0
13598 -275 -163 -1877 0
13598 -275 -161 -1879 0
13598 -275 -159 -1881 0
13598 -275 -157 0
13598 -275 -155 0
13598 -275 -153 0
13598 -275 -152 0
13598 -273 -1875 0
13598 -273 -165 -1877 0
13598 -273 -163 -1879 0
13598 -273 -161 -1881 0
13598 -273 -159 0
13598 -273 -157 0
13598 -273 -155 0
13598 -273 -153 0
13598 -273 -152 0
13598 -272 -1877 0
13598 -272 -165 -1879 0
13598 -272 -163 -1881 0
13598 -272 -161 0
13598 -272 -159 0
13598 -272 -157 0
13598 -272 -155 0
13598 -272 -153 0
13598 -272 -152 0
c ((21<=(aux463 + shift(x_00003_00001, -1) + shift(x_00002_00002, -1)))=tv=SATLiteral(13599))
-13599 -1859 0
-13599 -165 -1861 0
-13599 -163 -1863 0
-13599 -161 -1865 0
-13599 -159 -1867 0
-13599 -157 -1869 0
-13599 -155 -1871 0
-13599 -153 -1873 0
-13599 -152 -1875 0
-13599 -285 -1861 0
-13599 -285 -165 -1863 0
-13599 -285 -163 -1865 0
-13599 -285 -161 -1867 0
-13599 -285 -159 -1869 0
-13599 -285 -157 -1871 0
-13599 -285 -155 -1873 0
-13599 -285 -153 -1875 0
-13599 -285 -152 -1877 0
-13599 -283 -1863 0
-13599 -283 -165 -1865 0
-13599 -283 -163 -1867 0
-13599 -283 -161 -1869 0
-13599 -283 -159 -1871 0
-13599 -283 -157 -1873 0
-13599 -283 -155 -1875 0
-13599 -283 -153 -1877 0
-13599 -283 -152 -1879 0
-13599 -281 -1865 0
-13599 -281 -165 -1867 0
-13599 -281 -163 -1869 0
-13599 -281 -161 -1871 0
-13599 -281 -159 -1873 0
-13599 -281 -157 -1875 0
-13599 -281 -155 -1877 0
-13599 -281 -153 -1879 0
-13599 -281 -152 -1881 0
-13599 -279 -1867 0
-13599 -279 -165 -1869 0
-13599 -279 -163 -1871 0
-13599 -279 -161 -1873 0
-13599 -279 -159 -1875 0
-13599 -279 -157 -1877 0
-13599 -279 -155 -1879 0
-13599 -279 -153 -1881 0
-13599 -279 -152 0
-13599 -277 -1869 0
-13599 -277 -165 -1871 0
-13599 -277 -163 -1873 0
-13599 -277 -161 -1875 0
-13599 -277 -159 -1877 0
-13599 -277 -157 -1879 0
-13599 -277 -155 -1881 0
-13599 -277 -153 0
-13599 -277 -152 0
-13599 -275 -1871 0
-13599 -275 -165 -1873 0
-13599 -275 -163 -1875 0
-13599 -275 -161 -1877 0
-13599 -275 -159 -1879 0
-13599 -275 -157 -1881 0
-13599 -275 -155 0
-13599 -275 -153 0
-13599 -275 -152 0
-13599 -273 -1873 0
-13599 -273 -165 -1875 0
-13599 -273 -163 -1877 0
-13599 -273 -161 -1879 0
-13599 -273 -159 -1881 0
-13599 -273 -157 0
-13599 -273 -155 0
-13599 -273 -153 0
-13599 -273 -152 0
-13599 -272 -1875 0
-13599 -272 -165 -1877 0
-13599 -272 -163 -1879 0
-13599 -272 -161 -1881 0
-13599 -272 -159 0
-13599 -272 -157 0
-13599 -272 -155 0
-13599 -272 -153 0
-13599 -272 -152 0
13599 159 1881 0
13599 161 1879 0
13599 163 1877 0
13599 165 1875 0
13599 272 157 1881 0
13599 272 159 1879 0
13599 272 161 1877 0
13599 272 163 1875 0
13599 272 165 1873 0
13599 273 155 1881 0
13599 273 157 1879 0
13599 273 159 1877 0
13599 273 161 1875 0
13599 273 163 1873 0
13599 273 165 1871 0
13599 275 153 1881 0
13599 275 155 1879 0
13599 275 157 1877 0
13599 275 159 1875 0
13599 275 161 1873 0
13599 275 163 1871 0
13599 275 165 1869 0
13599 277 152 1881 0
13599 277 153 1879 0
13599 277 155 1877 0
13599 277 157 1875 0
13599 277 159 1873 0
13599 277 161 1871 0
13599 277 163 1869 0
13599 277 165 1867 0
13599 279 1881 0
13599 279 152 1879 0
13599 279 153 1877 0
13599 279 155 1875 0
13599 279 157 1873 0
13599 279 159 1871 0
13599 279 161 1869 0
13599 279 163 1867 0
13599 279 165 1865 0
13599 281 1879 0
13599 281 152 1877 0
13599 281 153 1875 0
13599 281 155 1873 0
13599 281 157 1871 0
13599 281 159 1869 0
13599 281 161 1867 0
13599 281 163 1865 0
13599 281 165 1863 0
13599 283 1877 0
13599 283 152 1875 0
13599 283 153 1873 0
13599 283 155 1871 0
13599 283 157 1869 0
13599 283 159 1867 0
13599 283 161 1865 0
13599 283 163 1863 0
13599 283 165 1861 0
13599 285 1875 0
13599 285 152 1873 0
13599 285 153 1871 0
13599 285 155 1869 0
13599 285 157 1867 0
13599 285 159 1865 0
13599 285 161 1863 0
13599 285 163 1861 0
13599 285 165 1859 0
c (((x_00002_00003 + x_00002_00004)<=17)=tv=SATLiteral(13600))
-13600 180 195 0
13600 -195 0
13600 -180 0
13600 -178 0
13600 -176 0
13600 -174 0
13600 -172 0
13600 -170 0
13600 -168 0
13600 -167 0
c ((17<=(x_00002_00003 + x_00002_00004))=tv=SATLiteral(13601))
-13601 -193 0
-13601 -180 -195 0
-13601 -178 0
-13601 -176 0
-13601 -174 0
-13601 -172 0
-13601 -170 0
-13601 -168 0
-13601 -167 0
13601 178 195 0
13601 180 193 0
c (((x_00003_00003 + x_00003_00004 + x_00004_00004)<=9)=tv=SATLiteral(13602))
-13602 463 0
-13602 317 461 0
-13602 318 459 0
-13602 320 457 0
-13602 322 455 0
-13602 324 453 0
-13602 326 452 0
-13602 328 0
-13602 330 0
-13602 302 461 0
-13602 302 317 459 0
-13602 302 318 457 0
-13602 302 320 455 0
-13602 302 322 453 0
-13602 302 324 452 0
-13602 302 326 0
-13602 302 328 0
-13602 302 330 0
-13602 303 459 0
-13602 303 317 457 0
-13602 303 318 455 0
-13602 303 320 453 0
-13602 303 322 452 0
-13602 303 324 0
-13602 303 326 0
-13602 303 328 0
-13602 303 330 0
-13602 305 457 0
-13602 305 317 455 0
-13602 305 318 453 0
-13602 305 320 452 0
-13602 305 322 0
-13602 305 324 0
-13602 305 326 0
-13602 305 328 0
-13602 305 330 0
-13602 307 455 0
-13602 307 317 453 0
-13602 307 318 452 0
-13602 307 320 0
-13602 307 322 0
-13602 307 324 0
-13602 307 326 0
-13602 307 328 0
-13602 307 330 0
-13602 309 453 0
-13602 309 317 452 0
-13602 309 318 0
-13602 309 320 0
-13602 309 322 0
-13602 309 324 0
-13602 309 326 0
-13602 309 328 0
-13602 309 330 0
-13602 311 452 0
-13602 311 317 0
-13602 311 318 0
-13602 311 320 0
-13602 311 322 0
-13602 311 324 0
-13602 311 326 0
-13602 311 328 0
-13602 311 330 0
-13602 313 0
-13602 313 317 0
-13602 313 318 0
-13602 313 320 0
-13602 313 322 0
-13602 313 324 0
-13602 313 326 0
-13602 313 328 0
-13602 313 330 0
-13602 315 0
-13602 315 317 0
-13602 315 318 0
-13602 315 320 0
-13602 315 322 0
-13602 315 324 0
-13602 315 326 0
-13602 315 328 0
-13602 315 330 0
13602 -313 -317 -452 0
13602 -311 -318 -452 0
13602 -311 -317 -453 0
13602 -309 -320 -452 0
13602 -309 -318 -453 0
13602 -309 -317 -455 0
13602 -307 -322 -452 0
13602 -307 -320 -453 0
13602 -307 -318 -455 0
13602 -307 -317 -457 0
13602 -305 -324 -452 0
13602 -305 -322 -453 0
13602 -305 -320 -455 0
13602 -305 -318 -457 0
13602 -305 -317 -459 0
13602 -303 -326 -452 0
13602 -303 -324 -453 0
13602 -303 -322 -455 0
13602 -303 -320 -457 0
13602 -303 -318 -459 0
13602 -303 -317 -461 0
13602 -302 -328 -452 0
13602 -302 -326 -453 0
13602 -302 -324 -455 0
13602 -302 -322 -457 0
13602 -302 -320 -459 0
13602 -302 -318 -461 0
13602 -302 -317 -463 0
c ((9<=(x_00003_00003 + x_00003_00004 + x_00004_00004))=tv=SATLiteral(13603))
-13603 -311 -317 -452 0
-13603 -309 -318 -452 0
-13603 -309 -317 -453 0
-13603 -307 -320 -452 0
-13603 -307 -318 -453 0
-13603 -307 -317 -455 0
-13603 -305 -322 -452 0
-13603 -305 -320 -453 0
-13603 -305 -318 -455 0
-13603 -305 -317 -457 0
-13603 -303 -324 -452 0
-13603 -303 -322 -453 0
-13603 -303 -320 -455 0
-13603 -303 -318 -457 0
-13603 -303 -317 -459 0
-13603 -302 -326 -452 0
-13603 -302 -324 -453 0
-13603 -302 -322 -455 0
-13603 -302 -320 -457 0
-13603 -302 -318 -459 0
-13603 -302 -317 -461 0
13603 461 0
13603 317 459 0
13603 318 457 0
13603 320 455 0
13603 322 453 0
13603 324 452 0
13603 326 0
13603 328 0
13603 330 0
13603 302 459 0
13603 302 317 457 0
13603 302 318 455 0
13603 302 320 453 0
13603 302 322 452 0
13603 302 324 0
13603 302 326 0
13603 302 328 0
13603 302 330 0
13603 303 457 0
13603 303 317 455 0
13603 303 318 453 0
13603 303 320 452 0
13603 303 322 0
13603 303 324 0
13603 303 326 0
13603 303 328 0
13603 303 330 0
13603 305 455 0
13603 305 317 453 0
13603 305 318 452 0
13603 305 320 0
13603 305 322 0
13603 305 324 0
13603 305 326 0
13603 305 328 0
13603 305 330 0
13603 307 453 0
13603 307 317 452 0
13603 307 318 0
13603 307 320 0
13603 307 322 0
13603 307 324 0
13603 307 326 0
13603 307 328 0
13603 307 330 0
13603 309 452 0
13603 309 317 0
13603 309 318 0
13603 309 320 0
13603 309 322 0
13603 309 324 0
13603 309 326 0
13603 309 328 0
13603 309 330 0
13603 311 0
13603 311 317 0
13603 311 318 0
13603 311 320 0
13603 311 322 0
13603 311 324 0
13603 311 326 0
13603 311 328 0
13603 311 330 0
13603 313 0
13603 313 317 0
13603 313 318 0
13603 313 320 0
13603 313 322 0
13603 313 324 0
13603 313 326 0
13603 313 328 0
13603 313 330 0
13603 315 0
13603 315 317 0
13603 315 318 0
13603 315 320 0
13603 315 322 0
13603 315 324 0
13603 315 326 0
13603 315 328 0
13603 315 330 0
c (((x_00003_00006 + x_00004_00006 + x_00005_00006)<=8)=tv=SATLiteral(13604))
-13604 626 0
-13604 482 624 0
-13604 483 622 0
-13604 485 620 0
-13604 487 618 0
-13604 489 617 0
-13604 491 0
-13604 493 0
-13604 495 0
-13604 347 624 0
-13604 347 482 622 0
-13604 347 483 620 0
-13604 347 485 618 0
-13604 347 487 617 0
-13604 347 489 0
-13604 347 491 0
-13604 347 493 0
-13604 347 495 0
-13604 348 622 0
-13604 348 482 620 0
-13604 348 483 618 0
-13604 348 485 617 0
-13604 348 487 0
-13604 348 489 0
-13604 348 491 0
-13604 348 493 0
-13604 348 495 0
-13604 350 620 0
-13604 350 482 618 0
-13604 350 483 617 0
-13604 350 485 0
-13604 350 487 0
-13604 350 489 0
-13604 350 491 0
-13604 350 493 0
-13604 350 495 0
-13604 352 618 0
-13604 352 482 617 0
-13604 352 483 0
-13604 352 485 0
-13604 352 487 0
-13604 352 489 0
-13604 352 491 0
-13604 352 493 0
-13604 352 495 0
-13604 354 617 0
-13604 354 482 0
-13604 354 483 0
-13604 354 485 0
-13604 354 487 0
-13604 354 489 0
-13604 354 491 0
-13604 354 493 0
-13604 354 495 0
-13604 356 0
-13604 356 482 0
-13604 356 483 0
-13604 356 485 0
-13604 356 487 0
-13604 356 489 0
-13604 356 491 0
-13604 356 493 0
-13604 356 495 0
-13604 358 0
-13604 358 482 0
-13604 358 483 0
-13604 358 485 0
-13604 358 487 0
-13604 358 489 0
-13604 358 491 0
-13604 358 493 0
-13604 358 495 0
-13604 360 0
-13604 360 482 0
-13604 360 483 0
-13604 360 485 0
-13604 360 487 0
-13604 360 489 0
-13604 360 491 0
-13604 360 493 0
-13604 360 495 0
13604 -356 -482 -617 0
13604 -354 -483 -617 0
13604 -354 -482 -618 0
13604 -352 -485 -617 0
13604 -352 -483 -618 0
13604 -352 -482 -620 0
13604 -350 -487 -617 0
13604 -350 -485 -618 0
13604 -350 -483 -620 0
13604 -350 -482 -622 0
13604 -348 -489 -617 0
13604 -348 -487 -618 0
13604 -348 -485 -620 0
13604 -348 -483 -622 0
13604 -348 -482 -624 0
13604 -347 -491 -617 0
13604 -347 -489 -618 0
13604 -347 -487 -620 0
13604 -347 -485 -622 0
13604 -347 -483 -624 0
13604 -347 -482 -626 0
c ((8<=(x_00003_00006 + x_00004_00006 + x_00005_00006))=tv=SATLiteral(13605))
-13605 -354 -482 -617 0
-13605 -352 -483 -617 0
-13605 -352 -482 -618 0
-13605 -350 -485 -617 0
-13605 -350 -483 -618 0
-13605 -350 -482 -620 0
-13605 -348 -487 -617 0
-13605 -348 -485 -618 0
-13605 -348 -483 -620 0
-13605 -348 -482 -622 0
-13605 -347 -489 -617 0
-13605 -347 -487 -618 0
-13605 -347 -485 -620 0
-13605 -347 -483 -622 0
-13605 -347 -482 -624 0
13605 624 0
13605 482 622 0
13605 483 620 0
13605 485 618 0
13605 487 617 0
13605 489 0
13605 491 0
13605 493 0
13605 495 0
13605 347 622 0
13605 347 482 620 0
13605 347 483 618 0
13605 347 485 617 0
13605 347 487 0
13605 347 489 0
13605 347 491 0
13605 347 493 0
13605 347 495 0
13605 348 620 0
13605 348 482 618 0
13605 348 483 617 0
13605 348 485 0
13605 348 487 0
13605 348 489 0
13605 348 491 0
13605 348 493 0
13605 348 495 0
13605 350 618 0
13605 350 482 617 0
13605 350 483 0
13605 350 485 0
13605 350 487 0
13605 350 489 0
13605 350 491 0
13605 350 493 0
13605 350 495 0
13605 352 617 0
13605 352 482 0
13605 352 483 0
13605 352 485 0
13605 352 487 0
13605 352 489 0
13605 352 491 0
13605 352 493 0
13605 352 495 0
13605 354 0
13605 354 482 0
13605 354 483 0
13605 354 485 0
13605 354 487 0
13605 354 489 0
13605 354 491 0
13605 354 493 0
13605 354 495 0
13605 356 0
13605 356 482 0
13605 356 483 0
13605 356 485 0
13605 356 487 0
13605 356 489 0
13605 356 491 0
13605 356 493 0
13605 356 495 0
13605 358 0
13605 358 482 0
13605 358 483 0
13605 358 485 0
13605 358 487 0
13605 358 489 0
13605 358 491 0
13605 358 493 0
13605 358 495 0
13605 360 0
13605 360 482 0
13605 360 483 0
13605 360 485 0
13605 360 487 0
13605 360 489 0
13605 360 491 0
13605 360 493 0
13605 360 495 0
c (((x_00003_00007 + x_00003_00008 + x_00004_00007)<=20)=tv=SATLiteral(13606))
-13606 363 390 510 0
-13606 365 388 510 0
-13606 365 390 508 0
-13606 367 386 510 0
-13606 367 388 508 0
-13606 367 390 506 0
-13606 369 384 510 0
-13606 369 386 508 0
-13606 369 388 506 0
-13606 369 390 504 0
-13606 371 382 510 0
-13606 371 384 508 0
-13606 371 386 506 0
-13606 371 388 504 0
-13606 371 390 502 0
-13606 373 380 510 0
-13606 373 382 508 0
-13606 373 384 506 0
-13606 373 386 504 0
-13606 373 388 502 0
-13606 373 390 500 0
-13606 375 378 510 0
-13606 375 380 508 0
-13606 375 382 506 0
-13606 375 384 504 0
-13606 375 386 502 0
-13606 375 388 500 0
-13606 375 390 498 0
13606 -498 0
13606 -390 -500 0
13606 -388 -502 0
13606 -386 -504 0
13606 -384 -506 0
13606 -382 -508 0
13606 -380 -510 0
13606 -378 0
13606 -377 0
13606 -375 -500 0
13606 -375 -390 -502 0
13606 -375 -388 -504 0
13606 -375 -386 -506 0
13606 -375 -384 -508 0
13606 -375 -382 -510 0
13606 -375 -380 0
13606 -375 -378 0
13606 -375 -377 0
13606 -373 -502 0
13606 -373 -390 -504 0
13606 -373 -388 -506 0
13606 -373 -386 -508 0
13606 -373 -384 -510 0
13606 -373 -382 0
13606 -373 -380 0
13606 -373 -378 0
13606 -373 -377 0
13606 -371 -504 0
13606 -371 -390 -506 0
13606 -371 -388 -508 0
13606 -371 -386 -510 0
13606 -371 -384 0
13606 -371 -382 0
13606 -371 -380 0
13606 -371 -378 0
13606 -371 -377 0
13606 -369 -506 0
13606 -369 -390 -508 0
13606 -369 -388 -510 0
13606 -369 -386 0
13606 -369 -384 0
13606 -369 -382 0
13606 -369 -380 0
13606 -369 -378 0
13606 -369 -377 0
13606 -367 -508 0
13606 -367 -390 -510 0
13606 -367 -388 0
13606 -367 -386 0
13606 -367 -384 0
13606 -367 -382 0
13606 -367 -380 0
13606 -367 -378 0
13606 -367 -377 0
13606 -365 -510 0
13606 -365 -390 0
13606 -365 -388 0
13606 -365 -386 0
13606 -365 -384 0
13606 -365 -382 0
13606 -365 -380 0
13606 -365 -378 0
13606 -365 -377 0
13606 -363 0
13606 -363 -390 0
13606 -363 -388 0
13606 -363 -386 0
13606 -363 -384 0
13606 -363 -382 0
13606 -363 -380 0
13606 -363 -378 0
13606 -363 -377 0
13606 -362 0
13606 -362 -390 0
13606 -362 -388 0
13606 -362 -386 0
13606 -362 -384 0
13606 -362 -382 0
13606 -362 -380 0
13606 -362 -378 0
13606 -362 -377 0
c ((20<=(x_00003_00007 + x_00003_00008 + x_00004_00007))=tv=SATLiteral(13607))
-13607 -497 0
-13607 -390 -498 0
-13607 -388 -500 0
-13607 -386 -502 0
-13607 -384 -504 0
-13607 -382 -506 0
-13607 -380 -508 0
-13607 -378 -510 0
-13607 -377 0
-13607 -375 -498 0
-13607 -375 -390 -500 0
-13607 -375 -388 -502 0
-13607 -375 -386 -504 0
-13607 -375 -384 -506 0
-13607 -375 -382 -508 0
-13607 -375 -380 -510 0
-13607 -375 -378 0
-13607 -375 -377 0
-13607 -373 -500 0
-13607 -373 -390 -502 0
-13607 -373 -388 -504 0
-13607 -373 -386 -506 0
-13607 -373 -384 -508 0
-13607 -373 -382 -510 0
-13607 -373 -380 0
-13607 -373 -378 0
-13607 -373 -377 0
-13607 -371 -502 0
-13607 -371 -390 -504 0
-13607 -371 -388 -506 0
-13607 -371 -386 -508 0
-13607 -371 -384 -510 0
-13607 -371 -382 0
-13607 -371 -380 0
-13607 -371 -378 0
-13607 -371 -377 0
-13607 -369 -504 0
-13607 -369 -390 -506 0
-13607 -369 -388 -508 0
-13607 -369 -386 -510 0
-13607 -369 -384 0
-13607 -369 -382 0
-13607 -369 -380 0
-13607 -369 -378 0
-13607 -369 -377 0
-13607 -367 -506 0
-13607 -367 -390 -508 0
-13607 -367 -388 -510 0
-13607 -367 -386 0
-13607 -367 -384 0
-13607 -367 -382 0
-13607 -367 -380 0
-13607 -367 -378 0
-13607 -367 -377 0
-13607 -365 -508 0
-13607 -365 -390 -510 0
-13607 -365 -388 0
-13607 -365 -386 0
-13607 -365 -384 0
-13607 -365 -382 0
-13607 -365 -380 0
-13607 -365 -378 0
-13607 -365 -377 0
-13607 -363 -510 0
-13607 -363 -390 0
-13607 -363 -388 0
-13607 -363 -386 0
-13607 -363 -384 0
-13607 -363 -382 0
-13607 -363 -380 0
-13607 -363 -378 0
-13607 -363 -377 0
-13607 -362 0
-13607 -362 -390 0
-13607 -362 -388 0
-13607 -362 -386 0
-13607 -362 -384 0
-13607 -362 -382 0
-13607 -362 -380 0
-13607 -362 -378 0
-13607 -362 -377 0
13607 362 390 510 0
13607 363 388 510 0
13607 363 390 508 0
13607 365 386 510 0
13607 365 388 508 0
13607 365 390 506 0
13607 367 384 510 0
13607 367 386 508 0
13607 367 388 506 0
13607 367 390 504 0
13607 369 382 510 0
13607 369 384 508 0
13607 369 386 506 0
13607 369 388 504 0
13607 369 390 502 0
13607 371 380 510 0
13607 371 382 508 0
13607 371 384 506 0
13607 371 386 504 0
13607 371 388 502 0
13607 371 390 500 0
13607 373 378 510 0
13607 373 380 508 0
13607 373 382 506 0
13607 373 384 504 0
13607 373 386 502 0
13607 373 388 500 0
13607 373 390 498 0
13607 375 377 510 0
13607 375 378 508 0
13607 375 380 506 0
13607 375 382 504 0
13607 375 384 502 0
13607 375 386 500 0
13607 375 388 498 0
13607 375 390 497 0
c (((x_00004_00001 + x_00005_00001)<=6)=tv=SATLiteral(13608))
-13608 549 0
-13608 407 547 0
-13608 408 545 0
-13608 410 543 0
-13608 412 542 0
-13608 414 0
-13608 416 0
-13608 418 0
-13608 420 0
13608 -414 -542 0
13608 -412 -543 0
13608 -410 -545 0
13608 -408 -547 0
13608 -407 -549 0
c ((6<=(x_00004_00001 + x_00005_00001))=tv=SATLiteral(13609))
-13609 -412 -542 0
-13609 -410 -543 0
-13609 -408 -545 0
-13609 -407 -547 0
13609 547 0
13609 407 545 0
13609 408 543 0
13609 410 542 0
13609 412 0
13609 414 0
13609 416 0
13609 418 0
13609 420 0
c (((x_00004_00002 + x_00004_00003)<=14)=tv=SATLiteral(13610))
-13610 429 450 0
-13610 431 448 0
-13610 433 446 0
-13610 435 444 0
13610 -444 0
13610 -435 -446 0
13610 -433 -448 0
13610 -431 -450 0
13610 -429 0
13610 -427 0
13610 -425 0
13610 -423 0
13610 -422 0
c ((14<=(x_00004_00002 + x_00004_00003))=tv=SATLiteral(13611))
-13611 -442 0
-13611 -435 -444 0
-13611 -433 -446 0
-13611 -431 -448 0
-13611 -429 -450 0
-13611 -427 0
-13611 -425 0
-13611 -423 0
-13611 -422 0
13611 427 450 0
13611 429 448 0
13611 431 446 0
13611 433 444 0
13611 435 442 0
c (((x_00004_00005 + x_00005_00005 + x_00006_00005)<=17)=tv=SATLiteral(13612))
-13612 613 750 0
-13612 615 748 0
-13612 467 611 750 0
-13612 467 613 748 0
-13612 467 615 746 0
-13612 468 609 750 0
-13612 468 611 748 0
-13612 468 613 746 0
-13612 468 615 744 0
-13612 470 607 750 0
-13612 470 609 748 0
-13612 470 611 746 0
-13612 470 613 744 0
-13612 470 615 742 0
-13612 472 605 750 0
-13612 472 607 748 0
-13612 472 609 746 0
-13612 472 611 744 0
-13612 472 613 742 0
-13612 472 615 740 0
-13612 474 603 750 0
-13612 474 605 748 0
-13612 474 607 746 0
-13612 474 609 744 0
-13612 474 611 742 0
-13612 474 613 740 0
-13612 474 615 738 0
-13612 476 602 750 0
-13612 476 603 748 0
-13612 476 605 746 0
-13612 476 607 744 0
-13612 476 609 742 0
-13612 476 611 740 0
-13612 476 613 738 0
-13612 476 615 737 0
-13612 478 750 0
-13612 478 602 748 0
-13612 478 603 746 0
-13612 478 605 744 0
-13612 478 607 742 0
-13612 478 609 740 0
-13612 478 611 738 0
-13612 478 613 737 0
-13612 478 615 0
-13612 480 748 0
-13612 480 602 746 0
-13612 480 603 744 0
-13612 480 605 742 0
-13612 480 607 740 0
-13612 480 609 738 0
-13612 480 611 737 0
-13612 480 613 0
-13612 480 615 0
13612 -613 -737 0
13612 -611 -738 0
13612 -609 -740 0
13612 -607 -742 0
13612 -605 -744 0
13612 -603 -746 0
13612 -602 -748 0
13612 -480 -615 -737 0
13612 -480 -613 -738 0
13612 -480 -611 -740 0
13612 -480 -609 -742 0
13612 -480 -607 -744 0
13612 -480 -605 -746 0
13612 -480 -603 -748 0
13612 -480 -602 -750 0
13612 -478 -737 0
13612 -478 -615 -738 0
13612 -478 -613 -740 0
13612 -478 -611 -742 0
13612 -478 -609 -744 0
13612 -478 -607 -746 0
13612 -478 -605 -748 0
13612 -478 -603 -750 0
13612 -478 -602 0
13612 -476 -738 0
13612 -476 -615 -740 0
13612 -476 -613 -742 0
13612 -476 -611 -744 0
13612 -476 -609 -746 0
13612 -476 -607 -748 0
13612 -476 -605 -750 0
13612 -476 -603 0
13612 -476 -602 0
13612 -474 -740 0
13612 -474 -615 -742 0
13612 -474 -613 -744 0
13612 -474 -611 -746 0
13612 -474 -609 -748 0
13612 -474 -607 -750 0
13612 -474 -605 0
13612 -474 -603 0
13612 -474 -602 0
13612 -472 -742 0
13612 -472 -615 -744 0
13612 -472 -613 -746 0
13612 -472 -611 -748 0
13612 -472 -609 -750 0
13612 -472 -607 0
13612 -472 -605 0
13612 -472 -603 0
13612 -472 -602 0
13612 -470 -744 0
13612 -470 -615 -746 0
13612 -470 -613 -748 0
13612 -470 -611 -750 0
13612 -470 -609 0
13612 -470 -607 0
13612 -470 -605 0
13612 -470 -603 0
13612 -470 -602 0
13612 -468 -746 0
13612 -468 -615 -748 0
13612 -468 -613 -750 0
13612 -468 -611 0
13612 -468 -609 0
13612 -468 -607 0
13612 -468 -605 0
13612 -468 -603 0
13612 -468 -602 0
13612 -467 -748 0
13612 -467 -615 -750 0
13612 -467 -613 0
13612 -467 -611 0
13612 -467 -609 0
13612 -467 -607 0
13612 -467 -605 0
13612 -467 -603 0
13612 -467 -602 0
c ((17<=(x_00004_00005 + x_00005_00005 + x_00006_00005))=tv=SATLiteral(13613))
-13613 -611 -737 0
-13613 -609 -738 0
-13613 -607 -740 0
-13613 -605 -742 0
-13613 -603 -744 0
-13613 -602 -746 0
-13613 -480 -613 -737 0
-13613 -480 -611 -738 0
-13613 -480 -609 -740 0
-13613 -480 -607 -742 0
-13613 -480 -605 -744 0
-13613 -480 -603 -746 0
-13613 -480 -602 -748 0
-13613 -478 -615 -737 0
-13613 -478 -613 -738 0
-13613 -478 -611 -740 0
-13613 -478 -609 -742 0
-13613 -478 -607 -744 0
-13613 -478 -605 -746 0
-13613 -478 -603 -748 0
-13613 -478 -602 -750 0
-13613 -476 -737 0
-13613 -476 -615 -738 0
-13613 -476 -613 -740 0
-13613 -476 -611 -742 0
-13613 -476 -609 -744 0
-13613 -476 -607 -746 0
-13613 -476 -605 -748 0
-13613 -476 -603 -750 0
-13613 -476 -602 0
-13613 -474 -738 0
-13613 -474 -615 -740 0
-13613 -474 -613 -742 0
-13613 -474 -611 -744 0
-13613 -474 -609 -746 0
-13613 -474 -607 -748 0
-13613 -474 -605 -750 0
-13613 -474 -603 0
-13613 -474 -602 0
-13613 -472 -740 0
-13613 -472 -615 -742 0
-13613 -472 -613 -744 0
-13613 -472 -611 -746 0
-13613 -472 -609 -748 0
-13613 -472 -607 -750 0
-13613 -472 -605 0
-13613 -472 -603 0
-13613 -472 -602 0
-13613 -470 -742 0
-13613 -470 -615 -744 0
-13613 -470 -613 -746 0
-13613 -470 -611 -748 0
-13613 -470 -609 -750 0
-13613 -470 -607 0
-13613 -470 -605 0
-13613 -470 -603 0
-13613 -470 -602 0
-13613 -468 -744 0
-13613 -468 -615 -746 0
-13613 -468 -613 -748 0
-13613 -468 -611 -750 0
-13613 -468 -609 0
-13613 -468 -607 0
-13613 -468 -605 0
-13613 -468 -603 0
-13613 -468 -602 0
-13613 -467 -746 0
-13613 -467 -615 -748 0
-13613 -467 -613 -750 0
-13613 -467 -611 0
-13613 -467 -609 0
-13613 -467 -607 0
-13613 -467 -605 0
-13613 -467 -603 0
-13613 -467 -602 0
13613 611 750 0
13613 613 748 0
13613 615 746 0
13613 467 609 750 0
13613 467 611 748 0
13613 467 613 746 0
13613 467 615 744 0
13613 468 607 750 0
13613 468 609 748 0
13613 468 611 746 0
13613 468 613 744 0
13613 468 615 742 0
13613 470 605 750 0
13613 470 607 748 0
13613 470 609 746 0
13613 470 611 744 0
13613 470 613 742 0
13613 470 615 740 0
13613 472 603 750 0
13613 472 605 748 0
13613 472 607 746 0
13613 472 609 744 0
13613 472 611 742 0
13613 472 613 740 0
13613 472 615 738 0
13613 474 602 750 0
13613 474 603 748 0
13613 474 605 746 0
13613 474 607 744 0
13613 474 609 742 0
13613 474 611 740 0
13613 474 613 738 0
13613 474 615 737 0
13613 476 750 0
13613 476 602 748 0
13613 476 603 746 0
13613 476 605 744 0
13613 476 607 742 0
13613 476 609 740 0
13613 476 611 738 0
13613 476 613 737 0
13613 476 615 0
13613 478 748 0
13613 478 602 746 0
13613 478 603 744 0
13613 478 605 742 0
13613 478 607 740 0
13613 478 609 738 0
13613 478 611 737 0
13613 478 613 0
13613 478 615 0
13613 480 746 0
13613 480 602 744 0
13613 480 603 742 0
13613 480 605 740 0
13613 480 607 738 0
13613 480 609 737 0
13613 480 611 0
13613 480 613 0
13613 480 615 0
c (((x_00004_00008 + x_00005_00007 + x_00005_00008)<=17)=tv=SATLiteral(13614))
-13614 643 660 0
-13614 645 658 0
-13614 512 641 660 0
-13614 512 643 658 0
-13614 512 645 656 0
-13614 513 639 660 0
-13614 513 641 658 0
-13614 513 643 656 0
-13614 513 645 654 0
-13614 515 637 660 0
-13614 515 639 658 0
-13614 515 641 656 0
-13614 515 643 654 0
-13614 515 645 652 0
-13614 517 635 660 0
-13614 517 637 658 0
-13614 517 639 656 0
-13614 517 641 654 0
-13614 517 643 652 0
-13614 517 645 650 0
-13614 519 633 660 0
-13614 519 635 658 0
-13614 519 637 656 0
-13614 519 639 654 0
-13614 519 641 652 0
-13614 519 643 650 0
-13614 519 645 648 0
-13614 521 632 660 0
-13614 521 633 658 0
-13614 521 635 656 0
-13614 521 637 654 0
-13614 521 639 652 0
-13614 521 641 650 0
-13614 521 643 648 0
-13614 521 645 647 0
-13614 523 660 0
-13614 523 632 658 0
-13614 523 633 656 0
-13614 523 635 654 0
-13614 523 637 652 0
-13614 523 639 650 0
-13614 523 641 648 0
-13614 523 643 647 0
-13614 523 645 0
-13614 525 658 0
-13614 525 632 656 0
-13614 525 633 654 0
-13614 525 635 652 0
-13614 525 637 650 0
-13614 525 639 648 0
-13614 525 641 647 0
-13614 525 643 0
-13614 525 645 0
13614 -643 -647 0
13614 -641 -648 0
13614 -639 -650 0
13614 -637 -652 0
13614 -635 -654 0
13614 -633 -656 0
13614 -632 -658 0
13614 -525 -645 -647 0
13614 -525 -643 -648 0
13614 -525 -641 -650 0
13614 -525 -639 -652 0
13614 -525 -637 -654 0
13614 -525 -635 -656 0
13614 -525 -633 -658 0
13614 -525 -632 -660 0
13614 -523 -647 0
13614 -523 -645 -648 0
13614 -523 -643 -650 0
13614 -523 -641 -652 0
13614 -523 -639 -654 0
13614 -523 -637 -656 0
13614 -523 -635 -658 0
13614 -523 -633 -660 0
13614 -523 -632 0
13614 -521 -648 0
13614 -521 -645 -650 0
13614 -521 -643 -652 0
13614 -521 -641 -654 0
13614 -521 -639 -656 0
13614 -521 -637 -658 0
13614 -521 -635 -660 0
13614 -521 -633 0
13614 -521 -632 0
13614 -519 -650 0
13614 -519 -645 -652 0
13614 -519 -643 -654 0
13614 -519 -641 -656 0
13614 -519 -639 -658 0
13614 -519 -637 -660 0
13614 -519 -635 0
13614 -519 -633 0
13614 -519 -632 0
13614 -517 -652 0
13614 -517 -645 -654 0
13614 -517 -643 -656 0
13614 -517 -641 -658 0
13614 -517 -639 -660 0
13614 -517 -637 0
13614 -517 -635 0
13614 -517 -633 0
13614 -517 -632 0
13614 -515 -654 0
13614 -515 -645 -656 0
13614 -515 -643 -658 0
13614 -515 -641 -660 0
13614 -515 -639 0
13614 -515 -637 0
13614 -515 -635 0
13614 -515 -633 0
13614 -515 -632 0
13614 -513 -656 0
13614 -513 -645 -658 0
13614 -513 -643 -660 0
13614 -513 -641 0
13614 -513 -639 0
13614 -513 -637 0
13614 -513 -635 0
13614 -513 -633 0
13614 -513 -632 0
13614 -512 -658 0
13614 -512 -645 -660 0
13614 -512 -643 0
13614 -512 -641 0
13614 -512 -639 0
13614 -512 -637 0
13614 -512 -635 0
13614 -512 -633 0
13614 -512 -632 0
c ((17<=(x_00004_00008 + x_00005_00007 + x_00005_00008))=tv=SATLiteral(13615))
-13615 -641 -647 0
-13615 -639 -648 0
-13615 -637 -650 0
-13615 -635 -652 0
-13615 -633 -654 0
-13615 -632 -656 0
-13615 -525 -643 -647 0
-13615 -525 -641 -648 0
-13615 -525 -639 -650 0
-13615 -525 -637 -652 0
-13615 -525 -635 -654 0
-13615 -525 -633 -656 0
-13615 -525 -632 -658 0
-13615 -523 -645 -647 0
-13615 -523 -643 -648 0
-13615 -523 -641 -650 0
-13615 -523 -639 -652 0
-13615 -523 -637 -654 0
-13615 -523 -635 -656 0
-13615 -523 -633 -658 0
-13615 -523 -632 -660 0
-13615 -521 -647 0
-13615 -521 -645 -648 0
-13615 -521 -643 -650 0
-13615 -521 -641 -652 0
-13615 -521 -639 -654 0
-13615 -521 -637 -656 0
-13615 -521 -635 -658 0
-13615 -521 -633 -660 0
-13615 -521 -632 0
-13615 -519 -648 0
-13615 -519 -645 -650 0
-13615 -519 -643 -652 0
-13615 -519 -641 -654 0
-13615 -519 -639 -656 0
-13615 -519 -637 -658 0
-13615 -519 -635 -660 0
-13615 -519 -633 0
-13615 -519 -632 0
-13615 -517 -650 0
-13615 -517 -645 -652 0
-13615 -517 -643 -654 0
-13615 -517 -641 -656 0
-13615 -517 -639 -658 0
-13615 -517 -637 -660 0
-13615 -517 -635 0
-13615 -517 -633 0
-13615 -517 -632 0
-13615 -515 -652 0
-13615 -515 -645 -654 0
-13615 -515 -643 -656 0
-13615 -515 -641 -658 0
-13615 -515 -639 -660 0
-13615 -515 -637 0
-13615 -515 -635 0
-13615 -515 -633 0
-13615 -515 -632 0
-13615 -513 -654 0
-13615 -513 -645 -656 0
-13615 -513 -643 -658 0
-13615 -513 -641 -660 0
-13615 -513 -639 0
-13615 -513 -637 0
-13615 -513 -635 0
-13615 -513 -633 0
-13615 -513 -632 0
-13615 -512 -656 0
-13615 -512 -645 -658 0
-13615 -512 -643 -660 0
-13615 -512 -641 0
-13615 -512 -639 0
-13615 -512 -637 0
-13615 -512 -635 0
-13615 -512 -633 0
-13615 -512 -632 0
13615 641 660 0
13615 643 658 0
13615 645 656 0
13615 512 639 660 0
13615 512 641 658 0
13615 512 643 656 0
13615 512 645 654 0
13615 513 637 660 0
13615 513 639 658 0
13615 513 641 656 0
13615 513 643 654 0
13615 513 645 652 0
13615 515 635 660 0
13615 515 637 658 0
13615 515 639 656 0
13615 515 641 654 0
13615 515 643 652 0
13615 515 645 650 0
13615 517 633 660 0
13615 517 635 658 0
13615 517 637 656 0
13615 517 639 654 0
13615 517 641 652 0
13615 517 643 650 0
13615 517 645 648 0
13615 519 632 660 0
13615 519 633 658 0
13615 519 635 656 0
13615 519 637 654 0
13615 519 639 652 0
13615 519 641 650 0
13615 519 643 648 0
13615 519 645 647 0
13615 521 660 0
13615 521 632 658 0
13615 521 633 656 0
13615 521 635 654 0
13615 521 637 652 0
13615 521 639 650 0
13615 521 641 648 0
13615 521 643 647 0
13615 521 645 0
13615 523 658 0
13615 523 632 656 0
13615 523 633 654 0
13615 523 635 652 0
13615 523 637 650 0
13615 523 639 648 0
13615 523 641 647 0
13615 523 643 0
13615 523 645 0
13615 525 656 0
13615 525 632 654 0
13615 525 633 652 0
13615 525 635 650 0
13615 525 637 648 0
13615 525 639 647 0
13615 525 641 0
13615 525 643 0
13615 525 645 0
c (((x_00005_00002 + x_00005_00003 + x_00006_00002)<=13)=tv=SATLiteral(13616))
-13616 575 705 0
-13616 577 703 0
-13616 579 701 0
-13616 581 699 0
-13616 583 697 0
-13616 585 695 0
-13616 557 573 705 0
-13616 557 575 703 0
-13616 557 577 701 0
-13616 557 579 699 0
-13616 557 581 697 0
-13616 557 583 695 0
-13616 557 585 693 0
-13616 558 572 705 0
-13616 558 573 703 0
-13616 558 575 701 0
-13616 558 577 699 0
-13616 558 579 697 0
-13616 558 581 695 0
-13616 558 583 693 0
-13616 558 585 692 0
-13616 560 705 0
-13616 560 572 703 0
-13616 560 573 701 0
-13616 560 575 699 0
-13616 560 577 697 0
-13616 560 579 695 0
-13616 560 581 693 0
-13616 560 583 692 0
-13616 560 585 0
-13616 562 703 0
-13616 562 572 701 0
-13616 562 573 699 0
-13616 562 575 697 0
-13616 562 577 695 0
-13616 562 579 693 0
-13616 562 581 692 0
-13616 562 583 0
-13616 562 585 0
-13616 564 701 0
-13616 564 572 699 0
-13616 564 573 697 0
-13616 564 575 695 0
-13616 564 577 693 0
-13616 564 579 692 0
-13616 564 581 0
-13616 564 583 0
-13616 564 585 0
-13616 566 699 0
-13616 566 572 697 0
-13616 566 573 695 0
-13616 566 575 693 0
-13616 566 577 692 0
-13616 566 579 0
-13616 566 581 0
-13616 566 583 0
-13616 566 585 0
-13616 568 697 0
-13616 568 572 695 0
-13616 568 573 693 0
-13616 568 575 692 0
-13616 568 577 0
-13616 568 579 0
-13616 568 581 0
-13616 568 583 0
-13616 568 585 0
-13616 570 695 0
-13616 570 572 693 0
-13616 570 573 692 0
-13616 570 575 0
-13616 570 577 0
-13616 570 579 0
-13616 570 581 0
-13616 570 583 0
-13616 570 585 0
13616 -575 -692 0
13616 -573 -693 0
13616 -572 -695 0
13616 -570 -577 -692 0
13616 -570 -575 -693 0
13616 -570 -573 -695 0
13616 -570 -572 -697 0
13616 -568 -579 -692 0
13616 -568 -577 -693 0
13616 -568 -575 -695 0
13616 -568 -573 -697 0
13616 -568 -572 -699 0
13616 -566 -581 -692 0
13616 -566 -579 -693 0
13616 -566 -577 -695 0
13616 -566 -575 -697 0
13616 -566 -573 -699 0
13616 -566 -572 -701 0
13616 -564 -583 -692 0
13616 -564 -581 -693 0
13616 -564 -579 -695 0
13616 -564 -577 -697 0
13616 -564 -575 -699 0
13616 -564 -573 -701 0
13616 -564 -572 -703 0
13616 -562 -585 -692 0
13616 -562 -583 -693 0
13616 -562 -581 -695 0
13616 -562 -579 -697 0
13616 -562 -577 -699 0
13616 -562 -575 -701 0
13616 -562 -573 -703 0
13616 -562 -572 -705 0
13616 -560 -692 0
13616 -560 -585 -693 0
13616 -560 -583 -695 0
13616 -560 -581 -697 0
13616 -560 -579 -699 0
13616 -560 -577 -701 0
13616 -560 -575 -703 0
13616 -560 -573 -705 0
13616 -560 -572 0
13616 -558 -693 0
13616 -558 -585 -695 0
13616 -558 -583 -697 0
13616 -558 -581 -699 0
13616 -558 -579 -701 0
13616 -558 -577 -703 0
13616 -558 -575 -705 0
13616 -558 -573 0
13616 -558 -572 0
13616 -557 -695 0
13616 -557 -585 -697 0
13616 -557 -583 -699 0
13616 -557 -581 -701 0
13616 -557 -579 -703 0
13616 -557 -577 -705 0
13616 -557 -575 0
13616 -557 -573 0
13616 -557 -572 0
c ((13<=(x_00005_00002 + x_00005_00003 + x_00006_00002))=tv=SATLiteral(13617))
-13617 -573 -692 0
-13617 -572 -693 0
-13617 -570 -575 -692 0
-13617 -570 -573 -693 0
-13617 -570 -572 -695 0
-13617 -568 -577 -692 0
-13617 -568 -575 -693 0
-13617 -568 -573 -695 0
-13617 -568 -572 -697 0
-13617 -566 -579 -692 0
-13617 -566 -577 -693 0
-13617 -566 -575 -695 0
-13617 -566 -573 -697 0
-13617 -566 -572 -699 0
-13617 -564 -581 -692 0
-13617 -564 -579 -693 0
-13617 -564 -577 -695 0
-13617 -564 -575 -697 0
-13617 -564 -573 -699 0
-13617 -564 -572 -701 0
-13617 -562 -583 -692 0
-13617 -562 -581 -693 0
-13617 -562 -579 -695 0
-13617 -562 -577 -697 0
-13617 -562 -575 -699 0
-13617 -562 -573 -701 0
-13617 -562 -572 -703 0
-13617 -560 -585 -692 0
-13617 -560 -583 -693 0
-13617 -560 -581 -695 0
-13617 -560 -579 -697 0
-13617 -560 -577 -699 0
-13617 -560 -575 -701 0
-13617 -560 -573 -703 0
-13617 -560 -572 -705 0
-13617 -558 -692 0
-13617 -558 -585 -693 0
-13617 -558 -583 -695 0
-13617 -558 -581 -697 0
-13617 -558 -579 -699 0
-13617 -558 -577 -701 0
-13617 -558 -575 -703 0
-13617 -558 -573 -705 0
-13617 -558 -572 0
-13617 -557 -693 0
-13617 -557 -585 -695 0
-13617 -557 -583 -697 0
-13617 -557 -581 -699 0
-13617 -557 -579 -701 0
-13617 -557 -577 -703 0
-13617 -557 -575 -705 0
-13617 -557 -573 0
-13617 -557 -572 0
13617 573 705 0
13617 575 703 0
13617 577 701 0
13617 579 699 0
13617 581 697 0
13617 583 695 0
13617 585 693 0
13617 557 572 705 0
13617 557 573 703 0
13617 557 575 701 0
13617 557 577 699 0
13617 557 579 697 0
13617 557 581 695 0
13617 557 583 693 0
13617 557 585 692 0
13617 558 705 0
13617 558 572 703 0
13617 558 573 701 0
13617 558 575 699 0
13617 558 577 697 0
13617 558 579 695 0
13617 558 581 693 0
13617 558 583 692 0
13617 558 585 0
13617 560 703 0
13617 560 572 701 0
13617 560 573 699 0
13617 560 575 697 0
13617 560 577 695 0
13617 560 579 693 0
13617 560 581 692 0
13617 560 583 0
13617 560 585 0
13617 562 701 0
13617 562 572 699 0
13617 562 573 697 0
13617 562 575 695 0
13617 562 577 693 0
13617 562 579 692 0
13617 562 581 0
13617 562 583 0
13617 562 585 0
13617 564 699 0
13617 564 572 697 0
13617 564 573 695 0
13617 564 575 693 0
13617 564 577 692 0
13617 564 579 0
13617 564 581 0
13617 564 583 0
13617 564 585 0
13617 566 697 0
13617 566 572 695 0
13617 566 573 693 0
13617 566 575 692 0
13617 566 577 0
13617 566 579 0
13617 566 581 0
13617 566 583 0
13617 566 585 0
13617 568 695 0
13617 568 572 693 0
13617 568 573 692 0
13617 568 575 0
13617 568 577 0
13617 568 579 0
13617 568 581 0
13617 568 583 0
13617 568 585 0
13617 570 693 0
13617 570 572 692 0
13617 570 573 0
13617 570 575 0
13617 570 577 0
13617 570 579 0
13617 570 581 0
13617 570 583 0
13617 570 585 0
c (((x_00007_00004 + x_00005_00004 + x_00006_00004)<=20)=tv=SATLiteral(13618))
-13618 858 600 735 0
-13618 860 598 735 0
-13618 860 600 733 0
-13618 862 596 735 0
-13618 862 598 733 0
-13618 862 600 731 0
-13618 864 594 735 0
-13618 864 596 733 0
-13618 864 598 731 0
-13618 864 600 729 0
-13618 866 592 735 0
-13618 866 594 733 0
-13618 866 596 731 0
-13618 866 598 729 0
-13618 866 600 727 0
-13618 868 590 735 0
-13618 868 592 733 0
-13618 868 594 731 0
-13618 868 596 729 0
-13618 868 598 727 0
-13618 868 600 725 0
-13618 870 588 735 0
-13618 870 590 733 0
-13618 870 592 731 0
-13618 870 594 729 0
-13618 870 596 727 0
-13618 870 598 725 0
-13618 870 600 723 0
13618 -723 0
13618 -600 -725 0
13618 -598 -727 0
13618 -596 -729 0
13618 -594 -731 0
13618 -592 -733 0
13618 -590 -735 0
13618 -588 0
13618 -587 0
13618 -870 -725 0
13618 -870 -600 -727 0
13618 -870 -598 -729 0
13618 -870 -596 -731 0
13618 -870 -594 -733 0
13618 -870 -592 -735 0
13618 -870 -590 0
13618 -870 -588 0
13618 -870 -587 0
13618 -868 -727 0
13618 -868 -600 -729 0
13618 -868 -598 -731 0
13618 -868 -596 -733 0
13618 -868 -594 -735 0
13618 -868 -592 0
13618 -868 -590 0
13618 -868 -588 0
13618 -868 -587 0
13618 -866 -729 0
13618 -866 -600 -731 0
13618 -866 -598 -733 0
13618 -866 -596 -735 0
13618 -866 -594 0
13618 -866 -592 0
13618 -866 -590 0
13618 -866 -588 0
13618 -866 -587 0
13618 -864 -731 0
13618 -864 -600 -733 0
13618 -864 -598 -735 0
13618 -864 -596 0
13618 -864 -594 0
13618 -864 -592 0
13618 -864 -590 0
13618 -864 -588 0
13618 -864 -587 0
13618 -862 -733 0
13618 -862 -600 -735 0
13618 -862 -598 0
13618 -862 -596 0
13618 -862 -594 0
13618 -862 -592 0
13618 -862 -590 0
13618 -862 -588 0
13618 -862 -587 0
13618 -860 -735 0
13618 -860 -600 0
13618 -860 -598 0
13618 -860 -596 0
13618 -860 -594 0
13618 -860 -592 0
13618 -860 -590 0
13618 -860 -588 0
13618 -860 -587 0
13618 -858 0
13618 -858 -600 0
13618 -858 -598 0
13618 -858 -596 0
13618 -858 -594 0
13618 -858 -592 0
13618 -858 -590 0
13618 -858 -588 0
13618 -858 -587 0
13618 -857 0
13618 -857 -600 0
13618 -857 -598 0
13618 -857 -596 0
13618 -857 -594 0
13618 -857 -592 0
13618 -857 -590 0
13618 -857 -588 0
13618 -857 -587 0
c ((20<=(x_00007_00004 + x_00005_00004 + x_00006_00004))=tv=SATLiteral(13619))
-13619 -722 0
-13619 -600 -723 0
-13619 -598 -725 0
-13619 -596 -727 0
-13619 -594 -729 0
-13619 -592 -731 0
-13619 -590 -733 0
-13619 -588 -735 0
-13619 -587 0
-13619 -870 -723 0
-13619 -870 -600 -725 0
-13619 -870 -598 -727 0
-13619 -870 -596 -729 0
-13619 -870 -594 -731 0
-13619 -870 -592 -733 0
-13619 -870 -590 -735 0
-13619 -870 -588 0
-13619 -870 -587 0
-13619 -868 -725 0
-13619 -868 -600 -727 0
-13619 -868 -598 -729 0
-13619 -868 -596 -731 0
-13619 -868 -594 -733 0
-13619 -868 -592 -735 0
-13619 -868 -590 0
-13619 -868 -588 0
-13619 -868 -587 0
-13619 -866 -727 0
-13619 -866 -600 -729 0
-13619 -866 -598 -731 0
-13619 -866 -596 -733 0
-13619 -866 -594 -735 0
-13619 -866 -592 0
-13619 -866 -590 0
-13619 -866 -588 0
-13619 -866 -587 0
-13619 -864 -729 0
-13619 -864 -600 -731 0
-13619 -864 -598 -733 0
-13619 -864 -596 -735 0
-13619 -864 -594 0
-13619 -864 -592 0
-13619 -864 -590 0
-13619 -864 -588 0
-13619 -864 -587 0
-13619 -862 -731 0
-13619 -862 -600 -733 0
-13619 -862 -598 -735 0
-13619 -862 -596 0
-13619 -862 -594 0
-13619 -862 -592 0
-13619 -862 -590 0
-13619 -862 -588 0
-13619 -862 -587 0
-13619 -860 -733 0
-13619 -860 -600 -735 0
-13619 -860 -598 0
-13619 -860 -596 0
-13619 -860 -594 0
-13619 -860 -592 0
-13619 -860 -590 0
-13619 -860 -588 0
-13619 -860 -587 0
-13619 -858 -735 0
-13619 -858 -600 0
-13619 -858 -598 0
-13619 -858 -596 0
-13619 -858 -594 0
-13619 -858 -592 0
-13619 -858 -590 0
-13619 -858 -588 0
-13619 -858 -587 0
-13619 -857 0
-13619 -857 -600 0
-13619 -857 -598 0
-13619 -857 -596 0
-13619 -857 -594 0
-13619 -857 -592 0
-13619 -857 -590 0
-13619 -857 -588 0
-13619 -857 -587 0
13619 857 600 735 0
13619 858 598 735 0
13619 858 600 733 0
13619 860 596 735 0
13619 860 598 733 0
13619 860 600 731 0
13619 862 594 735 0
13619 862 596 733 0
13619 862 598 731 0
13619 862 600 729 0
13619 864 592 735 0
13619 864 594 733 0
13619 864 596 731 0
13619 864 598 729 0
13619 864 600 727 0
13619 866 590 735 0
13619 866 592 733 0
13619 866 594 731 0
13619 866 596 729 0
13619 866 598 727 0
13619 866 600 725 0
13619 868 588 735 0
13619 868 590 733 0
13619 868 592 731 0
13619 868 594 729 0
13619 868 596 727 0
13619 868 598 725 0
13619 868 600 723 0
13619 870 587 735 0
13619 870 588 733 0
13619 870 590 731 0
13619 870 592 729 0
13619 870 594 727 0
13619 870 596 725 0
13619 870 598 723 0
13619 870 600 722 0
c (((x_00005_00009 + x_00006_00009)<=12)=tv=SATLiteral(13620))
-13620 665 810 0
-13620 667 808 0
-13620 669 806 0
-13620 671 804 0
-13620 673 802 0
-13620 675 800 0
13620 -800 0
13620 -675 -802 0
13620 -673 -804 0
13620 -671 -806 0
13620 -669 -808 0
13620 -667 -810 0
13620 -665 0
13620 -663 0
13620 -662 0
c ((12<=(x_00005_00009 + x_00006_00009))=tv=SATLiteral(13621))
-13621 -798 0
-13621 -675 -800 0
-13621 -673 -802 0
-13621 -671 -804 0
-13621 -669 -806 0
-13621 -667 -808 0
-13621 -665 -810 0
-13621 -663 0
-13621 -662 0
13621 663 810 0
13621 665 808 0
13621 667 806 0
13621 669 804 0
13621 671 802 0
13621 673 800 0
13621 675 798 0
c (((aux464 + shift(x_00008_00001, -1) + shift(x_00009_00001, -1))<=23)=tv=SATLiteral(13622))
-13622 1095 1912 0
-13622 947 1093 1912 0
-13622 947 1095 1910 0
-13622 948 1091 1912 0
-13622 948 1093 1910 0
-13622 948 1095 1908 0
-13622 950 1089 1912 0
-13622 950 1091 1910 0
-13622 950 1093 1908 0
-13622 950 1095 1906 0
-13622 952 1087 1912 0
-13622 952 1089 1910 0
-13622 952 1091 1908 0
-13622 952 1093 1906 0
-13622 952 1095 1904 0
-13622 954 1085 1912 0
-13622 954 1087 1910 0
-13622 954 1089 1908 0
-13622 954 1091 1906 0
-13622 954 1093 1904 0
-13622 954 1095 1902 0
-13622 956 1083 1912 0
-13622 956 1085 1910 0
-13622 956 1087 1908 0
-13622 956 1089 1906 0
-13622 956 1091 1904 0
-13622 956 1093 1902 0
-13622 956 1095 1900 0
-13622 958 1082 1912 0
-13622 958 1083 1910 0
-13622 958 1085 1908 0
-13622 958 1087 1906 0
-13622 958 1089 1904 0
-13622 958 1091 1902 0
-13622 958 1093 1900 0
-13622 958 1095 1898 0
-13622 960 1912 0
-13622 960 1082 1910 0
-13622 960 1083 1908 0
-13622 960 1085 1906 0
-13622 960 1087 1904 0
-13622 960 1089 1902 0
-13622 960 1091 1900 0
-13622 960 1093 1898 0
-13622 960 1095 1896 0
13622 -1896 0
13622 -1095 -1898 0
13622 -1093 -1900 0
13622 -1091 -1902 0
13622 -1089 -1904 0
13622 -1087 -1906 0
13622 -1085 -1908 0
13622 -1083 -1910 0
13622 -1082 -1912 0
13622 -960 -1898 0
13622 -960 -1095 -1900 0
13622 -960 -1093 -1902 0
13622 -960 -1091 -1904 0
13622 -960 -1089 -1906 0
13622 -960 -1087 -1908 0
13622 -960 -1085 -1910 0
13622 -960 -1083 -1912 0
13622 -960 -1082 0
13622 -958 -1900 0
13622 -958 -1095 -1902 0
13622 -958 -1093 -1904 0
13622 -958 -1091 -1906 0
13622 -958 -1089 -1908 0
13622 -958 -1087 -1910 0
13622 -958 -1085 -1912 0
13622 -958 -1083 0
13622 -958 -1082 0
13622 -956 -1902 0
13622 -956 -1095 -1904 0
13622 -956 -1093 -1906 0
13622 -956 -1091 -1908 0
13622 -956 -1089 -1910 0
13622 -956 -1087 -1912 0
13622 -956 -1085 0
13622 -956 -1083 0
13622 -956 -1082 0
13622 -954 -1904 0
13622 -954 -1095 -1906 0
13622 -954 -1093 -1908 0
13622 -954 -1091 -1910 0
13622 -954 -1089 -1912 0
13622 -954 -1087 0
13622 -954 -1085 0
13622 -954 -1083 0
13622 -954 -1082 0
13622 -952 -1906 0
13622 -952 -1095 -1908 0
13622 -952 -1093 -1910 0
13622 -952 -1091 -1912 0
13622 -952 -1089 0
13622 -952 -1087 0
13622 -952 -1085 0
13622 -952 -1083 0
13622 -952 -1082 0
13622 -950 -1908 0
13622 -950 -1095 -1910 0
13622 -950 -1093 -1912 0
13622 -950 -1091 0
13622 -950 -1089 0
13622 -950 -1087 0
13622 -950 -1085 0
13622 -950 -1083 0
13622 -950 -1082 0
13622 -948 -1910 0
13622 -948 -1095 -1912 0
13622 -948 -1093 0
13622 -948 -1091 0
13622 -948 -1089 0
13622 -948 -1087 0
13622 -948 -1085 0
13622 -948 -1083 0
13622 -948 -1082 0
13622 -947 -1912 0
13622 -947 -1095 0
13622 -947 -1093 0
13622 -947 -1091 0
13622 -947 -1089 0
13622 -947 -1087 0
13622 -947 -1085 0
13622 -947 -1083 0
13622 -947 -1082 0
c ((23<=(aux464 + shift(x_00008_00001, -1) + shift(x_00009_00001, -1)))=tv=SATLiteral(13623))
-13623 -1894 0
-13623 -1095 -1896 0
-13623 -1093 -1898 0
-13623 -1091 -1900 0
-13623 -1089 -1902 0
-13623 -1087 -1904 0
-13623 -1085 -1906 0
-13623 -1083 -1908 0
-13623 -1082 -1910 0
-13623 -960 -1896 0
-13623 -960 -1095 -1898 0
-13623 -960 -1093 -1900 0
-13623 -960 -1091 -1902 0
-13623 -960 -1089 -1904 0
-13623 -960 -1087 -1906 0
-13623 -960 -1085 -1908 0
-13623 -960 -1083 -1910 0
-13623 -960 -1082 -1912 0
-13623 -958 -1898 0
-13623 -958 -1095 -1900 0
-13623 -958 -1093 -1902 0
-13623 -958 -1091 -1904 0
-13623 -958 -1089 -1906 0
-13623 -958 -1087 -1908 0
-13623 -958 -1085 -1910 0
-13623 -958 -1083 -1912 0
-13623 -958 -1082 0
-13623 -956 -1900 0
-13623 -956 -1095 -1902 0
-13623 -956 -1093 -1904 0
-13623 -956 -1091 -1906 0
-13623 -956 -1089 -1908 0
-13623 -956 -1087 -1910 0
-13623 -956 -1085 -1912 0
-13623 -956 -1083 0
-13623 -956 -1082 0
-13623 -954 -1902 0
-13623 -954 -1095 -1904 0
-13623 -954 -1093 -1906 0
-13623 -954 -1091 -1908 0
-13623 -954 -1089 -1910 0
-13623 -954 -1087 -1912 0
-13623 -954 -1085 0
-13623 -954 -1083 0
-13623 -954 -1082 0
-13623 -952 -1904 0
-13623 -952 -1095 -1906 0
-13623 -952 -1093 -1908 0
-13623 -952 -1091 -1910 0
-13623 -952 -1089 -1912 0
-13623 -952 -1087 0
-13623 -952 -1085 0
-13623 -952 -1083 0
-13623 -952 -1082 0
-13623 -950 -1906 0
-13623 -950 -1095 -1908 0
-13623 -950 -1093 -1910 0
-13623 -950 -1091 -1912 0
-13623 -950 -1089 0
-13623 -950 -1087 0
-13623 -950 -1085 0
-13623 -950 -1083 0
-13623 -950 -1082 0
-13623 -948 -1908 0
-13623 -948 -1095 -1910 0
-13623 -948 -1093 -1912 0
-13623 -948 -1091 0
-13623 -948 -1089 0
-13623 -948 -1087 0
-13623 -948 -1085 0
-13623 -948 -1083 0
-13623 -948 -1082 0
-13623 -947 -1910 0
-13623 -947 -1095 -1912 0
-13623 -947 -1093 0
-13623 -947 -1091 0
-13623 -947 -1089 0
-13623 -947 -1087 0
-13623 -947 -1085 0
-13623 -947 -1083 0
-13623 -947 -1082 0
13623 1093 1912 0
13623 1095 1910 0
13623 947 1091 1912 0
13623 947 1093 1910 0
13623 947 1095 1908 0
13623 948 1089 1912 0
13623 948 1091 1910 0
13623 948 1093 1908 0
13623 948 1095 1906 0
13623 950 1087 1912 0
13623 950 1089 1910 0
13623 950 1091 1908 0
13623 950 1093 1906 0
13623 950 1095 1904 0
13623 952 1085 1912 0
13623 952 1087 1910 0
13623 952 1089 1908 0
13623 952 1091 1906 0
13623 952 1093 1904 0
13623 952 1095 1902 0
13623 954 1083 1912 0
13623 954 1085 1910 0
13623 954 1087 1908 0
13623 954 1089 1906 0
13623 954 1091 1904 0
13623 954 1093 1902 0
13623 954 1095 1900 0
13623 956 1082 1912 0
13623 956 1083 1910 0
13623 956 1085 1908 0
13623 956 1087 1906 0
13623 956 1089 1904 0
13623 956 1091 1902 0
13623 956 1093 1900 0
13623 956 1095 1898 0
13623 958 1912 0
13623 958 1082 1910 0
13623 958 1083 1908 0
13623 958 1085 1906 0
13623 958 1087 1904 0
13623 958 1089 1902 0
13623 958 1091 1900 0
13623 958 1093 1898 0
13623 958 1095 1896 0
13623 960 1910 0
13623 960 1082 1908 0
13623 960 1083 1906 0
13623 960 1085 1904 0
13623 960 1087 1902 0
13623 960 1089 1900 0
13623 960 1091 1898 0
13623 960 1093 1896 0
13623 960 1095 1894 0
c (((x_00007_00002 + x_00007_00003 + x_00006_00003)<=6)=tv=SATLiteral(13624))
-13624 712 0
-13624 842 710 0
-13624 843 708 0
-13624 845 707 0
-13624 847 0
-13624 849 0
-13624 851 0
-13624 853 0
-13624 855 0
-13624 827 710 0
-13624 827 842 708 0
-13624 827 843 707 0
-13624 827 845 0
-13624 827 847 0
-13624 827 849 0
-13624 827 851 0
-13624 827 853 0
-13624 827 855 0
-13624 828 708 0
-13624 828 842 707 0
-13624 828 843 0
-13624 828 845 0
-13624 828 847 0
-13624 828 849 0
-13624 828 851 0
-13624 828 853 0
-13624 828 855 0
-13624 830 707 0
-13624 830 842 0
-13624 830 843 0
-13624 830 845 0
-13624 830 847 0
-13624 830 849 0
-13624 830 851 0
-13624 830 853 0
-13624 830 855 0
-13624 832 0
-13624 832 842 0
-13624 832 843 0
-13624 832 845 0
-13624 832 847 0
-13624 832 849 0
-13624 832 851 0
-13624 832 853 0
-13624 832 855 0
-13624 834 0
-13624 834 842 0
-13624 834 843 0
-13624 834 845 0
-13624 834 847 0
-13624 834 849 0
-13624 834 851 0
-13624 834 853 0
-13624 834 855 0
-13624 836 0
-13624 836 842 0
-13624 836 843 0
-13624 836 845 0
-13624 836 847 0
-13624 836 849 0
-13624 836 851 0
-13624 836 853 0
-13624 836 855 0
-13624 838 0
-13624 838 842 0
-13624 838 843 0
-13624 838 845 0
-13624 838 847 0
-13624 838 849 0
-13624 838 851 0
-13624 838 853 0
-13624 838 855 0
-13624 840 0
-13624 840 842 0
-13624 840 843 0
-13624 840 845 0
-13624 840 847 0
-13624 840 849 0
-13624 840 851 0
-13624 840 853 0
-13624 840 855 0
13624 -832 -842 -707 0
13624 -830 -843 -707 0
13624 -830 -842 -708 0
13624 -828 -845 -707 0
13624 -828 -843 -708 0
13624 -828 -842 -710 0
13624 -827 -847 -707 0
13624 -827 -845 -708 0
13624 -827 -843 -710 0
13624 -827 -842 -712 0
c ((6<=(x_00007_00002 + x_00007_00003 + x_00006_00003))=tv=SATLiteral(13625))
-13625 -830 -842 -707 0
-13625 -828 -843 -707 0
-13625 -828 -842 -708 0
-13625 -827 -845 -707 0
-13625 -827 -843 -708 0
-13625 -827 -842 -710 0
13625 710 0
13625 842 708 0
13625 843 707 0
13625 845 0
13625 847 0
13625 849 0
13625 851 0
13625 853 0
13625 855 0
13625 827 708 0
13625 827 842 707 0
13625 827 843 0
13625 827 845 0
13625 827 847 0
13625 827 849 0
13625 827 851 0
13625 827 853 0
13625 827 855 0
13625 828 707 0
13625 828 842 0
13625 828 843 0
13625 828 845 0
13625 828 847 0
13625 828 849 0
13625 828 851 0
13625 828 853 0
13625 828 855 0
13625 830 0
13625 830 842 0
13625 830 843 0
13625 830 845 0
13625 830 847 0
13625 830 849 0
13625 830 851 0
13625 830 853 0
13625 830 855 0
13625 832 0
13625 832 842 0
13625 832 843 0
13625 832 845 0
13625 832 847 0
13625 832 849 0
13625 832 851 0
13625 832 853 0
13625 832 855 0
13625 834 0
13625 834 842 0
13625 834 843 0
13625 834 845 0
13625 834 847 0
13625 834 849 0
13625 834 851 0
13625 834 853 0
13625 834 855 0
13625 836 0
13625 836 842 0
13625 836 843 0
13625 836 845 0
13625 836 847 0
13625 836 849 0
13625 836 851 0
13625 836 853 0
13625 836 855 0
13625 838 0
13625 838 842 0
13625 838 843 0
13625 838 845 0
13625 838 847 0
13625 838 849 0
13625 838 851 0
13625 838 853 0
13625 838 855 0
13625 840 0
13625 840 842 0
13625 840 843 0
13625 840 845 0
13625 840 847 0
13625 840 849 0
13625 840 851 0
13625 840 853 0
13625 840 855 0
c (((x_00007_00006 + x_00007_00007 + x_00006_00006)<=20)=tv=SATLiteral(13626))
-13626 888 915 765 0
-13626 890 913 765 0
-13626 890 915 763 0
-13626 892 911 765 0
-13626 892 913 763 0
-13626 892 915 761 0
-13626 894 909 765 0
-13626 894 911 763 0
-13626 894 913 761 0
-13626 894 915 759 0
-13626 896 907 765 0
-13626 896 909 763 0
-13626 896 911 761 0
-13626 896 913 759 0
-13626 896 915 757 0
-13626 898 905 765 0
-13626 898 907 763 0
-13626 898 909 761 0
-13626 898 911 759 0
-13626 898 913 757 0
-13626 898 915 755 0
-13626 900 903 765 0
-13626 900 905 763 0
-13626 900 907 761 0
-13626 900 909 759 0
-13626 900 911 757 0
-13626 900 913 755 0
-13626 900 915 753 0
13626 -753 0
13626 -915 -755 0
13626 -913 -757 0
13626 -911 -759 0
13626 -909 -761 0
13626 -907 -763 0
13626 -905 -765 0
13626 -903 0
13626 -902 0
13626 -900 -755 0
13626 -900 -915 -757 0
13626 -900 -913 -759 0
13626 -900 -911 -761 0
13626 -900 -909 -763 0
13626 -900 -907 -765 0
13626 -900 -905 0
13626 -900 -903 0
13626 -900 -902 0
13626 -898 -757 0
13626 -898 -915 -759 0
13626 -898 -913 -761 0
13626 -898 -911 -763 0
13626 -898 -909 -765 0
13626 -898 -907 0
13626 -898 -905 0
13626 -898 -903 0
13626 -898 -902 0
13626 -896 -759 0
13626 -896 -915 -761 0
13626 -896 -913 -763 0
13626 -896 -911 -765 0
13626 -896 -909 0
13626 -896 -907 0
13626 -896 -905 0
13626 -896 -903 0
13626 -896 -902 0
13626 -894 -761 0
13626 -894 -915 -763 0
13626 -894 -913 -765 0
13626 -894 -911 0
13626 -894 -909 0
13626 -894 -907 0
13626 -894 -905 0
13626 -894 -903 0
13626 -894 -902 0
13626 -892 -763 0
13626 -892 -915 -765 0
13626 -892 -913 0
13626 -892 -911 0
13626 -892 -909 0
13626 -892 -907 0
13626 -892 -905 0
13626 -892 -903 0
13626 -892 -902 0
13626 -890 -765 0
13626 -890 -915 0
13626 -890 -913 0
13626 -890 -911 0
13626 -890 -909 0
13626 -890 -907 0
13626 -890 -905 0
13626 -890 -903 0
13626 -890 -902 0
13626 -888 0
13626 -888 -915 0
13626 -888 -913 0
13626 -888 -911 0
13626 -888 -909 0
13626 -888 -907 0
13626 -888 -905 0
13626 -888 -903 0
13626 -888 -902 0
13626 -887 0
13626 -887 -915 0
13626 -887 -913 0
13626 -887 -911 0
13626 -887 -909 0
13626 -887 -907 0
13626 -887 -905 0
13626 -887 -903 0
13626 -887 -902 0
c ((20<=(x_00007_00006 + x_00007_00007 + x_00006_00006))=tv=SATLiteral(13627))
-13627 -752 0
-13627 -915 -753 0
-13627 -913 -755 0
-13627 -911 -757 0
-13627 -909 -759 0
-13627 -907 -761 0
-13627 -905 -763 0
-13627 -903 -765 0
-13627 -902 0
-13627 -900 -753 0
-13627 -900 -915 -755 0
-13627 -900 -913 -757 0
-13627 -900 -911 -759 0
-13627 -900 -909 -761 0
-13627 -900 -907 -763 0
-13627 -900 -905 -765 0
-13627 -900 -903 0
-13627 -900 -902 0
-13627 -898 -755 0
-13627 -898 -915 -757 0
-13627 -898 -913 -759 0
-13627 -898 -911 -761 0
-13627 -898 -909 -763 0
-13627 -898 -907 -765 0
-13627 -898 -905 0
-13627 -898 -903 0
-13627 -898 -902 0
-13627 -896 -757 0
-13627 -896 -915 -759 0
-13627 -896 -913 -761 0
-13627 -896 -911 -763 0
-13627 -896 -909 -765 0
-13627 -896 -907 0
-13627 -896 -905 0
-13627 -896 -903 0
-13627 -896 -902 0
-13627 -894 -759 0
-13627 -894 -915 -761 0
-13627 -894 -913 -763 0
-13627 -894 -911 -765 0
-13627 -894 -909 0
-13627 -894 -907 0
-13627 -894 -905 0
-13627 -894 -903 0
-13627 -894 -902 0
-13627 -892 -761 0
-13627 -892 -915 -763 0
-13627 -892 -913 -765 0
-13627 -892 -911 0
-13627 -892 -909 0
-13627 -892 -907 0
-13627 -892 -905 0
-13627 -892 -903 0
-13627 -892 -902 0
-13627 -890 -763 0
-13627 -890 -915 -765 0
-13627 -890 -913 0
-13627 -890 -911 0
-13627 -890 -909 0
-13627 -890 -907 0
-13627 -890 -905 0
-13627 -890 -903 0
-13627 -890 -902 0
-13627 -888 -765 0
-13627 -888 -915 0
-13627 -888 -913 0
-13627 -888 -911 0
-13627 -888 -909 0
-13627 -888 -907 0
-13627 -888 -905 0
-13627 -888 -903 0
-13627 -888 -902 0
-13627 -887 0
-13627 -887 -915 0
-13627 -887 -913 0
-13627 -887 -911 0
-13627 -887 -909 0
-13627 -887 -907 0
-13627 -887 -905 0
-13627 -887 -903 0
-13627 -887 -902 0
13627 887 915 765 0
13627 888 913 765 0
13627 888 915 763 0
13627 890 911 765 0
13627 890 913 763 0
13627 890 915 761 0
13627 892 909 765 0
13627 892 911 763 0
13627 892 913 761 0
13627 892 915 759 0
13627 894 907 765 0
13627 894 909 763 0
13627 894 911 761 0
13627 894 913 759 0
13627 894 915 757 0
13627 896 905 765 0
13627 896 907 763 0
13627 896 909 761 0
13627 896 911 759 0
13627 896 913 757 0
13627 896 915 755 0
13627 898 903 765 0
13627 898 905 763 0
13627 898 907 761 0
13627 898 909 759 0
13627 898 911 757 0
13627 898 913 755 0
13627 898 915 753 0
13627 900 902 765 0
13627 900 903 763 0
13627 900 905 761 0
13627 900 907 759 0
13627 900 909 757 0
13627 900 911 755 0
13627 900 913 753 0
13627 900 915 752 0
c (((x_00006_00007 + x_00006_00008)<=6)=tv=SATLiteral(13628))
-13628 789 0
-13628 767 787 0
-13628 768 785 0
-13628 770 783 0
-13628 772 782 0
-13628 774 0
-13628 776 0
-13628 778 0
-13628 780 0
13628 -774 -782 0
13628 -772 -783 0
13628 -770 -785 0
13628 -768 -787 0
13628 -767 -789 0
c ((6<=(x_00006_00007 + x_00006_00008))=tv=SATLiteral(13629))
-13629 -772 -782 0
-13629 -770 -783 0
-13629 -768 -785 0
-13629 -767 -787 0
13629 787 0
13629 767 785 0
13629 768 783 0
13629 770 782 0
13629 772 0
13629 774 0
13629 776 0
13629 778 0
13629 780 0
c (((aux465 + shift(x_00008_00004, -1) + shift(x_00008_00005, -1))<=6)=tv=SATLiteral(13630))
-13630 1925 0
-13630 1007 1923 0
-13630 1008 1921 0
-13630 1010 1919 0
-13630 1012 1917 0
-13630 1014 1915 0
-13630 1016 1914 0
-13630 1018 0
-13630 1020 0
-13630 992 1923 0
-13630 992 1007 1921 0
-13630 992 1008 1919 0
-13630 992 1010 1917 0
-13630 992 1012 1915 0
-13630 992 1014 1914 0
-13630 992 1016 0
-13630 992 1018 0
-13630 992 1020 0
-13630 993 1921 0
-13630 993 1007 1919 0
-13630 993 1008 1917 0
-13630 993 1010 1915 0
-13630 993 1012 1914 0
-13630 993 1014 0
-13630 993 1016 0
-13630 993 1018 0
-13630 993 1020 0
-13630 995 1919 0
-13630 995 1007 1917 0
-13630 995 1008 1915 0
-13630 995 1010 1914 0
-13630 995 1012 0
-13630 995 1014 0
-13630 995 1016 0
-13630 995 1018 0
-13630 995 1020 0
-13630 997 1917 0
-13630 997 1007 1915 0
-13630 997 1008 1914 0
-13630 997 1010 0
-13630 997 1012 0
-13630 997 1014 0
-13630 997 1016 0
-13630 997 1018 0
-13630 997 1020 0
-13630 999 1915 0
-13630 999 1007 1914 0
-13630 999 1008 0
-13630 999 1010 0
-13630 999 1012 0
-13630 999 1014 0
-13630 999 1016 0
-13630 999 1018 0
-13630 999 1020 0
-13630 1001 1914 0
-13630 1001 1007 0
-13630 1001 1008 0
-13630 1001 1010 0
-13630 1001 1012 0
-13630 1001 1014 0
-13630 1001 1016 0
-13630 1001 1018 0
-13630 1001 1020 0
-13630 1003 0
-13630 1003 1007 0
-13630 1003 1008 0
-13630 1003 1010 0
-13630 1003 1012 0
-13630 1003 1014 0
-13630 1003 1016 0
-13630 1003 1018 0
-13630 1003 1020 0
-13630 1005 0
-13630 1005 1007 0
-13630 1005 1008 0
-13630 1005 1010 0
-13630 1005 1012 0
-13630 1005 1014 0
-13630 1005 1016 0
-13630 1005 1018 0
-13630 1005 1020 0
13630 -1003 -1007 -1914 0
13630 -1001 -1008 -1914 0
13630 -1001 -1007 -1915 0
13630 -999 -1010 -1914 0
13630 -999 -1008 -1915 0
13630 -999 -1007 -1917 0
13630 -997 -1012 -1914 0
13630 -997 -1010 -1915 0
13630 -997 -1008 -1917 0
13630 -997 -1007 -1919 0
13630 -995 -1014 -1914 0
13630 -995 -1012 -1915 0
13630 -995 -1010 -1917 0
13630 -995 -1008 -1919 0
13630 -995 -1007 -1921 0
13630 -993 -1016 -1914 0
13630 -993 -1014 -1915 0
13630 -993 -1012 -1917 0
13630 -993 -1010 -1919 0
13630 -993 -1008 -1921 0
13630 -993 -1007 -1923 0
13630 -992 -1018 -1914 0
13630 -992 -1016 -1915 0
13630 -992 -1014 -1917 0
13630 -992 -1012 -1919 0
13630 -992 -1010 -1921 0
13630 -992 -1008 -1923 0
13630 -992 -1007 -1925 0
c ((6<=(aux465 + shift(x_00008_00004, -1) + shift(x_00008_00005, -1)))=tv=SATLiteral(13631))
-13631 -1001 -1007 -1914 0
-13631 -999 -1008 -1914 0
-13631 -999 -1007 -1915 0
-13631 -997 -1010 -1914 0
-13631 -997 -1008 -1915 0
-13631 -997 -1007 -1917 0
-13631 -995 -1012 -1914 0
-13631 -995 -1010 -1915 0
-13631 -995 -1008 -1917 0
-13631 -995 -1007 -1919 0
-13631 -993 -1014 -1914 0
-13631 -993 -1012 -1915 0
-13631 -993 -1010 -1917 0
-13631 -993 -1008 -1919 0
-13631 -993 -1007 -1921 0
-13631 -992 -1016 -1914 0
-13631 -992 -1014 -1915 0
-13631 -992 -1012 -1917 0
-13631 -992 -1010 -1919 0
-13631 -992 -1008 -1921 0
-13631 -992 -1007 -1923 0
13631 1923 0
13631 1007 1921 0
13631 1008 1919 0
13631 1010 1917 0
13631 1012 1915 0
13631 1014 1914 0
13631 1016 0
13631 1018 0
13631 1020 0
13631 992 1921 0
13631 992 1007 1919 0
13631 992 1008 1917 0
13631 992 1010 1915 0
13631 992 1012 1914 0
13631 992 1014 0
13631 992 1016 0
13631 992 1018 0
13631 992 1020 0
13631 993 1919 0
13631 993 1007 1917 0
13631 993 1008 1915 0
13631 993 1010 1914 0
13631 993 1012 0
13631 993 1014 0
13631 993 1016 0
13631 993 1018 0
13631 993 1020 0
13631 995 1917 0
13631 995 1007 1915 0
13631 995 1008 1914 0
13631 995 1010 0
13631 995 1012 0
13631 995 1014 0
13631 995 1016 0
13631 995 1018 0
13631 995 1020 0
13631 997 1915 0
13631 997 1007 1914 0
13631 997 1008 0
13631 997 1010 0
13631 997 1012 0
13631 997 1014 0
13631 997 1016 0
13631 997 1018 0
13631 997 1020 0
13631 999 1914 0
13631 999 1007 0
13631 999 1008 0
13631 999 1010 0
13631 999 1012 0
13631 999 1014 0
13631 999 1016 0
13631 999 1018 0
13631 999 1020 0
13631 1001 0
13631 1001 1007 0
13631 1001 1008 0
13631 1001 1010 0
13631 1001 1012 0
13631 1001 1014 0
13631 1001 1016 0
13631 1001 1018 0
13631 1001 1020 0
13631 1003 0
13631 1003 1007 0
13631 1003 1008 0
13631 1003 1010 0
13631 1003 1012 0
13631 1003 1014 0
13631 1003 1016 0
13631 1003 1018 0
13631 1003 1020 0
13631 1005 0
13631 1005 1007 0
13631 1005 1008 0
13631 1005 1010 0
13631 1005 1012 0
13631 1005 1014 0
13631 1005 1016 0
13631 1005 1018 0
13631 1005 1020 0
c (((shift(x_00007_00009, -1) + aux466 + shift(x_00008_00008, -1))<=10)=tv=SATLiteral(13632))
-13632 1964 0
-13632 1052 1962 0
-13632 1053 1960 0
-13632 1055 1958 0
-13632 1057 1956 0
-13632 1059 1954 0
-13632 1061 1952 0
-13632 1063 1950 0
-13632 1065 1948 0
-13632 932 1962 0
-13632 932 1052 1960 0
-13632 932 1053 1958 0
-13632 932 1055 1956 0
-13632 932 1057 1954 0
-13632 932 1059 1952 0
-13632 932 1061 1950 0
-13632 932 1063 1948 0
-13632 932 1065 1946 0
-13632 933 1960 0
-13632 933 1052 1958 0
-13632 933 1053 1956 0
-13632 933 1055 1954 0
-13632 933 1057 1952 0
-13632 933 1059 1950 0
-13632 933 1061 1948 0
-13632 933 1063 1946 0
-13632 933 1065 1945 0
-13632 935 1958 0
-13632 935 1052 1956 0
-13632 935 1053 1954 0
-13632 935 1055 1952 0
-13632 935 1057 1950 0
-13632 935 1059 1948 0
-13632 935 1061 1946 0
-13632 935 1063 1945 0
-13632 935 1065 0
-13632 937 1956 0
-13632 937 1052 1954 0
-13632 937 1053 1952 0
-13632 937 1055 1950 0
-13632 937 1057 1948 0
-13632 937 1059 1946 0
-13632 937 1061 1945 0
-13632 937 1063 0
-13632 937 1065 0
-13632 939 1954 0
-13632 939 1052 1952 0
-13632 939 1053 1950 0
-13632 939 1055 1948 0
-13632 939 1057 1946 0
-13632 939 1059 1945 0
-13632 939 1061 0
-13632 939 1063 0
-13632 939 1065 0
-13632 941 1952 0
-13632 941 1052 1950 0
-13632 941 1053 1948 0
-13632 941 1055 1946 0
-13632 941 1057 1945 0
-13632 941 1059 0
-13632 941 1061 0
-13632 941 1063 0
-13632 941 1065 0
-13632 943 1950 0
-13632 943 1052 1948 0
-13632 943 1053 1946 0
-13632 943 1055 1945 0
-13632 943 1057 0
-13632 943 1059 0
-13632 943 1061 0
-13632 943 1063 0
-13632 943 1065 0
-13632 945 1948 0
-13632 945 1052 1946 0
-13632 945 1053 1945 0
-13632 945 1055 0
-13632 945 1057 0
-13632 945 1059 0
-13632 945 1061 0
-13632 945 1063 0
-13632 945 1065 0
13632 -1055 -1945 0
13632 -1053 -1946 0
13632 -1052 -1948 0
13632 -945 -1057 -1945 0
13632 -945 -1055 -1946 0
13632 -945 -1053 -1948 0
13632 -945 -1052 -1950 0
13632 -943 -1059 -1945 0
13632 -943 -1057 -1946 0
13632 -943 -1055 -1948 0
13632 -943 -1053 -1950 0
13632 -943 -1052 -1952 0
13632 -941 -1061 -1945 0
13632 -941 -1059 -1946 0
13632 -941 -1057 -1948 0
13632 -941 -1055 -1950 0
13632 -941 -1053 -1952 0
13632 -941 -1052 -1954 0
13632 -939 -1063 -1945 0
13632 -939 -1061 -1946 0
13632 -939 -1059 -1948 0
13632 -939 -1057 -1950 0
13632 -939 -1055 -1952 0
13632 -939 -1053 -1954 0
13632 -939 -1052 -1956 0
13632 -937 -1065 -1945 0
13632 -937 -1063 -1946 0
13632 -937 -1061 -1948 0
13632 -937 -1059 -1950 0
13632 -937 -1057 -1952 0
13632 -937 -1055 -1954 0
13632 -937 -1053 -1956 0
13632 -937 -1052 -1958 0
13632 -935 -1945 0
13632 -935 -1065 -1946 0
13632 -935 -1063 -1948 0
13632 -935 -1061 -1950 0
13632 -935 -1059 -1952 0
13632 -935 -1057 -1954 0
13632 -935 -1055 -1956 0
13632 -935 -1053 -1958 0
13632 -935 -1052 -1960 0
13632 -933 -1946 0
13632 -933 -1065 -1948 0
13632 -933 -1063 -1950 0
13632 -933 -1061 -1952 0
13632 -933 -1059 -1954 0
13632 -933 -1057 -1956 0
13632 -933 -1055 -1958 0
13632 -933 -1053 -1960 0
13632 -933 -1052 -1962 0
13632 -932 -1948 0
13632 -932 -1065 -1950 0
13632 -932 -1063 -1952 0
13632 -932 -1061 -1954 0
13632 -932 -1059 -1956 0
13632 -932 -1057 -1958 0
13632 -932 -1055 -1960 0
13632 -932 -1053 -1962 0
13632 -932 -1052 -1964 0
c ((10<=(shift(x_00007_00009, -1) + aux466 + shift(x_00008_00008, -1)))=tv=SATLiteral(13633))
-13633 -1053 -1945 0
-13633 -1052 -1946 0
-13633 -945 -1055 -1945 0
-13633 -945 -1053 -1946 0
-13633 -945 -1052 -1948 0
-13633 -943 -1057 -1945 0
-13633 -943 -1055 -1946 0
-13633 -943 -1053 -1948 0
-13633 -943 -1052 -1950 0
-13633 -941 -1059 -1945 0
-13633 -941 -1057 -1946 0
-13633 -941 -1055 -1948 0
-13633 -941 -1053 -1950 0
-13633 -941 -1052 -1952 0
-13633 -939 -1061 -1945 0
-13633 -939 -1059 -1946 0
-13633 -939 -1057 -1948 0
-13633 -939 -1055 -1950 0
-13633 -939 -1053 -1952 0
-13633 -939 -1052 -1954 0
-13633 -937 -1063 -1945 0
-13633 -937 -1061 -1946 0
-13633 -937 -1059 -1948 0
-13633 -937 -1057 -1950 0
-13633 -937 -1055 -1952 0
-13633 -937 -1053 -1954 0
-13633 -937 -1052 -1956 0
-13633 -935 -1065 -1945 0
-13633 -935 -1063 -1946 0
-13633 -935 -1061 -1948 0
-13633 -935 -1059 -1950 0
-13633 -935 -1057 -1952 0
-13633 -935 -1055 -1954 0
-13633 -935 -1053 -1956 0
-13633 -935 -1052 -1958 0
-13633 -933 -1945 0
-13633 -933 -1065 -1946 0
-13633 -933 -1063 -1948 0
-13633 -933 -1061 -1950 0
-13633 -933 -1059 -1952 0
-13633 -933 -1057 -1954 0
-13633 -933 -1055 -1956 0
-13633 -933 -1053 -1958 0
-13633 -933 -1052 -1960 0
-13633 -932 -1946 0
-13633 -932 -1065 -1948 0
-13633 -932 -1063 -1950 0
-13633 -932 -1061 -1952 0
-13633 -932 -1059 -1954 0
-13633 -932 -1057 -1956 0
-13633 -932 -1055 -1958 0
-13633 -932 -1053 -1960 0
-13633 -932 -1052 -1962 0
13633 1962 0
13633 1052 1960 0
13633 1053 1958 0
13633 1055 1956 0
13633 1057 1954 0
13633 1059 1952 0
13633 1061 1950 0
13633 1063 1948 0
13633 1065 1946 0
13633 932 1960 0
13633 932 1052 1958 0
13633 932 1053 1956 0
13633 932 1055 1954 0
13633 932 1057 1952 0
13633 932 1059 1950 0
13633 932 1061 1948 0
13633 932 1063 1946 0
13633 932 1065 1945 0
13633 933 1958 0
13633 933 1052 1956 0
13633 933 1053 1954 0
13633 933 1055 1952 0
13633 933 1057 1950 0
13633 933 1059 1948 0
13633 933 1061 1946 0
13633 933 1063 1945 0
13633 933 1065 0
13633 935 1956 0
13633 935 1052 1954 0
13633 935 1053 1952 0
13633 935 1055 1950 0
13633 935 1057 1948 0
13633 935 1059 1946 0
13633 935 1061 1945 0
13633 935 1063 0
13633 935 1065 0
13633 937 1954 0
13633 937 1052 1952 0
13633 937 1053 1950 0
13633 937 1055 1948 0
13633 937 1057 1946 0
13633 937 1059 1945 0
13633 937 1061 0
13633 937 1063 0
13633 937 1065 0
13633 939 1952 0
13633 939 1052 1950 0
13633 939 1053 1948 0
13633 939 1055 1946 0
13633 939 1057 1945 0
13633 939 1059 0
13633 939 1061 0
13633 939 1063 0
13633 939 1065 0
13633 941 1950 0
13633 941 1052 1948 0
13633 941 1053 1946 0
13633 941 1055 1945 0
13633 941 1057 0
13633 941 1059 0
13633 941 1061 0
13633 941 1063 0
13633 941 1065 0
13633 943 1948 0
13633 943 1052 1946 0
13633 943 1053 1945 0
13633 943 1055 0
13633 943 1057 0
13633 943 1059 0
13633 943 1061 0
13633 943 1063 0
13633 943 1065 0
13633 945 1946 0
13633 945 1052 1945 0
13633 945 1053 0
13633 945 1055 0
13633 945 1057 0
13633 945 1059 0
13633 945 1061 0
13633 945 1063 0
13633 945 1065 0
c (((x_00008_00002 + x_00009_00002)<=8)=tv=SATLiteral(13634))
-13634 1108 0
-13634 962 1106 0
-13634 963 1104 0
-13634 965 1102 0
-13634 967 1100 0
-13634 969 1098 0
-13634 971 1097 0
-13634 973 0
-13634 975 0
13634 -973 -1097 0
13634 -971 -1098 0
13634 -969 -1100 0
13634 -967 -1102 0
13634 -965 -1104 0
13634 -963 -1106 0
13634 -962 -1108 0
c ((8<=(x_00008_00002 + x_00009_00002))=tv=SATLiteral(13635))
-13635 -971 -1097 0
-13635 -969 -1098 0
-13635 -967 -1100 0
-13635 -965 -1102 0
-13635 -963 -1104 0
-13635 -962 -1106 0
13635 1106 0
13635 962 1104 0
13635 963 1102 0
13635 965 1100 0
13635 967 1098 0
13635 969 1097 0
13635 971 0
13635 973 0
13635 975 0
c (((x_00008_00003 + x_00009_00003)<=16)=tv=SATLiteral(13636))
-13636 988 1125 0
-13636 990 1123 0
13636 -1123 0
13636 -990 -1125 0
13636 -988 0
13636 -986 0
13636 -984 0
13636 -982 0
13636 -980 0
13636 -978 0
13636 -977 0
c ((16<=(x_00008_00003 + x_00009_00003))=tv=SATLiteral(13637))
-13637 -1121 0
-13637 -990 -1123 0
-13637 -988 -1125 0
-13637 -986 0
-13637 -984 0
-13637 -982 0
-13637 -980 0
-13637 -978 0
-13637 -977 0
13637 986 1125 0
13637 988 1123 0
13637 990 1121 0
c (((x_00008_00006 + x_00008_00007)<=15)=tv=SATLiteral(13638))
-13638 1031 1050 0
-13638 1033 1048 0
-13638 1035 1046 0
13638 -1046 0
13638 -1035 -1048 0
13638 -1033 -1050 0
13638 -1031 0
13638 -1029 0
13638 -1027 0
13638 -1025 0
13638 -1023 0
13638 -1022 0
c ((15<=(x_00008_00006 + x_00008_00007))=tv=SATLiteral(13639))
-13639 -1044 0
-13639 -1035 -1046 0
-13639 -1033 -1048 0
-13639 -1031 -1050 0
-13639 -1029 0
-13639 -1027 0
-13639 -1025 0
-13639 -1023 0
-13639 -1022 0
13639 1029 1050 0
13639 1031 1048 0
13639 1033 1046 0
13639 1035 1044 0
c (((x_00009_00005 + x_00009_00006 + x_00009_00007)<=13)=tv=SATLiteral(13640))
-13640 1160 1185 0
-13640 1162 1183 0
-13640 1164 1181 0
-13640 1166 1179 0
-13640 1168 1177 0
-13640 1170 1175 0
-13640 1142 1158 1185 0
-13640 1142 1160 1183 0
-13640 1142 1162 1181 0
-13640 1142 1164 1179 0
-13640 1142 1166 1177 0
-13640 1142 1168 1175 0
-13640 1142 1170 1173 0
-13640 1143 1157 1185 0
-13640 1143 1158 1183 0
-13640 1143 1160 1181 0
-13640 1143 1162 1179 0
-13640 1143 1164 1177 0
-13640 1143 1166 1175 0
-13640 1143 1168 1173 0
-13640 1143 1170 1172 0
-13640 1145 1185 0
-13640 1145 1157 1183 0
-13640 1145 1158 1181 0
-13640 1145 1160 1179 0
-13640 1145 1162 1177 0
-13640 1145 1164 1175 0
-13640 1145 1166 1173 0
-13640 1145 1168 1172 0
-13640 1145 1170 0
-13640 1147 1183 0
-13640 1147 1157 1181 0
-13640 1147 1158 1179 0
-13640 1147 1160 1177 0
-13640 1147 1162 1175 0
-13640 1147 1164 1173 0
-13640 1147 1166 1172 0
-13640 1147 1168 0
-13640 1147 1170 0
-13640 1149 1181 0
-13640 1149 1157 1179 0
-13640 1149 1158 1177 0
-13640 1149 1160 1175 0
-13640 1149 1162 1173 0
-13640 1149 1164 1172 0
-13640 1149 1166 0
-13640 1149 1168 0
-13640 1149 1170 0
-13640 1151 1179 0
-13640 1151 1157 1177 0
-13640 1151 1158 1175 0
-13640 1151 1160 1173 0
-13640 1151 1162 1172 0
-13640 1151 1164 0
-13640 1151 1166 0
-13640 1151 1168 0
-13640 1151 1170 0
-13640 1153 1177 0
-13640 1153 1157 1175 0
-13640 1153 1158 1173 0
-13640 1153 1160 1172 0
-13640 1153 1162 0
-13640 1153 1164 0
-13640 1153 1166 0
-13640 1153 1168 0
-13640 1153 1170 0
-13640 1155 1175 0
-13640 1155 1157 1173 0
-13640 1155 1158 1172 0
-13640 1155 1160 0
-13640 1155 1162 0
-13640 1155 1164 0
-13640 1155 1166 0
-13640 1155 1168 0
-13640 1155 1170 0
13640 -1160 -1172 0
13640 -1158 -1173 0
13640 -1157 -1175 0
13640 -1155 -1162 -1172 0
13640 -1155 -1160 -1173 0
13640 -1155 -1158 -1175 0
13640 -1155 -1157 -1177 0
13640 -1153 -1164 -1172 0
13640 -1153 -1162 -1173 0
13640 -1153 -1160 -1175 0
13640 -1153 -1158 -1177 0
13640 -1153 -1157 -1179 0
13640 -1151 -1166 -1172 0
13640 -1151 -1164 -1173 0
13640 -1151 -1162 -1175 0
13640 -1151 -1160 -1177 0
13640 -1151 -1158 -1179 0
13640 -1151 -1157 -1181 0
13640 -1149 -1168 -1172 0
13640 -1149 -1166 -1173 0
13640 -1149 -1164 -1175 0
13640 -1149 -1162 -1177 0
13640 -1149 -1160 -1179 0
13640 -1149 -1158 -1181 0
13640 -1149 -1157 -1183 0
13640 -1147 -1170 -1172 0
13640 -1147 -1168 -1173 0
13640 -1147 -1166 -1175 0
13640 -1147 -1164 -1177 0
13640 -1147 -1162 -1179 0
13640 -1147 -1160 -1181 0
13640 -1147 -1158 -1183 0
13640 -1147 -1157 -1185 0
13640 -1145 -1172 0
13640 -1145 -1170 -1173 0
13640 -1145 -1168 -1175 0
13640 -1145 -1166 -1177 0
13640 -1145 -1164 -1179 0
13640 -1145 -1162 -1181 0
13640 -1145 -1160 -1183 0
13640 -1145 -1158 -1185 0
13640 -1145 -1157 0
13640 -1143 -1173 0
13640 -1143 -1170 -1175 0
13640 -1143 -1168 -1177 0
13640 -1143 -1166 -1179 0
13640 -1143 -1164 -1181 0
13640 -1143 -1162 -1183 0
13640 -1143 -1160 -1185 0
13640 -1143 -1158 0
13640 -1143 -1157 0
13640 -1142 -1175 0
13640 -1142 -1170 -1177 0
13640 -1142 -1168 -1179 0
13640 -1142 -1166 -1181 0
13640 -1142 -1164 -1183 0
13640 -1142 -1162 -1185 0
13640 -1142 -1160 0
13640 -1142 -1158 0
13640 -1142 -1157 0
c ((13<=(x_00009_00005 + x_00009_00006 + x_00009_00007))=tv=SATLiteral(13641))
-13641 -1158 -1172 0
-13641 -1157 -1173 0
-13641 -1155 -1160 -1172 0
-13641 -1155 -1158 -1173 0
-13641 -1155 -1157 -1175 0
-13641 -1153 -1162 -1172 0
-13641 -1153 -1160 -1173 0
-13641 -1153 -1158 -1175 0
-13641 -1153 -1157 -1177 0
-13641 -1151 -1164 -1172 0
-13641 -1151 -1162 -1173 0
-13641 -1151 -1160 -1175 0
-13641 -1151 -1158 -1177 0
-13641 -1151 -1157 -1179 0
-13641 -1149 -1166 -1172 0
-13641 -1149 -1164 -1173 0
-13641 -1149 -1162 -1175 0
-13641 -1149 -1160 -1177 0
-13641 -1149 -1158 -1179 0
-13641 -1149 -1157 -1181 0
-13641 -1147 -1168 -1172 0
-13641 -1147 -1166 -1173 0
-13641 -1147 -1164 -1175 0
-13641 -1147 -1162 -1177 0
-13641 -1147 -1160 -1179 0
-13641 -1147 -1158 -1181 0
-13641 -1147 -1157 -1183 0
-13641 -1145 -1170 -1172 0
-13641 -1145 -1168 -1173 0
-13641 -1145 -1166 -1175 0
-13641 -1145 -1164 -1177 0
-13641 -1145 -1162 -1179 0
-13641 -1145 -1160 -1181 0
-13641 -1145 -1158 -1183 0
-13641 -1145 -1157 -1185 0
-13641 -1143 -1172 0
-13641 -1143 -1170 -1173 0
-13641 -1143 -1168 -1175 0
-13641 -1143 -1166 -1177 0
-13641 -1143 -1164 -1179 0
-13641 -1143 -1162 -1181 0
-13641 -1143 -1160 -1183 0
-13641 -1143 -1158 -1185 0
-13641 -1143 -1157 0
-13641 -1142 -1173 0
-13641 -1142 -1170 -1175 0
-13641 -1142 -1168 -1177 0
-13641 -1142 -1166 -1179 0
-13641 -1142 -1164 -1181 0
-13641 -1142 -1162 -1183 0
-13641 -1142 -1160 -1185 0
-13641 -1142 -1158 0
-13641 -1142 -1157 0
13641 1158 1185 0
13641 1160 1183 0
13641 1162 1181 0
13641 1164 1179 0
13641 1166 1177 0
13641 1168 1175 0
13641 1170 1173 0
13641 1142 1157 1185 0
13641 1142 1158 1183 0
13641 1142 1160 1181 0
13641 1142 1162 1179 0
13641 1142 1164 1177 0
13641 1142 1166 1175 0
13641 1142 1168 1173 0
13641 1142 1170 1172 0
13641 1143 1185 0
13641 1143 1157 1183 0
13641 1143 1158 1181 0
13641 1143 1160 1179 0
13641 1143 1162 1177 0
13641 1143 1164 1175 0
13641 1143 1166 1173 0
13641 1143 1168 1172 0
13641 1143 1170 0
13641 1145 1183 0
13641 1145 1157 1181 0
13641 1145 1158 1179 0
13641 1145 1160 1177 0
13641 1145 1162 1175 0
13641 1145 1164 1173 0
13641 1145 1166 1172 0
13641 1145 1168 0
13641 1145 1170 0
13641 1147 1181 0
13641 1147 1157 1179 0
13641 1147 1158 1177 0
13641 1147 1160 1175 0
13641 1147 1162 1173 0
13641 1147 1164 1172 0
13641 1147 1166 0
13641 1147 1168 0
13641 1147 1170 0
13641 1149 1179 0
13641 1149 1157 1177 0
13641 1149 1158 1175 0
13641 1149 1160 1173 0
13641 1149 1162 1172 0
13641 1149 1164 0
13641 1149 1166 0
13641 1149 1168 0
13641 1149 1170 0
13641 1151 1177 0
13641 1151 1157 1175 0
13641 1151 1158 1173 0
13641 1151 1160 1172 0
13641 1151 1162 0
13641 1151 1164 0
13641 1151 1166 0
13641 1151 1168 0
13641 1151 1170 0
13641 1153 1175 0
13641 1153 1157 1173 0
13641 1153 1158 1172 0
13641 1153 1160 0
13641 1153 1162 0
13641 1153 1164 0
13641 1153 1166 0
13641 1153 1168 0
13641 1153 1170 0
13641 1155 1173 0
13641 1155 1157 1172 0
13641 1155 1158 0
13641 1155 1160 0
13641 1155 1162 0
13641 1155 1164 0
13641 1155 1166 0
13641 1155 1168 0
13641 1155 1170 0
c (((x_00009_00008 + x_00009_00009)<=17)=tv=SATLiteral(13642))
-13642 1200 1215 0
13642 -1215 0
13642 -1200 0
13642 -1198 0
13642 -1196 0
13642 -1194 0
13642 -1192 0
13642 -1190 0
13642 -1188 0
13642 -1187 0
c ((17<=(x_00009_00008 + x_00009_00009))=tv=SATLiteral(13643))
-13643 -1213 0
-13643 -1200 -1215 0
-13643 -1198 0
-13643 -1196 0
-13643 -1194 0
-13643 -1192 0
-13643 -1190 0
-13643 -1188 0
-13643 -1187 0
13643 1198 1215 0
13643 1200 1213 0
c (((aux468 + aux471 + aux472)<=36)=tv=SATLiteral(13644))
-13644 2107 2208 0
-13644 2109 2206 0
-13644 2111 2204 0
-13644 2113 2202 0
-13644 2115 2200 0
-13644 2117 2198 0
-13644 2119 2196 0
-13644 2121 2194 0
-13644 2123 2192 0
-13644 2125 2190 0
-13644 2127 2188 0
-13644 2129 2186 0
-13644 2131 2184 0
-13644 2133 2182 0
-13644 2135 2180 0
-13644 2137 2178 0
-13644 2139 2176 0
-13644 2141 2174 0
-13644 2143 2172 0
-13644 2145 2170 0
-13644 2007 2105 2208 0
-13644 2007 2107 2206 0
-13644 2007 2109 2204 0
-13644 2007 2111 2202 0
-13644 2007 2113 2200 0
-13644 2007 2115 2198 0
-13644 2007 2117 2196 0
-13644 2007 2119 2194 0
-13644 2007 2121 2192 0
-13644 2007 2123 2190 0
-13644 2007 2125 2188 0
-13644 2007 2127 2186 0
-13644 2007 2129 2184 0
-13644 2007 2131 2182 0
-13644 2007 2133 2180 0
-13644 2007 2135 2178 0
-13644 2007 2137 2176 0
-13644 2007 2139 2174 0
-13644 2007 2141 2172 0
-13644 2007 2143 2170 0
-13644 2007 2145 2168 0
-13644 2008 2103 2208 0
-13644 2008 2105 2206 0
-13644 2008 2107 2204 0
-13644 2008 2109 2202 0
-13644 2008 2111 2200 0
-13644 2008 2113 2198 0
-13644 2008 2115 2196 0
-13644 2008 2117 2194 0
-13644 2008 2119 2192 0
-13644 2008 2121 2190 0
-13644 2008 2123 2188 0
-13644 2008 2125 2186 0
-13644 2008 2127 2184 0
-13644 2008 2129 2182 0
-13644 2008 2131 2180 0
-13644 2008 2133 2178 0
-13644 2008 2135 2176 0
-13644 2008 2137 2174 0
-13644 2008 2139 2172 0
-13644 2008 2141 2170 0
-13644 2008 2143 2168 0
-13644 2008 2145 2166 0
-13644 2010 2101 2208 0
-13644 2010 2103 2206 0
-13644 2010 2105 2204 0
-13644 2010 2107 2202 0
-13644 2010 2109 2200 0
-13644 2010 2111 2198 0
-13644 2010 2113 2196 0
-13644 2010 2115 2194 0
-13644 2010 2117 2192 0
-13644 2010 2119 2190 0
-13644 2010 2121 2188 0
-13644 2010 2123 2186 0
-13644 2010 2125 2184 0
-13644 2010 2127 2182 0
-13644 2010 2129 2180 0
-13644 2010 2131 2178 0
-13644 2010 2133 2176 0
-13644 2010 2135 2174 0
-13644 2010 2137 2172 0
-13644 2010 2139 2170 0
-13644 2010 2141 2168 0
-13644 2010 2143 2166 0
-13644 2010 2145 2164 0
-13644 2012 2100 2208 0
-13644 2012 2101 2206 0
-13644 2012 2103 2204 0
-13644 2012 2105 2202 0
-13644 2012 2107 2200 0
-13644 2012 2109 2198 0
-13644 2012 2111 2196 0
-13644 2012 2113 2194 0
-13644 2012 2115 2192 0
-13644 2012 2117 2190 0
-13644 2012 2119 2188 0
-13644 2012 2121 2186 0
-13644 2012 2123 2184 0
-13644 2012 2125 2182 0
-13644 2012 2127 2180 0
-13644 2012 2129 2178 0
-13644 2012 2131 2176 0
-13644 2012 2133 2174 0
-13644 2012 2135 2172 0
-13644 2012 2137 2170 0
-13644 2012 2139 2168 0
-13644 2012 2141 2166 0
-13644 2012 2143 2164 0
-13644 2012 2145 2162 0
-13644 2014 2208 0
-13644 2014 2100 2206 0
-13644 2014 2101 2204 0
-13644 2014 2103 2202 0
-13644 2014 2105 2200 0
-13644 2014 2107 2198 0
-13644 2014 2109 2196 0
-13644 2014 2111 2194 0
-13644 2014 2113 2192 0
-13644 2014 2115 2190 0
-13644 2014 2117 2188 0
-13644 2014 2119 2186 0
-13644 2014 2121 2184 0
-13644 2014 2123 2182 0
-13644 2014 2125 2180 0
-13644 2014 2127 2178 0
-13644 2014 2129 2176 0
-13644 2014 2131 2174 0
-13644 2014 2133 2172 0
-13644 2014 2135 2170 0
-13644 2014 2137 2168 0
-13644 2014 2139 2166 0
-13644 2014 2141 2164 0
-13644 2014 2143 2162 0
-13644 2014 2145 2160 0
-13644 2016 2206 0
-13644 2016 2100 2204 0
-13644 2016 2101 2202 0
-13644 2016 2103 2200 0
-13644 2016 2105 2198 0
-13644 2016 2107 2196 0
-13644 2016 2109 2194 0
-13644 2016 2111 2192 0
-13644 2016 2113 2190 0
-13644 2016 2115 2188 0
-13644 2016 2117 2186 0
-13644 2016 2119 2184 0
-13644 2016 2121 2182 0
-13644 2016 2123 2180 0
-13644 2016 2125 2178 0
-13644 2016 2127 2176 0
-13644 2016 2129 2174 0
-13644 2016 2131 2172 0
-13644 2016 2133 2170 0
-13644 2016 2135 2168 0
-13644 2016 2137 2166 0
-13644 2016 2139 2164 0
-13644 2016 2141 2162 0
-13644 2016 2143 2160 0
-13644 2016 2145 2158 0
-13644 2018 2204 0
-13644 2018 2100 2202 0
-13644 2018 2101 2200 0
-13644 2018 2103 2198 0
-13644 2018 2105 2196 0
-13644 2018 2107 2194 0
-13644 2018 2109 2192 0
-13644 2018 2111 2190 0
-13644 2018 2113 2188 0
-13644 2018 2115 2186 0
-13644 2018 2117 2184 0
-13644 2018 2119 2182 0
-13644 2018 2121 2180 0
-13644 2018 2123 2178 0
-13644 2018 2125 2176 0
-13644 2018 2127 2174 0
-13644 2018 2129 2172 0
-13644 2018 2131 2170 0
-13644 2018 2133 2168 0
-13644 2018 2135 2166 0
-13644 2018 2137 2164 0
-13644 2018 2139 2162 0
-13644 2018 2141 2160 0
-13644 2018 2143 2158 0
-13644 2018 2145 2156 0
-13644 2020 2202 0
-13644 2020 2100 2200 0
-13644 2020 2101 2198 0
-13644 2020 2103 2196 0
-13644 2020 2105 2194 0
-13644 2020 2107 2192 0
-13644 2020 2109 2190 0
-13644 2020 2111 2188 0
-13644 2020 2113 2186 0
-13644 2020 2115 2184 0
-13644 2020 2117 2182 0
-13644 2020 2119 2180 0
-13644 2020 2121 2178 0
-13644 2020 2123 2176 0
-13644 2020 2125 2174 0
-13644 2020 2127 2172 0
-13644 2020 2129 2170 0
-13644 2020 2131 2168 0
-13644 2020 2133 2166 0
-13644 2020 2135 2164 0
-13644 2020 2137 2162 0
-13644 2020 2139 2160 0
-13644 2020 2141 2158 0
-13644 2020 2143 2156 0
-13644 2020 2145 2154 0
-13644 2022 2200 0
-13644 2022 2100 2198 0
-13644 2022 2101 2196 0
-13644 2022 2103 2194 0
-13644 2022 2105 2192 0
-13644 2022 2107 2190 0
-13644 2022 2109 2188 0
-13644 2022 2111 2186 0
-13644 2022 2113 2184 0
-13644 2022 2115 2182 0
-13644 2022 2117 2180 0
-13644 2022 2119 2178 0
-13644 2022 2121 2176 0
-13644 2022 2123 2174 0
-13644 2022 2125 2172 0
-13644 2022 2127 2170 0
-13644 2022 2129 2168 0
-13644 2022 2131 2166 0
-13644 2022 2133 2164 0
-13644 2022 2135 2162 0
-13644 2022 2137 2160 0
-13644 2022 2139 2158 0
-13644 2022 2141 2156 0
-13644 2022 2143 2154 0
-13644 2022 2145 2152 0
-13644 2024 2198 0
-13644 2024 2100 2196 0
-13644 2024 2101 2194 0
-13644 2024 2103 2192 0
-13644 2024 2105 2190 0
-13644 2024 2107 2188 0
-13644 2024 2109 2186 0
-13644 2024 2111 2184 0
-13644 2024 2113 2182 0
-13644 2024 2115 2180 0
-13644 2024 2117 2178 0
-13644 2024 2119 2176 0
-13644 2024 2121 2174 0
-13644 2024 2123 2172 0
-13644 2024 2125 2170 0
-13644 2024 2127 2168 0
-13644 2024 2129 2166 0
-13644 2024 2131 2164 0
-13644 2024 2133 2162 0
-13644 2024 2135 2160 0
-13644 2024 2137 2158 0
-13644 2024 2139 2156 0
-13644 2024 2141 2154 0
-13644 2024 2143 2152 0
-13644 2024 2145 2150 0
-13644 2026 2196 0
-13644 2026 2100 2194 0
-13644 2026 2101 2192 0
-13644 2026 2103 2190 0
-13644 2026 2105 2188 0
-13644 2026 2107 2186 0
-13644 2026 2109 2184 0
-13644 2026 2111 2182 0
-13644 2026 2113 2180 0
-13644 2026 2115 2178 0
-13644 2026 2117 2176 0
-13644 2026 2119 2174 0
-13644 2026 2121 2172 0
-13644 2026 2123 2170 0
-13644 2026 2125 2168 0
-13644 2026 2127 2166 0
-13644 2026 2129 2164 0
-13644 2026 2131 2162 0
-13644 2026 2133 2160 0
-13644 2026 2135 2158 0
-13644 2026 2137 2156 0
-13644 2026 2139 2154 0
-13644 2026 2141 2152 0
-13644 2026 2143 2150 0
-13644 2026 2145 2148 0
-13644 2028 2194 0
-13644 2028 2100 2192 0
-13644 2028 2101 2190 0
-13644 2028 2103 2188 0
-13644 2028 2105 2186 0
-13644 2028 2107 2184 0
-13644 2028 2109 2182 0
-13644 2028 2111 2180 0
-13644 2028 2113 2178 0
-13644 2028 2115 2176 0
-13644 2028 2117 2174 0
-13644 2028 2119 2172 0
-13644 2028 2121 2170 0
-13644 2028 2123 2168 0
-13644 2028 2125 2166 0
-13644 2028 2127 2164 0
-13644 2028 2129 2162 0
-13644 2028 2131 2160 0
-13644 2028 2133 2158 0
-13644 2028 2135 2156 0
-13644 2028 2137 2154 0
-13644 2028 2139 2152 0
-13644 2028 2141 2150 0
-13644 2028 2143 2148 0
-13644 2028 2145 2147 0
-13644 2030 2192 0
-13644 2030 2100 2190 0
-13644 2030 2101 2188 0
-13644 2030 2103 2186 0
-13644 2030 2105 2184 0
-13644 2030 2107 2182 0
-13644 2030 2109 2180 0
-13644 2030 2111 2178 0
-13644 2030 2113 2176 0
-13644 2030 2115 2174 0
-13644 2030 2117 2172 0
-13644 2030 2119 2170 0
-13644 2030 2121 2168 0
-13644 2030 2123 2166 0
-13644 2030 2125 2164 0
-13644 2030 2127 2162 0
-13644 2030 2129 2160 0
-13644 2030 2131 2158 0
-13644 2030 2133 2156 0
-13644 2030 2135 2154 0
-13644 2030 2137 2152 0
-13644 2030 2139 2150 0
-13644 2030 2141 2148 0
-13644 2030 2143 2147 0
-13644 2030 2145 0
-13644 2032 2190 0
-13644 2032 2100 2188 0
-13644 2032 2101 2186 0
-13644 2032 2103 2184 0
-13644 2032 2105 2182 0
-13644 2032 2107 2180 0
-13644 2032 2109 2178 0
-13644 2032 2111 2176 0
-13644 2032 2113 2174 0
-13644 2032 2115 2172 0
-13644 2032 2117 2170 0
-13644 2032 2119 2168 0
-13644 2032 2121 2166 0
-13644 2032 2123 2164 0
-13644 2032 2125 2162 0
-13644 2032 2127 2160 0
-13644 2032 2129 2158 0
-13644 2032 2131 2156 0
-13644 2032 2133 2154 0
-13644 2032 2135 2152 0
-13644 2032 2137 2150 0
-13644 2032 2139 2148 0
-13644 2032 2141 2147 0
-13644 2032 2143 0
-13644 2032 2145 0
-13644 2034 2188 0
-13644 2034 2100 2186 0
-13644 2034 2101 2184 0
-13644 2034 2103 2182 0
-13644 2034 2105 2180 0
-13644 2034 2107 2178 0
-13644 2034 2109 2176 0
-13644 2034 2111 2174 0
-13644 2034 2113 2172 0
-13644 2034 2115 2170 0
-13644 2034 2117 2168 0
-13644 2034 2119 2166 0
-13644 2034 2121 2164 0
-13644 2034 2123 2162 0
-13644 2034 2125 2160 0
-13644 2034 2127 2158 0
-13644 2034 2129 2156 0
-13644 2034 2131 2154 0
-13644 2034 2133 2152 0
-13644 2034 2135 2150 0
-13644 2034 2137 2148 0
-13644 2034 2139 2147 0
-13644 2034 2141 0
-13644 2034 2143 0
-13644 2034 2145 0
-13644 2036 2186 0
-13644 2036 2100 2184 0
-13644 2036 2101 2182 0
-13644 2036 2103 2180 0
-13644 2036 2105 2178 0
-13644 2036 2107 2176 0
-13644 2036 2109 2174 0
-13644 2036 2111 2172 0
-13644 2036 2113 2170 0
-13644 2036 2115 2168 0
-13644 2036 2117 2166 0
-13644 2036 2119 2164 0
-13644 2036 2121 2162 0
-13644 2036 2123 2160 0
-13644 2036 2125 2158 0
-13644 2036 2127 2156 0
-13644 2036 2129 2154 0
-13644 2036 2131 2152 0
-13644 2036 2133 2150 0
-13644 2036 2135 2148 0
-13644 2036 2137 2147 0
-13644 2036 2139 0
-13644 2036 2141 0
-13644 2036 2143 0
-13644 2036 2145 0
13644 -2139 -2147 0
13644 -2137 -2148 0
13644 -2135 -2150 0
13644 -2133 -2152 0
13644 -2131 -2154 0
13644 -2129 -2156 0
13644 -2127 -2158 0
13644 -2125 -2160 0
13644 -2123 -2162 0
13644 -2121 -2164 0
13644 -2119 -2166 0
13644 -2117 -2168 0
13644 -2115 -2170 0
13644 -2113 -2172 0
13644 -2111 -2174 0
13644 -2109 -2176 0
13644 -2107 -2178 0
13644 -2105 -2180 0
13644 -2103 -2182 0
13644 -2101 -2184 0
13644 -2100 -2186 0
13644 -2036 -2141 -2147 0
13644 -2036 -2139 -2148 0
13644 -2036 -2137 -2150 0
13644 -2036 -2135 -2152 0
13644 -2036 -2133 -2154 0
13644 -2036 -2131 -2156 0
13644 -2036 -2129 -2158 0
13644 -2036 -2127 -2160 0
13644 -2036 -2125 -2162 0
13644 -2036 -2123 -2164 0
13644 -2036 -2121 -2166 0
13644 -2036 -2119 -2168 0
13644 -2036 -2117 -2170 0
13644 -2036 -2115 -2172 0
13644 -2036 -2113 -2174 0
13644 -2036 -2111 -2176 0
13644 -2036 -2109 -2178 0
13644 -2036 -2107 -2180 0
13644 -2036 -2105 -2182 0
13644 -2036 -2103 -2184 0
13644 -2036 -2101 -2186 0
13644 -2036 -2100 -2188 0
13644 -2034 -2143 -2147 0
13644 -2034 -2141 -2148 0
13644 -2034 -2139 -2150 0
13644 -2034 -2137 -2152 0
13644 -2034 -2135 -2154 0
13644 -2034 -2133 -2156 0
13644 -2034 -2131 -2158 0
13644 -2034 -2129 -2160 0
13644 -2034 -2127 -2162 0
13644 -2034 -2125 -2164 0
13644 -2034 -2123 -2166 0
13644 -2034 -2121 -2168 0
13644 -2034 -2119 -2170 0
13644 -2034 -2117 -2172 0
13644 -2034 -2115 -2174 0
13644 -2034 -2113 -2176 0
13644 -2034 -2111 -2178 0
13644 -2034 -2109 -2180 0
13644 -2034 -2107 -2182 0
13644 -2034 -2105 -2184 0
13644 -2034 -2103 -2186 0
13644 -2034 -2101 -2188 0
13644 -2034 -2100 -2190 0
13644 -2032 -2145 -2147 0
13644 -2032 -2143 -2148 0
13644 -2032 -2141 -2150 0
13644 -2032 -2139 -2152 0
13644 -2032 -2137 -2154 0
13644 -2032 -2135 -2156 0
13644 -2032 -2133 -2158 0
13644 -2032 -2131 -2160 0
13644 -2032 -2129 -2162 0
13644 -2032 -2127 -2164 0
13644 -2032 -2125 -2166 0
13644 -2032 -2123 -2168 0
13644 -2032 -2121 -2170 0
13644 -2032 -2119 -2172 0
13644 -2032 -2117 -2174 0
13644 -2032 -2115 -2176 0
13644 -2032 -2113 -2178 0
13644 -2032 -2111 -2180 0
13644 -2032 -2109 -2182 0
13644 -2032 -2107 -2184 0
13644 -2032 -2105 -2186 0
13644 -2032 -2103 -2188 0
13644 -2032 -2101 -2190 0
13644 -2032 -2100 -2192 0
13644 -2030 -2147 0
13644 -2030 -2145 -2148 0
13644 -2030 -2143 -2150 0
13644 -2030 -2141 -2152 0
13644 -2030 -2139 -2154 0
13644 -2030 -2137 -2156 0
13644 -2030 -2135 -2158 0
13644 -2030 -2133 -2160 0
13644 -2030 -2131 -2162 0
13644 -2030 -2129 -2164 0
13644 -2030 -2127 -2166 0
13644 -2030 -2125 -2168 0
13644 -2030 -2123 -2170 0
13644 -2030 -2121 -2172 0
13644 -2030 -2119 -2174 0
13644 -2030 -2117 -2176 0
13644 -2030 -2115 -2178 0
13644 -2030 -2113 -2180 0
13644 -2030 -2111 -2182 0
13644 -2030 -2109 -2184 0
13644 -2030 -2107 -2186 0
13644 -2030 -2105 -2188 0
13644 -2030 -2103 -2190 0
13644 -2030 -2101 -2192 0
13644 -2030 -2100 -2194 0
13644 -2028 -2148 0
13644 -2028 -2145 -2150 0
13644 -2028 -2143 -2152 0
13644 -2028 -2141 -2154 0
13644 -2028 -2139 -2156 0
13644 -2028 -2137 -2158 0
13644 -2028 -2135 -2160 0
13644 -2028 -2133 -2162 0
13644 -2028 -2131 -2164 0
13644 -2028 -2129 -2166 0
13644 -2028 -2127 -2168 0
13644 -2028 -2125 -2170 0
13644 -2028 -2123 -2172 0
13644 -2028 -2121 -2174 0
13644 -2028 -2119 -2176 0
13644 -2028 -2117 -2178 0
13644 -2028 -2115 -2180 0
13644 -2028 -2113 -2182 0
13644 -2028 -2111 -2184 0
13644 -2028 -2109 -2186 0
13644 -2028 -2107 -2188 0
13644 -2028 -2105 -2190 0
13644 -2028 -2103 -2192 0
13644 -2028 -2101 -2194 0
13644 -2028 -2100 -2196 0
13644 -2026 -2150 0
13644 -2026 -2145 -2152 0
13644 -2026 -2143 -2154 0
13644 -2026 -2141 -2156 0
13644 -2026 -2139 -2158 0
13644 -2026 -2137 -2160 0
13644 -2026 -2135 -2162 0
13644 -2026 -2133 -2164 0
13644 -2026 -2131 -2166 0
13644 -2026 -2129 -2168 0
13644 -2026 -2127 -2170 0
13644 -2026 -2125 -2172 0
13644 -2026 -2123 -2174 0
13644 -2026 -2121 -2176 0
13644 -2026 -2119 -2178 0
13644 -2026 -2117 -2180 0
13644 -2026 -2115 -2182 0
13644 -2026 -2113 -2184 0
13644 -2026 -2111 -2186 0
13644 -2026 -2109 -2188 0
13644 -2026 -2107 -2190 0
13644 -2026 -2105 -2192 0
13644 -2026 -2103 -2194 0
13644 -2026 -2101 -2196 0
13644 -2026 -2100 -2198 0
13644 -2024 -2152 0
13644 -2024 -2145 -2154 0
13644 -2024 -2143 -2156 0
13644 -2024 -2141 -2158 0
13644 -2024 -2139 -2160 0
13644 -2024 -2137 -2162 0
13644 -2024 -2135 -2164 0
13644 -2024 -2133 -2166 0
13644 -2024 -2131 -2168 0
13644 -2024 -2129 -2170 0
13644 -2024 -2127 -2172 0
13644 -2024 -2125 -2174 0
13644 -2024 -2123 -2176 0
13644 -2024 -2121 -2178 0
13644 -2024 -2119 -2180 0
13644 -2024 -2117 -2182 0
13644 -2024 -2115 -2184 0
13644 -2024 -2113 -2186 0
13644 -2024 -2111 -2188 0
13644 -2024 -2109 -2190 0
13644 -2024 -2107 -2192 0
13644 -2024 -2105 -2194 0
13644 -2024 -2103 -2196 0
13644 -2024 -2101 -2198 0
13644 -2024 -2100 -2200 0
13644 -2022 -2154 0
13644 -2022 -2145 -2156 0
13644 -2022 -2143 -2158 0
13644 -2022 -2141 -2160 0
13644 -2022 -2139 -2162 0
13644 -2022 -2137 -2164 0
13644 -2022 -2135 -2166 0
13644 -2022 -2133 -2168 0
13644 -2022 -2131 -2170 0
13644 -2022 -2129 -2172 0
13644 -2022 -2127 -2174 0
13644 -2022 -2125 -2176 0
13644 -2022 -2123 -2178 0
13644 -2022 -2121 -2180 0
13644 -2022 -2119 -2182 0
13644 -2022 -2117 -2184 0
13644 -2022 -2115 -2186 0
13644 -2022 -2113 -2188 0
13644 -2022 -2111 -2190 0
13644 -2022 -2109 -2192 0
13644 -2022 -2107 -2194 0
13644 -2022 -2105 -2196 0
13644 -2022 -2103 -2198 0
13644 -2022 -2101 -2200 0
13644 -2022 -2100 -2202 0
13644 -2020 -2156 0
13644 -2020 -2145 -2158 0
13644 -2020 -2143 -2160 0
13644 -2020 -2141 -2162 0
13644 -2020 -2139 -2164 0
13644 -2020 -2137 -2166 0
13644 -2020 -2135 -2168 0
13644 -2020 -2133 -2170 0
13644 -2020 -2131 -2172 0
13644 -2020 -2129 -2174 0
13644 -2020 -2127 -2176 0
13644 -2020 -2125 -2178 0
13644 -2020 -2123 -2180 0
13644 -2020 -2121 -2182 0
13644 -2020 -2119 -2184 0
13644 -2020 -2117 -2186 0
13644 -2020 -2115 -2188 0
13644 -2020 -2113 -2190 0
13644 -2020 -2111 -2192 0
13644 -2020 -2109 -2194 0
13644 -2020 -2107 -2196 0
13644 -2020 -2105 -2198 0
13644 -2020 -2103 -2200 0
13644 -2020 -2101 -2202 0
13644 -2020 -2100 -2204 0
13644 -2018 -2158 0
13644 -2018 -2145 -2160 0
13644 -2018 -2143 -2162 0
13644 -2018 -2141 -2164 0
13644 -2018 -2139 -2166 0
13644 -2018 -2137 -2168 0
13644 -2018 -2135 -2170 0
13644 -2018 -2133 -2172 0
13644 -2018 -2131 -2174 0
13644 -2018 -2129 -2176 0
13644 -2018 -2127 -2178 0
13644 -2018 -2125 -2180 0
13644 -2018 -2123 -2182 0
13644 -2018 -2121 -2184 0
13644 -2018 -2119 -2186 0
13644 -2018 -2117 -2188 0
13644 -2018 -2115 -2190 0
13644 -2018 -2113 -2192 0
13644 -2018 -2111 -2194 0
13644 -2018 -2109 -2196 0
13644 -2018 -2107 -2198 0
13644 -2018 -2105 -2200 0
13644 -2018 -2103 -2202 0
13644 -2018 -2101 -2204 0
13644 -2018 -2100 -2206 0
13644 -2016 -2160 0
13644 -2016 -2145 -2162 0
13644 -2016 -2143 -2164 0
13644 -2016 -2141 -2166 0
13644 -2016 -2139 -2168 0
13644 -2016 -2137 -2170 0
13644 -2016 -2135 -2172 0
13644 -2016 -2133 -2174 0
13644 -2016 -2131 -2176 0
13644 -2016 -2129 -2178 0
13644 -2016 -2127 -2180 0
13644 -2016 -2125 -2182 0
13644 -2016 -2123 -2184 0
13644 -2016 -2121 -2186 0
13644 -2016 -2119 -2188 0
13644 -2016 -2117 -2190 0
13644 -2016 -2115 -2192 0
13644 -2016 -2113 -2194 0
13644 -2016 -2111 -2196 0
13644 -2016 -2109 -2198 0
13644 -2016 -2107 -2200 0
13644 -2016 -2105 -2202 0
13644 -2016 -2103 -2204 0
13644 -2016 -2101 -2206 0
13644 -2016 -2100 -2208 0
13644 -2014 -2162 0
13644 -2014 -2145 -2164 0
13644 -2014 -2143 -2166 0
13644 -2014 -2141 -2168 0
13644 -2014 -2139 -2170 0
13644 -2014 -2137 -2172 0
13644 -2014 -2135 -2174 0
13644 -2014 -2133 -2176 0
13644 -2014 -2131 -2178 0
13644 -2014 -2129 -2180 0
13644 -2014 -2127 -2182 0
13644 -2014 -2125 -2184 0
13644 -2014 -2123 -2186 0
13644 -2014 -2121 -2188 0
13644 -2014 -2119 -2190 0
13644 -2014 -2117 -2192 0
13644 -2014 -2115 -2194 0
13644 -2014 -2113 -2196 0
13644 -2014 -2111 -2198 0
13644 -2014 -2109 -2200 0
13644 -2014 -2107 -2202 0
13644 -2014 -2105 -2204 0
13644 -2014 -2103 -2206 0
13644 -2014 -2101 -2208 0
13644 -2014 -2100 0
13644 -2012 -2164 0
13644 -2012 -2145 -2166 0
13644 -2012 -2143 -2168 0
13644 -2012 -2141 -2170 0
13644 -2012 -2139 -2172 0
13644 -2012 -2137 -2174 0
13644 -2012 -2135 -2176 0
13644 -2012 -2133 -2178 0
13644 -2012 -2131 -2180 0
13644 -2012 -2129 -2182 0
13644 -2012 -2127 -2184 0
13644 -2012 -2125 -2186 0
13644 -2012 -2123 -2188 0
13644 -2012 -2121 -2190 0
13644 -2012 -2119 -2192 0
13644 -2012 -2117 -2194 0
13644 -2012 -2115 -2196 0
13644 -2012 -2113 -2198 0
13644 -2012 -2111 -2200 0
13644 -2012 -2109 -2202 0
13644 -2012 -2107 -2204 0
13644 -2012 -2105 -2206 0
13644 -2012 -2103 -2208 0
13644 -2012 -2101 0
13644 -2012 -2100 0
13644 -2010 -2166 0
13644 -2010 -2145 -2168 0
13644 -2010 -2143 -2170 0
13644 -2010 -2141 -2172 0
13644 -2010 -2139 -2174 0
13644 -2010 -2137 -2176 0
13644 -2010 -2135 -2178 0
13644 -2010 -2133 -2180 0
13644 -2010 -2131 -2182 0
13644 -2010 -2129 -2184 0
13644 -2010 -2127 -2186 0
13644 -2010 -2125 -2188 0
13644 -2010 -2123 -2190 0
13644 -2010 -2121 -2192 0
13644 -2010 -2119 -2194 0
13644 -2010 -2117 -2196 0
13644 -2010 -2115 -2198 0
13644 -2010 -2113 -2200 0
13644 -2010 -2111 -2202 0
13644 -2010 -2109 -2204 0
13644 -2010 -2107 -2206 0
13644 -2010 -2105 -2208 0
13644 -2010 -2103 0
13644 -2010 -2101 0
13644 -2010 -2100 0
13644 -2008 -2168 0
13644 -2008 -2145 -2170 0
13644 -2008 -2143 -2172 0
13644 -2008 -2141 -2174 0
13644 -2008 -2139 -2176 0
13644 -2008 -2137 -2178 0
13644 -2008 -2135 -2180 0
13644 -2008 -2133 -2182 0
13644 -2008 -2131 -2184 0
13644 -2008 -2129 -2186 0
13644 -2008 -2127 -2188 0
13644 -2008 -2125 -2190 0
13644 -2008 -2123 -2192 0
13644 -2008 -2121 -2194 0
13644 -2008 -2119 -2196 0
13644 -2008 -2117 -2198 0
13644 -2008 -2115 -2200 0
13644 -2008 -2113 -2202 0
13644 -2008 -2111 -2204 0
13644 -2008 -2109 -2206 0
13644 -2008 -2107 -2208 0
13644 -2008 -2105 0
13644 -2008 -2103 0
13644 -2008 -2101 0
13644 -2008 -2100 0
13644 -2007 -2170 0
13644 -2007 -2145 -2172 0
13644 -2007 -2143 -2174 0
13644 -2007 -2141 -2176 0
13644 -2007 -2139 -2178 0
13644 -2007 -2137 -2180 0
13644 -2007 -2135 -2182 0
13644 -2007 -2133 -2184 0
13644 -2007 -2131 -2186 0
13644 -2007 -2129 -2188 0
13644 -2007 -2127 -2190 0
13644 -2007 -2125 -2192 0
13644 -2007 -2123 -2194 0
13644 -2007 -2121 -2196 0
13644 -2007 -2119 -2198 0
13644 -2007 -2117 -2200 0
13644 -2007 -2115 -2202 0
13644 -2007 -2113 -2204 0
13644 -2007 -2111 -2206 0
13644 -2007 -2109 -2208 0
13644 -2007 -2107 0
13644 -2007 -2105 0
13644 -2007 -2103 0
13644 -2007 -2101 0
13644 -2007 -2100 0
c ((36<=(aux468 + aux471 + aux472))=tv=SATLiteral(13645))
-13645 -2137 -2147 0
-13645 -2135 -2148 0
-13645 -2133 -2150 0
-13645 -2131 -2152 0
-13645 -2129 -2154 0
-13645 -2127 -2156 0
-13645 -2125 -2158 0
-13645 -2123 -2160 0
-13645 -2121 -2162 0
-13645 -2119 -2164 0
-13645 -2117 -2166 0
-13645 -2115 -2168 0
-13645 -2113 -2170 0
-13645 -2111 -2172 0
-13645 -2109 -2174 0
-13645 -2107 -2176 0
-13645 -2105 -2178 0
-13645 -2103 -2180 0
-13645 -2101 -2182 0
-13645 -2100 -2184 0
-13645 -2036 -2139 -2147 0
-13645 -2036 -2137 -2148 0
-13645 -2036 -2135 -2150 0
-13645 -2036 -2133 -2152 0
-13645 -2036 -2131 -2154 0
-13645 -2036 -2129 -2156 0
-13645 -2036 -2127 -2158 0
-13645 -2036 -2125 -2160 0
-13645 -2036 -2123 -2162 0
-13645 -2036 -2121 -2164 0
-13645 -2036 -2119 -2166 0
-13645 -2036 -2117 -2168 0
-13645 -2036 -2115 -2170 0
-13645 -2036 -2113 -2172 0
-13645 -2036 -2111 -2174 0
-13645 -2036 -2109 -2176 0
-13645 -2036 -2107 -2178 0
-13645 -2036 -2105 -2180 0
-13645 -2036 -2103 -2182 0
-13645 -2036 -2101 -2184 0
-13645 -2036 -2100 -2186 0
-13645 -2034 -2141 -2147 0
-13645 -2034 -2139 -2148 0
-13645 -2034 -2137 -2150 0
-13645 -2034 -2135 -2152 0
-13645 -2034 -2133 -2154 0
-13645 -2034 -2131 -2156 0
-13645 -2034 -2129 -2158 0
-13645 -2034 -2127 -2160 0
-13645 -2034 -2125 -2162 0
-13645 -2034 -2123 -2164 0
-13645 -2034 -2121 -2166 0
-13645 -2034 -2119 -2168 0
-13645 -2034 -2117 -2170 0
-13645 -2034 -2115 -2172 0
-13645 -2034 -2113 -2174 0
-13645 -2034 -2111 -2176 0
-13645 -2034 -2109 -2178 0
-13645 -2034 -2107 -2180 0
-13645 -2034 -2105 -2182 0
-13645 -2034 -2103 -2184 0
-13645 -2034 -2101 -2186 0
-13645 -2034 -2100 -2188 0
-13645 -2032 -2143 -2147 0
-13645 -2032 -2141 -2148 0
-13645 -2032 -2139 -2150 0
-13645 -2032 -2137 -2152 0
-13645 -2032 -2135 -2154 0
-13645 -2032 -2133 -2156 0
-13645 -2032 -2131 -2158 0
-13645 -2032 -2129 -2160 0
-13645 -2032 -2127 -2162 0
-13645 -2032 -2125 -2164 0
-13645 -2032 -2123 -2166 0
-13645 -2032 -2121 -2168 0
-13645 -2032 -2119 -2170 0
-13645 -2032 -2117 -2172 0
-13645 -2032 -2115 -2174 0
-13645 -2032 -2113 -2176 0
-13645 -2032 -2111 -2178 0
-13645 -2032 -2109 -2180 0
-13645 -2032 -2107 -2182 0
-13645 -2032 -2105 -2184 0
-13645 -2032 -2103 -2186 0
-13645 -2032 -2101 -2188 0
-13645 -2032 -2100 -2190 0
-13645 -2030 -2145 -2147 0
-13645 -2030 -2143 -2148 0
-13645 -2030 -2141 -2150 0
-13645 -2030 -2139 -2152 0
-13645 -2030 -2137 -2154 0
-13645 -2030 -2135 -2156 0
-13645 -2030 -2133 -2158 0
-13645 -2030 -2131 -2160 0
-13645 -2030 -2129 -2162 0
-13645 -2030 -2127 -2164 0
-13645 -2030 -2125 -2166 0
-13645 -2030 -2123 -2168 0
-13645 -2030 -2121 -2170 0
-13645 -2030 -2119 -2172 0
-13645 -2030 -2117 -2174 0
-13645 -2030 -2115 -2176 0
-13645 -2030 -2113 -2178 0
-13645 -2030 -2111 -2180 0
-13645 -2030 -2109 -2182 0
-13645 -2030 -2107 -2184 0
-13645 -2030 -2105 -2186 0
-13645 -2030 -2103 -2188 0
-13645 -2030 -2101 -2190 0
-13645 -2030 -2100 -2192 0
-13645 -2028 -2147 0
-13645 -2028 -2145 -2148 0
-13645 -2028 -2143 -2150 0
-13645 -2028 -2141 -2152 0
-13645 -2028 -2139 -2154 0
-13645 -2028 -2137 -2156 0
-13645 -2028 -2135 -2158 0
-13645 -2028 -2133 -2160 0
-13645 -2028 -2131 -2162 0
-13645 -2028 -2129 -2164 0
-13645 -2028 -2127 -2166 0
-13645 -2028 -2125 -2168 0
-13645 -2028 -2123 -2170 0
-13645 -2028 -2121 -2172 0
-13645 -2028 -2119 -2174 0
-13645 -2028 -2117 -2176 0
-13645 -2028 -2115 -2178 0
-13645 -2028 -2113 -2180 0
-13645 -2028 -2111 -2182 0
-13645 -2028 -2109 -2184 0
-13645 -2028 -2107 -2186 0
-13645 -2028 -2105 -2188 0
-13645 -2028 -2103 -2190 0
-13645 -2028 -2101 -2192 0
-13645 -2028 -2100 -2194 0
-13645 -2026 -2148 0
-13645 -2026 -2145 -2150 0
-13645 -2026 -2143 -2152 0
-13645 -2026 -2141 -2154 0
-13645 -2026 -2139 -2156 0
-13645 -2026 -2137 -2158 0
-13645 -2026 -2135 -2160 0
-13645 -2026 -2133 -2162 0
-13645 -2026 -2131 -2164 0
-13645 -2026 -2129 -2166 0
-13645 -2026 -2127 -2168 0
-13645 -2026 -2125 -2170 0
-13645 -2026 -2123 -2172 0
-13645 -2026 -2121 -2174 0
-13645 -2026 -2119 -2176 0
-13645 -2026 -2117 -2178 0
-13645 -2026 -2115 -2180 0
-13645 -2026 -2113 -2182 0
-13645 -2026 -2111 -2184 0
-13645 -2026 -2109 -2186 0
-13645 -2026 -2107 -2188 0
-13645 -2026 -2105 -2190 0
-13645 -2026 -2103 -2192 0
-13645 -2026 -2101 -2194 0
-13645 -2026 -2100 -2196 0
-13645 -2024 -2150 0
-13645 -2024 -2145 -2152 0
-13645 -2024 -2143 -2154 0
-13645 -2024 -2141 -2156 0
-13645 -2024 -2139 -2158 0
-13645 -2024 -2137 -2160 0
-13645 -2024 -2135 -2162 0
-13645 -2024 -2133 -2164 0
-13645 -2024 -2131 -2166 0
-13645 -2024 -2129 -2168 0
-13645 -2024 -2127 -2170 0
-13645 -2024 -2125 -2172 0
-13645 -2024 -2123 -2174 0
-13645 -2024 -2121 -2176 0
-13645 -2024 -2119 -2178 0
-13645 -2024 -2117 -2180 0
-13645 -2024 -2115 -2182 0
-13645 -2024 -2113 -2184 0
-13645 -2024 -2111 -2186 0
-13645 -2024 -2109 -2188 0
-13645 -2024 -2107 -2190 0
-13645 -2024 -2105 -2192 0
-13645 -2024 -2103 -2194 0
-13645 -2024 -2101 -2196 0
-13645 -2024 -2100 -2198 0
-13645 -2022 -2152 0
-13645 -2022 -2145 -2154 0
-13645 -2022 -2143 -2156 0
-13645 -2022 -2141 -2158 0
-13645 -2022 -2139 -2160 0
-13645 -2022 -2137 -2162 0
-13645 -2022 -2135 -2164 0
-13645 -2022 -2133 -2166 0
-13645 -2022 -2131 -2168 0
-13645 -2022 -2129 -2170 0
-13645 -2022 -2127 -2172 0
-13645 -2022 -2125 -2174 0
-13645 -2022 -2123 -2176 0
-13645 -2022 -2121 -2178 0
-13645 -2022 -2119 -2180 0
-13645 -2022 -2117 -2182 0
-13645 -2022 -2115 -2184 0
-13645 -2022 -2113 -2186 0
-13645 -2022 -2111 -2188 0
-13645 -2022 -2109 -2190 0
-13645 -2022 -2107 -2192 0
-13645 -2022 -2105 -2194 0
-13645 -2022 -2103 -2196 0
-13645 -2022 -2101 -2198 0
-13645 -2022 -2100 -2200 0
-13645 -2020 -2154 0
-13645 -2020 -2145 -2156 0
-13645 -2020 -2143 -2158 0
-13645 -2020 -2141 -2160 0
-13645 -2020 -2139 -2162 0
-13645 -2020 -2137 -2164 0
-13645 -2020 -2135 -2166 0
-13645 -2020 -2133 -2168 0
-13645 -2020 -2131 -2170 0
-13645 -2020 -2129 -2172 0
-13645 -2020 -2127 -2174 0
-13645 -2020 -2125 -2176 0
-13645 -2020 -2123 -2178 0
-13645 -2020 -2121 -2180 0
-13645 -2020 -2119 -2182 0
-13645 -2020 -2117 -2184 0
-13645 -2020 -2115 -2186 0
-13645 -2020 -2113 -2188 0
-13645 -2020 -2111 -2190 0
-13645 -2020 -2109 -2192 0
-13645 -2020 -2107 -2194 0
-13645 -2020 -2105 -2196 0
-13645 -2020 -2103 -2198 0
-13645 -2020 -2101 -2200 0
-13645 -2020 -2100 -2202 0
-13645 -2018 -2156 0
-13645 -2018 -2145 -2158 0
-13645 -2018 -2143 -2160 0
-13645 -2018 -2141 -2162 0
-13645 -2018 -2139 -2164 0
-13645 -2018 -2137 -2166 0
-13645 -2018 -2135 -2168 0
-13645 -2018 -2133 -2170 0
-13645 -2018 -2131 -2172 0
-13645 -2018 -2129 -2174 0
-13645 -2018 -2127 -2176 0
-13645 -2018 -2125 -2178 0
-13645 -2018 -2123 -2180 0
-13645 -2018 -2121 -2182 0
-13645 -2018 -2119 -2184 0
-13645 -2018 -2117 -2186 0
-13645 -2018 -2115 -2188 0
-13645 -2018 -2113 -2190 0
-13645 -2018 -2111 -2192 0
-13645 -2018 -2109 -2194 0
-13645 -2018 -2107 -2196 0
-13645 -2018 -2105 -2198 0
-13645 -2018 -2103 -2200 0
-13645 -2018 -2101 -2202 0
-13645 -2018 -2100 -2204 0
-13645 -2016 -2158 0
-13645 -2016 -2145 -2160 0
-13645 -2016 -2143 -2162 0
-13645 -2016 -2141 -2164 0
-13645 -2016 -2139 -2166 0
-13645 -2016 -2137 -2168 0
-13645 -2016 -2135 -2170 0
-13645 -2016 -2133 -2172 0
-13645 -2016 -2131 -2174 0
-13645 -2016 -2129 -2176 0
-13645 -2016 -2127 -2178 0
-13645 -2016 -2125 -2180 0
-13645 -2016 -2123 -2182 0
-13645 -2016 -2121 -2184 0
-13645 -2016 -2119 -2186 0
-13645 -2016 -2117 -2188 0
-13645 -2016 -2115 -2190 0
-13645 -2016 -2113 -2192 0
-13645 -2016 -2111 -2194 0
-13645 -2016 -2109 -2196 0
-13645 -2016 -2107 -2198 0
-13645 -2016 -2105 -2200 0
-13645 -2016 -2103 -2202 0
-13645 -2016 -2101 -2204 0
-13645 -2016 -2100 -2206 0
-13645 -2014 -2160 0
-13645 -2014 -2145 -2162 0
-13645 -2014 -2143 -2164 0
-13645 -2014 -2141 -2166 0
-13645 -2014 -2139 -2168 0
-13645 -2014 -2137 -2170 0
-13645 -2014 -2135 -2172 0
-13645 -2014 -2133 -2174 0
-13645 -2014 -2131 -2176 0
-13645 -2014 -2129 -2178 0
-13645 -2014 -2127 -2180 0
-13645 -2014 -2125 -2182 0
-13645 -2014 -2123 -2184 0
-13645 -2014 -2121 -2186 0
-13645 -2014 -2119 -2188 0
-13645 -2014 -2117 -2190 0
-13645 -2014 -2115 -2192 0
-13645 -2014 -2113 -2194 0
-13645 -2014 -2111 -2196 0
-13645 -2014 -2109 -2198 0
-13645 -2014 -2107 -2200 0
-13645 -2014 -2105 -2202 0
-13645 -2014 -2103 -2204 0
-13645 -2014 -2101 -2206 0
-13645 -2014 -2100 -2208 0
-13645 -2012 -2162 0
-13645 -2012 -2145 -2164 0
-13645 -2012 -2143 -2166 0
-13645 -2012 -2141 -2168 0
-13645 -2012 -2139 -2170 0
-13645 -2012 -2137 -2172 0
-13645 -2012 -2135 -2174 0
-13645 -2012 -2133 -2176 0
-13645 -2012 -2131 -2178 0
-13645 -2012 -2129 -2180 0
-13645 -2012 -2127 -2182 0
-13645 -2012 -2125 -2184 0
-13645 -2012 -2123 -2186 0
-13645 -2012 -2121 -2188 0
-13645 -2012 -2119 -2190 0
-13645 -2012 -2117 -2192 0
-13645 -2012 -2115 -2194 0
-13645 -2012 -2113 -2196 0
-13645 -2012 -2111 -2198 0
-13645 -2012 -2109 -2200 0
-13645 -2012 -2107 -2202 0
-13645 -2012 -2105 -2204 0
-13645 -2012 -2103 -2206 0
-13645 -2012 -2101 -2208 0
-13645 -2012 -2100 0
-13645 -2010 -2164 0
-13645 -2010 -2145 -2166 0
-13645 -2010 -2143 -2168 0
-13645 -2010 -2141 -2170 0
-13645 -2010 -2139 -2172 0
-13645 -2010 -2137 -2174 0
-13645 -2010 -2135 -2176 0
-13645 -2010 -2133 -2178 0
-13645 -2010 -2131 -2180 0
-13645 -2010 -2129 -2182 0
-13645 -2010 -2127 -2184 0
-13645 -2010 -2125 -2186 0
-13645 -2010 -2123 -2188 0
-13645 -2010 -2121 -2190 0
-13645 -2010 -2119 -2192 0
-13645 -2010 -2117 -2194 0
-13645 -2010 -2115 -2196 0
-13645 -2010 -2113 -2198 0
-13645 -2010 -2111 -2200 0
-13645 -2010 -2109 -2202 0
-13645 -2010 -2107 -2204 0
-13645 -2010 -2105 -2206 0
-13645 -2010 -2103 -2208 0
-13645 -2010 -2101 0
-13645 -2010 -2100 0
-13645 -2008 -2166 0
-13645 -2008 -2145 -2168 0
-13645 -2008 -2143 -2170 0
-13645 -2008 -2141 -2172 0
-13645 -2008 -2139 -2174 0
-13645 -2008 -2137 -2176 0
-13645 -2008 -2135 -2178 0
-13645 -2008 -2133 -2180 0
-13645 -2008 -2131 -2182 0
-13645 -2008 -2129 -2184 0
-13645 -2008 -2127 -2186 0
-13645 -2008 -2125 -2188 0
-13645 -2008 -2123 -2190 0
-13645 -2008 -2121 -2192 0
-13645 -2008 -2119 -2194 0
-13645 -2008 -2117 -2196 0
-13645 -2008 -2115 -2198 0
-13645 -2008 -2113 -2200 0
-13645 -2008 -2111 -2202 0
-13645 -2008 -2109 -2204 0
-13645 -2008 -2107 -2206 0
-13645 -2008 -2105 -2208 0
-13645 -2008 -2103 0
-13645 -2008 -2101 0
-13645 -2008 -2100 0
-13645 -2007 -2168 0
-13645 -2007 -2145 -2170 0
-13645 -2007 -2143 -2172 0
-13645 -2007 -2141 -2174 0
-13645 -2007 -2139 -2176 0
-13645 -2007 -2137 -2178 0
-13645 -2007 -2135 -2180 0
-13645 -2007 -2133 -2182 0
-13645 -2007 -2131 -2184 0
-13645 -2007 -2129 -2186 0
-13645 -2007 -2127 -2188 0
-13645 -2007 -2125 -2190 0
-13645 -2007 -2123 -2192 0
-13645 -2007 -2121 -2194 0
-13645 -2007 -2119 -2196 0
-13645 -2007 -2117 -2198 0
-13645 -2007 -2115 -2200 0
-13645 -2007 -2113 -2202 0
-13645 -2007 -2111 -2204 0
-13645 -2007 -2109 -2206 0
-13645 -2007 -2107 -2208 0
-13645 -2007 -2105 0
-13645 -2007 -2103 0
-13645 -2007 -2101 0
-13645 -2007 -2100 0
13645 2105 2208 0
13645 2107 2206 0
13645 2109 2204 0
13645 2111 2202 0
13645 2113 2200 0
13645 2115 2198 0
13645 2117 2196 0
13645 2119 2194 0
13645 2121 2192 0
13645 2123 2190 0
13645 2125 2188 0
13645 2127 2186 0
13645 2129 2184 0
13645 2131 2182 0
13645 2133 2180 0
13645 2135 2178 0
13645 2137 2176 0
13645 2139 2174 0
13645 2141 2172 0
13645 2143 2170 0
13645 2145 2168 0
13645 2007 2103 2208 0
13645 2007 2105 2206 0
13645 2007 2107 2204 0
13645 2007 2109 2202 0
13645 2007 2111 2200 0
13645 2007 2113 2198 0
13645 2007 2115 2196 0
13645 2007 2117 2194 0
13645 2007 2119 2192 0
13645 2007 2121 2190 0
13645 2007 2123 2188 0
13645 2007 2125 2186 0
13645 2007 2127 2184 0
13645 2007 2129 2182 0
13645 2007 2131 2180 0
13645 2007 2133 2178 0
13645 2007 2135 2176 0
13645 2007 2137 2174 0
13645 2007 2139 2172 0
13645 2007 2141 2170 0
13645 2007 2143 2168 0
13645 2007 2145 2166 0
13645 2008 2101 2208 0
13645 2008 2103 2206 0
13645 2008 2105 2204 0
13645 2008 2107 2202 0
13645 2008 2109 2200 0
13645 2008 2111 2198 0
13645 2008 2113 2196 0
13645 2008 2115 2194 0
13645 2008 2117 2192 0
13645 2008 2119 2190 0
13645 2008 2121 2188 0
13645 2008 2123 2186 0
13645 2008 2125 2184 0
13645 2008 2127 2182 0
13645 2008 2129 2180 0
13645 2008 2131 2178 0
13645 2008 2133 2176 0
13645 2008 2135 2174 0
13645 2008 2137 2172 0
13645 2008 2139 2170 0
13645 2008 2141 2168 0
13645 2008 2143 2166 0
13645 2008 2145 2164 0
13645 2010 2100 2208 0
13645 2010 2101 2206 0
13645 2010 2103 2204 0
13645 2010 2105 2202 0
13645 2010 2107 2200 0
13645 2010 2109 2198 0
13645 2010 2111 2196 0
13645 2010 2113 2194 0
13645 2010 2115 2192 0
13645 2010 2117 2190 0
13645 2010 2119 2188 0
13645 2010 2121 2186 0
13645 2010 2123 2184 0
13645 2010 2125 2182 0
13645 2010 2127 2180 0
13645 2010 2129 2178 0
13645 2010 2131 2176 0
13645 2010 2133 2174 0
13645 2010 2135 2172 0
13645 2010 2137 2170 0
13645 2010 2139 2168 0
13645 2010 2141 2166 0
13645 2010 2143 2164 0
13645 2010 2145 2162 0
13645 2012 2208 0
13645 2012 2100 2206 0
13645 2012 2101 2204 0
13645 2012 2103 2202 0
13645 2012 2105 2200 0
13645 2012 2107 2198 0
13645 2012 2109 2196 0
13645 2012 2111 2194 0
13645 2012 2113 2192 0
13645 2012 2115 2190 0
13645 2012 2117 2188 0
13645 2012 2119 2186 0
13645 2012 2121 2184 0
13645 2012 2123 2182 0
13645 2012 2125 2180 0
13645 2012 2127 2178 0
13645 2012 2129 2176 0
13645 2012 2131 2174 0
13645 2012 2133 2172 0
13645 2012 2135 2170 0
13645 2012 2137 2168 0
13645 2012 2139 2166 0
13645 2012 2141 2164 0
13645 2012 2143 2162 0
13645 2012 2145 2160 0
13645 2014 2206 0
13645 2014 2100 2204 0
13645 2014 2101 2202 0
13645 2014 2103 2200 0
13645 2014 2105 2198 0
13645 2014 2107 2196 0
13645 2014 2109 2194 0
13645 2014 2111 2192 0
13645 2014 2113 2190 0
13645 2014 2115 2188 0
13645 2014 2117 2186 0
13645 2014 2119 2184 0
13645 2014 2121 2182 0
13645 2014 2123 2180 0
13645 2014 2125 2178 0
13645 2014 2127 2176 0
13645 2014 2129 2174 0
13645 2014 2131 2172 0
13645 2014 2133 2170 0
13645 2014 2135 2168 0
13645 2014 2137 2166 0
13645 2014 2139 2164 0
13645 2014 2141 2162 0
13645 2014 2143 2160 0
13645 2014 2145 2158 0
13645 2016 2204 0
13645 2016 2100 2202 0
13645 2016 2101 2200 0
13645 2016 2103 2198 0
13645 2016 2105 2196 0
13645 2016 2107 2194 0
13645 2016 2109 2192 0
13645 2016 2111 2190 0
13645 2016 2113 2188 0
13645 2016 2115 2186 0
13645 2016 2117 2184 0
13645 2016 2119 2182 0
13645 2016 2121 2180 0
13645 2016 2123 2178 0
13645 2016 2125 2176 0
13645 2016 2127 2174 0
13645 2016 2129 2172 0
13645 2016 2131 2170 0
13645 2016 2133 2168 0
13645 2016 2135 2166 0
13645 2016 2137 2164 0
13645 2016 2139 2162 0
13645 2016 2141 2160 0
13645 2016 2143 2158 0
13645 2016 2145 2156 0
13645 2018 2202 0
13645 2018 2100 2200 0
13645 2018 2101 2198 0
13645 2018 2103 2196 0
13645 2018 2105 2194 0
13645 2018 2107 2192 0
13645 2018 2109 2190 0
13645 2018 2111 2188 0
13645 2018 2113 2186 0
13645 2018 2115 2184 0
13645 2018 2117 2182 0
13645 2018 2119 2180 0
13645 2018 2121 2178 0
13645 2018 2123 2176 0
13645 2018 2125 2174 0
13645 2018 2127 2172 0
13645 2018 2129 2170 0
13645 2018 2131 2168 0
13645 2018 2133 2166 0
13645 2018 2135 2164 0
13645 2018 2137 2162 0
13645 2018 2139 2160 0
13645 2018 2141 2158 0
13645 2018 2143 2156 0
13645 2018 2145 2154 0
13645 2020 2200 0
13645 2020 2100 2198 0
13645 2020 2101 2196 0
13645 2020 2103 2194 0
13645 2020 2105 2192 0
13645 2020 2107 2190 0
13645 2020 2109 2188 0
13645 2020 2111 2186 0
13645 2020 2113 2184 0
13645 2020 2115 2182 0
13645 2020 2117 2180 0
13645 2020 2119 2178 0
13645 2020 2121 2176 0
13645 2020 2123 2174 0
13645 2020 2125 2172 0
13645 2020 2127 2170 0
13645 2020 2129 2168 0
13645 2020 2131 2166 0
13645 2020 2133 2164 0
13645 2020 2135 2162 0
13645 2020 2137 2160 0
13645 2020 2139 2158 0
13645 2020 2141 2156 0
13645 2020 2143 2154 0
13645 2020 2145 2152 0
13645 2022 2198 0
13645 2022 2100 2196 0
13645 2022 2101 2194 0
13645 2022 2103 2192 0
13645 2022 2105 2190 0
13645 2022 2107 2188 0
13645 2022 2109 2186 0
13645 2022 2111 2184 0
13645 2022 2113 2182 0
13645 2022 2115 2180 0
13645 2022 2117 2178 0
13645 2022 2119 2176 0
13645 2022 2121 2174 0
13645 2022 2123 2172 0
13645 2022 2125 2170 0
13645 2022 2127 2168 0
13645 2022 2129 2166 0
13645 2022 2131 2164 0
13645 2022 2133 2162 0
13645 2022 2135 2160 0
13645 2022 2137 2158 0
13645 2022 2139 2156 0
13645 2022 2141 2154 0
13645 2022 2143 2152 0
13645 2022 2145 2150 0
13645 2024 2196 0
13645 2024 2100 2194 0
13645 2024 2101 2192 0
13645 2024 2103 2190 0
13645 2024 2105 2188 0
13645 2024 2107 2186 0
13645 2024 2109 2184 0
13645 2024 2111 2182 0
13645 2024 2113 2180 0
13645 2024 2115 2178 0
13645 2024 2117 2176 0
13645 2024 2119 2174 0
13645 2024 2121 2172 0
13645 2024 2123 2170 0
13645 2024 2125 2168 0
13645 2024 2127 2166 0
13645 2024 2129 2164 0
13645 2024 2131 2162 0
13645 2024 2133 2160 0
13645 2024 2135 2158 0
13645 2024 2137 2156 0
13645 2024 2139 2154 0
13645 2024 2141 2152 0
13645 2024 2143 2150 0
13645 2024 2145 2148 0
13645 2026 2194 0
13645 2026 2100 2192 0
13645 2026 2101 2190 0
13645 2026 2103 2188 0
13645 2026 2105 2186 0
13645 2026 2107 2184 0
13645 2026 2109 2182 0
13645 2026 2111 2180 0
13645 2026 2113 2178 0
13645 2026 2115 2176 0
13645 2026 2117 2174 0
13645 2026 2119 2172 0
13645 2026 2121 2170 0
13645 2026 2123 2168 0
13645 2026 2125 2166 0
13645 2026 2127 2164 0
13645 2026 2129 2162 0
13645 2026 2131 2160 0
13645 2026 2133 2158 0
13645 2026 2135 2156 0
13645 2026 2137 2154 0
13645 2026 2139 2152 0
13645 2026 2141 2150 0
13645 2026 2143 2148 0
13645 2026 2145 2147 0
13645 2028 2192 0
13645 2028 2100 2190 0
13645 2028 2101 2188 0
13645 2028 2103 2186 0
13645 2028 2105 2184 0
13645 2028 2107 2182 0
13645 2028 2109 2180 0
13645 2028 2111 2178 0
13645 2028 2113 2176 0
13645 2028 2115 2174 0
13645 2028 2117 2172 0
13645 2028 2119 2170 0
13645 2028 2121 2168 0
13645 2028 2123 2166 0
13645 2028 2125 2164 0
13645 2028 2127 2162 0
13645 2028 2129 2160 0
13645 2028 2131 2158 0
13645 2028 2133 2156 0
13645 2028 2135 2154 0
13645 2028 2137 2152 0
13645 2028 2139 2150 0
13645 2028 2141 2148 0
13645 2028 2143 2147 0
13645 2028 2145 0
13645 2030 2190 0
13645 2030 2100 2188 0
13645 2030 2101 2186 0
13645 2030 2103 2184 0
13645 2030 2105 2182 0
13645 2030 2107 2180 0
13645 2030 2109 2178 0
13645 2030 2111 2176 0
13645 2030 2113 2174 0
13645 2030 2115 2172 0
13645 2030 2117 2170 0
13645 2030 2119 2168 0
13645 2030 2121 2166 0
13645 2030 2123 2164 0
13645 2030 2125 2162 0
13645 2030 2127 2160 0
13645 2030 2129 2158 0
13645 2030 2131 2156 0
13645 2030 2133 2154 0
13645 2030 2135 2152 0
13645 2030 2137 2150 0
13645 2030 2139 2148 0
13645 2030 2141 2147 0
13645 2030 2143 0
13645 2030 2145 0
13645 2032 2188 0
13645 2032 2100 2186 0
13645 2032 2101 2184 0
13645 2032 2103 2182 0
13645 2032 2105 2180 0
13645 2032 2107 2178 0
13645 2032 2109 2176 0
13645 2032 2111 2174 0
13645 2032 2113 2172 0
13645 2032 2115 2170 0
13645 2032 2117 2168 0
13645 2032 2119 2166 0
13645 2032 2121 2164 0
13645 2032 2123 2162 0
13645 2032 2125 2160 0
13645 2032 2127 2158 0
13645 2032 2129 2156 0
13645 2032 2131 2154 0
13645 2032 2133 2152 0
13645 2032 2135 2150 0
13645 2032 2137 2148 0
13645 2032 2139 2147 0
13645 2032 2141 0
13645 2032 2143 0
13645 2032 2145 0
13645 2034 2186 0
13645 2034 2100 2184 0
13645 2034 2101 2182 0
13645 2034 2103 2180 0
13645 2034 2105 2178 0
13645 2034 2107 2176 0
13645 2034 2109 2174 0
13645 2034 2111 2172 0
13645 2034 2113 2170 0
13645 2034 2115 2168 0
13645 2034 2117 2166 0
13645 2034 2119 2164 0
13645 2034 2121 2162 0
13645 2034 2123 2160 0
13645 2034 2125 2158 0
13645 2034 2127 2156 0
13645 2034 2129 2154 0
13645 2034 2131 2152 0
13645 2034 2133 2150 0
13645 2034 2135 2148 0
13645 2034 2137 2147 0
13645 2034 2139 0
13645 2034 2141 0
13645 2034 2143 0
13645 2034 2145 0
13645 2036 2184 0
13645 2036 2100 2182 0
13645 2036 2101 2180 0
13645 2036 2103 2178 0
13645 2036 2105 2176 0
13645 2036 2107 2174 0
13645 2036 2109 2172 0
13645 2036 2111 2170 0
13645 2036 2113 2168 0
13645 2036 2115 2166 0
13645 2036 2117 2164 0
13645 2036 2119 2162 0
13645 2036 2121 2160 0
13645 2036 2123 2158 0
13645 2036 2125 2156 0
13645 2036 2127 2154 0
13645 2036 2129 2152 0
13645 2036 2131 2150 0
13645 2036 2133 2148 0
13645 2036 2135 2147 0
13645 2036 2137 0
13645 2036 2139 0
13645 2036 2141 0
13645 2036 2143 0
13645 2036 2145 0
c (((aux474 + aux477 + aux478)<=36)=tv=SATLiteral(13646))
-13646 2341 2442 0
-13646 2343 2440 0
-13646 2345 2438 0
-13646 2347 2436 0
-13646 2349 2434 0
-13646 2351 2432 0
-13646 2353 2430 0
-13646 2355 2428 0
-13646 2357 2426 0
-13646 2359 2424 0
-13646 2361 2422 0
-13646 2363 2420 0
-13646 2365 2418 0
-13646 2367 2416 0
-13646 2369 2414 0
-13646 2371 2412 0
-13646 2373 2410 0
-13646 2375 2408 0
-13646 2377 2406 0
-13646 2379 2404 0
-13646 2241 2339 2442 0
-13646 2241 2341 2440 0
-13646 2241 2343 2438 0
-13646 2241 2345 2436 0
-13646 2241 2347 2434 0
-13646 2241 2349 2432 0
-13646 2241 2351 2430 0
-13646 2241 2353 2428 0
-13646 2241 2355 2426 0
-13646 2241 2357 2424 0
-13646 2241 2359 2422 0
-13646 2241 2361 2420 0
-13646 2241 2363 2418 0
-13646 2241 2365 2416 0
-13646 2241 2367 2414 0
-13646 2241 2369 2412 0
-13646 2241 2371 2410 0
-13646 2241 2373 2408 0
-13646 2241 2375 2406 0
-13646 2241 2377 2404 0
-13646 2241 2379 2402 0
-13646 2242 2337 2442 0
-13646 2242 2339 2440 0
-13646 2242 2341 2438 0
-13646 2242 2343 2436 0
-13646 2242 2345 2434 0
-13646 2242 2347 2432 0
-13646 2242 2349 2430 0
-13646 2242 2351 2428 0
-13646 2242 2353 2426 0
-13646 2242 2355 2424 0
-13646 2242 2357 2422 0
-13646 2242 2359 2420 0
-13646 2242 2361 2418 0
-13646 2242 2363 2416 0
-13646 2242 2365 2414 0
-13646 2242 2367 2412 0
-13646 2242 2369 2410 0
-13646 2242 2371 2408 0
-13646 2242 2373 2406 0
-13646 2242 2375 2404 0
-13646 2242 2377 2402 0
-13646 2242 2379 2400 0
-13646 2244 2335 2442 0
-13646 2244 2337 2440 0
-13646 2244 2339 2438 0
-13646 2244 2341 2436 0
-13646 2244 2343 2434 0
-13646 2244 2345 2432 0
-13646 2244 2347 2430 0
-13646 2244 2349 2428 0
-13646 2244 2351 2426 0
-13646 2244 2353 2424 0
-13646 2244 2355 2422 0
-13646 2244 2357 2420 0
-13646 2244 2359 2418 0
-13646 2244 2361 2416 0
-13646 2244 2363 2414 0
-13646 2244 2365 2412 0
-13646 2244 2367 2410 0
-13646 2244 2369 2408 0
-13646 2244 2371 2406 0
-13646 2244 2373 2404 0
-13646 2244 2375 2402 0
-13646 2244 2377 2400 0
-13646 2244 2379 2398 0
-13646 2246 2334 2442 0
-13646 2246 2335 2440 0
-13646 2246 2337 2438 0
-13646 2246 2339 2436 0
-13646 2246 2341 2434 0
-13646 2246 2343 2432 0
-13646 2246 2345 2430 0
-13646 2246 2347 2428 0
-13646 2246 2349 2426 0
-13646 2246 2351 2424 0
-13646 2246 2353 2422 0
-13646 2246 2355 2420 0
-13646 2246 2357 2418 0
-13646 2246 2359 2416 0
-13646 2246 2361 2414 0
-13646 2246 2363 2412 0
-13646 2246 2365 2410 0
-13646 2246 2367 2408 0
-13646 2246 2369 2406 0
-13646 2246 2371 2404 0
-13646 2246 2373 2402 0
-13646 2246 2375 2400 0
-13646 2246 2377 2398 0
-13646 2246 2379 2396 0
-13646 2248 2442 0
-13646 2248 2334 2440 0
-13646 2248 2335 2438 0
-13646 2248 2337 2436 0
-13646 2248 2339 2434 0
-13646 2248 2341 2432 0
-13646 2248 2343 2430 0
-13646 2248 2345 2428 0
-13646 2248 2347 2426 0
-13646 2248 2349 2424 0
-13646 2248 2351 2422 0
-13646 2248 2353 2420 0
-13646 2248 2355 2418 0
-13646 2248 2357 2416 0
-13646 2248 2359 2414 0
-13646 2248 2361 2412 0
-13646 2248 2363 2410 0
-13646 2248 2365 2408 0
-13646 2248 2367 2406 0
-13646 2248 2369 2404 0
-13646 2248 2371 2402 0
-13646 2248 2373 2400 0
-13646 2248 2375 2398 0
-13646 2248 2377 2396 0
-13646 2248 2379 2394 0
-13646 2250 2440 0
-13646 2250 2334 2438 0
-13646 2250 2335 2436 0
-13646 2250 2337 2434 0
-13646 2250 2339 2432 0
-13646 2250 2341 2430 0
-13646 2250 2343 2428 0
-13646 2250 2345 2426 0
-13646 2250 2347 2424 0
-13646 2250 2349 2422 0
-13646 2250 2351 2420 0
-13646 2250 2353 2418 0
-13646 2250 2355 2416 0
-13646 2250 2357 2414 0
-13646 2250 2359 2412 0
-13646 2250 2361 2410 0
-13646 2250 2363 2408 0
-13646 2250 2365 2406 0
-13646 2250 2367 2404 0
-13646 2250 2369 2402 0
-13646 2250 2371 2400 0
-13646 2250 2373 2398 0
-13646 2250 2375 2396 0
-13646 2250 2377 2394 0
-13646 2250 2379 2392 0
-13646 2252 2438 0
-13646 2252 2334 2436 0
-13646 2252 2335 2434 0
-13646 2252 2337 2432 0
-13646 2252 2339 2430 0
-13646 2252 2341 2428 0
-13646 2252 2343 2426 0
-13646 2252 2345 2424 0
-13646 2252 2347 2422 0
-13646 2252 2349 2420 0
-13646 2252 2351 2418 0
-13646 2252 2353 2416 0
-13646 2252 2355 2414 0
-13646 2252 2357 2412 0
-13646 2252 2359 2410 0
-13646 2252 2361 2408 0
-13646 2252 2363 2406 0
-13646 2252 2365 2404 0
-13646 2252 2367 2402 0
-13646 2252 2369 2400 0
-13646 2252 2371 2398 0
-13646 2252 2373 2396 0
-13646 2252 2375 2394 0
-13646 2252 2377 2392 0
-13646 2252 2379 2390 0
-13646 2254 2436 0
-13646 2254 2334 2434 0
-13646 2254 2335 2432 0
-13646 2254 2337 2430 0
-13646 2254 2339 2428 0
-13646 2254 2341 2426 0
-13646 2254 2343 2424 0
-13646 2254 2345 2422 0
-13646 2254 2347 2420 0
-13646 2254 2349 2418 0
-13646 2254 2351 2416 0
-13646 2254 2353 2414 0
-13646 2254 2355 2412 0
-13646 2254 2357 2410 0
-13646 2254 2359 2408 0
-13646 2254 2361 2406 0
-13646 2254 2363 2404 0
-13646 2254 2365 2402 0
-13646 2254 2367 2400 0
-13646 2254 2369 2398 0
-13646 2254 2371 2396 0
-13646 2254 2373 2394 0
-13646 2254 2375 2392 0
-13646 2254 2377 2390 0
-13646 2254 2379 2388 0
-13646 2256 2434 0
-13646 2256 2334 2432 0
-13646 2256 2335 2430 0
-13646 2256 2337 2428 0
-13646 2256 2339 2426 0
-13646 2256 2341 2424 0
-13646 2256 2343 2422 0
-13646 2256 2345 2420 0
-13646 2256 2347 2418 0
-13646 2256 2349 2416 0
-13646 2256 2351 2414 0
-13646 2256 2353 2412 0
-13646 2256 2355 2410 0
-13646 2256 2357 2408 0
-13646 2256 2359 2406 0
-13646 2256 2361 2404 0
-13646 2256 2363 2402 0
-13646 2256 2365 2400 0
-13646 2256 2367 2398 0
-13646 2256 2369 2396 0
-13646 2256 2371 2394 0
-13646 2256 2373 2392 0
-13646 2256 2375 2390 0
-13646 2256 2377 2388 0
-13646 2256 2379 2386 0
-13646 2258 2432 0
-13646 2258 2334 2430 0
-13646 2258 2335 2428 0
-13646 2258 2337 2426 0
-13646 2258 2339 2424 0
-13646 2258 2341 2422 0
-13646 2258 2343 2420 0
-13646 2258 2345 2418 0
-13646 2258 2347 2416 0
-13646 2258 2349 2414 0
-13646 2258 2351 2412 0
-13646 2258 2353 2410 0
-13646 2258 2355 2408 0
-13646 2258 2357 2406 0
-13646 2258 2359 2404 0
-13646 2258 2361 2402 0
-13646 2258 2363 2400 0
-13646 2258 2365 2398 0
-13646 2258 2367 2396 0
-13646 2258 2369 2394 0
-13646 2258 2371 2392 0
-13646 2258 2373 2390 0
-13646 2258 2375 2388 0
-13646 2258 2377 2386 0
-13646 2258 2379 2384 0
-13646 2260 2430 0
-13646 2260 2334 2428 0
-13646 2260 2335 2426 0
-13646 2260 2337 2424 0
-13646 2260 2339 2422 0
-13646 2260 2341 2420 0
-13646 2260 2343 2418 0
-13646 2260 2345 2416 0
-13646 2260 2347 2414 0
-13646 2260 2349 2412 0
-13646 2260 2351 2410 0
-13646 2260 2353 2408 0
-13646 2260 2355 2406 0
-13646 2260 2357 2404 0
-13646 2260 2359 2402 0
-13646 2260 2361 2400 0
-13646 2260 2363 2398 0
-13646 2260 2365 2396 0
-13646 2260 2367 2394 0
-13646 2260 2369 2392 0
-13646 2260 2371 2390 0
-13646 2260 2373 2388 0
-13646 2260 2375 2386 0
-13646 2260 2377 2384 0
-13646 2260 2379 2382 0
-13646 2262 2428 0
-13646 2262 2334 2426 0
-13646 2262 2335 2424 0
-13646 2262 2337 2422 0
-13646 2262 2339 2420 0
-13646 2262 2341 2418 0
-13646 2262 2343 2416 0
-13646 2262 2345 2414 0
-13646 2262 2347 2412 0
-13646 2262 2349 2410 0
-13646 2262 2351 2408 0
-13646 2262 2353 2406 0
-13646 2262 2355 2404 0
-13646 2262 2357 2402 0
-13646 2262 2359 2400 0
-13646 2262 2361 2398 0
-13646 2262 2363 2396 0
-13646 2262 2365 2394 0
-13646 2262 2367 2392 0
-13646 2262 2369 2390 0
-13646 2262 2371 2388 0
-13646 2262 2373 2386 0
-13646 2262 2375 2384 0
-13646 2262 2377 2382 0
-13646 2262 2379 2381 0
-13646 2264 2426 0
-13646 2264 2334 2424 0
-13646 2264 2335 2422 0
-13646 2264 2337 2420 0
-13646 2264 2339 2418 0
-13646 2264 2341 2416 0
-13646 2264 2343 2414 0
-13646 2264 2345 2412 0
-13646 2264 2347 2410 0
-13646 2264 2349 2408 0
-13646 2264 2351 2406 0
-13646 2264 2353 2404 0
-13646 2264 2355 2402 0
-13646 2264 2357 2400 0
-13646 2264 2359 2398 0
-13646 2264 2361 2396 0
-13646 2264 2363 2394 0
-13646 2264 2365 2392 0
-13646 2264 2367 2390 0
-13646 2264 2369 2388 0
-13646 2264 2371 2386 0
-13646 2264 2373 2384 0
-13646 2264 2375 2382 0
-13646 2264 2377 2381 0
-13646 2264 2379 0
-13646 2266 2424 0
-13646 2266 2334 2422 0
-13646 2266 2335 2420 0
-13646 2266 2337 2418 0
-13646 2266 2339 2416 0
-13646 2266 2341 2414 0
-13646 2266 2343 2412 0
-13646 2266 2345 2410 0
-13646 2266 2347 2408 0
-13646 2266 2349 2406 0
-13646 2266 2351 2404 0
-13646 2266 2353 2402 0
-13646 2266 2355 2400 0
-13646 2266 2357 2398 0
-13646 2266 2359 2396 0
-13646 2266 2361 2394 0
-13646 2266 2363 2392 0
-13646 2266 2365 2390 0
-13646 2266 2367 2388 0
-13646 2266 2369 2386 0
-13646 2266 2371 2384 0
-13646 2266 2373 2382 0
-13646 2266 2375 2381 0
-13646 2266 2377 0
-13646 2266 2379 0
-13646 2268 2422 0
-13646 2268 2334 2420 0
-13646 2268 2335 2418 0
-13646 2268 2337 2416 0
-13646 2268 2339 2414 0
-13646 2268 2341 2412 0
-13646 2268 2343 2410 0
-13646 2268 2345 2408 0
-13646 2268 2347 2406 0
-13646 2268 2349 2404 0
-13646 2268 2351 2402 0
-13646 2268 2353 2400 0
-13646 2268 2355 2398 0
-13646 2268 2357 2396 0
-13646 2268 2359 2394 0
-13646 2268 2361 2392 0
-13646 2268 2363 2390 0
-13646 2268 2365 2388 0
-13646 2268 2367 2386 0
-13646 2268 2369 2384 0
-13646 2268 2371 2382 0
-13646 2268 2373 2381 0
-13646 2268 2375 0
-13646 2268 2377 0
-13646 2268 2379 0
-13646 2270 2420 0
-13646 2270 2334 2418 0
-13646 2270 2335 2416 0
-13646 2270 2337 2414 0
-13646 2270 2339 2412 0
-13646 2270 2341 2410 0
-13646 2270 2343 2408 0
-13646 2270 2345 2406 0
-13646 2270 2347 2404 0
-13646 2270 2349 2402 0
-13646 2270 2351 2400 0
-13646 2270 2353 2398 0
-13646 2270 2355 2396 0
-13646 2270 2357 2394 0
-13646 2270 2359 2392 0
-13646 2270 2361 2390 0
-13646 2270 2363 2388 0
-13646 2270 2365 2386 0
-13646 2270 2367 2384 0
-13646 2270 2369 2382 0
-13646 2270 2371 2381 0
-13646 2270 2373 0
-13646 2270 2375 0
-13646 2270 2377 0
-13646 2270 2379 0
13646 -2373 -2381 0
13646 -2371 -2382 0
13646 -2369 -2384 0
13646 -2367 -2386 0
13646 -2365 -2388 0
13646 -2363 -2390 0
13646 -2361 -2392 0
13646 -2359 -2394 0
13646 -2357 -2396 0
13646 -2355 -2398 0
13646 -2353 -2400 0
13646 -2351 -2402 0
13646 -2349 -2404 0
13646 -2347 -2406 0
13646 -2345 -2408 0
13646 -2343 -2410 0
13646 -2341 -2412 0
13646 -2339 -2414 0
13646 -2337 -2416 0
13646 -2335 -2418 0
13646 -2334 -2420 0
13646 -2270 -2375 -2381 0
13646 -2270 -2373 -2382 0
13646 -2270 -2371 -2384 0
13646 -2270 -2369 -2386 0
13646 -2270 -2367 -2388 0
13646 -2270 -2365 -2390 0
13646 -2270 -2363 -2392 0
13646 -2270 -2361 -2394 0
13646 -2270 -2359 -2396 0
13646 -2270 -2357 -2398 0
13646 -2270 -2355 -2400 0
13646 -2270 -2353 -2402 0
13646 -2270 -2351 -2404 0
13646 -2270 -2349 -2406 0
13646 -2270 -2347 -2408 0
13646 -2270 -2345 -2410 0
13646 -2270 -2343 -2412 0
13646 -2270 -2341 -2414 0
13646 -2270 -2339 -2416 0
13646 -2270 -2337 -2418 0
13646 -2270 -2335 -2420 0
13646 -2270 -2334 -2422 0
13646 -2268 -2377 -2381 0
13646 -2268 -2375 -2382 0
13646 -2268 -2373 -2384 0
13646 -2268 -2371 -2386 0
13646 -2268 -2369 -2388 0
13646 -2268 -2367 -2390 0
13646 -2268 -2365 -2392 0
13646 -2268 -2363 -2394 0
13646 -2268 -2361 -2396 0
13646 -2268 -2359 -2398 0
13646 -2268 -2357 -2400 0
13646 -2268 -2355 -2402 0
13646 -2268 -2353 -2404 0
13646 -2268 -2351 -2406 0
13646 -2268 -2349 -2408 0
13646 -2268 -2347 -2410 0
13646 -2268 -2345 -2412 0
13646 -2268 -2343 -2414 0
13646 -2268 -2341 -2416 0
13646 -2268 -2339 -2418 0
13646 -2268 -2337 -2420 0
13646 -2268 -2335 -2422 0
13646 -2268 -2334 -2424 0
13646 -2266 -2379 -2381 0
13646 -2266 -2377 -2382 0
13646 -2266 -2375 -2384 0
13646 -2266 -2373 -2386 0
13646 -2266 -2371 -2388 0
13646 -2266 -2369 -2390 0
13646 -2266 -2367 -2392 0
13646 -2266 -2365 -2394 0
13646 -2266 -2363 -2396 0
13646 -2266 -2361 -2398 0
13646 -2266 -2359 -2400 0
13646 -2266 -2357 -2402 0
13646 -2266 -2355 -2404 0
13646 -2266 -2353 -2406 0
13646 -2266 -2351 -2408 0
13646 -2266 -2349 -2410 0
13646 -2266 -2347 -2412 0
13646 -2266 -2345 -2414 0
13646 -2266 -2343 -2416 0
13646 -2266 -2341 -2418 0
13646 -2266 -2339 -2420 0
13646 -2266 -2337 -2422 0
13646 -2266 -2335 -2424 0
13646 -2266 -2334 -2426 0
13646 -2264 -2381 0
13646 -2264 -2379 -2382 0
13646 -2264 -2377 -2384 0
13646 -2264 -2375 -2386 0
13646 -2264 -2373 -2388 0
13646 -2264 -2371 -2390 0
13646 -2264 -2369 -2392 0
13646 -2264 -2367 -2394 0
13646 -2264 -2365 -2396 0
13646 -2264 -2363 -2398 0
13646 -2264 -2361 -2400 0
13646 -2264 -2359 -2402 0
13646 -2264 -2357 -2404 0
13646 -2264 -2355 -2406 0
13646 -2264 -2353 -2408 0
13646 -2264 -2351 -2410 0
13646 -2264 -2349 -2412 0
13646 -2264 -2347 -2414 0
13646 -2264 -2345 -2416 0
13646 -2264 -2343 -2418 0
13646 -2264 -2341 -2420 0
13646 -2264 -2339 -2422 0
13646 -2264 -2337 -2424 0
13646 -2264 -2335 -2426 0
13646 -2264 -2334 -2428 0
13646 -2262 -2382 0
13646 -2262 -2379 -2384 0
13646 -2262 -2377 -2386 0
13646 -2262 -2375 -2388 0
13646 -2262 -2373 -2390 0
13646 -2262 -2371 -2392 0
13646 -2262 -2369 -2394 0
13646 -2262 -2367 -2396 0
13646 -2262 -2365 -2398 0
13646 -2262 -2363 -2400 0
13646 -2262 -2361 -2402 0
13646 -2262 -2359 -2404 0
13646 -2262 -2357 -2406 0
13646 -2262 -2355 -2408 0
13646 -2262 -2353 -2410 0
13646 -2262 -2351 -2412 0
13646 -2262 -2349 -2414 0
13646 -2262 -2347 -2416 0
13646 -2262 -2345 -2418 0
13646 -2262 -2343 -2420 0
13646 -2262 -2341 -2422 0
13646 -2262 -2339 -2424 0
13646 -2262 -2337 -2426 0
13646 -2262 -2335 -2428 0
13646 -2262 -2334 -2430 0
13646 -2260 -2384 0
13646 -2260 -2379 -2386 0
13646 -2260 -2377 -2388 0
13646 -2260 -2375 -2390 0
13646 -2260 -2373 -2392 0
13646 -2260 -2371 -2394 0
13646 -2260 -2369 -2396 0
13646 -2260 -2367 -2398 0
13646 -2260 -2365 -2400 0
13646 -2260 -2363 -2402 0
13646 -2260 -2361 -2404 0
13646 -2260 -2359 -2406 0
13646 -2260 -2357 -2408 0
13646 -2260 -2355 -2410 0
13646 -2260 -2353 -2412 0
13646 -2260 -2351 -2414 0
13646 -2260 -2349 -2416 0
13646 -2260 -2347 -2418 0
13646 -2260 -2345 -2420 0
13646 -2260 -2343 -2422 0
13646 -2260 -2341 -2424 0
13646 -2260 -2339 -2426 0
13646 -2260 -2337 -2428 0
13646 -2260 -2335 -2430 0
13646 -2260 -2334 -2432 0
13646 -2258 -2386 0
13646 -2258 -2379 -2388 0
13646 -2258 -2377 -2390 0
13646 -2258 -2375 -2392 0
13646 -2258 -2373 -2394 0
13646 -2258 -2371 -2396 0
13646 -2258 -2369 -2398 0
13646 -2258 -2367 -2400 0
13646 -2258 -2365 -2402 0
13646 -2258 -2363 -2404 0
13646 -2258 -2361 -2406 0
13646 -2258 -2359 -2408 0
13646 -2258 -2357 -2410 0
13646 -2258 -2355 -2412 0
13646 -2258 -2353 -2414 0
13646 -2258 -2351 -2416 0
13646 -2258 -2349 -2418 0
13646 -2258 -2347 -2420 0
13646 -2258 -2345 -2422 0
13646 -2258 -2343 -2424 0
13646 -2258 -2341 -2426 0
13646 -2258 -2339 -2428 0
13646 -2258 -2337 -2430 0
13646 -2258 -2335 -2432 0
13646 -2258 -2334 -2434 0
13646 -2256 -2388 0
13646 -2256 -2379 -2390 0
13646 -2256 -2377 -2392 0
13646 -2256 -2375 -2394 0
13646 -2256 -2373 -2396 0
13646 -2256 -2371 -2398 0
13646 -2256 -2369 -2400 0
13646 -2256 -2367 -2402 0
13646 -2256 -2365 -2404 0
13646 -2256 -2363 -2406 0
13646 -2256 -2361 -2408 0
13646 -2256 -2359 -2410 0
13646 -2256 -2357 -2412 0
13646 -2256 -2355 -2414 0
13646 -2256 -2353 -2416 0
13646 -2256 -2351 -2418 0
13646 -2256 -2349 -2420 0
13646 -2256 -2347 -2422 0
13646 -2256 -2345 -2424 0
13646 -2256 -2343 -2426 0
13646 -2256 -2341 -2428 0
13646 -2256 -2339 -2430 0
13646 -2256 -2337 -2432 0
13646 -2256 -2335 -2434 0
13646 -2256 -2334 -2436 0
13646 -2254 -2390 0
13646 -2254 -2379 -2392 0
13646 -2254 -2377 -2394 0
13646 -2254 -2375 -2396 0
13646 -2254 -2373 -2398 0
13646 -2254 -2371 -2400 0
13646 -2254 -2369 -2402 0
13646 -2254 -2367 -2404 0
13646 -2254 -2365 -2406 0
13646 -2254 -2363 -2408 0
13646 -2254 -2361 -2410 0
13646 -2254 -2359 -2412 0
13646 -2254 -2357 -2414 0
13646 -2254 -2355 -2416 0
13646 -2254 -2353 -2418 0
13646 -2254 -2351 -2420 0
13646 -2254 -2349 -2422 0
13646 -2254 -2347 -2424 0
13646 -2254 -2345 -2426 0
13646 -2254 -2343 -2428 0
13646 -2254 -2341 -2430 0
13646 -2254 -2339 -2432 0
13646 -2254 -2337 -2434 0
13646 -2254 -2335 -2436 0
13646 -2254 -2334 -2438 0
13646 -2252 -2392 0
13646 -2252 -2379 -2394 0
13646 -2252 -2377 -2396 0
13646 -2252 -2375 -2398 0
13646 -2252 -2373 -2400 0
13646 -2252 -2371 -2402 0
13646 -2252 -2369 -2404 0
13646 -2252 -2367 -2406 0
13646 -2252 -2365 -2408 0
13646 -2252 -2363 -2410 0
13646 -2252 -2361 -2412 0
13646 -2252 -2359 -2414 0
13646 -2252 -2357 -2416 0
13646 -2252 -2355 -2418 0
13646 -2252 -2353 -2420 0
13646 -2252 -2351 -2422 0
13646 -2252 -2349 -2424 0
13646 -2252 -2347 -2426 0
13646 -2252 -2345 -2428 0
13646 -2252 -2343 -2430 0
13646 -2252 -2341 -2432 0
13646 -2252 -2339 -2434 0
13646 -2252 -2337 -2436 0
13646 -2252 -2335 -2438 0
13646 -2252 -2334 -2440 0
13646 -2250 -2394 0
13646 -2250 -2379 -2396 0
13646 -2250 -2377 -2398 0
13646 -2250 -2375 -2400 0
13646 -2250 -2373 -2402 0
13646 -2250 -2371 -2404 0
13646 -2250 -2369 -2406 0
13646 -2250 -2367 -2408 0
13646 -2250 -2365 -2410 0
13646 -2250 -2363 -2412 0
13646 -2250 -2361 -2414 0
13646 -2250 -2359 -2416 0
13646 -2250 -2357 -2418 0
13646 -2250 -2355 -2420 0
13646 -2250 -2353 -2422 0
13646 -2250 -2351 -2424 0
13646 -2250 -2349 -2426 0
13646 -2250 -2347 -2428 0
13646 -2250 -2345 -2430 0
13646 -2250 -2343 -2432 0
13646 -2250 -2341 -2434 0
13646 -2250 -2339 -2436 0
13646 -2250 -2337 -2438 0
13646 -2250 -2335 -2440 0
13646 -2250 -2334 -2442 0
13646 -2248 -2396 0
13646 -2248 -2379 -2398 0
13646 -2248 -2377 -2400 0
13646 -2248 -2375 -2402 0
13646 -2248 -2373 -2404 0
13646 -2248 -2371 -2406 0
13646 -2248 -2369 -2408 0
13646 -2248 -2367 -2410 0
13646 -2248 -2365 -2412 0
13646 -2248 -2363 -2414 0
13646 -2248 -2361 -2416 0
13646 -2248 -2359 -2418 0
13646 -2248 -2357 -2420 0
13646 -2248 -2355 -2422 0
13646 -2248 -2353 -2424 0
13646 -2248 -2351 -2426 0
13646 -2248 -2349 -2428 0
13646 -2248 -2347 -2430 0
13646 -2248 -2345 -2432 0
13646 -2248 -2343 -2434 0
13646 -2248 -2341 -2436 0
13646 -2248 -2339 -2438 0
13646 -2248 -2337 -2440 0
13646 -2248 -2335 -2442 0
13646 -2248 -2334 0
13646 -2246 -2398 0
13646 -2246 -2379 -2400 0
13646 -2246 -2377 -2402 0
13646 -2246 -2375 -2404 0
13646 -2246 -2373 -2406 0
13646 -2246 -2371 -2408 0
13646 -2246 -2369 -2410 0
13646 -2246 -2367 -2412 0
13646 -2246 -2365 -2414 0
13646 -2246 -2363 -2416 0
13646 -2246 -2361 -2418 0
13646 -2246 -2359 -2420 0
13646 -2246 -2357 -2422 0
13646 -2246 -2355 -2424 0
13646 -2246 -2353 -2426 0
13646 -2246 -2351 -2428 0
13646 -2246 -2349 -2430 0
13646 -2246 -2347 -2432 0
13646 -2246 -2345 -2434 0
13646 -2246 -2343 -2436 0
13646 -2246 -2341 -2438 0
13646 -2246 -2339 -2440 0
13646 -2246 -2337 -2442 0
13646 -2246 -2335 0
13646 -2246 -2334 0
13646 -2244 -2400 0
13646 -2244 -2379 -2402 0
13646 -2244 -2377 -2404 0
13646 -2244 -2375 -2406 0
13646 -2244 -2373 -2408 0
13646 -2244 -2371 -2410 0
13646 -2244 -2369 -2412 0
13646 -2244 -2367 -2414 0
13646 -2244 -2365 -2416 0
13646 -2244 -2363 -2418 0
13646 -2244 -2361 -2420 0
13646 -2244 -2359 -2422 0
13646 -2244 -2357 -2424 0
13646 -2244 -2355 -2426 0
13646 -2244 -2353 -2428 0
13646 -2244 -2351 -2430 0
13646 -2244 -2349 -2432 0
13646 -2244 -2347 -2434 0
13646 -2244 -2345 -2436 0
13646 -2244 -2343 -2438 0
13646 -2244 -2341 -2440 0
13646 -2244 -2339 -2442 0
13646 -2244 -2337 0
13646 -2244 -2335 0
13646 -2244 -2334 0
13646 -2242 -2402 0
13646 -2242 -2379 -2404 0
13646 -2242 -2377 -2406 0
13646 -2242 -2375 -2408 0
13646 -2242 -2373 -2410 0
13646 -2242 -2371 -2412 0
13646 -2242 -2369 -2414 0
13646 -2242 -2367 -2416 0
13646 -2242 -2365 -2418 0
13646 -2242 -2363 -2420 0
13646 -2242 -2361 -2422 0
13646 -2242 -2359 -2424 0
13646 -2242 -2357 -2426 0
13646 -2242 -2355 -2428 0
13646 -2242 -2353 -2430 0
13646 -2242 -2351 -2432 0
13646 -2242 -2349 -2434 0
13646 -2242 -2347 -2436 0
13646 -2242 -2345 -2438 0
13646 -2242 -2343 -2440 0
13646 -2242 -2341 -2442 0
13646 -2242 -2339 0
13646 -2242 -2337 0
13646 -2242 -2335 0
13646 -2242 -2334 0
13646 -2241 -2404 0
13646 -2241 -2379 -2406 0
13646 -2241 -2377 -2408 0
13646 -2241 -2375 -2410 0
13646 -2241 -2373 -2412 0
13646 -2241 -2371 -2414 0
13646 -2241 -2369 -2416 0
13646 -2241 -2367 -2418 0
13646 -2241 -2365 -2420 0
13646 -2241 -2363 -2422 0
13646 -2241 -2361 -2424 0
13646 -2241 -2359 -2426 0
13646 -2241 -2357 -2428 0
13646 -2241 -2355 -2430 0
13646 -2241 -2353 -2432 0
13646 -2241 -2351 -2434 0
13646 -2241 -2349 -2436 0
13646 -2241 -2347 -2438 0
13646 -2241 -2345 -2440 0
13646 -2241 -2343 -2442 0
13646 -2241 -2341 0
13646 -2241 -2339 0
13646 -2241 -2337 0
13646 -2241 -2335 0
13646 -2241 -2334 0
c ((36<=(aux474 + aux477 + aux478))=tv=SATLiteral(13647))
-13647 -2371 -2381 0
-13647 -2369 -2382 0
-13647 -2367 -2384 0
-13647 -2365 -2386 0
-13647 -2363 -2388 0
-13647 -2361 -2390 0
-13647 -2359 -2392 0
-13647 -2357 -2394 0
-13647 -2355 -2396 0
-13647 -2353 -2398 0
-13647 -2351 -2400 0
-13647 -2349 -2402 0
-13647 -2347 -2404 0
-13647 -2345 -2406 0
-13647 -2343 -2408 0
-13647 -2341 -2410 0
-13647 -2339 -2412 0
-13647 -2337 -2414 0
-13647 -2335 -2416 0
-13647 -2334 -2418 0
-13647 -2270 -2373 -2381 0
-13647 -2270 -2371 -2382 0
-13647 -2270 -2369 -2384 0
-13647 -2270 -2367 -2386 0
-13647 -2270 -2365 -2388 0
-13647 -2270 -2363 -2390 0
-13647 -2270 -2361 -2392 0
-13647 -2270 -2359 -2394 0
-13647 -2270 -2357 -2396 0
-13647 -2270 -2355 -2398 0
-13647 -2270 -2353 -2400 0
-13647 -2270 -2351 -2402 0
-13647 -2270 -2349 -2404 0
-13647 -2270 -2347 -2406 0
-13647 -2270 -2345 -2408 0
-13647 -2270 -2343 -2410 0
-13647 -2270 -2341 -2412 0
-13647 -2270 -2339 -2414 0
-13647 -2270 -2337 -2416 0
-13647 -2270 -2335 -2418 0
-13647 -2270 -2334 -2420 0
-13647 -2268 -2375 -2381 0
-13647 -2268 -2373 -2382 0
-13647 -2268 -2371 -2384 0
-13647 -2268 -2369 -2386 0
-13647 -2268 -2367 -2388 0
-13647 -2268 -2365 -2390 0
-13647 -2268 -2363 -2392 0
-13647 -2268 -2361 -2394 0
-13647 -2268 -2359 -2396 0
-13647 -2268 -2357 -2398 0
-13647 -2268 -2355 -2400 0
-13647 -2268 -2353 -2402 0
-13647 -2268 -2351 -2404 0
-13647 -2268 -2349 -2406 0
-13647 -2268 -2347 -2408 0
-13647 -2268 -2345 -2410 0
-13647 -2268 -2343 -2412 0
-13647 -2268 -2341 -2414 0
-13647 -2268 -2339 -2416 0
-13647 -2268 -2337 -2418 0
-13647 -2268 -2335 -2420 0
-13647 -2268 -2334 -2422 0
-13647 -2266 -2377 -2381 0
-13647 -2266 -2375 -2382 0
-13647 -2266 -2373 -2384 0
-13647 -2266 -2371 -2386 0
-13647 -2266 -2369 -2388 0
-13647 -2266 -2367 -2390 0
-13647 -2266 -2365 -2392 0
-13647 -2266 -2363 -2394 0
-13647 -2266 -2361 -2396 0
-13647 -2266 -2359 -2398 0
-13647 -2266 -2357 -2400 0
-13647 -2266 -2355 -2402 0
-13647 -2266 -2353 -2404 0
-13647 -2266 -2351 -2406 0
-13647 -2266 -2349 -2408 0
-13647 -2266 -2347 -2410 0
-13647 -2266 -2345 -2412 0
-13647 -2266 -2343 -2414 0
-13647 -2266 -2341 -2416 0
-13647 -2266 -2339 -2418 0
-13647 -2266 -2337 -2420 0
-13647 -2266 -2335 -2422 0
-13647 -2266 -2334 -2424 0
-13647 -2264 -2379 -2381 0
-13647 -2264 -2377 -2382 0
-13647 -2264 -2375 -2384 0
-13647 -2264 -2373 -2386 0
-13647 -2264 -2371 -2388 0
-13647 -2264 -2369 -2390 0
-13647 -2264 -2367 -2392 0
-13647 -2264 -2365 -2394 0
-13647 -2264 -2363 -2396 0
-13647 -2264 -2361 -2398 0
-13647 -2264 -2359 -2400 0
-13647 -2264 -2357 -2402 0
-13647 -2264 -2355 -2404 0
-13647 -2264 -2353 -2406 0
-13647 -2264 -2351 -2408 0
-13647 -2264 -2349 -2410 0
-13647 -2264 -2347 -2412 0
-13647 -2264 -2345 -2414 0
-13647 -2264 -2343 -2416 0
-13647 -2264 -2341 -2418 0
-13647 -2264 -2339 -2420 0
-13647 -2264 -2337 -2422 0
-13647 -2264 -2335 -2424 0
-13647 -2264 -2334 -2426 0
-13647 -2262 -2381 0
-13647 -2262 -2379 -2382 0
-13647 -2262 -2377 -2384 0
-13647 -2262 -2375 -2386 0
-13647 -2262 -2373 -2388 0
-13647 -2262 -2371 -2390 0
-13647 -2262 -2369 -2392 0
-13647 -2262 -2367 -2394 0
-13647 -2262 -2365 -2396 0
-13647 -2262 -2363 -2398 0
-13647 -2262 -2361 -2400 0
-13647 -2262 -2359 -2402 0
-13647 -2262 -2357 -2404 0
-13647 -2262 -2355 -2406 0
-13647 -2262 -2353 -2408 0
-13647 -2262 -2351 -2410 0
-13647 -2262 -2349 -2412 0
-13647 -2262 -2347 -2414 0
-13647 -2262 -2345 -2416 0
-13647 -2262 -2343 -2418 0
-13647 -2262 -2341 -2420 0
-13647 -2262 -2339 -2422 0
-13647 -2262 -2337 -2424 0
-13647 -2262 -2335 -2426 0
-13647 -2262 -2334 -2428 0
-13647 -2260 -2382 0
-13647 -2260 -2379 -2384 0
-13647 -2260 -2377 -2386 0
-13647 -2260 -2375 -2388 0
-13647 -2260 -2373 -2390 0
-13647 -2260 -2371 -2392 0
-13647 -2260 -2369 -2394 0
-13647 -2260 -2367 -2396 0
-13647 -2260 -2365 -2398 0
-13647 -2260 -2363 -2400 0
-13647 -2260 -2361 -2402 0
-13647 -2260 -2359 -2404 0
-13647 -2260 -2357 -2406 0
-13647 -2260 -2355 -2408 0
-13647 -2260 -2353 -2410 0
-13647 -2260 -2351 -2412 0
-13647 -2260 -2349 -2414 0
-13647 -2260 -2347 -2416 0
-13647 -2260 -2345 -2418 0
-13647 -2260 -2343 -2420 0
-13647 -2260 -2341 -2422 0
-13647 -2260 -2339 -2424 0
-13647 -2260 -2337 -2426 0
-13647 -2260 -2335 -2428 0
-13647 -2260 -2334 -2430 0
-13647 -2258 -2384 0
-13647 -2258 -2379 -2386 0
-13647 -2258 -2377 -2388 0
-13647 -2258 -2375 -2390 0
-13647 -2258 -2373 -2392 0
-13647 -2258 -2371 -2394 0
-13647 -2258 -2369 -2396 0
-13647 -2258 -2367 -2398 0
-13647 -2258 -2365 -2400 0
-13647 -2258 -2363 -2402 0
-13647 -2258 -2361 -2404 0
-13647 -2258 -2359 -2406 0
-13647 -2258 -2357 -2408 0
-13647 -2258 -2355 -2410 0
-13647 -2258 -2353 -2412 0
-13647 -2258 -2351 -2414 0
-13647 -2258 -2349 -2416 0
-13647 -2258 -2347 -2418 0
-13647 -2258 -2345 -2420 0
-13647 -2258 -2343 -2422 0
-13647 -2258 -2341 -2424 0
-13647 -2258 -2339 -2426 0
-13647 -2258 -2337 -2428 0
-13647 -2258 -2335 -2430 0
-13647 -2258 -2334 -2432 0
-13647 -2256 -2386 0
-13647 -2256 -2379 -2388 0
-13647 -2256 -2377 -2390 0
-13647 -2256 -2375 -2392 0
-13647 -2256 -2373 -2394 0
-13647 -2256 -2371 -2396 0
-13647 -2256 -2369 -2398 0
-13647 -2256 -2367 -2400 0
-13647 -2256 -2365 -2402 0
-13647 -2256 -2363 -2404 0
-13647 -2256 -2361 -2406 0
-13647 -2256 -2359 -2408 0
-13647 -2256 -2357 -2410 0
-13647 -2256 -2355 -2412 0
-13647 -2256 -2353 -2414 0
-13647 -2256 -2351 -2416 0
-13647 -2256 -2349 -2418 0
-13647 -2256 -2347 -2420 0
-13647 -2256 -2345 -2422 0
-13647 -2256 -2343 -2424 0
-13647 -2256 -2341 -2426 0
-13647 -2256 -2339 -2428 0
-13647 -2256 -2337 -2430 0
-13647 -2256 -2335 -2432 0
-13647 -2256 -2334 -2434 0
-13647 -2254 -2388 0
-13647 -2254 -2379 -2390 0
-13647 -2254 -2377 -2392 0
-13647 -2254 -2375 -2394 0
-13647 -2254 -2373 -2396 0
-13647 -2254 -2371 -2398 0
-13647 -2254 -2369 -2400 0
-13647 -2254 -2367 -2402 0
-13647 -2254 -2365 -2404 0
-13647 -2254 -2363 -2406 0
-13647 -2254 -2361 -2408 0
-13647 -2254 -2359 -2410 0
-13647 -2254 -2357 -2412 0
-13647 -2254 -2355 -2414 0
-13647 -2254 -2353 -2416 0
-13647 -2254 -2351 -2418 0
-13647 -2254 -2349 -2420 0
-13647 -2254 -2347 -2422 0
-13647 -2254 -2345 -2424 0
-13647 -2254 -2343 -2426 0
-13647 -2254 -2341 -2428 0
-13647 -2254 -2339 -2430 0
-13647 -2254 -2337 -2432 0
-13647 -2254 -2335 -2434 0
-13647 -2254 -2334 -2436 0
-13647 -2252 -2390 0
-13647 -2252 -2379 -2392 0
-13647 -2252 -2377 -2394 0
-13647 -2252 -2375 -2396 0
-13647 -2252 -2373 -2398 0
-13647 -2252 -2371 -2400 0
-13647 -2252 -2369 -2402 0
-13647 -2252 -2367 -2404 0
-13647 -2252 -2365 -2406 0
-13647 -2252 -2363 -2408 0
-13647 -2252 -2361 -2410 0
-13647 -2252 -2359 -2412 0
-13647 -2252 -2357 -2414 0
-13647 -2252 -2355 -2416 0
-13647 -2252 -2353 -2418 0
-13647 -2252 -2351 -2420 0
-13647 -2252 -2349 -2422 0
-13647 -2252 -2347 -2424 0
-13647 -2252 -2345 -2426 0
-13647 -2252 -2343 -2428 0
-13647 -2252 -2341 -2430 0
-13647 -2252 -2339 -2432 0
-13647 -2252 -2337 -2434 0
-13647 -2252 -2335 -2436 0
-13647 -2252 -2334 -2438 0
-13647 -2250 -2392 0
-13647 -2250 -2379 -2394 0
-13647 -2250 -2377 -2396 0
-13647 -2250 -2375 -2398 0
-13647 -2250 -2373 -2400 0
-13647 -2250 -2371 -2402 0
-13647 -2250 -2369 -2404 0
-13647 -2250 -2367 -2406 0
-13647 -2250 -2365 -2408 0
-13647 -2250 -2363 -2410 0
-13647 -2250 -2361 -2412 0
-13647 -2250 -2359 -2414 0
-13647 -2250 -2357 -2416 0
-13647 -2250 -2355 -2418 0
-13647 -2250 -2353 -2420 0
-13647 -2250 -2351 -2422 0
-13647 -2250 -2349 -2424 0
-13647 -2250 -2347 -2426 0
-13647 -2250 -2345 -2428 0
-13647 -2250 -2343 -2430 0
-13647 -2250 -2341 -2432 0
-13647 -2250 -2339 -2434 0
-13647 -2250 -2337 -2436 0
-13647 -2250 -2335 -2438 0
-13647 -2250 -2334 -2440 0
-13647 -2248 -2394 0
-13647 -2248 -2379 -2396 0
-13647 -2248 -2377 -2398 0
-13647 -2248 -2375 -2400 0
-13647 -2248 -2373 -2402 0
-13647 -2248 -2371 -2404 0
-13647 -2248 -2369 -2406 0
-13647 -2248 -2367 -2408 0
-13647 -2248 -2365 -2410 0
-13647 -2248 -2363 -2412 0
-13647 -2248 -2361 -2414 0
-13647 -2248 -2359 -2416 0
-13647 -2248 -2357 -2418 0
-13647 -2248 -2355 -2420 0
-13647 -2248 -2353 -2422 0
-13647 -2248 -2351 -2424 0
-13647 -2248 -2349 -2426 0
-13647 -2248 -2347 -2428 0
-13647 -2248 -2345 -2430 0
-13647 -2248 -2343 -2432 0
-13647 -2248 -2341 -2434 0
-13647 -2248 -2339 -2436 0
-13647 -2248 -2337 -2438 0
-13647 -2248 -2335 -2440 0
-13647 -2248 -2334 -2442 0
-13647 -2246 -2396 0
-13647 -2246 -2379 -2398 0
-13647 -2246 -2377 -2400 0
-13647 -2246 -2375 -2402 0
-13647 -2246 -2373 -2404 0
-13647 -2246 -2371 -2406 0
-13647 -2246 -2369 -2408 0
-13647 -2246 -2367 -2410 0
-13647 -2246 -2365 -2412 0
-13647 -2246 -2363 -2414 0
-13647 -2246 -2361 -2416 0
-13647 -2246 -2359 -2418 0
-13647 -2246 -2357 -2420 0
-13647 -2246 -2355 -2422 0
-13647 -2246 -2353 -2424 0
-13647 -2246 -2351 -2426 0
-13647 -2246 -2349 -2428 0
-13647 -2246 -2347 -2430 0
-13647 -2246 -2345 -2432 0
-13647 -2246 -2343 -2434 0
-13647 -2246 -2341 -2436 0
-13647 -2246 -2339 -2438 0
-13647 -2246 -2337 -2440 0
-13647 -2246 -2335 -2442 0
-13647 -2246 -2334 0
-13647 -2244 -2398 0
-13647 -2244 -2379 -2400 0
-13647 -2244 -2377 -2402 0
-13647 -2244 -2375 -2404 0
-13647 -2244 -2373 -2406 0
-13647 -2244 -2371 -2408 0
-13647 -2244 -2369 -2410 0
-13647 -2244 -2367 -2412 0
-13647 -2244 -2365 -2414 0
-13647 -2244 -2363 -2416 0
-13647 -2244 -2361 -2418 0
-13647 -2244 -2359 -2420 0
-13647 -2244 -2357 -2422 0
-13647 -2244 -2355 -2424 0
-13647 -2244 -2353 -2426 0
-13647 -2244 -2351 -2428 0
-13647 -2244 -2349 -2430 0
-13647 -2244 -2347 -2432 0
-13647 -2244 -2345 -2434 0
-13647 -2244 -2343 -2436 0
-13647 -2244 -2341 -2438 0
-13647 -2244 -2339 -2440 0
-13647 -2244 -2337 -2442 0
-13647 -2244 -2335 0
-13647 -2244 -2334 0
-13647 -2242 -2400 0
-13647 -2242 -2379 -2402 0
-13647 -2242 -2377 -2404 0
-13647 -2242 -2375 -2406 0
-13647 -2242 -2373 -2408 0
-13647 -2242 -2371 -2410 0
-13647 -2242 -2369 -2412 0
-13647 -2242 -2367 -2414 0
-13647 -2242 -2365 -2416 0
-13647 -2242 -2363 -2418 0
-13647 -2242 -2361 -2420 0
-13647 -2242 -2359 -2422 0
-13647 -2242 -2357 -2424 0
-13647 -2242 -2355 -2426 0
-13647 -2242 -2353 -2428 0
-13647 -2242 -2351 -2430 0
-13647 -2242 -2349 -2432 0
-13647 -2242 -2347 -2434 0
-13647 -2242 -2345 -2436 0
-13647 -2242 -2343 -2438 0
-13647 -2242 -2341 -2440 0
-13647 -2242 -2339 -2442 0
-13647 -2242 -2337 0
-13647 -2242 -2335 0
-13647 -2242 -2334 0
-13647 -2241 -2402 0
-13647 -2241 -2379 -2404 0
-13647 -2241 -2377 -2406 0
-13647 -2241 -2375 -2408 0
-13647 -2241 -2373 -2410 0
-13647 -2241 -2371 -2412 0
-13647 -2241 -2369 -2414 0
-13647 -2241 -2367 -2416 0
-13647 -2241 -2365 -2418 0
-13647 -2241 -2363 -2420 0
-13647 -2241 -2361 -2422 0
-13647 -2241 -2359 -2424 0
-13647 -2241 -2357 -2426 0
-13647 -2241 -2355 -2428 0
-13647 -2241 -2353 -2430 0
-13647 -2241 -2351 -2432 0
-13647 -2241 -2349 -2434 0
-13647 -2241 -2347 -2436 0
-13647 -2241 -2345 -2438 0
-13647 -2241 -2343 -2440 0
-13647 -2241 -2341 -2442 0
-13647 -2241 -2339 0
-13647 -2241 -2337 0
-13647 -2241 -2335 0
-13647 -2241 -2334 0
13647 2339 2442 0
13647 2341 2440 0
13647 2343 2438 0
13647 2345 2436 0
13647 2347 2434 0
13647 2349 2432 0
13647 2351 2430 0
13647 2353 2428 0
13647 2355 2426 0
13647 2357 2424 0
13647 2359 2422 0
13647 2361 2420 0
13647 2363 2418 0
13647 2365 2416 0
13647 2367 2414 0
13647 2369 2412 0
13647 2371 2410 0
13647 2373 2408 0
13647 2375 2406 0
13647 2377 2404 0
13647 2379 2402 0
13647 2241 2337 2442 0
13647 2241 2339 2440 0
13647 2241 2341 2438 0
13647 2241 2343 2436 0
13647 2241 2345 2434 0
13647 2241 2347 2432 0
13647 2241 2349 2430 0
13647 2241 2351 2428 0
13647 2241 2353 2426 0
13647 2241 2355 2424 0
13647 2241 2357 2422 0
13647 2241 2359 2420 0
13647 2241 2361 2418 0
13647 2241 2363 2416 0
13647 2241 2365 2414 0
13647 2241 2367 2412 0
13647 2241 2369 2410 0
13647 2241 2371 2408 0
13647 2241 2373 2406 0
13647 2241 2375 2404 0
13647 2241 2377 2402 0
13647 2241 2379 2400 0
13647 2242 2335 2442 0
13647 2242 2337 2440 0
13647 2242 2339 2438 0
13647 2242 2341 2436 0
13647 2242 2343 2434 0
13647 2242 2345 2432 0
13647 2242 2347 2430 0
13647 2242 2349 2428 0
13647 2242 2351 2426 0
13647 2242 2353 2424 0
13647 2242 2355 2422 0
13647 2242 2357 2420 0
13647 2242 2359 2418 0
13647 2242 2361 2416 0
13647 2242 2363 2414 0
13647 2242 2365 2412 0
13647 2242 2367 2410 0
13647 2242 2369 2408 0
13647 2242 2371 2406 0
13647 2242 2373 2404 0
13647 2242 2375 2402 0
13647 2242 2377 2400 0
13647 2242 2379 2398 0
13647 2244 2334 2442 0
13647 2244 2335 2440 0
13647 2244 2337 2438 0
13647 2244 2339 2436 0
13647 2244 2341 2434 0
13647 2244 2343 2432 0
13647 2244 2345 2430 0
13647 2244 2347 2428 0
13647 2244 2349 2426 0
13647 2244 2351 2424 0
13647 2244 2353 2422 0
13647 2244 2355 2420 0
13647 2244 2357 2418 0
13647 2244 2359 2416 0
13647 2244 2361 2414 0
13647 2244 2363 2412 0
13647 2244 2365 2410 0
13647 2244 2367 2408 0
13647 2244 2369 2406 0
13647 2244 2371 2404 0
13647 2244 2373 2402 0
13647 2244 2375 2400 0
13647 2244 2377 2398 0
13647 2244 2379 2396 0
13647 2246 2442 0
13647 2246 2334 2440 0
13647 2246 2335 2438 0
13647 2246 2337 2436 0
13647 2246 2339 2434 0
13647 2246 2341 2432 0
13647 2246 2343 2430 0
13647 2246 2345 2428 0
13647 2246 2347 2426 0
13647 2246 2349 2424 0
13647 2246 2351 2422 0
13647 2246 2353 2420 0
13647 2246 2355 2418 0
13647 2246 2357 2416 0
13647 2246 2359 2414 0
13647 2246 2361 2412 0
13647 2246 2363 2410 0
13647 2246 2365 2408 0
13647 2246 2367 2406 0
13647 2246 2369 2404 0
13647 2246 2371 2402 0
13647 2246 2373 2400 0
13647 2246 2375 2398 0
13647 2246 2377 2396 0
13647 2246 2379 2394 0
13647 2248 2440 0
13647 2248 2334 2438 0
13647 2248 2335 2436 0
13647 2248 2337 2434 0
13647 2248 2339 2432 0
13647 2248 2341 2430 0
13647 2248 2343 2428 0
13647 2248 2345 2426 0
13647 2248 2347 2424 0
13647 2248 2349 2422 0
13647 2248 2351 2420 0
13647 2248 2353 2418 0
13647 2248 2355 2416 0
13647 2248 2357 2414 0
13647 2248 2359 2412 0
13647 2248 2361 2410 0
13647 2248 2363 2408 0
13647 2248 2365 2406 0
13647 2248 2367 2404 0
13647 2248 2369 2402 0
13647 2248 2371 2400 0
13647 2248 2373 2398 0
13647 2248 2375 2396 0
13647 2248 2377 2394 0
13647 2248 2379 2392 0
13647 2250 2438 0
13647 2250 2334 2436 0
13647 2250 2335 2434 0
13647 2250 2337 2432 0
13647 2250 2339 2430 0
13647 2250 2341 2428 0
13647 2250 2343 2426 0
13647 2250 2345 2424 0
13647 2250 2347 2422 0
13647 2250 2349 2420 0
13647 2250 2351 2418 0
13647 2250 2353 2416 0
13647 2250 2355 2414 0
13647 2250 2357 2412 0
13647 2250 2359 2410 0
13647 2250 2361 2408 0
13647 2250 2363 2406 0
13647 2250 2365 2404 0
13647 2250 2367 2402 0
13647 2250 2369 2400 0
13647 2250 2371 2398 0
13647 2250 2373 2396 0
13647 2250 2375 2394 0
13647 2250 2377 2392 0
13647 2250 2379 2390 0
13647 2252 2436 0
13647 2252 2334 2434 0
13647 2252 2335 2432 0
13647 2252 2337 2430 0
13647 2252 2339 2428 0
13647 2252 2341 2426 0
13647 2252 2343 2424 0
13647 2252 2345 2422 0
13647 2252 2347 2420 0
13647 2252 2349 2418 0
13647 2252 2351 2416 0
13647 2252 2353 2414 0
13647 2252 2355 2412 0
13647 2252 2357 2410 0
13647 2252 2359 2408 0
13647 2252 2361 2406 0
13647 2252 2363 2404 0
13647 2252 2365 2402 0
13647 2252 2367 2400 0
13647 2252 2369 2398 0
13647 2252 2371 2396 0
13647 2252 2373 2394 0
13647 2252 2375 2392 0
13647 2252 2377 2390 0
13647 2252 2379 2388 0
13647 2254 2434 0
13647 2254 2334 2432 0
13647 2254 2335 2430 0
13647 2254 2337 2428 0
13647 2254 2339 2426 0
13647 2254 2341 2424 0
13647 2254 2343 2422 0
13647 2254 2345 2420 0
13647 2254 2347 2418 0
13647 2254 2349 2416 0
13647 2254 2351 2414 0
13647 2254 2353 2412 0
13647 2254 2355 2410 0
13647 2254 2357 2408 0
13647 2254 2359 2406 0
13647 2254 2361 2404 0
13647 2254 2363 2402 0
13647 2254 2365 2400 0
13647 2254 2367 2398 0
13647 2254 2369 2396 0
13647 2254 2371 2394 0
13647 2254 2373 2392 0
13647 2254 2375 2390 0
13647 2254 2377 2388 0
13647 2254 2379 2386 0
13647 2256 2432 0
13647 2256 2334 2430 0
13647 2256 2335 2428 0
13647 2256 2337 2426 0
13647 2256 2339 2424 0
13647 2256 2341 2422 0
13647 2256 2343 2420 0
13647 2256 2345 2418 0
13647 2256 2347 2416 0
13647 2256 2349 2414 0
13647 2256 2351 2412 0
13647 2256 2353 2410 0
13647 2256 2355 2408 0
13647 2256 2357 2406 0
13647 2256 2359 2404 0
13647 2256 2361 2402 0
13647 2256 2363 2400 0
13647 2256 2365 2398 0
13647 2256 2367 2396 0
13647 2256 2369 2394 0
13647 2256 2371 2392 0
13647 2256 2373 2390 0
13647 2256 2375 2388 0
13647 2256 2377 2386 0
13647 2256 2379 2384 0
13647 2258 2430 0
13647 2258 2334 2428 0
13647 2258 2335 2426 0
13647 2258 2337 2424 0
13647 2258 2339 2422 0
13647 2258 2341 2420 0
13647 2258 2343 2418 0
13647 2258 2345 2416 0
13647 2258 2347 2414 0
13647 2258 2349 2412 0
13647 2258 2351 2410 0
13647 2258 2353 2408 0
13647 2258 2355 2406 0
13647 2258 2357 2404 0
13647 2258 2359 2402 0
13647 2258 2361 2400 0
13647 2258 2363 2398 0
13647 2258 2365 2396 0
13647 2258 2367 2394 0
13647 2258 2369 2392 0
13647 2258 2371 2390 0
13647 2258 2373 2388 0
13647 2258 2375 2386 0
13647 2258 2377 2384 0
13647 2258 2379 2382 0
13647 2260 2428 0
13647 2260 2334 2426 0
13647 2260 2335 2424 0
13647 2260 2337 2422 0
13647 2260 2339 2420 0
13647 2260 2341 2418 0
13647 2260 2343 2416 0
13647 2260 2345 2414 0
13647 2260 2347 2412 0
13647 2260 2349 2410 0
13647 2260 2351 2408 0
13647 2260 2353 2406 0
13647 2260 2355 2404 0
13647 2260 2357 2402 0
13647 2260 2359 2400 0
13647 2260 2361 2398 0
13647 2260 2363 2396 0
13647 2260 2365 2394 0
13647 2260 2367 2392 0
13647 2260 2369 2390 0
13647 2260 2371 2388 0
13647 2260 2373 2386 0
13647 2260 2375 2384 0
13647 2260 2377 2382 0
13647 2260 2379 2381 0
13647 2262 2426 0
13647 2262 2334 2424 0
13647 2262 2335 2422 0
13647 2262 2337 2420 0
13647 2262 2339 2418 0
13647 2262 2341 2416 0
13647 2262 2343 2414 0
13647 2262 2345 2412 0
13647 2262 2347 2410 0
13647 2262 2349 2408 0
13647 2262 2351 2406 0
13647 2262 2353 2404 0
13647 2262 2355 2402 0
13647 2262 2357 2400 0
13647 2262 2359 2398 0
13647 2262 2361 2396 0
13647 2262 2363 2394 0
13647 2262 2365 2392 0
13647 2262 2367 2390 0
13647 2262 2369 2388 0
13647 2262 2371 2386 0
13647 2262 2373 2384 0
13647 2262 2375 2382 0
13647 2262 2377 2381 0
13647 2262 2379 0
13647 2264 2424 0
13647 2264 2334 2422 0
13647 2264 2335 2420 0
13647 2264 2337 2418 0
13647 2264 2339 2416 0
13647 2264 2341 2414 0
13647 2264 2343 2412 0
13647 2264 2345 2410 0
13647 2264 2347 2408 0
13647 2264 2349 2406 0
13647 2264 2351 2404 0
13647 2264 2353 2402 0
13647 2264 2355 2400 0
13647 2264 2357 2398 0
13647 2264 2359 2396 0
13647 2264 2361 2394 0
13647 2264 2363 2392 0
13647 2264 2365 2390 0
13647 2264 2367 2388 0
13647 2264 2369 2386 0
13647 2264 2371 2384 0
13647 2264 2373 2382 0
13647 2264 2375 2381 0
13647 2264 2377 0
13647 2264 2379 0
13647 2266 2422 0
13647 2266 2334 2420 0
13647 2266 2335 2418 0
13647 2266 2337 2416 0
13647 2266 2339 2414 0
13647 2266 2341 2412 0
13647 2266 2343 2410 0
13647 2266 2345 2408 0
13647 2266 2347 2406 0
13647 2266 2349 2404 0
13647 2266 2351 2402 0
13647 2266 2353 2400 0
13647 2266 2355 2398 0
13647 2266 2357 2396 0
13647 2266 2359 2394 0
13647 2266 2361 2392 0
13647 2266 2363 2390 0
13647 2266 2365 2388 0
13647 2266 2367 2386 0
13647 2266 2369 2384 0
13647 2266 2371 2382 0
13647 2266 2373 2381 0
13647 2266 2375 0
13647 2266 2377 0
13647 2266 2379 0
13647 2268 2420 0
13647 2268 2334 2418 0
13647 2268 2335 2416 0
13647 2268 2337 2414 0
13647 2268 2339 2412 0
13647 2268 2341 2410 0
13647 2268 2343 2408 0
13647 2268 2345 2406 0
13647 2268 2347 2404 0
13647 2268 2349 2402 0
13647 2268 2351 2400 0
13647 2268 2353 2398 0
13647 2268 2355 2396 0
13647 2268 2357 2394 0
13647 2268 2359 2392 0
13647 2268 2361 2390 0
13647 2268 2363 2388 0
13647 2268 2365 2386 0
13647 2268 2367 2384 0
13647 2268 2369 2382 0
13647 2268 2371 2381 0
13647 2268 2373 0
13647 2268 2375 0
13647 2268 2377 0
13647 2268 2379 0
13647 2270 2418 0
13647 2270 2334 2416 0
13647 2270 2335 2414 0
13647 2270 2337 2412 0
13647 2270 2339 2410 0
13647 2270 2341 2408 0
13647 2270 2343 2406 0
13647 2270 2345 2404 0
13647 2270 2347 2402 0
13647 2270 2349 2400 0
13647 2270 2351 2398 0
13647 2270 2353 2396 0
13647 2270 2355 2394 0
13647 2270 2357 2392 0
13647 2270 2359 2390 0
13647 2270 2361 2388 0
13647 2270 2363 2386 0
13647 2270 2365 2384 0
13647 2270 2367 2382 0
13647 2270 2369 2381 0
13647 2270 2371 0
13647 2270 2373 0
13647 2270 2375 0
13647 2270 2377 0
13647 2270 2379 0
c (((aux480 + aux483 + aux484)<=36)=tv=SATLiteral(13648))
-13648 2575 2676 0
-13648 2577 2674 0
-13648 2579 2672 0
-13648 2581 2670 0
-13648 2583 2668 0
-13648 2585 2666 0
-13648 2587 2664 0
-13648 2589 2662 0
-13648 2591 2660 0
-13648 2593 2658 0
-13648 2595 2656 0
-13648 2597 2654 0
-13648 2599 2652 0
-13648 2601 2650 0
-13648 2603 2648 0
-13648 2605 2646 0
-13648 2607 2644 0
-13648 2609 2642 0
-13648 2611 2640 0
-13648 2613 2638 0
-13648 2475 2573 2676 0
-13648 2475 2575 2674 0
-13648 2475 2577 2672 0
-13648 2475 2579 2670 0
-13648 2475 2581 2668 0
-13648 2475 2583 2666 0
-13648 2475 2585 2664 0
-13648 2475 2587 2662 0
-13648 2475 2589 2660 0
-13648 2475 2591 2658 0
-13648 2475 2593 2656 0
-13648 2475 2595 2654 0
-13648 2475 2597 2652 0
-13648 2475 2599 2650 0
-13648 2475 2601 2648 0
-13648 2475 2603 2646 0
-13648 2475 2605 2644 0
-13648 2475 2607 2642 0
-13648 2475 2609 2640 0
-13648 2475 2611 2638 0
-13648 2475 2613 2636 0
-13648 2476 2571 2676 0
-13648 2476 2573 2674 0
-13648 2476 2575 2672 0
-13648 2476 2577 2670 0
-13648 2476 2579 2668 0
-13648 2476 2581 2666 0
-13648 2476 2583 2664 0
-13648 2476 2585 2662 0
-13648 2476 2587 2660 0
-13648 2476 2589 2658 0
-13648 2476 2591 2656 0
-13648 2476 2593 2654 0
-13648 2476 2595 2652 0
-13648 2476 2597 2650 0
-13648 2476 2599 2648 0
-13648 2476 2601 2646 0
-13648 2476 2603 2644 0
-13648 2476 2605 2642 0
-13648 2476 2607 2640 0
-13648 2476 2609 2638 0
-13648 2476 2611 2636 0
-13648 2476 2613 2634 0
-13648 2478 2569 2676 0
-13648 2478 2571 2674 0
-13648 2478 2573 2672 0
-13648 2478 2575 2670 0
-13648 2478 2577 2668 0
-13648 2478 2579 2666 0
-13648 2478 2581 2664 0
-13648 2478 2583 2662 0
-13648 2478 2585 2660 0
-13648 2478 2587 2658 0
-13648 2478 2589 2656 0
-13648 2478 2591 2654 0
-13648 2478 2593 2652 0
-13648 2478 2595 2650 0
-13648 2478 2597 2648 0
-13648 2478 2599 2646 0
-13648 2478 2601 2644 0
-13648 2478 2603 2642 0
-13648 2478 2605 2640 0
-13648 2478 2607 2638 0
-13648 2478 2609 2636 0
-13648 2478 2611 2634 0
-13648 2478 2613 2632 0
-13648 2480 2568 2676 0
-13648 2480 2569 2674 0
-13648 2480 2571 2672 0
-13648 2480 2573 2670 0
-13648 2480 2575 2668 0
-13648 2480 2577 2666 0
-13648 2480 2579 2664 0
-13648 2480 2581 2662 0
-13648 2480 2583 2660 0
-13648 2480 2585 2658 0
-13648 2480 2587 2656 0
-13648 2480 2589 2654 0
-13648 2480 2591 2652 0
-13648 2480 2593 2650 0
-13648 2480 2595 2648 0
-13648 2480 2597 2646 0
-13648 2480 2599 2644 0
-13648 2480 2601 2642 0
-13648 2480 2603 2640 0
-13648 2480 2605 2638 0
-13648 2480 2607 2636 0
-13648 2480 2609 2634 0
-13648 2480 2611 2632 0
-13648 2480 2613 2630 0
-13648 2482 2676 0
-13648 2482 2568 2674 0
-13648 2482 2569 2672 0
-13648 2482 2571 2670 0
-13648 2482 2573 2668 0
-13648 2482 2575 2666 0
-13648 2482 2577 2664 0
-13648 2482 2579 2662 0
-13648 2482 2581 2660 0
-13648 2482 2583 2658 0
-13648 2482 2585 2656 0
-13648 2482 2587 2654 0
-13648 2482 2589 2652 0
-13648 2482 2591 2650 0
-13648 2482 2593 2648 0
-13648 2482 2595 2646 0
-13648 2482 2597 2644 0
-13648 2482 2599 2642 0
-13648 2482 2601 2640 0
-13648 2482 2603 2638 0
-13648 2482 2605 2636 0
-13648 2482 2607 2634 0
-13648 2482 2609 2632 0
-13648 2482 2611 2630 0
-13648 2482 2613 2628 0
-13648 2484 2674 0
-13648 2484 2568 2672 0
-13648 2484 2569 2670 0
-13648 2484 2571 2668 0
-13648 2484 2573 2666 0
-13648 2484 2575 2664 0
-13648 2484 2577 2662 0
-13648 2484 2579 2660 0
-13648 2484 2581 2658 0
-13648 2484 2583 2656 0
-13648 2484 2585 2654 0
-13648 2484 2587 2652 0
-13648 2484 2589 2650 0
-13648 2484 2591 2648 0
-13648 2484 2593 2646 0
-13648 2484 2595 2644 0
-13648 2484 2597 2642 0
-13648 2484 2599 2640 0
-13648 2484 2601 2638 0
-13648 2484 2603 2636 0
-13648 2484 2605 2634 0
-13648 2484 2607 2632 0
-13648 2484 2609 2630 0
-13648 2484 2611 2628 0
-13648 2484 2613 2626 0
-13648 2486 2672 0
-13648 2486 2568 2670 0
-13648 2486 2569 2668 0
-13648 2486 2571 2666 0
-13648 2486 2573 2664 0
-13648 2486 2575 2662 0
-13648 2486 2577 2660 0
-13648 2486 2579 2658 0
-13648 2486 2581 2656 0
-13648 2486 2583 2654 0
-13648 2486 2585 2652 0
-13648 2486 2587 2650 0
-13648 2486 2589 2648 0
-13648 2486 2591 2646 0
-13648 2486 2593 2644 0
-13648 2486 2595 2642 0
-13648 2486 2597 2640 0
-13648 2486 2599 2638 0
-13648 2486 2601 2636 0
-13648 2486 2603 2634 0
-13648 2486 2605 2632 0
-13648 2486 2607 2630 0
-13648 2486 2609 2628 0
-13648 2486 2611 2626 0
-13648 2486 2613 2624 0
-13648 2488 2670 0
-13648 2488 2568 2668 0
-13648 2488 2569 2666 0
-13648 2488 2571 2664 0
-13648 2488 2573 2662 0
-13648 2488 2575 2660 0
-13648 2488 2577 2658 0
-13648 2488 2579 2656 0
-13648 2488 2581 2654 0
-13648 2488 2583 2652 0
-13648 2488 2585 2650 0
-13648 2488 2587 2648 0
-13648 2488 2589 2646 0
-13648 2488 2591 2644 0
-13648 2488 2593 2642 0
-13648 2488 2595 2640 0
-13648 2488 2597 2638 0
-13648 2488 2599 2636 0
-13648 2488 2601 2634 0
-13648 2488 2603 2632 0
-13648 2488 2605 2630 0
-13648 2488 2607 2628 0
-13648 2488 2609 2626 0
-13648 2488 2611 2624 0
-13648 2488 2613 2622 0
-13648 2490 2668 0
-13648 2490 2568 2666 0
-13648 2490 2569 2664 0
-13648 2490 2571 2662 0
-13648 2490 2573 2660 0
-13648 2490 2575 2658 0
-13648 2490 2577 2656 0
-13648 2490 2579 2654 0
-13648 2490 2581 2652 0
-13648 2490 2583 2650 0
-13648 2490 2585 2648 0
-13648 2490 2587 2646 0
-13648 2490 2589 2644 0
-13648 2490 2591 2642 0
-13648 2490 2593 2640 0
-13648 2490 2595 2638 0
-13648 2490 2597 2636 0
-13648 2490 2599 2634 0
-13648 2490 2601 2632 0
-13648 2490 2603 2630 0
-13648 2490 2605 2628 0
-13648 2490 2607 2626 0
-13648 2490 2609 2624 0
-13648 2490 2611 2622 0
-13648 2490 2613 2620 0
-13648 2492 2666 0
-13648 2492 2568 2664 0
-13648 2492 2569 2662 0
-13648 2492 2571 2660 0
-13648 2492 2573 2658 0
-13648 2492 2575 2656 0
-13648 2492 2577 2654 0
-13648 2492 2579 2652 0
-13648 2492 2581 2650 0
-13648 2492 2583 2648 0
-13648 2492 2585 2646 0
-13648 2492 2587 2644 0
-13648 2492 2589 2642 0
-13648 2492 2591 2640 0
-13648 2492 2593 2638 0
-13648 2492 2595 2636 0
-13648 2492 2597 2634 0
-13648 2492 2599 2632 0
-13648 2492 2601 2630 0
-13648 2492 2603 2628 0
-13648 2492 2605 2626 0
-13648 2492 2607 2624 0
-13648 2492 2609 2622 0
-13648 2492 2611 2620 0
-13648 2492 2613 2618 0
-13648 2494 2664 0
-13648 2494 2568 2662 0
-13648 2494 2569 2660 0
-13648 2494 2571 2658 0
-13648 2494 2573 2656 0
-13648 2494 2575 2654 0
-13648 2494 2577 2652 0
-13648 2494 2579 2650 0
-13648 2494 2581 2648 0
-13648 2494 2583 2646 0
-13648 2494 2585 2644 0
-13648 2494 2587 2642 0
-13648 2494 2589 2640 0
-13648 2494 2591 2638 0
-13648 2494 2593 2636 0
-13648 2494 2595 2634 0
-13648 2494 2597 2632 0
-13648 2494 2599 2630 0
-13648 2494 2601 2628 0
-13648 2494 2603 2626 0
-13648 2494 2605 2624 0
-13648 2494 2607 2622 0
-13648 2494 2609 2620 0
-13648 2494 2611 2618 0
-13648 2494 2613 2616 0
-13648 2496 2662 0
-13648 2496 2568 2660 0
-13648 2496 2569 2658 0
-13648 2496 2571 2656 0
-13648 2496 2573 2654 0
-13648 2496 2575 2652 0
-13648 2496 2577 2650 0
-13648 2496 2579 2648 0
-13648 2496 2581 2646 0
-13648 2496 2583 2644 0
-13648 2496 2585 2642 0
-13648 2496 2587 2640 0
-13648 2496 2589 2638 0
-13648 2496 2591 2636 0
-13648 2496 2593 2634 0
-13648 2496 2595 2632 0
-13648 2496 2597 2630 0
-13648 2496 2599 2628 0
-13648 2496 2601 2626 0
-13648 2496 2603 2624 0
-13648 2496 2605 2622 0
-13648 2496 2607 2620 0
-13648 2496 2609 2618 0
-13648 2496 2611 2616 0
-13648 2496 2613 2615 0
-13648 2498 2660 0
-13648 2498 2568 2658 0
-13648 2498 2569 2656 0
-13648 2498 2571 2654 0
-13648 2498 2573 2652 0
-13648 2498 2575 2650 0
-13648 2498 2577 2648 0
-13648 2498 2579 2646 0
-13648 2498 2581 2644 0
-13648 2498 2583 2642 0
-13648 2498 2585 2640 0
-13648 2498 2587 2638 0
-13648 2498 2589 2636 0
-13648 2498 2591 2634 0
-13648 2498 2593 2632 0
-13648 2498 2595 2630 0
-13648 2498 2597 2628 0
-13648 2498 2599 2626 0
-13648 2498 2601 2624 0
-13648 2498 2603 2622 0
-13648 2498 2605 2620 0
-13648 2498 2607 2618 0
-13648 2498 2609 2616 0
-13648 2498 2611 2615 0
-13648 2498 2613 0
-13648 2500 2658 0
-13648 2500 2568 2656 0
-13648 2500 2569 2654 0
-13648 2500 2571 2652 0
-13648 2500 2573 2650 0
-13648 2500 2575 2648 0
-13648 2500 2577 2646 0
-13648 2500 2579 2644 0
-13648 2500 2581 2642 0
-13648 2500 2583 2640 0
-13648 2500 2585 2638 0
-13648 2500 2587 2636 0
-13648 2500 2589 2634 0
-13648 2500 2591 2632 0
-13648 2500 2593 2630 0
-13648 2500 2595 2628 0
-13648 2500 2597 2626 0
-13648 2500 2599 2624 0
-13648 2500 2601 2622 0
-13648 2500 2603 2620 0
-13648 2500 2605 2618 0
-13648 2500 2607 2616 0
-13648 2500 2609 2615 0
-13648 2500 2611 0
-13648 2500 2613 0
-13648 2502 2656 0
-13648 2502 2568 2654 0
-13648 2502 2569 2652 0
-13648 2502 2571 2650 0
-13648 2502 2573 2648 0
-13648 2502 2575 2646 0
-13648 2502 2577 2644 0
-13648 2502 2579 2642 0
-13648 2502 2581 2640 0
-13648 2502 2583 2638 0
-13648 2502 2585 2636 0
-13648 2502 2587 2634 0
-13648 2502 2589 2632 0
-13648 2502 2591 2630 0
-13648 2502 2593 2628 0
-13648 2502 2595 2626 0
-13648 2502 2597 2624 0
-13648 2502 2599 2622 0
-13648 2502 2601 2620 0
-13648 2502 2603 2618 0
-13648 2502 2605 2616 0
-13648 2502 2607 2615 0
-13648 2502 2609 0
-13648 2502 2611 0
-13648 2502 2613 0
-13648 2504 2654 0
-13648 2504 2568 2652 0
-13648 2504 2569 2650 0
-13648 2504 2571 2648 0
-13648 2504 2573 2646 0
-13648 2504 2575 2644 0
-13648 2504 2577 2642 0
-13648 2504 2579 2640 0
-13648 2504 2581 2638 0
-13648 2504 2583 2636 0
-13648 2504 2585 2634 0
-13648 2504 2587 2632 0
-13648 2504 2589 2630 0
-13648 2504 2591 2628 0
-13648 2504 2593 2626 0
-13648 2504 2595 2624 0
-13648 2504 2597 2622 0
-13648 2504 2599 2620 0
-13648 2504 2601 2618 0
-13648 2504 2603 2616 0
-13648 2504 2605 2615 0
-13648 2504 2607 0
-13648 2504 2609 0
-13648 2504 2611 0
-13648 2504 2613 0
13648 -2607 -2615 0
13648 -2605 -2616 0
13648 -2603 -2618 0
13648 -2601 -2620 0
13648 -2599 -2622 0
13648 -2597 -2624 0
13648 -2595 -2626 0
13648 -2593 -2628 0
13648 -2591 -2630 0
13648 -2589 -2632 0
13648 -2587 -2634 0
13648 -2585 -2636 0
13648 -2583 -2638 0
13648 -2581 -2640 0
13648 -2579 -2642 0
13648 -2577 -2644 0
13648 -2575 -2646 0
13648 -2573 -2648 0
13648 -2571 -2650 0
13648 -2569 -2652 0
13648 -2568 -2654 0
13648 -2504 -2609 -2615 0
13648 -2504 -2607 -2616 0
13648 -2504 -2605 -2618 0
13648 -2504 -2603 -2620 0
13648 -2504 -2601 -2622 0
13648 -2504 -2599 -2624 0
13648 -2504 -2597 -2626 0
13648 -2504 -2595 -2628 0
13648 -2504 -2593 -2630 0
13648 -2504 -2591 -2632 0
13648 -2504 -2589 -2634 0
13648 -2504 -2587 -2636 0
13648 -2504 -2585 -2638 0
13648 -2504 -2583 -2640 0
13648 -2504 -2581 -2642 0
13648 -2504 -2579 -2644 0
13648 -2504 -2577 -2646 0
13648 -2504 -2575 -2648 0
13648 -2504 -2573 -2650 0
13648 -2504 -2571 -2652 0
13648 -2504 -2569 -2654 0
13648 -2504 -2568 -2656 0
13648 -2502 -2611 -2615 0
13648 -2502 -2609 -2616 0
13648 -2502 -2607 -2618 0
13648 -2502 -2605 -2620 0
13648 -2502 -2603 -2622 0
13648 -2502 -2601 -2624 0
13648 -2502 -2599 -2626 0
13648 -2502 -2597 -2628 0
13648 -2502 -2595 -2630 0
13648 -2502 -2593 -2632 0
13648 -2502 -2591 -2634 0
13648 -2502 -2589 -2636 0
13648 -2502 -2587 -2638 0
13648 -2502 -2585 -2640 0
13648 -2502 -2583 -2642 0
13648 -2502 -2581 -2644 0
13648 -2502 -2579 -2646 0
13648 -2502 -2577 -2648 0
13648 -2502 -2575 -2650 0
13648 -2502 -2573 -2652 0
13648 -2502 -2571 -2654 0
13648 -2502 -2569 -2656 0
13648 -2502 -2568 -2658 0
13648 -2500 -2613 -2615 0
13648 -2500 -2611 -2616 0
13648 -2500 -2609 -2618 0
13648 -2500 -2607 -2620 0
13648 -2500 -2605 -2622 0
13648 -2500 -2603 -2624 0
13648 -2500 -2601 -2626 0
13648 -2500 -2599 -2628 0
13648 -2500 -2597 -2630 0
13648 -2500 -2595 -2632 0
13648 -2500 -2593 -2634 0
13648 -2500 -2591 -2636 0
13648 -2500 -2589 -2638 0
13648 -2500 -2587 -2640 0
13648 -2500 -2585 -2642 0
13648 -2500 -2583 -2644 0
13648 -2500 -2581 -2646 0
13648 -2500 -2579 -2648 0
13648 -2500 -2577 -2650 0
13648 -2500 -2575 -2652 0
13648 -2500 -2573 -2654 0
13648 -2500 -2571 -2656 0
13648 -2500 -2569 -2658 0
13648 -2500 -2568 -2660 0
13648 -2498 -2615 0
13648 -2498 -2613 -2616 0
13648 -2498 -2611 -2618 0
13648 -2498 -2609 -2620 0
13648 -2498 -2607 -2622 0
13648 -2498 -2605 -2624 0
13648 -2498 -2603 -2626 0
13648 -2498 -2601 -2628 0
13648 -2498 -2599 -2630 0
13648 -2498 -2597 -2632 0
13648 -2498 -2595 -2634 0
13648 -2498 -2593 -2636 0
13648 -2498 -2591 -2638 0
13648 -2498 -2589 -2640 0
13648 -2498 -2587 -2642 0
13648 -2498 -2585 -2644 0
13648 -2498 -2583 -2646 0
13648 -2498 -2581 -2648 0
13648 -2498 -2579 -2650 0
13648 -2498 -2577 -2652 0
13648 -2498 -2575 -2654 0
13648 -2498 -2573 -2656 0
13648 -2498 -2571 -2658 0
13648 -2498 -2569 -2660 0
13648 -2498 -2568 -2662 0
13648 -2496 -2616 0
13648 -2496 -2613 -2618 0
13648 -2496 -2611 -2620 0
13648 -2496 -2609 -2622 0
13648 -2496 -2607 -2624 0
13648 -2496 -2605 -2626 0
13648 -2496 -2603 -2628 0
13648 -2496 -2601 -2630 0
13648 -2496 -2599 -2632 0
13648 -2496 -2597 -2634 0
13648 -2496 -2595 -2636 0
13648 -2496 -2593 -2638 0
13648 -2496 -2591 -2640 0
13648 -2496 -2589 -2642 0
13648 -2496 -2587 -2644 0
13648 -2496 -2585 -2646 0
13648 -2496 -2583 -2648 0
13648 -2496 -2581 -2650 0
13648 -2496 -2579 -2652 0
13648 -2496 -2577 -2654 0
13648 -2496 -2575 -2656 0
13648 -2496 -2573 -2658 0
13648 -2496 -2571 -2660 0
13648 -2496 -2569 -2662 0
13648 -2496 -2568 -2664 0
13648 -2494 -2618 0
13648 -2494 -2613 -2620 0
13648 -2494 -2611 -2622 0
13648 -2494 -2609 -2624 0
13648 -2494 -2607 -2626 0
13648 -2494 -2605 -2628 0
13648 -2494 -2603 -2630 0
13648 -2494 -2601 -2632 0
13648 -2494 -2599 -2634 0
13648 -2494 -2597 -2636 0
13648 -2494 -2595 -2638 0
13648 -2494 -2593 -2640 0
13648 -2494 -2591 -2642 0
13648 -2494 -2589 -2644 0
13648 -2494 -2587 -2646 0
13648 -2494 -2585 -2648 0
13648 -2494 -2583 -2650 0
13648 -2494 -2581 -2652 0
13648 -2494 -2579 -2654 0
13648 -2494 -2577 -2656 0
13648 -2494 -2575 -2658 0
13648 -2494 -2573 -2660 0
13648 -2494 -2571 -2662 0
13648 -2494 -2569 -2664 0
13648 -2494 -2568 -2666 0
13648 -2492 -2620 0
13648 -2492 -2613 -2622 0
13648 -2492 -2611 -2624 0
13648 -2492 -2609 -2626 0
13648 -2492 -2607 -2628 0
13648 -2492 -2605 -2630 0
13648 -2492 -2603 -2632 0
13648 -2492 -2601 -2634 0
13648 -2492 -2599 -2636 0
13648 -2492 -2597 -2638 0
13648 -2492 -2595 -2640 0
13648 -2492 -2593 -2642 0
13648 -2492 -2591 -2644 0
13648 -2492 -2589 -2646 0
13648 -2492 -2587 -2648 0
13648 -2492 -2585 -2650 0
13648 -2492 -2583 -2652 0
13648 -2492 -2581 -2654 0
13648 -2492 -2579 -2656 0
13648 -2492 -2577 -2658 0
13648 -2492 -2575 -2660 0
13648 -2492 -2573 -2662 0
13648 -2492 -2571 -2664 0
13648 -2492 -2569 -2666 0
13648 -2492 -2568 -2668 0
13648 -2490 -2622 0
13648 -2490 -2613 -2624 0
13648 -2490 -2611 -2626 0
13648 -2490 -2609 -2628 0
13648 -2490 -2607 -2630 0
13648 -2490 -2605 -2632 0
13648 -2490 -2603 -2634 0
13648 -2490 -2601 -2636 0
13648 -2490 -2599 -2638 0
13648 -2490 -2597 -2640 0
13648 -2490 -2595 -2642 0
13648 -2490 -2593 -2644 0
13648 -2490 -2591 -2646 0
13648 -2490 -2589 -2648 0
13648 -2490 -2587 -2650 0
13648 -2490 -2585 -2652 0
13648 -2490 -2583 -2654 0
13648 -2490 -2581 -2656 0
13648 -2490 -2579 -2658 0
13648 -2490 -2577 -2660 0
13648 -2490 -2575 -2662 0
13648 -2490 -2573 -2664 0
13648 -2490 -2571 -2666 0
13648 -2490 -2569 -2668 0
13648 -2490 -2568 -2670 0
13648 -2488 -2624 0
13648 -2488 -2613 -2626 0
13648 -2488 -2611 -2628 0
13648 -2488 -2609 -2630 0
13648 -2488 -2607 -2632 0
13648 -2488 -2605 -2634 0
13648 -2488 -2603 -2636 0
13648 -2488 -2601 -2638 0
13648 -2488 -2599 -2640 0
13648 -2488 -2597 -2642 0
13648 -2488 -2595 -2644 0
13648 -2488 -2593 -2646 0
13648 -2488 -2591 -2648 0
13648 -2488 -2589 -2650 0
13648 -2488 -2587 -2652 0
13648 -2488 -2585 -2654 0
13648 -2488 -2583 -2656 0
13648 -2488 -2581 -2658 0
13648 -2488 -2579 -2660 0
13648 -2488 -2577 -2662 0
13648 -2488 -2575 -2664 0
13648 -2488 -2573 -2666 0
13648 -2488 -2571 -2668 0
13648 -2488 -2569 -2670 0
13648 -2488 -2568 -2672 0
13648 -2486 -2626 0
13648 -2486 -2613 -2628 0
13648 -2486 -2611 -2630 0
13648 -2486 -2609 -2632 0
13648 -2486 -2607 -2634 0
13648 -2486 -2605 -2636 0
13648 -2486 -2603 -2638 0
13648 -2486 -2601 -2640 0
13648 -2486 -2599 -2642 0
13648 -2486 -2597 -2644 0
13648 -2486 -2595 -2646 0
13648 -2486 -2593 -2648 0
13648 -2486 -2591 -2650 0
13648 -2486 -2589 -2652 0
13648 -2486 -2587 -2654 0
13648 -2486 -2585 -2656 0
13648 -2486 -2583 -2658 0
13648 -2486 -2581 -2660 0
13648 -2486 -2579 -2662 0
13648 -2486 -2577 -2664 0
13648 -2486 -2575 -2666 0
13648 -2486 -2573 -2668 0
13648 -2486 -2571 -2670 0
13648 -2486 -2569 -2672 0
13648 -2486 -2568 -2674 0
13648 -2484 -2628 0
13648 -2484 -2613 -2630 0
13648 -2484 -2611 -2632 0
13648 -2484 -2609 -2634 0
13648 -2484 -2607 -2636 0
13648 -2484 -2605 -2638 0
13648 -2484 -2603 -2640 0
13648 -2484 -2601 -2642 0
13648 -2484 -2599 -2644 0
13648 -2484 -2597 -2646 0
13648 -2484 -2595 -2648 0
13648 -2484 -2593 -2650 0
13648 -2484 -2591 -2652 0
13648 -2484 -2589 -2654 0
13648 -2484 -2587 -2656 0
13648 -2484 -2585 -2658 0
13648 -2484 -2583 -2660 0
13648 -2484 -2581 -2662 0
13648 -2484 -2579 -2664 0
13648 -2484 -2577 -2666 0
13648 -2484 -2575 -2668 0
13648 -2484 -2573 -2670 0
13648 -2484 -2571 -2672 0
13648 -2484 -2569 -2674 0
13648 -2484 -2568 -2676 0
13648 -2482 -2630 0
13648 -2482 -2613 -2632 0
13648 -2482 -2611 -2634 0
13648 -2482 -2609 -2636 0
13648 -2482 -2607 -2638 0
13648 -2482 -2605 -2640 0
13648 -2482 -2603 -2642 0
13648 -2482 -2601 -2644 0
13648 -2482 -2599 -2646 0
13648 -2482 -2597 -2648 0
13648 -2482 -2595 -2650 0
13648 -2482 -2593 -2652 0
13648 -2482 -2591 -2654 0
13648 -2482 -2589 -2656 0
13648 -2482 -2587 -2658 0
13648 -2482 -2585 -2660 0
13648 -2482 -2583 -2662 0
13648 -2482 -2581 -2664 0
13648 -2482 -2579 -2666 0
13648 -2482 -2577 -2668 0
13648 -2482 -2575 -2670 0
13648 -2482 -2573 -2672 0
13648 -2482 -2571 -2674 0
13648 -2482 -2569 -2676 0
13648 -2482 -2568 0
13648 -2480 -2632 0
13648 -2480 -2613 -2634 0
13648 -2480 -2611 -2636 0
13648 -2480 -2609 -2638 0
13648 -2480 -2607 -2640 0
13648 -2480 -2605 -2642 0
13648 -2480 -2603 -2644 0
13648 -2480 -2601 -2646 0
13648 -2480 -2599 -2648 0
13648 -2480 -2597 -2650 0
13648 -2480 -2595 -2652 0
13648 -2480 -2593 -2654 0
13648 -2480 -2591 -2656 0
13648 -2480 -2589 -2658 0
13648 -2480 -2587 -2660 0
13648 -2480 -2585 -2662 0
13648 -2480 -2583 -2664 0
13648 -2480 -2581 -2666 0
13648 -2480 -2579 -2668 0
13648 -2480 -2577 -2670 0
13648 -2480 -2575 -2672 0
13648 -2480 -2573 -2674 0
13648 -2480 -2571 -2676 0
13648 -2480 -2569 0
13648 -2480 -2568 0
13648 -2478 -2634 0
13648 -2478 -2613 -2636 0
13648 -2478 -2611 -2638 0
13648 -2478 -2609 -2640 0
13648 -2478 -2607 -2642 0
13648 -2478 -2605 -2644 0
13648 -2478 -2603 -2646 0
13648 -2478 -2601 -2648 0
13648 -2478 -2599 -2650 0
13648 -2478 -2597 -2652 0
13648 -2478 -2595 -2654 0
13648 -2478 -2593 -2656 0
13648 -2478 -2591 -2658 0
13648 -2478 -2589 -2660 0
13648 -2478 -2587 -2662 0
13648 -2478 -2585 -2664 0
13648 -2478 -2583 -2666 0
13648 -2478 -2581 -2668 0
13648 -2478 -2579 -2670 0
13648 -2478 -2577 -2672 0
13648 -2478 -2575 -2674 0
13648 -2478 -2573 -2676 0
13648 -2478 -2571 0
13648 -2478 -2569 0
13648 -2478 -2568 0
13648 -2476 -2636 0
13648 -2476 -2613 -2638 0
13648 -2476 -2611 -2640 0
13648 -2476 -2609 -2642 0
13648 -2476 -2607 -2644 0
13648 -2476 -2605 -2646 0
13648 -2476 -2603 -2648 0
13648 -2476 -2601 -2650 0
13648 -2476 -2599 -2652 0
13648 -2476 -2597 -2654 0
13648 -2476 -2595 -2656 0
13648 -2476 -2593 -2658 0
13648 -2476 -2591 -2660 0
13648 -2476 -2589 -2662 0
13648 -2476 -2587 -2664 0
13648 -2476 -2585 -2666 0
13648 -2476 -2583 -2668 0
13648 -2476 -2581 -2670 0
13648 -2476 -2579 -2672 0
13648 -2476 -2577 -2674 0
13648 -2476 -2575 -2676 0
13648 -2476 -2573 0
13648 -2476 -2571 0
13648 -2476 -2569 0
13648 -2476 -2568 0
13648 -2475 -2638 0
13648 -2475 -2613 -2640 0
13648 -2475 -2611 -2642 0
13648 -2475 -2609 -2644 0
13648 -2475 -2607 -2646 0
13648 -2475 -2605 -2648 0
13648 -2475 -2603 -2650 0
13648 -2475 -2601 -2652 0
13648 -2475 -2599 -2654 0
13648 -2475 -2597 -2656 0
13648 -2475 -2595 -2658 0
13648 -2475 -2593 -2660 0
13648 -2475 -2591 -2662 0
13648 -2475 -2589 -2664 0
13648 -2475 -2587 -2666 0
13648 -2475 -2585 -2668 0
13648 -2475 -2583 -2670 0
13648 -2475 -2581 -2672 0
13648 -2475 -2579 -2674 0
13648 -2475 -2577 -2676 0
13648 -2475 -2575 0
13648 -2475 -2573 0
13648 -2475 -2571 0
13648 -2475 -2569 0
13648 -2475 -2568 0
c ((36<=(aux480 + aux483 + aux484))=tv=SATLiteral(13649))
-13649 -2605 -2615 0
-13649 -2603 -2616 0
-13649 -2601 -2618 0
-13649 -2599 -2620 0
-13649 -2597 -2622 0
-13649 -2595 -2624 0
-13649 -2593 -2626 0
-13649 -2591 -2628 0
-13649 -2589 -2630 0
-13649 -2587 -2632 0
-13649 -2585 -2634 0
-13649 -2583 -2636 0
-13649 -2581 -2638 0
-13649 -2579 -2640 0
-13649 -2577 -2642 0
-13649 -2575 -2644 0
-13649 -2573 -2646 0
-13649 -2571 -2648 0
-13649 -2569 -2650 0
-13649 -2568 -2652 0
-13649 -2504 -2607 -2615 0
-13649 -2504 -2605 -2616 0
-13649 -2504 -2603 -2618 0
-13649 -2504 -2601 -2620 0
-13649 -2504 -2599 -2622 0
-13649 -2504 -2597 -2624 0
-13649 -2504 -2595 -2626 0
-13649 -2504 -2593 -2628 0
-13649 -2504 -2591 -2630 0
-13649 -2504 -2589 -2632 0
-13649 -2504 -2587 -2634 0
-13649 -2504 -2585 -2636 0
-13649 -2504 -2583 -2638 0
-13649 -2504 -2581 -2640 0
-13649 -2504 -2579 -2642 0
-13649 -2504 -2577 -2644 0
-13649 -2504 -2575 -2646 0
-13649 -2504 -2573 -2648 0
-13649 -2504 -2571 -2650 0
-13649 -2504 -2569 -2652 0
-13649 -2504 -2568 -2654 0
-13649 -2502 -2609 -2615 0
-13649 -2502 -2607 -2616 0
-13649 -2502 -2605 -2618 0
-13649 -2502 -2603 -2620 0
-13649 -2502 -2601 -2622 0
-13649 -2502 -2599 -2624 0
-13649 -2502 -2597 -2626 0
-13649 -2502 -2595 -2628 0
-13649 -2502 -2593 -2630 0
-13649 -2502 -2591 -2632 0
-13649 -2502 -2589 -2634 0
-13649 -2502 -2587 -2636 0
-13649 -2502 -2585 -2638 0
-13649 -2502 -2583 -2640 0
-13649 -2502 -2581 -2642 0
-13649 -2502 -2579 -2644 0
-13649 -2502 -2577 -2646 0
-13649 -2502 -2575 -2648 0
-13649 -2502 -2573 -2650 0
-13649 -2502 -2571 -2652 0
-13649 -2502 -2569 -2654 0
-13649 -2502 -2568 -2656 0
-13649 -2500 -2611 -2615 0
-13649 -2500 -2609 -2616 0
-13649 -2500 -2607 -2618 0
-13649 -2500 -2605 -2620 0
-13649 -2500 -2603 -2622 0
-13649 -2500 -2601 -2624 0
-13649 -2500 -2599 -2626 0
-13649 -2500 -2597 -2628 0
-13649 -2500 -2595 -2630 0
-13649 -2500 -2593 -2632 0
-13649 -2500 -2591 -2634 0
-13649 -2500 -2589 -2636 0
-13649 -2500 -2587 -2638 0
-13649 -2500 -2585 -2640 0
-13649 -2500 -2583 -2642 0
-13649 -2500 -2581 -2644 0
-13649 -2500 -2579 -2646 0
-13649 -2500 -2577 -2648 0
-13649 -2500 -2575 -2650 0
-13649 -2500 -2573 -2652 0
-13649 -2500 -2571 -2654 0
-13649 -2500 -2569 -2656 0
-13649 -2500 -2568 -2658 0
-13649 -2498 -2613 -2615 0
-13649 -2498 -2611 -2616 0
-13649 -2498 -2609 -2618 0
-13649 -2498 -2607 -2620 0
-13649 -2498 -2605 -2622 0
-13649 -2498 -2603 -2624 0
-13649 -2498 -2601 -2626 0
-13649 -2498 -2599 -2628 0
-13649 -2498 -2597 -2630 0
-13649 -2498 -2595 -2632 0
-13649 -2498 -2593 -2634 0
-13649 -2498 -2591 -2636 0
-13649 -2498 -2589 -2638 0
-13649 -2498 -2587 -2640 0
-13649 -2498 -2585 -2642 0
-13649 -2498 -2583 -2644 0
-13649 -2498 -2581 -2646 0
-13649 -2498 -2579 -2648 0
-13649 -2498 -2577 -2650 0
-13649 -2498 -2575 -2652 0
-13649 -2498 -2573 -2654 0
-13649 -2498 -2571 -2656 0
-13649 -2498 -2569 -2658 0
-13649 -2498 -2568 -2660 0
-13649 -2496 -2615 0
-13649 -2496 -2613 -2616 0
-13649 -2496 -2611 -2618 0
-13649 -2496 -2609 -2620 0
-13649 -2496 -2607 -2622 0
-13649 -2496 -2605 -2624 0
-13649 -2496 -2603 -2626 0
-13649 -2496 -2601 -2628 0
-13649 -2496 -2599 -2630 0
-13649 -2496 -2597 -2632 0
-13649 -2496 -2595 -2634 0
-13649 -2496 -2593 -2636 0
-13649 -2496 -2591 -2638 0
-13649 -2496 -2589 -2640 0
-13649 -2496 -2587 -2642 0
-13649 -2496 -2585 -2644 0
-13649 -2496 -2583 -2646 0
-13649 -2496 -2581 -2648 0
-13649 -2496 -2579 -2650 0
-13649 -2496 -2577 -2652 0
-13649 -2496 -2575 -2654 0
-13649 -2496 -2573 -2656 0
-13649 -2496 -2571 -2658 0
-13649 -2496 -2569 -2660 0
-13649 -2496 -2568 -2662 0
-13649 -2494 -2616 0
-13649 -2494 -2613 -2618 0
-13649 -2494 -2611 -2620 0
-13649 -2494 -2609 -2622 0
-13649 -2494 -2607 -2624 0
-13649 -2494 -2605 -2626 0
-13649 -2494 -2603 -2628 0
-13649 -2494 -2601 -2630 0
-13649 -2494 -2599 -2632 0
-13649 -2494 -2597 -2634 0
-13649 -2494 -2595 -2636 0
-13649 -2494 -2593 -2638 0
-13649 -2494 -2591 -2640 0
-13649 -2494 -2589 -2642 0
-13649 -2494 -2587 -2644 0
-13649 -2494 -2585 -2646 0
-13649 -2494 -2583 -2648 0
-13649 -2494 -2581 -2650 0
-13649 -2494 -2579 -2652 0
-13649 -2494 -2577 -2654 0
-13649 -2494 -2575 -2656 0
-13649 -2494 -2573 -2658 0
-13649 -2494 -2571 -2660 0
-13649 -2494 -2569 -2662 0
-13649 -2494 -2568 -2664 0
-13649 -2492 -2618 0
-13649 -2492 -2613 -2620 0
-13649 -2492 -2611 -2622 0
-13649 -2492 -2609 -2624 0
-13649 -2492 -2607 -2626 0
-13649 -2492 -2605 -2628 0
-13649 -2492 -2603 -2630 0
-13649 -2492 -2601 -2632 0
-13649 -2492 -2599 -2634 0
-13649 -2492 -2597 -2636 0
-13649 -2492 -2595 -2638 0
-13649 -2492 -2593 -2640 0
-13649 -2492 -2591 -2642 0
-13649 -2492 -2589 -2644 0
-13649 -2492 -2587 -2646 0
-13649 -2492 -2585 -2648 0
-13649 -2492 -2583 -2650 0
-13649 -2492 -2581 -2652 0
-13649 -2492 -2579 -2654 0
-13649 -2492 -2577 -2656 0
-13649 -2492 -2575 -2658 0
-13649 -2492 -2573 -2660 0
-13649 -2492 -2571 -2662 0
-13649 -2492 -2569 -2664 0
-13649 -2492 -2568 -2666 0
-13649 -2490 -2620 0
-13649 -2490 -2613 -2622 0
-13649 -2490 -2611 -2624 0
-13649 -2490 -2609 -2626 0
-13649 -2490 -2607 -2628 0
-13649 -2490 -2605 -2630 0
-13649 -2490 -2603 -2632 0
-13649 -2490 -2601 -2634 0
-13649 -2490 -2599 -2636 0
-13649 -2490 -2597 -2638 0
-13649 -2490 -2595 -2640 0
-13649 -2490 -2593 -2642 0
-13649 -2490 -2591 -2644 0
-13649 -2490 -2589 -2646 0
-13649 -2490 -2587 -2648 0
-13649 -2490 -2585 -2650 0
-13649 -2490 -2583 -2652 0
-13649 -2490 -2581 -2654 0
-13649 -2490 -2579 -2656 0
-13649 -2490 -2577 -2658 0
-13649 -2490 -2575 -2660 0
-13649 -2490 -2573 -2662 0
-13649 -2490 -2571 -2664 0
-13649 -2490 -2569 -2666 0
-13649 -2490 -2568 -2668 0
-13649 -2488 -2622 0
-13649 -2488 -2613 -2624 0
-13649 -2488 -2611 -2626 0
-13649 -2488 -2609 -2628 0
-13649 -2488 -2607 -2630 0
-13649 -2488 -2605 -2632 0
-13649 -2488 -2603 -2634 0
-13649 -2488 -2601 -2636 0
-13649 -2488 -2599 -2638 0
-13649 -2488 -2597 -2640 0
-13649 -2488 -2595 -2642 0
-13649 -2488 -2593 -2644 0
-13649 -2488 -2591 -2646 0
-13649 -2488 -2589 -2648 0
-13649 -2488 -2587 -2650 0
-13649 -2488 -2585 -2652 0
-13649 -2488 -2583 -2654 0
-13649 -2488 -2581 -2656 0
-13649 -2488 -2579 -2658 0
-13649 -2488 -2577 -2660 0
-13649 -2488 -2575 -2662 0
-13649 -2488 -2573 -2664 0
-13649 -2488 -2571 -2666 0
-13649 -2488 -2569 -2668 0
-13649 -2488 -2568 -2670 0
-13649 -2486 -2624 0
-13649 -2486 -2613 -2626 0
-13649 -2486 -2611 -2628 0
-13649 -2486 -2609 -2630 0
-13649 -2486 -2607 -2632 0
-13649 -2486 -2605 -2634 0
-13649 -2486 -2603 -2636 0
-13649 -2486 -2601 -2638 0
-13649 -2486 -2599 -2640 0
-13649 -2486 -2597 -2642 0
-13649 -2486 -2595 -2644 0
-13649 -2486 -2593 -2646 0
-13649 -2486 -2591 -2648 0
-13649 -2486 -2589 -2650 0
-13649 -2486 -2587 -2652 0
-13649 -2486 -2585 -2654 0
-13649 -2486 -2583 -2656 0
-13649 -2486 -2581 -2658 0
-13649 -2486 -2579 -2660 0
-13649 -2486 -2577 -2662 0
-13649 -2486 -2575 -2664 0
-13649 -2486 -2573 -2666 0
-13649 -2486 -2571 -2668 0
-13649 -2486 -2569 -2670 0
-13649 -2486 -2568 -2672 0
-13649 -2484 -2626 0
-13649 -2484 -2613 -2628 0
-13649 -2484 -2611 -2630 0
-13649 -2484 -2609 -2632 0
-13649 -2484 -2607 -2634 0
-13649 -2484 -2605 -2636 0
-13649 -2484 -2603 -2638 0
-13649 -2484 -2601 -2640 0
-13649 -2484 -2599 -2642 0
-13649 -2484 -2597 -2644 0
-13649 -2484 -2595 -2646 0
-13649 -2484 -2593 -2648 0
-13649 -2484 -2591 -2650 0
-13649 -2484 -2589 -2652 0
-13649 -2484 -2587 -2654 0
-13649 -2484 -2585 -2656 0
-13649 -2484 -2583 -2658 0
-13649 -2484 -2581 -2660 0
-13649 -2484 -2579 -2662 0
-13649 -2484 -2577 -2664 0
-13649 -2484 -2575 -2666 0
-13649 -2484 -2573 -2668 0
-13649 -2484 -2571 -2670 0
-13649 -2484 -2569 -2672 0
-13649 -2484 -2568 -2674 0
-13649 -2482 -2628 0
-13649 -2482 -2613 -2630 0
-13649 -2482 -2611 -2632 0
-13649 -2482 -2609 -2634 0
-13649 -2482 -2607 -2636 0
-13649 -2482 -2605 -2638 0
-13649 -2482 -2603 -2640 0
-13649 -2482 -2601 -2642 0
-13649 -2482 -2599 -2644 0
-13649 -2482 -2597 -2646 0
-13649 -2482 -2595 -2648 0
-13649 -2482 -2593 -2650 0
-13649 -2482 -2591 -2652 0
-13649 -2482 -2589 -2654 0
-13649 -2482 -2587 -2656 0
-13649 -2482 -2585 -2658 0
-13649 -2482 -2583 -2660 0
-13649 -2482 -2581 -2662 0
-13649 -2482 -2579 -2664 0
-13649 -2482 -2577 -2666 0
-13649 -2482 -2575 -2668 0
-13649 -2482 -2573 -2670 0
-13649 -2482 -2571 -2672 0
-13649 -2482 -2569 -2674 0
-13649 -2482 -2568 -2676 0
-13649 -2480 -2630 0
-13649 -2480 -2613 -2632 0
-13649 -2480 -2611 -2634 0
-13649 -2480 -2609 -2636 0
-13649 -2480 -2607 -2638 0
-13649 -2480 -2605 -2640 0
-13649 -2480 -2603 -2642 0
-13649 -2480 -2601 -2644 0
-13649 -2480 -2599 -2646 0
-13649 -2480 -2597 -2648 0
-13649 -2480 -2595 -2650 0
-13649 -2480 -2593 -2652 0
-13649 -2480 -2591 -2654 0
-13649 -2480 -2589 -2656 0
-13649 -2480 -2587 -2658 0
-13649 -2480 -2585 -2660 0
-13649 -2480 -2583 -2662 0
-13649 -2480 -2581 -2664 0
-13649 -2480 -2579 -2666 0
-13649 -2480 -2577 -2668 0
-13649 -2480 -2575 -2670 0
-13649 -2480 -2573 -2672 0
-13649 -2480 -2571 -2674 0
-13649 -2480 -2569 -2676 0
-13649 -2480 -2568 0
-13649 -2478 -2632 0
-13649 -2478 -2613 -2634 0
-13649 -2478 -2611 -2636 0
-13649 -2478 -2609 -2638 0
-13649 -2478 -2607 -2640 0
-13649 -2478 -2605 -2642 0
-13649 -2478 -2603 -2644 0
-13649 -2478 -2601 -2646 0
-13649 -2478 -2599 -2648 0
-13649 -2478 -2597 -2650 0
-13649 -2478 -2595 -2652 0
-13649 -2478 -2593 -2654 0
-13649 -2478 -2591 -2656 0
-13649 -2478 -2589 -2658 0
-13649 -2478 -2587 -2660 0
-13649 -2478 -2585 -2662 0
-13649 -2478 -2583 -2664 0
-13649 -2478 -2581 -2666 0
-13649 -2478 -2579 -2668 0
-13649 -2478 -2577 -2670 0
-13649 -2478 -2575 -2672 0
-13649 -2478 -2573 -2674 0
-13649 -2478 -2571 -2676 0
-13649 -2478 -2569 0
-13649 -2478 -2568 0
-13649 -2476 -2634 0
-13649 -2476 -2613 -2636 0
-13649 -2476 -2611 -2638 0
-13649 -2476 -2609 -2640 0
-13649 -2476 -2607 -2642 0
-13649 -2476 -2605 -2644 0
-13649 -2476 -2603 -2646 0
-13649 -2476 -2601 -2648 0
-13649 -2476 -2599 -2650 0
-13649 -2476 -2597 -2652 0
-13649 -2476 -2595 -2654 0
-13649 -2476 -2593 -2656 0
-13649 -2476 -2591 -2658 0
-13649 -2476 -2589 -2660 0
-13649 -2476 -2587 -2662 0
-13649 -2476 -2585 -2664 0
-13649 -2476 -2583 -2666 0
-13649 -2476 -2581 -2668 0
-13649 -2476 -2579 -2670 0
-13649 -2476 -2577 -2672 0
-13649 -2476 -2575 -2674 0
-13649 -2476 -2573 -2676 0
-13649 -2476 -2571 0
-13649 -2476 -2569 0
-13649 -2476 -2568 0
-13649 -2475 -2636 0
-13649 -2475 -2613 -2638 0
-13649 -2475 -2611 -2640 0
-13649 -2475 -2609 -2642 0
-13649 -2475 -2607 -2644 0
-13649 -2475 -2605 -2646 0
-13649 -2475 -2603 -2648 0
-13649 -2475 -2601 -2650 0
-13649 -2475 -2599 -2652 0
-13649 -2475 -2597 -2654 0
-13649 -2475 -2595 -2656 0
-13649 -2475 -2593 -2658 0
-13649 -2475 -2591 -2660 0
-13649 -2475 -2589 -2662 0
-13649 -2475 -2587 -2664 0
-13649 -2475 -2585 -2666 0
-13649 -2475 -2583 -2668 0
-13649 -2475 -2581 -2670 0
-13649 -2475 -2579 -2672 0
-13649 -2475 -2577 -2674 0
-13649 -2475 -2575 -2676 0
-13649 -2475 -2573 0
-13649 -2475 -2571 0
-13649 -2475 -2569 0
-13649 -2475 -2568 0
13649 2573 2676 0
13649 2575 2674 0
13649 2577 2672 0
13649 2579 2670 0
13649 2581 2668 0
13649 2583 2666 0
13649 2585 2664 0
13649 2587 2662 0
13649 2589 2660 0
13649 2591 2658 0
13649 2593 2656 0
13649 2595 2654 0
13649 2597 2652 0
13649 2599 2650 0
13649 2601 2648 0
13649 2603 2646 0
13649 2605 2644 0
13649 2607 2642 0
13649 2609 2640 0
13649 2611 2638 0
13649 2613 2636 0
13649 2475 2571 2676 0
13649 2475 2573 2674 0
13649 2475 2575 2672 0
13649 2475 2577 2670 0
13649 2475 2579 2668 0
13649 2475 2581 2666 0
13649 2475 2583 2664 0
13649 2475 2585 2662 0
13649 2475 2587 2660 0
13649 2475 2589 2658 0
13649 2475 2591 2656 0
13649 2475 2593 2654 0
13649 2475 2595 2652 0
13649 2475 2597 2650 0
13649 2475 2599 2648 0
13649 2475 2601 2646 0
13649 2475 2603 2644 0
13649 2475 2605 2642 0
13649 2475 2607 2640 0
13649 2475 2609 2638 0
13649 2475 2611 2636 0
13649 2475 2613 2634 0
13649 2476 2569 2676 0
13649 2476 2571 2674 0
13649 2476 2573 2672 0
13649 2476 2575 2670 0
13649 2476 2577 2668 0
13649 2476 2579 2666 0
13649 2476 2581 2664 0
13649 2476 2583 2662 0
13649 2476 2585 2660 0
13649 2476 2587 2658 0
13649 2476 2589 2656 0
13649 2476 2591 2654 0
13649 2476 2593 2652 0
13649 2476 2595 2650 0
13649 2476 2597 2648 0
13649 2476 2599 2646 0
13649 2476 2601 2644 0
13649 2476 2603 2642 0
13649 2476 2605 2640 0
13649 2476 2607 2638 0
13649 2476 2609 2636 0
13649 2476 2611 2634 0
13649 2476 2613 2632 0
13649 2478 2568 2676 0
13649 2478 2569 2674 0
13649 2478 2571 2672 0
13649 2478 2573 2670 0
13649 2478 2575 2668 0
13649 2478 2577 2666 0
13649 2478 2579 2664 0
13649 2478 2581 2662 0
13649 2478 2583 2660 0
13649 2478 2585 2658 0
13649 2478 2587 2656 0
13649 2478 2589 2654 0
13649 2478 2591 2652 0
13649 2478 2593 2650 0
13649 2478 2595 2648 0
13649 2478 2597 2646 0
13649 2478 2599 2644 0
13649 2478 2601 2642 0
13649 2478 2603 2640 0
13649 2478 2605 2638 0
13649 2478 2607 2636 0
13649 2478 2609 2634 0
13649 2478 2611 2632 0
13649 2478 2613 2630 0
13649 2480 2676 0
13649 2480 2568 2674 0
13649 2480 2569 2672 0
13649 2480 2571 2670 0
13649 2480 2573 2668 0
13649 2480 2575 2666 0
13649 2480 2577 2664 0
13649 2480 2579 2662 0
13649 2480 2581 2660 0
13649 2480 2583 2658 0
13649 2480 2585 2656 0
13649 2480 2587 2654 0
13649 2480 2589 2652 0
13649 2480 2591 2650 0
13649 2480 2593 2648 0
13649 2480 2595 2646 0
13649 2480 2597 2644 0
13649 2480 2599 2642 0
13649 2480 2601 2640 0
13649 2480 2603 2638 0
13649 2480 2605 2636 0
13649 2480 2607 2634 0
13649 2480 2609 2632 0
13649 2480 2611 2630 0
13649 2480 2613 2628 0
13649 2482 2674 0
13649 2482 2568 2672 0
13649 2482 2569 2670 0
13649 2482 2571 2668 0
13649 2482 2573 2666 0
13649 2482 2575 2664 0
13649 2482 2577 2662 0
13649 2482 2579 2660 0
13649 2482 2581 2658 0
13649 2482 2583 2656 0
13649 2482 2585 2654 0
13649 2482 2587 2652 0
13649 2482 2589 2650 0
13649 2482 2591 2648 0
13649 2482 2593 2646 0
13649 2482 2595 2644 0
13649 2482 2597 2642 0
13649 2482 2599 2640 0
13649 2482 2601 2638 0
13649 2482 2603 2636 0
13649 2482 2605 2634 0
13649 2482 2607 2632 0
13649 2482 2609 2630 0
13649 2482 2611 2628 0
13649 2482 2613 2626 0
13649 2484 2672 0
13649 2484 2568 2670 0
13649 2484 2569 2668 0
13649 2484 2571 2666 0
13649 2484 2573 2664 0
13649 2484 2575 2662 0
13649 2484 2577 2660 0
13649 2484 2579 2658 0
13649 2484 2581 2656 0
13649 2484 2583 2654 0
13649 2484 2585 2652 0
13649 2484 2587 2650 0
13649 2484 2589 2648 0
13649 2484 2591 2646 0
13649 2484 2593 2644 0
13649 2484 2595 2642 0
13649 2484 2597 2640 0
13649 2484 2599 2638 0
13649 2484 2601 2636 0
13649 2484 2603 2634 0
13649 2484 2605 2632 0
13649 2484 2607 2630 0
13649 2484 2609 2628 0
13649 2484 2611 2626 0
13649 2484 2613 2624 0
13649 2486 2670 0
13649 2486 2568 2668 0
13649 2486 2569 2666 0
13649 2486 2571 2664 0
13649 2486 2573 2662 0
13649 2486 2575 2660 0
13649 2486 2577 2658 0
13649 2486 2579 2656 0
13649 2486 2581 2654 0
13649 2486 2583 2652 0
13649 2486 2585 2650 0
13649 2486 2587 2648 0
13649 2486 2589 2646 0
13649 2486 2591 2644 0
13649 2486 2593 2642 0
13649 2486 2595 2640 0
13649 2486 2597 2638 0
13649 2486 2599 2636 0
13649 2486 2601 2634 0
13649 2486 2603 2632 0
13649 2486 2605 2630 0
13649 2486 2607 2628 0
13649 2486 2609 2626 0
13649 2486 2611 2624 0
13649 2486 2613 2622 0
13649 2488 2668 0
13649 2488 2568 2666 0
13649 2488 2569 2664 0
13649 2488 2571 2662 0
13649 2488 2573 2660 0
13649 2488 2575 2658 0
13649 2488 2577 2656 0
13649 2488 2579 2654 0
13649 2488 2581 2652 0
13649 2488 2583 2650 0
13649 2488 2585 2648 0
13649 2488 2587 2646 0
13649 2488 2589 2644 0
13649 2488 2591 2642 0
13649 2488 2593 2640 0
13649 2488 2595 2638 0
13649 2488 2597 2636 0
13649 2488 2599 2634 0
13649 2488 2601 2632 0
13649 2488 2603 2630 0
13649 2488 2605 2628 0
13649 2488 2607 2626 0
13649 2488 2609 2624 0
13649 2488 2611 2622 0
13649 2488 2613 2620 0
13649 2490 2666 0
13649 2490 2568 2664 0
13649 2490 2569 2662 0
13649 2490 2571 2660 0
13649 2490 2573 2658 0
13649 2490 2575 2656 0
13649 2490 2577 2654 0
13649 2490 2579 2652 0
13649 2490 2581 2650 0
13649 2490 2583 2648 0
13649 2490 2585 2646 0
13649 2490 2587 2644 0
13649 2490 2589 2642 0
13649 2490 2591 2640 0
13649 2490 2593 2638 0
13649 2490 2595 2636 0
13649 2490 2597 2634 0
13649 2490 2599 2632 0
13649 2490 2601 2630 0
13649 2490 2603 2628 0
13649 2490 2605 2626 0
13649 2490 2607 2624 0
13649 2490 2609 2622 0
13649 2490 2611 2620 0
13649 2490 2613 2618 0
13649 2492 2664 0
13649 2492 2568 2662 0
13649 2492 2569 2660 0
13649 2492 2571 2658 0
13649 2492 2573 2656 0
13649 2492 2575 2654 0
13649 2492 2577 2652 0
13649 2492 2579 2650 0
13649 2492 2581 2648 0
13649 2492 2583 2646 0
13649 2492 2585 2644 0
13649 2492 2587 2642 0
13649 2492 2589 2640 0
13649 2492 2591 2638 0
13649 2492 2593 2636 0
13649 2492 2595 2634 0
13649 2492 2597 2632 0
13649 2492 2599 2630 0
13649 2492 2601 2628 0
13649 2492 2603 2626 0
13649 2492 2605 2624 0
13649 2492 2607 2622 0
13649 2492 2609 2620 0
13649 2492 2611 2618 0
13649 2492 2613 2616 0
13649 2494 2662 0
13649 2494 2568 2660 0
13649 2494 2569 2658 0
13649 2494 2571 2656 0
13649 2494 2573 2654 0
13649 2494 2575 2652 0
13649 2494 2577 2650 0
13649 2494 2579 2648 0
13649 2494 2581 2646 0
13649 2494 2583 2644 0
13649 2494 2585 2642 0
13649 2494 2587 2640 0
13649 2494 2589 2638 0
13649 2494 2591 2636 0
13649 2494 2593 2634 0
13649 2494 2595 2632 0
13649 2494 2597 2630 0
13649 2494 2599 2628 0
13649 2494 2601 2626 0
13649 2494 2603 2624 0
13649 2494 2605 2622 0
13649 2494 2607 2620 0
13649 2494 2609 2618 0
13649 2494 2611 2616 0
13649 2494 2613 2615 0
13649 2496 2660 0
13649 2496 2568 2658 0
13649 2496 2569 2656 0
13649 2496 2571 2654 0
13649 2496 2573 2652 0
13649 2496 2575 2650 0
13649 2496 2577 2648 0
13649 2496 2579 2646 0
13649 2496 2581 2644 0
13649 2496 2583 2642 0
13649 2496 2585 2640 0
13649 2496 2587 2638 0
13649 2496 2589 2636 0
13649 2496 2591 2634 0
13649 2496 2593 2632 0
13649 2496 2595 2630 0
13649 2496 2597 2628 0
13649 2496 2599 2626 0
13649 2496 2601 2624 0
13649 2496 2603 2622 0
13649 2496 2605 2620 0
13649 2496 2607 2618 0
13649 2496 2609 2616 0
13649 2496 2611 2615 0
13649 2496 2613 0
13649 2498 2658 0
13649 2498 2568 2656 0
13649 2498 2569 2654 0
13649 2498 2571 2652 0
13649 2498 2573 2650 0
13649 2498 2575 2648 0
13649 2498 2577 2646 0
13649 2498 2579 2644 0
13649 2498 2581 2642 0
13649 2498 2583 2640 0
13649 2498 2585 2638 0
13649 2498 2587 2636 0
13649 2498 2589 2634 0
13649 2498 2591 2632 0
13649 2498 2593 2630 0
13649 2498 2595 2628 0
13649 2498 2597 2626 0
13649 2498 2599 2624 0
13649 2498 2601 2622 0
13649 2498 2603 2620 0
13649 2498 2605 2618 0
13649 2498 2607 2616 0
13649 2498 2609 2615 0
13649 2498 2611 0
13649 2498 2613 0
13649 2500 2656 0
13649 2500 2568 2654 0
13649 2500 2569 2652 0
13649 2500 2571 2650 0
13649 2500 2573 2648 0
13649 2500 2575 2646 0
13649 2500 2577 2644 0
13649 2500 2579 2642 0
13649 2500 2581 2640 0
13649 2500 2583 2638 0
13649 2500 2585 2636 0
13649 2500 2587 2634 0
13649 2500 2589 2632 0
13649 2500 2591 2630 0
13649 2500 2593 2628 0
13649 2500 2595 2626 0
13649 2500 2597 2624 0
13649 2500 2599 2622 0
13649 2500 2601 2620 0
13649 2500 2603 2618 0
13649 2500 2605 2616 0
13649 2500 2607 2615 0
13649 2500 2609 0
13649 2500 2611 0
13649 2500 2613 0
13649 2502 2654 0
13649 2502 2568 2652 0
13649 2502 2569 2650 0
13649 2502 2571 2648 0
13649 2502 2573 2646 0
13649 2502 2575 2644 0
13649 2502 2577 2642 0
13649 2502 2579 2640 0
13649 2502 2581 2638 0
13649 2502 2583 2636 0
13649 2502 2585 2634 0
13649 2502 2587 2632 0
13649 2502 2589 2630 0
13649 2502 2591 2628 0
13649 2502 2593 2626 0
13649 2502 2595 2624 0
13649 2502 2597 2622 0
13649 2502 2599 2620 0
13649 2502 2601 2618 0
13649 2502 2603 2616 0
13649 2502 2605 2615 0
13649 2502 2607 0
13649 2502 2609 0
13649 2502 2611 0
13649 2502 2613 0
13649 2504 2652 0
13649 2504 2568 2650 0
13649 2504 2569 2648 0
13649 2504 2571 2646 0
13649 2504 2573 2644 0
13649 2504 2575 2642 0
13649 2504 2577 2640 0
13649 2504 2579 2638 0
13649 2504 2581 2636 0
13649 2504 2583 2634 0
13649 2504 2585 2632 0
13649 2504 2587 2630 0
13649 2504 2589 2628 0
13649 2504 2591 2626 0
13649 2504 2593 2624 0
13649 2504 2595 2622 0
13649 2504 2597 2620 0
13649 2504 2599 2618 0
13649 2504 2601 2616 0
13649 2504 2603 2615 0
13649 2504 2605 0
13649 2504 2607 0
13649 2504 2609 0
13649 2504 2611 0
13649 2504 2613 0
c (((aux486 + aux489 + aux490)<=36)=tv=SATLiteral(13650))
-13650 2809 2910 0
-13650 2811 2908 0
-13650 2813 2906 0
-13650 2815 2904 0
-13650 2817 2902 0
-13650 2819 2900 0
-13650 2821 2898 0
-13650 2823 2896 0
-13650 2825 2894 0
-13650 2827 2892 0
-13650 2829 2890 0
-13650 2831 2888 0
-13650 2833 2886 0
-13650 2835 2884 0
-13650 2837 2882 0
-13650 2839 2880 0
-13650 2841 2878 0
-13650 2843 2876 0
-13650 2845 2874 0
-13650 2847 2872 0
-13650 2709 2807 2910 0
-13650 2709 2809 2908 0
-13650 2709 2811 2906 0
-13650 2709 2813 2904 0
-13650 2709 2815 2902 0
-13650 2709 2817 2900 0
-13650 2709 2819 2898 0
-13650 2709 2821 2896 0
-13650 2709 2823 2894 0
-13650 2709 2825 2892 0
-13650 2709 2827 2890 0
-13650 2709 2829 2888 0
-13650 2709 2831 2886 0
-13650 2709 2833 2884 0
-13650 2709 2835 2882 0
-13650 2709 2837 2880 0
-13650 2709 2839 2878 0
-13650 2709 2841 2876 0
-13650 2709 2843 2874 0
-13650 2709 2845 2872 0
-13650 2709 2847 2870 0
-13650 2710 2805 2910 0
-13650 2710 2807 2908 0
-13650 2710 2809 2906 0
-13650 2710 2811 2904 0
-13650 2710 2813 2902 0
-13650 2710 2815 2900 0
-13650 2710 2817 2898 0
-13650 2710 2819 2896 0
-13650 2710 2821 2894 0
-13650 2710 2823 2892 0
-13650 2710 2825 2890 0
-13650 2710 2827 2888 0
-13650 2710 2829 2886 0
-13650 2710 2831 2884 0
-13650 2710 2833 2882 0
-13650 2710 2835 2880 0
-13650 2710 2837 2878 0
-13650 2710 2839 2876 0
-13650 2710 2841 2874 0
-13650 2710 2843 2872 0
-13650 2710 2845 2870 0
-13650 2710 2847 2868 0
-13650 2712 2803 2910 0
-13650 2712 2805 2908 0
-13650 2712 2807 2906 0
-13650 2712 2809 2904 0
-13650 2712 2811 2902 0
-13650 2712 2813 2900 0
-13650 2712 2815 2898 0
-13650 2712 2817 2896 0
-13650 2712 2819 2894 0
-13650 2712 2821 2892 0
-13650 2712 2823 2890 0
-13650 2712 2825 2888 0
-13650 2712 2827 2886 0
-13650 2712 2829 2884 0
-13650 2712 2831 2882 0
-13650 2712 2833 2880 0
-13650 2712 2835 2878 0
-13650 2712 2837 2876 0
-13650 2712 2839 2874 0
-13650 2712 2841 2872 0
-13650 2712 2843 2870 0
-13650 2712 2845 2868 0
-13650 2712 2847 2866 0
-13650 2714 2802 2910 0
-13650 2714 2803 2908 0
-13650 2714 2805 2906 0
-13650 2714 2807 2904 0
-13650 2714 2809 2902 0
-13650 2714 2811 2900 0
-13650 2714 2813 2898 0
-13650 2714 2815 2896 0
-13650 2714 2817 2894 0
-13650 2714 2819 2892 0
-13650 2714 2821 2890 0
-13650 2714 2823 2888 0
-13650 2714 2825 2886 0
-13650 2714 2827 2884 0
-13650 2714 2829 2882 0
-13650 2714 2831 2880 0
-13650 2714 2833 2878 0
-13650 2714 2835 2876 0
-13650 2714 2837 2874 0
-13650 2714 2839 2872 0
-13650 2714 2841 2870 0
-13650 2714 2843 2868 0
-13650 2714 2845 2866 0
-13650 2714 2847 2864 0
-13650 2716 2910 0
-13650 2716 2802 2908 0
-13650 2716 2803 2906 0
-13650 2716 2805 2904 0
-13650 2716 2807 2902 0
-13650 2716 2809 2900 0
-13650 2716 2811 2898 0
-13650 2716 2813 2896 0
-13650 2716 2815 2894 0
-13650 2716 2817 2892 0
-13650 2716 2819 2890 0
-13650 2716 2821 2888 0
-13650 2716 2823 2886 0
-13650 2716 2825 2884 0
-13650 2716 2827 2882 0
-13650 2716 2829 2880 0
-13650 2716 2831 2878 0
-13650 2716 2833 2876 0
-13650 2716 2835 2874 0
-13650 2716 2837 2872 0
-13650 2716 2839 2870 0
-13650 2716 2841 2868 0
-13650 2716 2843 2866 0
-13650 2716 2845 2864 0
-13650 2716 2847 2862 0
-13650 2718 2908 0
-13650 2718 2802 2906 0
-13650 2718 2803 2904 0
-13650 2718 2805 2902 0
-13650 2718 2807 2900 0
-13650 2718 2809 2898 0
-13650 2718 2811 2896 0
-13650 2718 2813 2894 0
-13650 2718 2815 2892 0
-13650 2718 2817 2890 0
-13650 2718 2819 2888 0
-13650 2718 2821 2886 0
-13650 2718 2823 2884 0
-13650 2718 2825 2882 0
-13650 2718 2827 2880 0
-13650 2718 2829 2878 0
-13650 2718 2831 2876 0
-13650 2718 2833 2874 0
-13650 2718 2835 2872 0
-13650 2718 2837 2870 0
-13650 2718 2839 2868 0
-13650 2718 2841 2866 0
-13650 2718 2843 2864 0
-13650 2718 2845 2862 0
-13650 2718 2847 2860 0
-13650 2720 2906 0
-13650 2720 2802 2904 0
-13650 2720 2803 2902 0
-13650 2720 2805 2900 0
-13650 2720 2807 2898 0
-13650 2720 2809 2896 0
-13650 2720 2811 2894 0
-13650 2720 2813 2892 0
-13650 2720 2815 2890 0
-13650 2720 2817 2888 0
-13650 2720 2819 2886 0
-13650 2720 2821 2884 0
-13650 2720 2823 2882 0
-13650 2720 2825 2880 0
-13650 2720 2827 2878 0
-13650 2720 2829 2876 0
-13650 2720 2831 2874 0
-13650 2720 2833 2872 0
-13650 2720 2835 2870 0
-13650 2720 2837 2868 0
-13650 2720 2839 2866 0
-13650 2720 2841 2864 0
-13650 2720 2843 2862 0
-13650 2720 2845 2860 0
-13650 2720 2847 2858 0
-13650 2722 2904 0
-13650 2722 2802 2902 0
-13650 2722 2803 2900 0
-13650 2722 2805 2898 0
-13650 2722 2807 2896 0
-13650 2722 2809 2894 0
-13650 2722 2811 2892 0
-13650 2722 2813 2890 0
-13650 2722 2815 2888 0
-13650 2722 2817 2886 0
-13650 2722 2819 2884 0
-13650 2722 2821 2882 0
-13650 2722 2823 2880 0
-13650 2722 2825 2878 0
-13650 2722 2827 2876 0
-13650 2722 2829 2874 0
-13650 2722 2831 2872 0
-13650 2722 2833 2870 0
-13650 2722 2835 2868 0
-13650 2722 2837 2866 0
-13650 2722 2839 2864 0
-13650 2722 2841 2862 0
-13650 2722 2843 2860 0
-13650 2722 2845 2858 0
-13650 2722 2847 2856 0
-13650 2724 2902 0
-13650 2724 2802 2900 0
-13650 2724 2803 2898 0
-13650 2724 2805 2896 0
-13650 2724 2807 2894 0
-13650 2724 2809 2892 0
-13650 2724 2811 2890 0
-13650 2724 2813 2888 0
-13650 2724 2815 2886 0
-13650 2724 2817 2884 0
-13650 2724 2819 2882 0
-13650 2724 2821 2880 0
-13650 2724 2823 2878 0
-13650 2724 2825 2876 0
-13650 2724 2827 2874 0
-13650 2724 2829 2872 0
-13650 2724 2831 2870 0
-13650 2724 2833 2868 0
-13650 2724 2835 2866 0
-13650 2724 2837 2864 0
-13650 2724 2839 2862 0
-13650 2724 2841 2860 0
-13650 2724 2843 2858 0
-13650 2724 2845 2856 0
-13650 2724 2847 2854 0
-13650 2726 2900 0
-13650 2726 2802 2898 0
-13650 2726 2803 2896 0
-13650 2726 2805 2894 0
-13650 2726 2807 2892 0
-13650 2726 2809 2890 0
-13650 2726 2811 2888 0
-13650 2726 2813 2886 0
-13650 2726 2815 2884 0
-13650 2726 2817 2882 0
-13650 2726 2819 2880 0
-13650 2726 2821 2878 0
-13650 2726 2823 2876 0
-13650 2726 2825 2874 0
-13650 2726 2827 2872 0
-13650 2726 2829 2870 0
-13650 2726 2831 2868 0
-13650 2726 2833 2866 0
-13650 2726 2835 2864 0
-13650 2726 2837 2862 0
-13650 2726 2839 2860 0
-13650 2726 2841 2858 0
-13650 2726 2843 2856 0
-13650 2726 2845 2854 0
-13650 2726 2847 2852 0
-13650 2728 2898 0
-13650 2728 2802 2896 0
-13650 2728 2803 2894 0
-13650 2728 2805 2892 0
-13650 2728 2807 2890 0
-13650 2728 2809 2888 0
-13650 2728 2811 2886 0
-13650 2728 2813 2884 0
-13650 2728 2815 2882 0
-13650 2728 2817 2880 0
-13650 2728 2819 2878 0
-13650 2728 2821 2876 0
-13650 2728 2823 2874 0
-13650 2728 2825 2872 0
-13650 2728 2827 2870 0
-13650 2728 2829 2868 0
-13650 2728 2831 2866 0
-13650 2728 2833 2864 0
-13650 2728 2835 2862 0
-13650 2728 2837 2860 0
-13650 2728 2839 2858 0
-13650 2728 2841 2856 0
-13650 2728 2843 2854 0
-13650 2728 2845 2852 0
-13650 2728 2847 2850 0
-13650 2730 2896 0
-13650 2730 2802 2894 0
-13650 2730 2803 2892 0
-13650 2730 2805 2890 0
-13650 2730 2807 2888 0
-13650 2730 2809 2886 0
-13650 2730 2811 2884 0
-13650 2730 2813 2882 0
-13650 2730 2815 2880 0
-13650 2730 2817 2878 0
-13650 2730 2819 2876 0
-13650 2730 2821 2874 0
-13650 2730 2823 2872 0
-13650 2730 2825 2870 0
-13650 2730 2827 2868 0
-13650 2730 2829 2866 0
-13650 2730 2831 2864 0
-13650 2730 2833 2862 0
-13650 2730 2835 2860 0
-13650 2730 2837 2858 0
-13650 2730 2839 2856 0
-13650 2730 2841 2854 0
-13650 2730 2843 2852 0
-13650 2730 2845 2850 0
-13650 2730 2847 2849 0
-13650 2732 2894 0
-13650 2732 2802 2892 0
-13650 2732 2803 2890 0
-13650 2732 2805 2888 0
-13650 2732 2807 2886 0
-13650 2732 2809 2884 0
-13650 2732 2811 2882 0
-13650 2732 2813 2880 0
-13650 2732 2815 2878 0
-13650 2732 2817 2876 0
-13650 2732 2819 2874 0
-13650 2732 2821 2872 0
-13650 2732 2823 2870 0
-13650 2732 2825 2868 0
-13650 2732 2827 2866 0
-13650 2732 2829 2864 0
-13650 2732 2831 2862 0
-13650 2732 2833 2860 0
-13650 2732 2835 2858 0
-13650 2732 2837 2856 0
-13650 2732 2839 2854 0
-13650 2732 2841 2852 0
-13650 2732 2843 2850 0
-13650 2732 2845 2849 0
-13650 2732 2847 0
-13650 2734 2892 0
-13650 2734 2802 2890 0
-13650 2734 2803 2888 0
-13650 2734 2805 2886 0
-13650 2734 2807 2884 0
-13650 2734 2809 2882 0
-13650 2734 2811 2880 0
-13650 2734 2813 2878 0
-13650 2734 2815 2876 0
-13650 2734 2817 2874 0
-13650 2734 2819 2872 0
-13650 2734 2821 2870 0
-13650 2734 2823 2868 0
-13650 2734 2825 2866 0
-13650 2734 2827 2864 0
-13650 2734 2829 2862 0
-13650 2734 2831 2860 0
-13650 2734 2833 2858 0
-13650 2734 2835 2856 0
-13650 2734 2837 2854 0
-13650 2734 2839 2852 0
-13650 2734 2841 2850 0
-13650 2734 2843 2849 0
-13650 2734 2845 0
-13650 2734 2847 0
-13650 2736 2890 0
-13650 2736 2802 2888 0
-13650 2736 2803 2886 0
-13650 2736 2805 2884 0
-13650 2736 2807 2882 0
-13650 2736 2809 2880 0
-13650 2736 2811 2878 0
-13650 2736 2813 2876 0
-13650 2736 2815 2874 0
-13650 2736 2817 2872 0
-13650 2736 2819 2870 0
-13650 2736 2821 2868 0
-13650 2736 2823 2866 0
-13650 2736 2825 2864 0
-13650 2736 2827 2862 0
-13650 2736 2829 2860 0
-13650 2736 2831 2858 0
-13650 2736 2833 2856 0
-13650 2736 2835 2854 0
-13650 2736 2837 2852 0
-13650 2736 2839 2850 0
-13650 2736 2841 2849 0
-13650 2736 2843 0
-13650 2736 2845 0
-13650 2736 2847 0
-13650 2738 2888 0
-13650 2738 2802 2886 0
-13650 2738 2803 2884 0
-13650 2738 2805 2882 0
-13650 2738 2807 2880 0
-13650 2738 2809 2878 0
-13650 2738 2811 2876 0
-13650 2738 2813 2874 0
-13650 2738 2815 2872 0
-13650 2738 2817 2870 0
-13650 2738 2819 2868 0
-13650 2738 2821 2866 0
-13650 2738 2823 2864 0
-13650 2738 2825 2862 0
-13650 2738 2827 2860 0
-13650 2738 2829 2858 0
-13650 2738 2831 2856 0
-13650 2738 2833 2854 0
-13650 2738 2835 2852 0
-13650 2738 2837 2850 0
-13650 2738 2839 2849 0
-13650 2738 2841 0
-13650 2738 2843 0
-13650 2738 2845 0
-13650 2738 2847 0
13650 -2841 -2849 0
13650 -2839 -2850 0
13650 -2837 -2852 0
13650 -2835 -2854 0
13650 -2833 -2856 0
13650 -2831 -2858 0
13650 -2829 -2860 0
13650 -2827 -2862 0
13650 -2825 -2864 0
13650 -2823 -2866 0
13650 -2821 -2868 0
13650 -2819 -2870 0
13650 -2817 -2872 0
13650 -2815 -2874 0
13650 -2813 -2876 0
13650 -2811 -2878 0
13650 -2809 -2880 0
13650 -2807 -2882 0
13650 -2805 -2884 0
13650 -2803 -2886 0
13650 -2802 -2888 0
13650 -2738 -2843 -2849 0
13650 -2738 -2841 -2850 0
13650 -2738 -2839 -2852 0
13650 -2738 -2837 -2854 0
13650 -2738 -2835 -2856 0
13650 -2738 -2833 -2858 0
13650 -2738 -2831 -2860 0
13650 -2738 -2829 -2862 0
13650 -2738 -2827 -2864 0
13650 -2738 -2825 -2866 0
13650 -2738 -2823 -2868 0
13650 -2738 -2821 -2870 0
13650 -2738 -2819 -2872 0
13650 -2738 -2817 -2874 0
13650 -2738 -2815 -2876 0
13650 -2738 -2813 -2878 0
13650 -2738 -2811 -2880 0
13650 -2738 -2809 -2882 0
13650 -2738 -2807 -2884 0
13650 -2738 -2805 -2886 0
13650 -2738 -2803 -2888 0
13650 -2738 -2802 -2890 0
13650 -2736 -2845 -2849 0
13650 -2736 -2843 -2850 0
13650 -2736 -2841 -2852 0
13650 -2736 -2839 -2854 0
13650 -2736 -2837 -2856 0
13650 -2736 -2835 -2858 0
13650 -2736 -2833 -2860 0
13650 -2736 -2831 -2862 0
13650 -2736 -2829 -2864 0
13650 -2736 -2827 -2866 0
13650 -2736 -2825 -2868 0
13650 -2736 -2823 -2870 0
13650 -2736 -2821 -2872 0
13650 -2736 -2819 -2874 0
13650 -2736 -2817 -2876 0
13650 -2736 -2815 -2878 0
13650 -2736 -2813 -2880 0
13650 -2736 -2811 -2882 0
13650 -2736 -2809 -2884 0
13650 -2736 -2807 -2886 0
13650 -2736 -2805 -2888 0
13650 -2736 -2803 -2890 0
13650 -2736 -2802 -2892 0
13650 -2734 -2847 -2849 0
13650 -2734 -2845 -2850 0
13650 -2734 -2843 -2852 0
13650 -2734 -2841 -2854 0
13650 -2734 -2839 -2856 0
13650 -2734 -2837 -2858 0
13650 -2734 -2835 -2860 0
13650 -2734 -2833 -2862 0
13650 -2734 -2831 -2864 0
13650 -2734 -2829 -2866 0
13650 -2734 -2827 -2868 0
13650 -2734 -2825 -2870 0
13650 -2734 -2823 -2872 0
13650 -2734 -2821 -2874 0
13650 -2734 -2819 -2876 0
13650 -2734 -2817 -2878 0
13650 -2734 -2815 -2880 0
13650 -2734 -2813 -2882 0
13650 -2734 -2811 -2884 0
13650 -2734 -2809 -2886 0
13650 -2734 -2807 -2888 0
13650 -2734 -2805 -2890 0
13650 -2734 -2803 -2892 0
13650 -2734 -2802 -2894 0
13650 -2732 -2849 0
13650 -2732 -2847 -2850 0
13650 -2732 -2845 -2852 0
13650 -2732 -2843 -2854 0
13650 -2732 -2841 -2856 0
13650 -2732 -2839 -2858 0
13650 -2732 -2837 -2860 0
13650 -2732 -2835 -2862 0
13650 -2732 -2833 -2864 0
13650 -2732 -2831 -2866 0
13650 -2732 -2829 -2868 0
13650 -2732 -2827 -2870 0
13650 -2732 -2825 -2872 0
13650 -2732 -2823 -2874 0
13650 -2732 -2821 -2876 0
13650 -2732 -2819 -2878 0
13650 -2732 -2817 -2880 0
13650 -2732 -2815 -2882 0
13650 -2732 -2813 -2884 0
13650 -2732 -2811 -2886 0
13650 -2732 -2809 -2888 0
13650 -2732 -2807 -2890 0
13650 -2732 -2805 -2892 0
13650 -2732 -2803 -2894 0
13650 -2732 -2802 -2896 0
13650 -2730 -2850 0
13650 -2730 -2847 -2852 0
13650 -2730 -2845 -2854 0
13650 -2730 -2843 -2856 0
13650 -2730 -2841 -2858 0
13650 -2730 -2839 -2860 0
13650 -2730 -2837 -2862 0
13650 -2730 -2835 -2864 0
13650 -2730 -2833 -2866 0
13650 -2730 -2831 -2868 0
13650 -2730 -2829 -2870 0
13650 -2730 -2827 -2872 0
13650 -2730 -2825 -2874 0
13650 -2730 -2823 -2876 0
13650 -2730 -2821 -2878 0
13650 -2730 -2819 -2880 0
13650 -2730 -2817 -2882 0
13650 -2730 -2815 -2884 0
13650 -2730 -2813 -2886 0
13650 -2730 -2811 -2888 0
13650 -2730 -2809 -2890 0
13650 -2730 -2807 -2892 0
13650 -2730 -2805 -2894 0
13650 -2730 -2803 -2896 0
13650 -2730 -2802 -2898 0
13650 -2728 -2852 0
13650 -2728 -2847 -2854 0
13650 -2728 -2845 -2856 0
13650 -2728 -2843 -2858 0
13650 -2728 -2841 -2860 0
13650 -2728 -2839 -2862 0
13650 -2728 -2837 -2864 0
13650 -2728 -2835 -2866 0
13650 -2728 -2833 -2868 0
13650 -2728 -2831 -2870 0
13650 -2728 -2829 -2872 0
13650 -2728 -2827 -2874 0
13650 -2728 -2825 -2876 0
13650 -2728 -2823 -2878 0
13650 -2728 -2821 -2880 0
13650 -2728 -2819 -2882 0
13650 -2728 -2817 -2884 0
13650 -2728 -2815 -2886 0
13650 -2728 -2813 -2888 0
13650 -2728 -2811 -2890 0
13650 -2728 -2809 -2892 0
13650 -2728 -2807 -2894 0
13650 -2728 -2805 -2896 0
13650 -2728 -2803 -2898 0
13650 -2728 -2802 -2900 0
13650 -2726 -2854 0
13650 -2726 -2847 -2856 0
13650 -2726 -2845 -2858 0
13650 -2726 -2843 -2860 0
13650 -2726 -2841 -2862 0
13650 -2726 -2839 -2864 0
13650 -2726 -2837 -2866 0
13650 -2726 -2835 -2868 0
13650 -2726 -2833 -2870 0
13650 -2726 -2831 -2872 0
13650 -2726 -2829 -2874 0
13650 -2726 -2827 -2876 0
13650 -2726 -2825 -2878 0
13650 -2726 -2823 -2880 0
13650 -2726 -2821 -2882 0
13650 -2726 -2819 -2884 0
13650 -2726 -2817 -2886 0
13650 -2726 -2815 -2888 0
13650 -2726 -2813 -2890 0
13650 -2726 -2811 -2892 0
13650 -2726 -2809 -2894 0
13650 -2726 -2807 -2896 0
13650 -2726 -2805 -2898 0
13650 -2726 -2803 -2900 0
13650 -2726 -2802 -2902 0
13650 -2724 -2856 0
13650 -2724 -2847 -2858 0
13650 -2724 -2845 -2860 0
13650 -2724 -2843 -2862 0
13650 -2724 -2841 -2864 0
13650 -2724 -2839 -2866 0
13650 -2724 -2837 -2868 0
13650 -2724 -2835 -2870 0
13650 -2724 -2833 -2872 0
13650 -2724 -2831 -2874 0
13650 -2724 -2829 -2876 0
13650 -2724 -2827 -2878 0
13650 -2724 -2825 -2880 0
13650 -2724 -2823 -2882 0
13650 -2724 -2821 -2884 0
13650 -2724 -2819 -2886 0
13650 -2724 -2817 -2888 0
13650 -2724 -2815 -2890 0
13650 -2724 -2813 -2892 0
13650 -2724 -2811 -2894 0
13650 -2724 -2809 -2896 0
13650 -2724 -2807 -2898 0
13650 -2724 -2805 -2900 0
13650 -2724 -2803 -2902 0
13650 -2724 -2802 -2904 0
13650 -2722 -2858 0
13650 -2722 -2847 -2860 0
13650 -2722 -2845 -2862 0
13650 -2722 -2843 -2864 0
13650 -2722 -2841 -2866 0
13650 -2722 -2839 -2868 0
13650 -2722 -2837 -2870 0
13650 -2722 -2835 -2872 0
13650 -2722 -2833 -2874 0
13650 -2722 -2831 -2876 0
13650 -2722 -2829 -2878 0
13650 -2722 -2827 -2880 0
13650 -2722 -2825 -2882 0
13650 -2722 -2823 -2884 0
13650 -2722 -2821 -2886 0
13650 -2722 -2819 -2888 0
13650 -2722 -2817 -2890 0
13650 -2722 -2815 -2892 0
13650 -2722 -2813 -2894 0
13650 -2722 -2811 -2896 0
13650 -2722 -2809 -2898 0
13650 -2722 -2807 -2900 0
13650 -2722 -2805 -2902 0
13650 -2722 -2803 -2904 0
13650 -2722 -2802 -2906 0
13650 -2720 -2860 0
13650 -2720 -2847 -2862 0
13650 -2720 -2845 -2864 0
13650 -2720 -2843 -2866 0
13650 -2720 -2841 -2868 0
13650 -2720 -2839 -2870 0
13650 -2720 -2837 -2872 0
13650 -2720 -2835 -2874 0
13650 -2720 -2833 -2876 0
13650 -2720 -2831 -2878 0
13650 -2720 -2829 -2880 0
13650 -2720 -2827 -2882 0
13650 -2720 -2825 -2884 0
13650 -2720 -2823 -2886 0
13650 -2720 -2821 -2888 0
13650 -2720 -2819 -2890 0
13650 -2720 -2817 -2892 0
13650 -2720 -2815 -2894 0
13650 -2720 -2813 -2896 0
13650 -2720 -2811 -2898 0
13650 -2720 -2809 -2900 0
13650 -2720 -2807 -2902 0
13650 -2720 -2805 -2904 0
13650 -2720 -2803 -2906 0
13650 -2720 -2802 -2908 0
13650 -2718 -2862 0
13650 -2718 -2847 -2864 0
13650 -2718 -2845 -2866 0
13650 -2718 -2843 -2868 0
13650 -2718 -2841 -2870 0
13650 -2718 -2839 -2872 0
13650 -2718 -2837 -2874 0
13650 -2718 -2835 -2876 0
13650 -2718 -2833 -2878 0
13650 -2718 -2831 -2880 0
13650 -2718 -2829 -2882 0
13650 -2718 -2827 -2884 0
13650 -2718 -2825 -2886 0
13650 -2718 -2823 -2888 0
13650 -2718 -2821 -2890 0
13650 -2718 -2819 -2892 0
13650 -2718 -2817 -2894 0
13650 -2718 -2815 -2896 0
13650 -2718 -2813 -2898 0
13650 -2718 -2811 -2900 0
13650 -2718 -2809 -2902 0
13650 -2718 -2807 -2904 0
13650 -2718 -2805 -2906 0
13650 -2718 -2803 -2908 0
13650 -2718 -2802 -2910 0
13650 -2716 -2864 0
13650 -2716 -2847 -2866 0
13650 -2716 -2845 -2868 0
13650 -2716 -2843 -2870 0
13650 -2716 -2841 -2872 0
13650 -2716 -2839 -2874 0
13650 -2716 -2837 -2876 0
13650 -2716 -2835 -2878 0
13650 -2716 -2833 -2880 0
13650 -2716 -2831 -2882 0
13650 -2716 -2829 -2884 0
13650 -2716 -2827 -2886 0
13650 -2716 -2825 -2888 0
13650 -2716 -2823 -2890 0
13650 -2716 -2821 -2892 0
13650 -2716 -2819 -2894 0
13650 -2716 -2817 -2896 0
13650 -2716 -2815 -2898 0
13650 -2716 -2813 -2900 0
13650 -2716 -2811 -2902 0
13650 -2716 -2809 -2904 0
13650 -2716 -2807 -2906 0
13650 -2716 -2805 -2908 0
13650 -2716 -2803 -2910 0
13650 -2716 -2802 0
13650 -2714 -2866 0
13650 -2714 -2847 -2868 0
13650 -2714 -2845 -2870 0
13650 -2714 -2843 -2872 0
13650 -2714 -2841 -2874 0
13650 -2714 -2839 -2876 0
13650 -2714 -2837 -2878 0
13650 -2714 -2835 -2880 0
13650 -2714 -2833 -2882 0
13650 -2714 -2831 -2884 0
13650 -2714 -2829 -2886 0
13650 -2714 -2827 -2888 0
13650 -2714 -2825 -2890 0
13650 -2714 -2823 -2892 0
13650 -2714 -2821 -2894 0
13650 -2714 -2819 -2896 0
13650 -2714 -2817 -2898 0
13650 -2714 -2815 -2900 0
13650 -2714 -2813 -2902 0
13650 -2714 -2811 -2904 0
13650 -2714 -2809 -2906 0
13650 -2714 -2807 -2908 0
13650 -2714 -2805 -2910 0
13650 -2714 -2803 0
13650 -2714 -2802 0
13650 -2712 -2868 0
13650 -2712 -2847 -2870 0
13650 -2712 -2845 -2872 0
13650 -2712 -2843 -2874 0
13650 -2712 -2841 -2876 0
13650 -2712 -2839 -2878 0
13650 -2712 -2837 -2880 0
13650 -2712 -2835 -2882 0
13650 -2712 -2833 -2884 0
13650 -2712 -2831 -2886 0
13650 -2712 -2829 -2888 0
13650 -2712 -2827 -2890 0
13650 -2712 -2825 -2892 0
13650 -2712 -2823 -2894 0
13650 -2712 -2821 -2896 0
13650 -2712 -2819 -2898 0
13650 -2712 -2817 -2900 0
13650 -2712 -2815 -2902 0
13650 -2712 -2813 -2904 0
13650 -2712 -2811 -2906 0
13650 -2712 -2809 -2908 0
13650 -2712 -2807 -2910 0
13650 -2712 -2805 0
13650 -2712 -2803 0
13650 -2712 -2802 0
13650 -2710 -2870 0
13650 -2710 -2847 -2872 0
13650 -2710 -2845 -2874 0
13650 -2710 -2843 -2876 0
13650 -2710 -2841 -2878 0
13650 -2710 -2839 -2880 0
13650 -2710 -2837 -2882 0
13650 -2710 -2835 -2884 0
13650 -2710 -2833 -2886 0
13650 -2710 -2831 -2888 0
13650 -2710 -2829 -2890 0
13650 -2710 -2827 -2892 0
13650 -2710 -2825 -2894 0
13650 -2710 -2823 -2896 0
13650 -2710 -2821 -2898 0
13650 -2710 -2819 -2900 0
13650 -2710 -2817 -2902 0
13650 -2710 -2815 -2904 0
13650 -2710 -2813 -2906 0
13650 -2710 -2811 -2908 0
13650 -2710 -2809 -2910 0
13650 -2710 -2807 0
13650 -2710 -2805 0
13650 -2710 -2803 0
13650 -2710 -2802 0
13650 -2709 -2872 0
13650 -2709 -2847 -2874 0
13650 -2709 -2845 -2876 0
13650 -2709 -2843 -2878 0
13650 -2709 -2841 -2880 0
13650 -2709 -2839 -2882 0
13650 -2709 -2837 -2884 0
13650 -2709 -2835 -2886 0
13650 -2709 -2833 -2888 0
13650 -2709 -2831 -2890 0
13650 -2709 -2829 -2892 0
13650 -2709 -2827 -2894 0
13650 -2709 -2825 -2896 0
13650 -2709 -2823 -2898 0
13650 -2709 -2821 -2900 0
13650 -2709 -2819 -2902 0
13650 -2709 -2817 -2904 0
13650 -2709 -2815 -2906 0
13650 -2709 -2813 -2908 0
13650 -2709 -2811 -2910 0
13650 -2709 -2809 0
13650 -2709 -2807 0
13650 -2709 -2805 0
13650 -2709 -2803 0
13650 -2709 -2802 0
c ((36<=(aux486 + aux489 + aux490))=tv=SATLiteral(13651))
-13651 -2839 -2849 0
-13651 -2837 -2850 0
-13651 -2835 -2852 0
-13651 -2833 -2854 0
-13651 -2831 -2856 0
-13651 -2829 -2858 0
-13651 -2827 -2860 0
-13651 -2825 -2862 0
-13651 -2823 -2864 0
-13651 -2821 -2866 0
-13651 -2819 -2868 0
-13651 -2817 -2870 0
-13651 -2815 -2872 0
-13651 -2813 -2874 0
-13651 -2811 -2876 0
-13651 -2809 -2878 0
-13651 -2807 -2880 0
-13651 -2805 -2882 0
-13651 -2803 -2884 0
-13651 -2802 -2886 0
-13651 -2738 -2841 -2849 0
-13651 -2738 -2839 -2850 0
-13651 -2738 -2837 -2852 0
-13651 -2738 -2835 -2854 0
-13651 -2738 -2833 -2856 0
-13651 -2738 -2831 -2858 0
-13651 -2738 -2829 -2860 0
-13651 -2738 -2827 -2862 0
-13651 -2738 -2825 -2864 0
-13651 -2738 -2823 -2866 0
-13651 -2738 -2821 -2868 0
-13651 -2738 -2819 -2870 0
-13651 -2738 -2817 -2872 0
-13651 -2738 -2815 -2874 0
-13651 -2738 -2813 -2876 0
-13651 -2738 -2811 -2878 0
-13651 -2738 -2809 -2880 0
-13651 -2738 -2807 -2882 0
-13651 -2738 -2805 -2884 0
-13651 -2738 -2803 -2886 0
-13651 -2738 -2802 -2888 0
-13651 -2736 -2843 -2849 0
-13651 -2736 -2841 -2850 0
-13651 -2736 -2839 -2852 0
-13651 -2736 -2837 -2854 0
-13651 -2736 -2835 -2856 0
-13651 -2736 -2833 -2858 0
-13651 -2736 -2831 -2860 0
-13651 -2736 -2829 -2862 0
-13651 -2736 -2827 -2864 0
-13651 -2736 -2825 -2866 0
-13651 -2736 -2823 -2868 0
-13651 -2736 -2821 -2870 0
-13651 -2736 -2819 -2872 0
-13651 -2736 -2817 -2874 0
-13651 -2736 -2815 -2876 0
-13651 -2736 -2813 -2878 0
-13651 -2736 -2811 -2880 0
-13651 -2736 -2809 -2882 0
-13651 -2736 -2807 -2884 0
-13651 -2736 -2805 -2886 0
-13651 -2736 -2803 -2888 0
-13651 -2736 -2802 -2890 0
-13651 -2734 -2845 -2849 0
-13651 -2734 -2843 -2850 0
-13651 -2734 -2841 -2852 0
-13651 -2734 -2839 -2854 0
-13651 -2734 -2837 -2856 0
-13651 -2734 -2835 -2858 0
-13651 -2734 -2833 -2860 0
-13651 -2734 -2831 -2862 0
-13651 -2734 -2829 -2864 0
-13651 -2734 -2827 -2866 0
-13651 -2734 -2825 -2868 0
-13651 -2734 -2823 -2870 0
-13651 -2734 -2821 -2872 0
-13651 -2734 -2819 -2874 0
-13651 -2734 -2817 -2876 0
-13651 -2734 -2815 -2878 0
-13651 -2734 -2813 -2880 0
-13651 -2734 -2811 -2882 0
-13651 -2734 -2809 -2884 0
-13651 -2734 -2807 -2886 0
-13651 -2734 -2805 -2888 0
-13651 -2734 -2803 -2890 0
-13651 -2734 -2802 -2892 0
-13651 -2732 -2847 -2849 0
-13651 -2732 -2845 -2850 0
-13651 -2732 -2843 -2852 0
-13651 -2732 -2841 -2854 0
-13651 -2732 -2839 -2856 0
-13651 -2732 -2837 -2858 0
-13651 -2732 -2835 -2860 0
-13651 -2732 -2833 -2862 0
-13651 -2732 -2831 -2864 0
-13651 -2732 -2829 -2866 0
-13651 -2732 -2827 -2868 0
-13651 -2732 -2825 -2870 0
-13651 -2732 -2823 -2872 0
-13651 -2732 -2821 -2874 0
-13651 -2732 -2819 -2876 0
-13651 -2732 -2817 -2878 0
-13651 -2732 -2815 -2880 0
-13651 -2732 -2813 -2882 0
-13651 -2732 -2811 -2884 0
-13651 -2732 -2809 -2886 0
-13651 -2732 -2807 -2888 0
-13651 -2732 -2805 -2890 0
-13651 -2732 -2803 -2892 0
-13651 -2732 -2802 -2894 0
-13651 -2730 -2849 0
-13651 -2730 -2847 -2850 0
-13651 -2730 -2845 -2852 0
-13651 -2730 -2843 -2854 0
-13651 -2730 -2841 -2856 0
-13651 -2730 -2839 -2858 0
-13651 -2730 -2837 -2860 0
-13651 -2730 -2835 -2862 0
-13651 -2730 -2833 -2864 0
-13651 -2730 -2831 -2866 0
-13651 -2730 -2829 -2868 0
-13651 -2730 -2827 -2870 0
-13651 -2730 -2825 -2872 0
-13651 -2730 -2823 -2874 0
-13651 -2730 -2821 -2876 0
-13651 -2730 -2819 -2878 0
-13651 -2730 -2817 -2880 0
-13651 -2730 -2815 -2882 0
-13651 -2730 -2813 -2884 0
-13651 -2730 -2811 -2886 0
-13651 -2730 -2809 -2888 0
-13651 -2730 -2807 -2890 0
-13651 -2730 -2805 -2892 0
-13651 -2730 -2803 -2894 0
-13651 -2730 -2802 -2896 0
-13651 -2728 -2850 0
-13651 -2728 -2847 -2852 0
-13651 -2728 -2845 -2854 0
-13651 -2728 -2843 -2856 0
-13651 -2728 -2841 -2858 0
-13651 -2728 -2839 -2860 0
-13651 -2728 -2837 -2862 0
-13651 -2728 -2835 -2864 0
-13651 -2728 -2833 -2866 0
-13651 -2728 -2831 -2868 0
-13651 -2728 -2829 -2870 0
-13651 -2728 -2827 -2872 0
-13651 -2728 -2825 -2874 0
-13651 -2728 -2823 -2876 0
-13651 -2728 -2821 -2878 0
-13651 -2728 -2819 -2880 0
-13651 -2728 -2817 -2882 0
-13651 -2728 -2815 -2884 0
-13651 -2728 -2813 -2886 0
-13651 -2728 -2811 -2888 0
-13651 -2728 -2809 -2890 0
-13651 -2728 -2807 -2892 0
-13651 -2728 -2805 -2894 0
-13651 -2728 -2803 -2896 0
-13651 -2728 -2802 -2898 0
-13651 -2726 -2852 0
-13651 -2726 -2847 -2854 0
-13651 -2726 -2845 -2856 0
-13651 -2726 -2843 -2858 0
-13651 -2726 -2841 -2860 0
-13651 -2726 -2839 -2862 0
-13651 -2726 -2837 -2864 0
-13651 -2726 -2835 -2866 0
-13651 -2726 -2833 -2868 0
-13651 -2726 -2831 -2870 0
-13651 -2726 -2829 -2872 0
-13651 -2726 -2827 -2874 0
-13651 -2726 -2825 -2876 0
-13651 -2726 -2823 -2878 0
-13651 -2726 -2821 -2880 0
-13651 -2726 -2819 -2882 0
-13651 -2726 -2817 -2884 0
-13651 -2726 -2815 -2886 0
-13651 -2726 -2813 -2888 0
-13651 -2726 -2811 -2890 0
-13651 -2726 -2809 -2892 0
-13651 -2726 -2807 -2894 0
-13651 -2726 -2805 -2896 0
-13651 -2726 -2803 -2898 0
-13651 -2726 -2802 -2900 0
-13651 -2724 -2854 0
-13651 -2724 -2847 -2856 0
-13651 -2724 -2845 -2858 0
-13651 -2724 -2843 -2860 0
-13651 -2724 -2841 -2862 0
-13651 -2724 -2839 -2864 0
-13651 -2724 -2837 -2866 0
-13651 -2724 -2835 -2868 0
-13651 -2724 -2833 -2870 0
-13651 -2724 -2831 -2872 0
-13651 -2724 -2829 -2874 0
-13651 -2724 -2827 -2876 0
-13651 -2724 -2825 -2878 0
-13651 -2724 -2823 -2880 0
-13651 -2724 -2821 -2882 0
-13651 -2724 -2819 -2884 0
-13651 -2724 -2817 -2886 0
-13651 -2724 -2815 -2888 0
-13651 -2724 -2813 -2890 0
-13651 -2724 -2811 -2892 0
-13651 -2724 -2809 -2894 0
-13651 -2724 -2807 -2896 0
-13651 -2724 -2805 -2898 0
-13651 -2724 -2803 -2900 0
-13651 -2724 -2802 -2902 0
-13651 -2722 -2856 0
-13651 -2722 -2847 -2858 0
-13651 -2722 -2845 -2860 0
-13651 -2722 -2843 -2862 0
-13651 -2722 -2841 -2864 0
-13651 -2722 -2839 -2866 0
-13651 -2722 -2837 -2868 0
-13651 -2722 -2835 -2870 0
-13651 -2722 -2833 -2872 0
-13651 -2722 -2831 -2874 0
-13651 -2722 -2829 -2876 0
-13651 -2722 -2827 -2878 0
-13651 -2722 -2825 -2880 0
-13651 -2722 -2823 -2882 0
-13651 -2722 -2821 -2884 0
-13651 -2722 -2819 -2886 0
-13651 -2722 -2817 -2888 0
-13651 -2722 -2815 -2890 0
-13651 -2722 -2813 -2892 0
-13651 -2722 -2811 -2894 0
-13651 -2722 -2809 -2896 0
-13651 -2722 -2807 -2898 0
-13651 -2722 -2805 -2900 0
-13651 -2722 -2803 -2902 0
-13651 -2722 -2802 -2904 0
-13651 -2720 -2858 0
-13651 -2720 -2847 -2860 0
-13651 -2720 -2845 -2862 0
-13651 -2720 -2843 -2864 0
-13651 -2720 -2841 -2866 0
-13651 -2720 -2839 -2868 0
-13651 -2720 -2837 -2870 0
-13651 -2720 -2835 -2872 0
-13651 -2720 -2833 -2874 0
-13651 -2720 -2831 -2876 0
-13651 -2720 -2829 -2878 0
-13651 -2720 -2827 -2880 0
-13651 -2720 -2825 -2882 0
-13651 -2720 -2823 -2884 0
-13651 -2720 -2821 -2886 0
-13651 -2720 -2819 -2888 0
-13651 -2720 -2817 -2890 0
-13651 -2720 -2815 -2892 0
-13651 -2720 -2813 -2894 0
-13651 -2720 -2811 -2896 0
-13651 -2720 -2809 -2898 0
-13651 -2720 -2807 -2900 0
-13651 -2720 -2805 -2902 0
-13651 -2720 -2803 -2904 0
-13651 -2720 -2802 -2906 0
-13651 -2718 -2860 0
-13651 -2718 -2847 -2862 0
-13651 -2718 -2845 -2864 0
-13651 -2718 -2843 -2866 0
-13651 -2718 -2841 -2868 0
-13651 -2718 -2839 -2870 0
-13651 -2718 -2837 -2872 0
-13651 -2718 -2835 -2874 0
-13651 -2718 -2833 -2876 0
-13651 -2718 -2831 -2878 0
-13651 -2718 -2829 -2880 0
-13651 -2718 -2827 -2882 0
-13651 -2718 -2825 -2884 0
-13651 -2718 -2823 -2886 0
-13651 -2718 -2821 -2888 0
-13651 -2718 -2819 -2890 0
-13651 -2718 -2817 -2892 0
-13651 -2718 -2815 -2894 0
-13651 -2718 -2813 -2896 0
-13651 -2718 -2811 -2898 0
-13651 -2718 -2809 -2900 0
-13651 -2718 -2807 -2902 0
-13651 -2718 -2805 -2904 0
-13651 -2718 -2803 -2906 0
-13651 -2718 -2802 -2908 0
-13651 -2716 -2862 0
-13651 -2716 -2847 -2864 0
-13651 -2716 -2845 -2866 0
-13651 -2716 -2843 -2868 0
-13651 -2716 -2841 -2870 0
-13651 -2716 -2839 -2872 0
-13651 -2716 -2837 -2874 0
-13651 -2716 -2835 -2876 0
-13651 -2716 -2833 -2878 0
-13651 -2716 -2831 -2880 0
-13651 -2716 -2829 -2882 0
-13651 -2716 -2827 -2884 0
-13651 -2716 -2825 -2886 0
-13651 -2716 -2823 -2888 0
-13651 -2716 -2821 -2890 0
-13651 -2716 -2819 -2892 0
-13651 -2716 -2817 -2894 0
-13651 -2716 -2815 -2896 0
-13651 -2716 -2813 -2898 0
-13651 -2716 -2811 -2900 0
-13651 -2716 -2809 -2902 0
-13651 -2716 -2807 -2904 0
-13651 -2716 -2805 -2906 0
-13651 -2716 -2803 -2908 0
-13651 -2716 -2802 -2910 0
-13651 -2714 -2864 0
-13651 -2714 -2847 -2866 0
-13651 -2714 -2845 -2868 0
-13651 -2714 -2843 -2870 0
-13651 -2714 -2841 -2872 0
-13651 -2714 -2839 -2874 0
-13651 -2714 -2837 -2876 0
-13651 -2714 -2835 -2878 0
-13651 -2714 -2833 -2880 0
-13651 -2714 -2831 -2882 0
-13651 -2714 -2829 -2884 0
-13651 -2714 -2827 -2886 0
-13651 -2714 -2825 -2888 0
-13651 -2714 -2823 -2890 0
-13651 -2714 -2821 -2892 0
-13651 -2714 -2819 -2894 0
-13651 -2714 -2817 -2896 0
-13651 -2714 -2815 -2898 0
-13651 -2714 -2813 -2900 0
-13651 -2714 -2811 -2902 0
-13651 -2714 -2809 -2904 0
-13651 -2714 -2807 -2906 0
-13651 -2714 -2805 -2908 0
-13651 -2714 -2803 -2910 0
-13651 -2714 -2802 0
-13651 -2712 -2866 0
-13651 -2712 -2847 -2868 0
-13651 -2712 -2845 -2870 0
-13651 -2712 -2843 -2872 0
-13651 -2712 -2841 -2874 0
-13651 -2712 -2839 -2876 0
-13651 -2712 -2837 -2878 0
-13651 -2712 -2835 -2880 0
-13651 -2712 -2833 -2882 0
-13651 -2712 -2831 -2884 0
-13651 -2712 -2829 -2886 0
-13651 -2712 -2827 -2888 0
-13651 -2712 -2825 -2890 0
-13651 -2712 -2823 -2892 0
-13651 -2712 -2821 -2894 0
-13651 -2712 -2819 -2896 0
-13651 -2712 -2817 -2898 0
-13651 -2712 -2815 -2900 0
-13651 -2712 -2813 -2902 0
-13651 -2712 -2811 -2904 0
-13651 -2712 -2809 -2906 0
-13651 -2712 -2807 -2908 0
-13651 -2712 -2805 -2910 0
-13651 -2712 -2803 0
-13651 -2712 -2802 0
-13651 -2710 -2868 0
-13651 -2710 -2847 -2870 0
-13651 -2710 -2845 -2872 0
-13651 -2710 -2843 -2874 0
-13651 -2710 -2841 -2876 0
-13651 -2710 -2839 -2878 0
-13651 -2710 -2837 -2880 0
-13651 -2710 -2835 -2882 0
-13651 -2710 -2833 -2884 0
-13651 -2710 -2831 -2886 0
-13651 -2710 -2829 -2888 0
-13651 -2710 -2827 -2890 0
-13651 -2710 -2825 -2892 0
-13651 -2710 -2823 -2894 0
-13651 -2710 -2821 -2896 0
-13651 -2710 -2819 -2898 0
-13651 -2710 -2817 -2900 0
-13651 -2710 -2815 -2902 0
-13651 -2710 -2813 -2904 0
-13651 -2710 -2811 -2906 0
-13651 -2710 -2809 -2908 0
-13651 -2710 -2807 -2910 0
-13651 -2710 -2805 0
-13651 -2710 -2803 0
-13651 -2710 -2802 0
-13651 -2709 -2870 0
-13651 -2709 -2847 -2872 0
-13651 -2709 -2845 -2874 0
-13651 -2709 -2843 -2876 0
-13651 -2709 -2841 -2878 0
-13651 -2709 -2839 -2880 0
-13651 -2709 -2837 -2882 0
-13651 -2709 -2835 -2884 0
-13651 -2709 -2833 -2886 0
-13651 -2709 -2831 -2888 0
-13651 -2709 -2829 -2890 0
-13651 -2709 -2827 -2892 0
-13651 -2709 -2825 -2894 0
-13651 -2709 -2823 -2896 0
-13651 -2709 -2821 -2898 0
-13651 -2709 -2819 -2900 0
-13651 -2709 -2817 -2902 0
-13651 -2709 -2815 -2904 0
-13651 -2709 -2813 -2906 0
-13651 -2709 -2811 -2908 0
-13651 -2709 -2809 -2910 0
-13651 -2709 -2807 0
-13651 -2709 -2805 0
-13651 -2709 -2803 0
-13651 -2709 -2802 0
13651 2807 2910 0
13651 2809 2908 0
13651 2811 2906 0
13651 2813 2904 0
13651 2815 2902 0
13651 2817 2900 0
13651 2819 2898 0
13651 2821 2896 0
13651 2823 2894 0
13651 2825 2892 0
13651 2827 2890 0
13651 2829 2888 0
13651 2831 2886 0
13651 2833 2884 0
13651 2835 2882 0
13651 2837 2880 0
13651 2839 2878 0
13651 2841 2876 0
13651 2843 2874 0
13651 2845 2872 0
13651 2847 2870 0
13651 2709 2805 2910 0
13651 2709 2807 2908 0
13651 2709 2809 2906 0
13651 2709 2811 2904 0
13651 2709 2813 2902 0
13651 2709 2815 2900 0
13651 2709 2817 2898 0
13651 2709 2819 2896 0
13651 2709 2821 2894 0
13651 2709 2823 2892 0
13651 2709 2825 2890 0
13651 2709 2827 2888 0
13651 2709 2829 2886 0
13651 2709 2831 2884 0
13651 2709 2833 2882 0
13651 2709 2835 2880 0
13651 2709 2837 2878 0
13651 2709 2839 2876 0
13651 2709 2841 2874 0
13651 2709 2843 2872 0
13651 2709 2845 2870 0
13651 2709 2847 2868 0
13651 2710 2803 2910 0
13651 2710 2805 2908 0
13651 2710 2807 2906 0
13651 2710 2809 2904 0
13651 2710 2811 2902 0
13651 2710 2813 2900 0
13651 2710 2815 2898 0
13651 2710 2817 2896 0
13651 2710 2819 2894 0
13651 2710 2821 2892 0
13651 2710 2823 2890 0
13651 2710 2825 2888 0
13651 2710 2827 2886 0
13651 2710 2829 2884 0
13651 2710 2831 2882 0
13651 2710 2833 2880 0
13651 2710 2835 2878 0
13651 2710 2837 2876 0
13651 2710 2839 2874 0
13651 2710 2841 2872 0
13651 2710 2843 2870 0
13651 2710 2845 2868 0
13651 2710 2847 2866 0
13651 2712 2802 2910 0
13651 2712 2803 2908 0
13651 2712 2805 2906 0
13651 2712 2807 2904 0
13651 2712 2809 2902 0
13651 2712 2811 2900 0
13651 2712 2813 2898 0
13651 2712 2815 2896 0
13651 2712 2817 2894 0
13651 2712 2819 2892 0
13651 2712 2821 2890 0
13651 2712 2823 2888 0
13651 2712 2825 2886 0
13651 2712 2827 2884 0
13651 2712 2829 2882 0
13651 2712 2831 2880 0
13651 2712 2833 2878 0
13651 2712 2835 2876 0
13651 2712 2837 2874 0
13651 2712 2839 2872 0
13651 2712 2841 2870 0
13651 2712 2843 2868 0
13651 2712 2845 2866 0
13651 2712 2847 2864 0
13651 2714 2910 0
13651 2714 2802 2908 0
13651 2714 2803 2906 0
13651 2714 2805 2904 0
13651 2714 2807 2902 0
13651 2714 2809 2900 0
13651 2714 2811 2898 0
13651 2714 2813 2896 0
13651 2714 2815 2894 0
13651 2714 2817 2892 0
13651 2714 2819 2890 0
13651 2714 2821 2888 0
13651 2714 2823 2886 0
13651 2714 2825 2884 0
13651 2714 2827 2882 0
13651 2714 2829 2880 0
13651 2714 2831 2878 0
13651 2714 2833 2876 0
13651 2714 2835 2874 0
13651 2714 2837 2872 0
13651 2714 2839 2870 0
13651 2714 2841 2868 0
13651 2714 2843 2866 0
13651 2714 2845 2864 0
13651 2714 2847 2862 0
13651 2716 2908 0
13651 2716 2802 2906 0
13651 2716 2803 2904 0
13651 2716 2805 2902 0
13651 2716 2807 2900 0
13651 2716 2809 2898 0
13651 2716 2811 2896 0
13651 2716 2813 2894 0
13651 2716 2815 2892 0
13651 2716 2817 2890 0
13651 2716 2819 2888 0
13651 2716 2821 2886 0
13651 2716 2823 2884 0
13651 2716 2825 2882 0
13651 2716 2827 2880 0
13651 2716 2829 2878 0
13651 2716 2831 2876 0
13651 2716 2833 2874 0
13651 2716 2835 2872 0
13651 2716 2837 2870 0
13651 2716 2839 2868 0
13651 2716 2841 2866 0
13651 2716 2843 2864 0
13651 2716 2845 2862 0
13651 2716 2847 2860 0
13651 2718 2906 0
13651 2718 2802 2904 0
13651 2718 2803 2902 0
13651 2718 2805 2900 0
13651 2718 2807 2898 0
13651 2718 2809 2896 0
13651 2718 2811 2894 0
13651 2718 2813 2892 0
13651 2718 2815 2890 0
13651 2718 2817 2888 0
13651 2718 2819 2886 0
13651 2718 2821 2884 0
13651 2718 2823 2882 0
13651 2718 2825 2880 0
13651 2718 2827 2878 0
13651 2718 2829 2876 0
13651 2718 2831 2874 0
13651 2718 2833 2872 0
13651 2718 2835 2870 0
13651 2718 2837 2868 0
13651 2718 2839 2866 0
13651 2718 2841 2864 0
13651 2718 2843 2862 0
13651 2718 2845 2860 0
13651 2718 2847 2858 0
13651 2720 2904 0
13651 2720 2802 2902 0
13651 2720 2803 2900 0
13651 2720 2805 2898 0
13651 2720 2807 2896 0
13651 2720 2809 2894 0
13651 2720 2811 2892 0
13651 2720 2813 2890 0
13651 2720 2815 2888 0
13651 2720 2817 2886 0
13651 2720 2819 2884 0
13651 2720 2821 2882 0
13651 2720 2823 2880 0
13651 2720 2825 2878 0
13651 2720 2827 2876 0
13651 2720 2829 2874 0
13651 2720 2831 2872 0
13651 2720 2833 2870 0
13651 2720 2835 2868 0
13651 2720 2837 2866 0
13651 2720 2839 2864 0
13651 2720 2841 2862 0
13651 2720 2843 2860 0
13651 2720 2845 2858 0
13651 2720 2847 2856 0
13651 2722 2902 0
13651 2722 2802 2900 0
13651 2722 2803 2898 0
13651 2722 2805 2896 0
13651 2722 2807 2894 0
13651 2722 2809 2892 0
13651 2722 2811 2890 0
13651 2722 2813 2888 0
13651 2722 2815 2886 0
13651 2722 2817 2884 0
13651 2722 2819 2882 0
13651 2722 2821 2880 0
13651 2722 2823 2878 0
13651 2722 2825 2876 0
13651 2722 2827 2874 0
13651 2722 2829 2872 0
13651 2722 2831 2870 0
13651 2722 2833 2868 0
13651 2722 2835 2866 0
13651 2722 2837 2864 0
13651 2722 2839 2862 0
13651 2722 2841 2860 0
13651 2722 2843 2858 0
13651 2722 2845 2856 0
13651 2722 2847 2854 0
13651 2724 2900 0
13651 2724 2802 2898 0
13651 2724 2803 2896 0
13651 2724 2805 2894 0
13651 2724 2807 2892 0
13651 2724 2809 2890 0
13651 2724 2811 2888 0
13651 2724 2813 2886 0
13651 2724 2815 2884 0
13651 2724 2817 2882 0
13651 2724 2819 2880 0
13651 2724 2821 2878 0
13651 2724 2823 2876 0
13651 2724 2825 2874 0
13651 2724 2827 2872 0
13651 2724 2829 2870 0
13651 2724 2831 2868 0
13651 2724 2833 2866 0
13651 2724 2835 2864 0
13651 2724 2837 2862 0
13651 2724 2839 2860 0
13651 2724 2841 2858 0
13651 2724 2843 2856 0
13651 2724 2845 2854 0
13651 2724 2847 2852 0
13651 2726 2898 0
13651 2726 2802 2896 0
13651 2726 2803 2894 0
13651 2726 2805 2892 0
13651 2726 2807 2890 0
13651 2726 2809 2888 0
13651 2726 2811 2886 0
13651 2726 2813 2884 0
13651 2726 2815 2882 0
13651 2726 2817 2880 0
13651 2726 2819 2878 0
13651 2726 2821 2876 0
13651 2726 2823 2874 0
13651 2726 2825 2872 0
13651 2726 2827 2870 0
13651 2726 2829 2868 0
13651 2726 2831 2866 0
13651 2726 2833 2864 0
13651 2726 2835 2862 0
13651 2726 2837 2860 0
13651 2726 2839 2858 0
13651 2726 2841 2856 0
13651 2726 2843 2854 0
13651 2726 2845 2852 0
13651 2726 2847 2850 0
13651 2728 2896 0
13651 2728 2802 2894 0
13651 2728 2803 2892 0
13651 2728 2805 2890 0
13651 2728 2807 2888 0
13651 2728 2809 2886 0
13651 2728 2811 2884 0
13651 2728 2813 2882 0
13651 2728 2815 2880 0
13651 2728 2817 2878 0
13651 2728 2819 2876 0
13651 2728 2821 2874 0
13651 2728 2823 2872 0
13651 2728 2825 2870 0
13651 2728 2827 2868 0
13651 2728 2829 2866 0
13651 2728 2831 2864 0
13651 2728 2833 2862 0
13651 2728 2835 2860 0
13651 2728 2837 2858 0
13651 2728 2839 2856 0
13651 2728 2841 2854 0
13651 2728 2843 2852 0
13651 2728 2845 2850 0
13651 2728 2847 2849 0
13651 2730 2894 0
13651 2730 2802 2892 0
13651 2730 2803 2890 0
13651 2730 2805 2888 0
13651 2730 2807 2886 0
13651 2730 2809 2884 0
13651 2730 2811 2882 0
13651 2730 2813 2880 0
13651 2730 2815 2878 0
13651 2730 2817 2876 0
13651 2730 2819 2874 0
13651 2730 2821 2872 0
13651 2730 2823 2870 0
13651 2730 2825 2868 0
13651 2730 2827 2866 0
13651 2730 2829 2864 0
13651 2730 2831 2862 0
13651 2730 2833 2860 0
13651 2730 2835 2858 0
13651 2730 2837 2856 0
13651 2730 2839 2854 0
13651 2730 2841 2852 0
13651 2730 2843 2850 0
13651 2730 2845 2849 0
13651 2730 2847 0
13651 2732 2892 0
13651 2732 2802 2890 0
13651 2732 2803 2888 0
13651 2732 2805 2886 0
13651 2732 2807 2884 0
13651 2732 2809 2882 0
13651 2732 2811 2880 0
13651 2732 2813 2878 0
13651 2732 2815 2876 0
13651 2732 2817 2874 0
13651 2732 2819 2872 0
13651 2732 2821 2870 0
13651 2732 2823 2868 0
13651 2732 2825 2866 0
13651 2732 2827 2864 0
13651 2732 2829 2862 0
13651 2732 2831 2860 0
13651 2732 2833 2858 0
13651 2732 2835 2856 0
13651 2732 2837 2854 0
13651 2732 2839 2852 0
13651 2732 2841 2850 0
13651 2732 2843 2849 0
13651 2732 2845 0
13651 2732 2847 0
13651 2734 2890 0
13651 2734 2802 2888 0
13651 2734 2803 2886 0
13651 2734 2805 2884 0
13651 2734 2807 2882 0
13651 2734 2809 2880 0
13651 2734 2811 2878 0
13651 2734 2813 2876 0
13651 2734 2815 2874 0
13651 2734 2817 2872 0
13651 2734 2819 2870 0
13651 2734 2821 2868 0
13651 2734 2823 2866 0
13651 2734 2825 2864 0
13651 2734 2827 2862 0
13651 2734 2829 2860 0
13651 2734 2831 2858 0
13651 2734 2833 2856 0
13651 2734 2835 2854 0
13651 2734 2837 2852 0
13651 2734 2839 2850 0
13651 2734 2841 2849 0
13651 2734 2843 0
13651 2734 2845 0
13651 2734 2847 0
13651 2736 2888 0
13651 2736 2802 2886 0
13651 2736 2803 2884 0
13651 2736 2805 2882 0
13651 2736 2807 2880 0
13651 2736 2809 2878 0
13651 2736 2811 2876 0
13651 2736 2813 2874 0
13651 2736 2815 2872 0
13651 2736 2817 2870 0
13651 2736 2819 2868 0
13651 2736 2821 2866 0
13651 2736 2823 2864 0
13651 2736 2825 2862 0
13651 2736 2827 2860 0
13651 2736 2829 2858 0
13651 2736 2831 2856 0
13651 2736 2833 2854 0
13651 2736 2835 2852 0
13651 2736 2837 2850 0
13651 2736 2839 2849 0
13651 2736 2841 0
13651 2736 2843 0
13651 2736 2845 0
13651 2736 2847 0
13651 2738 2886 0
13651 2738 2802 2884 0
13651 2738 2803 2882 0
13651 2738 2805 2880 0
13651 2738 2807 2878 0
13651 2738 2809 2876 0
13651 2738 2811 2874 0
13651 2738 2813 2872 0
13651 2738 2815 2870 0
13651 2738 2817 2868 0
13651 2738 2819 2866 0
13651 2738 2821 2864 0
13651 2738 2823 2862 0
13651 2738 2825 2860 0
13651 2738 2827 2858 0
13651 2738 2829 2856 0
13651 2738 2831 2854 0
13651 2738 2833 2852 0
13651 2738 2835 2850 0
13651 2738 2837 2849 0
13651 2738 2839 0
13651 2738 2841 0
13651 2738 2843 0
13651 2738 2845 0
13651 2738 2847 0
c (((aux492 + aux495 + aux496)<=36)=tv=SATLiteral(13652))
-13652 3043 3144 0
-13652 3045 3142 0
-13652 3047 3140 0
-13652 3049 3138 0
-13652 3051 3136 0
-13652 3053 3134 0
-13652 3055 3132 0
-13652 3057 3130 0
-13652 3059 3128 0
-13652 3061 3126 0
-13652 3063 3124 0
-13652 3065 3122 0
-13652 3067 3120 0
-13652 3069 3118 0
-13652 3071 3116 0
-13652 3073 3114 0
-13652 3075 3112 0
-13652 3077 3110 0
-13652 3079 3108 0
-13652 3081 3106 0
-13652 2943 3041 3144 0
-13652 2943 3043 3142 0
-13652 2943 3045 3140 0
-13652 2943 3047 3138 0
-13652 2943 3049 3136 0
-13652 2943 3051 3134 0
-13652 2943 3053 3132 0
-13652 2943 3055 3130 0
-13652 2943 3057 3128 0
-13652 2943 3059 3126 0
-13652 2943 3061 3124 0
-13652 2943 3063 3122 0
-13652 2943 3065 3120 0
-13652 2943 3067 3118 0
-13652 2943 3069 3116 0
-13652 2943 3071 3114 0
-13652 2943 3073 3112 0
-13652 2943 3075 3110 0
-13652 2943 3077 3108 0
-13652 2943 3079 3106 0
-13652 2943 3081 3104 0
-13652 2944 3039 3144 0
-13652 2944 3041 3142 0
-13652 2944 3043 3140 0
-13652 2944 3045 3138 0
-13652 2944 3047 3136 0
-13652 2944 3049 3134 0
-13652 2944 3051 3132 0
-13652 2944 3053 3130 0
-13652 2944 3055 3128 0
-13652 2944 3057 3126 0
-13652 2944 3059 3124 0
-13652 2944 3061 3122 0
-13652 2944 3063 3120 0
-13652 2944 3065 3118 0
-13652 2944 3067 3116 0
-13652 2944 3069 3114 0
-13652 2944 3071 3112 0
-13652 2944 3073 3110 0
-13652 2944 3075 3108 0
-13652 2944 3077 3106 0
-13652 2944 3079 3104 0
-13652 2944 3081 3102 0
-13652 2946 3037 3144 0
-13652 2946 3039 3142 0
-13652 2946 3041 3140 0
-13652 2946 3043 3138 0
-13652 2946 3045 3136 0
-13652 2946 3047 3134 0
-13652 2946 3049 3132 0
-13652 2946 3051 3130 0
-13652 2946 3053 3128 0
-13652 2946 3055 3126 0
-13652 2946 3057 3124 0
-13652 2946 3059 3122 0
-13652 2946 3061 3120 0
-13652 2946 3063 3118 0
-13652 2946 3065 3116 0
-13652 2946 3067 3114 0
-13652 2946 3069 3112 0
-13652 2946 3071 3110 0
-13652 2946 3073 3108 0
-13652 2946 3075 3106 0
-13652 2946 3077 3104 0
-13652 2946 3079 3102 0
-13652 2946 3081 3100 0
-13652 2948 3036 3144 0
-13652 2948 3037 3142 0
-13652 2948 3039 3140 0
-13652 2948 3041 3138 0
-13652 2948 3043 3136 0
-13652 2948 3045 3134 0
-13652 2948 3047 3132 0
-13652 2948 3049 3130 0
-13652 2948 3051 3128 0
-13652 2948 3053 3126 0
-13652 2948 3055 3124 0
-13652 2948 3057 3122 0
-13652 2948 3059 3120 0
-13652 2948 3061 3118 0
-13652 2948 3063 3116 0
-13652 2948 3065 3114 0
-13652 2948 3067 3112 0
-13652 2948 3069 3110 0
-13652 2948 3071 3108 0
-13652 2948 3073 3106 0
-13652 2948 3075 3104 0
-13652 2948 3077 3102 0
-13652 2948 3079 3100 0
-13652 2948 3081 3098 0
-13652 2950 3144 0
-13652 2950 3036 3142 0
-13652 2950 3037 3140 0
-13652 2950 3039 3138 0
-13652 2950 3041 3136 0
-13652 2950 3043 3134 0
-13652 2950 3045 3132 0
-13652 2950 3047 3130 0
-13652 2950 3049 3128 0
-13652 2950 3051 3126 0
-13652 2950 3053 3124 0
-13652 2950 3055 3122 0
-13652 2950 3057 3120 0
-13652 2950 3059 3118 0
-13652 2950 3061 3116 0
-13652 2950 3063 3114 0
-13652 2950 3065 3112 0
-13652 2950 3067 3110 0
-13652 2950 3069 3108 0
-13652 2950 3071 3106 0
-13652 2950 3073 3104 0
-13652 2950 3075 3102 0
-13652 2950 3077 3100 0
-13652 2950 3079 3098 0
-13652 2950 3081 3096 0
-13652 2952 3142 0
-13652 2952 3036 3140 0
-13652 2952 3037 3138 0
-13652 2952 3039 3136 0
-13652 2952 3041 3134 0
-13652 2952 3043 3132 0
-13652 2952 3045 3130 0
-13652 2952 3047 3128 0
-13652 2952 3049 3126 0
-13652 2952 3051 3124 0
-13652 2952 3053 3122 0
-13652 2952 3055 3120 0
-13652 2952 3057 3118 0
-13652 2952 3059 3116 0
-13652 2952 3061 3114 0
-13652 2952 3063 3112 0
-13652 2952 3065 3110 0
-13652 2952 3067 3108 0
-13652 2952 3069 3106 0
-13652 2952 3071 3104 0
-13652 2952 3073 3102 0
-13652 2952 3075 3100 0
-13652 2952 3077 3098 0
-13652 2952 3079 3096 0
-13652 2952 3081 3094 0
-13652 2954 3140 0
-13652 2954 3036 3138 0
-13652 2954 3037 3136 0
-13652 2954 3039 3134 0
-13652 2954 3041 3132 0
-13652 2954 3043 3130 0
-13652 2954 3045 3128 0
-13652 2954 3047 3126 0
-13652 2954 3049 3124 0
-13652 2954 3051 3122 0
-13652 2954 3053 3120 0
-13652 2954 3055 3118 0
-13652 2954 3057 3116 0
-13652 2954 3059 3114 0
-13652 2954 3061 3112 0
-13652 2954 3063 3110 0
-13652 2954 3065 3108 0
-13652 2954 3067 3106 0
-13652 2954 3069 3104 0
-13652 2954 3071 3102 0
-13652 2954 3073 3100 0
-13652 2954 3075 3098 0
-13652 2954 3077 3096 0
-13652 2954 3079 3094 0
-13652 2954 3081 3092 0
-13652 2956 3138 0
-13652 2956 3036 3136 0
-13652 2956 3037 3134 0
-13652 2956 3039 3132 0
-13652 2956 3041 3130 0
-13652 2956 3043 3128 0
-13652 2956 3045 3126 0
-13652 2956 3047 3124 0
-13652 2956 3049 3122 0
-13652 2956 3051 3120 0
-13652 2956 3053 3118 0
-13652 2956 3055 3116 0
-13652 2956 3057 3114 0
-13652 2956 3059 3112 0
-13652 2956 3061 3110 0
-13652 2956 3063 3108 0
-13652 2956 3065 3106 0
-13652 2956 3067 3104 0
-13652 2956 3069 3102 0
-13652 2956 3071 3100 0
-13652 2956 3073 3098 0
-13652 2956 3075 3096 0
-13652 2956 3077 3094 0
-13652 2956 3079 3092 0
-13652 2956 3081 3090 0
-13652 2958 3136 0
-13652 2958 3036 3134 0
-13652 2958 3037 3132 0
-13652 2958 3039 3130 0
-13652 2958 3041 3128 0
-13652 2958 3043 3126 0
-13652 2958 3045 3124 0
-13652 2958 3047 3122 0
-13652 2958 3049 3120 0
-13652 2958 3051 3118 0
-13652 2958 3053 3116 0
-13652 2958 3055 3114 0
-13652 2958 3057 3112 0
-13652 2958 3059 3110 0
-13652 2958 3061 3108 0
-13652 2958 3063 3106 0
-13652 2958 3065 3104 0
-13652 2958 3067 3102 0
-13652 2958 3069 3100 0
-13652 2958 3071 3098 0
-13652 2958 3073 3096 0
-13652 2958 3075 3094 0
-13652 2958 3077 3092 0
-13652 2958 3079 3090 0
-13652 2958 3081 3088 0
-13652 2960 3134 0
-13652 2960 3036 3132 0
-13652 2960 3037 3130 0
-13652 2960 3039 3128 0
-13652 2960 3041 3126 0
-13652 2960 3043 3124 0
-13652 2960 3045 3122 0
-13652 2960 3047 3120 0
-13652 2960 3049 3118 0
-13652 2960 3051 3116 0
-13652 2960 3053 3114 0
-13652 2960 3055 3112 0
-13652 2960 3057 3110 0
-13652 2960 3059 3108 0
-13652 2960 3061 3106 0
-13652 2960 3063 3104 0
-13652 2960 3065 3102 0
-13652 2960 3067 3100 0
-13652 2960 3069 3098 0
-13652 2960 3071 3096 0
-13652 2960 3073 3094 0
-13652 2960 3075 3092 0
-13652 2960 3077 3090 0
-13652 2960 3079 3088 0
-13652 2960 3081 3086 0
-13652 2962 3132 0
-13652 2962 3036 3130 0
-13652 2962 3037 3128 0
-13652 2962 3039 3126 0
-13652 2962 3041 3124 0
-13652 2962 3043 3122 0
-13652 2962 3045 3120 0
-13652 2962 3047 3118 0
-13652 2962 3049 3116 0
-13652 2962 3051 3114 0
-13652 2962 3053 3112 0
-13652 2962 3055 3110 0
-13652 2962 3057 3108 0
-13652 2962 3059 3106 0
-13652 2962 3061 3104 0
-13652 2962 3063 3102 0
-13652 2962 3065 3100 0
-13652 2962 3067 3098 0
-13652 2962 3069 3096 0
-13652 2962 3071 3094 0
-13652 2962 3073 3092 0
-13652 2962 3075 3090 0
-13652 2962 3077 3088 0
-13652 2962 3079 3086 0
-13652 2962 3081 3084 0
-13652 2964 3130 0
-13652 2964 3036 3128 0
-13652 2964 3037 3126 0
-13652 2964 3039 3124 0
-13652 2964 3041 3122 0
-13652 2964 3043 3120 0
-13652 2964 3045 3118 0
-13652 2964 3047 3116 0
-13652 2964 3049 3114 0
-13652 2964 3051 3112 0
-13652 2964 3053 3110 0
-13652 2964 3055 3108 0
-13652 2964 3057 3106 0
-13652 2964 3059 3104 0
-13652 2964 3061 3102 0
-13652 2964 3063 3100 0
-13652 2964 3065 3098 0
-13652 2964 3067 3096 0
-13652 2964 3069 3094 0
-13652 2964 3071 3092 0
-13652 2964 3073 3090 0
-13652 2964 3075 3088 0
-13652 2964 3077 3086 0
-13652 2964 3079 3084 0
-13652 2964 3081 3083 0
-13652 2966 3128 0
-13652 2966 3036 3126 0
-13652 2966 3037 3124 0
-13652 2966 3039 3122 0
-13652 2966 3041 3120 0
-13652 2966 3043 3118 0
-13652 2966 3045 3116 0
-13652 2966 3047 3114 0
-13652 2966 3049 3112 0
-13652 2966 3051 3110 0
-13652 2966 3053 3108 0
-13652 2966 3055 3106 0
-13652 2966 3057 3104 0
-13652 2966 3059 3102 0
-13652 2966 3061 3100 0
-13652 2966 3063 3098 0
-13652 2966 3065 3096 0
-13652 2966 3067 3094 0
-13652 2966 3069 3092 0
-13652 2966 3071 3090 0
-13652 2966 3073 3088 0
-13652 2966 3075 3086 0
-13652 2966 3077 3084 0
-13652 2966 3079 3083 0
-13652 2966 3081 0
-13652 2968 3126 0
-13652 2968 3036 3124 0
-13652 2968 3037 3122 0
-13652 2968 3039 3120 0
-13652 2968 3041 3118 0
-13652 2968 3043 3116 0
-13652 2968 3045 3114 0
-13652 2968 3047 3112 0
-13652 2968 3049 3110 0
-13652 2968 3051 3108 0
-13652 2968 3053 3106 0
-13652 2968 3055 3104 0
-13652 2968 3057 3102 0
-13652 2968 3059 3100 0
-13652 2968 3061 3098 0
-13652 2968 3063 3096 0
-13652 2968 3065 3094 0
-13652 2968 3067 3092 0
-13652 2968 3069 3090 0
-13652 2968 3071 3088 0
-13652 2968 3073 3086 0
-13652 2968 3075 3084 0
-13652 2968 3077 3083 0
-13652 2968 3079 0
-13652 2968 3081 0
-13652 2970 3124 0
-13652 2970 3036 3122 0
-13652 2970 3037 3120 0
-13652 2970 3039 3118 0
-13652 2970 3041 3116 0
-13652 2970 3043 3114 0
-13652 2970 3045 3112 0
-13652 2970 3047 3110 0
-13652 2970 3049 3108 0
-13652 2970 3051 3106 0
-13652 2970 3053 3104 0
-13652 2970 3055 3102 0
-13652 2970 3057 3100 0
-13652 2970 3059 3098 0
-13652 2970 3061 3096 0
-13652 2970 3063 3094 0
-13652 2970 3065 3092 0
-13652 2970 3067 3090 0
-13652 2970 3069 3088 0
-13652 2970 3071 3086 0
-13652 2970 3073 3084 0
-13652 2970 3075 3083 0
-13652 2970 3077 0
-13652 2970 3079 0
-13652 2970 3081 0
-13652 2972 3122 0
-13652 2972 3036 3120 0
-13652 2972 3037 3118 0
-13652 2972 3039 3116 0
-13652 2972 3041 3114 0
-13652 2972 3043 3112 0
-13652 2972 3045 3110 0
-13652 2972 3047 3108 0
-13652 2972 3049 3106 0
-13652 2972 3051 3104 0
-13652 2972 3053 3102 0
-13652 2972 3055 3100 0
-13652 2972 3057 3098 0
-13652 2972 3059 3096 0
-13652 2972 3061 3094 0
-13652 2972 3063 3092 0
-13652 2972 3065 3090 0
-13652 2972 3067 3088 0
-13652 2972 3069 3086 0
-13652 2972 3071 3084 0
-13652 2972 3073 3083 0
-13652 2972 3075 0
-13652 2972 3077 0
-13652 2972 3079 0
-13652 2972 3081 0
13652 -3075 -3083 0
13652 -3073 -3084 0
13652 -3071 -3086 0
13652 -3069 -3088 0
13652 -3067 -3090 0
13652 -3065 -3092 0
13652 -3063 -3094 0
13652 -3061 -3096 0
13652 -3059 -3098 0
13652 -3057 -3100 0
13652 -3055 -3102 0
13652 -3053 -3104 0
13652 -3051 -3106 0
13652 -3049 -3108 0
13652 -3047 -3110 0
13652 -3045 -3112 0
13652 -3043 -3114 0
13652 -3041 -3116 0
13652 -3039 -3118 0
13652 -3037 -3120 0
13652 -3036 -3122 0
13652 -2972 -3077 -3083 0
13652 -2972 -3075 -3084 0
13652 -2972 -3073 -3086 0
13652 -2972 -3071 -3088 0
13652 -2972 -3069 -3090 0
13652 -2972 -3067 -3092 0
13652 -2972 -3065 -3094 0
13652 -2972 -3063 -3096 0
13652 -2972 -3061 -3098 0
13652 -2972 -3059 -3100 0
13652 -2972 -3057 -3102 0
13652 -2972 -3055 -3104 0
13652 -2972 -3053 -3106 0
13652 -2972 -3051 -3108 0
13652 -2972 -3049 -3110 0
13652 -2972 -3047 -3112 0
13652 -2972 -3045 -3114 0
13652 -2972 -3043 -3116 0
13652 -2972 -3041 -3118 0
13652 -2972 -3039 -3120 0
13652 -2972 -3037 -3122 0
13652 -2972 -3036 -3124 0
13652 -2970 -3079 -3083 0
13652 -2970 -3077 -3084 0
13652 -2970 -3075 -3086 0
13652 -2970 -3073 -3088 0
13652 -2970 -3071 -3090 0
13652 -2970 -3069 -3092 0
13652 -2970 -3067 -3094 0
13652 -2970 -3065 -3096 0
13652 -2970 -3063 -3098 0
13652 -2970 -3061 -3100 0
13652 -2970 -3059 -3102 0
13652 -2970 -3057 -3104 0
13652 -2970 -3055 -3106 0
13652 -2970 -3053 -3108 0
13652 -2970 -3051 -3110 0
13652 -2970 -3049 -3112 0
13652 -2970 -3047 -3114 0
13652 -2970 -3045 -3116 0
13652 -2970 -3043 -3118 0
13652 -2970 -3041 -3120 0
13652 -2970 -3039 -3122 0
13652 -2970 -3037 -3124 0
13652 -2970 -3036 -3126 0
13652 -2968 -3081 -3083 0
13652 -2968 -3079 -3084 0
13652 -2968 -3077 -3086 0
13652 -2968 -3075 -3088 0
13652 -2968 -3073 -3090 0
13652 -2968 -3071 -3092 0
13652 -2968 -3069 -3094 0
13652 -2968 -3067 -3096 0
13652 -2968 -3065 -3098 0
13652 -2968 -3063 -3100 0
13652 -2968 -3061 -3102 0
13652 -2968 -3059 -3104 0
13652 -2968 -3057 -3106 0
13652 -2968 -3055 -3108 0
13652 -2968 -3053 -3110 0
13652 -2968 -3051 -3112 0
13652 -2968 -3049 -3114 0
13652 -2968 -3047 -3116 0
13652 -2968 -3045 -3118 0
13652 -2968 -3043 -3120 0
13652 -2968 -3041 -3122 0
13652 -2968 -3039 -3124 0
13652 -2968 -3037 -3126 0
13652 -2968 -3036 -3128 0
13652 -2966 -3083 0
13652 -2966 -3081 -3084 0
13652 -2966 -3079 -3086 0
13652 -2966 -3077 -3088 0
13652 -2966 -3075 -3090 0
13652 -2966 -3073 -3092 0
13652 -2966 -3071 -3094 0
13652 -2966 -3069 -3096 0
13652 -2966 -3067 -3098 0
13652 -2966 -3065 -3100 0
13652 -2966 -3063 -3102 0
13652 -2966 -3061 -3104 0
13652 -2966 -3059 -3106 0
13652 -2966 -3057 -3108 0
13652 -2966 -3055 -3110 0
13652 -2966 -3053 -3112 0
13652 -2966 -3051 -3114 0
13652 -2966 -3049 -3116 0
13652 -2966 -3047 -3118 0
13652 -2966 -3045 -3120 0
13652 -2966 -3043 -3122 0
13652 -2966 -3041 -3124 0
13652 -2966 -3039 -3126 0
13652 -2966 -3037 -3128 0
13652 -2966 -3036 -3130 0
13652 -2964 -3084 0
13652 -2964 -3081 -3086 0
13652 -2964 -3079 -3088 0
13652 -2964 -3077 -3090 0
13652 -2964 -3075 -3092 0
13652 -2964 -3073 -3094 0
13652 -2964 -3071 -3096 0
13652 -2964 -3069 -3098 0
13652 -2964 -3067 -3100 0
13652 -2964 -3065 -3102 0
13652 -2964 -3063 -3104 0
13652 -2964 -3061 -3106 0
13652 -2964 -3059 -3108 0
13652 -2964 -3057 -3110 0
13652 -2964 -3055 -3112 0
13652 -2964 -3053 -3114 0
13652 -2964 -3051 -3116 0
13652 -2964 -3049 -3118 0
13652 -2964 -3047 -3120 0
13652 -2964 -3045 -3122 0
13652 -2964 -3043 -3124 0
13652 -2964 -3041 -3126 0
13652 -2964 -3039 -3128 0
13652 -2964 -3037 -3130 0
13652 -2964 -3036 -3132 0
13652 -2962 -3086 0
13652 -2962 -3081 -3088 0
13652 -2962 -3079 -3090 0
13652 -2962 -3077 -3092 0
13652 -2962 -3075 -3094 0
13652 -2962 -3073 -3096 0
13652 -2962 -3071 -3098 0
13652 -2962 -3069 -3100 0
13652 -2962 -3067 -3102 0
13652 -2962 -3065 -3104 0
13652 -2962 -3063 -3106 0
13652 -2962 -3061 -3108 0
13652 -2962 -3059 -3110 0
13652 -2962 -3057 -3112 0
13652 -2962 -3055 -3114 0
13652 -2962 -3053 -3116 0
13652 -2962 -3051 -3118 0
13652 -2962 -3049 -3120 0
13652 -2962 -3047 -3122 0
13652 -2962 -3045 -3124 0
13652 -2962 -3043 -3126 0
13652 -2962 -3041 -3128 0
13652 -2962 -3039 -3130 0
13652 -2962 -3037 -3132 0
13652 -2962 -3036 -3134 0
13652 -2960 -3088 0
13652 -2960 -3081 -3090 0
13652 -2960 -3079 -3092 0
13652 -2960 -3077 -3094 0
13652 -2960 -3075 -3096 0
13652 -2960 -3073 -3098 0
13652 -2960 -3071 -3100 0
13652 -2960 -3069 -3102 0
13652 -2960 -3067 -3104 0
13652 -2960 -3065 -3106 0
13652 -2960 -3063 -3108 0
13652 -2960 -3061 -3110 0
13652 -2960 -3059 -3112 0
13652 -2960 -3057 -3114 0
13652 -2960 -3055 -3116 0
13652 -2960 -3053 -3118 0
13652 -2960 -3051 -3120 0
13652 -2960 -3049 -3122 0
13652 -2960 -3047 -3124 0
13652 -2960 -3045 -3126 0
13652 -2960 -3043 -3128 0
13652 -2960 -3041 -3130 0
13652 -2960 -3039 -3132 0
13652 -2960 -3037 -3134 0
13652 -2960 -3036 -3136 0
13652 -2958 -3090 0
13652 -2958 -3081 -3092 0
13652 -2958 -3079 -3094 0
13652 -2958 -3077 -3096 0
13652 -2958 -3075 -3098 0
13652 -2958 -3073 -3100 0
13652 -2958 -3071 -3102 0
13652 -2958 -3069 -3104 0
13652 -2958 -3067 -3106 0
13652 -2958 -3065 -3108 0
13652 -2958 -3063 -3110 0
13652 -2958 -3061 -3112 0
13652 -2958 -3059 -3114 0
13652 -2958 -3057 -3116 0
13652 -2958 -3055 -3118 0
13652 -2958 -3053 -3120 0
13652 -2958 -3051 -3122 0
13652 -2958 -3049 -3124 0
13652 -2958 -3047 -3126 0
13652 -2958 -3045 -3128 0
13652 -2958 -3043 -3130 0
13652 -2958 -3041 -3132 0
13652 -2958 -3039 -3134 0
13652 -2958 -3037 -3136 0
13652 -2958 -3036 -3138 0
13652 -2956 -3092 0
13652 -2956 -3081 -3094 0
13652 -2956 -3079 -3096 0
13652 -2956 -3077 -3098 0
13652 -2956 -3075 -3100 0
13652 -2956 -3073 -3102 0
13652 -2956 -3071 -3104 0
13652 -2956 -3069 -3106 0
13652 -2956 -3067 -3108 0
13652 -2956 -3065 -3110 0
13652 -2956 -3063 -3112 0
13652 -2956 -3061 -3114 0
13652 -2956 -3059 -3116 0
13652 -2956 -3057 -3118 0
13652 -2956 -3055 -3120 0
13652 -2956 -3053 -3122 0
13652 -2956 -3051 -3124 0
13652 -2956 -3049 -3126 0
13652 -2956 -3047 -3128 0
13652 -2956 -3045 -3130 0
13652 -2956 -3043 -3132 0
13652 -2956 -3041 -3134 0
13652 -2956 -3039 -3136 0
13652 -2956 -3037 -3138 0
13652 -2956 -3036 -3140 0
13652 -2954 -3094 0
13652 -2954 -3081 -3096 0
13652 -2954 -3079 -3098 0
13652 -2954 -3077 -3100 0
13652 -2954 -3075 -3102 0
13652 -2954 -3073 -3104 0
13652 -2954 -3071 -3106 0
13652 -2954 -3069 -3108 0
13652 -2954 -3067 -3110 0
13652 -2954 -3065 -3112 0
13652 -2954 -3063 -3114 0
13652 -2954 -3061 -3116 0
13652 -2954 -3059 -3118 0
13652 -2954 -3057 -3120 0
13652 -2954 -3055 -3122 0
13652 -2954 -3053 -3124 0
13652 -2954 -3051 -3126 0
13652 -2954 -3049 -3128 0
13652 -2954 -3047 -3130 0
13652 -2954 -3045 -3132 0
13652 -2954 -3043 -3134 0
13652 -2954 -3041 -3136 0
13652 -2954 -3039 -3138 0
13652 -2954 -3037 -3140 0
13652 -2954 -3036 -3142 0
13652 -2952 -3096 0
13652 -2952 -3081 -3098 0
13652 -2952 -3079 -3100 0
13652 -2952 -3077 -3102 0
13652 -2952 -3075 -3104 0
13652 -2952 -3073 -3106 0
13652 -2952 -3071 -3108 0
13652 -2952 -3069 -3110 0
13652 -2952 -3067 -3112 0
13652 -2952 -3065 -3114 0
13652 -2952 -3063 -3116 0
13652 -2952 -3061 -3118 0
13652 -2952 -3059 -3120 0
13652 -2952 -3057 -3122 0
13652 -2952 -3055 -3124 0
13652 -2952 -3053 -3126 0
13652 -2952 -3051 -3128 0
13652 -2952 -3049 -3130 0
13652 -2952 -3047 -3132 0
13652 -2952 -3045 -3134 0
13652 -2952 -3043 -3136 0
13652 -2952 -3041 -3138 0
13652 -2952 -3039 -3140 0
13652 -2952 -3037 -3142 0
13652 -2952 -3036 -3144 0
13652 -2950 -3098 0
13652 -2950 -3081 -3100 0
13652 -2950 -3079 -3102 0
13652 -2950 -3077 -3104 0
13652 -2950 -3075 -3106 0
13652 -2950 -3073 -3108 0
13652 -2950 -3071 -3110 0
13652 -2950 -3069 -3112 0
13652 -2950 -3067 -3114 0
13652 -2950 -3065 -3116 0
13652 -2950 -3063 -3118 0
13652 -2950 -3061 -3120 0
13652 -2950 -3059 -3122 0
13652 -2950 -3057 -3124 0
13652 -2950 -3055 -3126 0
13652 -2950 -3053 -3128 0
13652 -2950 -3051 -3130 0
13652 -2950 -3049 -3132 0
13652 -2950 -3047 -3134 0
13652 -2950 -3045 -3136 0
13652 -2950 -3043 -3138 0
13652 -2950 -3041 -3140 0
13652 -2950 -3039 -3142 0
13652 -2950 -3037 -3144 0
13652 -2950 -3036 0
13652 -2948 -3100 0
13652 -2948 -3081 -3102 0
13652 -2948 -3079 -3104 0
13652 -2948 -3077 -3106 0
13652 -2948 -3075 -3108 0
13652 -2948 -3073 -3110 0
13652 -2948 -3071 -3112 0
13652 -2948 -3069 -3114 0
13652 -2948 -3067 -3116 0
13652 -2948 -3065 -3118 0
13652 -2948 -3063 -3120 0
13652 -2948 -3061 -3122 0
13652 -2948 -3059 -3124 0
13652 -2948 -3057 -3126 0
13652 -2948 -3055 -3128 0
13652 -2948 -3053 -3130 0
13652 -2948 -3051 -3132 0
13652 -2948 -3049 -3134 0
13652 -2948 -3047 -3136 0
13652 -2948 -3045 -3138 0
13652 -2948 -3043 -3140 0
13652 -2948 -3041 -3142 0
13652 -2948 -3039 -3144 0
13652 -2948 -3037 0
13652 -2948 -3036 0
13652 -2946 -3102 0
13652 -2946 -3081 -3104 0
13652 -2946 -3079 -3106 0
13652 -2946 -3077 -3108 0
13652 -2946 -3075 -3110 0
13652 -2946 -3073 -3112 0
13652 -2946 -3071 -3114 0
13652 -2946 -3069 -3116 0
13652 -2946 -3067 -3118 0
13652 -2946 -3065 -3120 0
13652 -2946 -3063 -3122 0
13652 -2946 -3061 -3124 0
13652 -2946 -3059 -3126 0
13652 -2946 -3057 -3128 0
13652 -2946 -3055 -3130 0
13652 -2946 -3053 -3132 0
13652 -2946 -3051 -3134 0
13652 -2946 -3049 -3136 0
13652 -2946 -3047 -3138 0
13652 -2946 -3045 -3140 0
13652 -2946 -3043 -3142 0
13652 -2946 -3041 -3144 0
13652 -2946 -3039 0
13652 -2946 -3037 0
13652 -2946 -3036 0
13652 -2944 -3104 0
13652 -2944 -3081 -3106 0
13652 -2944 -3079 -3108 0
13652 -2944 -3077 -3110 0
13652 -2944 -3075 -3112 0
13652 -2944 -3073 -3114 0
13652 -2944 -3071 -3116 0
13652 -2944 -3069 -3118 0
13652 -2944 -3067 -3120 0
13652 -2944 -3065 -3122 0
13652 -2944 -3063 -3124 0
13652 -2944 -3061 -3126 0
13652 -2944 -3059 -3128 0
13652 -2944 -3057 -3130 0
13652 -2944 -3055 -3132 0
13652 -2944 -3053 -3134 0
13652 -2944 -3051 -3136 0
13652 -2944 -3049 -3138 0
13652 -2944 -3047 -3140 0
13652 -2944 -3045 -3142 0
13652 -2944 -3043 -3144 0
13652 -2944 -3041 0
13652 -2944 -3039 0
13652 -2944 -3037 0
13652 -2944 -3036 0
13652 -2943 -3106 0
13652 -2943 -3081 -3108 0
13652 -2943 -3079 -3110 0
13652 -2943 -3077 -3112 0
13652 -2943 -3075 -3114 0
13652 -2943 -3073 -3116 0
13652 -2943 -3071 -3118 0
13652 -2943 -3069 -3120 0
13652 -2943 -3067 -3122 0
13652 -2943 -3065 -3124 0
13652 -2943 -3063 -3126 0
13652 -2943 -3061 -3128 0
13652 -2943 -3059 -3130 0
13652 -2943 -3057 -3132 0
13652 -2943 -3055 -3134 0
13652 -2943 -3053 -3136 0
13652 -2943 -3051 -3138 0
13652 -2943 -3049 -3140 0
13652 -2943 -3047 -3142 0
13652 -2943 -3045 -3144 0
13652 -2943 -3043 0
13652 -2943 -3041 0
13652 -2943 -3039 0
13652 -2943 -3037 0
13652 -2943 -3036 0
c ((36<=(aux492 + aux495 + aux496))=tv=SATLiteral(13653))
-13653 -3073 -3083 0
-13653 -3071 -3084 0
-13653 -3069 -3086 0
-13653 -3067 -3088 0
-13653 -3065 -3090 0
-13653 -3063 -3092 0
-13653 -3061 -3094 0
-13653 -3059 -3096 0
-13653 -3057 -3098 0
-13653 -3055 -3100 0
-13653 -3053 -3102 0
-13653 -3051 -3104 0
-13653 -3049 -3106 0
-13653 -3047 -3108 0
-13653 -3045 -3110 0
-13653 -3043 -3112 0
-13653 -3041 -3114 0
-13653 -3039 -3116 0
-13653 -3037 -3118 0
-13653 -3036 -3120 0
-13653 -2972 -3075 -3083 0
-13653 -2972 -3073 -3084 0
-13653 -2972 -3071 -3086 0
-13653 -2972 -3069 -3088 0
-13653 -2972 -3067 -3090 0
-13653 -2972 -3065 -3092 0
-13653 -2972 -3063 -3094 0
-13653 -2972 -3061 -3096 0
-13653 -2972 -3059 -3098 0
-13653 -2972 -3057 -3100 0
-13653 -2972 -3055 -3102 0
-13653 -2972 -3053 -3104 0
-13653 -2972 -3051 -3106 0
-13653 -2972 -3049 -3108 0
-13653 -2972 -3047 -3110 0
-13653 -2972 -3045 -3112 0
-13653 -2972 -3043 -3114 0
-13653 -2972 -3041 -3116 0
-13653 -2972 -3039 -3118 0
-13653 -2972 -3037 -3120 0
-13653 -2972 -3036 -3122 0
-13653 -2970 -3077 -3083 0
-13653 -2970 -3075 -3084 0
-13653 -2970 -3073 -3086 0
-13653 -2970 -3071 -3088 0
-13653 -2970 -3069 -3090 0
-13653 -2970 -3067 -3092 0
-13653 -2970 -3065 -3094 0
-13653 -2970 -3063 -3096 0
-13653 -2970 -3061 -3098 0
-13653 -2970 -3059 -3100 0
-13653 -2970 -3057 -3102 0
-13653 -2970 -3055 -3104 0
-13653 -2970 -3053 -3106 0
-13653 -2970 -3051 -3108 0
-13653 -2970 -3049 -3110 0
-13653 -2970 -3047 -3112 0
-13653 -2970 -3045 -3114 0
-13653 -2970 -3043 -3116 0
-13653 -2970 -3041 -3118 0
-13653 -2970 -3039 -3120 0
-13653 -2970 -3037 -3122 0
-13653 -2970 -3036 -3124 0
-13653 -2968 -3079 -3083 0
-13653 -2968 -3077 -3084 0
-13653 -2968 -3075 -3086 0
-13653 -2968 -3073 -3088 0
-13653 -2968 -3071 -3090 0
-13653 -2968 -3069 -3092 0
-13653 -2968 -3067 -3094 0
-13653 -2968 -3065 -3096 0
-13653 -2968 -3063 -3098 0
-13653 -2968 -3061 -3100 0
-13653 -2968 -3059 -3102 0
-13653 -2968 -3057 -3104 0
-13653 -2968 -3055 -3106 0
-13653 -2968 -3053 -3108 0
-13653 -2968 -3051 -3110 0
-13653 -2968 -3049 -3112 0
-13653 -2968 -3047 -3114 0
-13653 -2968 -3045 -3116 0
-13653 -2968 -3043 -3118 0
-13653 -2968 -3041 -3120 0
-13653 -2968 -3039 -3122 0
-13653 -2968 -3037 -3124 0
-13653 -2968 -3036 -3126 0
-13653 -2966 -3081 -3083 0
-13653 -2966 -3079 -3084 0
-13653 -2966 -3077 -3086 0
-13653 -2966 -3075 -3088 0
-13653 -2966 -3073 -3090 0
-13653 -2966 -3071 -3092 0
-13653 -2966 -3069 -3094 0
-13653 -2966 -3067 -3096 0
-13653 -2966 -3065 -3098 0
-13653 -2966 -3063 -3100 0
-13653 -2966 -3061 -3102 0
-13653 -2966 -3059 -3104 0
-13653 -2966 -3057 -3106 0
-13653 -2966 -3055 -3108 0
-13653 -2966 -3053 -3110 0
-13653 -2966 -3051 -3112 0
-13653 -2966 -3049 -3114 0
-13653 -2966 -3047 -3116 0
-13653 -2966 -3045 -3118 0
-13653 -2966 -3043 -3120 0
-13653 -2966 -3041 -3122 0
-13653 -2966 -3039 -3124 0
-13653 -2966 -3037 -3126 0
-13653 -2966 -3036 -3128 0
-13653 -2964 -3083 0
-13653 -2964 -3081 -3084 0
-13653 -2964 -3079 -3086 0
-13653 -2964 -3077 -3088 0
-13653 -2964 -3075 -3090 0
-13653 -2964 -3073 -3092 0
-13653 -2964 -3071 -3094 0
-13653 -2964 -3069 -3096 0
-13653 -2964 -3067 -3098 0
-13653 -2964 -3065 -3100 0
-13653 -2964 -3063 -3102 0
-13653 -2964 -3061 -3104 0
-13653 -2964 -3059 -3106 0
-13653 -2964 -3057 -3108 0
-13653 -2964 -3055 -3110 0
-13653 -2964 -3053 -3112 0
-13653 -2964 -3051 -3114 0
-13653 -2964 -3049 -3116 0
-13653 -2964 -3047 -3118 0
-13653 -2964 -3045 -3120 0
-13653 -2964 -3043 -3122 0
-13653 -2964 -3041 -3124 0
-13653 -2964 -3039 -3126 0
-13653 -2964 -3037 -3128 0
-13653 -2964 -3036 -3130 0
-13653 -2962 -3084 0
-13653 -2962 -3081 -3086 0
-13653 -2962 -3079 -3088 0
-13653 -2962 -3077 -3090 0
-13653 -2962 -3075 -3092 0
-13653 -2962 -3073 -3094 0
-13653 -2962 -3071 -3096 0
-13653 -2962 -3069 -3098 0
-13653 -2962 -3067 -3100 0
-13653 -2962 -3065 -3102 0
-13653 -2962 -3063 -3104 0
-13653 -2962 -3061 -3106 0
-13653 -2962 -3059 -3108 0
-13653 -2962 -3057 -3110 0
-13653 -2962 -3055 -3112 0
-13653 -2962 -3053 -3114 0
-13653 -2962 -3051 -3116 0
-13653 -2962 -3049 -3118 0
-13653 -2962 -3047 -3120 0
-13653 -2962 -3045 -3122 0
-13653 -2962 -3043 -3124 0
-13653 -2962 -3041 -3126 0
-13653 -2962 -3039 -3128 0
-13653 -2962 -3037 -3130 0
-13653 -2962 -3036 -3132 0
-13653 -2960 -3086 0
-13653 -2960 -3081 -3088 0
-13653 -2960 -3079 -3090 0
-13653 -2960 -3077 -3092 0
-13653 -2960 -3075 -3094 0
-13653 -2960 -3073 -3096 0
-13653 -2960 -3071 -3098 0
-13653 -2960 -3069 -3100 0
-13653 -2960 -3067 -3102 0
-13653 -2960 -3065 -3104 0
-13653 -2960 -3063 -3106 0
-13653 -2960 -3061 -3108 0
-13653 -2960 -3059 -3110 0
-13653 -2960 -3057 -3112 0
-13653 -2960 -3055 -3114 0
-13653 -2960 -3053 -3116 0
-13653 -2960 -3051 -3118 0
-13653 -2960 -3049 -3120 0
-13653 -2960 -3047 -3122 0
-13653 -2960 -3045 -3124 0
-13653 -2960 -3043 -3126 0
-13653 -2960 -3041 -3128 0
-13653 -2960 -3039 -3130 0
-13653 -2960 -3037 -3132 0
-13653 -2960 -3036 -3134 0
-13653 -2958 -3088 0
-13653 -2958 -3081 -3090 0
-13653 -2958 -3079 -3092 0
-13653 -2958 -3077 -3094 0
-13653 -2958 -3075 -3096 0
-13653 -2958 -3073 -3098 0
-13653 -2958 -3071 -3100 0
-13653 -2958 -3069 -3102 0
-13653 -2958 -3067 -3104 0
-13653 -2958 -3065 -3106 0
-13653 -2958 -3063 -3108 0
-13653 -2958 -3061 -3110 0
-13653 -2958 -3059 -3112 0
-13653 -2958 -3057 -3114 0
-13653 -2958 -3055 -3116 0
-13653 -2958 -3053 -3118 0
-13653 -2958 -3051 -3120 0
-13653 -2958 -3049 -3122 0
-13653 -2958 -3047 -3124 0
-13653 -2958 -3045 -3126 0
-13653 -2958 -3043 -3128 0
-13653 -2958 -3041 -3130 0
-13653 -2958 -3039 -3132 0
-13653 -2958 -3037 -3134 0
-13653 -2958 -3036 -3136 0
-13653 -2956 -3090 0
-13653 -2956 -3081 -3092 0
-13653 -2956 -3079 -3094 0
-13653 -2956 -3077 -3096 0
-13653 -2956 -3075 -3098 0
-13653 -2956 -3073 -3100 0
-13653 -2956 -3071 -3102 0
-13653 -2956 -3069 -3104 0
-13653 -2956 -3067 -3106 0
-13653 -2956 -3065 -3108 0
-13653 -2956 -3063 -3110 0
-13653 -2956 -3061 -3112 0
-13653 -2956 -3059 -3114 0
-13653 -2956 -3057 -3116 0
-13653 -2956 -3055 -3118 0
-13653 -2956 -3053 -3120 0
-13653 -2956 -3051 -3122 0
-13653 -2956 -3049 -3124 0
-13653 -2956 -3047 -3126 0
-13653 -2956 -3045 -3128 0
-13653 -2956 -3043 -3130 0
-13653 -2956 -3041 -3132 0
-13653 -2956 -3039 -3134 0
-13653 -2956 -3037 -3136 0
-13653 -2956 -3036 -3138 0
-13653 -2954 -3092 0
-13653 -2954 -3081 -3094 0
-13653 -2954 -3079 -3096 0
-13653 -2954 -3077 -3098 0
-13653 -2954 -3075 -3100 0
-13653 -2954 -3073 -3102 0
-13653 -2954 -3071 -3104 0
-13653 -2954 -3069 -3106 0
-13653 -2954 -3067 -3108 0
-13653 -2954 -3065 -3110 0
-13653 -2954 -3063 -3112 0
-13653 -2954 -3061 -3114 0
-13653 -2954 -3059 -3116 0
-13653 -2954 -3057 -3118 0
-13653 -2954 -3055 -3120 0
-13653 -2954 -3053 -3122 0
-13653 -2954 -3051 -3124 0
-13653 -2954 -3049 -3126 0
-13653 -2954 -3047 -3128 0
-13653 -2954 -3045 -3130 0
-13653 -2954 -3043 -3132 0
-13653 -2954 -3041 -3134 0
-13653 -2954 -3039 -3136 0
-13653 -2954 -3037 -3138 0
-13653 -2954 -3036 -3140 0
-13653 -2952 -3094 0
-13653 -2952 -3081 -3096 0
-13653 -2952 -3079 -3098 0
-13653 -2952 -3077 -3100 0
-13653 -2952 -3075 -3102 0
-13653 -2952 -3073 -3104 0
-13653 -2952 -3071 -3106 0
-13653 -2952 -3069 -3108 0
-13653 -2952 -3067 -3110 0
-13653 -2952 -3065 -3112 0
-13653 -2952 -3063 -3114 0
-13653 -2952 -3061 -3116 0
-13653 -2952 -3059 -3118 0
-13653 -2952 -3057 -3120 0
-13653 -2952 -3055 -3122 0
-13653 -2952 -3053 -3124 0
-13653 -2952 -3051 -3126 0
-13653 -2952 -3049 -3128 0
-13653 -2952 -3047 -3130 0
-13653 -2952 -3045 -3132 0
-13653 -2952 -3043 -3134 0
-13653 -2952 -3041 -3136 0
-13653 -2952 -3039 -3138 0
-13653 -2952 -3037 -3140 0
-13653 -2952 -3036 -3142 0
-13653 -2950 -3096 0
-13653 -2950 -3081 -3098 0
-13653 -2950 -3079 -3100 0
-13653 -2950 -3077 -3102 0
-13653 -2950 -3075 -3104 0
-13653 -2950 -3073 -3106 0
-13653 -2950 -3071 -3108 0
-13653 -2950 -3069 -3110 0
-13653 -2950 -3067 -3112 0
-13653 -2950 -3065 -3114 0
-13653 -2950 -3063 -3116 0
-13653 -2950 -3061 -3118 0
-13653 -2950 -3059 -3120 0
-13653 -2950 -3057 -3122 0
-13653 -2950 -3055 -3124 0
-13653 -2950 -3053 -3126 0
-13653 -2950 -3051 -3128 0
-13653 -2950 -3049 -3130 0
-13653 -2950 -3047 -3132 0
-13653 -2950 -3045 -3134 0
-13653 -2950 -3043 -3136 0
-13653 -2950 -3041 -3138 0
-13653 -2950 -3039 -3140 0
-13653 -2950 -3037 -3142 0
-13653 -2950 -3036 -3144 0
-13653 -2948 -3098 0
-13653 -2948 -3081 -3100 0
-13653 -2948 -3079 -3102 0
-13653 -2948 -3077 -3104 0
-13653 -2948 -3075 -3106 0
-13653 -2948 -3073 -3108 0
-13653 -2948 -3071 -3110 0
-13653 -2948 -3069 -3112 0
-13653 -2948 -3067 -3114 0
-13653 -2948 -3065 -3116 0
-13653 -2948 -3063 -3118 0
-13653 -2948 -3061 -3120 0
-13653 -2948 -3059 -3122 0
-13653 -2948 -3057 -3124 0
-13653 -2948 -3055 -3126 0
-13653 -2948 -3053 -3128 0
-13653 -2948 -3051 -3130 0
-13653 -2948 -3049 -3132 0
-13653 -2948 -3047 -3134 0
-13653 -2948 -3045 -3136 0
-13653 -2948 -3043 -3138 0
-13653 -2948 -3041 -3140 0
-13653 -2948 -3039 -3142 0
-13653 -2948 -3037 -3144 0
-13653 -2948 -3036 0
-13653 -2946 -3100 0
-13653 -2946 -3081 -3102 0
-13653 -2946 -3079 -3104 0
-13653 -2946 -3077 -3106 0
-13653 -2946 -3075 -3108 0
-13653 -2946 -3073 -3110 0
-13653 -2946 -3071 -3112 0
-13653 -2946 -3069 -3114 0
-13653 -2946 -3067 -3116 0
-13653 -2946 -3065 -3118 0
-13653 -2946 -3063 -3120 0
-13653 -2946 -3061 -3122 0
-13653 -2946 -3059 -3124 0
-13653 -2946 -3057 -3126 0
-13653 -2946 -3055 -3128 0
-13653 -2946 -3053 -3130 0
-13653 -2946 -3051 -3132 0
-13653 -2946 -3049 -3134 0
-13653 -2946 -3047 -3136 0
-13653 -2946 -3045 -3138 0
-13653 -2946 -3043 -3140 0
-13653 -2946 -3041 -3142 0
-13653 -2946 -3039 -3144 0
-13653 -2946 -3037 0
-13653 -2946 -3036 0
-13653 -2944 -3102 0
-13653 -2944 -3081 -3104 0
-13653 -2944 -3079 -3106 0
-13653 -2944 -3077 -3108 0
-13653 -2944 -3075 -3110 0
-13653 -2944 -3073 -3112 0
-13653 -2944 -3071 -3114 0
-13653 -2944 -3069 -3116 0
-13653 -2944 -3067 -3118 0
-13653 -2944 -3065 -3120 0
-13653 -2944 -3063 -3122 0
-13653 -2944 -3061 -3124 0
-13653 -2944 -3059 -3126 0
-13653 -2944 -3057 -3128 0
-13653 -2944 -3055 -3130 0
-13653 -2944 -3053 -3132 0
-13653 -2944 -3051 -3134 0
-13653 -2944 -3049 -3136 0
-13653 -2944 -3047 -3138 0
-13653 -2944 -3045 -3140 0
-13653 -2944 -3043 -3142 0
-13653 -2944 -3041 -3144 0
-13653 -2944 -3039 0
-13653 -2944 -3037 0
-13653 -2944 -3036 0
-13653 -2943 -3104 0
-13653 -2943 -3081 -3106 0
-13653 -2943 -3079 -3108 0
-13653 -2943 -3077 -3110 0
-13653 -2943 -3075 -3112 0
-13653 -2943 -3073 -3114 0
-13653 -2943 -3071 -3116 0
-13653 -2943 -3069 -3118 0
-13653 -2943 -3067 -3120 0
-13653 -2943 -3065 -3122 0
-13653 -2943 -3063 -3124 0
-13653 -2943 -3061 -3126 0
-13653 -2943 -3059 -3128 0
-13653 -2943 -3057 -3130 0
-13653 -2943 -3055 -3132 0
-13653 -2943 -3053 -3134 0
-13653 -2943 -3051 -3136 0
-13653 -2943 -3049 -3138 0
-13653 -2943 -3047 -3140 0
-13653 -2943 -3045 -3142 0
-13653 -2943 -3043 -3144 0
-13653 -2943 -3041 0
-13653 -2943 -3039 0
-13653 -2943 -3037 0
-13653 -2943 -3036 0
13653 3041 3144 0
13653 3043 3142 0
13653 3045 3140 0
13653 3047 3138 0
13653 3049 3136 0
13653 3051 3134 0
13653 3053 3132 0
13653 3055 3130 0
13653 3057 3128 0
13653 3059 3126 0
13653 3061 3124 0
13653 3063 3122 0
13653 3065 3120 0
13653 3067 3118 0
13653 3069 3116 0
13653 3071 3114 0
13653 3073 3112 0
13653 3075 3110 0
13653 3077 3108 0
13653 3079 3106 0
13653 3081 3104 0
13653 2943 3039 3144 0
13653 2943 3041 3142 0
13653 2943 3043 3140 0
13653 2943 3045 3138 0
13653 2943 3047 3136 0
13653 2943 3049 3134 0
13653 2943 3051 3132 0
13653 2943 3053 3130 0
13653 2943 3055 3128 0
13653 2943 3057 3126 0
13653 2943 3059 3124 0
13653 2943 3061 3122 0
13653 2943 3063 3120 0
13653 2943 3065 3118 0
13653 2943 3067 3116 0
13653 2943 3069 3114 0
13653 2943 3071 3112 0
13653 2943 3073 3110 0
13653 2943 3075 3108 0
13653 2943 3077 3106 0
13653 2943 3079 3104 0
13653 2943 3081 3102 0
13653 2944 3037 3144 0
13653 2944 3039 3142 0
13653 2944 3041 3140 0
13653 2944 3043 3138 0
13653 2944 3045 3136 0
13653 2944 3047 3134 0
13653 2944 3049 3132 0
13653 2944 3051 3130 0
13653 2944 3053 3128 0
13653 2944 3055 3126 0
13653 2944 3057 3124 0
13653 2944 3059 3122 0
13653 2944 3061 3120 0
13653 2944 3063 3118 0
13653 2944 3065 3116 0
13653 2944 3067 3114 0
13653 2944 3069 3112 0
13653 2944 3071 3110 0
13653 2944 3073 3108 0
13653 2944 3075 3106 0
13653 2944 3077 3104 0
13653 2944 3079 3102 0
13653 2944 3081 3100 0
13653 2946 3036 3144 0
13653 2946 3037 3142 0
13653 2946 3039 3140 0
13653 2946 3041 3138 0
13653 2946 3043 3136 0
13653 2946 3045 3134 0
13653 2946 3047 3132 0
13653 2946 3049 3130 0
13653 2946 3051 3128 0
13653 2946 3053 3126 0
13653 2946 3055 3124 0
13653 2946 3057 3122 0
13653 2946 3059 3120 0
13653 2946 3061 3118 0
13653 2946 3063 3116 0
13653 2946 3065 3114 0
13653 2946 3067 3112 0
13653 2946 3069 3110 0
13653 2946 3071 3108 0
13653 2946 3073 3106 0
13653 2946 3075 3104 0
13653 2946 3077 3102 0
13653 2946 3079 3100 0
13653 2946 3081 3098 0
13653 2948 3144 0
13653 2948 3036 3142 0
13653 2948 3037 3140 0
13653 2948 3039 3138 0
13653 2948 3041 3136 0
13653 2948 3043 3134 0
13653 2948 3045 3132 0
13653 2948 3047 3130 0
13653 2948 3049 3128 0
13653 2948 3051 3126 0
13653 2948 3053 3124 0
13653 2948 3055 3122 0
13653 2948 3057 3120 0
13653 2948 3059 3118 0
13653 2948 3061 3116 0
13653 2948 3063 3114 0
13653 2948 3065 3112 0
13653 2948 3067 3110 0
13653 2948 3069 3108 0
13653 2948 3071 3106 0
13653 2948 3073 3104 0
13653 2948 3075 3102 0
13653 2948 3077 3100 0
13653 2948 3079 3098 0
13653 2948 3081 3096 0
13653 2950 3142 0
13653 2950 3036 3140 0
13653 2950 3037 3138 0
13653 2950 3039 3136 0
13653 2950 3041 3134 0
13653 2950 3043 3132 0
13653 2950 3045 3130 0
13653 2950 3047 3128 0
13653 2950 3049 3126 0
13653 2950 3051 3124 0
13653 2950 3053 3122 0
13653 2950 3055 3120 0
13653 2950 3057 3118 0
13653 2950 3059 3116 0
13653 2950 3061 3114 0
13653 2950 3063 3112 0
13653 2950 3065 3110 0
13653 2950 3067 3108 0
13653 2950 3069 3106 0
13653 2950 3071 3104 0
13653 2950 3073 3102 0
13653 2950 3075 3100 0
13653 2950 3077 3098 0
13653 2950 3079 3096 0
13653 2950 3081 3094 0
13653 2952 3140 0
13653 2952 3036 3138 0
13653 2952 3037 3136 0
13653 2952 3039 3134 0
13653 2952 3041 3132 0
13653 2952 3043 3130 0
13653 2952 3045 3128 0
13653 2952 3047 3126 0
13653 2952 3049 3124 0
13653 2952 3051 3122 0
13653 2952 3053 3120 0
13653 2952 3055 3118 0
13653 2952 3057 3116 0
13653 2952 3059 3114 0
13653 2952 3061 3112 0
13653 2952 3063 3110 0
13653 2952 3065 3108 0
13653 2952 3067 3106 0
13653 2952 3069 3104 0
13653 2952 3071 3102 0
13653 2952 3073 3100 0
13653 2952 3075 3098 0
13653 2952 3077 3096 0
13653 2952 3079 3094 0
13653 2952 3081 3092 0
13653 2954 3138 0
13653 2954 3036 3136 0
13653 2954 3037 3134 0
13653 2954 3039 3132 0
13653 2954 3041 3130 0
13653 2954 3043 3128 0
13653 2954 3045 3126 0
13653 2954 3047 3124 0
13653 2954 3049 3122 0
13653 2954 3051 3120 0
13653 2954 3053 3118 0
13653 2954 3055 3116 0
13653 2954 3057 3114 0
13653 2954 3059 3112 0
13653 2954 3061 3110 0
13653 2954 3063 3108 0
13653 2954 3065 3106 0
13653 2954 3067 3104 0
13653 2954 3069 3102 0
13653 2954 3071 3100 0
13653 2954 3073 3098 0
13653 2954 3075 3096 0
13653 2954 3077 3094 0
13653 2954 3079 3092 0
13653 2954 3081 3090 0
13653 2956 3136 0
13653 2956 3036 3134 0
13653 2956 3037 3132 0
13653 2956 3039 3130 0
13653 2956 3041 3128 0
13653 2956 3043 3126 0
13653 2956 3045 3124 0
13653 2956 3047 3122 0
13653 2956 3049 3120 0
13653 2956 3051 3118 0
13653 2956 3053 3116 0
13653 2956 3055 3114 0
13653 2956 3057 3112 0
13653 2956 3059 3110 0
13653 2956 3061 3108 0
13653 2956 3063 3106 0
13653 2956 3065 3104 0
13653 2956 3067 3102 0
13653 2956 3069 3100 0
13653 2956 3071 3098 0
13653 2956 3073 3096 0
13653 2956 3075 3094 0
13653 2956 3077 3092 0
13653 2956 3079 3090 0
13653 2956 3081 3088 0
13653 2958 3134 0
13653 2958 3036 3132 0
13653 2958 3037 3130 0
13653 2958 3039 3128 0
13653 2958 3041 3126 0
13653 2958 3043 3124 0
13653 2958 3045 3122 0
13653 2958 3047 3120 0
13653 2958 3049 3118 0
13653 2958 3051 3116 0
13653 2958 3053 3114 0
13653 2958 3055 3112 0
13653 2958 3057 3110 0
13653 2958 3059 3108 0
13653 2958 3061 3106 0
13653 2958 3063 3104 0
13653 2958 3065 3102 0
13653 2958 3067 3100 0
13653 2958 3069 3098 0
13653 2958 3071 3096 0
13653 2958 3073 3094 0
13653 2958 3075 3092 0
13653 2958 3077 3090 0
13653 2958 3079 3088 0
13653 2958 3081 3086 0
13653 2960 3132 0
13653 2960 3036 3130 0
13653 2960 3037 3128 0
13653 2960 3039 3126 0
13653 2960 3041 3124 0
13653 2960 3043 3122 0
13653 2960 3045 3120 0
13653 2960 3047 3118 0
13653 2960 3049 3116 0
13653 2960 3051 3114 0
13653 2960 3053 3112 0
13653 2960 3055 3110 0
13653 2960 3057 3108 0
13653 2960 3059 3106 0
13653 2960 3061 3104 0
13653 2960 3063 3102 0
13653 2960 3065 3100 0
13653 2960 3067 3098 0
13653 2960 3069 3096 0
13653 2960 3071 3094 0
13653 2960 3073 3092 0
13653 2960 3075 3090 0
13653 2960 3077 3088 0
13653 2960 3079 3086 0
13653 2960 3081 3084 0
13653 2962 3130 0
13653 2962 3036 3128 0
13653 2962 3037 3126 0
13653 2962 3039 3124 0
13653 2962 3041 3122 0
13653 2962 3043 3120 0
13653 2962 3045 3118 0
13653 2962 3047 3116 0
13653 2962 3049 3114 0
13653 2962 3051 3112 0
13653 2962 3053 3110 0
13653 2962 3055 3108 0
13653 2962 3057 3106 0
13653 2962 3059 3104 0
13653 2962 3061 3102 0
13653 2962 3063 3100 0
13653 2962 3065 3098 0
13653 2962 3067 3096 0
13653 2962 3069 3094 0
13653 2962 3071 3092 0
13653 2962 3073 3090 0
13653 2962 3075 3088 0
13653 2962 3077 3086 0
13653 2962 3079 3084 0
13653 2962 3081 3083 0
13653 2964 3128 0
13653 2964 3036 3126 0
13653 2964 3037 3124 0
13653 2964 3039 3122 0
13653 2964 3041 3120 0
13653 2964 3043 3118 0
13653 2964 3045 3116 0
13653 2964 3047 3114 0
13653 2964 3049 3112 0
13653 2964 3051 3110 0
13653 2964 3053 3108 0
13653 2964 3055 3106 0
13653 2964 3057 3104 0
13653 2964 3059 3102 0
13653 2964 3061 3100 0
13653 2964 3063 3098 0
13653 2964 3065 3096 0
13653 2964 3067 3094 0
13653 2964 3069 3092 0
13653 2964 3071 3090 0
13653 2964 3073 3088 0
13653 2964 3075 3086 0
13653 2964 3077 3084 0
13653 2964 3079 3083 0
13653 2964 3081 0
13653 2966 3126 0
13653 2966 3036 3124 0
13653 2966 3037 3122 0
13653 2966 3039 3120 0
13653 2966 3041 3118 0
13653 2966 3043 3116 0
13653 2966 3045 3114 0
13653 2966 3047 3112 0
13653 2966 3049 3110 0
13653 2966 3051 3108 0
13653 2966 3053 3106 0
13653 2966 3055 3104 0
13653 2966 3057 3102 0
13653 2966 3059 3100 0
13653 2966 3061 3098 0
13653 2966 3063 3096 0
13653 2966 3065 3094 0
13653 2966 3067 3092 0
13653 2966 3069 3090 0
13653 2966 3071 3088 0
13653 2966 3073 3086 0
13653 2966 3075 3084 0
13653 2966 3077 3083 0
13653 2966 3079 0
13653 2966 3081 0
13653 2968 3124 0
13653 2968 3036 3122 0
13653 2968 3037 3120 0
13653 2968 3039 3118 0
13653 2968 3041 3116 0
13653 2968 3043 3114 0
13653 2968 3045 3112 0
13653 2968 3047 3110 0
13653 2968 3049 3108 0
13653 2968 3051 3106 0
13653 2968 3053 3104 0
13653 2968 3055 3102 0
13653 2968 3057 3100 0
13653 2968 3059 3098 0
13653 2968 3061 3096 0
13653 2968 3063 3094 0
13653 2968 3065 3092 0
13653 2968 3067 3090 0
13653 2968 3069 3088 0
13653 2968 3071 3086 0
13653 2968 3073 3084 0
13653 2968 3075 3083 0
13653 2968 3077 0
13653 2968 3079 0
13653 2968 3081 0
13653 2970 3122 0
13653 2970 3036 3120 0
13653 2970 3037 3118 0
13653 2970 3039 3116 0
13653 2970 3041 3114 0
13653 2970 3043 3112 0
13653 2970 3045 3110 0
13653 2970 3047 3108 0
13653 2970 3049 3106 0
13653 2970 3051 3104 0
13653 2970 3053 3102 0
13653 2970 3055 3100 0
13653 2970 3057 3098 0
13653 2970 3059 3096 0
13653 2970 3061 3094 0
13653 2970 3063 3092 0
13653 2970 3065 3090 0
13653 2970 3067 3088 0
13653 2970 3069 3086 0
13653 2970 3071 3084 0
13653 2970 3073 3083 0
13653 2970 3075 0
13653 2970 3077 0
13653 2970 3079 0
13653 2970 3081 0
13653 2972 3120 0
13653 2972 3036 3118 0
13653 2972 3037 3116 0
13653 2972 3039 3114 0
13653 2972 3041 3112 0
13653 2972 3043 3110 0
13653 2972 3045 3108 0
13653 2972 3047 3106 0
13653 2972 3049 3104 0
13653 2972 3051 3102 0
13653 2972 3053 3100 0
13653 2972 3055 3098 0
13653 2972 3057 3096 0
13653 2972 3059 3094 0
13653 2972 3061 3092 0
13653 2972 3063 3090 0
13653 2972 3065 3088 0
13653 2972 3067 3086 0
13653 2972 3069 3084 0
13653 2972 3071 3083 0
13653 2972 3073 0
13653 2972 3075 0
13653 2972 3077 0
13653 2972 3079 0
13653 2972 3081 0
c (((aux498 + aux501 + aux502)<=36)=tv=SATLiteral(13654))
-13654 3277 3378 0
-13654 3279 3376 0
-13654 3281 3374 0
-13654 3283 3372 0
-13654 3285 3370 0
-13654 3287 3368 0
-13654 3289 3366 0
-13654 3291 3364 0
-13654 3293 3362 0
-13654 3295 3360 0
-13654 3297 3358 0
-13654 3299 3356 0
-13654 3301 3354 0
-13654 3303 3352 0
-13654 3305 3350 0
-13654 3307 3348 0
-13654 3309 3346 0
-13654 3311 3344 0
-13654 3313 3342 0
-13654 3315 3340 0
-13654 3177 3275 3378 0
-13654 3177 3277 3376 0
-13654 3177 3279 3374 0
-13654 3177 3281 3372 0
-13654 3177 3283 3370 0
-13654 3177 3285 3368 0
-13654 3177 3287 3366 0
-13654 3177 3289 3364 0
-13654 3177 3291 3362 0
-13654 3177 3293 3360 0
-13654 3177 3295 3358 0
-13654 3177 3297 3356 0
-13654 3177 3299 3354 0
-13654 3177 3301 3352 0
-13654 3177 3303 3350 0
-13654 3177 3305 3348 0
-13654 3177 3307 3346 0
-13654 3177 3309 3344 0
-13654 3177 3311 3342 0
-13654 3177 3313 3340 0
-13654 3177 3315 3338 0
-13654 3178 3273 3378 0
-13654 3178 3275 3376 0
-13654 3178 3277 3374 0
-13654 3178 3279 3372 0
-13654 3178 3281 3370 0
-13654 3178 3283 3368 0
-13654 3178 3285 3366 0
-13654 3178 3287 3364 0
-13654 3178 3289 3362 0
-13654 3178 3291 3360 0
-13654 3178 3293 3358 0
-13654 3178 3295 3356 0
-13654 3178 3297 3354 0
-13654 3178 3299 3352 0
-13654 3178 3301 3350 0
-13654 3178 3303 3348 0
-13654 3178 3305 3346 0
-13654 3178 3307 3344 0
-13654 3178 3309 3342 0
-13654 3178 3311 3340 0
-13654 3178 3313 3338 0
-13654 3178 3315 3336 0
-13654 3180 3271 3378 0
-13654 3180 3273 3376 0
-13654 3180 3275 3374 0
-13654 3180 3277 3372 0
-13654 3180 3279 3370 0
-13654 3180 3281 3368 0
-13654 3180 3283 3366 0
-13654 3180 3285 3364 0
-13654 3180 3287 3362 0
-13654 3180 3289 3360 0
-13654 3180 3291 3358 0
-13654 3180 3293 3356 0
-13654 3180 3295 3354 0
-13654 3180 3297 3352 0
-13654 3180 3299 3350 0
-13654 3180 3301 3348 0
-13654 3180 3303 3346 0
-13654 3180 3305 3344 0
-13654 3180 3307 3342 0
-13654 3180 3309 3340 0
-13654 3180 3311 3338 0
-13654 3180 3313 3336 0
-13654 3180 3315 3334 0
-13654 3182 3270 3378 0
-13654 3182 3271 3376 0
-13654 3182 3273 3374 0
-13654 3182 3275 3372 0
-13654 3182 3277 3370 0
-13654 3182 3279 3368 0
-13654 3182 3281 3366 0
-13654 3182 3283 3364 0
-13654 3182 3285 3362 0
-13654 3182 3287 3360 0
-13654 3182 3289 3358 0
-13654 3182 3291 3356 0
-13654 3182 3293 3354 0
-13654 3182 3295 3352 0
-13654 3182 3297 3350 0
-13654 3182 3299 3348 0
-13654 3182 3301 3346 0
-13654 3182 3303 3344 0
-13654 3182 3305 3342 0
-13654 3182 3307 3340 0
-13654 3182 3309 3338 0
-13654 3182 3311 3336 0
-13654 3182 3313 3334 0
-13654 3182 3315 3332 0
-13654 3184 3378 0
-13654 3184 3270 3376 0
-13654 3184 3271 3374 0
-13654 3184 3273 3372 0
-13654 3184 3275 3370 0
-13654 3184 3277 3368 0
-13654 3184 3279 3366 0
-13654 3184 3281 3364 0
-13654 3184 3283 3362 0
-13654 3184 3285 3360 0
-13654 3184 3287 3358 0
-13654 3184 3289 3356 0
-13654 3184 3291 3354 0
-13654 3184 3293 3352 0
-13654 3184 3295 3350 0
-13654 3184 3297 3348 0
-13654 3184 3299 3346 0
-13654 3184 3301 3344 0
-13654 3184 3303 3342 0
-13654 3184 3305 3340 0
-13654 3184 3307 3338 0
-13654 3184 3309 3336 0
-13654 3184 3311 3334 0
-13654 3184 3313 3332 0
-13654 3184 3315 3330 0
-13654 3186 3376 0
-13654 3186 3270 3374 0
-13654 3186 3271 3372 0
-13654 3186 3273 3370 0
-13654 3186 3275 3368 0
-13654 3186 3277 3366 0
-13654 3186 3279 3364 0
-13654 3186 3281 3362 0
-13654 3186 3283 3360 0
-13654 3186 3285 3358 0
-13654 3186 3287 3356 0
-13654 3186 3289 3354 0
-13654 3186 3291 3352 0
-13654 3186 3293 3350 0
-13654 3186 3295 3348 0
-13654 3186 3297 3346 0
-13654 3186 3299 3344 0
-13654 3186 3301 3342 0
-13654 3186 3303 3340 0
-13654 3186 3305 3338 0
-13654 3186 3307 3336 0
-13654 3186 3309 3334 0
-13654 3186 3311 3332 0
-13654 3186 3313 3330 0
-13654 3186 3315 3328 0
-13654 3188 3374 0
-13654 3188 3270 3372 0
-13654 3188 3271 3370 0
-13654 3188 3273 3368 0
-13654 3188 3275 3366 0
-13654 3188 3277 3364 0
-13654 3188 3279 3362 0
-13654 3188 3281 3360 0
-13654 3188 3283 3358 0
-13654 3188 3285 3356 0
-13654 3188 3287 3354 0
-13654 3188 3289 3352 0
-13654 3188 3291 3350 0
-13654 3188 3293 3348 0
-13654 3188 3295 3346 0
-13654 3188 3297 3344 0
-13654 3188 3299 3342 0
-13654 3188 3301 3340 0
-13654 3188 3303 3338 0
-13654 3188 3305 3336 0
-13654 3188 3307 3334 0
-13654 3188 3309 3332 0
-13654 3188 3311 3330 0
-13654 3188 3313 3328 0
-13654 3188 3315 3326 0
-13654 3190 3372 0
-13654 3190 3270 3370 0
-13654 3190 3271 3368 0
-13654 3190 3273 3366 0
-13654 3190 3275 3364 0
-13654 3190 3277 3362 0
-13654 3190 3279 3360 0
-13654 3190 3281 3358 0
-13654 3190 3283 3356 0
-13654 3190 3285 3354 0
-13654 3190 3287 3352 0
-13654 3190 3289 3350 0
-13654 3190 3291 3348 0
-13654 3190 3293 3346 0
-13654 3190 3295 3344 0
-13654 3190 3297 3342 0
-13654 3190 3299 3340 0
-13654 3190 3301 3338 0
-13654 3190 3303 3336 0
-13654 3190 3305 3334 0
-13654 3190 3307 3332 0
-13654 3190 3309 3330 0
-13654 3190 3311 3328 0
-13654 3190 3313 3326 0
-13654 3190 3315 3324 0
-13654 3192 3370 0
-13654 3192 3270 3368 0
-13654 3192 3271 3366 0
-13654 3192 3273 3364 0
-13654 3192 3275 3362 0
-13654 3192 3277 3360 0
-13654 3192 3279 3358 0
-13654 3192 3281 3356 0
-13654 3192 3283 3354 0
-13654 3192 3285 3352 0
-13654 3192 3287 3350 0
-13654 3192 3289 3348 0
-13654 3192 3291 3346 0
-13654 3192 3293 3344 0
-13654 3192 3295 3342 0
-13654 3192 3297 3340 0
-13654 3192 3299 3338 0
-13654 3192 3301 3336 0
-13654 3192 3303 3334 0
-13654 3192 3305 3332 0
-13654 3192 3307 3330 0
-13654 3192 3309 3328 0
-13654 3192 3311 3326 0
-13654 3192 3313 3324 0
-13654 3192 3315 3322 0
-13654 3194 3368 0
-13654 3194 3270 3366 0
-13654 3194 3271 3364 0
-13654 3194 3273 3362 0
-13654 3194 3275 3360 0
-13654 3194 3277 3358 0
-13654 3194 3279 3356 0
-13654 3194 3281 3354 0
-13654 3194 3283 3352 0
-13654 3194 3285 3350 0
-13654 3194 3287 3348 0
-13654 3194 3289 3346 0
-13654 3194 3291 3344 0
-13654 3194 3293 3342 0
-13654 3194 3295 3340 0
-13654 3194 3297 3338 0
-13654 3194 3299 3336 0
-13654 3194 3301 3334 0
-13654 3194 3303 3332 0
-13654 3194 3305 3330 0
-13654 3194 3307 3328 0
-13654 3194 3309 3326 0
-13654 3194 3311 3324 0
-13654 3194 3313 3322 0
-13654 3194 3315 3320 0
-13654 3196 3366 0
-13654 3196 3270 3364 0
-13654 3196 3271 3362 0
-13654 3196 3273 3360 0
-13654 3196 3275 3358 0
-13654 3196 3277 3356 0
-13654 3196 3279 3354 0
-13654 3196 3281 3352 0
-13654 3196 3283 3350 0
-13654 3196 3285 3348 0
-13654 3196 3287 3346 0
-13654 3196 3289 3344 0
-13654 3196 3291 3342 0
-13654 3196 3293 3340 0
-13654 3196 3295 3338 0
-13654 3196 3297 3336 0
-13654 3196 3299 3334 0
-13654 3196 3301 3332 0
-13654 3196 3303 3330 0
-13654 3196 3305 3328 0
-13654 3196 3307 3326 0
-13654 3196 3309 3324 0
-13654 3196 3311 3322 0
-13654 3196 3313 3320 0
-13654 3196 3315 3318 0
-13654 3198 3364 0
-13654 3198 3270 3362 0
-13654 3198 3271 3360 0
-13654 3198 3273 3358 0
-13654 3198 3275 3356 0
-13654 3198 3277 3354 0
-13654 3198 3279 3352 0
-13654 3198 3281 3350 0
-13654 3198 3283 3348 0
-13654 3198 3285 3346 0
-13654 3198 3287 3344 0
-13654 3198 3289 3342 0
-13654 3198 3291 3340 0
-13654 3198 3293 3338 0
-13654 3198 3295 3336 0
-13654 3198 3297 3334 0
-13654 3198 3299 3332 0
-13654 3198 3301 3330 0
-13654 3198 3303 3328 0
-13654 3198 3305 3326 0
-13654 3198 3307 3324 0
-13654 3198 3309 3322 0
-13654 3198 3311 3320 0
-13654 3198 3313 3318 0
-13654 3198 3315 3317 0
-13654 3200 3362 0
-13654 3200 3270 3360 0
-13654 3200 3271 3358 0
-13654 3200 3273 3356 0
-13654 3200 3275 3354 0
-13654 3200 3277 3352 0
-13654 3200 3279 3350 0
-13654 3200 3281 3348 0
-13654 3200 3283 3346 0
-13654 3200 3285 3344 0
-13654 3200 3287 3342 0
-13654 3200 3289 3340 0
-13654 3200 3291 3338 0
-13654 3200 3293 3336 0
-13654 3200 3295 3334 0
-13654 3200 3297 3332 0
-13654 3200 3299 3330 0
-13654 3200 3301 3328 0
-13654 3200 3303 3326 0
-13654 3200 3305 3324 0
-13654 3200 3307 3322 0
-13654 3200 3309 3320 0
-13654 3200 3311 3318 0
-13654 3200 3313 3317 0
-13654 3200 3315 0
-13654 3202 3360 0
-13654 3202 3270 3358 0
-13654 3202 3271 3356 0
-13654 3202 3273 3354 0
-13654 3202 3275 3352 0
-13654 3202 3277 3350 0
-13654 3202 3279 3348 0
-13654 3202 3281 3346 0
-13654 3202 3283 3344 0
-13654 3202 3285 3342 0
-13654 3202 3287 3340 0
-13654 3202 3289 3338 0
-13654 3202 3291 3336 0
-13654 3202 3293 3334 0
-13654 3202 3295 3332 0
-13654 3202 3297 3330 0
-13654 3202 3299 3328 0
-13654 3202 3301 3326 0
-13654 3202 3303 3324 0
-13654 3202 3305 3322 0
-13654 3202 3307 3320 0
-13654 3202 3309 3318 0
-13654 3202 3311 3317 0
-13654 3202 3313 0
-13654 3202 3315 0
-13654 3204 3358 0
-13654 3204 3270 3356 0
-13654 3204 3271 3354 0
-13654 3204 3273 3352 0
-13654 3204 3275 3350 0
-13654 3204 3277 3348 0
-13654 3204 3279 3346 0
-13654 3204 3281 3344 0
-13654 3204 3283 3342 0
-13654 3204 3285 3340 0
-13654 3204 3287 3338 0
-13654 3204 3289 3336 0
-13654 3204 3291 3334 0
-13654 3204 3293 3332 0
-13654 3204 3295 3330 0
-13654 3204 3297 3328 0
-13654 3204 3299 3326 0
-13654 3204 3301 3324 0
-13654 3204 3303 3322 0
-13654 3204 3305 3320 0
-13654 3204 3307 3318 0
-13654 3204 3309 3317 0
-13654 3204 3311 0
-13654 3204 3313 0
-13654 3204 3315 0
-13654 3206 3356 0
-13654 3206 3270 3354 0
-13654 3206 3271 3352 0
-13654 3206 3273 3350 0
-13654 3206 3275 3348 0
-13654 3206 3277 3346 0
-13654 3206 3279 3344 0
-13654 3206 3281 3342 0
-13654 3206 3283 3340 0
-13654 3206 3285 3338 0
-13654 3206 3287 3336 0
-13654 3206 3289 3334 0
-13654 3206 3291 3332 0
-13654 3206 3293 3330 0
-13654 3206 3295 3328 0
-13654 3206 3297 3326 0
-13654 3206 3299 3324 0
-13654 3206 3301 3322 0
-13654 3206 3303 3320 0
-13654 3206 3305 3318 0
-13654 3206 3307 3317 0
-13654 3206 3309 0
-13654 3206 3311 0
-13654 3206 3313 0
-13654 3206 3315 0
13654 -3309 -3317 0
13654 -3307 -3318 0
13654 -3305 -3320 0
13654 -3303 -3322 0
13654 -3301 -3324 0
13654 -3299 -3326 0
13654 -3297 -3328 0
13654 -3295 -3330 0
13654 -3293 -3332 0
13654 -3291 -3334 0
13654 -3289 -3336 0
13654 -3287 -3338 0
13654 -3285 -3340 0
13654 -3283 -3342 0
13654 -3281 -3344 0
13654 -3279 -3346 0
13654 -3277 -3348 0
13654 -3275 -3350 0
13654 -3273 -3352 0
13654 -3271 -3354 0
13654 -3270 -3356 0
13654 -3206 -3311 -3317 0
13654 -3206 -3309 -3318 0
13654 -3206 -3307 -3320 0
13654 -3206 -3305 -3322 0
13654 -3206 -3303 -3324 0
13654 -3206 -3301 -3326 0
13654 -3206 -3299 -3328 0
13654 -3206 -3297 -3330 0
13654 -3206 -3295 -3332 0
13654 -3206 -3293 -3334 0
13654 -3206 -3291 -3336 0
13654 -3206 -3289 -3338 0
13654 -3206 -3287 -3340 0
13654 -3206 -3285 -3342 0
13654 -3206 -3283 -3344 0
13654 -3206 -3281 -3346 0
13654 -3206 -3279 -3348 0
13654 -3206 -3277 -3350 0
13654 -3206 -3275 -3352 0
13654 -3206 -3273 -3354 0
13654 -3206 -3271 -3356 0
13654 -3206 -3270 -3358 0
13654 -3204 -3313 -3317 0
13654 -3204 -3311 -3318 0
13654 -3204 -3309 -3320 0
13654 -3204 -3307 -3322 0
13654 -3204 -3305 -3324 0
13654 -3204 -3303 -3326 0
13654 -3204 -3301 -3328 0
13654 -3204 -3299 -3330 0
13654 -3204 -3297 -3332 0
13654 -3204 -3295 -3334 0
13654 -3204 -3293 -3336 0
13654 -3204 -3291 -3338 0
13654 -3204 -3289 -3340 0
13654 -3204 -3287 -3342 0
13654 -3204 -3285 -3344 0
13654 -3204 -3283 -3346 0
13654 -3204 -3281 -3348 0
13654 -3204 -3279 -3350 0
13654 -3204 -3277 -3352 0
13654 -3204 -3275 -3354 0
13654 -3204 -3273 -3356 0
13654 -3204 -3271 -3358 0
13654 -3204 -3270 -3360 0
13654 -3202 -3315 -3317 0
13654 -3202 -3313 -3318 0
13654 -3202 -3311 -3320 0
13654 -3202 -3309 -3322 0
13654 -3202 -3307 -3324 0
13654 -3202 -3305 -3326 0
13654 -3202 -3303 -3328 0
13654 -3202 -3301 -3330 0
13654 -3202 -3299 -3332 0
13654 -3202 -3297 -3334 0
13654 -3202 -3295 -3336 0
13654 -3202 -3293 -3338 0
13654 -3202 -3291 -3340 0
13654 -3202 -3289 -3342 0
13654 -3202 -3287 -3344 0
13654 -3202 -3285 -3346 0
13654 -3202 -3283 -3348 0
13654 -3202 -3281 -3350 0
13654 -3202 -3279 -3352 0
13654 -3202 -3277 -3354 0
13654 -3202 -3275 -3356 0
13654 -3202 -3273 -3358 0
13654 -3202 -3271 -3360 0
13654 -3202 -3270 -3362 0
13654 -3200 -3317 0
13654 -3200 -3315 -3318 0
13654 -3200 -3313 -3320 0
13654 -3200 -3311 -3322 0
13654 -3200 -3309 -3324 0
13654 -3200 -3307 -3326 0
13654 -3200 -3305 -3328 0
13654 -3200 -3303 -3330 0
13654 -3200 -3301 -3332 0
13654 -3200 -3299 -3334 0
13654 -3200 -3297 -3336 0
13654 -3200 -3295 -3338 0
13654 -3200 -3293 -3340 0
13654 -3200 -3291 -3342 0
13654 -3200 -3289 -3344 0
13654 -3200 -3287 -3346 0
13654 -3200 -3285 -3348 0
13654 -3200 -3283 -3350 0
13654 -3200 -3281 -3352 0
13654 -3200 -3279 -3354 0
13654 -3200 -3277 -3356 0
13654 -3200 -3275 -3358 0
13654 -3200 -3273 -3360 0
13654 -3200 -3271 -3362 0
13654 -3200 -3270 -3364 0
13654 -3198 -3318 0
13654 -3198 -3315 -3320 0
13654 -3198 -3313 -3322 0
13654 -3198 -3311 -3324 0
13654 -3198 -3309 -3326 0
13654 -3198 -3307 -3328 0
13654 -3198 -3305 -3330 0
13654 -3198 -3303 -3332 0
13654 -3198 -3301 -3334 0
13654 -3198 -3299 -3336 0
13654 -3198 -3297 -3338 0
13654 -3198 -3295 -3340 0
13654 -3198 -3293 -3342 0
13654 -3198 -3291 -3344 0
13654 -3198 -3289 -3346 0
13654 -3198 -3287 -3348 0
13654 -3198 -3285 -3350 0
13654 -3198 -3283 -3352 0
13654 -3198 -3281 -3354 0
13654 -3198 -3279 -3356 0
13654 -3198 -3277 -3358 0
13654 -3198 -3275 -3360 0
13654 -3198 -3273 -3362 0
13654 -3198 -3271 -3364 0
13654 -3198 -3270 -3366 0
13654 -3196 -3320 0
13654 -3196 -3315 -3322 0
13654 -3196 -3313 -3324 0
13654 -3196 -3311 -3326 0
13654 -3196 -3309 -3328 0
13654 -3196 -3307 -3330 0
13654 -3196 -3305 -3332 0
13654 -3196 -3303 -3334 0
13654 -3196 -3301 -3336 0
13654 -3196 -3299 -3338 0
13654 -3196 -3297 -3340 0
13654 -3196 -3295 -3342 0
13654 -3196 -3293 -3344 0
13654 -3196 -3291 -3346 0
13654 -3196 -3289 -3348 0
13654 -3196 -3287 -3350 0
13654 -3196 -3285 -3352 0
13654 -3196 -3283 -3354 0
13654 -3196 -3281 -3356 0
13654 -3196 -3279 -3358 0
13654 -3196 -3277 -3360 0
13654 -3196 -3275 -3362 0
13654 -3196 -3273 -3364 0
13654 -3196 -3271 -3366 0
13654 -3196 -3270 -3368 0
13654 -3194 -3322 0
13654 -3194 -3315 -3324 0
13654 -3194 -3313 -3326 0
13654 -3194 -3311 -3328 0
13654 -3194 -3309 -3330 0
13654 -3194 -3307 -3332 0
13654 -3194 -3305 -3334 0
13654 -3194 -3303 -3336 0
13654 -3194 -3301 -3338 0
13654 -3194 -3299 -3340 0
13654 -3194 -3297 -3342 0
13654 -3194 -3295 -3344 0
13654 -3194 -3293 -3346 0
13654 -3194 -3291 -3348 0
13654 -3194 -3289 -3350 0
13654 -3194 -3287 -3352 0
13654 -3194 -3285 -3354 0
13654 -3194 -3283 -3356 0
13654 -3194 -3281 -3358 0
13654 -3194 -3279 -3360 0
13654 -3194 -3277 -3362 0
13654 -3194 -3275 -3364 0
13654 -3194 -3273 -3366 0
13654 -3194 -3271 -3368 0
13654 -3194 -3270 -3370 0
13654 -3192 -3324 0
13654 -3192 -3315 -3326 0
13654 -3192 -3313 -3328 0
13654 -3192 -3311 -3330 0
13654 -3192 -3309 -3332 0
13654 -3192 -3307 -3334 0
13654 -3192 -3305 -3336 0
13654 -3192 -3303 -3338 0
13654 -3192 -3301 -3340 0
13654 -3192 -3299 -3342 0
13654 -3192 -3297 -3344 0
13654 -3192 -3295 -3346 0
13654 -3192 -3293 -3348 0
13654 -3192 -3291 -3350 0
13654 -3192 -3289 -3352 0
13654 -3192 -3287 -3354 0
13654 -3192 -3285 -3356 0
13654 -3192 -3283 -3358 0
13654 -3192 -3281 -3360 0
13654 -3192 -3279 -3362 0
13654 -3192 -3277 -3364 0
13654 -3192 -3275 -3366 0
13654 -3192 -3273 -3368 0
13654 -3192 -3271 -3370 0
13654 -3192 -3270 -3372 0
13654 -3190 -3326 0
13654 -3190 -3315 -3328 0
13654 -3190 -3313 -3330 0
13654 -3190 -3311 -3332 0
13654 -3190 -3309 -3334 0
13654 -3190 -3307 -3336 0
13654 -3190 -3305 -3338 0
13654 -3190 -3303 -3340 0
13654 -3190 -3301 -3342 0
13654 -3190 -3299 -3344 0
13654 -3190 -3297 -3346 0
13654 -3190 -3295 -3348 0
13654 -3190 -3293 -3350 0
13654 -3190 -3291 -3352 0
13654 -3190 -3289 -3354 0
13654 -3190 -3287 -3356 0
13654 -3190 -3285 -3358 0
13654 -3190 -3283 -3360 0
13654 -3190 -3281 -3362 0
13654 -3190 -3279 -3364 0
13654 -3190 -3277 -3366 0
13654 -3190 -3275 -3368 0
13654 -3190 -3273 -3370 0
13654 -3190 -3271 -3372 0
13654 -3190 -3270 -3374 0
13654 -3188 -3328 0
13654 -3188 -3315 -3330 0
13654 -3188 -3313 -3332 0
13654 -3188 -3311 -3334 0
13654 -3188 -3309 -3336 0
13654 -3188 -3307 -3338 0
13654 -3188 -3305 -3340 0
13654 -3188 -3303 -3342 0
13654 -3188 -3301 -3344 0
13654 -3188 -3299 -3346 0
13654 -3188 -3297 -3348 0
13654 -3188 -3295 -3350 0
13654 -3188 -3293 -3352 0
13654 -3188 -3291 -3354 0
13654 -3188 -3289 -3356 0
13654 -3188 -3287 -3358 0
13654 -3188 -3285 -3360 0
13654 -3188 -3283 -3362 0
13654 -3188 -3281 -3364 0
13654 -3188 -3279 -3366 0
13654 -3188 -3277 -3368 0
13654 -3188 -3275 -3370 0
13654 -3188 -3273 -3372 0
13654 -3188 -3271 -3374 0
13654 -3188 -3270 -3376 0
13654 -3186 -3330 0
13654 -3186 -3315 -3332 0
13654 -3186 -3313 -3334 0
13654 -3186 -3311 -3336 0
13654 -3186 -3309 -3338 0
13654 -3186 -3307 -3340 0
13654 -3186 -3305 -3342 0
13654 -3186 -3303 -3344 0
13654 -3186 -3301 -3346 0
13654 -3186 -3299 -3348 0
13654 -3186 -3297 -3350 0
13654 -3186 -3295 -3352 0
13654 -3186 -3293 -3354 0
13654 -3186 -3291 -3356 0
13654 -3186 -3289 -3358 0
13654 -3186 -3287 -3360 0
13654 -3186 -3285 -3362 0
13654 -3186 -3283 -3364 0
13654 -3186 -3281 -3366 0
13654 -3186 -3279 -3368 0
13654 -3186 -3277 -3370 0
13654 -3186 -3275 -3372 0
13654 -3186 -3273 -3374 0
13654 -3186 -3271 -3376 0
13654 -3186 -3270 -3378 0
13654 -3184 -3332 0
13654 -3184 -3315 -3334 0
13654 -3184 -3313 -3336 0
13654 -3184 -3311 -3338 0
13654 -3184 -3309 -3340 0
13654 -3184 -3307 -3342 0
13654 -3184 -3305 -3344 0
13654 -3184 -3303 -3346 0
13654 -3184 -3301 -3348 0
13654 -3184 -3299 -3350 0
13654 -3184 -3297 -3352 0
13654 -3184 -3295 -3354 0
13654 -3184 -3293 -3356 0
13654 -3184 -3291 -3358 0
13654 -3184 -3289 -3360 0
13654 -3184 -3287 -3362 0
13654 -3184 -3285 -3364 0
13654 -3184 -3283 -3366 0
13654 -3184 -3281 -3368 0
13654 -3184 -3279 -3370 0
13654 -3184 -3277 -3372 0
13654 -3184 -3275 -3374 0
13654 -3184 -3273 -3376 0
13654 -3184 -3271 -3378 0
13654 -3184 -3270 0
13654 -3182 -3334 0
13654 -3182 -3315 -3336 0
13654 -3182 -3313 -3338 0
13654 -3182 -3311 -3340 0
13654 -3182 -3309 -3342 0
13654 -3182 -3307 -3344 0
13654 -3182 -3305 -3346 0
13654 -3182 -3303 -3348 0
13654 -3182 -3301 -3350 0
13654 -3182 -3299 -3352 0
13654 -3182 -3297 -3354 0
13654 -3182 -3295 -3356 0
13654 -3182 -3293 -3358 0
13654 -3182 -3291 -3360 0
13654 -3182 -3289 -3362 0
13654 -3182 -3287 -3364 0
13654 -3182 -3285 -3366 0
13654 -3182 -3283 -3368 0
13654 -3182 -3281 -3370 0
13654 -3182 -3279 -3372 0
13654 -3182 -3277 -3374 0
13654 -3182 -3275 -3376 0
13654 -3182 -3273 -3378 0
13654 -3182 -3271 0
13654 -3182 -3270 0
13654 -3180 -3336 0
13654 -3180 -3315 -3338 0
13654 -3180 -3313 -3340 0
13654 -3180 -3311 -3342 0
13654 -3180 -3309 -3344 0
13654 -3180 -3307 -3346 0
13654 -3180 -3305 -3348 0
13654 -3180 -3303 -3350 0
13654 -3180 -3301 -3352 0
13654 -3180 -3299 -3354 0
13654 -3180 -3297 -3356 0
13654 -3180 -3295 -3358 0
13654 -3180 -3293 -3360 0
13654 -3180 -3291 -3362 0
13654 -3180 -3289 -3364 0
13654 -3180 -3287 -3366 0
13654 -3180 -3285 -3368 0
13654 -3180 -3283 -3370 0
13654 -3180 -3281 -3372 0
13654 -3180 -3279 -3374 0
13654 -3180 -3277 -3376 0
13654 -3180 -3275 -3378 0
13654 -3180 -3273 0
13654 -3180 -3271 0
13654 -3180 -3270 0
13654 -3178 -3338 0
13654 -3178 -3315 -3340 0
13654 -3178 -3313 -3342 0
13654 -3178 -3311 -3344 0
13654 -3178 -3309 -3346 0
13654 -3178 -3307 -3348 0
13654 -3178 -3305 -3350 0
13654 -3178 -3303 -3352 0
13654 -3178 -3301 -3354 0
13654 -3178 -3299 -3356 0
13654 -3178 -3297 -3358 0
13654 -3178 -3295 -3360 0
13654 -3178 -3293 -3362 0
13654 -3178 -3291 -3364 0
13654 -3178 -3289 -3366 0
13654 -3178 -3287 -3368 0
13654 -3178 -3285 -3370 0
13654 -3178 -3283 -3372 0
13654 -3178 -3281 -3374 0
13654 -3178 -3279 -3376 0
13654 -3178 -3277 -3378 0
13654 -3178 -3275 0
13654 -3178 -3273 0
13654 -3178 -3271 0
13654 -3178 -3270 0
13654 -3177 -3340 0
13654 -3177 -3315 -3342 0
13654 -3177 -3313 -3344 0
13654 -3177 -3311 -3346 0
13654 -3177 -3309 -3348 0
13654 -3177 -3307 -3350 0
13654 -3177 -3305 -3352 0
13654 -3177 -3303 -3354 0
13654 -3177 -3301 -3356 0
13654 -3177 -3299 -3358 0
13654 -3177 -3297 -3360 0
13654 -3177 -3295 -3362 0
13654 -3177 -3293 -3364 0
13654 -3177 -3291 -3366 0
13654 -3177 -3289 -3368 0
13654 -3177 -3287 -3370 0
13654 -3177 -3285 -3372 0
13654 -3177 -3283 -3374 0
13654 -3177 -3281 -3376 0
13654 -3177 -3279 -3378 0
13654 -3177 -3277 0
13654 -3177 -3275 0
13654 -3177 -3273 0
13654 -3177 -3271 0
13654 -3177 -3270 0
c ((36<=(aux498 + aux501 + aux502))=tv=SATLiteral(13655))
-13655 -3307 -3317 0
-13655 -3305 -3318 0
-13655 -3303 -3320 0
-13655 -3301 -3322 0
-13655 -3299 -3324 0
-13655 -3297 -3326 0
-13655 -3295 -3328 0
-13655 -3293 -3330 0
-13655 -3291 -3332 0
-13655 -3289 -3334 0
-13655 -3287 -3336 0
-13655 -3285 -3338 0
-13655 -3283 -3340 0
-13655 -3281 -3342 0
-13655 -3279 -3344 0
-13655 -3277 -3346 0
-13655 -3275 -3348 0
-13655 -3273 -3350 0
-13655 -3271 -3352 0
-13655 -3270 -3354 0
-13655 -3206 -3309 -3317 0
-13655 -3206 -3307 -3318 0
-13655 -3206 -3305 -3320 0
-13655 -3206 -3303 -3322 0
-13655 -3206 -3301 -3324 0
-13655 -3206 -3299 -3326 0
-13655 -3206 -3297 -3328 0
-13655 -3206 -3295 -3330 0
-13655 -3206 -3293 -3332 0
-13655 -3206 -3291 -3334 0
-13655 -3206 -3289 -3336 0
-13655 -3206 -3287 -3338 0
-13655 -3206 -3285 -3340 0
-13655 -3206 -3283 -3342 0
-13655 -3206 -3281 -3344 0
-13655 -3206 -3279 -3346 0
-13655 -3206 -3277 -3348 0
-13655 -3206 -3275 -3350 0
-13655 -3206 -3273 -3352 0
-13655 -3206 -3271 -3354 0
-13655 -3206 -3270 -3356 0
-13655 -3204 -3311 -3317 0
-13655 -3204 -3309 -3318 0
-13655 -3204 -3307 -3320 0
-13655 -3204 -3305 -3322 0
-13655 -3204 -3303 -3324 0
-13655 -3204 -3301 -3326 0
-13655 -3204 -3299 -3328 0
-13655 -3204 -3297 -3330 0
-13655 -3204 -3295 -3332 0
-13655 -3204 -3293 -3334 0
-13655 -3204 -3291 -3336 0
-13655 -3204 -3289 -3338 0
-13655 -3204 -3287 -3340 0
-13655 -3204 -3285 -3342 0
-13655 -3204 -3283 -3344 0
-13655 -3204 -3281 -3346 0
-13655 -3204 -3279 -3348 0
-13655 -3204 -3277 -3350 0
-13655 -3204 -3275 -3352 0
-13655 -3204 -3273 -3354 0
-13655 -3204 -3271 -3356 0
-13655 -3204 -3270 -3358 0
-13655 -3202 -3313 -3317 0
-13655 -3202 -3311 -3318 0
-13655 -3202 -3309 -3320 0
-13655 -3202 -3307 -3322 0
-13655 -3202 -3305 -3324 0
-13655 -3202 -3303 -3326 0
-13655 -3202 -3301 -3328 0
-13655 -3202 -3299 -3330 0
-13655 -3202 -3297 -3332 0
-13655 -3202 -3295 -3334 0
-13655 -3202 -3293 -3336 0
-13655 -3202 -3291 -3338 0
-13655 -3202 -3289 -3340 0
-13655 -3202 -3287 -3342 0
-13655 -3202 -3285 -3344 0
-13655 -3202 -3283 -3346 0
-13655 -3202 -3281 -3348 0
-13655 -3202 -3279 -3350 0
-13655 -3202 -3277 -3352 0
-13655 -3202 -3275 -3354 0
-13655 -3202 -3273 -3356 0
-13655 -3202 -3271 -3358 0
-13655 -3202 -3270 -3360 0
-13655 -3200 -3315 -3317 0
-13655 -3200 -3313 -3318 0
-13655 -3200 -3311 -3320 0
-13655 -3200 -3309 -3322 0
-13655 -3200 -3307 -3324 0
-13655 -3200 -3305 -3326 0
-13655 -3200 -3303 -3328 0
-13655 -3200 -3301 -3330 0
-13655 -3200 -3299 -3332 0
-13655 -3200 -3297 -3334 0
-13655 -3200 -3295 -3336 0
-13655 -3200 -3293 -3338 0
-13655 -3200 -3291 -3340 0
-13655 -3200 -3289 -3342 0
-13655 -3200 -3287 -3344 0
-13655 -3200 -3285 -3346 0
-13655 -3200 -3283 -3348 0
-13655 -3200 -3281 -3350 0
-13655 -3200 -3279 -3352 0
-13655 -3200 -3277 -3354 0
-13655 -3200 -3275 -3356 0
-13655 -3200 -3273 -3358 0
-13655 -3200 -3271 -3360 0
-13655 -3200 -3270 -3362 0
-13655 -3198 -3317 0
-13655 -3198 -3315 -3318 0
-13655 -3198 -3313 -3320 0
-13655 -3198 -3311 -3322 0
-13655 -3198 -3309 -3324 0
-13655 -3198 -3307 -3326 0
-13655 -3198 -3305 -3328 0
-13655 -3198 -3303 -3330 0
-13655 -3198 -3301 -3332 0
-13655 -3198 -3299 -3334 0
-13655 -3198 -3297 -3336 0
-13655 -3198 -3295 -3338 0
-13655 -3198 -3293 -3340 0
-13655 -3198 -3291 -3342 0
-13655 -3198 -3289 -3344 0
-13655 -3198 -3287 -3346 0
-13655 -3198 -3285 -3348 0
-13655 -3198 -3283 -3350 0
-13655 -3198 -3281 -3352 0
-13655 -3198 -3279 -3354 0
-13655 -3198 -3277 -3356 0
-13655 -3198 -3275 -3358 0
-13655 -3198 -3273 -3360 0
-13655 -3198 -3271 -3362 0
-13655 -3198 -3270 -3364 0
-13655 -3196 -3318 0
-13655 -3196 -3315 -3320 0
-13655 -3196 -3313 -3322 0
-13655 -3196 -3311 -3324 0
-13655 -3196 -3309 -3326 0
-13655 -3196 -3307 -3328 0
-13655 -3196 -3305 -3330 0
-13655 -3196 -3303 -3332 0
-13655 -3196 -3301 -3334 0
-13655 -3196 -3299 -3336 0
-13655 -3196 -3297 -3338 0
-13655 -3196 -3295 -3340 0
-13655 -3196 -3293 -3342 0
-13655 -3196 -3291 -3344 0
-13655 -3196 -3289 -3346 0
-13655 -3196 -3287 -3348 0
-13655 -3196 -3285 -3350 0
-13655 -3196 -3283 -3352 0
-13655 -3196 -3281 -3354 0
-13655 -3196 -3279 -3356 0
-13655 -3196 -3277 -3358 0
-13655 -3196 -3275 -3360 0
-13655 -3196 -3273 -3362 0
-13655 -3196 -3271 -3364 0
-13655 -3196 -3270 -3366 0
-13655 -3194 -3320 0
-13655 -3194 -3315 -3322 0
-13655 -3194 -3313 -3324 0
-13655 -3194 -3311 -3326 0
-13655 -3194 -3309 -3328 0
-13655 -3194 -3307 -3330 0
-13655 -3194 -3305 -3332 0
-13655 -3194 -3303 -3334 0
-13655 -3194 -3301 -3336 0
-13655 -3194 -3299 -3338 0
-13655 -3194 -3297 -3340 0
-13655 -3194 -3295 -3342 0
-13655 -3194 -3293 -3344 0
-13655 -3194 -3291 -3346 0
-13655 -3194 -3289 -3348 0
-13655 -3194 -3287 -3350 0
-13655 -3194 -3285 -3352 0
-13655 -3194 -3283 -3354 0
-13655 -3194 -3281 -3356 0
-13655 -3194 -3279 -3358 0
-13655 -3194 -3277 -3360 0
-13655 -3194 -3275 -3362 0
-13655 -3194 -3273 -3364 0
-13655 -3194 -3271 -3366 0
-13655 -3194 -3270 -3368 0
-13655 -3192 -3322 0
-13655 -3192 -3315 -3324 0
-13655 -3192 -3313 -3326 0
-13655 -3192 -3311 -3328 0
-13655 -3192 -3309 -3330 0
-13655 -3192 -3307 -3332 0
-13655 -3192 -3305 -3334 0
-13655 -3192 -3303 -3336 0
-13655 -3192 -3301 -3338 0
-13655 -3192 -3299 -3340 0
-13655 -3192 -3297 -3342 0
-13655 -3192 -3295 -3344 0
-13655 -3192 -3293 -3346 0
-13655 -3192 -3291 -3348 0
-13655 -3192 -3289 -3350 0
-13655 -3192 -3287 -3352 0
-13655 -3192 -3285 -3354 0
-13655 -3192 -3283 -3356 0
-13655 -3192 -3281 -3358 0
-13655 -3192 -3279 -3360 0
-13655 -3192 -3277 -3362 0
-13655 -3192 -3275 -3364 0
-13655 -3192 -3273 -3366 0
-13655 -3192 -3271 -3368 0
-13655 -3192 -3270 -3370 0
-13655 -3190 -3324 0
-13655 -3190 -3315 -3326 0
-13655 -3190 -3313 -3328 0
-13655 -3190 -3311 -3330 0
-13655 -3190 -3309 -3332 0
-13655 -3190 -3307 -3334 0
-13655 -3190 -3305 -3336 0
-13655 -3190 -3303 -3338 0
-13655 -3190 -3301 -3340 0
-13655 -3190 -3299 -3342 0
-13655 -3190 -3297 -3344 0
-13655 -3190 -3295 -3346 0
-13655 -3190 -3293 -3348 0
-13655 -3190 -3291 -3350 0
-13655 -3190 -3289 -3352 0
-13655 -3190 -3287 -3354 0
-13655 -3190 -3285 -3356 0
-13655 -3190 -3283 -3358 0
-13655 -3190 -3281 -3360 0
-13655 -3190 -3279 -3362 0
-13655 -3190 -3277 -3364 0
-13655 -3190 -3275 -3366 0
-13655 -3190 -3273 -3368 0
-13655 -3190 -3271 -3370 0
-13655 -3190 -3270 -3372 0
-13655 -3188 -3326 0
-13655 -3188 -3315 -3328 0
-13655 -3188 -3313 -3330 0
-13655 -3188 -3311 -3332 0
-13655 -3188 -3309 -3334 0
-13655 -3188 -3307 -3336 0
-13655 -3188 -3305 -3338 0
-13655 -3188 -3303 -3340 0
-13655 -3188 -3301 -3342 0
-13655 -3188 -3299 -3344 0
-13655 -3188 -3297 -3346 0
-13655 -3188 -3295 -3348 0
-13655 -3188 -3293 -3350 0
-13655 -3188 -3291 -3352 0
-13655 -3188 -3289 -3354 0
-13655 -3188 -3287 -3356 0
-13655 -3188 -3285 -3358 0
-13655 -3188 -3283 -3360 0
-13655 -3188 -3281 -3362 0
-13655 -3188 -3279 -3364 0
-13655 -3188 -3277 -3366 0
-13655 -3188 -3275 -3368 0
-13655 -3188 -3273 -3370 0
-13655 -3188 -3271 -3372 0
-13655 -3188 -3270 -3374 0
-13655 -3186 -3328 0
-13655 -3186 -3315 -3330 0
-13655 -3186 -3313 -3332 0
-13655 -3186 -3311 -3334 0
-13655 -3186 -3309 -3336 0
-13655 -3186 -3307 -3338 0
-13655 -3186 -3305 -3340 0
-13655 -3186 -3303 -3342 0
-13655 -3186 -3301 -3344 0
-13655 -3186 -3299 -3346 0
-13655 -3186 -3297 -3348 0
-13655 -3186 -3295 -3350 0
-13655 -3186 -3293 -3352 0
-13655 -3186 -3291 -3354 0
-13655 -3186 -3289 -3356 0
-13655 -3186 -3287 -3358 0
-13655 -3186 -3285 -3360 0
-13655 -3186 -3283 -3362 0
-13655 -3186 -3281 -3364 0
-13655 -3186 -3279 -3366 0
-13655 -3186 -3277 -3368 0
-13655 -3186 -3275 -3370 0
-13655 -3186 -3273 -3372 0
-13655 -3186 -3271 -3374 0
-13655 -3186 -3270 -3376 0
-13655 -3184 -3330 0
-13655 -3184 -3315 -3332 0
-13655 -3184 -3313 -3334 0
-13655 -3184 -3311 -3336 0
-13655 -3184 -3309 -3338 0
-13655 -3184 -3307 -3340 0
-13655 -3184 -3305 -3342 0
-13655 -3184 -3303 -3344 0
-13655 -3184 -3301 -3346 0
-13655 -3184 -3299 -3348 0
-13655 -3184 -3297 -3350 0
-13655 -3184 -3295 -3352 0
-13655 -3184 -3293 -3354 0
-13655 -3184 -3291 -3356 0
-13655 -3184 -3289 -3358 0
-13655 -3184 -3287 -3360 0
-13655 -3184 -3285 -3362 0
-13655 -3184 -3283 -3364 0
-13655 -3184 -3281 -3366 0
-13655 -3184 -3279 -3368 0
-13655 -3184 -3277 -3370 0
-13655 -3184 -3275 -3372 0
-13655 -3184 -3273 -3374 0
-13655 -3184 -3271 -3376 0
-13655 -3184 -3270 -3378 0
-13655 -3182 -3332 0
-13655 -3182 -3315 -3334 0
-13655 -3182 -3313 -3336 0
-13655 -3182 -3311 -3338 0
-13655 -3182 -3309 -3340 0
-13655 -3182 -3307 -3342 0
-13655 -3182 -3305 -3344 0
-13655 -3182 -3303 -3346 0
-13655 -3182 -3301 -3348 0
-13655 -3182 -3299 -3350 0
-13655 -3182 -3297 -3352 0
-13655 -3182 -3295 -3354 0
-13655 -3182 -3293 -3356 0
-13655 -3182 -3291 -3358 0
-13655 -3182 -3289 -3360 0
-13655 -3182 -3287 -3362 0
-13655 -3182 -3285 -3364 0
-13655 -3182 -3283 -3366 0
-13655 -3182 -3281 -3368 0
-13655 -3182 -3279 -3370 0
-13655 -3182 -3277 -3372 0
-13655 -3182 -3275 -3374 0
-13655 -3182 -3273 -3376 0
-13655 -3182 -3271 -3378 0
-13655 -3182 -3270 0
-13655 -3180 -3334 0
-13655 -3180 -3315 -3336 0
-13655 -3180 -3313 -3338 0
-13655 -3180 -3311 -3340 0
-13655 -3180 -3309 -3342 0
-13655 -3180 -3307 -3344 0
-13655 -3180 -3305 -3346 0
-13655 -3180 -3303 -3348 0
-13655 -3180 -3301 -3350 0
-13655 -3180 -3299 -3352 0
-13655 -3180 -3297 -3354 0
-13655 -3180 -3295 -3356 0
-13655 -3180 -3293 -3358 0
-13655 -3180 -3291 -3360 0
-13655 -3180 -3289 -3362 0
-13655 -3180 -3287 -3364 0
-13655 -3180 -3285 -3366 0
-13655 -3180 -3283 -3368 0
-13655 -3180 -3281 -3370 0
-13655 -3180 -3279 -3372 0
-13655 -3180 -3277 -3374 0
-13655 -3180 -3275 -3376 0
-13655 -3180 -3273 -3378 0
-13655 -3180 -3271 0
-13655 -3180 -3270 0
-13655 -3178 -3336 0
-13655 -3178 -3315 -3338 0
-13655 -3178 -3313 -3340 0
-13655 -3178 -3311 -3342 0
-13655 -3178 -3309 -3344 0
-13655 -3178 -3307 -3346 0
-13655 -3178 -3305 -3348 0
-13655 -3178 -3303 -3350 0
-13655 -3178 -3301 -3352 0
-13655 -3178 -3299 -3354 0
-13655 -3178 -3297 -3356 0
-13655 -3178 -3295 -3358 0
-13655 -3178 -3293 -3360 0
-13655 -3178 -3291 -3362 0
-13655 -3178 -3289 -3364 0
-13655 -3178 -3287 -3366 0
-13655 -3178 -3285 -3368 0
-13655 -3178 -3283 -3370 0
-13655 -3178 -3281 -3372 0
-13655 -3178 -3279 -3374 0
-13655 -3178 -3277 -3376 0
-13655 -3178 -3275 -3378 0
-13655 -3178 -3273 0
-13655 -3178 -3271 0
-13655 -3178 -3270 0
-13655 -3177 -3338 0
-13655 -3177 -3315 -3340 0
-13655 -3177 -3313 -3342 0
-13655 -3177 -3311 -3344 0
-13655 -3177 -3309 -3346 0
-13655 -3177 -3307 -3348 0
-13655 -3177 -3305 -3350 0
-13655 -3177 -3303 -3352 0
-13655 -3177 -3301 -3354 0
-13655 -3177 -3299 -3356 0
-13655 -3177 -3297 -3358 0
-13655 -3177 -3295 -3360 0
-13655 -3177 -3293 -3362 0
-13655 -3177 -3291 -3364 0
-13655 -3177 -3289 -3366 0
-13655 -3177 -3287 -3368 0
-13655 -3177 -3285 -3370 0
-13655 -3177 -3283 -3372 0
-13655 -3177 -3281 -3374 0
-13655 -3177 -3279 -3376 0
-13655 -3177 -3277 -3378 0
-13655 -3177 -3275 0
-13655 -3177 -3273 0
-13655 -3177 -3271 0
-13655 -3177 -3270 0
13655 3275 3378 0
13655 3277 3376 0
13655 3279 3374 0
13655 3281 3372 0
13655 3283 3370 0
13655 3285 3368 0
13655 3287 3366 0
13655 3289 3364 0
13655 3291 3362 0
13655 3293 3360 0
13655 3295 3358 0
13655 3297 3356 0
13655 3299 3354 0
13655 3301 3352 0
13655 3303 3350 0
13655 3305 3348 0
13655 3307 3346 0
13655 3309 3344 0
13655 3311 3342 0
13655 3313 3340 0
13655 3315 3338 0
13655 3177 3273 3378 0
13655 3177 3275 3376 0
13655 3177 3277 3374 0
13655 3177 3279 3372 0
13655 3177 3281 3370 0
13655 3177 3283 3368 0
13655 3177 3285 3366 0
13655 3177 3287 3364 0
13655 3177 3289 3362 0
13655 3177 3291 3360 0
13655 3177 3293 3358 0
13655 3177 3295 3356 0
13655 3177 3297 3354 0
13655 3177 3299 3352 0
13655 3177 3301 3350 0
13655 3177 3303 3348 0
13655 3177 3305 3346 0
13655 3177 3307 3344 0
13655 3177 3309 3342 0
13655 3177 3311 3340 0
13655 3177 3313 3338 0
13655 3177 3315 3336 0
13655 3178 3271 3378 0
13655 3178 3273 3376 0
13655 3178 3275 3374 0
13655 3178 3277 3372 0
13655 3178 3279 3370 0
13655 3178 3281 3368 0
13655 3178 3283 3366 0
13655 3178 3285 3364 0
13655 3178 3287 3362 0
13655 3178 3289 3360 0
13655 3178 3291 3358 0
13655 3178 3293 3356 0
13655 3178 3295 3354 0
13655 3178 3297 3352 0
13655 3178 3299 3350 0
13655 3178 3301 3348 0
13655 3178 3303 3346 0
13655 3178 3305 3344 0
13655 3178 3307 3342 0
13655 3178 3309 3340 0
13655 3178 3311 3338 0
13655 3178 3313 3336 0
13655 3178 3315 3334 0
13655 3180 3270 3378 0
13655 3180 3271 3376 0
13655 3180 3273 3374 0
13655 3180 3275 3372 0
13655 3180 3277 3370 0
13655 3180 3279 3368 0
13655 3180 3281 3366 0
13655 3180 3283 3364 0
13655 3180 3285 3362 0
13655 3180 3287 3360 0
13655 3180 3289 3358 0
13655 3180 3291 3356 0
13655 3180 3293 3354 0
13655 3180 3295 3352 0
13655 3180 3297 3350 0
13655 3180 3299 3348 0
13655 3180 3301 3346 0
13655 3180 3303 3344 0
13655 3180 3305 3342 0
13655 3180 3307 3340 0
13655 3180 3309 3338 0
13655 3180 3311 3336 0
13655 3180 3313 3334 0
13655 3180 3315 3332 0
13655 3182 3378 0
13655 3182 3270 3376 0
13655 3182 3271 3374 0
13655 3182 3273 3372 0
13655 3182 3275 3370 0
13655 3182 3277 3368 0
13655 3182 3279 3366 0
13655 3182 3281 3364 0
13655 3182 3283 3362 0
13655 3182 3285 3360 0
13655 3182 3287 3358 0
13655 3182 3289 3356 0
13655 3182 3291 3354 0
13655 3182 3293 3352 0
13655 3182 3295 3350 0
13655 3182 3297 3348 0
13655 3182 3299 3346 0
13655 3182 3301 3344 0
13655 3182 3303 3342 0
13655 3182 3305 3340 0
13655 3182 3307 3338 0
13655 3182 3309 3336 0
13655 3182 3311 3334 0
13655 3182 3313 3332 0
13655 3182 3315 3330 0
13655 3184 3376 0
13655 3184 3270 3374 0
13655 3184 3271 3372 0
13655 3184 3273 3370 0
13655 3184 3275 3368 0
13655 3184 3277 3366 0
13655 3184 3279 3364 0
13655 3184 3281 3362 0
13655 3184 3283 3360 0
13655 3184 3285 3358 0
13655 3184 3287 3356 0
13655 3184 3289 3354 0
13655 3184 3291 3352 0
13655 3184 3293 3350 0
13655 3184 3295 3348 0
13655 3184 3297 3346 0
13655 3184 3299 3344 0
13655 3184 3301 3342 0
13655 3184 3303 3340 0
13655 3184 3305 3338 0
13655 3184 3307 3336 0
13655 3184 3309 3334 0
13655 3184 3311 3332 0
13655 3184 3313 3330 0
13655 3184 3315 3328 0
13655 3186 3374 0
13655 3186 3270 3372 0
13655 3186 3271 3370 0
13655 3186 3273 3368 0
13655 3186 3275 3366 0
13655 3186 3277 3364 0
13655 3186 3279 3362 0
13655 3186 3281 3360 0
13655 3186 3283 3358 0
13655 3186 3285 3356 0
13655 3186 3287 3354 0
13655 3186 3289 3352 0
13655 3186 3291 3350 0
13655 3186 3293 3348 0
13655 3186 3295 3346 0
13655 3186 3297 3344 0
13655 3186 3299 3342 0
13655 3186 3301 3340 0
13655 3186 3303 3338 0
13655 3186 3305 3336 0
13655 3186 3307 3334 0
13655 3186 3309 3332 0
13655 3186 3311 3330 0
13655 3186 3313 3328 0
13655 3186 3315 3326 0
13655 3188 3372 0
13655 3188 3270 3370 0
13655 3188 3271 3368 0
13655 3188 3273 3366 0
13655 3188 3275 3364 0
13655 3188 3277 3362 0
13655 3188 3279 3360 0
13655 3188 3281 3358 0
13655 3188 3283 3356 0
13655 3188 3285 3354 0
13655 3188 3287 3352 0
13655 3188 3289 3350 0
13655 3188 3291 3348 0
13655 3188 3293 3346 0
13655 3188 3295 3344 0
13655 3188 3297 3342 0
13655 3188 3299 3340 0
13655 3188 3301 3338 0
13655 3188 3303 3336 0
13655 3188 3305 3334 0
13655 3188 3307 3332 0
13655 3188 3309 3330 0
13655 3188 3311 3328 0
13655 3188 3313 3326 0
13655 3188 3315 3324 0
13655 3190 3370 0
13655 3190 3270 3368 0
13655 3190 3271 3366 0
13655 3190 3273 3364 0
13655 3190 3275 3362 0
13655 3190 3277 3360 0
13655 3190 3279 3358 0
13655 3190 3281 3356 0
13655 3190 3283 3354 0
13655 3190 3285 3352 0
13655 3190 3287 3350 0
13655 3190 3289 3348 0
13655 3190 3291 3346 0
13655 3190 3293 3344 0
13655 3190 3295 3342 0
13655 3190 3297 3340 0
13655 3190 3299 3338 0
13655 3190 3301 3336 0
13655 3190 3303 3334 0
13655 3190 3305 3332 0
13655 3190 3307 3330 0
13655 3190 3309 3328 0
13655 3190 3311 3326 0
13655 3190 3313 3324 0
13655 3190 3315 3322 0
13655 3192 3368 0
13655 3192 3270 3366 0
13655 3192 3271 3364 0
13655 3192 3273 3362 0
13655 3192 3275 3360 0
13655 3192 3277 3358 0
13655 3192 3279 3356 0
13655 3192 3281 3354 0
13655 3192 3283 3352 0
13655 3192 3285 3350 0
13655 3192 3287 3348 0
13655 3192 3289 3346 0
13655 3192 3291 3344 0
13655 3192 3293 3342 0
13655 3192 3295 3340 0
13655 3192 3297 3338 0
13655 3192 3299 3336 0
13655 3192 3301 3334 0
13655 3192 3303 3332 0
13655 3192 3305 3330 0
13655 3192 3307 3328 0
13655 3192 3309 3326 0
13655 3192 3311 3324 0
13655 3192 3313 3322 0
13655 3192 3315 3320 0
13655 3194 3366 0
13655 3194 3270 3364 0
13655 3194 3271 3362 0
13655 3194 3273 3360 0
13655 3194 3275 3358 0
13655 3194 3277 3356 0
13655 3194 3279 3354 0
13655 3194 3281 3352 0
13655 3194 3283 3350 0
13655 3194 3285 3348 0
13655 3194 3287 3346 0
13655 3194 3289 3344 0
13655 3194 3291 3342 0
13655 3194 3293 3340 0
13655 3194 3295 3338 0
13655 3194 3297 3336 0
13655 3194 3299 3334 0
13655 3194 3301 3332 0
13655 3194 3303 3330 0
13655 3194 3305 3328 0
13655 3194 3307 3326 0
13655 3194 3309 3324 0
13655 3194 3311 3322 0
13655 3194 3313 3320 0
13655 3194 3315 3318 0
13655 3196 3364 0
13655 3196 3270 3362 0
13655 3196 3271 3360 0
13655 3196 3273 3358 0
13655 3196 3275 3356 0
13655 3196 3277 3354 0
13655 3196 3279 3352 0
13655 3196 3281 3350 0
13655 3196 3283 3348 0
13655 3196 3285 3346 0
13655 3196 3287 3344 0
13655 3196 3289 3342 0
13655 3196 3291 3340 0
13655 3196 3293 3338 0
13655 3196 3295 3336 0
13655 3196 3297 3334 0
13655 3196 3299 3332 0
13655 3196 3301 3330 0
13655 3196 3303 3328 0
13655 3196 3305 3326 0
13655 3196 3307 3324 0
13655 3196 3309 3322 0
13655 3196 3311 3320 0
13655 3196 3313 3318 0
13655 3196 3315 3317 0
13655 3198 3362 0
13655 3198 3270 3360 0
13655 3198 3271 3358 0
13655 3198 3273 3356 0
13655 3198 3275 3354 0
13655 3198 3277 3352 0
13655 3198 3279 3350 0
13655 3198 3281 3348 0
13655 3198 3283 3346 0
13655 3198 3285 3344 0
13655 3198 3287 3342 0
13655 3198 3289 3340 0
13655 3198 3291 3338 0
13655 3198 3293 3336 0
13655 3198 3295 3334 0
13655 3198 3297 3332 0
13655 3198 3299 3330 0
13655 3198 3301 3328 0
13655 3198 3303 3326 0
13655 3198 3305 3324 0
13655 3198 3307 3322 0
13655 3198 3309 3320 0
13655 3198 3311 3318 0
13655 3198 3313 3317 0
13655 3198 3315 0
13655 3200 3360 0
13655 3200 3270 3358 0
13655 3200 3271 3356 0
13655 3200 3273 3354 0
13655 3200 3275 3352 0
13655 3200 3277 3350 0
13655 3200 3279 3348 0
13655 3200 3281 3346 0
13655 3200 3283 3344 0
13655 3200 3285 3342 0
13655 3200 3287 3340 0
13655 3200 3289 3338 0
13655 3200 3291 3336 0
13655 3200 3293 3334 0
13655 3200 3295 3332 0
13655 3200 3297 3330 0
13655 3200 3299 3328 0
13655 3200 3301 3326 0
13655 3200 3303 3324 0
13655 3200 3305 3322 0
13655 3200 3307 3320 0
13655 3200 3309 3318 0
13655 3200 3311 3317 0
13655 3200 3313 0
13655 3200 3315 0
13655 3202 3358 0
13655 3202 3270 3356 0
13655 3202 3271 3354 0
13655 3202 3273 3352 0
13655 3202 3275 3350 0
13655 3202 3277 3348 0
13655 3202 3279 3346 0
13655 3202 3281 3344 0
13655 3202 3283 3342 0
13655 3202 3285 3340 0
13655 3202 3287 3338 0
13655 3202 3289 3336 0
13655 3202 3291 3334 0
13655 3202 3293 3332 0
13655 3202 3295 3330 0
13655 3202 3297 3328 0
13655 3202 3299 3326 0
13655 3202 3301 3324 0
13655 3202 3303 3322 0
13655 3202 3305 3320 0
13655 3202 3307 3318 0
13655 3202 3309 3317 0
13655 3202 3311 0
13655 3202 3313 0
13655 3202 3315 0
13655 3204 3356 0
13655 3204 3270 3354 0
13655 3204 3271 3352 0
13655 3204 3273 3350 0
13655 3204 3275 3348 0
13655 3204 3277 3346 0
13655 3204 3279 3344 0
13655 3204 3281 3342 0
13655 3204 3283 3340 0
13655 3204 3285 3338 0
13655 3204 3287 3336 0
13655 3204 3289 3334 0
13655 3204 3291 3332 0
13655 3204 3293 3330 0
13655 3204 3295 3328 0
13655 3204 3297 3326 0
13655 3204 3299 3324 0
13655 3204 3301 3322 0
13655 3204 3303 3320 0
13655 3204 3305 3318 0
13655 3204 3307 3317 0
13655 3204 3309 0
13655 3204 3311 0
13655 3204 3313 0
13655 3204 3315 0
13655 3206 3354 0
13655 3206 3270 3352 0
13655 3206 3271 3350 0
13655 3206 3273 3348 0
13655 3206 3275 3346 0
13655 3206 3277 3344 0
13655 3206 3279 3342 0
13655 3206 3281 3340 0
13655 3206 3283 3338 0
13655 3206 3285 3336 0
13655 3206 3287 3334 0
13655 3206 3289 3332 0
13655 3206 3291 3330 0
13655 3206 3293 3328 0
13655 3206 3295 3326 0
13655 3206 3297 3324 0
13655 3206 3299 3322 0
13655 3206 3301 3320 0
13655 3206 3303 3318 0
13655 3206 3305 3317 0
13655 3206 3307 0
13655 3206 3309 0
13655 3206 3311 0
13655 3206 3313 0
13655 3206 3315 0
c (((aux504 + aux507 + aux508)<=36)=tv=SATLiteral(13656))
-13656 3511 3612 0
-13656 3513 3610 0
-13656 3515 3608 0
-13656 3517 3606 0
-13656 3519 3604 0
-13656 3521 3602 0
-13656 3523 3600 0
-13656 3525 3598 0
-13656 3527 3596 0
-13656 3529 3594 0
-13656 3531 3592 0
-13656 3533 3590 0
-13656 3535 3588 0
-13656 3537 3586 0
-13656 3539 3584 0
-13656 3541 3582 0
-13656 3543 3580 0
-13656 3545 3578 0
-13656 3547 3576 0
-13656 3549 3574 0
-13656 3411 3509 3612 0
-13656 3411 3511 3610 0
-13656 3411 3513 3608 0
-13656 3411 3515 3606 0
-13656 3411 3517 3604 0
-13656 3411 3519 3602 0
-13656 3411 3521 3600 0
-13656 3411 3523 3598 0
-13656 3411 3525 3596 0
-13656 3411 3527 3594 0
-13656 3411 3529 3592 0
-13656 3411 3531 3590 0
-13656 3411 3533 3588 0
-13656 3411 3535 3586 0
-13656 3411 3537 3584 0
-13656 3411 3539 3582 0
-13656 3411 3541 3580 0
-13656 3411 3543 3578 0
-13656 3411 3545 3576 0
-13656 3411 3547 3574 0
-13656 3411 3549 3572 0
-13656 3412 3507 3612 0
-13656 3412 3509 3610 0
-13656 3412 3511 3608 0
-13656 3412 3513 3606 0
-13656 3412 3515 3604 0
-13656 3412 3517 3602 0
-13656 3412 3519 3600 0
-13656 3412 3521 3598 0
-13656 3412 3523 3596 0
-13656 3412 3525 3594 0
-13656 3412 3527 3592 0
-13656 3412 3529 3590 0
-13656 3412 3531 3588 0
-13656 3412 3533 3586 0
-13656 3412 3535 3584 0
-13656 3412 3537 3582 0
-13656 3412 3539 3580 0
-13656 3412 3541 3578 0
-13656 3412 3543 3576 0
-13656 3412 3545 3574 0
-13656 3412 3547 3572 0
-13656 3412 3549 3570 0
-13656 3414 3505 3612 0
-13656 3414 3507 3610 0
-13656 3414 3509 3608 0
-13656 3414 3511 3606 0
-13656 3414 3513 3604 0
-13656 3414 3515 3602 0
-13656 3414 3517 3600 0
-13656 3414 3519 3598 0
-13656 3414 3521 3596 0
-13656 3414 3523 3594 0
-13656 3414 3525 3592 0
-13656 3414 3527 3590 0
-13656 3414 3529 3588 0
-13656 3414 3531 3586 0
-13656 3414 3533 3584 0
-13656 3414 3535 3582 0
-13656 3414 3537 3580 0
-13656 3414 3539 3578 0
-13656 3414 3541 3576 0
-13656 3414 3543 3574 0
-13656 3414 3545 3572 0
-13656 3414 3547 3570 0
-13656 3414 3549 3568 0
-13656 3416 3504 3612 0
-13656 3416 3505 3610 0
-13656 3416 3507 3608 0
-13656 3416 3509 3606 0
-13656 3416 3511 3604 0
-13656 3416 3513 3602 0
-13656 3416 3515 3600 0
-13656 3416 3517 3598 0
-13656 3416 3519 3596 0
-13656 3416 3521 3594 0
-13656 3416 3523 3592 0
-13656 3416 3525 3590 0
-13656 3416 3527 3588 0
-13656 3416 3529 3586 0
-13656 3416 3531 3584 0
-13656 3416 3533 3582 0
-13656 3416 3535 3580 0
-13656 3416 3537 3578 0
-13656 3416 3539 3576 0
-13656 3416 3541 3574 0
-13656 3416 3543 3572 0
-13656 3416 3545 3570 0
-13656 3416 3547 3568 0
-13656 3416 3549 3566 0
-13656 3418 3612 0
-13656 3418 3504 3610 0
-13656 3418 3505 3608 0
-13656 3418 3507 3606 0
-13656 3418 3509 3604 0
-13656 3418 3511 3602 0
-13656 3418 3513 3600 0
-13656 3418 3515 3598 0
-13656 3418 3517 3596 0
-13656 3418 3519 3594 0
-13656 3418 3521 3592 0
-13656 3418 3523 3590 0
-13656 3418 3525 3588 0
-13656 3418 3527 3586 0
-13656 3418 3529 3584 0
-13656 3418 3531 3582 0
-13656 3418 3533 3580 0
-13656 3418 3535 3578 0
-13656 3418 3537 3576 0
-13656 3418 3539 3574 0
-13656 3418 3541 3572 0
-13656 3418 3543 3570 0
-13656 3418 3545 3568 0
-13656 3418 3547 3566 0
-13656 3418 3549 3564 0
-13656 3420 3610 0
-13656 3420 3504 3608 0
-13656 3420 3505 3606 0
-13656 3420 3507 3604 0
-13656 3420 3509 3602 0
-13656 3420 3511 3600 0
-13656 3420 3513 3598 0
-13656 3420 3515 3596 0
-13656 3420 3517 3594 0
-13656 3420 3519 3592 0
-13656 3420 3521 3590 0
-13656 3420 3523 3588 0
-13656 3420 3525 3586 0
-13656 3420 3527 3584 0
-13656 3420 3529 3582 0
-13656 3420 3531 3580 0
-13656 3420 3533 3578 0
-13656 3420 3535 3576 0
-13656 3420 3537 3574 0
-13656 3420 3539 3572 0
-13656 3420 3541 3570 0
-13656 3420 3543 3568 0
-13656 3420 3545 3566 0
-13656 3420 3547 3564 0
-13656 3420 3549 3562 0
-13656 3422 3608 0
-13656 3422 3504 3606 0
-13656 3422 3505 3604 0
-13656 3422 3507 3602 0
-13656 3422 3509 3600 0
-13656 3422 3511 3598 0
-13656 3422 3513 3596 0
-13656 3422 3515 3594 0
-13656 3422 3517 3592 0
-13656 3422 3519 3590 0
-13656 3422 3521 3588 0
-13656 3422 3523 3586 0
-13656 3422 3525 3584 0
-13656 3422 3527 3582 0
-13656 3422 3529 3580 0
-13656 3422 3531 3578 0
-13656 3422 3533 3576 0
-13656 3422 3535 3574 0
-13656 3422 3537 3572 0
-13656 3422 3539 3570 0
-13656 3422 3541 3568 0
-13656 3422 3543 3566 0
-13656 3422 3545 3564 0
-13656 3422 3547 3562 0
-13656 3422 3549 3560 0
-13656 3424 3606 0
-13656 3424 3504 3604 0
-13656 3424 3505 3602 0
-13656 3424 3507 3600 0
-13656 3424 3509 3598 0
-13656 3424 3511 3596 0
-13656 3424 3513 3594 0
-13656 3424 3515 3592 0
-13656 3424 3517 3590 0
-13656 3424 3519 3588 0
-13656 3424 3521 3586 0
-13656 3424 3523 3584 0
-13656 3424 3525 3582 0
-13656 3424 3527 3580 0
-13656 3424 3529 3578 0
-13656 3424 3531 3576 0
-13656 3424 3533 3574 0
-13656 3424 3535 3572 0
-13656 3424 3537 3570 0
-13656 3424 3539 3568 0
-13656 3424 3541 3566 0
-13656 3424 3543 3564 0
-13656 3424 3545 3562 0
-13656 3424 3547 3560 0
-13656 3424 3549 3558 0
-13656 3426 3604 0
-13656 3426 3504 3602 0
-13656 3426 3505 3600 0
-13656 3426 3507 3598 0
-13656 3426 3509 3596 0
-13656 3426 3511 3594 0
-13656 3426 3513 3592 0
-13656 3426 3515 3590 0
-13656 3426 3517 3588 0
-13656 3426 3519 3586 0
-13656 3426 3521 3584 0
-13656 3426 3523 3582 0
-13656 3426 3525 3580 0
-13656 3426 3527 3578 0
-13656 3426 3529 3576 0
-13656 3426 3531 3574 0
-13656 3426 3533 3572 0
-13656 3426 3535 3570 0
-13656 3426 3537 3568 0
-13656 3426 3539 3566 0
-13656 3426 3541 3564 0
-13656 3426 3543 3562 0
-13656 3426 3545 3560 0
-13656 3426 3547 3558 0
-13656 3426 3549 3556 0
-13656 3428 3602 0
-13656 3428 3504 3600 0
-13656 3428 3505 3598 0
-13656 3428 3507 3596 0
-13656 3428 3509 3594 0
-13656 3428 3511 3592 0
-13656 3428 3513 3590 0
-13656 3428 3515 3588 0
-13656 3428 3517 3586 0
-13656 3428 3519 3584 0
-13656 3428 3521 3582 0
-13656 3428 3523 3580 0
-13656 3428 3525 3578 0
-13656 3428 3527 3576 0
-13656 3428 3529 3574 0
-13656 3428 3531 3572 0
-13656 3428 3533 3570 0
-13656 3428 3535 3568 0
-13656 3428 3537 3566 0
-13656 3428 3539 3564 0
-13656 3428 3541 3562 0
-13656 3428 3543 3560 0
-13656 3428 3545 3558 0
-13656 3428 3547 3556 0
-13656 3428 3549 3554 0
-13656 3430 3600 0
-13656 3430 3504 3598 0
-13656 3430 3505 3596 0
-13656 3430 3507 3594 0
-13656 3430 3509 3592 0
-13656 3430 3511 3590 0
-13656 3430 3513 3588 0
-13656 3430 3515 3586 0
-13656 3430 3517 3584 0
-13656 3430 3519 3582 0
-13656 3430 3521 3580 0
-13656 3430 3523 3578 0
-13656 3430 3525 3576 0
-13656 3430 3527 3574 0
-13656 3430 3529 3572 0
-13656 3430 3531 3570 0
-13656 3430 3533 3568 0
-13656 3430 3535 3566 0
-13656 3430 3537 3564 0
-13656 3430 3539 3562 0
-13656 3430 3541 3560 0
-13656 3430 3543 3558 0
-13656 3430 3545 3556 0
-13656 3430 3547 3554 0
-13656 3430 3549 3552 0
-13656 3432 3598 0
-13656 3432 3504 3596 0
-13656 3432 3505 3594 0
-13656 3432 3507 3592 0
-13656 3432 3509 3590 0
-13656 3432 3511 3588 0
-13656 3432 3513 3586 0
-13656 3432 3515 3584 0
-13656 3432 3517 3582 0
-13656 3432 3519 3580 0
-13656 3432 3521 3578 0
-13656 3432 3523 3576 0
-13656 3432 3525 3574 0
-13656 3432 3527 3572 0
-13656 3432 3529 3570 0
-13656 3432 3531 3568 0
-13656 3432 3533 3566 0
-13656 3432 3535 3564 0
-13656 3432 3537 3562 0
-13656 3432 3539 3560 0
-13656 3432 3541 3558 0
-13656 3432 3543 3556 0
-13656 3432 3545 3554 0
-13656 3432 3547 3552 0
-13656 3432 3549 3551 0
-13656 3434 3596 0
-13656 3434 3504 3594 0
-13656 3434 3505 3592 0
-13656 3434 3507 3590 0
-13656 3434 3509 3588 0
-13656 3434 3511 3586 0
-13656 3434 3513 3584 0
-13656 3434 3515 3582 0
-13656 3434 3517 3580 0
-13656 3434 3519 3578 0
-13656 3434 3521 3576 0
-13656 3434 3523 3574 0
-13656 3434 3525 3572 0
-13656 3434 3527 3570 0
-13656 3434 3529 3568 0
-13656 3434 3531 3566 0
-13656 3434 3533 3564 0
-13656 3434 3535 3562 0
-13656 3434 3537 3560 0
-13656 3434 3539 3558 0
-13656 3434 3541 3556 0
-13656 3434 3543 3554 0
-13656 3434 3545 3552 0
-13656 3434 3547 3551 0
-13656 3434 3549 0
-13656 3436 3594 0
-13656 3436 3504 3592 0
-13656 3436 3505 3590 0
-13656 3436 3507 3588 0
-13656 3436 3509 3586 0
-13656 3436 3511 3584 0
-13656 3436 3513 3582 0
-13656 3436 3515 3580 0
-13656 3436 3517 3578 0
-13656 3436 3519 3576 0
-13656 3436 3521 3574 0
-13656 3436 3523 3572 0
-13656 3436 3525 3570 0
-13656 3436 3527 3568 0
-13656 3436 3529 3566 0
-13656 3436 3531 3564 0
-13656 3436 3533 3562 0
-13656 3436 3535 3560 0
-13656 3436 3537 3558 0
-13656 3436 3539 3556 0
-13656 3436 3541 3554 0
-13656 3436 3543 3552 0
-13656 3436 3545 3551 0
-13656 3436 3547 0
-13656 3436 3549 0
-13656 3438 3592 0
-13656 3438 3504 3590 0
-13656 3438 3505 3588 0
-13656 3438 3507 3586 0
-13656 3438 3509 3584 0
-13656 3438 3511 3582 0
-13656 3438 3513 3580 0
-13656 3438 3515 3578 0
-13656 3438 3517 3576 0
-13656 3438 3519 3574 0
-13656 3438 3521 3572 0
-13656 3438 3523 3570 0
-13656 3438 3525 3568 0
-13656 3438 3527 3566 0
-13656 3438 3529 3564 0
-13656 3438 3531 3562 0
-13656 3438 3533 3560 0
-13656 3438 3535 3558 0
-13656 3438 3537 3556 0
-13656 3438 3539 3554 0
-13656 3438 3541 3552 0
-13656 3438 3543 3551 0
-13656 3438 3545 0
-13656 3438 3547 0
-13656 3438 3549 0
-13656 3440 3590 0
-13656 3440 3504 3588 0
-13656 3440 3505 3586 0
-13656 3440 3507 3584 0
-13656 3440 3509 3582 0
-13656 3440 3511 3580 0
-13656 3440 3513 3578 0
-13656 3440 3515 3576 0
-13656 3440 3517 3574 0
-13656 3440 3519 3572 0
-13656 3440 3521 3570 0
-13656 3440 3523 3568 0
-13656 3440 3525 3566 0
-13656 3440 3527 3564 0
-13656 3440 3529 3562 0
-13656 3440 3531 3560 0
-13656 3440 3533 3558 0
-13656 3440 3535 3556 0
-13656 3440 3537 3554 0
-13656 3440 3539 3552 0
-13656 3440 3541 3551 0
-13656 3440 3543 0
-13656 3440 3545 0
-13656 3440 3547 0
-13656 3440 3549 0
13656 -3543 -3551 0
13656 -3541 -3552 0
13656 -3539 -3554 0
13656 -3537 -3556 0
13656 -3535 -3558 0
13656 -3533 -3560 0
13656 -3531 -3562 0
13656 -3529 -3564 0
13656 -3527 -3566 0
13656 -3525 -3568 0
13656 -3523 -3570 0
13656 -3521 -3572 0
13656 -3519 -3574 0
13656 -3517 -3576 0
13656 -3515 -3578 0
13656 -3513 -3580 0
13656 -3511 -3582 0
13656 -3509 -3584 0
13656 -3507 -3586 0
13656 -3505 -3588 0
13656 -3504 -3590 0
13656 -3440 -3545 -3551 0
13656 -3440 -3543 -3552 0
13656 -3440 -3541 -3554 0
13656 -3440 -3539 -3556 0
13656 -3440 -3537 -3558 0
13656 -3440 -3535 -3560 0
13656 -3440 -3533 -3562 0
13656 -3440 -3531 -3564 0
13656 -3440 -3529 -3566 0
13656 -3440 -3527 -3568 0
13656 -3440 -3525 -3570 0
13656 -3440 -3523 -3572 0
13656 -3440 -3521 -3574 0
13656 -3440 -3519 -3576 0
13656 -3440 -3517 -3578 0
13656 -3440 -3515 -3580 0
13656 -3440 -3513 -3582 0
13656 -3440 -3511 -3584 0
13656 -3440 -3509 -3586 0
13656 -3440 -3507 -3588 0
13656 -3440 -3505 -3590 0
13656 -3440 -3504 -3592 0
13656 -3438 -3547 -3551 0
13656 -3438 -3545 -3552 0
13656 -3438 -3543 -3554 0
13656 -3438 -3541 -3556 0
13656 -3438 -3539 -3558 0
13656 -3438 -3537 -3560 0
13656 -3438 -3535 -3562 0
13656 -3438 -3533 -3564 0
13656 -3438 -3531 -3566 0
13656 -3438 -3529 -3568 0
13656 -3438 -3527 -3570 0
13656 -3438 -3525 -3572 0
13656 -3438 -3523 -3574 0
13656 -3438 -3521 -3576 0
13656 -3438 -3519 -3578 0
13656 -3438 -3517 -3580 0
13656 -3438 -3515 -3582 0
13656 -3438 -3513 -3584 0
13656 -3438 -3511 -3586 0
13656 -3438 -3509 -3588 0
13656 -3438 -3507 -3590 0
13656 -3438 -3505 -3592 0
13656 -3438 -3504 -3594 0
13656 -3436 -3549 -3551 0
13656 -3436 -3547 -3552 0
13656 -3436 -3545 -3554 0
13656 -3436 -3543 -3556 0
13656 -3436 -3541 -3558 0
13656 -3436 -3539 -3560 0
13656 -3436 -3537 -3562 0
13656 -3436 -3535 -3564 0
13656 -3436 -3533 -3566 0
13656 -3436 -3531 -3568 0
13656 -3436 -3529 -3570 0
13656 -3436 -3527 -3572 0
13656 -3436 -3525 -3574 0
13656 -3436 -3523 -3576 0
13656 -3436 -3521 -3578 0
13656 -3436 -3519 -3580 0
13656 -3436 -3517 -3582 0
13656 -3436 -3515 -3584 0
13656 -3436 -3513 -3586 0
13656 -3436 -3511 -3588 0
13656 -3436 -3509 -3590 0
13656 -3436 -3507 -3592 0
13656 -3436 -3505 -3594 0
13656 -3436 -3504 -3596 0
13656 -3434 -3551 0
13656 -3434 -3549 -3552 0
13656 -3434 -3547 -3554 0
13656 -3434 -3545 -3556 0
13656 -3434 -3543 -3558 0
13656 -3434 -3541 -3560 0
13656 -3434 -3539 -3562 0
13656 -3434 -3537 -3564 0
13656 -3434 -3535 -3566 0
13656 -3434 -3533 -3568 0
13656 -3434 -3531 -3570 0
13656 -3434 -3529 -3572 0
13656 -3434 -3527 -3574 0
13656 -3434 -3525 -3576 0
13656 -3434 -3523 -3578 0
13656 -3434 -3521 -3580 0
13656 -3434 -3519 -3582 0
13656 -3434 -3517 -3584 0
13656 -3434 -3515 -3586 0
13656 -3434 -3513 -3588 0
13656 -3434 -3511 -3590 0
13656 -3434 -3509 -3592 0
13656 -3434 -3507 -3594 0
13656 -3434 -3505 -3596 0
13656 -3434 -3504 -3598 0
13656 -3432 -3552 0
13656 -3432 -3549 -3554 0
13656 -3432 -3547 -3556 0
13656 -3432 -3545 -3558 0
13656 -3432 -3543 -3560 0
13656 -3432 -3541 -3562 0
13656 -3432 -3539 -3564 0
13656 -3432 -3537 -3566 0
13656 -3432 -3535 -3568 0
13656 -3432 -3533 -3570 0
13656 -3432 -3531 -3572 0
13656 -3432 -3529 -3574 0
13656 -3432 -3527 -3576 0
13656 -3432 -3525 -3578 0
13656 -3432 -3523 -3580 0
13656 -3432 -3521 -3582 0
13656 -3432 -3519 -3584 0
13656 -3432 -3517 -3586 0
13656 -3432 -3515 -3588 0
13656 -3432 -3513 -3590 0
13656 -3432 -3511 -3592 0
13656 -3432 -3509 -3594 0
13656 -3432 -3507 -3596 0
13656 -3432 -3505 -3598 0
13656 -3432 -3504 -3600 0
13656 -3430 -3554 0
13656 -3430 -3549 -3556 0
13656 -3430 -3547 -3558 0
13656 -3430 -3545 -3560 0
13656 -3430 -3543 -3562 0
13656 -3430 -3541 -3564 0
13656 -3430 -3539 -3566 0
13656 -3430 -3537 -3568 0
13656 -3430 -3535 -3570 0
13656 -3430 -3533 -3572 0
13656 -3430 -3531 -3574 0
13656 -3430 -3529 -3576 0
13656 -3430 -3527 -3578 0
13656 -3430 -3525 -3580 0
13656 -3430 -3523 -3582 0
13656 -3430 -3521 -3584 0
13656 -3430 -3519 -3586 0
13656 -3430 -3517 -3588 0
13656 -3430 -3515 -3590 0
13656 -3430 -3513 -3592 0
13656 -3430 -3511 -3594 0
13656 -3430 -3509 -3596 0
13656 -3430 -3507 -3598 0
13656 -3430 -3505 -3600 0
13656 -3430 -3504 -3602 0
13656 -3428 -3556 0
13656 -3428 -3549 -3558 0
13656 -3428 -3547 -3560 0
13656 -3428 -3545 -3562 0
13656 -3428 -3543 -3564 0
13656 -3428 -3541 -3566 0
13656 -3428 -3539 -3568 0
13656 -3428 -3537 -3570 0
13656 -3428 -3535 -3572 0
13656 -3428 -3533 -3574 0
13656 -3428 -3531 -3576 0
13656 -3428 -3529 -3578 0
13656 -3428 -3527 -3580 0
13656 -3428 -3525 -3582 0
13656 -3428 -3523 -3584 0
13656 -3428 -3521 -3586 0
13656 -3428 -3519 -3588 0
13656 -3428 -3517 -3590 0
13656 -3428 -3515 -3592 0
13656 -3428 -3513 -3594 0
13656 -3428 -3511 -3596 0
13656 -3428 -3509 -3598 0
13656 -3428 -3507 -3600 0
13656 -3428 -3505 -3602 0
13656 -3428 -3504 -3604 0
13656 -3426 -3558 0
13656 -3426 -3549 -3560 0
13656 -3426 -3547 -3562 0
13656 -3426 -3545 -3564 0
13656 -3426 -3543 -3566 0
13656 -3426 -3541 -3568 0
13656 -3426 -3539 -3570 0
13656 -3426 -3537 -3572 0
13656 -3426 -3535 -3574 0
13656 -3426 -3533 -3576 0
13656 -3426 -3531 -3578 0
13656 -3426 -3529 -3580 0
13656 -3426 -3527 -3582 0
13656 -3426 -3525 -3584 0
13656 -3426 -3523 -3586 0
13656 -3426 -3521 -3588 0
13656 -3426 -3519 -3590 0
13656 -3426 -3517 -3592 0
13656 -3426 -3515 -3594 0
13656 -3426 -3513 -3596 0
13656 -3426 -3511 -3598 0
13656 -3426 -3509 -3600 0
13656 -3426 -3507 -3602 0
13656 -3426 -3505 -3604 0
13656 -3426 -3504 -3606 0
13656 -3424 -3560 0
13656 -3424 -3549 -3562 0
13656 -3424 -3547 -3564 0
13656 -3424 -3545 -3566 0
13656 -3424 -3543 -3568 0
13656 -3424 -3541 -3570 0
13656 -3424 -3539 -3572 0
13656 -3424 -3537 -3574 0
13656 -3424 -3535 -3576 0
13656 -3424 -3533 -3578 0
13656 -3424 -3531 -3580 0
13656 -3424 -3529 -3582 0
13656 -3424 -3527 -3584 0
13656 -3424 -3525 -3586 0
13656 -3424 -3523 -3588 0
13656 -3424 -3521 -3590 0
13656 -3424 -3519 -3592 0
13656 -3424 -3517 -3594 0
13656 -3424 -3515 -3596 0
13656 -3424 -3513 -3598 0
13656 -3424 -3511 -3600 0
13656 -3424 -3509 -3602 0
13656 -3424 -3507 -3604 0
13656 -3424 -3505 -3606 0
13656 -3424 -3504 -3608 0
13656 -3422 -3562 0
13656 -3422 -3549 -3564 0
13656 -3422 -3547 -3566 0
13656 -3422 -3545 -3568 0
13656 -3422 -3543 -3570 0
13656 -3422 -3541 -3572 0
13656 -3422 -3539 -3574 0
13656 -3422 -3537 -3576 0
13656 -3422 -3535 -3578 0
13656 -3422 -3533 -3580 0
13656 -3422 -3531 -3582 0
13656 -3422 -3529 -3584 0
13656 -3422 -3527 -3586 0
13656 -3422 -3525 -3588 0
13656 -3422 -3523 -3590 0
13656 -3422 -3521 -3592 0
13656 -3422 -3519 -3594 0
13656 -3422 -3517 -3596 0
13656 -3422 -3515 -3598 0
13656 -3422 -3513 -3600 0
13656 -3422 -3511 -3602 0
13656 -3422 -3509 -3604 0
13656 -3422 -3507 -3606 0
13656 -3422 -3505 -3608 0
13656 -3422 -3504 -3610 0
13656 -3420 -3564 0
13656 -3420 -3549 -3566 0
13656 -3420 -3547 -3568 0
13656 -3420 -3545 -3570 0
13656 -3420 -3543 -3572 0
13656 -3420 -3541 -3574 0
13656 -3420 -3539 -3576 0
13656 -3420 -3537 -3578 0
13656 -3420 -3535 -3580 0
13656 -3420 -3533 -3582 0
13656 -3420 -3531 -3584 0
13656 -3420 -3529 -3586 0
13656 -3420 -3527 -3588 0
13656 -3420 -3525 -3590 0
13656 -3420 -3523 -3592 0
13656 -3420 -3521 -3594 0
13656 -3420 -3519 -3596 0
13656 -3420 -3517 -3598 0
13656 -3420 -3515 -3600 0
13656 -3420 -3513 -3602 0
13656 -3420 -3511 -3604 0
13656 -3420 -3509 -3606 0
13656 -3420 -3507 -3608 0
13656 -3420 -3505 -3610 0
13656 -3420 -3504 -3612 0
13656 -3418 -3566 0
13656 -3418 -3549 -3568 0
13656 -3418 -3547 -3570 0
13656 -3418 -3545 -3572 0
13656 -3418 -3543 -3574 0
13656 -3418 -3541 -3576 0
13656 -3418 -3539 -3578 0
13656 -3418 -3537 -3580 0
13656 -3418 -3535 -3582 0
13656 -3418 -3533 -3584 0
13656 -3418 -3531 -3586 0
13656 -3418 -3529 -3588 0
13656 -3418 -3527 -3590 0
13656 -3418 -3525 -3592 0
13656 -3418 -3523 -3594 0
13656 -3418 -3521 -3596 0
13656 -3418 -3519 -3598 0
13656 -3418 -3517 -3600 0
13656 -3418 -3515 -3602 0
13656 -3418 -3513 -3604 0
13656 -3418 -3511 -3606 0
13656 -3418 -3509 -3608 0
13656 -3418 -3507 -3610 0
13656 -3418 -3505 -3612 0
13656 -3418 -3504 0
13656 -3416 -3568 0
13656 -3416 -3549 -3570 0
13656 -3416 -3547 -3572 0
13656 -3416 -3545 -3574 0
13656 -3416 -3543 -3576 0
13656 -3416 -3541 -3578 0
13656 -3416 -3539 -3580 0
13656 -3416 -3537 -3582 0
13656 -3416 -3535 -3584 0
13656 -3416 -3533 -3586 0
13656 -3416 -3531 -3588 0
13656 -3416 -3529 -3590 0
13656 -3416 -3527 -3592 0
13656 -3416 -3525 -3594 0
13656 -3416 -3523 -3596 0
13656 -3416 -3521 -3598 0
13656 -3416 -3519 -3600 0
13656 -3416 -3517 -3602 0
13656 -3416 -3515 -3604 0
13656 -3416 -3513 -3606 0
13656 -3416 -3511 -3608 0
13656 -3416 -3509 -3610 0
13656 -3416 -3507 -3612 0
13656 -3416 -3505 0
13656 -3416 -3504 0
13656 -3414 -3570 0
13656 -3414 -3549 -3572 0
13656 -3414 -3547 -3574 0
13656 -3414 -3545 -3576 0
13656 -3414 -3543 -3578 0
13656 -3414 -3541 -3580 0
13656 -3414 -3539 -3582 0
13656 -3414 -3537 -3584 0
13656 -3414 -3535 -3586 0
13656 -3414 -3533 -3588 0
13656 -3414 -3531 -3590 0
13656 -3414 -3529 -3592 0
13656 -3414 -3527 -3594 0
13656 -3414 -3525 -3596 0
13656 -3414 -3523 -3598 0
13656 -3414 -3521 -3600 0
13656 -3414 -3519 -3602 0
13656 -3414 -3517 -3604 0
13656 -3414 -3515 -3606 0
13656 -3414 -3513 -3608 0
13656 -3414 -3511 -3610 0
13656 -3414 -3509 -3612 0
13656 -3414 -3507 0
13656 -3414 -3505 0
13656 -3414 -3504 0
13656 -3412 -3572 0
13656 -3412 -3549 -3574 0
13656 -3412 -3547 -3576 0
13656 -3412 -3545 -3578 0
13656 -3412 -3543 -3580 0
13656 -3412 -3541 -3582 0
13656 -3412 -3539 -3584 0
13656 -3412 -3537 -3586 0
13656 -3412 -3535 -3588 0
13656 -3412 -3533 -3590 0
13656 -3412 -3531 -3592 0
13656 -3412 -3529 -3594 0
13656 -3412 -3527 -3596 0
13656 -3412 -3525 -3598 0
13656 -3412 -3523 -3600 0
13656 -3412 -3521 -3602 0
13656 -3412 -3519 -3604 0
13656 -3412 -3517 -3606 0
13656 -3412 -3515 -3608 0
13656 -3412 -3513 -3610 0
13656 -3412 -3511 -3612 0
13656 -3412 -3509 0
13656 -3412 -3507 0
13656 -3412 -3505 0
13656 -3412 -3504 0
13656 -3411 -3574 0
13656 -3411 -3549 -3576 0
13656 -3411 -3547 -3578 0
13656 -3411 -3545 -3580 0
13656 -3411 -3543 -3582 0
13656 -3411 -3541 -3584 0
13656 -3411 -3539 -3586 0
13656 -3411 -3537 -3588 0
13656 -3411 -3535 -3590 0
13656 -3411 -3533 -3592 0
13656 -3411 -3531 -3594 0
13656 -3411 -3529 -3596 0
13656 -3411 -3527 -3598 0
13656 -3411 -3525 -3600 0
13656 -3411 -3523 -3602 0
13656 -3411 -3521 -3604 0
13656 -3411 -3519 -3606 0
13656 -3411 -3517 -3608 0
13656 -3411 -3515 -3610 0
13656 -3411 -3513 -3612 0
13656 -3411 -3511 0
13656 -3411 -3509 0
13656 -3411 -3507 0
13656 -3411 -3505 0
13656 -3411 -3504 0
c ((36<=(aux504 + aux507 + aux508))=tv=SATLiteral(13657))
-13657 -3541 -3551 0
-13657 -3539 -3552 0
-13657 -3537 -3554 0
-13657 -3535 -3556 0
-13657 -3533 -3558 0
-13657 -3531 -3560 0
-13657 -3529 -3562 0
-13657 -3527 -3564 0
-13657 -3525 -3566 0
-13657 -3523 -3568 0
-13657 -3521 -3570 0
-13657 -3519 -3572 0
-13657 -3517 -3574 0
-13657 -3515 -3576 0
-13657 -3513 -3578 0
-13657 -3511 -3580 0
-13657 -3509 -3582 0
-13657 -3507 -3584 0
-13657 -3505 -3586 0
-13657 -3504 -3588 0
-13657 -3440 -3543 -3551 0
-13657 -3440 -3541 -3552 0
-13657 -3440 -3539 -3554 0
-13657 -3440 -3537 -3556 0
-13657 -3440 -3535 -3558 0
-13657 -3440 -3533 -3560 0
-13657 -3440 -3531 -3562 0
-13657 -3440 -3529 -3564 0
-13657 -3440 -3527 -3566 0
-13657 -3440 -3525 -3568 0
-13657 -3440 -3523 -3570 0
-13657 -3440 -3521 -3572 0
-13657 -3440 -3519 -3574 0
-13657 -3440 -3517 -3576 0
-13657 -3440 -3515 -3578 0
-13657 -3440 -3513 -3580 0
-13657 -3440 -3511 -3582 0
-13657 -3440 -3509 -3584 0
-13657 -3440 -3507 -3586 0
-13657 -3440 -3505 -3588 0
-13657 -3440 -3504 -3590 0
-13657 -3438 -3545 -3551 0
-13657 -3438 -3543 -3552 0
-13657 -3438 -3541 -3554 0
-13657 -3438 -3539 -3556 0
-13657 -3438 -3537 -3558 0
-13657 -3438 -3535 -3560 0
-13657 -3438 -3533 -3562 0
-13657 -3438 -3531 -3564 0
-13657 -3438 -3529 -3566 0
-13657 -3438 -3527 -3568 0
-13657 -3438 -3525 -3570 0
-13657 -3438 -3523 -3572 0
-13657 -3438 -3521 -3574 0
-13657 -3438 -3519 -3576 0
-13657 -3438 -3517 -3578 0
-13657 -3438 -3515 -3580 0
-13657 -3438 -3513 -3582 0
-13657 -3438 -3511 -3584 0
-13657 -3438 -3509 -3586 0
-13657 -3438 -3507 -3588 0
-13657 -3438 -3505 -3590 0
-13657 -3438 -3504 -3592 0
-13657 -3436 -3547 -3551 0
-13657 -3436 -3545 -3552 0
-13657 -3436 -3543 -3554 0
-13657 -3436 -3541 -3556 0
-13657 -3436 -3539 -3558 0
-13657 -3436 -3537 -3560 0
-13657 -3436 -3535 -3562 0
-13657 -3436 -3533 -3564 0
-13657 -3436 -3531 -3566 0
-13657 -3436 -3529 -3568 0
-13657 -3436 -3527 -3570 0
-13657 -3436 -3525 -3572 0
-13657 -3436 -3523 -3574 0
-13657 -3436 -3521 -3576 0
-13657 -3436 -3519 -3578 0
-13657 -3436 -3517 -3580 0
-13657 -3436 -3515 -3582 0
-13657 -3436 -3513 -3584 0
-13657 -3436 -3511 -3586 0
-13657 -3436 -3509 -3588 0
-13657 -3436 -3507 -3590 0
-13657 -3436 -3505 -3592 0
-13657 -3436 -3504 -3594 0
-13657 -3434 -3549 -3551 0
-13657 -3434 -3547 -3552 0
-13657 -3434 -3545 -3554 0
-13657 -3434 -3543 -3556 0
-13657 -3434 -3541 -3558 0
-13657 -3434 -3539 -3560 0
-13657 -3434 -3537 -3562 0
-13657 -3434 -3535 -3564 0
-13657 -3434 -3533 -3566 0
-13657 -3434 -3531 -3568 0
-13657 -3434 -3529 -3570 0
-13657 -3434 -3527 -3572 0
-13657 -3434 -3525 -3574 0
-13657 -3434 -3523 -3576 0
-13657 -3434 -3521 -3578 0
-13657 -3434 -3519 -3580 0
-13657 -3434 -3517 -3582 0
-13657 -3434 -3515 -3584 0
-13657 -3434 -3513 -3586 0
-13657 -3434 -3511 -3588 0
-13657 -3434 -3509 -3590 0
-13657 -3434 -3507 -3592 0
-13657 -3434 -3505 -3594 0
-13657 -3434 -3504 -3596 0
-13657 -3432 -3551 0
-13657 -3432 -3549 -3552 0
-13657 -3432 -3547 -3554 0
-13657 -3432 -3545 -3556 0
-13657 -3432 -3543 -3558 0
-13657 -3432 -3541 -3560 0
-13657 -3432 -3539 -3562 0
-13657 -3432 -3537 -3564 0
-13657 -3432 -3535 -3566 0
-13657 -3432 -3533 -3568 0
-13657 -3432 -3531 -3570 0
-13657 -3432 -3529 -3572 0
-13657 -3432 -3527 -3574 0
-13657 -3432 -3525 -3576 0
-13657 -3432 -3523 -3578 0
-13657 -3432 -3521 -3580 0
-13657 -3432 -3519 -3582 0
-13657 -3432 -3517 -3584 0
-13657 -3432 -3515 -3586 0
-13657 -3432 -3513 -3588 0
-13657 -3432 -3511 -3590 0
-13657 -3432 -3509 -3592 0
-13657 -3432 -3507 -3594 0
-13657 -3432 -3505 -3596 0
-13657 -3432 -3504 -3598 0
-13657 -3430 -3552 0
-13657 -3430 -3549 -3554 0
-13657 -3430 -3547 -3556 0
-13657 -3430 -3545 -3558 0
-13657 -3430 -3543 -3560 0
-13657 -3430 -3541 -3562 0
-13657 -3430 -3539 -3564 0
-13657 -3430 -3537 -3566 0
-13657 -3430 -3535 -3568 0
-13657 -3430 -3533 -3570 0
-13657 -3430 -3531 -3572 0
-13657 -3430 -3529 -3574 0
-13657 -3430 -3527 -3576 0
-13657 -3430 -3525 -3578 0
-13657 -3430 -3523 -3580 0
-13657 -3430 -3521 -3582 0
-13657 -3430 -3519 -3584 0
-13657 -3430 -3517 -3586 0
-13657 -3430 -3515 -3588 0
-13657 -3430 -3513 -3590 0
-13657 -3430 -3511 -3592 0
-13657 -3430 -3509 -3594 0
-13657 -3430 -3507 -3596 0
-13657 -3430 -3505 -3598 0
-13657 -3430 -3504 -3600 0
-13657 -3428 -3554 0
-13657 -3428 -3549 -3556 0
-13657 -3428 -3547 -3558 0
-13657 -3428 -3545 -3560 0
-13657 -3428 -3543 -3562 0
-13657 -3428 -3541 -3564 0
-13657 -3428 -3539 -3566 0
-13657 -3428 -3537 -3568 0
-13657 -3428 -3535 -3570 0
-13657 -3428 -3533 -3572 0
-13657 -3428 -3531 -3574 0
-13657 -3428 -3529 -3576 0
-13657 -3428 -3527 -3578 0
-13657 -3428 -3525 -3580 0
-13657 -3428 -3523 -3582 0
-13657 -3428 -3521 -3584 0
-13657 -3428 -3519 -3586 0
-13657 -3428 -3517 -3588 0
-13657 -3428 -3515 -3590 0
-13657 -3428 -3513 -3592 0
-13657 -3428 -3511 -3594 0
-13657 -3428 -3509 -3596 0
-13657 -3428 -3507 -3598 0
-13657 -3428 -3505 -3600 0
-13657 -3428 -3504 -3602 0
-13657 -3426 -3556 0
-13657 -3426 -3549 -3558 0
-13657 -3426 -3547 -3560 0
-13657 -3426 -3545 -3562 0
-13657 -3426 -3543 -3564 0
-13657 -3426 -3541 -3566 0
-13657 -3426 -3539 -3568 0
-13657 -3426 -3537 -3570 0
-13657 -3426 -3535 -3572 0
-13657 -3426 -3533 -3574 0
-13657 -3426 -3531 -3576 0
-13657 -3426 -3529 -3578 0
-13657 -3426 -3527 -3580 0
-13657 -3426 -3525 -3582 0
-13657 -3426 -3523 -3584 0
-13657 -3426 -3521 -3586 0
-13657 -3426 -3519 -3588 0
-13657 -3426 -3517 -3590 0
-13657 -3426 -3515 -3592 0
-13657 -3426 -3513 -3594 0
-13657 -3426 -3511 -3596 0
-13657 -3426 -3509 -3598 0
-13657 -3426 -3507 -3600 0
-13657 -3426 -3505 -3602 0
-13657 -3426 -3504 -3604 0
-13657 -3424 -3558 0
-13657 -3424 -3549 -3560 0
-13657 -3424 -3547 -3562 0
-13657 -3424 -3545 -3564 0
-13657 -3424 -3543 -3566 0
-13657 -3424 -3541 -3568 0
-13657 -3424 -3539 -3570 0
-13657 -3424 -3537 -3572 0
-13657 -3424 -3535 -3574 0
-13657 -3424 -3533 -3576 0
-13657 -3424 -3531 -3578 0
-13657 -3424 -3529 -3580 0
-13657 -3424 -3527 -3582 0
-13657 -3424 -3525 -3584 0
-13657 -3424 -3523 -3586 0
-13657 -3424 -3521 -3588 0
-13657 -3424 -3519 -3590 0
-13657 -3424 -3517 -3592 0
-13657 -3424 -3515 -3594 0
-13657 -3424 -3513 -3596 0
-13657 -3424 -3511 -3598 0
-13657 -3424 -3509 -3600 0
-13657 -3424 -3507 -3602 0
-13657 -3424 -3505 -3604 0
-13657 -3424 -3504 -3606 0
-13657 -3422 -3560 0
-13657 -3422 -3549 -3562 0
-13657 -3422 -3547 -3564 0
-13657 -3422 -3545 -3566 0
-13657 -3422 -3543 -3568 0
-13657 -3422 -3541 -3570 0
-13657 -3422 -3539 -3572 0
-13657 -3422 -3537 -3574 0
-13657 -3422 -3535 -3576 0
-13657 -3422 -3533 -3578 0
-13657 -3422 -3531 -3580 0
-13657 -3422 -3529 -3582 0
-13657 -3422 -3527 -3584 0
-13657 -3422 -3525 -3586 0
-13657 -3422 -3523 -3588 0
-13657 -3422 -3521 -3590 0
-13657 -3422 -3519 -3592 0
-13657 -3422 -3517 -3594 0
-13657 -3422 -3515 -3596 0
-13657 -3422 -3513 -3598 0
-13657 -3422 -3511 -3600 0
-13657 -3422 -3509 -3602 0
-13657 -3422 -3507 -3604 0
-13657 -3422 -3505 -3606 0
-13657 -3422 -3504 -3608 0
-13657 -3420 -3562 0
-13657 -3420 -3549 -3564 0
-13657 -3420 -3547 -3566 0
-13657 -3420 -3545 -3568 0
-13657 -3420 -3543 -3570 0
-13657 -3420 -3541 -3572 0
-13657 -3420 -3539 -3574 0
-13657 -3420 -3537 -3576 0
-13657 -3420 -3535 -3578 0
-13657 -3420 -3533 -3580 0
-13657 -3420 -3531 -3582 0
-13657 -3420 -3529 -3584 0
-13657 -3420 -3527 -3586 0
-13657 -3420 -3525 -3588 0
-13657 -3420 -3523 -3590 0
-13657 -3420 -3521 -3592 0
-13657 -3420 -3519 -3594 0
-13657 -3420 -3517 -3596 0
-13657 -3420 -3515 -3598 0
-13657 -3420 -3513 -3600 0
-13657 -3420 -3511 -3602 0
-13657 -3420 -3509 -3604 0
-13657 -3420 -3507 -3606 0
-13657 -3420 -3505 -3608 0
-13657 -3420 -3504 -3610 0
-13657 -3418 -3564 0
-13657 -3418 -3549 -3566 0
-13657 -3418 -3547 -3568 0
-13657 -3418 -3545 -3570 0
-13657 -3418 -3543 -3572 0
-13657 -3418 -3541 -3574 0
-13657 -3418 -3539 -3576 0
-13657 -3418 -3537 -3578 0
-13657 -3418 -3535 -3580 0
-13657 -3418 -3533 -3582 0
-13657 -3418 -3531 -3584 0
-13657 -3418 -3529 -3586 0
-13657 -3418 -3527 -3588 0
-13657 -3418 -3525 -3590 0
-13657 -3418 -3523 -3592 0
-13657 -3418 -3521 -3594 0
-13657 -3418 -3519 -3596 0
-13657 -3418 -3517 -3598 0
-13657 -3418 -3515 -3600 0
-13657 -3418 -3513 -3602 0
-13657 -3418 -3511 -3604 0
-13657 -3418 -3509 -3606 0
-13657 -3418 -3507 -3608 0
-13657 -3418 -3505 -3610 0
-13657 -3418 -3504 -3612 0
-13657 -3416 -3566 0
-13657 -3416 -3549 -3568 0
-13657 -3416 -3547 -3570 0
-13657 -3416 -3545 -3572 0
-13657 -3416 -3543 -3574 0
-13657 -3416 -3541 -3576 0
-13657 -3416 -3539 -3578 0
-13657 -3416 -3537 -3580 0
-13657 -3416 -3535 -3582 0
-13657 -3416 -3533 -3584 0
-13657 -3416 -3531 -3586 0
-13657 -3416 -3529 -3588 0
-13657 -3416 -3527 -3590 0
-13657 -3416 -3525 -3592 0
-13657 -3416 -3523 -3594 0
-13657 -3416 -3521 -3596 0
-13657 -3416 -3519 -3598 0
-13657 -3416 -3517 -3600 0
-13657 -3416 -3515 -3602 0
-13657 -3416 -3513 -3604 0
-13657 -3416 -3511 -3606 0
-13657 -3416 -3509 -3608 0
-13657 -3416 -3507 -3610 0
-13657 -3416 -3505 -3612 0
-13657 -3416 -3504 0
-13657 -3414 -3568 0
-13657 -3414 -3549 -3570 0
-13657 -3414 -3547 -3572 0
-13657 -3414 -3545 -3574 0
-13657 -3414 -3543 -3576 0
-13657 -3414 -3541 -3578 0
-13657 -3414 -3539 -3580 0
-13657 -3414 -3537 -3582 0
-13657 -3414 -3535 -3584 0
-13657 -3414 -3533 -3586 0
-13657 -3414 -3531 -3588 0
-13657 -3414 -3529 -3590 0
-13657 -3414 -3527 -3592 0
-13657 -3414 -3525 -3594 0
-13657 -3414 -3523 -3596 0
-13657 -3414 -3521 -3598 0
-13657 -3414 -3519 -3600 0
-13657 -3414 -3517 -3602 0
-13657 -3414 -3515 -3604 0
-13657 -3414 -3513 -3606 0
-13657 -3414 -3511 -3608 0
-13657 -3414 -3509 -3610 0
-13657 -3414 -3507 -3612 0
-13657 -3414 -3505 0
-13657 -3414 -3504 0
-13657 -3412 -3570 0
-13657 -3412 -3549 -3572 0
-13657 -3412 -3547 -3574 0
-13657 -3412 -3545 -3576 0
-13657 -3412 -3543 -3578 0
-13657 -3412 -3541 -3580 0
-13657 -3412 -3539 -3582 0
-13657 -3412 -3537 -3584 0
-13657 -3412 -3535 -3586 0
-13657 -3412 -3533 -3588 0
-13657 -3412 -3531 -3590 0
-13657 -3412 -3529 -3592 0
-13657 -3412 -3527 -3594 0
-13657 -3412 -3525 -3596 0
-13657 -3412 -3523 -3598 0
-13657 -3412 -3521 -3600 0
-13657 -3412 -3519 -3602 0
-13657 -3412 -3517 -3604 0
-13657 -3412 -3515 -3606 0
-13657 -3412 -3513 -3608 0
-13657 -3412 -3511 -3610 0
-13657 -3412 -3509 -3612 0
-13657 -3412 -3507 0
-13657 -3412 -3505 0
-13657 -3412 -3504 0
-13657 -3411 -3572 0
-13657 -3411 -3549 -3574 0
-13657 -3411 -3547 -3576 0
-13657 -3411 -3545 -3578 0
-13657 -3411 -3543 -3580 0
-13657 -3411 -3541 -3582 0
-13657 -3411 -3539 -3584 0
-13657 -3411 -3537 -3586 0
-13657 -3411 -3535 -3588 0
-13657 -3411 -3533 -3590 0
-13657 -3411 -3531 -3592 0
-13657 -3411 -3529 -3594 0
-13657 -3411 -3527 -3596 0
-13657 -3411 -3525 -3598 0
-13657 -3411 -3523 -3600 0
-13657 -3411 -3521 -3602 0
-13657 -3411 -3519 -3604 0
-13657 -3411 -3517 -3606 0
-13657 -3411 -3515 -3608 0
-13657 -3411 -3513 -3610 0
-13657 -3411 -3511 -3612 0
-13657 -3411 -3509 0
-13657 -3411 -3507 0
-13657 -3411 -3505 0
-13657 -3411 -3504 0
13657 3509 3612 0
13657 3511 3610 0
13657 3513 3608 0
13657 3515 3606 0
13657 3517 3604 0
13657 3519 3602 0
13657 3521 3600 0
13657 3523 3598 0
13657 3525 3596 0
13657 3527 3594 0
13657 3529 3592 0
13657 3531 3590 0
13657 3533 3588 0
13657 3535 3586 0
13657 3537 3584 0
13657 3539 3582 0
13657 3541 3580 0
13657 3543 3578 0
13657 3545 3576 0
13657 3547 3574 0
13657 3549 3572 0
13657 3411 3507 3612 0
13657 3411 3509 3610 0
13657 3411 3511 3608 0
13657 3411 3513 3606 0
13657 3411 3515 3604 0
13657 3411 3517 3602 0
13657 3411 3519 3600 0
13657 3411 3521 3598 0
13657 3411 3523 3596 0
13657 3411 3525 3594 0
13657 3411 3527 3592 0
13657 3411 3529 3590 0
13657 3411 3531 3588 0
13657 3411 3533 3586 0
13657 3411 3535 3584 0
13657 3411 3537 3582 0
13657 3411 3539 3580 0
13657 3411 3541 3578 0
13657 3411 3543 3576 0
13657 3411 3545 3574 0
13657 3411 3547 3572 0
13657 3411 3549 3570 0
13657 3412 3505 3612 0
13657 3412 3507 3610 0
13657 3412 3509 3608 0
13657 3412 3511 3606 0
13657 3412 3513 3604 0
13657 3412 3515 3602 0
13657 3412 3517 3600 0
13657 3412 3519 3598 0
13657 3412 3521 3596 0
13657 3412 3523 3594 0
13657 3412 3525 3592 0
13657 3412 3527 3590 0
13657 3412 3529 3588 0
13657 3412 3531 3586 0
13657 3412 3533 3584 0
13657 3412 3535 3582 0
13657 3412 3537 3580 0
13657 3412 3539 3578 0
13657 3412 3541 3576 0
13657 3412 3543 3574 0
13657 3412 3545 3572 0
13657 3412 3547 3570 0
13657 3412 3549 3568 0
13657 3414 3504 3612 0
13657 3414 3505 3610 0
13657 3414 3507 3608 0
13657 3414 3509 3606 0
13657 3414 3511 3604 0
13657 3414 3513 3602 0
13657 3414 3515 3600 0
13657 3414 3517 3598 0
13657 3414 3519 3596 0
13657 3414 3521 3594 0
13657 3414 3523 3592 0
13657 3414 3525 3590 0
13657 3414 3527 3588 0
13657 3414 3529 3586 0
13657 3414 3531 3584 0
13657 3414 3533 3582 0
13657 3414 3535 3580 0
13657 3414 3537 3578 0
13657 3414 3539 3576 0
13657 3414 3541 3574 0
13657 3414 3543 3572 0
13657 3414 3545 3570 0
13657 3414 3547 3568 0
13657 3414 3549 3566 0
13657 3416 3612 0
13657 3416 3504 3610 0
13657 3416 3505 3608 0
13657 3416 3507 3606 0
13657 3416 3509 3604 0
13657 3416 3511 3602 0
13657 3416 3513 3600 0
13657 3416 3515 3598 0
13657 3416 3517 3596 0
13657 3416 3519 3594 0
13657 3416 3521 3592 0
13657 3416 3523 3590 0
13657 3416 3525 3588 0
13657 3416 3527 3586 0
13657 3416 3529 3584 0
13657 3416 3531 3582 0
13657 3416 3533 3580 0
13657 3416 3535 3578 0
13657 3416 3537 3576 0
13657 3416 3539 3574 0
13657 3416 3541 3572 0
13657 3416 3543 3570 0
13657 3416 3545 3568 0
13657 3416 3547 3566 0
13657 3416 3549 3564 0
13657 3418 3610 0
13657 3418 3504 3608 0
13657 3418 3505 3606 0
13657 3418 3507 3604 0
13657 3418 3509 3602 0
13657 3418 3511 3600 0
13657 3418 3513 3598 0
13657 3418 3515 3596 0
13657 3418 3517 3594 0
13657 3418 3519 3592 0
13657 3418 3521 3590 0
13657 3418 3523 3588 0
13657 3418 3525 3586 0
13657 3418 3527 3584 0
13657 3418 3529 3582 0
13657 3418 3531 3580 0
13657 3418 3533 3578 0
13657 3418 3535 3576 0
13657 3418 3537 3574 0
13657 3418 3539 3572 0
13657 3418 3541 3570 0
13657 3418 3543 3568 0
13657 3418 3545 3566 0
13657 3418 3547 3564 0
13657 3418 3549 3562 0
13657 3420 3608 0
13657 3420 3504 3606 0
13657 3420 3505 3604 0
13657 3420 3507 3602 0
13657 3420 3509 3600 0
13657 3420 3511 3598 0
13657 3420 3513 3596 0
13657 3420 3515 3594 0
13657 3420 3517 3592 0
13657 3420 3519 3590 0
13657 3420 3521 3588 0
13657 3420 3523 3586 0
13657 3420 3525 3584 0
13657 3420 3527 3582 0
13657 3420 3529 3580 0
13657 3420 3531 3578 0
13657 3420 3533 3576 0
13657 3420 3535 3574 0
13657 3420 3537 3572 0
13657 3420 3539 3570 0
13657 3420 3541 3568 0
13657 3420 3543 3566 0
13657 3420 3545 3564 0
13657 3420 3547 3562 0
13657 3420 3549 3560 0
13657 3422 3606 0
13657 3422 3504 3604 0
13657 3422 3505 3602 0
13657 3422 3507 3600 0
13657 3422 3509 3598 0
13657 3422 3511 3596 0
13657 3422 3513 3594 0
13657 3422 3515 3592 0
13657 3422 3517 3590 0
13657 3422 3519 3588 0
13657 3422 3521 3586 0
13657 3422 3523 3584 0
13657 3422 3525 3582 0
13657 3422 3527 3580 0
13657 3422 3529 3578 0
13657 3422 3531 3576 0
13657 3422 3533 3574 0
13657 3422 3535 3572 0
13657 3422 3537 3570 0
13657 3422 3539 3568 0
13657 3422 3541 3566 0
13657 3422 3543 3564 0
13657 3422 3545 3562 0
13657 3422 3547 3560 0
13657 3422 3549 3558 0
13657 3424 3604 0
13657 3424 3504 3602 0
13657 3424 3505 3600 0
13657 3424 3507 3598 0
13657 3424 3509 3596 0
13657 3424 3511 3594 0
13657 3424 3513 3592 0
13657 3424 3515 3590 0
13657 3424 3517 3588 0
13657 3424 3519 3586 0
13657 3424 3521 3584 0
13657 3424 3523 3582 0
13657 3424 3525 3580 0
13657 3424 3527 3578 0
13657 3424 3529 3576 0
13657 3424 3531 3574 0
13657 3424 3533 3572 0
13657 3424 3535 3570 0
13657 3424 3537 3568 0
13657 3424 3539 3566 0
13657 3424 3541 3564 0
13657 3424 3543 3562 0
13657 3424 3545 3560 0
13657 3424 3547 3558 0
13657 3424 3549 3556 0
13657 3426 3602 0
13657 3426 3504 3600 0
13657 3426 3505 3598 0
13657 3426 3507 3596 0
13657 3426 3509 3594 0
13657 3426 3511 3592 0
13657 3426 3513 3590 0
13657 3426 3515 3588 0
13657 3426 3517 3586 0
13657 3426 3519 3584 0
13657 3426 3521 3582 0
13657 3426 3523 3580 0
13657 3426 3525 3578 0
13657 3426 3527 3576 0
13657 3426 3529 3574 0
13657 3426 3531 3572 0
13657 3426 3533 3570 0
13657 3426 3535 3568 0
13657 3426 3537 3566 0
13657 3426 3539 3564 0
13657 3426 3541 3562 0
13657 3426 3543 3560 0
13657 3426 3545 3558 0
13657 3426 3547 3556 0
13657 3426 3549 3554 0
13657 3428 3600 0
13657 3428 3504 3598 0
13657 3428 3505 3596 0
13657 3428 3507 3594 0
13657 3428 3509 3592 0
13657 3428 3511 3590 0
13657 3428 3513 3588 0
13657 3428 3515 3586 0
13657 3428 3517 3584 0
13657 3428 3519 3582 0
13657 3428 3521 3580 0
13657 3428 3523 3578 0
13657 3428 3525 3576 0
13657 3428 3527 3574 0
13657 3428 3529 3572 0
13657 3428 3531 3570 0
13657 3428 3533 3568 0
13657 3428 3535 3566 0
13657 3428 3537 3564 0
13657 3428 3539 3562 0
13657 3428 3541 3560 0
13657 3428 3543 3558 0
13657 3428 3545 3556 0
13657 3428 3547 3554 0
13657 3428 3549 3552 0
13657 3430 3598 0
13657 3430 3504 3596 0
13657 3430 3505 3594 0
13657 3430 3507 3592 0
13657 3430 3509 3590 0
13657 3430 3511 3588 0
13657 3430 3513 3586 0
13657 3430 3515 3584 0
13657 3430 3517 3582 0
13657 3430 3519 3580 0
13657 3430 3521 3578 0
13657 3430 3523 3576 0
13657 3430 3525 3574 0
13657 3430 3527 3572 0
13657 3430 3529 3570 0
13657 3430 3531 3568 0
13657 3430 3533 3566 0
13657 3430 3535 3564 0
13657 3430 3537 3562 0
13657 3430 3539 3560 0
13657 3430 3541 3558 0
13657 3430 3543 3556 0
13657 3430 3545 3554 0
13657 3430 3547 3552 0
13657 3430 3549 3551 0
13657 3432 3596 0
13657 3432 3504 3594 0
13657 3432 3505 3592 0
13657 3432 3507 3590 0
13657 3432 3509 3588 0
13657 3432 3511 3586 0
13657 3432 3513 3584 0
13657 3432 3515 3582 0
13657 3432 3517 3580 0
13657 3432 3519 3578 0
13657 3432 3521 3576 0
13657 3432 3523 3574 0
13657 3432 3525 3572 0
13657 3432 3527 3570 0
13657 3432 3529 3568 0
13657 3432 3531 3566 0
13657 3432 3533 3564 0
13657 3432 3535 3562 0
13657 3432 3537 3560 0
13657 3432 3539 3558 0
13657 3432 3541 3556 0
13657 3432 3543 3554 0
13657 3432 3545 3552 0
13657 3432 3547 3551 0
13657 3432 3549 0
13657 3434 3594 0
13657 3434 3504 3592 0
13657 3434 3505 3590 0
13657 3434 3507 3588 0
13657 3434 3509 3586 0
13657 3434 3511 3584 0
13657 3434 3513 3582 0
13657 3434 3515 3580 0
13657 3434 3517 3578 0
13657 3434 3519 3576 0
13657 3434 3521 3574 0
13657 3434 3523 3572 0
13657 3434 3525 3570 0
13657 3434 3527 3568 0
13657 3434 3529 3566 0
13657 3434 3531 3564 0
13657 3434 3533 3562 0
13657 3434 3535 3560 0
13657 3434 3537 3558 0
13657 3434 3539 3556 0
13657 3434 3541 3554 0
13657 3434 3543 3552 0
13657 3434 3545 3551 0
13657 3434 3547 0
13657 3434 3549 0
13657 3436 3592 0
13657 3436 3504 3590 0
13657 3436 3505 3588 0
13657 3436 3507 3586 0
13657 3436 3509 3584 0
13657 3436 3511 3582 0
13657 3436 3513 3580 0
13657 3436 3515 3578 0
13657 3436 3517 3576 0
13657 3436 3519 3574 0
13657 3436 3521 3572 0
13657 3436 3523 3570 0
13657 3436 3525 3568 0
13657 3436 3527 3566 0
13657 3436 3529 3564 0
13657 3436 3531 3562 0
13657 3436 3533 3560 0
13657 3436 3535 3558 0
13657 3436 3537 3556 0
13657 3436 3539 3554 0
13657 3436 3541 3552 0
13657 3436 3543 3551 0
13657 3436 3545 0
13657 3436 3547 0
13657 3436 3549 0
13657 3438 3590 0
13657 3438 3504 3588 0
13657 3438 3505 3586 0
13657 3438 3507 3584 0
13657 3438 3509 3582 0
13657 3438 3511 3580 0
13657 3438 3513 3578 0
13657 3438 3515 3576 0
13657 3438 3517 3574 0
13657 3438 3519 3572 0
13657 3438 3521 3570 0
13657 3438 3523 3568 0
13657 3438 3525 3566 0
13657 3438 3527 3564 0
13657 3438 3529 3562 0
13657 3438 3531 3560 0
13657 3438 3533 3558 0
13657 3438 3535 3556 0
13657 3438 3537 3554 0
13657 3438 3539 3552 0
13657 3438 3541 3551 0
13657 3438 3543 0
13657 3438 3545 0
13657 3438 3547 0
13657 3438 3549 0
13657 3440 3588 0
13657 3440 3504 3586 0
13657 3440 3505 3584 0
13657 3440 3507 3582 0
13657 3440 3509 3580 0
13657 3440 3511 3578 0
13657 3440 3513 3576 0
13657 3440 3515 3574 0
13657 3440 3517 3572 0
13657 3440 3519 3570 0
13657 3440 3521 3568 0
13657 3440 3523 3566 0
13657 3440 3525 3564 0
13657 3440 3527 3562 0
13657 3440 3529 3560 0
13657 3440 3531 3558 0
13657 3440 3533 3556 0
13657 3440 3535 3554 0
13657 3440 3537 3552 0
13657 3440 3539 3551 0
13657 3440 3541 0
13657 3440 3543 0
13657 3440 3545 0
13657 3440 3547 0
13657 3440 3549 0
c (((aux510 + aux513 + aux514)<=36)=tv=SATLiteral(13658))
-13658 3745 3846 0
-13658 3747 3844 0
-13658 3749 3842 0
-13658 3751 3840 0
-13658 3753 3838 0
-13658 3755 3836 0
-13658 3757 3834 0
-13658 3759 3832 0
-13658 3761 3830 0
-13658 3763 3828 0
-13658 3765 3826 0
-13658 3767 3824 0
-13658 3769 3822 0
-13658 3771 3820 0
-13658 3773 3818 0
-13658 3775 3816 0
-13658 3777 3814 0
-13658 3779 3812 0
-13658 3781 3810 0
-13658 3783 3808 0
-13658 3645 3743 3846 0
-13658 3645 3745 3844 0
-13658 3645 3747 3842 0
-13658 3645 3749 3840 0
-13658 3645 3751 3838 0
-13658 3645 3753 3836 0
-13658 3645 3755 3834 0
-13658 3645 3757 3832 0
-13658 3645 3759 3830 0
-13658 3645 3761 3828 0
-13658 3645 3763 3826 0
-13658 3645 3765 3824 0
-13658 3645 3767 3822 0
-13658 3645 3769 3820 0
-13658 3645 3771 3818 0
-13658 3645 3773 3816 0
-13658 3645 3775 3814 0
-13658 3645 3777 3812 0
-13658 3645 3779 3810 0
-13658 3645 3781 3808 0
-13658 3645 3783 3806 0
-13658 3646 3741 3846 0
-13658 3646 3743 3844 0
-13658 3646 3745 3842 0
-13658 3646 3747 3840 0
-13658 3646 3749 3838 0
-13658 3646 3751 3836 0
-13658 3646 3753 3834 0
-13658 3646 3755 3832 0
-13658 3646 3757 3830 0
-13658 3646 3759 3828 0
-13658 3646 3761 3826 0
-13658 3646 3763 3824 0
-13658 3646 3765 3822 0
-13658 3646 3767 3820 0
-13658 3646 3769 3818 0
-13658 3646 3771 3816 0
-13658 3646 3773 3814 0
-13658 3646 3775 3812 0
-13658 3646 3777 3810 0
-13658 3646 3779 3808 0
-13658 3646 3781 3806 0
-13658 3646 3783 3804 0
-13658 3648 3739 3846 0
-13658 3648 3741 3844 0
-13658 3648 3743 3842 0
-13658 3648 3745 3840 0
-13658 3648 3747 3838 0
-13658 3648 3749 3836 0
-13658 3648 3751 3834 0
-13658 3648 3753 3832 0
-13658 3648 3755 3830 0
-13658 3648 3757 3828 0
-13658 3648 3759 3826 0
-13658 3648 3761 3824 0
-13658 3648 3763 3822 0
-13658 3648 3765 3820 0
-13658 3648 3767 3818 0
-13658 3648 3769 3816 0
-13658 3648 3771 3814 0
-13658 3648 3773 3812 0
-13658 3648 3775 3810 0
-13658 3648 3777 3808 0
-13658 3648 3779 3806 0
-13658 3648 3781 3804 0
-13658 3648 3783 3802 0
-13658 3650 3738 3846 0
-13658 3650 3739 3844 0
-13658 3650 3741 3842 0
-13658 3650 3743 3840 0
-13658 3650 3745 3838 0
-13658 3650 3747 3836 0
-13658 3650 3749 3834 0
-13658 3650 3751 3832 0
-13658 3650 3753 3830 0
-13658 3650 3755 3828 0
-13658 3650 3757 3826 0
-13658 3650 3759 3824 0
-13658 3650 3761 3822 0
-13658 3650 3763 3820 0
-13658 3650 3765 3818 0
-13658 3650 3767 3816 0
-13658 3650 3769 3814 0
-13658 3650 3771 3812 0
-13658 3650 3773 3810 0
-13658 3650 3775 3808 0
-13658 3650 3777 3806 0
-13658 3650 3779 3804 0
-13658 3650 3781 3802 0
-13658 3650 3783 3800 0
-13658 3652 3846 0
-13658 3652 3738 3844 0
-13658 3652 3739 3842 0
-13658 3652 3741 3840 0
-13658 3652 3743 3838 0
-13658 3652 3745 3836 0
-13658 3652 3747 3834 0
-13658 3652 3749 3832 0
-13658 3652 3751 3830 0
-13658 3652 3753 3828 0
-13658 3652 3755 3826 0
-13658 3652 3757 3824 0
-13658 3652 3759 3822 0
-13658 3652 3761 3820 0
-13658 3652 3763 3818 0
-13658 3652 3765 3816 0
-13658 3652 3767 3814 0
-13658 3652 3769 3812 0
-13658 3652 3771 3810 0
-13658 3652 3773 3808 0
-13658 3652 3775 3806 0
-13658 3652 3777 3804 0
-13658 3652 3779 3802 0
-13658 3652 3781 3800 0
-13658 3652 3783 3798 0
-13658 3654 3844 0
-13658 3654 3738 3842 0
-13658 3654 3739 3840 0
-13658 3654 3741 3838 0
-13658 3654 3743 3836 0
-13658 3654 3745 3834 0
-13658 3654 3747 3832 0
-13658 3654 3749 3830 0
-13658 3654 3751 3828 0
-13658 3654 3753 3826 0
-13658 3654 3755 3824 0
-13658 3654 3757 3822 0
-13658 3654 3759 3820 0
-13658 3654 3761 3818 0
-13658 3654 3763 3816 0
-13658 3654 3765 3814 0
-13658 3654 3767 3812 0
-13658 3654 3769 3810 0
-13658 3654 3771 3808 0
-13658 3654 3773 3806 0
-13658 3654 3775 3804 0
-13658 3654 3777 3802 0
-13658 3654 3779 3800 0
-13658 3654 3781 3798 0
-13658 3654 3783 3796 0
-13658 3656 3842 0
-13658 3656 3738 3840 0
-13658 3656 3739 3838 0
-13658 3656 3741 3836 0
-13658 3656 3743 3834 0
-13658 3656 3745 3832 0
-13658 3656 3747 3830 0
-13658 3656 3749 3828 0
-13658 3656 3751 3826 0
-13658 3656 3753 3824 0
-13658 3656 3755 3822 0
-13658 3656 3757 3820 0
-13658 3656 3759 3818 0
-13658 3656 3761 3816 0
-13658 3656 3763 3814 0
-13658 3656 3765 3812 0
-13658 3656 3767 3810 0
-13658 3656 3769 3808 0
-13658 3656 3771 3806 0
-13658 3656 3773 3804 0
-13658 3656 3775 3802 0
-13658 3656 3777 3800 0
-13658 3656 3779 3798 0
-13658 3656 3781 3796 0
-13658 3656 3783 3794 0
-13658 3658 3840 0
-13658 3658 3738 3838 0
-13658 3658 3739 3836 0
-13658 3658 3741 3834 0
-13658 3658 3743 3832 0
-13658 3658 3745 3830 0
-13658 3658 3747 3828 0
-13658 3658 3749 3826 0
-13658 3658 3751 3824 0
-13658 3658 3753 3822 0
-13658 3658 3755 3820 0
-13658 3658 3757 3818 0
-13658 3658 3759 3816 0
-13658 3658 3761 3814 0
-13658 3658 3763 3812 0
-13658 3658 3765 3810 0
-13658 3658 3767 3808 0
-13658 3658 3769 3806 0
-13658 3658 3771 3804 0
-13658 3658 3773 3802 0
-13658 3658 3775 3800 0
-13658 3658 3777 3798 0
-13658 3658 3779 3796 0
-13658 3658 3781 3794 0
-13658 3658 3783 3792 0
-13658 3660 3838 0
-13658 3660 3738 3836 0
-13658 3660 3739 3834 0
-13658 3660 3741 3832 0
-13658 3660 3743 3830 0
-13658 3660 3745 3828 0
-13658 3660 3747 3826 0
-13658 3660 3749 3824 0
-13658 3660 3751 3822 0
-13658 3660 3753 3820 0
-13658 3660 3755 3818 0
-13658 3660 3757 3816 0
-13658 3660 3759 3814 0
-13658 3660 3761 3812 0
-13658 3660 3763 3810 0
-13658 3660 3765 3808 0
-13658 3660 3767 3806 0
-13658 3660 3769 3804 0
-13658 3660 3771 3802 0
-13658 3660 3773 3800 0
-13658 3660 3775 3798 0
-13658 3660 3777 3796 0
-13658 3660 3779 3794 0
-13658 3660 3781 3792 0
-13658 3660 3783 3790 0
-13658 3662 3836 0
-13658 3662 3738 3834 0
-13658 3662 3739 3832 0
-13658 3662 3741 3830 0
-13658 3662 3743 3828 0
-13658 3662 3745 3826 0
-13658 3662 3747 3824 0
-13658 3662 3749 3822 0
-13658 3662 3751 3820 0
-13658 3662 3753 3818 0
-13658 3662 3755 3816 0
-13658 3662 3757 3814 0
-13658 3662 3759 3812 0
-13658 3662 3761 3810 0
-13658 3662 3763 3808 0
-13658 3662 3765 3806 0
-13658 3662 3767 3804 0
-13658 3662 3769 3802 0
-13658 3662 3771 3800 0
-13658 3662 3773 3798 0
-13658 3662 3775 3796 0
-13658 3662 3777 3794 0
-13658 3662 3779 3792 0
-13658 3662 3781 3790 0
-13658 3662 3783 3788 0
-13658 3664 3834 0
-13658 3664 3738 3832 0
-13658 3664 3739 3830 0
-13658 3664 3741 3828 0
-13658 3664 3743 3826 0
-13658 3664 3745 3824 0
-13658 3664 3747 3822 0
-13658 3664 3749 3820 0
-13658 3664 3751 3818 0
-13658 3664 3753 3816 0
-13658 3664 3755 3814 0
-13658 3664 3757 3812 0
-13658 3664 3759 3810 0
-13658 3664 3761 3808 0
-13658 3664 3763 3806 0
-13658 3664 3765 3804 0
-13658 3664 3767 3802 0
-13658 3664 3769 3800 0
-13658 3664 3771 3798 0
-13658 3664 3773 3796 0
-13658 3664 3775 3794 0
-13658 3664 3777 3792 0
-13658 3664 3779 3790 0
-13658 3664 3781 3788 0
-13658 3664 3783 3786 0
-13658 3666 3832 0
-13658 3666 3738 3830 0
-13658 3666 3739 3828 0
-13658 3666 3741 3826 0
-13658 3666 3743 3824 0
-13658 3666 3745 3822 0
-13658 3666 3747 3820 0
-13658 3666 3749 3818 0
-13658 3666 3751 3816 0
-13658 3666 3753 3814 0
-13658 3666 3755 3812 0
-13658 3666 3757 3810 0
-13658 3666 3759 3808 0
-13658 3666 3761 3806 0
-13658 3666 3763 3804 0
-13658 3666 3765 3802 0
-13658 3666 3767 3800 0
-13658 3666 3769 3798 0
-13658 3666 3771 3796 0
-13658 3666 3773 3794 0
-13658 3666 3775 3792 0
-13658 3666 3777 3790 0
-13658 3666 3779 3788 0
-13658 3666 3781 3786 0
-13658 3666 3783 3785 0
-13658 3668 3830 0
-13658 3668 3738 3828 0
-13658 3668 3739 3826 0
-13658 3668 3741 3824 0
-13658 3668 3743 3822 0
-13658 3668 3745 3820 0
-13658 3668 3747 3818 0
-13658 3668 3749 3816 0
-13658 3668 3751 3814 0
-13658 3668 3753 3812 0
-13658 3668 3755 3810 0
-13658 3668 3757 3808 0
-13658 3668 3759 3806 0
-13658 3668 3761 3804 0
-13658 3668 3763 3802 0
-13658 3668 3765 3800 0
-13658 3668 3767 3798 0
-13658 3668 3769 3796 0
-13658 3668 3771 3794 0
-13658 3668 3773 3792 0
-13658 3668 3775 3790 0
-13658 3668 3777 3788 0
-13658 3668 3779 3786 0
-13658 3668 3781 3785 0
-13658 3668 3783 0
-13658 3670 3828 0
-13658 3670 3738 3826 0
-13658 3670 3739 3824 0
-13658 3670 3741 3822 0
-13658 3670 3743 3820 0
-13658 3670 3745 3818 0
-13658 3670 3747 3816 0
-13658 3670 3749 3814 0
-13658 3670 3751 3812 0
-13658 3670 3753 3810 0
-13658 3670 3755 3808 0
-13658 3670 3757 3806 0
-13658 3670 3759 3804 0
-13658 3670 3761 3802 0
-13658 3670 3763 3800 0
-13658 3670 3765 3798 0
-13658 3670 3767 3796 0
-13658 3670 3769 3794 0
-13658 3670 3771 3792 0
-13658 3670 3773 3790 0
-13658 3670 3775 3788 0
-13658 3670 3777 3786 0
-13658 3670 3779 3785 0
-13658 3670 3781 0
-13658 3670 3783 0
-13658 3672 3826 0
-13658 3672 3738 3824 0
-13658 3672 3739 3822 0
-13658 3672 3741 3820 0
-13658 3672 3743 3818 0
-13658 3672 3745 3816 0
-13658 3672 3747 3814 0
-13658 3672 3749 3812 0
-13658 3672 3751 3810 0
-13658 3672 3753 3808 0
-13658 3672 3755 3806 0
-13658 3672 3757 3804 0
-13658 3672 3759 3802 0
-13658 3672 3761 3800 0
-13658 3672 3763 3798 0
-13658 3672 3765 3796 0
-13658 3672 3767 3794 0
-13658 3672 3769 3792 0
-13658 3672 3771 3790 0
-13658 3672 3773 3788 0
-13658 3672 3775 3786 0
-13658 3672 3777 3785 0
-13658 3672 3779 0
-13658 3672 3781 0
-13658 3672 3783 0
-13658 3674 3824 0
-13658 3674 3738 3822 0
-13658 3674 3739 3820 0
-13658 3674 3741 3818 0
-13658 3674 3743 3816 0
-13658 3674 3745 3814 0
-13658 3674 3747 3812 0
-13658 3674 3749 3810 0
-13658 3674 3751 3808 0
-13658 3674 3753 3806 0
-13658 3674 3755 3804 0
-13658 3674 3757 3802 0
-13658 3674 3759 3800 0
-13658 3674 3761 3798 0
-13658 3674 3763 3796 0
-13658 3674 3765 3794 0
-13658 3674 3767 3792 0
-13658 3674 3769 3790 0
-13658 3674 3771 3788 0
-13658 3674 3773 3786 0
-13658 3674 3775 3785 0
-13658 3674 3777 0
-13658 3674 3779 0
-13658 3674 3781 0
-13658 3674 3783 0
13658 -3777 -3785 0
13658 -3775 -3786 0
13658 -3773 -3788 0
13658 -3771 -3790 0
13658 -3769 -3792 0
13658 -3767 -3794 0
13658 -3765 -3796 0
13658 -3763 -3798 0
13658 -3761 -3800 0
13658 -3759 -3802 0
13658 -3757 -3804 0
13658 -3755 -3806 0
13658 -3753 -3808 0
13658 -3751 -3810 0
13658 -3749 -3812 0
13658 -3747 -3814 0
13658 -3745 -3816 0
13658 -3743 -3818 0
13658 -3741 -3820 0
13658 -3739 -3822 0
13658 -3738 -3824 0
13658 -3674 -3779 -3785 0
13658 -3674 -3777 -3786 0
13658 -3674 -3775 -3788 0
13658 -3674 -3773 -3790 0
13658 -3674 -3771 -3792 0
13658 -3674 -3769 -3794 0
13658 -3674 -3767 -3796 0
13658 -3674 -3765 -3798 0
13658 -3674 -3763 -3800 0
13658 -3674 -3761 -3802 0
13658 -3674 -3759 -3804 0
13658 -3674 -3757 -3806 0
13658 -3674 -3755 -3808 0
13658 -3674 -3753 -3810 0
13658 -3674 -3751 -3812 0
13658 -3674 -3749 -3814 0
13658 -3674 -3747 -3816 0
13658 -3674 -3745 -3818 0
13658 -3674 -3743 -3820 0
13658 -3674 -3741 -3822 0
13658 -3674 -3739 -3824 0
13658 -3674 -3738 -3826 0
13658 -3672 -3781 -3785 0
13658 -3672 -3779 -3786 0
13658 -3672 -3777 -3788 0
13658 -3672 -3775 -3790 0
13658 -3672 -3773 -3792 0
13658 -3672 -3771 -3794 0
13658 -3672 -3769 -3796 0
13658 -3672 -3767 -3798 0
13658 -3672 -3765 -3800 0
13658 -3672 -3763 -3802 0
13658 -3672 -3761 -3804 0
13658 -3672 -3759 -3806 0
13658 -3672 -3757 -3808 0
13658 -3672 -3755 -3810 0
13658 -3672 -3753 -3812 0
13658 -3672 -3751 -3814 0
13658 -3672 -3749 -3816 0
13658 -3672 -3747 -3818 0
13658 -3672 -3745 -3820 0
13658 -3672 -3743 -3822 0
13658 -3672 -3741 -3824 0
13658 -3672 -3739 -3826 0
13658 -3672 -3738 -3828 0
13658 -3670 -3783 -3785 0
13658 -3670 -3781 -3786 0
13658 -3670 -3779 -3788 0
13658 -3670 -3777 -3790 0
13658 -3670 -3775 -3792 0
13658 -3670 -3773 -3794 0
13658 -3670 -3771 -3796 0
13658 -3670 -3769 -3798 0
13658 -3670 -3767 -3800 0
13658 -3670 -3765 -3802 0
13658 -3670 -3763 -3804 0
13658 -3670 -3761 -3806 0
13658 -3670 -3759 -3808 0
13658 -3670 -3757 -3810 0
13658 -3670 -3755 -3812 0
13658 -3670 -3753 -3814 0
13658 -3670 -3751 -3816 0
13658 -3670 -3749 -3818 0
13658 -3670 -3747 -3820 0
13658 -3670 -3745 -3822 0
13658 -3670 -3743 -3824 0
13658 -3670 -3741 -3826 0
13658 -3670 -3739 -3828 0
13658 -3670 -3738 -3830 0
13658 -3668 -3785 0
13658 -3668 -3783 -3786 0
13658 -3668 -3781 -3788 0
13658 -3668 -3779 -3790 0
13658 -3668 -3777 -3792 0
13658 -3668 -3775 -3794 0
13658 -3668 -3773 -3796 0
13658 -3668 -3771 -3798 0
13658 -3668 -3769 -3800 0
13658 -3668 -3767 -3802 0
13658 -3668 -3765 -3804 0
13658 -3668 -3763 -3806 0
13658 -3668 -3761 -3808 0
13658 -3668 -3759 -3810 0
13658 -3668 -3757 -3812 0
13658 -3668 -3755 -3814 0
13658 -3668 -3753 -3816 0
13658 -3668 -3751 -3818 0
13658 -3668 -3749 -3820 0
13658 -3668 -3747 -3822 0
13658 -3668 -3745 -3824 0
13658 -3668 -3743 -3826 0
13658 -3668 -3741 -3828 0
13658 -3668 -3739 -3830 0
13658 -3668 -3738 -3832 0
13658 -3666 -3786 0
13658 -3666 -3783 -3788 0
13658 -3666 -3781 -3790 0
13658 -3666 -3779 -3792 0
13658 -3666 -3777 -3794 0
13658 -3666 -3775 -3796 0
13658 -3666 -3773 -3798 0
13658 -3666 -3771 -3800 0
13658 -3666 -3769 -3802 0
13658 -3666 -3767 -3804 0
13658 -3666 -3765 -3806 0
13658 -3666 -3763 -3808 0
13658 -3666 -3761 -3810 0
13658 -3666 -3759 -3812 0
13658 -3666 -3757 -3814 0
13658 -3666 -3755 -3816 0
13658 -3666 -3753 -3818 0
13658 -3666 -3751 -3820 0
13658 -3666 -3749 -3822 0
13658 -3666 -3747 -3824 0
13658 -3666 -3745 -3826 0
13658 -3666 -3743 -3828 0
13658 -3666 -3741 -3830 0
13658 -3666 -3739 -3832 0
13658 -3666 -3738 -3834 0
13658 -3664 -3788 0
13658 -3664 -3783 -3790 0
13658 -3664 -3781 -3792 0
13658 -3664 -3779 -3794 0
13658 -3664 -3777 -3796 0
13658 -3664 -3775 -3798 0
13658 -3664 -3773 -3800 0
13658 -3664 -3771 -3802 0
13658 -3664 -3769 -3804 0
13658 -3664 -3767 -3806 0
13658 -3664 -3765 -3808 0
13658 -3664 -3763 -3810 0
13658 -3664 -3761 -3812 0
13658 -3664 -3759 -3814 0
13658 -3664 -3757 -3816 0
13658 -3664 -3755 -3818 0
13658 -3664 -3753 -3820 0
13658 -3664 -3751 -3822 0
13658 -3664 -3749 -3824 0
13658 -3664 -3747 -3826 0
13658 -3664 -3745 -3828 0
13658 -3664 -3743 -3830 0
13658 -3664 -3741 -3832 0
13658 -3664 -3739 -3834 0
13658 -3664 -3738 -3836 0
13658 -3662 -3790 0
13658 -3662 -3783 -3792 0
13658 -3662 -3781 -3794 0
13658 -3662 -3779 -3796 0
13658 -3662 -3777 -3798 0
13658 -3662 -3775 -3800 0
13658 -3662 -3773 -3802 0
13658 -3662 -3771 -3804 0
13658 -3662 -3769 -3806 0
13658 -3662 -3767 -3808 0
13658 -3662 -3765 -3810 0
13658 -3662 -3763 -3812 0
13658 -3662 -3761 -3814 0
13658 -3662 -3759 -3816 0
13658 -3662 -3757 -3818 0
13658 -3662 -3755 -3820 0
13658 -3662 -3753 -3822 0
13658 -3662 -3751 -3824 0
13658 -3662 -3749 -3826 0
13658 -3662 -3747 -3828 0
13658 -3662 -3745 -3830 0
13658 -3662 -3743 -3832 0
13658 -3662 -3741 -3834 0
13658 -3662 -3739 -3836 0
13658 -3662 -3738 -3838 0
13658 -3660 -3792 0
13658 -3660 -3783 -3794 0
13658 -3660 -3781 -3796 0
13658 -3660 -3779 -3798 0
13658 -3660 -3777 -3800 0
13658 -3660 -3775 -3802 0
13658 -3660 -3773 -3804 0
13658 -3660 -3771 -3806 0
13658 -3660 -3769 -3808 0
13658 -3660 -3767 -3810 0
13658 -3660 -3765 -3812 0
13658 -3660 -3763 -3814 0
13658 -3660 -3761 -3816 0
13658 -3660 -3759 -3818 0
13658 -3660 -3757 -3820 0
13658 -3660 -3755 -3822 0
13658 -3660 -3753 -3824 0
13658 -3660 -3751 -3826 0
13658 -3660 -3749 -3828 0
13658 -3660 -3747 -3830 0
13658 -3660 -3745 -3832 0
13658 -3660 -3743 -3834 0
13658 -3660 -3741 -3836 0
13658 -3660 -3739 -3838 0
13658 -3660 -3738 -3840 0
13658 -3658 -3794 0
13658 -3658 -3783 -3796 0
13658 -3658 -3781 -3798 0
13658 -3658 -3779 -3800 0
13658 -3658 -3777 -3802 0
13658 -3658 -3775 -3804 0
13658 -3658 -3773 -3806 0
13658 -3658 -3771 -3808 0
13658 -3658 -3769 -3810 0
13658 -3658 -3767 -3812 0
13658 -3658 -3765 -3814 0
13658 -3658 -3763 -3816 0
13658 -3658 -3761 -3818 0
13658 -3658 -3759 -3820 0
13658 -3658 -3757 -3822 0
13658 -3658 -3755 -3824 0
13658 -3658 -3753 -3826 0
13658 -3658 -3751 -3828 0
13658 -3658 -3749 -3830 0
13658 -3658 -3747 -3832 0
13658 -3658 -3745 -3834 0
13658 -3658 -3743 -3836 0
13658 -3658 -3741 -3838 0
13658 -3658 -3739 -3840 0
13658 -3658 -3738 -3842 0
13658 -3656 -3796 0
13658 -3656 -3783 -3798 0
13658 -3656 -3781 -3800 0
13658 -3656 -3779 -3802 0
13658 -3656 -3777 -3804 0
13658 -3656 -3775 -3806 0
13658 -3656 -3773 -3808 0
13658 -3656 -3771 -3810 0
13658 -3656 -3769 -3812 0
13658 -3656 -3767 -3814 0
13658 -3656 -3765 -3816 0
13658 -3656 -3763 -3818 0
13658 -3656 -3761 -3820 0
13658 -3656 -3759 -3822 0
13658 -3656 -3757 -3824 0
13658 -3656 -3755 -3826 0
13658 -3656 -3753 -3828 0
13658 -3656 -3751 -3830 0
13658 -3656 -3749 -3832 0
13658 -3656 -3747 -3834 0
13658 -3656 -3745 -3836 0
13658 -3656 -3743 -3838 0
13658 -3656 -3741 -3840 0
13658 -3656 -3739 -3842 0
13658 -3656 -3738 -3844 0
13658 -3654 -3798 0
13658 -3654 -3783 -3800 0
13658 -3654 -3781 -3802 0
13658 -3654 -3779 -3804 0
13658 -3654 -3777 -3806 0
13658 -3654 -3775 -3808 0
13658 -3654 -3773 -3810 0
13658 -3654 -3771 -3812 0
13658 -3654 -3769 -3814 0
13658 -3654 -3767 -3816 0
13658 -3654 -3765 -3818 0
13658 -3654 -3763 -3820 0
13658 -3654 -3761 -3822 0
13658 -3654 -3759 -3824 0
13658 -3654 -3757 -3826 0
13658 -3654 -3755 -3828 0
13658 -3654 -3753 -3830 0
13658 -3654 -3751 -3832 0
13658 -3654 -3749 -3834 0
13658 -3654 -3747 -3836 0
13658 -3654 -3745 -3838 0
13658 -3654 -3743 -3840 0
13658 -3654 -3741 -3842 0
13658 -3654 -3739 -3844 0
13658 -3654 -3738 -3846 0
13658 -3652 -3800 0
13658 -3652 -3783 -3802 0
13658 -3652 -3781 -3804 0
13658 -3652 -3779 -3806 0
13658 -3652 -3777 -3808 0
13658 -3652 -3775 -3810 0
13658 -3652 -3773 -3812 0
13658 -3652 -3771 -3814 0
13658 -3652 -3769 -3816 0
13658 -3652 -3767 -3818 0
13658 -3652 -3765 -3820 0
13658 -3652 -3763 -3822 0
13658 -3652 -3761 -3824 0
13658 -3652 -3759 -3826 0
13658 -3652 -3757 -3828 0
13658 -3652 -3755 -3830 0
13658 -3652 -3753 -3832 0
13658 -3652 -3751 -3834 0
13658 -3652 -3749 -3836 0
13658 -3652 -3747 -3838 0
13658 -3652 -3745 -3840 0
13658 -3652 -3743 -3842 0
13658 -3652 -3741 -3844 0
13658 -3652 -3739 -3846 0
13658 -3652 -3738 0
13658 -3650 -3802 0
13658 -3650 -3783 -3804 0
13658 -3650 -3781 -3806 0
13658 -3650 -3779 -3808 0
13658 -3650 -3777 -3810 0
13658 -3650 -3775 -3812 0
13658 -3650 -3773 -3814 0
13658 -3650 -3771 -3816 0
13658 -3650 -3769 -3818 0
13658 -3650 -3767 -3820 0
13658 -3650 -3765 -3822 0
13658 -3650 -3763 -3824 0
13658 -3650 -3761 -3826 0
13658 -3650 -3759 -3828 0
13658 -3650 -3757 -3830 0
13658 -3650 -3755 -3832 0
13658 -3650 -3753 -3834 0
13658 -3650 -3751 -3836 0
13658 -3650 -3749 -3838 0
13658 -3650 -3747 -3840 0
13658 -3650 -3745 -3842 0
13658 -3650 -3743 -3844 0
13658 -3650 -3741 -3846 0
13658 -3650 -3739 0
13658 -3650 -3738 0
13658 -3648 -3804 0
13658 -3648 -3783 -3806 0
13658 -3648 -3781 -3808 0
13658 -3648 -3779 -3810 0
13658 -3648 -3777 -3812 0
13658 -3648 -3775 -3814 0
13658 -3648 -3773 -3816 0
13658 -3648 -3771 -3818 0
13658 -3648 -3769 -3820 0
13658 -3648 -3767 -3822 0
13658 -3648 -3765 -3824 0
13658 -3648 -3763 -3826 0
13658 -3648 -3761 -3828 0
13658 -3648 -3759 -3830 0
13658 -3648 -3757 -3832 0
13658 -3648 -3755 -3834 0
13658 -3648 -3753 -3836 0
13658 -3648 -3751 -3838 0
13658 -3648 -3749 -3840 0
13658 -3648 -3747 -3842 0
13658 -3648 -3745 -3844 0
13658 -3648 -3743 -3846 0
13658 -3648 -3741 0
13658 -3648 -3739 0
13658 -3648 -3738 0
13658 -3646 -3806 0
13658 -3646 -3783 -3808 0
13658 -3646 -3781 -3810 0
13658 -3646 -3779 -3812 0
13658 -3646 -3777 -3814 0
13658 -3646 -3775 -3816 0
13658 -3646 -3773 -3818 0
13658 -3646 -3771 -3820 0
13658 -3646 -3769 -3822 0
13658 -3646 -3767 -3824 0
13658 -3646 -3765 -3826 0
13658 -3646 -3763 -3828 0
13658 -3646 -3761 -3830 0
13658 -3646 -3759 -3832 0
13658 -3646 -3757 -3834 0
13658 -3646 -3755 -3836 0
13658 -3646 -3753 -3838 0
13658 -3646 -3751 -3840 0
13658 -3646 -3749 -3842 0
13658 -3646 -3747 -3844 0
13658 -3646 -3745 -3846 0
13658 -3646 -3743 0
13658 -3646 -3741 0
13658 -3646 -3739 0
13658 -3646 -3738 0
13658 -3645 -3808 0
13658 -3645 -3783 -3810 0
13658 -3645 -3781 -3812 0
13658 -3645 -3779 -3814 0
13658 -3645 -3777 -3816 0
13658 -3645 -3775 -3818 0
13658 -3645 -3773 -3820 0
13658 -3645 -3771 -3822 0
13658 -3645 -3769 -3824 0
13658 -3645 -3767 -3826 0
13658 -3645 -3765 -3828 0
13658 -3645 -3763 -3830 0
13658 -3645 -3761 -3832 0
13658 -3645 -3759 -3834 0
13658 -3645 -3757 -3836 0
13658 -3645 -3755 -3838 0
13658 -3645 -3753 -3840 0
13658 -3645 -3751 -3842 0
13658 -3645 -3749 -3844 0
13658 -3645 -3747 -3846 0
13658 -3645 -3745 0
13658 -3645 -3743 0
13658 -3645 -3741 0
13658 -3645 -3739 0
13658 -3645 -3738 0
c ((36<=(aux510 + aux513 + aux514))=tv=SATLiteral(13659))
-13659 -3775 -3785 0
-13659 -3773 -3786 0
-13659 -3771 -3788 0
-13659 -3769 -3790 0
-13659 -3767 -3792 0
-13659 -3765 -3794 0
-13659 -3763 -3796 0
-13659 -3761 -3798 0
-13659 -3759 -3800 0
-13659 -3757 -3802 0
-13659 -3755 -3804 0
-13659 -3753 -3806 0
-13659 -3751 -3808 0
-13659 -3749 -3810 0
-13659 -3747 -3812 0
-13659 -3745 -3814 0
-13659 -3743 -3816 0
-13659 -3741 -3818 0
-13659 -3739 -3820 0
-13659 -3738 -3822 0
-13659 -3674 -3777 -3785 0
-13659 -3674 -3775 -3786 0
-13659 -3674 -3773 -3788 0
-13659 -3674 -3771 -3790 0
-13659 -3674 -3769 -3792 0
-13659 -3674 -3767 -3794 0
-13659 -3674 -3765 -3796 0
-13659 -3674 -3763 -3798 0
-13659 -3674 -3761 -3800 0
-13659 -3674 -3759 -3802 0
-13659 -3674 -3757 -3804 0
-13659 -3674 -3755 -3806 0
-13659 -3674 -3753 -3808 0
-13659 -3674 -3751 -3810 0
-13659 -3674 -3749 -3812 0
-13659 -3674 -3747 -3814 0
-13659 -3674 -3745 -3816 0
-13659 -3674 -3743 -3818 0
-13659 -3674 -3741 -3820 0
-13659 -3674 -3739 -3822 0
-13659 -3674 -3738 -3824 0
-13659 -3672 -3779 -3785 0
-13659 -3672 -3777 -3786 0
-13659 -3672 -3775 -3788 0
-13659 -3672 -3773 -3790 0
-13659 -3672 -3771 -3792 0
-13659 -3672 -3769 -3794 0
-13659 -3672 -3767 -3796 0
-13659 -3672 -3765 -3798 0
-13659 -3672 -3763 -3800 0
-13659 -3672 -3761 -3802 0
-13659 -3672 -3759 -3804 0
-13659 -3672 -3757 -3806 0
-13659 -3672 -3755 -3808 0
-13659 -3672 -3753 -3810 0
-13659 -3672 -3751 -3812 0
-13659 -3672 -3749 -3814 0
-13659 -3672 -3747 -3816 0
-13659 -3672 -3745 -3818 0
-13659 -3672 -3743 -3820 0
-13659 -3672 -3741 -3822 0
-13659 -3672 -3739 -3824 0
-13659 -3672 -3738 -3826 0
-13659 -3670 -3781 -3785 0
-13659 -3670 -3779 -3786 0
-13659 -3670 -3777 -3788 0
-13659 -3670 -3775 -3790 0
-13659 -3670 -3773 -3792 0
-13659 -3670 -3771 -3794 0
-13659 -3670 -3769 -3796 0
-13659 -3670 -3767 -3798 0
-13659 -3670 -3765 -3800 0
-13659 -3670 -3763 -3802 0
-13659 -3670 -3761 -3804 0
-13659 -3670 -3759 -3806 0
-13659 -3670 -3757 -3808 0
-13659 -3670 -3755 -3810 0
-13659 -3670 -3753 -3812 0
-13659 -3670 -3751 -3814 0
-13659 -3670 -3749 -3816 0
-13659 -3670 -3747 -3818 0
-13659 -3670 -3745 -3820 0
-13659 -3670 -3743 -3822 0
-13659 -3670 -3741 -3824 0
-13659 -3670 -3739 -3826 0
-13659 -3670 -3738 -3828 0
-13659 -3668 -3783 -3785 0
-13659 -3668 -3781 -3786 0
-13659 -3668 -3779 -3788 0
-13659 -3668 -3777 -3790 0
-13659 -3668 -3775 -3792 0
-13659 -3668 -3773 -3794 0
-13659 -3668 -3771 -3796 0
-13659 -3668 -3769 -3798 0
-13659 -3668 -3767 -3800 0
-13659 -3668 -3765 -3802 0
-13659 -3668 -3763 -3804 0
-13659 -3668 -3761 -3806 0
-13659 -3668 -3759 -3808 0
-13659 -3668 -3757 -3810 0
-13659 -3668 -3755 -3812 0
-13659 -3668 -3753 -3814 0
-13659 -3668 -3751 -3816 0
-13659 -3668 -3749 -3818 0
-13659 -3668 -3747 -3820 0
-13659 -3668 -3745 -3822 0
-13659 -3668 -3743 -3824 0
-13659 -3668 -3741 -3826 0
-13659 -3668 -3739 -3828 0
-13659 -3668 -3738 -3830 0
-13659 -3666 -3785 0
-13659 -3666 -3783 -3786 0
-13659 -3666 -3781 -3788 0
-13659 -3666 -3779 -3790 0
-13659 -3666 -3777 -3792 0
-13659 -3666 -3775 -3794 0
-13659 -3666 -3773 -3796 0
-13659 -3666 -3771 -3798 0
-13659 -3666 -3769 -3800 0
-13659 -3666 -3767 -3802 0
-13659 -3666 -3765 -3804 0
-13659 -3666 -3763 -3806 0
-13659 -3666 -3761 -3808 0
-13659 -3666 -3759 -3810 0
-13659 -3666 -3757 -3812 0
-13659 -3666 -3755 -3814 0
-13659 -3666 -3753 -3816 0
-13659 -3666 -3751 -3818 0
-13659 -3666 -3749 -3820 0
-13659 -3666 -3747 -3822 0
-13659 -3666 -3745 -3824 0
-13659 -3666 -3743 -3826 0
-13659 -3666 -3741 -3828 0
-13659 -3666 -3739 -3830 0
-13659 -3666 -3738 -3832 0
-13659 -3664 -3786 0
-13659 -3664 -3783 -3788 0
-13659 -3664 -3781 -3790 0
-13659 -3664 -3779 -3792 0
-13659 -3664 -3777 -3794 0
-13659 -3664 -3775 -3796 0
-13659 -3664 -3773 -3798 0
-13659 -3664 -3771 -3800 0
-13659 -3664 -3769 -3802 0
-13659 -3664 -3767 -3804 0
-13659 -3664 -3765 -3806 0
-13659 -3664 -3763 -3808 0
-13659 -3664 -3761 -3810 0
-13659 -3664 -3759 -3812 0
-13659 -3664 -3757 -3814 0
-13659 -3664 -3755 -3816 0
-13659 -3664 -3753 -3818 0
-13659 -3664 -3751 -3820 0
-13659 -3664 -3749 -3822 0
-13659 -3664 -3747 -3824 0
-13659 -3664 -3745 -3826 0
-13659 -3664 -3743 -3828 0
-13659 -3664 -3741 -3830 0
-13659 -3664 -3739 -3832 0
-13659 -3664 -3738 -3834 0
-13659 -3662 -3788 0
-13659 -3662 -3783 -3790 0
-13659 -3662 -3781 -3792 0
-13659 -3662 -3779 -3794 0
-13659 -3662 -3777 -3796 0
-13659 -3662 -3775 -3798 0
-13659 -3662 -3773 -3800 0
-13659 -3662 -3771 -3802 0
-13659 -3662 -3769 -3804 0
-13659 -3662 -3767 -3806 0
-13659 -3662 -3765 -3808 0
-13659 -3662 -3763 -3810 0
-13659 -3662 -3761 -3812 0
-13659 -3662 -3759 -3814 0
-13659 -3662 -3757 -3816 0
-13659 -3662 -3755 -3818 0
-13659 -3662 -3753 -3820 0
-13659 -3662 -3751 -3822 0
-13659 -3662 -3749 -3824 0
-13659 -3662 -3747 -3826 0
-13659 -3662 -3745 -3828 0
-13659 -3662 -3743 -3830 0
-13659 -3662 -3741 -3832 0
-13659 -3662 -3739 -3834 0
-13659 -3662 -3738 -3836 0
-13659 -3660 -3790 0
-13659 -3660 -3783 -3792 0
-13659 -3660 -3781 -3794 0
-13659 -3660 -3779 -3796 0
-13659 -3660 -3777 -3798 0
-13659 -3660 -3775 -3800 0
-13659 -3660 -3773 -3802 0
-13659 -3660 -3771 -3804 0
-13659 -3660 -3769 -3806 0
-13659 -3660 -3767 -3808 0
-13659 -3660 -3765 -3810 0
-13659 -3660 -3763 -3812 0
-13659 -3660 -3761 -3814 0
-13659 -3660 -3759 -3816 0
-13659 -3660 -3757 -3818 0
-13659 -3660 -3755 -3820 0
-13659 -3660 -3753 -3822 0
-13659 -3660 -3751 -3824 0
-13659 -3660 -3749 -3826 0
-13659 -3660 -3747 -3828 0
-13659 -3660 -3745 -3830 0
-13659 -3660 -3743 -3832 0
-13659 -3660 -3741 -3834 0
-13659 -3660 -3739 -3836 0
-13659 -3660 -3738 -3838 0
-13659 -3658 -3792 0
-13659 -3658 -3783 -3794 0
-13659 -3658 -3781 -3796 0
-13659 -3658 -3779 -3798 0
-13659 -3658 -3777 -3800 0
-13659 -3658 -3775 -3802 0
-13659 -3658 -3773 -3804 0
-13659 -3658 -3771 -3806 0
-13659 -3658 -3769 -3808 0
-13659 -3658 -3767 -3810 0
-13659 -3658 -3765 -3812 0
-13659 -3658 -3763 -3814 0
-13659 -3658 -3761 -3816 0
-13659 -3658 -3759 -3818 0
-13659 -3658 -3757 -3820 0
-13659 -3658 -3755 -3822 0
-13659 -3658 -3753 -3824 0
-13659 -3658 -3751 -3826 0
-13659 -3658 -3749 -3828 0
-13659 -3658 -3747 -3830 0
-13659 -3658 -3745 -3832 0
-13659 -3658 -3743 -3834 0
-13659 -3658 -3741 -3836 0
-13659 -3658 -3739 -3838 0
-13659 -3658 -3738 -3840 0
-13659 -3656 -3794 0
-13659 -3656 -3783 -3796 0
-13659 -3656 -3781 -3798 0
-13659 -3656 -3779 -3800 0
-13659 -3656 -3777 -3802 0
-13659 -3656 -3775 -3804 0
-13659 -3656 -3773 -3806 0
-13659 -3656 -3771 -3808 0
-13659 -3656 -3769 -3810 0
-13659 -3656 -3767 -3812 0
-13659 -3656 -3765 -3814 0
-13659 -3656 -3763 -3816 0
-13659 -3656 -3761 -3818 0
-13659 -3656 -3759 -3820 0
-13659 -3656 -3757 -3822 0
-13659 -3656 -3755 -3824 0
-13659 -3656 -3753 -3826 0
-13659 -3656 -3751 -3828 0
-13659 -3656 -3749 -3830 0
-13659 -3656 -3747 -3832 0
-13659 -3656 -3745 -3834 0
-13659 -3656 -3743 -3836 0
-13659 -3656 -3741 -3838 0
-13659 -3656 -3739 -3840 0
-13659 -3656 -3738 -3842 0
-13659 -3654 -3796 0
-13659 -3654 -3783 -3798 0
-13659 -3654 -3781 -3800 0
-13659 -3654 -3779 -3802 0
-13659 -3654 -3777 -3804 0
-13659 -3654 -3775 -3806 0
-13659 -3654 -3773 -3808 0
-13659 -3654 -3771 -3810 0
-13659 -3654 -3769 -3812 0
-13659 -3654 -3767 -3814 0
-13659 -3654 -3765 -3816 0
-13659 -3654 -3763 -3818 0
-13659 -3654 -3761 -3820 0
-13659 -3654 -3759 -3822 0
-13659 -3654 -3757 -3824 0
-13659 -3654 -3755 -3826 0
-13659 -3654 -3753 -3828 0
-13659 -3654 -3751 -3830 0
-13659 -3654 -3749 -3832 0
-13659 -3654 -3747 -3834 0
-13659 -3654 -3745 -3836 0
-13659 -3654 -3743 -3838 0
-13659 -3654 -3741 -3840 0
-13659 -3654 -3739 -3842 0
-13659 -3654 -3738 -3844 0
-13659 -3652 -3798 0
-13659 -3652 -3783 -3800 0
-13659 -3652 -3781 -3802 0
-13659 -3652 -3779 -3804 0
-13659 -3652 -3777 -3806 0
-13659 -3652 -3775 -3808 0
-13659 -3652 -3773 -3810 0
-13659 -3652 -3771 -3812 0
-13659 -3652 -3769 -3814 0
-13659 -3652 -3767 -3816 0
-13659 -3652 -3765 -3818 0
-13659 -3652 -3763 -3820 0
-13659 -3652 -3761 -3822 0
-13659 -3652 -3759 -3824 0
-13659 -3652 -3757 -3826 0
-13659 -3652 -3755 -3828 0
-13659 -3652 -3753 -3830 0
-13659 -3652 -3751 -3832 0
-13659 -3652 -3749 -3834 0
-13659 -3652 -3747 -3836 0
-13659 -3652 -3745 -3838 0
-13659 -3652 -3743 -3840 0
-13659 -3652 -3741 -3842 0
-13659 -3652 -3739 -3844 0
-13659 -3652 -3738 -3846 0
-13659 -3650 -3800 0
-13659 -3650 -3783 -3802 0
-13659 -3650 -3781 -3804 0
-13659 -3650 -3779 -3806 0
-13659 -3650 -3777 -3808 0
-13659 -3650 -3775 -3810 0
-13659 -3650 -3773 -3812 0
-13659 -3650 -3771 -3814 0
-13659 -3650 -3769 -3816 0
-13659 -3650 -3767 -3818 0
-13659 -3650 -3765 -3820 0
-13659 -3650 -3763 -3822 0
-13659 -3650 -3761 -3824 0
-13659 -3650 -3759 -3826 0
-13659 -3650 -3757 -3828 0
-13659 -3650 -3755 -3830 0
-13659 -3650 -3753 -3832 0
-13659 -3650 -3751 -3834 0
-13659 -3650 -3749 -3836 0
-13659 -3650 -3747 -3838 0
-13659 -3650 -3745 -3840 0
-13659 -3650 -3743 -3842 0
-13659 -3650 -3741 -3844 0
-13659 -3650 -3739 -3846 0
-13659 -3650 -3738 0
-13659 -3648 -3802 0
-13659 -3648 -3783 -3804 0
-13659 -3648 -3781 -3806 0
-13659 -3648 -3779 -3808 0
-13659 -3648 -3777 -3810 0
-13659 -3648 -3775 -3812 0
-13659 -3648 -3773 -3814 0
-13659 -3648 -3771 -3816 0
-13659 -3648 -3769 -3818 0
-13659 -3648 -3767 -3820 0
-13659 -3648 -3765 -3822 0
-13659 -3648 -3763 -3824 0
-13659 -3648 -3761 -3826 0
-13659 -3648 -3759 -3828 0
-13659 -3648 -3757 -3830 0
-13659 -3648 -3755 -3832 0
-13659 -3648 -3753 -3834 0
-13659 -3648 -3751 -3836 0
-13659 -3648 -3749 -3838 0
-13659 -3648 -3747 -3840 0
-13659 -3648 -3745 -3842 0
-13659 -3648 -3743 -3844 0
-13659 -3648 -3741 -3846 0
-13659 -3648 -3739 0
-13659 -3648 -3738 0
-13659 -3646 -3804 0
-13659 -3646 -3783 -3806 0
-13659 -3646 -3781 -3808 0
-13659 -3646 -3779 -3810 0
-13659 -3646 -3777 -3812 0
-13659 -3646 -3775 -3814 0
-13659 -3646 -3773 -3816 0
-13659 -3646 -3771 -3818 0
-13659 -3646 -3769 -3820 0
-13659 -3646 -3767 -3822 0
-13659 -3646 -3765 -3824 0
-13659 -3646 -3763 -3826 0
-13659 -3646 -3761 -3828 0
-13659 -3646 -3759 -3830 0
-13659 -3646 -3757 -3832 0
-13659 -3646 -3755 -3834 0
-13659 -3646 -3753 -3836 0
-13659 -3646 -3751 -3838 0
-13659 -3646 -3749 -3840 0
-13659 -3646 -3747 -3842 0
-13659 -3646 -3745 -3844 0
-13659 -3646 -3743 -3846 0
-13659 -3646 -3741 0
-13659 -3646 -3739 0
-13659 -3646 -3738 0
-13659 -3645 -3806 0
-13659 -3645 -3783 -3808 0
-13659 -3645 -3781 -3810 0
-13659 -3645 -3779 -3812 0
-13659 -3645 -3777 -3814 0
-13659 -3645 -3775 -3816 0
-13659 -3645 -3773 -3818 0
-13659 -3645 -3771 -3820 0
-13659 -3645 -3769 -3822 0
-13659 -3645 -3767 -3824 0
-13659 -3645 -3765 -3826 0
-13659 -3645 -3763 -3828 0
-13659 -3645 -3761 -3830 0
-13659 -3645 -3759 -3832 0
-13659 -3645 -3757 -3834 0
-13659 -3645 -3755 -3836 0
-13659 -3645 -3753 -3838 0
-13659 -3645 -3751 -3840 0
-13659 -3645 -3749 -3842 0
-13659 -3645 -3747 -3844 0
-13659 -3645 -3745 -3846 0
-13659 -3645 -3743 0
-13659 -3645 -3741 0
-13659 -3645 -3739 0
-13659 -3645 -3738 0
13659 3743 3846 0
13659 3745 3844 0
13659 3747 3842 0
13659 3749 3840 0
13659 3751 3838 0
13659 3753 3836 0
13659 3755 3834 0
13659 3757 3832 0
13659 3759 3830 0
13659 3761 3828 0
13659 3763 3826 0
13659 3765 3824 0
13659 3767 3822 0
13659 3769 3820 0
13659 3771 3818 0
13659 3773 3816 0
13659 3775 3814 0
13659 3777 3812 0
13659 3779 3810 0
13659 3781 3808 0
13659 3783 3806 0
13659 3645 3741 3846 0
13659 3645 3743 3844 0
13659 3645 3745 3842 0
13659 3645 3747 3840 0
13659 3645 3749 3838 0
13659 3645 3751 3836 0
13659 3645 3753 3834 0
13659 3645 3755 3832 0
13659 3645 3757 3830 0
13659 3645 3759 3828 0
13659 3645 3761 3826 0
13659 3645 3763 3824 0
13659 3645 3765 3822 0
13659 3645 3767 3820 0
13659 3645 3769 3818 0
13659 3645 3771 3816 0
13659 3645 3773 3814 0
13659 3645 3775 3812 0
13659 3645 3777 3810 0
13659 3645 3779 3808 0
13659 3645 3781 3806 0
13659 3645 3783 3804 0
13659 3646 3739 3846 0
13659 3646 3741 3844 0
13659 3646 3743 3842 0
13659 3646 3745 3840 0
13659 3646 3747 3838 0
13659 3646 3749 3836 0
13659 3646 3751 3834 0
13659 3646 3753 3832 0
13659 3646 3755 3830 0
13659 3646 3757 3828 0
13659 3646 3759 3826 0
13659 3646 3761 3824 0
13659 3646 3763 3822 0
13659 3646 3765 3820 0
13659 3646 3767 3818 0
13659 3646 3769 3816 0
13659 3646 3771 3814 0
13659 3646 3773 3812 0
13659 3646 3775 3810 0
13659 3646 3777 3808 0
13659 3646 3779 3806 0
13659 3646 3781 3804 0
13659 3646 3783 3802 0
13659 3648 3738 3846 0
13659 3648 3739 3844 0
13659 3648 3741 3842 0
13659 3648 3743 3840 0
13659 3648 3745 3838 0
13659 3648 3747 3836 0
13659 3648 3749 3834 0
13659 3648 3751 3832 0
13659 3648 3753 3830 0
13659 3648 3755 3828 0
13659 3648 3757 3826 0
13659 3648 3759 3824 0
13659 3648 3761 3822 0
13659 3648 3763 3820 0
13659 3648 3765 3818 0
13659 3648 3767 3816 0
13659 3648 3769 3814 0
13659 3648 3771 3812 0
13659 3648 3773 3810 0
13659 3648 3775 3808 0
13659 3648 3777 3806 0
13659 3648 3779 3804 0
13659 3648 3781 3802 0
13659 3648 3783 3800 0
13659 3650 3846 0
13659 3650 3738 3844 0
13659 3650 3739 3842 0
13659 3650 3741 3840 0
13659 3650 3743 3838 0
13659 3650 3745 3836 0
13659 3650 3747 3834 0
13659 3650 3749 3832 0
13659 3650 3751 3830 0
13659 3650 3753 3828 0
13659 3650 3755 3826 0
13659 3650 3757 3824 0
13659 3650 3759 3822 0
13659 3650 3761 3820 0
13659 3650 3763 3818 0
13659 3650 3765 3816 0
13659 3650 3767 3814 0
13659 3650 3769 3812 0
13659 3650 3771 3810 0
13659 3650 3773 3808 0
13659 3650 3775 3806 0
13659 3650 3777 3804 0
13659 3650 3779 3802 0
13659 3650 3781 3800 0
13659 3650 3783 3798 0
13659 3652 3844 0
13659 3652 3738 3842 0
13659 3652 3739 3840 0
13659 3652 3741 3838 0
13659 3652 3743 3836 0
13659 3652 3745 3834 0
13659 3652 3747 3832 0
13659 3652 3749 3830 0
13659 3652 3751 3828 0
13659 3652 3753 3826 0
13659 3652 3755 3824 0
13659 3652 3757 3822 0
13659 3652 3759 3820 0
13659 3652 3761 3818 0
13659 3652 3763 3816 0
13659 3652 3765 3814 0
13659 3652 3767 3812 0
13659 3652 3769 3810 0
13659 3652 3771 3808 0
13659 3652 3773 3806 0
13659 3652 3775 3804 0
13659 3652 3777 3802 0
13659 3652 3779 3800 0
13659 3652 3781 3798 0
13659 3652 3783 3796 0
13659 3654 3842 0
13659 3654 3738 3840 0
13659 3654 3739 3838 0
13659 3654 3741 3836 0
13659 3654 3743 3834 0
13659 3654 3745 3832 0
13659 3654 3747 3830 0
13659 3654 3749 3828 0
13659 3654 3751 3826 0
13659 3654 3753 3824 0
13659 3654 3755 3822 0
13659 3654 3757 3820 0
13659 3654 3759 3818 0
13659 3654 3761 3816 0
13659 3654 3763 3814 0
13659 3654 3765 3812 0
13659 3654 3767 3810 0
13659 3654 3769 3808 0
13659 3654 3771 3806 0
13659 3654 3773 3804 0
13659 3654 3775 3802 0
13659 3654 3777 3800 0
13659 3654 3779 3798 0
13659 3654 3781 3796 0
13659 3654 3783 3794 0
13659 3656 3840 0
13659 3656 3738 3838 0
13659 3656 3739 3836 0
13659 3656 3741 3834 0
13659 3656 3743 3832 0
13659 3656 3745 3830 0
13659 3656 3747 3828 0
13659 3656 3749 3826 0
13659 3656 3751 3824 0
13659 3656 3753 3822 0
13659 3656 3755 3820 0
13659 3656 3757 3818 0
13659 3656 3759 3816 0
13659 3656 3761 3814 0
13659 3656 3763 3812 0
13659 3656 3765 3810 0
13659 3656 3767 3808 0
13659 3656 3769 3806 0
13659 3656 3771 3804 0
13659 3656 3773 3802 0
13659 3656 3775 3800 0
13659 3656 3777 3798 0
13659 3656 3779 3796 0
13659 3656 3781 3794 0
13659 3656 3783 3792 0
13659 3658 3838 0
13659 3658 3738 3836 0
13659 3658 3739 3834 0
13659 3658 3741 3832 0
13659 3658 3743 3830 0
13659 3658 3745 3828 0
13659 3658 3747 3826 0
13659 3658 3749 3824 0
13659 3658 3751 3822 0
13659 3658 3753 3820 0
13659 3658 3755 3818 0
13659 3658 3757 3816 0
13659 3658 3759 3814 0
13659 3658 3761 3812 0
13659 3658 3763 3810 0
13659 3658 3765 3808 0
13659 3658 3767 3806 0
13659 3658 3769 3804 0
13659 3658 3771 3802 0
13659 3658 3773 3800 0
13659 3658 3775 3798 0
13659 3658 3777 3796 0
13659 3658 3779 3794 0
13659 3658 3781 3792 0
13659 3658 3783 3790 0
13659 3660 3836 0
13659 3660 3738 3834 0
13659 3660 3739 3832 0
13659 3660 3741 3830 0
13659 3660 3743 3828 0
13659 3660 3745 3826 0
13659 3660 3747 3824 0
13659 3660 3749 3822 0
13659 3660 3751 3820 0
13659 3660 3753 3818 0
13659 3660 3755 3816 0
13659 3660 3757 3814 0
13659 3660 3759 3812 0
13659 3660 3761 3810 0
13659 3660 3763 3808 0
13659 3660 3765 3806 0
13659 3660 3767 3804 0
13659 3660 3769 3802 0
13659 3660 3771 3800 0
13659 3660 3773 3798 0
13659 3660 3775 3796 0
13659 3660 3777 3794 0
13659 3660 3779 3792 0
13659 3660 3781 3790 0
13659 3660 3783 3788 0
13659 3662 3834 0
13659 3662 3738 3832 0
13659 3662 3739 3830 0
13659 3662 3741 3828 0
13659 3662 3743 3826 0
13659 3662 3745 3824 0
13659 3662 3747 3822 0
13659 3662 3749 3820 0
13659 3662 3751 3818 0
13659 3662 3753 3816 0
13659 3662 3755 3814 0
13659 3662 3757 3812 0
13659 3662 3759 3810 0
13659 3662 3761 3808 0
13659 3662 3763 3806 0
13659 3662 3765 3804 0
13659 3662 3767 3802 0
13659 3662 3769 3800 0
13659 3662 3771 3798 0
13659 3662 3773 3796 0
13659 3662 3775 3794 0
13659 3662 3777 3792 0
13659 3662 3779 3790 0
13659 3662 3781 3788 0
13659 3662 3783 3786 0
13659 3664 3832 0
13659 3664 3738 3830 0
13659 3664 3739 3828 0
13659 3664 3741 3826 0
13659 3664 3743 3824 0
13659 3664 3745 3822 0
13659 3664 3747 3820 0
13659 3664 3749 3818 0
13659 3664 3751 3816 0
13659 3664 3753 3814 0
13659 3664 3755 3812 0
13659 3664 3757 3810 0
13659 3664 3759 3808 0
13659 3664 3761 3806 0
13659 3664 3763 3804 0
13659 3664 3765 3802 0
13659 3664 3767 3800 0
13659 3664 3769 3798 0
13659 3664 3771 3796 0
13659 3664 3773 3794 0
13659 3664 3775 3792 0
13659 3664 3777 3790 0
13659 3664 3779 3788 0
13659 3664 3781 3786 0
13659 3664 3783 3785 0
13659 3666 3830 0
13659 3666 3738 3828 0
13659 3666 3739 3826 0
13659 3666 3741 3824 0
13659 3666 3743 3822 0
13659 3666 3745 3820 0
13659 3666 3747 3818 0
13659 3666 3749 3816 0
13659 3666 3751 3814 0
13659 3666 3753 3812 0
13659 3666 3755 3810 0
13659 3666 3757 3808 0
13659 3666 3759 3806 0
13659 3666 3761 3804 0
13659 3666 3763 3802 0
13659 3666 3765 3800 0
13659 3666 3767 3798 0
13659 3666 3769 3796 0
13659 3666 3771 3794 0
13659 3666 3773 3792 0
13659 3666 3775 3790 0
13659 3666 3777 3788 0
13659 3666 3779 3786 0
13659 3666 3781 3785 0
13659 3666 3783 0
13659 3668 3828 0
13659 3668 3738 3826 0
13659 3668 3739 3824 0
13659 3668 3741 3822 0
13659 3668 3743 3820 0
13659 3668 3745 3818 0
13659 3668 3747 3816 0
13659 3668 3749 3814 0
13659 3668 3751 3812 0
13659 3668 3753 3810 0
13659 3668 3755 3808 0
13659 3668 3757 3806 0
13659 3668 3759 3804 0
13659 3668 3761 3802 0
13659 3668 3763 3800 0
13659 3668 3765 3798 0
13659 3668 3767 3796 0
13659 3668 3769 3794 0
13659 3668 3771 3792 0
13659 3668 3773 3790 0
13659 3668 3775 3788 0
13659 3668 3777 3786 0
13659 3668 3779 3785 0
13659 3668 3781 0
13659 3668 3783 0
13659 3670 3826 0
13659 3670 3738 3824 0
13659 3670 3739 3822 0
13659 3670 3741 3820 0
13659 3670 3743 3818 0
13659 3670 3745 3816 0
13659 3670 3747 3814 0
13659 3670 3749 3812 0
13659 3670 3751 3810 0
13659 3670 3753 3808 0
13659 3670 3755 3806 0
13659 3670 3757 3804 0
13659 3670 3759 3802 0
13659 3670 3761 3800 0
13659 3670 3763 3798 0
13659 3670 3765 3796 0
13659 3670 3767 3794 0
13659 3670 3769 3792 0
13659 3670 3771 3790 0
13659 3670 3773 3788 0
13659 3670 3775 3786 0
13659 3670 3777 3785 0
13659 3670 3779 0
13659 3670 3781 0
13659 3670 3783 0
13659 3672 3824 0
13659 3672 3738 3822 0
13659 3672 3739 3820 0
13659 3672 3741 3818 0
13659 3672 3743 3816 0
13659 3672 3745 3814 0
13659 3672 3747 3812 0
13659 3672 3749 3810 0
13659 3672 3751 3808 0
13659 3672 3753 3806 0
13659 3672 3755 3804 0
13659 3672 3757 3802 0
13659 3672 3759 3800 0
13659 3672 3761 3798 0
13659 3672 3763 3796 0
13659 3672 3765 3794 0
13659 3672 3767 3792 0
13659 3672 3769 3790 0
13659 3672 3771 3788 0
13659 3672 3773 3786 0
13659 3672 3775 3785 0
13659 3672 3777 0
13659 3672 3779 0
13659 3672 3781 0
13659 3672 3783 0
13659 3674 3822 0
13659 3674 3738 3820 0
13659 3674 3739 3818 0
13659 3674 3741 3816 0
13659 3674 3743 3814 0
13659 3674 3745 3812 0
13659 3674 3747 3810 0
13659 3674 3749 3808 0
13659 3674 3751 3806 0
13659 3674 3753 3804 0
13659 3674 3755 3802 0
13659 3674 3757 3800 0
13659 3674 3759 3798 0
13659 3674 3761 3796 0
13659 3674 3763 3794 0
13659 3674 3765 3792 0
13659 3674 3767 3790 0
13659 3674 3769 3788 0
13659 3674 3771 3786 0
13659 3674 3773 3785 0
13659 3674 3775 0
13659 3674 3777 0
13659 3674 3779 0
13659 3674 3781 0
13659 3674 3783 0
c (((aux516 + aux519 + aux520)<=36)=tv=SATLiteral(13660))
-13660 3979 4080 0
-13660 3981 4078 0
-13660 3983 4076 0
-13660 3985 4074 0
-13660 3987 4072 0
-13660 3989 4070 0
-13660 3991 4068 0
-13660 3993 4066 0
-13660 3995 4064 0
-13660 3997 4062 0
-13660 3999 4060 0
-13660 4001 4058 0
-13660 4003 4056 0
-13660 4005 4054 0
-13660 4007 4052 0
-13660 4009 4050 0
-13660 4011 4048 0
-13660 4013 4046 0
-13660 4015 4044 0
-13660 4017 4042 0
-13660 3879 3977 4080 0
-13660 3879 3979 4078 0
-13660 3879 3981 4076 0
-13660 3879 3983 4074 0
-13660 3879 3985 4072 0
-13660 3879 3987 4070 0
-13660 3879 3989 4068 0
-13660 3879 3991 4066 0
-13660 3879 3993 4064 0
-13660 3879 3995 4062 0
-13660 3879 3997 4060 0
-13660 3879 3999 4058 0
-13660 3879 4001 4056 0
-13660 3879 4003 4054 0
-13660 3879 4005 4052 0
-13660 3879 4007 4050 0
-13660 3879 4009 4048 0
-13660 3879 4011 4046 0
-13660 3879 4013 4044 0
-13660 3879 4015 4042 0
-13660 3879 4017 4040 0
-13660 3880 3975 4080 0
-13660 3880 3977 4078 0
-13660 3880 3979 4076 0
-13660 3880 3981 4074 0
-13660 3880 3983 4072 0
-13660 3880 3985 4070 0
-13660 3880 3987 4068 0
-13660 3880 3989 4066 0
-13660 3880 3991 4064 0
-13660 3880 3993 4062 0
-13660 3880 3995 4060 0
-13660 3880 3997 4058 0
-13660 3880 3999 4056 0
-13660 3880 4001 4054 0
-13660 3880 4003 4052 0
-13660 3880 4005 4050 0
-13660 3880 4007 4048 0
-13660 3880 4009 4046 0
-13660 3880 4011 4044 0
-13660 3880 4013 4042 0
-13660 3880 4015 4040 0
-13660 3880 4017 4038 0
-13660 3882 3973 4080 0
-13660 3882 3975 4078 0
-13660 3882 3977 4076 0
-13660 3882 3979 4074 0
-13660 3882 3981 4072 0
-13660 3882 3983 4070 0
-13660 3882 3985 4068 0
-13660 3882 3987 4066 0
-13660 3882 3989 4064 0
-13660 3882 3991 4062 0
-13660 3882 3993 4060 0
-13660 3882 3995 4058 0
-13660 3882 3997 4056 0
-13660 3882 3999 4054 0
-13660 3882 4001 4052 0
-13660 3882 4003 4050 0
-13660 3882 4005 4048 0
-13660 3882 4007 4046 0
-13660 3882 4009 4044 0
-13660 3882 4011 4042 0
-13660 3882 4013 4040 0
-13660 3882 4015 4038 0
-13660 3882 4017 4036 0
-13660 3884 3972 4080 0
-13660 3884 3973 4078 0
-13660 3884 3975 4076 0
-13660 3884 3977 4074 0
-13660 3884 3979 4072 0
-13660 3884 3981 4070 0
-13660 3884 3983 4068 0
-13660 3884 3985 4066 0
-13660 3884 3987 4064 0
-13660 3884 3989 4062 0
-13660 3884 3991 4060 0
-13660 3884 3993 4058 0
-13660 3884 3995 4056 0
-13660 3884 3997 4054 0
-13660 3884 3999 4052 0
-13660 3884 4001 4050 0
-13660 3884 4003 4048 0
-13660 3884 4005 4046 0
-13660 3884 4007 4044 0
-13660 3884 4009 4042 0
-13660 3884 4011 4040 0
-13660 3884 4013 4038 0
-13660 3884 4015 4036 0
-13660 3884 4017 4034 0
-13660 3886 4080 0
-13660 3886 3972 4078 0
-13660 3886 3973 4076 0
-13660 3886 3975 4074 0
-13660 3886 3977 4072 0
-13660 3886 3979 4070 0
-13660 3886 3981 4068 0
-13660 3886 3983 4066 0
-13660 3886 3985 4064 0
-13660 3886 3987 4062 0
-13660 3886 3989 4060 0
-13660 3886 3991 4058 0
-13660 3886 3993 4056 0
-13660 3886 3995 4054 0
-13660 3886 3997 4052 0
-13660 3886 3999 4050 0
-13660 3886 4001 4048 0
-13660 3886 4003 4046 0
-13660 3886 4005 4044 0
-13660 3886 4007 4042 0
-13660 3886 4009 4040 0
-13660 3886 4011 4038 0
-13660 3886 4013 4036 0
-13660 3886 4015 4034 0
-13660 3886 4017 4032 0
-13660 3888 4078 0
-13660 3888 3972 4076 0
-13660 3888 3973 4074 0
-13660 3888 3975 4072 0
-13660 3888 3977 4070 0
-13660 3888 3979 4068 0
-13660 3888 3981 4066 0
-13660 3888 3983 4064 0
-13660 3888 3985 4062 0
-13660 3888 3987 4060 0
-13660 3888 3989 4058 0
-13660 3888 3991 4056 0
-13660 3888 3993 4054 0
-13660 3888 3995 4052 0
-13660 3888 3997 4050 0
-13660 3888 3999 4048 0
-13660 3888 4001 4046 0
-13660 3888 4003 4044 0
-13660 3888 4005 4042 0
-13660 3888 4007 4040 0
-13660 3888 4009 4038 0
-13660 3888 4011 4036 0
-13660 3888 4013 4034 0
-13660 3888 4015 4032 0
-13660 3888 4017 4030 0
-13660 3890 4076 0
-13660 3890 3972 4074 0
-13660 3890 3973 4072 0
-13660 3890 3975 4070 0
-13660 3890 3977 4068 0
-13660 3890 3979 4066 0
-13660 3890 3981 4064 0
-13660 3890 3983 4062 0
-13660 3890 3985 4060 0
-13660 3890 3987 4058 0
-13660 3890 3989 4056 0
-13660 3890 3991 4054 0
-13660 3890 3993 4052 0
-13660 3890 3995 4050 0
-13660 3890 3997 4048 0
-13660 3890 3999 4046 0
-13660 3890 4001 4044 0
-13660 3890 4003 4042 0
-13660 3890 4005 4040 0
-13660 3890 4007 4038 0
-13660 3890 4009 4036 0
-13660 3890 4011 4034 0
-13660 3890 4013 4032 0
-13660 3890 4015 4030 0
-13660 3890 4017 4028 0
-13660 3892 4074 0
-13660 3892 3972 4072 0
-13660 3892 3973 4070 0
-13660 3892 3975 4068 0
-13660 3892 3977 4066 0
-13660 3892 3979 4064 0
-13660 3892 3981 4062 0
-13660 3892 3983 4060 0
-13660 3892 3985 4058 0
-13660 3892 3987 4056 0
-13660 3892 3989 4054 0
-13660 3892 3991 4052 0
-13660 3892 3993 4050 0
-13660 3892 3995 4048 0
-13660 3892 3997 4046 0
-13660 3892 3999 4044 0
-13660 3892 4001 4042 0
-13660 3892 4003 4040 0
-13660 3892 4005 4038 0
-13660 3892 4007 4036 0
-13660 3892 4009 4034 0
-13660 3892 4011 4032 0
-13660 3892 4013 4030 0
-13660 3892 4015 4028 0
-13660 3892 4017 4026 0
-13660 3894 4072 0
-13660 3894 3972 4070 0
-13660 3894 3973 4068 0
-13660 3894 3975 4066 0
-13660 3894 3977 4064 0
-13660 3894 3979 4062 0
-13660 3894 3981 4060 0
-13660 3894 3983 4058 0
-13660 3894 3985 4056 0
-13660 3894 3987 4054 0
-13660 3894 3989 4052 0
-13660 3894 3991 4050 0
-13660 3894 3993 4048 0
-13660 3894 3995 4046 0
-13660 3894 3997 4044 0
-13660 3894 3999 4042 0
-13660 3894 4001 4040 0
-13660 3894 4003 4038 0
-13660 3894 4005 4036 0
-13660 3894 4007 4034 0
-13660 3894 4009 4032 0
-13660 3894 4011 4030 0
-13660 3894 4013 4028 0
-13660 3894 4015 4026 0
-13660 3894 4017 4024 0
-13660 3896 4070 0
-13660 3896 3972 4068 0
-13660 3896 3973 4066 0
-13660 3896 3975 4064 0
-13660 3896 3977 4062 0
-13660 3896 3979 4060 0
-13660 3896 3981 4058 0
-13660 3896 3983 4056 0
-13660 3896 3985 4054 0
-13660 3896 3987 4052 0
-13660 3896 3989 4050 0
-13660 3896 3991 4048 0
-13660 3896 3993 4046 0
-13660 3896 3995 4044 0
-13660 3896 3997 4042 0
-13660 3896 3999 4040 0
-13660 3896 4001 4038 0
-13660 3896 4003 4036 0
-13660 3896 4005 4034 0
-13660 3896 4007 4032 0
-13660 3896 4009 4030 0
-13660 3896 4011 4028 0
-13660 3896 4013 4026 0
-13660 3896 4015 4024 0
-13660 3896 4017 4022 0
-13660 3898 4068 0
-13660 3898 3972 4066 0
-13660 3898 3973 4064 0
-13660 3898 3975 4062 0
-13660 3898 3977 4060 0
-13660 3898 3979 4058 0
-13660 3898 3981 4056 0
-13660 3898 3983 4054 0
-13660 3898 3985 4052 0
-13660 3898 3987 4050 0
-13660 3898 3989 4048 0
-13660 3898 3991 4046 0
-13660 3898 3993 4044 0
-13660 3898 3995 4042 0
-13660 3898 3997 4040 0
-13660 3898 3999 4038 0
-13660 3898 4001 4036 0
-13660 3898 4003 4034 0
-13660 3898 4005 4032 0
-13660 3898 4007 4030 0
-13660 3898 4009 4028 0
-13660 3898 4011 4026 0
-13660 3898 4013 4024 0
-13660 3898 4015 4022 0
-13660 3898 4017 4020 0
-13660 3900 4066 0
-13660 3900 3972 4064 0
-13660 3900 3973 4062 0
-13660 3900 3975 4060 0
-13660 3900 3977 4058 0
-13660 3900 3979 4056 0
-13660 3900 3981 4054 0
-13660 3900 3983 4052 0
-13660 3900 3985 4050 0
-13660 3900 3987 4048 0
-13660 3900 3989 4046 0
-13660 3900 3991 4044 0
-13660 3900 3993 4042 0
-13660 3900 3995 4040 0
-13660 3900 3997 4038 0
-13660 3900 3999 4036 0
-13660 3900 4001 4034 0
-13660 3900 4003 4032 0
-13660 3900 4005 4030 0
-13660 3900 4007 4028 0
-13660 3900 4009 4026 0
-13660 3900 4011 4024 0
-13660 3900 4013 4022 0
-13660 3900 4015 4020 0
-13660 3900 4017 4019 0
-13660 3902 4064 0
-13660 3902 3972 4062 0
-13660 3902 3973 4060 0
-13660 3902 3975 4058 0
-13660 3902 3977 4056 0
-13660 3902 3979 4054 0
-13660 3902 3981 4052 0
-13660 3902 3983 4050 0
-13660 3902 3985 4048 0
-13660 3902 3987 4046 0
-13660 3902 3989 4044 0
-13660 3902 3991 4042 0
-13660 3902 3993 4040 0
-13660 3902 3995 4038 0
-13660 3902 3997 4036 0
-13660 3902 3999 4034 0
-13660 3902 4001 4032 0
-13660 3902 4003 4030 0
-13660 3902 4005 4028 0
-13660 3902 4007 4026 0
-13660 3902 4009 4024 0
-13660 3902 4011 4022 0
-13660 3902 4013 4020 0
-13660 3902 4015 4019 0
-13660 3902 4017 0
-13660 3904 4062 0
-13660 3904 3972 4060 0
-13660 3904 3973 4058 0
-13660 3904 3975 4056 0
-13660 3904 3977 4054 0
-13660 3904 3979 4052 0
-13660 3904 3981 4050 0
-13660 3904 3983 4048 0
-13660 3904 3985 4046 0
-13660 3904 3987 4044 0
-13660 3904 3989 4042 0
-13660 3904 3991 4040 0
-13660 3904 3993 4038 0
-13660 3904 3995 4036 0
-13660 3904 3997 4034 0
-13660 3904 3999 4032 0
-13660 3904 4001 4030 0
-13660 3904 4003 4028 0
-13660 3904 4005 4026 0
-13660 3904 4007 4024 0
-13660 3904 4009 4022 0
-13660 3904 4011 4020 0
-13660 3904 4013 4019 0
-13660 3904 4015 0
-13660 3904 4017 0
-13660 3906 4060 0
-13660 3906 3972 4058 0
-13660 3906 3973 4056 0
-13660 3906 3975 4054 0
-13660 3906 3977 4052 0
-13660 3906 3979 4050 0
-13660 3906 3981 4048 0
-13660 3906 3983 4046 0
-13660 3906 3985 4044 0
-13660 3906 3987 4042 0
-13660 3906 3989 4040 0
-13660 3906 3991 4038 0
-13660 3906 3993 4036 0
-13660 3906 3995 4034 0
-13660 3906 3997 4032 0
-13660 3906 3999 4030 0
-13660 3906 4001 4028 0
-13660 3906 4003 4026 0
-13660 3906 4005 4024 0
-13660 3906 4007 4022 0
-13660 3906 4009 4020 0
-13660 3906 4011 4019 0
-13660 3906 4013 0
-13660 3906 4015 0
-13660 3906 4017 0
-13660 3908 4058 0
-13660 3908 3972 4056 0
-13660 3908 3973 4054 0
-13660 3908 3975 4052 0
-13660 3908 3977 4050 0
-13660 3908 3979 4048 0
-13660 3908 3981 4046 0
-13660 3908 3983 4044 0
-13660 3908 3985 4042 0
-13660 3908 3987 4040 0
-13660 3908 3989 4038 0
-13660 3908 3991 4036 0
-13660 3908 3993 4034 0
-13660 3908 3995 4032 0
-13660 3908 3997 4030 0
-13660 3908 3999 4028 0
-13660 3908 4001 4026 0
-13660 3908 4003 4024 0
-13660 3908 4005 4022 0
-13660 3908 4007 4020 0
-13660 3908 4009 4019 0
-13660 3908 4011 0
-13660 3908 4013 0
-13660 3908 4015 0
-13660 3908 4017 0
13660 -4011 -4019 0
13660 -4009 -4020 0
13660 -4007 -4022 0
13660 -4005 -4024 0
13660 -4003 -4026 0
13660 -4001 -4028 0
13660 -3999 -4030 0
13660 -3997 -4032 0
13660 -3995 -4034 0
13660 -3993 -4036 0
13660 -3991 -4038 0
13660 -3989 -4040 0
13660 -3987 -4042 0
13660 -3985 -4044 0
13660 -3983 -4046 0
13660 -3981 -4048 0
13660 -3979 -4050 0
13660 -3977 -4052 0
13660 -3975 -4054 0
13660 -3973 -4056 0
13660 -3972 -4058 0
13660 -3908 -4013 -4019 0
13660 -3908 -4011 -4020 0
13660 -3908 -4009 -4022 0
13660 -3908 -4007 -4024 0
13660 -3908 -4005 -4026 0
13660 -3908 -4003 -4028 0
13660 -3908 -4001 -4030 0
13660 -3908 -3999 -4032 0
13660 -3908 -3997 -4034 0
13660 -3908 -3995 -4036 0
13660 -3908 -3993 -4038 0
13660 -3908 -3991 -4040 0
13660 -3908 -3989 -4042 0
13660 -3908 -3987 -4044 0
13660 -3908 -3985 -4046 0
13660 -3908 -3983 -4048 0
13660 -3908 -3981 -4050 0
13660 -3908 -3979 -4052 0
13660 -3908 -3977 -4054 0
13660 -3908 -3975 -4056 0
13660 -3908 -3973 -4058 0
13660 -3908 -3972 -4060 0
13660 -3906 -4015 -4019 0
13660 -3906 -4013 -4020 0
13660 -3906 -4011 -4022 0
13660 -3906 -4009 -4024 0
13660 -3906 -4007 -4026 0
13660 -3906 -4005 -4028 0
13660 -3906 -4003 -4030 0
13660 -3906 -4001 -4032 0
13660 -3906 -3999 -4034 0
13660 -3906 -3997 -4036 0
13660 -3906 -3995 -4038 0
13660 -3906 -3993 -4040 0
13660 -3906 -3991 -4042 0
13660 -3906 -3989 -4044 0
13660 -3906 -3987 -4046 0
13660 -3906 -3985 -4048 0
13660 -3906 -3983 -4050 0
13660 -3906 -3981 -4052 0
13660 -3906 -3979 -4054 0
13660 -3906 -3977 -4056 0
13660 -3906 -3975 -4058 0
13660 -3906 -3973 -4060 0
13660 -3906 -3972 -4062 0
13660 -3904 -4017 -4019 0
13660 -3904 -4015 -4020 0
13660 -3904 -4013 -4022 0
13660 -3904 -4011 -4024 0
13660 -3904 -4009 -4026 0
13660 -3904 -4007 -4028 0
13660 -3904 -4005 -4030 0
13660 -3904 -4003 -4032 0
13660 -3904 -4001 -4034 0
13660 -3904 -3999 -4036 0
13660 -3904 -3997 -4038 0
13660 -3904 -3995 -4040 0
13660 -3904 -3993 -4042 0
13660 -3904 -3991 -4044 0
13660 -3904 -3989 -4046 0
13660 -3904 -3987 -4048 0
13660 -3904 -3985 -4050 0
13660 -3904 -3983 -4052 0
13660 -3904 -3981 -4054 0
13660 -3904 -3979 -4056 0
13660 -3904 -3977 -4058 0
13660 -3904 -3975 -4060 0
13660 -3904 -3973 -4062 0
13660 -3904 -3972 -4064 0
13660 -3902 -4019 0
13660 -3902 -4017 -4020 0
13660 -3902 -4015 -4022 0
13660 -3902 -4013 -4024 0
13660 -3902 -4011 -4026 0
13660 -3902 -4009 -4028 0
13660 -3902 -4007 -4030 0
13660 -3902 -4005 -4032 0
13660 -3902 -4003 -4034 0
13660 -3902 -4001 -4036 0
13660 -3902 -3999 -4038 0
13660 -3902 -3997 -4040 0
13660 -3902 -3995 -4042 0
13660 -3902 -3993 -4044 0
13660 -3902 -3991 -4046 0
13660 -3902 -3989 -4048 0
13660 -3902 -3987 -4050 0
13660 -3902 -3985 -4052 0
13660 -3902 -3983 -4054 0
13660 -3902 -3981 -4056 0
13660 -3902 -3979 -4058 0
13660 -3902 -3977 -4060 0
13660 -3902 -3975 -4062 0
13660 -3902 -3973 -4064 0
13660 -3902 -3972 -4066 0
13660 -3900 -4020 0
13660 -3900 -4017 -4022 0
13660 -3900 -4015 -4024 0
13660 -3900 -4013 -4026 0
13660 -3900 -4011 -4028 0
13660 -3900 -4009 -4030 0
13660 -3900 -4007 -4032 0
13660 -3900 -4005 -4034 0
13660 -3900 -4003 -4036 0
13660 -3900 -4001 -4038 0
13660 -3900 -3999 -4040 0
13660 -3900 -3997 -4042 0
13660 -3900 -3995 -4044 0
13660 -3900 -3993 -4046 0
13660 -3900 -3991 -4048 0
13660 -3900 -3989 -4050 0
13660 -3900 -3987 -4052 0
13660 -3900 -3985 -4054 0
13660 -3900 -3983 -4056 0
13660 -3900 -3981 -4058 0
13660 -3900 -3979 -4060 0
13660 -3900 -3977 -4062 0
13660 -3900 -3975 -4064 0
13660 -3900 -3973 -4066 0
13660 -3900 -3972 -4068 0
13660 -3898 -4022 0
13660 -3898 -4017 -4024 0
13660 -3898 -4015 -4026 0
13660 -3898 -4013 -4028 0
13660 -3898 -4011 -4030 0
13660 -3898 -4009 -4032 0
13660 -3898 -4007 -4034 0
13660 -3898 -4005 -4036 0
13660 -3898 -4003 -4038 0
13660 -3898 -4001 -4040 0
13660 -3898 -3999 -4042 0
13660 -3898 -3997 -4044 0
13660 -3898 -3995 -4046 0
13660 -3898 -3993 -4048 0
13660 -3898 -3991 -4050 0
13660 -3898 -3989 -4052 0
13660 -3898 -3987 -4054 0
13660 -3898 -3985 -4056 0
13660 -3898 -3983 -4058 0
13660 -3898 -3981 -4060 0
13660 -3898 -3979 -4062 0
13660 -3898 -3977 -4064 0
13660 -3898 -3975 -4066 0
13660 -3898 -3973 -4068 0
13660 -3898 -3972 -4070 0
13660 -3896 -4024 0
13660 -3896 -4017 -4026 0
13660 -3896 -4015 -4028 0
13660 -3896 -4013 -4030 0
13660 -3896 -4011 -4032 0
13660 -3896 -4009 -4034 0
13660 -3896 -4007 -4036 0
13660 -3896 -4005 -4038 0
13660 -3896 -4003 -4040 0
13660 -3896 -4001 -4042 0
13660 -3896 -3999 -4044 0
13660 -3896 -3997 -4046 0
13660 -3896 -3995 -4048 0
13660 -3896 -3993 -4050 0
13660 -3896 -3991 -4052 0
13660 -3896 -3989 -4054 0
13660 -3896 -3987 -4056 0
13660 -3896 -3985 -4058 0
13660 -3896 -3983 -4060 0
13660 -3896 -3981 -4062 0
13660 -3896 -3979 -4064 0
13660 -3896 -3977 -4066 0
13660 -3896 -3975 -4068 0
13660 -3896 -3973 -4070 0
13660 -3896 -3972 -4072 0
13660 -3894 -4026 0
13660 -3894 -4017 -4028 0
13660 -3894 -4015 -4030 0
13660 -3894 -4013 -4032 0
13660 -3894 -4011 -4034 0
13660 -3894 -4009 -4036 0
13660 -3894 -4007 -4038 0
13660 -3894 -4005 -4040 0
13660 -3894 -4003 -4042 0
13660 -3894 -4001 -4044 0
13660 -3894 -3999 -4046 0
13660 -3894 -3997 -4048 0
13660 -3894 -3995 -4050 0
13660 -3894 -3993 -4052 0
13660 -3894 -3991 -4054 0
13660 -3894 -3989 -4056 0
13660 -3894 -3987 -4058 0
13660 -3894 -3985 -4060 0
13660 -3894 -3983 -4062 0
13660 -3894 -3981 -4064 0
13660 -3894 -3979 -4066 0
13660 -3894 -3977 -4068 0
13660 -3894 -3975 -4070 0
13660 -3894 -3973 -4072 0
13660 -3894 -3972 -4074 0
13660 -3892 -4028 0
13660 -3892 -4017 -4030 0
13660 -3892 -4015 -4032 0
13660 -3892 -4013 -4034 0
13660 -3892 -4011 -4036 0
13660 -3892 -4009 -4038 0
13660 -3892 -4007 -4040 0
13660 -3892 -4005 -4042 0
13660 -3892 -4003 -4044 0
13660 -3892 -4001 -4046 0
13660 -3892 -3999 -4048 0
13660 -3892 -3997 -4050 0
13660 -3892 -3995 -4052 0
13660 -3892 -3993 -4054 0
13660 -3892 -3991 -4056 0
13660 -3892 -3989 -4058 0
13660 -3892 -3987 -4060 0
13660 -3892 -3985 -4062 0
13660 -3892 -3983 -4064 0
13660 -3892 -3981 -4066 0
13660 -3892 -3979 -4068 0
13660 -3892 -3977 -4070 0
13660 -3892 -3975 -4072 0
13660 -3892 -3973 -4074 0
13660 -3892 -3972 -4076 0
13660 -3890 -4030 0
13660 -3890 -4017 -4032 0
13660 -3890 -4015 -4034 0
13660 -3890 -4013 -4036 0
13660 -3890 -4011 -4038 0
13660 -3890 -4009 -4040 0
13660 -3890 -4007 -4042 0
13660 -3890 -4005 -4044 0
13660 -3890 -4003 -4046 0
13660 -3890 -4001 -4048 0
13660 -3890 -3999 -4050 0
13660 -3890 -3997 -4052 0
13660 -3890 -3995 -4054 0
13660 -3890 -3993 -4056 0
13660 -3890 -3991 -4058 0
13660 -3890 -3989 -4060 0
13660 -3890 -3987 -4062 0
13660 -3890 -3985 -4064 0
13660 -3890 -3983 -4066 0
13660 -3890 -3981 -4068 0
13660 -3890 -3979 -4070 0
13660 -3890 -3977 -4072 0
13660 -3890 -3975 -4074 0
13660 -3890 -3973 -4076 0
13660 -3890 -3972 -4078 0
13660 -3888 -4032 0
13660 -3888 -4017 -4034 0
13660 -3888 -4015 -4036 0
13660 -3888 -4013 -4038 0
13660 -3888 -4011 -4040 0
13660 -3888 -4009 -4042 0
13660 -3888 -4007 -4044 0
13660 -3888 -4005 -4046 0
13660 -3888 -4003 -4048 0
13660 -3888 -4001 -4050 0
13660 -3888 -3999 -4052 0
13660 -3888 -3997 -4054 0
13660 -3888 -3995 -4056 0
13660 -3888 -3993 -4058 0
13660 -3888 -3991 -4060 0
13660 -3888 -3989 -4062 0
13660 -3888 -3987 -4064 0
13660 -3888 -3985 -4066 0
13660 -3888 -3983 -4068 0
13660 -3888 -3981 -4070 0
13660 -3888 -3979 -4072 0
13660 -3888 -3977 -4074 0
13660 -3888 -3975 -4076 0
13660 -3888 -3973 -4078 0
13660 -3888 -3972 -4080 0
13660 -3886 -4034 0
13660 -3886 -4017 -4036 0
13660 -3886 -4015 -4038 0
13660 -3886 -4013 -4040 0
13660 -3886 -4011 -4042 0
13660 -3886 -4009 -4044 0
13660 -3886 -4007 -4046 0
13660 -3886 -4005 -4048 0
13660 -3886 -4003 -4050 0
13660 -3886 -4001 -4052 0
13660 -3886 -3999 -4054 0
13660 -3886 -3997 -4056 0
13660 -3886 -3995 -4058 0
13660 -3886 -3993 -4060 0
13660 -3886 -3991 -4062 0
13660 -3886 -3989 -4064 0
13660 -3886 -3987 -4066 0
13660 -3886 -3985 -4068 0
13660 -3886 -3983 -4070 0
13660 -3886 -3981 -4072 0
13660 -3886 -3979 -4074 0
13660 -3886 -3977 -4076 0
13660 -3886 -3975 -4078 0
13660 -3886 -3973 -4080 0
13660 -3886 -3972 0
13660 -3884 -4036 0
13660 -3884 -4017 -4038 0
13660 -3884 -4015 -4040 0
13660 -3884 -4013 -4042 0
13660 -3884 -4011 -4044 0
13660 -3884 -4009 -4046 0
13660 -3884 -4007 -4048 0
13660 -3884 -4005 -4050 0
13660 -3884 -4003 -4052 0
13660 -3884 -4001 -4054 0
13660 -3884 -3999 -4056 0
13660 -3884 -3997 -4058 0
13660 -3884 -3995 -4060 0
13660 -3884 -3993 -4062 0
13660 -3884 -3991 -4064 0
13660 -3884 -3989 -4066 0
13660 -3884 -3987 -4068 0
13660 -3884 -3985 -4070 0
13660 -3884 -3983 -4072 0
13660 -3884 -3981 -4074 0
13660 -3884 -3979 -4076 0
13660 -3884 -3977 -4078 0
13660 -3884 -3975 -4080 0
13660 -3884 -3973 0
13660 -3884 -3972 0
13660 -3882 -4038 0
13660 -3882 -4017 -4040 0
13660 -3882 -4015 -4042 0
13660 -3882 -4013 -4044 0
13660 -3882 -4011 -4046 0
13660 -3882 -4009 -4048 0
13660 -3882 -4007 -4050 0
13660 -3882 -4005 -4052 0
13660 -3882 -4003 -4054 0
13660 -3882 -4001 -4056 0
13660 -3882 -3999 -4058 0
13660 -3882 -3997 -4060 0
13660 -3882 -3995 -4062 0
13660 -3882 -3993 -4064 0
13660 -3882 -3991 -4066 0
13660 -3882 -3989 -4068 0
13660 -3882 -3987 -4070 0
13660 -3882 -3985 -4072 0
13660 -3882 -3983 -4074 0
13660 -3882 -3981 -4076 0
13660 -3882 -3979 -4078 0
13660 -3882 -3977 -4080 0
13660 -3882 -3975 0
13660 -3882 -3973 0
13660 -3882 -3972 0
13660 -3880 -4040 0
13660 -3880 -4017 -4042 0
13660 -3880 -4015 -4044 0
13660 -3880 -4013 -4046 0
13660 -3880 -4011 -4048 0
13660 -3880 -4009 -4050 0
13660 -3880 -4007 -4052 0
13660 -3880 -4005 -4054 0
13660 -3880 -4003 -4056 0
13660 -3880 -4001 -4058 0
13660 -3880 -3999 -4060 0
13660 -3880 -3997 -4062 0
13660 -3880 -3995 -4064 0
13660 -3880 -3993 -4066 0
13660 -3880 -3991 -4068 0
13660 -3880 -3989 -4070 0
13660 -3880 -3987 -4072 0
13660 -3880 -3985 -4074 0
13660 -3880 -3983 -4076 0
13660 -3880 -3981 -4078 0
13660 -3880 -3979 -4080 0
13660 -3880 -3977 0
13660 -3880 -3975 0
13660 -3880 -3973 0
13660 -3880 -3972 0
13660 -3879 -4042 0
13660 -3879 -4017 -4044 0
13660 -3879 -4015 -4046 0
13660 -3879 -4013 -4048 0
13660 -3879 -4011 -4050 0
13660 -3879 -4009 -4052 0
13660 -3879 -4007 -4054 0
13660 -3879 -4005 -4056 0
13660 -3879 -4003 -4058 0
13660 -3879 -4001 -4060 0
13660 -3879 -3999 -4062 0
13660 -3879 -3997 -4064 0
13660 -3879 -3995 -4066 0
13660 -3879 -3993 -4068 0
13660 -3879 -3991 -4070 0
13660 -3879 -3989 -4072 0
13660 -3879 -3987 -4074 0
13660 -3879 -3985 -4076 0
13660 -3879 -3983 -4078 0
13660 -3879 -3981 -4080 0
13660 -3879 -3979 0
13660 -3879 -3977 0
13660 -3879 -3975 0
13660 -3879 -3973 0
13660 -3879 -3972 0
c ((36<=(aux516 + aux519 + aux520))=tv=SATLiteral(13661))
-13661 -4009 -4019 0
-13661 -4007 -4020 0
-13661 -4005 -4022 0
-13661 -4003 -4024 0
-13661 -4001 -4026 0
-13661 -3999 -4028 0
-13661 -3997 -4030 0
-13661 -3995 -4032 0
-13661 -3993 -4034 0
-13661 -3991 -4036 0
-13661 -3989 -4038 0
-13661 -3987 -4040 0
-13661 -3985 -4042 0
-13661 -3983 -4044 0
-13661 -3981 -4046 0
-13661 -3979 -4048 0
-13661 -3977 -4050 0
-13661 -3975 -4052 0
-13661 -3973 -4054 0
-13661 -3972 -4056 0
-13661 -3908 -4011 -4019 0
-13661 -3908 -4009 -4020 0
-13661 -3908 -4007 -4022 0
-13661 -3908 -4005 -4024 0
-13661 -3908 -4003 -4026 0
-13661 -3908 -4001 -4028 0
-13661 -3908 -3999 -4030 0
-13661 -3908 -3997 -4032 0
-13661 -3908 -3995 -4034 0
-13661 -3908 -3993 -4036 0
-13661 -3908 -3991 -4038 0
-13661 -3908 -3989 -4040 0
-13661 -3908 -3987 -4042 0
-13661 -3908 -3985 -4044 0
-13661 -3908 -3983 -4046 0
-13661 -3908 -3981 -4048 0
-13661 -3908 -3979 -4050 0
-13661 -3908 -3977 -4052 0
-13661 -3908 -3975 -4054 0
-13661 -3908 -3973 -4056 0
-13661 -3908 -3972 -4058 0
-13661 -3906 -4013 -4019 0
-13661 -3906 -4011 -4020 0
-13661 -3906 -4009 -4022 0
-13661 -3906 -4007 -4024 0
-13661 -3906 -4005 -4026 0
-13661 -3906 -4003 -4028 0
-13661 -3906 -4001 -4030 0
-13661 -3906 -3999 -4032 0
-13661 -3906 -3997 -4034 0
-13661 -3906 -3995 -4036 0
-13661 -3906 -3993 -4038 0
-13661 -3906 -3991 -4040 0
-13661 -3906 -3989 -4042 0
-13661 -3906 -3987 -4044 0
-13661 -3906 -3985 -4046 0
-13661 -3906 -3983 -4048 0
-13661 -3906 -3981 -4050 0
-13661 -3906 -3979 -4052 0
-13661 -3906 -3977 -4054 0
-13661 -3906 -3975 -4056 0
-13661 -3906 -3973 -4058 0
-13661 -3906 -3972 -4060 0
-13661 -3904 -4015 -4019 0
-13661 -3904 -4013 -4020 0
-13661 -3904 -4011 -4022 0
-13661 -3904 -4009 -4024 0
-13661 -3904 -4007 -4026 0
-13661 -3904 -4005 -4028 0
-13661 -3904 -4003 -4030 0
-13661 -3904 -4001 -4032 0
-13661 -3904 -3999 -4034 0
-13661 -3904 -3997 -4036 0
-13661 -3904 -3995 -4038 0
-13661 -3904 -3993 -4040 0
-13661 -3904 -3991 -4042 0
-13661 -3904 -3989 -4044 0
-13661 -3904 -3987 -4046 0
-13661 -3904 -3985 -4048 0
-13661 -3904 -3983 -4050 0
-13661 -3904 -3981 -4052 0
-13661 -3904 -3979 -4054 0
-13661 -3904 -3977 -4056 0
-13661 -3904 -3975 -4058 0
-13661 -3904 -3973 -4060 0
-13661 -3904 -3972 -4062 0
-13661 -3902 -4017 -4019 0
-13661 -3902 -4015 -4020 0
-13661 -3902 -4013 -4022 0
-13661 -3902 -4011 -4024 0
-13661 -3902 -4009 -4026 0
-13661 -3902 -4007 -4028 0
-13661 -3902 -4005 -4030 0
-13661 -3902 -4003 -4032 0
-13661 -3902 -4001 -4034 0
-13661 -3902 -3999 -4036 0
-13661 -3902 -3997 -4038 0
-13661 -3902 -3995 -4040 0
-13661 -3902 -3993 -4042 0
-13661 -3902 -3991 -4044 0
-13661 -3902 -3989 -4046 0
-13661 -3902 -3987 -4048 0
-13661 -3902 -3985 -4050 0
-13661 -3902 -3983 -4052 0
-13661 -3902 -3981 -4054 0
-13661 -3902 -3979 -4056 0
-13661 -3902 -3977 -4058 0
-13661 -3902 -3975 -4060 0
-13661 -3902 -3973 -4062 0
-13661 -3902 -3972 -4064 0
-13661 -3900 -4019 0
-13661 -3900 -4017 -4020 0
-13661 -3900 -4015 -4022 0
-13661 -3900 -4013 -4024 0
-13661 -3900 -4011 -4026 0
-13661 -3900 -4009 -4028 0
-13661 -3900 -4007 -4030 0
-13661 -3900 -4005 -4032 0
-13661 -3900 -4003 -4034 0
-13661 -3900 -4001 -4036 0
-13661 -3900 -3999 -4038 0
-13661 -3900 -3997 -4040 0
-13661 -3900 -3995 -4042 0
-13661 -3900 -3993 -4044 0
-13661 -3900 -3991 -4046 0
-13661 -3900 -3989 -4048 0
-13661 -3900 -3987 -4050 0
-13661 -3900 -3985 -4052 0
-13661 -3900 -3983 -4054 0
-13661 -3900 -3981 -4056 0
-13661 -3900 -3979 -4058 0
-13661 -3900 -3977 -4060 0
-13661 -3900 -3975 -4062 0
-13661 -3900 -3973 -4064 0
-13661 -3900 -3972 -4066 0
-13661 -3898 -4020 0
-13661 -3898 -4017 -4022 0
-13661 -3898 -4015 -4024 0
-13661 -3898 -4013 -4026 0
-13661 -3898 -4011 -4028 0
-13661 -3898 -4009 -4030 0
-13661 -3898 -4007 -4032 0
-13661 -3898 -4005 -4034 0
-13661 -3898 -4003 -4036 0
-13661 -3898 -4001 -4038 0
-13661 -3898 -3999 -4040 0
-13661 -3898 -3997 -4042 0
-13661 -3898 -3995 -4044 0
-13661 -3898 -3993 -4046 0
-13661 -3898 -3991 -4048 0
-13661 -3898 -3989 -4050 0
-13661 -3898 -3987 -4052 0
-13661 -3898 -3985 -4054 0
-13661 -3898 -3983 -4056 0
-13661 -3898 -3981 -4058 0
-13661 -3898 -3979 -4060 0
-13661 -3898 -3977 -4062 0
-13661 -3898 -3975 -4064 0
-13661 -3898 -3973 -4066 0
-13661 -3898 -3972 -4068 0
-13661 -3896 -4022 0
-13661 -3896 -4017 -4024 0
-13661 -3896 -4015 -4026 0
-13661 -3896 -4013 -4028 0
-13661 -3896 -4011 -4030 0
-13661 -3896 -4009 -4032 0
-13661 -3896 -4007 -4034 0
-13661 -3896 -4005 -4036 0
-13661 -3896 -4003 -4038 0
-13661 -3896 -4001 -4040 0
-13661 -3896 -3999 -4042 0
-13661 -3896 -3997 -4044 0
-13661 -3896 -3995 -4046 0
-13661 -3896 -3993 -4048 0
-13661 -3896 -3991 -4050 0
-13661 -3896 -3989 -4052 0
-13661 -3896 -3987 -4054 0
-13661 -3896 -3985 -4056 0
-13661 -3896 -3983 -4058 0
-13661 -3896 -3981 -4060 0
-13661 -3896 -3979 -4062 0
-13661 -3896 -3977 -4064 0
-13661 -3896 -3975 -4066 0
-13661 -3896 -3973 -4068 0
-13661 -3896 -3972 -4070 0
-13661 -3894 -4024 0
-13661 -3894 -4017 -4026 0
-13661 -3894 -4015 -4028 0
-13661 -3894 -4013 -4030 0
-13661 -3894 -4011 -4032 0
-13661 -3894 -4009 -4034 0
-13661 -3894 -4007 -4036 0
-13661 -3894 -4005 -4038 0
-13661 -3894 -4003 -4040 0
-13661 -3894 -4001 -4042 0
-13661 -3894 -3999 -4044 0
-13661 -3894 -3997 -4046 0
-13661 -3894 -3995 -4048 0
-13661 -3894 -3993 -4050 0
-13661 -3894 -3991 -4052 0
-13661 -3894 -3989 -4054 0
-13661 -3894 -3987 -4056 0
-13661 -3894 -3985 -4058 0
-13661 -3894 -3983 -4060 0
-13661 -3894 -3981 -4062 0
-13661 -3894 -3979 -4064 0
-13661 -3894 -3977 -4066 0
-13661 -3894 -3975 -4068 0
-13661 -3894 -3973 -4070 0
-13661 -3894 -3972 -4072 0
-13661 -3892 -4026 0
-13661 -3892 -4017 -4028 0
-13661 -3892 -4015 -4030 0
-13661 -3892 -4013 -4032 0
-13661 -3892 -4011 -4034 0
-13661 -3892 -4009 -4036 0
-13661 -3892 -4007 -4038 0
-13661 -3892 -4005 -4040 0
-13661 -3892 -4003 -4042 0
-13661 -3892 -4001 -4044 0
-13661 -3892 -3999 -4046 0
-13661 -3892 -3997 -4048 0
-13661 -3892 -3995 -4050 0
-13661 -3892 -3993 -4052 0
-13661 -3892 -3991 -4054 0
-13661 -3892 -3989 -4056 0
-13661 -3892 -3987 -4058 0
-13661 -3892 -3985 -4060 0
-13661 -3892 -3983 -4062 0
-13661 -3892 -3981 -4064 0
-13661 -3892 -3979 -4066 0
-13661 -3892 -3977 -4068 0
-13661 -3892 -3975 -4070 0
-13661 -3892 -3973 -4072 0
-13661 -3892 -3972 -4074 0
-13661 -3890 -4028 0
-13661 -3890 -4017 -4030 0
-13661 -3890 -4015 -4032 0
-13661 -3890 -4013 -4034 0
-13661 -3890 -4011 -4036 0
-13661 -3890 -4009 -4038 0
-13661 -3890 -4007 -4040 0
-13661 -3890 -4005 -4042 0
-13661 -3890 -4003 -4044 0
-13661 -3890 -4001 -4046 0
-13661 -3890 -3999 -4048 0
-13661 -3890 -3997 -4050 0
-13661 -3890 -3995 -4052 0
-13661 -3890 -3993 -4054 0
-13661 -3890 -3991 -4056 0
-13661 -3890 -3989 -4058 0
-13661 -3890 -3987 -4060 0
-13661 -3890 -3985 -4062 0
-13661 -3890 -3983 -4064 0
-13661 -3890 -3981 -4066 0
-13661 -3890 -3979 -4068 0
-13661 -3890 -3977 -4070 0
-13661 -3890 -3975 -4072 0
-13661 -3890 -3973 -4074 0
-13661 -3890 -3972 -4076 0
-13661 -3888 -4030 0
-13661 -3888 -4017 -4032 0
-13661 -3888 -4015 -4034 0
-13661 -3888 -4013 -4036 0
-13661 -3888 -4011 -4038 0
-13661 -3888 -4009 -4040 0
-13661 -3888 -4007 -4042 0
-13661 -3888 -4005 -4044 0
-13661 -3888 -4003 -4046 0
-13661 -3888 -4001 -4048 0
-13661 -3888 -3999 -4050 0
-13661 -3888 -3997 -4052 0
-13661 -3888 -3995 -4054 0
-13661 -3888 -3993 -4056 0
-13661 -3888 -3991 -4058 0
-13661 -3888 -3989 -4060 0
-13661 -3888 -3987 -4062 0
-13661 -3888 -3985 -4064 0
-13661 -3888 -3983 -4066 0
-13661 -3888 -3981 -4068 0
-13661 -3888 -3979 -4070 0
-13661 -3888 -3977 -4072 0
-13661 -3888 -3975 -4074 0
-13661 -3888 -3973 -4076 0
-13661 -3888 -3972 -4078 0
-13661 -3886 -4032 0
-13661 -3886 -4017 -4034 0
-13661 -3886 -4015 -4036 0
-13661 -3886 -4013 -4038 0
-13661 -3886 -4011 -4040 0
-13661 -3886 -4009 -4042 0
-13661 -3886 -4007 -4044 0
-13661 -3886 -4005 -4046 0
-13661 -3886 -4003 -4048 0
-13661 -3886 -4001 -4050 0
-13661 -3886 -3999 -4052 0
-13661 -3886 -3997 -4054 0
-13661 -3886 -3995 -4056 0
-13661 -3886 -3993 -4058 0
-13661 -3886 -3991 -4060 0
-13661 -3886 -3989 -4062 0
-13661 -3886 -3987 -4064 0
-13661 -3886 -3985 -4066 0
-13661 -3886 -3983 -4068 0
-13661 -3886 -3981 -4070 0
-13661 -3886 -3979 -4072 0
-13661 -3886 -3977 -4074 0
-13661 -3886 -3975 -4076 0
-13661 -3886 -3973 -4078 0
-13661 -3886 -3972 -4080 0
-13661 -3884 -4034 0
-13661 -3884 -4017 -4036 0
-13661 -3884 -4015 -4038 0
-13661 -3884 -4013 -4040 0
-13661 -3884 -4011 -4042 0
-13661 -3884 -4009 -4044 0
-13661 -3884 -4007 -4046 0
-13661 -3884 -4005 -4048 0
-13661 -3884 -4003 -4050 0
-13661 -3884 -4001 -4052 0
-13661 -3884 -3999 -4054 0
-13661 -3884 -3997 -4056 0
-13661 -3884 -3995 -4058 0
-13661 -3884 -3993 -4060 0
-13661 -3884 -3991 -4062 0
-13661 -3884 -3989 -4064 0
-13661 -3884 -3987 -4066 0
-13661 -3884 -3985 -4068 0
-13661 -3884 -3983 -4070 0
-13661 -3884 -3981 -4072 0
-13661 -3884 -3979 -4074 0
-13661 -3884 -3977 -4076 0
-13661 -3884 -3975 -4078 0
-13661 -3884 -3973 -4080 0
-13661 -3884 -3972 0
-13661 -3882 -4036 0
-13661 -3882 -4017 -4038 0
-13661 -3882 -4015 -4040 0
-13661 -3882 -4013 -4042 0
-13661 -3882 -4011 -4044 0
-13661 -3882 -4009 -4046 0
-13661 -3882 -4007 -4048 0
-13661 -3882 -4005 -4050 0
-13661 -3882 -4003 -4052 0
-13661 -3882 -4001 -4054 0
-13661 -3882 -3999 -4056 0
-13661 -3882 -3997 -4058 0
-13661 -3882 -3995 -4060 0
-13661 -3882 -3993 -4062 0
-13661 -3882 -3991 -4064 0
-13661 -3882 -3989 -4066 0
-13661 -3882 -3987 -4068 0
-13661 -3882 -3985 -4070 0
-13661 -3882 -3983 -4072 0
-13661 -3882 -3981 -4074 0
-13661 -3882 -3979 -4076 0
-13661 -3882 -3977 -4078 0
-13661 -3882 -3975 -4080 0
-13661 -3882 -3973 0
-13661 -3882 -3972 0
-13661 -3880 -4038 0
-13661 -3880 -4017 -4040 0
-13661 -3880 -4015 -4042 0
-13661 -3880 -4013 -4044 0
-13661 -3880 -4011 -4046 0
-13661 -3880 -4009 -4048 0
-13661 -3880 -4007 -4050 0
-13661 -3880 -4005 -4052 0
-13661 -3880 -4003 -4054 0
-13661 -3880 -4001 -4056 0
-13661 -3880 -3999 -4058 0
-13661 -3880 -3997 -4060 0
-13661 -3880 -3995 -4062 0
-13661 -3880 -3993 -4064 0
-13661 -3880 -3991 -4066 0
-13661 -3880 -3989 -4068 0
-13661 -3880 -3987 -4070 0
-13661 -3880 -3985 -4072 0
-13661 -3880 -3983 -4074 0
-13661 -3880 -3981 -4076 0
-13661 -3880 -3979 -4078 0
-13661 -3880 -3977 -4080 0
-13661 -3880 -3975 0
-13661 -3880 -3973 0
-13661 -3880 -3972 0
-13661 -3879 -4040 0
-13661 -3879 -4017 -4042 0
-13661 -3879 -4015 -4044 0
-13661 -3879 -4013 -4046 0
-13661 -3879 -4011 -4048 0
-13661 -3879 -4009 -4050 0
-13661 -3879 -4007 -4052 0
-13661 -3879 -4005 -4054 0
-13661 -3879 -4003 -4056 0
-13661 -3879 -4001 -4058 0
-13661 -3879 -3999 -4060 0
-13661 -3879 -3997 -4062 0
-13661 -3879 -3995 -4064 0
-13661 -3879 -3993 -4066 0
-13661 -3879 -3991 -4068 0
-13661 -3879 -3989 -4070 0
-13661 -3879 -3987 -4072 0
-13661 -3879 -3985 -4074 0
-13661 -3879 -3983 -4076 0
-13661 -3879 -3981 -4078 0
-13661 -3879 -3979 -4080 0
-13661 -3879 -3977 0
-13661 -3879 -3975 0
-13661 -3879 -3973 0
-13661 -3879 -3972 0
13661 3977 4080 0
13661 3979 4078 0
13661 3981 4076 0
13661 3983 4074 0
13661 3985 4072 0
13661 3987 4070 0
13661 3989 4068 0
13661 3991 4066 0
13661 3993 4064 0
13661 3995 4062 0
13661 3997 4060 0
13661 3999 4058 0
13661 4001 4056 0
13661 4003 4054 0
13661 4005 4052 0
13661 4007 4050 0
13661 4009 4048 0
13661 4011 4046 0
13661 4013 4044 0
13661 4015 4042 0
13661 4017 4040 0
13661 3879 3975 4080 0
13661 3879 3977 4078 0
13661 3879 3979 4076 0
13661 3879 3981 4074 0
13661 3879 3983 4072 0
13661 3879 3985 4070 0
13661 3879 3987 4068 0
13661 3879 3989 4066 0
13661 3879 3991 4064 0
13661 3879 3993 4062 0
13661 3879 3995 4060 0
13661 3879 3997 4058 0
13661 3879 3999 4056 0
13661 3879 4001 4054 0
13661 3879 4003 4052 0
13661 3879 4005 4050 0
13661 3879 4007 4048 0
13661 3879 4009 4046 0
13661 3879 4011 4044 0
13661 3879 4013 4042 0
13661 3879 4015 4040 0
13661 3879 4017 4038 0
13661 3880 3973 4080 0
13661 3880 3975 4078 0
13661 3880 3977 4076 0
13661 3880 3979 4074 0
13661 3880 3981 4072 0
13661 3880 3983 4070 0
13661 3880 3985 4068 0
13661 3880 3987 4066 0
13661 3880 3989 4064 0
13661 3880 3991 4062 0
13661 3880 3993 4060 0
13661 3880 3995 4058 0
13661 3880 3997 4056 0
13661 3880 3999 4054 0
13661 3880 4001 4052 0
13661 3880 4003 4050 0
13661 3880 4005 4048 0
13661 3880 4007 4046 0
13661 3880 4009 4044 0
13661 3880 4011 4042 0
13661 3880 4013 4040 0
13661 3880 4015 4038 0
13661 3880 4017 4036 0
13661 3882 3972 4080 0
13661 3882 3973 4078 0
13661 3882 3975 4076 0
13661 3882 3977 4074 0
13661 3882 3979 4072 0
13661 3882 3981 4070 0
13661 3882 3983 4068 0
13661 3882 3985 4066 0
13661 3882 3987 4064 0
13661 3882 3989 4062 0
13661 3882 3991 4060 0
13661 3882 3993 4058 0
13661 3882 3995 4056 0
13661 3882 3997 4054 0
13661 3882 3999 4052 0
13661 3882 4001 4050 0
13661 3882 4003 4048 0
13661 3882 4005 4046 0
13661 3882 4007 4044 0
13661 3882 4009 4042 0
13661 3882 4011 4040 0
13661 3882 4013 4038 0
13661 3882 4015 4036 0
13661 3882 4017 4034 0
13661 3884 4080 0
13661 3884 3972 4078 0
13661 3884 3973 4076 0
13661 3884 3975 4074 0
13661 3884 3977 4072 0
13661 3884 3979 4070 0
13661 3884 3981 4068 0
13661 3884 3983 4066 0
13661 3884 3985 4064 0
13661 3884 3987 4062 0
13661 3884 3989 4060 0
13661 3884 3991 4058 0
13661 3884 3993 4056 0
13661 3884 3995 4054 0
13661 3884 3997 4052 0
13661 3884 3999 4050 0
13661 3884 4001 4048 0
13661 3884 4003 4046 0
13661 3884 4005 4044 0
13661 3884 4007 4042 0
13661 3884 4009 4040 0
13661 3884 4011 4038 0
13661 3884 4013 4036 0
13661 3884 4015 4034 0
13661 3884 4017 4032 0
13661 3886 4078 0
13661 3886 3972 4076 0
13661 3886 3973 4074 0
13661 3886 3975 4072 0
13661 3886 3977 4070 0
13661 3886 3979 4068 0
13661 3886 3981 4066 0
13661 3886 3983 4064 0
13661 3886 3985 4062 0
13661 3886 3987 4060 0
13661 3886 3989 4058 0
13661 3886 3991 4056 0
13661 3886 3993 4054 0
13661 3886 3995 4052 0
13661 3886 3997 4050 0
13661 3886 3999 4048 0
13661 3886 4001 4046 0
13661 3886 4003 4044 0
13661 3886 4005 4042 0
13661 3886 4007 4040 0
13661 3886 4009 4038 0
13661 3886 4011 4036 0
13661 3886 4013 4034 0
13661 3886 4015 4032 0
13661 3886 4017 4030 0
13661 3888 4076 0
13661 3888 3972 4074 0
13661 3888 3973 4072 0
13661 3888 3975 4070 0
13661 3888 3977 4068 0
13661 3888 3979 4066 0
13661 3888 3981 4064 0
13661 3888 3983 4062 0
13661 3888 3985 4060 0
13661 3888 3987 4058 0
13661 3888 3989 4056 0
13661 3888 3991 4054 0
13661 3888 3993 4052 0
13661 3888 3995 4050 0
13661 3888 3997 4048 0
13661 3888 3999 4046 0
13661 3888 4001 4044 0
13661 3888 4003 4042 0
13661 3888 4005 4040 0
13661 3888 4007 4038 0
13661 3888 4009 4036 0
13661 3888 4011 4034 0
13661 3888 4013 4032 0
13661 3888 4015 4030 0
13661 3888 4017 4028 0
13661 3890 4074 0
13661 3890 3972 4072 0
13661 3890 3973 4070 0
13661 3890 3975 4068 0
13661 3890 3977 4066 0
13661 3890 3979 4064 0
13661 3890 3981 4062 0
13661 3890 3983 4060 0
13661 3890 3985 4058 0
13661 3890 3987 4056 0
13661 3890 3989 4054 0
13661 3890 3991 4052 0
13661 3890 3993 4050 0
13661 3890 3995 4048 0
13661 3890 3997 4046 0
13661 3890 3999 4044 0
13661 3890 4001 4042 0
13661 3890 4003 4040 0
13661 3890 4005 4038 0
13661 3890 4007 4036 0
13661 3890 4009 4034 0
13661 3890 4011 4032 0
13661 3890 4013 4030 0
13661 3890 4015 4028 0
13661 3890 4017 4026 0
13661 3892 4072 0
13661 3892 3972 4070 0
13661 3892 3973 4068 0
13661 3892 3975 4066 0
13661 3892 3977 4064 0
13661 3892 3979 4062 0
13661 3892 3981 4060 0
13661 3892 3983 4058 0
13661 3892 3985 4056 0
13661 3892 3987 4054 0
13661 3892 3989 4052 0
13661 3892 3991 4050 0
13661 3892 3993 4048 0
13661 3892 3995 4046 0
13661 3892 3997 4044 0
13661 3892 3999 4042 0
13661 3892 4001 4040 0
13661 3892 4003 4038 0
13661 3892 4005 4036 0
13661 3892 4007 4034 0
13661 3892 4009 4032 0
13661 3892 4011 4030 0
13661 3892 4013 4028 0
13661 3892 4015 4026 0
13661 3892 4017 4024 0
13661 3894 4070 0
13661 3894 3972 4068 0
13661 3894 3973 4066 0
13661 3894 3975 4064 0
13661 3894 3977 4062 0
13661 3894 3979 4060 0
13661 3894 3981 4058 0
13661 3894 3983 4056 0
13661 3894 3985 4054 0
13661 3894 3987 4052 0
13661 3894 3989 4050 0
13661 3894 3991 4048 0
13661 3894 3993 4046 0
13661 3894 3995 4044 0
13661 3894 3997 4042 0
13661 3894 3999 4040 0
13661 3894 4001 4038 0
13661 3894 4003 4036 0
13661 3894 4005 4034 0
13661 3894 4007 4032 0
13661 3894 4009 4030 0
13661 3894 4011 4028 0
13661 3894 4013 4026 0
13661 3894 4015 4024 0
13661 3894 4017 4022 0
13661 3896 4068 0
13661 3896 3972 4066 0
13661 3896 3973 4064 0
13661 3896 3975 4062 0
13661 3896 3977 4060 0
13661 3896 3979 4058 0
13661 3896 3981 4056 0
13661 3896 3983 4054 0
13661 3896 3985 4052 0
13661 3896 3987 4050 0
13661 3896 3989 4048 0
13661 3896 3991 4046 0
13661 3896 3993 4044 0
13661 3896 3995 4042 0
13661 3896 3997 4040 0
13661 3896 3999 4038 0
13661 3896 4001 4036 0
13661 3896 4003 4034 0
13661 3896 4005 4032 0
13661 3896 4007 4030 0
13661 3896 4009 4028 0
13661 3896 4011 4026 0
13661 3896 4013 4024 0
13661 3896 4015 4022 0
13661 3896 4017 4020 0
13661 3898 4066 0
13661 3898 3972 4064 0
13661 3898 3973 4062 0
13661 3898 3975 4060 0
13661 3898 3977 4058 0
13661 3898 3979 4056 0
13661 3898 3981 4054 0
13661 3898 3983 4052 0
13661 3898 3985 4050 0
13661 3898 3987 4048 0
13661 3898 3989 4046 0
13661 3898 3991 4044 0
13661 3898 3993 4042 0
13661 3898 3995 4040 0
13661 3898 3997 4038 0
13661 3898 3999 4036 0
13661 3898 4001 4034 0
13661 3898 4003 4032 0
13661 3898 4005 4030 0
13661 3898 4007 4028 0
13661 3898 4009 4026 0
13661 3898 4011 4024 0
13661 3898 4013 4022 0
13661 3898 4015 4020 0
13661 3898 4017 4019 0
13661 3900 4064 0
13661 3900 3972 4062 0
13661 3900 3973 4060 0
13661 3900 3975 4058 0
13661 3900 3977 4056 0
13661 3900 3979 4054 0
13661 3900 3981 4052 0
13661 3900 3983 4050 0
13661 3900 3985 4048 0
13661 3900 3987 4046 0
13661 3900 3989 4044 0
13661 3900 3991 4042 0
13661 3900 3993 4040 0
13661 3900 3995 4038 0
13661 3900 3997 4036 0
13661 3900 3999 4034 0
13661 3900 4001 4032 0
13661 3900 4003 4030 0
13661 3900 4005 4028 0
13661 3900 4007 4026 0
13661 3900 4009 4024 0
13661 3900 4011 4022 0
13661 3900 4013 4020 0
13661 3900 4015 4019 0
13661 3900 4017 0
13661 3902 4062 0
13661 3902 3972 4060 0
13661 3902 3973 4058 0
13661 3902 3975 4056 0
13661 3902 3977 4054 0
13661 3902 3979 4052 0
13661 3902 3981 4050 0
13661 3902 3983 4048 0
13661 3902 3985 4046 0
13661 3902 3987 4044 0
13661 3902 3989 4042 0
13661 3902 3991 4040 0
13661 3902 3993 4038 0
13661 3902 3995 4036 0
13661 3902 3997 4034 0
13661 3902 3999 4032 0
13661 3902 4001 4030 0
13661 3902 4003 4028 0
13661 3902 4005 4026 0
13661 3902 4007 4024 0
13661 3902 4009 4022 0
13661 3902 4011 4020 0
13661 3902 4013 4019 0
13661 3902 4015 0
13661 3902 4017 0
13661 3904 4060 0
13661 3904 3972 4058 0
13661 3904 3973 4056 0
13661 3904 3975 4054 0
13661 3904 3977 4052 0
13661 3904 3979 4050 0
13661 3904 3981 4048 0
13661 3904 3983 4046 0
13661 3904 3985 4044 0
13661 3904 3987 4042 0
13661 3904 3989 4040 0
13661 3904 3991 4038 0
13661 3904 3993 4036 0
13661 3904 3995 4034 0
13661 3904 3997 4032 0
13661 3904 3999 4030 0
13661 3904 4001 4028 0
13661 3904 4003 4026 0
13661 3904 4005 4024 0
13661 3904 4007 4022 0
13661 3904 4009 4020 0
13661 3904 4011 4019 0
13661 3904 4013 0
13661 3904 4015 0
13661 3904 4017 0
13661 3906 4058 0
13661 3906 3972 4056 0
13661 3906 3973 4054 0
13661 3906 3975 4052 0
13661 3906 3977 4050 0
13661 3906 3979 4048 0
13661 3906 3981 4046 0
13661 3906 3983 4044 0
13661 3906 3985 4042 0
13661 3906 3987 4040 0
13661 3906 3989 4038 0
13661 3906 3991 4036 0
13661 3906 3993 4034 0
13661 3906 3995 4032 0
13661 3906 3997 4030 0
13661 3906 3999 4028 0
13661 3906 4001 4026 0
13661 3906 4003 4024 0
13661 3906 4005 4022 0
13661 3906 4007 4020 0
13661 3906 4009 4019 0
13661 3906 4011 0
13661 3906 4013 0
13661 3906 4015 0
13661 3906 4017 0
13661 3908 4056 0
13661 3908 3972 4054 0
13661 3908 3973 4052 0
13661 3908 3975 4050 0
13661 3908 3977 4048 0
13661 3908 3979 4046 0
13661 3908 3981 4044 0
13661 3908 3983 4042 0
13661 3908 3985 4040 0
13661 3908 3987 4038 0
13661 3908 3989 4036 0
13661 3908 3991 4034 0
13661 3908 3993 4032 0
13661 3908 3995 4030 0
13661 3908 3997 4028 0
13661 3908 3999 4026 0
13661 3908 4001 4024 0
13661 3908 4003 4022 0
13661 3908 4005 4020 0
13661 3908 4007 4019 0
13661 3908 4009 0
13661 3908 4011 0
13661 3908 4013 0
13661 3908 4015 0
13661 3908 4017 0
c (((aux522 + aux525 + aux526)<=36)=tv=SATLiteral(13662))
-13662 4213 4314 0
-13662 4215 4312 0
-13662 4217 4310 0
-13662 4219 4308 0
-13662 4221 4306 0
-13662 4223 4304 0
-13662 4225 4302 0
-13662 4227 4300 0
-13662 4229 4298 0
-13662 4231 4296 0
-13662 4233 4294 0
-13662 4235 4292 0
-13662 4237 4290 0
-13662 4239 4288 0
-13662 4241 4286 0
-13662 4243 4284 0
-13662 4245 4282 0
-13662 4247 4280 0
-13662 4249 4278 0
-13662 4251 4276 0
-13662 4113 4211 4314 0
-13662 4113 4213 4312 0
-13662 4113 4215 4310 0
-13662 4113 4217 4308 0
-13662 4113 4219 4306 0
-13662 4113 4221 4304 0
-13662 4113 4223 4302 0
-13662 4113 4225 4300 0
-13662 4113 4227 4298 0
-13662 4113 4229 4296 0
-13662 4113 4231 4294 0
-13662 4113 4233 4292 0
-13662 4113 4235 4290 0
-13662 4113 4237 4288 0
-13662 4113 4239 4286 0
-13662 4113 4241 4284 0
-13662 4113 4243 4282 0
-13662 4113 4245 4280 0
-13662 4113 4247 4278 0
-13662 4113 4249 4276 0
-13662 4113 4251 4274 0
-13662 4114 4209 4314 0
-13662 4114 4211 4312 0
-13662 4114 4213 4310 0
-13662 4114 4215 4308 0
-13662 4114 4217 4306 0
-13662 4114 4219 4304 0
-13662 4114 4221 4302 0
-13662 4114 4223 4300 0
-13662 4114 4225 4298 0
-13662 4114 4227 4296 0
-13662 4114 4229 4294 0
-13662 4114 4231 4292 0
-13662 4114 4233 4290 0
-13662 4114 4235 4288 0
-13662 4114 4237 4286 0
-13662 4114 4239 4284 0
-13662 4114 4241 4282 0
-13662 4114 4243 4280 0
-13662 4114 4245 4278 0
-13662 4114 4247 4276 0
-13662 4114 4249 4274 0
-13662 4114 4251 4272 0
-13662 4116 4207 4314 0
-13662 4116 4209 4312 0
-13662 4116 4211 4310 0
-13662 4116 4213 4308 0
-13662 4116 4215 4306 0
-13662 4116 4217 4304 0
-13662 4116 4219 4302 0
-13662 4116 4221 4300 0
-13662 4116 4223 4298 0
-13662 4116 4225 4296 0
-13662 4116 4227 4294 0
-13662 4116 4229 4292 0
-13662 4116 4231 4290 0
-13662 4116 4233 4288 0
-13662 4116 4235 4286 0
-13662 4116 4237 4284 0
-13662 4116 4239 4282 0
-13662 4116 4241 4280 0
-13662 4116 4243 4278 0
-13662 4116 4245 4276 0
-13662 4116 4247 4274 0
-13662 4116 4249 4272 0
-13662 4116 4251 4270 0
-13662 4118 4206 4314 0
-13662 4118 4207 4312 0
-13662 4118 4209 4310 0
-13662 4118 4211 4308 0
-13662 4118 4213 4306 0
-13662 4118 4215 4304 0
-13662 4118 4217 4302 0
-13662 4118 4219 4300 0
-13662 4118 4221 4298 0
-13662 4118 4223 4296 0
-13662 4118 4225 4294 0
-13662 4118 4227 4292 0
-13662 4118 4229 4290 0
-13662 4118 4231 4288 0
-13662 4118 4233 4286 0
-13662 4118 4235 4284 0
-13662 4118 4237 4282 0
-13662 4118 4239 4280 0
-13662 4118 4241 4278 0
-13662 4118 4243 4276 0
-13662 4118 4245 4274 0
-13662 4118 4247 4272 0
-13662 4118 4249 4270 0
-13662 4118 4251 4268 0
-13662 4120 4314 0
-13662 4120 4206 4312 0
-13662 4120 4207 4310 0
-13662 4120 4209 4308 0
-13662 4120 4211 4306 0
-13662 4120 4213 4304 0
-13662 4120 4215 4302 0
-13662 4120 4217 4300 0
-13662 4120 4219 4298 0
-13662 4120 4221 4296 0
-13662 4120 4223 4294 0
-13662 4120 4225 4292 0
-13662 4120 4227 4290 0
-13662 4120 4229 4288 0
-13662 4120 4231 4286 0
-13662 4120 4233 4284 0
-13662 4120 4235 4282 0
-13662 4120 4237 4280 0
-13662 4120 4239 4278 0
-13662 4120 4241 4276 0
-13662 4120 4243 4274 0
-13662 4120 4245 4272 0
-13662 4120 4247 4270 0
-13662 4120 4249 4268 0
-13662 4120 4251 4266 0
-13662 4122 4312 0
-13662 4122 4206 4310 0
-13662 4122 4207 4308 0
-13662 4122 4209 4306 0
-13662 4122 4211 4304 0
-13662 4122 4213 4302 0
-13662 4122 4215 4300 0
-13662 4122 4217 4298 0
-13662 4122 4219 4296 0
-13662 4122 4221 4294 0
-13662 4122 4223 4292 0
-13662 4122 4225 4290 0
-13662 4122 4227 4288 0
-13662 4122 4229 4286 0
-13662 4122 4231 4284 0
-13662 4122 4233 4282 0
-13662 4122 4235 4280 0
-13662 4122 4237 4278 0
-13662 4122 4239 4276 0
-13662 4122 4241 4274 0
-13662 4122 4243 4272 0
-13662 4122 4245 4270 0
-13662 4122 4247 4268 0
-13662 4122 4249 4266 0
-13662 4122 4251 4264 0
-13662 4124 4310 0
-13662 4124 4206 4308 0
-13662 4124 4207 4306 0
-13662 4124 4209 4304 0
-13662 4124 4211 4302 0
-13662 4124 4213 4300 0
-13662 4124 4215 4298 0
-13662 4124 4217 4296 0
-13662 4124 4219 4294 0
-13662 4124 4221 4292 0
-13662 4124 4223 4290 0
-13662 4124 4225 4288 0
-13662 4124 4227 4286 0
-13662 4124 4229 4284 0
-13662 4124 4231 4282 0
-13662 4124 4233 4280 0
-13662 4124 4235 4278 0
-13662 4124 4237 4276 0
-13662 4124 4239 4274 0
-13662 4124 4241 4272 0
-13662 4124 4243 4270 0
-13662 4124 4245 4268 0
-13662 4124 4247 4266 0
-13662 4124 4249 4264 0
-13662 4124 4251 4262 0
-13662 4126 4308 0
-13662 4126 4206 4306 0
-13662 4126 4207 4304 0
-13662 4126 4209 4302 0
-13662 4126 4211 4300 0
-13662 4126 4213 4298 0
-13662 4126 4215 4296 0
-13662 4126 4217 4294 0
-13662 4126 4219 4292 0
-13662 4126 4221 4290 0
-13662 4126 4223 4288 0
-13662 4126 4225 4286 0
-13662 4126 4227 4284 0
-13662 4126 4229 4282 0
-13662 4126 4231 4280 0
-13662 4126 4233 4278 0
-13662 4126 4235 4276 0
-13662 4126 4237 4274 0
-13662 4126 4239 4272 0
-13662 4126 4241 4270 0
-13662 4126 4243 4268 0
-13662 4126 4245 4266 0
-13662 4126 4247 4264 0
-13662 4126 4249 4262 0
-13662 4126 4251 4260 0
-13662 4128 4306 0
-13662 4128 4206 4304 0
-13662 4128 4207 4302 0
-13662 4128 4209 4300 0
-13662 4128 4211 4298 0
-13662 4128 4213 4296 0
-13662 4128 4215 4294 0
-13662 4128 4217 4292 0
-13662 4128 4219 4290 0
-13662 4128 4221 4288 0
-13662 4128 4223 4286 0
-13662 4128 4225 4284 0
-13662 4128 4227 4282 0
-13662 4128 4229 4280 0
-13662 4128 4231 4278 0
-13662 4128 4233 4276 0
-13662 4128 4235 4274 0
-13662 4128 4237 4272 0
-13662 4128 4239 4270 0
-13662 4128 4241 4268 0
-13662 4128 4243 4266 0
-13662 4128 4245 4264 0
-13662 4128 4247 4262 0
-13662 4128 4249 4260 0
-13662 4128 4251 4258 0
-13662 4130 4304 0
-13662 4130 4206 4302 0
-13662 4130 4207 4300 0
-13662 4130 4209 4298 0
-13662 4130 4211 4296 0
-13662 4130 4213 4294 0
-13662 4130 4215 4292 0
-13662 4130 4217 4290 0
-13662 4130 4219 4288 0
-13662 4130 4221 4286 0
-13662 4130 4223 4284 0
-13662 4130 4225 4282 0
-13662 4130 4227 4280 0
-13662 4130 4229 4278 0
-13662 4130 4231 4276 0
-13662 4130 4233 4274 0
-13662 4130 4235 4272 0
-13662 4130 4237 4270 0
-13662 4130 4239 4268 0
-13662 4130 4241 4266 0
-13662 4130 4243 4264 0
-13662 4130 4245 4262 0
-13662 4130 4247 4260 0
-13662 4130 4249 4258 0
-13662 4130 4251 4256 0
-13662 4132 4302 0
-13662 4132 4206 4300 0
-13662 4132 4207 4298 0
-13662 4132 4209 4296 0
-13662 4132 4211 4294 0
-13662 4132 4213 4292 0
-13662 4132 4215 4290 0
-13662 4132 4217 4288 0
-13662 4132 4219 4286 0
-13662 4132 4221 4284 0
-13662 4132 4223 4282 0
-13662 4132 4225 4280 0
-13662 4132 4227 4278 0
-13662 4132 4229 4276 0
-13662 4132 4231 4274 0
-13662 4132 4233 4272 0
-13662 4132 4235 4270 0
-13662 4132 4237 4268 0
-13662 4132 4239 4266 0
-13662 4132 4241 4264 0
-13662 4132 4243 4262 0
-13662 4132 4245 4260 0
-13662 4132 4247 4258 0
-13662 4132 4249 4256 0
-13662 4132 4251 4254 0
-13662 4134 4300 0
-13662 4134 4206 4298 0
-13662 4134 4207 4296 0
-13662 4134 4209 4294 0
-13662 4134 4211 4292 0
-13662 4134 4213 4290 0
-13662 4134 4215 4288 0
-13662 4134 4217 4286 0
-13662 4134 4219 4284 0
-13662 4134 4221 4282 0
-13662 4134 4223 4280 0
-13662 4134 4225 4278 0
-13662 4134 4227 4276 0
-13662 4134 4229 4274 0
-13662 4134 4231 4272 0
-13662 4134 4233 4270 0
-13662 4134 4235 4268 0
-13662 4134 4237 4266 0
-13662 4134 4239 4264 0
-13662 4134 4241 4262 0
-13662 4134 4243 4260 0
-13662 4134 4245 4258 0
-13662 4134 4247 4256 0
-13662 4134 4249 4254 0
-13662 4134 4251 4253 0
-13662 4136 4298 0
-13662 4136 4206 4296 0
-13662 4136 4207 4294 0
-13662 4136 4209 4292 0
-13662 4136 4211 4290 0
-13662 4136 4213 4288 0
-13662 4136 4215 4286 0
-13662 4136 4217 4284 0
-13662 4136 4219 4282 0
-13662 4136 4221 4280 0
-13662 4136 4223 4278 0
-13662 4136 4225 4276 0
-13662 4136 4227 4274 0
-13662 4136 4229 4272 0
-13662 4136 4231 4270 0
-13662 4136 4233 4268 0
-13662 4136 4235 4266 0
-13662 4136 4237 4264 0
-13662 4136 4239 4262 0
-13662 4136 4241 4260 0
-13662 4136 4243 4258 0
-13662 4136 4245 4256 0
-13662 4136 4247 4254 0
-13662 4136 4249 4253 0
-13662 4136 4251 0
-13662 4138 4296 0
-13662 4138 4206 4294 0
-13662 4138 4207 4292 0
-13662 4138 4209 4290 0
-13662 4138 4211 4288 0
-13662 4138 4213 4286 0
-13662 4138 4215 4284 0
-13662 4138 4217 4282 0
-13662 4138 4219 4280 0
-13662 4138 4221 4278 0
-13662 4138 4223 4276 0
-13662 4138 4225 4274 0
-13662 4138 4227 4272 0
-13662 4138 4229 4270 0
-13662 4138 4231 4268 0
-13662 4138 4233 4266 0
-13662 4138 4235 4264 0
-13662 4138 4237 4262 0
-13662 4138 4239 4260 0
-13662 4138 4241 4258 0
-13662 4138 4243 4256 0
-13662 4138 4245 4254 0
-13662 4138 4247 4253 0
-13662 4138 4249 0
-13662 4138 4251 0
-13662 4140 4294 0
-13662 4140 4206 4292 0
-13662 4140 4207 4290 0
-13662 4140 4209 4288 0
-13662 4140 4211 4286 0
-13662 4140 4213 4284 0
-13662 4140 4215 4282 0
-13662 4140 4217 4280 0
-13662 4140 4219 4278 0
-13662 4140 4221 4276 0
-13662 4140 4223 4274 0
-13662 4140 4225 4272 0
-13662 4140 4227 4270 0
-13662 4140 4229 4268 0
-13662 4140 4231 4266 0
-13662 4140 4233 4264 0
-13662 4140 4235 4262 0
-13662 4140 4237 4260 0
-13662 4140 4239 4258 0
-13662 4140 4241 4256 0
-13662 4140 4243 4254 0
-13662 4140 4245 4253 0
-13662 4140 4247 0
-13662 4140 4249 0
-13662 4140 4251 0
-13662 4142 4292 0
-13662 4142 4206 4290 0
-13662 4142 4207 4288 0
-13662 4142 4209 4286 0
-13662 4142 4211 4284 0
-13662 4142 4213 4282 0
-13662 4142 4215 4280 0
-13662 4142 4217 4278 0
-13662 4142 4219 4276 0
-13662 4142 4221 4274 0
-13662 4142 4223 4272 0
-13662 4142 4225 4270 0
-13662 4142 4227 4268 0
-13662 4142 4229 4266 0
-13662 4142 4231 4264 0
-13662 4142 4233 4262 0
-13662 4142 4235 4260 0
-13662 4142 4237 4258 0
-13662 4142 4239 4256 0
-13662 4142 4241 4254 0
-13662 4142 4243 4253 0
-13662 4142 4245 0
-13662 4142 4247 0
-13662 4142 4249 0
-13662 4142 4251 0
13662 -4245 -4253 0
13662 -4243 -4254 0
13662 -4241 -4256 0
13662 -4239 -4258 0
13662 -4237 -4260 0
13662 -4235 -4262 0
13662 -4233 -4264 0
13662 -4231 -4266 0
13662 -4229 -4268 0
13662 -4227 -4270 0
13662 -4225 -4272 0
13662 -4223 -4274 0
13662 -4221 -4276 0
13662 -4219 -4278 0
13662 -4217 -4280 0
13662 -4215 -4282 0
13662 -4213 -4284 0
13662 -4211 -4286 0
13662 -4209 -4288 0
13662 -4207 -4290 0
13662 -4206 -4292 0
13662 -4142 -4247 -4253 0
13662 -4142 -4245 -4254 0
13662 -4142 -4243 -4256 0
13662 -4142 -4241 -4258 0
13662 -4142 -4239 -4260 0
13662 -4142 -4237 -4262 0
13662 -4142 -4235 -4264 0
13662 -4142 -4233 -4266 0
13662 -4142 -4231 -4268 0
13662 -4142 -4229 -4270 0
13662 -4142 -4227 -4272 0
13662 -4142 -4225 -4274 0
13662 -4142 -4223 -4276 0
13662 -4142 -4221 -4278 0
13662 -4142 -4219 -4280 0
13662 -4142 -4217 -4282 0
13662 -4142 -4215 -4284 0
13662 -4142 -4213 -4286 0
13662 -4142 -4211 -4288 0
13662 -4142 -4209 -4290 0
13662 -4142 -4207 -4292 0
13662 -4142 -4206 -4294 0
13662 -4140 -4249 -4253 0
13662 -4140 -4247 -4254 0
13662 -4140 -4245 -4256 0
13662 -4140 -4243 -4258 0
13662 -4140 -4241 -4260 0
13662 -4140 -4239 -4262 0
13662 -4140 -4237 -4264 0
13662 -4140 -4235 -4266 0
13662 -4140 -4233 -4268 0
13662 -4140 -4231 -4270 0
13662 -4140 -4229 -4272 0
13662 -4140 -4227 -4274 0
13662 -4140 -4225 -4276 0
13662 -4140 -4223 -4278 0
13662 -4140 -4221 -4280 0
13662 -4140 -4219 -4282 0
13662 -4140 -4217 -4284 0
13662 -4140 -4215 -4286 0
13662 -4140 -4213 -4288 0
13662 -4140 -4211 -4290 0
13662 -4140 -4209 -4292 0
13662 -4140 -4207 -4294 0
13662 -4140 -4206 -4296 0
13662 -4138 -4251 -4253 0
13662 -4138 -4249 -4254 0
13662 -4138 -4247 -4256 0
13662 -4138 -4245 -4258 0
13662 -4138 -4243 -4260 0
13662 -4138 -4241 -4262 0
13662 -4138 -4239 -4264 0
13662 -4138 -4237 -4266 0
13662 -4138 -4235 -4268 0
13662 -4138 -4233 -4270 0
13662 -4138 -4231 -4272 0
13662 -4138 -4229 -4274 0
13662 -4138 -4227 -4276 0
13662 -4138 -4225 -4278 0
13662 -4138 -4223 -4280 0
13662 -4138 -4221 -4282 0
13662 -4138 -4219 -4284 0
13662 -4138 -4217 -4286 0
13662 -4138 -4215 -4288 0
13662 -4138 -4213 -4290 0
13662 -4138 -4211 -4292 0
13662 -4138 -4209 -4294 0
13662 -4138 -4207 -4296 0
13662 -4138 -4206 -4298 0
13662 -4136 -4253 0
13662 -4136 -4251 -4254 0
13662 -4136 -4249 -4256 0
13662 -4136 -4247 -4258 0
13662 -4136 -4245 -4260 0
13662 -4136 -4243 -4262 0
13662 -4136 -4241 -4264 0
13662 -4136 -4239 -4266 0
13662 -4136 -4237 -4268 0
13662 -4136 -4235 -4270 0
13662 -4136 -4233 -4272 0
13662 -4136 -4231 -4274 0
13662 -4136 -4229 -4276 0
13662 -4136 -4227 -4278 0
13662 -4136 -4225 -4280 0
13662 -4136 -4223 -4282 0
13662 -4136 -4221 -4284 0
13662 -4136 -4219 -4286 0
13662 -4136 -4217 -4288 0
13662 -4136 -4215 -4290 0
13662 -4136 -4213 -4292 0
13662 -4136 -4211 -4294 0
13662 -4136 -4209 -4296 0
13662 -4136 -4207 -4298 0
13662 -4136 -4206 -4300 0
13662 -4134 -4254 0
13662 -4134 -4251 -4256 0
13662 -4134 -4249 -4258 0
13662 -4134 -4247 -4260 0
13662 -4134 -4245 -4262 0
13662 -4134 -4243 -4264 0
13662 -4134 -4241 -4266 0
13662 -4134 -4239 -4268 0
13662 -4134 -4237 -4270 0
13662 -4134 -4235 -4272 0
13662 -4134 -4233 -4274 0
13662 -4134 -4231 -4276 0
13662 -4134 -4229 -4278 0
13662 -4134 -4227 -4280 0
13662 -4134 -4225 -4282 0
13662 -4134 -4223 -4284 0
13662 -4134 -4221 -4286 0
13662 -4134 -4219 -4288 0
13662 -4134 -4217 -4290 0
13662 -4134 -4215 -4292 0
13662 -4134 -4213 -4294 0
13662 -4134 -4211 -4296 0
13662 -4134 -4209 -4298 0
13662 -4134 -4207 -4300 0
13662 -4134 -4206 -4302 0
13662 -4132 -4256 0
13662 -4132 -4251 -4258 0
13662 -4132 -4249 -4260 0
13662 -4132 -4247 -4262 0
13662 -4132 -4245 -4264 0
13662 -4132 -4243 -4266 0
13662 -4132 -4241 -4268 0
13662 -4132 -4239 -4270 0
13662 -4132 -4237 -4272 0
13662 -4132 -4235 -4274 0
13662 -4132 -4233 -4276 0
13662 -4132 -4231 -4278 0
13662 -4132 -4229 -4280 0
13662 -4132 -4227 -4282 0
13662 -4132 -4225 -4284 0
13662 -4132 -4223 -4286 0
13662 -4132 -4221 -4288 0
13662 -4132 -4219 -4290 0
13662 -4132 -4217 -4292 0
13662 -4132 -4215 -4294 0
13662 -4132 -4213 -4296 0
13662 -4132 -4211 -4298 0
13662 -4132 -4209 -4300 0
13662 -4132 -4207 -4302 0
13662 -4132 -4206 -4304 0
13662 -4130 -4258 0
13662 -4130 -4251 -4260 0
13662 -4130 -4249 -4262 0
13662 -4130 -4247 -4264 0
13662 -4130 -4245 -4266 0
13662 -4130 -4243 -4268 0
13662 -4130 -4241 -4270 0
13662 -4130 -4239 -4272 0
13662 -4130 -4237 -4274 0
13662 -4130 -4235 -4276 0
13662 -4130 -4233 -4278 0
13662 -4130 -4231 -4280 0
13662 -4130 -4229 -4282 0
13662 -4130 -4227 -4284 0
13662 -4130 -4225 -4286 0
13662 -4130 -4223 -4288 0
13662 -4130 -4221 -4290 0
13662 -4130 -4219 -4292 0
13662 -4130 -4217 -4294 0
13662 -4130 -4215 -4296 0
13662 -4130 -4213 -4298 0
13662 -4130 -4211 -4300 0
13662 -4130 -4209 -4302 0
13662 -4130 -4207 -4304 0
13662 -4130 -4206 -4306 0
13662 -4128 -4260 0
13662 -4128 -4251 -4262 0
13662 -4128 -4249 -4264 0
13662 -4128 -4247 -4266 0
13662 -4128 -4245 -4268 0
13662 -4128 -4243 -4270 0
13662 -4128 -4241 -4272 0
13662 -4128 -4239 -4274 0
13662 -4128 -4237 -4276 0
13662 -4128 -4235 -4278 0
13662 -4128 -4233 -4280 0
13662 -4128 -4231 -4282 0
13662 -4128 -4229 -4284 0
13662 -4128 -4227 -4286 0
13662 -4128 -4225 -4288 0
13662 -4128 -4223 -4290 0
13662 -4128 -4221 -4292 0
13662 -4128 -4219 -4294 0
13662 -4128 -4217 -4296 0
13662 -4128 -4215 -4298 0
13662 -4128 -4213 -4300 0
13662 -4128 -4211 -4302 0
13662 -4128 -4209 -4304 0
13662 -4128 -4207 -4306 0
13662 -4128 -4206 -4308 0
13662 -4126 -4262 0
13662 -4126 -4251 -4264 0
13662 -4126 -4249 -4266 0
13662 -4126 -4247 -4268 0
13662 -4126 -4245 -4270 0
13662 -4126 -4243 -4272 0
13662 -4126 -4241 -4274 0
13662 -4126 -4239 -4276 0
13662 -4126 -4237 -4278 0
13662 -4126 -4235 -4280 0
13662 -4126 -4233 -4282 0
13662 -4126 -4231 -4284 0
13662 -4126 -4229 -4286 0
13662 -4126 -4227 -4288 0
13662 -4126 -4225 -4290 0
13662 -4126 -4223 -4292 0
13662 -4126 -4221 -4294 0
13662 -4126 -4219 -4296 0
13662 -4126 -4217 -4298 0
13662 -4126 -4215 -4300 0
13662 -4126 -4213 -4302 0
13662 -4126 -4211 -4304 0
13662 -4126 -4209 -4306 0
13662 -4126 -4207 -4308 0
13662 -4126 -4206 -4310 0
13662 -4124 -4264 0
13662 -4124 -4251 -4266 0
13662 -4124 -4249 -4268 0
13662 -4124 -4247 -4270 0
13662 -4124 -4245 -4272 0
13662 -4124 -4243 -4274 0
13662 -4124 -4241 -4276 0
13662 -4124 -4239 -4278 0
13662 -4124 -4237 -4280 0
13662 -4124 -4235 -4282 0
13662 -4124 -4233 -4284 0
13662 -4124 -4231 -4286 0
13662 -4124 -4229 -4288 0
13662 -4124 -4227 -4290 0
13662 -4124 -4225 -4292 0
13662 -4124 -4223 -4294 0
13662 -4124 -4221 -4296 0
13662 -4124 -4219 -4298 0
13662 -4124 -4217 -4300 0
13662 -4124 -4215 -4302 0
13662 -4124 -4213 -4304 0
13662 -4124 -4211 -4306 0
13662 -4124 -4209 -4308 0
13662 -4124 -4207 -4310 0
13662 -4124 -4206 -4312 0
13662 -4122 -4266 0
13662 -4122 -4251 -4268 0
13662 -4122 -4249 -4270 0
13662 -4122 -4247 -4272 0
13662 -4122 -4245 -4274 0
13662 -4122 -4243 -4276 0
13662 -4122 -4241 -4278 0
13662 -4122 -4239 -4280 0
13662 -4122 -4237 -4282 0
13662 -4122 -4235 -4284 0
13662 -4122 -4233 -4286 0
13662 -4122 -4231 -4288 0
13662 -4122 -4229 -4290 0
13662 -4122 -4227 -4292 0
13662 -4122 -4225 -4294 0
13662 -4122 -4223 -4296 0
13662 -4122 -4221 -4298 0
13662 -4122 -4219 -4300 0
13662 -4122 -4217 -4302 0
13662 -4122 -4215 -4304 0
13662 -4122 -4213 -4306 0
13662 -4122 -4211 -4308 0
13662 -4122 -4209 -4310 0
13662 -4122 -4207 -4312 0
13662 -4122 -4206 -4314 0
13662 -4120 -4268 0
13662 -4120 -4251 -4270 0
13662 -4120 -4249 -4272 0
13662 -4120 -4247 -4274 0
13662 -4120 -4245 -4276 0
13662 -4120 -4243 -4278 0
13662 -4120 -4241 -4280 0
13662 -4120 -4239 -4282 0
13662 -4120 -4237 -4284 0
13662 -4120 -4235 -4286 0
13662 -4120 -4233 -4288 0
13662 -4120 -4231 -4290 0
13662 -4120 -4229 -4292 0
13662 -4120 -4227 -4294 0
13662 -4120 -4225 -4296 0
13662 -4120 -4223 -4298 0
13662 -4120 -4221 -4300 0
13662 -4120 -4219 -4302 0
13662 -4120 -4217 -4304 0
13662 -4120 -4215 -4306 0
13662 -4120 -4213 -4308 0
13662 -4120 -4211 -4310 0
13662 -4120 -4209 -4312 0
13662 -4120 -4207 -4314 0
13662 -4120 -4206 0
13662 -4118 -4270 0
13662 -4118 -4251 -4272 0
13662 -4118 -4249 -4274 0
13662 -4118 -4247 -4276 0
13662 -4118 -4245 -4278 0
13662 -4118 -4243 -4280 0
13662 -4118 -4241 -4282 0
13662 -4118 -4239 -4284 0
13662 -4118 -4237 -4286 0
13662 -4118 -4235 -4288 0
13662 -4118 -4233 -4290 0
13662 -4118 -4231 -4292 0
13662 -4118 -4229 -4294 0
13662 -4118 -4227 -4296 0
13662 -4118 -4225 -4298 0
13662 -4118 -4223 -4300 0
13662 -4118 -4221 -4302 0
13662 -4118 -4219 -4304 0
13662 -4118 -4217 -4306 0
13662 -4118 -4215 -4308 0
13662 -4118 -4213 -4310 0
13662 -4118 -4211 -4312 0
13662 -4118 -4209 -4314 0
13662 -4118 -4207 0
13662 -4118 -4206 0
13662 -4116 -4272 0
13662 -4116 -4251 -4274 0
13662 -4116 -4249 -4276 0
13662 -4116 -4247 -4278 0
13662 -4116 -4245 -4280 0
13662 -4116 -4243 -4282 0
13662 -4116 -4241 -4284 0
13662 -4116 -4239 -4286 0
13662 -4116 -4237 -4288 0
13662 -4116 -4235 -4290 0
13662 -4116 -4233 -4292 0
13662 -4116 -4231 -4294 0
13662 -4116 -4229 -4296 0
13662 -4116 -4227 -4298 0
13662 -4116 -4225 -4300 0
13662 -4116 -4223 -4302 0
13662 -4116 -4221 -4304 0
13662 -4116 -4219 -4306 0
13662 -4116 -4217 -4308 0
13662 -4116 -4215 -4310 0
13662 -4116 -4213 -4312 0
13662 -4116 -4211 -4314 0
13662 -4116 -4209 0
13662 -4116 -4207 0
13662 -4116 -4206 0
13662 -4114 -4274 0
13662 -4114 -4251 -4276 0
13662 -4114 -4249 -4278 0
13662 -4114 -4247 -4280 0
13662 -4114 -4245 -4282 0
13662 -4114 -4243 -4284 0
13662 -4114 -4241 -4286 0
13662 -4114 -4239 -4288 0
13662 -4114 -4237 -4290 0
13662 -4114 -4235 -4292 0
13662 -4114 -4233 -4294 0
13662 -4114 -4231 -4296 0
13662 -4114 -4229 -4298 0
13662 -4114 -4227 -4300 0
13662 -4114 -4225 -4302 0
13662 -4114 -4223 -4304 0
13662 -4114 -4221 -4306 0
13662 -4114 -4219 -4308 0
13662 -4114 -4217 -4310 0
13662 -4114 -4215 -4312 0
13662 -4114 -4213 -4314 0
13662 -4114 -4211 0
13662 -4114 -4209 0
13662 -4114 -4207 0
13662 -4114 -4206 0
13662 -4113 -4276 0
13662 -4113 -4251 -4278 0
13662 -4113 -4249 -4280 0
13662 -4113 -4247 -4282 0
13662 -4113 -4245 -4284 0
13662 -4113 -4243 -4286 0
13662 -4113 -4241 -4288 0
13662 -4113 -4239 -4290 0
13662 -4113 -4237 -4292 0
13662 -4113 -4235 -4294 0
13662 -4113 -4233 -4296 0
13662 -4113 -4231 -4298 0
13662 -4113 -4229 -4300 0
13662 -4113 -4227 -4302 0
13662 -4113 -4225 -4304 0
13662 -4113 -4223 -4306 0
13662 -4113 -4221 -4308 0
13662 -4113 -4219 -4310 0
13662 -4113 -4217 -4312 0
13662 -4113 -4215 -4314 0
13662 -4113 -4213 0
13662 -4113 -4211 0
13662 -4113 -4209 0
13662 -4113 -4207 0
13662 -4113 -4206 0
c ((36<=(aux522 + aux525 + aux526))=tv=SATLiteral(13663))
-13663 -4243 -4253 0
-13663 -4241 -4254 0
-13663 -4239 -4256 0
-13663 -4237 -4258 0
-13663 -4235 -4260 0
-13663 -4233 -4262 0
-13663 -4231 -4264 0
-13663 -4229 -4266 0
-13663 -4227 -4268 0
-13663 -4225 -4270 0
-13663 -4223 -4272 0
-13663 -4221 -4274 0
-13663 -4219 -4276 0
-13663 -4217 -4278 0
-13663 -4215 -4280 0
-13663 -4213 -4282 0
-13663 -4211 -4284 0
-13663 -4209 -4286 0
-13663 -4207 -4288 0
-13663 -4206 -4290 0
-13663 -4142 -4245 -4253 0
-13663 -4142 -4243 -4254 0
-13663 -4142 -4241 -4256 0
-13663 -4142 -4239 -4258 0
-13663 -4142 -4237 -4260 0
-13663 -4142 -4235 -4262 0
-13663 -4142 -4233 -4264 0
-13663 -4142 -4231 -4266 0
-13663 -4142 -4229 -4268 0
-13663 -4142 -4227 -4270 0
-13663 -4142 -4225 -4272 0
-13663 -4142 -4223 -4274 0
-13663 -4142 -4221 -4276 0
-13663 -4142 -4219 -4278 0
-13663 -4142 -4217 -4280 0
-13663 -4142 -4215 -4282 0
-13663 -4142 -4213 -4284 0
-13663 -4142 -4211 -4286 0
-13663 -4142 -4209 -4288 0
-13663 -4142 -4207 -4290 0
-13663 -4142 -4206 -4292 0
-13663 -4140 -4247 -4253 0
-13663 -4140 -4245 -4254 0
-13663 -4140 -4243 -4256 0
-13663 -4140 -4241 -4258 0
-13663 -4140 -4239 -4260 0
-13663 -4140 -4237 -4262 0
-13663 -4140 -4235 -4264 0
-13663 -4140 -4233 -4266 0
-13663 -4140 -4231 -4268 0
-13663 -4140 -4229 -4270 0
-13663 -4140 -4227 -4272 0
-13663 -4140 -4225 -4274 0
-13663 -4140 -4223 -4276 0
-13663 -4140 -4221 -4278 0
-13663 -4140 -4219 -4280 0
-13663 -4140 -4217 -4282 0
-13663 -4140 -4215 -4284 0
-13663 -4140 -4213 -4286 0
-13663 -4140 -4211 -4288 0
-13663 -4140 -4209 -4290 0
-13663 -4140 -4207 -4292 0
-13663 -4140 -4206 -4294 0
-13663 -4138 -4249 -4253 0
-13663 -4138 -4247 -4254 0
-13663 -4138 -4245 -4256 0
-13663 -4138 -4243 -4258 0
-13663 -4138 -4241 -4260 0
-13663 -4138 -4239 -4262 0
-13663 -4138 -4237 -4264 0
-13663 -4138 -4235 -4266 0
-13663 -4138 -4233 -4268 0
-13663 -4138 -4231 -4270 0
-13663 -4138 -4229 -4272 0
-13663 -4138 -4227 -4274 0
-13663 -4138 -4225 -4276 0
-13663 -4138 -4223 -4278 0
-13663 -4138 -4221 -4280 0
-13663 -4138 -4219 -4282 0
-13663 -4138 -4217 -4284 0
-13663 -4138 -4215 -4286 0
-13663 -4138 -4213 -4288 0
-13663 -4138 -4211 -4290 0
-13663 -4138 -4209 -4292 0
-13663 -4138 -4207 -4294 0
-13663 -4138 -4206 -4296 0
-13663 -4136 -4251 -4253 0
-13663 -4136 -4249 -4254 0
-13663 -4136 -4247 -4256 0
-13663 -4136 -4245 -4258 0
-13663 -4136 -4243 -4260 0
-13663 -4136 -4241 -4262 0
-13663 -4136 -4239 -4264 0
-13663 -4136 -4237 -4266 0
-13663 -4136 -4235 -4268 0
-13663 -4136 -4233 -4270 0
-13663 -4136 -4231 -4272 0
-13663 -4136 -4229 -4274 0
-13663 -4136 -4227 -4276 0
-13663 -4136 -4225 -4278 0
-13663 -4136 -4223 -4280 0
-13663 -4136 -4221 -4282 0
-13663 -4136 -4219 -4284 0
-13663 -4136 -4217 -4286 0
-13663 -4136 -4215 -4288 0
-13663 -4136 -4213 -4290 0
-13663 -4136 -4211 -4292 0
-13663 -4136 -4209 -4294 0
-13663 -4136 -4207 -4296 0
-13663 -4136 -4206 -4298 0
-13663 -4134 -4253 0
-13663 -4134 -4251 -4254 0
-13663 -4134 -4249 -4256 0
-13663 -4134 -4247 -4258 0
-13663 -4134 -4245 -4260 0
-13663 -4134 -4243 -4262 0
-13663 -4134 -4241 -4264 0
-13663 -4134 -4239 -4266 0
-13663 -4134 -4237 -4268 0
-13663 -4134 -4235 -4270 0
-13663 -4134 -4233 -4272 0
-13663 -4134 -4231 -4274 0
-13663 -4134 -4229 -4276 0
-13663 -4134 -4227 -4278 0
-13663 -4134 -4225 -4280 0
-13663 -4134 -4223 -4282 0
-13663 -4134 -4221 -4284 0
-13663 -4134 -4219 -4286 0
-13663 -4134 -4217 -4288 0
-13663 -4134 -4215 -4290 0
-13663 -4134 -4213 -4292 0
-13663 -4134 -4211 -4294 0
-13663 -4134 -4209 -4296 0
-13663 -4134 -4207 -4298 0
-13663 -4134 -4206 -4300 0
-13663 -4132 -4254 0
-13663 -4132 -4251 -4256 0
-13663 -4132 -4249 -4258 0
-13663 -4132 -4247 -4260 0
-13663 -4132 -4245 -4262 0
-13663 -4132 -4243 -4264 0
-13663 -4132 -4241 -4266 0
-13663 -4132 -4239 -4268 0
-13663 -4132 -4237 -4270 0
-13663 -4132 -4235 -4272 0
-13663 -4132 -4233 -4274 0
-13663 -4132 -4231 -4276 0
-13663 -4132 -4229 -4278 0
-13663 -4132 -4227 -4280 0
-13663 -4132 -4225 -4282 0
-13663 -4132 -4223 -4284 0
-13663 -4132 -4221 -4286 0
-13663 -4132 -4219 -4288 0
-13663 -4132 -4217 -4290 0
-13663 -4132 -4215 -4292 0
-13663 -4132 -4213 -4294 0
-13663 -4132 -4211 -4296 0
-13663 -4132 -4209 -4298 0
-13663 -4132 -4207 -4300 0
-13663 -4132 -4206 -4302 0
-13663 -4130 -4256 0
-13663 -4130 -4251 -4258 0
-13663 -4130 -4249 -4260 0
-13663 -4130 -4247 -4262 0
-13663 -4130 -4245 -4264 0
-13663 -4130 -4243 -4266 0
-13663 -4130 -4241 -4268 0
-13663 -4130 -4239 -4270 0
-13663 -4130 -4237 -4272 0
-13663 -4130 -4235 -4274 0
-13663 -4130 -4233 -4276 0
-13663 -4130 -4231 -4278 0
-13663 -4130 -4229 -4280 0
-13663 -4130 -4227 -4282 0
-13663 -4130 -4225 -4284 0
-13663 -4130 -4223 -4286 0
-13663 -4130 -4221 -4288 0
-13663 -4130 -4219 -4290 0
-13663 -4130 -4217 -4292 0
-13663 -4130 -4215 -4294 0
-13663 -4130 -4213 -4296 0
-13663 -4130 -4211 -4298 0
-13663 -4130 -4209 -4300 0
-13663 -4130 -4207 -4302 0
-13663 -4130 -4206 -4304 0
-13663 -4128 -4258 0
-13663 -4128 -4251 -4260 0
-13663 -4128 -4249 -4262 0
-13663 -4128 -4247 -4264 0
-13663 -4128 -4245 -4266 0
-13663 -4128 -4243 -4268 0
-13663 -4128 -4241 -4270 0
-13663 -4128 -4239 -4272 0
-13663 -4128 -4237 -4274 0
-13663 -4128 -4235 -4276 0
-13663 -4128 -4233 -4278 0
-13663 -4128 -4231 -4280 0
-13663 -4128 -4229 -4282 0
-13663 -4128 -4227 -4284 0
-13663 -4128 -4225 -4286 0
-13663 -4128 -4223 -4288 0
-13663 -4128 -4221 -4290 0
-13663 -4128 -4219 -4292 0
-13663 -4128 -4217 -4294 0
-13663 -4128 -4215 -4296 0
-13663 -4128 -4213 -4298 0
-13663 -4128 -4211 -4300 0
-13663 -4128 -4209 -4302 0
-13663 -4128 -4207 -4304 0
-13663 -4128 -4206 -4306 0
-13663 -4126 -4260 0
-13663 -4126 -4251 -4262 0
-13663 -4126 -4249 -4264 0
-13663 -4126 -4247 -4266 0
-13663 -4126 -4245 -4268 0
-13663 -4126 -4243 -4270 0
-13663 -4126 -4241 -4272 0
-13663 -4126 -4239 -4274 0
-13663 -4126 -4237 -4276 0
-13663 -4126 -4235 -4278 0
-13663 -4126 -4233 -4280 0
-13663 -4126 -4231 -4282 0
-13663 -4126 -4229 -4284 0
-13663 -4126 -4227 -4286 0
-13663 -4126 -4225 -4288 0
-13663 -4126 -4223 -4290 0
-13663 -4126 -4221 -4292 0
-13663 -4126 -4219 -4294 0
-13663 -4126 -4217 -4296 0
-13663 -4126 -4215 -4298 0
-13663 -4126 -4213 -4300 0
-13663 -4126 -4211 -4302 0
-13663 -4126 -4209 -4304 0
-13663 -4126 -4207 -4306 0
-13663 -4126 -4206 -4308 0
-13663 -4124 -4262 0
-13663 -4124 -4251 -4264 0
-13663 -4124 -4249 -4266 0
-13663 -4124 -4247 -4268 0
-13663 -4124 -4245 -4270 0
-13663 -4124 -4243 -4272 0
-13663 -4124 -4241 -4274 0
-13663 -4124 -4239 -4276 0
-13663 -4124 -4237 -4278 0
-13663 -4124 -4235 -4280 0
-13663 -4124 -4233 -4282 0
-13663 -4124 -4231 -4284 0
-13663 -4124 -4229 -4286 0
-13663 -4124 -4227 -4288 0
-13663 -4124 -4225 -4290 0
-13663 -4124 -4223 -4292 0
-13663 -4124 -4221 -4294 0
-13663 -4124 -4219 -4296 0
-13663 -4124 -4217 -4298 0
-13663 -4124 -4215 -4300 0
-13663 -4124 -4213 -4302 0
-13663 -4124 -4211 -4304 0
-13663 -4124 -4209 -4306 0
-13663 -4124 -4207 -4308 0
-13663 -4124 -4206 -4310 0
-13663 -4122 -4264 0
-13663 -4122 -4251 -4266 0
-13663 -4122 -4249 -4268 0
-13663 -4122 -4247 -4270 0
-13663 -4122 -4245 -4272 0
-13663 -4122 -4243 -4274 0
-13663 -4122 -4241 -4276 0
-13663 -4122 -4239 -4278 0
-13663 -4122 -4237 -4280 0
-13663 -4122 -4235 -4282 0
-13663 -4122 -4233 -4284 0
-13663 -4122 -4231 -4286 0
-13663 -4122 -4229 -4288 0
-13663 -4122 -4227 -4290 0
-13663 -4122 -4225 -4292 0
-13663 -4122 -4223 -4294 0
-13663 -4122 -4221 -4296 0
-13663 -4122 -4219 -4298 0
-13663 -4122 -4217 -4300 0
-13663 -4122 -4215 -4302 0
-13663 -4122 -4213 -4304 0
-13663 -4122 -4211 -4306 0
-13663 -4122 -4209 -4308 0
-13663 -4122 -4207 -4310 0
-13663 -4122 -4206 -4312 0
-13663 -4120 -4266 0
-13663 -4120 -4251 -4268 0
-13663 -4120 -4249 -4270 0
-13663 -4120 -4247 -4272 0
-13663 -4120 -4245 -4274 0
-13663 -4120 -4243 -4276 0
-13663 -4120 -4241 -4278 0
-13663 -4120 -4239 -4280 0
-13663 -4120 -4237 -4282 0
-13663 -4120 -4235 -4284 0
-13663 -4120 -4233 -4286 0
-13663 -4120 -4231 -4288 0
-13663 -4120 -4229 -4290 0
-13663 -4120 -4227 -4292 0
-13663 -4120 -4225 -4294 0
-13663 -4120 -4223 -4296 0
-13663 -4120 -4221 -4298 0
-13663 -4120 -4219 -4300 0
-13663 -4120 -4217 -4302 0
-13663 -4120 -4215 -4304 0
-13663 -4120 -4213 -4306 0
-13663 -4120 -4211 -4308 0
-13663 -4120 -4209 -4310 0
-13663 -4120 -4207 -4312 0
-13663 -4120 -4206 -4314 0
-13663 -4118 -4268 0
-13663 -4118 -4251 -4270 0
-13663 -4118 -4249 -4272 0
-13663 -4118 -4247 -4274 0
-13663 -4118 -4245 -4276 0
-13663 -4118 -4243 -4278 0
-13663 -4118 -4241 -4280 0
-13663 -4118 -4239 -4282 0
-13663 -4118 -4237 -4284 0
-13663 -4118 -4235 -4286 0
-13663 -4118 -4233 -4288 0
-13663 -4118 -4231 -4290 0
-13663 -4118 -4229 -4292 0
-13663 -4118 -4227 -4294 0
-13663 -4118 -4225 -4296 0
-13663 -4118 -4223 -4298 0
-13663 -4118 -4221 -4300 0
-13663 -4118 -4219 -4302 0
-13663 -4118 -4217 -4304 0
-13663 -4118 -4215 -4306 0
-13663 -4118 -4213 -4308 0
-13663 -4118 -4211 -4310 0
-13663 -4118 -4209 -4312 0
-13663 -4118 -4207 -4314 0
-13663 -4118 -4206 0
-13663 -4116 -4270 0
-13663 -4116 -4251 -4272 0
-13663 -4116 -4249 -4274 0
-13663 -4116 -4247 -4276 0
-13663 -4116 -4245 -4278 0
-13663 -4116 -4243 -4280 0
-13663 -4116 -4241 -4282 0
-13663 -4116 -4239 -4284 0
-13663 -4116 -4237 -4286 0
-13663 -4116 -4235 -4288 0
-13663 -4116 -4233 -4290 0
-13663 -4116 -4231 -4292 0
-13663 -4116 -4229 -4294 0
-13663 -4116 -4227 -4296 0
-13663 -4116 -4225 -4298 0
-13663 -4116 -4223 -4300 0
-13663 -4116 -4221 -4302 0
-13663 -4116 -4219 -4304 0
-13663 -4116 -4217 -4306 0
-13663 -4116 -4215 -4308 0
-13663 -4116 -4213 -4310 0
-13663 -4116 -4211 -4312 0
-13663 -4116 -4209 -4314 0
-13663 -4116 -4207 0
-13663 -4116 -4206 0
-13663 -4114 -4272 0
-13663 -4114 -4251 -4274 0
-13663 -4114 -4249 -4276 0
-13663 -4114 -4247 -4278 0
-13663 -4114 -4245 -4280 0
-13663 -4114 -4243 -4282 0
-13663 -4114 -4241 -4284 0
-13663 -4114 -4239 -4286 0
-13663 -4114 -4237 -4288 0
-13663 -4114 -4235 -4290 0
-13663 -4114 -4233 -4292 0
-13663 -4114 -4231 -4294 0
-13663 -4114 -4229 -4296 0
-13663 -4114 -4227 -4298 0
-13663 -4114 -4225 -4300 0
-13663 -4114 -4223 -4302 0
-13663 -4114 -4221 -4304 0
-13663 -4114 -4219 -4306 0
-13663 -4114 -4217 -4308 0
-13663 -4114 -4215 -4310 0
-13663 -4114 -4213 -4312 0
-13663 -4114 -4211 -4314 0
-13663 -4114 -4209 0
-13663 -4114 -4207 0
-13663 -4114 -4206 0
-13663 -4113 -4274 0
-13663 -4113 -4251 -4276 0
-13663 -4113 -4249 -4278 0
-13663 -4113 -4247 -4280 0
-13663 -4113 -4245 -4282 0
-13663 -4113 -4243 -4284 0
-13663 -4113 -4241 -4286 0
-13663 -4113 -4239 -4288 0
-13663 -4113 -4237 -4290 0
-13663 -4113 -4235 -4292 0
-13663 -4113 -4233 -4294 0
-13663 -4113 -4231 -4296 0
-13663 -4113 -4229 -4298 0
-13663 -4113 -4227 -4300 0
-13663 -4113 -4225 -4302 0
-13663 -4113 -4223 -4304 0
-13663 -4113 -4221 -4306 0
-13663 -4113 -4219 -4308 0
-13663 -4113 -4217 -4310 0
-13663 -4113 -4215 -4312 0
-13663 -4113 -4213 -4314 0
-13663 -4113 -4211 0
-13663 -4113 -4209 0
-13663 -4113 -4207 0
-13663 -4113 -4206 0
13663 4211 4314 0
13663 4213 4312 0
13663 4215 4310 0
13663 4217 4308 0
13663 4219 4306 0
13663 4221 4304 0
13663 4223 4302 0
13663 4225 4300 0
13663 4227 4298 0
13663 4229 4296 0
13663 4231 4294 0
13663 4233 4292 0
13663 4235 4290 0
13663 4237 4288 0
13663 4239 4286 0
13663 4241 4284 0
13663 4243 4282 0
13663 4245 4280 0
13663 4247 4278 0
13663 4249 4276 0
13663 4251 4274 0
13663 4113 4209 4314 0
13663 4113 4211 4312 0
13663 4113 4213 4310 0
13663 4113 4215 4308 0
13663 4113 4217 4306 0
13663 4113 4219 4304 0
13663 4113 4221 4302 0
13663 4113 4223 4300 0
13663 4113 4225 4298 0
13663 4113 4227 4296 0
13663 4113 4229 4294 0
13663 4113 4231 4292 0
13663 4113 4233 4290 0
13663 4113 4235 4288 0
13663 4113 4237 4286 0
13663 4113 4239 4284 0
13663 4113 4241 4282 0
13663 4113 4243 4280 0
13663 4113 4245 4278 0
13663 4113 4247 4276 0
13663 4113 4249 4274 0
13663 4113 4251 4272 0
13663 4114 4207 4314 0
13663 4114 4209 4312 0
13663 4114 4211 4310 0
13663 4114 4213 4308 0
13663 4114 4215 4306 0
13663 4114 4217 4304 0
13663 4114 4219 4302 0
13663 4114 4221 4300 0
13663 4114 4223 4298 0
13663 4114 4225 4296 0
13663 4114 4227 4294 0
13663 4114 4229 4292 0
13663 4114 4231 4290 0
13663 4114 4233 4288 0
13663 4114 4235 4286 0
13663 4114 4237 4284 0
13663 4114 4239 4282 0
13663 4114 4241 4280 0
13663 4114 4243 4278 0
13663 4114 4245 4276 0
13663 4114 4247 4274 0
13663 4114 4249 4272 0
13663 4114 4251 4270 0
13663 4116 4206 4314 0
13663 4116 4207 4312 0
13663 4116 4209 4310 0
13663 4116 4211 4308 0
13663 4116 4213 4306 0
13663 4116 4215 4304 0
13663 4116 4217 4302 0
13663 4116 4219 4300 0
13663 4116 4221 4298 0
13663 4116 4223 4296 0
13663 4116 4225 4294 0
13663 4116 4227 4292 0
13663 4116 4229 4290 0
13663 4116 4231 4288 0
13663 4116 4233 4286 0
13663 4116 4235 4284 0
13663 4116 4237 4282 0
13663 4116 4239 4280 0
13663 4116 4241 4278 0
13663 4116 4243 4276 0
13663 4116 4245 4274 0
13663 4116 4247 4272 0
13663 4116 4249 4270 0
13663 4116 4251 4268 0
13663 4118 4314 0
13663 4118 4206 4312 0
13663 4118 4207 4310 0
13663 4118 4209 4308 0
13663 4118 4211 4306 0
13663 4118 4213 4304 0
13663 4118 4215 4302 0
13663 4118 4217 4300 0
13663 4118 4219 4298 0
13663 4118 4221 4296 0
13663 4118 4223 4294 0
13663 4118 4225 4292 0
13663 4118 4227 4290 0
13663 4118 4229 4288 0
13663 4118 4231 4286 0
13663 4118 4233 4284 0
13663 4118 4235 4282 0
13663 4118 4237 4280 0
13663 4118 4239 4278 0
13663 4118 4241 4276 0
13663 4118 4243 4274 0
13663 4118 4245 4272 0
13663 4118 4247 4270 0
13663 4118 4249 4268 0
13663 4118 4251 4266 0
13663 4120 4312 0
13663 4120 4206 4310 0
13663 4120 4207 4308 0
13663 4120 4209 4306 0
13663 4120 4211 4304 0
13663 4120 4213 4302 0
13663 4120 4215 4300 0
13663 4120 4217 4298 0
13663 4120 4219 4296 0
13663 4120 4221 4294 0
13663 4120 4223 4292 0
13663 4120 4225 4290 0
13663 4120 4227 4288 0
13663 4120 4229 4286 0
13663 4120 4231 4284 0
13663 4120 4233 4282 0
13663 4120 4235 4280 0
13663 4120 4237 4278 0
13663 4120 4239 4276 0
13663 4120 4241 4274 0
13663 4120 4243 4272 0
13663 4120 4245 4270 0
13663 4120 4247 4268 0
13663 4120 4249 4266 0
13663 4120 4251 4264 0
13663 4122 4310 0
13663 4122 4206 4308 0
13663 4122 4207 4306 0
13663 4122 4209 4304 0
13663 4122 4211 4302 0
13663 4122 4213 4300 0
13663 4122 4215 4298 0
13663 4122 4217 4296 0
13663 4122 4219 4294 0
13663 4122 4221 4292 0
13663 4122 4223 4290 0
13663 4122 4225 4288 0
13663 4122 4227 4286 0
13663 4122 4229 4284 0
13663 4122 4231 4282 0
13663 4122 4233 4280 0
13663 4122 4235 4278 0
13663 4122 4237 4276 0
13663 4122 4239 4274 0
13663 4122 4241 4272 0
13663 4122 4243 4270 0
13663 4122 4245 4268 0
13663 4122 4247 4266 0
13663 4122 4249 4264 0
13663 4122 4251 4262 0
13663 4124 4308 0
13663 4124 4206 4306 0
13663 4124 4207 4304 0
13663 4124 4209 4302 0
13663 4124 4211 4300 0
13663 4124 4213 4298 0
13663 4124 4215 4296 0
13663 4124 4217 4294 0
13663 4124 4219 4292 0
13663 4124 4221 4290 0
13663 4124 4223 4288 0
13663 4124 4225 4286 0
13663 4124 4227 4284 0
13663 4124 4229 4282 0
13663 4124 4231 4280 0
13663 4124 4233 4278 0
13663 4124 4235 4276 0
13663 4124 4237 4274 0
13663 4124 4239 4272 0
13663 4124 4241 4270 0
13663 4124 4243 4268 0
13663 4124 4245 4266 0
13663 4124 4247 4264 0
13663 4124 4249 4262 0
13663 4124 4251 4260 0
13663 4126 4306 0
13663 4126 4206 4304 0
13663 4126 4207 4302 0
13663 4126 4209 4300 0
13663 4126 4211 4298 0
13663 4126 4213 4296 0
13663 4126 4215 4294 0
13663 4126 4217 4292 0
13663 4126 4219 4290 0
13663 4126 4221 4288 0
13663 4126 4223 4286 0
13663 4126 4225 4284 0
13663 4126 4227 4282 0
13663 4126 4229 4280 0
13663 4126 4231 4278 0
13663 4126 4233 4276 0
13663 4126 4235 4274 0
13663 4126 4237 4272 0
13663 4126 4239 4270 0
13663 4126 4241 4268 0
13663 4126 4243 4266 0
13663 4126 4245 4264 0
13663 4126 4247 4262 0
13663 4126 4249 4260 0
13663 4126 4251 4258 0
13663 4128 4304 0
13663 4128 4206 4302 0
13663 4128 4207 4300 0
13663 4128 4209 4298 0
13663 4128 4211 4296 0
13663 4128 4213 4294 0
13663 4128 4215 4292 0
13663 4128 4217 4290 0
13663 4128 4219 4288 0
13663 4128 4221 4286 0
13663 4128 4223 4284 0
13663 4128 4225 4282 0
13663 4128 4227 4280 0
13663 4128 4229 4278 0
13663 4128 4231 4276 0
13663 4128 4233 4274 0
13663 4128 4235 4272 0
13663 4128 4237 4270 0
13663 4128 4239 4268 0
13663 4128 4241 4266 0
13663 4128 4243 4264 0
13663 4128 4245 4262 0
13663 4128 4247 4260 0
13663 4128 4249 4258 0
13663 4128 4251 4256 0
13663 4130 4302 0
13663 4130 4206 4300 0
13663 4130 4207 4298 0
13663 4130 4209 4296 0
13663 4130 4211 4294 0
13663 4130 4213 4292 0
13663 4130 4215 4290 0
13663 4130 4217 4288 0
13663 4130 4219 4286 0
13663 4130 4221 4284 0
13663 4130 4223 4282 0
13663 4130 4225 4280 0
13663 4130 4227 4278 0
13663 4130 4229 4276 0
13663 4130 4231 4274 0
13663 4130 4233 4272 0
13663 4130 4235 4270 0
13663 4130 4237 4268 0
13663 4130 4239 4266 0
13663 4130 4241 4264 0
13663 4130 4243 4262 0
13663 4130 4245 4260 0
13663 4130 4247 4258 0
13663 4130 4249 4256 0
13663 4130 4251 4254 0
13663 4132 4300 0
13663 4132 4206 4298 0
13663 4132 4207 4296 0
13663 4132 4209 4294 0
13663 4132 4211 4292 0
13663 4132 4213 4290 0
13663 4132 4215 4288 0
13663 4132 4217 4286 0
13663 4132 4219 4284 0
13663 4132 4221 4282 0
13663 4132 4223 4280 0
13663 4132 4225 4278 0
13663 4132 4227 4276 0
13663 4132 4229 4274 0
13663 4132 4231 4272 0
13663 4132 4233 4270 0
13663 4132 4235 4268 0
13663 4132 4237 4266 0
13663 4132 4239 4264 0
13663 4132 4241 4262 0
13663 4132 4243 4260 0
13663 4132 4245 4258 0
13663 4132 4247 4256 0
13663 4132 4249 4254 0
13663 4132 4251 4253 0
13663 4134 4298 0
13663 4134 4206 4296 0
13663 4134 4207 4294 0
13663 4134 4209 4292 0
13663 4134 4211 4290 0
13663 4134 4213 4288 0
13663 4134 4215 4286 0
13663 4134 4217 4284 0
13663 4134 4219 4282 0
13663 4134 4221 4280 0
13663 4134 4223 4278 0
13663 4134 4225 4276 0
13663 4134 4227 4274 0
13663 4134 4229 4272 0
13663 4134 4231 4270 0
13663 4134 4233 4268 0
13663 4134 4235 4266 0
13663 4134 4237 4264 0
13663 4134 4239 4262 0
13663 4134 4241 4260 0
13663 4134 4243 4258 0
13663 4134 4245 4256 0
13663 4134 4247 4254 0
13663 4134 4249 4253 0
13663 4134 4251 0
13663 4136 4296 0
13663 4136 4206 4294 0
13663 4136 4207 4292 0
13663 4136 4209 4290 0
13663 4136 4211 4288 0
13663 4136 4213 4286 0
13663 4136 4215 4284 0
13663 4136 4217 4282 0
13663 4136 4219 4280 0
13663 4136 4221 4278 0
13663 4136 4223 4276 0
13663 4136 4225 4274 0
13663 4136 4227 4272 0
13663 4136 4229 4270 0
13663 4136 4231 4268 0
13663 4136 4233 4266 0
13663 4136 4235 4264 0
13663 4136 4237 4262 0
13663 4136 4239 4260 0
13663 4136 4241 4258 0
13663 4136 4243 4256 0
13663 4136 4245 4254 0
13663 4136 4247 4253 0
13663 4136 4249 0
13663 4136 4251 0
13663 4138 4294 0
13663 4138 4206 4292 0
13663 4138 4207 4290 0
13663 4138 4209 4288 0
13663 4138 4211 4286 0
13663 4138 4213 4284 0
13663 4138 4215 4282 0
13663 4138 4217 4280 0
13663 4138 4219 4278 0
13663 4138 4221 4276 0
13663 4138 4223 4274 0
13663 4138 4225 4272 0
13663 4138 4227 4270 0
13663 4138 4229 4268 0
13663 4138 4231 4266 0
13663 4138 4233 4264 0
13663 4138 4235 4262 0
13663 4138 4237 4260 0
13663 4138 4239 4258 0
13663 4138 4241 4256 0
13663 4138 4243 4254 0
13663 4138 4245 4253 0
13663 4138 4247 0
13663 4138 4249 0
13663 4138 4251 0
13663 4140 4292 0
13663 4140 4206 4290 0
13663 4140 4207 4288 0
13663 4140 4209 4286 0
13663 4140 4211 4284 0
13663 4140 4213 4282 0
13663 4140 4215 4280 0
13663 4140 4217 4278 0
13663 4140 4219 4276 0
13663 4140 4221 4274 0
13663 4140 4223 4272 0
13663 4140 4225 4270 0
13663 4140 4227 4268 0
13663 4140 4229 4266 0
13663 4140 4231 4264 0
13663 4140 4233 4262 0
13663 4140 4235 4260 0
13663 4140 4237 4258 0
13663 4140 4239 4256 0
13663 4140 4241 4254 0
13663 4140 4243 4253 0
13663 4140 4245 0
13663 4140 4247 0
13663 4140 4249 0
13663 4140 4251 0
13663 4142 4290 0
13663 4142 4206 4288 0
13663 4142 4207 4286 0
13663 4142 4209 4284 0
13663 4142 4211 4282 0
13663 4142 4213 4280 0
13663 4142 4215 4278 0
13663 4142 4217 4276 0
13663 4142 4219 4274 0
13663 4142 4221 4272 0
13663 4142 4223 4270 0
13663 4142 4225 4268 0
13663 4142 4227 4266 0
13663 4142 4229 4264 0
13663 4142 4231 4262 0
13663 4142 4233 4260 0
13663 4142 4235 4258 0
13663 4142 4237 4256 0
13663 4142 4239 4254 0
13663 4142 4241 4253 0
13663 4142 4243 0
13663 4142 4245 0
13663 4142 4247 0
13663 4142 4249 0
13663 4142 4251 0
c (((aux528 + aux531 + aux532)<=36)=tv=SATLiteral(13664))
-13664 4447 4548 0
-13664 4449 4546 0
-13664 4451 4544 0
-13664 4453 4542 0
-13664 4455 4540 0
-13664 4457 4538 0
-13664 4459 4536 0
-13664 4461 4534 0
-13664 4463 4532 0
-13664 4465 4530 0
-13664 4467 4528 0
-13664 4469 4526 0
-13664 4471 4524 0
-13664 4473 4522 0
-13664 4475 4520 0
-13664 4477 4518 0
-13664 4479 4516 0
-13664 4481 4514 0
-13664 4483 4512 0
-13664 4485 4510 0
-13664 4347 4445 4548 0
-13664 4347 4447 4546 0
-13664 4347 4449 4544 0
-13664 4347 4451 4542 0
-13664 4347 4453 4540 0
-13664 4347 4455 4538 0
-13664 4347 4457 4536 0
-13664 4347 4459 4534 0
-13664 4347 4461 4532 0
-13664 4347 4463 4530 0
-13664 4347 4465 4528 0
-13664 4347 4467 4526 0
-13664 4347 4469 4524 0
-13664 4347 4471 4522 0
-13664 4347 4473 4520 0
-13664 4347 4475 4518 0
-13664 4347 4477 4516 0
-13664 4347 4479 4514 0
-13664 4347 4481 4512 0
-13664 4347 4483 4510 0
-13664 4347 4485 4508 0
-13664 4348 4443 4548 0
-13664 4348 4445 4546 0
-13664 4348 4447 4544 0
-13664 4348 4449 4542 0
-13664 4348 4451 4540 0
-13664 4348 4453 4538 0
-13664 4348 4455 4536 0
-13664 4348 4457 4534 0
-13664 4348 4459 4532 0
-13664 4348 4461 4530 0
-13664 4348 4463 4528 0
-13664 4348 4465 4526 0
-13664 4348 4467 4524 0
-13664 4348 4469 4522 0
-13664 4348 4471 4520 0
-13664 4348 4473 4518 0
-13664 4348 4475 4516 0
-13664 4348 4477 4514 0
-13664 4348 4479 4512 0
-13664 4348 4481 4510 0
-13664 4348 4483 4508 0
-13664 4348 4485 4506 0
-13664 4350 4441 4548 0
-13664 4350 4443 4546 0
-13664 4350 4445 4544 0
-13664 4350 4447 4542 0
-13664 4350 4449 4540 0
-13664 4350 4451 4538 0
-13664 4350 4453 4536 0
-13664 4350 4455 4534 0
-13664 4350 4457 4532 0
-13664 4350 4459 4530 0
-13664 4350 4461 4528 0
-13664 4350 4463 4526 0
-13664 4350 4465 4524 0
-13664 4350 4467 4522 0
-13664 4350 4469 4520 0
-13664 4350 4471 4518 0
-13664 4350 4473 4516 0
-13664 4350 4475 4514 0
-13664 4350 4477 4512 0
-13664 4350 4479 4510 0
-13664 4350 4481 4508 0
-13664 4350 4483 4506 0
-13664 4350 4485 4504 0
-13664 4352 4440 4548 0
-13664 4352 4441 4546 0
-13664 4352 4443 4544 0
-13664 4352 4445 4542 0
-13664 4352 4447 4540 0
-13664 4352 4449 4538 0
-13664 4352 4451 4536 0
-13664 4352 4453 4534 0
-13664 4352 4455 4532 0
-13664 4352 4457 4530 0
-13664 4352 4459 4528 0
-13664 4352 4461 4526 0
-13664 4352 4463 4524 0
-13664 4352 4465 4522 0
-13664 4352 4467 4520 0
-13664 4352 4469 4518 0
-13664 4352 4471 4516 0
-13664 4352 4473 4514 0
-13664 4352 4475 4512 0
-13664 4352 4477 4510 0
-13664 4352 4479 4508 0
-13664 4352 4481 4506 0
-13664 4352 4483 4504 0
-13664 4352 4485 4502 0
-13664 4354 4548 0
-13664 4354 4440 4546 0
-13664 4354 4441 4544 0
-13664 4354 4443 4542 0
-13664 4354 4445 4540 0
-13664 4354 4447 4538 0
-13664 4354 4449 4536 0
-13664 4354 4451 4534 0
-13664 4354 4453 4532 0
-13664 4354 4455 4530 0
-13664 4354 4457 4528 0
-13664 4354 4459 4526 0
-13664 4354 4461 4524 0
-13664 4354 4463 4522 0
-13664 4354 4465 4520 0
-13664 4354 4467 4518 0
-13664 4354 4469 4516 0
-13664 4354 4471 4514 0
-13664 4354 4473 4512 0
-13664 4354 4475 4510 0
-13664 4354 4477 4508 0
-13664 4354 4479 4506 0
-13664 4354 4481 4504 0
-13664 4354 4483 4502 0
-13664 4354 4485 4500 0
-13664 4356 4546 0
-13664 4356 4440 4544 0
-13664 4356 4441 4542 0
-13664 4356 4443 4540 0
-13664 4356 4445 4538 0
-13664 4356 4447 4536 0
-13664 4356 4449 4534 0
-13664 4356 4451 4532 0
-13664 4356 4453 4530 0
-13664 4356 4455 4528 0
-13664 4356 4457 4526 0
-13664 4356 4459 4524 0
-13664 4356 4461 4522 0
-13664 4356 4463 4520 0
-13664 4356 4465 4518 0
-13664 4356 4467 4516 0
-13664 4356 4469 4514 0
-13664 4356 4471 4512 0
-13664 4356 4473 4510 0
-13664 4356 4475 4508 0
-13664 4356 4477 4506 0
-13664 4356 4479 4504 0
-13664 4356 4481 4502 0
-13664 4356 4483 4500 0
-13664 4356 4485 4498 0
-13664 4358 4544 0
-13664 4358 4440 4542 0
-13664 4358 4441 4540 0
-13664 4358 4443 4538 0
-13664 4358 4445 4536 0
-13664 4358 4447 4534 0
-13664 4358 4449 4532 0
-13664 4358 4451 4530 0
-13664 4358 4453 4528 0
-13664 4358 4455 4526 0
-13664 4358 4457 4524 0
-13664 4358 4459 4522 0
-13664 4358 4461 4520 0
-13664 4358 4463 4518 0
-13664 4358 4465 4516 0
-13664 4358 4467 4514 0
-13664 4358 4469 4512 0
-13664 4358 4471 4510 0
-13664 4358 4473 4508 0
-13664 4358 4475 4506 0
-13664 4358 4477 4504 0
-13664 4358 4479 4502 0
-13664 4358 4481 4500 0
-13664 4358 4483 4498 0
-13664 4358 4485 4496 0
-13664 4360 4542 0
-13664 4360 4440 4540 0
-13664 4360 4441 4538 0
-13664 4360 4443 4536 0
-13664 4360 4445 4534 0
-13664 4360 4447 4532 0
-13664 4360 4449 4530 0
-13664 4360 4451 4528 0
-13664 4360 4453 4526 0
-13664 4360 4455 4524 0
-13664 4360 4457 4522 0
-13664 4360 4459 4520 0
-13664 4360 4461 4518 0
-13664 4360 4463 4516 0
-13664 4360 4465 4514 0
-13664 4360 4467 4512 0
-13664 4360 4469 4510 0
-13664 4360 4471 4508 0
-13664 4360 4473 4506 0
-13664 4360 4475 4504 0
-13664 4360 4477 4502 0
-13664 4360 4479 4500 0
-13664 4360 4481 4498 0
-13664 4360 4483 4496 0
-13664 4360 4485 4494 0
-13664 4362 4540 0
-13664 4362 4440 4538 0
-13664 4362 4441 4536 0
-13664 4362 4443 4534 0
-13664 4362 4445 4532 0
-13664 4362 4447 4530 0
-13664 4362 4449 4528 0
-13664 4362 4451 4526 0
-13664 4362 4453 4524 0
-13664 4362 4455 4522 0
-13664 4362 4457 4520 0
-13664 4362 4459 4518 0
-13664 4362 4461 4516 0
-13664 4362 4463 4514 0
-13664 4362 4465 4512 0
-13664 4362 4467 4510 0
-13664 4362 4469 4508 0
-13664 4362 4471 4506 0
-13664 4362 4473 4504 0
-13664 4362 4475 4502 0
-13664 4362 4477 4500 0
-13664 4362 4479 4498 0
-13664 4362 4481 4496 0
-13664 4362 4483 4494 0
-13664 4362 4485 4492 0
-13664 4364 4538 0
-13664 4364 4440 4536 0
-13664 4364 4441 4534 0
-13664 4364 4443 4532 0
-13664 4364 4445 4530 0
-13664 4364 4447 4528 0
-13664 4364 4449 4526 0
-13664 4364 4451 4524 0
-13664 4364 4453 4522 0
-13664 4364 4455 4520 0
-13664 4364 4457 4518 0
-13664 4364 4459 4516 0
-13664 4364 4461 4514 0
-13664 4364 4463 4512 0
-13664 4364 4465 4510 0
-13664 4364 4467 4508 0
-13664 4364 4469 4506 0
-13664 4364 4471 4504 0
-13664 4364 4473 4502 0
-13664 4364 4475 4500 0
-13664 4364 4477 4498 0
-13664 4364 4479 4496 0
-13664 4364 4481 4494 0
-13664 4364 4483 4492 0
-13664 4364 4485 4490 0
-13664 4366 4536 0
-13664 4366 4440 4534 0
-13664 4366 4441 4532 0
-13664 4366 4443 4530 0
-13664 4366 4445 4528 0
-13664 4366 4447 4526 0
-13664 4366 4449 4524 0
-13664 4366 4451 4522 0
-13664 4366 4453 4520 0
-13664 4366 4455 4518 0
-13664 4366 4457 4516 0
-13664 4366 4459 4514 0
-13664 4366 4461 4512 0
-13664 4366 4463 4510 0
-13664 4366 4465 4508 0
-13664 4366 4467 4506 0
-13664 4366 4469 4504 0
-13664 4366 4471 4502 0
-13664 4366 4473 4500 0
-13664 4366 4475 4498 0
-13664 4366 4477 4496 0
-13664 4366 4479 4494 0
-13664 4366 4481 4492 0
-13664 4366 4483 4490 0
-13664 4366 4485 4488 0
-13664 4368 4534 0
-13664 4368 4440 4532 0
-13664 4368 4441 4530 0
-13664 4368 4443 4528 0
-13664 4368 4445 4526 0
-13664 4368 4447 4524 0
-13664 4368 4449 4522 0
-13664 4368 4451 4520 0
-13664 4368 4453 4518 0
-13664 4368 4455 4516 0
-13664 4368 4457 4514 0
-13664 4368 4459 4512 0
-13664 4368 4461 4510 0
-13664 4368 4463 4508 0
-13664 4368 4465 4506 0
-13664 4368 4467 4504 0
-13664 4368 4469 4502 0
-13664 4368 4471 4500 0
-13664 4368 4473 4498 0
-13664 4368 4475 4496 0
-13664 4368 4477 4494 0
-13664 4368 4479 4492 0
-13664 4368 4481 4490 0
-13664 4368 4483 4488 0
-13664 4368 4485 4487 0
-13664 4370 4532 0
-13664 4370 4440 4530 0
-13664 4370 4441 4528 0
-13664 4370 4443 4526 0
-13664 4370 4445 4524 0
-13664 4370 4447 4522 0
-13664 4370 4449 4520 0
-13664 4370 4451 4518 0
-13664 4370 4453 4516 0
-13664 4370 4455 4514 0
-13664 4370 4457 4512 0
-13664 4370 4459 4510 0
-13664 4370 4461 4508 0
-13664 4370 4463 4506 0
-13664 4370 4465 4504 0
-13664 4370 4467 4502 0
-13664 4370 4469 4500 0
-13664 4370 4471 4498 0
-13664 4370 4473 4496 0
-13664 4370 4475 4494 0
-13664 4370 4477 4492 0
-13664 4370 4479 4490 0
-13664 4370 4481 4488 0
-13664 4370 4483 4487 0
-13664 4370 4485 0
-13664 4372 4530 0
-13664 4372 4440 4528 0
-13664 4372 4441 4526 0
-13664 4372 4443 4524 0
-13664 4372 4445 4522 0
-13664 4372 4447 4520 0
-13664 4372 4449 4518 0
-13664 4372 4451 4516 0
-13664 4372 4453 4514 0
-13664 4372 4455 4512 0
-13664 4372 4457 4510 0
-13664 4372 4459 4508 0
-13664 4372 4461 4506 0
-13664 4372 4463 4504 0
-13664 4372 4465 4502 0
-13664 4372 4467 4500 0
-13664 4372 4469 4498 0
-13664 4372 4471 4496 0
-13664 4372 4473 4494 0
-13664 4372 4475 4492 0
-13664 4372 4477 4490 0
-13664 4372 4479 4488 0
-13664 4372 4481 4487 0
-13664 4372 4483 0
-13664 4372 4485 0
-13664 4374 4528 0
-13664 4374 4440 4526 0
-13664 4374 4441 4524 0
-13664 4374 4443 4522 0
-13664 4374 4445 4520 0
-13664 4374 4447 4518 0
-13664 4374 4449 4516 0
-13664 4374 4451 4514 0
-13664 4374 4453 4512 0
-13664 4374 4455 4510 0
-13664 4374 4457 4508 0
-13664 4374 4459 4506 0
-13664 4374 4461 4504 0
-13664 4374 4463 4502 0
-13664 4374 4465 4500 0
-13664 4374 4467 4498 0
-13664 4374 4469 4496 0
-13664 4374 4471 4494 0
-13664 4374 4473 4492 0
-13664 4374 4475 4490 0
-13664 4374 4477 4488 0
-13664 4374 4479 4487 0
-13664 4374 4481 0
-13664 4374 4483 0
-13664 4374 4485 0
-13664 4376 4526 0
-13664 4376 4440 4524 0
-13664 4376 4441 4522 0
-13664 4376 4443 4520 0
-13664 4376 4445 4518 0
-13664 4376 4447 4516 0
-13664 4376 4449 4514 0
-13664 4376 4451 4512 0
-13664 4376 4453 4510 0
-13664 4376 4455 4508 0
-13664 4376 4457 4506 0
-13664 4376 4459 4504 0
-13664 4376 4461 4502 0
-13664 4376 4463 4500 0
-13664 4376 4465 4498 0
-13664 4376 4467 4496 0
-13664 4376 4469 4494 0
-13664 4376 4471 4492 0
-13664 4376 4473 4490 0
-13664 4376 4475 4488 0
-13664 4376 4477 4487 0
-13664 4376 4479 0
-13664 4376 4481 0
-13664 4376 4483 0
-13664 4376 4485 0
13664 -4479 -4487 0
13664 -4477 -4488 0
13664 -4475 -4490 0
13664 -4473 -4492 0
13664 -4471 -4494 0
13664 -4469 -4496 0
13664 -4467 -4498 0
13664 -4465 -4500 0
13664 -4463 -4502 0
13664 -4461 -4504 0
13664 -4459 -4506 0
13664 -4457 -4508 0
13664 -4455 -4510 0
13664 -4453 -4512 0
13664 -4451 -4514 0
13664 -4449 -4516 0
13664 -4447 -4518 0
13664 -4445 -4520 0
13664 -4443 -4522 0
13664 -4441 -4524 0
13664 -4440 -4526 0
13664 -4376 -4481 -4487 0
13664 -4376 -4479 -4488 0
13664 -4376 -4477 -4490 0
13664 -4376 -4475 -4492 0
13664 -4376 -4473 -4494 0
13664 -4376 -4471 -4496 0
13664 -4376 -4469 -4498 0
13664 -4376 -4467 -4500 0
13664 -4376 -4465 -4502 0
13664 -4376 -4463 -4504 0
13664 -4376 -4461 -4506 0
13664 -4376 -4459 -4508 0
13664 -4376 -4457 -4510 0
13664 -4376 -4455 -4512 0
13664 -4376 -4453 -4514 0
13664 -4376 -4451 -4516 0
13664 -4376 -4449 -4518 0
13664 -4376 -4447 -4520 0
13664 -4376 -4445 -4522 0
13664 -4376 -4443 -4524 0
13664 -4376 -4441 -4526 0
13664 -4376 -4440 -4528 0
13664 -4374 -4483 -4487 0
13664 -4374 -4481 -4488 0
13664 -4374 -4479 -4490 0
13664 -4374 -4477 -4492 0
13664 -4374 -4475 -4494 0
13664 -4374 -4473 -4496 0
13664 -4374 -4471 -4498 0
13664 -4374 -4469 -4500 0
13664 -4374 -4467 -4502 0
13664 -4374 -4465 -4504 0
13664 -4374 -4463 -4506 0
13664 -4374 -4461 -4508 0
13664 -4374 -4459 -4510 0
13664 -4374 -4457 -4512 0
13664 -4374 -4455 -4514 0
13664 -4374 -4453 -4516 0
13664 -4374 -4451 -4518 0
13664 -4374 -4449 -4520 0
13664 -4374 -4447 -4522 0
13664 -4374 -4445 -4524 0
13664 -4374 -4443 -4526 0
13664 -4374 -4441 -4528 0
13664 -4374 -4440 -4530 0
13664 -4372 -4485 -4487 0
13664 -4372 -4483 -4488 0
13664 -4372 -4481 -4490 0
13664 -4372 -4479 -4492 0
13664 -4372 -4477 -4494 0
13664 -4372 -4475 -4496 0
13664 -4372 -4473 -4498 0
13664 -4372 -4471 -4500 0
13664 -4372 -4469 -4502 0
13664 -4372 -4467 -4504 0
13664 -4372 -4465 -4506 0
13664 -4372 -4463 -4508 0
13664 -4372 -4461 -4510 0
13664 -4372 -4459 -4512 0
13664 -4372 -4457 -4514 0
13664 -4372 -4455 -4516 0
13664 -4372 -4453 -4518 0
13664 -4372 -4451 -4520 0
13664 -4372 -4449 -4522 0
13664 -4372 -4447 -4524 0
13664 -4372 -4445 -4526 0
13664 -4372 -4443 -4528 0
13664 -4372 -4441 -4530 0
13664 -4372 -4440 -4532 0
13664 -4370 -4487 0
13664 -4370 -4485 -4488 0
13664 -4370 -4483 -4490 0
13664 -4370 -4481 -4492 0
13664 -4370 -4479 -4494 0
13664 -4370 -4477 -4496 0
13664 -4370 -4475 -4498 0
13664 -4370 -4473 -4500 0
13664 -4370 -4471 -4502 0
13664 -4370 -4469 -4504 0
13664 -4370 -4467 -4506 0
13664 -4370 -4465 -4508 0
13664 -4370 -4463 -4510 0
13664 -4370 -4461 -4512 0
13664 -4370 -4459 -4514 0
13664 -4370 -4457 -4516 0
13664 -4370 -4455 -4518 0
13664 -4370 -4453 -4520 0
13664 -4370 -4451 -4522 0
13664 -4370 -4449 -4524 0
13664 -4370 -4447 -4526 0
13664 -4370 -4445 -4528 0
13664 -4370 -4443 -4530 0
13664 -4370 -4441 -4532 0
13664 -4370 -4440 -4534 0
13664 -4368 -4488 0
13664 -4368 -4485 -4490 0
13664 -4368 -4483 -4492 0
13664 -4368 -4481 -4494 0
13664 -4368 -4479 -4496 0
13664 -4368 -4477 -4498 0
13664 -4368 -4475 -4500 0
13664 -4368 -4473 -4502 0
13664 -4368 -4471 -4504 0
13664 -4368 -4469 -4506 0
13664 -4368 -4467 -4508 0
13664 -4368 -4465 -4510 0
13664 -4368 -4463 -4512 0
13664 -4368 -4461 -4514 0
13664 -4368 -4459 -4516 0
13664 -4368 -4457 -4518 0
13664 -4368 -4455 -4520 0
13664 -4368 -4453 -4522 0
13664 -4368 -4451 -4524 0
13664 -4368 -4449 -4526 0
13664 -4368 -4447 -4528 0
13664 -4368 -4445 -4530 0
13664 -4368 -4443 -4532 0
13664 -4368 -4441 -4534 0
13664 -4368 -4440 -4536 0
13664 -4366 -4490 0
13664 -4366 -4485 -4492 0
13664 -4366 -4483 -4494 0
13664 -4366 -4481 -4496 0
13664 -4366 -4479 -4498 0
13664 -4366 -4477 -4500 0
13664 -4366 -4475 -4502 0
13664 -4366 -4473 -4504 0
13664 -4366 -4471 -4506 0
13664 -4366 -4469 -4508 0
13664 -4366 -4467 -4510 0
13664 -4366 -4465 -4512 0
13664 -4366 -4463 -4514 0
13664 -4366 -4461 -4516 0
13664 -4366 -4459 -4518 0
13664 -4366 -4457 -4520 0
13664 -4366 -4455 -4522 0
13664 -4366 -4453 -4524 0
13664 -4366 -4451 -4526 0
13664 -4366 -4449 -4528 0
13664 -4366 -4447 -4530 0
13664 -4366 -4445 -4532 0
13664 -4366 -4443 -4534 0
13664 -4366 -4441 -4536 0
13664 -4366 -4440 -4538 0
13664 -4364 -4492 0
13664 -4364 -4485 -4494 0
13664 -4364 -4483 -4496 0
13664 -4364 -4481 -4498 0
13664 -4364 -4479 -4500 0
13664 -4364 -4477 -4502 0
13664 -4364 -4475 -4504 0
13664 -4364 -4473 -4506 0
13664 -4364 -4471 -4508 0
13664 -4364 -4469 -4510 0
13664 -4364 -4467 -4512 0
13664 -4364 -4465 -4514 0
13664 -4364 -4463 -4516 0
13664 -4364 -4461 -4518 0
13664 -4364 -4459 -4520 0
13664 -4364 -4457 -4522 0
13664 -4364 -4455 -4524 0
13664 -4364 -4453 -4526 0
13664 -4364 -4451 -4528 0
13664 -4364 -4449 -4530 0
13664 -4364 -4447 -4532 0
13664 -4364 -4445 -4534 0
13664 -4364 -4443 -4536 0
13664 -4364 -4441 -4538 0
13664 -4364 -4440 -4540 0
13664 -4362 -4494 0
13664 -4362 -4485 -4496 0
13664 -4362 -4483 -4498 0
13664 -4362 -4481 -4500 0
13664 -4362 -4479 -4502 0
13664 -4362 -4477 -4504 0
13664 -4362 -4475 -4506 0
13664 -4362 -4473 -4508 0
13664 -4362 -4471 -4510 0
13664 -4362 -4469 -4512 0
13664 -4362 -4467 -4514 0
13664 -4362 -4465 -4516 0
13664 -4362 -4463 -4518 0
13664 -4362 -4461 -4520 0
13664 -4362 -4459 -4522 0
13664 -4362 -4457 -4524 0
13664 -4362 -4455 -4526 0
13664 -4362 -4453 -4528 0
13664 -4362 -4451 -4530 0
13664 -4362 -4449 -4532 0
13664 -4362 -4447 -4534 0
13664 -4362 -4445 -4536 0
13664 -4362 -4443 -4538 0
13664 -4362 -4441 -4540 0
13664 -4362 -4440 -4542 0
13664 -4360 -4496 0
13664 -4360 -4485 -4498 0
13664 -4360 -4483 -4500 0
13664 -4360 -4481 -4502 0
13664 -4360 -4479 -4504 0
13664 -4360 -4477 -4506 0
13664 -4360 -4475 -4508 0
13664 -4360 -4473 -4510 0
13664 -4360 -4471 -4512 0
13664 -4360 -4469 -4514 0
13664 -4360 -4467 -4516 0
13664 -4360 -4465 -4518 0
13664 -4360 -4463 -4520 0
13664 -4360 -4461 -4522 0
13664 -4360 -4459 -4524 0
13664 -4360 -4457 -4526 0
13664 -4360 -4455 -4528 0
13664 -4360 -4453 -4530 0
13664 -4360 -4451 -4532 0
13664 -4360 -4449 -4534 0
13664 -4360 -4447 -4536 0
13664 -4360 -4445 -4538 0
13664 -4360 -4443 -4540 0
13664 -4360 -4441 -4542 0
13664 -4360 -4440 -4544 0
13664 -4358 -4498 0
13664 -4358 -4485 -4500 0
13664 -4358 -4483 -4502 0
13664 -4358 -4481 -4504 0
13664 -4358 -4479 -4506 0
13664 -4358 -4477 -4508 0
13664 -4358 -4475 -4510 0
13664 -4358 -4473 -4512 0
13664 -4358 -4471 -4514 0
13664 -4358 -4469 -4516 0
13664 -4358 -4467 -4518 0
13664 -4358 -4465 -4520 0
13664 -4358 -4463 -4522 0
13664 -4358 -4461 -4524 0
13664 -4358 -4459 -4526 0
13664 -4358 -4457 -4528 0
13664 -4358 -4455 -4530 0
13664 -4358 -4453 -4532 0
13664 -4358 -4451 -4534 0
13664 -4358 -4449 -4536 0
13664 -4358 -4447 -4538 0
13664 -4358 -4445 -4540 0
13664 -4358 -4443 -4542 0
13664 -4358 -4441 -4544 0
13664 -4358 -4440 -4546 0
13664 -4356 -4500 0
13664 -4356 -4485 -4502 0
13664 -4356 -4483 -4504 0
13664 -4356 -4481 -4506 0
13664 -4356 -4479 -4508 0
13664 -4356 -4477 -4510 0
13664 -4356 -4475 -4512 0
13664 -4356 -4473 -4514 0
13664 -4356 -4471 -4516 0
13664 -4356 -4469 -4518 0
13664 -4356 -4467 -4520 0
13664 -4356 -4465 -4522 0
13664 -4356 -4463 -4524 0
13664 -4356 -4461 -4526 0
13664 -4356 -4459 -4528 0
13664 -4356 -4457 -4530 0
13664 -4356 -4455 -4532 0
13664 -4356 -4453 -4534 0
13664 -4356 -4451 -4536 0
13664 -4356 -4449 -4538 0
13664 -4356 -4447 -4540 0
13664 -4356 -4445 -4542 0
13664 -4356 -4443 -4544 0
13664 -4356 -4441 -4546 0
13664 -4356 -4440 -4548 0
13664 -4354 -4502 0
13664 -4354 -4485 -4504 0
13664 -4354 -4483 -4506 0
13664 -4354 -4481 -4508 0
13664 -4354 -4479 -4510 0
13664 -4354 -4477 -4512 0
13664 -4354 -4475 -4514 0
13664 -4354 -4473 -4516 0
13664 -4354 -4471 -4518 0
13664 -4354 -4469 -4520 0
13664 -4354 -4467 -4522 0
13664 -4354 -4465 -4524 0
13664 -4354 -4463 -4526 0
13664 -4354 -4461 -4528 0
13664 -4354 -4459 -4530 0
13664 -4354 -4457 -4532 0
13664 -4354 -4455 -4534 0
13664 -4354 -4453 -4536 0
13664 -4354 -4451 -4538 0
13664 -4354 -4449 -4540 0
13664 -4354 -4447 -4542 0
13664 -4354 -4445 -4544 0
13664 -4354 -4443 -4546 0
13664 -4354 -4441 -4548 0
13664 -4354 -4440 0
13664 -4352 -4504 0
13664 -4352 -4485 -4506 0
13664 -4352 -4483 -4508 0
13664 -4352 -4481 -4510 0
13664 -4352 -4479 -4512 0
13664 -4352 -4477 -4514 0
13664 -4352 -4475 -4516 0
13664 -4352 -4473 -4518 0
13664 -4352 -4471 -4520 0
13664 -4352 -4469 -4522 0
13664 -4352 -4467 -4524 0
13664 -4352 -4465 -4526 0
13664 -4352 -4463 -4528 0
13664 -4352 -4461 -4530 0
13664 -4352 -4459 -4532 0
13664 -4352 -4457 -4534 0
13664 -4352 -4455 -4536 0
13664 -4352 -4453 -4538 0
13664 -4352 -4451 -4540 0
13664 -4352 -4449 -4542 0
13664 -4352 -4447 -4544 0
13664 -4352 -4445 -4546 0
13664 -4352 -4443 -4548 0
13664 -4352 -4441 0
13664 -4352 -4440 0
13664 -4350 -4506 0
13664 -4350 -4485 -4508 0
13664 -4350 -4483 -4510 0
13664 -4350 -4481 -4512 0
13664 -4350 -4479 -4514 0
13664 -4350 -4477 -4516 0
13664 -4350 -4475 -4518 0
13664 -4350 -4473 -4520 0
13664 -4350 -4471 -4522 0
13664 -4350 -4469 -4524 0
13664 -4350 -4467 -4526 0
13664 -4350 -4465 -4528 0
13664 -4350 -4463 -4530 0
13664 -4350 -4461 -4532 0
13664 -4350 -4459 -4534 0
13664 -4350 -4457 -4536 0
13664 -4350 -4455 -4538 0
13664 -4350 -4453 -4540 0
13664 -4350 -4451 -4542 0
13664 -4350 -4449 -4544 0
13664 -4350 -4447 -4546 0
13664 -4350 -4445 -4548 0
13664 -4350 -4443 0
13664 -4350 -4441 0
13664 -4350 -4440 0
13664 -4348 -4508 0
13664 -4348 -4485 -4510 0
13664 -4348 -4483 -4512 0
13664 -4348 -4481 -4514 0
13664 -4348 -4479 -4516 0
13664 -4348 -4477 -4518 0
13664 -4348 -4475 -4520 0
13664 -4348 -4473 -4522 0
13664 -4348 -4471 -4524 0
13664 -4348 -4469 -4526 0
13664 -4348 -4467 -4528 0
13664 -4348 -4465 -4530 0
13664 -4348 -4463 -4532 0
13664 -4348 -4461 -4534 0
13664 -4348 -4459 -4536 0
13664 -4348 -4457 -4538 0
13664 -4348 -4455 -4540 0
13664 -4348 -4453 -4542 0
13664 -4348 -4451 -4544 0
13664 -4348 -4449 -4546 0
13664 -4348 -4447 -4548 0
13664 -4348 -4445 0
13664 -4348 -4443 0
13664 -4348 -4441 0
13664 -4348 -4440 0
13664 -4347 -4510 0
13664 -4347 -4485 -4512 0
13664 -4347 -4483 -4514 0
13664 -4347 -4481 -4516 0
13664 -4347 -4479 -4518 0
13664 -4347 -4477 -4520 0
13664 -4347 -4475 -4522 0
13664 -4347 -4473 -4524 0
13664 -4347 -4471 -4526 0
13664 -4347 -4469 -4528 0
13664 -4347 -4467 -4530 0
13664 -4347 -4465 -4532 0
13664 -4347 -4463 -4534 0
13664 -4347 -4461 -4536 0
13664 -4347 -4459 -4538 0
13664 -4347 -4457 -4540 0
13664 -4347 -4455 -4542 0
13664 -4347 -4453 -4544 0
13664 -4347 -4451 -4546 0
13664 -4347 -4449 -4548 0
13664 -4347 -4447 0
13664 -4347 -4445 0
13664 -4347 -4443 0
13664 -4347 -4441 0
13664 -4347 -4440 0
c ((36<=(aux528 + aux531 + aux532))=tv=SATLiteral(13665))
-13665 -4477 -4487 0
-13665 -4475 -4488 0
-13665 -4473 -4490 0
-13665 -4471 -4492 0
-13665 -4469 -4494 0
-13665 -4467 -4496 0
-13665 -4465 -4498 0
-13665 -4463 -4500 0
-13665 -4461 -4502 0
-13665 -4459 -4504 0
-13665 -4457 -4506 0
-13665 -4455 -4508 0
-13665 -4453 -4510 0
-13665 -4451 -4512 0
-13665 -4449 -4514 0
-13665 -4447 -4516 0
-13665 -4445 -4518 0
-13665 -4443 -4520 0
-13665 -4441 -4522 0
-13665 -4440 -4524 0
-13665 -4376 -4479 -4487 0
-13665 -4376 -4477 -4488 0
-13665 -4376 -4475 -4490 0
-13665 -4376 -4473 -4492 0
-13665 -4376 -4471 -4494 0
-13665 -4376 -4469 -4496 0
-13665 -4376 -4467 -4498 0
-13665 -4376 -4465 -4500 0
-13665 -4376 -4463 -4502 0
-13665 -4376 -4461 -4504 0
-13665 -4376 -4459 -4506 0
-13665 -4376 -4457 -4508 0
-13665 -4376 -4455 -4510 0
-13665 -4376 -4453 -4512 0
-13665 -4376 -4451 -4514 0
-13665 -4376 -4449 -4516 0
-13665 -4376 -4447 -4518 0
-13665 -4376 -4445 -4520 0
-13665 -4376 -4443 -4522 0
-13665 -4376 -4441 -4524 0
-13665 -4376 -4440 -4526 0
-13665 -4374 -4481 -4487 0
-13665 -4374 -4479 -4488 0
-13665 -4374 -4477 -4490 0
-13665 -4374 -4475 -4492 0
-13665 -4374 -4473 -4494 0
-13665 -4374 -4471 -4496 0
-13665 -4374 -4469 -4498 0
-13665 -4374 -4467 -4500 0
-13665 -4374 -4465 -4502 0
-13665 -4374 -4463 -4504 0
-13665 -4374 -4461 -4506 0
-13665 -4374 -4459 -4508 0
-13665 -4374 -4457 -4510 0
-13665 -4374 -4455 -4512 0
-13665 -4374 -4453 -4514 0
-13665 -4374 -4451 -4516 0
-13665 -4374 -4449 -4518 0
-13665 -4374 -4447 -4520 0
-13665 -4374 -4445 -4522 0
-13665 -4374 -4443 -4524 0
-13665 -4374 -4441 -4526 0
-13665 -4374 -4440 -4528 0
-13665 -4372 -4483 -4487 0
-13665 -4372 -4481 -4488 0
-13665 -4372 -4479 -4490 0
-13665 -4372 -4477 -4492 0
-13665 -4372 -4475 -4494 0
-13665 -4372 -4473 -4496 0
-13665 -4372 -4471 -4498 0
-13665 -4372 -4469 -4500 0
-13665 -4372 -4467 -4502 0
-13665 -4372 -4465 -4504 0
-13665 -4372 -4463 -4506 0
-13665 -4372 -4461 -4508 0
-13665 -4372 -4459 -4510 0
-13665 -4372 -4457 -4512 0
-13665 -4372 -4455 -4514 0
-13665 -4372 -4453 -4516 0
-13665 -4372 -4451 -4518 0
-13665 -4372 -4449 -4520 0
-13665 -4372 -4447 -4522 0
-13665 -4372 -4445 -4524 0
-13665 -4372 -4443 -4526 0
-13665 -4372 -4441 -4528 0
-13665 -4372 -4440 -4530 0
-13665 -4370 -4485 -4487 0
-13665 -4370 -4483 -4488 0
-13665 -4370 -4481 -4490 0
-13665 -4370 -4479 -4492 0
-13665 -4370 -4477 -4494 0
-13665 -4370 -4475 -4496 0
-13665 -4370 -4473 -4498 0
-13665 -4370 -4471 -4500 0
-13665 -4370 -4469 -4502 0
-13665 -4370 -4467 -4504 0
-13665 -4370 -4465 -4506 0
-13665 -4370 -4463 -4508 0
-13665 -4370 -4461 -4510 0
-13665 -4370 -4459 -4512 0
-13665 -4370 -4457 -4514 0
-13665 -4370 -4455 -4516 0
-13665 -4370 -4453 -4518 0
-13665 -4370 -4451 -4520 0
-13665 -4370 -4449 -4522 0
-13665 -4370 -4447 -4524 0
-13665 -4370 -4445 -4526 0
-13665 -4370 -4443 -4528 0
-13665 -4370 -4441 -4530 0
-13665 -4370 -4440 -4532 0
-13665 -4368 -4487 0
-13665 -4368 -4485 -4488 0
-13665 -4368 -4483 -4490 0
-13665 -4368 -4481 -4492 0
-13665 -4368 -4479 -4494 0
-13665 -4368 -4477 -4496 0
-13665 -4368 -4475 -4498 0
-13665 -4368 -4473 -4500 0
-13665 -4368 -4471 -4502 0
-13665 -4368 -4469 -4504 0
-13665 -4368 -4467 -4506 0
-13665 -4368 -4465 -4508 0
-13665 -4368 -4463 -4510 0
-13665 -4368 -4461 -4512 0
-13665 -4368 -4459 -4514 0
-13665 -4368 -4457 -4516 0
-13665 -4368 -4455 -4518 0
-13665 -4368 -4453 -4520 0
-13665 -4368 -4451 -4522 0
-13665 -4368 -4449 -4524 0
-13665 -4368 -4447 -4526 0
-13665 -4368 -4445 -4528 0
-13665 -4368 -4443 -4530 0
-13665 -4368 -4441 -4532 0
-13665 -4368 -4440 -4534 0
-13665 -4366 -4488 0
-13665 -4366 -4485 -4490 0
-13665 -4366 -4483 -4492 0
-13665 -4366 -4481 -4494 0
-13665 -4366 -4479 -4496 0
-13665 -4366 -4477 -4498 0
-13665 -4366 -4475 -4500 0
-13665 -4366 -4473 -4502 0
-13665 -4366 -4471 -4504 0
-13665 -4366 -4469 -4506 0
-13665 -4366 -4467 -4508 0
-13665 -4366 -4465 -4510 0
-13665 -4366 -4463 -4512 0
-13665 -4366 -4461 -4514 0
-13665 -4366 -4459 -4516 0
-13665 -4366 -4457 -4518 0
-13665 -4366 -4455 -4520 0
-13665 -4366 -4453 -4522 0
-13665 -4366 -4451 -4524 0
-13665 -4366 -4449 -4526 0
-13665 -4366 -4447 -4528 0
-13665 -4366 -4445 -4530 0
-13665 -4366 -4443 -4532 0
-13665 -4366 -4441 -4534 0
-13665 -4366 -4440 -4536 0
-13665 -4364 -4490 0
-13665 -4364 -4485 -4492 0
-13665 -4364 -4483 -4494 0
-13665 -4364 -4481 -4496 0
-13665 -4364 -4479 -4498 0
-13665 -4364 -4477 -4500 0
-13665 -4364 -4475 -4502 0
-13665 -4364 -4473 -4504 0
-13665 -4364 -4471 -4506 0
-13665 -4364 -4469 -4508 0
-13665 -4364 -4467 -4510 0
-13665 -4364 -4465 -4512 0
-13665 -4364 -4463 -4514 0
-13665 -4364 -4461 -4516 0
-13665 -4364 -4459 -4518 0
-13665 -4364 -4457 -4520 0
-13665 -4364 -4455 -4522 0
-13665 -4364 -4453 -4524 0
-13665 -4364 -4451 -4526 0
-13665 -4364 -4449 -4528 0
-13665 -4364 -4447 -4530 0
-13665 -4364 -4445 -4532 0
-13665 -4364 -4443 -4534 0
-13665 -4364 -4441 -4536 0
-13665 -4364 -4440 -4538 0
-13665 -4362 -4492 0
-13665 -4362 -4485 -4494 0
-13665 -4362 -4483 -4496 0
-13665 -4362 -4481 -4498 0
-13665 -4362 -4479 -4500 0
-13665 -4362 -4477 -4502 0
-13665 -4362 -4475 -4504 0
-13665 -4362 -4473 -4506 0
-13665 -4362 -4471 -4508 0
-13665 -4362 -4469 -4510 0
-13665 -4362 -4467 -4512 0
-13665 -4362 -4465 -4514 0
-13665 -4362 -4463 -4516 0
-13665 -4362 -4461 -4518 0
-13665 -4362 -4459 -4520 0
-13665 -4362 -4457 -4522 0
-13665 -4362 -4455 -4524 0
-13665 -4362 -4453 -4526 0
-13665 -4362 -4451 -4528 0
-13665 -4362 -4449 -4530 0
-13665 -4362 -4447 -4532 0
-13665 -4362 -4445 -4534 0
-13665 -4362 -4443 -4536 0
-13665 -4362 -4441 -4538 0
-13665 -4362 -4440 -4540 0
-13665 -4360 -4494 0
-13665 -4360 -4485 -4496 0
-13665 -4360 -4483 -4498 0
-13665 -4360 -4481 -4500 0
-13665 -4360 -4479 -4502 0
-13665 -4360 -4477 -4504 0
-13665 -4360 -4475 -4506 0
-13665 -4360 -4473 -4508 0
-13665 -4360 -4471 -4510 0
-13665 -4360 -4469 -4512 0
-13665 -4360 -4467 -4514 0
-13665 -4360 -4465 -4516 0
-13665 -4360 -4463 -4518 0
-13665 -4360 -4461 -4520 0
-13665 -4360 -4459 -4522 0
-13665 -4360 -4457 -4524 0
-13665 -4360 -4455 -4526 0
-13665 -4360 -4453 -4528 0
-13665 -4360 -4451 -4530 0
-13665 -4360 -4449 -4532 0
-13665 -4360 -4447 -4534 0
-13665 -4360 -4445 -4536 0
-13665 -4360 -4443 -4538 0
-13665 -4360 -4441 -4540 0
-13665 -4360 -4440 -4542 0
-13665 -4358 -4496 0
-13665 -4358 -4485 -4498 0
-13665 -4358 -4483 -4500 0
-13665 -4358 -4481 -4502 0
-13665 -4358 -4479 -4504 0
-13665 -4358 -4477 -4506 0
-13665 -4358 -4475 -4508 0
-13665 -4358 -4473 -4510 0
-13665 -4358 -4471 -4512 0
-13665 -4358 -4469 -4514 0
-13665 -4358 -4467 -4516 0
-13665 -4358 -4465 -4518 0
-13665 -4358 -4463 -4520 0
-13665 -4358 -4461 -4522 0
-13665 -4358 -4459 -4524 0
-13665 -4358 -4457 -4526 0
-13665 -4358 -4455 -4528 0
-13665 -4358 -4453 -4530 0
-13665 -4358 -4451 -4532 0
-13665 -4358 -4449 -4534 0
-13665 -4358 -4447 -4536 0
-13665 -4358 -4445 -4538 0
-13665 -4358 -4443 -4540 0
-13665 -4358 -4441 -4542 0
-13665 -4358 -4440 -4544 0
-13665 -4356 -4498 0
-13665 -4356 -4485 -4500 0
-13665 -4356 -4483 -4502 0
-13665 -4356 -4481 -4504 0
-13665 -4356 -4479 -4506 0
-13665 -4356 -4477 -4508 0
-13665 -4356 -4475 -4510 0
-13665 -4356 -4473 -4512 0
-13665 -4356 -4471 -4514 0
-13665 -4356 -4469 -4516 0
-13665 -4356 -4467 -4518 0
-13665 -4356 -4465 -4520 0
-13665 -4356 -4463 -4522 0
-13665 -4356 -4461 -4524 0
-13665 -4356 -4459 -4526 0
-13665 -4356 -4457 -4528 0
-13665 -4356 -4455 -4530 0
-13665 -4356 -4453 -4532 0
-13665 -4356 -4451 -4534 0
-13665 -4356 -4449 -4536 0
-13665 -4356 -4447 -4538 0
-13665 -4356 -4445 -4540 0
-13665 -4356 -4443 -4542 0
-13665 -4356 -4441 -4544 0
-13665 -4356 -4440 -4546 0
-13665 -4354 -4500 0
-13665 -4354 -4485 -4502 0
-13665 -4354 -4483 -4504 0
-13665 -4354 -4481 -4506 0
-13665 -4354 -4479 -4508 0
-13665 -4354 -4477 -4510 0
-13665 -4354 -4475 -4512 0
-13665 -4354 -4473 -4514 0
-13665 -4354 -4471 -4516 0
-13665 -4354 -4469 -4518 0
-13665 -4354 -4467 -4520 0
-13665 -4354 -4465 -4522 0
-13665 -4354 -4463 -4524 0
-13665 -4354 -4461 -4526 0
-13665 -4354 -4459 -4528 0
-13665 -4354 -4457 -4530 0
-13665 -4354 -4455 -4532 0
-13665 -4354 -4453 -4534 0
-13665 -4354 -4451 -4536 0
-13665 -4354 -4449 -4538 0
-13665 -4354 -4447 -4540 0
-13665 -4354 -4445 -4542 0
-13665 -4354 -4443 -4544 0
-13665 -4354 -4441 -4546 0
-13665 -4354 -4440 -4548 0
-13665 -4352 -4502 0
-13665 -4352 -4485 -4504 0
-13665 -4352 -4483 -4506 0
-13665 -4352 -4481 -4508 0
-13665 -4352 -4479 -4510 0
-13665 -4352 -4477 -4512 0
-13665 -4352 -4475 -4514 0
-13665 -4352 -4473 -4516 0
-13665 -4352 -4471 -4518 0
-13665 -4352 -4469 -4520 0
-13665 -4352 -4467 -4522 0
-13665 -4352 -4465 -4524 0
-13665 -4352 -4463 -4526 0
-13665 -4352 -4461 -4528 0
-13665 -4352 -4459 -4530 0
-13665 -4352 -4457 -4532 0
-13665 -4352 -4455 -4534 0
-13665 -4352 -4453 -4536 0
-13665 -4352 -4451 -4538 0
-13665 -4352 -4449 -4540 0
-13665 -4352 -4447 -4542 0
-13665 -4352 -4445 -4544 0
-13665 -4352 -4443 -4546 0
-13665 -4352 -4441 -4548 0
-13665 -4352 -4440 0
-13665 -4350 -4504 0
-13665 -4350 -4485 -4506 0
-13665 -4350 -4483 -4508 0
-13665 -4350 -4481 -4510 0
-13665 -4350 -4479 -4512 0
-13665 -4350 -4477 -4514 0
-13665 -4350 -4475 -4516 0
-13665 -4350 -4473 -4518 0
-13665 -4350 -4471 -4520 0
-13665 -4350 -4469 -4522 0
-13665 -4350 -4467 -4524 0
-13665 -4350 -4465 -4526 0
-13665 -4350 -4463 -4528 0
-13665 -4350 -4461 -4530 0
-13665 -4350 -4459 -4532 0
-13665 -4350 -4457 -4534 0
-13665 -4350 -4455 -4536 0
-13665 -4350 -4453 -4538 0
-13665 -4350 -4451 -4540 0
-13665 -4350 -4449 -4542 0
-13665 -4350 -4447 -4544 0
-13665 -4350 -4445 -4546 0
-13665 -4350 -4443 -4548 0
-13665 -4350 -4441 0
-13665 -4350 -4440 0
-13665 -4348 -4506 0
-13665 -4348 -4485 -4508 0
-13665 -4348 -4483 -4510 0
-13665 -4348 -4481 -4512 0
-13665 -4348 -4479 -4514 0
-13665 -4348 -4477 -4516 0
-13665 -4348 -4475 -4518 0
-13665 -4348 -4473 -4520 0
-13665 -4348 -4471 -4522 0
-13665 -4348 -4469 -4524 0
-13665 -4348 -4467 -4526 0
-13665 -4348 -4465 -4528 0
-13665 -4348 -4463 -4530 0
-13665 -4348 -4461 -4532 0
-13665 -4348 -4459 -4534 0
-13665 -4348 -4457 -4536 0
-13665 -4348 -4455 -4538 0
-13665 -4348 -4453 -4540 0
-13665 -4348 -4451 -4542 0
-13665 -4348 -4449 -4544 0
-13665 -4348 -4447 -4546 0
-13665 -4348 -4445 -4548 0
-13665 -4348 -4443 0
-13665 -4348 -4441 0
-13665 -4348 -4440 0
-13665 -4347 -4508 0
-13665 -4347 -4485 -4510 0
-13665 -4347 -4483 -4512 0
-13665 -4347 -4481 -4514 0
-13665 -4347 -4479 -4516 0
-13665 -4347 -4477 -4518 0
-13665 -4347 -4475 -4520 0
-13665 -4347 -4473 -4522 0
-13665 -4347 -4471 -4524 0
-13665 -4347 -4469 -4526 0
-13665 -4347 -4467 -4528 0
-13665 -4347 -4465 -4530 0
-13665 -4347 -4463 -4532 0
-13665 -4347 -4461 -4534 0
-13665 -4347 -4459 -4536 0
-13665 -4347 -4457 -4538 0
-13665 -4347 -4455 -4540 0
-13665 -4347 -4453 -4542 0
-13665 -4347 -4451 -4544 0
-13665 -4347 -4449 -4546 0
-13665 -4347 -4447 -4548 0
-13665 -4347 -4445 0
-13665 -4347 -4443 0
-13665 -4347 -4441 0
-13665 -4347 -4440 0
13665 4445 4548 0
13665 4447 4546 0
13665 4449 4544 0
13665 4451 4542 0
13665 4453 4540 0
13665 4455 4538 0
13665 4457 4536 0
13665 4459 4534 0
13665 4461 4532 0
13665 4463 4530 0
13665 4465 4528 0
13665 4467 4526 0
13665 4469 4524 0
13665 4471 4522 0
13665 4473 4520 0
13665 4475 4518 0
13665 4477 4516 0
13665 4479 4514 0
13665 4481 4512 0
13665 4483 4510 0
13665 4485 4508 0
13665 4347 4443 4548 0
13665 4347 4445 4546 0
13665 4347 4447 4544 0
13665 4347 4449 4542 0
13665 4347 4451 4540 0
13665 4347 4453 4538 0
13665 4347 4455 4536 0
13665 4347 4457 4534 0
13665 4347 4459 4532 0
13665 4347 4461 4530 0
13665 4347 4463 4528 0
13665 4347 4465 4526 0
13665 4347 4467 4524 0
13665 4347 4469 4522 0
13665 4347 4471 4520 0
13665 4347 4473 4518 0
13665 4347 4475 4516 0
13665 4347 4477 4514 0
13665 4347 4479 4512 0
13665 4347 4481 4510 0
13665 4347 4483 4508 0
13665 4347 4485 4506 0
13665 4348 4441 4548 0
13665 4348 4443 4546 0
13665 4348 4445 4544 0
13665 4348 4447 4542 0
13665 4348 4449 4540 0
13665 4348 4451 4538 0
13665 4348 4453 4536 0
13665 4348 4455 4534 0
13665 4348 4457 4532 0
13665 4348 4459 4530 0
13665 4348 4461 4528 0
13665 4348 4463 4526 0
13665 4348 4465 4524 0
13665 4348 4467 4522 0
13665 4348 4469 4520 0
13665 4348 4471 4518 0
13665 4348 4473 4516 0
13665 4348 4475 4514 0
13665 4348 4477 4512 0
13665 4348 4479 4510 0
13665 4348 4481 4508 0
13665 4348 4483 4506 0
13665 4348 4485 4504 0
13665 4350 4440 4548 0
13665 4350 4441 4546 0
13665 4350 4443 4544 0
13665 4350 4445 4542 0
13665 4350 4447 4540 0
13665 4350 4449 4538 0
13665 4350 4451 4536 0
13665 4350 4453 4534 0
13665 4350 4455 4532 0
13665 4350 4457 4530 0
13665 4350 4459 4528 0
13665 4350 4461 4526 0
13665 4350 4463 4524 0
13665 4350 4465 4522 0
13665 4350 4467 4520 0
13665 4350 4469 4518 0
13665 4350 4471 4516 0
13665 4350 4473 4514 0
13665 4350 4475 4512 0
13665 4350 4477 4510 0
13665 4350 4479 4508 0
13665 4350 4481 4506 0
13665 4350 4483 4504 0
13665 4350 4485 4502 0
13665 4352 4548 0
13665 4352 4440 4546 0
13665 4352 4441 4544 0
13665 4352 4443 4542 0
13665 4352 4445 4540 0
13665 4352 4447 4538 0
13665 4352 4449 4536 0
13665 4352 4451 4534 0
13665 4352 4453 4532 0
13665 4352 4455 4530 0
13665 4352 4457 4528 0
13665 4352 4459 4526 0
13665 4352 4461 4524 0
13665 4352 4463 4522 0
13665 4352 4465 4520 0
13665 4352 4467 4518 0
13665 4352 4469 4516 0
13665 4352 4471 4514 0
13665 4352 4473 4512 0
13665 4352 4475 4510 0
13665 4352 4477 4508 0
13665 4352 4479 4506 0
13665 4352 4481 4504 0
13665 4352 4483 4502 0
13665 4352 4485 4500 0
13665 4354 4546 0
13665 4354 4440 4544 0
13665 4354 4441 4542 0
13665 4354 4443 4540 0
13665 4354 4445 4538 0
13665 4354 4447 4536 0
13665 4354 4449 4534 0
13665 4354 4451 4532 0
13665 4354 4453 4530 0
13665 4354 4455 4528 0
13665 4354 4457 4526 0
13665 4354 4459 4524 0
13665 4354 4461 4522 0
13665 4354 4463 4520 0
13665 4354 4465 4518 0
13665 4354 4467 4516 0
13665 4354 4469 4514 0
13665 4354 4471 4512 0
13665 4354 4473 4510 0
13665 4354 4475 4508 0
13665 4354 4477 4506 0
13665 4354 4479 4504 0
13665 4354 4481 4502 0
13665 4354 4483 4500 0
13665 4354 4485 4498 0
13665 4356 4544 0
13665 4356 4440 4542 0
13665 4356 4441 4540 0
13665 4356 4443 4538 0
13665 4356 4445 4536 0
13665 4356 4447 4534 0
13665 4356 4449 4532 0
13665 4356 4451 4530 0
13665 4356 4453 4528 0
13665 4356 4455 4526 0
13665 4356 4457 4524 0
13665 4356 4459 4522 0
13665 4356 4461 4520 0
13665 4356 4463 4518 0
13665 4356 4465 4516 0
13665 4356 4467 4514 0
13665 4356 4469 4512 0
13665 4356 4471 4510 0
13665 4356 4473 4508 0
13665 4356 4475 4506 0
13665 4356 4477 4504 0
13665 4356 4479 4502 0
13665 4356 4481 4500 0
13665 4356 4483 4498 0
13665 4356 4485 4496 0
13665 4358 4542 0
13665 4358 4440 4540 0
13665 4358 4441 4538 0
13665 4358 4443 4536 0
13665 4358 4445 4534 0
13665 4358 4447 4532 0
13665 4358 4449 4530 0
13665 4358 4451 4528 0
13665 4358 4453 4526 0
13665 4358 4455 4524 0
13665 4358 4457 4522 0
13665 4358 4459 4520 0
13665 4358 4461 4518 0
13665 4358 4463 4516 0
13665 4358 4465 4514 0
13665 4358 4467 4512 0
13665 4358 4469 4510 0
13665 4358 4471 4508 0
13665 4358 4473 4506 0
13665 4358 4475 4504 0
13665 4358 4477 4502 0
13665 4358 4479 4500 0
13665 4358 4481 4498 0
13665 4358 4483 4496 0
13665 4358 4485 4494 0
13665 4360 4540 0
13665 4360 4440 4538 0
13665 4360 4441 4536 0
13665 4360 4443 4534 0
13665 4360 4445 4532 0
13665 4360 4447 4530 0
13665 4360 4449 4528 0
13665 4360 4451 4526 0
13665 4360 4453 4524 0
13665 4360 4455 4522 0
13665 4360 4457 4520 0
13665 4360 4459 4518 0
13665 4360 4461 4516 0
13665 4360 4463 4514 0
13665 4360 4465 4512 0
13665 4360 4467 4510 0
13665 4360 4469 4508 0
13665 4360 4471 4506 0
13665 4360 4473 4504 0
13665 4360 4475 4502 0
13665 4360 4477 4500 0
13665 4360 4479 4498 0
13665 4360 4481 4496 0
13665 4360 4483 4494 0
13665 4360 4485 4492 0
13665 4362 4538 0
13665 4362 4440 4536 0
13665 4362 4441 4534 0
13665 4362 4443 4532 0
13665 4362 4445 4530 0
13665 4362 4447 4528 0
13665 4362 4449 4526 0
13665 4362 4451 4524 0
13665 4362 4453 4522 0
13665 4362 4455 4520 0
13665 4362 4457 4518 0
13665 4362 4459 4516 0
13665 4362 4461 4514 0
13665 4362 4463 4512 0
13665 4362 4465 4510 0
13665 4362 4467 4508 0
13665 4362 4469 4506 0
13665 4362 4471 4504 0
13665 4362 4473 4502 0
13665 4362 4475 4500 0
13665 4362 4477 4498 0
13665 4362 4479 4496 0
13665 4362 4481 4494 0
13665 4362 4483 4492 0
13665 4362 4485 4490 0
13665 4364 4536 0
13665 4364 4440 4534 0
13665 4364 4441 4532 0
13665 4364 4443 4530 0
13665 4364 4445 4528 0
13665 4364 4447 4526 0
13665 4364 4449 4524 0
13665 4364 4451 4522 0
13665 4364 4453 4520 0
13665 4364 4455 4518 0
13665 4364 4457 4516 0
13665 4364 4459 4514 0
13665 4364 4461 4512 0
13665 4364 4463 4510 0
13665 4364 4465 4508 0
13665 4364 4467 4506 0
13665 4364 4469 4504 0
13665 4364 4471 4502 0
13665 4364 4473 4500 0
13665 4364 4475 4498 0
13665 4364 4477 4496 0
13665 4364 4479 4494 0
13665 4364 4481 4492 0
13665 4364 4483 4490 0
13665 4364 4485 4488 0
13665 4366 4534 0
13665 4366 4440 4532 0
13665 4366 4441 4530 0
13665 4366 4443 4528 0
13665 4366 4445 4526 0
13665 4366 4447 4524 0
13665 4366 4449 4522 0
13665 4366 4451 4520 0
13665 4366 4453 4518 0
13665 4366 4455 4516 0
13665 4366 4457 4514 0
13665 4366 4459 4512 0
13665 4366 4461 4510 0
13665 4366 4463 4508 0
13665 4366 4465 4506 0
13665 4366 4467 4504 0
13665 4366 4469 4502 0
13665 4366 4471 4500 0
13665 4366 4473 4498 0
13665 4366 4475 4496 0
13665 4366 4477 4494 0
13665 4366 4479 4492 0
13665 4366 4481 4490 0
13665 4366 4483 4488 0
13665 4366 4485 4487 0
13665 4368 4532 0
13665 4368 4440 4530 0
13665 4368 4441 4528 0
13665 4368 4443 4526 0
13665 4368 4445 4524 0
13665 4368 4447 4522 0
13665 4368 4449 4520 0
13665 4368 4451 4518 0
13665 4368 4453 4516 0
13665 4368 4455 4514 0
13665 4368 4457 4512 0
13665 4368 4459 4510 0
13665 4368 4461 4508 0
13665 4368 4463 4506 0
13665 4368 4465 4504 0
13665 4368 4467 4502 0
13665 4368 4469 4500 0
13665 4368 4471 4498 0
13665 4368 4473 4496 0
13665 4368 4475 4494 0
13665 4368 4477 4492 0
13665 4368 4479 4490 0
13665 4368 4481 4488 0
13665 4368 4483 4487 0
13665 4368 4485 0
13665 4370 4530 0
13665 4370 4440 4528 0
13665 4370 4441 4526 0
13665 4370 4443 4524 0
13665 4370 4445 4522 0
13665 4370 4447 4520 0
13665 4370 4449 4518 0
13665 4370 4451 4516 0
13665 4370 4453 4514 0
13665 4370 4455 4512 0
13665 4370 4457 4510 0
13665 4370 4459 4508 0
13665 4370 4461 4506 0
13665 4370 4463 4504 0
13665 4370 4465 4502 0
13665 4370 4467 4500 0
13665 4370 4469 4498 0
13665 4370 4471 4496 0
13665 4370 4473 4494 0
13665 4370 4475 4492 0
13665 4370 4477 4490 0
13665 4370 4479 4488 0
13665 4370 4481 4487 0
13665 4370 4483 0
13665 4370 4485 0
13665 4372 4528 0
13665 4372 4440 4526 0
13665 4372 4441 4524 0
13665 4372 4443 4522 0
13665 4372 4445 4520 0
13665 4372 4447 4518 0
13665 4372 4449 4516 0
13665 4372 4451 4514 0
13665 4372 4453 4512 0
13665 4372 4455 4510 0
13665 4372 4457 4508 0
13665 4372 4459 4506 0
13665 4372 4461 4504 0
13665 4372 4463 4502 0
13665 4372 4465 4500 0
13665 4372 4467 4498 0
13665 4372 4469 4496 0
13665 4372 4471 4494 0
13665 4372 4473 4492 0
13665 4372 4475 4490 0
13665 4372 4477 4488 0
13665 4372 4479 4487 0
13665 4372 4481 0
13665 4372 4483 0
13665 4372 4485 0
13665 4374 4526 0
13665 4374 4440 4524 0
13665 4374 4441 4522 0
13665 4374 4443 4520 0
13665 4374 4445 4518 0
13665 4374 4447 4516 0
13665 4374 4449 4514 0
13665 4374 4451 4512 0
13665 4374 4453 4510 0
13665 4374 4455 4508 0
13665 4374 4457 4506 0
13665 4374 4459 4504 0
13665 4374 4461 4502 0
13665 4374 4463 4500 0
13665 4374 4465 4498 0
13665 4374 4467 4496 0
13665 4374 4469 4494 0
13665 4374 4471 4492 0
13665 4374 4473 4490 0
13665 4374 4475 4488 0
13665 4374 4477 4487 0
13665 4374 4479 0
13665 4374 4481 0
13665 4374 4483 0
13665 4374 4485 0
13665 4376 4524 0
13665 4376 4440 4522 0
13665 4376 4441 4520 0
13665 4376 4443 4518 0
13665 4376 4445 4516 0
13665 4376 4447 4514 0
13665 4376 4449 4512 0
13665 4376 4451 4510 0
13665 4376 4453 4508 0
13665 4376 4455 4506 0
13665 4376 4457 4504 0
13665 4376 4459 4502 0
13665 4376 4461 4500 0
13665 4376 4463 4498 0
13665 4376 4465 4496 0
13665 4376 4467 4494 0
13665 4376 4469 4492 0
13665 4376 4471 4490 0
13665 4376 4473 4488 0
13665 4376 4475 4487 0
13665 4376 4477 0
13665 4376 4479 0
13665 4376 4481 0
13665 4376 4483 0
13665 4376 4485 0
c (((aux534 + aux537 + aux538)<=36)=tv=SATLiteral(13666))
-13666 4681 4782 0
-13666 4683 4780 0
-13666 4685 4778 0
-13666 4687 4776 0
-13666 4689 4774 0
-13666 4691 4772 0
-13666 4693 4770 0
-13666 4695 4768 0
-13666 4697 4766 0
-13666 4699 4764 0
-13666 4701 4762 0
-13666 4703 4760 0
-13666 4705 4758 0
-13666 4707 4756 0
-13666 4709 4754 0
-13666 4711 4752 0
-13666 4713 4750 0
-13666 4715 4748 0
-13666 4717 4746 0
-13666 4719 4744 0
-13666 4581 4679 4782 0
-13666 4581 4681 4780 0
-13666 4581 4683 4778 0
-13666 4581 4685 4776 0
-13666 4581 4687 4774 0
-13666 4581 4689 4772 0
-13666 4581 4691 4770 0
-13666 4581 4693 4768 0
-13666 4581 4695 4766 0
-13666 4581 4697 4764 0
-13666 4581 4699 4762 0
-13666 4581 4701 4760 0
-13666 4581 4703 4758 0
-13666 4581 4705 4756 0
-13666 4581 4707 4754 0
-13666 4581 4709 4752 0
-13666 4581 4711 4750 0
-13666 4581 4713 4748 0
-13666 4581 4715 4746 0
-13666 4581 4717 4744 0
-13666 4581 4719 4742 0
-13666 4582 4677 4782 0
-13666 4582 4679 4780 0
-13666 4582 4681 4778 0
-13666 4582 4683 4776 0
-13666 4582 4685 4774 0
-13666 4582 4687 4772 0
-13666 4582 4689 4770 0
-13666 4582 4691 4768 0
-13666 4582 4693 4766 0
-13666 4582 4695 4764 0
-13666 4582 4697 4762 0
-13666 4582 4699 4760 0
-13666 4582 4701 4758 0
-13666 4582 4703 4756 0
-13666 4582 4705 4754 0
-13666 4582 4707 4752 0
-13666 4582 4709 4750 0
-13666 4582 4711 4748 0
-13666 4582 4713 4746 0
-13666 4582 4715 4744 0
-13666 4582 4717 4742 0
-13666 4582 4719 4740 0
-13666 4584 4675 4782 0
-13666 4584 4677 4780 0
-13666 4584 4679 4778 0
-13666 4584 4681 4776 0
-13666 4584 4683 4774 0
-13666 4584 4685 4772 0
-13666 4584 4687 4770 0
-13666 4584 4689 4768 0
-13666 4584 4691 4766 0
-13666 4584 4693 4764 0
-13666 4584 4695 4762 0
-13666 4584 4697 4760 0
-13666 4584 4699 4758 0
-13666 4584 4701 4756 0
-13666 4584 4703 4754 0
-13666 4584 4705 4752 0
-13666 4584 4707 4750 0
-13666 4584 4709 4748 0
-13666 4584 4711 4746 0
-13666 4584 4713 4744 0
-13666 4584 4715 4742 0
-13666 4584 4717 4740 0
-13666 4584 4719 4738 0
-13666 4586 4674 4782 0
-13666 4586 4675 4780 0
-13666 4586 4677 4778 0
-13666 4586 4679 4776 0
-13666 4586 4681 4774 0
-13666 4586 4683 4772 0
-13666 4586 4685 4770 0
-13666 4586 4687 4768 0
-13666 4586 4689 4766 0
-13666 4586 4691 4764 0
-13666 4586 4693 4762 0
-13666 4586 4695 4760 0
-13666 4586 4697 4758 0
-13666 4586 4699 4756 0
-13666 4586 4701 4754 0
-13666 4586 4703 4752 0
-13666 4586 4705 4750 0
-13666 4586 4707 4748 0
-13666 4586 4709 4746 0
-13666 4586 4711 4744 0
-13666 4586 4713 4742 0
-13666 4586 4715 4740 0
-13666 4586 4717 4738 0
-13666 4586 4719 4736 0
-13666 4588 4782 0
-13666 4588 4674 4780 0
-13666 4588 4675 4778 0
-13666 4588 4677 4776 0
-13666 4588 4679 4774 0
-13666 4588 4681 4772 0
-13666 4588 4683 4770 0
-13666 4588 4685 4768 0
-13666 4588 4687 4766 0
-13666 4588 4689 4764 0
-13666 4588 4691 4762 0
-13666 4588 4693 4760 0
-13666 4588 4695 4758 0
-13666 4588 4697 4756 0
-13666 4588 4699 4754 0
-13666 4588 4701 4752 0
-13666 4588 4703 4750 0
-13666 4588 4705 4748 0
-13666 4588 4707 4746 0
-13666 4588 4709 4744 0
-13666 4588 4711 4742 0
-13666 4588 4713 4740 0
-13666 4588 4715 4738 0
-13666 4588 4717 4736 0
-13666 4588 4719 4734 0
-13666 4590 4780 0
-13666 4590 4674 4778 0
-13666 4590 4675 4776 0
-13666 4590 4677 4774 0
-13666 4590 4679 4772 0
-13666 4590 4681 4770 0
-13666 4590 4683 4768 0
-13666 4590 4685 4766 0
-13666 4590 4687 4764 0
-13666 4590 4689 4762 0
-13666 4590 4691 4760 0
-13666 4590 4693 4758 0
-13666 4590 4695 4756 0
-13666 4590 4697 4754 0
-13666 4590 4699 4752 0
-13666 4590 4701 4750 0
-13666 4590 4703 4748 0
-13666 4590 4705 4746 0
-13666 4590 4707 4744 0
-13666 4590 4709 4742 0
-13666 4590 4711 4740 0
-13666 4590 4713 4738 0
-13666 4590 4715 4736 0
-13666 4590 4717 4734 0
-13666 4590 4719 4732 0
-13666 4592 4778 0
-13666 4592 4674 4776 0
-13666 4592 4675 4774 0
-13666 4592 4677 4772 0
-13666 4592 4679 4770 0
-13666 4592 4681 4768 0
-13666 4592 4683 4766 0
-13666 4592 4685 4764 0
-13666 4592 4687 4762 0
-13666 4592 4689 4760 0
-13666 4592 4691 4758 0
-13666 4592 4693 4756 0
-13666 4592 4695 4754 0
-13666 4592 4697 4752 0
-13666 4592 4699 4750 0
-13666 4592 4701 4748 0
-13666 4592 4703 4746 0
-13666 4592 4705 4744 0
-13666 4592 4707 4742 0
-13666 4592 4709 4740 0
-13666 4592 4711 4738 0
-13666 4592 4713 4736 0
-13666 4592 4715 4734 0
-13666 4592 4717 4732 0
-13666 4592 4719 4730 0
-13666 4594 4776 0
-13666 4594 4674 4774 0
-13666 4594 4675 4772 0
-13666 4594 4677 4770 0
-13666 4594 4679 4768 0
-13666 4594 4681 4766 0
-13666 4594 4683 4764 0
-13666 4594 4685 4762 0
-13666 4594 4687 4760 0
-13666 4594 4689 4758 0
-13666 4594 4691 4756 0
-13666 4594 4693 4754 0
-13666 4594 4695 4752 0
-13666 4594 4697 4750 0
-13666 4594 4699 4748 0
-13666 4594 4701 4746 0
-13666 4594 4703 4744 0
-13666 4594 4705 4742 0
-13666 4594 4707 4740 0
-13666 4594 4709 4738 0
-13666 4594 4711 4736 0
-13666 4594 4713 4734 0
-13666 4594 4715 4732 0
-13666 4594 4717 4730 0
-13666 4594 4719 4728 0
-13666 4596 4774 0
-13666 4596 4674 4772 0
-13666 4596 4675 4770 0
-13666 4596 4677 4768 0
-13666 4596 4679 4766 0
-13666 4596 4681 4764 0
-13666 4596 4683 4762 0
-13666 4596 4685 4760 0
-13666 4596 4687 4758 0
-13666 4596 4689 4756 0
-13666 4596 4691 4754 0
-13666 4596 4693 4752 0
-13666 4596 4695 4750 0
-13666 4596 4697 4748 0
-13666 4596 4699 4746 0
-13666 4596 4701 4744 0
-13666 4596 4703 4742 0
-13666 4596 4705 4740 0
-13666 4596 4707 4738 0
-13666 4596 4709 4736 0
-13666 4596 4711 4734 0
-13666 4596 4713 4732 0
-13666 4596 4715 4730 0
-13666 4596 4717 4728 0
-13666 4596 4719 4726 0
-13666 4598 4772 0
-13666 4598 4674 4770 0
-13666 4598 4675 4768 0
-13666 4598 4677 4766 0
-13666 4598 4679 4764 0
-13666 4598 4681 4762 0
-13666 4598 4683 4760 0
-13666 4598 4685 4758 0
-13666 4598 4687 4756 0
-13666 4598 4689 4754 0
-13666 4598 4691 4752 0
-13666 4598 4693 4750 0
-13666 4598 4695 4748 0
-13666 4598 4697 4746 0
-13666 4598 4699 4744 0
-13666 4598 4701 4742 0
-13666 4598 4703 4740 0
-13666 4598 4705 4738 0
-13666 4598 4707 4736 0
-13666 4598 4709 4734 0
-13666 4598 4711 4732 0
-13666 4598 4713 4730 0
-13666 4598 4715 4728 0
-13666 4598 4717 4726 0
-13666 4598 4719 4724 0
-13666 4600 4770 0
-13666 4600 4674 4768 0
-13666 4600 4675 4766 0
-13666 4600 4677 4764 0
-13666 4600 4679 4762 0
-13666 4600 4681 4760 0
-13666 4600 4683 4758 0
-13666 4600 4685 4756 0
-13666 4600 4687 4754 0
-13666 4600 4689 4752 0
-13666 4600 4691 4750 0
-13666 4600 4693 4748 0
-13666 4600 4695 4746 0
-13666 4600 4697 4744 0
-13666 4600 4699 4742 0
-13666 4600 4701 4740 0
-13666 4600 4703 4738 0
-13666 4600 4705 4736 0
-13666 4600 4707 4734 0
-13666 4600 4709 4732 0
-13666 4600 4711 4730 0
-13666 4600 4713 4728 0
-13666 4600 4715 4726 0
-13666 4600 4717 4724 0
-13666 4600 4719 4722 0
-13666 4602 4768 0
-13666 4602 4674 4766 0
-13666 4602 4675 4764 0
-13666 4602 4677 4762 0
-13666 4602 4679 4760 0
-13666 4602 4681 4758 0
-13666 4602 4683 4756 0
-13666 4602 4685 4754 0
-13666 4602 4687 4752 0
-13666 4602 4689 4750 0
-13666 4602 4691 4748 0
-13666 4602 4693 4746 0
-13666 4602 4695 4744 0
-13666 4602 4697 4742 0
-13666 4602 4699 4740 0
-13666 4602 4701 4738 0
-13666 4602 4703 4736 0
-13666 4602 4705 4734 0
-13666 4602 4707 4732 0
-13666 4602 4709 4730 0
-13666 4602 4711 4728 0
-13666 4602 4713 4726 0
-13666 4602 4715 4724 0
-13666 4602 4717 4722 0
-13666 4602 4719 4721 0
-13666 4604 4766 0
-13666 4604 4674 4764 0
-13666 4604 4675 4762 0
-13666 4604 4677 4760 0
-13666 4604 4679 4758 0
-13666 4604 4681 4756 0
-13666 4604 4683 4754 0
-13666 4604 4685 4752 0
-13666 4604 4687 4750 0
-13666 4604 4689 4748 0
-13666 4604 4691 4746 0
-13666 4604 4693 4744 0
-13666 4604 4695 4742 0
-13666 4604 4697 4740 0
-13666 4604 4699 4738 0
-13666 4604 4701 4736 0
-13666 4604 4703 4734 0
-13666 4604 4705 4732 0
-13666 4604 4707 4730 0
-13666 4604 4709 4728 0
-13666 4604 4711 4726 0
-13666 4604 4713 4724 0
-13666 4604 4715 4722 0
-13666 4604 4717 4721 0
-13666 4604 4719 0
-13666 4606 4764 0
-13666 4606 4674 4762 0
-13666 4606 4675 4760 0
-13666 4606 4677 4758 0
-13666 4606 4679 4756 0
-13666 4606 4681 4754 0
-13666 4606 4683 4752 0
-13666 4606 4685 4750 0
-13666 4606 4687 4748 0
-13666 4606 4689 4746 0
-13666 4606 4691 4744 0
-13666 4606 4693 4742 0
-13666 4606 4695 4740 0
-13666 4606 4697 4738 0
-13666 4606 4699 4736 0
-13666 4606 4701 4734 0
-13666 4606 4703 4732 0
-13666 4606 4705 4730 0
-13666 4606 4707 4728 0
-13666 4606 4709 4726 0
-13666 4606 4711 4724 0
-13666 4606 4713 4722 0
-13666 4606 4715 4721 0
-13666 4606 4717 0
-13666 4606 4719 0
-13666 4608 4762 0
-13666 4608 4674 4760 0
-13666 4608 4675 4758 0
-13666 4608 4677 4756 0
-13666 4608 4679 4754 0
-13666 4608 4681 4752 0
-13666 4608 4683 4750 0
-13666 4608 4685 4748 0
-13666 4608 4687 4746 0
-13666 4608 4689 4744 0
-13666 4608 4691 4742 0
-13666 4608 4693 4740 0
-13666 4608 4695 4738 0
-13666 4608 4697 4736 0
-13666 4608 4699 4734 0
-13666 4608 4701 4732 0
-13666 4608 4703 4730 0
-13666 4608 4705 4728 0
-13666 4608 4707 4726 0
-13666 4608 4709 4724 0
-13666 4608 4711 4722 0
-13666 4608 4713 4721 0
-13666 4608 4715 0
-13666 4608 4717 0
-13666 4608 4719 0
-13666 4610 4760 0
-13666 4610 4674 4758 0
-13666 4610 4675 4756 0
-13666 4610 4677 4754 0
-13666 4610 4679 4752 0
-13666 4610 4681 4750 0
-13666 4610 4683 4748 0
-13666 4610 4685 4746 0
-13666 4610 4687 4744 0
-13666 4610 4689 4742 0
-13666 4610 4691 4740 0
-13666 4610 4693 4738 0
-13666 4610 4695 4736 0
-13666 4610 4697 4734 0
-13666 4610 4699 4732 0
-13666 4610 4701 4730 0
-13666 4610 4703 4728 0
-13666 4610 4705 4726 0
-13666 4610 4707 4724 0
-13666 4610 4709 4722 0
-13666 4610 4711 4721 0
-13666 4610 4713 0
-13666 4610 4715 0
-13666 4610 4717 0
-13666 4610 4719 0
13666 -4713 -4721 0
13666 -4711 -4722 0
13666 -4709 -4724 0
13666 -4707 -4726 0
13666 -4705 -4728 0
13666 -4703 -4730 0
13666 -4701 -4732 0
13666 -4699 -4734 0
13666 -4697 -4736 0
13666 -4695 -4738 0
13666 -4693 -4740 0
13666 -4691 -4742 0
13666 -4689 -4744 0
13666 -4687 -4746 0
13666 -4685 -4748 0
13666 -4683 -4750 0
13666 -4681 -4752 0
13666 -4679 -4754 0
13666 -4677 -4756 0
13666 -4675 -4758 0
13666 -4674 -4760 0
13666 -4610 -4715 -4721 0
13666 -4610 -4713 -4722 0
13666 -4610 -4711 -4724 0
13666 -4610 -4709 -4726 0
13666 -4610 -4707 -4728 0
13666 -4610 -4705 -4730 0
13666 -4610 -4703 -4732 0
13666 -4610 -4701 -4734 0
13666 -4610 -4699 -4736 0
13666 -4610 -4697 -4738 0
13666 -4610 -4695 -4740 0
13666 -4610 -4693 -4742 0
13666 -4610 -4691 -4744 0
13666 -4610 -4689 -4746 0
13666 -4610 -4687 -4748 0
13666 -4610 -4685 -4750 0
13666 -4610 -4683 -4752 0
13666 -4610 -4681 -4754 0
13666 -4610 -4679 -4756 0
13666 -4610 -4677 -4758 0
13666 -4610 -4675 -4760 0
13666 -4610 -4674 -4762 0
13666 -4608 -4717 -4721 0
13666 -4608 -4715 -4722 0
13666 -4608 -4713 -4724 0
13666 -4608 -4711 -4726 0
13666 -4608 -4709 -4728 0
13666 -4608 -4707 -4730 0
13666 -4608 -4705 -4732 0
13666 -4608 -4703 -4734 0
13666 -4608 -4701 -4736 0
13666 -4608 -4699 -4738 0
13666 -4608 -4697 -4740 0
13666 -4608 -4695 -4742 0
13666 -4608 -4693 -4744 0
13666 -4608 -4691 -4746 0
13666 -4608 -4689 -4748 0
13666 -4608 -4687 -4750 0
13666 -4608 -4685 -4752 0
13666 -4608 -4683 -4754 0
13666 -4608 -4681 -4756 0
13666 -4608 -4679 -4758 0
13666 -4608 -4677 -4760 0
13666 -4608 -4675 -4762 0
13666 -4608 -4674 -4764 0
13666 -4606 -4719 -4721 0
13666 -4606 -4717 -4722 0
13666 -4606 -4715 -4724 0
13666 -4606 -4713 -4726 0
13666 -4606 -4711 -4728 0
13666 -4606 -4709 -4730 0
13666 -4606 -4707 -4732 0
13666 -4606 -4705 -4734 0
13666 -4606 -4703 -4736 0
13666 -4606 -4701 -4738 0
13666 -4606 -4699 -4740 0
13666 -4606 -4697 -4742 0
13666 -4606 -4695 -4744 0
13666 -4606 -4693 -4746 0
13666 -4606 -4691 -4748 0
13666 -4606 -4689 -4750 0
13666 -4606 -4687 -4752 0
13666 -4606 -4685 -4754 0
13666 -4606 -4683 -4756 0
13666 -4606 -4681 -4758 0
13666 -4606 -4679 -4760 0
13666 -4606 -4677 -4762 0
13666 -4606 -4675 -4764 0
13666 -4606 -4674 -4766 0
13666 -4604 -4721 0
13666 -4604 -4719 -4722 0
13666 -4604 -4717 -4724 0
13666 -4604 -4715 -4726 0
13666 -4604 -4713 -4728 0
13666 -4604 -4711 -4730 0
13666 -4604 -4709 -4732 0
13666 -4604 -4707 -4734 0
13666 -4604 -4705 -4736 0
13666 -4604 -4703 -4738 0
13666 -4604 -4701 -4740 0
13666 -4604 -4699 -4742 0
13666 -4604 -4697 -4744 0
13666 -4604 -4695 -4746 0
13666 -4604 -4693 -4748 0
13666 -4604 -4691 -4750 0
13666 -4604 -4689 -4752 0
13666 -4604 -4687 -4754 0
13666 -4604 -4685 -4756 0
13666 -4604 -4683 -4758 0
13666 -4604 -4681 -4760 0
13666 -4604 -4679 -4762 0
13666 -4604 -4677 -4764 0
13666 -4604 -4675 -4766 0
13666 -4604 -4674 -4768 0
13666 -4602 -4722 0
13666 -4602 -4719 -4724 0
13666 -4602 -4717 -4726 0
13666 -4602 -4715 -4728 0
13666 -4602 -4713 -4730 0
13666 -4602 -4711 -4732 0
13666 -4602 -4709 -4734 0
13666 -4602 -4707 -4736 0
13666 -4602 -4705 -4738 0
13666 -4602 -4703 -4740 0
13666 -4602 -4701 -4742 0
13666 -4602 -4699 -4744 0
13666 -4602 -4697 -4746 0
13666 -4602 -4695 -4748 0
13666 -4602 -4693 -4750 0
13666 -4602 -4691 -4752 0
13666 -4602 -4689 -4754 0
13666 -4602 -4687 -4756 0
13666 -4602 -4685 -4758 0
13666 -4602 -4683 -4760 0
13666 -4602 -4681 -4762 0
13666 -4602 -4679 -4764 0
13666 -4602 -4677 -4766 0
13666 -4602 -4675 -4768 0
13666 -4602 -4674 -4770 0
13666 -4600 -4724 0
13666 -4600 -4719 -4726 0
13666 -4600 -4717 -4728 0
13666 -4600 -4715 -4730 0
13666 -4600 -4713 -4732 0
13666 -4600 -4711 -4734 0
13666 -4600 -4709 -4736 0
13666 -4600 -4707 -4738 0
13666 -4600 -4705 -4740 0
13666 -4600 -4703 -4742 0
13666 -4600 -4701 -4744 0
13666 -4600 -4699 -4746 0
13666 -4600 -4697 -4748 0
13666 -4600 -4695 -4750 0
13666 -4600 -4693 -4752 0
13666 -4600 -4691 -4754 0
13666 -4600 -4689 -4756 0
13666 -4600 -4687 -4758 0
13666 -4600 -4685 -4760 0
13666 -4600 -4683 -4762 0
13666 -4600 -4681 -4764 0
13666 -4600 -4679 -4766 0
13666 -4600 -4677 -4768 0
13666 -4600 -4675 -4770 0
13666 -4600 -4674 -4772 0
13666 -4598 -4726 0
13666 -4598 -4719 -4728 0
13666 -4598 -4717 -4730 0
13666 -4598 -4715 -4732 0
13666 -4598 -4713 -4734 0
13666 -4598 -4711 -4736 0
13666 -4598 -4709 -4738 0
13666 -4598 -4707 -4740 0
13666 -4598 -4705 -4742 0
13666 -4598 -4703 -4744 0
13666 -4598 -4701 -4746 0
13666 -4598 -4699 -4748 0
13666 -4598 -4697 -4750 0
13666 -4598 -4695 -4752 0
13666 -4598 -4693 -4754 0
13666 -4598 -4691 -4756 0
13666 -4598 -4689 -4758 0
13666 -4598 -4687 -4760 0
13666 -4598 -4685 -4762 0
13666 -4598 -4683 -4764 0
13666 -4598 -4681 -4766 0
13666 -4598 -4679 -4768 0
13666 -4598 -4677 -4770 0
13666 -4598 -4675 -4772 0
13666 -4598 -4674 -4774 0
13666 -4596 -4728 0
13666 -4596 -4719 -4730 0
13666 -4596 -4717 -4732 0
13666 -4596 -4715 -4734 0
13666 -4596 -4713 -4736 0
13666 -4596 -4711 -4738 0
13666 -4596 -4709 -4740 0
13666 -4596 -4707 -4742 0
13666 -4596 -4705 -4744 0
13666 -4596 -4703 -4746 0
13666 -4596 -4701 -4748 0
13666 -4596 -4699 -4750 0
13666 -4596 -4697 -4752 0
13666 -4596 -4695 -4754 0
13666 -4596 -4693 -4756 0
13666 -4596 -4691 -4758 0
13666 -4596 -4689 -4760 0
13666 -4596 -4687 -4762 0
13666 -4596 -4685 -4764 0
13666 -4596 -4683 -4766 0
13666 -4596 -4681 -4768 0
13666 -4596 -4679 -4770 0
13666 -4596 -4677 -4772 0
13666 -4596 -4675 -4774 0
13666 -4596 -4674 -4776 0
13666 -4594 -4730 0
13666 -4594 -4719 -4732 0
13666 -4594 -4717 -4734 0
13666 -4594 -4715 -4736 0
13666 -4594 -4713 -4738 0
13666 -4594 -4711 -4740 0
13666 -4594 -4709 -4742 0
13666 -4594 -4707 -4744 0
13666 -4594 -4705 -4746 0
13666 -4594 -4703 -4748 0
13666 -4594 -4701 -4750 0
13666 -4594 -4699 -4752 0
13666 -4594 -4697 -4754 0
13666 -4594 -4695 -4756 0
13666 -4594 -4693 -4758 0
13666 -4594 -4691 -4760 0
13666 -4594 -4689 -4762 0
13666 -4594 -4687 -4764 0
13666 -4594 -4685 -4766 0
13666 -4594 -4683 -4768 0
13666 -4594 -4681 -4770 0
13666 -4594 -4679 -4772 0
13666 -4594 -4677 -4774 0
13666 -4594 -4675 -4776 0
13666 -4594 -4674 -4778 0
13666 -4592 -4732 0
13666 -4592 -4719 -4734 0
13666 -4592 -4717 -4736 0
13666 -4592 -4715 -4738 0
13666 -4592 -4713 -4740 0
13666 -4592 -4711 -4742 0
13666 -4592 -4709 -4744 0
13666 -4592 -4707 -4746 0
13666 -4592 -4705 -4748 0
13666 -4592 -4703 -4750 0
13666 -4592 -4701 -4752 0
13666 -4592 -4699 -4754 0
13666 -4592 -4697 -4756 0
13666 -4592 -4695 -4758 0
13666 -4592 -4693 -4760 0
13666 -4592 -4691 -4762 0
13666 -4592 -4689 -4764 0
13666 -4592 -4687 -4766 0
13666 -4592 -4685 -4768 0
13666 -4592 -4683 -4770 0
13666 -4592 -4681 -4772 0
13666 -4592 -4679 -4774 0
13666 -4592 -4677 -4776 0
13666 -4592 -4675 -4778 0
13666 -4592 -4674 -4780 0
13666 -4590 -4734 0
13666 -4590 -4719 -4736 0
13666 -4590 -4717 -4738 0
13666 -4590 -4715 -4740 0
13666 -4590 -4713 -4742 0
13666 -4590 -4711 -4744 0
13666 -4590 -4709 -4746 0
13666 -4590 -4707 -4748 0
13666 -4590 -4705 -4750 0
13666 -4590 -4703 -4752 0
13666 -4590 -4701 -4754 0
13666 -4590 -4699 -4756 0
13666 -4590 -4697 -4758 0
13666 -4590 -4695 -4760 0
13666 -4590 -4693 -4762 0
13666 -4590 -4691 -4764 0
13666 -4590 -4689 -4766 0
13666 -4590 -4687 -4768 0
13666 -4590 -4685 -4770 0
13666 -4590 -4683 -4772 0
13666 -4590 -4681 -4774 0
13666 -4590 -4679 -4776 0
13666 -4590 -4677 -4778 0
13666 -4590 -4675 -4780 0
13666 -4590 -4674 -4782 0
13666 -4588 -4736 0
13666 -4588 -4719 -4738 0
13666 -4588 -4717 -4740 0
13666 -4588 -4715 -4742 0
13666 -4588 -4713 -4744 0
13666 -4588 -4711 -4746 0
13666 -4588 -4709 -4748 0
13666 -4588 -4707 -4750 0
13666 -4588 -4705 -4752 0
13666 -4588 -4703 -4754 0
13666 -4588 -4701 -4756 0
13666 -4588 -4699 -4758 0
13666 -4588 -4697 -4760 0
13666 -4588 -4695 -4762 0
13666 -4588 -4693 -4764 0
13666 -4588 -4691 -4766 0
13666 -4588 -4689 -4768 0
13666 -4588 -4687 -4770 0
13666 -4588 -4685 -4772 0
13666 -4588 -4683 -4774 0
13666 -4588 -4681 -4776 0
13666 -4588 -4679 -4778 0
13666 -4588 -4677 -4780 0
13666 -4588 -4675 -4782 0
13666 -4588 -4674 0
13666 -4586 -4738 0
13666 -4586 -4719 -4740 0
13666 -4586 -4717 -4742 0
13666 -4586 -4715 -4744 0
13666 -4586 -4713 -4746 0
13666 -4586 -4711 -4748 0
13666 -4586 -4709 -4750 0
13666 -4586 -4707 -4752 0
13666 -4586 -4705 -4754 0
13666 -4586 -4703 -4756 0
13666 -4586 -4701 -4758 0
13666 -4586 -4699 -4760 0
13666 -4586 -4697 -4762 0
13666 -4586 -4695 -4764 0
13666 -4586 -4693 -4766 0
13666 -4586 -4691 -4768 0
13666 -4586 -4689 -4770 0
13666 -4586 -4687 -4772 0
13666 -4586 -4685 -4774 0
13666 -4586 -4683 -4776 0
13666 -4586 -4681 -4778 0
13666 -4586 -4679 -4780 0
13666 -4586 -4677 -4782 0
13666 -4586 -4675 0
13666 -4586 -4674 0
13666 -4584 -4740 0
13666 -4584 -4719 -4742 0
13666 -4584 -4717 -4744 0
13666 -4584 -4715 -4746 0
13666 -4584 -4713 -4748 0
13666 -4584 -4711 -4750 0
13666 -4584 -4709 -4752 0
13666 -4584 -4707 -4754 0
13666 -4584 -4705 -4756 0
13666 -4584 -4703 -4758 0
13666 -4584 -4701 -4760 0
13666 -4584 -4699 -4762 0
13666 -4584 -4697 -4764 0
13666 -4584 -4695 -4766 0
13666 -4584 -4693 -4768 0
13666 -4584 -4691 -4770 0
13666 -4584 -4689 -4772 0
13666 -4584 -4687 -4774 0
13666 -4584 -4685 -4776 0
13666 -4584 -4683 -4778 0
13666 -4584 -4681 -4780 0
13666 -4584 -4679 -4782 0
13666 -4584 -4677 0
13666 -4584 -4675 0
13666 -4584 -4674 0
13666 -4582 -4742 0
13666 -4582 -4719 -4744 0
13666 -4582 -4717 -4746 0
13666 -4582 -4715 -4748 0
13666 -4582 -4713 -4750 0
13666 -4582 -4711 -4752 0
13666 -4582 -4709 -4754 0
13666 -4582 -4707 -4756 0
13666 -4582 -4705 -4758 0
13666 -4582 -4703 -4760 0
13666 -4582 -4701 -4762 0
13666 -4582 -4699 -4764 0
13666 -4582 -4697 -4766 0
13666 -4582 -4695 -4768 0
13666 -4582 -4693 -4770 0
13666 -4582 -4691 -4772 0
13666 -4582 -4689 -4774 0
13666 -4582 -4687 -4776 0
13666 -4582 -4685 -4778 0
13666 -4582 -4683 -4780 0
13666 -4582 -4681 -4782 0
13666 -4582 -4679 0
13666 -4582 -4677 0
13666 -4582 -4675 0
13666 -4582 -4674 0
13666 -4581 -4744 0
13666 -4581 -4719 -4746 0
13666 -4581 -4717 -4748 0
13666 -4581 -4715 -4750 0
13666 -4581 -4713 -4752 0
13666 -4581 -4711 -4754 0
13666 -4581 -4709 -4756 0
13666 -4581 -4707 -4758 0
13666 -4581 -4705 -4760 0
13666 -4581 -4703 -4762 0
13666 -4581 -4701 -4764 0
13666 -4581 -4699 -4766 0
13666 -4581 -4697 -4768 0
13666 -4581 -4695 -4770 0
13666 -4581 -4693 -4772 0
13666 -4581 -4691 -4774 0
13666 -4581 -4689 -4776 0
13666 -4581 -4687 -4778 0
13666 -4581 -4685 -4780 0
13666 -4581 -4683 -4782 0
13666 -4581 -4681 0
13666 -4581 -4679 0
13666 -4581 -4677 0
13666 -4581 -4675 0
13666 -4581 -4674 0
c ((36<=(aux534 + aux537 + aux538))=tv=SATLiteral(13667))
-13667 -4711 -4721 0
-13667 -4709 -4722 0
-13667 -4707 -4724 0
-13667 -4705 -4726 0
-13667 -4703 -4728 0
-13667 -4701 -4730 0
-13667 -4699 -4732 0
-13667 -4697 -4734 0
-13667 -4695 -4736 0
-13667 -4693 -4738 0
-13667 -4691 -4740 0
-13667 -4689 -4742 0
-13667 -4687 -4744 0
-13667 -4685 -4746 0
-13667 -4683 -4748 0
-13667 -4681 -4750 0
-13667 -4679 -4752 0
-13667 -4677 -4754 0
-13667 -4675 -4756 0
-13667 -4674 -4758 0
-13667 -4610 -4713 -4721 0
-13667 -4610 -4711 -4722 0
-13667 -4610 -4709 -4724 0
-13667 -4610 -4707 -4726 0
-13667 -4610 -4705 -4728 0
-13667 -4610 -4703 -4730 0
-13667 -4610 -4701 -4732 0
-13667 -4610 -4699 -4734 0
-13667 -4610 -4697 -4736 0
-13667 -4610 -4695 -4738 0
-13667 -4610 -4693 -4740 0
-13667 -4610 -4691 -4742 0
-13667 -4610 -4689 -4744 0
-13667 -4610 -4687 -4746 0
-13667 -4610 -4685 -4748 0
-13667 -4610 -4683 -4750 0
-13667 -4610 -4681 -4752 0
-13667 -4610 -4679 -4754 0
-13667 -4610 -4677 -4756 0
-13667 -4610 -4675 -4758 0
-13667 -4610 -4674 -4760 0
-13667 -4608 -4715 -4721 0
-13667 -4608 -4713 -4722 0
-13667 -4608 -4711 -4724 0
-13667 -4608 -4709 -4726 0
-13667 -4608 -4707 -4728 0
-13667 -4608 -4705 -4730 0
-13667 -4608 -4703 -4732 0
-13667 -4608 -4701 -4734 0
-13667 -4608 -4699 -4736 0
-13667 -4608 -4697 -4738 0
-13667 -4608 -4695 -4740 0
-13667 -4608 -4693 -4742 0
-13667 -4608 -4691 -4744 0
-13667 -4608 -4689 -4746 0
-13667 -4608 -4687 -4748 0
-13667 -4608 -4685 -4750 0
-13667 -4608 -4683 -4752 0
-13667 -4608 -4681 -4754 0
-13667 -4608 -4679 -4756 0
-13667 -4608 -4677 -4758 0
-13667 -4608 -4675 -4760 0
-13667 -4608 -4674 -4762 0
-13667 -4606 -4717 -4721 0
-13667 -4606 -4715 -4722 0
-13667 -4606 -4713 -4724 0
-13667 -4606 -4711 -4726 0
-13667 -4606 -4709 -4728 0
-13667 -4606 -4707 -4730 0
-13667 -4606 -4705 -4732 0
-13667 -4606 -4703 -4734 0
-13667 -4606 -4701 -4736 0
-13667 -4606 -4699 -4738 0
-13667 -4606 -4697 -4740 0
-13667 -4606 -4695 -4742 0
-13667 -4606 -4693 -4744 0
-13667 -4606 -4691 -4746 0
-13667 -4606 -4689 -4748 0
-13667 -4606 -4687 -4750 0
-13667 -4606 -4685 -4752 0
-13667 -4606 -4683 -4754 0
-13667 -4606 -4681 -4756 0
-13667 -4606 -4679 -4758 0
-13667 -4606 -4677 -4760 0
-13667 -4606 -4675 -4762 0
-13667 -4606 -4674 -4764 0
-13667 -4604 -4719 -4721 0
-13667 -4604 -4717 -4722 0
-13667 -4604 -4715 -4724 0
-13667 -4604 -4713 -4726 0
-13667 -4604 -4711 -4728 0
-13667 -4604 -4709 -4730 0
-13667 -4604 -4707 -4732 0
-13667 -4604 -4705 -4734 0
-13667 -4604 -4703 -4736 0
-13667 -4604 -4701 -4738 0
-13667 -4604 -4699 -4740 0
-13667 -4604 -4697 -4742 0
-13667 -4604 -4695 -4744 0
-13667 -4604 -4693 -4746 0
-13667 -4604 -4691 -4748 0
-13667 -4604 -4689 -4750 0
-13667 -4604 -4687 -4752 0
-13667 -4604 -4685 -4754 0
-13667 -4604 -4683 -4756 0
-13667 -4604 -4681 -4758 0
-13667 -4604 -4679 -4760 0
-13667 -4604 -4677 -4762 0
-13667 -4604 -4675 -4764 0
-13667 -4604 -4674 -4766 0
-13667 -4602 -4721 0
-13667 -4602 -4719 -4722 0
-13667 -4602 -4717 -4724 0
-13667 -4602 -4715 -4726 0
-13667 -4602 -4713 -4728 0
-13667 -4602 -4711 -4730 0
-13667 -4602 -4709 -4732 0
-13667 -4602 -4707 -4734 0
-13667 -4602 -4705 -4736 0
-13667 -4602 -4703 -4738 0
-13667 -4602 -4701 -4740 0
-13667 -4602 -4699 -4742 0
-13667 -4602 -4697 -4744 0
-13667 -4602 -4695 -4746 0
-13667 -4602 -4693 -4748 0
-13667 -4602 -4691 -4750 0
-13667 -4602 -4689 -4752 0
-13667 -4602 -4687 -4754 0
-13667 -4602 -4685 -4756 0
-13667 -4602 -4683 -4758 0
-13667 -4602 -4681 -4760 0
-13667 -4602 -4679 -4762 0
-13667 -4602 -4677 -4764 0
-13667 -4602 -4675 -4766 0
-13667 -4602 -4674 -4768 0
-13667 -4600 -4722 0
-13667 -4600 -4719 -4724 0
-13667 -4600 -4717 -4726 0
-13667 -4600 -4715 -4728 0
-13667 -4600 -4713 -4730 0
-13667 -4600 -4711 -4732 0
-13667 -4600 -4709 -4734 0
-13667 -4600 -4707 -4736 0
-13667 -4600 -4705 -4738 0
-13667 -4600 -4703 -4740 0
-13667 -4600 -4701 -4742 0
-13667 -4600 -4699 -4744 0
-13667 -4600 -4697 -4746 0
-13667 -4600 -4695 -4748 0
-13667 -4600 -4693 -4750 0
-13667 -4600 -4691 -4752 0
-13667 -4600 -4689 -4754 0
-13667 -4600 -4687 -4756 0
-13667 -4600 -4685 -4758 0
-13667 -4600 -4683 -4760 0
-13667 -4600 -4681 -4762 0
-13667 -4600 -4679 -4764 0
-13667 -4600 -4677 -4766 0
-13667 -4600 -4675 -4768 0
-13667 -4600 -4674 -4770 0
-13667 -4598 -4724 0
-13667 -4598 -4719 -4726 0
-13667 -4598 -4717 -4728 0
-13667 -4598 -4715 -4730 0
-13667 -4598 -4713 -4732 0
-13667 -4598 -4711 -4734 0
-13667 -4598 -4709 -4736 0
-13667 -4598 -4707 -4738 0
-13667 -4598 -4705 -4740 0
-13667 -4598 -4703 -4742 0
-13667 -4598 -4701 -4744 0
-13667 -4598 -4699 -4746 0
-13667 -4598 -4697 -4748 0
-13667 -4598 -4695 -4750 0
-13667 -4598 -4693 -4752 0
-13667 -4598 -4691 -4754 0
-13667 -4598 -4689 -4756 0
-13667 -4598 -4687 -4758 0
-13667 -4598 -4685 -4760 0
-13667 -4598 -4683 -4762 0
-13667 -4598 -4681 -4764 0
-13667 -4598 -4679 -4766 0
-13667 -4598 -4677 -4768 0
-13667 -4598 -4675 -4770 0
-13667 -4598 -4674 -4772 0
-13667 -4596 -4726 0
-13667 -4596 -4719 -4728 0
-13667 -4596 -4717 -4730 0
-13667 -4596 -4715 -4732 0
-13667 -4596 -4713 -4734 0
-13667 -4596 -4711 -4736 0
-13667 -4596 -4709 -4738 0
-13667 -4596 -4707 -4740 0
-13667 -4596 -4705 -4742 0
-13667 -4596 -4703 -4744 0
-13667 -4596 -4701 -4746 0
-13667 -4596 -4699 -4748 0
-13667 -4596 -4697 -4750 0
-13667 -4596 -4695 -4752 0
-13667 -4596 -4693 -4754 0
-13667 -4596 -4691 -4756 0
-13667 -4596 -4689 -4758 0
-13667 -4596 -4687 -4760 0
-13667 -4596 -4685 -4762 0
-13667 -4596 -4683 -4764 0
-13667 -4596 -4681 -4766 0
-13667 -4596 -4679 -4768 0
-13667 -4596 -4677 -4770 0
-13667 -4596 -4675 -4772 0
-13667 -4596 -4674 -4774 0
-13667 -4594 -4728 0
-13667 -4594 -4719 -4730 0
-13667 -4594 -4717 -4732 0
-13667 -4594 -4715 -4734 0
-13667 -4594 -4713 -4736 0
-13667 -4594 -4711 -4738 0
-13667 -4594 -4709 -4740 0
-13667 -4594 -4707 -4742 0
-13667 -4594 -4705 -4744 0
-13667 -4594 -4703 -4746 0
-13667 -4594 -4701 -4748 0
-13667 -4594 -4699 -4750 0
-13667 -4594 -4697 -4752 0
-13667 -4594 -4695 -4754 0
-13667 -4594 -4693 -4756 0
-13667 -4594 -4691 -4758 0
-13667 -4594 -4689 -4760 0
-13667 -4594 -4687 -4762 0
-13667 -4594 -4685 -4764 0
-13667 -4594 -4683 -4766 0
-13667 -4594 -4681 -4768 0
-13667 -4594 -4679 -4770 0
-13667 -4594 -4677 -4772 0
-13667 -4594 -4675 -4774 0
-13667 -4594 -4674 -4776 0
-13667 -4592 -4730 0
-13667 -4592 -4719 -4732 0
-13667 -4592 -4717 -4734 0
-13667 -4592 -4715 -4736 0
-13667 -4592 -4713 -4738 0
-13667 -4592 -4711 -4740 0
-13667 -4592 -4709 -4742 0
-13667 -4592 -4707 -4744 0
-13667 -4592 -4705 -4746 0
-13667 -4592 -4703 -4748 0
-13667 -4592 -4701 -4750 0
-13667 -4592 -4699 -4752 0
-13667 -4592 -4697 -4754 0
-13667 -4592 -4695 -4756 0
-13667 -4592 -4693 -4758 0
-13667 -4592 -4691 -4760 0
-13667 -4592 -4689 -4762 0
-13667 -4592 -4687 -4764 0
-13667 -4592 -4685 -4766 0
-13667 -4592 -4683 -4768 0
-13667 -4592 -4681 -4770 0
-13667 -4592 -4679 -4772 0
-13667 -4592 -4677 -4774 0
-13667 -4592 -4675 -4776 0
-13667 -4592 -4674 -4778 0
-13667 -4590 -4732 0
-13667 -4590 -4719 -4734 0
-13667 -4590 -4717 -4736 0
-13667 -4590 -4715 -4738 0
-13667 -4590 -4713 -4740 0
-13667 -4590 -4711 -4742 0
-13667 -4590 -4709 -4744 0
-13667 -4590 -4707 -4746 0
-13667 -4590 -4705 -4748 0
-13667 -4590 -4703 -4750 0
-13667 -4590 -4701 -4752 0
-13667 -4590 -4699 -4754 0
-13667 -4590 -4697 -4756 0
-13667 -4590 -4695 -4758 0
-13667 -4590 -4693 -4760 0
-13667 -4590 -4691 -4762 0
-13667 -4590 -4689 -4764 0
-13667 -4590 -4687 -4766 0
-13667 -4590 -4685 -4768 0
-13667 -4590 -4683 -4770 0
-13667 -4590 -4681 -4772 0
-13667 -4590 -4679 -4774 0
-13667 -4590 -4677 -4776 0
-13667 -4590 -4675 -4778 0
-13667 -4590 -4674 -4780 0
-13667 -4588 -4734 0
-13667 -4588 -4719 -4736 0
-13667 -4588 -4717 -4738 0
-13667 -4588 -4715 -4740 0
-13667 -4588 -4713 -4742 0
-13667 -4588 -4711 -4744 0
-13667 -4588 -4709 -4746 0
-13667 -4588 -4707 -4748 0
-13667 -4588 -4705 -4750 0
-13667 -4588 -4703 -4752 0
-13667 -4588 -4701 -4754 0
-13667 -4588 -4699 -4756 0
-13667 -4588 -4697 -4758 0
-13667 -4588 -4695 -4760 0
-13667 -4588 -4693 -4762 0
-13667 -4588 -4691 -4764 0
-13667 -4588 -4689 -4766 0
-13667 -4588 -4687 -4768 0
-13667 -4588 -4685 -4770 0
-13667 -4588 -4683 -4772 0
-13667 -4588 -4681 -4774 0
-13667 -4588 -4679 -4776 0
-13667 -4588 -4677 -4778 0
-13667 -4588 -4675 -4780 0
-13667 -4588 -4674 -4782 0
-13667 -4586 -4736 0
-13667 -4586 -4719 -4738 0
-13667 -4586 -4717 -4740 0
-13667 -4586 -4715 -4742 0
-13667 -4586 -4713 -4744 0
-13667 -4586 -4711 -4746 0
-13667 -4586 -4709 -4748 0
-13667 -4586 -4707 -4750 0
-13667 -4586 -4705 -4752 0
-13667 -4586 -4703 -4754 0
-13667 -4586 -4701 -4756 0
-13667 -4586 -4699 -4758 0
-13667 -4586 -4697 -4760 0
-13667 -4586 -4695 -4762 0
-13667 -4586 -4693 -4764 0
-13667 -4586 -4691 -4766 0
-13667 -4586 -4689 -4768 0
-13667 -4586 -4687 -4770 0
-13667 -4586 -4685 -4772 0
-13667 -4586 -4683 -4774 0
-13667 -4586 -4681 -4776 0
-13667 -4586 -4679 -4778 0
-13667 -4586 -4677 -4780 0
-13667 -4586 -4675 -4782 0
-13667 -4586 -4674 0
-13667 -4584 -4738 0
-13667 -4584 -4719 -4740 0
-13667 -4584 -4717 -4742 0
-13667 -4584 -4715 -4744 0
-13667 -4584 -4713 -4746 0
-13667 -4584 -4711 -4748 0
-13667 -4584 -4709 -4750 0
-13667 -4584 -4707 -4752 0
-13667 -4584 -4705 -4754 0
-13667 -4584 -4703 -4756 0
-13667 -4584 -4701 -4758 0
-13667 -4584 -4699 -4760 0
-13667 -4584 -4697 -4762 0
-13667 -4584 -4695 -4764 0
-13667 -4584 -4693 -4766 0
-13667 -4584 -4691 -4768 0
-13667 -4584 -4689 -4770 0
-13667 -4584 -4687 -4772 0
-13667 -4584 -4685 -4774 0
-13667 -4584 -4683 -4776 0
-13667 -4584 -4681 -4778 0
-13667 -4584 -4679 -4780 0
-13667 -4584 -4677 -4782 0
-13667 -4584 -4675 0
-13667 -4584 -4674 0
-13667 -4582 -4740 0
-13667 -4582 -4719 -4742 0
-13667 -4582 -4717 -4744 0
-13667 -4582 -4715 -4746 0
-13667 -4582 -4713 -4748 0
-13667 -4582 -4711 -4750 0
-13667 -4582 -4709 -4752 0
-13667 -4582 -4707 -4754 0
-13667 -4582 -4705 -4756 0
-13667 -4582 -4703 -4758 0
-13667 -4582 -4701 -4760 0
-13667 -4582 -4699 -4762 0
-13667 -4582 -4697 -4764 0
-13667 -4582 -4695 -4766 0
-13667 -4582 -4693 -4768 0
-13667 -4582 -4691 -4770 0
-13667 -4582 -4689 -4772 0
-13667 -4582 -4687 -4774 0
-13667 -4582 -4685 -4776 0
-13667 -4582 -4683 -4778 0
-13667 -4582 -4681 -4780 0
-13667 -4582 -4679 -4782 0
-13667 -4582 -4677 0
-13667 -4582 -4675 0
-13667 -4582 -4674 0
-13667 -4581 -4742 0
-13667 -4581 -4719 -4744 0
-13667 -4581 -4717 -4746 0
-13667 -4581 -4715 -4748 0
-13667 -4581 -4713 -4750 0
-13667 -4581 -4711 -4752 0
-13667 -4581 -4709 -4754 0
-13667 -4581 -4707 -4756 0
-13667 -4581 -4705 -4758 0
-13667 -4581 -4703 -4760 0
-13667 -4581 -4701 -4762 0
-13667 -4581 -4699 -4764 0
-13667 -4581 -4697 -4766 0
-13667 -4581 -4695 -4768 0
-13667 -4581 -4693 -4770 0
-13667 -4581 -4691 -4772 0
-13667 -4581 -4689 -4774 0
-13667 -4581 -4687 -4776 0
-13667 -4581 -4685 -4778 0
-13667 -4581 -4683 -4780 0
-13667 -4581 -4681 -4782 0
-13667 -4581 -4679 0
-13667 -4581 -4677 0
-13667 -4581 -4675 0
-13667 -4581 -4674 0
13667 4679 4782 0
13667 4681 4780 0
13667 4683 4778 0
13667 4685 4776 0
13667 4687 4774 0
13667 4689 4772 0
13667 4691 4770 0
13667 4693 4768 0
13667 4695 4766 0
13667 4697 4764 0
13667 4699 4762 0
13667 4701 4760 0
13667 4703 4758 0
13667 4705 4756 0
13667 4707 4754 0
13667 4709 4752 0
13667 4711 4750 0
13667 4713 4748 0
13667 4715 4746 0
13667 4717 4744 0
13667 4719 4742 0
13667 4581 4677 4782 0
13667 4581 4679 4780 0
13667 4581 4681 4778 0
13667 4581 4683 4776 0
13667 4581 4685 4774 0
13667 4581 4687 4772 0
13667 4581 4689 4770 0
13667 4581 4691 4768 0
13667 4581 4693 4766 0
13667 4581 4695 4764 0
13667 4581 4697 4762 0
13667 4581 4699 4760 0
13667 4581 4701 4758 0
13667 4581 4703 4756 0
13667 4581 4705 4754 0
13667 4581 4707 4752 0
13667 4581 4709 4750 0
13667 4581 4711 4748 0
13667 4581 4713 4746 0
13667 4581 4715 4744 0
13667 4581 4717 4742 0
13667 4581 4719 4740 0
13667 4582 4675 4782 0
13667 4582 4677 4780 0
13667 4582 4679 4778 0
13667 4582 4681 4776 0
13667 4582 4683 4774 0
13667 4582 4685 4772 0
13667 4582 4687 4770 0
13667 4582 4689 4768 0
13667 4582 4691 4766 0
13667 4582 4693 4764 0
13667 4582 4695 4762 0
13667 4582 4697 4760 0
13667 4582 4699 4758 0
13667 4582 4701 4756 0
13667 4582 4703 4754 0
13667 4582 4705 4752 0
13667 4582 4707 4750 0
13667 4582 4709 4748 0
13667 4582 4711 4746 0
13667 4582 4713 4744 0
13667 4582 4715 4742 0
13667 4582 4717 4740 0
13667 4582 4719 4738 0
13667 4584 4674 4782 0
13667 4584 4675 4780 0
13667 4584 4677 4778 0
13667 4584 4679 4776 0
13667 4584 4681 4774 0
13667 4584 4683 4772 0
13667 4584 4685 4770 0
13667 4584 4687 4768 0
13667 4584 4689 4766 0
13667 4584 4691 4764 0
13667 4584 4693 4762 0
13667 4584 4695 4760 0
13667 4584 4697 4758 0
13667 4584 4699 4756 0
13667 4584 4701 4754 0
13667 4584 4703 4752 0
13667 4584 4705 4750 0
13667 4584 4707 4748 0
13667 4584 4709 4746 0
13667 4584 4711 4744 0
13667 4584 4713 4742 0
13667 4584 4715 4740 0
13667 4584 4717 4738 0
13667 4584 4719 4736 0
13667 4586 4782 0
13667 4586 4674 4780 0
13667 4586 4675 4778 0
13667 4586 4677 4776 0
13667 4586 4679 4774 0
13667 4586 4681 4772 0
13667 4586 4683 4770 0
13667 4586 4685 4768 0
13667 4586 4687 4766 0
13667 4586 4689 4764 0
13667 4586 4691 4762 0
13667 4586 4693 4760 0
13667 4586 4695 4758 0
13667 4586 4697 4756 0
13667 4586 4699 4754 0
13667 4586 4701 4752 0
13667 4586 4703 4750 0
13667 4586 4705 4748 0
13667 4586 4707 4746 0
13667 4586 4709 4744 0
13667 4586 4711 4742 0
13667 4586 4713 4740 0
13667 4586 4715 4738 0
13667 4586 4717 4736 0
13667 4586 4719 4734 0
13667 4588 4780 0
13667 4588 4674 4778 0
13667 4588 4675 4776 0
13667 4588 4677 4774 0
13667 4588 4679 4772 0
13667 4588 4681 4770 0
13667 4588 4683 4768 0
13667 4588 4685 4766 0
13667 4588 4687 4764 0
13667 4588 4689 4762 0
13667 4588 4691 4760 0
13667 4588 4693 4758 0
13667 4588 4695 4756 0
13667 4588 4697 4754 0
13667 4588 4699 4752 0
13667 4588 4701 4750 0
13667 4588 4703 4748 0
13667 4588 4705 4746 0
13667 4588 4707 4744 0
13667 4588 4709 4742 0
13667 4588 4711 4740 0
13667 4588 4713 4738 0
13667 4588 4715 4736 0
13667 4588 4717 4734 0
13667 4588 4719 4732 0
13667 4590 4778 0
13667 4590 4674 4776 0
13667 4590 4675 4774 0
13667 4590 4677 4772 0
13667 4590 4679 4770 0
13667 4590 4681 4768 0
13667 4590 4683 4766 0
13667 4590 4685 4764 0
13667 4590 4687 4762 0
13667 4590 4689 4760 0
13667 4590 4691 4758 0
13667 4590 4693 4756 0
13667 4590 4695 4754 0
13667 4590 4697 4752 0
13667 4590 4699 4750 0
13667 4590 4701 4748 0
13667 4590 4703 4746 0
13667 4590 4705 4744 0
13667 4590 4707 4742 0
13667 4590 4709 4740 0
13667 4590 4711 4738 0
13667 4590 4713 4736 0
13667 4590 4715 4734 0
13667 4590 4717 4732 0
13667 4590 4719 4730 0
13667 4592 4776 0
13667 4592 4674 4774 0
13667 4592 4675 4772 0
13667 4592 4677 4770 0
13667 4592 4679 4768 0
13667 4592 4681 4766 0
13667 4592 4683 4764 0
13667 4592 4685 4762 0
13667 4592 4687 4760 0
13667 4592 4689 4758 0
13667 4592 4691 4756 0
13667 4592 4693 4754 0
13667 4592 4695 4752 0
13667 4592 4697 4750 0
13667 4592 4699 4748 0
13667 4592 4701 4746 0
13667 4592 4703 4744 0
13667 4592 4705 4742 0
13667 4592 4707 4740 0
13667 4592 4709 4738 0
13667 4592 4711 4736 0
13667 4592 4713 4734 0
13667 4592 4715 4732 0
13667 4592 4717 4730 0
13667 4592 4719 4728 0
13667 4594 4774 0
13667 4594 4674 4772 0
13667 4594 4675 4770 0
13667 4594 4677 4768 0
13667 4594 4679 4766 0
13667 4594 4681 4764 0
13667 4594 4683 4762 0
13667 4594 4685 4760 0
13667 4594 4687 4758 0
13667 4594 4689 4756 0
13667 4594 4691 4754 0
13667 4594 4693 4752 0
13667 4594 4695 4750 0
13667 4594 4697 4748 0
13667 4594 4699 4746 0
13667 4594 4701 4744 0
13667 4594 4703 4742 0
13667 4594 4705 4740 0
13667 4594 4707 4738 0
13667 4594 4709 4736 0
13667 4594 4711 4734 0
13667 4594 4713 4732 0
13667 4594 4715 4730 0
13667 4594 4717 4728 0
13667 4594 4719 4726 0
13667 4596 4772 0
13667 4596 4674 4770 0
13667 4596 4675 4768 0
13667 4596 4677 4766 0
13667 4596 4679 4764 0
13667 4596 4681 4762 0
13667 4596 4683 4760 0
13667 4596 4685 4758 0
13667 4596 4687 4756 0
13667 4596 4689 4754 0
13667 4596 4691 4752 0
13667 4596 4693 4750 0
13667 4596 4695 4748 0
13667 4596 4697 4746 0
13667 4596 4699 4744 0
13667 4596 4701 4742 0
13667 4596 4703 4740 0
13667 4596 4705 4738 0
13667 4596 4707 4736 0
13667 4596 4709 4734 0
13667 4596 4711 4732 0
13667 4596 4713 4730 0
13667 4596 4715 4728 0
13667 4596 4717 4726 0
13667 4596 4719 4724 0
13667 4598 4770 0
13667 4598 4674 4768 0
13667 4598 4675 4766 0
13667 4598 4677 4764 0
13667 4598 4679 4762 0
13667 4598 4681 4760 0
13667 4598 4683 4758 0
13667 4598 4685 4756 0
13667 4598 4687 4754 0
13667 4598 4689 4752 0
13667 4598 4691 4750 0
13667 4598 4693 4748 0
13667 4598 4695 4746 0
13667 4598 4697 4744 0
13667 4598 4699 4742 0
13667 4598 4701 4740 0
13667 4598 4703 4738 0
13667 4598 4705 4736 0
13667 4598 4707 4734 0
13667 4598 4709 4732 0
13667 4598 4711 4730 0
13667 4598 4713 4728 0
13667 4598 4715 4726 0
13667 4598 4717 4724 0
13667 4598 4719 4722 0
13667 4600 4768 0
13667 4600 4674 4766 0
13667 4600 4675 4764 0
13667 4600 4677 4762 0
13667 4600 4679 4760 0
13667 4600 4681 4758 0
13667 4600 4683 4756 0
13667 4600 4685 4754 0
13667 4600 4687 4752 0
13667 4600 4689 4750 0
13667 4600 4691 4748 0
13667 4600 4693 4746 0
13667 4600 4695 4744 0
13667 4600 4697 4742 0
13667 4600 4699 4740 0
13667 4600 4701 4738 0
13667 4600 4703 4736 0
13667 4600 4705 4734 0
13667 4600 4707 4732 0
13667 4600 4709 4730 0
13667 4600 4711 4728 0
13667 4600 4713 4726 0
13667 4600 4715 4724 0
13667 4600 4717 4722 0
13667 4600 4719 4721 0
13667 4602 4766 0
13667 4602 4674 4764 0
13667 4602 4675 4762 0
13667 4602 4677 4760 0
13667 4602 4679 4758 0
13667 4602 4681 4756 0
13667 4602 4683 4754 0
13667 4602 4685 4752 0
13667 4602 4687 4750 0
13667 4602 4689 4748 0
13667 4602 4691 4746 0
13667 4602 4693 4744 0
13667 4602 4695 4742 0
13667 4602 4697 4740 0
13667 4602 4699 4738 0
13667 4602 4701 4736 0
13667 4602 4703 4734 0
13667 4602 4705 4732 0
13667 4602 4707 4730 0
13667 4602 4709 4728 0
13667 4602 4711 4726 0
13667 4602 4713 4724 0
13667 4602 4715 4722 0
13667 4602 4717 4721 0
13667 4602 4719 0
13667 4604 4764 0
13667 4604 4674 4762 0
13667 4604 4675 4760 0
13667 4604 4677 4758 0
13667 4604 4679 4756 0
13667 4604 4681 4754 0
13667 4604 4683 4752 0
13667 4604 4685 4750 0
13667 4604 4687 4748 0
13667 4604 4689 4746 0
13667 4604 4691 4744 0
13667 4604 4693 4742 0
13667 4604 4695 4740 0
13667 4604 4697 4738 0
13667 4604 4699 4736 0
13667 4604 4701 4734 0
13667 4604 4703 4732 0
13667 4604 4705 4730 0
13667 4604 4707 4728 0
13667 4604 4709 4726 0
13667 4604 4711 4724 0
13667 4604 4713 4722 0
13667 4604 4715 4721 0
13667 4604 4717 0
13667 4604 4719 0
13667 4606 4762 0
13667 4606 4674 4760 0
13667 4606 4675 4758 0
13667 4606 4677 4756 0
13667 4606 4679 4754 0
13667 4606 4681 4752 0
13667 4606 4683 4750 0
13667 4606 4685 4748 0
13667 4606 4687 4746 0
13667 4606 4689 4744 0
13667 4606 4691 4742 0
13667 4606 4693 4740 0
13667 4606 4695 4738 0
13667 4606 4697 4736 0
13667 4606 4699 4734 0
13667 4606 4701 4732 0
13667 4606 4703 4730 0
13667 4606 4705 4728 0
13667 4606 4707 4726 0
13667 4606 4709 4724 0
13667 4606 4711 4722 0
13667 4606 4713 4721 0
13667 4606 4715 0
13667 4606 4717 0
13667 4606 4719 0
13667 4608 4760 0
13667 4608 4674 4758 0
13667 4608 4675 4756 0
13667 4608 4677 4754 0
13667 4608 4679 4752 0
13667 4608 4681 4750 0
13667 4608 4683 4748 0
13667 4608 4685 4746 0
13667 4608 4687 4744 0
13667 4608 4689 4742 0
13667 4608 4691 4740 0
13667 4608 4693 4738 0
13667 4608 4695 4736 0
13667 4608 4697 4734 0
13667 4608 4699 4732 0
13667 4608 4701 4730 0
13667 4608 4703 4728 0
13667 4608 4705 4726 0
13667 4608 4707 4724 0
13667 4608 4709 4722 0
13667 4608 4711 4721 0
13667 4608 4713 0
13667 4608 4715 0
13667 4608 4717 0
13667 4608 4719 0
13667 4610 4758 0
13667 4610 4674 4756 0
13667 4610 4675 4754 0
13667 4610 4677 4752 0
13667 4610 4679 4750 0
13667 4610 4681 4748 0
13667 4610 4683 4746 0
13667 4610 4685 4744 0
13667 4610 4687 4742 0
13667 4610 4689 4740 0
13667 4610 4691 4738 0
13667 4610 4693 4736 0
13667 4610 4695 4734 0
13667 4610 4697 4732 0
13667 4610 4699 4730 0
13667 4610 4701 4728 0
13667 4610 4703 4726 0
13667 4610 4705 4724 0
13667 4610 4707 4722 0
13667 4610 4709 4721 0
13667 4610 4711 0
13667 4610 4713 0
13667 4610 4715 0
13667 4610 4717 0
13667 4610 4719 0
c (((aux540 + aux543 + aux544)<=36)=tv=SATLiteral(13668))
-13668 4915 5016 0
-13668 4917 5014 0
-13668 4919 5012 0
-13668 4921 5010 0
-13668 4923 5008 0
-13668 4925 5006 0
-13668 4927 5004 0
-13668 4929 5002 0
-13668 4931 5000 0
-13668 4933 4998 0
-13668 4935 4996 0
-13668 4937 4994 0
-13668 4939 4992 0
-13668 4941 4990 0
-13668 4943 4988 0
-13668 4945 4986 0
-13668 4947 4984 0
-13668 4949 4982 0
-13668 4951 4980 0
-13668 4953 4978 0
-13668 4815 4913 5016 0
-13668 4815 4915 5014 0
-13668 4815 4917 5012 0
-13668 4815 4919 5010 0
-13668 4815 4921 5008 0
-13668 4815 4923 5006 0
-13668 4815 4925 5004 0
-13668 4815 4927 5002 0
-13668 4815 4929 5000 0
-13668 4815 4931 4998 0
-13668 4815 4933 4996 0
-13668 4815 4935 4994 0
-13668 4815 4937 4992 0
-13668 4815 4939 4990 0
-13668 4815 4941 4988 0
-13668 4815 4943 4986 0
-13668 4815 4945 4984 0
-13668 4815 4947 4982 0
-13668 4815 4949 4980 0
-13668 4815 4951 4978 0
-13668 4815 4953 4976 0
-13668 4816 4911 5016 0
-13668 4816 4913 5014 0
-13668 4816 4915 5012 0
-13668 4816 4917 5010 0
-13668 4816 4919 5008 0
-13668 4816 4921 5006 0
-13668 4816 4923 5004 0
-13668 4816 4925 5002 0
-13668 4816 4927 5000 0
-13668 4816 4929 4998 0
-13668 4816 4931 4996 0
-13668 4816 4933 4994 0
-13668 4816 4935 4992 0
-13668 4816 4937 4990 0
-13668 4816 4939 4988 0
-13668 4816 4941 4986 0
-13668 4816 4943 4984 0
-13668 4816 4945 4982 0
-13668 4816 4947 4980 0
-13668 4816 4949 4978 0
-13668 4816 4951 4976 0
-13668 4816 4953 4974 0
-13668 4818 4909 5016 0
-13668 4818 4911 5014 0
-13668 4818 4913 5012 0
-13668 4818 4915 5010 0
-13668 4818 4917 5008 0
-13668 4818 4919 5006 0
-13668 4818 4921 5004 0
-13668 4818 4923 5002 0
-13668 4818 4925 5000 0
-13668 4818 4927 4998 0
-13668 4818 4929 4996 0
-13668 4818 4931 4994 0
-13668 4818 4933 4992 0
-13668 4818 4935 4990 0
-13668 4818 4937 4988 0
-13668 4818 4939 4986 0
-13668 4818 4941 4984 0
-13668 4818 4943 4982 0
-13668 4818 4945 4980 0
-13668 4818 4947 4978 0
-13668 4818 4949 4976 0
-13668 4818 4951 4974 0
-13668 4818 4953 4972 0
-13668 4820 4908 5016 0
-13668 4820 4909 5014 0
-13668 4820 4911 5012 0
-13668 4820 4913 5010 0
-13668 4820 4915 5008 0
-13668 4820 4917 5006 0
-13668 4820 4919 5004 0
-13668 4820 4921 5002 0
-13668 4820 4923 5000 0
-13668 4820 4925 4998 0
-13668 4820 4927 4996 0
-13668 4820 4929 4994 0
-13668 4820 4931 4992 0
-13668 4820 4933 4990 0
-13668 4820 4935 4988 0
-13668 4820 4937 4986 0
-13668 4820 4939 4984 0
-13668 4820 4941 4982 0
-13668 4820 4943 4980 0
-13668 4820 4945 4978 0
-13668 4820 4947 4976 0
-13668 4820 4949 4974 0
-13668 4820 4951 4972 0
-13668 4820 4953 4970 0
-13668 4822 5016 0
-13668 4822 4908 5014 0
-13668 4822 4909 5012 0
-13668 4822 4911 5010 0
-13668 4822 4913 5008 0
-13668 4822 4915 5006 0
-13668 4822 4917 5004 0
-13668 4822 4919 5002 0
-13668 4822 4921 5000 0
-13668 4822 4923 4998 0
-13668 4822 4925 4996 0
-13668 4822 4927 4994 0
-13668 4822 4929 4992 0
-13668 4822 4931 4990 0
-13668 4822 4933 4988 0
-13668 4822 4935 4986 0
-13668 4822 4937 4984 0
-13668 4822 4939 4982 0
-13668 4822 4941 4980 0
-13668 4822 4943 4978 0
-13668 4822 4945 4976 0
-13668 4822 4947 4974 0
-13668 4822 4949 4972 0
-13668 4822 4951 4970 0
-13668 4822 4953 4968 0
-13668 4824 5014 0
-13668 4824 4908 5012 0
-13668 4824 4909 5010 0
-13668 4824 4911 5008 0
-13668 4824 4913 5006 0
-13668 4824 4915 5004 0
-13668 4824 4917 5002 0
-13668 4824 4919 5000 0
-13668 4824 4921 4998 0
-13668 4824 4923 4996 0
-13668 4824 4925 4994 0
-13668 4824 4927 4992 0
-13668 4824 4929 4990 0
-13668 4824 4931 4988 0
-13668 4824 4933 4986 0
-13668 4824 4935 4984 0
-13668 4824 4937 4982 0
-13668 4824 4939 4980 0
-13668 4824 4941 4978 0
-13668 4824 4943 4976 0
-13668 4824 4945 4974 0
-13668 4824 4947 4972 0
-13668 4824 4949 4970 0
-13668 4824 4951 4968 0
-13668 4824 4953 4966 0
-13668 4826 5012 0
-13668 4826 4908 5010 0
-13668 4826 4909 5008 0
-13668 4826 4911 5006 0
-13668 4826 4913 5004 0
-13668 4826 4915 5002 0
-13668 4826 4917 5000 0
-13668 4826 4919 4998 0
-13668 4826 4921 4996 0
-13668 4826 4923 4994 0
-13668 4826 4925 4992 0
-13668 4826 4927 4990 0
-13668 4826 4929 4988 0
-13668 4826 4931 4986 0
-13668 4826 4933 4984 0
-13668 4826 4935 4982 0
-13668 4826 4937 4980 0
-13668 4826 4939 4978 0
-13668 4826 4941 4976 0
-13668 4826 4943 4974 0
-13668 4826 4945 4972 0
-13668 4826 4947 4970 0
-13668 4826 4949 4968 0
-13668 4826 4951 4966 0
-13668 4826 4953 4964 0
-13668 4828 5010 0
-13668 4828 4908 5008 0
-13668 4828 4909 5006 0
-13668 4828 4911 5004 0
-13668 4828 4913 5002 0
-13668 4828 4915 5000 0
-13668 4828 4917 4998 0
-13668 4828 4919 4996 0
-13668 4828 4921 4994 0
-13668 4828 4923 4992 0
-13668 4828 4925 4990 0
-13668 4828 4927 4988 0
-13668 4828 4929 4986 0
-13668 4828 4931 4984 0
-13668 4828 4933 4982 0
-13668 4828 4935 4980 0
-13668 4828 4937 4978 0
-13668 4828 4939 4976 0
-13668 4828 4941 4974 0
-13668 4828 4943 4972 0
-13668 4828 4945 4970 0
-13668 4828 4947 4968 0
-13668 4828 4949 4966 0
-13668 4828 4951 4964 0
-13668 4828 4953 4962 0
-13668 4830 5008 0
-13668 4830 4908 5006 0
-13668 4830 4909 5004 0
-13668 4830 4911 5002 0
-13668 4830 4913 5000 0
-13668 4830 4915 4998 0
-13668 4830 4917 4996 0
-13668 4830 4919 4994 0
-13668 4830 4921 4992 0
-13668 4830 4923 4990 0
-13668 4830 4925 4988 0
-13668 4830 4927 4986 0
-13668 4830 4929 4984 0
-13668 4830 4931 4982 0
-13668 4830 4933 4980 0
-13668 4830 4935 4978 0
-13668 4830 4937 4976 0
-13668 4830 4939 4974 0
-13668 4830 4941 4972 0
-13668 4830 4943 4970 0
-13668 4830 4945 4968 0
-13668 4830 4947 4966 0
-13668 4830 4949 4964 0
-13668 4830 4951 4962 0
-13668 4830 4953 4960 0
-13668 4832 5006 0
-13668 4832 4908 5004 0
-13668 4832 4909 5002 0
-13668 4832 4911 5000 0
-13668 4832 4913 4998 0
-13668 4832 4915 4996 0
-13668 4832 4917 4994 0
-13668 4832 4919 4992 0
-13668 4832 4921 4990 0
-13668 4832 4923 4988 0
-13668 4832 4925 4986 0
-13668 4832 4927 4984 0
-13668 4832 4929 4982 0
-13668 4832 4931 4980 0
-13668 4832 4933 4978 0
-13668 4832 4935 4976 0
-13668 4832 4937 4974 0
-13668 4832 4939 4972 0
-13668 4832 4941 4970 0
-13668 4832 4943 4968 0
-13668 4832 4945 4966 0
-13668 4832 4947 4964 0
-13668 4832 4949 4962 0
-13668 4832 4951 4960 0
-13668 4832 4953 4958 0
-13668 4834 5004 0
-13668 4834 4908 5002 0
-13668 4834 4909 5000 0
-13668 4834 4911 4998 0
-13668 4834 4913 4996 0
-13668 4834 4915 4994 0
-13668 4834 4917 4992 0
-13668 4834 4919 4990 0
-13668 4834 4921 4988 0
-13668 4834 4923 4986 0
-13668 4834 4925 4984 0
-13668 4834 4927 4982 0
-13668 4834 4929 4980 0
-13668 4834 4931 4978 0
-13668 4834 4933 4976 0
-13668 4834 4935 4974 0
-13668 4834 4937 4972 0
-13668 4834 4939 4970 0
-13668 4834 4941 4968 0
-13668 4834 4943 4966 0
-13668 4834 4945 4964 0
-13668 4834 4947 4962 0
-13668 4834 4949 4960 0
-13668 4834 4951 4958 0
-13668 4834 4953 4956 0
-13668 4836 5002 0
-13668 4836 4908 5000 0
-13668 4836 4909 4998 0
-13668 4836 4911 4996 0
-13668 4836 4913 4994 0
-13668 4836 4915 4992 0
-13668 4836 4917 4990 0
-13668 4836 4919 4988 0
-13668 4836 4921 4986 0
-13668 4836 4923 4984 0
-13668 4836 4925 4982 0
-13668 4836 4927 4980 0
-13668 4836 4929 4978 0
-13668 4836 4931 4976 0
-13668 4836 4933 4974 0
-13668 4836 4935 4972 0
-13668 4836 4937 4970 0
-13668 4836 4939 4968 0
-13668 4836 4941 4966 0
-13668 4836 4943 4964 0
-13668 4836 4945 4962 0
-13668 4836 4947 4960 0
-13668 4836 4949 4958 0
-13668 4836 4951 4956 0
-13668 4836 4953 4955 0
-13668 4838 5000 0
-13668 4838 4908 4998 0
-13668 4838 4909 4996 0
-13668 4838 4911 4994 0
-13668 4838 4913 4992 0
-13668 4838 4915 4990 0
-13668 4838 4917 4988 0
-13668 4838 4919 4986 0
-13668 4838 4921 4984 0
-13668 4838 4923 4982 0
-13668 4838 4925 4980 0
-13668 4838 4927 4978 0
-13668 4838 4929 4976 0
-13668 4838 4931 4974 0
-13668 4838 4933 4972 0
-13668 4838 4935 4970 0
-13668 4838 4937 4968 0
-13668 4838 4939 4966 0
-13668 4838 4941 4964 0
-13668 4838 4943 4962 0
-13668 4838 4945 4960 0
-13668 4838 4947 4958 0
-13668 4838 4949 4956 0
-13668 4838 4951 4955 0
-13668 4838 4953 0
-13668 4840 4998 0
-13668 4840 4908 4996 0
-13668 4840 4909 4994 0
-13668 4840 4911 4992 0
-13668 4840 4913 4990 0
-13668 4840 4915 4988 0
-13668 4840 4917 4986 0
-13668 4840 4919 4984 0
-13668 4840 4921 4982 0
-13668 4840 4923 4980 0
-13668 4840 4925 4978 0
-13668 4840 4927 4976 0
-13668 4840 4929 4974 0
-13668 4840 4931 4972 0
-13668 4840 4933 4970 0
-13668 4840 4935 4968 0
-13668 4840 4937 4966 0
-13668 4840 4939 4964 0
-13668 4840 4941 4962 0
-13668 4840 4943 4960 0
-13668 4840 4945 4958 0
-13668 4840 4947 4956 0
-13668 4840 4949 4955 0
-13668 4840 4951 0
-13668 4840 4953 0
-13668 4842 4996 0
-13668 4842 4908 4994 0
-13668 4842 4909 4992 0
-13668 4842 4911 4990 0
-13668 4842 4913 4988 0
-13668 4842 4915 4986 0
-13668 4842 4917 4984 0
-13668 4842 4919 4982 0
-13668 4842 4921 4980 0
-13668 4842 4923 4978 0
-13668 4842 4925 4976 0
-13668 4842 4927 4974 0
-13668 4842 4929 4972 0
-13668 4842 4931 4970 0
-13668 4842 4933 4968 0
-13668 4842 4935 4966 0
-13668 4842 4937 4964 0
-13668 4842 4939 4962 0
-13668 4842 4941 4960 0
-13668 4842 4943 4958 0
-13668 4842 4945 4956 0
-13668 4842 4947 4955 0
-13668 4842 4949 0
-13668 4842 4951 0
-13668 4842 4953 0
-13668 4844 4994 0
-13668 4844 4908 4992 0
-13668 4844 4909 4990 0
-13668 4844 4911 4988 0
-13668 4844 4913 4986 0
-13668 4844 4915 4984 0
-13668 4844 4917 4982 0
-13668 4844 4919 4980 0
-13668 4844 4921 4978 0
-13668 4844 4923 4976 0
-13668 4844 4925 4974 0
-13668 4844 4927 4972 0
-13668 4844 4929 4970 0
-13668 4844 4931 4968 0
-13668 4844 4933 4966 0
-13668 4844 4935 4964 0
-13668 4844 4937 4962 0
-13668 4844 4939 4960 0
-13668 4844 4941 4958 0
-13668 4844 4943 4956 0
-13668 4844 4945 4955 0
-13668 4844 4947 0
-13668 4844 4949 0
-13668 4844 4951 0
-13668 4844 4953 0
13668 -4947 -4955 0
13668 -4945 -4956 0
13668 -4943 -4958 0
13668 -4941 -4960 0
13668 -4939 -4962 0
13668 -4937 -4964 0
13668 -4935 -4966 0
13668 -4933 -4968 0
13668 -4931 -4970 0
13668 -4929 -4972 0
13668 -4927 -4974 0
13668 -4925 -4976 0
13668 -4923 -4978 0
13668 -4921 -4980 0
13668 -4919 -4982 0
13668 -4917 -4984 0
13668 -4915 -4986 0
13668 -4913 -4988 0
13668 -4911 -4990 0
13668 -4909 -4992 0
13668 -4908 -4994 0
13668 -4844 -4949 -4955 0
13668 -4844 -4947 -4956 0
13668 -4844 -4945 -4958 0
13668 -4844 -4943 -4960 0
13668 -4844 -4941 -4962 0
13668 -4844 -4939 -4964 0
13668 -4844 -4937 -4966 0
13668 -4844 -4935 -4968 0
13668 -4844 -4933 -4970 0
13668 -4844 -4931 -4972 0
13668 -4844 -4929 -4974 0
13668 -4844 -4927 -4976 0
13668 -4844 -4925 -4978 0
13668 -4844 -4923 -4980 0
13668 -4844 -4921 -4982 0
13668 -4844 -4919 -4984 0
13668 -4844 -4917 -4986 0
13668 -4844 -4915 -4988 0
13668 -4844 -4913 -4990 0
13668 -4844 -4911 -4992 0
13668 -4844 -4909 -4994 0
13668 -4844 -4908 -4996 0
13668 -4842 -4951 -4955 0
13668 -4842 -4949 -4956 0
13668 -4842 -4947 -4958 0
13668 -4842 -4945 -4960 0
13668 -4842 -4943 -4962 0
13668 -4842 -4941 -4964 0
13668 -4842 -4939 -4966 0
13668 -4842 -4937 -4968 0
13668 -4842 -4935 -4970 0
13668 -4842 -4933 -4972 0
13668 -4842 -4931 -4974 0
13668 -4842 -4929 -4976 0
13668 -4842 -4927 -4978 0
13668 -4842 -4925 -4980 0
13668 -4842 -4923 -4982 0
13668 -4842 -4921 -4984 0
13668 -4842 -4919 -4986 0
13668 -4842 -4917 -4988 0
13668 -4842 -4915 -4990 0
13668 -4842 -4913 -4992 0
13668 -4842 -4911 -4994 0
13668 -4842 -4909 -4996 0
13668 -4842 -4908 -4998 0
13668 -4840 -4953 -4955 0
13668 -4840 -4951 -4956 0
13668 -4840 -4949 -4958 0
13668 -4840 -4947 -4960 0
13668 -4840 -4945 -4962 0
13668 -4840 -4943 -4964 0
13668 -4840 -4941 -4966 0
13668 -4840 -4939 -4968 0
13668 -4840 -4937 -4970 0
13668 -4840 -4935 -4972 0
13668 -4840 -4933 -4974 0
13668 -4840 -4931 -4976 0
13668 -4840 -4929 -4978 0
13668 -4840 -4927 -4980 0
13668 -4840 -4925 -4982 0
13668 -4840 -4923 -4984 0
13668 -4840 -4921 -4986 0
13668 -4840 -4919 -4988 0
13668 -4840 -4917 -4990 0
13668 -4840 -4915 -4992 0
13668 -4840 -4913 -4994 0
13668 -4840 -4911 -4996 0
13668 -4840 -4909 -4998 0
13668 -4840 -4908 -5000 0
13668 -4838 -4955 0
13668 -4838 -4953 -4956 0
13668 -4838 -4951 -4958 0
13668 -4838 -4949 -4960 0
13668 -4838 -4947 -4962 0
13668 -4838 -4945 -4964 0
13668 -4838 -4943 -4966 0
13668 -4838 -4941 -4968 0
13668 -4838 -4939 -4970 0
13668 -4838 -4937 -4972 0
13668 -4838 -4935 -4974 0
13668 -4838 -4933 -4976 0
13668 -4838 -4931 -4978 0
13668 -4838 -4929 -4980 0
13668 -4838 -4927 -4982 0
13668 -4838 -4925 -4984 0
13668 -4838 -4923 -4986 0
13668 -4838 -4921 -4988 0
13668 -4838 -4919 -4990 0
13668 -4838 -4917 -4992 0
13668 -4838 -4915 -4994 0
13668 -4838 -4913 -4996 0
13668 -4838 -4911 -4998 0
13668 -4838 -4909 -5000 0
13668 -4838 -4908 -5002 0
13668 -4836 -4956 0
13668 -4836 -4953 -4958 0
13668 -4836 -4951 -4960 0
13668 -4836 -4949 -4962 0
13668 -4836 -4947 -4964 0
13668 -4836 -4945 -4966 0
13668 -4836 -4943 -4968 0
13668 -4836 -4941 -4970 0
13668 -4836 -4939 -4972 0
13668 -4836 -4937 -4974 0
13668 -4836 -4935 -4976 0
13668 -4836 -4933 -4978 0
13668 -4836 -4931 -4980 0
13668 -4836 -4929 -4982 0
13668 -4836 -4927 -4984 0
13668 -4836 -4925 -4986 0
13668 -4836 -4923 -4988 0
13668 -4836 -4921 -4990 0
13668 -4836 -4919 -4992 0
13668 -4836 -4917 -4994 0
13668 -4836 -4915 -4996 0
13668 -4836 -4913 -4998 0
13668 -4836 -4911 -5000 0
13668 -4836 -4909 -5002 0
13668 -4836 -4908 -5004 0
13668 -4834 -4958 0
13668 -4834 -4953 -4960 0
13668 -4834 -4951 -4962 0
13668 -4834 -4949 -4964 0
13668 -4834 -4947 -4966 0
13668 -4834 -4945 -4968 0
13668 -4834 -4943 -4970 0
13668 -4834 -4941 -4972 0
13668 -4834 -4939 -4974 0
13668 -4834 -4937 -4976 0
13668 -4834 -4935 -4978 0
13668 -4834 -4933 -4980 0
13668 -4834 -4931 -4982 0
13668 -4834 -4929 -4984 0
13668 -4834 -4927 -4986 0
13668 -4834 -4925 -4988 0
13668 -4834 -4923 -4990 0
13668 -4834 -4921 -4992 0
13668 -4834 -4919 -4994 0
13668 -4834 -4917 -4996 0
13668 -4834 -4915 -4998 0
13668 -4834 -4913 -5000 0
13668 -4834 -4911 -5002 0
13668 -4834 -4909 -5004 0
13668 -4834 -4908 -5006 0
13668 -4832 -4960 0
13668 -4832 -4953 -4962 0
13668 -4832 -4951 -4964 0
13668 -4832 -4949 -4966 0
13668 -4832 -4947 -4968 0
13668 -4832 -4945 -4970 0
13668 -4832 -4943 -4972 0
13668 -4832 -4941 -4974 0
13668 -4832 -4939 -4976 0
13668 -4832 -4937 -4978 0
13668 -4832 -4935 -4980 0
13668 -4832 -4933 -4982 0
13668 -4832 -4931 -4984 0
13668 -4832 -4929 -4986 0
13668 -4832 -4927 -4988 0
13668 -4832 -4925 -4990 0
13668 -4832 -4923 -4992 0
13668 -4832 -4921 -4994 0
13668 -4832 -4919 -4996 0
13668 -4832 -4917 -4998 0
13668 -4832 -4915 -5000 0
13668 -4832 -4913 -5002 0
13668 -4832 -4911 -5004 0
13668 -4832 -4909 -5006 0
13668 -4832 -4908 -5008 0
13668 -4830 -4962 0
13668 -4830 -4953 -4964 0
13668 -4830 -4951 -4966 0
13668 -4830 -4949 -4968 0
13668 -4830 -4947 -4970 0
13668 -4830 -4945 -4972 0
13668 -4830 -4943 -4974 0
13668 -4830 -4941 -4976 0
13668 -4830 -4939 -4978 0
13668 -4830 -4937 -4980 0
13668 -4830 -4935 -4982 0
13668 -4830 -4933 -4984 0
13668 -4830 -4931 -4986 0
13668 -4830 -4929 -4988 0
13668 -4830 -4927 -4990 0
13668 -4830 -4925 -4992 0
13668 -4830 -4923 -4994 0
13668 -4830 -4921 -4996 0
13668 -4830 -4919 -4998 0
13668 -4830 -4917 -5000 0
13668 -4830 -4915 -5002 0
13668 -4830 -4913 -5004 0
13668 -4830 -4911 -5006 0
13668 -4830 -4909 -5008 0
13668 -4830 -4908 -5010 0
13668 -4828 -4964 0
13668 -4828 -4953 -4966 0
13668 -4828 -4951 -4968 0
13668 -4828 -4949 -4970 0
13668 -4828 -4947 -4972 0
13668 -4828 -4945 -4974 0
13668 -4828 -4943 -4976 0
13668 -4828 -4941 -4978 0
13668 -4828 -4939 -4980 0
13668 -4828 -4937 -4982 0
13668 -4828 -4935 -4984 0
13668 -4828 -4933 -4986 0
13668 -4828 -4931 -4988 0
13668 -4828 -4929 -4990 0
13668 -4828 -4927 -4992 0
13668 -4828 -4925 -4994 0
13668 -4828 -4923 -4996 0
13668 -4828 -4921 -4998 0
13668 -4828 -4919 -5000 0
13668 -4828 -4917 -5002 0
13668 -4828 -4915 -5004 0
13668 -4828 -4913 -5006 0
13668 -4828 -4911 -5008 0
13668 -4828 -4909 -5010 0
13668 -4828 -4908 -5012 0
13668 -4826 -4966 0
13668 -4826 -4953 -4968 0
13668 -4826 -4951 -4970 0
13668 -4826 -4949 -4972 0
13668 -4826 -4947 -4974 0
13668 -4826 -4945 -4976 0
13668 -4826 -4943 -4978 0
13668 -4826 -4941 -4980 0
13668 -4826 -4939 -4982 0
13668 -4826 -4937 -4984 0
13668 -4826 -4935 -4986 0
13668 -4826 -4933 -4988 0
13668 -4826 -4931 -4990 0
13668 -4826 -4929 -4992 0
13668 -4826 -4927 -4994 0
13668 -4826 -4925 -4996 0
13668 -4826 -4923 -4998 0
13668 -4826 -4921 -5000 0
13668 -4826 -4919 -5002 0
13668 -4826 -4917 -5004 0
13668 -4826 -4915 -5006 0
13668 -4826 -4913 -5008 0
13668 -4826 -4911 -5010 0
13668 -4826 -4909 -5012 0
13668 -4826 -4908 -5014 0
13668 -4824 -4968 0
13668 -4824 -4953 -4970 0
13668 -4824 -4951 -4972 0
13668 -4824 -4949 -4974 0
13668 -4824 -4947 -4976 0
13668 -4824 -4945 -4978 0
13668 -4824 -4943 -4980 0
13668 -4824 -4941 -4982 0
13668 -4824 -4939 -4984 0
13668 -4824 -4937 -4986 0
13668 -4824 -4935 -4988 0
13668 -4824 -4933 -4990 0
13668 -4824 -4931 -4992 0
13668 -4824 -4929 -4994 0
13668 -4824 -4927 -4996 0
13668 -4824 -4925 -4998 0
13668 -4824 -4923 -5000 0
13668 -4824 -4921 -5002 0
13668 -4824 -4919 -5004 0
13668 -4824 -4917 -5006 0
13668 -4824 -4915 -5008 0
13668 -4824 -4913 -5010 0
13668 -4824 -4911 -5012 0
13668 -4824 -4909 -5014 0
13668 -4824 -4908 -5016 0
13668 -4822 -4970 0
13668 -4822 -4953 -4972 0
13668 -4822 -4951 -4974 0
13668 -4822 -4949 -4976 0
13668 -4822 -4947 -4978 0
13668 -4822 -4945 -4980 0
13668 -4822 -4943 -4982 0
13668 -4822 -4941 -4984 0
13668 -4822 -4939 -4986 0
13668 -4822 -4937 -4988 0
13668 -4822 -4935 -4990 0
13668 -4822 -4933 -4992 0
13668 -4822 -4931 -4994 0
13668 -4822 -4929 -4996 0
13668 -4822 -4927 -4998 0
13668 -4822 -4925 -5000 0
13668 -4822 -4923 -5002 0
13668 -4822 -4921 -5004 0
13668 -4822 -4919 -5006 0
13668 -4822 -4917 -5008 0
13668 -4822 -4915 -5010 0
13668 -4822 -4913 -5012 0
13668 -4822 -4911 -5014 0
13668 -4822 -4909 -5016 0
13668 -4822 -4908 0
13668 -4820 -4972 0
13668 -4820 -4953 -4974 0
13668 -4820 -4951 -4976 0
13668 -4820 -4949 -4978 0
13668 -4820 -4947 -4980 0
13668 -4820 -4945 -4982 0
13668 -4820 -4943 -4984 0
13668 -4820 -4941 -4986 0
13668 -4820 -4939 -4988 0
13668 -4820 -4937 -4990 0
13668 -4820 -4935 -4992 0
13668 -4820 -4933 -4994 0
13668 -4820 -4931 -4996 0
13668 -4820 -4929 -4998 0
13668 -4820 -4927 -5000 0
13668 -4820 -4925 -5002 0
13668 -4820 -4923 -5004 0
13668 -4820 -4921 -5006 0
13668 -4820 -4919 -5008 0
13668 -4820 -4917 -5010 0
13668 -4820 -4915 -5012 0
13668 -4820 -4913 -5014 0
13668 -4820 -4911 -5016 0
13668 -4820 -4909 0
13668 -4820 -4908 0
13668 -4818 -4974 0
13668 -4818 -4953 -4976 0
13668 -4818 -4951 -4978 0
13668 -4818 -4949 -4980 0
13668 -4818 -4947 -4982 0
13668 -4818 -4945 -4984 0
13668 -4818 -4943 -4986 0
13668 -4818 -4941 -4988 0
13668 -4818 -4939 -4990 0
13668 -4818 -4937 -4992 0
13668 -4818 -4935 -4994 0
13668 -4818 -4933 -4996 0
13668 -4818 -4931 -4998 0
13668 -4818 -4929 -5000 0
13668 -4818 -4927 -5002 0
13668 -4818 -4925 -5004 0
13668 -4818 -4923 -5006 0
13668 -4818 -4921 -5008 0
13668 -4818 -4919 -5010 0
13668 -4818 -4917 -5012 0
13668 -4818 -4915 -5014 0
13668 -4818 -4913 -5016 0
13668 -4818 -4911 0
13668 -4818 -4909 0
13668 -4818 -4908 0
13668 -4816 -4976 0
13668 -4816 -4953 -4978 0
13668 -4816 -4951 -4980 0
13668 -4816 -4949 -4982 0
13668 -4816 -4947 -4984 0
13668 -4816 -4945 -4986 0
13668 -4816 -4943 -4988 0
13668 -4816 -4941 -4990 0
13668 -4816 -4939 -4992 0
13668 -4816 -4937 -4994 0
13668 -4816 -4935 -4996 0
13668 -4816 -4933 -4998 0
13668 -4816 -4931 -5000 0
13668 -4816 -4929 -5002 0
13668 -4816 -4927 -5004 0
13668 -4816 -4925 -5006 0
13668 -4816 -4923 -5008 0
13668 -4816 -4921 -5010 0
13668 -4816 -4919 -5012 0
13668 -4816 -4917 -5014 0
13668 -4816 -4915 -5016 0
13668 -4816 -4913 0
13668 -4816 -4911 0
13668 -4816 -4909 0
13668 -4816 -4908 0
13668 -4815 -4978 0
13668 -4815 -4953 -4980 0
13668 -4815 -4951 -4982 0
13668 -4815 -4949 -4984 0
13668 -4815 -4947 -4986 0
13668 -4815 -4945 -4988 0
13668 -4815 -4943 -4990 0
13668 -4815 -4941 -4992 0
13668 -4815 -4939 -4994 0
13668 -4815 -4937 -4996 0
13668 -4815 -4935 -4998 0
13668 -4815 -4933 -5000 0
13668 -4815 -4931 -5002 0
13668 -4815 -4929 -5004 0
13668 -4815 -4927 -5006 0
13668 -4815 -4925 -5008 0
13668 -4815 -4923 -5010 0
13668 -4815 -4921 -5012 0
13668 -4815 -4919 -5014 0
13668 -4815 -4917 -5016 0
13668 -4815 -4915 0
13668 -4815 -4913 0
13668 -4815 -4911 0
13668 -4815 -4909 0
13668 -4815 -4908 0
c ((36<=(aux540 + aux543 + aux544))=tv=SATLiteral(13669))
-13669 -4945 -4955 0
-13669 -4943 -4956 0
-13669 -4941 -4958 0
-13669 -4939 -4960 0
-13669 -4937 -4962 0
-13669 -4935 -4964 0
-13669 -4933 -4966 0
-13669 -4931 -4968 0
-13669 -4929 -4970 0
-13669 -4927 -4972 0
-13669 -4925 -4974 0
-13669 -4923 -4976 0
-13669 -4921 -4978 0
-13669 -4919 -4980 0
-13669 -4917 -4982 0
-13669 -4915 -4984 0
-13669 -4913 -4986 0
-13669 -4911 -4988 0
-13669 -4909 -4990 0
-13669 -4908 -4992 0
-13669 -4844 -4947 -4955 0
-13669 -4844 -4945 -4956 0
-13669 -4844 -4943 -4958 0
-13669 -4844 -4941 -4960 0
-13669 -4844 -4939 -4962 0
-13669 -4844 -4937 -4964 0
-13669 -4844 -4935 -4966 0
-13669 -4844 -4933 -4968 0
-13669 -4844 -4931 -4970 0
-13669 -4844 -4929 -4972 0
-13669 -4844 -4927 -4974 0
-13669 -4844 -4925 -4976 0
-13669 -4844 -4923 -4978 0
-13669 -4844 -4921 -4980 0
-13669 -4844 -4919 -4982 0
-13669 -4844 -4917 -4984 0
-13669 -4844 -4915 -4986 0
-13669 -4844 -4913 -4988 0
-13669 -4844 -4911 -4990 0
-13669 -4844 -4909 -4992 0
-13669 -4844 -4908 -4994 0
-13669 -4842 -4949 -4955 0
-13669 -4842 -4947 -4956 0
-13669 -4842 -4945 -4958 0
-13669 -4842 -4943 -4960 0
-13669 -4842 -4941 -4962 0
-13669 -4842 -4939 -4964 0
-13669 -4842 -4937 -4966 0
-13669 -4842 -4935 -4968 0
-13669 -4842 -4933 -4970 0
-13669 -4842 -4931 -4972 0
-13669 -4842 -4929 -4974 0
-13669 -4842 -4927 -4976 0
-13669 -4842 -4925 -4978 0
-13669 -4842 -4923 -4980 0
-13669 -4842 -4921 -4982 0
-13669 -4842 -4919 -4984 0
-13669 -4842 -4917 -4986 0
-13669 -4842 -4915 -4988 0
-13669 -4842 -4913 -4990 0
-13669 -4842 -4911 -4992 0
-13669 -4842 -4909 -4994 0
-13669 -4842 -4908 -4996 0
-13669 -4840 -4951 -4955 0
-13669 -4840 -4949 -4956 0
-13669 -4840 -4947 -4958 0
-13669 -4840 -4945 -4960 0
-13669 -4840 -4943 -4962 0
-13669 -4840 -4941 -4964 0
-13669 -4840 -4939 -4966 0
-13669 -4840 -4937 -4968 0
-13669 -4840 -4935 -4970 0
-13669 -4840 -4933 -4972 0
-13669 -4840 -4931 -4974 0
-13669 -4840 -4929 -4976 0
-13669 -4840 -4927 -4978 0
-13669 -4840 -4925 -4980 0
-13669 -4840 -4923 -4982 0
-13669 -4840 -4921 -4984 0
-13669 -4840 -4919 -4986 0
-13669 -4840 -4917 -4988 0
-13669 -4840 -4915 -4990 0
-13669 -4840 -4913 -4992 0
-13669 -4840 -4911 -4994 0
-13669 -4840 -4909 -4996 0
-13669 -4840 -4908 -4998 0
-13669 -4838 -4953 -4955 0
-13669 -4838 -4951 -4956 0
-13669 -4838 -4949 -4958 0
-13669 -4838 -4947 -4960 0
-13669 -4838 -4945 -4962 0
-13669 -4838 -4943 -4964 0
-13669 -4838 -4941 -4966 0
-13669 -4838 -4939 -4968 0
-13669 -4838 -4937 -4970 0
-13669 -4838 -4935 -4972 0
-13669 -4838 -4933 -4974 0
-13669 -4838 -4931 -4976 0
-13669 -4838 -4929 -4978 0
-13669 -4838 -4927 -4980 0
-13669 -4838 -4925 -4982 0
-13669 -4838 -4923 -4984 0
-13669 -4838 -4921 -4986 0
-13669 -4838 -4919 -4988 0
-13669 -4838 -4917 -4990 0
-13669 -4838 -4915 -4992 0
-13669 -4838 -4913 -4994 0
-13669 -4838 -4911 -4996 0
-13669 -4838 -4909 -4998 0
-13669 -4838 -4908 -5000 0
-13669 -4836 -4955 0
-13669 -4836 -4953 -4956 0
-13669 -4836 -4951 -4958 0
-13669 -4836 -4949 -4960 0
-13669 -4836 -4947 -4962 0
-13669 -4836 -4945 -4964 0
-13669 -4836 -4943 -4966 0
-13669 -4836 -4941 -4968 0
-13669 -4836 -4939 -4970 0
-13669 -4836 -4937 -4972 0
-13669 -4836 -4935 -4974 0
-13669 -4836 -4933 -4976 0
-13669 -4836 -4931 -4978 0
-13669 -4836 -4929 -4980 0
-13669 -4836 -4927 -4982 0
-13669 -4836 -4925 -4984 0
-13669 -4836 -4923 -4986 0
-13669 -4836 -4921 -4988 0
-13669 -4836 -4919 -4990 0
-13669 -4836 -4917 -4992 0
-13669 -4836 -4915 -4994 0
-13669 -4836 -4913 -4996 0
-13669 -4836 -4911 -4998 0
-13669 -4836 -4909 -5000 0
-13669 -4836 -4908 -5002 0
-13669 -4834 -4956 0
-13669 -4834 -4953 -4958 0
-13669 -4834 -4951 -4960 0
-13669 -4834 -4949 -4962 0
-13669 -4834 -4947 -4964 0
-13669 -4834 -4945 -4966 0
-13669 -4834 -4943 -4968 0
-13669 -4834 -4941 -4970 0
-13669 -4834 -4939 -4972 0
-13669 -4834 -4937 -4974 0
-13669 -4834 -4935 -4976 0
-13669 -4834 -4933 -4978 0
-13669 -4834 -4931 -4980 0
-13669 -4834 -4929 -4982 0
-13669 -4834 -4927 -4984 0
-13669 -4834 -4925 -4986 0
-13669 -4834 -4923 -4988 0
-13669 -4834 -4921 -4990 0
-13669 -4834 -4919 -4992 0
-13669 -4834 -4917 -4994 0
-13669 -4834 -4915 -4996 0
-13669 -4834 -4913 -4998 0
-13669 -4834 -4911 -5000 0
-13669 -4834 -4909 -5002 0
-13669 -4834 -4908 -5004 0
-13669 -4832 -4958 0
-13669 -4832 -4953 -4960 0
-13669 -4832 -4951 -4962 0
-13669 -4832 -4949 -4964 0
-13669 -4832 -4947 -4966 0
-13669 -4832 -4945 -4968 0
-13669 -4832 -4943 -4970 0
-13669 -4832 -4941 -4972 0
-13669 -4832 -4939 -4974 0
-13669 -4832 -4937 -4976 0
-13669 -4832 -4935 -4978 0
-13669 -4832 -4933 -4980 0
-13669 -4832 -4931 -4982 0
-13669 -4832 -4929 -4984 0
-13669 -4832 -4927 -4986 0
-13669 -4832 -4925 -4988 0
-13669 -4832 -4923 -4990 0
-13669 -4832 -4921 -4992 0
-13669 -4832 -4919 -4994 0
-13669 -4832 -4917 -4996 0
-13669 -4832 -4915 -4998 0
-13669 -4832 -4913 -5000 0
-13669 -4832 -4911 -5002 0
-13669 -4832 -4909 -5004 0
-13669 -4832 -4908 -5006 0
-13669 -4830 -4960 0
-13669 -4830 -4953 -4962 0
-13669 -4830 -4951 -4964 0
-13669 -4830 -4949 -4966 0
-13669 -4830 -4947 -4968 0
-13669 -4830 -4945 -4970 0
-13669 -4830 -4943 -4972 0
-13669 -4830 -4941 -4974 0
-13669 -4830 -4939 -4976 0
-13669 -4830 -4937 -4978 0
-13669 -4830 -4935 -4980 0
-13669 -4830 -4933 -4982 0
-13669 -4830 -4931 -4984 0
-13669 -4830 -4929 -4986 0
-13669 -4830 -4927 -4988 0
-13669 -4830 -4925 -4990 0
-13669 -4830 -4923 -4992 0
-13669 -4830 -4921 -4994 0
-13669 -4830 -4919 -4996 0
-13669 -4830 -4917 -4998 0
-13669 -4830 -4915 -5000 0
-13669 -4830 -4913 -5002 0
-13669 -4830 -4911 -5004 0
-13669 -4830 -4909 -5006 0
-13669 -4830 -4908 -5008 0
-13669 -4828 -4962 0
-13669 -4828 -4953 -4964 0
-13669 -4828 -4951 -4966 0
-13669 -4828 -4949 -4968 0
-13669 -4828 -4947 -4970 0
-13669 -4828 -4945 -4972 0
-13669 -4828 -4943 -4974 0
-13669 -4828 -4941 -4976 0
-13669 -4828 -4939 -4978 0
-13669 -4828 -4937 -4980 0
-13669 -4828 -4935 -4982 0
-13669 -4828 -4933 -4984 0
-13669 -4828 -4931 -4986 0
-13669 -4828 -4929 -4988 0
-13669 -4828 -4927 -4990 0
-13669 -4828 -4925 -4992 0
-13669 -4828 -4923 -4994 0
-13669 -4828 -4921 -4996 0
-13669 -4828 -4919 -4998 0
-13669 -4828 -4917 -5000 0
-13669 -4828 -4915 -5002 0
-13669 -4828 -4913 -5004 0
-13669 -4828 -4911 -5006 0
-13669 -4828 -4909 -5008 0
-13669 -4828 -4908 -5010 0
-13669 -4826 -4964 0
-13669 -4826 -4953 -4966 0
-13669 -4826 -4951 -4968 0
-13669 -4826 -4949 -4970 0
-13669 -4826 -4947 -4972 0
-13669 -4826 -4945 -4974 0
-13669 -4826 -4943 -4976 0
-13669 -4826 -4941 -4978 0
-13669 -4826 -4939 -4980 0
-13669 -4826 -4937 -4982 0
-13669 -4826 -4935 -4984 0
-13669 -4826 -4933 -4986 0
-13669 -4826 -4931 -4988 0
-13669 -4826 -4929 -4990 0
-13669 -4826 -4927 -4992 0
-13669 -4826 -4925 -4994 0
-13669 -4826 -4923 -4996 0
-13669 -4826 -4921 -4998 0
-13669 -4826 -4919 -5000 0
-13669 -4826 -4917 -5002 0
-13669 -4826 -4915 -5004 0
-13669 -4826 -4913 -5006 0
-13669 -4826 -4911 -5008 0
-13669 -4826 -4909 -5010 0
-13669 -4826 -4908 -5012 0
-13669 -4824 -4966 0
-13669 -4824 -4953 -4968 0
-13669 -4824 -4951 -4970 0
-13669 -4824 -4949 -4972 0
-13669 -4824 -4947 -4974 0
-13669 -4824 -4945 -4976 0
-13669 -4824 -4943 -4978 0
-13669 -4824 -4941 -4980 0
-13669 -4824 -4939 -4982 0
-13669 -4824 -4937 -4984 0
-13669 -4824 -4935 -4986 0
-13669 -4824 -4933 -4988 0
-13669 -4824 -4931 -4990 0
-13669 -4824 -4929 -4992 0
-13669 -4824 -4927 -4994 0
-13669 -4824 -4925 -4996 0
-13669 -4824 -4923 -4998 0
-13669 -4824 -4921 -5000 0
-13669 -4824 -4919 -5002 0
-13669 -4824 -4917 -5004 0
-13669 -4824 -4915 -5006 0
-13669 -4824 -4913 -5008 0
-13669 -4824 -4911 -5010 0
-13669 -4824 -4909 -5012 0
-13669 -4824 -4908 -5014 0
-13669 -4822 -4968 0
-13669 -4822 -4953 -4970 0
-13669 -4822 -4951 -4972 0
-13669 -4822 -4949 -4974 0
-13669 -4822 -4947 -4976 0
-13669 -4822 -4945 -4978 0
-13669 -4822 -4943 -4980 0
-13669 -4822 -4941 -4982 0
-13669 -4822 -4939 -4984 0
-13669 -4822 -4937 -4986 0
-13669 -4822 -4935 -4988 0
-13669 -4822 -4933 -4990 0
-13669 -4822 -4931 -4992 0
-13669 -4822 -4929 -4994 0
-13669 -4822 -4927 -4996 0
-13669 -4822 -4925 -4998 0
-13669 -4822 -4923 -5000 0
-13669 -4822 -4921 -5002 0
-13669 -4822 -4919 -5004 0
-13669 -4822 -4917 -5006 0
-13669 -4822 -4915 -5008 0
-13669 -4822 -4913 -5010 0
-13669 -4822 -4911 -5012 0
-13669 -4822 -4909 -5014 0
-13669 -4822 -4908 -5016 0
-13669 -4820 -4970 0
-13669 -4820 -4953 -4972 0
-13669 -4820 -4951 -4974 0
-13669 -4820 -4949 -4976 0
-13669 -4820 -4947 -4978 0
-13669 -4820 -4945 -4980 0
-13669 -4820 -4943 -4982 0
-13669 -4820 -4941 -4984 0
-13669 -4820 -4939 -4986 0
-13669 -4820 -4937 -4988 0
-13669 -4820 -4935 -4990 0
-13669 -4820 -4933 -4992 0
-13669 -4820 -4931 -4994 0
-13669 -4820 -4929 -4996 0
-13669 -4820 -4927 -4998 0
-13669 -4820 -4925 -5000 0
-13669 -4820 -4923 -5002 0
-13669 -4820 -4921 -5004 0
-13669 -4820 -4919 -5006 0
-13669 -4820 -4917 -5008 0
-13669 -4820 -4915 -5010 0
-13669 -4820 -4913 -5012 0
-13669 -4820 -4911 -5014 0
-13669 -4820 -4909 -5016 0
-13669 -4820 -4908 0
-13669 -4818 -4972 0
-13669 -4818 -4953 -4974 0
-13669 -4818 -4951 -4976 0
-13669 -4818 -4949 -4978 0
-13669 -4818 -4947 -4980 0
-13669 -4818 -4945 -4982 0
-13669 -4818 -4943 -4984 0
-13669 -4818 -4941 -4986 0
-13669 -4818 -4939 -4988 0
-13669 -4818 -4937 -4990 0
-13669 -4818 -4935 -4992 0
-13669 -4818 -4933 -4994 0
-13669 -4818 -4931 -4996 0
-13669 -4818 -4929 -4998 0
-13669 -4818 -4927 -5000 0
-13669 -4818 -4925 -5002 0
-13669 -4818 -4923 -5004 0
-13669 -4818 -4921 -5006 0
-13669 -4818 -4919 -5008 0
-13669 -4818 -4917 -5010 0
-13669 -4818 -4915 -5012 0
-13669 -4818 -4913 -5014 0
-13669 -4818 -4911 -5016 0
-13669 -4818 -4909 0
-13669 -4818 -4908 0
-13669 -4816 -4974 0
-13669 -4816 -4953 -4976 0
-13669 -4816 -4951 -4978 0
-13669 -4816 -4949 -4980 0
-13669 -4816 -4947 -4982 0
-13669 -4816 -4945 -4984 0
-13669 -4816 -4943 -4986 0
-13669 -4816 -4941 -4988 0
-13669 -4816 -4939 -4990 0
-13669 -4816 -4937 -4992 0
-13669 -4816 -4935 -4994 0
-13669 -4816 -4933 -4996 0
-13669 -4816 -4931 -4998 0
-13669 -4816 -4929 -5000 0
-13669 -4816 -4927 -5002 0
-13669 -4816 -4925 -5004 0
-13669 -4816 -4923 -5006 0
-13669 -4816 -4921 -5008 0
-13669 -4816 -4919 -5010 0
-13669 -4816 -4917 -5012 0
-13669 -4816 -4915 -5014 0
-13669 -4816 -4913 -5016 0
-13669 -4816 -4911 0
-13669 -4816 -4909 0
-13669 -4816 -4908 0
-13669 -4815 -4976 0
-13669 -4815 -4953 -4978 0
-13669 -4815 -4951 -4980 0
-13669 -4815 -4949 -4982 0
-13669 -4815 -4947 -4984 0
-13669 -4815 -4945 -4986 0
-13669 -4815 -4943 -4988 0
-13669 -4815 -4941 -4990 0
-13669 -4815 -4939 -4992 0
-13669 -4815 -4937 -4994 0
-13669 -4815 -4935 -4996 0
-13669 -4815 -4933 -4998 0
-13669 -4815 -4931 -5000 0
-13669 -4815 -4929 -5002 0
-13669 -4815 -4927 -5004 0
-13669 -4815 -4925 -5006 0
-13669 -4815 -4923 -5008 0
-13669 -4815 -4921 -5010 0
-13669 -4815 -4919 -5012 0
-13669 -4815 -4917 -5014 0
-13669 -4815 -4915 -5016 0
-13669 -4815 -4913 0
-13669 -4815 -4911 0
-13669 -4815 -4909 0
-13669 -4815 -4908 0
13669 4913 5016 0
13669 4915 5014 0
13669 4917 5012 0
13669 4919 5010 0
13669 4921 5008 0
13669 4923 5006 0
13669 4925 5004 0
13669 4927 5002 0
13669 4929 5000 0
13669 4931 4998 0
13669 4933 4996 0
13669 4935 4994 0
13669 4937 4992 0
13669 4939 4990 0
13669 4941 4988 0
13669 4943 4986 0
13669 4945 4984 0
13669 4947 4982 0
13669 4949 4980 0
13669 4951 4978 0
13669 4953 4976 0
13669 4815 4911 5016 0
13669 4815 4913 5014 0
13669 4815 4915 5012 0
13669 4815 4917 5010 0
13669 4815 4919 5008 0
13669 4815 4921 5006 0
13669 4815 4923 5004 0
13669 4815 4925 5002 0
13669 4815 4927 5000 0
13669 4815 4929 4998 0
13669 4815 4931 4996 0
13669 4815 4933 4994 0
13669 4815 4935 4992 0
13669 4815 4937 4990 0
13669 4815 4939 4988 0
13669 4815 4941 4986 0
13669 4815 4943 4984 0
13669 4815 4945 4982 0
13669 4815 4947 4980 0
13669 4815 4949 4978 0
13669 4815 4951 4976 0
13669 4815 4953 4974 0
13669 4816 4909 5016 0
13669 4816 4911 5014 0
13669 4816 4913 5012 0
13669 4816 4915 5010 0
13669 4816 4917 5008 0
13669 4816 4919 5006 0
13669 4816 4921 5004 0
13669 4816 4923 5002 0
13669 4816 4925 5000 0
13669 4816 4927 4998 0
13669 4816 4929 4996 0
13669 4816 4931 4994 0
13669 4816 4933 4992 0
13669 4816 4935 4990 0
13669 4816 4937 4988 0
13669 4816 4939 4986 0
13669 4816 4941 4984 0
13669 4816 4943 4982 0
13669 4816 4945 4980 0
13669 4816 4947 4978 0
13669 4816 4949 4976 0
13669 4816 4951 4974 0
13669 4816 4953 4972 0
13669 4818 4908 5016 0
13669 4818 4909 5014 0
13669 4818 4911 5012 0
13669 4818 4913 5010 0
13669 4818 4915 5008 0
13669 4818 4917 5006 0
13669 4818 4919 5004 0
13669 4818 4921 5002 0
13669 4818 4923 5000 0
13669 4818 4925 4998 0
13669 4818 4927 4996 0
13669 4818 4929 4994 0
13669 4818 4931 4992 0
13669 4818 4933 4990 0
13669 4818 4935 4988 0
13669 4818 4937 4986 0
13669 4818 4939 4984 0
13669 4818 4941 4982 0
13669 4818 4943 4980 0
13669 4818 4945 4978 0
13669 4818 4947 4976 0
13669 4818 4949 4974 0
13669 4818 4951 4972 0
13669 4818 4953 4970 0
13669 4820 5016 0
13669 4820 4908 5014 0
13669 4820 4909 5012 0
13669 4820 4911 5010 0
13669 4820 4913 5008 0
13669 4820 4915 5006 0
13669 4820 4917 5004 0
13669 4820 4919 5002 0
13669 4820 4921 5000 0
13669 4820 4923 4998 0
13669 4820 4925 4996 0
13669 4820 4927 4994 0
13669 4820 4929 4992 0
13669 4820 4931 4990 0
13669 4820 4933 4988 0
13669 4820 4935 4986 0
13669 4820 4937 4984 0
13669 4820 4939 4982 0
13669 4820 4941 4980 0
13669 4820 4943 4978 0
13669 4820 4945 4976 0
13669 4820 4947 4974 0
13669 4820 4949 4972 0
13669 4820 4951 4970 0
13669 4820 4953 4968 0
13669 4822 5014 0
13669 4822 4908 5012 0
13669 4822 4909 5010 0
13669 4822 4911 5008 0
13669 4822 4913 5006 0
13669 4822 4915 5004 0
13669 4822 4917 5002 0
13669 4822 4919 5000 0
13669 4822 4921 4998 0
13669 4822 4923 4996 0
13669 4822 4925 4994 0
13669 4822 4927 4992 0
13669 4822 4929 4990 0
13669 4822 4931 4988 0
13669 4822 4933 4986 0
13669 4822 4935 4984 0
13669 4822 4937 4982 0
13669 4822 4939 4980 0
13669 4822 4941 4978 0
13669 4822 4943 4976 0
13669 4822 4945 4974 0
13669 4822 4947 4972 0
13669 4822 4949 4970 0
13669 4822 4951 4968 0
13669 4822 4953 4966 0
13669 4824 5012 0
13669 4824 4908 5010 0
13669 4824 4909 5008 0
13669 4824 4911 5006 0
13669 4824 4913 5004 0
13669 4824 4915 5002 0
13669 4824 4917 5000 0
13669 4824 4919 4998 0
13669 4824 4921 4996 0
13669 4824 4923 4994 0
13669 4824 4925 4992 0
13669 4824 4927 4990 0
13669 4824 4929 4988 0
13669 4824 4931 4986 0
13669 4824 4933 4984 0
13669 4824 4935 4982 0
13669 4824 4937 4980 0
13669 4824 4939 4978 0
13669 4824 4941 4976 0
13669 4824 4943 4974 0
13669 4824 4945 4972 0
13669 4824 4947 4970 0
13669 4824 4949 4968 0
13669 4824 4951 4966 0
13669 4824 4953 4964 0
13669 4826 5010 0
13669 4826 4908 5008 0
13669 4826 4909 5006 0
13669 4826 4911 5004 0
13669 4826 4913 5002 0
13669 4826 4915 5000 0
13669 4826 4917 4998 0
13669 4826 4919 4996 0
13669 4826 4921 4994 0
13669 4826 4923 4992 0
13669 4826 4925 4990 0
13669 4826 4927 4988 0
13669 4826 4929 4986 0
13669 4826 4931 4984 0
13669 4826 4933 4982 0
13669 4826 4935 4980 0
13669 4826 4937 4978 0
13669 4826 4939 4976 0
13669 4826 4941 4974 0
13669 4826 4943 4972 0
13669 4826 4945 4970 0
13669 4826 4947 4968 0
13669 4826 4949 4966 0
13669 4826 4951 4964 0
13669 4826 4953 4962 0
13669 4828 5008 0
13669 4828 4908 5006 0
13669 4828 4909 5004 0
13669 4828 4911 5002 0
13669 4828 4913 5000 0
13669 4828 4915 4998 0
13669 4828 4917 4996 0
13669 4828 4919 4994 0
13669 4828 4921 4992 0
13669 4828 4923 4990 0
13669 4828 4925 4988 0
13669 4828 4927 4986 0
13669 4828 4929 4984 0
13669 4828 4931 4982 0
13669 4828 4933 4980 0
13669 4828 4935 4978 0
13669 4828 4937 4976 0
13669 4828 4939 4974 0
13669 4828 4941 4972 0
13669 4828 4943 4970 0
13669 4828 4945 4968 0
13669 4828 4947 4966 0
13669 4828 4949 4964 0
13669 4828 4951 4962 0
13669 4828 4953 4960 0
13669 4830 5006 0
13669 4830 4908 5004 0
13669 4830 4909 5002 0
13669 4830 4911 5000 0
13669 4830 4913 4998 0
13669 4830 4915 4996 0
13669 4830 4917 4994 0
13669 4830 4919 4992 0
13669 4830 4921 4990 0
13669 4830 4923 4988 0
13669 4830 4925 4986 0
13669 4830 4927 4984 0
13669 4830 4929 4982 0
13669 4830 4931 4980 0
13669 4830 4933 4978 0
13669 4830 4935 4976 0
13669 4830 4937 4974 0
13669 4830 4939 4972 0
13669 4830 4941 4970 0
13669 4830 4943 4968 0
13669 4830 4945 4966 0
13669 4830 4947 4964 0
13669 4830 4949 4962 0
13669 4830 4951 4960 0
13669 4830 4953 4958 0
13669 4832 5004 0
13669 4832 4908 5002 0
13669 4832 4909 5000 0
13669 4832 4911 4998 0
13669 4832 4913 4996 0
13669 4832 4915 4994 0
13669 4832 4917 4992 0
13669 4832 4919 4990 0
13669 4832 4921 4988 0
13669 4832 4923 4986 0
13669 4832 4925 4984 0
13669 4832 4927 4982 0
13669 4832 4929 4980 0
13669 4832 4931 4978 0
13669 4832 4933 4976 0
13669 4832 4935 4974 0
13669 4832 4937 4972 0
13669 4832 4939 4970 0
13669 4832 4941 4968 0
13669 4832 4943 4966 0
13669 4832 4945 4964 0
13669 4832 4947 4962 0
13669 4832 4949 4960 0
13669 4832 4951 4958 0
13669 4832 4953 4956 0
13669 4834 5002 0
13669 4834 4908 5000 0
13669 4834 4909 4998 0
13669 4834 4911 4996 0
13669 4834 4913 4994 0
13669 4834 4915 4992 0
13669 4834 4917 4990 0
13669 4834 4919 4988 0
13669 4834 4921 4986 0
13669 4834 4923 4984 0
13669 4834 4925 4982 0
13669 4834 4927 4980 0
13669 4834 4929 4978 0
13669 4834 4931 4976 0
13669 4834 4933 4974 0
13669 4834 4935 4972 0
13669 4834 4937 4970 0
13669 4834 4939 4968 0
13669 4834 4941 4966 0
13669 4834 4943 4964 0
13669 4834 4945 4962 0
13669 4834 4947 4960 0
13669 4834 4949 4958 0
13669 4834 4951 4956 0
13669 4834 4953 4955 0
13669 4836 5000 0
13669 4836 4908 4998 0
13669 4836 4909 4996 0
13669 4836 4911 4994 0
13669 4836 4913 4992 0
13669 4836 4915 4990 0
13669 4836 4917 4988 0
13669 4836 4919 4986 0
13669 4836 4921 4984 0
13669 4836 4923 4982 0
13669 4836 4925 4980 0
13669 4836 4927 4978 0
13669 4836 4929 4976 0
13669 4836 4931 4974 0
13669 4836 4933 4972 0
13669 4836 4935 4970 0
13669 4836 4937 4968 0
13669 4836 4939 4966 0
13669 4836 4941 4964 0
13669 4836 4943 4962 0
13669 4836 4945 4960 0
13669 4836 4947 4958 0
13669 4836 4949 4956 0
13669 4836 4951 4955 0
13669 4836 4953 0
13669 4838 4998 0
13669 4838 4908 4996 0
13669 4838 4909 4994 0
13669 4838 4911 4992 0
13669 4838 4913 4990 0
13669 4838 4915 4988 0
13669 4838 4917 4986 0
13669 4838 4919 4984 0
13669 4838 4921 4982 0
13669 4838 4923 4980 0
13669 4838 4925 4978 0
13669 4838 4927 4976 0
13669 4838 4929 4974 0
13669 4838 4931 4972 0
13669 4838 4933 4970 0
13669 4838 4935 4968 0
13669 4838 4937 4966 0
13669 4838 4939 4964 0
13669 4838 4941 4962 0
13669 4838 4943 4960 0
13669 4838 4945 4958 0
13669 4838 4947 4956 0
13669 4838 4949 4955 0
13669 4838 4951 0
13669 4838 4953 0
13669 4840 4996 0
13669 4840 4908 4994 0
13669 4840 4909 4992 0
13669 4840 4911 4990 0
13669 4840 4913 4988 0
13669 4840 4915 4986 0
13669 4840 4917 4984 0
13669 4840 4919 4982 0
13669 4840 4921 4980 0
13669 4840 4923 4978 0
13669 4840 4925 4976 0
13669 4840 4927 4974 0
13669 4840 4929 4972 0
13669 4840 4931 4970 0
13669 4840 4933 4968 0
13669 4840 4935 4966 0
13669 4840 4937 4964 0
13669 4840 4939 4962 0
13669 4840 4941 4960 0
13669 4840 4943 4958 0
13669 4840 4945 4956 0
13669 4840 4947 4955 0
13669 4840 4949 0
13669 4840 4951 0
13669 4840 4953 0
13669 4842 4994 0
13669 4842 4908 4992 0
13669 4842 4909 4990 0
13669 4842 4911 4988 0
13669 4842 4913 4986 0
13669 4842 4915 4984 0
13669 4842 4917 4982 0
13669 4842 4919 4980 0
13669 4842 4921 4978 0
13669 4842 4923 4976 0
13669 4842 4925 4974 0
13669 4842 4927 4972 0
13669 4842 4929 4970 0
13669 4842 4931 4968 0
13669 4842 4933 4966 0
13669 4842 4935 4964 0
13669 4842 4937 4962 0
13669 4842 4939 4960 0
13669 4842 4941 4958 0
13669 4842 4943 4956 0
13669 4842 4945 4955 0
13669 4842 4947 0
13669 4842 4949 0
13669 4842 4951 0
13669 4842 4953 0
13669 4844 4992 0
13669 4844 4908 4990 0
13669 4844 4909 4988 0
13669 4844 4911 4986 0
13669 4844 4913 4984 0
13669 4844 4915 4982 0
13669 4844 4917 4980 0
13669 4844 4919 4978 0
13669 4844 4921 4976 0
13669 4844 4923 4974 0
13669 4844 4925 4972 0
13669 4844 4927 4970 0
13669 4844 4929 4968 0
13669 4844 4931 4966 0
13669 4844 4933 4964 0
13669 4844 4935 4962 0
13669 4844 4937 4960 0
13669 4844 4939 4958 0
13669 4844 4941 4956 0
13669 4844 4943 4955 0
13669 4844 4945 0
13669 4844 4947 0
13669 4844 4949 0
13669 4844 4951 0
13669 4844 4953 0
c (((aux546 + aux549 + aux550)<=36)=tv=SATLiteral(13670))
-13670 5149 5250 0
-13670 5151 5248 0
-13670 5153 5246 0
-13670 5155 5244 0
-13670 5157 5242 0
-13670 5159 5240 0
-13670 5161 5238 0
-13670 5163 5236 0
-13670 5165 5234 0
-13670 5167 5232 0
-13670 5169 5230 0
-13670 5171 5228 0
-13670 5173 5226 0
-13670 5175 5224 0
-13670 5177 5222 0
-13670 5179 5220 0
-13670 5181 5218 0
-13670 5183 5216 0
-13670 5185 5214 0
-13670 5187 5212 0
-13670 5049 5147 5250 0
-13670 5049 5149 5248 0
-13670 5049 5151 5246 0
-13670 5049 5153 5244 0
-13670 5049 5155 5242 0
-13670 5049 5157 5240 0
-13670 5049 5159 5238 0
-13670 5049 5161 5236 0
-13670 5049 5163 5234 0
-13670 5049 5165 5232 0
-13670 5049 5167 5230 0
-13670 5049 5169 5228 0
-13670 5049 5171 5226 0
-13670 5049 5173 5224 0
-13670 5049 5175 5222 0
-13670 5049 5177 5220 0
-13670 5049 5179 5218 0
-13670 5049 5181 5216 0
-13670 5049 5183 5214 0
-13670 5049 5185 5212 0
-13670 5049 5187 5210 0
-13670 5050 5145 5250 0
-13670 5050 5147 5248 0
-13670 5050 5149 5246 0
-13670 5050 5151 5244 0
-13670 5050 5153 5242 0
-13670 5050 5155 5240 0
-13670 5050 5157 5238 0
-13670 5050 5159 5236 0
-13670 5050 5161 5234 0
-13670 5050 5163 5232 0
-13670 5050 5165 5230 0
-13670 5050 5167 5228 0
-13670 5050 5169 5226 0
-13670 5050 5171 5224 0
-13670 5050 5173 5222 0
-13670 5050 5175 5220 0
-13670 5050 5177 5218 0
-13670 5050 5179 5216 0
-13670 5050 5181 5214 0
-13670 5050 5183 5212 0
-13670 5050 5185 5210 0
-13670 5050 5187 5208 0
-13670 5052 5143 5250 0
-13670 5052 5145 5248 0
-13670 5052 5147 5246 0
-13670 5052 5149 5244 0
-13670 5052 5151 5242 0
-13670 5052 5153 5240 0
-13670 5052 5155 5238 0
-13670 5052 5157 5236 0
-13670 5052 5159 5234 0
-13670 5052 5161 5232 0
-13670 5052 5163 5230 0
-13670 5052 5165 5228 0
-13670 5052 5167 5226 0
-13670 5052 5169 5224 0
-13670 5052 5171 5222 0
-13670 5052 5173 5220 0
-13670 5052 5175 5218 0
-13670 5052 5177 5216 0
-13670 5052 5179 5214 0
-13670 5052 5181 5212 0
-13670 5052 5183 5210 0
-13670 5052 5185 5208 0
-13670 5052 5187 5206 0
-13670 5054 5142 5250 0
-13670 5054 5143 5248 0
-13670 5054 5145 5246 0
-13670 5054 5147 5244 0
-13670 5054 5149 5242 0
-13670 5054 5151 5240 0
-13670 5054 5153 5238 0
-13670 5054 5155 5236 0
-13670 5054 5157 5234 0
-13670 5054 5159 5232 0
-13670 5054 5161 5230 0
-13670 5054 5163 5228 0
-13670 5054 5165 5226 0
-13670 5054 5167 5224 0
-13670 5054 5169 5222 0
-13670 5054 5171 5220 0
-13670 5054 5173 5218 0
-13670 5054 5175 5216 0
-13670 5054 5177 5214 0
-13670 5054 5179 5212 0
-13670 5054 5181 5210 0
-13670 5054 5183 5208 0
-13670 5054 5185 5206 0
-13670 5054 5187 5204 0
-13670 5056 5250 0
-13670 5056 5142 5248 0
-13670 5056 5143 5246 0
-13670 5056 5145 5244 0
-13670 5056 5147 5242 0
-13670 5056 5149 5240 0
-13670 5056 5151 5238 0
-13670 5056 5153 5236 0
-13670 5056 5155 5234 0
-13670 5056 5157 5232 0
-13670 5056 5159 5230 0
-13670 5056 5161 5228 0
-13670 5056 5163 5226 0
-13670 5056 5165 5224 0
-13670 5056 5167 5222 0
-13670 5056 5169 5220 0
-13670 5056 5171 5218 0
-13670 5056 5173 5216 0
-13670 5056 5175 5214 0
-13670 5056 5177 5212 0
-13670 5056 5179 5210 0
-13670 5056 5181 5208 0
-13670 5056 5183 5206 0
-13670 5056 5185 5204 0
-13670 5056 5187 5202 0
-13670 5058 5248 0
-13670 5058 5142 5246 0
-13670 5058 5143 5244 0
-13670 5058 5145 5242 0
-13670 5058 5147 5240 0
-13670 5058 5149 5238 0
-13670 5058 5151 5236 0
-13670 5058 5153 5234 0
-13670 5058 5155 5232 0
-13670 5058 5157 5230 0
-13670 5058 5159 5228 0
-13670 5058 5161 5226 0
-13670 5058 5163 5224 0
-13670 5058 5165 5222 0
-13670 5058 5167 5220 0
-13670 5058 5169 5218 0
-13670 5058 5171 5216 0
-13670 5058 5173 5214 0
-13670 5058 5175 5212 0
-13670 5058 5177 5210 0
-13670 5058 5179 5208 0
-13670 5058 5181 5206 0
-13670 5058 5183 5204 0
-13670 5058 5185 5202 0
-13670 5058 5187 5200 0
-13670 5060 5246 0
-13670 5060 5142 5244 0
-13670 5060 5143 5242 0
-13670 5060 5145 5240 0
-13670 5060 5147 5238 0
-13670 5060 5149 5236 0
-13670 5060 5151 5234 0
-13670 5060 5153 5232 0
-13670 5060 5155 5230 0
-13670 5060 5157 5228 0
-13670 5060 5159 5226 0
-13670 5060 5161 5224 0
-13670 5060 5163 5222 0
-13670 5060 5165 5220 0
-13670 5060 5167 5218 0
-13670 5060 5169 5216 0
-13670 5060 5171 5214 0
-13670 5060 5173 5212 0
-13670 5060 5175 5210 0
-13670 5060 5177 5208 0
-13670 5060 5179 5206 0
-13670 5060 5181 5204 0
-13670 5060 5183 5202 0
-13670 5060 5185 5200 0
-13670 5060 5187 5198 0
-13670 5062 5244 0
-13670 5062 5142 5242 0
-13670 5062 5143 5240 0
-13670 5062 5145 5238 0
-13670 5062 5147 5236 0
-13670 5062 5149 5234 0
-13670 5062 5151 5232 0
-13670 5062 5153 5230 0
-13670 5062 5155 5228 0
-13670 5062 5157 5226 0
-13670 5062 5159 5224 0
-13670 5062 5161 5222 0
-13670 5062 5163 5220 0
-13670 5062 5165 5218 0
-13670 5062 5167 5216 0
-13670 5062 5169 5214 0
-13670 5062 5171 5212 0
-13670 5062 5173 5210 0
-13670 5062 5175 5208 0
-13670 5062 5177 5206 0
-13670 5062 5179 5204 0
-13670 5062 5181 5202 0
-13670 5062 5183 5200 0
-13670 5062 5185 5198 0
-13670 5062 5187 5196 0
-13670 5064 5242 0
-13670 5064 5142 5240 0
-13670 5064 5143 5238 0
-13670 5064 5145 5236 0
-13670 5064 5147 5234 0
-13670 5064 5149 5232 0
-13670 5064 5151 5230 0
-13670 5064 5153 5228 0
-13670 5064 5155 5226 0
-13670 5064 5157 5224 0
-13670 5064 5159 5222 0
-13670 5064 5161 5220 0
-13670 5064 5163 5218 0
-13670 5064 5165 5216 0
-13670 5064 5167 5214 0
-13670 5064 5169 5212 0
-13670 5064 5171 5210 0
-13670 5064 5173 5208 0
-13670 5064 5175 5206 0
-13670 5064 5177 5204 0
-13670 5064 5179 5202 0
-13670 5064 5181 5200 0
-13670 5064 5183 5198 0
-13670 5064 5185 5196 0
-13670 5064 5187 5194 0
-13670 5066 5240 0
-13670 5066 5142 5238 0
-13670 5066 5143 5236 0
-13670 5066 5145 5234 0
-13670 5066 5147 5232 0
-13670 5066 5149 5230 0
-13670 5066 5151 5228 0
-13670 5066 5153 5226 0
-13670 5066 5155 5224 0
-13670 5066 5157 5222 0
-13670 5066 5159 5220 0
-13670 5066 5161 5218 0
-13670 5066 5163 5216 0
-13670 5066 5165 5214 0
-13670 5066 5167 5212 0
-13670 5066 5169 5210 0
-13670 5066 5171 5208 0
-13670 5066 5173 5206 0
-13670 5066 5175 5204 0
-13670 5066 5177 5202 0
-13670 5066 5179 5200 0
-13670 5066 5181 5198 0
-13670 5066 5183 5196 0
-13670 5066 5185 5194 0
-13670 5066 5187 5192 0
-13670 5068 5238 0
-13670 5068 5142 5236 0
-13670 5068 5143 5234 0
-13670 5068 5145 5232 0
-13670 5068 5147 5230 0
-13670 5068 5149 5228 0
-13670 5068 5151 5226 0
-13670 5068 5153 5224 0
-13670 5068 5155 5222 0
-13670 5068 5157 5220 0
-13670 5068 5159 5218 0
-13670 5068 5161 5216 0
-13670 5068 5163 5214 0
-13670 5068 5165 5212 0
-13670 5068 5167 5210 0
-13670 5068 5169 5208 0
-13670 5068 5171 5206 0
-13670 5068 5173 5204 0
-13670 5068 5175 5202 0
-13670 5068 5177 5200 0
-13670 5068 5179 5198 0
-13670 5068 5181 5196 0
-13670 5068 5183 5194 0
-13670 5068 5185 5192 0
-13670 5068 5187 5190 0
-13670 5070 5236 0
-13670 5070 5142 5234 0
-13670 5070 5143 5232 0
-13670 5070 5145 5230 0
-13670 5070 5147 5228 0
-13670 5070 5149 5226 0
-13670 5070 5151 5224 0
-13670 5070 5153 5222 0
-13670 5070 5155 5220 0
-13670 5070 5157 5218 0
-13670 5070 5159 5216 0
-13670 5070 5161 5214 0
-13670 5070 5163 5212 0
-13670 5070 5165 5210 0
-13670 5070 5167 5208 0
-13670 5070 5169 5206 0
-13670 5070 5171 5204 0
-13670 5070 5173 5202 0
-13670 5070 5175 5200 0
-13670 5070 5177 5198 0
-13670 5070 5179 5196 0
-13670 5070 5181 5194 0
-13670 5070 5183 5192 0
-13670 5070 5185 5190 0
-13670 5070 5187 5189 0
-13670 5072 5234 0
-13670 5072 5142 5232 0
-13670 5072 5143 5230 0
-13670 5072 5145 5228 0
-13670 5072 5147 5226 0
-13670 5072 5149 5224 0
-13670 5072 5151 5222 0
-13670 5072 5153 5220 0
-13670 5072 5155 5218 0
-13670 5072 5157 5216 0
-13670 5072 5159 5214 0
-13670 5072 5161 5212 0
-13670 5072 5163 5210 0
-13670 5072 5165 5208 0
-13670 5072 5167 5206 0
-13670 5072 5169 5204 0
-13670 5072 5171 5202 0
-13670 5072 5173 5200 0
-13670 5072 5175 5198 0
-13670 5072 5177 5196 0
-13670 5072 5179 5194 0
-13670 5072 5181 5192 0
-13670 5072 5183 5190 0
-13670 5072 5185 5189 0
-13670 5072 5187 0
-13670 5074 5232 0
-13670 5074 5142 5230 0
-13670 5074 5143 5228 0
-13670 5074 5145 5226 0
-13670 5074 5147 5224 0
-13670 5074 5149 5222 0
-13670 5074 5151 5220 0
-13670 5074 5153 5218 0
-13670 5074 5155 5216 0
-13670 5074 5157 5214 0
-13670 5074 5159 5212 0
-13670 5074 5161 5210 0
-13670 5074 5163 5208 0
-13670 5074 5165 5206 0
-13670 5074 5167 5204 0
-13670 5074 5169 5202 0
-13670 5074 5171 5200 0
-13670 5074 5173 5198 0
-13670 5074 5175 5196 0
-13670 5074 5177 5194 0
-13670 5074 5179 5192 0
-13670 5074 5181 5190 0
-13670 5074 5183 5189 0
-13670 5074 5185 0
-13670 5074 5187 0
-13670 5076 5230 0
-13670 5076 5142 5228 0
-13670 5076 5143 5226 0
-13670 5076 5145 5224 0
-13670 5076 5147 5222 0
-13670 5076 5149 5220 0
-13670 5076 5151 5218 0
-13670 5076 5153 5216 0
-13670 5076 5155 5214 0
-13670 5076 5157 5212 0
-13670 5076 5159 5210 0
-13670 5076 5161 5208 0
-13670 5076 5163 5206 0
-13670 5076 5165 5204 0
-13670 5076 5167 5202 0
-13670 5076 5169 5200 0
-13670 5076 5171 5198 0
-13670 5076 5173 5196 0
-13670 5076 5175 5194 0
-13670 5076 5177 5192 0
-13670 5076 5179 5190 0
-13670 5076 5181 5189 0
-13670 5076 5183 0
-13670 5076 5185 0
-13670 5076 5187 0
-13670 5078 5228 0
-13670 5078 5142 5226 0
-13670 5078 5143 5224 0
-13670 5078 5145 5222 0
-13670 5078 5147 5220 0
-13670 5078 5149 5218 0
-13670 5078 5151 5216 0
-13670 5078 5153 5214 0
-13670 5078 5155 5212 0
-13670 5078 5157 5210 0
-13670 5078 5159 5208 0
-13670 5078 5161 5206 0
-13670 5078 5163 5204 0
-13670 5078 5165 5202 0
-13670 5078 5167 5200 0
-13670 5078 5169 5198 0
-13670 5078 5171 5196 0
-13670 5078 5173 5194 0
-13670 5078 5175 5192 0
-13670 5078 5177 5190 0
-13670 5078 5179 5189 0
-13670 5078 5181 0
-13670 5078 5183 0
-13670 5078 5185 0
-13670 5078 5187 0
13670 -5181 -5189 0
13670 -5179 -5190 0
13670 -5177 -5192 0
13670 -5175 -5194 0
13670 -5173 -5196 0
13670 -5171 -5198 0
13670 -5169 -5200 0
13670 -5167 -5202 0
13670 -5165 -5204 0
13670 -5163 -5206 0
13670 -5161 -5208 0
13670 -5159 -5210 0
13670 -5157 -5212 0
13670 -5155 -5214 0
13670 -5153 -5216 0
13670 -5151 -5218 0
13670 -5149 -5220 0
13670 -5147 -5222 0
13670 -5145 -5224 0
13670 -5143 -5226 0
13670 -5142 -5228 0
13670 -5078 -5183 -5189 0
13670 -5078 -5181 -5190 0
13670 -5078 -5179 -5192 0
13670 -5078 -5177 -5194 0
13670 -5078 -5175 -5196 0
13670 -5078 -5173 -5198 0
13670 -5078 -5171 -5200 0
13670 -5078 -5169 -5202 0
13670 -5078 -5167 -5204 0
13670 -5078 -5165 -5206 0
13670 -5078 -5163 -5208 0
13670 -5078 -5161 -5210 0
13670 -5078 -5159 -5212 0
13670 -5078 -5157 -5214 0
13670 -5078 -5155 -5216 0
13670 -5078 -5153 -5218 0
13670 -5078 -5151 -5220 0
13670 -5078 -5149 -5222 0
13670 -5078 -5147 -5224 0
13670 -5078 -5145 -5226 0
13670 -5078 -5143 -5228 0
13670 -5078 -5142 -5230 0
13670 -5076 -5185 -5189 0
13670 -5076 -5183 -5190 0
13670 -5076 -5181 -5192 0
13670 -5076 -5179 -5194 0
13670 -5076 -5177 -5196 0
13670 -5076 -5175 -5198 0
13670 -5076 -5173 -5200 0
13670 -5076 -5171 -5202 0
13670 -5076 -5169 -5204 0
13670 -5076 -5167 -5206 0
13670 -5076 -5165 -5208 0
13670 -5076 -5163 -5210 0
13670 -5076 -5161 -5212 0
13670 -5076 -5159 -5214 0
13670 -5076 -5157 -5216 0
13670 -5076 -5155 -5218 0
13670 -5076 -5153 -5220 0
13670 -5076 -5151 -5222 0
13670 -5076 -5149 -5224 0
13670 -5076 -5147 -5226 0
13670 -5076 -5145 -5228 0
13670 -5076 -5143 -5230 0
13670 -5076 -5142 -5232 0
13670 -5074 -5187 -5189 0
13670 -5074 -5185 -5190 0
13670 -5074 -5183 -5192 0
13670 -5074 -5181 -5194 0
13670 -5074 -5179 -5196 0
13670 -5074 -5177 -5198 0
13670 -5074 -5175 -5200 0
13670 -5074 -5173 -5202 0
13670 -5074 -5171 -5204 0
13670 -5074 -5169 -5206 0
13670 -5074 -5167 -5208 0
13670 -5074 -5165 -5210 0
13670 -5074 -5163 -5212 0
13670 -5074 -5161 -5214 0
13670 -5074 -5159 -5216 0
13670 -5074 -5157 -5218 0
13670 -5074 -5155 -5220 0
13670 -5074 -5153 -5222 0
13670 -5074 -5151 -5224 0
13670 -5074 -5149 -5226 0
13670 -5074 -5147 -5228 0
13670 -5074 -5145 -5230 0
13670 -5074 -5143 -5232 0
13670 -5074 -5142 -5234 0
13670 -5072 -5189 0
13670 -5072 -5187 -5190 0
13670 -5072 -5185 -5192 0
13670 -5072 -5183 -5194 0
13670 -5072 -5181 -5196 0
13670 -5072 -5179 -5198 0
13670 -5072 -5177 -5200 0
13670 -5072 -5175 -5202 0
13670 -5072 -5173 -5204 0
13670 -5072 -5171 -5206 0
13670 -5072 -5169 -5208 0
13670 -5072 -5167 -5210 0
13670 -5072 -5165 -5212 0
13670 -5072 -5163 -5214 0
13670 -5072 -5161 -5216 0
13670 -5072 -5159 -5218 0
13670 -5072 -5157 -5220 0
13670 -5072 -5155 -5222 0
13670 -5072 -5153 -5224 0
13670 -5072 -5151 -5226 0
13670 -5072 -5149 -5228 0
13670 -5072 -5147 -5230 0
13670 -5072 -5145 -5232 0
13670 -5072 -5143 -5234 0
13670 -5072 -5142 -5236 0
13670 -5070 -5190 0
13670 -5070 -5187 -5192 0
13670 -5070 -5185 -5194 0
13670 -5070 -5183 -5196 0
13670 -5070 -5181 -5198 0
13670 -5070 -5179 -5200 0
13670 -5070 -5177 -5202 0
13670 -5070 -5175 -5204 0
13670 -5070 -5173 -5206 0
13670 -5070 -5171 -5208 0
13670 -5070 -5169 -5210 0
13670 -5070 -5167 -5212 0
13670 -5070 -5165 -5214 0
13670 -5070 -5163 -5216 0
13670 -5070 -5161 -5218 0
13670 -5070 -5159 -5220 0
13670 -5070 -5157 -5222 0
13670 -5070 -5155 -5224 0
13670 -5070 -5153 -5226 0
13670 -5070 -5151 -5228 0
13670 -5070 -5149 -5230 0
13670 -5070 -5147 -5232 0
13670 -5070 -5145 -5234 0
13670 -5070 -5143 -5236 0
13670 -5070 -5142 -5238 0
13670 -5068 -5192 0
13670 -5068 -5187 -5194 0
13670 -5068 -5185 -5196 0
13670 -5068 -5183 -5198 0
13670 -5068 -5181 -5200 0
13670 -5068 -5179 -5202 0
13670 -5068 -5177 -5204 0
13670 -5068 -5175 -5206 0
13670 -5068 -5173 -5208 0
13670 -5068 -5171 -5210 0
13670 -5068 -5169 -5212 0
13670 -5068 -5167 -5214 0
13670 -5068 -5165 -5216 0
13670 -5068 -5163 -5218 0
13670 -5068 -5161 -5220 0
13670 -5068 -5159 -5222 0
13670 -5068 -5157 -5224 0
13670 -5068 -5155 -5226 0
13670 -5068 -5153 -5228 0
13670 -5068 -5151 -5230 0
13670 -5068 -5149 -5232 0
13670 -5068 -5147 -5234 0
13670 -5068 -5145 -5236 0
13670 -5068 -5143 -5238 0
13670 -5068 -5142 -5240 0
13670 -5066 -5194 0
13670 -5066 -5187 -5196 0
13670 -5066 -5185 -5198 0
13670 -5066 -5183 -5200 0
13670 -5066 -5181 -5202 0
13670 -5066 -5179 -5204 0
13670 -5066 -5177 -5206 0
13670 -5066 -5175 -5208 0
13670 -5066 -5173 -5210 0
13670 -5066 -5171 -5212 0
13670 -5066 -5169 -5214 0
13670 -5066 -5167 -5216 0
13670 -5066 -5165 -5218 0
13670 -5066 -5163 -5220 0
13670 -5066 -5161 -5222 0
13670 -5066 -5159 -5224 0
13670 -5066 -5157 -5226 0
13670 -5066 -5155 -5228 0
13670 -5066 -5153 -5230 0
13670 -5066 -5151 -5232 0
13670 -5066 -5149 -5234 0
13670 -5066 -5147 -5236 0
13670 -5066 -5145 -5238 0
13670 -5066 -5143 -5240 0
13670 -5066 -5142 -5242 0
13670 -5064 -5196 0
13670 -5064 -5187 -5198 0
13670 -5064 -5185 -5200 0
13670 -5064 -5183 -5202 0
13670 -5064 -5181 -5204 0
13670 -5064 -5179 -5206 0
13670 -5064 -5177 -5208 0
13670 -5064 -5175 -5210 0
13670 -5064 -5173 -5212 0
13670 -5064 -5171 -5214 0
13670 -5064 -5169 -5216 0
13670 -5064 -5167 -5218 0
13670 -5064 -5165 -5220 0
13670 -5064 -5163 -5222 0
13670 -5064 -5161 -5224 0
13670 -5064 -5159 -5226 0
13670 -5064 -5157 -5228 0
13670 -5064 -5155 -5230 0
13670 -5064 -5153 -5232 0
13670 -5064 -5151 -5234 0
13670 -5064 -5149 -5236 0
13670 -5064 -5147 -5238 0
13670 -5064 -5145 -5240 0
13670 -5064 -5143 -5242 0
13670 -5064 -5142 -5244 0
13670 -5062 -5198 0
13670 -5062 -5187 -5200 0
13670 -5062 -5185 -5202 0
13670 -5062 -5183 -5204 0
13670 -5062 -5181 -5206 0
13670 -5062 -5179 -5208 0
13670 -5062 -5177 -5210 0
13670 -5062 -5175 -5212 0
13670 -5062 -5173 -5214 0
13670 -5062 -5171 -5216 0
13670 -5062 -5169 -5218 0
13670 -5062 -5167 -5220 0
13670 -5062 -5165 -5222 0
13670 -5062 -5163 -5224 0
13670 -5062 -5161 -5226 0
13670 -5062 -5159 -5228 0
13670 -5062 -5157 -5230 0
13670 -5062 -5155 -5232 0
13670 -5062 -5153 -5234 0
13670 -5062 -5151 -5236 0
13670 -5062 -5149 -5238 0
13670 -5062 -5147 -5240 0
13670 -5062 -5145 -5242 0
13670 -5062 -5143 -5244 0
13670 -5062 -5142 -5246 0
13670 -5060 -5200 0
13670 -5060 -5187 -5202 0
13670 -5060 -5185 -5204 0
13670 -5060 -5183 -5206 0
13670 -5060 -5181 -5208 0
13670 -5060 -5179 -5210 0
13670 -5060 -5177 -5212 0
13670 -5060 -5175 -5214 0
13670 -5060 -5173 -5216 0
13670 -5060 -5171 -5218 0
13670 -5060 -5169 -5220 0
13670 -5060 -5167 -5222 0
13670 -5060 -5165 -5224 0
13670 -5060 -5163 -5226 0
13670 -5060 -5161 -5228 0
13670 -5060 -5159 -5230 0
13670 -5060 -5157 -5232 0
13670 -5060 -5155 -5234 0
13670 -5060 -5153 -5236 0
13670 -5060 -5151 -5238 0
13670 -5060 -5149 -5240 0
13670 -5060 -5147 -5242 0
13670 -5060 -5145 -5244 0
13670 -5060 -5143 -5246 0
13670 -5060 -5142 -5248 0
13670 -5058 -5202 0
13670 -5058 -5187 -5204 0
13670 -5058 -5185 -5206 0
13670 -5058 -5183 -5208 0
13670 -5058 -5181 -5210 0
13670 -5058 -5179 -5212 0
13670 -5058 -5177 -5214 0
13670 -5058 -5175 -5216 0
13670 -5058 -5173 -5218 0
13670 -5058 -5171 -5220 0
13670 -5058 -5169 -5222 0
13670 -5058 -5167 -5224 0
13670 -5058 -5165 -5226 0
13670 -5058 -5163 -5228 0
13670 -5058 -5161 -5230 0
13670 -5058 -5159 -5232 0
13670 -5058 -5157 -5234 0
13670 -5058 -5155 -5236 0
13670 -5058 -5153 -5238 0
13670 -5058 -5151 -5240 0
13670 -5058 -5149 -5242 0
13670 -5058 -5147 -5244 0
13670 -5058 -5145 -5246 0
13670 -5058 -5143 -5248 0
13670 -5058 -5142 -5250 0
13670 -5056 -5204 0
13670 -5056 -5187 -5206 0
13670 -5056 -5185 -5208 0
13670 -5056 -5183 -5210 0
13670 -5056 -5181 -5212 0
13670 -5056 -5179 -5214 0
13670 -5056 -5177 -5216 0
13670 -5056 -5175 -5218 0
13670 -5056 -5173 -5220 0
13670 -5056 -5171 -5222 0
13670 -5056 -5169 -5224 0
13670 -5056 -5167 -5226 0
13670 -5056 -5165 -5228 0
13670 -5056 -5163 -5230 0
13670 -5056 -5161 -5232 0
13670 -5056 -5159 -5234 0
13670 -5056 -5157 -5236 0
13670 -5056 -5155 -5238 0
13670 -5056 -5153 -5240 0
13670 -5056 -5151 -5242 0
13670 -5056 -5149 -5244 0
13670 -5056 -5147 -5246 0
13670 -5056 -5145 -5248 0
13670 -5056 -5143 -5250 0
13670 -5056 -5142 0
13670 -5054 -5206 0
13670 -5054 -5187 -5208 0
13670 -5054 -5185 -5210 0
13670 -5054 -5183 -5212 0
13670 -5054 -5181 -5214 0
13670 -5054 -5179 -5216 0
13670 -5054 -5177 -5218 0
13670 -5054 -5175 -5220 0
13670 -5054 -5173 -5222 0
13670 -5054 -5171 -5224 0
13670 -5054 -5169 -5226 0
13670 -5054 -5167 -5228 0
13670 -5054 -5165 -5230 0
13670 -5054 -5163 -5232 0
13670 -5054 -5161 -5234 0
13670 -5054 -5159 -5236 0
13670 -5054 -5157 -5238 0
13670 -5054 -5155 -5240 0
13670 -5054 -5153 -5242 0
13670 -5054 -5151 -5244 0
13670 -5054 -5149 -5246 0
13670 -5054 -5147 -5248 0
13670 -5054 -5145 -5250 0
13670 -5054 -5143 0
13670 -5054 -5142 0
13670 -5052 -5208 0
13670 -5052 -5187 -5210 0
13670 -5052 -5185 -5212 0
13670 -5052 -5183 -5214 0
13670 -5052 -5181 -5216 0
13670 -5052 -5179 -5218 0
13670 -5052 -5177 -5220 0
13670 -5052 -5175 -5222 0
13670 -5052 -5173 -5224 0
13670 -5052 -5171 -5226 0
13670 -5052 -5169 -5228 0
13670 -5052 -5167 -5230 0
13670 -5052 -5165 -5232 0
13670 -5052 -5163 -5234 0
13670 -5052 -5161 -5236 0
13670 -5052 -5159 -5238 0
13670 -5052 -5157 -5240 0
13670 -5052 -5155 -5242 0
13670 -5052 -5153 -5244 0
13670 -5052 -5151 -5246 0
13670 -5052 -5149 -5248 0
13670 -5052 -5147 -5250 0
13670 -5052 -5145 0
13670 -5052 -5143 0
13670 -5052 -5142 0
13670 -5050 -5210 0
13670 -5050 -5187 -5212 0
13670 -5050 -5185 -5214 0
13670 -5050 -5183 -5216 0
13670 -5050 -5181 -5218 0
13670 -5050 -5179 -5220 0
13670 -5050 -5177 -5222 0
13670 -5050 -5175 -5224 0
13670 -5050 -5173 -5226 0
13670 -5050 -5171 -5228 0
13670 -5050 -5169 -5230 0
13670 -5050 -5167 -5232 0
13670 -5050 -5165 -5234 0
13670 -5050 -5163 -5236 0
13670 -5050 -5161 -5238 0
13670 -5050 -5159 -5240 0
13670 -5050 -5157 -5242 0
13670 -5050 -5155 -5244 0
13670 -5050 -5153 -5246 0
13670 -5050 -5151 -5248 0
13670 -5050 -5149 -5250 0
13670 -5050 -5147 0
13670 -5050 -5145 0
13670 -5050 -5143 0
13670 -5050 -5142 0
13670 -5049 -5212 0
13670 -5049 -5187 -5214 0
13670 -5049 -5185 -5216 0
13670 -5049 -5183 -5218 0
13670 -5049 -5181 -5220 0
13670 -5049 -5179 -5222 0
13670 -5049 -5177 -5224 0
13670 -5049 -5175 -5226 0
13670 -5049 -5173 -5228 0
13670 -5049 -5171 -5230 0
13670 -5049 -5169 -5232 0
13670 -5049 -5167 -5234 0
13670 -5049 -5165 -5236 0
13670 -5049 -5163 -5238 0
13670 -5049 -5161 -5240 0
13670 -5049 -5159 -5242 0
13670 -5049 -5157 -5244 0
13670 -5049 -5155 -5246 0
13670 -5049 -5153 -5248 0
13670 -5049 -5151 -5250 0
13670 -5049 -5149 0
13670 -5049 -5147 0
13670 -5049 -5145 0
13670 -5049 -5143 0
13670 -5049 -5142 0
c ((36<=(aux546 + aux549 + aux550))=tv=SATLiteral(13671))
-13671 -5179 -5189 0
-13671 -5177 -5190 0
-13671 -5175 -5192 0
-13671 -5173 -5194 0
-13671 -5171 -5196 0
-13671 -5169 -5198 0
-13671 -5167 -5200 0
-13671 -5165 -5202 0
-13671 -5163 -5204 0
-13671 -5161 -5206 0
-13671 -5159 -5208 0
-13671 -5157 -5210 0
-13671 -5155 -5212 0
-13671 -5153 -5214 0
-13671 -5151 -5216 0
-13671 -5149 -5218 0
-13671 -5147 -5220 0
-13671 -5145 -5222 0
-13671 -5143 -5224 0
-13671 -5142 -5226 0
-13671 -5078 -5181 -5189 0
-13671 -5078 -5179 -5190 0
-13671 -5078 -5177 -5192 0
-13671 -5078 -5175 -5194 0
-13671 -5078 -5173 -5196 0
-13671 -5078 -5171 -5198 0
-13671 -5078 -5169 -5200 0
-13671 -5078 -5167 -5202 0
-13671 -5078 -5165 -5204 0
-13671 -5078 -5163 -5206 0
-13671 -5078 -5161 -5208 0
-13671 -5078 -5159 -5210 0
-13671 -5078 -5157 -5212 0
-13671 -5078 -5155 -5214 0
-13671 -5078 -5153 -5216 0
-13671 -5078 -5151 -5218 0
-13671 -5078 -5149 -5220 0
-13671 -5078 -5147 -5222 0
-13671 -5078 -5145 -5224 0
-13671 -5078 -5143 -5226 0
-13671 -5078 -5142 -5228 0
-13671 -5076 -5183 -5189 0
-13671 -5076 -5181 -5190 0
-13671 -5076 -5179 -5192 0
-13671 -5076 -5177 -5194 0
-13671 -5076 -5175 -5196 0
-13671 -5076 -5173 -5198 0
-13671 -5076 -5171 -5200 0
-13671 -5076 -5169 -5202 0
-13671 -5076 -5167 -5204 0
-13671 -5076 -5165 -5206 0
-13671 -5076 -5163 -5208 0
-13671 -5076 -5161 -5210 0
-13671 -5076 -5159 -5212 0
-13671 -5076 -5157 -5214 0
-13671 -5076 -5155 -5216 0
-13671 -5076 -5153 -5218 0
-13671 -5076 -5151 -5220 0
-13671 -5076 -5149 -5222 0
-13671 -5076 -5147 -5224 0
-13671 -5076 -5145 -5226 0
-13671 -5076 -5143 -5228 0
-13671 -5076 -5142 -5230 0
-13671 -5074 -5185 -5189 0
-13671 -5074 -5183 -5190 0
-13671 -5074 -5181 -5192 0
-13671 -5074 -5179 -5194 0
-13671 -5074 -5177 -5196 0
-13671 -5074 -5175 -5198 0
-13671 -5074 -5173 -5200 0
-13671 -5074 -5171 -5202 0
-13671 -5074 -5169 -5204 0
-13671 -5074 -5167 -5206 0
-13671 -5074 -5165 -5208 0
-13671 -5074 -5163 -5210 0
-13671 -5074 -5161 -5212 0
-13671 -5074 -5159 -5214 0
-13671 -5074 -5157 -5216 0
-13671 -5074 -5155 -5218 0
-13671 -5074 -5153 -5220 0
-13671 -5074 -5151 -5222 0
-13671 -5074 -5149 -5224 0
-13671 -5074 -5147 -5226 0
-13671 -5074 -5145 -5228 0
-13671 -5074 -5143 -5230 0
-13671 -5074 -5142 -5232 0
-13671 -5072 -5187 -5189 0
-13671 -5072 -5185 -5190 0
-13671 -5072 -5183 -5192 0
-13671 -5072 -5181 -5194 0
-13671 -5072 -5179 -5196 0
-13671 -5072 -5177 -5198 0
-13671 -5072 -5175 -5200 0
-13671 -5072 -5173 -5202 0
-13671 -5072 -5171 -5204 0
-13671 -5072 -5169 -5206 0
-13671 -5072 -5167 -5208 0
-13671 -5072 -5165 -5210 0
-13671 -5072 -5163 -5212 0
-13671 -5072 -5161 -5214 0
-13671 -5072 -5159 -5216 0
-13671 -5072 -5157 -5218 0
-13671 -5072 -5155 -5220 0
-13671 -5072 -5153 -5222 0
-13671 -5072 -5151 -5224 0
-13671 -5072 -5149 -5226 0
-13671 -5072 -5147 -5228 0
-13671 -5072 -5145 -5230 0
-13671 -5072 -5143 -5232 0
-13671 -5072 -5142 -5234 0
-13671 -5070 -5189 0
-13671 -5070 -5187 -5190 0
-13671 -5070 -5185 -5192 0
-13671 -5070 -5183 -5194 0
-13671 -5070 -5181 -5196 0
-13671 -5070 -5179 -5198 0
-13671 -5070 -5177 -5200 0
-13671 -5070 -5175 -5202 0
-13671 -5070 -5173 -5204 0
-13671 -5070 -5171 -5206 0
-13671 -5070 -5169 -5208 0
-13671 -5070 -5167 -5210 0
-13671 -5070 -5165 -5212 0
-13671 -5070 -5163 -5214 0
-13671 -5070 -5161 -5216 0
-13671 -5070 -5159 -5218 0
-13671 -5070 -5157 -5220 0
-13671 -5070 -5155 -5222 0
-13671 -5070 -5153 -5224 0
-13671 -5070 -5151 -5226 0
-13671 -5070 -5149 -5228 0
-13671 -5070 -5147 -5230 0
-13671 -5070 -5145 -5232 0
-13671 -5070 -5143 -5234 0
-13671 -5070 -5142 -5236 0
-13671 -5068 -5190 0
-13671 -5068 -5187 -5192 0
-13671 -5068 -5185 -5194 0
-13671 -5068 -5183 -5196 0
-13671 -5068 -5181 -5198 0
-13671 -5068 -5179 -5200 0
-13671 -5068 -5177 -5202 0
-13671 -5068 -5175 -5204 0
-13671 -5068 -5173 -5206 0
-13671 -5068 -5171 -5208 0
-13671 -5068 -5169 -5210 0
-13671 -5068 -5167 -5212 0
-13671 -5068 -5165 -5214 0
-13671 -5068 -5163 -5216 0
-13671 -5068 -5161 -5218 0
-13671 -5068 -5159 -5220 0
-13671 -5068 -5157 -5222 0
-13671 -5068 -5155 -5224 0
-13671 -5068 -5153 -5226 0
-13671 -5068 -5151 -5228 0
-13671 -5068 -5149 -5230 0
-13671 -5068 -5147 -5232 0
-13671 -5068 -5145 -5234 0
-13671 -5068 -5143 -5236 0
-13671 -5068 -5142 -5238 0
-13671 -5066 -5192 0
-13671 -5066 -5187 -5194 0
-13671 -5066 -5185 -5196 0
-13671 -5066 -5183 -5198 0
-13671 -5066 -5181 -5200 0
-13671 -5066 -5179 -5202 0
-13671 -5066 -5177 -5204 0
-13671 -5066 -5175 -5206 0
-13671 -5066 -5173 -5208 0
-13671 -5066 -5171 -5210 0
-13671 -5066 -5169 -5212 0
-13671 -5066 -5167 -5214 0
-13671 -5066 -5165 -5216 0
-13671 -5066 -5163 -5218 0
-13671 -5066 -5161 -5220 0
-13671 -5066 -5159 -5222 0
-13671 -5066 -5157 -5224 0
-13671 -5066 -5155 -5226 0
-13671 -5066 -5153 -5228 0
-13671 -5066 -5151 -5230 0
-13671 -5066 -5149 -5232 0
-13671 -5066 -5147 -5234 0
-13671 -5066 -5145 -5236 0
-13671 -5066 -5143 -5238 0
-13671 -5066 -5142 -5240 0
-13671 -5064 -5194 0
-13671 -5064 -5187 -5196 0
-13671 -5064 -5185 -5198 0
-13671 -5064 -5183 -5200 0
-13671 -5064 -5181 -5202 0
-13671 -5064 -5179 -5204 0
-13671 -5064 -5177 -5206 0
-13671 -5064 -5175 -5208 0
-13671 -5064 -5173 -5210 0
-13671 -5064 -5171 -5212 0
-13671 -5064 -5169 -5214 0
-13671 -5064 -5167 -5216 0
-13671 -5064 -5165 -5218 0
-13671 -5064 -5163 -5220 0
-13671 -5064 -5161 -5222 0
-13671 -5064 -5159 -5224 0
-13671 -5064 -5157 -5226 0
-13671 -5064 -5155 -5228 0
-13671 -5064 -5153 -5230 0
-13671 -5064 -5151 -5232 0
-13671 -5064 -5149 -5234 0
-13671 -5064 -5147 -5236 0
-13671 -5064 -5145 -5238 0
-13671 -5064 -5143 -5240 0
-13671 -5064 -5142 -5242 0
-13671 -5062 -5196 0
-13671 -5062 -5187 -5198 0
-13671 -5062 -5185 -5200 0
-13671 -5062 -5183 -5202 0
-13671 -5062 -5181 -5204 0
-13671 -5062 -5179 -5206 0
-13671 -5062 -5177 -5208 0
-13671 -5062 -5175 -5210 0
-13671 -5062 -5173 -5212 0
-13671 -5062 -5171 -5214 0
-13671 -5062 -5169 -5216 0
-13671 -5062 -5167 -5218 0
-13671 -5062 -5165 -5220 0
-13671 -5062 -5163 -5222 0
-13671 -5062 -5161 -5224 0
-13671 -5062 -5159 -5226 0
-13671 -5062 -5157 -5228 0
-13671 -5062 -5155 -5230 0
-13671 -5062 -5153 -5232 0
-13671 -5062 -5151 -5234 0
-13671 -5062 -5149 -5236 0
-13671 -5062 -5147 -5238 0
-13671 -5062 -5145 -5240 0
-13671 -5062 -5143 -5242 0
-13671 -5062 -5142 -5244 0
-13671 -5060 -5198 0
-13671 -5060 -5187 -5200 0
-13671 -5060 -5185 -5202 0
-13671 -5060 -5183 -5204 0
-13671 -5060 -5181 -5206 0
-13671 -5060 -5179 -5208 0
-13671 -5060 -5177 -5210 0
-13671 -5060 -5175 -5212 0
-13671 -5060 -5173 -5214 0
-13671 -5060 -5171 -5216 0
-13671 -5060 -5169 -5218 0
-13671 -5060 -5167 -5220 0
-13671 -5060 -5165 -5222 0
-13671 -5060 -5163 -5224 0
-13671 -5060 -5161 -5226 0
-13671 -5060 -5159 -5228 0
-13671 -5060 -5157 -5230 0
-13671 -5060 -5155 -5232 0
-13671 -5060 -5153 -5234 0
-13671 -5060 -5151 -5236 0
-13671 -5060 -5149 -5238 0
-13671 -5060 -5147 -5240 0
-13671 -5060 -5145 -5242 0
-13671 -5060 -5143 -5244 0
-13671 -5060 -5142 -5246 0
-13671 -5058 -5200 0
-13671 -5058 -5187 -5202 0
-13671 -5058 -5185 -5204 0
-13671 -5058 -5183 -5206 0
-13671 -5058 -5181 -5208 0
-13671 -5058 -5179 -5210 0
-13671 -5058 -5177 -5212 0
-13671 -5058 -5175 -5214 0
-13671 -5058 -5173 -5216 0
-13671 -5058 -5171 -5218 0
-13671 -5058 -5169 -5220 0
-13671 -5058 -5167 -5222 0
-13671 -5058 -5165 -5224 0
-13671 -5058 -5163 -5226 0
-13671 -5058 -5161 -5228 0
-13671 -5058 -5159 -5230 0
-13671 -5058 -5157 -5232 0
-13671 -5058 -5155 -5234 0
-13671 -5058 -5153 -5236 0
-13671 -5058 -5151 -5238 0
-13671 -5058 -5149 -5240 0
-13671 -5058 -5147 -5242 0
-13671 -5058 -5145 -5244 0
-13671 -5058 -5143 -5246 0
-13671 -5058 -5142 -5248 0
-13671 -5056 -5202 0
-13671 -5056 -5187 -5204 0
-13671 -5056 -5185 -5206 0
-13671 -5056 -5183 -5208 0
-13671 -5056 -5181 -5210 0
-13671 -5056 -5179 -5212 0
-13671 -5056 -5177 -5214 0
-13671 -5056 -5175 -5216 0
-13671 -5056 -5173 -5218 0
-13671 -5056 -5171 -5220 0
-13671 -5056 -5169 -5222 0
-13671 -5056 -5167 -5224 0
-13671 -5056 -5165 -5226 0
-13671 -5056 -5163 -5228 0
-13671 -5056 -5161 -5230 0
-13671 -5056 -5159 -5232 0
-13671 -5056 -5157 -5234 0
-13671 -5056 -5155 -5236 0
-13671 -5056 -5153 -5238 0
-13671 -5056 -5151 -5240 0
-13671 -5056 -5149 -5242 0
-13671 -5056 -5147 -5244 0
-13671 -5056 -5145 -5246 0
-13671 -5056 -5143 -5248 0
-13671 -5056 -5142 -5250 0
-13671 -5054 -5204 0
-13671 -5054 -5187 -5206 0
-13671 -5054 -5185 -5208 0
-13671 -5054 -5183 -5210 0
-13671 -5054 -5181 -5212 0
-13671 -5054 -5179 -5214 0
-13671 -5054 -5177 -5216 0
-13671 -5054 -5175 -5218 0
-13671 -5054 -5173 -5220 0
-13671 -5054 -5171 -5222 0
-13671 -5054 -5169 -5224 0
-13671 -5054 -5167 -5226 0
-13671 -5054 -5165 -5228 0
-13671 -5054 -5163 -5230 0
-13671 -5054 -5161 -5232 0
-13671 -5054 -5159 -5234 0
-13671 -5054 -5157 -5236 0
-13671 -5054 -5155 -5238 0
-13671 -5054 -5153 -5240 0
-13671 -5054 -5151 -5242 0
-13671 -5054 -5149 -5244 0
-13671 -5054 -5147 -5246 0
-13671 -5054 -5145 -5248 0
-13671 -5054 -5143 -5250 0
-13671 -5054 -5142 0
-13671 -5052 -5206 0
-13671 -5052 -5187 -5208 0
-13671 -5052 -5185 -5210 0
-13671 -5052 -5183 -5212 0
-13671 -5052 -5181 -5214 0
-13671 -5052 -5179 -5216 0
-13671 -5052 -5177 -5218 0
-13671 -5052 -5175 -5220 0
-13671 -5052 -5173 -5222 0
-13671 -5052 -5171 -5224 0
-13671 -5052 -5169 -5226 0
-13671 -5052 -5167 -5228 0
-13671 -5052 -5165 -5230 0
-13671 -5052 -5163 -5232 0
-13671 -5052 -5161 -5234 0
-13671 -5052 -5159 -5236 0
-13671 -5052 -5157 -5238 0
-13671 -5052 -5155 -5240 0
-13671 -5052 -5153 -5242 0
-13671 -5052 -5151 -5244 0
-13671 -5052 -5149 -5246 0
-13671 -5052 -5147 -5248 0
-13671 -5052 -5145 -5250 0
-13671 -5052 -5143 0
-13671 -5052 -5142 0
-13671 -5050 -5208 0
-13671 -5050 -5187 -5210 0
-13671 -5050 -5185 -5212 0
-13671 -5050 -5183 -5214 0
-13671 -5050 -5181 -5216 0
-13671 -5050 -5179 -5218 0
-13671 -5050 -5177 -5220 0
-13671 -5050 -5175 -5222 0
-13671 -5050 -5173 -5224 0
-13671 -5050 -5171 -5226 0
-13671 -5050 -5169 -5228 0
-13671 -5050 -5167 -5230 0
-13671 -5050 -5165 -5232 0
-13671 -5050 -5163 -5234 0
-13671 -5050 -5161 -5236 0
-13671 -5050 -5159 -5238 0
-13671 -5050 -5157 -5240 0
-13671 -5050 -5155 -5242 0
-13671 -5050 -5153 -5244 0
-13671 -5050 -5151 -5246 0
-13671 -5050 -5149 -5248 0
-13671 -5050 -5147 -5250 0
-13671 -5050 -5145 0
-13671 -5050 -5143 0
-13671 -5050 -5142 0
-13671 -5049 -5210 0
-13671 -5049 -5187 -5212 0
-13671 -5049 -5185 -5214 0
-13671 -5049 -5183 -5216 0
-13671 -5049 -5181 -5218 0
-13671 -5049 -5179 -5220 0
-13671 -5049 -5177 -5222 0
-13671 -5049 -5175 -5224 0
-13671 -5049 -5173 -5226 0
-13671 -5049 -5171 -5228 0
-13671 -5049 -5169 -5230 0
-13671 -5049 -5167 -5232 0
-13671 -5049 -5165 -5234 0
-13671 -5049 -5163 -5236 0
-13671 -5049 -5161 -5238 0
-13671 -5049 -5159 -5240 0
-13671 -5049 -5157 -5242 0
-13671 -5049 -5155 -5244 0
-13671 -5049 -5153 -5246 0
-13671 -5049 -5151 -5248 0
-13671 -5049 -5149 -5250 0
-13671 -5049 -5147 0
-13671 -5049 -5145 0
-13671 -5049 -5143 0
-13671 -5049 -5142 0
13671 5147 5250 0
13671 5149 5248 0
13671 5151 5246 0
13671 5153 5244 0
13671 5155 5242 0
13671 5157 5240 0
13671 5159 5238 0
13671 5161 5236 0
13671 5163 5234 0
13671 5165 5232 0
13671 5167 5230 0
13671 5169 5228 0
13671 5171 5226 0
13671 5173 5224 0
13671 5175 5222 0
13671 5177 5220 0
13671 5179 5218 0
13671 5181 5216 0
13671 5183 5214 0
13671 5185 5212 0
13671 5187 5210 0
13671 5049 5145 5250 0
13671 5049 5147 5248 0
13671 5049 5149 5246 0
13671 5049 5151 5244 0
13671 5049 5153 5242 0
13671 5049 5155 5240 0
13671 5049 5157 5238 0
13671 5049 5159 5236 0
13671 5049 5161 5234 0
13671 5049 5163 5232 0
13671 5049 5165 5230 0
13671 5049 5167 5228 0
13671 5049 5169 5226 0
13671 5049 5171 5224 0
13671 5049 5173 5222 0
13671 5049 5175 5220 0
13671 5049 5177 5218 0
13671 5049 5179 5216 0
13671 5049 5181 5214 0
13671 5049 5183 5212 0
13671 5049 5185 5210 0
13671 5049 5187 5208 0
13671 5050 5143 5250 0
13671 5050 5145 5248 0
13671 5050 5147 5246 0
13671 5050 5149 5244 0
13671 5050 5151 5242 0
13671 5050 5153 5240 0
13671 5050 5155 5238 0
13671 5050 5157 5236 0
13671 5050 5159 5234 0
13671 5050 5161 5232 0
13671 5050 5163 5230 0
13671 5050 5165 5228 0
13671 5050 5167 5226 0
13671 5050 5169 5224 0
13671 5050 5171 5222 0
13671 5050 5173 5220 0
13671 5050 5175 5218 0
13671 5050 5177 5216 0
13671 5050 5179 5214 0
13671 5050 5181 5212 0
13671 5050 5183 5210 0
13671 5050 5185 5208 0
13671 5050 5187 5206 0
13671 5052 5142 5250 0
13671 5052 5143 5248 0
13671 5052 5145 5246 0
13671 5052 5147 5244 0
13671 5052 5149 5242 0
13671 5052 5151 5240 0
13671 5052 5153 5238 0
13671 5052 5155 5236 0
13671 5052 5157 5234 0
13671 5052 5159 5232 0
13671 5052 5161 5230 0
13671 5052 5163 5228 0
13671 5052 5165 5226 0
13671 5052 5167 5224 0
13671 5052 5169 5222 0
13671 5052 5171 5220 0
13671 5052 5173 5218 0
13671 5052 5175 5216 0
13671 5052 5177 5214 0
13671 5052 5179 5212 0
13671 5052 5181 5210 0
13671 5052 5183 5208 0
13671 5052 5185 5206 0
13671 5052 5187 5204 0
13671 5054 5250 0
13671 5054 5142 5248 0
13671 5054 5143 5246 0
13671 5054 5145 5244 0
13671 5054 5147 5242 0
13671 5054 5149 5240 0
13671 5054 5151 5238 0
13671 5054 5153 5236 0
13671 5054 5155 5234 0
13671 5054 5157 5232 0
13671 5054 5159 5230 0
13671 5054 5161 5228 0
13671 5054 5163 5226 0
13671 5054 5165 5224 0
13671 5054 5167 5222 0
13671 5054 5169 5220 0
13671 5054 5171 5218 0
13671 5054 5173 5216 0
13671 5054 5175 5214 0
13671 5054 5177 5212 0
13671 5054 5179 5210 0
13671 5054 5181 5208 0
13671 5054 5183 5206 0
13671 5054 5185 5204 0
13671 5054 5187 5202 0
13671 5056 5248 0
13671 5056 5142 5246 0
13671 5056 5143 5244 0
13671 5056 5145 5242 0
13671 5056 5147 5240 0
13671 5056 5149 5238 0
13671 5056 5151 5236 0
13671 5056 5153 5234 0
13671 5056 5155 5232 0
13671 5056 5157 5230 0
13671 5056 5159 5228 0
13671 5056 5161 5226 0
13671 5056 5163 5224 0
13671 5056 5165 5222 0
13671 5056 5167 5220 0
13671 5056 5169 5218 0
13671 5056 5171 5216 0
13671 5056 5173 5214 0
13671 5056 5175 5212 0
13671 5056 5177 5210 0
13671 5056 5179 5208 0
13671 5056 5181 5206 0
13671 5056 5183 5204 0
13671 5056 5185 5202 0
13671 5056 5187 5200 0
13671 5058 5246 0
13671 5058 5142 5244 0
13671 5058 5143 5242 0
13671 5058 5145 5240 0
13671 5058 5147 5238 0
13671 5058 5149 5236 0
13671 5058 5151 5234 0
13671 5058 5153 5232 0
13671 5058 5155 5230 0
13671 5058 5157 5228 0
13671 5058 5159 5226 0
13671 5058 5161 5224 0
13671 5058 5163 5222 0
13671 5058 5165 5220 0
13671 5058 5167 5218 0
13671 5058 5169 5216 0
13671 5058 5171 5214 0
13671 5058 5173 5212 0
13671 5058 5175 5210 0
13671 5058 5177 5208 0
13671 5058 5179 5206 0
13671 5058 5181 5204 0
13671 5058 5183 5202 0
13671 5058 5185 5200 0
13671 5058 5187 5198 0
13671 5060 5244 0
13671 5060 5142 5242 0
13671 5060 5143 5240 0
13671 5060 5145 5238 0
13671 5060 5147 5236 0
13671 5060 5149 5234 0
13671 5060 5151 5232 0
13671 5060 5153 5230 0
13671 5060 5155 5228 0
13671 5060 5157 5226 0
13671 5060 5159 5224 0
13671 5060 5161 5222 0
13671 5060 5163 5220 0
13671 5060 5165 5218 0
13671 5060 5167 5216 0
13671 5060 5169 5214 0
13671 5060 5171 5212 0
13671 5060 5173 5210 0
13671 5060 5175 5208 0
13671 5060 5177 5206 0
13671 5060 5179 5204 0
13671 5060 5181 5202 0
13671 5060 5183 5200 0
13671 5060 5185 5198 0
13671 5060 5187 5196 0
13671 5062 5242 0
13671 5062 5142 5240 0
13671 5062 5143 5238 0
13671 5062 5145 5236 0
13671 5062 5147 5234 0
13671 5062 5149 5232 0
13671 5062 5151 5230 0
13671 5062 5153 5228 0
13671 5062 5155 5226 0
13671 5062 5157 5224 0
13671 5062 5159 5222 0
13671 5062 5161 5220 0
13671 5062 5163 5218 0
13671 5062 5165 5216 0
13671 5062 5167 5214 0
13671 5062 5169 5212 0
13671 5062 5171 5210 0
13671 5062 5173 5208 0
13671 5062 5175 5206 0
13671 5062 5177 5204 0
13671 5062 5179 5202 0
13671 5062 5181 5200 0
13671 5062 5183 5198 0
13671 5062 5185 5196 0
13671 5062 5187 5194 0
13671 5064 5240 0
13671 5064 5142 5238 0
13671 5064 5143 5236 0
13671 5064 5145 5234 0
13671 5064 5147 5232 0
13671 5064 5149 5230 0
13671 5064 5151 5228 0
13671 5064 5153 5226 0
13671 5064 5155 5224 0
13671 5064 5157 5222 0
13671 5064 5159 5220 0
13671 5064 5161 5218 0
13671 5064 5163 5216 0
13671 5064 5165 5214 0
13671 5064 5167 5212 0
13671 5064 5169 5210 0
13671 5064 5171 5208 0
13671 5064 5173 5206 0
13671 5064 5175 5204 0
13671 5064 5177 5202 0
13671 5064 5179 5200 0
13671 5064 5181 5198 0
13671 5064 5183 5196 0
13671 5064 5185 5194 0
13671 5064 5187 5192 0
13671 5066 5238 0
13671 5066 5142 5236 0
13671 5066 5143 5234 0
13671 5066 5145 5232 0
13671 5066 5147 5230 0
13671 5066 5149 5228 0
13671 5066 5151 5226 0
13671 5066 5153 5224 0
13671 5066 5155 5222 0
13671 5066 5157 5220 0
13671 5066 5159 5218 0
13671 5066 5161 5216 0
13671 5066 5163 5214 0
13671 5066 5165 5212 0
13671 5066 5167 5210 0
13671 5066 5169 5208 0
13671 5066 5171 5206 0
13671 5066 5173 5204 0
13671 5066 5175 5202 0
13671 5066 5177 5200 0
13671 5066 5179 5198 0
13671 5066 5181 5196 0
13671 5066 5183 5194 0
13671 5066 5185 5192 0
13671 5066 5187 5190 0
13671 5068 5236 0
13671 5068 5142 5234 0
13671 5068 5143 5232 0
13671 5068 5145 5230 0
13671 5068 5147 5228 0
13671 5068 5149 5226 0
13671 5068 5151 5224 0
13671 5068 5153 5222 0
13671 5068 5155 5220 0
13671 5068 5157 5218 0
13671 5068 5159 5216 0
13671 5068 5161 5214 0
13671 5068 5163 5212 0
13671 5068 5165 5210 0
13671 5068 5167 5208 0
13671 5068 5169 5206 0
13671 5068 5171 5204 0
13671 5068 5173 5202 0
13671 5068 5175 5200 0
13671 5068 5177 5198 0
13671 5068 5179 5196 0
13671 5068 5181 5194 0
13671 5068 5183 5192 0
13671 5068 5185 5190 0
13671 5068 5187 5189 0
13671 5070 5234 0
13671 5070 5142 5232 0
13671 5070 5143 5230 0
13671 5070 5145 5228 0
13671 5070 5147 5226 0
13671 5070 5149 5224 0
13671 5070 5151 5222 0
13671 5070 5153 5220 0
13671 5070 5155 5218 0
13671 5070 5157 5216 0
13671 5070 5159 5214 0
13671 5070 5161 5212 0
13671 5070 5163 5210 0
13671 5070 5165 5208 0
13671 5070 5167 5206 0
13671 5070 5169 5204 0
13671 5070 5171 5202 0
13671 5070 5173 5200 0
13671 5070 5175 5198 0
13671 5070 5177 5196 0
13671 5070 5179 5194 0
13671 5070 5181 5192 0
13671 5070 5183 5190 0
13671 5070 5185 5189 0
13671 5070 5187 0
13671 5072 5232 0
13671 5072 5142 5230 0
13671 5072 5143 5228 0
13671 5072 5145 5226 0
13671 5072 5147 5224 0
13671 5072 5149 5222 0
13671 5072 5151 5220 0
13671 5072 5153 5218 0
13671 5072 5155 5216 0
13671 5072 5157 5214 0
13671 5072 5159 5212 0
13671 5072 5161 5210 0
13671 5072 5163 5208 0
13671 5072 5165 5206 0
13671 5072 5167 5204 0
13671 5072 5169 5202 0
13671 5072 5171 5200 0
13671 5072 5173 5198 0
13671 5072 5175 5196 0
13671 5072 5177 5194 0
13671 5072 5179 5192 0
13671 5072 5181 5190 0
13671 5072 5183 5189 0
13671 5072 5185 0
13671 5072 5187 0
13671 5074 5230 0
13671 5074 5142 5228 0
13671 5074 5143 5226 0
13671 5074 5145 5224 0
13671 5074 5147 5222 0
13671 5074 5149 5220 0
13671 5074 5151 5218 0
13671 5074 5153 5216 0
13671 5074 5155 5214 0
13671 5074 5157 5212 0
13671 5074 5159 5210 0
13671 5074 5161 5208 0
13671 5074 5163 5206 0
13671 5074 5165 5204 0
13671 5074 5167 5202 0
13671 5074 5169 5200 0
13671 5074 5171 5198 0
13671 5074 5173 5196 0
13671 5074 5175 5194 0
13671 5074 5177 5192 0
13671 5074 5179 5190 0
13671 5074 5181 5189 0
13671 5074 5183 0
13671 5074 5185 0
13671 5074 5187 0
13671 5076 5228 0
13671 5076 5142 5226 0
13671 5076 5143 5224 0
13671 5076 5145 5222 0
13671 5076 5147 5220 0
13671 5076 5149 5218 0
13671 5076 5151 5216 0
13671 5076 5153 5214 0
13671 5076 5155 5212 0
13671 5076 5157 5210 0
13671 5076 5159 5208 0
13671 5076 5161 5206 0
13671 5076 5163 5204 0
13671 5076 5165 5202 0
13671 5076 5167 5200 0
13671 5076 5169 5198 0
13671 5076 5171 5196 0
13671 5076 5173 5194 0
13671 5076 5175 5192 0
13671 5076 5177 5190 0
13671 5076 5179 5189 0
13671 5076 5181 0
13671 5076 5183 0
13671 5076 5185 0
13671 5076 5187 0
13671 5078 5226 0
13671 5078 5142 5224 0
13671 5078 5143 5222 0
13671 5078 5145 5220 0
13671 5078 5147 5218 0
13671 5078 5149 5216 0
13671 5078 5151 5214 0
13671 5078 5153 5212 0
13671 5078 5155 5210 0
13671 5078 5157 5208 0
13671 5078 5159 5206 0
13671 5078 5161 5204 0
13671 5078 5163 5202 0
13671 5078 5165 5200 0
13671 5078 5167 5198 0
13671 5078 5169 5196 0
13671 5078 5171 5194 0
13671 5078 5173 5192 0
13671 5078 5175 5190 0
13671 5078 5177 5189 0
13671 5078 5179 0
13671 5078 5181 0
13671 5078 5183 0
13671 5078 5185 0
13671 5078 5187 0
c (((aux552 + aux555 + aux556)<=36)=tv=SATLiteral(13672))
-13672 5383 5484 0
-13672 5385 5482 0
-13672 5387 5480 0
-13672 5389 5478 0
-13672 5391 5476 0
-13672 5393 5474 0
-13672 5395 5472 0
-13672 5397 5470 0
-13672 5399 5468 0
-13672 5401 5466 0
-13672 5403 5464 0
-13672 5405 5462 0
-13672 5407 5460 0
-13672 5409 5458 0
-13672 5411 5456 0
-13672 5413 5454 0
-13672 5415 5452 0
-13672 5417 5450 0
-13672 5419 5448 0
-13672 5421 5446 0
-13672 5283 5381 5484 0
-13672 5283 5383 5482 0
-13672 5283 5385 5480 0
-13672 5283 5387 5478 0
-13672 5283 5389 5476 0
-13672 5283 5391 5474 0
-13672 5283 5393 5472 0
-13672 5283 5395 5470 0
-13672 5283 5397 5468 0
-13672 5283 5399 5466 0
-13672 5283 5401 5464 0
-13672 5283 5403 5462 0
-13672 5283 5405 5460 0
-13672 5283 5407 5458 0
-13672 5283 5409 5456 0
-13672 5283 5411 5454 0
-13672 5283 5413 5452 0
-13672 5283 5415 5450 0
-13672 5283 5417 5448 0
-13672 5283 5419 5446 0
-13672 5283 5421 5444 0
-13672 5284 5379 5484 0
-13672 5284 5381 5482 0
-13672 5284 5383 5480 0
-13672 5284 5385 5478 0
-13672 5284 5387 5476 0
-13672 5284 5389 5474 0
-13672 5284 5391 5472 0
-13672 5284 5393 5470 0
-13672 5284 5395 5468 0
-13672 5284 5397 5466 0
-13672 5284 5399 5464 0
-13672 5284 5401 5462 0
-13672 5284 5403 5460 0
-13672 5284 5405 5458 0
-13672 5284 5407 5456 0
-13672 5284 5409 5454 0
-13672 5284 5411 5452 0
-13672 5284 5413 5450 0
-13672 5284 5415 5448 0
-13672 5284 5417 5446 0
-13672 5284 5419 5444 0
-13672 5284 5421 5442 0
-13672 5286 5377 5484 0
-13672 5286 5379 5482 0
-13672 5286 5381 5480 0
-13672 5286 5383 5478 0
-13672 5286 5385 5476 0
-13672 5286 5387 5474 0
-13672 5286 5389 5472 0
-13672 5286 5391 5470 0
-13672 5286 5393 5468 0
-13672 5286 5395 5466 0
-13672 5286 5397 5464 0
-13672 5286 5399 5462 0
-13672 5286 5401 5460 0
-13672 5286 5403 5458 0
-13672 5286 5405 5456 0
-13672 5286 5407 5454 0
-13672 5286 5409 5452 0
-13672 5286 5411 5450 0
-13672 5286 5413 5448 0
-13672 5286 5415 5446 0
-13672 5286 5417 5444 0
-13672 5286 5419 5442 0
-13672 5286 5421 5440 0
-13672 5288 5376 5484 0
-13672 5288 5377 5482 0
-13672 5288 5379 5480 0
-13672 5288 5381 5478 0
-13672 5288 5383 5476 0
-13672 5288 5385 5474 0
-13672 5288 5387 5472 0
-13672 5288 5389 5470 0
-13672 5288 5391 5468 0
-13672 5288 5393 5466 0
-13672 5288 5395 5464 0
-13672 5288 5397 5462 0
-13672 5288 5399 5460 0
-13672 5288 5401 5458 0
-13672 5288 5403 5456 0
-13672 5288 5405 5454 0
-13672 5288 5407 5452 0
-13672 5288 5409 5450 0
-13672 5288 5411 5448 0
-13672 5288 5413 5446 0
-13672 5288 5415 5444 0
-13672 5288 5417 5442 0
-13672 5288 5419 5440 0
-13672 5288 5421 5438 0
-13672 5290 5484 0
-13672 5290 5376 5482 0
-13672 5290 5377 5480 0
-13672 5290 5379 5478 0
-13672 5290 5381 5476 0
-13672 5290 5383 5474 0
-13672 5290 5385 5472 0
-13672 5290 5387 5470 0
-13672 5290 5389 5468 0
-13672 5290 5391 5466 0
-13672 5290 5393 5464 0
-13672 5290 5395 5462 0
-13672 5290 5397 5460 0
-13672 5290 5399 5458 0
-13672 5290 5401 5456 0
-13672 5290 5403 5454 0
-13672 5290 5405 5452 0
-13672 5290 5407 5450 0
-13672 5290 5409 5448 0
-13672 5290 5411 5446 0
-13672 5290 5413 5444 0
-13672 5290 5415 5442 0
-13672 5290 5417 5440 0
-13672 5290 5419 5438 0
-13672 5290 5421 5436 0
-13672 5292 5482 0
-13672 5292 5376 5480 0
-13672 5292 5377 5478 0
-13672 5292 5379 5476 0
-13672 5292 5381 5474 0
-13672 5292 5383 5472 0
-13672 5292 5385 5470 0
-13672 5292 5387 5468 0
-13672 5292 5389 5466 0
-13672 5292 5391 5464 0
-13672 5292 5393 5462 0
-13672 5292 5395 5460 0
-13672 5292 5397 5458 0
-13672 5292 5399 5456 0
-13672 5292 5401 5454 0
-13672 5292 5403 5452 0
-13672 5292 5405 5450 0
-13672 5292 5407 5448 0
-13672 5292 5409 5446 0
-13672 5292 5411 5444 0
-13672 5292 5413 5442 0
-13672 5292 5415 5440 0
-13672 5292 5417 5438 0
-13672 5292 5419 5436 0
-13672 5292 5421 5434 0
-13672 5294 5480 0
-13672 5294 5376 5478 0
-13672 5294 5377 5476 0
-13672 5294 5379 5474 0
-13672 5294 5381 5472 0
-13672 5294 5383 5470 0
-13672 5294 5385 5468 0
-13672 5294 5387 5466 0
-13672 5294 5389 5464 0
-13672 5294 5391 5462 0
-13672 5294 5393 5460 0
-13672 5294 5395 5458 0
-13672 5294 5397 5456 0
-13672 5294 5399 5454 0
-13672 5294 5401 5452 0
-13672 5294 5403 5450 0
-13672 5294 5405 5448 0
-13672 5294 5407 5446 0
-13672 5294 5409 5444 0
-13672 5294 5411 5442 0
-13672 5294 5413 5440 0
-13672 5294 5415 5438 0
-13672 5294 5417 5436 0
-13672 5294 5419 5434 0
-13672 5294 5421 5432 0
-13672 5296 5478 0
-13672 5296 5376 5476 0
-13672 5296 5377 5474 0
-13672 5296 5379 5472 0
-13672 5296 5381 5470 0
-13672 5296 5383 5468 0
-13672 5296 5385 5466 0
-13672 5296 5387 5464 0
-13672 5296 5389 5462 0
-13672 5296 5391 5460 0
-13672 5296 5393 5458 0
-13672 5296 5395 5456 0
-13672 5296 5397 5454 0
-13672 5296 5399 5452 0
-13672 5296 5401 5450 0
-13672 5296 5403 5448 0
-13672 5296 5405 5446 0
-13672 5296 5407 5444 0
-13672 5296 5409 5442 0
-13672 5296 5411 5440 0
-13672 5296 5413 5438 0
-13672 5296 5415 5436 0
-13672 5296 5417 5434 0
-13672 5296 5419 5432 0
-13672 5296 5421 5430 0
-13672 5298 5476 0
-13672 5298 5376 5474 0
-13672 5298 5377 5472 0
-13672 5298 5379 5470 0
-13672 5298 5381 5468 0
-13672 5298 5383 5466 0
-13672 5298 5385 5464 0
-13672 5298 5387 5462 0
-13672 5298 5389 5460 0
-13672 5298 5391 5458 0
-13672 5298 5393 5456 0
-13672 5298 5395 5454 0
-13672 5298 5397 5452 0
-13672 5298 5399 5450 0
-13672 5298 5401 5448 0
-13672 5298 5403 5446 0
-13672 5298 5405 5444 0
-13672 5298 5407 5442 0
-13672 5298 5409 5440 0
-13672 5298 5411 5438 0
-13672 5298 5413 5436 0
-13672 5298 5415 5434 0
-13672 5298 5417 5432 0
-13672 5298 5419 5430 0
-13672 5298 5421 5428 0
-13672 5300 5474 0
-13672 5300 5376 5472 0
-13672 5300 5377 5470 0
-13672 5300 5379 5468 0
-13672 5300 5381 5466 0
-13672 5300 5383 5464 0
-13672 5300 5385 5462 0
-13672 5300 5387 5460 0
-13672 5300 5389 5458 0
-13672 5300 5391 5456 0
-13672 5300 5393 5454 0
-13672 5300 5395 5452 0
-13672 5300 5397 5450 0
-13672 5300 5399 5448 0
-13672 5300 5401 5446 0
-13672 5300 5403 5444 0
-13672 5300 5405 5442 0
-13672 5300 5407 5440 0
-13672 5300 5409 5438 0
-13672 5300 5411 5436 0
-13672 5300 5413 5434 0
-13672 5300 5415 5432 0
-13672 5300 5417 5430 0
-13672 5300 5419 5428 0
-13672 5300 5421 5426 0
-13672 5302 5472 0
-13672 5302 5376 5470 0
-13672 5302 5377 5468 0
-13672 5302 5379 5466 0
-13672 5302 5381 5464 0
-13672 5302 5383 5462 0
-13672 5302 5385 5460 0
-13672 5302 5387 5458 0
-13672 5302 5389 5456 0
-13672 5302 5391 5454 0
-13672 5302 5393 5452 0
-13672 5302 5395 5450 0
-13672 5302 5397 5448 0
-13672 5302 5399 5446 0
-13672 5302 5401 5444 0
-13672 5302 5403 5442 0
-13672 5302 5405 5440 0
-13672 5302 5407 5438 0
-13672 5302 5409 5436 0
-13672 5302 5411 5434 0
-13672 5302 5413 5432 0
-13672 5302 5415 5430 0
-13672 5302 5417 5428 0
-13672 5302 5419 5426 0
-13672 5302 5421 5424 0
-13672 5304 5470 0
-13672 5304 5376 5468 0
-13672 5304 5377 5466 0
-13672 5304 5379 5464 0
-13672 5304 5381 5462 0
-13672 5304 5383 5460 0
-13672 5304 5385 5458 0
-13672 5304 5387 5456 0
-13672 5304 5389 5454 0
-13672 5304 5391 5452 0
-13672 5304 5393 5450 0
-13672 5304 5395 5448 0
-13672 5304 5397 5446 0
-13672 5304 5399 5444 0
-13672 5304 5401 5442 0
-13672 5304 5403 5440 0
-13672 5304 5405 5438 0
-13672 5304 5407 5436 0
-13672 5304 5409 5434 0
-13672 5304 5411 5432 0
-13672 5304 5413 5430 0
-13672 5304 5415 5428 0
-13672 5304 5417 5426 0
-13672 5304 5419 5424 0
-13672 5304 5421 5423 0
-13672 5306 5468 0
-13672 5306 5376 5466 0
-13672 5306 5377 5464 0
-13672 5306 5379 5462 0
-13672 5306 5381 5460 0
-13672 5306 5383 5458 0
-13672 5306 5385 5456 0
-13672 5306 5387 5454 0
-13672 5306 5389 5452 0
-13672 5306 5391 5450 0
-13672 5306 5393 5448 0
-13672 5306 5395 5446 0
-13672 5306 5397 5444 0
-13672 5306 5399 5442 0
-13672 5306 5401 5440 0
-13672 5306 5403 5438 0
-13672 5306 5405 5436 0
-13672 5306 5407 5434 0
-13672 5306 5409 5432 0
-13672 5306 5411 5430 0
-13672 5306 5413 5428 0
-13672 5306 5415 5426 0
-13672 5306 5417 5424 0
-13672 5306 5419 5423 0
-13672 5306 5421 0
-13672 5308 5466 0
-13672 5308 5376 5464 0
-13672 5308 5377 5462 0
-13672 5308 5379 5460 0
-13672 5308 5381 5458 0
-13672 5308 5383 5456 0
-13672 5308 5385 5454 0
-13672 5308 5387 5452 0
-13672 5308 5389 5450 0
-13672 5308 5391 5448 0
-13672 5308 5393 5446 0
-13672 5308 5395 5444 0
-13672 5308 5397 5442 0
-13672 5308 5399 5440 0
-13672 5308 5401 5438 0
-13672 5308 5403 5436 0
-13672 5308 5405 5434 0
-13672 5308 5407 5432 0
-13672 5308 5409 5430 0
-13672 5308 5411 5428 0
-13672 5308 5413 5426 0
-13672 5308 5415 5424 0
-13672 5308 5417 5423 0
-13672 5308 5419 0
-13672 5308 5421 0
-13672 5310 5464 0
-13672 5310 5376 5462 0
-13672 5310 5377 5460 0
-13672 5310 5379 5458 0
-13672 5310 5381 5456 0
-13672 5310 5383 5454 0
-13672 5310 5385 5452 0
-13672 5310 5387 5450 0
-13672 5310 5389 5448 0
-13672 5310 5391 5446 0
-13672 5310 5393 5444 0
-13672 5310 5395 5442 0
-13672 5310 5397 5440 0
-13672 5310 5399 5438 0
-13672 5310 5401 5436 0
-13672 5310 5403 5434 0
-13672 5310 5405 5432 0
-13672 5310 5407 5430 0
-13672 5310 5409 5428 0
-13672 5310 5411 5426 0
-13672 5310 5413 5424 0
-13672 5310 5415 5423 0
-13672 5310 5417 0
-13672 5310 5419 0
-13672 5310 5421 0
-13672 5312 5462 0
-13672 5312 5376 5460 0
-13672 5312 5377 5458 0
-13672 5312 5379 5456 0
-13672 5312 5381 5454 0
-13672 5312 5383 5452 0
-13672 5312 5385 5450 0
-13672 5312 5387 5448 0
-13672 5312 5389 5446 0
-13672 5312 5391 5444 0
-13672 5312 5393 5442 0
-13672 5312 5395 5440 0
-13672 5312 5397 5438 0
-13672 5312 5399 5436 0
-13672 5312 5401 5434 0
-13672 5312 5403 5432 0
-13672 5312 5405 5430 0
-13672 5312 5407 5428 0
-13672 5312 5409 5426 0
-13672 5312 5411 5424 0
-13672 5312 5413 5423 0
-13672 5312 5415 0
-13672 5312 5417 0
-13672 5312 5419 0
-13672 5312 5421 0
13672 -5415 -5423 0
13672 -5413 -5424 0
13672 -5411 -5426 0
13672 -5409 -5428 0
13672 -5407 -5430 0
13672 -5405 -5432 0
13672 -5403 -5434 0
13672 -5401 -5436 0
13672 -5399 -5438 0
13672 -5397 -5440 0
13672 -5395 -5442 0
13672 -5393 -5444 0
13672 -5391 -5446 0
13672 -5389 -5448 0
13672 -5387 -5450 0
13672 -5385 -5452 0
13672 -5383 -5454 0
13672 -5381 -5456 0
13672 -5379 -5458 0
13672 -5377 -5460 0
13672 -5376 -5462 0
13672 -5312 -5417 -5423 0
13672 -5312 -5415 -5424 0
13672 -5312 -5413 -5426 0
13672 -5312 -5411 -5428 0
13672 -5312 -5409 -5430 0
13672 -5312 -5407 -5432 0
13672 -5312 -5405 -5434 0
13672 -5312 -5403 -5436 0
13672 -5312 -5401 -5438 0
13672 -5312 -5399 -5440 0
13672 -5312 -5397 -5442 0
13672 -5312 -5395 -5444 0
13672 -5312 -5393 -5446 0
13672 -5312 -5391 -5448 0
13672 -5312 -5389 -5450 0
13672 -5312 -5387 -5452 0
13672 -5312 -5385 -5454 0
13672 -5312 -5383 -5456 0
13672 -5312 -5381 -5458 0
13672 -5312 -5379 -5460 0
13672 -5312 -5377 -5462 0
13672 -5312 -5376 -5464 0
13672 -5310 -5419 -5423 0
13672 -5310 -5417 -5424 0
13672 -5310 -5415 -5426 0
13672 -5310 -5413 -5428 0
13672 -5310 -5411 -5430 0
13672 -5310 -5409 -5432 0
13672 -5310 -5407 -5434 0
13672 -5310 -5405 -5436 0
13672 -5310 -5403 -5438 0
13672 -5310 -5401 -5440 0
13672 -5310 -5399 -5442 0
13672 -5310 -5397 -5444 0
13672 -5310 -5395 -5446 0
13672 -5310 -5393 -5448 0
13672 -5310 -5391 -5450 0
13672 -5310 -5389 -5452 0
13672 -5310 -5387 -5454 0
13672 -5310 -5385 -5456 0
13672 -5310 -5383 -5458 0
13672 -5310 -5381 -5460 0
13672 -5310 -5379 -5462 0
13672 -5310 -5377 -5464 0
13672 -5310 -5376 -5466 0
13672 -5308 -5421 -5423 0
13672 -5308 -5419 -5424 0
13672 -5308 -5417 -5426 0
13672 -5308 -5415 -5428 0
13672 -5308 -5413 -5430 0
13672 -5308 -5411 -5432 0
13672 -5308 -5409 -5434 0
13672 -5308 -5407 -5436 0
13672 -5308 -5405 -5438 0
13672 -5308 -5403 -5440 0
13672 -5308 -5401 -5442 0
13672 -5308 -5399 -5444 0
13672 -5308 -5397 -5446 0
13672 -5308 -5395 -5448 0
13672 -5308 -5393 -5450 0
13672 -5308 -5391 -5452 0
13672 -5308 -5389 -5454 0
13672 -5308 -5387 -5456 0
13672 -5308 -5385 -5458 0
13672 -5308 -5383 -5460 0
13672 -5308 -5381 -5462 0
13672 -5308 -5379 -5464 0
13672 -5308 -5377 -5466 0
13672 -5308 -5376 -5468 0
13672 -5306 -5423 0
13672 -5306 -5421 -5424 0
13672 -5306 -5419 -5426 0
13672 -5306 -5417 -5428 0
13672 -5306 -5415 -5430 0
13672 -5306 -5413 -5432 0
13672 -5306 -5411 -5434 0
13672 -5306 -5409 -5436 0
13672 -5306 -5407 -5438 0
13672 -5306 -5405 -5440 0
13672 -5306 -5403 -5442 0
13672 -5306 -5401 -5444 0
13672 -5306 -5399 -5446 0
13672 -5306 -5397 -5448 0
13672 -5306 -5395 -5450 0
13672 -5306 -5393 -5452 0
13672 -5306 -5391 -5454 0
13672 -5306 -5389 -5456 0
13672 -5306 -5387 -5458 0
13672 -5306 -5385 -5460 0
13672 -5306 -5383 -5462 0
13672 -5306 -5381 -5464 0
13672 -5306 -5379 -5466 0
13672 -5306 -5377 -5468 0
13672 -5306 -5376 -5470 0
13672 -5304 -5424 0
13672 -5304 -5421 -5426 0
13672 -5304 -5419 -5428 0
13672 -5304 -5417 -5430 0
13672 -5304 -5415 -5432 0
13672 -5304 -5413 -5434 0
13672 -5304 -5411 -5436 0
13672 -5304 -5409 -5438 0
13672 -5304 -5407 -5440 0
13672 -5304 -5405 -5442 0
13672 -5304 -5403 -5444 0
13672 -5304 -5401 -5446 0
13672 -5304 -5399 -5448 0
13672 -5304 -5397 -5450 0
13672 -5304 -5395 -5452 0
13672 -5304 -5393 -5454 0
13672 -5304 -5391 -5456 0
13672 -5304 -5389 -5458 0
13672 -5304 -5387 -5460 0
13672 -5304 -5385 -5462 0
13672 -5304 -5383 -5464 0
13672 -5304 -5381 -5466 0
13672 -5304 -5379 -5468 0
13672 -5304 -5377 -5470 0
13672 -5304 -5376 -5472 0
13672 -5302 -5426 0
13672 -5302 -5421 -5428 0
13672 -5302 -5419 -5430 0
13672 -5302 -5417 -5432 0
13672 -5302 -5415 -5434 0
13672 -5302 -5413 -5436 0
13672 -5302 -5411 -5438 0
13672 -5302 -5409 -5440 0
13672 -5302 -5407 -5442 0
13672 -5302 -5405 -5444 0
13672 -5302 -5403 -5446 0
13672 -5302 -5401 -5448 0
13672 -5302 -5399 -5450 0
13672 -5302 -5397 -5452 0
13672 -5302 -5395 -5454 0
13672 -5302 -5393 -5456 0
13672 -5302 -5391 -5458 0
13672 -5302 -5389 -5460 0
13672 -5302 -5387 -5462 0
13672 -5302 -5385 -5464 0
13672 -5302 -5383 -5466 0
13672 -5302 -5381 -5468 0
13672 -5302 -5379 -5470 0
13672 -5302 -5377 -5472 0
13672 -5302 -5376 -5474 0
13672 -5300 -5428 0
13672 -5300 -5421 -5430 0
13672 -5300 -5419 -5432 0
13672 -5300 -5417 -5434 0
13672 -5300 -5415 -5436 0
13672 -5300 -5413 -5438 0
13672 -5300 -5411 -5440 0
13672 -5300 -5409 -5442 0
13672 -5300 -5407 -5444 0
13672 -5300 -5405 -5446 0
13672 -5300 -5403 -5448 0
13672 -5300 -5401 -5450 0
13672 -5300 -5399 -5452 0
13672 -5300 -5397 -5454 0
13672 -5300 -5395 -5456 0
13672 -5300 -5393 -5458 0
13672 -5300 -5391 -5460 0
13672 -5300 -5389 -5462 0
13672 -5300 -5387 -5464 0
13672 -5300 -5385 -5466 0
13672 -5300 -5383 -5468 0
13672 -5300 -5381 -5470 0
13672 -5300 -5379 -5472 0
13672 -5300 -5377 -5474 0
13672 -5300 -5376 -5476 0
13672 -5298 -5430 0
13672 -5298 -5421 -5432 0
13672 -5298 -5419 -5434 0
13672 -5298 -5417 -5436 0
13672 -5298 -5415 -5438 0
13672 -5298 -5413 -5440 0
13672 -5298 -5411 -5442 0
13672 -5298 -5409 -5444 0
13672 -5298 -5407 -5446 0
13672 -5298 -5405 -5448 0
13672 -5298 -5403 -5450 0
13672 -5298 -5401 -5452 0
13672 -5298 -5399 -5454 0
13672 -5298 -5397 -5456 0
13672 -5298 -5395 -5458 0
13672 -5298 -5393 -5460 0
13672 -5298 -5391 -5462 0
13672 -5298 -5389 -5464 0
13672 -5298 -5387 -5466 0
13672 -5298 -5385 -5468 0
13672 -5298 -5383 -5470 0
13672 -5298 -5381 -5472 0
13672 -5298 -5379 -5474 0
13672 -5298 -5377 -5476 0
13672 -5298 -5376 -5478 0
13672 -5296 -5432 0
13672 -5296 -5421 -5434 0
13672 -5296 -5419 -5436 0
13672 -5296 -5417 -5438 0
13672 -5296 -5415 -5440 0
13672 -5296 -5413 -5442 0
13672 -5296 -5411 -5444 0
13672 -5296 -5409 -5446 0
13672 -5296 -5407 -5448 0
13672 -5296 -5405 -5450 0
13672 -5296 -5403 -5452 0
13672 -5296 -5401 -5454 0
13672 -5296 -5399 -5456 0
13672 -5296 -5397 -5458 0
13672 -5296 -5395 -5460 0
13672 -5296 -5393 -5462 0
13672 -5296 -5391 -5464 0
13672 -5296 -5389 -5466 0
13672 -5296 -5387 -5468 0
13672 -5296 -5385 -5470 0
13672 -5296 -5383 -5472 0
13672 -5296 -5381 -5474 0
13672 -5296 -5379 -5476 0
13672 -5296 -5377 -5478 0
13672 -5296 -5376 -5480 0
13672 -5294 -5434 0
13672 -5294 -5421 -5436 0
13672 -5294 -5419 -5438 0
13672 -5294 -5417 -5440 0
13672 -5294 -5415 -5442 0
13672 -5294 -5413 -5444 0
13672 -5294 -5411 -5446 0
13672 -5294 -5409 -5448 0
13672 -5294 -5407 -5450 0
13672 -5294 -5405 -5452 0
13672 -5294 -5403 -5454 0
13672 -5294 -5401 -5456 0
13672 -5294 -5399 -5458 0
13672 -5294 -5397 -5460 0
13672 -5294 -5395 -5462 0
13672 -5294 -5393 -5464 0
13672 -5294 -5391 -5466 0
13672 -5294 -5389 -5468 0
13672 -5294 -5387 -5470 0
13672 -5294 -5385 -5472 0
13672 -5294 -5383 -5474 0
13672 -5294 -5381 -5476 0
13672 -5294 -5379 -5478 0
13672 -5294 -5377 -5480 0
13672 -5294 -5376 -5482 0
13672 -5292 -5436 0
13672 -5292 -5421 -5438 0
13672 -5292 -5419 -5440 0
13672 -5292 -5417 -5442 0
13672 -5292 -5415 -5444 0
13672 -5292 -5413 -5446 0
13672 -5292 -5411 -5448 0
13672 -5292 -5409 -5450 0
13672 -5292 -5407 -5452 0
13672 -5292 -5405 -5454 0
13672 -5292 -5403 -5456 0
13672 -5292 -5401 -5458 0
13672 -5292 -5399 -5460 0
13672 -5292 -5397 -5462 0
13672 -5292 -5395 -5464 0
13672 -5292 -5393 -5466 0
13672 -5292 -5391 -5468 0
13672 -5292 -5389 -5470 0
13672 -5292 -5387 -5472 0
13672 -5292 -5385 -5474 0
13672 -5292 -5383 -5476 0
13672 -5292 -5381 -5478 0
13672 -5292 -5379 -5480 0
13672 -5292 -5377 -5482 0
13672 -5292 -5376 -5484 0
13672 -5290 -5438 0
13672 -5290 -5421 -5440 0
13672 -5290 -5419 -5442 0
13672 -5290 -5417 -5444 0
13672 -5290 -5415 -5446 0
13672 -5290 -5413 -5448 0
13672 -5290 -5411 -5450 0
13672 -5290 -5409 -5452 0
13672 -5290 -5407 -5454 0
13672 -5290 -5405 -5456 0
13672 -5290 -5403 -5458 0
13672 -5290 -5401 -5460 0
13672 -5290 -5399 -5462 0
13672 -5290 -5397 -5464 0
13672 -5290 -5395 -5466 0
13672 -5290 -5393 -5468 0
13672 -5290 -5391 -5470 0
13672 -5290 -5389 -5472 0
13672 -5290 -5387 -5474 0
13672 -5290 -5385 -5476 0
13672 -5290 -5383 -5478 0
13672 -5290 -5381 -5480 0
13672 -5290 -5379 -5482 0
13672 -5290 -5377 -5484 0
13672 -5290 -5376 0
13672 -5288 -5440 0
13672 -5288 -5421 -5442 0
13672 -5288 -5419 -5444 0
13672 -5288 -5417 -5446 0
13672 -5288 -5415 -5448 0
13672 -5288 -5413 -5450 0
13672 -5288 -5411 -5452 0
13672 -5288 -5409 -5454 0
13672 -5288 -5407 -5456 0
13672 -5288 -5405 -5458 0
13672 -5288 -5403 -5460 0
13672 -5288 -5401 -5462 0
13672 -5288 -5399 -5464 0
13672 -5288 -5397 -5466 0
13672 -5288 -5395 -5468 0
13672 -5288 -5393 -5470 0
13672 -5288 -5391 -5472 0
13672 -5288 -5389 -5474 0
13672 -5288 -5387 -5476 0
13672 -5288 -5385 -5478 0
13672 -5288 -5383 -5480 0
13672 -5288 -5381 -5482 0
13672 -5288 -5379 -5484 0
13672 -5288 -5377 0
13672 -5288 -5376 0
13672 -5286 -5442 0
13672 -5286 -5421 -5444 0
13672 -5286 -5419 -5446 0
13672 -5286 -5417 -5448 0
13672 -5286 -5415 -5450 0
13672 -5286 -5413 -5452 0
13672 -5286 -5411 -5454 0
13672 -5286 -5409 -5456 0
13672 -5286 -5407 -5458 0
13672 -5286 -5405 -5460 0
13672 -5286 -5403 -5462 0
13672 -5286 -5401 -5464 0
13672 -5286 -5399 -5466 0
13672 -5286 -5397 -5468 0
13672 -5286 -5395 -5470 0
13672 -5286 -5393 -5472 0
13672 -5286 -5391 -5474 0
13672 -5286 -5389 -5476 0
13672 -5286 -5387 -5478 0
13672 -5286 -5385 -5480 0
13672 -5286 -5383 -5482 0
13672 -5286 -5381 -5484 0
13672 -5286 -5379 0
13672 -5286 -5377 0
13672 -5286 -5376 0
13672 -5284 -5444 0
13672 -5284 -5421 -5446 0
13672 -5284 -5419 -5448 0
13672 -5284 -5417 -5450 0
13672 -5284 -5415 -5452 0
13672 -5284 -5413 -5454 0
13672 -5284 -5411 -5456 0
13672 -5284 -5409 -5458 0
13672 -5284 -5407 -5460 0
13672 -5284 -5405 -5462 0
13672 -5284 -5403 -5464 0
13672 -5284 -5401 -5466 0
13672 -5284 -5399 -5468 0
13672 -5284 -5397 -5470 0
13672 -5284 -5395 -5472 0
13672 -5284 -5393 -5474 0
13672 -5284 -5391 -5476 0
13672 -5284 -5389 -5478 0
13672 -5284 -5387 -5480 0
13672 -5284 -5385 -5482 0
13672 -5284 -5383 -5484 0
13672 -5284 -5381 0
13672 -5284 -5379 0
13672 -5284 -5377 0
13672 -5284 -5376 0
13672 -5283 -5446 0
13672 -5283 -5421 -5448 0
13672 -5283 -5419 -5450 0
13672 -5283 -5417 -5452 0
13672 -5283 -5415 -5454 0
13672 -5283 -5413 -5456 0
13672 -5283 -5411 -5458 0
13672 -5283 -5409 -5460 0
13672 -5283 -5407 -5462 0
13672 -5283 -5405 -5464 0
13672 -5283 -5403 -5466 0
13672 -5283 -5401 -5468 0
13672 -5283 -5399 -5470 0
13672 -5283 -5397 -5472 0
13672 -5283 -5395 -5474 0
13672 -5283 -5393 -5476 0
13672 -5283 -5391 -5478 0
13672 -5283 -5389 -5480 0
13672 -5283 -5387 -5482 0
13672 -5283 -5385 -5484 0
13672 -5283 -5383 0
13672 -5283 -5381 0
13672 -5283 -5379 0
13672 -5283 -5377 0
13672 -5283 -5376 0
c ((36<=(aux552 + aux555 + aux556))=tv=SATLiteral(13673))
-13673 -5413 -5423 0
-13673 -5411 -5424 0
-13673 -5409 -5426 0
-13673 -5407 -5428 0
-13673 -5405 -5430 0
-13673 -5403 -5432 0
-13673 -5401 -5434 0
-13673 -5399 -5436 0
-13673 -5397 -5438 0
-13673 -5395 -5440 0
-13673 -5393 -5442 0
-13673 -5391 -5444 0
-13673 -5389 -5446 0
-13673 -5387 -5448 0
-13673 -5385 -5450 0
-13673 -5383 -5452 0
-13673 -5381 -5454 0
-13673 -5379 -5456 0
-13673 -5377 -5458 0
-13673 -5376 -5460 0
-13673 -5312 -5415 -5423 0
-13673 -5312 -5413 -5424 0
-13673 -5312 -5411 -5426 0
-13673 -5312 -5409 -5428 0
-13673 -5312 -5407 -5430 0
-13673 -5312 -5405 -5432 0
-13673 -5312 -5403 -5434 0
-13673 -5312 -5401 -5436 0
-13673 -5312 -5399 -5438 0
-13673 -5312 -5397 -5440 0
-13673 -5312 -5395 -5442 0
-13673 -5312 -5393 -5444 0
-13673 -5312 -5391 -5446 0
-13673 -5312 -5389 -5448 0
-13673 -5312 -5387 -5450 0
-13673 -5312 -5385 -5452 0
-13673 -5312 -5383 -5454 0
-13673 -5312 -5381 -5456 0
-13673 -5312 -5379 -5458 0
-13673 -5312 -5377 -5460 0
-13673 -5312 -5376 -5462 0
-13673 -5310 -5417 -5423 0
-13673 -5310 -5415 -5424 0
-13673 -5310 -5413 -5426 0
-13673 -5310 -5411 -5428 0
-13673 -5310 -5409 -5430 0
-13673 -5310 -5407 -5432 0
-13673 -5310 -5405 -5434 0
-13673 -5310 -5403 -5436 0
-13673 -5310 -5401 -5438 0
-13673 -5310 -5399 -5440 0
-13673 -5310 -5397 -5442 0
-13673 -5310 -5395 -5444 0
-13673 -5310 -5393 -5446 0
-13673 -5310 -5391 -5448 0
-13673 -5310 -5389 -5450 0
-13673 -5310 -5387 -5452 0
-13673 -5310 -5385 -5454 0
-13673 -5310 -5383 -5456 0
-13673 -5310 -5381 -5458 0
-13673 -5310 -5379 -5460 0
-13673 -5310 -5377 -5462 0
-13673 -5310 -5376 -5464 0
-13673 -5308 -5419 -5423 0
-13673 -5308 -5417 -5424 0
-13673 -5308 -5415 -5426 0
-13673 -5308 -5413 -5428 0
-13673 -5308 -5411 -5430 0
-13673 -5308 -5409 -5432 0
-13673 -5308 -5407 -5434 0
-13673 -5308 -5405 -5436 0
-13673 -5308 -5403 -5438 0
-13673 -5308 -5401 -5440 0
-13673 -5308 -5399 -5442 0
-13673 -5308 -5397 -5444 0
-13673 -5308 -5395 -5446 0
-13673 -5308 -5393 -5448 0
-13673 -5308 -5391 -5450 0
-13673 -5308 -5389 -5452 0
-13673 -5308 -5387 -5454 0
-13673 -5308 -5385 -5456 0
-13673 -5308 -5383 -5458 0
-13673 -5308 -5381 -5460 0
-13673 -5308 -5379 -5462 0
-13673 -5308 -5377 -5464 0
-13673 -5308 -5376 -5466 0
-13673 -5306 -5421 -5423 0
-13673 -5306 -5419 -5424 0
-13673 -5306 -5417 -5426 0
-13673 -5306 -5415 -5428 0
-13673 -5306 -5413 -5430 0
-13673 -5306 -5411 -5432 0
-13673 -5306 -5409 -5434 0
-13673 -5306 -5407 -5436 0
-13673 -5306 -5405 -5438 0
-13673 -5306 -5403 -5440 0
-13673 -5306 -5401 -5442 0
-13673 -5306 -5399 -5444 0
-13673 -5306 -5397 -5446 0
-13673 -5306 -5395 -5448 0
-13673 -5306 -5393 -5450 0
-13673 -5306 -5391 -5452 0
-13673 -5306 -5389 -5454 0
-13673 -5306 -5387 -5456 0
-13673 -5306 -5385 -5458 0
-13673 -5306 -5383 -5460 0
-13673 -5306 -5381 -5462 0
-13673 -5306 -5379 -5464 0
-13673 -5306 -5377 -5466 0
-13673 -5306 -5376 -5468 0
-13673 -5304 -5423 0
-13673 -5304 -5421 -5424 0
-13673 -5304 -5419 -5426 0
-13673 -5304 -5417 -5428 0
-13673 -5304 -5415 -5430 0
-13673 -5304 -5413 -5432 0
-13673 -5304 -5411 -5434 0
-13673 -5304 -5409 -5436 0
-13673 -5304 -5407 -5438 0
-13673 -5304 -5405 -5440 0
-13673 -5304 -5403 -5442 0
-13673 -5304 -5401 -5444 0
-13673 -5304 -5399 -5446 0
-13673 -5304 -5397 -5448 0
-13673 -5304 -5395 -5450 0
-13673 -5304 -5393 -5452 0
-13673 -5304 -5391 -5454 0
-13673 -5304 -5389 -5456 0
-13673 -5304 -5387 -5458 0
-13673 -5304 -5385 -5460 0
-13673 -5304 -5383 -5462 0
-13673 -5304 -5381 -5464 0
-13673 -5304 -5379 -5466 0
-13673 -5304 -5377 -5468 0
-13673 -5304 -5376 -5470 0
-13673 -5302 -5424 0
-13673 -5302 -5421 -5426 0
-13673 -5302 -5419 -5428 0
-13673 -5302 -5417 -5430 0
-13673 -5302 -5415 -5432 0
-13673 -5302 -5413 -5434 0
-13673 -5302 -5411 -5436 0
-13673 -5302 -5409 -5438 0
-13673 -5302 -5407 -5440 0
-13673 -5302 -5405 -5442 0
-13673 -5302 -5403 -5444 0
-13673 -5302 -5401 -5446 0
-13673 -5302 -5399 -5448 0
-13673 -5302 -5397 -5450 0
-13673 -5302 -5395 -5452 0
-13673 -5302 -5393 -5454 0
-13673 -5302 -5391 -5456 0
-13673 -5302 -5389 -5458 0
-13673 -5302 -5387 -5460 0
-13673 -5302 -5385 -5462 0
-13673 -5302 -5383 -5464 0
-13673 -5302 -5381 -5466 0
-13673 -5302 -5379 -5468 0
-13673 -5302 -5377 -5470 0
-13673 -5302 -5376 -5472 0
-13673 -5300 -5426 0
-13673 -5300 -5421 -5428 0
-13673 -5300 -5419 -5430 0
-13673 -5300 -5417 -5432 0
-13673 -5300 -5415 -5434 0
-13673 -5300 -5413 -5436 0
-13673 -5300 -5411 -5438 0
-13673 -5300 -5409 -5440 0
-13673 -5300 -5407 -5442 0
-13673 -5300 -5405 -5444 0
-13673 -5300 -5403 -5446 0
-13673 -5300 -5401 -5448 0
-13673 -5300 -5399 -5450 0
-13673 -5300 -5397 -5452 0
-13673 -5300 -5395 -5454 0
-13673 -5300 -5393 -5456 0
-13673 -5300 -5391 -5458 0
-13673 -5300 -5389 -5460 0
-13673 -5300 -5387 -5462 0
-13673 -5300 -5385 -5464 0
-13673 -5300 -5383 -5466 0
-13673 -5300 -5381 -5468 0
-13673 -5300 -5379 -5470 0
-13673 -5300 -5377 -5472 0
-13673 -5300 -5376 -5474 0
-13673 -5298 -5428 0
-13673 -5298 -5421 -5430 0
-13673 -5298 -5419 -5432 0
-13673 -5298 -5417 -5434 0
-13673 -5298 -5415 -5436 0
-13673 -5298 -5413 -5438 0
-13673 -5298 -5411 -5440 0
-13673 -5298 -5409 -5442 0
-13673 -5298 -5407 -5444 0
-13673 -5298 -5405 -5446 0
-13673 -5298 -5403 -5448 0
-13673 -5298 -5401 -5450 0
-13673 -5298 -5399 -5452 0
-13673 -5298 -5397 -5454 0
-13673 -5298 -5395 -5456 0
-13673 -5298 -5393 -5458 0
-13673 -5298 -5391 -5460 0
-13673 -5298 -5389 -5462 0
-13673 -5298 -5387 -5464 0
-13673 -5298 -5385 -5466 0
-13673 -5298 -5383 -5468 0
-13673 -5298 -5381 -5470 0
-13673 -5298 -5379 -5472 0
-13673 -5298 -5377 -5474 0
-13673 -5298 -5376 -5476 0
-13673 -5296 -5430 0
-13673 -5296 -5421 -5432 0
-13673 -5296 -5419 -5434 0
-13673 -5296 -5417 -5436 0
-13673 -5296 -5415 -5438 0
-13673 -5296 -5413 -5440 0
-13673 -5296 -5411 -5442 0
-13673 -5296 -5409 -5444 0
-13673 -5296 -5407 -5446 0
-13673 -5296 -5405 -5448 0
-13673 -5296 -5403 -5450 0
-13673 -5296 -5401 -5452 0
-13673 -5296 -5399 -5454 0
-13673 -5296 -5397 -5456 0
-13673 -5296 -5395 -5458 0
-13673 -5296 -5393 -5460 0
-13673 -5296 -5391 -5462 0
-13673 -5296 -5389 -5464 0
-13673 -5296 -5387 -5466 0
-13673 -5296 -5385 -5468 0
-13673 -5296 -5383 -5470 0
-13673 -5296 -5381 -5472 0
-13673 -5296 -5379 -5474 0
-13673 -5296 -5377 -5476 0
-13673 -5296 -5376 -5478 0
-13673 -5294 -5432 0
-13673 -5294 -5421 -5434 0
-13673 -5294 -5419 -5436 0
-13673 -5294 -5417 -5438 0
-13673 -5294 -5415 -5440 0
-13673 -5294 -5413 -5442 0
-13673 -5294 -5411 -5444 0
-13673 -5294 -5409 -5446 0
-13673 -5294 -5407 -5448 0
-13673 -5294 -5405 -5450 0
-13673 -5294 -5403 -5452 0
-13673 -5294 -5401 -5454 0
-13673 -5294 -5399 -5456 0
-13673 -5294 -5397 -5458 0
-13673 -5294 -5395 -5460 0
-13673 -5294 -5393 -5462 0
-13673 -5294 -5391 -5464 0
-13673 -5294 -5389 -5466 0
-13673 -5294 -5387 -5468 0
-13673 -5294 -5385 -5470 0
-13673 -5294 -5383 -5472 0
-13673 -5294 -5381 -5474 0
-13673 -5294 -5379 -5476 0
-13673 -5294 -5377 -5478 0
-13673 -5294 -5376 -5480 0
-13673 -5292 -5434 0
-13673 -5292 -5421 -5436 0
-13673 -5292 -5419 -5438 0
-13673 -5292 -5417 -5440 0
-13673 -5292 -5415 -5442 0
-13673 -5292 -5413 -5444 0
-13673 -5292 -5411 -5446 0
-13673 -5292 -5409 -5448 0
-13673 -5292 -5407 -5450 0
-13673 -5292 -5405 -5452 0
-13673 -5292 -5403 -5454 0
-13673 -5292 -5401 -5456 0
-13673 -5292 -5399 -5458 0
-13673 -5292 -5397 -5460 0
-13673 -5292 -5395 -5462 0
-13673 -5292 -5393 -5464 0
-13673 -5292 -5391 -5466 0
-13673 -5292 -5389 -5468 0
-13673 -5292 -5387 -5470 0
-13673 -5292 -5385 -5472 0
-13673 -5292 -5383 -5474 0
-13673 -5292 -5381 -5476 0
-13673 -5292 -5379 -5478 0
-13673 -5292 -5377 -5480 0
-13673 -5292 -5376 -5482 0
-13673 -5290 -5436 0
-13673 -5290 -5421 -5438 0
-13673 -5290 -5419 -5440 0
-13673 -5290 -5417 -5442 0
-13673 -5290 -5415 -5444 0
-13673 -5290 -5413 -5446 0
-13673 -5290 -5411 -5448 0
-13673 -5290 -5409 -5450 0
-13673 -5290 -5407 -5452 0
-13673 -5290 -5405 -5454 0
-13673 -5290 -5403 -5456 0
-13673 -5290 -5401 -5458 0
-13673 -5290 -5399 -5460 0
-13673 -5290 -5397 -5462 0
-13673 -5290 -5395 -5464 0
-13673 -5290 -5393 -5466 0
-13673 -5290 -5391 -5468 0
-13673 -5290 -5389 -5470 0
-13673 -5290 -5387 -5472 0
-13673 -5290 -5385 -5474 0
-13673 -5290 -5383 -5476 0
-13673 -5290 -5381 -5478 0
-13673 -5290 -5379 -5480 0
-13673 -5290 -5377 -5482 0
-13673 -5290 -5376 -5484 0
-13673 -5288 -5438 0
-13673 -5288 -5421 -5440 0
-13673 -5288 -5419 -5442 0
-13673 -5288 -5417 -5444 0
-13673 -5288 -5415 -5446 0
-13673 -5288 -5413 -5448 0
-13673 -5288 -5411 -5450 0
-13673 -5288 -5409 -5452 0
-13673 -5288 -5407 -5454 0
-13673 -5288 -5405 -5456 0
-13673 -5288 -5403 -5458 0
-13673 -5288 -5401 -5460 0
-13673 -5288 -5399 -5462 0
-13673 -5288 -5397 -5464 0
-13673 -5288 -5395 -5466 0
-13673 -5288 -5393 -5468 0
-13673 -5288 -5391 -5470 0
-13673 -5288 -5389 -5472 0
-13673 -5288 -5387 -5474 0
-13673 -5288 -5385 -5476 0
-13673 -5288 -5383 -5478 0
-13673 -5288 -5381 -5480 0
-13673 -5288 -5379 -5482 0
-13673 -5288 -5377 -5484 0
-13673 -5288 -5376 0
-13673 -5286 -5440 0
-13673 -5286 -5421 -5442 0
-13673 -5286 -5419 -5444 0
-13673 -5286 -5417 -5446 0
-13673 -5286 -5415 -5448 0
-13673 -5286 -5413 -5450 0
-13673 -5286 -5411 -5452 0
-13673 -5286 -5409 -5454 0
-13673 -5286 -5407 -5456 0
-13673 -5286 -5405 -5458 0
-13673 -5286 -5403 -5460 0
-13673 -5286 -5401 -5462 0
-13673 -5286 -5399 -5464 0
-13673 -5286 -5397 -5466 0
-13673 -5286 -5395 -5468 0
-13673 -5286 -5393 -5470 0
-13673 -5286 -5391 -5472 0
-13673 -5286 -5389 -5474 0
-13673 -5286 -5387 -5476 0
-13673 -5286 -5385 -5478 0
-13673 -5286 -5383 -5480 0
-13673 -5286 -5381 -5482 0
-13673 -5286 -5379 -5484 0
-13673 -5286 -5377 0
-13673 -5286 -5376 0
-13673 -5284 -5442 0
-13673 -5284 -5421 -5444 0
-13673 -5284 -5419 -5446 0
-13673 -5284 -5417 -5448 0
-13673 -5284 -5415 -5450 0
-13673 -5284 -5413 -5452 0
-13673 -5284 -5411 -5454 0
-13673 -5284 -5409 -5456 0
-13673 -5284 -5407 -5458 0
-13673 -5284 -5405 -5460 0
-13673 -5284 -5403 -5462 0
-13673 -5284 -5401 -5464 0
-13673 -5284 -5399 -5466 0
-13673 -5284 -5397 -5468 0
-13673 -5284 -5395 -5470 0
-13673 -5284 -5393 -5472 0
-13673 -5284 -5391 -5474 0
-13673 -5284 -5389 -5476 0
-13673 -5284 -5387 -5478 0
-13673 -5284 -5385 -5480 0
-13673 -5284 -5383 -5482 0
-13673 -5284 -5381 -5484 0
-13673 -5284 -5379 0
-13673 -5284 -5377 0
-13673 -5284 -5376 0
-13673 -5283 -5444 0
-13673 -5283 -5421 -5446 0
-13673 -5283 -5419 -5448 0
-13673 -5283 -5417 -5450 0
-13673 -5283 -5415 -5452 0
-13673 -5283 -5413 -5454 0
-13673 -5283 -5411 -5456 0
-13673 -5283 -5409 -5458 0
-13673 -5283 -5407 -5460 0
-13673 -5283 -5405 -5462 0
-13673 -5283 -5403 -5464 0
-13673 -5283 -5401 -5466 0
-13673 -5283 -5399 -5468 0
-13673 -5283 -5397 -5470 0
-13673 -5283 -5395 -5472 0
-13673 -5283 -5393 -5474 0
-13673 -5283 -5391 -5476 0
-13673 -5283 -5389 -5478 0
-13673 -5283 -5387 -5480 0
-13673 -5283 -5385 -5482 0
-13673 -5283 -5383 -5484 0
-13673 -5283 -5381 0
-13673 -5283 -5379 0
-13673 -5283 -5377 0
-13673 -5283 -5376 0
13673 5381 5484 0
13673 5383 5482 0
13673 5385 5480 0
13673 5387 5478 0
13673 5389 5476 0
13673 5391 5474 0
13673 5393 5472 0
13673 5395 5470 0
13673 5397 5468 0
13673 5399 5466 0
13673 5401 5464 0
13673 5403 5462 0
13673 5405 5460 0
13673 5407 5458 0
13673 5409 5456 0
13673 5411 5454 0
13673 5413 5452 0
13673 5415 5450 0
13673 5417 5448 0
13673 5419 5446 0
13673 5421 5444 0
13673 5283 5379 5484 0
13673 5283 5381 5482 0
13673 5283 5383 5480 0
13673 5283 5385 5478 0
13673 5283 5387 5476 0
13673 5283 5389 5474 0
13673 5283 5391 5472 0
13673 5283 5393 5470 0
13673 5283 5395 5468 0
13673 5283 5397 5466 0
13673 5283 5399 5464 0
13673 5283 5401 5462 0
13673 5283 5403 5460 0
13673 5283 5405 5458 0
13673 5283 5407 5456 0
13673 5283 5409 5454 0
13673 5283 5411 5452 0
13673 5283 5413 5450 0
13673 5283 5415 5448 0
13673 5283 5417 5446 0
13673 5283 5419 5444 0
13673 5283 5421 5442 0
13673 5284 5377 5484 0
13673 5284 5379 5482 0
13673 5284 5381 5480 0
13673 5284 5383 5478 0
13673 5284 5385 5476 0
13673 5284 5387 5474 0
13673 5284 5389 5472 0
13673 5284 5391 5470 0
13673 5284 5393 5468 0
13673 5284 5395 5466 0
13673 5284 5397 5464 0
13673 5284 5399 5462 0
13673 5284 5401 5460 0
13673 5284 5403 5458 0
13673 5284 5405 5456 0
13673 5284 5407 5454 0
13673 5284 5409 5452 0
13673 5284 5411 5450 0
13673 5284 5413 5448 0
13673 5284 5415 5446 0
13673 5284 5417 5444 0
13673 5284 5419 5442 0
13673 5284 5421 5440 0
13673 5286 5376 5484 0
13673 5286 5377 5482 0
13673 5286 5379 5480 0
13673 5286 5381 5478 0
13673 5286 5383 5476 0
13673 5286 5385 5474 0
13673 5286 5387 5472 0
13673 5286 5389 5470 0
13673 5286 5391 5468 0
13673 5286 5393 5466 0
13673 5286 5395 5464 0
13673 5286 5397 5462 0
13673 5286 5399 5460 0
13673 5286 5401 5458 0
13673 5286 5403 5456 0
13673 5286 5405 5454 0
13673 5286 5407 5452 0
13673 5286 5409 5450 0
13673 5286 5411 5448 0
13673 5286 5413 5446 0
13673 5286 5415 5444 0
13673 5286 5417 5442 0
13673 5286 5419 5440 0
13673 5286 5421 5438 0
13673 5288 5484 0
13673 5288 5376 5482 0
13673 5288 5377 5480 0
13673 5288 5379 5478 0
13673 5288 5381 5476 0
13673 5288 5383 5474 0
13673 5288 5385 5472 0
13673 5288 5387 5470 0
13673 5288 5389 5468 0
13673 5288 5391 5466 0
13673 5288 5393 5464 0
13673 5288 5395 5462 0
13673 5288 5397 5460 0
13673 5288 5399 5458 0
13673 5288 5401 5456 0
13673 5288 5403 5454 0
13673 5288 5405 5452 0
13673 5288 5407 5450 0
13673 5288 5409 5448 0
13673 5288 5411 5446 0
13673 5288 5413 5444 0
13673 5288 5415 5442 0
13673 5288 5417 5440 0
13673 5288 5419 5438 0
13673 5288 5421 5436 0
13673 5290 5482 0
13673 5290 5376 5480 0
13673 5290 5377 5478 0
13673 5290 5379 5476 0
13673 5290 5381 5474 0
13673 5290 5383 5472 0
13673 5290 5385 5470 0
13673 5290 5387 5468 0
13673 5290 5389 5466 0
13673 5290 5391 5464 0
13673 5290 5393 5462 0
13673 5290 5395 5460 0
13673 5290 5397 5458 0
13673 5290 5399 5456 0
13673 5290 5401 5454 0
13673 5290 5403 5452 0
13673 5290 5405 5450 0
13673 5290 5407 5448 0
13673 5290 5409 5446 0
13673 5290 5411 5444 0
13673 5290 5413 5442 0
13673 5290 5415 5440 0
13673 5290 5417 5438 0
13673 5290 5419 5436 0
13673 5290 5421 5434 0
13673 5292 5480 0
13673 5292 5376 5478 0
13673 5292 5377 5476 0
13673 5292 5379 5474 0
13673 5292 5381 5472 0
13673 5292 5383 5470 0
13673 5292 5385 5468 0
13673 5292 5387 5466 0
13673 5292 5389 5464 0
13673 5292 5391 5462 0
13673 5292 5393 5460 0
13673 5292 5395 5458 0
13673 5292 5397 5456 0
13673 5292 5399 5454 0
13673 5292 5401 5452 0
13673 5292 5403 5450 0
13673 5292 5405 5448 0
13673 5292 5407 5446 0
13673 5292 5409 5444 0
13673 5292 5411 5442 0
13673 5292 5413 5440 0
13673 5292 5415 5438 0
13673 5292 5417 5436 0
13673 5292 5419 5434 0
13673 5292 5421 5432 0
13673 5294 5478 0
13673 5294 5376 5476 0
13673 5294 5377 5474 0
13673 5294 5379 5472 0
13673 5294 5381 5470 0
13673 5294 5383 5468 0
13673 5294 5385 5466 0
13673 5294 5387 5464 0
13673 5294 5389 5462 0
13673 5294 5391 5460 0
13673 5294 5393 5458 0
13673 5294 5395 5456 0
13673 5294 5397 5454 0
13673 5294 5399 5452 0
13673 5294 5401 5450 0
13673 5294 5403 5448 0
13673 5294 5405 5446 0
13673 5294 5407 5444 0
13673 5294 5409 5442 0
13673 5294 5411 5440 0
13673 5294 5413 5438 0
13673 5294 5415 5436 0
13673 5294 5417 5434 0
13673 5294 5419 5432 0
13673 5294 5421 5430 0
13673 5296 5476 0
13673 5296 5376 5474 0
13673 5296 5377 5472 0
13673 5296 5379 5470 0
13673 5296 5381 5468 0
13673 5296 5383 5466 0
13673 5296 5385 5464 0
13673 5296 5387 5462 0
13673 5296 5389 5460 0
13673 5296 5391 5458 0
13673 5296 5393 5456 0
13673 5296 5395 5454 0
13673 5296 5397 5452 0
13673 5296 5399 5450 0
13673 5296 5401 5448 0
13673 5296 5403 5446 0
13673 5296 5405 5444 0
13673 5296 5407 5442 0
13673 5296 5409 5440 0
13673 5296 5411 5438 0
13673 5296 5413 5436 0
13673 5296 5415 5434 0
13673 5296 5417 5432 0
13673 5296 5419 5430 0
13673 5296 5421 5428 0
13673 5298 5474 0
13673 5298 5376 5472 0
13673 5298 5377 5470 0
13673 5298 5379 5468 0
13673 5298 5381 5466 0
13673 5298 5383 5464 0
13673 5298 5385 5462 0
13673 5298 5387 5460 0
13673 5298 5389 5458 0
13673 5298 5391 5456 0
13673 5298 5393 5454 0
13673 5298 5395 5452 0
13673 5298 5397 5450 0
13673 5298 5399 5448 0
13673 5298 5401 5446 0
13673 5298 5403 5444 0
13673 5298 5405 5442 0
13673 5298 5407 5440 0
13673 5298 5409 5438 0
13673 5298 5411 5436 0
13673 5298 5413 5434 0
13673 5298 5415 5432 0
13673 5298 5417 5430 0
13673 5298 5419 5428 0
13673 5298 5421 5426 0
13673 5300 5472 0
13673 5300 5376 5470 0
13673 5300 5377 5468 0
13673 5300 5379 5466 0
13673 5300 5381 5464 0
13673 5300 5383 5462 0
13673 5300 5385 5460 0
13673 5300 5387 5458 0
13673 5300 5389 5456 0
13673 5300 5391 5454 0
13673 5300 5393 5452 0
13673 5300 5395 5450 0
13673 5300 5397 5448 0
13673 5300 5399 5446 0
13673 5300 5401 5444 0
13673 5300 5403 5442 0
13673 5300 5405 5440 0
13673 5300 5407 5438 0
13673 5300 5409 5436 0
13673 5300 5411 5434 0
13673 5300 5413 5432 0
13673 5300 5415 5430 0
13673 5300 5417 5428 0
13673 5300 5419 5426 0
13673 5300 5421 5424 0
13673 5302 5470 0
13673 5302 5376 5468 0
13673 5302 5377 5466 0
13673 5302 5379 5464 0
13673 5302 5381 5462 0
13673 5302 5383 5460 0
13673 5302 5385 5458 0
13673 5302 5387 5456 0
13673 5302 5389 5454 0
13673 5302 5391 5452 0
13673 5302 5393 5450 0
13673 5302 5395 5448 0
13673 5302 5397 5446 0
13673 5302 5399 5444 0
13673 5302 5401 5442 0
13673 5302 5403 5440 0
13673 5302 5405 5438 0
13673 5302 5407 5436 0
13673 5302 5409 5434 0
13673 5302 5411 5432 0
13673 5302 5413 5430 0
13673 5302 5415 5428 0
13673 5302 5417 5426 0
13673 5302 5419 5424 0
13673 5302 5421 5423 0
13673 5304 5468 0
13673 5304 5376 5466 0
13673 5304 5377 5464 0
13673 5304 5379 5462 0
13673 5304 5381 5460 0
13673 5304 5383 5458 0
13673 5304 5385 5456 0
13673 5304 5387 5454 0
13673 5304 5389 5452 0
13673 5304 5391 5450 0
13673 5304 5393 5448 0
13673 5304 5395 5446 0
13673 5304 5397 5444 0
13673 5304 5399 5442 0
13673 5304 5401 5440 0
13673 5304 5403 5438 0
13673 5304 5405 5436 0
13673 5304 5407 5434 0
13673 5304 5409 5432 0
13673 5304 5411 5430 0
13673 5304 5413 5428 0
13673 5304 5415 5426 0
13673 5304 5417 5424 0
13673 5304 5419 5423 0
13673 5304 5421 0
13673 5306 5466 0
13673 5306 5376 5464 0
13673 5306 5377 5462 0
13673 5306 5379 5460 0
13673 5306 5381 5458 0
13673 5306 5383 5456 0
13673 5306 5385 5454 0
13673 5306 5387 5452 0
13673 5306 5389 5450 0
13673 5306 5391 5448 0
13673 5306 5393 5446 0
13673 5306 5395 5444 0
13673 5306 5397 5442 0
13673 5306 5399 5440 0
13673 5306 5401 5438 0
13673 5306 5403 5436 0
13673 5306 5405 5434 0
13673 5306 5407 5432 0
13673 5306 5409 5430 0
13673 5306 5411 5428 0
13673 5306 5413 5426 0
13673 5306 5415 5424 0
13673 5306 5417 5423 0
13673 5306 5419 0
13673 5306 5421 0
13673 5308 5464 0
13673 5308 5376 5462 0
13673 5308 5377 5460 0
13673 5308 5379 5458 0
13673 5308 5381 5456 0
13673 5308 5383 5454 0
13673 5308 5385 5452 0
13673 5308 5387 5450 0
13673 5308 5389 5448 0
13673 5308 5391 5446 0
13673 5308 5393 5444 0
13673 5308 5395 5442 0
13673 5308 5397 5440 0
13673 5308 5399 5438 0
13673 5308 5401 5436 0
13673 5308 5403 5434 0
13673 5308 5405 5432 0
13673 5308 5407 5430 0
13673 5308 5409 5428 0
13673 5308 5411 5426 0
13673 5308 5413 5424 0
13673 5308 5415 5423 0
13673 5308 5417 0
13673 5308 5419 0
13673 5308 5421 0
13673 5310 5462 0
13673 5310 5376 5460 0
13673 5310 5377 5458 0
13673 5310 5379 5456 0
13673 5310 5381 5454 0
13673 5310 5383 5452 0
13673 5310 5385 5450 0
13673 5310 5387 5448 0
13673 5310 5389 5446 0
13673 5310 5391 5444 0
13673 5310 5393 5442 0
13673 5310 5395 5440 0
13673 5310 5397 5438 0
13673 5310 5399 5436 0
13673 5310 5401 5434 0
13673 5310 5403 5432 0
13673 5310 5405 5430 0
13673 5310 5407 5428 0
13673 5310 5409 5426 0
13673 5310 5411 5424 0
13673 5310 5413 5423 0
13673 5310 5415 0
13673 5310 5417 0
13673 5310 5419 0
13673 5310 5421 0
13673 5312 5460 0
13673 5312 5376 5458 0
13673 5312 5377 5456 0
13673 5312 5379 5454 0
13673 5312 5381 5452 0
13673 5312 5383 5450 0
13673 5312 5385 5448 0
13673 5312 5387 5446 0
13673 5312 5389 5444 0
13673 5312 5391 5442 0
13673 5312 5393 5440 0
13673 5312 5395 5438 0
13673 5312 5397 5436 0
13673 5312 5399 5434 0
13673 5312 5401 5432 0
13673 5312 5403 5430 0
13673 5312 5405 5428 0
13673 5312 5407 5426 0
13673 5312 5409 5424 0
13673 5312 5411 5423 0
13673 5312 5413 0
13673 5312 5415 0
13673 5312 5417 0
13673 5312 5419 0
13673 5312 5421 0
c (((aux558 + aux561 + aux562)<=36)=tv=SATLiteral(13674))
-13674 5617 5718 0
-13674 5619 5716 0
-13674 5621 5714 0
-13674 5623 5712 0
-13674 5625 5710 0
-13674 5627 5708 0
-13674 5629 5706 0
-13674 5631 5704 0
-13674 5633 5702 0
-13674 5635 5700 0
-13674 5637 5698 0
-13674 5639 5696 0
-13674 5641 5694 0
-13674 5643 5692 0
-13674 5645 5690 0
-13674 5647 5688 0
-13674 5649 5686 0
-13674 5651 5684 0
-13674 5653 5682 0
-13674 5655 5680 0
-13674 5517 5615 5718 0
-13674 5517 5617 5716 0
-13674 5517 5619 5714 0
-13674 5517 5621 5712 0
-13674 5517 5623 5710 0
-13674 5517 5625 5708 0
-13674 5517 5627 5706 0
-13674 5517 5629 5704 0
-13674 5517 5631 5702 0
-13674 5517 5633 5700 0
-13674 5517 5635 5698 0
-13674 5517 5637 5696 0
-13674 5517 5639 5694 0
-13674 5517 5641 5692 0
-13674 5517 5643 5690 0
-13674 5517 5645 5688 0
-13674 5517 5647 5686 0
-13674 5517 5649 5684 0
-13674 5517 5651 5682 0
-13674 5517 5653 5680 0
-13674 5517 5655 5678 0
-13674 5518 5613 5718 0
-13674 5518 5615 5716 0
-13674 5518 5617 5714 0
-13674 5518 5619 5712 0
-13674 5518 5621 5710 0
-13674 5518 5623 5708 0
-13674 5518 5625 5706 0
-13674 5518 5627 5704 0
-13674 5518 5629 5702 0
-13674 5518 5631 5700 0
-13674 5518 5633 5698 0
-13674 5518 5635 5696 0
-13674 5518 5637 5694 0
-13674 5518 5639 5692 0
-13674 5518 5641 5690 0
-13674 5518 5643 5688 0
-13674 5518 5645 5686 0
-13674 5518 5647 5684 0
-13674 5518 5649 5682 0
-13674 5518 5651 5680 0
-13674 5518 5653 5678 0
-13674 5518 5655 5676 0
-13674 5520 5611 5718 0
-13674 5520 5613 5716 0
-13674 5520 5615 5714 0
-13674 5520 5617 5712 0
-13674 5520 5619 5710 0
-13674 5520 5621 5708 0
-13674 5520 5623 5706 0
-13674 5520 5625 5704 0
-13674 5520 5627 5702 0
-13674 5520 5629 5700 0
-13674 5520 5631 5698 0
-13674 5520 5633 5696 0
-13674 5520 5635 5694 0
-13674 5520 5637 5692 0
-13674 5520 5639 5690 0
-13674 5520 5641 5688 0
-13674 5520 5643 5686 0
-13674 5520 5645 5684 0
-13674 5520 5647 5682 0
-13674 5520 5649 5680 0
-13674 5520 5651 5678 0
-13674 5520 5653 5676 0
-13674 5520 5655 5674 0
-13674 5522 5610 5718 0
-13674 5522 5611 5716 0
-13674 5522 5613 5714 0
-13674 5522 5615 5712 0
-13674 5522 5617 5710 0
-13674 5522 5619 5708 0
-13674 5522 5621 5706 0
-13674 5522 5623 5704 0
-13674 5522 5625 5702 0
-13674 5522 5627 5700 0
-13674 5522 5629 5698 0
-13674 5522 5631 5696 0
-13674 5522 5633 5694 0
-13674 5522 5635 5692 0
-13674 5522 5637 5690 0
-13674 5522 5639 5688 0
-13674 5522 5641 5686 0
-13674 5522 5643 5684 0
-13674 5522 5645 5682 0
-13674 5522 5647 5680 0
-13674 5522 5649 5678 0
-13674 5522 5651 5676 0
-13674 5522 5653 5674 0
-13674 5522 5655 5672 0
-13674 5524 5718 0
-13674 5524 5610 5716 0
-13674 5524 5611 5714 0
-13674 5524 5613 5712 0
-13674 5524 5615 5710 0
-13674 5524 5617 5708 0
-13674 5524 5619 5706 0
-13674 5524 5621 5704 0
-13674 5524 5623 5702 0
-13674 5524 5625 5700 0
-13674 5524 5627 5698 0
-13674 5524 5629 5696 0
-13674 5524 5631 5694 0
-13674 5524 5633 5692 0
-13674 5524 5635 5690 0
-13674 5524 5637 5688 0
-13674 5524 5639 5686 0
-13674 5524 5641 5684 0
-13674 5524 5643 5682 0
-13674 5524 5645 5680 0
-13674 5524 5647 5678 0
-13674 5524 5649 5676 0
-13674 5524 5651 5674 0
-13674 5524 5653 5672 0
-13674 5524 5655 5670 0
-13674 5526 5716 0
-13674 5526 5610 5714 0
-13674 5526 5611 5712 0
-13674 5526 5613 5710 0
-13674 5526 5615 5708 0
-13674 5526 5617 5706 0
-13674 5526 5619 5704 0
-13674 5526 5621 5702 0
-13674 5526 5623 5700 0
-13674 5526 5625 5698 0
-13674 5526 5627 5696 0
-13674 5526 5629 5694 0
-13674 5526 5631 5692 0
-13674 5526 5633 5690 0
-13674 5526 5635 5688 0
-13674 5526 5637 5686 0
-13674 5526 5639 5684 0
-13674 5526 5641 5682 0
-13674 5526 5643 5680 0
-13674 5526 5645 5678 0
-13674 5526 5647 5676 0
-13674 5526 5649 5674 0
-13674 5526 5651 5672 0
-13674 5526 5653 5670 0
-13674 5526 5655 5668 0
-13674 5528 5714 0
-13674 5528 5610 5712 0
-13674 5528 5611 5710 0
-13674 5528 5613 5708 0
-13674 5528 5615 5706 0
-13674 5528 5617 5704 0
-13674 5528 5619 5702 0
-13674 5528 5621 5700 0
-13674 5528 5623 5698 0
-13674 5528 5625 5696 0
-13674 5528 5627 5694 0
-13674 5528 5629 5692 0
-13674 5528 5631 5690 0
-13674 5528 5633 5688 0
-13674 5528 5635 5686 0
-13674 5528 5637 5684 0
-13674 5528 5639 5682 0
-13674 5528 5641 5680 0
-13674 5528 5643 5678 0
-13674 5528 5645 5676 0
-13674 5528 5647 5674 0
-13674 5528 5649 5672 0
-13674 5528 5651 5670 0
-13674 5528 5653 5668 0
-13674 5528 5655 5666 0
-13674 5530 5712 0
-13674 5530 5610 5710 0
-13674 5530 5611 5708 0
-13674 5530 5613 5706 0
-13674 5530 5615 5704 0
-13674 5530 5617 5702 0
-13674 5530 5619 5700 0
-13674 5530 5621 5698 0
-13674 5530 5623 5696 0
-13674 5530 5625 5694 0
-13674 5530 5627 5692 0
-13674 5530 5629 5690 0
-13674 5530 5631 5688 0
-13674 5530 5633 5686 0
-13674 5530 5635 5684 0
-13674 5530 5637 5682 0
-13674 5530 5639 5680 0
-13674 5530 5641 5678 0
-13674 5530 5643 5676 0
-13674 5530 5645 5674 0
-13674 5530 5647 5672 0
-13674 5530 5649 5670 0
-13674 5530 5651 5668 0
-13674 5530 5653 5666 0
-13674 5530 5655 5664 0
-13674 5532 5710 0
-13674 5532 5610 5708 0
-13674 5532 5611 5706 0
-13674 5532 5613 5704 0
-13674 5532 5615 5702 0
-13674 5532 5617 5700 0
-13674 5532 5619 5698 0
-13674 5532 5621 5696 0
-13674 5532 5623 5694 0
-13674 5532 5625 5692 0
-13674 5532 5627 5690 0
-13674 5532 5629 5688 0
-13674 5532 5631 5686 0
-13674 5532 5633 5684 0
-13674 5532 5635 5682 0
-13674 5532 5637 5680 0
-13674 5532 5639 5678 0
-13674 5532 5641 5676 0
-13674 5532 5643 5674 0
-13674 5532 5645 5672 0
-13674 5532 5647 5670 0
-13674 5532 5649 5668 0
-13674 5532 5651 5666 0
-13674 5532 5653 5664 0
-13674 5532 5655 5662 0
-13674 5534 5708 0
-13674 5534 5610 5706 0
-13674 5534 5611 5704 0
-13674 5534 5613 5702 0
-13674 5534 5615 5700 0
-13674 5534 5617 5698 0
-13674 5534 5619 5696 0
-13674 5534 5621 5694 0
-13674 5534 5623 5692 0
-13674 5534 5625 5690 0
-13674 5534 5627 5688 0
-13674 5534 5629 5686 0
-13674 5534 5631 5684 0
-13674 5534 5633 5682 0
-13674 5534 5635 5680 0
-13674 5534 5637 5678 0
-13674 5534 5639 5676 0
-13674 5534 5641 5674 0
-13674 5534 5643 5672 0
-13674 5534 5645 5670 0
-13674 5534 5647 5668 0
-13674 5534 5649 5666 0
-13674 5534 5651 5664 0
-13674 5534 5653 5662 0
-13674 5534 5655 5660 0
-13674 5536 5706 0
-13674 5536 5610 5704 0
-13674 5536 5611 5702 0
-13674 5536 5613 5700 0
-13674 5536 5615 5698 0
-13674 5536 5617 5696 0
-13674 5536 5619 5694 0
-13674 5536 5621 5692 0
-13674 5536 5623 5690 0
-13674 5536 5625 5688 0
-13674 5536 5627 5686 0
-13674 5536 5629 5684 0
-13674 5536 5631 5682 0
-13674 5536 5633 5680 0
-13674 5536 5635 5678 0
-13674 5536 5637 5676 0
-13674 5536 5639 5674 0
-13674 5536 5641 5672 0
-13674 5536 5643 5670 0
-13674 5536 5645 5668 0
-13674 5536 5647 5666 0
-13674 5536 5649 5664 0
-13674 5536 5651 5662 0
-13674 5536 5653 5660 0
-13674 5536 5655 5658 0
-13674 5538 5704 0
-13674 5538 5610 5702 0
-13674 5538 5611 5700 0
-13674 5538 5613 5698 0
-13674 5538 5615 5696 0
-13674 5538 5617 5694 0
-13674 5538 5619 5692 0
-13674 5538 5621 5690 0
-13674 5538 5623 5688 0
-13674 5538 5625 5686 0
-13674 5538 5627 5684 0
-13674 5538 5629 5682 0
-13674 5538 5631 5680 0
-13674 5538 5633 5678 0
-13674 5538 5635 5676 0
-13674 5538 5637 5674 0
-13674 5538 5639 5672 0
-13674 5538 5641 5670 0
-13674 5538 5643 5668 0
-13674 5538 5645 5666 0
-13674 5538 5647 5664 0
-13674 5538 5649 5662 0
-13674 5538 5651 5660 0
-13674 5538 5653 5658 0
-13674 5538 5655 5657 0
-13674 5540 5702 0
-13674 5540 5610 5700 0
-13674 5540 5611 5698 0
-13674 5540 5613 5696 0
-13674 5540 5615 5694 0
-13674 5540 5617 5692 0
-13674 5540 5619 5690 0
-13674 5540 5621 5688 0
-13674 5540 5623 5686 0
-13674 5540 5625 5684 0
-13674 5540 5627 5682 0
-13674 5540 5629 5680 0
-13674 5540 5631 5678 0
-13674 5540 5633 5676 0
-13674 5540 5635 5674 0
-13674 5540 5637 5672 0
-13674 5540 5639 5670 0
-13674 5540 5641 5668 0
-13674 5540 5643 5666 0
-13674 5540 5645 5664 0
-13674 5540 5647 5662 0
-13674 5540 5649 5660 0
-13674 5540 5651 5658 0
-13674 5540 5653 5657 0
-13674 5540 5655 0
-13674 5542 5700 0
-13674 5542 5610 5698 0
-13674 5542 5611 5696 0
-13674 5542 5613 5694 0
-13674 5542 5615 5692 0
-13674 5542 5617 5690 0
-13674 5542 5619 5688 0
-13674 5542 5621 5686 0
-13674 5542 5623 5684 0
-13674 5542 5625 5682 0
-13674 5542 5627 5680 0
-13674 5542 5629 5678 0
-13674 5542 5631 5676 0
-13674 5542 5633 5674 0
-13674 5542 5635 5672 0
-13674 5542 5637 5670 0
-13674 5542 5639 5668 0
-13674 5542 5641 5666 0
-13674 5542 5643 5664 0
-13674 5542 5645 5662 0
-13674 5542 5647 5660 0
-13674 5542 5649 5658 0
-13674 5542 5651 5657 0
-13674 5542 5653 0
-13674 5542 5655 0
-13674 5544 5698 0
-13674 5544 5610 5696 0
-13674 5544 5611 5694 0
-13674 5544 5613 5692 0
-13674 5544 5615 5690 0
-13674 5544 5617 5688 0
-13674 5544 5619 5686 0
-13674 5544 5621 5684 0
-13674 5544 5623 5682 0
-13674 5544 5625 5680 0
-13674 5544 5627 5678 0
-13674 5544 5629 5676 0
-13674 5544 5631 5674 0
-13674 5544 5633 5672 0
-13674 5544 5635 5670 0
-13674 5544 5637 5668 0
-13674 5544 5639 5666 0
-13674 5544 5641 5664 0
-13674 5544 5643 5662 0
-13674 5544 5645 5660 0
-13674 5544 5647 5658 0
-13674 5544 5649 5657 0
-13674 5544 5651 0
-13674 5544 5653 0
-13674 5544 5655 0
-13674 5546 5696 0
-13674 5546 5610 5694 0
-13674 5546 5611 5692 0
-13674 5546 5613 5690 0
-13674 5546 5615 5688 0
-13674 5546 5617 5686 0
-13674 5546 5619 5684 0
-13674 5546 5621 5682 0
-13674 5546 5623 5680 0
-13674 5546 5625 5678 0
-13674 5546 5627 5676 0
-13674 5546 5629 5674 0
-13674 5546 5631 5672 0
-13674 5546 5633 5670 0
-13674 5546 5635 5668 0
-13674 5546 5637 5666 0
-13674 5546 5639 5664 0
-13674 5546 5641 5662 0
-13674 5546 5643 5660 0
-13674 5546 5645 5658 0
-13674 5546 5647 5657 0
-13674 5546 5649 0
-13674 5546 5651 0
-13674 5546 5653 0
-13674 5546 5655 0
13674 -5649 -5657 0
13674 -5647 -5658 0
13674 -5645 -5660 0
13674 -5643 -5662 0
13674 -5641 -5664 0
13674 -5639 -5666 0
13674 -5637 -5668 0
13674 -5635 -5670 0
13674 -5633 -5672 0
13674 -5631 -5674 0
13674 -5629 -5676 0
13674 -5627 -5678 0
13674 -5625 -5680 0
13674 -5623 -5682 0
13674 -5621 -5684 0
13674 -5619 -5686 0
13674 -5617 -5688 0
13674 -5615 -5690 0
13674 -5613 -5692 0
13674 -5611 -5694 0
13674 -5610 -5696 0
13674 -5546 -5651 -5657 0
13674 -5546 -5649 -5658 0
13674 -5546 -5647 -5660 0
13674 -5546 -5645 -5662 0
13674 -5546 -5643 -5664 0
13674 -5546 -5641 -5666 0
13674 -5546 -5639 -5668 0
13674 -5546 -5637 -5670 0
13674 -5546 -5635 -5672 0
13674 -5546 -5633 -5674 0
13674 -5546 -5631 -5676 0
13674 -5546 -5629 -5678 0
13674 -5546 -5627 -5680 0
13674 -5546 -5625 -5682 0
13674 -5546 -5623 -5684 0
13674 -5546 -5621 -5686 0
13674 -5546 -5619 -5688 0
13674 -5546 -5617 -5690 0
13674 -5546 -5615 -5692 0
13674 -5546 -5613 -5694 0
13674 -5546 -5611 -5696 0
13674 -5546 -5610 -5698 0
13674 -5544 -5653 -5657 0
13674 -5544 -5651 -5658 0
13674 -5544 -5649 -5660 0
13674 -5544 -5647 -5662 0
13674 -5544 -5645 -5664 0
13674 -5544 -5643 -5666 0
13674 -5544 -5641 -5668 0
13674 -5544 -5639 -5670 0
13674 -5544 -5637 -5672 0
13674 -5544 -5635 -5674 0
13674 -5544 -5633 -5676 0
13674 -5544 -5631 -5678 0
13674 -5544 -5629 -5680 0
13674 -5544 -5627 -5682 0
13674 -5544 -5625 -5684 0
13674 -5544 -5623 -5686 0
13674 -5544 -5621 -5688 0
13674 -5544 -5619 -5690 0
13674 -5544 -5617 -5692 0
13674 -5544 -5615 -5694 0
13674 -5544 -5613 -5696 0
13674 -5544 -5611 -5698 0
13674 -5544 -5610 -5700 0
13674 -5542 -5655 -5657 0
13674 -5542 -5653 -5658 0
13674 -5542 -5651 -5660 0
13674 -5542 -5649 -5662 0
13674 -5542 -5647 -5664 0
13674 -5542 -5645 -5666 0
13674 -5542 -5643 -5668 0
13674 -5542 -5641 -5670 0
13674 -5542 -5639 -5672 0
13674 -5542 -5637 -5674 0
13674 -5542 -5635 -5676 0
13674 -5542 -5633 -5678 0
13674 -5542 -5631 -5680 0
13674 -5542 -5629 -5682 0
13674 -5542 -5627 -5684 0
13674 -5542 -5625 -5686 0
13674 -5542 -5623 -5688 0
13674 -5542 -5621 -5690 0
13674 -5542 -5619 -5692 0
13674 -5542 -5617 -5694 0
13674 -5542 -5615 -5696 0
13674 -5542 -5613 -5698 0
13674 -5542 -5611 -5700 0
13674 -5542 -5610 -5702 0
13674 -5540 -5657 0
13674 -5540 -5655 -5658 0
13674 -5540 -5653 -5660 0
13674 -5540 -5651 -5662 0
13674 -5540 -5649 -5664 0
13674 -5540 -5647 -5666 0
13674 -5540 -5645 -5668 0
13674 -5540 -5643 -5670 0
13674 -5540 -5641 -5672 0
13674 -5540 -5639 -5674 0
13674 -5540 -5637 -5676 0
13674 -5540 -5635 -5678 0
13674 -5540 -5633 -5680 0
13674 -5540 -5631 -5682 0
13674 -5540 -5629 -5684 0
13674 -5540 -5627 -5686 0
13674 -5540 -5625 -5688 0
13674 -5540 -5623 -5690 0
13674 -5540 -5621 -5692 0
13674 -5540 -5619 -5694 0
13674 -5540 -5617 -5696 0
13674 -5540 -5615 -5698 0
13674 -5540 -5613 -5700 0
13674 -5540 -5611 -5702 0
13674 -5540 -5610 -5704 0
13674 -5538 -5658 0
13674 -5538 -5655 -5660 0
13674 -5538 -5653 -5662 0
13674 -5538 -5651 -5664 0
13674 -5538 -5649 -5666 0
13674 -5538 -5647 -5668 0
13674 -5538 -5645 -5670 0
13674 -5538 -5643 -5672 0
13674 -5538 -5641 -5674 0
13674 -5538 -5639 -5676 0
13674 -5538 -5637 -5678 0
13674 -5538 -5635 -5680 0
13674 -5538 -5633 -5682 0
13674 -5538 -5631 -5684 0
13674 -5538 -5629 -5686 0
13674 -5538 -5627 -5688 0
13674 -5538 -5625 -5690 0
13674 -5538 -5623 -5692 0
13674 -5538 -5621 -5694 0
13674 -5538 -5619 -5696 0
13674 -5538 -5617 -5698 0
13674 -5538 -5615 -5700 0
13674 -5538 -5613 -5702 0
13674 -5538 -5611 -5704 0
13674 -5538 -5610 -5706 0
13674 -5536 -5660 0
13674 -5536 -5655 -5662 0
13674 -5536 -5653 -5664 0
13674 -5536 -5651 -5666 0
13674 -5536 -5649 -5668 0
13674 -5536 -5647 -5670 0
13674 -5536 -5645 -5672 0
13674 -5536 -5643 -5674 0
13674 -5536 -5641 -5676 0
13674 -5536 -5639 -5678 0
13674 -5536 -5637 -5680 0
13674 -5536 -5635 -5682 0
13674 -5536 -5633 -5684 0
13674 -5536 -5631 -5686 0
13674 -5536 -5629 -5688 0
13674 -5536 -5627 -5690 0
13674 -5536 -5625 -5692 0
13674 -5536 -5623 -5694 0
13674 -5536 -5621 -5696 0
13674 -5536 -5619 -5698 0
13674 -5536 -5617 -5700 0
13674 -5536 -5615 -5702 0
13674 -5536 -5613 -5704 0
13674 -5536 -5611 -5706 0
13674 -5536 -5610 -5708 0
13674 -5534 -5662 0
13674 -5534 -5655 -5664 0
13674 -5534 -5653 -5666 0
13674 -5534 -5651 -5668 0
13674 -5534 -5649 -5670 0
13674 -5534 -5647 -5672 0
13674 -5534 -5645 -5674 0
13674 -5534 -5643 -5676 0
13674 -5534 -5641 -5678 0
13674 -5534 -5639 -5680 0
13674 -5534 -5637 -5682 0
13674 -5534 -5635 -5684 0
13674 -5534 -5633 -5686 0
13674 -5534 -5631 -5688 0
13674 -5534 -5629 -5690 0
13674 -5534 -5627 -5692 0
13674 -5534 -5625 -5694 0
13674 -5534 -5623 -5696 0
13674 -5534 -5621 -5698 0
13674 -5534 -5619 -5700 0
13674 -5534 -5617 -5702 0
13674 -5534 -5615 -5704 0
13674 -5534 -5613 -5706 0
13674 -5534 -5611 -5708 0
13674 -5534 -5610 -5710 0
13674 -5532 -5664 0
13674 -5532 -5655 -5666 0
13674 -5532 -5653 -5668 0
13674 -5532 -5651 -5670 0
13674 -5532 -5649 -5672 0
13674 -5532 -5647 -5674 0
13674 -5532 -5645 -5676 0
13674 -5532 -5643 -5678 0
13674 -5532 -5641 -5680 0
13674 -5532 -5639 -5682 0
13674 -5532 -5637 -5684 0
13674 -5532 -5635 -5686 0
13674 -5532 -5633 -5688 0
13674 -5532 -5631 -5690 0
13674 -5532 -5629 -5692 0
13674 -5532 -5627 -5694 0
13674 -5532 -5625 -5696 0
13674 -5532 -5623 -5698 0
13674 -5532 -5621 -5700 0
13674 -5532 -5619 -5702 0
13674 -5532 -5617 -5704 0
13674 -5532 -5615 -5706 0
13674 -5532 -5613 -5708 0
13674 -5532 -5611 -5710 0
13674 -5532 -5610 -5712 0
13674 -5530 -5666 0
13674 -5530 -5655 -5668 0
13674 -5530 -5653 -5670 0
13674 -5530 -5651 -5672 0
13674 -5530 -5649 -5674 0
13674 -5530 -5647 -5676 0
13674 -5530 -5645 -5678 0
13674 -5530 -5643 -5680 0
13674 -5530 -5641 -5682 0
13674 -5530 -5639 -5684 0
13674 -5530 -5637 -5686 0
13674 -5530 -5635 -5688 0
13674 -5530 -5633 -5690 0
13674 -5530 -5631 -5692 0
13674 -5530 -5629 -5694 0
13674 -5530 -5627 -5696 0
13674 -5530 -5625 -5698 0
13674 -5530 -5623 -5700 0
13674 -5530 -5621 -5702 0
13674 -5530 -5619 -5704 0
13674 -5530 -5617 -5706 0
13674 -5530 -5615 -5708 0
13674 -5530 -5613 -5710 0
13674 -5530 -5611 -5712 0
13674 -5530 -5610 -5714 0
13674 -5528 -5668 0
13674 -5528 -5655 -5670 0
13674 -5528 -5653 -5672 0
13674 -5528 -5651 -5674 0
13674 -5528 -5649 -5676 0
13674 -5528 -5647 -5678 0
13674 -5528 -5645 -5680 0
13674 -5528 -5643 -5682 0
13674 -5528 -5641 -5684 0
13674 -5528 -5639 -5686 0
13674 -5528 -5637 -5688 0
13674 -5528 -5635 -5690 0
13674 -5528 -5633 -5692 0
13674 -5528 -5631 -5694 0
13674 -5528 -5629 -5696 0
13674 -5528 -5627 -5698 0
13674 -5528 -5625 -5700 0
13674 -5528 -5623 -5702 0
13674 -5528 -5621 -5704 0
13674 -5528 -5619 -5706 0
13674 -5528 -5617 -5708 0
13674 -5528 -5615 -5710 0
13674 -5528 -5613 -5712 0
13674 -5528 -5611 -5714 0
13674 -5528 -5610 -5716 0
13674 -5526 -5670 0
13674 -5526 -5655 -5672 0
13674 -5526 -5653 -5674 0
13674 -5526 -5651 -5676 0
13674 -5526 -5649 -5678 0
13674 -5526 -5647 -5680 0
13674 -5526 -5645 -5682 0
13674 -5526 -5643 -5684 0
13674 -5526 -5641 -5686 0
13674 -5526 -5639 -5688 0
13674 -5526 -5637 -5690 0
13674 -5526 -5635 -5692 0
13674 -5526 -5633 -5694 0
13674 -5526 -5631 -5696 0
13674 -5526 -5629 -5698 0
13674 -5526 -5627 -5700 0
13674 -5526 -5625 -5702 0
13674 -5526 -5623 -5704 0
13674 -5526 -5621 -5706 0
13674 -5526 -5619 -5708 0
13674 -5526 -5617 -5710 0
13674 -5526 -5615 -5712 0
13674 -5526 -5613 -5714 0
13674 -5526 -5611 -5716 0
13674 -5526 -5610 -5718 0
13674 -5524 -5672 0
13674 -5524 -5655 -5674 0
13674 -5524 -5653 -5676 0
13674 -5524 -5651 -5678 0
13674 -5524 -5649 -5680 0
13674 -5524 -5647 -5682 0
13674 -5524 -5645 -5684 0
13674 -5524 -5643 -5686 0
13674 -5524 -5641 -5688 0
13674 -5524 -5639 -5690 0
13674 -5524 -5637 -5692 0
13674 -5524 -5635 -5694 0
13674 -5524 -5633 -5696 0
13674 -5524 -5631 -5698 0
13674 -5524 -5629 -5700 0
13674 -5524 -5627 -5702 0
13674 -5524 -5625 -5704 0
13674 -5524 -5623 -5706 0
13674 -5524 -5621 -5708 0
13674 -5524 -5619 -5710 0
13674 -5524 -5617 -5712 0
13674 -5524 -5615 -5714 0
13674 -5524 -5613 -5716 0
13674 -5524 -5611 -5718 0
13674 -5524 -5610 0
13674 -5522 -5674 0
13674 -5522 -5655 -5676 0
13674 -5522 -5653 -5678 0
13674 -5522 -5651 -5680 0
13674 -5522 -5649 -5682 0
13674 -5522 -5647 -5684 0
13674 -5522 -5645 -5686 0
13674 -5522 -5643 -5688 0
13674 -5522 -5641 -5690 0
13674 -5522 -5639 -5692 0
13674 -5522 -5637 -5694 0
13674 -5522 -5635 -5696 0
13674 -5522 -5633 -5698 0
13674 -5522 -5631 -5700 0
13674 -5522 -5629 -5702 0
13674 -5522 -5627 -5704 0
13674 -5522 -5625 -5706 0
13674 -5522 -5623 -5708 0
13674 -5522 -5621 -5710 0
13674 -5522 -5619 -5712 0
13674 -5522 -5617 -5714 0
13674 -5522 -5615 -5716 0
13674 -5522 -5613 -5718 0
13674 -5522 -5611 0
13674 -5522 -5610 0
13674 -5520 -5676 0
13674 -5520 -5655 -5678 0
13674 -5520 -5653 -5680 0
13674 -5520 -5651 -5682 0
13674 -5520 -5649 -5684 0
13674 -5520 -5647 -5686 0
13674 -5520 -5645 -5688 0
13674 -5520 -5643 -5690 0
13674 -5520 -5641 -5692 0
13674 -5520 -5639 -5694 0
13674 -5520 -5637 -5696 0
13674 -5520 -5635 -5698 0
13674 -5520 -5633 -5700 0
13674 -5520 -5631 -5702 0
13674 -5520 -5629 -5704 0
13674 -5520 -5627 -5706 0
13674 -5520 -5625 -5708 0
13674 -5520 -5623 -5710 0
13674 -5520 -5621 -5712 0
13674 -5520 -5619 -5714 0
13674 -5520 -5617 -5716 0
13674 -5520 -5615 -5718 0
13674 -5520 -5613 0
13674 -5520 -5611 0
13674 -5520 -5610 0
13674 -5518 -5678 0
13674 -5518 -5655 -5680 0
13674 -5518 -5653 -5682 0
13674 -5518 -5651 -5684 0
13674 -5518 -5649 -5686 0
13674 -5518 -5647 -5688 0
13674 -5518 -5645 -5690 0
13674 -5518 -5643 -5692 0
13674 -5518 -5641 -5694 0
13674 -5518 -5639 -5696 0
13674 -5518 -5637 -5698 0
13674 -5518 -5635 -5700 0
13674 -5518 -5633 -5702 0
13674 -5518 -5631 -5704 0
13674 -5518 -5629 -5706 0
13674 -5518 -5627 -5708 0
13674 -5518 -5625 -5710 0
13674 -5518 -5623 -5712 0
13674 -5518 -5621 -5714 0
13674 -5518 -5619 -5716 0
13674 -5518 -5617 -5718 0
13674 -5518 -5615 0
13674 -5518 -5613 0
13674 -5518 -5611 0
13674 -5518 -5610 0
13674 -5517 -5680 0
13674 -5517 -5655 -5682 0
13674 -5517 -5653 -5684 0
13674 -5517 -5651 -5686 0
13674 -5517 -5649 -5688 0
13674 -5517 -5647 -5690 0
13674 -5517 -5645 -5692 0
13674 -5517 -5643 -5694 0
13674 -5517 -5641 -5696 0
13674 -5517 -5639 -5698 0
13674 -5517 -5637 -5700 0
13674 -5517 -5635 -5702 0
13674 -5517 -5633 -5704 0
13674 -5517 -5631 -5706 0
13674 -5517 -5629 -5708 0
13674 -5517 -5627 -5710 0
13674 -5517 -5625 -5712 0
13674 -5517 -5623 -5714 0
13674 -5517 -5621 -5716 0
13674 -5517 -5619 -5718 0
13674 -5517 -5617 0
13674 -5517 -5615 0
13674 -5517 -5613 0
13674 -5517 -5611 0
13674 -5517 -5610 0
c ((36<=(aux558 + aux561 + aux562))=tv=SATLiteral(13675))
-13675 -5647 -5657 0
-13675 -5645 -5658 0
-13675 -5643 -5660 0
-13675 -5641 -5662 0
-13675 -5639 -5664 0
-13675 -5637 -5666 0
-13675 -5635 -5668 0
-13675 -5633 -5670 0
-13675 -5631 -5672 0
-13675 -5629 -5674 0
-13675 -5627 -5676 0
-13675 -5625 -5678 0
-13675 -5623 -5680 0
-13675 -5621 -5682 0
-13675 -5619 -5684 0
-13675 -5617 -5686 0
-13675 -5615 -5688 0
-13675 -5613 -5690 0
-13675 -5611 -5692 0
-13675 -5610 -5694 0
-13675 -5546 -5649 -5657 0
-13675 -5546 -5647 -5658 0
-13675 -5546 -5645 -5660 0
-13675 -5546 -5643 -5662 0
-13675 -5546 -5641 -5664 0
-13675 -5546 -5639 -5666 0
-13675 -5546 -5637 -5668 0
-13675 -5546 -5635 -5670 0
-13675 -5546 -5633 -5672 0
-13675 -5546 -5631 -5674 0
-13675 -5546 -5629 -5676 0
-13675 -5546 -5627 -5678 0
-13675 -5546 -5625 -5680 0
-13675 -5546 -5623 -5682 0
-13675 -5546 -5621 -5684 0
-13675 -5546 -5619 -5686 0
-13675 -5546 -5617 -5688 0
-13675 -5546 -5615 -5690 0
-13675 -5546 -5613 -5692 0
-13675 -5546 -5611 -5694 0
-13675 -5546 -5610 -5696 0
-13675 -5544 -5651 -5657 0
-13675 -5544 -5649 -5658 0
-13675 -5544 -5647 -5660 0
-13675 -5544 -5645 -5662 0
-13675 -5544 -5643 -5664 0
-13675 -5544 -5641 -5666 0
-13675 -5544 -5639 -5668 0
-13675 -5544 -5637 -5670 0
-13675 -5544 -5635 -5672 0
-13675 -5544 -5633 -5674 0
-13675 -5544 -5631 -5676 0
-13675 -5544 -5629 -5678 0
-13675 -5544 -5627 -5680 0
-13675 -5544 -5625 -5682 0
-13675 -5544 -5623 -5684 0
-13675 -5544 -5621 -5686 0
-13675 -5544 -5619 -5688 0
-13675 -5544 -5617 -5690 0
-13675 -5544 -5615 -5692 0
-13675 -5544 -5613 -5694 0
-13675 -5544 -5611 -5696 0
-13675 -5544 -5610 -5698 0
-13675 -5542 -5653 -5657 0
-13675 -5542 -5651 -5658 0
-13675 -5542 -5649 -5660 0
-13675 -5542 -5647 -5662 0
-13675 -5542 -5645 -5664 0
-13675 -5542 -5643 -5666 0
-13675 -5542 -5641 -5668 0
-13675 -5542 -5639 -5670 0
-13675 -5542 -5637 -5672 0
-13675 -5542 -5635 -5674 0
-13675 -5542 -5633 -5676 0
-13675 -5542 -5631 -5678 0
-13675 -5542 -5629 -5680 0
-13675 -5542 -5627 -5682 0
-13675 -5542 -5625 -5684 0
-13675 -5542 -5623 -5686 0
-13675 -5542 -5621 -5688 0
-13675 -5542 -5619 -5690 0
-13675 -5542 -5617 -5692 0
-13675 -5542 -5615 -5694 0
-13675 -5542 -5613 -5696 0
-13675 -5542 -5611 -5698 0
-13675 -5542 -5610 -5700 0
-13675 -5540 -5655 -5657 0
-13675 -5540 -5653 -5658 0
-13675 -5540 -5651 -5660 0
-13675 -5540 -5649 -5662 0
-13675 -5540 -5647 -5664 0
-13675 -5540 -5645 -5666 0
-13675 -5540 -5643 -5668 0
-13675 -5540 -5641 -5670 0
-13675 -5540 -5639 -5672 0
-13675 -5540 -5637 -5674 0
-13675 -5540 -5635 -5676 0
-13675 -5540 -5633 -5678 0
-13675 -5540 -5631 -5680 0
-13675 -5540 -5629 -5682 0
-13675 -5540 -5627 -5684 0
-13675 -5540 -5625 -5686 0
-13675 -5540 -5623 -5688 0
-13675 -5540 -5621 -5690 0
-13675 -5540 -5619 -5692 0
-13675 -5540 -5617 -5694 0
-13675 -5540 -5615 -5696 0
-13675 -5540 -5613 -5698 0
-13675 -5540 -5611 -5700 0
-13675 -5540 -5610 -5702 0
-13675 -5538 -5657 0
-13675 -5538 -5655 -5658 0
-13675 -5538 -5653 -5660 0
-13675 -5538 -5651 -5662 0
-13675 -5538 -5649 -5664 0
-13675 -5538 -5647 -5666 0
-13675 -5538 -5645 -5668 0
-13675 -5538 -5643 -5670 0
-13675 -5538 -5641 -5672 0
-13675 -5538 -5639 -5674 0
-13675 -5538 -5637 -5676 0
-13675 -5538 -5635 -5678 0
-13675 -5538 -5633 -5680 0
-13675 -5538 -5631 -5682 0
-13675 -5538 -5629 -5684 0
-13675 -5538 -5627 -5686 0
-13675 -5538 -5625 -5688 0
-13675 -5538 -5623 -5690 0
-13675 -5538 -5621 -5692 0
-13675 -5538 -5619 -5694 0
-13675 -5538 -5617 -5696 0
-13675 -5538 -5615 -5698 0
-13675 -5538 -5613 -5700 0
-13675 -5538 -5611 -5702 0
-13675 -5538 -5610 -5704 0
-13675 -5536 -5658 0
-13675 -5536 -5655 -5660 0
-13675 -5536 -5653 -5662 0
-13675 -5536 -5651 -5664 0
-13675 -5536 -5649 -5666 0
-13675 -5536 -5647 -5668 0
-13675 -5536 -5645 -5670 0
-13675 -5536 -5643 -5672 0
-13675 -5536 -5641 -5674 0
-13675 -5536 -5639 -5676 0
-13675 -5536 -5637 -5678 0
-13675 -5536 -5635 -5680 0
-13675 -5536 -5633 -5682 0
-13675 -5536 -5631 -5684 0
-13675 -5536 -5629 -5686 0
-13675 -5536 -5627 -5688 0
-13675 -5536 -5625 -5690 0
-13675 -5536 -5623 -5692 0
-13675 -5536 -5621 -5694 0
-13675 -5536 -5619 -5696 0
-13675 -5536 -5617 -5698 0
-13675 -5536 -5615 -5700 0
-13675 -5536 -5613 -5702 0
-13675 -5536 -5611 -5704 0
-13675 -5536 -5610 -5706 0
-13675 -5534 -5660 0
-13675 -5534 -5655 -5662 0
-13675 -5534 -5653 -5664 0
-13675 -5534 -5651 -5666 0
-13675 -5534 -5649 -5668 0
-13675 -5534 -5647 -5670 0
-13675 -5534 -5645 -5672 0
-13675 -5534 -5643 -5674 0
-13675 -5534 -5641 -5676 0
-13675 -5534 -5639 -5678 0
-13675 -5534 -5637 -5680 0
-13675 -5534 -5635 -5682 0
-13675 -5534 -5633 -5684 0
-13675 -5534 -5631 -5686 0
-13675 -5534 -5629 -5688 0
-13675 -5534 -5627 -5690 0
-13675 -5534 -5625 -5692 0
-13675 -5534 -5623 -5694 0
-13675 -5534 -5621 -5696 0
-13675 -5534 -5619 -5698 0
-13675 -5534 -5617 -5700 0
-13675 -5534 -5615 -5702 0
-13675 -5534 -5613 -5704 0
-13675 -5534 -5611 -5706 0
-13675 -5534 -5610 -5708 0
-13675 -5532 -5662 0
-13675 -5532 -5655 -5664 0
-13675 -5532 -5653 -5666 0
-13675 -5532 -5651 -5668 0
-13675 -5532 -5649 -5670 0
-13675 -5532 -5647 -5672 0
-13675 -5532 -5645 -5674 0
-13675 -5532 -5643 -5676 0
-13675 -5532 -5641 -5678 0
-13675 -5532 -5639 -5680 0
-13675 -5532 -5637 -5682 0
-13675 -5532 -5635 -5684 0
-13675 -5532 -5633 -5686 0
-13675 -5532 -5631 -5688 0
-13675 -5532 -5629 -5690 0
-13675 -5532 -5627 -5692 0
-13675 -5532 -5625 -5694 0
-13675 -5532 -5623 -5696 0
-13675 -5532 -5621 -5698 0
-13675 -5532 -5619 -5700 0
-13675 -5532 -5617 -5702 0
-13675 -5532 -5615 -5704 0
-13675 -5532 -5613 -5706 0
-13675 -5532 -5611 -5708 0
-13675 -5532 -5610 -5710 0
-13675 -5530 -5664 0
-13675 -5530 -5655 -5666 0
-13675 -5530 -5653 -5668 0
-13675 -5530 -5651 -5670 0
-13675 -5530 -5649 -5672 0
-13675 -5530 -5647 -5674 0
-13675 -5530 -5645 -5676 0
-13675 -5530 -5643 -5678 0
-13675 -5530 -5641 -5680 0
-13675 -5530 -5639 -5682 0
-13675 -5530 -5637 -5684 0
-13675 -5530 -5635 -5686 0
-13675 -5530 -5633 -5688 0
-13675 -5530 -5631 -5690 0
-13675 -5530 -5629 -5692 0
-13675 -5530 -5627 -5694 0
-13675 -5530 -5625 -5696 0
-13675 -5530 -5623 -5698 0
-13675 -5530 -5621 -5700 0
-13675 -5530 -5619 -5702 0
-13675 -5530 -5617 -5704 0
-13675 -5530 -5615 -5706 0
-13675 -5530 -5613 -5708 0
-13675 -5530 -5611 -5710 0
-13675 -5530 -5610 -5712 0
-13675 -5528 -5666 0
-13675 -5528 -5655 -5668 0
-13675 -5528 -5653 -5670 0
-13675 -5528 -5651 -5672 0
-13675 -5528 -5649 -5674 0
-13675 -5528 -5647 -5676 0
-13675 -5528 -5645 -5678 0
-13675 -5528 -5643 -5680 0
-13675 -5528 -5641 -5682 0
-13675 -5528 -5639 -5684 0
-13675 -5528 -5637 -5686 0
-13675 -5528 -5635 -5688 0
-13675 -5528 -5633 -5690 0
-13675 -5528 -5631 -5692 0
-13675 -5528 -5629 -5694 0
-13675 -5528 -5627 -5696 0
-13675 -5528 -5625 -5698 0
-13675 -5528 -5623 -5700 0
-13675 -5528 -5621 -5702 0
-13675 -5528 -5619 -5704 0
-13675 -5528 -5617 -5706 0
-13675 -5528 -5615 -5708 0
-13675 -5528 -5613 -5710 0
-13675 -5528 -5611 -5712 0
-13675 -5528 -5610 -5714 0
-13675 -5526 -5668 0
-13675 -5526 -5655 -5670 0
-13675 -5526 -5653 -5672 0
-13675 -5526 -5651 -5674 0
-13675 -5526 -5649 -5676 0
-13675 -5526 -5647 -5678 0
-13675 -5526 -5645 -5680 0
-13675 -5526 -5643 -5682 0
-13675 -5526 -5641 -5684 0
-13675 -5526 -5639 -5686 0
-13675 -5526 -5637 -5688 0
-13675 -5526 -5635 -5690 0
-13675 -5526 -5633 -5692 0
-13675 -5526 -5631 -5694 0
-13675 -5526 -5629 -5696 0
-13675 -5526 -5627 -5698 0
-13675 -5526 -5625 -5700 0
-13675 -5526 -5623 -5702 0
-13675 -5526 -5621 -5704 0
-13675 -5526 -5619 -5706 0
-13675 -5526 -5617 -5708 0
-13675 -5526 -5615 -5710 0
-13675 -5526 -5613 -5712 0
-13675 -5526 -5611 -5714 0
-13675 -5526 -5610 -5716 0
-13675 -5524 -5670 0
-13675 -5524 -5655 -5672 0
-13675 -5524 -5653 -5674 0
-13675 -5524 -5651 -5676 0
-13675 -5524 -5649 -5678 0
-13675 -5524 -5647 -5680 0
-13675 -5524 -5645 -5682 0
-13675 -5524 -5643 -5684 0
-13675 -5524 -5641 -5686 0
-13675 -5524 -5639 -5688 0
-13675 -5524 -5637 -5690 0
-13675 -5524 -5635 -5692 0
-13675 -5524 -5633 -5694 0
-13675 -5524 -5631 -5696 0
-13675 -5524 -5629 -5698 0
-13675 -5524 -5627 -5700 0
-13675 -5524 -5625 -5702 0
-13675 -5524 -5623 -5704 0
-13675 -5524 -5621 -5706 0
-13675 -5524 -5619 -5708 0
-13675 -5524 -5617 -5710 0
-13675 -5524 -5615 -5712 0
-13675 -5524 -5613 -5714 0
-13675 -5524 -5611 -5716 0
-13675 -5524 -5610 -5718 0
-13675 -5522 -5672 0
-13675 -5522 -5655 -5674 0
-13675 -5522 -5653 -5676 0
-13675 -5522 -5651 -5678 0
-13675 -5522 -5649 -5680 0
-13675 -5522 -5647 -5682 0
-13675 -5522 -5645 -5684 0
-13675 -5522 -5643 -5686 0
-13675 -5522 -5641 -5688 0
-13675 -5522 -5639 -5690 0
-13675 -5522 -5637 -5692 0
-13675 -5522 -5635 -5694 0
-13675 -5522 -5633 -5696 0
-13675 -5522 -5631 -5698 0
-13675 -5522 -5629 -5700 0
-13675 -5522 -5627 -5702 0
-13675 -5522 -5625 -5704 0
-13675 -5522 -5623 -5706 0
-13675 -5522 -5621 -5708 0
-13675 -5522 -5619 -5710 0
-13675 -5522 -5617 -5712 0
-13675 -5522 -5615 -5714 0
-13675 -5522 -5613 -5716 0
-13675 -5522 -5611 -5718 0
-13675 -5522 -5610 0
-13675 -5520 -5674 0
-13675 -5520 -5655 -5676 0
-13675 -5520 -5653 -5678 0
-13675 -5520 -5651 -5680 0
-13675 -5520 -5649 -5682 0
-13675 -5520 -5647 -5684 0
-13675 -5520 -5645 -5686 0
-13675 -5520 -5643 -5688 0
-13675 -5520 -5641 -5690 0
-13675 -5520 -5639 -5692 0
-13675 -5520 -5637 -5694 0
-13675 -5520 -5635 -5696 0
-13675 -5520 -5633 -5698 0
-13675 -5520 -5631 -5700 0
-13675 -5520 -5629 -5702 0
-13675 -5520 -5627 -5704 0
-13675 -5520 -5625 -5706 0
-13675 -5520 -5623 -5708 0
-13675 -5520 -5621 -5710 0
-13675 -5520 -5619 -5712 0
-13675 -5520 -5617 -5714 0
-13675 -5520 -5615 -5716 0
-13675 -5520 -5613 -5718 0
-13675 -5520 -5611 0
-13675 -5520 -5610 0
-13675 -5518 -5676 0
-13675 -5518 -5655 -5678 0
-13675 -5518 -5653 -5680 0
-13675 -5518 -5651 -5682 0
-13675 -5518 -5649 -5684 0
-13675 -5518 -5647 -5686 0
-13675 -5518 -5645 -5688 0
-13675 -5518 -5643 -5690 0
-13675 -5518 -5641 -5692 0
-13675 -5518 -5639 -5694 0
-13675 -5518 -5637 -5696 0
-13675 -5518 -5635 -5698 0
-13675 -5518 -5633 -5700 0
-13675 -5518 -5631 -5702 0
-13675 -5518 -5629 -5704 0
-13675 -5518 -5627 -5706 0
-13675 -5518 -5625 -5708 0
-13675 -5518 -5623 -5710 0
-13675 -5518 -5621 -5712 0
-13675 -5518 -5619 -5714 0
-13675 -5518 -5617 -5716 0
-13675 -5518 -5615 -5718 0
-13675 -5518 -5613 0
-13675 -5518 -5611 0
-13675 -5518 -5610 0
-13675 -5517 -5678 0
-13675 -5517 -5655 -5680 0
-13675 -5517 -5653 -5682 0
-13675 -5517 -5651 -5684 0
-13675 -5517 -5649 -5686 0
-13675 -5517 -5647 -5688 0
-13675 -5517 -5645 -5690 0
-13675 -5517 -5643 -5692 0
-13675 -5517 -5641 -5694 0
-13675 -5517 -5639 -5696 0
-13675 -5517 -5637 -5698 0
-13675 -5517 -5635 -5700 0
-13675 -5517 -5633 -5702 0
-13675 -5517 -5631 -5704 0
-13675 -5517 -5629 -5706 0
-13675 -5517 -5627 -5708 0
-13675 -5517 -5625 -5710 0
-13675 -5517 -5623 -5712 0
-13675 -5517 -5621 -5714 0
-13675 -5517 -5619 -5716 0
-13675 -5517 -5617 -5718 0
-13675 -5517 -5615 0
-13675 -5517 -5613 0
-13675 -5517 -5611 0
-13675 -5517 -5610 0
13675 5615 5718 0
13675 5617 5716 0
13675 5619 5714 0
13675 5621 5712 0
13675 5623 5710 0
13675 5625 5708 0
13675 5627 5706 0
13675 5629 5704 0
13675 5631 5702 0
13675 5633 5700 0
13675 5635 5698 0
13675 5637 5696 0
13675 5639 5694 0
13675 5641 5692 0
13675 5643 5690 0
13675 5645 5688 0
13675 5647 5686 0
13675 5649 5684 0
13675 5651 5682 0
13675 5653 5680 0
13675 5655 5678 0
13675 5517 5613 5718 0
13675 5517 5615 5716 0
13675 5517 5617 5714 0
13675 5517 5619 5712 0
13675 5517 5621 5710 0
13675 5517 5623 5708 0
13675 5517 5625 5706 0
13675 5517 5627 5704 0
13675 5517 5629 5702 0
13675 5517 5631 5700 0
13675 5517 5633 5698 0
13675 5517 5635 5696 0
13675 5517 5637 5694 0
13675 5517 5639 5692 0
13675 5517 5641 5690 0
13675 5517 5643 5688 0
13675 5517 5645 5686 0
13675 5517 5647 5684 0
13675 5517 5649 5682 0
13675 5517 5651 5680 0
13675 5517 5653 5678 0
13675 5517 5655 5676 0
13675 5518 5611 5718 0
13675 5518 5613 5716 0
13675 5518 5615 5714 0
13675 5518 5617 5712 0
13675 5518 5619 5710 0
13675 5518 5621 5708 0
13675 5518 5623 5706 0
13675 5518 5625 5704 0
13675 5518 5627 5702 0
13675 5518 5629 5700 0
13675 5518 5631 5698 0
13675 5518 5633 5696 0
13675 5518 5635 5694 0
13675 5518 5637 5692 0
13675 5518 5639 5690 0
13675 5518 5641 5688 0
13675 5518 5643 5686 0
13675 5518 5645 5684 0
13675 5518 5647 5682 0
13675 5518 5649 5680 0
13675 5518 5651 5678 0
13675 5518 5653 5676 0
13675 5518 5655 5674 0
13675 5520 5610 5718 0
13675 5520 5611 5716 0
13675 5520 5613 5714 0
13675 5520 5615 5712 0
13675 5520 5617 5710 0
13675 5520 5619 5708 0
13675 5520 5621 5706 0
13675 5520 5623 5704 0
13675 5520 5625 5702 0
13675 5520 5627 5700 0
13675 5520 5629 5698 0
13675 5520 5631 5696 0
13675 5520 5633 5694 0
13675 5520 5635 5692 0
13675 5520 5637 5690 0
13675 5520 5639 5688 0
13675 5520 5641 5686 0
13675 5520 5643 5684 0
13675 5520 5645 5682 0
13675 5520 5647 5680 0
13675 5520 5649 5678 0
13675 5520 5651 5676 0
13675 5520 5653 5674 0
13675 5520 5655 5672 0
13675 5522 5718 0
13675 5522 5610 5716 0
13675 5522 5611 5714 0
13675 5522 5613 5712 0
13675 5522 5615 5710 0
13675 5522 5617 5708 0
13675 5522 5619 5706 0
13675 5522 5621 5704 0
13675 5522 5623 5702 0
13675 5522 5625 5700 0
13675 5522 5627 5698 0
13675 5522 5629 5696 0
13675 5522 5631 5694 0
13675 5522 5633 5692 0
13675 5522 5635 5690 0
13675 5522 5637 5688 0
13675 5522 5639 5686 0
13675 5522 5641 5684 0
13675 5522 5643 5682 0
13675 5522 5645 5680 0
13675 5522 5647 5678 0
13675 5522 5649 5676 0
13675 5522 5651 5674 0
13675 5522 5653 5672 0
13675 5522 5655 5670 0
13675 5524 5716 0
13675 5524 5610 5714 0
13675 5524 5611 5712 0
13675 5524 5613 5710 0
13675 5524 5615 5708 0
13675 5524 5617 5706 0
13675 5524 5619 5704 0
13675 5524 5621 5702 0
13675 5524 5623 5700 0
13675 5524 5625 5698 0
13675 5524 5627 5696 0
13675 5524 5629 5694 0
13675 5524 5631 5692 0
13675 5524 5633 5690 0
13675 5524 5635 5688 0
13675 5524 5637 5686 0
13675 5524 5639 5684 0
13675 5524 5641 5682 0
13675 5524 5643 5680 0
13675 5524 5645 5678 0
13675 5524 5647 5676 0
13675 5524 5649 5674 0
13675 5524 5651 5672 0
13675 5524 5653 5670 0
13675 5524 5655 5668 0
13675 5526 5714 0
13675 5526 5610 5712 0
13675 5526 5611 5710 0
13675 5526 5613 5708 0
13675 5526 5615 5706 0
13675 5526 5617 5704 0
13675 5526 5619 5702 0
13675 5526 5621 5700 0
13675 5526 5623 5698 0
13675 5526 5625 5696 0
13675 5526 5627 5694 0
13675 5526 5629 5692 0
13675 5526 5631 5690 0
13675 5526 5633 5688 0
13675 5526 5635 5686 0
13675 5526 5637 5684 0
13675 5526 5639 5682 0
13675 5526 5641 5680 0
13675 5526 5643 5678 0
13675 5526 5645 5676 0
13675 5526 5647 5674 0
13675 5526 5649 5672 0
13675 5526 5651 5670 0
13675 5526 5653 5668 0
13675 5526 5655 5666 0
13675 5528 5712 0
13675 5528 5610 5710 0
13675 5528 5611 5708 0
13675 5528 5613 5706 0
13675 5528 5615 5704 0
13675 5528 5617 5702 0
13675 5528 5619 5700 0
13675 5528 5621 5698 0
13675 5528 5623 5696 0
13675 5528 5625 5694 0
13675 5528 5627 5692 0
13675 5528 5629 5690 0
13675 5528 5631 5688 0
13675 5528 5633 5686 0
13675 5528 5635 5684 0
13675 5528 5637 5682 0
13675 5528 5639 5680 0
13675 5528 5641 5678 0
13675 5528 5643 5676 0
13675 5528 5645 5674 0
13675 5528 5647 5672 0
13675 5528 5649 5670 0
13675 5528 5651 5668 0
13675 5528 5653 5666 0
13675 5528 5655 5664 0
13675 5530 5710 0
13675 5530 5610 5708 0
13675 5530 5611 5706 0
13675 5530 5613 5704 0
13675 5530 5615 5702 0
13675 5530 5617 5700 0
13675 5530 5619 5698 0
13675 5530 5621 5696 0
13675 5530 5623 5694 0
13675 5530 5625 5692 0
13675 5530 5627 5690 0
13675 5530 5629 5688 0
13675 5530 5631 5686 0
13675 5530 5633 5684 0
13675 5530 5635 5682 0
13675 5530 5637 5680 0
13675 5530 5639 5678 0
13675 5530 5641 5676 0
13675 5530 5643 5674 0
13675 5530 5645 5672 0
13675 5530 5647 5670 0
13675 5530 5649 5668 0
13675 5530 5651 5666 0
13675 5530 5653 5664 0
13675 5530 5655 5662 0
13675 5532 5708 0
13675 5532 5610 5706 0
13675 5532 5611 5704 0
13675 5532 5613 5702 0
13675 5532 5615 5700 0
13675 5532 5617 5698 0
13675 5532 5619 5696 0
13675 5532 5621 5694 0
13675 5532 5623 5692 0
13675 5532 5625 5690 0
13675 5532 5627 5688 0
13675 5532 5629 5686 0
13675 5532 5631 5684 0
13675 5532 5633 5682 0
13675 5532 5635 5680 0
13675 5532 5637 5678 0
13675 5532 5639 5676 0
13675 5532 5641 5674 0
13675 5532 5643 5672 0
13675 5532 5645 5670 0
13675 5532 5647 5668 0
13675 5532 5649 5666 0
13675 5532 5651 5664 0
13675 5532 5653 5662 0
13675 5532 5655 5660 0
13675 5534 5706 0
13675 5534 5610 5704 0
13675 5534 5611 5702 0
13675 5534 5613 5700 0
13675 5534 5615 5698 0
13675 5534 5617 5696 0
13675 5534 5619 5694 0
13675 5534 5621 5692 0
13675 5534 5623 5690 0
13675 5534 5625 5688 0
13675 5534 5627 5686 0
13675 5534 5629 5684 0
13675 5534 5631 5682 0
13675 5534 5633 5680 0
13675 5534 5635 5678 0
13675 5534 5637 5676 0
13675 5534 5639 5674 0
13675 5534 5641 5672 0
13675 5534 5643 5670 0
13675 5534 5645 5668 0
13675 5534 5647 5666 0
13675 5534 5649 5664 0
13675 5534 5651 5662 0
13675 5534 5653 5660 0
13675 5534 5655 5658 0
13675 5536 5704 0
13675 5536 5610 5702 0
13675 5536 5611 5700 0
13675 5536 5613 5698 0
13675 5536 5615 5696 0
13675 5536 5617 5694 0
13675 5536 5619 5692 0
13675 5536 5621 5690 0
13675 5536 5623 5688 0
13675 5536 5625 5686 0
13675 5536 5627 5684 0
13675 5536 5629 5682 0
13675 5536 5631 5680 0
13675 5536 5633 5678 0
13675 5536 5635 5676 0
13675 5536 5637 5674 0
13675 5536 5639 5672 0
13675 5536 5641 5670 0
13675 5536 5643 5668 0
13675 5536 5645 5666 0
13675 5536 5647 5664 0
13675 5536 5649 5662 0
13675 5536 5651 5660 0
13675 5536 5653 5658 0
13675 5536 5655 5657 0
13675 5538 5702 0
13675 5538 5610 5700 0
13675 5538 5611 5698 0
13675 5538 5613 5696 0
13675 5538 5615 5694 0
13675 5538 5617 5692 0
13675 5538 5619 5690 0
13675 5538 5621 5688 0
13675 5538 5623 5686 0
13675 5538 5625 5684 0
13675 5538 5627 5682 0
13675 5538 5629 5680 0
13675 5538 5631 5678 0
13675 5538 5633 5676 0
13675 5538 5635 5674 0
13675 5538 5637 5672 0
13675 5538 5639 5670 0
13675 5538 5641 5668 0
13675 5538 5643 5666 0
13675 5538 5645 5664 0
13675 5538 5647 5662 0
13675 5538 5649 5660 0
13675 5538 5651 5658 0
13675 5538 5653 5657 0
13675 5538 5655 0
13675 5540 5700 0
13675 5540 5610 5698 0
13675 5540 5611 5696 0
13675 5540 5613 5694 0
13675 5540 5615 5692 0
13675 5540 5617 5690 0
13675 5540 5619 5688 0
13675 5540 5621 5686 0
13675 5540 5623 5684 0
13675 5540 5625 5682 0
13675 5540 5627 5680 0
13675 5540 5629 5678 0
13675 5540 5631 5676 0
13675 5540 5633 5674 0
13675 5540 5635 5672 0
13675 5540 5637 5670 0
13675 5540 5639 5668 0
13675 5540 5641 5666 0
13675 5540 5643 5664 0
13675 5540 5645 5662 0
13675 5540 5647 5660 0
13675 5540 5649 5658 0
13675 5540 5651 5657 0
13675 5540 5653 0
13675 5540 5655 0
13675 5542 5698 0
13675 5542 5610 5696 0
13675 5542 5611 5694 0
13675 5542 5613 5692 0
13675 5542 5615 5690 0
13675 5542 5617 5688 0
13675 5542 5619 5686 0
13675 5542 5621 5684 0
13675 5542 5623 5682 0
13675 5542 5625 5680 0
13675 5542 5627 5678 0
13675 5542 5629 5676 0
13675 5542 5631 5674 0
13675 5542 5633 5672 0
13675 5542 5635 5670 0
13675 5542 5637 5668 0
13675 5542 5639 5666 0
13675 5542 5641 5664 0
13675 5542 5643 5662 0
13675 5542 5645 5660 0
13675 5542 5647 5658 0
13675 5542 5649 5657 0
13675 5542 5651 0
13675 5542 5653 0
13675 5542 5655 0
13675 5544 5696 0
13675 5544 5610 5694 0
13675 5544 5611 5692 0
13675 5544 5613 5690 0
13675 5544 5615 5688 0
13675 5544 5617 5686 0
13675 5544 5619 5684 0
13675 5544 5621 5682 0
13675 5544 5623 5680 0
13675 5544 5625 5678 0
13675 5544 5627 5676 0
13675 5544 5629 5674 0
13675 5544 5631 5672 0
13675 5544 5633 5670 0
13675 5544 5635 5668 0
13675 5544 5637 5666 0
13675 5544 5639 5664 0
13675 5544 5641 5662 0
13675 5544 5643 5660 0
13675 5544 5645 5658 0
13675 5544 5647 5657 0
13675 5544 5649 0
13675 5544 5651 0
13675 5544 5653 0
13675 5544 5655 0
13675 5546 5694 0
13675 5546 5610 5692 0
13675 5546 5611 5690 0
13675 5546 5613 5688 0
13675 5546 5615 5686 0
13675 5546 5617 5684 0
13675 5546 5619 5682 0
13675 5546 5621 5680 0
13675 5546 5623 5678 0
13675 5546 5625 5676 0
13675 5546 5627 5674 0
13675 5546 5629 5672 0
13675 5546 5631 5670 0
13675 5546 5633 5668 0
13675 5546 5635 5666 0
13675 5546 5637 5664 0
13675 5546 5639 5662 0
13675 5546 5641 5660 0
13675 5546 5643 5658 0
13675 5546 5645 5657 0
13675 5546 5647 0
13675 5546 5649 0
13675 5546 5651 0
13675 5546 5653 0
13675 5546 5655 0
c (((aux564 + aux567 + aux568)<=36)=tv=SATLiteral(13676))
-13676 5851 5952 0
-13676 5853 5950 0
-13676 5855 5948 0
-13676 5857 5946 0
-13676 5859 5944 0
-13676 5861 5942 0
-13676 5863 5940 0
-13676 5865 5938 0
-13676 5867 5936 0
-13676 5869 5934 0
-13676 5871 5932 0
-13676 5873 5930 0
-13676 5875 5928 0
-13676 5877 5926 0
-13676 5879 5924 0
-13676 5881 5922 0
-13676 5883 5920 0
-13676 5885 5918 0
-13676 5887 5916 0
-13676 5889 5914 0
-13676 5751 5849 5952 0
-13676 5751 5851 5950 0
-13676 5751 5853 5948 0
-13676 5751 5855 5946 0
-13676 5751 5857 5944 0
-13676 5751 5859 5942 0
-13676 5751 5861 5940 0
-13676 5751 5863 5938 0
-13676 5751 5865 5936 0
-13676 5751 5867 5934 0
-13676 5751 5869 5932 0
-13676 5751 5871 5930 0
-13676 5751 5873 5928 0
-13676 5751 5875 5926 0
-13676 5751 5877 5924 0
-13676 5751 5879 5922 0
-13676 5751 5881 5920 0
-13676 5751 5883 5918 0
-13676 5751 5885 5916 0
-13676 5751 5887 5914 0
-13676 5751 5889 5912 0
-13676 5752 5847 5952 0
-13676 5752 5849 5950 0
-13676 5752 5851 5948 0
-13676 5752 5853 5946 0
-13676 5752 5855 5944 0
-13676 5752 5857 5942 0
-13676 5752 5859 5940 0
-13676 5752 5861 5938 0
-13676 5752 5863 5936 0
-13676 5752 5865 5934 0
-13676 5752 5867 5932 0
-13676 5752 5869 5930 0
-13676 5752 5871 5928 0
-13676 5752 5873 5926 0
-13676 5752 5875 5924 0
-13676 5752 5877 5922 0
-13676 5752 5879 5920 0
-13676 5752 5881 5918 0
-13676 5752 5883 5916 0
-13676 5752 5885 5914 0
-13676 5752 5887 5912 0
-13676 5752 5889 5910 0
-13676 5754 5845 5952 0
-13676 5754 5847 5950 0
-13676 5754 5849 5948 0
-13676 5754 5851 5946 0
-13676 5754 5853 5944 0
-13676 5754 5855 5942 0
-13676 5754 5857 5940 0
-13676 5754 5859 5938 0
-13676 5754 5861 5936 0
-13676 5754 5863 5934 0
-13676 5754 5865 5932 0
-13676 5754 5867 5930 0
-13676 5754 5869 5928 0
-13676 5754 5871 5926 0
-13676 5754 5873 5924 0
-13676 5754 5875 5922 0
-13676 5754 5877 5920 0
-13676 5754 5879 5918 0
-13676 5754 5881 5916 0
-13676 5754 5883 5914 0
-13676 5754 5885 5912 0
-13676 5754 5887 5910 0
-13676 5754 5889 5908 0
-13676 5756 5844 5952 0
-13676 5756 5845 5950 0
-13676 5756 5847 5948 0
-13676 5756 5849 5946 0
-13676 5756 5851 5944 0
-13676 5756 5853 5942 0
-13676 5756 5855 5940 0
-13676 5756 5857 5938 0
-13676 5756 5859 5936 0
-13676 5756 5861 5934 0
-13676 5756 5863 5932 0
-13676 5756 5865 5930 0
-13676 5756 5867 5928 0
-13676 5756 5869 5926 0
-13676 5756 5871 5924 0
-13676 5756 5873 5922 0
-13676 5756 5875 5920 0
-13676 5756 5877 5918 0
-13676 5756 5879 5916 0
-13676 5756 5881 5914 0
-13676 5756 5883 5912 0
-13676 5756 5885 5910 0
-13676 5756 5887 5908 0
-13676 5756 5889 5906 0
-13676 5758 5952 0
-13676 5758 5844 5950 0
-13676 5758 5845 5948 0
-13676 5758 5847 5946 0
-13676 5758 5849 5944 0
-13676 5758 5851 5942 0
-13676 5758 5853 5940 0
-13676 5758 5855 5938 0
-13676 5758 5857 5936 0
-13676 5758 5859 5934 0
-13676 5758 5861 5932 0
-13676 5758 5863 5930 0
-13676 5758 5865 5928 0
-13676 5758 5867 5926 0
-13676 5758 5869 5924 0
-13676 5758 5871 5922 0
-13676 5758 5873 5920 0
-13676 5758 5875 5918 0
-13676 5758 5877 5916 0
-13676 5758 5879 5914 0
-13676 5758 5881 5912 0
-13676 5758 5883 5910 0
-13676 5758 5885 5908 0
-13676 5758 5887 5906 0
-13676 5758 5889 5904 0
-13676 5760 5950 0
-13676 5760 5844 5948 0
-13676 5760 5845 5946 0
-13676 5760 5847 5944 0
-13676 5760 5849 5942 0
-13676 5760 5851 5940 0
-13676 5760 5853 5938 0
-13676 5760 5855 5936 0
-13676 5760 5857 5934 0
-13676 5760 5859 5932 0
-13676 5760 5861 5930 0
-13676 5760 5863 5928 0
-13676 5760 5865 5926 0
-13676 5760 5867 5924 0
-13676 5760 5869 5922 0
-13676 5760 5871 5920 0
-13676 5760 5873 5918 0
-13676 5760 5875 5916 0
-13676 5760 5877 5914 0
-13676 5760 5879 5912 0
-13676 5760 5881 5910 0
-13676 5760 5883 5908 0
-13676 5760 5885 5906 0
-13676 5760 5887 5904 0
-13676 5760 5889 5902 0
-13676 5762 5948 0
-13676 5762 5844 5946 0
-13676 5762 5845 5944 0
-13676 5762 5847 5942 0
-13676 5762 5849 5940 0
-13676 5762 5851 5938 0
-13676 5762 5853 5936 0
-13676 5762 5855 5934 0
-13676 5762 5857 5932 0
-13676 5762 5859 5930 0
-13676 5762 5861 5928 0
-13676 5762 5863 5926 0
-13676 5762 5865 5924 0
-13676 5762 5867 5922 0
-13676 5762 5869 5920 0
-13676 5762 5871 5918 0
-13676 5762 5873 5916 0
-13676 5762 5875 5914 0
-13676 5762 5877 5912 0
-13676 5762 5879 5910 0
-13676 5762 5881 5908 0
-13676 5762 5883 5906 0
-13676 5762 5885 5904 0
-13676 5762 5887 5902 0
-13676 5762 5889 5900 0
-13676 5764 5946 0
-13676 5764 5844 5944 0
-13676 5764 5845 5942 0
-13676 5764 5847 5940 0
-13676 5764 5849 5938 0
-13676 5764 5851 5936 0
-13676 5764 5853 5934 0
-13676 5764 5855 5932 0
-13676 5764 5857 5930 0
-13676 5764 5859 5928 0
-13676 5764 5861 5926 0
-13676 5764 5863 5924 0
-13676 5764 5865 5922 0
-13676 5764 5867 5920 0
-13676 5764 5869 5918 0
-13676 5764 5871 5916 0
-13676 5764 5873 5914 0
-13676 5764 5875 5912 0
-13676 5764 5877 5910 0
-13676 5764 5879 5908 0
-13676 5764 5881 5906 0
-13676 5764 5883 5904 0
-13676 5764 5885 5902 0
-13676 5764 5887 5900 0
-13676 5764 5889 5898 0
-13676 5766 5944 0
-13676 5766 5844 5942 0
-13676 5766 5845 5940 0
-13676 5766 5847 5938 0
-13676 5766 5849 5936 0
-13676 5766 5851 5934 0
-13676 5766 5853 5932 0
-13676 5766 5855 5930 0
-13676 5766 5857 5928 0
-13676 5766 5859 5926 0
-13676 5766 5861 5924 0
-13676 5766 5863 5922 0
-13676 5766 5865 5920 0
-13676 5766 5867 5918 0
-13676 5766 5869 5916 0
-13676 5766 5871 5914 0
-13676 5766 5873 5912 0
-13676 5766 5875 5910 0
-13676 5766 5877 5908 0
-13676 5766 5879 5906 0
-13676 5766 5881 5904 0
-13676 5766 5883 5902 0
-13676 5766 5885 5900 0
-13676 5766 5887 5898 0
-13676 5766 5889 5896 0
-13676 5768 5942 0
-13676 5768 5844 5940 0
-13676 5768 5845 5938 0
-13676 5768 5847 5936 0
-13676 5768 5849 5934 0
-13676 5768 5851 5932 0
-13676 5768 5853 5930 0
-13676 5768 5855 5928 0
-13676 5768 5857 5926 0
-13676 5768 5859 5924 0
-13676 5768 5861 5922 0
-13676 5768 5863 5920 0
-13676 5768 5865 5918 0
-13676 5768 5867 5916 0
-13676 5768 5869 5914 0
-13676 5768 5871 5912 0
-13676 5768 5873 5910 0
-13676 5768 5875 5908 0
-13676 5768 5877 5906 0
-13676 5768 5879 5904 0
-13676 5768 5881 5902 0
-13676 5768 5883 5900 0
-13676 5768 5885 5898 0
-13676 5768 5887 5896 0
-13676 5768 5889 5894 0
-13676 5770 5940 0
-13676 5770 5844 5938 0
-13676 5770 5845 5936 0
-13676 5770 5847 5934 0
-13676 5770 5849 5932 0
-13676 5770 5851 5930 0
-13676 5770 5853 5928 0
-13676 5770 5855 5926 0
-13676 5770 5857 5924 0
-13676 5770 5859 5922 0
-13676 5770 5861 5920 0
-13676 5770 5863 5918 0
-13676 5770 5865 5916 0
-13676 5770 5867 5914 0
-13676 5770 5869 5912 0
-13676 5770 5871 5910 0
-13676 5770 5873 5908 0
-13676 5770 5875 5906 0
-13676 5770 5877 5904 0
-13676 5770 5879 5902 0
-13676 5770 5881 5900 0
-13676 5770 5883 5898 0
-13676 5770 5885 5896 0
-13676 5770 5887 5894 0
-13676 5770 5889 5892 0
-13676 5772 5938 0
-13676 5772 5844 5936 0
-13676 5772 5845 5934 0
-13676 5772 5847 5932 0
-13676 5772 5849 5930 0
-13676 5772 5851 5928 0
-13676 5772 5853 5926 0
-13676 5772 5855 5924 0
-13676 5772 5857 5922 0
-13676 5772 5859 5920 0
-13676 5772 5861 5918 0
-13676 5772 5863 5916 0
-13676 5772 5865 5914 0
-13676 5772 5867 5912 0
-13676 5772 5869 5910 0
-13676 5772 5871 5908 0
-13676 5772 5873 5906 0
-13676 5772 5875 5904 0
-13676 5772 5877 5902 0
-13676 5772 5879 5900 0
-13676 5772 5881 5898 0
-13676 5772 5883 5896 0
-13676 5772 5885 5894 0
-13676 5772 5887 5892 0
-13676 5772 5889 5891 0
-13676 5774 5936 0
-13676 5774 5844 5934 0
-13676 5774 5845 5932 0
-13676 5774 5847 5930 0
-13676 5774 5849 5928 0
-13676 5774 5851 5926 0
-13676 5774 5853 5924 0
-13676 5774 5855 5922 0
-13676 5774 5857 5920 0
-13676 5774 5859 5918 0
-13676 5774 5861 5916 0
-13676 5774 5863 5914 0
-13676 5774 5865 5912 0
-13676 5774 5867 5910 0
-13676 5774 5869 5908 0
-13676 5774 5871 5906 0
-13676 5774 5873 5904 0
-13676 5774 5875 5902 0
-13676 5774 5877 5900 0
-13676 5774 5879 5898 0
-13676 5774 5881 5896 0
-13676 5774 5883 5894 0
-13676 5774 5885 5892 0
-13676 5774 5887 5891 0
-13676 5774 5889 0
-13676 5776 5934 0
-13676 5776 5844 5932 0
-13676 5776 5845 5930 0
-13676 5776 5847 5928 0
-13676 5776 5849 5926 0
-13676 5776 5851 5924 0
-13676 5776 5853 5922 0
-13676 5776 5855 5920 0
-13676 5776 5857 5918 0
-13676 5776 5859 5916 0
-13676 5776 5861 5914 0
-13676 5776 5863 5912 0
-13676 5776 5865 5910 0
-13676 5776 5867 5908 0
-13676 5776 5869 5906 0
-13676 5776 5871 5904 0
-13676 5776 5873 5902 0
-13676 5776 5875 5900 0
-13676 5776 5877 5898 0
-13676 5776 5879 5896 0
-13676 5776 5881 5894 0
-13676 5776 5883 5892 0
-13676 5776 5885 5891 0
-13676 5776 5887 0
-13676 5776 5889 0
-13676 5778 5932 0
-13676 5778 5844 5930 0
-13676 5778 5845 5928 0
-13676 5778 5847 5926 0
-13676 5778 5849 5924 0
-13676 5778 5851 5922 0
-13676 5778 5853 5920 0
-13676 5778 5855 5918 0
-13676 5778 5857 5916 0
-13676 5778 5859 5914 0
-13676 5778 5861 5912 0
-13676 5778 5863 5910 0
-13676 5778 5865 5908 0
-13676 5778 5867 5906 0
-13676 5778 5869 5904 0
-13676 5778 5871 5902 0
-13676 5778 5873 5900 0
-13676 5778 5875 5898 0
-13676 5778 5877 5896 0
-13676 5778 5879 5894 0
-13676 5778 5881 5892 0
-13676 5778 5883 5891 0
-13676 5778 5885 0
-13676 5778 5887 0
-13676 5778 5889 0
-13676 5780 5930 0
-13676 5780 5844 5928 0
-13676 5780 5845 5926 0
-13676 5780 5847 5924 0
-13676 5780 5849 5922 0
-13676 5780 5851 5920 0
-13676 5780 5853 5918 0
-13676 5780 5855 5916 0
-13676 5780 5857 5914 0
-13676 5780 5859 5912 0
-13676 5780 5861 5910 0
-13676 5780 5863 5908 0
-13676 5780 5865 5906 0
-13676 5780 5867 5904 0
-13676 5780 5869 5902 0
-13676 5780 5871 5900 0
-13676 5780 5873 5898 0
-13676 5780 5875 5896 0
-13676 5780 5877 5894 0
-13676 5780 5879 5892 0
-13676 5780 5881 5891 0
-13676 5780 5883 0
-13676 5780 5885 0
-13676 5780 5887 0
-13676 5780 5889 0
13676 -5883 -5891 0
13676 -5881 -5892 0
13676 -5879 -5894 0
13676 -5877 -5896 0
13676 -5875 -5898 0
13676 -5873 -5900 0
13676 -5871 -5902 0
13676 -5869 -5904 0
13676 -5867 -5906 0
13676 -5865 -5908 0
13676 -5863 -5910 0
13676 -5861 -5912 0
13676 -5859 -5914 0
13676 -5857 -5916 0
13676 -5855 -5918 0
13676 -5853 -5920 0
13676 -5851 -5922 0
13676 -5849 -5924 0
13676 -5847 -5926 0
13676 -5845 -5928 0
13676 -5844 -5930 0
13676 -5780 -5885 -5891 0
13676 -5780 -5883 -5892 0
13676 -5780 -5881 -5894 0
13676 -5780 -5879 -5896 0
13676 -5780 -5877 -5898 0
13676 -5780 -5875 -5900 0
13676 -5780 -5873 -5902 0
13676 -5780 -5871 -5904 0
13676 -5780 -5869 -5906 0
13676 -5780 -5867 -5908 0
13676 -5780 -5865 -5910 0
13676 -5780 -5863 -5912 0
13676 -5780 -5861 -5914 0
13676 -5780 -5859 -5916 0
13676 -5780 -5857 -5918 0
13676 -5780 -5855 -5920 0
13676 -5780 -5853 -5922 0
13676 -5780 -5851 -5924 0
13676 -5780 -5849 -5926 0
13676 -5780 -5847 -5928 0
13676 -5780 -5845 -5930 0
13676 -5780 -5844 -5932 0
13676 -5778 -5887 -5891 0
13676 -5778 -5885 -5892 0
13676 -5778 -5883 -5894 0
13676 -5778 -5881 -5896 0
13676 -5778 -5879 -5898 0
13676 -5778 -5877 -5900 0
13676 -5778 -5875 -5902 0
13676 -5778 -5873 -5904 0
13676 -5778 -5871 -5906 0
13676 -5778 -5869 -5908 0
13676 -5778 -5867 -5910 0
13676 -5778 -5865 -5912 0
13676 -5778 -5863 -5914 0
13676 -5778 -5861 -5916 0
13676 -5778 -5859 -5918 0
13676 -5778 -5857 -5920 0
13676 -5778 -5855 -5922 0
13676 -5778 -5853 -5924 0
13676 -5778 -5851 -5926 0
13676 -5778 -5849 -5928 0
13676 -5778 -5847 -5930 0
13676 -5778 -5845 -5932 0
13676 -5778 -5844 -5934 0
13676 -5776 -5889 -5891 0
13676 -5776 -5887 -5892 0
13676 -5776 -5885 -5894 0
13676 -5776 -5883 -5896 0
13676 -5776 -5881 -5898 0
13676 -5776 -5879 -5900 0
13676 -5776 -5877 -5902 0
13676 -5776 -5875 -5904 0
13676 -5776 -5873 -5906 0
13676 -5776 -5871 -5908 0
13676 -5776 -5869 -5910 0
13676 -5776 -5867 -5912 0
13676 -5776 -5865 -5914 0
13676 -5776 -5863 -5916 0
13676 -5776 -5861 -5918 0
13676 -5776 -5859 -5920 0
13676 -5776 -5857 -5922 0
13676 -5776 -5855 -5924 0
13676 -5776 -5853 -5926 0
13676 -5776 -5851 -5928 0
13676 -5776 -5849 -5930 0
13676 -5776 -5847 -5932 0
13676 -5776 -5845 -5934 0
13676 -5776 -5844 -5936 0
13676 -5774 -5891 0
13676 -5774 -5889 -5892 0
13676 -5774 -5887 -5894 0
13676 -5774 -5885 -5896 0
13676 -5774 -5883 -5898 0
13676 -5774 -5881 -5900 0
13676 -5774 -5879 -5902 0
13676 -5774 -5877 -5904 0
13676 -5774 -5875 -5906 0
13676 -5774 -5873 -5908 0
13676 -5774 -5871 -5910 0
13676 -5774 -5869 -5912 0
13676 -5774 -5867 -5914 0
13676 -5774 -5865 -5916 0
13676 -5774 -5863 -5918 0
13676 -5774 -5861 -5920 0
13676 -5774 -5859 -5922 0
13676 -5774 -5857 -5924 0
13676 -5774 -5855 -5926 0
13676 -5774 -5853 -5928 0
13676 -5774 -5851 -5930 0
13676 -5774 -5849 -5932 0
13676 -5774 -5847 -5934 0
13676 -5774 -5845 -5936 0
13676 -5774 -5844 -5938 0
13676 -5772 -5892 0
13676 -5772 -5889 -5894 0
13676 -5772 -5887 -5896 0
13676 -5772 -5885 -5898 0
13676 -5772 -5883 -5900 0
13676 -5772 -5881 -5902 0
13676 -5772 -5879 -5904 0
13676 -5772 -5877 -5906 0
13676 -5772 -5875 -5908 0
13676 -5772 -5873 -5910 0
13676 -5772 -5871 -5912 0
13676 -5772 -5869 -5914 0
13676 -5772 -5867 -5916 0
13676 -5772 -5865 -5918 0
13676 -5772 -5863 -5920 0
13676 -5772 -5861 -5922 0
13676 -5772 -5859 -5924 0
13676 -5772 -5857 -5926 0
13676 -5772 -5855 -5928 0
13676 -5772 -5853 -5930 0
13676 -5772 -5851 -5932 0
13676 -5772 -5849 -5934 0
13676 -5772 -5847 -5936 0
13676 -5772 -5845 -5938 0
13676 -5772 -5844 -5940 0
13676 -5770 -5894 0
13676 -5770 -5889 -5896 0
13676 -5770 -5887 -5898 0
13676 -5770 -5885 -5900 0
13676 -5770 -5883 -5902 0
13676 -5770 -5881 -5904 0
13676 -5770 -5879 -5906 0
13676 -5770 -5877 -5908 0
13676 -5770 -5875 -5910 0
13676 -5770 -5873 -5912 0
13676 -5770 -5871 -5914 0
13676 -5770 -5869 -5916 0
13676 -5770 -5867 -5918 0
13676 -5770 -5865 -5920 0
13676 -5770 -5863 -5922 0
13676 -5770 -5861 -5924 0
13676 -5770 -5859 -5926 0
13676 -5770 -5857 -5928 0
13676 -5770 -5855 -5930 0
13676 -5770 -5853 -5932 0
13676 -5770 -5851 -5934 0
13676 -5770 -5849 -5936 0
13676 -5770 -5847 -5938 0
13676 -5770 -5845 -5940 0
13676 -5770 -5844 -5942 0
13676 -5768 -5896 0
13676 -5768 -5889 -5898 0
13676 -5768 -5887 -5900 0
13676 -5768 -5885 -5902 0
13676 -5768 -5883 -5904 0
13676 -5768 -5881 -5906 0
13676 -5768 -5879 -5908 0
13676 -5768 -5877 -5910 0
13676 -5768 -5875 -5912 0
13676 -5768 -5873 -5914 0
13676 -5768 -5871 -5916 0
13676 -5768 -5869 -5918 0
13676 -5768 -5867 -5920 0
13676 -5768 -5865 -5922 0
13676 -5768 -5863 -5924 0
13676 -5768 -5861 -5926 0
13676 -5768 -5859 -5928 0
13676 -5768 -5857 -5930 0
13676 -5768 -5855 -5932 0
13676 -5768 -5853 -5934 0
13676 -5768 -5851 -5936 0
13676 -5768 -5849 -5938 0
13676 -5768 -5847 -5940 0
13676 -5768 -5845 -5942 0
13676 -5768 -5844 -5944 0
13676 -5766 -5898 0
13676 -5766 -5889 -5900 0
13676 -5766 -5887 -5902 0
13676 -5766 -5885 -5904 0
13676 -5766 -5883 -5906 0
13676 -5766 -5881 -5908 0
13676 -5766 -5879 -5910 0
13676 -5766 -5877 -5912 0
13676 -5766 -5875 -5914 0
13676 -5766 -5873 -5916 0
13676 -5766 -5871 -5918 0
13676 -5766 -5869 -5920 0
13676 -5766 -5867 -5922 0
13676 -5766 -5865 -5924 0
13676 -5766 -5863 -5926 0
13676 -5766 -5861 -5928 0
13676 -5766 -5859 -5930 0
13676 -5766 -5857 -5932 0
13676 -5766 -5855 -5934 0
13676 -5766 -5853 -5936 0
13676 -5766 -5851 -5938 0
13676 -5766 -5849 -5940 0
13676 -5766 -5847 -5942 0
13676 -5766 -5845 -5944 0
13676 -5766 -5844 -5946 0
13676 -5764 -5900 0
13676 -5764 -5889 -5902 0
13676 -5764 -5887 -5904 0
13676 -5764 -5885 -5906 0
13676 -5764 -5883 -5908 0
13676 -5764 -5881 -5910 0
13676 -5764 -5879 -5912 0
13676 -5764 -5877 -5914 0
13676 -5764 -5875 -5916 0
13676 -5764 -5873 -5918 0
13676 -5764 -5871 -5920 0
13676 -5764 -5869 -5922 0
13676 -5764 -5867 -5924 0
13676 -5764 -5865 -5926 0
13676 -5764 -5863 -5928 0
13676 -5764 -5861 -5930 0
13676 -5764 -5859 -5932 0
13676 -5764 -5857 -5934 0
13676 -5764 -5855 -5936 0
13676 -5764 -5853 -5938 0
13676 -5764 -5851 -5940 0
13676 -5764 -5849 -5942 0
13676 -5764 -5847 -5944 0
13676 -5764 -5845 -5946 0
13676 -5764 -5844 -5948 0
13676 -5762 -5902 0
13676 -5762 -5889 -5904 0
13676 -5762 -5887 -5906 0
13676 -5762 -5885 -5908 0
13676 -5762 -5883 -5910 0
13676 -5762 -5881 -5912 0
13676 -5762 -5879 -5914 0
13676 -5762 -5877 -5916 0
13676 -5762 -5875 -5918 0
13676 -5762 -5873 -5920 0
13676 -5762 -5871 -5922 0
13676 -5762 -5869 -5924 0
13676 -5762 -5867 -5926 0
13676 -5762 -5865 -5928 0
13676 -5762 -5863 -5930 0
13676 -5762 -5861 -5932 0
13676 -5762 -5859 -5934 0
13676 -5762 -5857 -5936 0
13676 -5762 -5855 -5938 0
13676 -5762 -5853 -5940 0
13676 -5762 -5851 -5942 0
13676 -5762 -5849 -5944 0
13676 -5762 -5847 -5946 0
13676 -5762 -5845 -5948 0
13676 -5762 -5844 -5950 0
13676 -5760 -5904 0
13676 -5760 -5889 -5906 0
13676 -5760 -5887 -5908 0
13676 -5760 -5885 -5910 0
13676 -5760 -5883 -5912 0
13676 -5760 -5881 -5914 0
13676 -5760 -5879 -5916 0
13676 -5760 -5877 -5918 0
13676 -5760 -5875 -5920 0
13676 -5760 -5873 -5922 0
13676 -5760 -5871 -5924 0
13676 -5760 -5869 -5926 0
13676 -5760 -5867 -5928 0
13676 -5760 -5865 -5930 0
13676 -5760 -5863 -5932 0
13676 -5760 -5861 -5934 0
13676 -5760 -5859 -5936 0
13676 -5760 -5857 -5938 0
13676 -5760 -5855 -5940 0
13676 -5760 -5853 -5942 0
13676 -5760 -5851 -5944 0
13676 -5760 -5849 -5946 0
13676 -5760 -5847 -5948 0
13676 -5760 -5845 -5950 0
13676 -5760 -5844 -5952 0
13676 -5758 -5906 0
13676 -5758 -5889 -5908 0
13676 -5758 -5887 -5910 0
13676 -5758 -5885 -5912 0
13676 -5758 -5883 -5914 0
13676 -5758 -5881 -5916 0
13676 -5758 -5879 -5918 0
13676 -5758 -5877 -5920 0
13676 -5758 -5875 -5922 0
13676 -5758 -5873 -5924 0
13676 -5758 -5871 -5926 0
13676 -5758 -5869 -5928 0
13676 -5758 -5867 -5930 0
13676 -5758 -5865 -5932 0
13676 -5758 -5863 -5934 0
13676 -5758 -5861 -5936 0
13676 -5758 -5859 -5938 0
13676 -5758 -5857 -5940 0
13676 -5758 -5855 -5942 0
13676 -5758 -5853 -5944 0
13676 -5758 -5851 -5946 0
13676 -5758 -5849 -5948 0
13676 -5758 -5847 -5950 0
13676 -5758 -5845 -5952 0
13676 -5758 -5844 0
13676 -5756 -5908 0
13676 -5756 -5889 -5910 0
13676 -5756 -5887 -5912 0
13676 -5756 -5885 -5914 0
13676 -5756 -5883 -5916 0
13676 -5756 -5881 -5918 0
13676 -5756 -5879 -5920 0
13676 -5756 -5877 -5922 0
13676 -5756 -5875 -5924 0
13676 -5756 -5873 -5926 0
13676 -5756 -5871 -5928 0
13676 -5756 -5869 -5930 0
13676 -5756 -5867 -5932 0
13676 -5756 -5865 -5934 0
13676 -5756 -5863 -5936 0
13676 -5756 -5861 -5938 0
13676 -5756 -5859 -5940 0
13676 -5756 -5857 -5942 0
13676 -5756 -5855 -5944 0
13676 -5756 -5853 -5946 0
13676 -5756 -5851 -5948 0
13676 -5756 -5849 -5950 0
13676 -5756 -5847 -5952 0
13676 -5756 -5845 0
13676 -5756 -5844 0
13676 -5754 -5910 0
13676 -5754 -5889 -5912 0
13676 -5754 -5887 -5914 0
13676 -5754 -5885 -5916 0
13676 -5754 -5883 -5918 0
13676 -5754 -5881 -5920 0
13676 -5754 -5879 -5922 0
13676 -5754 -5877 -5924 0
13676 -5754 -5875 -5926 0
13676 -5754 -5873 -5928 0
13676 -5754 -5871 -5930 0
13676 -5754 -5869 -5932 0
13676 -5754 -5867 -5934 0
13676 -5754 -5865 -5936 0
13676 -5754 -5863 -5938 0
13676 -5754 -5861 -5940 0
13676 -5754 -5859 -5942 0
13676 -5754 -5857 -5944 0
13676 -5754 -5855 -5946 0
13676 -5754 -5853 -5948 0
13676 -5754 -5851 -5950 0
13676 -5754 -5849 -5952 0
13676 -5754 -5847 0
13676 -5754 -5845 0
13676 -5754 -5844 0
13676 -5752 -5912 0
13676 -5752 -5889 -5914 0
13676 -5752 -5887 -5916 0
13676 -5752 -5885 -5918 0
13676 -5752 -5883 -5920 0
13676 -5752 -5881 -5922 0
13676 -5752 -5879 -5924 0
13676 -5752 -5877 -5926 0
13676 -5752 -5875 -5928 0
13676 -5752 -5873 -5930 0
13676 -5752 -5871 -5932 0
13676 -5752 -5869 -5934 0
13676 -5752 -5867 -5936 0
13676 -5752 -5865 -5938 0
13676 -5752 -5863 -5940 0
13676 -5752 -5861 -5942 0
13676 -5752 -5859 -5944 0
13676 -5752 -5857 -5946 0
13676 -5752 -5855 -5948 0
13676 -5752 -5853 -5950 0
13676 -5752 -5851 -5952 0
13676 -5752 -5849 0
13676 -5752 -5847 0
13676 -5752 -5845 0
13676 -5752 -5844 0
13676 -5751 -5914 0
13676 -5751 -5889 -5916 0
13676 -5751 -5887 -5918 0
13676 -5751 -5885 -5920 0
13676 -5751 -5883 -5922 0
13676 -5751 -5881 -5924 0
13676 -5751 -5879 -5926 0
13676 -5751 -5877 -5928 0
13676 -5751 -5875 -5930 0
13676 -5751 -5873 -5932 0
13676 -5751 -5871 -5934 0
13676 -5751 -5869 -5936 0
13676 -5751 -5867 -5938 0
13676 -5751 -5865 -5940 0
13676 -5751 -5863 -5942 0
13676 -5751 -5861 -5944 0
13676 -5751 -5859 -5946 0
13676 -5751 -5857 -5948 0
13676 -5751 -5855 -5950 0
13676 -5751 -5853 -5952 0
13676 -5751 -5851 0
13676 -5751 -5849 0
13676 -5751 -5847 0
13676 -5751 -5845 0
13676 -5751 -5844 0
c ((36<=(aux564 + aux567 + aux568))=tv=SATLiteral(13677))
-13677 -5881 -5891 0
-13677 -5879 -5892 0
-13677 -5877 -5894 0
-13677 -5875 -5896 0
-13677 -5873 -5898 0
-13677 -5871 -5900 0
-13677 -5869 -5902 0
-13677 -5867 -5904 0
-13677 -5865 -5906 0
-13677 -5863 -5908 0
-13677 -5861 -5910 0
-13677 -5859 -5912 0
-13677 -5857 -5914 0
-13677 -5855 -5916 0
-13677 -5853 -5918 0
-13677 -5851 -5920 0
-13677 -5849 -5922 0
-13677 -5847 -5924 0
-13677 -5845 -5926 0
-13677 -5844 -5928 0
-13677 -5780 -5883 -5891 0
-13677 -5780 -5881 -5892 0
-13677 -5780 -5879 -5894 0
-13677 -5780 -5877 -5896 0
-13677 -5780 -5875 -5898 0
-13677 -5780 -5873 -5900 0
-13677 -5780 -5871 -5902 0
-13677 -5780 -5869 -5904 0
-13677 -5780 -5867 -5906 0
-13677 -5780 -5865 -5908 0
-13677 -5780 -5863 -5910 0
-13677 -5780 -5861 -5912 0
-13677 -5780 -5859 -5914 0
-13677 -5780 -5857 -5916 0
-13677 -5780 -5855 -5918 0
-13677 -5780 -5853 -5920 0
-13677 -5780 -5851 -5922 0
-13677 -5780 -5849 -5924 0
-13677 -5780 -5847 -5926 0
-13677 -5780 -5845 -5928 0
-13677 -5780 -5844 -5930 0
-13677 -5778 -5885 -5891 0
-13677 -5778 -5883 -5892 0
-13677 -5778 -5881 -5894 0
-13677 -5778 -5879 -5896 0
-13677 -5778 -5877 -5898 0
-13677 -5778 -5875 -5900 0
-13677 -5778 -5873 -5902 0
-13677 -5778 -5871 -5904 0
-13677 -5778 -5869 -5906 0
-13677 -5778 -5867 -5908 0
-13677 -5778 -5865 -5910 0
-13677 -5778 -5863 -5912 0
-13677 -5778 -5861 -5914 0
-13677 -5778 -5859 -5916 0
-13677 -5778 -5857 -5918 0
-13677 -5778 -5855 -5920 0
-13677 -5778 -5853 -5922 0
-13677 -5778 -5851 -5924 0
-13677 -5778 -5849 -5926 0
-13677 -5778 -5847 -5928 0
-13677 -5778 -5845 -5930 0
-13677 -5778 -5844 -5932 0
-13677 -5776 -5887 -5891 0
-13677 -5776 -5885 -5892 0
-13677 -5776 -5883 -5894 0
-13677 -5776 -5881 -5896 0
-13677 -5776 -5879 -5898 0
-13677 -5776 -5877 -5900 0
-13677 -5776 -5875 -5902 0
-13677 -5776 -5873 -5904 0
-13677 -5776 -5871 -5906 0
-13677 -5776 -5869 -5908 0
-13677 -5776 -5867 -5910 0
-13677 -5776 -5865 -5912 0
-13677 -5776 -5863 -5914 0
-13677 -5776 -5861 -5916 0
-13677 -5776 -5859 -5918 0
-13677 -5776 -5857 -5920 0
-13677 -5776 -5855 -5922 0
-13677 -5776 -5853 -5924 0
-13677 -5776 -5851 -5926 0
-13677 -5776 -5849 -5928 0
-13677 -5776 -5847 -5930 0
-13677 -5776 -5845 -5932 0
-13677 -5776 -5844 -5934 0
-13677 -5774 -5889 -5891 0
-13677 -5774 -5887 -5892 0
-13677 -5774 -5885 -5894 0
-13677 -5774 -5883 -5896 0
-13677 -5774 -5881 -5898 0
-13677 -5774 -5879 -5900 0
-13677 -5774 -5877 -5902 0
-13677 -5774 -5875 -5904 0
-13677 -5774 -5873 -5906 0
-13677 -5774 -5871 -5908 0
-13677 -5774 -5869 -5910 0
-13677 -5774 -5867 -5912 0
-13677 -5774 -5865 -5914 0
-13677 -5774 -5863 -5916 0
-13677 -5774 -5861 -5918 0
-13677 -5774 -5859 -5920 0
-13677 -5774 -5857 -5922 0
-13677 -5774 -5855 -5924 0
-13677 -5774 -5853 -5926 0
-13677 -5774 -5851 -5928 0
-13677 -5774 -5849 -5930 0
-13677 -5774 -5847 -5932 0
-13677 -5774 -5845 -5934 0
-13677 -5774 -5844 -5936 0
-13677 -5772 -5891 0
-13677 -5772 -5889 -5892 0
-13677 -5772 -5887 -5894 0
-13677 -5772 -5885 -5896 0
-13677 -5772 -5883 -5898 0
-13677 -5772 -5881 -5900 0
-13677 -5772 -5879 -5902 0
-13677 -5772 -5877 -5904 0
-13677 -5772 -5875 -5906 0
-13677 -5772 -5873 -5908 0
-13677 -5772 -5871 -5910 0
-13677 -5772 -5869 -5912 0
-13677 -5772 -5867 -5914 0
-13677 -5772 -5865 -5916 0
-13677 -5772 -5863 -5918 0
-13677 -5772 -5861 -5920 0
-13677 -5772 -5859 -5922 0
-13677 -5772 -5857 -5924 0
-13677 -5772 -5855 -5926 0
-13677 -5772 -5853 -5928 0
-13677 -5772 -5851 -5930 0
-13677 -5772 -5849 -5932 0
-13677 -5772 -5847 -5934 0
-13677 -5772 -5845 -5936 0
-13677 -5772 -5844 -5938 0
-13677 -5770 -5892 0
-13677 -5770 -5889 -5894 0
-13677 -5770 -5887 -5896 0
-13677 -5770 -5885 -5898 0
-13677 -5770 -5883 -5900 0
-13677 -5770 -5881 -5902 0
-13677 -5770 -5879 -5904 0
-13677 -5770 -5877 -5906 0
-13677 -5770 -5875 -5908 0
-13677 -5770 -5873 -5910 0
-13677 -5770 -5871 -5912 0
-13677 -5770 -5869 -5914 0
-13677 -5770 -5867 -5916 0
-13677 -5770 -5865 -5918 0
-13677 -5770 -5863 -5920 0
-13677 -5770 -5861 -5922 0
-13677 -5770 -5859 -5924 0
-13677 -5770 -5857 -5926 0
-13677 -5770 -5855 -5928 0
-13677 -5770 -5853 -5930 0
-13677 -5770 -5851 -5932 0
-13677 -5770 -5849 -5934 0
-13677 -5770 -5847 -5936 0
-13677 -5770 -5845 -5938 0
-13677 -5770 -5844 -5940 0
-13677 -5768 -5894 0
-13677 -5768 -5889 -5896 0
-13677 -5768 -5887 -5898 0
-13677 -5768 -5885 -5900 0
-13677 -5768 -5883 -5902 0
-13677 -5768 -5881 -5904 0
-13677 -5768 -5879 -5906 0
-13677 -5768 -5877 -5908 0
-13677 -5768 -5875 -5910 0
-13677 -5768 -5873 -5912 0
-13677 -5768 -5871 -5914 0
-13677 -5768 -5869 -5916 0
-13677 -5768 -5867 -5918 0
-13677 -5768 -5865 -5920 0
-13677 -5768 -5863 -5922 0
-13677 -5768 -5861 -5924 0
-13677 -5768 -5859 -5926 0
-13677 -5768 -5857 -5928 0
-13677 -5768 -5855 -5930 0
-13677 -5768 -5853 -5932 0
-13677 -5768 -5851 -5934 0
-13677 -5768 -5849 -5936 0
-13677 -5768 -5847 -5938 0
-13677 -5768 -5845 -5940 0
-13677 -5768 -5844 -5942 0
-13677 -5766 -5896 0
-13677 -5766 -5889 -5898 0
-13677 -5766 -5887 -5900 0
-13677 -5766 -5885 -5902 0
-13677 -5766 -5883 -5904 0
-13677 -5766 -5881 -5906 0
-13677 -5766 -5879 -5908 0
-13677 -5766 -5877 -5910 0
-13677 -5766 -5875 -5912 0
-13677 -5766 -5873 -5914 0
-13677 -5766 -5871 -5916 0
-13677 -5766 -5869 -5918 0
-13677 -5766 -5867 -5920 0
-13677 -5766 -5865 -5922 0
-13677 -5766 -5863 -5924 0
-13677 -5766 -5861 -5926 0
-13677 -5766 -5859 -5928 0
-13677 -5766 -5857 -5930 0
-13677 -5766 -5855 -5932 0
-13677 -5766 -5853 -5934 0
-13677 -5766 -5851 -5936 0
-13677 -5766 -5849 -5938 0
-13677 -5766 -5847 -5940 0
-13677 -5766 -5845 -5942 0
-13677 -5766 -5844 -5944 0
-13677 -5764 -5898 0
-13677 -5764 -5889 -5900 0
-13677 -5764 -5887 -5902 0
-13677 -5764 -5885 -5904 0
-13677 -5764 -5883 -5906 0
-13677 -5764 -5881 -5908 0
-13677 -5764 -5879 -5910 0
-13677 -5764 -5877 -5912 0
-13677 -5764 -5875 -5914 0
-13677 -5764 -5873 -5916 0
-13677 -5764 -5871 -5918 0
-13677 -5764 -5869 -5920 0
-13677 -5764 -5867 -5922 0
-13677 -5764 -5865 -5924 0
-13677 -5764 -5863 -5926 0
-13677 -5764 -5861 -5928 0
-13677 -5764 -5859 -5930 0
-13677 -5764 -5857 -5932 0
-13677 -5764 -5855 -5934 0
-13677 -5764 -5853 -5936 0
-13677 -5764 -5851 -5938 0
-13677 -5764 -5849 -5940 0
-13677 -5764 -5847 -5942 0
-13677 -5764 -5845 -5944 0
-13677 -5764 -5844 -5946 0
-13677 -5762 -5900 0
-13677 -5762 -5889 -5902 0
-13677 -5762 -5887 -5904 0
-13677 -5762 -5885 -5906 0
-13677 -5762 -5883 -5908 0
-13677 -5762 -5881 -5910 0
-13677 -5762 -5879 -5912 0
-13677 -5762 -5877 -5914 0
-13677 -5762 -5875 -5916 0
-13677 -5762 -5873 -5918 0
-13677 -5762 -5871 -5920 0
-13677 -5762 -5869 -5922 0
-13677 -5762 -5867 -5924 0
-13677 -5762 -5865 -5926 0
-13677 -5762 -5863 -5928 0
-13677 -5762 -5861 -5930 0
-13677 -5762 -5859 -5932 0
-13677 -5762 -5857 -5934 0
-13677 -5762 -5855 -5936 0
-13677 -5762 -5853 -5938 0
-13677 -5762 -5851 -5940 0
-13677 -5762 -5849 -5942 0
-13677 -5762 -5847 -5944 0
-13677 -5762 -5845 -5946 0
-13677 -5762 -5844 -5948 0
-13677 -5760 -5902 0
-13677 -5760 -5889 -5904 0
-13677 -5760 -5887 -5906 0
-13677 -5760 -5885 -5908 0
-13677 -5760 -5883 -5910 0
-13677 -5760 -5881 -5912 0
-13677 -5760 -5879 -5914 0
-13677 -5760 -5877 -5916 0
-13677 -5760 -5875 -5918 0
-13677 -5760 -5873 -5920 0
-13677 -5760 -5871 -5922 0
-13677 -5760 -5869 -5924 0
-13677 -5760 -5867 -5926 0
-13677 -5760 -5865 -5928 0
-13677 -5760 -5863 -5930 0
-13677 -5760 -5861 -5932 0
-13677 -5760 -5859 -5934 0
-13677 -5760 -5857 -5936 0
-13677 -5760 -5855 -5938 0
-13677 -5760 -5853 -5940 0
-13677 -5760 -5851 -5942 0
-13677 -5760 -5849 -5944 0
-13677 -5760 -5847 -5946 0
-13677 -5760 -5845 -5948 0
-13677 -5760 -5844 -5950 0
-13677 -5758 -5904 0
-13677 -5758 -5889 -5906 0
-13677 -5758 -5887 -5908 0
-13677 -5758 -5885 -5910 0
-13677 -5758 -5883 -5912 0
-13677 -5758 -5881 -5914 0
-13677 -5758 -5879 -5916 0
-13677 -5758 -5877 -5918 0
-13677 -5758 -5875 -5920 0
-13677 -5758 -5873 -5922 0
-13677 -5758 -5871 -5924 0
-13677 -5758 -5869 -5926 0
-13677 -5758 -5867 -5928 0
-13677 -5758 -5865 -5930 0
-13677 -5758 -5863 -5932 0
-13677 -5758 -5861 -5934 0
-13677 -5758 -5859 -5936 0
-13677 -5758 -5857 -5938 0
-13677 -5758 -5855 -5940 0
-13677 -5758 -5853 -5942 0
-13677 -5758 -5851 -5944 0
-13677 -5758 -5849 -5946 0
-13677 -5758 -5847 -5948 0
-13677 -5758 -5845 -5950 0
-13677 -5758 -5844 -5952 0
-13677 -5756 -5906 0
-13677 -5756 -5889 -5908 0
-13677 -5756 -5887 -5910 0
-13677 -5756 -5885 -5912 0
-13677 -5756 -5883 -5914 0
-13677 -5756 -5881 -5916 0
-13677 -5756 -5879 -5918 0
-13677 -5756 -5877 -5920 0
-13677 -5756 -5875 -5922 0
-13677 -5756 -5873 -5924 0
-13677 -5756 -5871 -5926 0
-13677 -5756 -5869 -5928 0
-13677 -5756 -5867 -5930 0
-13677 -5756 -5865 -5932 0
-13677 -5756 -5863 -5934 0
-13677 -5756 -5861 -5936 0
-13677 -5756 -5859 -5938 0
-13677 -5756 -5857 -5940 0
-13677 -5756 -5855 -5942 0
-13677 -5756 -5853 -5944 0
-13677 -5756 -5851 -5946 0
-13677 -5756 -5849 -5948 0
-13677 -5756 -5847 -5950 0
-13677 -5756 -5845 -5952 0
-13677 -5756 -5844 0
-13677 -5754 -5908 0
-13677 -5754 -5889 -5910 0
-13677 -5754 -5887 -5912 0
-13677 -5754 -5885 -5914 0
-13677 -5754 -5883 -5916 0
-13677 -5754 -5881 -5918 0
-13677 -5754 -5879 -5920 0
-13677 -5754 -5877 -5922 0
-13677 -5754 -5875 -5924 0
-13677 -5754 -5873 -5926 0
-13677 -5754 -5871 -5928 0
-13677 -5754 -5869 -5930 0
-13677 -5754 -5867 -5932 0
-13677 -5754 -5865 -5934 0
-13677 -5754 -5863 -5936 0
-13677 -5754 -5861 -5938 0
-13677 -5754 -5859 -5940 0
-13677 -5754 -5857 -5942 0
-13677 -5754 -5855 -5944 0
-13677 -5754 -5853 -5946 0
-13677 -5754 -5851 -5948 0
-13677 -5754 -5849 -5950 0
-13677 -5754 -5847 -5952 0
-13677 -5754 -5845 0
-13677 -5754 -5844 0
-13677 -5752 -5910 0
-13677 -5752 -5889 -5912 0
-13677 -5752 -5887 -5914 0
-13677 -5752 -5885 -5916 0
-13677 -5752 -5883 -5918 0
-13677 -5752 -5881 -5920 0
-13677 -5752 -5879 -5922 0
-13677 -5752 -5877 -5924 0
-13677 -5752 -5875 -5926 0
-13677 -5752 -5873 -5928 0
-13677 -5752 -5871 -5930 0
-13677 -5752 -5869 -5932 0
-13677 -5752 -5867 -5934 0
-13677 -5752 -5865 -5936 0
-13677 -5752 -5863 -5938 0
-13677 -5752 -5861 -5940 0
-13677 -5752 -5859 -5942 0
-13677 -5752 -5857 -5944 0
-13677 -5752 -5855 -5946 0
-13677 -5752 -5853 -5948 0
-13677 -5752 -5851 -5950 0
-13677 -5752 -5849 -5952 0
-13677 -5752 -5847 0
-13677 -5752 -5845 0
-13677 -5752 -5844 0
-13677 -5751 -5912 0
-13677 -5751 -5889 -5914 0
-13677 -5751 -5887 -5916 0
-13677 -5751 -5885 -5918 0
-13677 -5751 -5883 -5920 0
-13677 -5751 -5881 -5922 0
-13677 -5751 -5879 -5924 0
-13677 -5751 -5877 -5926 0
-13677 -5751 -5875 -5928 0
-13677 -5751 -5873 -5930 0
-13677 -5751 -5871 -5932 0
-13677 -5751 -5869 -5934 0
-13677 -5751 -5867 -5936 0
-13677 -5751 -5865 -5938 0
-13677 -5751 -5863 -5940 0
-13677 -5751 -5861 -5942 0
-13677 -5751 -5859 -5944 0
-13677 -5751 -5857 -5946 0
-13677 -5751 -5855 -5948 0
-13677 -5751 -5853 -5950 0
-13677 -5751 -5851 -5952 0
-13677 -5751 -5849 0
-13677 -5751 -5847 0
-13677 -5751 -5845 0
-13677 -5751 -5844 0
13677 5849 5952 0
13677 5851 5950 0
13677 5853 5948 0
13677 5855 5946 0
13677 5857 5944 0
13677 5859 5942 0
13677 5861 5940 0
13677 5863 5938 0
13677 5865 5936 0
13677 5867 5934 0
13677 5869 5932 0
13677 5871 5930 0
13677 5873 5928 0
13677 5875 5926 0
13677 5877 5924 0
13677 5879 5922 0
13677 5881 5920 0
13677 5883 5918 0
13677 5885 5916 0
13677 5887 5914 0
13677 5889 5912 0
13677 5751 5847 5952 0
13677 5751 5849 5950 0
13677 5751 5851 5948 0
13677 5751 5853 5946 0
13677 5751 5855 5944 0
13677 5751 5857 5942 0
13677 5751 5859 5940 0
13677 5751 5861 5938 0
13677 5751 5863 5936 0
13677 5751 5865 5934 0
13677 5751 5867 5932 0
13677 5751 5869 5930 0
13677 5751 5871 5928 0
13677 5751 5873 5926 0
13677 5751 5875 5924 0
13677 5751 5877 5922 0
13677 5751 5879 5920 0
13677 5751 5881 5918 0
13677 5751 5883 5916 0
13677 5751 5885 5914 0
13677 5751 5887 5912 0
13677 5751 5889 5910 0
13677 5752 5845 5952 0
13677 5752 5847 5950 0
13677 5752 5849 5948 0
13677 5752 5851 5946 0
13677 5752 5853 5944 0
13677 5752 5855 5942 0
13677 5752 5857 5940 0
13677 5752 5859 5938 0
13677 5752 5861 5936 0
13677 5752 5863 5934 0
13677 5752 5865 5932 0
13677 5752 5867 5930 0
13677 5752 5869 5928 0
13677 5752 5871 5926 0
13677 5752 5873 5924 0
13677 5752 5875 5922 0
13677 5752 5877 5920 0
13677 5752 5879 5918 0
13677 5752 5881 5916 0
13677 5752 5883 5914 0
13677 5752 5885 5912 0
13677 5752 5887 5910 0
13677 5752 5889 5908 0
13677 5754 5844 5952 0
13677 5754 5845 5950 0
13677 5754 5847 5948 0
13677 5754 5849 5946 0
13677 5754 5851 5944 0
13677 5754 5853 5942 0
13677 5754 5855 5940 0
13677 5754 5857 5938 0
13677 5754 5859 5936 0
13677 5754 5861 5934 0
13677 5754 5863 5932 0
13677 5754 5865 5930 0
13677 5754 5867 5928 0
13677 5754 5869 5926 0
13677 5754 5871 5924 0
13677 5754 5873 5922 0
13677 5754 5875 5920 0
13677 5754 5877 5918 0
13677 5754 5879 5916 0
13677 5754 5881 5914 0
13677 5754 5883 5912 0
13677 5754 5885 5910 0
13677 5754 5887 5908 0
13677 5754 5889 5906 0
13677 5756 5952 0
13677 5756 5844 5950 0
13677 5756 5845 5948 0
13677 5756 5847 5946 0
13677 5756 5849 5944 0
13677 5756 5851 5942 0
13677 5756 5853 5940 0
13677 5756 5855 5938 0
13677 5756 5857 5936 0
13677 5756 5859 5934 0
13677 5756 5861 5932 0
13677 5756 5863 5930 0
13677 5756 5865 5928 0
13677 5756 5867 5926 0
13677 5756 5869 5924 0
13677 5756 5871 5922 0
13677 5756 5873 5920 0
13677 5756 5875 5918 0
13677 5756 5877 5916 0
13677 5756 5879 5914 0
13677 5756 5881 5912 0
13677 5756 5883 5910 0
13677 5756 5885 5908 0
13677 5756 5887 5906 0
13677 5756 5889 5904 0
13677 5758 5950 0
13677 5758 5844 5948 0
13677 5758 5845 5946 0
13677 5758 5847 5944 0
13677 5758 5849 5942 0
13677 5758 5851 5940 0
13677 5758 5853 5938 0
13677 5758 5855 5936 0
13677 5758 5857 5934 0
13677 5758 5859 5932 0
13677 5758 5861 5930 0
13677 5758 5863 5928 0
13677 5758 5865 5926 0
13677 5758 5867 5924 0
13677 5758 5869 5922 0
13677 5758 5871 5920 0
13677 5758 5873 5918 0
13677 5758 5875 5916 0
13677 5758 5877 5914 0
13677 5758 5879 5912 0
13677 5758 5881 5910 0
13677 5758 5883 5908 0
13677 5758 5885 5906 0
13677 5758 5887 5904 0
13677 5758 5889 5902 0
13677 5760 5948 0
13677 5760 5844 5946 0
13677 5760 5845 5944 0
13677 5760 5847 5942 0
13677 5760 5849 5940 0
13677 5760 5851 5938 0
13677 5760 5853 5936 0
13677 5760 5855 5934 0
13677 5760 5857 5932 0
13677 5760 5859 5930 0
13677 5760 5861 5928 0
13677 5760 5863 5926 0
13677 5760 5865 5924 0
13677 5760 5867 5922 0
13677 5760 5869 5920 0
13677 5760 5871 5918 0
13677 5760 5873 5916 0
13677 5760 5875 5914 0
13677 5760 5877 5912 0
13677 5760 5879 5910 0
13677 5760 5881 5908 0
13677 5760 5883 5906 0
13677 5760 5885 5904 0
13677 5760 5887 5902 0
13677 5760 5889 5900 0
13677 5762 5946 0
13677 5762 5844 5944 0
13677 5762 5845 5942 0
13677 5762 5847 5940 0
13677 5762 5849 5938 0
13677 5762 5851 5936 0
13677 5762 5853 5934 0
13677 5762 5855 5932 0
13677 5762 5857 5930 0
13677 5762 5859 5928 0
13677 5762 5861 5926 0
13677 5762 5863 5924 0
13677 5762 5865 5922 0
13677 5762 5867 5920 0
13677 5762 5869 5918 0
13677 5762 5871 5916 0
13677 5762 5873 5914 0
13677 5762 5875 5912 0
13677 5762 5877 5910 0
13677 5762 5879 5908 0
13677 5762 5881 5906 0
13677 5762 5883 5904 0
13677 5762 5885 5902 0
13677 5762 5887 5900 0
13677 5762 5889 5898 0
13677 5764 5944 0
13677 5764 5844 5942 0
13677 5764 5845 5940 0
13677 5764 5847 5938 0
13677 5764 5849 5936 0
13677 5764 5851 5934 0
13677 5764 5853 5932 0
13677 5764 5855 5930 0
13677 5764 5857 5928 0
13677 5764 5859 5926 0
13677 5764 5861 5924 0
13677 5764 5863 5922 0
13677 5764 5865 5920 0
13677 5764 5867 5918 0
13677 5764 5869 5916 0
13677 5764 5871 5914 0
13677 5764 5873 5912 0
13677 5764 5875 5910 0
13677 5764 5877 5908 0
13677 5764 5879 5906 0
13677 5764 5881 5904 0
13677 5764 5883 5902 0
13677 5764 5885 5900 0
13677 5764 5887 5898 0
13677 5764 5889 5896 0
13677 5766 5942 0
13677 5766 5844 5940 0
13677 5766 5845 5938 0
13677 5766 5847 5936 0
13677 5766 5849 5934 0
13677 5766 5851 5932 0
13677 5766 5853 5930 0
13677 5766 5855 5928 0
13677 5766 5857 5926 0
13677 5766 5859 5924 0
13677 5766 5861 5922 0
13677 5766 5863 5920 0
13677 5766 5865 5918 0
13677 5766 5867 5916 0
13677 5766 5869 5914 0
13677 5766 5871 5912 0
13677 5766 5873 5910 0
13677 5766 5875 5908 0
13677 5766 5877 5906 0
13677 5766 5879 5904 0
13677 5766 5881 5902 0
13677 5766 5883 5900 0
13677 5766 5885 5898 0
13677 5766 5887 5896 0
13677 5766 5889 5894 0
13677 5768 5940 0
13677 5768 5844 5938 0
13677 5768 5845 5936 0
13677 5768 5847 5934 0
13677 5768 5849 5932 0
13677 5768 5851 5930 0
13677 5768 5853 5928 0
13677 5768 5855 5926 0
13677 5768 5857 5924 0
13677 5768 5859 5922 0
13677 5768 5861 5920 0
13677 5768 5863 5918 0
13677 5768 5865 5916 0
13677 5768 5867 5914 0
13677 5768 5869 5912 0
13677 5768 5871 5910 0
13677 5768 5873 5908 0
13677 5768 5875 5906 0
13677 5768 5877 5904 0
13677 5768 5879 5902 0
13677 5768 5881 5900 0
13677 5768 5883 5898 0
13677 5768 5885 5896 0
13677 5768 5887 5894 0
13677 5768 5889 5892 0
13677 5770 5938 0
13677 5770 5844 5936 0
13677 5770 5845 5934 0
13677 5770 5847 5932 0
13677 5770 5849 5930 0
13677 5770 5851 5928 0
13677 5770 5853 5926 0
13677 5770 5855 5924 0
13677 5770 5857 5922 0
13677 5770 5859 5920 0
13677 5770 5861 5918 0
13677 5770 5863 5916 0
13677 5770 5865 5914 0
13677 5770 5867 5912 0
13677 5770 5869 5910 0
13677 5770 5871 5908 0
13677 5770 5873 5906 0
13677 5770 5875 5904 0
13677 5770 5877 5902 0
13677 5770 5879 5900 0
13677 5770 5881 5898 0
13677 5770 5883 5896 0
13677 5770 5885 5894 0
13677 5770 5887 5892 0
13677 5770 5889 5891 0
13677 5772 5936 0
13677 5772 5844 5934 0
13677 5772 5845 5932 0
13677 5772 5847 5930 0
13677 5772 5849 5928 0
13677 5772 5851 5926 0
13677 5772 5853 5924 0
13677 5772 5855 5922 0
13677 5772 5857 5920 0
13677 5772 5859 5918 0
13677 5772 5861 5916 0
13677 5772 5863 5914 0
13677 5772 5865 5912 0
13677 5772 5867 5910 0
13677 5772 5869 5908 0
13677 5772 5871 5906 0
13677 5772 5873 5904 0
13677 5772 5875 5902 0
13677 5772 5877 5900 0
13677 5772 5879 5898 0
13677 5772 5881 5896 0
13677 5772 5883 5894 0
13677 5772 5885 5892 0
13677 5772 5887 5891 0
13677 5772 5889 0
13677 5774 5934 0
13677 5774 5844 5932 0
13677 5774 5845 5930 0
13677 5774 5847 5928 0
13677 5774 5849 5926 0
13677 5774 5851 5924 0
13677 5774 5853 5922 0
13677 5774 5855 5920 0
13677 5774 5857 5918 0
13677 5774 5859 5916 0
13677 5774 5861 5914 0
13677 5774 5863 5912 0
13677 5774 5865 5910 0
13677 5774 5867 5908 0
13677 5774 5869 5906 0
13677 5774 5871 5904 0
13677 5774 5873 5902 0
13677 5774 5875 5900 0
13677 5774 5877 5898 0
13677 5774 5879 5896 0
13677 5774 5881 5894 0
13677 5774 5883 5892 0
13677 5774 5885 5891 0
13677 5774 5887 0
13677 5774 5889 0
13677 5776 5932 0
13677 5776 5844 5930 0
13677 5776 5845 5928 0
13677 5776 5847 5926 0
13677 5776 5849 5924 0
13677 5776 5851 5922 0
13677 5776 5853 5920 0
13677 5776 5855 5918 0
13677 5776 5857 5916 0
13677 5776 5859 5914 0
13677 5776 5861 5912 0
13677 5776 5863 5910 0
13677 5776 5865 5908 0
13677 5776 5867 5906 0
13677 5776 5869 5904 0
13677 5776 5871 5902 0
13677 5776 5873 5900 0
13677 5776 5875 5898 0
13677 5776 5877 5896 0
13677 5776 5879 5894 0
13677 5776 5881 5892 0
13677 5776 5883 5891 0
13677 5776 5885 0
13677 5776 5887 0
13677 5776 5889 0
13677 5778 5930 0
13677 5778 5844 5928 0
13677 5778 5845 5926 0
13677 5778 5847 5924 0
13677 5778 5849 5922 0
13677 5778 5851 5920 0
13677 5778 5853 5918 0
13677 5778 5855 5916 0
13677 5778 5857 5914 0
13677 5778 5859 5912 0
13677 5778 5861 5910 0
13677 5778 5863 5908 0
13677 5778 5865 5906 0
13677 5778 5867 5904 0
13677 5778 5869 5902 0
13677 5778 5871 5900 0
13677 5778 5873 5898 0
13677 5778 5875 5896 0
13677 5778 5877 5894 0
13677 5778 5879 5892 0
13677 5778 5881 5891 0
13677 5778 5883 0
13677 5778 5885 0
13677 5778 5887 0
13677 5778 5889 0
13677 5780 5928 0
13677 5780 5844 5926 0
13677 5780 5845 5924 0
13677 5780 5847 5922 0
13677 5780 5849 5920 0
13677 5780 5851 5918 0
13677 5780 5853 5916 0
13677 5780 5855 5914 0
13677 5780 5857 5912 0
13677 5780 5859 5910 0
13677 5780 5861 5908 0
13677 5780 5863 5906 0
13677 5780 5865 5904 0
13677 5780 5867 5902 0
13677 5780 5869 5900 0
13677 5780 5871 5898 0
13677 5780 5873 5896 0
13677 5780 5875 5894 0
13677 5780 5877 5892 0
13677 5780 5879 5891 0
13677 5780 5881 0
13677 5780 5883 0
13677 5780 5885 0
13677 5780 5887 0
13677 5780 5889 0
c (((aux570 + aux573 + aux574)<=36)=tv=SATLiteral(13678))
-13678 6085 6186 0
-13678 6087 6184 0
-13678 6089 6182 0
-13678 6091 6180 0
-13678 6093 6178 0
-13678 6095 6176 0
-13678 6097 6174 0
-13678 6099 6172 0
-13678 6101 6170 0
-13678 6103 6168 0
-13678 6105 6166 0
-13678 6107 6164 0
-13678 6109 6162 0
-13678 6111 6160 0
-13678 6113 6158 0
-13678 6115 6156 0
-13678 6117 6154 0
-13678 6119 6152 0
-13678 6121 6150 0
-13678 6123 6148 0
-13678 5985 6083 6186 0
-13678 5985 6085 6184 0
-13678 5985 6087 6182 0
-13678 5985 6089 6180 0
-13678 5985 6091 6178 0
-13678 5985 6093 6176 0
-13678 5985 6095 6174 0
-13678 5985 6097 6172 0
-13678 5985 6099 6170 0
-13678 5985 6101 6168 0
-13678 5985 6103 6166 0
-13678 5985 6105 6164 0
-13678 5985 6107 6162 0
-13678 5985 6109 6160 0
-13678 5985 6111 6158 0
-13678 5985 6113 6156 0
-13678 5985 6115 6154 0
-13678 5985 6117 6152 0
-13678 5985 6119 6150 0
-13678 5985 6121 6148 0
-13678 5985 6123 6146 0
-13678 5986 6081 6186 0
-13678 5986 6083 6184 0
-13678 5986 6085 6182 0
-13678 5986 6087 6180 0
-13678 5986 6089 6178 0
-13678 5986 6091 6176 0
-13678 5986 6093 6174 0
-13678 5986 6095 6172 0
-13678 5986 6097 6170 0
-13678 5986 6099 6168 0
-13678 5986 6101 6166 0
-13678 5986 6103 6164 0
-13678 5986 6105 6162 0
-13678 5986 6107 6160 0
-13678 5986 6109 6158 0
-13678 5986 6111 6156 0
-13678 5986 6113 6154 0
-13678 5986 6115 6152 0
-13678 5986 6117 6150 0
-13678 5986 6119 6148 0
-13678 5986 6121 6146 0
-13678 5986 6123 6144 0
-13678 5988 6079 6186 0
-13678 5988 6081 6184 0
-13678 5988 6083 6182 0
-13678 5988 6085 6180 0
-13678 5988 6087 6178 0
-13678 5988 6089 6176 0
-13678 5988 6091 6174 0
-13678 5988 6093 6172 0
-13678 5988 6095 6170 0
-13678 5988 6097 6168 0
-13678 5988 6099 6166 0
-13678 5988 6101 6164 0
-13678 5988 6103 6162 0
-13678 5988 6105 6160 0
-13678 5988 6107 6158 0
-13678 5988 6109 6156 0
-13678 5988 6111 6154 0
-13678 5988 6113 6152 0
-13678 5988 6115 6150 0
-13678 5988 6117 6148 0
-13678 5988 6119 6146 0
-13678 5988 6121 6144 0
-13678 5988 6123 6142 0
-13678 5990 6078 6186 0
-13678 5990 6079 6184 0
-13678 5990 6081 6182 0
-13678 5990 6083 6180 0
-13678 5990 6085 6178 0
-13678 5990 6087 6176 0
-13678 5990 6089 6174 0
-13678 5990 6091 6172 0
-13678 5990 6093 6170 0
-13678 5990 6095 6168 0
-13678 5990 6097 6166 0
-13678 5990 6099 6164 0
-13678 5990 6101 6162 0
-13678 5990 6103 6160 0
-13678 5990 6105 6158 0
-13678 5990 6107 6156 0
-13678 5990 6109 6154 0
-13678 5990 6111 6152 0
-13678 5990 6113 6150 0
-13678 5990 6115 6148 0
-13678 5990 6117 6146 0
-13678 5990 6119 6144 0
-13678 5990 6121 6142 0
-13678 5990 6123 6140 0
-13678 5992 6186 0
-13678 5992 6078 6184 0
-13678 5992 6079 6182 0
-13678 5992 6081 6180 0
-13678 5992 6083 6178 0
-13678 5992 6085 6176 0
-13678 5992 6087 6174 0
-13678 5992 6089 6172 0
-13678 5992 6091 6170 0
-13678 5992 6093 6168 0
-13678 5992 6095 6166 0
-13678 5992 6097 6164 0
-13678 5992 6099 6162 0
-13678 5992 6101 6160 0
-13678 5992 6103 6158 0
-13678 5992 6105 6156 0
-13678 5992 6107 6154 0
-13678 5992 6109 6152 0
-13678 5992 6111 6150 0
-13678 5992 6113 6148 0
-13678 5992 6115 6146 0
-13678 5992 6117 6144 0
-13678 5992 6119 6142 0
-13678 5992 6121 6140 0
-13678 5992 6123 6138 0
-13678 5994 6184 0
-13678 5994 6078 6182 0
-13678 5994 6079 6180 0
-13678 5994 6081 6178 0
-13678 5994 6083 6176 0
-13678 5994 6085 6174 0
-13678 5994 6087 6172 0
-13678 5994 6089 6170 0
-13678 5994 6091 6168 0
-13678 5994 6093 6166 0
-13678 5994 6095 6164 0
-13678 5994 6097 6162 0
-13678 5994 6099 6160 0
-13678 5994 6101 6158 0
-13678 5994 6103 6156 0
-13678 5994 6105 6154 0
-13678 5994 6107 6152 0
-13678 5994 6109 6150 0
-13678 5994 6111 6148 0
-13678 5994 6113 6146 0
-13678 5994 6115 6144 0
-13678 5994 6117 6142 0
-13678 5994 6119 6140 0
-13678 5994 6121 6138 0
-13678 5994 6123 6136 0
-13678 5996 6182 0
-13678 5996 6078 6180 0
-13678 5996 6079 6178 0
-13678 5996 6081 6176 0
-13678 5996 6083 6174 0
-13678 5996 6085 6172 0
-13678 5996 6087 6170 0
-13678 5996 6089 6168 0
-13678 5996 6091 6166 0
-13678 5996 6093 6164 0
-13678 5996 6095 6162 0
-13678 5996 6097 6160 0
-13678 5996 6099 6158 0
-13678 5996 6101 6156 0
-13678 5996 6103 6154 0
-13678 5996 6105 6152 0
-13678 5996 6107 6150 0
-13678 5996 6109 6148 0
-13678 5996 6111 6146 0
-13678 5996 6113 6144 0
-13678 5996 6115 6142 0
-13678 5996 6117 6140 0
-13678 5996 6119 6138 0
-13678 5996 6121 6136 0
-13678 5996 6123 6134 0
-13678 5998 6180 0
-13678 5998 6078 6178 0
-13678 5998 6079 6176 0
-13678 5998 6081 6174 0
-13678 5998 6083 6172 0
-13678 5998 6085 6170 0
-13678 5998 6087 6168 0
-13678 5998 6089 6166 0
-13678 5998 6091 6164 0
-13678 5998 6093 6162 0
-13678 5998 6095 6160 0
-13678 5998 6097 6158 0
-13678 5998 6099 6156 0
-13678 5998 6101 6154 0
-13678 5998 6103 6152 0
-13678 5998 6105 6150 0
-13678 5998 6107 6148 0
-13678 5998 6109 6146 0
-13678 5998 6111 6144 0
-13678 5998 6113 6142 0
-13678 5998 6115 6140 0
-13678 5998 6117 6138 0
-13678 5998 6119 6136 0
-13678 5998 6121 6134 0
-13678 5998 6123 6132 0
-13678 6000 6178 0
-13678 6000 6078 6176 0
-13678 6000 6079 6174 0
-13678 6000 6081 6172 0
-13678 6000 6083 6170 0
-13678 6000 6085 6168 0
-13678 6000 6087 6166 0
-13678 6000 6089 6164 0
-13678 6000 6091 6162 0
-13678 6000 6093 6160 0
-13678 6000 6095 6158 0
-13678 6000 6097 6156 0
-13678 6000 6099 6154 0
-13678 6000 6101 6152 0
-13678 6000 6103 6150 0
-13678 6000 6105 6148 0
-13678 6000 6107 6146 0
-13678 6000 6109 6144 0
-13678 6000 6111 6142 0
-13678 6000 6113 6140 0
-13678 6000 6115 6138 0
-13678 6000 6117 6136 0
-13678 6000 6119 6134 0
-13678 6000 6121 6132 0
-13678 6000 6123 6130 0
-13678 6002 6176 0
-13678 6002 6078 6174 0
-13678 6002 6079 6172 0
-13678 6002 6081 6170 0
-13678 6002 6083 6168 0
-13678 6002 6085 6166 0
-13678 6002 6087 6164 0
-13678 6002 6089 6162 0
-13678 6002 6091 6160 0
-13678 6002 6093 6158 0
-13678 6002 6095 6156 0
-13678 6002 6097 6154 0
-13678 6002 6099 6152 0
-13678 6002 6101 6150 0
-13678 6002 6103 6148 0
-13678 6002 6105 6146 0
-13678 6002 6107 6144 0
-13678 6002 6109 6142 0
-13678 6002 6111 6140 0
-13678 6002 6113 6138 0
-13678 6002 6115 6136 0
-13678 6002 6117 6134 0
-13678 6002 6119 6132 0
-13678 6002 6121 6130 0
-13678 6002 6123 6128 0
-13678 6004 6174 0
-13678 6004 6078 6172 0
-13678 6004 6079 6170 0
-13678 6004 6081 6168 0
-13678 6004 6083 6166 0
-13678 6004 6085 6164 0
-13678 6004 6087 6162 0
-13678 6004 6089 6160 0
-13678 6004 6091 6158 0
-13678 6004 6093 6156 0
-13678 6004 6095 6154 0
-13678 6004 6097 6152 0
-13678 6004 6099 6150 0
-13678 6004 6101 6148 0
-13678 6004 6103 6146 0
-13678 6004 6105 6144 0
-13678 6004 6107 6142 0
-13678 6004 6109 6140 0
-13678 6004 6111 6138 0
-13678 6004 6113 6136 0
-13678 6004 6115 6134 0
-13678 6004 6117 6132 0
-13678 6004 6119 6130 0
-13678 6004 6121 6128 0
-13678 6004 6123 6126 0
-13678 6006 6172 0
-13678 6006 6078 6170 0
-13678 6006 6079 6168 0
-13678 6006 6081 6166 0
-13678 6006 6083 6164 0
-13678 6006 6085 6162 0
-13678 6006 6087 6160 0
-13678 6006 6089 6158 0
-13678 6006 6091 6156 0
-13678 6006 6093 6154 0
-13678 6006 6095 6152 0
-13678 6006 6097 6150 0
-13678 6006 6099 6148 0
-13678 6006 6101 6146 0
-13678 6006 6103 6144 0
-13678 6006 6105 6142 0
-13678 6006 6107 6140 0
-13678 6006 6109 6138 0
-13678 6006 6111 6136 0
-13678 6006 6113 6134 0
-13678 6006 6115 6132 0
-13678 6006 6117 6130 0
-13678 6006 6119 6128 0
-13678 6006 6121 6126 0
-13678 6006 6123 6125 0
-13678 6008 6170 0
-13678 6008 6078 6168 0
-13678 6008 6079 6166 0
-13678 6008 6081 6164 0
-13678 6008 6083 6162 0
-13678 6008 6085 6160 0
-13678 6008 6087 6158 0
-13678 6008 6089 6156 0
-13678 6008 6091 6154 0
-13678 6008 6093 6152 0
-13678 6008 6095 6150 0
-13678 6008 6097 6148 0
-13678 6008 6099 6146 0
-13678 6008 6101 6144 0
-13678 6008 6103 6142 0
-13678 6008 6105 6140 0
-13678 6008 6107 6138 0
-13678 6008 6109 6136 0
-13678 6008 6111 6134 0
-13678 6008 6113 6132 0
-13678 6008 6115 6130 0
-13678 6008 6117 6128 0
-13678 6008 6119 6126 0
-13678 6008 6121 6125 0
-13678 6008 6123 0
-13678 6010 6168 0
-13678 6010 6078 6166 0
-13678 6010 6079 6164 0
-13678 6010 6081 6162 0
-13678 6010 6083 6160 0
-13678 6010 6085 6158 0
-13678 6010 6087 6156 0
-13678 6010 6089 6154 0
-13678 6010 6091 6152 0
-13678 6010 6093 6150 0
-13678 6010 6095 6148 0
-13678 6010 6097 6146 0
-13678 6010 6099 6144 0
-13678 6010 6101 6142 0
-13678 6010 6103 6140 0
-13678 6010 6105 6138 0
-13678 6010 6107 6136 0
-13678 6010 6109 6134 0
-13678 6010 6111 6132 0
-13678 6010 6113 6130 0
-13678 6010 6115 6128 0
-13678 6010 6117 6126 0
-13678 6010 6119 6125 0
-13678 6010 6121 0
-13678 6010 6123 0
-13678 6012 6166 0
-13678 6012 6078 6164 0
-13678 6012 6079 6162 0
-13678 6012 6081 6160 0
-13678 6012 6083 6158 0
-13678 6012 6085 6156 0
-13678 6012 6087 6154 0
-13678 6012 6089 6152 0
-13678 6012 6091 6150 0
-13678 6012 6093 6148 0
-13678 6012 6095 6146 0
-13678 6012 6097 6144 0
-13678 6012 6099 6142 0
-13678 6012 6101 6140 0
-13678 6012 6103 6138 0
-13678 6012 6105 6136 0
-13678 6012 6107 6134 0
-13678 6012 6109 6132 0
-13678 6012 6111 6130 0
-13678 6012 6113 6128 0
-13678 6012 6115 6126 0
-13678 6012 6117 6125 0
-13678 6012 6119 0
-13678 6012 6121 0
-13678 6012 6123 0
-13678 6014 6164 0
-13678 6014 6078 6162 0
-13678 6014 6079 6160 0
-13678 6014 6081 6158 0
-13678 6014 6083 6156 0
-13678 6014 6085 6154 0
-13678 6014 6087 6152 0
-13678 6014 6089 6150 0
-13678 6014 6091 6148 0
-13678 6014 6093 6146 0
-13678 6014 6095 6144 0
-13678 6014 6097 6142 0
-13678 6014 6099 6140 0
-13678 6014 6101 6138 0
-13678 6014 6103 6136 0
-13678 6014 6105 6134 0
-13678 6014 6107 6132 0
-13678 6014 6109 6130 0
-13678 6014 6111 6128 0
-13678 6014 6113 6126 0
-13678 6014 6115 6125 0
-13678 6014 6117 0
-13678 6014 6119 0
-13678 6014 6121 0
-13678 6014 6123 0
13678 -6117 -6125 0
13678 -6115 -6126 0
13678 -6113 -6128 0
13678 -6111 -6130 0
13678 -6109 -6132 0
13678 -6107 -6134 0
13678 -6105 -6136 0
13678 -6103 -6138 0
13678 -6101 -6140 0
13678 -6099 -6142 0
13678 -6097 -6144 0
13678 -6095 -6146 0
13678 -6093 -6148 0
13678 -6091 -6150 0
13678 -6089 -6152 0
13678 -6087 -6154 0
13678 -6085 -6156 0
13678 -6083 -6158 0
13678 -6081 -6160 0
13678 -6079 -6162 0
13678 -6078 -6164 0
13678 -6014 -6119 -6125 0
13678 -6014 -6117 -6126 0
13678 -6014 -6115 -6128 0
13678 -6014 -6113 -6130 0
13678 -6014 -6111 -6132 0
13678 -6014 -6109 -6134 0
13678 -6014 -6107 -6136 0
13678 -6014 -6105 -6138 0
13678 -6014 -6103 -6140 0
13678 -6014 -6101 -6142 0
13678 -6014 -6099 -6144 0
13678 -6014 -6097 -6146 0
13678 -6014 -6095 -6148 0
13678 -6014 -6093 -6150 0
13678 -6014 -6091 -6152 0
13678 -6014 -6089 -6154 0
13678 -6014 -6087 -6156 0
13678 -6014 -6085 -6158 0
13678 -6014 -6083 -6160 0
13678 -6014 -6081 -6162 0
13678 -6014 -6079 -6164 0
13678 -6014 -6078 -6166 0
13678 -6012 -6121 -6125 0
13678 -6012 -6119 -6126 0
13678 -6012 -6117 -6128 0
13678 -6012 -6115 -6130 0
13678 -6012 -6113 -6132 0
13678 -6012 -6111 -6134 0
13678 -6012 -6109 -6136 0
13678 -6012 -6107 -6138 0
13678 -6012 -6105 -6140 0
13678 -6012 -6103 -6142 0
13678 -6012 -6101 -6144 0
13678 -6012 -6099 -6146 0
13678 -6012 -6097 -6148 0
13678 -6012 -6095 -6150 0
13678 -6012 -6093 -6152 0
13678 -6012 -6091 -6154 0
13678 -6012 -6089 -6156 0
13678 -6012 -6087 -6158 0
13678 -6012 -6085 -6160 0
13678 -6012 -6083 -6162 0
13678 -6012 -6081 -6164 0
13678 -6012 -6079 -6166 0
13678 -6012 -6078 -6168 0
13678 -6010 -6123 -6125 0
13678 -6010 -6121 -6126 0
13678 -6010 -6119 -6128 0
13678 -6010 -6117 -6130 0
13678 -6010 -6115 -6132 0
13678 -6010 -6113 -6134 0
13678 -6010 -6111 -6136 0
13678 -6010 -6109 -6138 0
13678 -6010 -6107 -6140 0
13678 -6010 -6105 -6142 0
13678 -6010 -6103 -6144 0
13678 -6010 -6101 -6146 0
13678 -6010 -6099 -6148 0
13678 -6010 -6097 -6150 0
13678 -6010 -6095 -6152 0
13678 -6010 -6093 -6154 0
13678 -6010 -6091 -6156 0
13678 -6010 -6089 -6158 0
13678 -6010 -6087 -6160 0
13678 -6010 -6085 -6162 0
13678 -6010 -6083 -6164 0
13678 -6010 -6081 -6166 0
13678 -6010 -6079 -6168 0
13678 -6010 -6078 -6170 0
13678 -6008 -6125 0
13678 -6008 -6123 -6126 0
13678 -6008 -6121 -6128 0
13678 -6008 -6119 -6130 0
13678 -6008 -6117 -6132 0
13678 -6008 -6115 -6134 0
13678 -6008 -6113 -6136 0
13678 -6008 -6111 -6138 0
13678 -6008 -6109 -6140 0
13678 -6008 -6107 -6142 0
13678 -6008 -6105 -6144 0
13678 -6008 -6103 -6146 0
13678 -6008 -6101 -6148 0
13678 -6008 -6099 -6150 0
13678 -6008 -6097 -6152 0
13678 -6008 -6095 -6154 0
13678 -6008 -6093 -6156 0
13678 -6008 -6091 -6158 0
13678 -6008 -6089 -6160 0
13678 -6008 -6087 -6162 0
13678 -6008 -6085 -6164 0
13678 -6008 -6083 -6166 0
13678 -6008 -6081 -6168 0
13678 -6008 -6079 -6170 0
13678 -6008 -6078 -6172 0
13678 -6006 -6126 0
13678 -6006 -6123 -6128 0
13678 -6006 -6121 -6130 0
13678 -6006 -6119 -6132 0
13678 -6006 -6117 -6134 0
13678 -6006 -6115 -6136 0
13678 -6006 -6113 -6138 0
13678 -6006 -6111 -6140 0
13678 -6006 -6109 -6142 0
13678 -6006 -6107 -6144 0
13678 -6006 -6105 -6146 0
13678 -6006 -6103 -6148 0
13678 -6006 -6101 -6150 0
13678 -6006 -6099 -6152 0
13678 -6006 -6097 -6154 0
13678 -6006 -6095 -6156 0
13678 -6006 -6093 -6158 0
13678 -6006 -6091 -6160 0
13678 -6006 -6089 -6162 0
13678 -6006 -6087 -6164 0
13678 -6006 -6085 -6166 0
13678 -6006 -6083 -6168 0
13678 -6006 -6081 -6170 0
13678 -6006 -6079 -6172 0
13678 -6006 -6078 -6174 0
13678 -6004 -6128 0
13678 -6004 -6123 -6130 0
13678 -6004 -6121 -6132 0
13678 -6004 -6119 -6134 0
13678 -6004 -6117 -6136 0
13678 -6004 -6115 -6138 0
13678 -6004 -6113 -6140 0
13678 -6004 -6111 -6142 0
13678 -6004 -6109 -6144 0
13678 -6004 -6107 -6146 0
13678 -6004 -6105 -6148 0
13678 -6004 -6103 -6150 0
13678 -6004 -6101 -6152 0
13678 -6004 -6099 -6154 0
13678 -6004 -6097 -6156 0
13678 -6004 -6095 -6158 0
13678 -6004 -6093 -6160 0
13678 -6004 -6091 -6162 0
13678 -6004 -6089 -6164 0
13678 -6004 -6087 -6166 0
13678 -6004 -6085 -6168 0
13678 -6004 -6083 -6170 0
13678 -6004 -6081 -6172 0
13678 -6004 -6079 -6174 0
13678 -6004 -6078 -6176 0
13678 -6002 -6130 0
13678 -6002 -6123 -6132 0
13678 -6002 -6121 -6134 0
13678 -6002 -6119 -6136 0
13678 -6002 -6117 -6138 0
13678 -6002 -6115 -6140 0
13678 -6002 -6113 -6142 0
13678 -6002 -6111 -6144 0
13678 -6002 -6109 -6146 0
13678 -6002 -6107 -6148 0
13678 -6002 -6105 -6150 0
13678 -6002 -6103 -6152 0
13678 -6002 -6101 -6154 0
13678 -6002 -6099 -6156 0
13678 -6002 -6097 -6158 0
13678 -6002 -6095 -6160 0
13678 -6002 -6093 -6162 0
13678 -6002 -6091 -6164 0
13678 -6002 -6089 -6166 0
13678 -6002 -6087 -6168 0
13678 -6002 -6085 -6170 0
13678 -6002 -6083 -6172 0
13678 -6002 -6081 -6174 0
13678 -6002 -6079 -6176 0
13678 -6002 -6078 -6178 0
13678 -6000 -6132 0
13678 -6000 -6123 -6134 0
13678 -6000 -6121 -6136 0
13678 -6000 -6119 -6138 0
13678 -6000 -6117 -6140 0
13678 -6000 -6115 -6142 0
13678 -6000 -6113 -6144 0
13678 -6000 -6111 -6146 0
13678 -6000 -6109 -6148 0
13678 -6000 -6107 -6150 0
13678 -6000 -6105 -6152 0
13678 -6000 -6103 -6154 0
13678 -6000 -6101 -6156 0
13678 -6000 -6099 -6158 0
13678 -6000 -6097 -6160 0
13678 -6000 -6095 -6162 0
13678 -6000 -6093 -6164 0
13678 -6000 -6091 -6166 0
13678 -6000 -6089 -6168 0
13678 -6000 -6087 -6170 0
13678 -6000 -6085 -6172 0
13678 -6000 -6083 -6174 0
13678 -6000 -6081 -6176 0
13678 -6000 -6079 -6178 0
13678 -6000 -6078 -6180 0
13678 -5998 -6134 0
13678 -5998 -6123 -6136 0
13678 -5998 -6121 -6138 0
13678 -5998 -6119 -6140 0
13678 -5998 -6117 -6142 0
13678 -5998 -6115 -6144 0
13678 -5998 -6113 -6146 0
13678 -5998 -6111 -6148 0
13678 -5998 -6109 -6150 0
13678 -5998 -6107 -6152 0
13678 -5998 -6105 -6154 0
13678 -5998 -6103 -6156 0
13678 -5998 -6101 -6158 0
13678 -5998 -6099 -6160 0
13678 -5998 -6097 -6162 0
13678 -5998 -6095 -6164 0
13678 -5998 -6093 -6166 0
13678 -5998 -6091 -6168 0
13678 -5998 -6089 -6170 0
13678 -5998 -6087 -6172 0
13678 -5998 -6085 -6174 0
13678 -5998 -6083 -6176 0
13678 -5998 -6081 -6178 0
13678 -5998 -6079 -6180 0
13678 -5998 -6078 -6182 0
13678 -5996 -6136 0
13678 -5996 -6123 -6138 0
13678 -5996 -6121 -6140 0
13678 -5996 -6119 -6142 0
13678 -5996 -6117 -6144 0
13678 -5996 -6115 -6146 0
13678 -5996 -6113 -6148 0
13678 -5996 -6111 -6150 0
13678 -5996 -6109 -6152 0
13678 -5996 -6107 -6154 0
13678 -5996 -6105 -6156 0
13678 -5996 -6103 -6158 0
13678 -5996 -6101 -6160 0
13678 -5996 -6099 -6162 0
13678 -5996 -6097 -6164 0
13678 -5996 -6095 -6166 0
13678 -5996 -6093 -6168 0
13678 -5996 -6091 -6170 0
13678 -5996 -6089 -6172 0
13678 -5996 -6087 -6174 0
13678 -5996 -6085 -6176 0
13678 -5996 -6083 -6178 0
13678 -5996 -6081 -6180 0
13678 -5996 -6079 -6182 0
13678 -5996 -6078 -6184 0
13678 -5994 -6138 0
13678 -5994 -6123 -6140 0
13678 -5994 -6121 -6142 0
13678 -5994 -6119 -6144 0
13678 -5994 -6117 -6146 0
13678 -5994 -6115 -6148 0
13678 -5994 -6113 -6150 0
13678 -5994 -6111 -6152 0
13678 -5994 -6109 -6154 0
13678 -5994 -6107 -6156 0
13678 -5994 -6105 -6158 0
13678 -5994 -6103 -6160 0
13678 -5994 -6101 -6162 0
13678 -5994 -6099 -6164 0
13678 -5994 -6097 -6166 0
13678 -5994 -6095 -6168 0
13678 -5994 -6093 -6170 0
13678 -5994 -6091 -6172 0
13678 -5994 -6089 -6174 0
13678 -5994 -6087 -6176 0
13678 -5994 -6085 -6178 0
13678 -5994 -6083 -6180 0
13678 -5994 -6081 -6182 0
13678 -5994 -6079 -6184 0
13678 -5994 -6078 -6186 0
13678 -5992 -6140 0
13678 -5992 -6123 -6142 0
13678 -5992 -6121 -6144 0
13678 -5992 -6119 -6146 0
13678 -5992 -6117 -6148 0
13678 -5992 -6115 -6150 0
13678 -5992 -6113 -6152 0
13678 -5992 -6111 -6154 0
13678 -5992 -6109 -6156 0
13678 -5992 -6107 -6158 0
13678 -5992 -6105 -6160 0
13678 -5992 -6103 -6162 0
13678 -5992 -6101 -6164 0
13678 -5992 -6099 -6166 0
13678 -5992 -6097 -6168 0
13678 -5992 -6095 -6170 0
13678 -5992 -6093 -6172 0
13678 -5992 -6091 -6174 0
13678 -5992 -6089 -6176 0
13678 -5992 -6087 -6178 0
13678 -5992 -6085 -6180 0
13678 -5992 -6083 -6182 0
13678 -5992 -6081 -6184 0
13678 -5992 -6079 -6186 0
13678 -5992 -6078 0
13678 -5990 -6142 0
13678 -5990 -6123 -6144 0
13678 -5990 -6121 -6146 0
13678 -5990 -6119 -6148 0
13678 -5990 -6117 -6150 0
13678 -5990 -6115 -6152 0
13678 -5990 -6113 -6154 0
13678 -5990 -6111 -6156 0
13678 -5990 -6109 -6158 0
13678 -5990 -6107 -6160 0
13678 -5990 -6105 -6162 0
13678 -5990 -6103 -6164 0
13678 -5990 -6101 -6166 0
13678 -5990 -6099 -6168 0
13678 -5990 -6097 -6170 0
13678 -5990 -6095 -6172 0
13678 -5990 -6093 -6174 0
13678 -5990 -6091 -6176 0
13678 -5990 -6089 -6178 0
13678 -5990 -6087 -6180 0
13678 -5990 -6085 -6182 0
13678 -5990 -6083 -6184 0
13678 -5990 -6081 -6186 0
13678 -5990 -6079 0
13678 -5990 -6078 0
13678 -5988 -6144 0
13678 -5988 -6123 -6146 0
13678 -5988 -6121 -6148 0
13678 -5988 -6119 -6150 0
13678 -5988 -6117 -6152 0
13678 -5988 -6115 -6154 0
13678 -5988 -6113 -6156 0
13678 -5988 -6111 -6158 0
13678 -5988 -6109 -6160 0
13678 -5988 -6107 -6162 0
13678 -5988 -6105 -6164 0
13678 -5988 -6103 -6166 0
13678 -5988 -6101 -6168 0
13678 -5988 -6099 -6170 0
13678 -5988 -6097 -6172 0
13678 -5988 -6095 -6174 0
13678 -5988 -6093 -6176 0
13678 -5988 -6091 -6178 0
13678 -5988 -6089 -6180 0
13678 -5988 -6087 -6182 0
13678 -5988 -6085 -6184 0
13678 -5988 -6083 -6186 0
13678 -5988 -6081 0
13678 -5988 -6079 0
13678 -5988 -6078 0
13678 -5986 -6146 0
13678 -5986 -6123 -6148 0
13678 -5986 -6121 -6150 0
13678 -5986 -6119 -6152 0
13678 -5986 -6117 -6154 0
13678 -5986 -6115 -6156 0
13678 -5986 -6113 -6158 0
13678 -5986 -6111 -6160 0
13678 -5986 -6109 -6162 0
13678 -5986 -6107 -6164 0
13678 -5986 -6105 -6166 0
13678 -5986 -6103 -6168 0
13678 -5986 -6101 -6170 0
13678 -5986 -6099 -6172 0
13678 -5986 -6097 -6174 0
13678 -5986 -6095 -6176 0
13678 -5986 -6093 -6178 0
13678 -5986 -6091 -6180 0
13678 -5986 -6089 -6182 0
13678 -5986 -6087 -6184 0
13678 -5986 -6085 -6186 0
13678 -5986 -6083 0
13678 -5986 -6081 0
13678 -5986 -6079 0
13678 -5986 -6078 0
13678 -5985 -6148 0
13678 -5985 -6123 -6150 0
13678 -5985 -6121 -6152 0
13678 -5985 -6119 -6154 0
13678 -5985 -6117 -6156 0
13678 -5985 -6115 -6158 0
13678 -5985 -6113 -6160 0
13678 -5985 -6111 -6162 0
13678 -5985 -6109 -6164 0
13678 -5985 -6107 -6166 0
13678 -5985 -6105 -6168 0
13678 -5985 -6103 -6170 0
13678 -5985 -6101 -6172 0
13678 -5985 -6099 -6174 0
13678 -5985 -6097 -6176 0
13678 -5985 -6095 -6178 0
13678 -5985 -6093 -6180 0
13678 -5985 -6091 -6182 0
13678 -5985 -6089 -6184 0
13678 -5985 -6087 -6186 0
13678 -5985 -6085 0
13678 -5985 -6083 0
13678 -5985 -6081 0
13678 -5985 -6079 0
13678 -5985 -6078 0
c ((36<=(aux570 + aux573 + aux574))=tv=SATLiteral(13679))
-13679 -6115 -6125 0
-13679 -6113 -6126 0
-13679 -6111 -6128 0
-13679 -6109 -6130 0
-13679 -6107 -6132 0
-13679 -6105 -6134 0
-13679 -6103 -6136 0
-13679 -6101 -6138 0
-13679 -6099 -6140 0
-13679 -6097 -6142 0
-13679 -6095 -6144 0
-13679 -6093 -6146 0
-13679 -6091 -6148 0
-13679 -6089 -6150 0
-13679 -6087 -6152 0
-13679 -6085 -6154 0
-13679 -6083 -6156 0
-13679 -6081 -6158 0
-13679 -6079 -6160 0
-13679 -6078 -6162 0
-13679 -6014 -6117 -6125 0
-13679 -6014 -6115 -6126 0
-13679 -6014 -6113 -6128 0
-13679 -6014 -6111 -6130 0
-13679 -6014 -6109 -6132 0
-13679 -6014 -6107 -6134 0
-13679 -6014 -6105 -6136 0
-13679 -6014 -6103 -6138 0
-13679 -6014 -6101 -6140 0
-13679 -6014 -6099 -6142 0
-13679 -6014 -6097 -6144 0
-13679 -6014 -6095 -6146 0
-13679 -6014 -6093 -6148 0
-13679 -6014 -6091 -6150 0
-13679 -6014 -6089 -6152 0
-13679 -6014 -6087 -6154 0
-13679 -6014 -6085 -6156 0
-13679 -6014 -6083 -6158 0
-13679 -6014 -6081 -6160 0
-13679 -6014 -6079 -6162 0
-13679 -6014 -6078 -6164 0
-13679 -6012 -6119 -6125 0
-13679 -6012 -6117 -6126 0
-13679 -6012 -6115 -6128 0
-13679 -6012 -6113 -6130 0
-13679 -6012 -6111 -6132 0
-13679 -6012 -6109 -6134 0
-13679 -6012 -6107 -6136 0
-13679 -6012 -6105 -6138 0
-13679 -6012 -6103 -6140 0
-13679 -6012 -6101 -6142 0
-13679 -6012 -6099 -6144 0
-13679 -6012 -6097 -6146 0
-13679 -6012 -6095 -6148 0
-13679 -6012 -6093 -6150 0
-13679 -6012 -6091 -6152 0
-13679 -6012 -6089 -6154 0
-13679 -6012 -6087 -6156 0
-13679 -6012 -6085 -6158 0
-13679 -6012 -6083 -6160 0
-13679 -6012 -6081 -6162 0
-13679 -6012 -6079 -6164 0
-13679 -6012 -6078 -6166 0
-13679 -6010 -6121 -6125 0
-13679 -6010 -6119 -6126 0
-13679 -6010 -6117 -6128 0
-13679 -6010 -6115 -6130 0
-13679 -6010 -6113 -6132 0
-13679 -6010 -6111 -6134 0
-13679 -6010 -6109 -6136 0
-13679 -6010 -6107 -6138 0
-13679 -6010 -6105 -6140 0
-13679 -6010 -6103 -6142 0
-13679 -6010 -6101 -6144 0
-13679 -6010 -6099 -6146 0
-13679 -6010 -6097 -6148 0
-13679 -6010 -6095 -6150 0
-13679 -6010 -6093 -6152 0
-13679 -6010 -6091 -6154 0
-13679 -6010 -6089 -6156 0
-13679 -6010 -6087 -6158 0
-13679 -6010 -6085 -6160 0
-13679 -6010 -6083 -6162 0
-13679 -6010 -6081 -6164 0
-13679 -6010 -6079 -6166 0
-13679 -6010 -6078 -6168 0
-13679 -6008 -6123 -6125 0
-13679 -6008 -6121 -6126 0
-13679 -6008 -6119 -6128 0
-13679 -6008 -6117 -6130 0
-13679 -6008 -6115 -6132 0
-13679 -6008 -6113 -6134 0
-13679 -6008 -6111 -6136 0
-13679 -6008 -6109 -6138 0
-13679 -6008 -6107 -6140 0
-13679 -6008 -6105 -6142 0
-13679 -6008 -6103 -6144 0
-13679 -6008 -6101 -6146 0
-13679 -6008 -6099 -6148 0
-13679 -6008 -6097 -6150 0
-13679 -6008 -6095 -6152 0
-13679 -6008 -6093 -6154 0
-13679 -6008 -6091 -6156 0
-13679 -6008 -6089 -6158 0
-13679 -6008 -6087 -6160 0
-13679 -6008 -6085 -6162 0
-13679 -6008 -6083 -6164 0
-13679 -6008 -6081 -6166 0
-13679 -6008 -6079 -6168 0
-13679 -6008 -6078 -6170 0
-13679 -6006 -6125 0
-13679 -6006 -6123 -6126 0
-13679 -6006 -6121 -6128 0
-13679 -6006 -6119 -6130 0
-13679 -6006 -6117 -6132 0
-13679 -6006 -6115 -6134 0
-13679 -6006 -6113 -6136 0
-13679 -6006 -6111 -6138 0
-13679 -6006 -6109 -6140 0
-13679 -6006 -6107 -6142 0
-13679 -6006 -6105 -6144 0
-13679 -6006 -6103 -6146 0
-13679 -6006 -6101 -6148 0
-13679 -6006 -6099 -6150 0
-13679 -6006 -6097 -6152 0
-13679 -6006 -6095 -6154 0
-13679 -6006 -6093 -6156 0
-13679 -6006 -6091 -6158 0
-13679 -6006 -6089 -6160 0
-13679 -6006 -6087 -6162 0
-13679 -6006 -6085 -6164 0
-13679 -6006 -6083 -6166 0
-13679 -6006 -6081 -6168 0
-13679 -6006 -6079 -6170 0
-13679 -6006 -6078 -6172 0
-13679 -6004 -6126 0
-13679 -6004 -6123 -6128 0
-13679 -6004 -6121 -6130 0
-13679 -6004 -6119 -6132 0
-13679 -6004 -6117 -6134 0
-13679 -6004 -6115 -6136 0
-13679 -6004 -6113 -6138 0
-13679 -6004 -6111 -6140 0
-13679 -6004 -6109 -6142 0
-13679 -6004 -6107 -6144 0
-13679 -6004 -6105 -6146 0
-13679 -6004 -6103 -6148 0
-13679 -6004 -6101 -6150 0
-13679 -6004 -6099 -6152 0
-13679 -6004 -6097 -6154 0
-13679 -6004 -6095 -6156 0
-13679 -6004 -6093 -6158 0
-13679 -6004 -6091 -6160 0
-13679 -6004 -6089 -6162 0
-13679 -6004 -6087 -6164 0
-13679 -6004 -6085 -6166 0
-13679 -6004 -6083 -6168 0
-13679 -6004 -6081 -6170 0
-13679 -6004 -6079 -6172 0
-13679 -6004 -6078 -6174 0
-13679 -6002 -6128 0
-13679 -6002 -6123 -6130 0
-13679 -6002 -6121 -6132 0
-13679 -6002 -6119 -6134 0
-13679 -6002 -6117 -6136 0
-13679 -6002 -6115 -6138 0
-13679 -6002 -6113 -6140 0
-13679 -6002 -6111 -6142 0
-13679 -6002 -6109 -6144 0
-13679 -6002 -6107 -6146 0
-13679 -6002 -6105 -6148 0
-13679 -6002 -6103 -6150 0
-13679 -6002 -6101 -6152 0
-13679 -6002 -6099 -6154 0
-13679 -6002 -6097 -6156 0
-13679 -6002 -6095 -6158 0
-13679 -6002 -6093 -6160 0
-13679 -6002 -6091 -6162 0
-13679 -6002 -6089 -6164 0
-13679 -6002 -6087 -6166 0
-13679 -6002 -6085 -6168 0
-13679 -6002 -6083 -6170 0
-13679 -6002 -6081 -6172 0
-13679 -6002 -6079 -6174 0
-13679 -6002 -6078 -6176 0
-13679 -6000 -6130 0
-13679 -6000 -6123 -6132 0
-13679 -6000 -6121 -6134 0
-13679 -6000 -6119 -6136 0
-13679 -6000 -6117 -6138 0
-13679 -6000 -6115 -6140 0
-13679 -6000 -6113 -6142 0
-13679 -6000 -6111 -6144 0
-13679 -6000 -6109 -6146 0
-13679 -6000 -6107 -6148 0
-13679 -6000 -6105 -6150 0
-13679 -6000 -6103 -6152 0
-13679 -6000 -6101 -6154 0
-13679 -6000 -6099 -6156 0
-13679 -6000 -6097 -6158 0
-13679 -6000 -6095 -6160 0
-13679 -6000 -6093 -6162 0
-13679 -6000 -6091 -6164 0
-13679 -6000 -6089 -6166 0
-13679 -6000 -6087 -6168 0
-13679 -6000 -6085 -6170 0
-13679 -6000 -6083 -6172 0
-13679 -6000 -6081 -6174 0
-13679 -6000 -6079 -6176 0
-13679 -6000 -6078 -6178 0
-13679 -5998 -6132 0
-13679 -5998 -6123 -6134 0
-13679 -5998 -6121 -6136 0
-13679 -5998 -6119 -6138 0
-13679 -5998 -6117 -6140 0
-13679 -5998 -6115 -6142 0
-13679 -5998 -6113 -6144 0
-13679 -5998 -6111 -6146 0
-13679 -5998 -6109 -6148 0
-13679 -5998 -6107 -6150 0
-13679 -5998 -6105 -6152 0
-13679 -5998 -6103 -6154 0
-13679 -5998 -6101 -6156 0
-13679 -5998 -6099 -6158 0
-13679 -5998 -6097 -6160 0
-13679 -5998 -6095 -6162 0
-13679 -5998 -6093 -6164 0
-13679 -5998 -6091 -6166 0
-13679 -5998 -6089 -6168 0
-13679 -5998 -6087 -6170 0
-13679 -5998 -6085 -6172 0
-13679 -5998 -6083 -6174 0
-13679 -5998 -6081 -6176 0
-13679 -5998 -6079 -6178 0
-13679 -5998 -6078 -6180 0
-13679 -5996 -6134 0
-13679 -5996 -6123 -6136 0
-13679 -5996 -6121 -6138 0
-13679 -5996 -6119 -6140 0
-13679 -5996 -6117 -6142 0
-13679 -5996 -6115 -6144 0
-13679 -5996 -6113 -6146 0
-13679 -5996 -6111 -6148 0
-13679 -5996 -6109 -6150 0
-13679 -5996 -6107 -6152 0
-13679 -5996 -6105 -6154 0
-13679 -5996 -6103 -6156 0
-13679 -5996 -6101 -6158 0
-13679 -5996 -6099 -6160 0
-13679 -5996 -6097 -6162 0
-13679 -5996 -6095 -6164 0
-13679 -5996 -6093 -6166 0
-13679 -5996 -6091 -6168 0
-13679 -5996 -6089 -6170 0
-13679 -5996 -6087 -6172 0
-13679 -5996 -6085 -6174 0
-13679 -5996 -6083 -6176 0
-13679 -5996 -6081 -6178 0
-13679 -5996 -6079 -6180 0
-13679 -5996 -6078 -6182 0
-13679 -5994 -6136 0
-13679 -5994 -6123 -6138 0
-13679 -5994 -6121 -6140 0
-13679 -5994 -6119 -6142 0
-13679 -5994 -6117 -6144 0
-13679 -5994 -6115 -6146 0
-13679 -5994 -6113 -6148 0
-13679 -5994 -6111 -6150 0
-13679 -5994 -6109 -6152 0
-13679 -5994 -6107 -6154 0
-13679 -5994 -6105 -6156 0
-13679 -5994 -6103 -6158 0
-13679 -5994 -6101 -6160 0
-13679 -5994 -6099 -6162 0
-13679 -5994 -6097 -6164 0
-13679 -5994 -6095 -6166 0
-13679 -5994 -6093 -6168 0
-13679 -5994 -6091 -6170 0
-13679 -5994 -6089 -6172 0
-13679 -5994 -6087 -6174 0
-13679 -5994 -6085 -6176 0
-13679 -5994 -6083 -6178 0
-13679 -5994 -6081 -6180 0
-13679 -5994 -6079 -6182 0
-13679 -5994 -6078 -6184 0
-13679 -5992 -6138 0
-13679 -5992 -6123 -6140 0
-13679 -5992 -6121 -6142 0
-13679 -5992 -6119 -6144 0
-13679 -5992 -6117 -6146 0
-13679 -5992 -6115 -6148 0
-13679 -5992 -6113 -6150 0
-13679 -5992 -6111 -6152 0
-13679 -5992 -6109 -6154 0
-13679 -5992 -6107 -6156 0
-13679 -5992 -6105 -6158 0
-13679 -5992 -6103 -6160 0
-13679 -5992 -6101 -6162 0
-13679 -5992 -6099 -6164 0
-13679 -5992 -6097 -6166 0
-13679 -5992 -6095 -6168 0
-13679 -5992 -6093 -6170 0
-13679 -5992 -6091 -6172 0
-13679 -5992 -6089 -6174 0
-13679 -5992 -6087 -6176 0
-13679 -5992 -6085 -6178 0
-13679 -5992 -6083 -6180 0
-13679 -5992 -6081 -6182 0
-13679 -5992 -6079 -6184 0
-13679 -5992 -6078 -6186 0
-13679 -5990 -6140 0
-13679 -5990 -6123 -6142 0
-13679 -5990 -6121 -6144 0
-13679 -5990 -6119 -6146 0
-13679 -5990 -6117 -6148 0
-13679 -5990 -6115 -6150 0
-13679 -5990 -6113 -6152 0
-13679 -5990 -6111 -6154 0
-13679 -5990 -6109 -6156 0
-13679 -5990 -6107 -6158 0
-13679 -5990 -6105 -6160 0
-13679 -5990 -6103 -6162 0
-13679 -5990 -6101 -6164 0
-13679 -5990 -6099 -6166 0
-13679 -5990 -6097 -6168 0
-13679 -5990 -6095 -6170 0
-13679 -5990 -6093 -6172 0
-13679 -5990 -6091 -6174 0
-13679 -5990 -6089 -6176 0
-13679 -5990 -6087 -6178 0
-13679 -5990 -6085 -6180 0
-13679 -5990 -6083 -6182 0
-13679 -5990 -6081 -6184 0
-13679 -5990 -6079 -6186 0
-13679 -5990 -6078 0
-13679 -5988 -6142 0
-13679 -5988 -6123 -6144 0
-13679 -5988 -6121 -6146 0
-13679 -5988 -6119 -6148 0
-13679 -5988 -6117 -6150 0
-13679 -5988 -6115 -6152 0
-13679 -5988 -6113 -6154 0
-13679 -5988 -6111 -6156 0
-13679 -5988 -6109 -6158 0
-13679 -5988 -6107 -6160 0
-13679 -5988 -6105 -6162 0
-13679 -5988 -6103 -6164 0
-13679 -5988 -6101 -6166 0
-13679 -5988 -6099 -6168 0
-13679 -5988 -6097 -6170 0
-13679 -5988 -6095 -6172 0
-13679 -5988 -6093 -6174 0
-13679 -5988 -6091 -6176 0
-13679 -5988 -6089 -6178 0
-13679 -5988 -6087 -6180 0
-13679 -5988 -6085 -6182 0
-13679 -5988 -6083 -6184 0
-13679 -5988 -6081 -6186 0
-13679 -5988 -6079 0
-13679 -5988 -6078 0
-13679 -5986 -6144 0
-13679 -5986 -6123 -6146 0
-13679 -5986 -6121 -6148 0
-13679 -5986 -6119 -6150 0
-13679 -5986 -6117 -6152 0
-13679 -5986 -6115 -6154 0
-13679 -5986 -6113 -6156 0
-13679 -5986 -6111 -6158 0
-13679 -5986 -6109 -6160 0
-13679 -5986 -6107 -6162 0
-13679 -5986 -6105 -6164 0
-13679 -5986 -6103 -6166 0
-13679 -5986 -6101 -6168 0
-13679 -5986 -6099 -6170 0
-13679 -5986 -6097 -6172 0
-13679 -5986 -6095 -6174 0
-13679 -5986 -6093 -6176 0
-13679 -5986 -6091 -6178 0
-13679 -5986 -6089 -6180 0
-13679 -5986 -6087 -6182 0
-13679 -5986 -6085 -6184 0
-13679 -5986 -6083 -6186 0
-13679 -5986 -6081 0
-13679 -5986 -6079 0
-13679 -5986 -6078 0
-13679 -5985 -6146 0
-13679 -5985 -6123 -6148 0
-13679 -5985 -6121 -6150 0
-13679 -5985 -6119 -6152 0
-13679 -5985 -6117 -6154 0
-13679 -5985 -6115 -6156 0
-13679 -5985 -6113 -6158 0
-13679 -5985 -6111 -6160 0
-13679 -5985 -6109 -6162 0
-13679 -5985 -6107 -6164 0
-13679 -5985 -6105 -6166 0
-13679 -5985 -6103 -6168 0
-13679 -5985 -6101 -6170 0
-13679 -5985 -6099 -6172 0
-13679 -5985 -6097 -6174 0
-13679 -5985 -6095 -6176 0
-13679 -5985 -6093 -6178 0
-13679 -5985 -6091 -6180 0
-13679 -5985 -6089 -6182 0
-13679 -5985 -6087 -6184 0
-13679 -5985 -6085 -6186 0
-13679 -5985 -6083 0
-13679 -5985 -6081 0
-13679 -5985 -6079 0
-13679 -5985 -6078 0
13679 6083 6186 0
13679 6085 6184 0
13679 6087 6182 0
13679 6089 6180 0
13679 6091 6178 0
13679 6093 6176 0
13679 6095 6174 0
13679 6097 6172 0
13679 6099 6170 0
13679 6101 6168 0
13679 6103 6166 0
13679 6105 6164 0
13679 6107 6162 0
13679 6109 6160 0
13679 6111 6158 0
13679 6113 6156 0
13679 6115 6154 0
13679 6117 6152 0
13679 6119 6150 0
13679 6121 6148 0
13679 6123 6146 0
13679 5985 6081 6186 0
13679 5985 6083 6184 0
13679 5985 6085 6182 0
13679 5985 6087 6180 0
13679 5985 6089 6178 0
13679 5985 6091 6176 0
13679 5985 6093 6174 0
13679 5985 6095 6172 0
13679 5985 6097 6170 0
13679 5985 6099 6168 0
13679 5985 6101 6166 0
13679 5985 6103 6164 0
13679 5985 6105 6162 0
13679 5985 6107 6160 0
13679 5985 6109 6158 0
13679 5985 6111 6156 0
13679 5985 6113 6154 0
13679 5985 6115 6152 0
13679 5985 6117 6150 0
13679 5985 6119 6148 0
13679 5985 6121 6146 0
13679 5985 6123 6144 0
13679 5986 6079 6186 0
13679 5986 6081 6184 0
13679 5986 6083 6182 0
13679 5986 6085 6180 0
13679 5986 6087 6178 0
13679 5986 6089 6176 0
13679 5986 6091 6174 0
13679 5986 6093 6172 0
13679 5986 6095 6170 0
13679 5986 6097 6168 0
13679 5986 6099 6166 0
13679 5986 6101 6164 0
13679 5986 6103 6162 0
13679 5986 6105 6160 0
13679 5986 6107 6158 0
13679 5986 6109 6156 0
13679 5986 6111 6154 0
13679 5986 6113 6152 0
13679 5986 6115 6150 0
13679 5986 6117 6148 0
13679 5986 6119 6146 0
13679 5986 6121 6144 0
13679 5986 6123 6142 0
13679 5988 6078 6186 0
13679 5988 6079 6184 0
13679 5988 6081 6182 0
13679 5988 6083 6180 0
13679 5988 6085 6178 0
13679 5988 6087 6176 0
13679 5988 6089 6174 0
13679 5988 6091 6172 0
13679 5988 6093 6170 0
13679 5988 6095 6168 0
13679 5988 6097 6166 0
13679 5988 6099 6164 0
13679 5988 6101 6162 0
13679 5988 6103 6160 0
13679 5988 6105 6158 0
13679 5988 6107 6156 0
13679 5988 6109 6154 0
13679 5988 6111 6152 0
13679 5988 6113 6150 0
13679 5988 6115 6148 0
13679 5988 6117 6146 0
13679 5988 6119 6144 0
13679 5988 6121 6142 0
13679 5988 6123 6140 0
13679 5990 6186 0
13679 5990 6078 6184 0
13679 5990 6079 6182 0
13679 5990 6081 6180 0
13679 5990 6083 6178 0
13679 5990 6085 6176 0
13679 5990 6087 6174 0
13679 5990 6089 6172 0
13679 5990 6091 6170 0
13679 5990 6093 6168 0
13679 5990 6095 6166 0
13679 5990 6097 6164 0
13679 5990 6099 6162 0
13679 5990 6101 6160 0
13679 5990 6103 6158 0
13679 5990 6105 6156 0
13679 5990 6107 6154 0
13679 5990 6109 6152 0
13679 5990 6111 6150 0
13679 5990 6113 6148 0
13679 5990 6115 6146 0
13679 5990 6117 6144 0
13679 5990 6119 6142 0
13679 5990 6121 6140 0
13679 5990 6123 6138 0
13679 5992 6184 0
13679 5992 6078 6182 0
13679 5992 6079 6180 0
13679 5992 6081 6178 0
13679 5992 6083 6176 0
13679 5992 6085 6174 0
13679 5992 6087 6172 0
13679 5992 6089 6170 0
13679 5992 6091 6168 0
13679 5992 6093 6166 0
13679 5992 6095 6164 0
13679 5992 6097 6162 0
13679 5992 6099 6160 0
13679 5992 6101 6158 0
13679 5992 6103 6156 0
13679 5992 6105 6154 0
13679 5992 6107 6152 0
13679 5992 6109 6150 0
13679 5992 6111 6148 0
13679 5992 6113 6146 0
13679 5992 6115 6144 0
13679 5992 6117 6142 0
13679 5992 6119 6140 0
13679 5992 6121 6138 0
13679 5992 6123 6136 0
13679 5994 6182 0
13679 5994 6078 6180 0
13679 5994 6079 6178 0
13679 5994 6081 6176 0
13679 5994 6083 6174 0
13679 5994 6085 6172 0
13679 5994 6087 6170 0
13679 5994 6089 6168 0
13679 5994 6091 6166 0
13679 5994 6093 6164 0
13679 5994 6095 6162 0
13679 5994 6097 6160 0
13679 5994 6099 6158 0
13679 5994 6101 6156 0
13679 5994 6103 6154 0
13679 5994 6105 6152 0
13679 5994 6107 6150 0
13679 5994 6109 6148 0
13679 5994 6111 6146 0
13679 5994 6113 6144 0
13679 5994 6115 6142 0
13679 5994 6117 6140 0
13679 5994 6119 6138 0
13679 5994 6121 6136 0
13679 5994 6123 6134 0
13679 5996 6180 0
13679 5996 6078 6178 0
13679 5996 6079 6176 0
13679 5996 6081 6174 0
13679 5996 6083 6172 0
13679 5996 6085 6170 0
13679 5996 6087 6168 0
13679 5996 6089 6166 0
13679 5996 6091 6164 0
13679 5996 6093 6162 0
13679 5996 6095 6160 0
13679 5996 6097 6158 0
13679 5996 6099 6156 0
13679 5996 6101 6154 0
13679 5996 6103 6152 0
13679 5996 6105 6150 0
13679 5996 6107 6148 0
13679 5996 6109 6146 0
13679 5996 6111 6144 0
13679 5996 6113 6142 0
13679 5996 6115 6140 0
13679 5996 6117 6138 0
13679 5996 6119 6136 0
13679 5996 6121 6134 0
13679 5996 6123 6132 0
13679 5998 6178 0
13679 5998 6078 6176 0
13679 5998 6079 6174 0
13679 5998 6081 6172 0
13679 5998 6083 6170 0
13679 5998 6085 6168 0
13679 5998 6087 6166 0
13679 5998 6089 6164 0
13679 5998 6091 6162 0
13679 5998 6093 6160 0
13679 5998 6095 6158 0
13679 5998 6097 6156 0
13679 5998 6099 6154 0
13679 5998 6101 6152 0
13679 5998 6103 6150 0
13679 5998 6105 6148 0
13679 5998 6107 6146 0
13679 5998 6109 6144 0
13679 5998 6111 6142 0
13679 5998 6113 6140 0
13679 5998 6115 6138 0
13679 5998 6117 6136 0
13679 5998 6119 6134 0
13679 5998 6121 6132 0
13679 5998 6123 6130 0
13679 6000 6176 0
13679 6000 6078 6174 0
13679 6000 6079 6172 0
13679 6000 6081 6170 0
13679 6000 6083 6168 0
13679 6000 6085 6166 0
13679 6000 6087 6164 0
13679 6000 6089 6162 0
13679 6000 6091 6160 0
13679 6000 6093 6158 0
13679 6000 6095 6156 0
13679 6000 6097 6154 0
13679 6000 6099 6152 0
13679 6000 6101 6150 0
13679 6000 6103 6148 0
13679 6000 6105 6146 0
13679 6000 6107 6144 0
13679 6000 6109 6142 0
13679 6000 6111 6140 0
13679 6000 6113 6138 0
13679 6000 6115 6136 0
13679 6000 6117 6134 0
13679 6000 6119 6132 0
13679 6000 6121 6130 0
13679 6000 6123 6128 0
13679 6002 6174 0
13679 6002 6078 6172 0
13679 6002 6079 6170 0
13679 6002 6081 6168 0
13679 6002 6083 6166 0
13679 6002 6085 6164 0
13679 6002 6087 6162 0
13679 6002 6089 6160 0
13679 6002 6091 6158 0
13679 6002 6093 6156 0
13679 6002 6095 6154 0
13679 6002 6097 6152 0
13679 6002 6099 6150 0
13679 6002 6101 6148 0
13679 6002 6103 6146 0
13679 6002 6105 6144 0
13679 6002 6107 6142 0
13679 6002 6109 6140 0
13679 6002 6111 6138 0
13679 6002 6113 6136 0
13679 6002 6115 6134 0
13679 6002 6117 6132 0
13679 6002 6119 6130 0
13679 6002 6121 6128 0
13679 6002 6123 6126 0
13679 6004 6172 0
13679 6004 6078 6170 0
13679 6004 6079 6168 0
13679 6004 6081 6166 0
13679 6004 6083 6164 0
13679 6004 6085 6162 0
13679 6004 6087 6160 0
13679 6004 6089 6158 0
13679 6004 6091 6156 0
13679 6004 6093 6154 0
13679 6004 6095 6152 0
13679 6004 6097 6150 0
13679 6004 6099 6148 0
13679 6004 6101 6146 0
13679 6004 6103 6144 0
13679 6004 6105 6142 0
13679 6004 6107 6140 0
13679 6004 6109 6138 0
13679 6004 6111 6136 0
13679 6004 6113 6134 0
13679 6004 6115 6132 0
13679 6004 6117 6130 0
13679 6004 6119 6128 0
13679 6004 6121 6126 0
13679 6004 6123 6125 0
13679 6006 6170 0
13679 6006 6078 6168 0
13679 6006 6079 6166 0
13679 6006 6081 6164 0
13679 6006 6083 6162 0
13679 6006 6085 6160 0
13679 6006 6087 6158 0
13679 6006 6089 6156 0
13679 6006 6091 6154 0
13679 6006 6093 6152 0
13679 6006 6095 6150 0
13679 6006 6097 6148 0
13679 6006 6099 6146 0
13679 6006 6101 6144 0
13679 6006 6103 6142 0
13679 6006 6105 6140 0
13679 6006 6107 6138 0
13679 6006 6109 6136 0
13679 6006 6111 6134 0
13679 6006 6113 6132 0
13679 6006 6115 6130 0
13679 6006 6117 6128 0
13679 6006 6119 6126 0
13679 6006 6121 6125 0
13679 6006 6123 0
13679 6008 6168 0
13679 6008 6078 6166 0
13679 6008 6079 6164 0
13679 6008 6081 6162 0
13679 6008 6083 6160 0
13679 6008 6085 6158 0
13679 6008 6087 6156 0
13679 6008 6089 6154 0
13679 6008 6091 6152 0
13679 6008 6093 6150 0
13679 6008 6095 6148 0
13679 6008 6097 6146 0
13679 6008 6099 6144 0
13679 6008 6101 6142 0
13679 6008 6103 6140 0
13679 6008 6105 6138 0
13679 6008 6107 6136 0
13679 6008 6109 6134 0
13679 6008 6111 6132 0
13679 6008 6113 6130 0
13679 6008 6115 6128 0
13679 6008 6117 6126 0
13679 6008 6119 6125 0
13679 6008 6121 0
13679 6008 6123 0
13679 6010 6166 0
13679 6010 6078 6164 0
13679 6010 6079 6162 0
13679 6010 6081 6160 0
13679 6010 6083 6158 0
13679 6010 6085 6156 0
13679 6010 6087 6154 0
13679 6010 6089 6152 0
13679 6010 6091 6150 0
13679 6010 6093 6148 0
13679 6010 6095 6146 0
13679 6010 6097 6144 0
13679 6010 6099 6142 0
13679 6010 6101 6140 0
13679 6010 6103 6138 0
13679 6010 6105 6136 0
13679 6010 6107 6134 0
13679 6010 6109 6132 0
13679 6010 6111 6130 0
13679 6010 6113 6128 0
13679 6010 6115 6126 0
13679 6010 6117 6125 0
13679 6010 6119 0
13679 6010 6121 0
13679 6010 6123 0
13679 6012 6164 0
13679 6012 6078 6162 0
13679 6012 6079 6160 0
13679 6012 6081 6158 0
13679 6012 6083 6156 0
13679 6012 6085 6154 0
13679 6012 6087 6152 0
13679 6012 6089 6150 0
13679 6012 6091 6148 0
13679 6012 6093 6146 0
13679 6012 6095 6144 0
13679 6012 6097 6142 0
13679 6012 6099 6140 0
13679 6012 6101 6138 0
13679 6012 6103 6136 0
13679 6012 6105 6134 0
13679 6012 6107 6132 0
13679 6012 6109 6130 0
13679 6012 6111 6128 0
13679 6012 6113 6126 0
13679 6012 6115 6125 0
13679 6012 6117 0
13679 6012 6119 0
13679 6012 6121 0
13679 6012 6123 0
13679 6014 6162 0
13679 6014 6078 6160 0
13679 6014 6079 6158 0
13679 6014 6081 6156 0
13679 6014 6083 6154 0
13679 6014 6085 6152 0
13679 6014 6087 6150 0
13679 6014 6089 6148 0
13679 6014 6091 6146 0
13679 6014 6093 6144 0
13679 6014 6095 6142 0
13679 6014 6097 6140 0
13679 6014 6099 6138 0
13679 6014 6101 6136 0
13679 6014 6103 6134 0
13679 6014 6105 6132 0
13679 6014 6107 6130 0
13679 6014 6109 6128 0
13679 6014 6111 6126 0
13679 6014 6113 6125 0
13679 6014 6115 0
13679 6014 6117 0
13679 6014 6119 0
13679 6014 6121 0
13679 6014 6123 0
c (((aux576 + aux579 + aux580)<=36)=tv=SATLiteral(13680))
-13680 6319 6420 0
-13680 6321 6418 0
-13680 6323 6416 0
-13680 6325 6414 0
-13680 6327 6412 0
-13680 6329 6410 0
-13680 6331 6408 0
-13680 6333 6406 0
-13680 6335 6404 0
-13680 6337 6402 0
-13680 6339 6400 0
-13680 6341 6398 0
-13680 6343 6396 0
-13680 6345 6394 0
-13680 6347 6392 0
-13680 6349 6390 0
-13680 6351 6388 0
-13680 6353 6386 0
-13680 6355 6384 0
-13680 6357 6382 0
-13680 6219 6317 6420 0
-13680 6219 6319 6418 0
-13680 6219 6321 6416 0
-13680 6219 6323 6414 0
-13680 6219 6325 6412 0
-13680 6219 6327 6410 0
-13680 6219 6329 6408 0
-13680 6219 6331 6406 0
-13680 6219 6333 6404 0
-13680 6219 6335 6402 0
-13680 6219 6337 6400 0
-13680 6219 6339 6398 0
-13680 6219 6341 6396 0
-13680 6219 6343 6394 0
-13680 6219 6345 6392 0
-13680 6219 6347 6390 0
-13680 6219 6349 6388 0
-13680 6219 6351 6386 0
-13680 6219 6353 6384 0
-13680 6219 6355 6382 0
-13680 6219 6357 6380 0
-13680 6220 6315 6420 0
-13680 6220 6317 6418 0
-13680 6220 6319 6416 0
-13680 6220 6321 6414 0
-13680 6220 6323 6412 0
-13680 6220 6325 6410 0
-13680 6220 6327 6408 0
-13680 6220 6329 6406 0
-13680 6220 6331 6404 0
-13680 6220 6333 6402 0
-13680 6220 6335 6400 0
-13680 6220 6337 6398 0
-13680 6220 6339 6396 0
-13680 6220 6341 6394 0
-13680 6220 6343 6392 0
-13680 6220 6345 6390 0
-13680 6220 6347 6388 0
-13680 6220 6349 6386 0
-13680 6220 6351 6384 0
-13680 6220 6353 6382 0
-13680 6220 6355 6380 0
-13680 6220 6357 6378 0
-13680 6222 6313 6420 0
-13680 6222 6315 6418 0
-13680 6222 6317 6416 0
-13680 6222 6319 6414 0
-13680 6222 6321 6412 0
-13680 6222 6323 6410 0
-13680 6222 6325 6408 0
-13680 6222 6327 6406 0
-13680 6222 6329 6404 0
-13680 6222 6331 6402 0
-13680 6222 6333 6400 0
-13680 6222 6335 6398 0
-13680 6222 6337 6396 0
-13680 6222 6339 6394 0
-13680 6222 6341 6392 0
-13680 6222 6343 6390 0
-13680 6222 6345 6388 0
-13680 6222 6347 6386 0
-13680 6222 6349 6384 0
-13680 6222 6351 6382 0
-13680 6222 6353 6380 0
-13680 6222 6355 6378 0
-13680 6222 6357 6376 0
-13680 6224 6312 6420 0
-13680 6224 6313 6418 0
-13680 6224 6315 6416 0
-13680 6224 6317 6414 0
-13680 6224 6319 6412 0
-13680 6224 6321 6410 0
-13680 6224 6323 6408 0
-13680 6224 6325 6406 0
-13680 6224 6327 6404 0
-13680 6224 6329 6402 0
-13680 6224 6331 6400 0
-13680 6224 6333 6398 0
-13680 6224 6335 6396 0
-13680 6224 6337 6394 0
-13680 6224 6339 6392 0
-13680 6224 6341 6390 0
-13680 6224 6343 6388 0
-13680 6224 6345 6386 0
-13680 6224 6347 6384 0
-13680 6224 6349 6382 0
-13680 6224 6351 6380 0
-13680 6224 6353 6378 0
-13680 6224 6355 6376 0
-13680 6224 6357 6374 0
-13680 6226 6420 0
-13680 6226 6312 6418 0
-13680 6226 6313 6416 0
-13680 6226 6315 6414 0
-13680 6226 6317 6412 0
-13680 6226 6319 6410 0
-13680 6226 6321 6408 0
-13680 6226 6323 6406 0
-13680 6226 6325 6404 0
-13680 6226 6327 6402 0
-13680 6226 6329 6400 0
-13680 6226 6331 6398 0
-13680 6226 6333 6396 0
-13680 6226 6335 6394 0
-13680 6226 6337 6392 0
-13680 6226 6339 6390 0
-13680 6226 6341 6388 0
-13680 6226 6343 6386 0
-13680 6226 6345 6384 0
-13680 6226 6347 6382 0
-13680 6226 6349 6380 0
-13680 6226 6351 6378 0
-13680 6226 6353 6376 0
-13680 6226 6355 6374 0
-13680 6226 6357 6372 0
-13680 6228 6418 0
-13680 6228 6312 6416 0
-13680 6228 6313 6414 0
-13680 6228 6315 6412 0
-13680 6228 6317 6410 0
-13680 6228 6319 6408 0
-13680 6228 6321 6406 0
-13680 6228 6323 6404 0
-13680 6228 6325 6402 0
-13680 6228 6327 6400 0
-13680 6228 6329 6398 0
-13680 6228 6331 6396 0
-13680 6228 6333 6394 0
-13680 6228 6335 6392 0
-13680 6228 6337 6390 0
-13680 6228 6339 6388 0
-13680 6228 6341 6386 0
-13680 6228 6343 6384 0
-13680 6228 6345 6382 0
-13680 6228 6347 6380 0
-13680 6228 6349 6378 0
-13680 6228 6351 6376 0
-13680 6228 6353 6374 0
-13680 6228 6355 6372 0
-13680 6228 6357 6370 0
-13680 6230 6416 0
-13680 6230 6312 6414 0
-13680 6230 6313 6412 0
-13680 6230 6315 6410 0
-13680 6230 6317 6408 0
-13680 6230 6319 6406 0
-13680 6230 6321 6404 0
-13680 6230 6323 6402 0
-13680 6230 6325 6400 0
-13680 6230 6327 6398 0
-13680 6230 6329 6396 0
-13680 6230 6331 6394 0
-13680 6230 6333 6392 0
-13680 6230 6335 6390 0
-13680 6230 6337 6388 0
-13680 6230 6339 6386 0
-13680 6230 6341 6384 0
-13680 6230 6343 6382 0
-13680 6230 6345 6380 0
-13680 6230 6347 6378 0
-13680 6230 6349 6376 0
-13680 6230 6351 6374 0
-13680 6230 6353 6372 0
-13680 6230 6355 6370 0
-13680 6230 6357 6368 0
-13680 6232 6414 0
-13680 6232 6312 6412 0
-13680 6232 6313 6410 0
-13680 6232 6315 6408 0
-13680 6232 6317 6406 0
-13680 6232 6319 6404 0
-13680 6232 6321 6402 0
-13680 6232 6323 6400 0
-13680 6232 6325 6398 0
-13680 6232 6327 6396 0
-13680 6232 6329 6394 0
-13680 6232 6331 6392 0
-13680 6232 6333 6390 0
-13680 6232 6335 6388 0
-13680 6232 6337 6386 0
-13680 6232 6339 6384 0
-13680 6232 6341 6382 0
-13680 6232 6343 6380 0
-13680 6232 6345 6378 0
-13680 6232 6347 6376 0
-13680 6232 6349 6374 0
-13680 6232 6351 6372 0
-13680 6232 6353 6370 0
-13680 6232 6355 6368 0
-13680 6232 6357 6366 0
-13680 6234 6412 0
-13680 6234 6312 6410 0
-13680 6234 6313 6408 0
-13680 6234 6315 6406 0
-13680 6234 6317 6404 0
-13680 6234 6319 6402 0
-13680 6234 6321 6400 0
-13680 6234 6323 6398 0
-13680 6234 6325 6396 0
-13680 6234 6327 6394 0
-13680 6234 6329 6392 0
-13680 6234 6331 6390 0
-13680 6234 6333 6388 0
-13680 6234 6335 6386 0
-13680 6234 6337 6384 0
-13680 6234 6339 6382 0
-13680 6234 6341 6380 0
-13680 6234 6343 6378 0
-13680 6234 6345 6376 0
-13680 6234 6347 6374 0
-13680 6234 6349 6372 0
-13680 6234 6351 6370 0
-13680 6234 6353 6368 0
-13680 6234 6355 6366 0
-13680 6234 6357 6364 0
-13680 6236 6410 0
-13680 6236 6312 6408 0
-13680 6236 6313 6406 0
-13680 6236 6315 6404 0
-13680 6236 6317 6402 0
-13680 6236 6319 6400 0
-13680 6236 6321 6398 0
-13680 6236 6323 6396 0
-13680 6236 6325 6394 0
-13680 6236 6327 6392 0
-13680 6236 6329 6390 0
-13680 6236 6331 6388 0
-13680 6236 6333 6386 0
-13680 6236 6335 6384 0
-13680 6236 6337 6382 0
-13680 6236 6339 6380 0
-13680 6236 6341 6378 0
-13680 6236 6343 6376 0
-13680 6236 6345 6374 0
-13680 6236 6347 6372 0
-13680 6236 6349 6370 0
-13680 6236 6351 6368 0
-13680 6236 6353 6366 0
-13680 6236 6355 6364 0
-13680 6236 6357 6362 0
-13680 6238 6408 0
-13680 6238 6312 6406 0
-13680 6238 6313 6404 0
-13680 6238 6315 6402 0
-13680 6238 6317 6400 0
-13680 6238 6319 6398 0
-13680 6238 6321 6396 0
-13680 6238 6323 6394 0
-13680 6238 6325 6392 0
-13680 6238 6327 6390 0
-13680 6238 6329 6388 0
-13680 6238 6331 6386 0
-13680 6238 6333 6384 0
-13680 6238 6335 6382 0
-13680 6238 6337 6380 0
-13680 6238 6339 6378 0
-13680 6238 6341 6376 0
-13680 6238 6343 6374 0
-13680 6238 6345 6372 0
-13680 6238 6347 6370 0
-13680 6238 6349 6368 0
-13680 6238 6351 6366 0
-13680 6238 6353 6364 0
-13680 6238 6355 6362 0
-13680 6238 6357 6360 0
-13680 6240 6406 0
-13680 6240 6312 6404 0
-13680 6240 6313 6402 0
-13680 6240 6315 6400 0
-13680 6240 6317 6398 0
-13680 6240 6319 6396 0
-13680 6240 6321 6394 0
-13680 6240 6323 6392 0
-13680 6240 6325 6390 0
-13680 6240 6327 6388 0
-13680 6240 6329 6386 0
-13680 6240 6331 6384 0
-13680 6240 6333 6382 0
-13680 6240 6335 6380 0
-13680 6240 6337 6378 0
-13680 6240 6339 6376 0
-13680 6240 6341 6374 0
-13680 6240 6343 6372 0
-13680 6240 6345 6370 0
-13680 6240 6347 6368 0
-13680 6240 6349 6366 0
-13680 6240 6351 6364 0
-13680 6240 6353 6362 0
-13680 6240 6355 6360 0
-13680 6240 6357 6359 0
-13680 6242 6404 0
-13680 6242 6312 6402 0
-13680 6242 6313 6400 0
-13680 6242 6315 6398 0
-13680 6242 6317 6396 0
-13680 6242 6319 6394 0
-13680 6242 6321 6392 0
-13680 6242 6323 6390 0
-13680 6242 6325 6388 0
-13680 6242 6327 6386 0
-13680 6242 6329 6384 0
-13680 6242 6331 6382 0
-13680 6242 6333 6380 0
-13680 6242 6335 6378 0
-13680 6242 6337 6376 0
-13680 6242 6339 6374 0
-13680 6242 6341 6372 0
-13680 6242 6343 6370 0
-13680 6242 6345 6368 0
-13680 6242 6347 6366 0
-13680 6242 6349 6364 0
-13680 6242 6351 6362 0
-13680 6242 6353 6360 0
-13680 6242 6355 6359 0
-13680 6242 6357 0
-13680 6244 6402 0
-13680 6244 6312 6400 0
-13680 6244 6313 6398 0
-13680 6244 6315 6396 0
-13680 6244 6317 6394 0
-13680 6244 6319 6392 0
-13680 6244 6321 6390 0
-13680 6244 6323 6388 0
-13680 6244 6325 6386 0
-13680 6244 6327 6384 0
-13680 6244 6329 6382 0
-13680 6244 6331 6380 0
-13680 6244 6333 6378 0
-13680 6244 6335 6376 0
-13680 6244 6337 6374 0
-13680 6244 6339 6372 0
-13680 6244 6341 6370 0
-13680 6244 6343 6368 0
-13680 6244 6345 6366 0
-13680 6244 6347 6364 0
-13680 6244 6349 6362 0
-13680 6244 6351 6360 0
-13680 6244 6353 6359 0
-13680 6244 6355 0
-13680 6244 6357 0
-13680 6246 6400 0
-13680 6246 6312 6398 0
-13680 6246 6313 6396 0
-13680 6246 6315 6394 0
-13680 6246 6317 6392 0
-13680 6246 6319 6390 0
-13680 6246 6321 6388 0
-13680 6246 6323 6386 0
-13680 6246 6325 6384 0
-13680 6246 6327 6382 0
-13680 6246 6329 6380 0
-13680 6246 6331 6378 0
-13680 6246 6333 6376 0
-13680 6246 6335 6374 0
-13680 6246 6337 6372 0
-13680 6246 6339 6370 0
-13680 6246 6341 6368 0
-13680 6246 6343 6366 0
-13680 6246 6345 6364 0
-13680 6246 6347 6362 0
-13680 6246 6349 6360 0
-13680 6246 6351 6359 0
-13680 6246 6353 0
-13680 6246 6355 0
-13680 6246 6357 0
-13680 6248 6398 0
-13680 6248 6312 6396 0
-13680 6248 6313 6394 0
-13680 6248 6315 6392 0
-13680 6248 6317 6390 0
-13680 6248 6319 6388 0
-13680 6248 6321 6386 0
-13680 6248 6323 6384 0
-13680 6248 6325 6382 0
-13680 6248 6327 6380 0
-13680 6248 6329 6378 0
-13680 6248 6331 6376 0
-13680 6248 6333 6374 0
-13680 6248 6335 6372 0
-13680 6248 6337 6370 0
-13680 6248 6339 6368 0
-13680 6248 6341 6366 0
-13680 6248 6343 6364 0
-13680 6248 6345 6362 0
-13680 6248 6347 6360 0
-13680 6248 6349 6359 0
-13680 6248 6351 0
-13680 6248 6353 0
-13680 6248 6355 0
-13680 6248 6357 0
13680 -6351 -6359 0
13680 -6349 -6360 0
13680 -6347 -6362 0
13680 -6345 -6364 0
13680 -6343 -6366 0
13680 -6341 -6368 0
13680 -6339 -6370 0
13680 -6337 -6372 0
13680 -6335 -6374 0
13680 -6333 -6376 0
13680 -6331 -6378 0
13680 -6329 -6380 0
13680 -6327 -6382 0
13680 -6325 -6384 0
13680 -6323 -6386 0
13680 -6321 -6388 0
13680 -6319 -6390 0
13680 -6317 -6392 0
13680 -6315 -6394 0
13680 -6313 -6396 0
13680 -6312 -6398 0
13680 -6248 -6353 -6359 0
13680 -6248 -6351 -6360 0
13680 -6248 -6349 -6362 0
13680 -6248 -6347 -6364 0
13680 -6248 -6345 -6366 0
13680 -6248 -6343 -6368 0
13680 -6248 -6341 -6370 0
13680 -6248 -6339 -6372 0
13680 -6248 -6337 -6374 0
13680 -6248 -6335 -6376 0
13680 -6248 -6333 -6378 0
13680 -6248 -6331 -6380 0
13680 -6248 -6329 -6382 0
13680 -6248 -6327 -6384 0
13680 -6248 -6325 -6386 0
13680 -6248 -6323 -6388 0
13680 -6248 -6321 -6390 0
13680 -6248 -6319 -6392 0
13680 -6248 -6317 -6394 0
13680 -6248 -6315 -6396 0
13680 -6248 -6313 -6398 0
13680 -6248 -6312 -6400 0
13680 -6246 -6355 -6359 0
13680 -6246 -6353 -6360 0
13680 -6246 -6351 -6362 0
13680 -6246 -6349 -6364 0
13680 -6246 -6347 -6366 0
13680 -6246 -6345 -6368 0
13680 -6246 -6343 -6370 0
13680 -6246 -6341 -6372 0
13680 -6246 -6339 -6374 0
13680 -6246 -6337 -6376 0
13680 -6246 -6335 -6378 0
13680 -6246 -6333 -6380 0
13680 -6246 -6331 -6382 0
13680 -6246 -6329 -6384 0
13680 -6246 -6327 -6386 0
13680 -6246 -6325 -6388 0
13680 -6246 -6323 -6390 0
13680 -6246 -6321 -6392 0
13680 -6246 -6319 -6394 0
13680 -6246 -6317 -6396 0
13680 -6246 -6315 -6398 0
13680 -6246 -6313 -6400 0
13680 -6246 -6312 -6402 0
13680 -6244 -6357 -6359 0
13680 -6244 -6355 -6360 0
13680 -6244 -6353 -6362 0
13680 -6244 -6351 -6364 0
13680 -6244 -6349 -6366 0
13680 -6244 -6347 -6368 0
13680 -6244 -6345 -6370 0
13680 -6244 -6343 -6372 0
13680 -6244 -6341 -6374 0
13680 -6244 -6339 -6376 0
13680 -6244 -6337 -6378 0
13680 -6244 -6335 -6380 0
13680 -6244 -6333 -6382 0
13680 -6244 -6331 -6384 0
13680 -6244 -6329 -6386 0
13680 -6244 -6327 -6388 0
13680 -6244 -6325 -6390 0
13680 -6244 -6323 -6392 0
13680 -6244 -6321 -6394 0
13680 -6244 -6319 -6396 0
13680 -6244 -6317 -6398 0
13680 -6244 -6315 -6400 0
13680 -6244 -6313 -6402 0
13680 -6244 -6312 -6404 0
13680 -6242 -6359 0
13680 -6242 -6357 -6360 0
13680 -6242 -6355 -6362 0
13680 -6242 -6353 -6364 0
13680 -6242 -6351 -6366 0
13680 -6242 -6349 -6368 0
13680 -6242 -6347 -6370 0
13680 -6242 -6345 -6372 0
13680 -6242 -6343 -6374 0
13680 -6242 -6341 -6376 0
13680 -6242 -6339 -6378 0
13680 -6242 -6337 -6380 0
13680 -6242 -6335 -6382 0
13680 -6242 -6333 -6384 0
13680 -6242 -6331 -6386 0
13680 -6242 -6329 -6388 0
13680 -6242 -6327 -6390 0
13680 -6242 -6325 -6392 0
13680 -6242 -6323 -6394 0
13680 -6242 -6321 -6396 0
13680 -6242 -6319 -6398 0
13680 -6242 -6317 -6400 0
13680 -6242 -6315 -6402 0
13680 -6242 -6313 -6404 0
13680 -6242 -6312 -6406 0
13680 -6240 -6360 0
13680 -6240 -6357 -6362 0
13680 -6240 -6355 -6364 0
13680 -6240 -6353 -6366 0
13680 -6240 -6351 -6368 0
13680 -6240 -6349 -6370 0
13680 -6240 -6347 -6372 0
13680 -6240 -6345 -6374 0
13680 -6240 -6343 -6376 0
13680 -6240 -6341 -6378 0
13680 -6240 -6339 -6380 0
13680 -6240 -6337 -6382 0
13680 -6240 -6335 -6384 0
13680 -6240 -6333 -6386 0
13680 -6240 -6331 -6388 0
13680 -6240 -6329 -6390 0
13680 -6240 -6327 -6392 0
13680 -6240 -6325 -6394 0
13680 -6240 -6323 -6396 0
13680 -6240 -6321 -6398 0
13680 -6240 -6319 -6400 0
13680 -6240 -6317 -6402 0
13680 -6240 -6315 -6404 0
13680 -6240 -6313 -6406 0
13680 -6240 -6312 -6408 0
13680 -6238 -6362 0
13680 -6238 -6357 -6364 0
13680 -6238 -6355 -6366 0
13680 -6238 -6353 -6368 0
13680 -6238 -6351 -6370 0
13680 -6238 -6349 -6372 0
13680 -6238 -6347 -6374 0
13680 -6238 -6345 -6376 0
13680 -6238 -6343 -6378 0
13680 -6238 -6341 -6380 0
13680 -6238 -6339 -6382 0
13680 -6238 -6337 -6384 0
13680 -6238 -6335 -6386 0
13680 -6238 -6333 -6388 0
13680 -6238 -6331 -6390 0
13680 -6238 -6329 -6392 0
13680 -6238 -6327 -6394 0
13680 -6238 -6325 -6396 0
13680 -6238 -6323 -6398 0
13680 -6238 -6321 -6400 0
13680 -6238 -6319 -6402 0
13680 -6238 -6317 -6404 0
13680 -6238 -6315 -6406 0
13680 -6238 -6313 -6408 0
13680 -6238 -6312 -6410 0
13680 -6236 -6364 0
13680 -6236 -6357 -6366 0
13680 -6236 -6355 -6368 0
13680 -6236 -6353 -6370 0
13680 -6236 -6351 -6372 0
13680 -6236 -6349 -6374 0
13680 -6236 -6347 -6376 0
13680 -6236 -6345 -6378 0
13680 -6236 -6343 -6380 0
13680 -6236 -6341 -6382 0
13680 -6236 -6339 -6384 0
13680 -6236 -6337 -6386 0
13680 -6236 -6335 -6388 0
13680 -6236 -6333 -6390 0
13680 -6236 -6331 -6392 0
13680 -6236 -6329 -6394 0
13680 -6236 -6327 -6396 0
13680 -6236 -6325 -6398 0
13680 -6236 -6323 -6400 0
13680 -6236 -6321 -6402 0
13680 -6236 -6319 -6404 0
13680 -6236 -6317 -6406 0
13680 -6236 -6315 -6408 0
13680 -6236 -6313 -6410 0
13680 -6236 -6312 -6412 0
13680 -6234 -6366 0
13680 -6234 -6357 -6368 0
13680 -6234 -6355 -6370 0
13680 -6234 -6353 -6372 0
13680 -6234 -6351 -6374 0
13680 -6234 -6349 -6376 0
13680 -6234 -6347 -6378 0
13680 -6234 -6345 -6380 0
13680 -6234 -6343 -6382 0
13680 -6234 -6341 -6384 0
13680 -6234 -6339 -6386 0
13680 -6234 -6337 -6388 0
13680 -6234 -6335 -6390 0
13680 -6234 -6333 -6392 0
13680 -6234 -6331 -6394 0
13680 -6234 -6329 -6396 0
13680 -6234 -6327 -6398 0
13680 -6234 -6325 -6400 0
13680 -6234 -6323 -6402 0
13680 -6234 -6321 -6404 0
13680 -6234 -6319 -6406 0
13680 -6234 -6317 -6408 0
13680 -6234 -6315 -6410 0
13680 -6234 -6313 -6412 0
13680 -6234 -6312 -6414 0
13680 -6232 -6368 0
13680 -6232 -6357 -6370 0
13680 -6232 -6355 -6372 0
13680 -6232 -6353 -6374 0
13680 -6232 -6351 -6376 0
13680 -6232 -6349 -6378 0
13680 -6232 -6347 -6380 0
13680 -6232 -6345 -6382 0
13680 -6232 -6343 -6384 0
13680 -6232 -6341 -6386 0
13680 -6232 -6339 -6388 0
13680 -6232 -6337 -6390 0
13680 -6232 -6335 -6392 0
13680 -6232 -6333 -6394 0
13680 -6232 -6331 -6396 0
13680 -6232 -6329 -6398 0
13680 -6232 -6327 -6400 0
13680 -6232 -6325 -6402 0
13680 -6232 -6323 -6404 0
13680 -6232 -6321 -6406 0
13680 -6232 -6319 -6408 0
13680 -6232 -6317 -6410 0
13680 -6232 -6315 -6412 0
13680 -6232 -6313 -6414 0
13680 -6232 -6312 -6416 0
13680 -6230 -6370 0
13680 -6230 -6357 -6372 0
13680 -6230 -6355 -6374 0
13680 -6230 -6353 -6376 0
13680 -6230 -6351 -6378 0
13680 -6230 -6349 -6380 0
13680 -6230 -6347 -6382 0
13680 -6230 -6345 -6384 0
13680 -6230 -6343 -6386 0
13680 -6230 -6341 -6388 0
13680 -6230 -6339 -6390 0
13680 -6230 -6337 -6392 0
13680 -6230 -6335 -6394 0
13680 -6230 -6333 -6396 0
13680 -6230 -6331 -6398 0
13680 -6230 -6329 -6400 0
13680 -6230 -6327 -6402 0
13680 -6230 -6325 -6404 0
13680 -6230 -6323 -6406 0
13680 -6230 -6321 -6408 0
13680 -6230 -6319 -6410 0
13680 -6230 -6317 -6412 0
13680 -6230 -6315 -6414 0
13680 -6230 -6313 -6416 0
13680 -6230 -6312 -6418 0
13680 -6228 -6372 0
13680 -6228 -6357 -6374 0
13680 -6228 -6355 -6376 0
13680 -6228 -6353 -6378 0
13680 -6228 -6351 -6380 0
13680 -6228 -6349 -6382 0
13680 -6228 -6347 -6384 0
13680 -6228 -6345 -6386 0
13680 -6228 -6343 -6388 0
13680 -6228 -6341 -6390 0
13680 -6228 -6339 -6392 0
13680 -6228 -6337 -6394 0
13680 -6228 -6335 -6396 0
13680 -6228 -6333 -6398 0
13680 -6228 -6331 -6400 0
13680 -6228 -6329 -6402 0
13680 -6228 -6327 -6404 0
13680 -6228 -6325 -6406 0
13680 -6228 -6323 -6408 0
13680 -6228 -6321 -6410 0
13680 -6228 -6319 -6412 0
13680 -6228 -6317 -6414 0
13680 -6228 -6315 -6416 0
13680 -6228 -6313 -6418 0
13680 -6228 -6312 -6420 0
13680 -6226 -6374 0
13680 -6226 -6357 -6376 0
13680 -6226 -6355 -6378 0
13680 -6226 -6353 -6380 0
13680 -6226 -6351 -6382 0
13680 -6226 -6349 -6384 0
13680 -6226 -6347 -6386 0
13680 -6226 -6345 -6388 0
13680 -6226 -6343 -6390 0
13680 -6226 -6341 -6392 0
13680 -6226 -6339 -6394 0
13680 -6226 -6337 -6396 0
13680 -6226 -6335 -6398 0
13680 -6226 -6333 -6400 0
13680 -6226 -6331 -6402 0
13680 -6226 -6329 -6404 0
13680 -6226 -6327 -6406 0
13680 -6226 -6325 -6408 0
13680 -6226 -6323 -6410 0
13680 -6226 -6321 -6412 0
13680 -6226 -6319 -6414 0
13680 -6226 -6317 -6416 0
13680 -6226 -6315 -6418 0
13680 -6226 -6313 -6420 0
13680 -6226 -6312 0
13680 -6224 -6376 0
13680 -6224 -6357 -6378 0
13680 -6224 -6355 -6380 0
13680 -6224 -6353 -6382 0
13680 -6224 -6351 -6384 0
13680 -6224 -6349 -6386 0
13680 -6224 -6347 -6388 0
13680 -6224 -6345 -6390 0
13680 -6224 -6343 -6392 0
13680 -6224 -6341 -6394 0
13680 -6224 -6339 -6396 0
13680 -6224 -6337 -6398 0
13680 -6224 -6335 -6400 0
13680 -6224 -6333 -6402 0
13680 -6224 -6331 -6404 0
13680 -6224 -6329 -6406 0
13680 -6224 -6327 -6408 0
13680 -6224 -6325 -6410 0
13680 -6224 -6323 -6412 0
13680 -6224 -6321 -6414 0
13680 -6224 -6319 -6416 0
13680 -6224 -6317 -6418 0
13680 -6224 -6315 -6420 0
13680 -6224 -6313 0
13680 -6224 -6312 0
13680 -6222 -6378 0
13680 -6222 -6357 -6380 0
13680 -6222 -6355 -6382 0
13680 -6222 -6353 -6384 0
13680 -6222 -6351 -6386 0
13680 -6222 -6349 -6388 0
13680 -6222 -6347 -6390 0
13680 -6222 -6345 -6392 0
13680 -6222 -6343 -6394 0
13680 -6222 -6341 -6396 0
13680 -6222 -6339 -6398 0
13680 -6222 -6337 -6400 0
13680 -6222 -6335 -6402 0
13680 -6222 -6333 -6404 0
13680 -6222 -6331 -6406 0
13680 -6222 -6329 -6408 0
13680 -6222 -6327 -6410 0
13680 -6222 -6325 -6412 0
13680 -6222 -6323 -6414 0
13680 -6222 -6321 -6416 0
13680 -6222 -6319 -6418 0
13680 -6222 -6317 -6420 0
13680 -6222 -6315 0
13680 -6222 -6313 0
13680 -6222 -6312 0
13680 -6220 -6380 0
13680 -6220 -6357 -6382 0
13680 -6220 -6355 -6384 0
13680 -6220 -6353 -6386 0
13680 -6220 -6351 -6388 0
13680 -6220 -6349 -6390 0
13680 -6220 -6347 -6392 0
13680 -6220 -6345 -6394 0
13680 -6220 -6343 -6396 0
13680 -6220 -6341 -6398 0
13680 -6220 -6339 -6400 0
13680 -6220 -6337 -6402 0
13680 -6220 -6335 -6404 0
13680 -6220 -6333 -6406 0
13680 -6220 -6331 -6408 0
13680 -6220 -6329 -6410 0
13680 -6220 -6327 -6412 0
13680 -6220 -6325 -6414 0
13680 -6220 -6323 -6416 0
13680 -6220 -6321 -6418 0
13680 -6220 -6319 -6420 0
13680 -6220 -6317 0
13680 -6220 -6315 0
13680 -6220 -6313 0
13680 -6220 -6312 0
13680 -6219 -6382 0
13680 -6219 -6357 -6384 0
13680 -6219 -6355 -6386 0
13680 -6219 -6353 -6388 0
13680 -6219 -6351 -6390 0
13680 -6219 -6349 -6392 0
13680 -6219 -6347 -6394 0
13680 -6219 -6345 -6396 0
13680 -6219 -6343 -6398 0
13680 -6219 -6341 -6400 0
13680 -6219 -6339 -6402 0
13680 -6219 -6337 -6404 0
13680 -6219 -6335 -6406 0
13680 -6219 -6333 -6408 0
13680 -6219 -6331 -6410 0
13680 -6219 -6329 -6412 0
13680 -6219 -6327 -6414 0
13680 -6219 -6325 -6416 0
13680 -6219 -6323 -6418 0
13680 -6219 -6321 -6420 0
13680 -6219 -6319 0
13680 -6219 -6317 0
13680 -6219 -6315 0
13680 -6219 -6313 0
13680 -6219 -6312 0
c ((36<=(aux576 + aux579 + aux580))=tv=SATLiteral(13681))
-13681 -6349 -6359 0
-13681 -6347 -6360 0
-13681 -6345 -6362 0
-13681 -6343 -6364 0
-13681 -6341 -6366 0
-13681 -6339 -6368 0
-13681 -6337 -6370 0
-13681 -6335 -6372 0
-13681 -6333 -6374 0
-13681 -6331 -6376 0
-13681 -6329 -6378 0
-13681 -6327 -6380 0
-13681 -6325 -6382 0
-13681 -6323 -6384 0
-13681 -6321 -6386 0
-13681 -6319 -6388 0
-13681 -6317 -6390 0
-13681 -6315 -6392 0
-13681 -6313 -6394 0
-13681 -6312 -6396 0
-13681 -6248 -6351 -6359 0
-13681 -6248 -6349 -6360 0
-13681 -6248 -6347 -6362 0
-13681 -6248 -6345 -6364 0
-13681 -6248 -6343 -6366 0
-13681 -6248 -6341 -6368 0
-13681 -6248 -6339 -6370 0
-13681 -6248 -6337 -6372 0
-13681 -6248 -6335 -6374 0
-13681 -6248 -6333 -6376 0
-13681 -6248 -6331 -6378 0
-13681 -6248 -6329 -6380 0
-13681 -6248 -6327 -6382 0
-13681 -6248 -6325 -6384 0
-13681 -6248 -6323 -6386 0
-13681 -6248 -6321 -6388 0
-13681 -6248 -6319 -6390 0
-13681 -6248 -6317 -6392 0
-13681 -6248 -6315 -6394 0
-13681 -6248 -6313 -6396 0
-13681 -6248 -6312 -6398 0
-13681 -6246 -6353 -6359 0
-13681 -6246 -6351 -6360 0
-13681 -6246 -6349 -6362 0
-13681 -6246 -6347 -6364 0
-13681 -6246 -6345 -6366 0
-13681 -6246 -6343 -6368 0
-13681 -6246 -6341 -6370 0
-13681 -6246 -6339 -6372 0
-13681 -6246 -6337 -6374 0
-13681 -6246 -6335 -6376 0
-13681 -6246 -6333 -6378 0
-13681 -6246 -6331 -6380 0
-13681 -6246 -6329 -6382 0
-13681 -6246 -6327 -6384 0
-13681 -6246 -6325 -6386 0
-13681 -6246 -6323 -6388 0
-13681 -6246 -6321 -6390 0
-13681 -6246 -6319 -6392 0
-13681 -6246 -6317 -6394 0
-13681 -6246 -6315 -6396 0
-13681 -6246 -6313 -6398 0
-13681 -6246 -6312 -6400 0
-13681 -6244 -6355 -6359 0
-13681 -6244 -6353 -6360 0
-13681 -6244 -6351 -6362 0
-13681 -6244 -6349 -6364 0
-13681 -6244 -6347 -6366 0
-13681 -6244 -6345 -6368 0
-13681 -6244 -6343 -6370 0
-13681 -6244 -6341 -6372 0
-13681 -6244 -6339 -6374 0
-13681 -6244 -6337 -6376 0
-13681 -6244 -6335 -6378 0
-13681 -6244 -6333 -6380 0
-13681 -6244 -6331 -6382 0
-13681 -6244 -6329 -6384 0
-13681 -6244 -6327 -6386 0
-13681 -6244 -6325 -6388 0
-13681 -6244 -6323 -6390 0
-13681 -6244 -6321 -6392 0
-13681 -6244 -6319 -6394 0
-13681 -6244 -6317 -6396 0
-13681 -6244 -6315 -6398 0
-13681 -6244 -6313 -6400 0
-13681 -6244 -6312 -6402 0
-13681 -6242 -6357 -6359 0
-13681 -6242 -6355 -6360 0
-13681 -6242 -6353 -6362 0
-13681 -6242 -6351 -6364 0
-13681 -6242 -6349 -6366 0
-13681 -6242 -6347 -6368 0
-13681 -6242 -6345 -6370 0
-13681 -6242 -6343 -6372 0
-13681 -6242 -6341 -6374 0
-13681 -6242 -6339 -6376 0
-13681 -6242 -6337 -6378 0
-13681 -6242 -6335 -6380 0
-13681 -6242 -6333 -6382 0
-13681 -6242 -6331 -6384 0
-13681 -6242 -6329 -6386 0
-13681 -6242 -6327 -6388 0
-13681 -6242 -6325 -6390 0
-13681 -6242 -6323 -6392 0
-13681 -6242 -6321 -6394 0
-13681 -6242 -6319 -6396 0
-13681 -6242 -6317 -6398 0
-13681 -6242 -6315 -6400 0
-13681 -6242 -6313 -6402 0
-13681 -6242 -6312 -6404 0
-13681 -6240 -6359 0
-13681 -6240 -6357 -6360 0
-13681 -6240 -6355 -6362 0
-13681 -6240 -6353 -6364 0
-13681 -6240 -6351 -6366 0
-13681 -6240 -6349 -6368 0
-13681 -6240 -6347 -6370 0
-13681 -6240 -6345 -6372 0
-13681 -6240 -6343 -6374 0
-13681 -6240 -6341 -6376 0
-13681 -6240 -6339 -6378 0
-13681 -6240 -6337 -6380 0
-13681 -6240 -6335 -6382 0
-13681 -6240 -6333 -6384 0
-13681 -6240 -6331 -6386 0
-13681 -6240 -6329 -6388 0
-13681 -6240 -6327 -6390 0
-13681 -6240 -6325 -6392 0
-13681 -6240 -6323 -6394 0
-13681 -6240 -6321 -6396 0
-13681 -6240 -6319 -6398 0
-13681 -6240 -6317 -6400 0
-13681 -6240 -6315 -6402 0
-13681 -6240 -6313 -6404 0
-13681 -6240 -6312 -6406 0
-13681 -6238 -6360 0
-13681 -6238 -6357 -6362 0
-13681 -6238 -6355 -6364 0
-13681 -6238 -6353 -6366 0
-13681 -6238 -6351 -6368 0
-13681 -6238 -6349 -6370 0
-13681 -6238 -6347 -6372 0
-13681 -6238 -6345 -6374 0
-13681 -6238 -6343 -6376 0
-13681 -6238 -6341 -6378 0
-13681 -6238 -6339 -6380 0
-13681 -6238 -6337 -6382 0
-13681 -6238 -6335 -6384 0
-13681 -6238 -6333 -6386 0
-13681 -6238 -6331 -6388 0
-13681 -6238 -6329 -6390 0
-13681 -6238 -6327 -6392 0
-13681 -6238 -6325 -6394 0
-13681 -6238 -6323 -6396 0
-13681 -6238 -6321 -6398 0
-13681 -6238 -6319 -6400 0
-13681 -6238 -6317 -6402 0
-13681 -6238 -6315 -6404 0
-13681 -6238 -6313 -6406 0
-13681 -6238 -6312 -6408 0
-13681 -6236 -6362 0
-13681 -6236 -6357 -6364 0
-13681 -6236 -6355 -6366 0
-13681 -6236 -6353 -6368 0
-13681 -6236 -6351 -6370 0
-13681 -6236 -6349 -6372 0
-13681 -6236 -6347 -6374 0
-13681 -6236 -6345 -6376 0
-13681 -6236 -6343 -6378 0
-13681 -6236 -6341 -6380 0
-13681 -6236 -6339 -6382 0
-13681 -6236 -6337 -6384 0
-13681 -6236 -6335 -6386 0
-13681 -6236 -6333 -6388 0
-13681 -6236 -6331 -6390 0
-13681 -6236 -6329 -6392 0
-13681 -6236 -6327 -6394 0
-13681 -6236 -6325 -6396 0
-13681 -6236 -6323 -6398 0
-13681 -6236 -6321 -6400 0
-13681 -6236 -6319 -6402 0
-13681 -6236 -6317 -6404 0
-13681 -6236 -6315 -6406 0
-13681 -6236 -6313 -6408 0
-13681 -6236 -6312 -6410 0
-13681 -6234 -6364 0
-13681 -6234 -6357 -6366 0
-13681 -6234 -6355 -6368 0
-13681 -6234 -6353 -6370 0
-13681 -6234 -6351 -6372 0
-13681 -6234 -6349 -6374 0
-13681 -6234 -6347 -6376 0
-13681 -6234 -6345 -6378 0
-13681 -6234 -6343 -6380 0
-13681 -6234 -6341 -6382 0
-13681 -6234 -6339 -6384 0
-13681 -6234 -6337 -6386 0
-13681 -6234 -6335 -6388 0
-13681 -6234 -6333 -6390 0
-13681 -6234 -6331 -6392 0
-13681 -6234 -6329 -6394 0
-13681 -6234 -6327 -6396 0
-13681 -6234 -6325 -6398 0
-13681 -6234 -6323 -6400 0
-13681 -6234 -6321 -6402 0
-13681 -6234 -6319 -6404 0
-13681 -6234 -6317 -6406 0
-13681 -6234 -6315 -6408 0
-13681 -6234 -6313 -6410 0
-13681 -6234 -6312 -6412 0
-13681 -6232 -6366 0
-13681 -6232 -6357 -6368 0
-13681 -6232 -6355 -6370 0
-13681 -6232 -6353 -6372 0
-13681 -6232 -6351 -6374 0
-13681 -6232 -6349 -6376 0
-13681 -6232 -6347 -6378 0
-13681 -6232 -6345 -6380 0
-13681 -6232 -6343 -6382 0
-13681 -6232 -6341 -6384 0
-13681 -6232 -6339 -6386 0
-13681 -6232 -6337 -6388 0
-13681 -6232 -6335 -6390 0
-13681 -6232 -6333 -6392 0
-13681 -6232 -6331 -6394 0
-13681 -6232 -6329 -6396 0
-13681 -6232 -6327 -6398 0
-13681 -6232 -6325 -6400 0
-13681 -6232 -6323 -6402 0
-13681 -6232 -6321 -6404 0
-13681 -6232 -6319 -6406 0
-13681 -6232 -6317 -6408 0
-13681 -6232 -6315 -6410 0
-13681 -6232 -6313 -6412 0
-13681 -6232 -6312 -6414 0
-13681 -6230 -6368 0
-13681 -6230 -6357 -6370 0
-13681 -6230 -6355 -6372 0
-13681 -6230 -6353 -6374 0
-13681 -6230 -6351 -6376 0
-13681 -6230 -6349 -6378 0
-13681 -6230 -6347 -6380 0
-13681 -6230 -6345 -6382 0
-13681 -6230 -6343 -6384 0
-13681 -6230 -6341 -6386 0
-13681 -6230 -6339 -6388 0
-13681 -6230 -6337 -6390 0
-13681 -6230 -6335 -6392 0
-13681 -6230 -6333 -6394 0
-13681 -6230 -6331 -6396 0
-13681 -6230 -6329 -6398 0
-13681 -6230 -6327 -6400 0
-13681 -6230 -6325 -6402 0
-13681 -6230 -6323 -6404 0
-13681 -6230 -6321 -6406 0
-13681 -6230 -6319 -6408 0
-13681 -6230 -6317 -6410 0
-13681 -6230 -6315 -6412 0
-13681 -6230 -6313 -6414 0
-13681 -6230 -6312 -6416 0
-13681 -6228 -6370 0
-13681 -6228 -6357 -6372 0
-13681 -6228 -6355 -6374 0
-13681 -6228 -6353 -6376 0
-13681 -6228 -6351 -6378 0
-13681 -6228 -6349 -6380 0
-13681 -6228 -6347 -6382 0
-13681 -6228 -6345 -6384 0
-13681 -6228 -6343 -6386 0
-13681 -6228 -6341 -6388 0
-13681 -6228 -6339 -6390 0
-13681 -6228 -6337 -6392 0
-13681 -6228 -6335 -6394 0
-13681 -6228 -6333 -6396 0
-13681 -6228 -6331 -6398 0
-13681 -6228 -6329 -6400 0
-13681 -6228 -6327 -6402 0
-13681 -6228 -6325 -6404 0
-13681 -6228 -6323 -6406 0
-13681 -6228 -6321 -6408 0
-13681 -6228 -6319 -6410 0
-13681 -6228 -6317 -6412 0
-13681 -6228 -6315 -6414 0
-13681 -6228 -6313 -6416 0
-13681 -6228 -6312 -6418 0
-13681 -6226 -6372 0
-13681 -6226 -6357 -6374 0
-13681 -6226 -6355 -6376 0
-13681 -6226 -6353 -6378 0
-13681 -6226 -6351 -6380 0
-13681 -6226 -6349 -6382 0
-13681 -6226 -6347 -6384 0
-13681 -6226 -6345 -6386 0
-13681 -6226 -6343 -6388 0
-13681 -6226 -6341 -6390 0
-13681 -6226 -6339 -6392 0
-13681 -6226 -6337 -6394 0
-13681 -6226 -6335 -6396 0
-13681 -6226 -6333 -6398 0
-13681 -6226 -6331 -6400 0
-13681 -6226 -6329 -6402 0
-13681 -6226 -6327 -6404 0
-13681 -6226 -6325 -6406 0
-13681 -6226 -6323 -6408 0
-13681 -6226 -6321 -6410 0
-13681 -6226 -6319 -6412 0
-13681 -6226 -6317 -6414 0
-13681 -6226 -6315 -6416 0
-13681 -6226 -6313 -6418 0
-13681 -6226 -6312 -6420 0
-13681 -6224 -6374 0
-13681 -6224 -6357 -6376 0
-13681 -6224 -6355 -6378 0
-13681 -6224 -6353 -6380 0
-13681 -6224 -6351 -6382 0
-13681 -6224 -6349 -6384 0
-13681 -6224 -6347 -6386 0
-13681 -6224 -6345 -6388 0
-13681 -6224 -6343 -6390 0
-13681 -6224 -6341 -6392 0
-13681 -6224 -6339 -6394 0
-13681 -6224 -6337 -6396 0
-13681 -6224 -6335 -6398 0
-13681 -6224 -6333 -6400 0
-13681 -6224 -6331 -6402 0
-13681 -6224 -6329 -6404 0
-13681 -6224 -6327 -6406 0
-13681 -6224 -6325 -6408 0
-13681 -6224 -6323 -6410 0
-13681 -6224 -6321 -6412 0
-13681 -6224 -6319 -6414 0
-13681 -6224 -6317 -6416 0
-13681 -6224 -6315 -6418 0
-13681 -6224 -6313 -6420 0
-13681 -6224 -6312 0
-13681 -6222 -6376 0
-13681 -6222 -6357 -6378 0
-13681 -6222 -6355 -6380 0
-13681 -6222 -6353 -6382 0
-13681 -6222 -6351 -6384 0
-13681 -6222 -6349 -6386 0
-13681 -6222 -6347 -6388 0
-13681 -6222 -6345 -6390 0
-13681 -6222 -6343 -6392 0
-13681 -6222 -6341 -6394 0
-13681 -6222 -6339 -6396 0
-13681 -6222 -6337 -6398 0
-13681 -6222 -6335 -6400 0
-13681 -6222 -6333 -6402 0
-13681 -6222 -6331 -6404 0
-13681 -6222 -6329 -6406 0
-13681 -6222 -6327 -6408 0
-13681 -6222 -6325 -6410 0
-13681 -6222 -6323 -6412 0
-13681 -6222 -6321 -6414 0
-13681 -6222 -6319 -6416 0
-13681 -6222 -6317 -6418 0
-13681 -6222 -6315 -6420 0
-13681 -6222 -6313 0
-13681 -6222 -6312 0
-13681 -6220 -6378 0
-13681 -6220 -6357 -6380 0
-13681 -6220 -6355 -6382 0
-13681 -6220 -6353 -6384 0
-13681 -6220 -6351 -6386 0
-13681 -6220 -6349 -6388 0
-13681 -6220 -6347 -6390 0
-13681 -6220 -6345 -6392 0
-13681 -6220 -6343 -6394 0
-13681 -6220 -6341 -6396 0
-13681 -6220 -6339 -6398 0
-13681 -6220 -6337 -6400 0
-13681 -6220 -6335 -6402 0
-13681 -6220 -6333 -6404 0
-13681 -6220 -6331 -6406 0
-13681 -6220 -6329 -6408 0
-13681 -6220 -6327 -6410 0
-13681 -6220 -6325 -6412 0
-13681 -6220 -6323 -6414 0
-13681 -6220 -6321 -6416 0
-13681 -6220 -6319 -6418 0
-13681 -6220 -6317 -6420 0
-13681 -6220 -6315 0
-13681 -6220 -6313 0
-13681 -6220 -6312 0
-13681 -6219 -6380 0
-13681 -6219 -6357 -6382 0
-13681 -6219 -6355 -6384 0
-13681 -6219 -6353 -6386 0
-13681 -6219 -6351 -6388 0
-13681 -6219 -6349 -6390 0
-13681 -6219 -6347 -6392 0
-13681 -6219 -6345 -6394 0
-13681 -6219 -6343 -6396 0
-13681 -6219 -6341 -6398 0
-13681 -6219 -6339 -6400 0
-13681 -6219 -6337 -6402 0
-13681 -6219 -6335 -6404 0
-13681 -6219 -6333 -6406 0
-13681 -6219 -6331 -6408 0
-13681 -6219 -6329 -6410 0
-13681 -6219 -6327 -6412 0
-13681 -6219 -6325 -6414 0
-13681 -6219 -6323 -6416 0
-13681 -6219 -6321 -6418 0
-13681 -6219 -6319 -6420 0
-13681 -6219 -6317 0
-13681 -6219 -6315 0
-13681 -6219 -6313 0
-13681 -6219 -6312 0
13681 6317 6420 0
13681 6319 6418 0
13681 6321 6416 0
13681 6323 6414 0
13681 6325 6412 0
13681 6327 6410 0
13681 6329 6408 0
13681 6331 6406 0
13681 6333 6404 0
13681 6335 6402 0
13681 6337 6400 0
13681 6339 6398 0
13681 6341 6396 0
13681 6343 6394 0
13681 6345 6392 0
13681 6347 6390 0
13681 6349 6388 0
13681 6351 6386 0
13681 6353 6384 0
13681 6355 6382 0
13681 6357 6380 0
13681 6219 6315 6420 0
13681 6219 6317 6418 0
13681 6219 6319 6416 0
13681 6219 6321 6414 0
13681 6219 6323 6412 0
13681 6219 6325 6410 0
13681 6219 6327 6408 0
13681 6219 6329 6406 0
13681 6219 6331 6404 0
13681 6219 6333 6402 0
13681 6219 6335 6400 0
13681 6219 6337 6398 0
13681 6219 6339 6396 0
13681 6219 6341 6394 0
13681 6219 6343 6392 0
13681 6219 6345 6390 0
13681 6219 6347 6388 0
13681 6219 6349 6386 0
13681 6219 6351 6384 0
13681 6219 6353 6382 0
13681 6219 6355 6380 0
13681 6219 6357 6378 0
13681 6220 6313 6420 0
13681 6220 6315 6418 0
13681 6220 6317 6416 0
13681 6220 6319 6414 0
13681 6220 6321 6412 0
13681 6220 6323 6410 0
13681 6220 6325 6408 0
13681 6220 6327 6406 0
13681 6220 6329 6404 0
13681 6220 6331 6402 0
13681 6220 6333 6400 0
13681 6220 6335 6398 0
13681 6220 6337 6396 0
13681 6220 6339 6394 0
13681 6220 6341 6392 0
13681 6220 6343 6390 0
13681 6220 6345 6388 0
13681 6220 6347 6386 0
13681 6220 6349 6384 0
13681 6220 6351 6382 0
13681 6220 6353 6380 0
13681 6220 6355 6378 0
13681 6220 6357 6376 0
13681 6222 6312 6420 0
13681 6222 6313 6418 0
13681 6222 6315 6416 0
13681 6222 6317 6414 0
13681 6222 6319 6412 0
13681 6222 6321 6410 0
13681 6222 6323 6408 0
13681 6222 6325 6406 0
13681 6222 6327 6404 0
13681 6222 6329 6402 0
13681 6222 6331 6400 0
13681 6222 6333 6398 0
13681 6222 6335 6396 0
13681 6222 6337 6394 0
13681 6222 6339 6392 0
13681 6222 6341 6390 0
13681 6222 6343 6388 0
13681 6222 6345 6386 0
13681 6222 6347 6384 0
13681 6222 6349 6382 0
13681 6222 6351 6380 0
13681 6222 6353 6378 0
13681 6222 6355 6376 0
13681 6222 6357 6374 0
13681 6224 6420 0
13681 6224 6312 6418 0
13681 6224 6313 6416 0
13681 6224 6315 6414 0
13681 6224 6317 6412 0
13681 6224 6319 6410 0
13681 6224 6321 6408 0
13681 6224 6323 6406 0
13681 6224 6325 6404 0
13681 6224 6327 6402 0
13681 6224 6329 6400 0
13681 6224 6331 6398 0
13681 6224 6333 6396 0
13681 6224 6335 6394 0
13681 6224 6337 6392 0
13681 6224 6339 6390 0
13681 6224 6341 6388 0
13681 6224 6343 6386 0
13681 6224 6345 6384 0
13681 6224 6347 6382 0
13681 6224 6349 6380 0
13681 6224 6351 6378 0
13681 6224 6353 6376 0
13681 6224 6355 6374 0
13681 6224 6357 6372 0
13681 6226 6418 0
13681 6226 6312 6416 0
13681 6226 6313 6414 0
13681 6226 6315 6412 0
13681 6226 6317 6410 0
13681 6226 6319 6408 0
13681 6226 6321 6406 0
13681 6226 6323 6404 0
13681 6226 6325 6402 0
13681 6226 6327 6400 0
13681 6226 6329 6398 0
13681 6226 6331 6396 0
13681 6226 6333 6394 0
13681 6226 6335 6392 0
13681 6226 6337 6390 0
13681 6226 6339 6388 0
13681 6226 6341 6386 0
13681 6226 6343 6384 0
13681 6226 6345 6382 0
13681 6226 6347 6380 0
13681 6226 6349 6378 0
13681 6226 6351 6376 0
13681 6226 6353 6374 0
13681 6226 6355 6372 0
13681 6226 6357 6370 0
13681 6228 6416 0
13681 6228 6312 6414 0
13681 6228 6313 6412 0
13681 6228 6315 6410 0
13681 6228 6317 6408 0
13681 6228 6319 6406 0
13681 6228 6321 6404 0
13681 6228 6323 6402 0
13681 6228 6325 6400 0
13681 6228 6327 6398 0
13681 6228 6329 6396 0
13681 6228 6331 6394 0
13681 6228 6333 6392 0
13681 6228 6335 6390 0
13681 6228 6337 6388 0
13681 6228 6339 6386 0
13681 6228 6341 6384 0
13681 6228 6343 6382 0
13681 6228 6345 6380 0
13681 6228 6347 6378 0
13681 6228 6349 6376 0
13681 6228 6351 6374 0
13681 6228 6353 6372 0
13681 6228 6355 6370 0
13681 6228 6357 6368 0
13681 6230 6414 0
13681 6230 6312 6412 0
13681 6230 6313 6410 0
13681 6230 6315 6408 0
13681 6230 6317 6406 0
13681 6230 6319 6404 0
13681 6230 6321 6402 0
13681 6230 6323 6400 0
13681 6230 6325 6398 0
13681 6230 6327 6396 0
13681 6230 6329 6394 0
13681 6230 6331 6392 0
13681 6230 6333 6390 0
13681 6230 6335 6388 0
13681 6230 6337 6386 0
13681 6230 6339 6384 0
13681 6230 6341 6382 0
13681 6230 6343 6380 0
13681 6230 6345 6378 0
13681 6230 6347 6376 0
13681 6230 6349 6374 0
13681 6230 6351 6372 0
13681 6230 6353 6370 0
13681 6230 6355 6368 0
13681 6230 6357 6366 0
13681 6232 6412 0
13681 6232 6312 6410 0
13681 6232 6313 6408 0
13681 6232 6315 6406 0
13681 6232 6317 6404 0
13681 6232 6319 6402 0
13681 6232 6321 6400 0
13681 6232 6323 6398 0
13681 6232 6325 6396 0
13681 6232 6327 6394 0
13681 6232 6329 6392 0
13681 6232 6331 6390 0
13681 6232 6333 6388 0
13681 6232 6335 6386 0
13681 6232 6337 6384 0
13681 6232 6339 6382 0
13681 6232 6341 6380 0
13681 6232 6343 6378 0
13681 6232 6345 6376 0
13681 6232 6347 6374 0
13681 6232 6349 6372 0
13681 6232 6351 6370 0
13681 6232 6353 6368 0
13681 6232 6355 6366 0
13681 6232 6357 6364 0
13681 6234 6410 0
13681 6234 6312 6408 0
13681 6234 6313 6406 0
13681 6234 6315 6404 0
13681 6234 6317 6402 0
13681 6234 6319 6400 0
13681 6234 6321 6398 0
13681 6234 6323 6396 0
13681 6234 6325 6394 0
13681 6234 6327 6392 0
13681 6234 6329 6390 0
13681 6234 6331 6388 0
13681 6234 6333 6386 0
13681 6234 6335 6384 0
13681 6234 6337 6382 0
13681 6234 6339 6380 0
13681 6234 6341 6378 0
13681 6234 6343 6376 0
13681 6234 6345 6374 0
13681 6234 6347 6372 0
13681 6234 6349 6370 0
13681 6234 6351 6368 0
13681 6234 6353 6366 0
13681 6234 6355 6364 0
13681 6234 6357 6362 0
13681 6236 6408 0
13681 6236 6312 6406 0
13681 6236 6313 6404 0
13681 6236 6315 6402 0
13681 6236 6317 6400 0
13681 6236 6319 6398 0
13681 6236 6321 6396 0
13681 6236 6323 6394 0
13681 6236 6325 6392 0
13681 6236 6327 6390 0
13681 6236 6329 6388 0
13681 6236 6331 6386 0
13681 6236 6333 6384 0
13681 6236 6335 6382 0
13681 6236 6337 6380 0
13681 6236 6339 6378 0
13681 6236 6341 6376 0
13681 6236 6343 6374 0
13681 6236 6345 6372 0
13681 6236 6347 6370 0
13681 6236 6349 6368 0
13681 6236 6351 6366 0
13681 6236 6353 6364 0
13681 6236 6355 6362 0
13681 6236 6357 6360 0
13681 6238 6406 0
13681 6238 6312 6404 0
13681 6238 6313 6402 0
13681 6238 6315 6400 0
13681 6238 6317 6398 0
13681 6238 6319 6396 0
13681 6238 6321 6394 0
13681 6238 6323 6392 0
13681 6238 6325 6390 0
13681 6238 6327 6388 0
13681 6238 6329 6386 0
13681 6238 6331 6384 0
13681 6238 6333 6382 0
13681 6238 6335 6380 0
13681 6238 6337 6378 0
13681 6238 6339 6376 0
13681 6238 6341 6374 0
13681 6238 6343 6372 0
13681 6238 6345 6370 0
13681 6238 6347 6368 0
13681 6238 6349 6366 0
13681 6238 6351 6364 0
13681 6238 6353 6362 0
13681 6238 6355 6360 0
13681 6238 6357 6359 0
13681 6240 6404 0
13681 6240 6312 6402 0
13681 6240 6313 6400 0
13681 6240 6315 6398 0
13681 6240 6317 6396 0
13681 6240 6319 6394 0
13681 6240 6321 6392 0
13681 6240 6323 6390 0
13681 6240 6325 6388 0
13681 6240 6327 6386 0
13681 6240 6329 6384 0
13681 6240 6331 6382 0
13681 6240 6333 6380 0
13681 6240 6335 6378 0
13681 6240 6337 6376 0
13681 6240 6339 6374 0
13681 6240 6341 6372 0
13681 6240 6343 6370 0
13681 6240 6345 6368 0
13681 6240 6347 6366 0
13681 6240 6349 6364 0
13681 6240 6351 6362 0
13681 6240 6353 6360 0
13681 6240 6355 6359 0
13681 6240 6357 0
13681 6242 6402 0
13681 6242 6312 6400 0
13681 6242 6313 6398 0
13681 6242 6315 6396 0
13681 6242 6317 6394 0
13681 6242 6319 6392 0
13681 6242 6321 6390 0
13681 6242 6323 6388 0
13681 6242 6325 6386 0
13681 6242 6327 6384 0
13681 6242 6329 6382 0
13681 6242 6331 6380 0
13681 6242 6333 6378 0
13681 6242 6335 6376 0
13681 6242 6337 6374 0
13681 6242 6339 6372 0
13681 6242 6341 6370 0
13681 6242 6343 6368 0
13681 6242 6345 6366 0
13681 6242 6347 6364 0
13681 6242 6349 6362 0
13681 6242 6351 6360 0
13681 6242 6353 6359 0
13681 6242 6355 0
13681 6242 6357 0
13681 6244 6400 0
13681 6244 6312 6398 0
13681 6244 6313 6396 0
13681 6244 6315 6394 0
13681 6244 6317 6392 0
13681 6244 6319 6390 0
13681 6244 6321 6388 0
13681 6244 6323 6386 0
13681 6244 6325 6384 0
13681 6244 6327 6382 0
13681 6244 6329 6380 0
13681 6244 6331 6378 0
13681 6244 6333 6376 0
13681 6244 6335 6374 0
13681 6244 6337 6372 0
13681 6244 6339 6370 0
13681 6244 6341 6368 0
13681 6244 6343 6366 0
13681 6244 6345 6364 0
13681 6244 6347 6362 0
13681 6244 6349 6360 0
13681 6244 6351 6359 0
13681 6244 6353 0
13681 6244 6355 0
13681 6244 6357 0
13681 6246 6398 0
13681 6246 6312 6396 0
13681 6246 6313 6394 0
13681 6246 6315 6392 0
13681 6246 6317 6390 0
13681 6246 6319 6388 0
13681 6246 6321 6386 0
13681 6246 6323 6384 0
13681 6246 6325 6382 0
13681 6246 6327 6380 0
13681 6246 6329 6378 0
13681 6246 6331 6376 0
13681 6246 6333 6374 0
13681 6246 6335 6372 0
13681 6246 6337 6370 0
13681 6246 6339 6368 0
13681 6246 6341 6366 0
13681 6246 6343 6364 0
13681 6246 6345 6362 0
13681 6246 6347 6360 0
13681 6246 6349 6359 0
13681 6246 6351 0
13681 6246 6353 0
13681 6246 6355 0
13681 6246 6357 0
13681 6248 6396 0
13681 6248 6312 6394 0
13681 6248 6313 6392 0
13681 6248 6315 6390 0
13681 6248 6317 6388 0
13681 6248 6319 6386 0
13681 6248 6321 6384 0
13681 6248 6323 6382 0
13681 6248 6325 6380 0
13681 6248 6327 6378 0
13681 6248 6329 6376 0
13681 6248 6331 6374 0
13681 6248 6333 6372 0
13681 6248 6335 6370 0
13681 6248 6337 6368 0
13681 6248 6339 6366 0
13681 6248 6341 6364 0
13681 6248 6343 6362 0
13681 6248 6345 6360 0
13681 6248 6347 6359 0
13681 6248 6349 0
13681 6248 6351 0
13681 6248 6353 0
13681 6248 6355 0
13681 6248 6357 0
c (((aux582 + aux585 + aux586)<=36)=tv=SATLiteral(13682))
-13682 6553 6654 0
-13682 6555 6652 0
-13682 6557 6650 0
-13682 6559 6648 0
-13682 6561 6646 0
-13682 6563 6644 0
-13682 6565 6642 0
-13682 6567 6640 0
-13682 6569 6638 0
-13682 6571 6636 0
-13682 6573 6634 0
-13682 6575 6632 0
-13682 6577 6630 0
-13682 6579 6628 0
-13682 6581 6626 0
-13682 6583 6624 0
-13682 6585 6622 0
-13682 6587 6620 0
-13682 6589 6618 0
-13682 6591 6616 0
-13682 6453 6551 6654 0
-13682 6453 6553 6652 0
-13682 6453 6555 6650 0
-13682 6453 6557 6648 0
-13682 6453 6559 6646 0
-13682 6453 6561 6644 0
-13682 6453 6563 6642 0
-13682 6453 6565 6640 0
-13682 6453 6567 6638 0
-13682 6453 6569 6636 0
-13682 6453 6571 6634 0
-13682 6453 6573 6632 0
-13682 6453 6575 6630 0
-13682 6453 6577 6628 0
-13682 6453 6579 6626 0
-13682 6453 6581 6624 0
-13682 6453 6583 6622 0
-13682 6453 6585 6620 0
-13682 6453 6587 6618 0
-13682 6453 6589 6616 0
-13682 6453 6591 6614 0
-13682 6454 6549 6654 0
-13682 6454 6551 6652 0
-13682 6454 6553 6650 0
-13682 6454 6555 6648 0
-13682 6454 6557 6646 0
-13682 6454 6559 6644 0
-13682 6454 6561 6642 0
-13682 6454 6563 6640 0
-13682 6454 6565 6638 0
-13682 6454 6567 6636 0
-13682 6454 6569 6634 0
-13682 6454 6571 6632 0
-13682 6454 6573 6630 0
-13682 6454 6575 6628 0
-13682 6454 6577 6626 0
-13682 6454 6579 6624 0
-13682 6454 6581 6622 0
-13682 6454 6583 6620 0
-13682 6454 6585 6618 0
-13682 6454 6587 6616 0
-13682 6454 6589 6614 0
-13682 6454 6591 6612 0
-13682 6456 6547 6654 0
-13682 6456 6549 6652 0
-13682 6456 6551 6650 0
-13682 6456 6553 6648 0
-13682 6456 6555 6646 0
-13682 6456 6557 6644 0
-13682 6456 6559 6642 0
-13682 6456 6561 6640 0
-13682 6456 6563 6638 0
-13682 6456 6565 6636 0
-13682 6456 6567 6634 0
-13682 6456 6569 6632 0
-13682 6456 6571 6630 0
-13682 6456 6573 6628 0
-13682 6456 6575 6626 0
-13682 6456 6577 6624 0
-13682 6456 6579 6622 0
-13682 6456 6581 6620 0
-13682 6456 6583 6618 0
-13682 6456 6585 6616 0
-13682 6456 6587 6614 0
-13682 6456 6589 6612 0
-13682 6456 6591 6610 0
-13682 6458 6546 6654 0
-13682 6458 6547 6652 0
-13682 6458 6549 6650 0
-13682 6458 6551 6648 0
-13682 6458 6553 6646 0
-13682 6458 6555 6644 0
-13682 6458 6557 6642 0
-13682 6458 6559 6640 0
-13682 6458 6561 6638 0
-13682 6458 6563 6636 0
-13682 6458 6565 6634 0
-13682 6458 6567 6632 0
-13682 6458 6569 6630 0
-13682 6458 6571 6628 0
-13682 6458 6573 6626 0
-13682 6458 6575 6624 0
-13682 6458 6577 6622 0
-13682 6458 6579 6620 0
-13682 6458 6581 6618 0
-13682 6458 6583 6616 0
-13682 6458 6585 6614 0
-13682 6458 6587 6612 0
-13682 6458 6589 6610 0
-13682 6458 6591 6608 0
-13682 6460 6654 0
-13682 6460 6546 6652 0
-13682 6460 6547 6650 0
-13682 6460 6549 6648 0
-13682 6460 6551 6646 0
-13682 6460 6553 6644 0
-13682 6460 6555 6642 0
-13682 6460 6557 6640 0
-13682 6460 6559 6638 0
-13682 6460 6561 6636 0
-13682 6460 6563 6634 0
-13682 6460 6565 6632 0
-13682 6460 6567 6630 0
-13682 6460 6569 6628 0
-13682 6460 6571 6626 0
-13682 6460 6573 6624 0
-13682 6460 6575 6622 0
-13682 6460 6577 6620 0
-13682 6460 6579 6618 0
-13682 6460 6581 6616 0
-13682 6460 6583 6614 0
-13682 6460 6585 6612 0
-13682 6460 6587 6610 0
-13682 6460 6589 6608 0
-13682 6460 6591 6606 0
-13682 6462 6652 0
-13682 6462 6546 6650 0
-13682 6462 6547 6648 0
-13682 6462 6549 6646 0
-13682 6462 6551 6644 0
-13682 6462 6553 6642 0
-13682 6462 6555 6640 0
-13682 6462 6557 6638 0
-13682 6462 6559 6636 0
-13682 6462 6561 6634 0
-13682 6462 6563 6632 0
-13682 6462 6565 6630 0
-13682 6462 6567 6628 0
-13682 6462 6569 6626 0
-13682 6462 6571 6624 0
-13682 6462 6573 6622 0
-13682 6462 6575 6620 0
-13682 6462 6577 6618 0
-13682 6462 6579 6616 0
-13682 6462 6581 6614 0
-13682 6462 6583 6612 0
-13682 6462 6585 6610 0
-13682 6462 6587 6608 0
-13682 6462 6589 6606 0
-13682 6462 6591 6604 0
-13682 6464 6650 0
-13682 6464 6546 6648 0
-13682 6464 6547 6646 0
-13682 6464 6549 6644 0
-13682 6464 6551 6642 0
-13682 6464 6553 6640 0
-13682 6464 6555 6638 0
-13682 6464 6557 6636 0
-13682 6464 6559 6634 0
-13682 6464 6561 6632 0
-13682 6464 6563 6630 0
-13682 6464 6565 6628 0
-13682 6464 6567 6626 0
-13682 6464 6569 6624 0
-13682 6464 6571 6622 0
-13682 6464 6573 6620 0
-13682 6464 6575 6618 0
-13682 6464 6577 6616 0
-13682 6464 6579 6614 0
-13682 6464 6581 6612 0
-13682 6464 6583 6610 0
-13682 6464 6585 6608 0
-13682 6464 6587 6606 0
-13682 6464 6589 6604 0
-13682 6464 6591 6602 0
-13682 6466 6648 0
-13682 6466 6546 6646 0
-13682 6466 6547 6644 0
-13682 6466 6549 6642 0
-13682 6466 6551 6640 0
-13682 6466 6553 6638 0
-13682 6466 6555 6636 0
-13682 6466 6557 6634 0
-13682 6466 6559 6632 0
-13682 6466 6561 6630 0
-13682 6466 6563 6628 0
-13682 6466 6565 6626 0
-13682 6466 6567 6624 0
-13682 6466 6569 6622 0
-13682 6466 6571 6620 0
-13682 6466 6573 6618 0
-13682 6466 6575 6616 0
-13682 6466 6577 6614 0
-13682 6466 6579 6612 0
-13682 6466 6581 6610 0
-13682 6466 6583 6608 0
-13682 6466 6585 6606 0
-13682 6466 6587 6604 0
-13682 6466 6589 6602 0
-13682 6466 6591 6600 0
-13682 6468 6646 0
-13682 6468 6546 6644 0
-13682 6468 6547 6642 0
-13682 6468 6549 6640 0
-13682 6468 6551 6638 0
-13682 6468 6553 6636 0
-13682 6468 6555 6634 0
-13682 6468 6557 6632 0
-13682 6468 6559 6630 0
-13682 6468 6561 6628 0
-13682 6468 6563 6626 0
-13682 6468 6565 6624 0
-13682 6468 6567 6622 0
-13682 6468 6569 6620 0
-13682 6468 6571 6618 0
-13682 6468 6573 6616 0
-13682 6468 6575 6614 0
-13682 6468 6577 6612 0
-13682 6468 6579 6610 0
-13682 6468 6581 6608 0
-13682 6468 6583 6606 0
-13682 6468 6585 6604 0
-13682 6468 6587 6602 0
-13682 6468 6589 6600 0
-13682 6468 6591 6598 0
-13682 6470 6644 0
-13682 6470 6546 6642 0
-13682 6470 6547 6640 0
-13682 6470 6549 6638 0
-13682 6470 6551 6636 0
-13682 6470 6553 6634 0
-13682 6470 6555 6632 0
-13682 6470 6557 6630 0
-13682 6470 6559 6628 0
-13682 6470 6561 6626 0
-13682 6470 6563 6624 0
-13682 6470 6565 6622 0
-13682 6470 6567 6620 0
-13682 6470 6569 6618 0
-13682 6470 6571 6616 0
-13682 6470 6573 6614 0
-13682 6470 6575 6612 0
-13682 6470 6577 6610 0
-13682 6470 6579 6608 0
-13682 6470 6581 6606 0
-13682 6470 6583 6604 0
-13682 6470 6585 6602 0
-13682 6470 6587 6600 0
-13682 6470 6589 6598 0
-13682 6470 6591 6596 0
-13682 6472 6642 0
-13682 6472 6546 6640 0
-13682 6472 6547 6638 0
-13682 6472 6549 6636 0
-13682 6472 6551 6634 0
-13682 6472 6553 6632 0
-13682 6472 6555 6630 0
-13682 6472 6557 6628 0
-13682 6472 6559 6626 0
-13682 6472 6561 6624 0
-13682 6472 6563 6622 0
-13682 6472 6565 6620 0
-13682 6472 6567 6618 0
-13682 6472 6569 6616 0
-13682 6472 6571 6614 0
-13682 6472 6573 6612 0
-13682 6472 6575 6610 0
-13682 6472 6577 6608 0
-13682 6472 6579 6606 0
-13682 6472 6581 6604 0
-13682 6472 6583 6602 0
-13682 6472 6585 6600 0
-13682 6472 6587 6598 0
-13682 6472 6589 6596 0
-13682 6472 6591 6594 0
-13682 6474 6640 0
-13682 6474 6546 6638 0
-13682 6474 6547 6636 0
-13682 6474 6549 6634 0
-13682 6474 6551 6632 0
-13682 6474 6553 6630 0
-13682 6474 6555 6628 0
-13682 6474 6557 6626 0
-13682 6474 6559 6624 0
-13682 6474 6561 6622 0
-13682 6474 6563 6620 0
-13682 6474 6565 6618 0
-13682 6474 6567 6616 0
-13682 6474 6569 6614 0
-13682 6474 6571 6612 0
-13682 6474 6573 6610 0
-13682 6474 6575 6608 0
-13682 6474 6577 6606 0
-13682 6474 6579 6604 0
-13682 6474 6581 6602 0
-13682 6474 6583 6600 0
-13682 6474 6585 6598 0
-13682 6474 6587 6596 0
-13682 6474 6589 6594 0
-13682 6474 6591 6593 0
-13682 6476 6638 0
-13682 6476 6546 6636 0
-13682 6476 6547 6634 0
-13682 6476 6549 6632 0
-13682 6476 6551 6630 0
-13682 6476 6553 6628 0
-13682 6476 6555 6626 0
-13682 6476 6557 6624 0
-13682 6476 6559 6622 0
-13682 6476 6561 6620 0
-13682 6476 6563 6618 0
-13682 6476 6565 6616 0
-13682 6476 6567 6614 0
-13682 6476 6569 6612 0
-13682 6476 6571 6610 0
-13682 6476 6573 6608 0
-13682 6476 6575 6606 0
-13682 6476 6577 6604 0
-13682 6476 6579 6602 0
-13682 6476 6581 6600 0
-13682 6476 6583 6598 0
-13682 6476 6585 6596 0
-13682 6476 6587 6594 0
-13682 6476 6589 6593 0
-13682 6476 6591 0
-13682 6478 6636 0
-13682 6478 6546 6634 0
-13682 6478 6547 6632 0
-13682 6478 6549 6630 0
-13682 6478 6551 6628 0
-13682 6478 6553 6626 0
-13682 6478 6555 6624 0
-13682 6478 6557 6622 0
-13682 6478 6559 6620 0
-13682 6478 6561 6618 0
-13682 6478 6563 6616 0
-13682 6478 6565 6614 0
-13682 6478 6567 6612 0
-13682 6478 6569 6610 0
-13682 6478 6571 6608 0
-13682 6478 6573 6606 0
-13682 6478 6575 6604 0
-13682 6478 6577 6602 0
-13682 6478 6579 6600 0
-13682 6478 6581 6598 0
-13682 6478 6583 6596 0
-13682 6478 6585 6594 0
-13682 6478 6587 6593 0
-13682 6478 6589 0
-13682 6478 6591 0
-13682 6480 6634 0
-13682 6480 6546 6632 0
-13682 6480 6547 6630 0
-13682 6480 6549 6628 0
-13682 6480 6551 6626 0
-13682 6480 6553 6624 0
-13682 6480 6555 6622 0
-13682 6480 6557 6620 0
-13682 6480 6559 6618 0
-13682 6480 6561 6616 0
-13682 6480 6563 6614 0
-13682 6480 6565 6612 0
-13682 6480 6567 6610 0
-13682 6480 6569 6608 0
-13682 6480 6571 6606 0
-13682 6480 6573 6604 0
-13682 6480 6575 6602 0
-13682 6480 6577 6600 0
-13682 6480 6579 6598 0
-13682 6480 6581 6596 0
-13682 6480 6583 6594 0
-13682 6480 6585 6593 0
-13682 6480 6587 0
-13682 6480 6589 0
-13682 6480 6591 0
-13682 6482 6632 0
-13682 6482 6546 6630 0
-13682 6482 6547 6628 0
-13682 6482 6549 6626 0
-13682 6482 6551 6624 0
-13682 6482 6553 6622 0
-13682 6482 6555 6620 0
-13682 6482 6557 6618 0
-13682 6482 6559 6616 0
-13682 6482 6561 6614 0
-13682 6482 6563 6612 0
-13682 6482 6565 6610 0
-13682 6482 6567 6608 0
-13682 6482 6569 6606 0
-13682 6482 6571 6604 0
-13682 6482 6573 6602 0
-13682 6482 6575 6600 0
-13682 6482 6577 6598 0
-13682 6482 6579 6596 0
-13682 6482 6581 6594 0
-13682 6482 6583 6593 0
-13682 6482 6585 0
-13682 6482 6587 0
-13682 6482 6589 0
-13682 6482 6591 0
13682 -6585 -6593 0
13682 -6583 -6594 0
13682 -6581 -6596 0
13682 -6579 -6598 0
13682 -6577 -6600 0
13682 -6575 -6602 0
13682 -6573 -6604 0
13682 -6571 -6606 0
13682 -6569 -6608 0
13682 -6567 -6610 0
13682 -6565 -6612 0
13682 -6563 -6614 0
13682 -6561 -6616 0
13682 -6559 -6618 0
13682 -6557 -6620 0
13682 -6555 -6622 0
13682 -6553 -6624 0
13682 -6551 -6626 0
13682 -6549 -6628 0
13682 -6547 -6630 0
13682 -6546 -6632 0
13682 -6482 -6587 -6593 0
13682 -6482 -6585 -6594 0
13682 -6482 -6583 -6596 0
13682 -6482 -6581 -6598 0
13682 -6482 -6579 -6600 0
13682 -6482 -6577 -6602 0
13682 -6482 -6575 -6604 0
13682 -6482 -6573 -6606 0
13682 -6482 -6571 -6608 0
13682 -6482 -6569 -6610 0
13682 -6482 -6567 -6612 0
13682 -6482 -6565 -6614 0
13682 -6482 -6563 -6616 0
13682 -6482 -6561 -6618 0
13682 -6482 -6559 -6620 0
13682 -6482 -6557 -6622 0
13682 -6482 -6555 -6624 0
13682 -6482 -6553 -6626 0
13682 -6482 -6551 -6628 0
13682 -6482 -6549 -6630 0
13682 -6482 -6547 -6632 0
13682 -6482 -6546 -6634 0
13682 -6480 -6589 -6593 0
13682 -6480 -6587 -6594 0
13682 -6480 -6585 -6596 0
13682 -6480 -6583 -6598 0
13682 -6480 -6581 -6600 0
13682 -6480 -6579 -6602 0
13682 -6480 -6577 -6604 0
13682 -6480 -6575 -6606 0
13682 -6480 -6573 -6608 0
13682 -6480 -6571 -6610 0
13682 -6480 -6569 -6612 0
13682 -6480 -6567 -6614 0
13682 -6480 -6565 -6616 0
13682 -6480 -6563 -6618 0
13682 -6480 -6561 -6620 0
13682 -6480 -6559 -6622 0
13682 -6480 -6557 -6624 0
13682 -6480 -6555 -6626 0
13682 -6480 -6553 -6628 0
13682 -6480 -6551 -6630 0
13682 -6480 -6549 -6632 0
13682 -6480 -6547 -6634 0
13682 -6480 -6546 -6636 0
13682 -6478 -6591 -6593 0
13682 -6478 -6589 -6594 0
13682 -6478 -6587 -6596 0
13682 -6478 -6585 -6598 0
13682 -6478 -6583 -6600 0
13682 -6478 -6581 -6602 0
13682 -6478 -6579 -6604 0
13682 -6478 -6577 -6606 0
13682 -6478 -6575 -6608 0
13682 -6478 -6573 -6610 0
13682 -6478 -6571 -6612 0
13682 -6478 -6569 -6614 0
13682 -6478 -6567 -6616 0
13682 -6478 -6565 -6618 0
13682 -6478 -6563 -6620 0
13682 -6478 -6561 -6622 0
13682 -6478 -6559 -6624 0
13682 -6478 -6557 -6626 0
13682 -6478 -6555 -6628 0
13682 -6478 -6553 -6630 0
13682 -6478 -6551 -6632 0
13682 -6478 -6549 -6634 0
13682 -6478 -6547 -6636 0
13682 -6478 -6546 -6638 0
13682 -6476 -6593 0
13682 -6476 -6591 -6594 0
13682 -6476 -6589 -6596 0
13682 -6476 -6587 -6598 0
13682 -6476 -6585 -6600 0
13682 -6476 -6583 -6602 0
13682 -6476 -6581 -6604 0
13682 -6476 -6579 -6606 0
13682 -6476 -6577 -6608 0
13682 -6476 -6575 -6610 0
13682 -6476 -6573 -6612 0
13682 -6476 -6571 -6614 0
13682 -6476 -6569 -6616 0
13682 -6476 -6567 -6618 0
13682 -6476 -6565 -6620 0
13682 -6476 -6563 -6622 0
13682 -6476 -6561 -6624 0
13682 -6476 -6559 -6626 0
13682 -6476 -6557 -6628 0
13682 -6476 -6555 -6630 0
13682 -6476 -6553 -6632 0
13682 -6476 -6551 -6634 0
13682 -6476 -6549 -6636 0
13682 -6476 -6547 -6638 0
13682 -6476 -6546 -6640 0
13682 -6474 -6594 0
13682 -6474 -6591 -6596 0
13682 -6474 -6589 -6598 0
13682 -6474 -6587 -6600 0
13682 -6474 -6585 -6602 0
13682 -6474 -6583 -6604 0
13682 -6474 -6581 -6606 0
13682 -6474 -6579 -6608 0
13682 -6474 -6577 -6610 0
13682 -6474 -6575 -6612 0
13682 -6474 -6573 -6614 0
13682 -6474 -6571 -6616 0
13682 -6474 -6569 -6618 0
13682 -6474 -6567 -6620 0
13682 -6474 -6565 -6622 0
13682 -6474 -6563 -6624 0
13682 -6474 -6561 -6626 0
13682 -6474 -6559 -6628 0
13682 -6474 -6557 -6630 0
13682 -6474 -6555 -6632 0
13682 -6474 -6553 -6634 0
13682 -6474 -6551 -6636 0
13682 -6474 -6549 -6638 0
13682 -6474 -6547 -6640 0
13682 -6474 -6546 -6642 0
13682 -6472 -6596 0
13682 -6472 -6591 -6598 0
13682 -6472 -6589 -6600 0
13682 -6472 -6587 -6602 0
13682 -6472 -6585 -6604 0
13682 -6472 -6583 -6606 0
13682 -6472 -6581 -6608 0
13682 -6472 -6579 -6610 0
13682 -6472 -6577 -6612 0
13682 -6472 -6575 -6614 0
13682 -6472 -6573 -6616 0
13682 -6472 -6571 -6618 0
13682 -6472 -6569 -6620 0
13682 -6472 -6567 -6622 0
13682 -6472 -6565 -6624 0
13682 -6472 -6563 -6626 0
13682 -6472 -6561 -6628 0
13682 -6472 -6559 -6630 0
13682 -6472 -6557 -6632 0
13682 -6472 -6555 -6634 0
13682 -6472 -6553 -6636 0
13682 -6472 -6551 -6638 0
13682 -6472 -6549 -6640 0
13682 -6472 -6547 -6642 0
13682 -6472 -6546 -6644 0
13682 -6470 -6598 0
13682 -6470 -6591 -6600 0
13682 -6470 -6589 -6602 0
13682 -6470 -6587 -6604 0
13682 -6470 -6585 -6606 0
13682 -6470 -6583 -6608 0
13682 -6470 -6581 -6610 0
13682 -6470 -6579 -6612 0
13682 -6470 -6577 -6614 0
13682 -6470 -6575 -6616 0
13682 -6470 -6573 -6618 0
13682 -6470 -6571 -6620 0
13682 -6470 -6569 -6622 0
13682 -6470 -6567 -6624 0
13682 -6470 -6565 -6626 0
13682 -6470 -6563 -6628 0
13682 -6470 -6561 -6630 0
13682 -6470 -6559 -6632 0
13682 -6470 -6557 -6634 0
13682 -6470 -6555 -6636 0
13682 -6470 -6553 -6638 0
13682 -6470 -6551 -6640 0
13682 -6470 -6549 -6642 0
13682 -6470 -6547 -6644 0
13682 -6470 -6546 -6646 0
13682 -6468 -6600 0
13682 -6468 -6591 -6602 0
13682 -6468 -6589 -6604 0
13682 -6468 -6587 -6606 0
13682 -6468 -6585 -6608 0
13682 -6468 -6583 -6610 0
13682 -6468 -6581 -6612 0
13682 -6468 -6579 -6614 0
13682 -6468 -6577 -6616 0
13682 -6468 -6575 -6618 0
13682 -6468 -6573 -6620 0
13682 -6468 -6571 -6622 0
13682 -6468 -6569 -6624 0
13682 -6468 -6567 -6626 0
13682 -6468 -6565 -6628 0
13682 -6468 -6563 -6630 0
13682 -6468 -6561 -6632 0
13682 -6468 -6559 -6634 0
13682 -6468 -6557 -6636 0
13682 -6468 -6555 -6638 0
13682 -6468 -6553 -6640 0
13682 -6468 -6551 -6642 0
13682 -6468 -6549 -6644 0
13682 -6468 -6547 -6646 0
13682 -6468 -6546 -6648 0
13682 -6466 -6602 0
13682 -6466 -6591 -6604 0
13682 -6466 -6589 -6606 0
13682 -6466 -6587 -6608 0
13682 -6466 -6585 -6610 0
13682 -6466 -6583 -6612 0
13682 -6466 -6581 -6614 0
13682 -6466 -6579 -6616 0
13682 -6466 -6577 -6618 0
13682 -6466 -6575 -6620 0
13682 -6466 -6573 -6622 0
13682 -6466 -6571 -6624 0
13682 -6466 -6569 -6626 0
13682 -6466 -6567 -6628 0
13682 -6466 -6565 -6630 0
13682 -6466 -6563 -6632 0
13682 -6466 -6561 -6634 0
13682 -6466 -6559 -6636 0
13682 -6466 -6557 -6638 0
13682 -6466 -6555 -6640 0
13682 -6466 -6553 -6642 0
13682 -6466 -6551 -6644 0
13682 -6466 -6549 -6646 0
13682 -6466 -6547 -6648 0
13682 -6466 -6546 -6650 0
13682 -6464 -6604 0
13682 -6464 -6591 -6606 0
13682 -6464 -6589 -6608 0
13682 -6464 -6587 -6610 0
13682 -6464 -6585 -6612 0
13682 -6464 -6583 -6614 0
13682 -6464 -6581 -6616 0
13682 -6464 -6579 -6618 0
13682 -6464 -6577 -6620 0
13682 -6464 -6575 -6622 0
13682 -6464 -6573 -6624 0
13682 -6464 -6571 -6626 0
13682 -6464 -6569 -6628 0
13682 -6464 -6567 -6630 0
13682 -6464 -6565 -6632 0
13682 -6464 -6563 -6634 0
13682 -6464 -6561 -6636 0
13682 -6464 -6559 -6638 0
13682 -6464 -6557 -6640 0
13682 -6464 -6555 -6642 0
13682 -6464 -6553 -6644 0
13682 -6464 -6551 -6646 0
13682 -6464 -6549 -6648 0
13682 -6464 -6547 -6650 0
13682 -6464 -6546 -6652 0
13682 -6462 -6606 0
13682 -6462 -6591 -6608 0
13682 -6462 -6589 -6610 0
13682 -6462 -6587 -6612 0
13682 -6462 -6585 -6614 0
13682 -6462 -6583 -6616 0
13682 -6462 -6581 -6618 0
13682 -6462 -6579 -6620 0
13682 -6462 -6577 -6622 0
13682 -6462 -6575 -6624 0
13682 -6462 -6573 -6626 0
13682 -6462 -6571 -6628 0
13682 -6462 -6569 -6630 0
13682 -6462 -6567 -6632 0
13682 -6462 -6565 -6634 0
13682 -6462 -6563 -6636 0
13682 -6462 -6561 -6638 0
13682 -6462 -6559 -6640 0
13682 -6462 -6557 -6642 0
13682 -6462 -6555 -6644 0
13682 -6462 -6553 -6646 0
13682 -6462 -6551 -6648 0
13682 -6462 -6549 -6650 0
13682 -6462 -6547 -6652 0
13682 -6462 -6546 -6654 0
13682 -6460 -6608 0
13682 -6460 -6591 -6610 0
13682 -6460 -6589 -6612 0
13682 -6460 -6587 -6614 0
13682 -6460 -6585 -6616 0
13682 -6460 -6583 -6618 0
13682 -6460 -6581 -6620 0
13682 -6460 -6579 -6622 0
13682 -6460 -6577 -6624 0
13682 -6460 -6575 -6626 0
13682 -6460 -6573 -6628 0
13682 -6460 -6571 -6630 0
13682 -6460 -6569 -6632 0
13682 -6460 -6567 -6634 0
13682 -6460 -6565 -6636 0
13682 -6460 -6563 -6638 0
13682 -6460 -6561 -6640 0
13682 -6460 -6559 -6642 0
13682 -6460 -6557 -6644 0
13682 -6460 -6555 -6646 0
13682 -6460 -6553 -6648 0
13682 -6460 -6551 -6650 0
13682 -6460 -6549 -6652 0
13682 -6460 -6547 -6654 0
13682 -6460 -6546 0
13682 -6458 -6610 0
13682 -6458 -6591 -6612 0
13682 -6458 -6589 -6614 0
13682 -6458 -6587 -6616 0
13682 -6458 -6585 -6618 0
13682 -6458 -6583 -6620 0
13682 -6458 -6581 -6622 0
13682 -6458 -6579 -6624 0
13682 -6458 -6577 -6626 0
13682 -6458 -6575 -6628 0
13682 -6458 -6573 -6630 0
13682 -6458 -6571 -6632 0
13682 -6458 -6569 -6634 0
13682 -6458 -6567 -6636 0
13682 -6458 -6565 -6638 0
13682 -6458 -6563 -6640 0
13682 -6458 -6561 -6642 0
13682 -6458 -6559 -6644 0
13682 -6458 -6557 -6646 0
13682 -6458 -6555 -6648 0
13682 -6458 -6553 -6650 0
13682 -6458 -6551 -6652 0
13682 -6458 -6549 -6654 0
13682 -6458 -6547 0
13682 -6458 -6546 0
13682 -6456 -6612 0
13682 -6456 -6591 -6614 0
13682 -6456 -6589 -6616 0
13682 -6456 -6587 -6618 0
13682 -6456 -6585 -6620 0
13682 -6456 -6583 -6622 0
13682 -6456 -6581 -6624 0
13682 -6456 -6579 -6626 0
13682 -6456 -6577 -6628 0
13682 -6456 -6575 -6630 0
13682 -6456 -6573 -6632 0
13682 -6456 -6571 -6634 0
13682 -6456 -6569 -6636 0
13682 -6456 -6567 -6638 0
13682 -6456 -6565 -6640 0
13682 -6456 -6563 -6642 0
13682 -6456 -6561 -6644 0
13682 -6456 -6559 -6646 0
13682 -6456 -6557 -6648 0
13682 -6456 -6555 -6650 0
13682 -6456 -6553 -6652 0
13682 -6456 -6551 -6654 0
13682 -6456 -6549 0
13682 -6456 -6547 0
13682 -6456 -6546 0
13682 -6454 -6614 0
13682 -6454 -6591 -6616 0
13682 -6454 -6589 -6618 0
13682 -6454 -6587 -6620 0
13682 -6454 -6585 -6622 0
13682 -6454 -6583 -6624 0
13682 -6454 -6581 -6626 0
13682 -6454 -6579 -6628 0
13682 -6454 -6577 -6630 0
13682 -6454 -6575 -6632 0
13682 -6454 -6573 -6634 0
13682 -6454 -6571 -6636 0
13682 -6454 -6569 -6638 0
13682 -6454 -6567 -6640 0
13682 -6454 -6565 -6642 0
13682 -6454 -6563 -6644 0
13682 -6454 -6561 -6646 0
13682 -6454 -6559 -6648 0
13682 -6454 -6557 -6650 0
13682 -6454 -6555 -6652 0
13682 -6454 -6553 -6654 0
13682 -6454 -6551 0
13682 -6454 -6549 0
13682 -6454 -6547 0
13682 -6454 -6546 0
13682 -6453 -6616 0
13682 -6453 -6591 -6618 0
13682 -6453 -6589 -6620 0
13682 -6453 -6587 -6622 0
13682 -6453 -6585 -6624 0
13682 -6453 -6583 -6626 0
13682 -6453 -6581 -6628 0
13682 -6453 -6579 -6630 0
13682 -6453 -6577 -6632 0
13682 -6453 -6575 -6634 0
13682 -6453 -6573 -6636 0
13682 -6453 -6571 -6638 0
13682 -6453 -6569 -6640 0
13682 -6453 -6567 -6642 0
13682 -6453 -6565 -6644 0
13682 -6453 -6563 -6646 0
13682 -6453 -6561 -6648 0
13682 -6453 -6559 -6650 0
13682 -6453 -6557 -6652 0
13682 -6453 -6555 -6654 0
13682 -6453 -6553 0
13682 -6453 -6551 0
13682 -6453 -6549 0
13682 -6453 -6547 0
13682 -6453 -6546 0
c ((36<=(aux582 + aux585 + aux586))=tv=SATLiteral(13683))
-13683 -6583 -6593 0
-13683 -6581 -6594 0
-13683 -6579 -6596 0
-13683 -6577 -6598 0
-13683 -6575 -6600 0
-13683 -6573 -6602 0
-13683 -6571 -6604 0
-13683 -6569 -6606 0
-13683 -6567 -6608 0
-13683 -6565 -6610 0
-13683 -6563 -6612 0
-13683 -6561 -6614 0
-13683 -6559 -6616 0
-13683 -6557 -6618 0
-13683 -6555 -6620 0
-13683 -6553 -6622 0
-13683 -6551 -6624 0
-13683 -6549 -6626 0
-13683 -6547 -6628 0
-13683 -6546 -6630 0
-13683 -6482 -6585 -6593 0
-13683 -6482 -6583 -6594 0
-13683 -6482 -6581 -6596 0
-13683 -6482 -6579 -6598 0
-13683 -6482 -6577 -6600 0
-13683 -6482 -6575 -6602 0
-13683 -6482 -6573 -6604 0
-13683 -6482 -6571 -6606 0
-13683 -6482 -6569 -6608 0
-13683 -6482 -6567 -6610 0
-13683 -6482 -6565 -6612 0
-13683 -6482 -6563 -6614 0
-13683 -6482 -6561 -6616 0
-13683 -6482 -6559 -6618 0
-13683 -6482 -6557 -6620 0
-13683 -6482 -6555 -6622 0
-13683 -6482 -6553 -6624 0
-13683 -6482 -6551 -6626 0
-13683 -6482 -6549 -6628 0
-13683 -6482 -6547 -6630 0
-13683 -6482 -6546 -6632 0
-13683 -6480 -6587 -6593 0
-13683 -6480 -6585 -6594 0
-13683 -6480 -6583 -6596 0
-13683 -6480 -6581 -6598 0
-13683 -6480 -6579 -6600 0
-13683 -6480 -6577 -6602 0
-13683 -6480 -6575 -6604 0
-13683 -6480 -6573 -6606 0
-13683 -6480 -6571 -6608 0
-13683 -6480 -6569 -6610 0
-13683 -6480 -6567 -6612 0
-13683 -6480 -6565 -6614 0
-13683 -6480 -6563 -6616 0
-13683 -6480 -6561 -6618 0
-13683 -6480 -6559 -6620 0
-13683 -6480 -6557 -6622 0
-13683 -6480 -6555 -6624 0
-13683 -6480 -6553 -6626 0
-13683 -6480 -6551 -6628 0
-13683 -6480 -6549 -6630 0
-13683 -6480 -6547 -6632 0
-13683 -6480 -6546 -6634 0
-13683 -6478 -6589 -6593 0
-13683 -6478 -6587 -6594 0
-13683 -6478 -6585 -6596 0
-13683 -6478 -6583 -6598 0
-13683 -6478 -6581 -6600 0
-13683 -6478 -6579 -6602 0
-13683 -6478 -6577 -6604 0
-13683 -6478 -6575 -6606 0
-13683 -6478 -6573 -6608 0
-13683 -6478 -6571 -6610 0
-13683 -6478 -6569 -6612 0
-13683 -6478 -6567 -6614 0
-13683 -6478 -6565 -6616 0
-13683 -6478 -6563 -6618 0
-13683 -6478 -6561 -6620 0
-13683 -6478 -6559 -6622 0
-13683 -6478 -6557 -6624 0
-13683 -6478 -6555 -6626 0
-13683 -6478 -6553 -6628 0
-13683 -6478 -6551 -6630 0
-13683 -6478 -6549 -6632 0
-13683 -6478 -6547 -6634 0
-13683 -6478 -6546 -6636 0
-13683 -6476 -6591 -6593 0
-13683 -6476 -6589 -6594 0
-13683 -6476 -6587 -6596 0
-13683 -6476 -6585 -6598 0
-13683 -6476 -6583 -6600 0
-13683 -6476 -6581 -6602 0
-13683 -6476 -6579 -6604 0
-13683 -6476 -6577 -6606 0
-13683 -6476 -6575 -6608 0
-13683 -6476 -6573 -6610 0
-13683 -6476 -6571 -6612 0
-13683 -6476 -6569 -6614 0
-13683 -6476 -6567 -6616 0
-13683 -6476 -6565 -6618 0
-13683 -6476 -6563 -6620 0
-13683 -6476 -6561 -6622 0
-13683 -6476 -6559 -6624 0
-13683 -6476 -6557 -6626 0
-13683 -6476 -6555 -6628 0
-13683 -6476 -6553 -6630 0
-13683 -6476 -6551 -6632 0
-13683 -6476 -6549 -6634 0
-13683 -6476 -6547 -6636 0
-13683 -6476 -6546 -6638 0
-13683 -6474 -6593 0
-13683 -6474 -6591 -6594 0
-13683 -6474 -6589 -6596 0
-13683 -6474 -6587 -6598 0
-13683 -6474 -6585 -6600 0
-13683 -6474 -6583 -6602 0
-13683 -6474 -6581 -6604 0
-13683 -6474 -6579 -6606 0
-13683 -6474 -6577 -6608 0
-13683 -6474 -6575 -6610 0
-13683 -6474 -6573 -6612 0
-13683 -6474 -6571 -6614 0
-13683 -6474 -6569 -6616 0
-13683 -6474 -6567 -6618 0
-13683 -6474 -6565 -6620 0
-13683 -6474 -6563 -6622 0
-13683 -6474 -6561 -6624 0
-13683 -6474 -6559 -6626 0
-13683 -6474 -6557 -6628 0
-13683 -6474 -6555 -6630 0
-13683 -6474 -6553 -6632 0
-13683 -6474 -6551 -6634 0
-13683 -6474 -6549 -6636 0
-13683 -6474 -6547 -6638 0
-13683 -6474 -6546 -6640 0
-13683 -6472 -6594 0
-13683 -6472 -6591 -6596 0
-13683 -6472 -6589 -6598 0
-13683 -6472 -6587 -6600 0
-13683 -6472 -6585 -6602 0
-13683 -6472 -6583 -6604 0
-13683 -6472 -6581 -6606 0
-13683 -6472 -6579 -6608 0
-13683 -6472 -6577 -6610 0
-13683 -6472 -6575 -6612 0
-13683 -6472 -6573 -6614 0
-13683 -6472 -6571 -6616 0
-13683 -6472 -6569 -6618 0
-13683 -6472 -6567 -6620 0
-13683 -6472 -6565 -6622 0
-13683 -6472 -6563 -6624 0
-13683 -6472 -6561 -6626 0
-13683 -6472 -6559 -6628 0
-13683 -6472 -6557 -6630 0
-13683 -6472 -6555 -6632 0
-13683 -6472 -6553 -6634 0
-13683 -6472 -6551 -6636 0
-13683 -6472 -6549 -6638 0
-13683 -6472 -6547 -6640 0
-13683 -6472 -6546 -6642 0
-13683 -6470 -6596 0
-13683 -6470 -6591 -6598 0
-13683 -6470 -6589 -6600 0
-13683 -6470 -6587 -6602 0
-13683 -6470 -6585 -6604 0
-13683 -6470 -6583 -6606 0
-13683 -6470 -6581 -6608 0
-13683 -6470 -6579 -6610 0
-13683 -6470 -6577 -6612 0
-13683 -6470 -6575 -6614 0
-13683 -6470 -6573 -6616 0
-13683 -6470 -6571 -6618 0
-13683 -6470 -6569 -6620 0
-13683 -6470 -6567 -6622 0
-13683 -6470 -6565 -6624 0
-13683 -6470 -6563 -6626 0
-13683 -6470 -6561 -6628 0
-13683 -6470 -6559 -6630 0
-13683 -6470 -6557 -6632 0
-13683 -6470 -6555 -6634 0
-13683 -6470 -6553 -6636 0
-13683 -6470 -6551 -6638 0
-13683 -6470 -6549 -6640 0
-13683 -6470 -6547 -6642 0
-13683 -6470 -6546 -6644 0
-13683 -6468 -6598 0
-13683 -6468 -6591 -6600 0
-13683 -6468 -6589 -6602 0
-13683 -6468 -6587 -6604 0
-13683 -6468 -6585 -6606 0
-13683 -6468 -6583 -6608 0
-13683 -6468 -6581 -6610 0
-13683 -6468 -6579 -6612 0
-13683 -6468 -6577 -6614 0
-13683 -6468 -6575 -6616 0
-13683 -6468 -6573 -6618 0
-13683 -6468 -6571 -6620 0
-13683 -6468 -6569 -6622 0
-13683 -6468 -6567 -6624 0
-13683 -6468 -6565 -6626 0
-13683 -6468 -6563 -6628 0
-13683 -6468 -6561 -6630 0
-13683 -6468 -6559 -6632 0
-13683 -6468 -6557 -6634 0
-13683 -6468 -6555 -6636 0
-13683 -6468 -6553 -6638 0
-13683 -6468 -6551 -6640 0
-13683 -6468 -6549 -6642 0
-13683 -6468 -6547 -6644 0
-13683 -6468 -6546 -6646 0
-13683 -6466 -6600 0
-13683 -6466 -6591 -6602 0
-13683 -6466 -6589 -6604 0
-13683 -6466 -6587 -6606 0
-13683 -6466 -6585 -6608 0
-13683 -6466 -6583 -6610 0
-13683 -6466 -6581 -6612 0
-13683 -6466 -6579 -6614 0
-13683 -6466 -6577 -6616 0
-13683 -6466 -6575 -6618 0
-13683 -6466 -6573 -6620 0
-13683 -6466 -6571 -6622 0
-13683 -6466 -6569 -6624 0
-13683 -6466 -6567 -6626 0
-13683 -6466 -6565 -6628 0
-13683 -6466 -6563 -6630 0
-13683 -6466 -6561 -6632 0
-13683 -6466 -6559 -6634 0
-13683 -6466 -6557 -6636 0
-13683 -6466 -6555 -6638 0
-13683 -6466 -6553 -6640 0
-13683 -6466 -6551 -6642 0
-13683 -6466 -6549 -6644 0
-13683 -6466 -6547 -6646 0
-13683 -6466 -6546 -6648 0
-13683 -6464 -6602 0
-13683 -6464 -6591 -6604 0
-13683 -6464 -6589 -6606 0
-13683 -6464 -6587 -6608 0
-13683 -6464 -6585 -6610 0
-13683 -6464 -6583 -6612 0
-13683 -6464 -6581 -6614 0
-13683 -6464 -6579 -6616 0
-13683 -6464 -6577 -6618 0
-13683 -6464 -6575 -6620 0
-13683 -6464 -6573 -6622 0
-13683 -6464 -6571 -6624 0
-13683 -6464 -6569 -6626 0
-13683 -6464 -6567 -6628 0
-13683 -6464 -6565 -6630 0
-13683 -6464 -6563 -6632 0
-13683 -6464 -6561 -6634 0
-13683 -6464 -6559 -6636 0
-13683 -6464 -6557 -6638 0
-13683 -6464 -6555 -6640 0
-13683 -6464 -6553 -6642 0
-13683 -6464 -6551 -6644 0
-13683 -6464 -6549 -6646 0
-13683 -6464 -6547 -6648 0
-13683 -6464 -6546 -6650 0
-13683 -6462 -6604 0
-13683 -6462 -6591 -6606 0
-13683 -6462 -6589 -6608 0
-13683 -6462 -6587 -6610 0
-13683 -6462 -6585 -6612 0
-13683 -6462 -6583 -6614 0
-13683 -6462 -6581 -6616 0
-13683 -6462 -6579 -6618 0
-13683 -6462 -6577 -6620 0
-13683 -6462 -6575 -6622 0
-13683 -6462 -6573 -6624 0
-13683 -6462 -6571 -6626 0
-13683 -6462 -6569 -6628 0
-13683 -6462 -6567 -6630 0
-13683 -6462 -6565 -6632 0
-13683 -6462 -6563 -6634 0
-13683 -6462 -6561 -6636 0
-13683 -6462 -6559 -6638 0
-13683 -6462 -6557 -6640 0
-13683 -6462 -6555 -6642 0
-13683 -6462 -6553 -6644 0
-13683 -6462 -6551 -6646 0
-13683 -6462 -6549 -6648 0
-13683 -6462 -6547 -6650 0
-13683 -6462 -6546 -6652 0
-13683 -6460 -6606 0
-13683 -6460 -6591 -6608 0
-13683 -6460 -6589 -6610 0
-13683 -6460 -6587 -6612 0
-13683 -6460 -6585 -6614 0
-13683 -6460 -6583 -6616 0
-13683 -6460 -6581 -6618 0
-13683 -6460 -6579 -6620 0
-13683 -6460 -6577 -6622 0
-13683 -6460 -6575 -6624 0
-13683 -6460 -6573 -6626 0
-13683 -6460 -6571 -6628 0
-13683 -6460 -6569 -6630 0
-13683 -6460 -6567 -6632 0
-13683 -6460 -6565 -6634 0
-13683 -6460 -6563 -6636 0
-13683 -6460 -6561 -6638 0
-13683 -6460 -6559 -6640 0
-13683 -6460 -6557 -6642 0
-13683 -6460 -6555 -6644 0
-13683 -6460 -6553 -6646 0
-13683 -6460 -6551 -6648 0
-13683 -6460 -6549 -6650 0
-13683 -6460 -6547 -6652 0
-13683 -6460 -6546 -6654 0
-13683 -6458 -6608 0
-13683 -6458 -6591 -6610 0
-13683 -6458 -6589 -6612 0
-13683 -6458 -6587 -6614 0
-13683 -6458 -6585 -6616 0
-13683 -6458 -6583 -6618 0
-13683 -6458 -6581 -6620 0
-13683 -6458 -6579 -6622 0
-13683 -6458 -6577 -6624 0
-13683 -6458 -6575 -6626 0
-13683 -6458 -6573 -6628 0
-13683 -6458 -6571 -6630 0
-13683 -6458 -6569 -6632 0
-13683 -6458 -6567 -6634 0
-13683 -6458 -6565 -6636 0
-13683 -6458 -6563 -6638 0
-13683 -6458 -6561 -6640 0
-13683 -6458 -6559 -6642 0
-13683 -6458 -6557 -6644 0
-13683 -6458 -6555 -6646 0
-13683 -6458 -6553 -6648 0
-13683 -6458 -6551 -6650 0
-13683 -6458 -6549 -6652 0
-13683 -6458 -6547 -6654 0
-13683 -6458 -6546 0
-13683 -6456 -6610 0
-13683 -6456 -6591 -6612 0
-13683 -6456 -6589 -6614 0
-13683 -6456 -6587 -6616 0
-13683 -6456 -6585 -6618 0
-13683 -6456 -6583 -6620 0
-13683 -6456 -6581 -6622 0
-13683 -6456 -6579 -6624 0
-13683 -6456 -6577 -6626 0
-13683 -6456 -6575 -6628 0
-13683 -6456 -6573 -6630 0
-13683 -6456 -6571 -6632 0
-13683 -6456 -6569 -6634 0
-13683 -6456 -6567 -6636 0
-13683 -6456 -6565 -6638 0
-13683 -6456 -6563 -6640 0
-13683 -6456 -6561 -6642 0
-13683 -6456 -6559 -6644 0
-13683 -6456 -6557 -6646 0
-13683 -6456 -6555 -6648 0
-13683 -6456 -6553 -6650 0
-13683 -6456 -6551 -6652 0
-13683 -6456 -6549 -6654 0
-13683 -6456 -6547 0
-13683 -6456 -6546 0
-13683 -6454 -6612 0
-13683 -6454 -6591 -6614 0
-13683 -6454 -6589 -6616 0
-13683 -6454 -6587 -6618 0
-13683 -6454 -6585 -6620 0
-13683 -6454 -6583 -6622 0
-13683 -6454 -6581 -6624 0
-13683 -6454 -6579 -6626 0
-13683 -6454 -6577 -6628 0
-13683 -6454 -6575 -6630 0
-13683 -6454 -6573 -6632 0
-13683 -6454 -6571 -6634 0
-13683 -6454 -6569 -6636 0
-13683 -6454 -6567 -6638 0
-13683 -6454 -6565 -6640 0
-13683 -6454 -6563 -6642 0
-13683 -6454 -6561 -6644 0
-13683 -6454 -6559 -6646 0
-13683 -6454 -6557 -6648 0
-13683 -6454 -6555 -6650 0
-13683 -6454 -6553 -6652 0
-13683 -6454 -6551 -6654 0
-13683 -6454 -6549 0
-13683 -6454 -6547 0
-13683 -6454 -6546 0
-13683 -6453 -6614 0
-13683 -6453 -6591 -6616 0
-13683 -6453 -6589 -6618 0
-13683 -6453 -6587 -6620 0
-13683 -6453 -6585 -6622 0
-13683 -6453 -6583 -6624 0
-13683 -6453 -6581 -6626 0
-13683 -6453 -6579 -6628 0
-13683 -6453 -6577 -6630 0
-13683 -6453 -6575 -6632 0
-13683 -6453 -6573 -6634 0
-13683 -6453 -6571 -6636 0
-13683 -6453 -6569 -6638 0
-13683 -6453 -6567 -6640 0
-13683 -6453 -6565 -6642 0
-13683 -6453 -6563 -6644 0
-13683 -6453 -6561 -6646 0
-13683 -6453 -6559 -6648 0
-13683 -6453 -6557 -6650 0
-13683 -6453 -6555 -6652 0
-13683 -6453 -6553 -6654 0
-13683 -6453 -6551 0
-13683 -6453 -6549 0
-13683 -6453 -6547 0
-13683 -6453 -6546 0
13683 6551 6654 0
13683 6553 6652 0
13683 6555 6650 0
13683 6557 6648 0
13683 6559 6646 0
13683 6561 6644 0
13683 6563 6642 0
13683 6565 6640 0
13683 6567 6638 0
13683 6569 6636 0
13683 6571 6634 0
13683 6573 6632 0
13683 6575 6630 0
13683 6577 6628 0
13683 6579 6626 0
13683 6581 6624 0
13683 6583 6622 0
13683 6585 6620 0
13683 6587 6618 0
13683 6589 6616 0
13683 6591 6614 0
13683 6453 6549 6654 0
13683 6453 6551 6652 0
13683 6453 6553 6650 0
13683 6453 6555 6648 0
13683 6453 6557 6646 0
13683 6453 6559 6644 0
13683 6453 6561 6642 0
13683 6453 6563 6640 0
13683 6453 6565 6638 0
13683 6453 6567 6636 0
13683 6453 6569 6634 0
13683 6453 6571 6632 0
13683 6453 6573 6630 0
13683 6453 6575 6628 0
13683 6453 6577 6626 0
13683 6453 6579 6624 0
13683 6453 6581 6622 0
13683 6453 6583 6620 0
13683 6453 6585 6618 0
13683 6453 6587 6616 0
13683 6453 6589 6614 0
13683 6453 6591 6612 0
13683 6454 6547 6654 0
13683 6454 6549 6652 0
13683 6454 6551 6650 0
13683 6454 6553 6648 0
13683 6454 6555 6646 0
13683 6454 6557 6644 0
13683 6454 6559 6642 0
13683 6454 6561 6640 0
13683 6454 6563 6638 0
13683 6454 6565 6636 0
13683 6454 6567 6634 0
13683 6454 6569 6632 0
13683 6454 6571 6630 0
13683 6454 6573 6628 0
13683 6454 6575 6626 0
13683 6454 6577 6624 0
13683 6454 6579 6622 0
13683 6454 6581 6620 0
13683 6454 6583 6618 0
13683 6454 6585 6616 0
13683 6454 6587 6614 0
13683 6454 6589 6612 0
13683 6454 6591 6610 0
13683 6456 6546 6654 0
13683 6456 6547 6652 0
13683 6456 6549 6650 0
13683 6456 6551 6648 0
13683 6456 6553 6646 0
13683 6456 6555 6644 0
13683 6456 6557 6642 0
13683 6456 6559 6640 0
13683 6456 6561 6638 0
13683 6456 6563 6636 0
13683 6456 6565 6634 0
13683 6456 6567 6632 0
13683 6456 6569 6630 0
13683 6456 6571 6628 0
13683 6456 6573 6626 0
13683 6456 6575 6624 0
13683 6456 6577 6622 0
13683 6456 6579 6620 0
13683 6456 6581 6618 0
13683 6456 6583 6616 0
13683 6456 6585 6614 0
13683 6456 6587 6612 0
13683 6456 6589 6610 0
13683 6456 6591 6608 0
13683 6458 6654 0
13683 6458 6546 6652 0
13683 6458 6547 6650 0
13683 6458 6549 6648 0
13683 6458 6551 6646 0
13683 6458 6553 6644 0
13683 6458 6555 6642 0
13683 6458 6557 6640 0
13683 6458 6559 6638 0
13683 6458 6561 6636 0
13683 6458 6563 6634 0
13683 6458 6565 6632 0
13683 6458 6567 6630 0
13683 6458 6569 6628 0
13683 6458 6571 6626 0
13683 6458 6573 6624 0
13683 6458 6575 6622 0
13683 6458 6577 6620 0
13683 6458 6579 6618 0
13683 6458 6581 6616 0
13683 6458 6583 6614 0
13683 6458 6585 6612 0
13683 6458 6587 6610 0
13683 6458 6589 6608 0
13683 6458 6591 6606 0
13683 6460 6652 0
13683 6460 6546 6650 0
13683 6460 6547 6648 0
13683 6460 6549 6646 0
13683 6460 6551 6644 0
13683 6460 6553 6642 0
13683 6460 6555 6640 0
13683 6460 6557 6638 0
13683 6460 6559 6636 0
13683 6460 6561 6634 0
13683 6460 6563 6632 0
13683 6460 6565 6630 0
13683 6460 6567 6628 0
13683 6460 6569 6626 0
13683 6460 6571 6624 0
13683 6460 6573 6622 0
13683 6460 6575 6620 0
13683 6460 6577 6618 0
13683 6460 6579 6616 0
13683 6460 6581 6614 0
13683 6460 6583 6612 0
13683 6460 6585 6610 0
13683 6460 6587 6608 0
13683 6460 6589 6606 0
13683 6460 6591 6604 0
13683 6462 6650 0
13683 6462 6546 6648 0
13683 6462 6547 6646 0
13683 6462 6549 6644 0
13683 6462 6551 6642 0
13683 6462 6553 6640 0
13683 6462 6555 6638 0
13683 6462 6557 6636 0
13683 6462 6559 6634 0
13683 6462 6561 6632 0
13683 6462 6563 6630 0
13683 6462 6565 6628 0
13683 6462 6567 6626 0
13683 6462 6569 6624 0
13683 6462 6571 6622 0
13683 6462 6573 6620 0
13683 6462 6575 6618 0
13683 6462 6577 6616 0
13683 6462 6579 6614 0
13683 6462 6581 6612 0
13683 6462 6583 6610 0
13683 6462 6585 6608 0
13683 6462 6587 6606 0
13683 6462 6589 6604 0
13683 6462 6591 6602 0
13683 6464 6648 0
13683 6464 6546 6646 0
13683 6464 6547 6644 0
13683 6464 6549 6642 0
13683 6464 6551 6640 0
13683 6464 6553 6638 0
13683 6464 6555 6636 0
13683 6464 6557 6634 0
13683 6464 6559 6632 0
13683 6464 6561 6630 0
13683 6464 6563 6628 0
13683 6464 6565 6626 0
13683 6464 6567 6624 0
13683 6464 6569 6622 0
13683 6464 6571 6620 0
13683 6464 6573 6618 0
13683 6464 6575 6616 0
13683 6464 6577 6614 0
13683 6464 6579 6612 0
13683 6464 6581 6610 0
13683 6464 6583 6608 0
13683 6464 6585 6606 0
13683 6464 6587 6604 0
13683 6464 6589 6602 0
13683 6464 6591 6600 0
13683 6466 6646 0
13683 6466 6546 6644 0
13683 6466 6547 6642 0
13683 6466 6549 6640 0
13683 6466 6551 6638 0
13683 6466 6553 6636 0
13683 6466 6555 6634 0
13683 6466 6557 6632 0
13683 6466 6559 6630 0
13683 6466 6561 6628 0
13683 6466 6563 6626 0
13683 6466 6565 6624 0
13683 6466 6567 6622 0
13683 6466 6569 6620 0
13683 6466 6571 6618 0
13683 6466 6573 6616 0
13683 6466 6575 6614 0
13683 6466 6577 6612 0
13683 6466 6579 6610 0
13683 6466 6581 6608 0
13683 6466 6583 6606 0
13683 6466 6585 6604 0
13683 6466 6587 6602 0
13683 6466 6589 6600 0
13683 6466 6591 6598 0
13683 6468 6644 0
13683 6468 6546 6642 0
13683 6468 6547 6640 0
13683 6468 6549 6638 0
13683 6468 6551 6636 0
13683 6468 6553 6634 0
13683 6468 6555 6632 0
13683 6468 6557 6630 0
13683 6468 6559 6628 0
13683 6468 6561 6626 0
13683 6468 6563 6624 0
13683 6468 6565 6622 0
13683 6468 6567 6620 0
13683 6468 6569 6618 0
13683 6468 6571 6616 0
13683 6468 6573 6614 0
13683 6468 6575 6612 0
13683 6468 6577 6610 0
13683 6468 6579 6608 0
13683 6468 6581 6606 0
13683 6468 6583 6604 0
13683 6468 6585 6602 0
13683 6468 6587 6600 0
13683 6468 6589 6598 0
13683 6468 6591 6596 0
13683 6470 6642 0
13683 6470 6546 6640 0
13683 6470 6547 6638 0
13683 6470 6549 6636 0
13683 6470 6551 6634 0
13683 6470 6553 6632 0
13683 6470 6555 6630 0
13683 6470 6557 6628 0
13683 6470 6559 6626 0
13683 6470 6561 6624 0
13683 6470 6563 6622 0
13683 6470 6565 6620 0
13683 6470 6567 6618 0
13683 6470 6569 6616 0
13683 6470 6571 6614 0
13683 6470 6573 6612 0
13683 6470 6575 6610 0
13683 6470 6577 6608 0
13683 6470 6579 6606 0
13683 6470 6581 6604 0
13683 6470 6583 6602 0
13683 6470 6585 6600 0
13683 6470 6587 6598 0
13683 6470 6589 6596 0
13683 6470 6591 6594 0
13683 6472 6640 0
13683 6472 6546 6638 0
13683 6472 6547 6636 0
13683 6472 6549 6634 0
13683 6472 6551 6632 0
13683 6472 6553 6630 0
13683 6472 6555 6628 0
13683 6472 6557 6626 0
13683 6472 6559 6624 0
13683 6472 6561 6622 0
13683 6472 6563 6620 0
13683 6472 6565 6618 0
13683 6472 6567 6616 0
13683 6472 6569 6614 0
13683 6472 6571 6612 0
13683 6472 6573 6610 0
13683 6472 6575 6608 0
13683 6472 6577 6606 0
13683 6472 6579 6604 0
13683 6472 6581 6602 0
13683 6472 6583 6600 0
13683 6472 6585 6598 0
13683 6472 6587 6596 0
13683 6472 6589 6594 0
13683 6472 6591 6593 0
13683 6474 6638 0
13683 6474 6546 6636 0
13683 6474 6547 6634 0
13683 6474 6549 6632 0
13683 6474 6551 6630 0
13683 6474 6553 6628 0
13683 6474 6555 6626 0
13683 6474 6557 6624 0
13683 6474 6559 6622 0
13683 6474 6561 6620 0
13683 6474 6563 6618 0
13683 6474 6565 6616 0
13683 6474 6567 6614 0
13683 6474 6569 6612 0
13683 6474 6571 6610 0
13683 6474 6573 6608 0
13683 6474 6575 6606 0
13683 6474 6577 6604 0
13683 6474 6579 6602 0
13683 6474 6581 6600 0
13683 6474 6583 6598 0
13683 6474 6585 6596 0
13683 6474 6587 6594 0
13683 6474 6589 6593 0
13683 6474 6591 0
13683 6476 6636 0
13683 6476 6546 6634 0
13683 6476 6547 6632 0
13683 6476 6549 6630 0
13683 6476 6551 6628 0
13683 6476 6553 6626 0
13683 6476 6555 6624 0
13683 6476 6557 6622 0
13683 6476 6559 6620 0
13683 6476 6561 6618 0
13683 6476 6563 6616 0
13683 6476 6565 6614 0
13683 6476 6567 6612 0
13683 6476 6569 6610 0
13683 6476 6571 6608 0
13683 6476 6573 6606 0
13683 6476 6575 6604 0
13683 6476 6577 6602 0
13683 6476 6579 6600 0
13683 6476 6581 6598 0
13683 6476 6583 6596 0
13683 6476 6585 6594 0
13683 6476 6587 6593 0
13683 6476 6589 0
13683 6476 6591 0
13683 6478 6634 0
13683 6478 6546 6632 0
13683 6478 6547 6630 0
13683 6478 6549 6628 0
13683 6478 6551 6626 0
13683 6478 6553 6624 0
13683 6478 6555 6622 0
13683 6478 6557 6620 0
13683 6478 6559 6618 0
13683 6478 6561 6616 0
13683 6478 6563 6614 0
13683 6478 6565 6612 0
13683 6478 6567 6610 0
13683 6478 6569 6608 0
13683 6478 6571 6606 0
13683 6478 6573 6604 0
13683 6478 6575 6602 0
13683 6478 6577 6600 0
13683 6478 6579 6598 0
13683 6478 6581 6596 0
13683 6478 6583 6594 0
13683 6478 6585 6593 0
13683 6478 6587 0
13683 6478 6589 0
13683 6478 6591 0
13683 6480 6632 0
13683 6480 6546 6630 0
13683 6480 6547 6628 0
13683 6480 6549 6626 0
13683 6480 6551 6624 0
13683 6480 6553 6622 0
13683 6480 6555 6620 0
13683 6480 6557 6618 0
13683 6480 6559 6616 0
13683 6480 6561 6614 0
13683 6480 6563 6612 0
13683 6480 6565 6610 0
13683 6480 6567 6608 0
13683 6480 6569 6606 0
13683 6480 6571 6604 0
13683 6480 6573 6602 0
13683 6480 6575 6600 0
13683 6480 6577 6598 0
13683 6480 6579 6596 0
13683 6480 6581 6594 0
13683 6480 6583 6593 0
13683 6480 6585 0
13683 6480 6587 0
13683 6480 6589 0
13683 6480 6591 0
13683 6482 6630 0
13683 6482 6546 6628 0
13683 6482 6547 6626 0
13683 6482 6549 6624 0
13683 6482 6551 6622 0
13683 6482 6553 6620 0
13683 6482 6555 6618 0
13683 6482 6557 6616 0
13683 6482 6559 6614 0
13683 6482 6561 6612 0
13683 6482 6563 6610 0
13683 6482 6565 6608 0
13683 6482 6567 6606 0
13683 6482 6569 6604 0
13683 6482 6571 6602 0
13683 6482 6573 6600 0
13683 6482 6575 6598 0
13683 6482 6577 6596 0
13683 6482 6579 6594 0
13683 6482 6581 6593 0
13683 6482 6583 0
13683 6482 6585 0
13683 6482 6587 0
13683 6482 6589 0
13683 6482 6591 0
c (((aux588 + aux591 + aux592)<=36)=tv=SATLiteral(13684))
-13684 6787 6888 0
-13684 6789 6886 0
-13684 6791 6884 0
-13684 6793 6882 0
-13684 6795 6880 0
-13684 6797 6878 0
-13684 6799 6876 0
-13684 6801 6874 0
-13684 6803 6872 0
-13684 6805 6870 0
-13684 6807 6868 0
-13684 6809 6866 0
-13684 6811 6864 0
-13684 6813 6862 0
-13684 6815 6860 0
-13684 6817 6858 0
-13684 6819 6856 0
-13684 6821 6854 0
-13684 6823 6852 0
-13684 6825 6850 0
-13684 6687 6785 6888 0
-13684 6687 6787 6886 0
-13684 6687 6789 6884 0
-13684 6687 6791 6882 0
-13684 6687 6793 6880 0
-13684 6687 6795 6878 0
-13684 6687 6797 6876 0
-13684 6687 6799 6874 0
-13684 6687 6801 6872 0
-13684 6687 6803 6870 0
-13684 6687 6805 6868 0
-13684 6687 6807 6866 0
-13684 6687 6809 6864 0
-13684 6687 6811 6862 0
-13684 6687 6813 6860 0
-13684 6687 6815 6858 0
-13684 6687 6817 6856 0
-13684 6687 6819 6854 0
-13684 6687 6821 6852 0
-13684 6687 6823 6850 0
-13684 6687 6825 6848 0
-13684 6688 6783 6888 0
-13684 6688 6785 6886 0
-13684 6688 6787 6884 0
-13684 6688 6789 6882 0
-13684 6688 6791 6880 0
-13684 6688 6793 6878 0
-13684 6688 6795 6876 0
-13684 6688 6797 6874 0
-13684 6688 6799 6872 0
-13684 6688 6801 6870 0
-13684 6688 6803 6868 0
-13684 6688 6805 6866 0
-13684 6688 6807 6864 0
-13684 6688 6809 6862 0
-13684 6688 6811 6860 0
-13684 6688 6813 6858 0
-13684 6688 6815 6856 0
-13684 6688 6817 6854 0
-13684 6688 6819 6852 0
-13684 6688 6821 6850 0
-13684 6688 6823 6848 0
-13684 6688 6825 6846 0
-13684 6690 6781 6888 0
-13684 6690 6783 6886 0
-13684 6690 6785 6884 0
-13684 6690 6787 6882 0
-13684 6690 6789 6880 0
-13684 6690 6791 6878 0
-13684 6690 6793 6876 0
-13684 6690 6795 6874 0
-13684 6690 6797 6872 0
-13684 6690 6799 6870 0
-13684 6690 6801 6868 0
-13684 6690 6803 6866 0
-13684 6690 6805 6864 0
-13684 6690 6807 6862 0
-13684 6690 6809 6860 0
-13684 6690 6811 6858 0
-13684 6690 6813 6856 0
-13684 6690 6815 6854 0
-13684 6690 6817 6852 0
-13684 6690 6819 6850 0
-13684 6690 6821 6848 0
-13684 6690 6823 6846 0
-13684 6690 6825 6844 0
-13684 6692 6780 6888 0
-13684 6692 6781 6886 0
-13684 6692 6783 6884 0
-13684 6692 6785 6882 0
-13684 6692 6787 6880 0
-13684 6692 6789 6878 0
-13684 6692 6791 6876 0
-13684 6692 6793 6874 0
-13684 6692 6795 6872 0
-13684 6692 6797 6870 0
-13684 6692 6799 6868 0
-13684 6692 6801 6866 0
-13684 6692 6803 6864 0
-13684 6692 6805 6862 0
-13684 6692 6807 6860 0
-13684 6692 6809 6858 0
-13684 6692 6811 6856 0
-13684 6692 6813 6854 0
-13684 6692 6815 6852 0
-13684 6692 6817 6850 0
-13684 6692 6819 6848 0
-13684 6692 6821 6846 0
-13684 6692 6823 6844 0
-13684 6692 6825 6842 0
-13684 6694 6888 0
-13684 6694 6780 6886 0
-13684 6694 6781 6884 0
-13684 6694 6783 6882 0
-13684 6694 6785 6880 0
-13684 6694 6787 6878 0
-13684 6694 6789 6876 0
-13684 6694 6791 6874 0
-13684 6694 6793 6872 0
-13684 6694 6795 6870 0
-13684 6694 6797 6868 0
-13684 6694 6799 6866 0
-13684 6694 6801 6864 0
-13684 6694 6803 6862 0
-13684 6694 6805 6860 0
-13684 6694 6807 6858 0
-13684 6694 6809 6856 0
-13684 6694 6811 6854 0
-13684 6694 6813 6852 0
-13684 6694 6815 6850 0
-13684 6694 6817 6848 0
-13684 6694 6819 6846 0
-13684 6694 6821 6844 0
-13684 6694 6823 6842 0
-13684 6694 6825 6840 0
-13684 6696 6886 0
-13684 6696 6780 6884 0
-13684 6696 6781 6882 0
-13684 6696 6783 6880 0
-13684 6696 6785 6878 0
-13684 6696 6787 6876 0
-13684 6696 6789 6874 0
-13684 6696 6791 6872 0
-13684 6696 6793 6870 0
-13684 6696 6795 6868 0
-13684 6696 6797 6866 0
-13684 6696 6799 6864 0
-13684 6696 6801 6862 0
-13684 6696 6803 6860 0
-13684 6696 6805 6858 0
-13684 6696 6807 6856 0
-13684 6696 6809 6854 0
-13684 6696 6811 6852 0
-13684 6696 6813 6850 0
-13684 6696 6815 6848 0
-13684 6696 6817 6846 0
-13684 6696 6819 6844 0
-13684 6696 6821 6842 0
-13684 6696 6823 6840 0
-13684 6696 6825 6838 0
-13684 6698 6884 0
-13684 6698 6780 6882 0
-13684 6698 6781 6880 0
-13684 6698 6783 6878 0
-13684 6698 6785 6876 0
-13684 6698 6787 6874 0
-13684 6698 6789 6872 0
-13684 6698 6791 6870 0
-13684 6698 6793 6868 0
-13684 6698 6795 6866 0
-13684 6698 6797 6864 0
-13684 6698 6799 6862 0
-13684 6698 6801 6860 0
-13684 6698 6803 6858 0
-13684 6698 6805 6856 0
-13684 6698 6807 6854 0
-13684 6698 6809 6852 0
-13684 6698 6811 6850 0
-13684 6698 6813 6848 0
-13684 6698 6815 6846 0
-13684 6698 6817 6844 0
-13684 6698 6819 6842 0
-13684 6698 6821 6840 0
-13684 6698 6823 6838 0
-13684 6698 6825 6836 0
-13684 6700 6882 0
-13684 6700 6780 6880 0
-13684 6700 6781 6878 0
-13684 6700 6783 6876 0
-13684 6700 6785 6874 0
-13684 6700 6787 6872 0
-13684 6700 6789 6870 0
-13684 6700 6791 6868 0
-13684 6700 6793 6866 0
-13684 6700 6795 6864 0
-13684 6700 6797 6862 0
-13684 6700 6799 6860 0
-13684 6700 6801 6858 0
-13684 6700 6803 6856 0
-13684 6700 6805 6854 0
-13684 6700 6807 6852 0
-13684 6700 6809 6850 0
-13684 6700 6811 6848 0
-13684 6700 6813 6846 0
-13684 6700 6815 6844 0
-13684 6700 6817 6842 0
-13684 6700 6819 6840 0
-13684 6700 6821 6838 0
-13684 6700 6823 6836 0
-13684 6700 6825 6834 0
-13684 6702 6880 0
-13684 6702 6780 6878 0
-13684 6702 6781 6876 0
-13684 6702 6783 6874 0
-13684 6702 6785 6872 0
-13684 6702 6787 6870 0
-13684 6702 6789 6868 0
-13684 6702 6791 6866 0
-13684 6702 6793 6864 0
-13684 6702 6795 6862 0
-13684 6702 6797 6860 0
-13684 6702 6799 6858 0
-13684 6702 6801 6856 0
-13684 6702 6803 6854 0
-13684 6702 6805 6852 0
-13684 6702 6807 6850 0
-13684 6702 6809 6848 0
-13684 6702 6811 6846 0
-13684 6702 6813 6844 0
-13684 6702 6815 6842 0
-13684 6702 6817 6840 0
-13684 6702 6819 6838 0
-13684 6702 6821 6836 0
-13684 6702 6823 6834 0
-13684 6702 6825 6832 0
-13684 6704 6878 0
-13684 6704 6780 6876 0
-13684 6704 6781 6874 0
-13684 6704 6783 6872 0
-13684 6704 6785 6870 0
-13684 6704 6787 6868 0
-13684 6704 6789 6866 0
-13684 6704 6791 6864 0
-13684 6704 6793 6862 0
-13684 6704 6795 6860 0
-13684 6704 6797 6858 0
-13684 6704 6799 6856 0
-13684 6704 6801 6854 0
-13684 6704 6803 6852 0
-13684 6704 6805 6850 0
-13684 6704 6807 6848 0
-13684 6704 6809 6846 0
-13684 6704 6811 6844 0
-13684 6704 6813 6842 0
-13684 6704 6815 6840 0
-13684 6704 6817 6838 0
-13684 6704 6819 6836 0
-13684 6704 6821 6834 0
-13684 6704 6823 6832 0
-13684 6704 6825 6830 0
-13684 6706 6876 0
-13684 6706 6780 6874 0
-13684 6706 6781 6872 0
-13684 6706 6783 6870 0
-13684 6706 6785 6868 0
-13684 6706 6787 6866 0
-13684 6706 6789 6864 0
-13684 6706 6791 6862 0
-13684 6706 6793 6860 0
-13684 6706 6795 6858 0
-13684 6706 6797 6856 0
-13684 6706 6799 6854 0
-13684 6706 6801 6852 0
-13684 6706 6803 6850 0
-13684 6706 6805 6848 0
-13684 6706 6807 6846 0
-13684 6706 6809 6844 0
-13684 6706 6811 6842 0
-13684 6706 6813 6840 0
-13684 6706 6815 6838 0
-13684 6706 6817 6836 0
-13684 6706 6819 6834 0
-13684 6706 6821 6832 0
-13684 6706 6823 6830 0
-13684 6706 6825 6828 0
-13684 6708 6874 0
-13684 6708 6780 6872 0
-13684 6708 6781 6870 0
-13684 6708 6783 6868 0
-13684 6708 6785 6866 0
-13684 6708 6787 6864 0
-13684 6708 6789 6862 0
-13684 6708 6791 6860 0
-13684 6708 6793 6858 0
-13684 6708 6795 6856 0
-13684 6708 6797 6854 0
-13684 6708 6799 6852 0
-13684 6708 6801 6850 0
-13684 6708 6803 6848 0
-13684 6708 6805 6846 0
-13684 6708 6807 6844 0
-13684 6708 6809 6842 0
-13684 6708 6811 6840 0
-13684 6708 6813 6838 0
-13684 6708 6815 6836 0
-13684 6708 6817 6834 0
-13684 6708 6819 6832 0
-13684 6708 6821 6830 0
-13684 6708 6823 6828 0
-13684 6708 6825 6827 0
-13684 6710 6872 0
-13684 6710 6780 6870 0
-13684 6710 6781 6868 0
-13684 6710 6783 6866 0
-13684 6710 6785 6864 0
-13684 6710 6787 6862 0
-13684 6710 6789 6860 0
-13684 6710 6791 6858 0
-13684 6710 6793 6856 0
-13684 6710 6795 6854 0
-13684 6710 6797 6852 0
-13684 6710 6799 6850 0
-13684 6710 6801 6848 0
-13684 6710 6803 6846 0
-13684 6710 6805 6844 0
-13684 6710 6807 6842 0
-13684 6710 6809 6840 0
-13684 6710 6811 6838 0
-13684 6710 6813 6836 0
-13684 6710 6815 6834 0
-13684 6710 6817 6832 0
-13684 6710 6819 6830 0
-13684 6710 6821 6828 0
-13684 6710 6823 6827 0
-13684 6710 6825 0
-13684 6712 6870 0
-13684 6712 6780 6868 0
-13684 6712 6781 6866 0
-13684 6712 6783 6864 0
-13684 6712 6785 6862 0
-13684 6712 6787 6860 0
-13684 6712 6789 6858 0
-13684 6712 6791 6856 0
-13684 6712 6793 6854 0
-13684 6712 6795 6852 0
-13684 6712 6797 6850 0
-13684 6712 6799 6848 0
-13684 6712 6801 6846 0
-13684 6712 6803 6844 0
-13684 6712 6805 6842 0
-13684 6712 6807 6840 0
-13684 6712 6809 6838 0
-13684 6712 6811 6836 0
-13684 6712 6813 6834 0
-13684 6712 6815 6832 0
-13684 6712 6817 6830 0
-13684 6712 6819 6828 0
-13684 6712 6821 6827 0
-13684 6712 6823 0
-13684 6712 6825 0
-13684 6714 6868 0
-13684 6714 6780 6866 0
-13684 6714 6781 6864 0
-13684 6714 6783 6862 0
-13684 6714 6785 6860 0
-13684 6714 6787 6858 0
-13684 6714 6789 6856 0
-13684 6714 6791 6854 0
-13684 6714 6793 6852 0
-13684 6714 6795 6850 0
-13684 6714 6797 6848 0
-13684 6714 6799 6846 0
-13684 6714 6801 6844 0
-13684 6714 6803 6842 0
-13684 6714 6805 6840 0
-13684 6714 6807 6838 0
-13684 6714 6809 6836 0
-13684 6714 6811 6834 0
-13684 6714 6813 6832 0
-13684 6714 6815 6830 0
-13684 6714 6817 6828 0
-13684 6714 6819 6827 0
-13684 6714 6821 0
-13684 6714 6823 0
-13684 6714 6825 0
-13684 6716 6866 0
-13684 6716 6780 6864 0
-13684 6716 6781 6862 0
-13684 6716 6783 6860 0
-13684 6716 6785 6858 0
-13684 6716 6787 6856 0
-13684 6716 6789 6854 0
-13684 6716 6791 6852 0
-13684 6716 6793 6850 0
-13684 6716 6795 6848 0
-13684 6716 6797 6846 0
-13684 6716 6799 6844 0
-13684 6716 6801 6842 0
-13684 6716 6803 6840 0
-13684 6716 6805 6838 0
-13684 6716 6807 6836 0
-13684 6716 6809 6834 0
-13684 6716 6811 6832 0
-13684 6716 6813 6830 0
-13684 6716 6815 6828 0
-13684 6716 6817 6827 0
-13684 6716 6819 0
-13684 6716 6821 0
-13684 6716 6823 0
-13684 6716 6825 0
13684 -6819 -6827 0
13684 -6817 -6828 0
13684 -6815 -6830 0
13684 -6813 -6832 0
13684 -6811 -6834 0
13684 -6809 -6836 0
13684 -6807 -6838 0
13684 -6805 -6840 0
13684 -6803 -6842 0
13684 -6801 -6844 0
13684 -6799 -6846 0
13684 -6797 -6848 0
13684 -6795 -6850 0
13684 -6793 -6852 0
13684 -6791 -6854 0
13684 -6789 -6856 0
13684 -6787 -6858 0
13684 -6785 -6860 0
13684 -6783 -6862 0
13684 -6781 -6864 0
13684 -6780 -6866 0
13684 -6716 -6821 -6827 0
13684 -6716 -6819 -6828 0
13684 -6716 -6817 -6830 0
13684 -6716 -6815 -6832 0
13684 -6716 -6813 -6834 0
13684 -6716 -6811 -6836 0
13684 -6716 -6809 -6838 0
13684 -6716 -6807 -6840 0
13684 -6716 -6805 -6842 0
13684 -6716 -6803 -6844 0
13684 -6716 -6801 -6846 0
13684 -6716 -6799 -6848 0
13684 -6716 -6797 -6850 0
13684 -6716 -6795 -6852 0
13684 -6716 -6793 -6854 0
13684 -6716 -6791 -6856 0
13684 -6716 -6789 -6858 0
13684 -6716 -6787 -6860 0
13684 -6716 -6785 -6862 0
13684 -6716 -6783 -6864 0
13684 -6716 -6781 -6866 0
13684 -6716 -6780 -6868 0
13684 -6714 -6823 -6827 0
13684 -6714 -6821 -6828 0
13684 -6714 -6819 -6830 0
13684 -6714 -6817 -6832 0
13684 -6714 -6815 -6834 0
13684 -6714 -6813 -6836 0
13684 -6714 -6811 -6838 0
13684 -6714 -6809 -6840 0
13684 -6714 -6807 -6842 0
13684 -6714 -6805 -6844 0
13684 -6714 -6803 -6846 0
13684 -6714 -6801 -6848 0
13684 -6714 -6799 -6850 0
13684 -6714 -6797 -6852 0
13684 -6714 -6795 -6854 0
13684 -6714 -6793 -6856 0
13684 -6714 -6791 -6858 0
13684 -6714 -6789 -6860 0
13684 -6714 -6787 -6862 0
13684 -6714 -6785 -6864 0
13684 -6714 -6783 -6866 0
13684 -6714 -6781 -6868 0
13684 -6714 -6780 -6870 0
13684 -6712 -6825 -6827 0
13684 -6712 -6823 -6828 0
13684 -6712 -6821 -6830 0
13684 -6712 -6819 -6832 0
13684 -6712 -6817 -6834 0
13684 -6712 -6815 -6836 0
13684 -6712 -6813 -6838 0
13684 -6712 -6811 -6840 0
13684 -6712 -6809 -6842 0
13684 -6712 -6807 -6844 0
13684 -6712 -6805 -6846 0
13684 -6712 -6803 -6848 0
13684 -6712 -6801 -6850 0
13684 -6712 -6799 -6852 0
13684 -6712 -6797 -6854 0
13684 -6712 -6795 -6856 0
13684 -6712 -6793 -6858 0
13684 -6712 -6791 -6860 0
13684 -6712 -6789 -6862 0
13684 -6712 -6787 -6864 0
13684 -6712 -6785 -6866 0
13684 -6712 -6783 -6868 0
13684 -6712 -6781 -6870 0
13684 -6712 -6780 -6872 0
13684 -6710 -6827 0
13684 -6710 -6825 -6828 0
13684 -6710 -6823 -6830 0
13684 -6710 -6821 -6832 0
13684 -6710 -6819 -6834 0
13684 -6710 -6817 -6836 0
13684 -6710 -6815 -6838 0
13684 -6710 -6813 -6840 0
13684 -6710 -6811 -6842 0
13684 -6710 -6809 -6844 0
13684 -6710 -6807 -6846 0
13684 -6710 -6805 -6848 0
13684 -6710 -6803 -6850 0
13684 -6710 -6801 -6852 0
13684 -6710 -6799 -6854 0
13684 -6710 -6797 -6856 0
13684 -6710 -6795 -6858 0
13684 -6710 -6793 -6860 0
13684 -6710 -6791 -6862 0
13684 -6710 -6789 -6864 0
13684 -6710 -6787 -6866 0
13684 -6710 -6785 -6868 0
13684 -6710 -6783 -6870 0
13684 -6710 -6781 -6872 0
13684 -6710 -6780 -6874 0
13684 -6708 -6828 0
13684 -6708 -6825 -6830 0
13684 -6708 -6823 -6832 0
13684 -6708 -6821 -6834 0
13684 -6708 -6819 -6836 0
13684 -6708 -6817 -6838 0
13684 -6708 -6815 -6840 0
13684 -6708 -6813 -6842 0
13684 -6708 -6811 -6844 0
13684 -6708 -6809 -6846 0
13684 -6708 -6807 -6848 0
13684 -6708 -6805 -6850 0
13684 -6708 -6803 -6852 0
13684 -6708 -6801 -6854 0
13684 -6708 -6799 -6856 0
13684 -6708 -6797 -6858 0
13684 -6708 -6795 -6860 0
13684 -6708 -6793 -6862 0
13684 -6708 -6791 -6864 0
13684 -6708 -6789 -6866 0
13684 -6708 -6787 -6868 0
13684 -6708 -6785 -6870 0
13684 -6708 -6783 -6872 0
13684 -6708 -6781 -6874 0
13684 -6708 -6780 -6876 0
13684 -6706 -6830 0
13684 -6706 -6825 -6832 0
13684 -6706 -6823 -6834 0
13684 -6706 -6821 -6836 0
13684 -6706 -6819 -6838 0
13684 -6706 -6817 -6840 0
13684 -6706 -6815 -6842 0
13684 -6706 -6813 -6844 0
13684 -6706 -6811 -6846 0
13684 -6706 -6809 -6848 0
13684 -6706 -6807 -6850 0
13684 -6706 -6805 -6852 0
13684 -6706 -6803 -6854 0
13684 -6706 -6801 -6856 0
13684 -6706 -6799 -6858 0
13684 -6706 -6797 -6860 0
13684 -6706 -6795 -6862 0
13684 -6706 -6793 -6864 0
13684 -6706 -6791 -6866 0
13684 -6706 -6789 -6868 0
13684 -6706 -6787 -6870 0
13684 -6706 -6785 -6872 0
13684 -6706 -6783 -6874 0
13684 -6706 -6781 -6876 0
13684 -6706 -6780 -6878 0
13684 -6704 -6832 0
13684 -6704 -6825 -6834 0
13684 -6704 -6823 -6836 0
13684 -6704 -6821 -6838 0
13684 -6704 -6819 -6840 0
13684 -6704 -6817 -6842 0
13684 -6704 -6815 -6844 0
13684 -6704 -6813 -6846 0
13684 -6704 -6811 -6848 0
13684 -6704 -6809 -6850 0
13684 -6704 -6807 -6852 0
13684 -6704 -6805 -6854 0
13684 -6704 -6803 -6856 0
13684 -6704 -6801 -6858 0
13684 -6704 -6799 -6860 0
13684 -6704 -6797 -6862 0
13684 -6704 -6795 -6864 0
13684 -6704 -6793 -6866 0
13684 -6704 -6791 -6868 0
13684 -6704 -6789 -6870 0
13684 -6704 -6787 -6872 0
13684 -6704 -6785 -6874 0
13684 -6704 -6783 -6876 0
13684 -6704 -6781 -6878 0
13684 -6704 -6780 -6880 0
13684 -6702 -6834 0
13684 -6702 -6825 -6836 0
13684 -6702 -6823 -6838 0
13684 -6702 -6821 -6840 0
13684 -6702 -6819 -6842 0
13684 -6702 -6817 -6844 0
13684 -6702 -6815 -6846 0
13684 -6702 -6813 -6848 0
13684 -6702 -6811 -6850 0
13684 -6702 -6809 -6852 0
13684 -6702 -6807 -6854 0
13684 -6702 -6805 -6856 0
13684 -6702 -6803 -6858 0
13684 -6702 -6801 -6860 0
13684 -6702 -6799 -6862 0
13684 -6702 -6797 -6864 0
13684 -6702 -6795 -6866 0
13684 -6702 -6793 -6868 0
13684 -6702 -6791 -6870 0
13684 -6702 -6789 -6872 0
13684 -6702 -6787 -6874 0
13684 -6702 -6785 -6876 0
13684 -6702 -6783 -6878 0
13684 -6702 -6781 -6880 0
13684 -6702 -6780 -6882 0
13684 -6700 -6836 0
13684 -6700 -6825 -6838 0
13684 -6700 -6823 -6840 0
13684 -6700 -6821 -6842 0
13684 -6700 -6819 -6844 0
13684 -6700 -6817 -6846 0
13684 -6700 -6815 -6848 0
13684 -6700 -6813 -6850 0
13684 -6700 -6811 -6852 0
13684 -6700 -6809 -6854 0
13684 -6700 -6807 -6856 0
13684 -6700 -6805 -6858 0
13684 -6700 -6803 -6860 0
13684 -6700 -6801 -6862 0
13684 -6700 -6799 -6864 0
13684 -6700 -6797 -6866 0
13684 -6700 -6795 -6868 0
13684 -6700 -6793 -6870 0
13684 -6700 -6791 -6872 0
13684 -6700 -6789 -6874 0
13684 -6700 -6787 -6876 0
13684 -6700 -6785 -6878 0
13684 -6700 -6783 -6880 0
13684 -6700 -6781 -6882 0
13684 -6700 -6780 -6884 0
13684 -6698 -6838 0
13684 -6698 -6825 -6840 0
13684 -6698 -6823 -6842 0
13684 -6698 -6821 -6844 0
13684 -6698 -6819 -6846 0
13684 -6698 -6817 -6848 0
13684 -6698 -6815 -6850 0
13684 -6698 -6813 -6852 0
13684 -6698 -6811 -6854 0
13684 -6698 -6809 -6856 0
13684 -6698 -6807 -6858 0
13684 -6698 -6805 -6860 0
13684 -6698 -6803 -6862 0
13684 -6698 -6801 -6864 0
13684 -6698 -6799 -6866 0
13684 -6698 -6797 -6868 0
13684 -6698 -6795 -6870 0
13684 -6698 -6793 -6872 0
13684 -6698 -6791 -6874 0
13684 -6698 -6789 -6876 0
13684 -6698 -6787 -6878 0
13684 -6698 -6785 -6880 0
13684 -6698 -6783 -6882 0
13684 -6698 -6781 -6884 0
13684 -6698 -6780 -6886 0
13684 -6696 -6840 0
13684 -6696 -6825 -6842 0
13684 -6696 -6823 -6844 0
13684 -6696 -6821 -6846 0
13684 -6696 -6819 -6848 0
13684 -6696 -6817 -6850 0
13684 -6696 -6815 -6852 0
13684 -6696 -6813 -6854 0
13684 -6696 -6811 -6856 0
13684 -6696 -6809 -6858 0
13684 -6696 -6807 -6860 0
13684 -6696 -6805 -6862 0
13684 -6696 -6803 -6864 0
13684 -6696 -6801 -6866 0
13684 -6696 -6799 -6868 0
13684 -6696 -6797 -6870 0
13684 -6696 -6795 -6872 0
13684 -6696 -6793 -6874 0
13684 -6696 -6791 -6876 0
13684 -6696 -6789 -6878 0
13684 -6696 -6787 -6880 0
13684 -6696 -6785 -6882 0
13684 -6696 -6783 -6884 0
13684 -6696 -6781 -6886 0
13684 -6696 -6780 -6888 0
13684 -6694 -6842 0
13684 -6694 -6825 -6844 0
13684 -6694 -6823 -6846 0
13684 -6694 -6821 -6848 0
13684 -6694 -6819 -6850 0
13684 -6694 -6817 -6852 0
13684 -6694 -6815 -6854 0
13684 -6694 -6813 -6856 0
13684 -6694 -6811 -6858 0
13684 -6694 -6809 -6860 0
13684 -6694 -6807 -6862 0
13684 -6694 -6805 -6864 0
13684 -6694 -6803 -6866 0
13684 -6694 -6801 -6868 0
13684 -6694 -6799 -6870 0
13684 -6694 -6797 -6872 0
13684 -6694 -6795 -6874 0
13684 -6694 -6793 -6876 0
13684 -6694 -6791 -6878 0
13684 -6694 -6789 -6880 0
13684 -6694 -6787 -6882 0
13684 -6694 -6785 -6884 0
13684 -6694 -6783 -6886 0
13684 -6694 -6781 -6888 0
13684 -6694 -6780 0
13684 -6692 -6844 0
13684 -6692 -6825 -6846 0
13684 -6692 -6823 -6848 0
13684 -6692 -6821 -6850 0
13684 -6692 -6819 -6852 0
13684 -6692 -6817 -6854 0
13684 -6692 -6815 -6856 0
13684 -6692 -6813 -6858 0
13684 -6692 -6811 -6860 0
13684 -6692 -6809 -6862 0
13684 -6692 -6807 -6864 0
13684 -6692 -6805 -6866 0
13684 -6692 -6803 -6868 0
13684 -6692 -6801 -6870 0
13684 -6692 -6799 -6872 0
13684 -6692 -6797 -6874 0
13684 -6692 -6795 -6876 0
13684 -6692 -6793 -6878 0
13684 -6692 -6791 -6880 0
13684 -6692 -6789 -6882 0
13684 -6692 -6787 -6884 0
13684 -6692 -6785 -6886 0
13684 -6692 -6783 -6888 0
13684 -6692 -6781 0
13684 -6692 -6780 0
13684 -6690 -6846 0
13684 -6690 -6825 -6848 0
13684 -6690 -6823 -6850 0
13684 -6690 -6821 -6852 0
13684 -6690 -6819 -6854 0
13684 -6690 -6817 -6856 0
13684 -6690 -6815 -6858 0
13684 -6690 -6813 -6860 0
13684 -6690 -6811 -6862 0
13684 -6690 -6809 -6864 0
13684 -6690 -6807 -6866 0
13684 -6690 -6805 -6868 0
13684 -6690 -6803 -6870 0
13684 -6690 -6801 -6872 0
13684 -6690 -6799 -6874 0
13684 -6690 -6797 -6876 0
13684 -6690 -6795 -6878 0
13684 -6690 -6793 -6880 0
13684 -6690 -6791 -6882 0
13684 -6690 -6789 -6884 0
13684 -6690 -6787 -6886 0
13684 -6690 -6785 -6888 0
13684 -6690 -6783 0
13684 -6690 -6781 0
13684 -6690 -6780 0
13684 -6688 -6848 0
13684 -6688 -6825 -6850 0
13684 -6688 -6823 -6852 0
13684 -6688 -6821 -6854 0
13684 -6688 -6819 -6856 0
13684 -6688 -6817 -6858 0
13684 -6688 -6815 -6860 0
13684 -6688 -6813 -6862 0
13684 -6688 -6811 -6864 0
13684 -6688 -6809 -6866 0
13684 -6688 -6807 -6868 0
13684 -6688 -6805 -6870 0
13684 -6688 -6803 -6872 0
13684 -6688 -6801 -6874 0
13684 -6688 -6799 -6876 0
13684 -6688 -6797 -6878 0
13684 -6688 -6795 -6880 0
13684 -6688 -6793 -6882 0
13684 -6688 -6791 -6884 0
13684 -6688 -6789 -6886 0
13684 -6688 -6787 -6888 0
13684 -6688 -6785 0
13684 -6688 -6783 0
13684 -6688 -6781 0
13684 -6688 -6780 0
13684 -6687 -6850 0
13684 -6687 -6825 -6852 0
13684 -6687 -6823 -6854 0
13684 -6687 -6821 -6856 0
13684 -6687 -6819 -6858 0
13684 -6687 -6817 -6860 0
13684 -6687 -6815 -6862 0
13684 -6687 -6813 -6864 0
13684 -6687 -6811 -6866 0
13684 -6687 -6809 -6868 0
13684 -6687 -6807 -6870 0
13684 -6687 -6805 -6872 0
13684 -6687 -6803 -6874 0
13684 -6687 -6801 -6876 0
13684 -6687 -6799 -6878 0
13684 -6687 -6797 -6880 0
13684 -6687 -6795 -6882 0
13684 -6687 -6793 -6884 0
13684 -6687 -6791 -6886 0
13684 -6687 -6789 -6888 0
13684 -6687 -6787 0
13684 -6687 -6785 0
13684 -6687 -6783 0
13684 -6687 -6781 0
13684 -6687 -6780 0
c ((36<=(aux588 + aux591 + aux592))=tv=SATLiteral(13685))
-13685 -6817 -6827 0
-13685 -6815 -6828 0
-13685 -6813 -6830 0
-13685 -6811 -6832 0
-13685 -6809 -6834 0
-13685 -6807 -6836 0
-13685 -6805 -6838 0
-13685 -6803 -6840 0
-13685 -6801 -6842 0
-13685 -6799 -6844 0
-13685 -6797 -6846 0
-13685 -6795 -6848 0
-13685 -6793 -6850 0
-13685 -6791 -6852 0
-13685 -6789 -6854 0
-13685 -6787 -6856 0
-13685 -6785 -6858 0
-13685 -6783 -6860 0
-13685 -6781 -6862 0
-13685 -6780 -6864 0
-13685 -6716 -6819 -6827 0
-13685 -6716 -6817 -6828 0
-13685 -6716 -6815 -6830 0
-13685 -6716 -6813 -6832 0
-13685 -6716 -6811 -6834 0
-13685 -6716 -6809 -6836 0
-13685 -6716 -6807 -6838 0
-13685 -6716 -6805 -6840 0
-13685 -6716 -6803 -6842 0
-13685 -6716 -6801 -6844 0
-13685 -6716 -6799 -6846 0
-13685 -6716 -6797 -6848 0
-13685 -6716 -6795 -6850 0
-13685 -6716 -6793 -6852 0
-13685 -6716 -6791 -6854 0
-13685 -6716 -6789 -6856 0
-13685 -6716 -6787 -6858 0
-13685 -6716 -6785 -6860 0
-13685 -6716 -6783 -6862 0
-13685 -6716 -6781 -6864 0
-13685 -6716 -6780 -6866 0
-13685 -6714 -6821 -6827 0
-13685 -6714 -6819 -6828 0
-13685 -6714 -6817 -6830 0
-13685 -6714 -6815 -6832 0
-13685 -6714 -6813 -6834 0
-13685 -6714 -6811 -6836 0
-13685 -6714 -6809 -6838 0
-13685 -6714 -6807 -6840 0
-13685 -6714 -6805 -6842 0
-13685 -6714 -6803 -6844 0
-13685 -6714 -6801 -6846 0
-13685 -6714 -6799 -6848 0
-13685 -6714 -6797 -6850 0
-13685 -6714 -6795 -6852 0
-13685 -6714 -6793 -6854 0
-13685 -6714 -6791 -6856 0
-13685 -6714 -6789 -6858 0
-13685 -6714 -6787 -6860 0
-13685 -6714 -6785 -6862 0
-13685 -6714 -6783 -6864 0
-13685 -6714 -6781 -6866 0
-13685 -6714 -6780 -6868 0
-13685 -6712 -6823 -6827 0
-13685 -6712 -6821 -6828 0
-13685 -6712 -6819 -6830 0
-13685 -6712 -6817 -6832 0
-13685 -6712 -6815 -6834 0
-13685 -6712 -6813 -6836 0
-13685 -6712 -6811 -6838 0
-13685 -6712 -6809 -6840 0
-13685 -6712 -6807 -6842 0
-13685 -6712 -6805 -6844 0
-13685 -6712 -6803 -6846 0
-13685 -6712 -6801 -6848 0
-13685 -6712 -6799 -6850 0
-13685 -6712 -6797 -6852 0
-13685 -6712 -6795 -6854 0
-13685 -6712 -6793 -6856 0
-13685 -6712 -6791 -6858 0
-13685 -6712 -6789 -6860 0
-13685 -6712 -6787 -6862 0
-13685 -6712 -6785 -6864 0
-13685 -6712 -6783 -6866 0
-13685 -6712 -6781 -6868 0
-13685 -6712 -6780 -6870 0
-13685 -6710 -6825 -6827 0
-13685 -6710 -6823 -6828 0
-13685 -6710 -6821 -6830 0
-13685 -6710 -6819 -6832 0
-13685 -6710 -6817 -6834 0
-13685 -6710 -6815 -6836 0
-13685 -6710 -6813 -6838 0
-13685 -6710 -6811 -6840 0
-13685 -6710 -6809 -6842 0
-13685 -6710 -6807 -6844 0
-13685 -6710 -6805 -6846 0
-13685 -6710 -6803 -6848 0
-13685 -6710 -6801 -6850 0
-13685 -6710 -6799 -6852 0
-13685 -6710 -6797 -6854 0
-13685 -6710 -6795 -6856 0
-13685 -6710 -6793 -6858 0
-13685 -6710 -6791 -6860 0
-13685 -6710 -6789 -6862 0
-13685 -6710 -6787 -6864 0
-13685 -6710 -6785 -6866 0
-13685 -6710 -6783 -6868 0
-13685 -6710 -6781 -6870 0
-13685 -6710 -6780 -6872 0
-13685 -6708 -6827 0
-13685 -6708 -6825 -6828 0
-13685 -6708 -6823 -6830 0
-13685 -6708 -6821 -6832 0
-13685 -6708 -6819 -6834 0
-13685 -6708 -6817 -6836 0
-13685 -6708 -6815 -6838 0
-13685 -6708 -6813 -6840 0
-13685 -6708 -6811 -6842 0
-13685 -6708 -6809 -6844 0
-13685 -6708 -6807 -6846 0
-13685 -6708 -6805 -6848 0
-13685 -6708 -6803 -6850 0
-13685 -6708 -6801 -6852 0
-13685 -6708 -6799 -6854 0
-13685 -6708 -6797 -6856 0
-13685 -6708 -6795 -6858 0
-13685 -6708 -6793 -6860 0
-13685 -6708 -6791 -6862 0
-13685 -6708 -6789 -6864 0
-13685 -6708 -6787 -6866 0
-13685 -6708 -6785 -6868 0
-13685 -6708 -6783 -6870 0
-13685 -6708 -6781 -6872 0
-13685 -6708 -6780 -6874 0
-13685 -6706 -6828 0
-13685 -6706 -6825 -6830 0
-13685 -6706 -6823 -6832 0
-13685 -6706 -6821 -6834 0
-13685 -6706 -6819 -6836 0
-13685 -6706 -6817 -6838 0
-13685 -6706 -6815 -6840 0
-13685 -6706 -6813 -6842 0
-13685 -6706 -6811 -6844 0
-13685 -6706 -6809 -6846 0
-13685 -6706 -6807 -6848 0
-13685 -6706 -6805 -6850 0
-13685 -6706 -6803 -6852 0
-13685 -6706 -6801 -6854 0
-13685 -6706 -6799 -6856 0
-13685 -6706 -6797 -6858 0
-13685 -6706 -6795 -6860 0
-13685 -6706 -6793 -6862 0
-13685 -6706 -6791 -6864 0
-13685 -6706 -6789 -6866 0
-13685 -6706 -6787 -6868 0
-13685 -6706 -6785 -6870 0
-13685 -6706 -6783 -6872 0
-13685 -6706 -6781 -6874 0
-13685 -6706 -6780 -6876 0
-13685 -6704 -6830 0
-13685 -6704 -6825 -6832 0
-13685 -6704 -6823 -6834 0
-13685 -6704 -6821 -6836 0
-13685 -6704 -6819 -6838 0
-13685 -6704 -6817 -6840 0
-13685 -6704 -6815 -6842 0
-13685 -6704 -6813 -6844 0
-13685 -6704 -6811 -6846 0
-13685 -6704 -6809 -6848 0
-13685 -6704 -6807 -6850 0
-13685 -6704 -6805 -6852 0
-13685 -6704 -6803 -6854 0
-13685 -6704 -6801 -6856 0
-13685 -6704 -6799 -6858 0
-13685 -6704 -6797 -6860 0
-13685 -6704 -6795 -6862 0
-13685 -6704 -6793 -6864 0
-13685 -6704 -6791 -6866 0
-13685 -6704 -6789 -6868 0
-13685 -6704 -6787 -6870 0
-13685 -6704 -6785 -6872 0
-13685 -6704 -6783 -6874 0
-13685 -6704 -6781 -6876 0
-13685 -6704 -6780 -6878 0
-13685 -6702 -6832 0
-13685 -6702 -6825 -6834 0
-13685 -6702 -6823 -6836 0
-13685 -6702 -6821 -6838 0
-13685 -6702 -6819 -6840 0
-13685 -6702 -6817 -6842 0
-13685 -6702 -6815 -6844 0
-13685 -6702 -6813 -6846 0
-13685 -6702 -6811 -6848 0
-13685 -6702 -6809 -6850 0
-13685 -6702 -6807 -6852 0
-13685 -6702 -6805 -6854 0
-13685 -6702 -6803 -6856 0
-13685 -6702 -6801 -6858 0
-13685 -6702 -6799 -6860 0
-13685 -6702 -6797 -6862 0
-13685 -6702 -6795 -6864 0
-13685 -6702 -6793 -6866 0
-13685 -6702 -6791 -6868 0
-13685 -6702 -6789 -6870 0
-13685 -6702 -6787 -6872 0
-13685 -6702 -6785 -6874 0
-13685 -6702 -6783 -6876 0
-13685 -6702 -6781 -6878 0
-13685 -6702 -6780 -6880 0
-13685 -6700 -6834 0
-13685 -6700 -6825 -6836 0
-13685 -6700 -6823 -6838 0
-13685 -6700 -6821 -6840 0
-13685 -6700 -6819 -6842 0
-13685 -6700 -6817 -6844 0
-13685 -6700 -6815 -6846 0
-13685 -6700 -6813 -6848 0
-13685 -6700 -6811 -6850 0
-13685 -6700 -6809 -6852 0
-13685 -6700 -6807 -6854 0
-13685 -6700 -6805 -6856 0
-13685 -6700 -6803 -6858 0
-13685 -6700 -6801 -6860 0
-13685 -6700 -6799 -6862 0
-13685 -6700 -6797 -6864 0
-13685 -6700 -6795 -6866 0
-13685 -6700 -6793 -6868 0
-13685 -6700 -6791 -6870 0
-13685 -6700 -6789 -6872 0
-13685 -6700 -6787 -6874 0
-13685 -6700 -6785 -6876 0
-13685 -6700 -6783 -6878 0
-13685 -6700 -6781 -6880 0
-13685 -6700 -6780 -6882 0
-13685 -6698 -6836 0
-13685 -6698 -6825 -6838 0
-13685 -6698 -6823 -6840 0
-13685 -6698 -6821 -6842 0
-13685 -6698 -6819 -6844 0
-13685 -6698 -6817 -6846 0
-13685 -6698 -6815 -6848 0
-13685 -6698 -6813 -6850 0
-13685 -6698 -6811 -6852 0
-13685 -6698 -6809 -6854 0
-13685 -6698 -6807 -6856 0
-13685 -6698 -6805 -6858 0
-13685 -6698 -6803 -6860 0
-13685 -6698 -6801 -6862 0
-13685 -6698 -6799 -6864 0
-13685 -6698 -6797 -6866 0
-13685 -6698 -6795 -6868 0
-13685 -6698 -6793 -6870 0
-13685 -6698 -6791 -6872 0
-13685 -6698 -6789 -6874 0
-13685 -6698 -6787 -6876 0
-13685 -6698 -6785 -6878 0
-13685 -6698 -6783 -6880 0
-13685 -6698 -6781 -6882 0
-13685 -6698 -6780 -6884 0
-13685 -6696 -6838 0
-13685 -6696 -6825 -6840 0
-13685 -6696 -6823 -6842 0
-13685 -6696 -6821 -6844 0
-13685 -6696 -6819 -6846 0
-13685 -6696 -6817 -6848 0
-13685 -6696 -6815 -6850 0
-13685 -6696 -6813 -6852 0
-13685 -6696 -6811 -6854 0
-13685 -6696 -6809 -6856 0
-13685 -6696 -6807 -6858 0
-13685 -6696 -6805 -6860 0
-13685 -6696 -6803 -6862 0
-13685 -6696 -6801 -6864 0
-13685 -6696 -6799 -6866 0
-13685 -6696 -6797 -6868 0
-13685 -6696 -6795 -6870 0
-13685 -6696 -6793 -6872 0
-13685 -6696 -6791 -6874 0
-13685 -6696 -6789 -6876 0
-13685 -6696 -6787 -6878 0
-13685 -6696 -6785 -6880 0
-13685 -6696 -6783 -6882 0
-13685 -6696 -6781 -6884 0
-13685 -6696 -6780 -6886 0
-13685 -6694 -6840 0
-13685 -6694 -6825 -6842 0
-13685 -6694 -6823 -6844 0
-13685 -6694 -6821 -6846 0
-13685 -6694 -6819 -6848 0
-13685 -6694 -6817 -6850 0
-13685 -6694 -6815 -6852 0
-13685 -6694 -6813 -6854 0
-13685 -6694 -6811 -6856 0
-13685 -6694 -6809 -6858 0
-13685 -6694 -6807 -6860 0
-13685 -6694 -6805 -6862 0
-13685 -6694 -6803 -6864 0
-13685 -6694 -6801 -6866 0
-13685 -6694 -6799 -6868 0
-13685 -6694 -6797 -6870 0
-13685 -6694 -6795 -6872 0
-13685 -6694 -6793 -6874 0
-13685 -6694 -6791 -6876 0
-13685 -6694 -6789 -6878 0
-13685 -6694 -6787 -6880 0
-13685 -6694 -6785 -6882 0
-13685 -6694 -6783 -6884 0
-13685 -6694 -6781 -6886 0
-13685 -6694 -6780 -6888 0
-13685 -6692 -6842 0
-13685 -6692 -6825 -6844 0
-13685 -6692 -6823 -6846 0
-13685 -6692 -6821 -6848 0
-13685 -6692 -6819 -6850 0
-13685 -6692 -6817 -6852 0
-13685 -6692 -6815 -6854 0
-13685 -6692 -6813 -6856 0
-13685 -6692 -6811 -6858 0
-13685 -6692 -6809 -6860 0
-13685 -6692 -6807 -6862 0
-13685 -6692 -6805 -6864 0
-13685 -6692 -6803 -6866 0
-13685 -6692 -6801 -6868 0
-13685 -6692 -6799 -6870 0
-13685 -6692 -6797 -6872 0
-13685 -6692 -6795 -6874 0
-13685 -6692 -6793 -6876 0
-13685 -6692 -6791 -6878 0
-13685 -6692 -6789 -6880 0
-13685 -6692 -6787 -6882 0
-13685 -6692 -6785 -6884 0
-13685 -6692 -6783 -6886 0
-13685 -6692 -6781 -6888 0
-13685 -6692 -6780 0
-13685 -6690 -6844 0
-13685 -6690 -6825 -6846 0
-13685 -6690 -6823 -6848 0
-13685 -6690 -6821 -6850 0
-13685 -6690 -6819 -6852 0
-13685 -6690 -6817 -6854 0
-13685 -6690 -6815 -6856 0
-13685 -6690 -6813 -6858 0
-13685 -6690 -6811 -6860 0
-13685 -6690 -6809 -6862 0
-13685 -6690 -6807 -6864 0
-13685 -6690 -6805 -6866 0
-13685 -6690 -6803 -6868 0
-13685 -6690 -6801 -6870 0
-13685 -6690 -6799 -6872 0
-13685 -6690 -6797 -6874 0
-13685 -6690 -6795 -6876 0
-13685 -6690 -6793 -6878 0
-13685 -6690 -6791 -6880 0
-13685 -6690 -6789 -6882 0
-13685 -6690 -6787 -6884 0
-13685 -6690 -6785 -6886 0
-13685 -6690 -6783 -6888 0
-13685 -6690 -6781 0
-13685 -6690 -6780 0
-13685 -6688 -6846 0
-13685 -6688 -6825 -6848 0
-13685 -6688 -6823 -6850 0
-13685 -6688 -6821 -6852 0
-13685 -6688 -6819 -6854 0
-13685 -6688 -6817 -6856 0
-13685 -6688 -6815 -6858 0
-13685 -6688 -6813 -6860 0
-13685 -6688 -6811 -6862 0
-13685 -6688 -6809 -6864 0
-13685 -6688 -6807 -6866 0
-13685 -6688 -6805 -6868 0
-13685 -6688 -6803 -6870 0
-13685 -6688 -6801 -6872 0
-13685 -6688 -6799 -6874 0
-13685 -6688 -6797 -6876 0
-13685 -6688 -6795 -6878 0
-13685 -6688 -6793 -6880 0
-13685 -6688 -6791 -6882 0
-13685 -6688 -6789 -6884 0
-13685 -6688 -6787 -6886 0
-13685 -6688 -6785 -6888 0
-13685 -6688 -6783 0
-13685 -6688 -6781 0
-13685 -6688 -6780 0
-13685 -6687 -6848 0
-13685 -6687 -6825 -6850 0
-13685 -6687 -6823 -6852 0
-13685 -6687 -6821 -6854 0
-13685 -6687 -6819 -6856 0
-13685 -6687 -6817 -6858 0
-13685 -6687 -6815 -6860 0
-13685 -6687 -6813 -6862 0
-13685 -6687 -6811 -6864 0
-13685 -6687 -6809 -6866 0
-13685 -6687 -6807 -6868 0
-13685 -6687 -6805 -6870 0
-13685 -6687 -6803 -6872 0
-13685 -6687 -6801 -6874 0
-13685 -6687 -6799 -6876 0
-13685 -6687 -6797 -6878 0
-13685 -6687 -6795 -6880 0
-13685 -6687 -6793 -6882 0
-13685 -6687 -6791 -6884 0
-13685 -6687 -6789 -6886 0
-13685 -6687 -6787 -6888 0
-13685 -6687 -6785 0
-13685 -6687 -6783 0
-13685 -6687 -6781 0
-13685 -6687 -6780 0
13685 6785 6888 0
13685 6787 6886 0
13685 6789 6884 0
13685 6791 6882 0
13685 6793 6880 0
13685 6795 6878 0
13685 6797 6876 0
13685 6799 6874 0
13685 6801 6872 0
13685 6803 6870 0
13685 6805 6868 0
13685 6807 6866 0
13685 6809 6864 0
13685 6811 6862 0
13685 6813 6860 0
13685 6815 6858 0
13685 6817 6856 0
13685 6819 6854 0
13685 6821 6852 0
13685 6823 6850 0
13685 6825 6848 0
13685 6687 6783 6888 0
13685 6687 6785 6886 0
13685 6687 6787 6884 0
13685 6687 6789 6882 0
13685 6687 6791 6880 0
13685 6687 6793 6878 0
13685 6687 6795 6876 0
13685 6687 6797 6874 0
13685 6687 6799 6872 0
13685 6687 6801 6870 0
13685 6687 6803 6868 0
13685 6687 6805 6866 0
13685 6687 6807 6864 0
13685 6687 6809 6862 0
13685 6687 6811 6860 0
13685 6687 6813 6858 0
13685 6687 6815 6856 0
13685 6687 6817 6854 0
13685 6687 6819 6852 0
13685 6687 6821 6850 0
13685 6687 6823 6848 0
13685 6687 6825 6846 0
13685 6688 6781 6888 0
13685 6688 6783 6886 0
13685 6688 6785 6884 0
13685 6688 6787 6882 0
13685 6688 6789 6880 0
13685 6688 6791 6878 0
13685 6688 6793 6876 0
13685 6688 6795 6874 0
13685 6688 6797 6872 0
13685 6688 6799 6870 0
13685 6688 6801 6868 0
13685 6688 6803 6866 0
13685 6688 6805 6864 0
13685 6688 6807 6862 0
13685 6688 6809 6860 0
13685 6688 6811 6858 0
13685 6688 6813 6856 0
13685 6688 6815 6854 0
13685 6688 6817 6852 0
13685 6688 6819 6850 0
13685 6688 6821 6848 0
13685 6688 6823 6846 0
13685 6688 6825 6844 0
13685 6690 6780 6888 0
13685 6690 6781 6886 0
13685 6690 6783 6884 0
13685 6690 6785 6882 0
13685 6690 6787 6880 0
13685 6690 6789 6878 0
13685 6690 6791 6876 0
13685 6690 6793 6874 0
13685 6690 6795 6872 0
13685 6690 6797 6870 0
13685 6690 6799 6868 0
13685 6690 6801 6866 0
13685 6690 6803 6864 0
13685 6690 6805 6862 0
13685 6690 6807 6860 0
13685 6690 6809 6858 0
13685 6690 6811 6856 0
13685 6690 6813 6854 0
13685 6690 6815 6852 0
13685 6690 6817 6850 0
13685 6690 6819 6848 0
13685 6690 6821 6846 0
13685 6690 6823 6844 0
13685 6690 6825 6842 0
13685 6692 6888 0
13685 6692 6780 6886 0
13685 6692 6781 6884 0
13685 6692 6783 6882 0
13685 6692 6785 6880 0
13685 6692 6787 6878 0
13685 6692 6789 6876 0
13685 6692 6791 6874 0
13685 6692 6793 6872 0
13685 6692 6795 6870 0
13685 6692 6797 6868 0
13685 6692 6799 6866 0
13685 6692 6801 6864 0
13685 6692 6803 6862 0
13685 6692 6805 6860 0
13685 6692 6807 6858 0
13685 6692 6809 6856 0
13685 6692 6811 6854 0
13685 6692 6813 6852 0
13685 6692 6815 6850 0
13685 6692 6817 6848 0
13685 6692 6819 6846 0
13685 6692 6821 6844 0
13685 6692 6823 6842 0
13685 6692 6825 6840 0
13685 6694 6886 0
13685 6694 6780 6884 0
13685 6694 6781 6882 0
13685 6694 6783 6880 0
13685 6694 6785 6878 0
13685 6694 6787 6876 0
13685 6694 6789 6874 0
13685 6694 6791 6872 0
13685 6694 6793 6870 0
13685 6694 6795 6868 0
13685 6694 6797 6866 0
13685 6694 6799 6864 0
13685 6694 6801 6862 0
13685 6694 6803 6860 0
13685 6694 6805 6858 0
13685 6694 6807 6856 0
13685 6694 6809 6854 0
13685 6694 6811 6852 0
13685 6694 6813 6850 0
13685 6694 6815 6848 0
13685 6694 6817 6846 0
13685 6694 6819 6844 0
13685 6694 6821 6842 0
13685 6694 6823 6840 0
13685 6694 6825 6838 0
13685 6696 6884 0
13685 6696 6780 6882 0
13685 6696 6781 6880 0
13685 6696 6783 6878 0
13685 6696 6785 6876 0
13685 6696 6787 6874 0
13685 6696 6789 6872 0
13685 6696 6791 6870 0
13685 6696 6793 6868 0
13685 6696 6795 6866 0
13685 6696 6797 6864 0
13685 6696 6799 6862 0
13685 6696 6801 6860 0
13685 6696 6803 6858 0
13685 6696 6805 6856 0
13685 6696 6807 6854 0
13685 6696 6809 6852 0
13685 6696 6811 6850 0
13685 6696 6813 6848 0
13685 6696 6815 6846 0
13685 6696 6817 6844 0
13685 6696 6819 6842 0
13685 6696 6821 6840 0
13685 6696 6823 6838 0
13685 6696 6825 6836 0
13685 6698 6882 0
13685 6698 6780 6880 0
13685 6698 6781 6878 0
13685 6698 6783 6876 0
13685 6698 6785 6874 0
13685 6698 6787 6872 0
13685 6698 6789 6870 0
13685 6698 6791 6868 0
13685 6698 6793 6866 0
13685 6698 6795 6864 0
13685 6698 6797 6862 0
13685 6698 6799 6860 0
13685 6698 6801 6858 0
13685 6698 6803 6856 0
13685 6698 6805 6854 0
13685 6698 6807 6852 0
13685 6698 6809 6850 0
13685 6698 6811 6848 0
13685 6698 6813 6846 0
13685 6698 6815 6844 0
13685 6698 6817 6842 0
13685 6698 6819 6840 0
13685 6698 6821 6838 0
13685 6698 6823 6836 0
13685 6698 6825 6834 0
13685 6700 6880 0
13685 6700 6780 6878 0
13685 6700 6781 6876 0
13685 6700 6783 6874 0
13685 6700 6785 6872 0
13685 6700 6787 6870 0
13685 6700 6789 6868 0
13685 6700 6791 6866 0
13685 6700 6793 6864 0
13685 6700 6795 6862 0
13685 6700 6797 6860 0
13685 6700 6799 6858 0
13685 6700 6801 6856 0
13685 6700 6803 6854 0
13685 6700 6805 6852 0
13685 6700 6807 6850 0
13685 6700 6809 6848 0
13685 6700 6811 6846 0
13685 6700 6813 6844 0
13685 6700 6815 6842 0
13685 6700 6817 6840 0
13685 6700 6819 6838 0
13685 6700 6821 6836 0
13685 6700 6823 6834 0
13685 6700 6825 6832 0
13685 6702 6878 0
13685 6702 6780 6876 0
13685 6702 6781 6874 0
13685 6702 6783 6872 0
13685 6702 6785 6870 0
13685 6702 6787 6868 0
13685 6702 6789 6866 0
13685 6702 6791 6864 0
13685 6702 6793 6862 0
13685 6702 6795 6860 0
13685 6702 6797 6858 0
13685 6702 6799 6856 0
13685 6702 6801 6854 0
13685 6702 6803 6852 0
13685 6702 6805 6850 0
13685 6702 6807 6848 0
13685 6702 6809 6846 0
13685 6702 6811 6844 0
13685 6702 6813 6842 0
13685 6702 6815 6840 0
13685 6702 6817 6838 0
13685 6702 6819 6836 0
13685 6702 6821 6834 0
13685 6702 6823 6832 0
13685 6702 6825 6830 0
13685 6704 6876 0
13685 6704 6780 6874 0
13685 6704 6781 6872 0
13685 6704 6783 6870 0
13685 6704 6785 6868 0
13685 6704 6787 6866 0
13685 6704 6789 6864 0
13685 6704 6791 6862 0
13685 6704 6793 6860 0
13685 6704 6795 6858 0
13685 6704 6797 6856 0
13685 6704 6799 6854 0
13685 6704 6801 6852 0
13685 6704 6803 6850 0
13685 6704 6805 6848 0
13685 6704 6807 6846 0
13685 6704 6809 6844 0
13685 6704 6811 6842 0
13685 6704 6813 6840 0
13685 6704 6815 6838 0
13685 6704 6817 6836 0
13685 6704 6819 6834 0
13685 6704 6821 6832 0
13685 6704 6823 6830 0
13685 6704 6825 6828 0
13685 6706 6874 0
13685 6706 6780 6872 0
13685 6706 6781 6870 0
13685 6706 6783 6868 0
13685 6706 6785 6866 0
13685 6706 6787 6864 0
13685 6706 6789 6862 0
13685 6706 6791 6860 0
13685 6706 6793 6858 0
13685 6706 6795 6856 0
13685 6706 6797 6854 0
13685 6706 6799 6852 0
13685 6706 6801 6850 0
13685 6706 6803 6848 0
13685 6706 6805 6846 0
13685 6706 6807 6844 0
13685 6706 6809 6842 0
13685 6706 6811 6840 0
13685 6706 6813 6838 0
13685 6706 6815 6836 0
13685 6706 6817 6834 0
13685 6706 6819 6832 0
13685 6706 6821 6830 0
13685 6706 6823 6828 0
13685 6706 6825 6827 0
13685 6708 6872 0
13685 6708 6780 6870 0
13685 6708 6781 6868 0
13685 6708 6783 6866 0
13685 6708 6785 6864 0
13685 6708 6787 6862 0
13685 6708 6789 6860 0
13685 6708 6791 6858 0
13685 6708 6793 6856 0
13685 6708 6795 6854 0
13685 6708 6797 6852 0
13685 6708 6799 6850 0
13685 6708 6801 6848 0
13685 6708 6803 6846 0
13685 6708 6805 6844 0
13685 6708 6807 6842 0
13685 6708 6809 6840 0
13685 6708 6811 6838 0
13685 6708 6813 6836 0
13685 6708 6815 6834 0
13685 6708 6817 6832 0
13685 6708 6819 6830 0
13685 6708 6821 6828 0
13685 6708 6823 6827 0
13685 6708 6825 0
13685 6710 6870 0
13685 6710 6780 6868 0
13685 6710 6781 6866 0
13685 6710 6783 6864 0
13685 6710 6785 6862 0
13685 6710 6787 6860 0
13685 6710 6789 6858 0
13685 6710 6791 6856 0
13685 6710 6793 6854 0
13685 6710 6795 6852 0
13685 6710 6797 6850 0
13685 6710 6799 6848 0
13685 6710 6801 6846 0
13685 6710 6803 6844 0
13685 6710 6805 6842 0
13685 6710 6807 6840 0
13685 6710 6809 6838 0
13685 6710 6811 6836 0
13685 6710 6813 6834 0
13685 6710 6815 6832 0
13685 6710 6817 6830 0
13685 6710 6819 6828 0
13685 6710 6821 6827 0
13685 6710 6823 0
13685 6710 6825 0
13685 6712 6868 0
13685 6712 6780 6866 0
13685 6712 6781 6864 0
13685 6712 6783 6862 0
13685 6712 6785 6860 0
13685 6712 6787 6858 0
13685 6712 6789 6856 0
13685 6712 6791 6854 0
13685 6712 6793 6852 0
13685 6712 6795 6850 0
13685 6712 6797 6848 0
13685 6712 6799 6846 0
13685 6712 6801 6844 0
13685 6712 6803 6842 0
13685 6712 6805 6840 0
13685 6712 6807 6838 0
13685 6712 6809 6836 0
13685 6712 6811 6834 0
13685 6712 6813 6832 0
13685 6712 6815 6830 0
13685 6712 6817 6828 0
13685 6712 6819 6827 0
13685 6712 6821 0
13685 6712 6823 0
13685 6712 6825 0
13685 6714 6866 0
13685 6714 6780 6864 0
13685 6714 6781 6862 0
13685 6714 6783 6860 0
13685 6714 6785 6858 0
13685 6714 6787 6856 0
13685 6714 6789 6854 0
13685 6714 6791 6852 0
13685 6714 6793 6850 0
13685 6714 6795 6848 0
13685 6714 6797 6846 0
13685 6714 6799 6844 0
13685 6714 6801 6842 0
13685 6714 6803 6840 0
13685 6714 6805 6838 0
13685 6714 6807 6836 0
13685 6714 6809 6834 0
13685 6714 6811 6832 0
13685 6714 6813 6830 0
13685 6714 6815 6828 0
13685 6714 6817 6827 0
13685 6714 6819 0
13685 6714 6821 0
13685 6714 6823 0
13685 6714 6825 0
13685 6716 6864 0
13685 6716 6780 6862 0
13685 6716 6781 6860 0
13685 6716 6783 6858 0
13685 6716 6785 6856 0
13685 6716 6787 6854 0
13685 6716 6789 6852 0
13685 6716 6791 6850 0
13685 6716 6793 6848 0
13685 6716 6795 6846 0
13685 6716 6797 6844 0
13685 6716 6799 6842 0
13685 6716 6801 6840 0
13685 6716 6803 6838 0
13685 6716 6805 6836 0
13685 6716 6807 6834 0
13685 6716 6809 6832 0
13685 6716 6811 6830 0
13685 6716 6813 6828 0
13685 6716 6815 6827 0
13685 6716 6817 0
13685 6716 6819 0
13685 6716 6821 0
13685 6716 6823 0
13685 6716 6825 0
c (((aux594 + aux597 + aux598)<=36)=tv=SATLiteral(13686))
-13686 7021 7122 0
-13686 7023 7120 0
-13686 7025 7118 0
-13686 7027 7116 0
-13686 7029 7114 0
-13686 7031 7112 0
-13686 7033 7110 0
-13686 7035 7108 0
-13686 7037 7106 0
-13686 7039 7104 0
-13686 7041 7102 0
-13686 7043 7100 0
-13686 7045 7098 0
-13686 7047 7096 0
-13686 7049 7094 0
-13686 7051 7092 0
-13686 7053 7090 0
-13686 7055 7088 0
-13686 7057 7086 0
-13686 7059 7084 0
-13686 6921 7019 7122 0
-13686 6921 7021 7120 0
-13686 6921 7023 7118 0
-13686 6921 7025 7116 0
-13686 6921 7027 7114 0
-13686 6921 7029 7112 0
-13686 6921 7031 7110 0
-13686 6921 7033 7108 0
-13686 6921 7035 7106 0
-13686 6921 7037 7104 0
-13686 6921 7039 7102 0
-13686 6921 7041 7100 0
-13686 6921 7043 7098 0
-13686 6921 7045 7096 0
-13686 6921 7047 7094 0
-13686 6921 7049 7092 0
-13686 6921 7051 7090 0
-13686 6921 7053 7088 0
-13686 6921 7055 7086 0
-13686 6921 7057 7084 0
-13686 6921 7059 7082 0
-13686 6922 7017 7122 0
-13686 6922 7019 7120 0
-13686 6922 7021 7118 0
-13686 6922 7023 7116 0
-13686 6922 7025 7114 0
-13686 6922 7027 7112 0
-13686 6922 7029 7110 0
-13686 6922 7031 7108 0
-13686 6922 7033 7106 0
-13686 6922 7035 7104 0
-13686 6922 7037 7102 0
-13686 6922 7039 7100 0
-13686 6922 7041 7098 0
-13686 6922 7043 7096 0
-13686 6922 7045 7094 0
-13686 6922 7047 7092 0
-13686 6922 7049 7090 0
-13686 6922 7051 7088 0
-13686 6922 7053 7086 0
-13686 6922 7055 7084 0
-13686 6922 7057 7082 0
-13686 6922 7059 7080 0
-13686 6924 7015 7122 0
-13686 6924 7017 7120 0
-13686 6924 7019 7118 0
-13686 6924 7021 7116 0
-13686 6924 7023 7114 0
-13686 6924 7025 7112 0
-13686 6924 7027 7110 0
-13686 6924 7029 7108 0
-13686 6924 7031 7106 0
-13686 6924 7033 7104 0
-13686 6924 7035 7102 0
-13686 6924 7037 7100 0
-13686 6924 7039 7098 0
-13686 6924 7041 7096 0
-13686 6924 7043 7094 0
-13686 6924 7045 7092 0
-13686 6924 7047 7090 0
-13686 6924 7049 7088 0
-13686 6924 7051 7086 0
-13686 6924 7053 7084 0
-13686 6924 7055 7082 0
-13686 6924 7057 7080 0
-13686 6924 7059 7078 0
-13686 6926 7014 7122 0
-13686 6926 7015 7120 0
-13686 6926 7017 7118 0
-13686 6926 7019 7116 0
-13686 6926 7021 7114 0
-13686 6926 7023 7112 0
-13686 6926 7025 7110 0
-13686 6926 7027 7108 0
-13686 6926 7029 7106 0
-13686 6926 7031 7104 0
-13686 6926 7033 7102 0
-13686 6926 7035 7100 0
-13686 6926 7037 7098 0
-13686 6926 7039 7096 0
-13686 6926 7041 7094 0
-13686 6926 7043 7092 0
-13686 6926 7045 7090 0
-13686 6926 7047 7088 0
-13686 6926 7049 7086 0
-13686 6926 7051 7084 0
-13686 6926 7053 7082 0
-13686 6926 7055 7080 0
-13686 6926 7057 7078 0
-13686 6926 7059 7076 0
-13686 6928 7122 0
-13686 6928 7014 7120 0
-13686 6928 7015 7118 0
-13686 6928 7017 7116 0
-13686 6928 7019 7114 0
-13686 6928 7021 7112 0
-13686 6928 7023 7110 0
-13686 6928 7025 7108 0
-13686 6928 7027 7106 0
-13686 6928 7029 7104 0
-13686 6928 7031 7102 0
-13686 6928 7033 7100 0
-13686 6928 7035 7098 0
-13686 6928 7037 7096 0
-13686 6928 7039 7094 0
-13686 6928 7041 7092 0
-13686 6928 7043 7090 0
-13686 6928 7045 7088 0
-13686 6928 7047 7086 0
-13686 6928 7049 7084 0
-13686 6928 7051 7082 0
-13686 6928 7053 7080 0
-13686 6928 7055 7078 0
-13686 6928 7057 7076 0
-13686 6928 7059 7074 0
-13686 6930 7120 0
-13686 6930 7014 7118 0
-13686 6930 7015 7116 0
-13686 6930 7017 7114 0
-13686 6930 7019 7112 0
-13686 6930 7021 7110 0
-13686 6930 7023 7108 0
-13686 6930 7025 7106 0
-13686 6930 7027 7104 0
-13686 6930 7029 7102 0
-13686 6930 7031 7100 0
-13686 6930 7033 7098 0
-13686 6930 7035 7096 0
-13686 6930 7037 7094 0
-13686 6930 7039 7092 0
-13686 6930 7041 7090 0
-13686 6930 7043 7088 0
-13686 6930 7045 7086 0
-13686 6930 7047 7084 0
-13686 6930 7049 7082 0
-13686 6930 7051 7080 0
-13686 6930 7053 7078 0
-13686 6930 7055 7076 0
-13686 6930 7057 7074 0
-13686 6930 7059 7072 0
-13686 6932 7118 0
-13686 6932 7014 7116 0
-13686 6932 7015 7114 0
-13686 6932 7017 7112 0
-13686 6932 7019 7110 0
-13686 6932 7021 7108 0
-13686 6932 7023 7106 0
-13686 6932 7025 7104 0
-13686 6932 7027 7102 0
-13686 6932 7029 7100 0
-13686 6932 7031 7098 0
-13686 6932 7033 7096 0
-13686 6932 7035 7094 0
-13686 6932 7037 7092 0
-13686 6932 7039 7090 0
-13686 6932 7041 7088 0
-13686 6932 7043 7086 0
-13686 6932 7045 7084 0
-13686 6932 7047 7082 0
-13686 6932 7049 7080 0
-13686 6932 7051 7078 0
-13686 6932 7053 7076 0
-13686 6932 7055 7074 0
-13686 6932 7057 7072 0
-13686 6932 7059 7070 0
-13686 6934 7116 0
-13686 6934 7014 7114 0
-13686 6934 7015 7112 0
-13686 6934 7017 7110 0
-13686 6934 7019 7108 0
-13686 6934 7021 7106 0
-13686 6934 7023 7104 0
-13686 6934 7025 7102 0
-13686 6934 7027 7100 0
-13686 6934 7029 7098 0
-13686 6934 7031 7096 0
-13686 6934 7033 7094 0
-13686 6934 7035 7092 0
-13686 6934 7037 7090 0
-13686 6934 7039 7088 0
-13686 6934 7041 7086 0
-13686 6934 7043 7084 0
-13686 6934 7045 7082 0
-13686 6934 7047 7080 0
-13686 6934 7049 7078 0
-13686 6934 7051 7076 0
-13686 6934 7053 7074 0
-13686 6934 7055 7072 0
-13686 6934 7057 7070 0
-13686 6934 7059 7068 0
-13686 6936 7114 0
-13686 6936 7014 7112 0
-13686 6936 7015 7110 0
-13686 6936 7017 7108 0
-13686 6936 7019 7106 0
-13686 6936 7021 7104 0
-13686 6936 7023 7102 0
-13686 6936 7025 7100 0
-13686 6936 7027 7098 0
-13686 6936 7029 7096 0
-13686 6936 7031 7094 0
-13686 6936 7033 7092 0
-13686 6936 7035 7090 0
-13686 6936 7037 7088 0
-13686 6936 7039 7086 0
-13686 6936 7041 7084 0
-13686 6936 7043 7082 0
-13686 6936 7045 7080 0
-13686 6936 7047 7078 0
-13686 6936 7049 7076 0
-13686 6936 7051 7074 0
-13686 6936 7053 7072 0
-13686 6936 7055 7070 0
-13686 6936 7057 7068 0
-13686 6936 7059 7066 0
-13686 6938 7112 0
-13686 6938 7014 7110 0
-13686 6938 7015 7108 0
-13686 6938 7017 7106 0
-13686 6938 7019 7104 0
-13686 6938 7021 7102 0
-13686 6938 7023 7100 0
-13686 6938 7025 7098 0
-13686 6938 7027 7096 0
-13686 6938 7029 7094 0
-13686 6938 7031 7092 0
-13686 6938 7033 7090 0
-13686 6938 7035 7088 0
-13686 6938 7037 7086 0
-13686 6938 7039 7084 0
-13686 6938 7041 7082 0
-13686 6938 7043 7080 0
-13686 6938 7045 7078 0
-13686 6938 7047 7076 0
-13686 6938 7049 7074 0
-13686 6938 7051 7072 0
-13686 6938 7053 7070 0
-13686 6938 7055 7068 0
-13686 6938 7057 7066 0
-13686 6938 7059 7064 0
-13686 6940 7110 0
-13686 6940 7014 7108 0
-13686 6940 7015 7106 0
-13686 6940 7017 7104 0
-13686 6940 7019 7102 0
-13686 6940 7021 7100 0
-13686 6940 7023 7098 0
-13686 6940 7025 7096 0
-13686 6940 7027 7094 0
-13686 6940 7029 7092 0
-13686 6940 7031 7090 0
-13686 6940 7033 7088 0
-13686 6940 7035 7086 0
-13686 6940 7037 7084 0
-13686 6940 7039 7082 0
-13686 6940 7041 7080 0
-13686 6940 7043 7078 0
-13686 6940 7045 7076 0
-13686 6940 7047 7074 0
-13686 6940 7049 7072 0
-13686 6940 7051 7070 0
-13686 6940 7053 7068 0
-13686 6940 7055 7066 0
-13686 6940 7057 7064 0
-13686 6940 7059 7062 0
-13686 6942 7108 0
-13686 6942 7014 7106 0
-13686 6942 7015 7104 0
-13686 6942 7017 7102 0
-13686 6942 7019 7100 0
-13686 6942 7021 7098 0
-13686 6942 7023 7096 0
-13686 6942 7025 7094 0
-13686 6942 7027 7092 0
-13686 6942 7029 7090 0
-13686 6942 7031 7088 0
-13686 6942 7033 7086 0
-13686 6942 7035 7084 0
-13686 6942 7037 7082 0
-13686 6942 7039 7080 0
-13686 6942 7041 7078 0
-13686 6942 7043 7076 0
-13686 6942 7045 7074 0
-13686 6942 7047 7072 0
-13686 6942 7049 7070 0
-13686 6942 7051 7068 0
-13686 6942 7053 7066 0
-13686 6942 7055 7064 0
-13686 6942 7057 7062 0
-13686 6942 7059 7061 0
-13686 6944 7106 0
-13686 6944 7014 7104 0
-13686 6944 7015 7102 0
-13686 6944 7017 7100 0
-13686 6944 7019 7098 0
-13686 6944 7021 7096 0
-13686 6944 7023 7094 0
-13686 6944 7025 7092 0
-13686 6944 7027 7090 0
-13686 6944 7029 7088 0
-13686 6944 7031 7086 0
-13686 6944 7033 7084 0
-13686 6944 7035 7082 0
-13686 6944 7037 7080 0
-13686 6944 7039 7078 0
-13686 6944 7041 7076 0
-13686 6944 7043 7074 0
-13686 6944 7045 7072 0
-13686 6944 7047 7070 0
-13686 6944 7049 7068 0
-13686 6944 7051 7066 0
-13686 6944 7053 7064 0
-13686 6944 7055 7062 0
-13686 6944 7057 7061 0
-13686 6944 7059 0
-13686 6946 7104 0
-13686 6946 7014 7102 0
-13686 6946 7015 7100 0
-13686 6946 7017 7098 0
-13686 6946 7019 7096 0
-13686 6946 7021 7094 0
-13686 6946 7023 7092 0
-13686 6946 7025 7090 0
-13686 6946 7027 7088 0
-13686 6946 7029 7086 0
-13686 6946 7031 7084 0
-13686 6946 7033 7082 0
-13686 6946 7035 7080 0
-13686 6946 7037 7078 0
-13686 6946 7039 7076 0
-13686 6946 7041 7074 0
-13686 6946 7043 7072 0
-13686 6946 7045 7070 0
-13686 6946 7047 7068 0
-13686 6946 7049 7066 0
-13686 6946 7051 7064 0
-13686 6946 7053 7062 0
-13686 6946 7055 7061 0
-13686 6946 7057 0
-13686 6946 7059 0
-13686 6948 7102 0
-13686 6948 7014 7100 0
-13686 6948 7015 7098 0
-13686 6948 7017 7096 0
-13686 6948 7019 7094 0
-13686 6948 7021 7092 0
-13686 6948 7023 7090 0
-13686 6948 7025 7088 0
-13686 6948 7027 7086 0
-13686 6948 7029 7084 0
-13686 6948 7031 7082 0
-13686 6948 7033 7080 0
-13686 6948 7035 7078 0
-13686 6948 7037 7076 0
-13686 6948 7039 7074 0
-13686 6948 7041 7072 0
-13686 6948 7043 7070 0
-13686 6948 7045 7068 0
-13686 6948 7047 7066 0
-13686 6948 7049 7064 0
-13686 6948 7051 7062 0
-13686 6948 7053 7061 0
-13686 6948 7055 0
-13686 6948 7057 0
-13686 6948 7059 0
-13686 6950 7100 0
-13686 6950 7014 7098 0
-13686 6950 7015 7096 0
-13686 6950 7017 7094 0
-13686 6950 7019 7092 0
-13686 6950 7021 7090 0
-13686 6950 7023 7088 0
-13686 6950 7025 7086 0
-13686 6950 7027 7084 0
-13686 6950 7029 7082 0
-13686 6950 7031 7080 0
-13686 6950 7033 7078 0
-13686 6950 7035 7076 0
-13686 6950 7037 7074 0
-13686 6950 7039 7072 0
-13686 6950 7041 7070 0
-13686 6950 7043 7068 0
-13686 6950 7045 7066 0
-13686 6950 7047 7064 0
-13686 6950 7049 7062 0
-13686 6950 7051 7061 0
-13686 6950 7053 0
-13686 6950 7055 0
-13686 6950 7057 0
-13686 6950 7059 0
13686 -7053 -7061 0
13686 -7051 -7062 0
13686 -7049 -7064 0
13686 -7047 -7066 0
13686 -7045 -7068 0
13686 -7043 -7070 0
13686 -7041 -7072 0
13686 -7039 -7074 0
13686 -7037 -7076 0
13686 -7035 -7078 0
13686 -7033 -7080 0
13686 -7031 -7082 0
13686 -7029 -7084 0
13686 -7027 -7086 0
13686 -7025 -7088 0
13686 -7023 -7090 0
13686 -7021 -7092 0
13686 -7019 -7094 0
13686 -7017 -7096 0
13686 -7015 -7098 0
13686 -7014 -7100 0
13686 -6950 -7055 -7061 0
13686 -6950 -7053 -7062 0
13686 -6950 -7051 -7064 0
13686 -6950 -7049 -7066 0
13686 -6950 -7047 -7068 0
13686 -6950 -7045 -7070 0
13686 -6950 -7043 -7072 0
13686 -6950 -7041 -7074 0
13686 -6950 -7039 -7076 0
13686 -6950 -7037 -7078 0
13686 -6950 -7035 -7080 0
13686 -6950 -7033 -7082 0
13686 -6950 -7031 -7084 0
13686 -6950 -7029 -7086 0
13686 -6950 -7027 -7088 0
13686 -6950 -7025 -7090 0
13686 -6950 -7023 -7092 0
13686 -6950 -7021 -7094 0
13686 -6950 -7019 -7096 0
13686 -6950 -7017 -7098 0
13686 -6950 -7015 -7100 0
13686 -6950 -7014 -7102 0
13686 -6948 -7057 -7061 0
13686 -6948 -7055 -7062 0
13686 -6948 -7053 -7064 0
13686 -6948 -7051 -7066 0
13686 -6948 -7049 -7068 0
13686 -6948 -7047 -7070 0
13686 -6948 -7045 -7072 0
13686 -6948 -7043 -7074 0
13686 -6948 -7041 -7076 0
13686 -6948 -7039 -7078 0
13686 -6948 -7037 -7080 0
13686 -6948 -7035 -7082 0
13686 -6948 -7033 -7084 0
13686 -6948 -7031 -7086 0
13686 -6948 -7029 -7088 0
13686 -6948 -7027 -7090 0
13686 -6948 -7025 -7092 0
13686 -6948 -7023 -7094 0
13686 -6948 -7021 -7096 0
13686 -6948 -7019 -7098 0
13686 -6948 -7017 -7100 0
13686 -6948 -7015 -7102 0
13686 -6948 -7014 -7104 0
13686 -6946 -7059 -7061 0
13686 -6946 -7057 -7062 0
13686 -6946 -7055 -7064 0
13686 -6946 -7053 -7066 0
13686 -6946 -7051 -7068 0
13686 -6946 -7049 -7070 0
13686 -6946 -7047 -7072 0
13686 -6946 -7045 -7074 0
13686 -6946 -7043 -7076 0
13686 -6946 -7041 -7078 0
13686 -6946 -7039 -7080 0
13686 -6946 -7037 -7082 0
13686 -6946 -7035 -7084 0
13686 -6946 -7033 -7086 0
13686 -6946 -7031 -7088 0
13686 -6946 -7029 -7090 0
13686 -6946 -7027 -7092 0
13686 -6946 -7025 -7094 0
13686 -6946 -7023 -7096 0
13686 -6946 -7021 -7098 0
13686 -6946 -7019 -7100 0
13686 -6946 -7017 -7102 0
13686 -6946 -7015 -7104 0
13686 -6946 -7014 -7106 0
13686 -6944 -7061 0
13686 -6944 -7059 -7062 0
13686 -6944 -7057 -7064 0
13686 -6944 -7055 -7066 0
13686 -6944 -7053 -7068 0
13686 -6944 -7051 -7070 0
13686 -6944 -7049 -7072 0
13686 -6944 -7047 -7074 0
13686 -6944 -7045 -7076 0
13686 -6944 -7043 -7078 0
13686 -6944 -7041 -7080 0
13686 -6944 -7039 -7082 0
13686 -6944 -7037 -7084 0
13686 -6944 -7035 -7086 0
13686 -6944 -7033 -7088 0
13686 -6944 -7031 -7090 0
13686 -6944 -7029 -7092 0
13686 -6944 -7027 -7094 0
13686 -6944 -7025 -7096 0
13686 -6944 -7023 -7098 0
13686 -6944 -7021 -7100 0
13686 -6944 -7019 -7102 0
13686 -6944 -7017 -7104 0
13686 -6944 -7015 -7106 0
13686 -6944 -7014 -7108 0
13686 -6942 -7062 0
13686 -6942 -7059 -7064 0
13686 -6942 -7057 -7066 0
13686 -6942 -7055 -7068 0
13686 -6942 -7053 -7070 0
13686 -6942 -7051 -7072 0
13686 -6942 -7049 -7074 0
13686 -6942 -7047 -7076 0
13686 -6942 -7045 -7078 0
13686 -6942 -7043 -7080 0
13686 -6942 -7041 -7082 0
13686 -6942 -7039 -7084 0
13686 -6942 -7037 -7086 0
13686 -6942 -7035 -7088 0
13686 -6942 -7033 -7090 0
13686 -6942 -7031 -7092 0
13686 -6942 -7029 -7094 0
13686 -6942 -7027 -7096 0
13686 -6942 -7025 -7098 0
13686 -6942 -7023 -7100 0
13686 -6942 -7021 -7102 0
13686 -6942 -7019 -7104 0
13686 -6942 -7017 -7106 0
13686 -6942 -7015 -7108 0
13686 -6942 -7014 -7110 0
13686 -6940 -7064 0
13686 -6940 -7059 -7066 0
13686 -6940 -7057 -7068 0
13686 -6940 -7055 -7070 0
13686 -6940 -7053 -7072 0
13686 -6940 -7051 -7074 0
13686 -6940 -7049 -7076 0
13686 -6940 -7047 -7078 0
13686 -6940 -7045 -7080 0
13686 -6940 -7043 -7082 0
13686 -6940 -7041 -7084 0
13686 -6940 -7039 -7086 0
13686 -6940 -7037 -7088 0
13686 -6940 -7035 -7090 0
13686 -6940 -7033 -7092 0
13686 -6940 -7031 -7094 0
13686 -6940 -7029 -7096 0
13686 -6940 -7027 -7098 0
13686 -6940 -7025 -7100 0
13686 -6940 -7023 -7102 0
13686 -6940 -7021 -7104 0
13686 -6940 -7019 -7106 0
13686 -6940 -7017 -7108 0
13686 -6940 -7015 -7110 0
13686 -6940 -7014 -7112 0
13686 -6938 -7066 0
13686 -6938 -7059 -7068 0
13686 -6938 -7057 -7070 0
13686 -6938 -7055 -7072 0
13686 -6938 -7053 -7074 0
13686 -6938 -7051 -7076 0
13686 -6938 -7049 -7078 0
13686 -6938 -7047 -7080 0
13686 -6938 -7045 -7082 0
13686 -6938 -7043 -7084 0
13686 -6938 -7041 -7086 0
13686 -6938 -7039 -7088 0
13686 -6938 -7037 -7090 0
13686 -6938 -7035 -7092 0
13686 -6938 -7033 -7094 0
13686 -6938 -7031 -7096 0
13686 -6938 -7029 -7098 0
13686 -6938 -7027 -7100 0
13686 -6938 -7025 -7102 0
13686 -6938 -7023 -7104 0
13686 -6938 -7021 -7106 0
13686 -6938 -7019 -7108 0
13686 -6938 -7017 -7110 0
13686 -6938 -7015 -7112 0
13686 -6938 -7014 -7114 0
13686 -6936 -7068 0
13686 -6936 -7059 -7070 0
13686 -6936 -7057 -7072 0
13686 -6936 -7055 -7074 0
13686 -6936 -7053 -7076 0
13686 -6936 -7051 -7078 0
13686 -6936 -7049 -7080 0
13686 -6936 -7047 -7082 0
13686 -6936 -7045 -7084 0
13686 -6936 -7043 -7086 0
13686 -6936 -7041 -7088 0
13686 -6936 -7039 -7090 0
13686 -6936 -7037 -7092 0
13686 -6936 -7035 -7094 0
13686 -6936 -7033 -7096 0
13686 -6936 -7031 -7098 0
13686 -6936 -7029 -7100 0
13686 -6936 -7027 -7102 0
13686 -6936 -7025 -7104 0
13686 -6936 -7023 -7106 0
13686 -6936 -7021 -7108 0
13686 -6936 -7019 -7110 0
13686 -6936 -7017 -7112 0
13686 -6936 -7015 -7114 0
13686 -6936 -7014 -7116 0
13686 -6934 -7070 0
13686 -6934 -7059 -7072 0
13686 -6934 -7057 -7074 0
13686 -6934 -7055 -7076 0
13686 -6934 -7053 -7078 0
13686 -6934 -7051 -7080 0
13686 -6934 -7049 -7082 0
13686 -6934 -7047 -7084 0
13686 -6934 -7045 -7086 0
13686 -6934 -7043 -7088 0
13686 -6934 -7041 -7090 0
13686 -6934 -7039 -7092 0
13686 -6934 -7037 -7094 0
13686 -6934 -7035 -7096 0
13686 -6934 -7033 -7098 0
13686 -6934 -7031 -7100 0
13686 -6934 -7029 -7102 0
13686 -6934 -7027 -7104 0
13686 -6934 -7025 -7106 0
13686 -6934 -7023 -7108 0
13686 -6934 -7021 -7110 0
13686 -6934 -7019 -7112 0
13686 -6934 -7017 -7114 0
13686 -6934 -7015 -7116 0
13686 -6934 -7014 -7118 0
13686 -6932 -7072 0
13686 -6932 -7059 -7074 0
13686 -6932 -7057 -7076 0
13686 -6932 -7055 -7078 0
13686 -6932 -7053 -7080 0
13686 -6932 -7051 -7082 0
13686 -6932 -7049 -7084 0
13686 -6932 -7047 -7086 0
13686 -6932 -7045 -7088 0
13686 -6932 -7043 -7090 0
13686 -6932 -7041 -7092 0
13686 -6932 -7039 -7094 0
13686 -6932 -7037 -7096 0
13686 -6932 -7035 -7098 0
13686 -6932 -7033 -7100 0
13686 -6932 -7031 -7102 0
13686 -6932 -7029 -7104 0
13686 -6932 -7027 -7106 0
13686 -6932 -7025 -7108 0
13686 -6932 -7023 -7110 0
13686 -6932 -7021 -7112 0
13686 -6932 -7019 -7114 0
13686 -6932 -7017 -7116 0
13686 -6932 -7015 -7118 0
13686 -6932 -7014 -7120 0
13686 -6930 -7074 0
13686 -6930 -7059 -7076 0
13686 -6930 -7057 -7078 0
13686 -6930 -7055 -7080 0
13686 -6930 -7053 -7082 0
13686 -6930 -7051 -7084 0
13686 -6930 -7049 -7086 0
13686 -6930 -7047 -7088 0
13686 -6930 -7045 -7090 0
13686 -6930 -7043 -7092 0
13686 -6930 -7041 -7094 0
13686 -6930 -7039 -7096 0
13686 -6930 -7037 -7098 0
13686 -6930 -7035 -7100 0
13686 -6930 -7033 -7102 0
13686 -6930 -7031 -7104 0
13686 -6930 -7029 -7106 0
13686 -6930 -7027 -7108 0
13686 -6930 -7025 -7110 0
13686 -6930 -7023 -7112 0
13686 -6930 -7021 -7114 0
13686 -6930 -7019 -7116 0
13686 -6930 -7017 -7118 0
13686 -6930 -7015 -7120 0
13686 -6930 -7014 -7122 0
13686 -6928 -7076 0
13686 -6928 -7059 -7078 0
13686 -6928 -7057 -7080 0
13686 -6928 -7055 -7082 0
13686 -6928 -7053 -7084 0
13686 -6928 -7051 -7086 0
13686 -6928 -7049 -7088 0
13686 -6928 -7047 -7090 0
13686 -6928 -7045 -7092 0
13686 -6928 -7043 -7094 0
13686 -6928 -7041 -7096 0
13686 -6928 -7039 -7098 0
13686 -6928 -7037 -7100 0
13686 -6928 -7035 -7102 0
13686 -6928 -7033 -7104 0
13686 -6928 -7031 -7106 0
13686 -6928 -7029 -7108 0
13686 -6928 -7027 -7110 0
13686 -6928 -7025 -7112 0
13686 -6928 -7023 -7114 0
13686 -6928 -7021 -7116 0
13686 -6928 -7019 -7118 0
13686 -6928 -7017 -7120 0
13686 -6928 -7015 -7122 0
13686 -6928 -7014 0
13686 -6926 -7078 0
13686 -6926 -7059 -7080 0
13686 -6926 -7057 -7082 0
13686 -6926 -7055 -7084 0
13686 -6926 -7053 -7086 0
13686 -6926 -7051 -7088 0
13686 -6926 -7049 -7090 0
13686 -6926 -7047 -7092 0
13686 -6926 -7045 -7094 0
13686 -6926 -7043 -7096 0
13686 -6926 -7041 -7098 0
13686 -6926 -7039 -7100 0
13686 -6926 -7037 -7102 0
13686 -6926 -7035 -7104 0
13686 -6926 -7033 -7106 0
13686 -6926 -7031 -7108 0
13686 -6926 -7029 -7110 0
13686 -6926 -7027 -7112 0
13686 -6926 -7025 -7114 0
13686 -6926 -7023 -7116 0
13686 -6926 -7021 -7118 0
13686 -6926 -7019 -7120 0
13686 -6926 -7017 -7122 0
13686 -6926 -7015 0
13686 -6926 -7014 0
13686 -6924 -7080 0
13686 -6924 -7059 -7082 0
13686 -6924 -7057 -7084 0
13686 -6924 -7055 -7086 0
13686 -6924 -7053 -7088 0
13686 -6924 -7051 -7090 0
13686 -6924 -7049 -7092 0
13686 -6924 -7047 -7094 0
13686 -6924 -7045 -7096 0
13686 -6924 -7043 -7098 0
13686 -6924 -7041 -7100 0
13686 -6924 -7039 -7102 0
13686 -6924 -7037 -7104 0
13686 -6924 -7035 -7106 0
13686 -6924 -7033 -7108 0
13686 -6924 -7031 -7110 0
13686 -6924 -7029 -7112 0
13686 -6924 -7027 -7114 0
13686 -6924 -7025 -7116 0
13686 -6924 -7023 -7118 0
13686 -6924 -7021 -7120 0
13686 -6924 -7019 -7122 0
13686 -6924 -7017 0
13686 -6924 -7015 0
13686 -6924 -7014 0
13686 -6922 -7082 0
13686 -6922 -7059 -7084 0
13686 -6922 -7057 -7086 0
13686 -6922 -7055 -7088 0
13686 -6922 -7053 -7090 0
13686 -6922 -7051 -7092 0
13686 -6922 -7049 -7094 0
13686 -6922 -7047 -7096 0
13686 -6922 -7045 -7098 0
13686 -6922 -7043 -7100 0
13686 -6922 -7041 -7102 0
13686 -6922 -7039 -7104 0
13686 -6922 -7037 -7106 0
13686 -6922 -7035 -7108 0
13686 -6922 -7033 -7110 0
13686 -6922 -7031 -7112 0
13686 -6922 -7029 -7114 0
13686 -6922 -7027 -7116 0
13686 -6922 -7025 -7118 0
13686 -6922 -7023 -7120 0
13686 -6922 -7021 -7122 0
13686 -6922 -7019 0
13686 -6922 -7017 0
13686 -6922 -7015 0
13686 -6922 -7014 0
13686 -6921 -7084 0
13686 -6921 -7059 -7086 0
13686 -6921 -7057 -7088 0
13686 -6921 -7055 -7090 0
13686 -6921 -7053 -7092 0
13686 -6921 -7051 -7094 0
13686 -6921 -7049 -7096 0
13686 -6921 -7047 -7098 0
13686 -6921 -7045 -7100 0
13686 -6921 -7043 -7102 0
13686 -6921 -7041 -7104 0
13686 -6921 -7039 -7106 0
13686 -6921 -7037 -7108 0
13686 -6921 -7035 -7110 0
13686 -6921 -7033 -7112 0
13686 -6921 -7031 -7114 0
13686 -6921 -7029 -7116 0
13686 -6921 -7027 -7118 0
13686 -6921 -7025 -7120 0
13686 -6921 -7023 -7122 0
13686 -6921 -7021 0
13686 -6921 -7019 0
13686 -6921 -7017 0
13686 -6921 -7015 0
13686 -6921 -7014 0
c ((36<=(aux594 + aux597 + aux598))=tv=SATLiteral(13687))
-13687 -7051 -7061 0
-13687 -7049 -7062 0
-13687 -7047 -7064 0
-13687 -7045 -7066 0
-13687 -7043 -7068 0
-13687 -7041 -7070 0
-13687 -7039 -7072 0
-13687 -7037 -7074 0
-13687 -7035 -7076 0
-13687 -7033 -7078 0
-13687 -7031 -7080 0
-13687 -7029 -7082 0
-13687 -7027 -7084 0
-13687 -7025 -7086 0
-13687 -7023 -7088 0
-13687 -7021 -7090 0
-13687 -7019 -7092 0
-13687 -7017 -7094 0
-13687 -7015 -7096 0
-13687 -7014 -7098 0
-13687 -6950 -7053 -7061 0
-13687 -6950 -7051 -7062 0
-13687 -6950 -7049 -7064 0
-13687 -6950 -7047 -7066 0
-13687 -6950 -7045 -7068 0
-13687 -6950 -7043 -7070 0
-13687 -6950 -7041 -7072 0
-13687 -6950 -7039 -7074 0
-13687 -6950 -7037 -7076 0
-13687 -6950 -7035 -7078 0
-13687 -6950 -7033 -7080 0
-13687 -6950 -7031 -7082 0
-13687 -6950 -7029 -7084 0
-13687 -6950 -7027 -7086 0
-13687 -6950 -7025 -7088 0
-13687 -6950 -7023 -7090 0
-13687 -6950 -7021 -7092 0
-13687 -6950 -7019 -7094 0
-13687 -6950 -7017 -7096 0
-13687 -6950 -7015 -7098 0
-13687 -6950 -7014 -7100 0
-13687 -6948 -7055 -7061 0
-13687 -6948 -7053 -7062 0
-13687 -6948 -7051 -7064 0
-13687 -6948 -7049 -7066 0
-13687 -6948 -7047 -7068 0
-13687 -6948 -7045 -7070 0
-13687 -6948 -7043 -7072 0
-13687 -6948 -7041 -7074 0
-13687 -6948 -7039 -7076 0
-13687 -6948 -7037 -7078 0
-13687 -6948 -7035 -7080 0
-13687 -6948 -7033 -7082 0
-13687 -6948 -7031 -7084 0
-13687 -6948 -7029 -7086 0
-13687 -6948 -7027 -7088 0
-13687 -6948 -7025 -7090 0
-13687 -6948 -7023 -7092 0
-13687 -6948 -7021 -7094 0
-13687 -6948 -7019 -7096 0
-13687 -6948 -7017 -7098 0
-13687 -6948 -7015 -7100 0
-13687 -6948 -7014 -7102 0
-13687 -6946 -7057 -7061 0
-13687 -6946 -7055 -7062 0
-13687 -6946 -7053 -7064 0
-13687 -6946 -7051 -7066 0
-13687 -6946 -7049 -7068 0
-13687 -6946 -7047 -7070 0
-13687 -6946 -7045 -7072 0
-13687 -6946 -7043 -7074 0
-13687 -6946 -7041 -7076 0
-13687 -6946 -7039 -7078 0
-13687 -6946 -7037 -7080 0
-13687 -6946 -7035 -7082 0
-13687 -6946 -7033 -7084 0
-13687 -6946 -7031 -7086 0
-13687 -6946 -7029 -7088 0
-13687 -6946 -7027 -7090 0
-13687 -6946 -7025 -7092 0
-13687 -6946 -7023 -7094 0
-13687 -6946 -7021 -7096 0
-13687 -6946 -7019 -7098 0
-13687 -6946 -7017 -7100 0
-13687 -6946 -7015 -7102 0
-13687 -6946 -7014 -7104 0
-13687 -6944 -7059 -7061 0
-13687 -6944 -7057 -7062 0
-13687 -6944 -7055 -7064 0
-13687 -6944 -7053 -7066 0
-13687 -6944 -7051 -7068 0
-13687 -6944 -7049 -7070 0
-13687 -6944 -7047 -7072 0
-13687 -6944 -7045 -7074 0
-13687 -6944 -7043 -7076 0
-13687 -6944 -7041 -7078 0
-13687 -6944 -7039 -7080 0
-13687 -6944 -7037 -7082 0
-13687 -6944 -7035 -7084 0
-13687 -6944 -7033 -7086 0
-13687 -6944 -7031 -7088 0
-13687 -6944 -7029 -7090 0
-13687 -6944 -7027 -7092 0
-13687 -6944 -7025 -7094 0
-13687 -6944 -7023 -7096 0
-13687 -6944 -7021 -7098 0
-13687 -6944 -7019 -7100 0
-13687 -6944 -7017 -7102 0
-13687 -6944 -7015 -7104 0
-13687 -6944 -7014 -7106 0
-13687 -6942 -7061 0
-13687 -6942 -7059 -7062 0
-13687 -6942 -7057 -7064 0
-13687 -6942 -7055 -7066 0
-13687 -6942 -7053 -7068 0
-13687 -6942 -7051 -7070 0
-13687 -6942 -7049 -7072 0
-13687 -6942 -7047 -7074 0
-13687 -6942 -7045 -7076 0
-13687 -6942 -7043 -7078 0
-13687 -6942 -7041 -7080 0
-13687 -6942 -7039 -7082 0
-13687 -6942 -7037 -7084 0
-13687 -6942 -7035 -7086 0
-13687 -6942 -7033 -7088 0
-13687 -6942 -7031 -7090 0
-13687 -6942 -7029 -7092 0
-13687 -6942 -7027 -7094 0
-13687 -6942 -7025 -7096 0
-13687 -6942 -7023 -7098 0
-13687 -6942 -7021 -7100 0
-13687 -6942 -7019 -7102 0
-13687 -6942 -7017 -7104 0
-13687 -6942 -7015 -7106 0
-13687 -6942 -7014 -7108 0
-13687 -6940 -7062 0
-13687 -6940 -7059 -7064 0
-13687 -6940 -7057 -7066 0
-13687 -6940 -7055 -7068 0
-13687 -6940 -7053 -7070 0
-13687 -6940 -7051 -7072 0
-13687 -6940 -7049 -7074 0
-13687 -6940 -7047 -7076 0
-13687 -6940 -7045 -7078 0
-13687 -6940 -7043 -7080 0
-13687 -6940 -7041 -7082 0
-13687 -6940 -7039 -7084 0
-13687 -6940 -7037 -7086 0
-13687 -6940 -7035 -7088 0
-13687 -6940 -7033 -7090 0
-13687 -6940 -7031 -7092 0
-13687 -6940 -7029 -7094 0
-13687 -6940 -7027 -7096 0
-13687 -6940 -7025 -7098 0
-13687 -6940 -7023 -7100 0
-13687 -6940 -7021 -7102 0
-13687 -6940 -7019 -7104 0
-13687 -6940 -7017 -7106 0
-13687 -6940 -7015 -7108 0
-13687 -6940 -7014 -7110 0
-13687 -6938 -7064 0
-13687 -6938 -7059 -7066 0
-13687 -6938 -7057 -7068 0
-13687 -6938 -7055 -7070 0
-13687 -6938 -7053 -7072 0
-13687 -6938 -7051 -7074 0
-13687 -6938 -7049 -7076 0
-13687 -6938 -7047 -7078 0
-13687 -6938 -7045 -7080 0
-13687 -6938 -7043 -7082 0
-13687 -6938 -7041 -7084 0
-13687 -6938 -7039 -7086 0
-13687 -6938 -7037 -7088 0
-13687 -6938 -7035 -7090 0
-13687 -6938 -7033 -7092 0
-13687 -6938 -7031 -7094 0
-13687 -6938 -7029 -7096 0
-13687 -6938 -7027 -7098 0
-13687 -6938 -7025 -7100 0
-13687 -6938 -7023 -7102 0
-13687 -6938 -7021 -7104 0
-13687 -6938 -7019 -7106 0
-13687 -6938 -7017 -7108 0
-13687 -6938 -7015 -7110 0
-13687 -6938 -7014 -7112 0
-13687 -6936 -7066 0
-13687 -6936 -7059 -7068 0
-13687 -6936 -7057 -7070 0
-13687 -6936 -7055 -7072 0
-13687 -6936 -7053 -7074 0
-13687 -6936 -7051 -7076 0
-13687 -6936 -7049 -7078 0
-13687 -6936 -7047 -7080 0
-13687 -6936 -7045 -7082 0
-13687 -6936 -7043 -7084 0
-13687 -6936 -7041 -7086 0
-13687 -6936 -7039 -7088 0
-13687 -6936 -7037 -7090 0
-13687 -6936 -7035 -7092 0
-13687 -6936 -7033 -7094 0
-13687 -6936 -7031 -7096 0
-13687 -6936 -7029 -7098 0
-13687 -6936 -7027 -7100 0
-13687 -6936 -7025 -7102 0
-13687 -6936 -7023 -7104 0
-13687 -6936 -7021 -7106 0
-13687 -6936 -7019 -7108 0
-13687 -6936 -7017 -7110 0
-13687 -6936 -7015 -7112 0
-13687 -6936 -7014 -7114 0
-13687 -6934 -7068 0
-13687 -6934 -7059 -7070 0
-13687 -6934 -7057 -7072 0
-13687 -6934 -7055 -7074 0
-13687 -6934 -7053 -7076 0
-13687 -6934 -7051 -7078 0
-13687 -6934 -7049 -7080 0
-13687 -6934 -7047 -7082 0
-13687 -6934 -7045 -7084 0
-13687 -6934 -7043 -7086 0
-13687 -6934 -7041 -7088 0
-13687 -6934 -7039 -7090 0
-13687 -6934 -7037 -7092 0
-13687 -6934 -7035 -7094 0
-13687 -6934 -7033 -7096 0
-13687 -6934 -7031 -7098 0
-13687 -6934 -7029 -7100 0
-13687 -6934 -7027 -7102 0
-13687 -6934 -7025 -7104 0
-13687 -6934 -7023 -7106 0
-13687 -6934 -7021 -7108 0
-13687 -6934 -7019 -7110 0
-13687 -6934 -7017 -7112 0
-13687 -6934 -7015 -7114 0
-13687 -6934 -7014 -7116 0
-13687 -6932 -7070 0
-13687 -6932 -7059 -7072 0
-13687 -6932 -7057 -7074 0
-13687 -6932 -7055 -7076 0
-13687 -6932 -7053 -7078 0
-13687 -6932 -7051 -7080 0
-13687 -6932 -7049 -7082 0
-13687 -6932 -7047 -7084 0
-13687 -6932 -7045 -7086 0
-13687 -6932 -7043 -7088 0
-13687 -6932 -7041 -7090 0
-13687 -6932 -7039 -7092 0
-13687 -6932 -7037 -7094 0
-13687 -6932 -7035 -7096 0
-13687 -6932 -7033 -7098 0
-13687 -6932 -7031 -7100 0
-13687 -6932 -7029 -7102 0
-13687 -6932 -7027 -7104 0
-13687 -6932 -7025 -7106 0
-13687 -6932 -7023 -7108 0
-13687 -6932 -7021 -7110 0
-13687 -6932 -7019 -7112 0
-13687 -6932 -7017 -7114 0
-13687 -6932 -7015 -7116 0
-13687 -6932 -7014 -7118 0
-13687 -6930 -7072 0
-13687 -6930 -7059 -7074 0
-13687 -6930 -7057 -7076 0
-13687 -6930 -7055 -7078 0
-13687 -6930 -7053 -7080 0
-13687 -6930 -7051 -7082 0
-13687 -6930 -7049 -7084 0
-13687 -6930 -7047 -7086 0
-13687 -6930 -7045 -7088 0
-13687 -6930 -7043 -7090 0
-13687 -6930 -7041 -7092 0
-13687 -6930 -7039 -7094 0
-13687 -6930 -7037 -7096 0
-13687 -6930 -7035 -7098 0
-13687 -6930 -7033 -7100 0
-13687 -6930 -7031 -7102 0
-13687 -6930 -7029 -7104 0
-13687 -6930 -7027 -7106 0
-13687 -6930 -7025 -7108 0
-13687 -6930 -7023 -7110 0
-13687 -6930 -7021 -7112 0
-13687 -6930 -7019 -7114 0
-13687 -6930 -7017 -7116 0
-13687 -6930 -7015 -7118 0
-13687 -6930 -7014 -7120 0
-13687 -6928 -7074 0
-13687 -6928 -7059 -7076 0
-13687 -6928 -7057 -7078 0
-13687 -6928 -7055 -7080 0
-13687 -6928 -7053 -7082 0
-13687 -6928 -7051 -7084 0
-13687 -6928 -7049 -7086 0
-13687 -6928 -7047 -7088 0
-13687 -6928 -7045 -7090 0
-13687 -6928 -7043 -7092 0
-13687 -6928 -7041 -7094 0
-13687 -6928 -7039 -7096 0
-13687 -6928 -7037 -7098 0
-13687 -6928 -7035 -7100 0
-13687 -6928 -7033 -7102 0
-13687 -6928 -7031 -7104 0
-13687 -6928 -7029 -7106 0
-13687 -6928 -7027 -7108 0
-13687 -6928 -7025 -7110 0
-13687 -6928 -7023 -7112 0
-13687 -6928 -7021 -7114 0
-13687 -6928 -7019 -7116 0
-13687 -6928 -7017 -7118 0
-13687 -6928 -7015 -7120 0
-13687 -6928 -7014 -7122 0
-13687 -6926 -7076 0
-13687 -6926 -7059 -7078 0
-13687 -6926 -7057 -7080 0
-13687 -6926 -7055 -7082 0
-13687 -6926 -7053 -7084 0
-13687 -6926 -7051 -7086 0
-13687 -6926 -7049 -7088 0
-13687 -6926 -7047 -7090 0
-13687 -6926 -7045 -7092 0
-13687 -6926 -7043 -7094 0
-13687 -6926 -7041 -7096 0
-13687 -6926 -7039 -7098 0
-13687 -6926 -7037 -7100 0
-13687 -6926 -7035 -7102 0
-13687 -6926 -7033 -7104 0
-13687 -6926 -7031 -7106 0
-13687 -6926 -7029 -7108 0
-13687 -6926 -7027 -7110 0
-13687 -6926 -7025 -7112 0
-13687 -6926 -7023 -7114 0
-13687 -6926 -7021 -7116 0
-13687 -6926 -7019 -7118 0
-13687 -6926 -7017 -7120 0
-13687 -6926 -7015 -7122 0
-13687 -6926 -7014 0
-13687 -6924 -7078 0
-13687 -6924 -7059 -7080 0
-13687 -6924 -7057 -7082 0
-13687 -6924 -7055 -7084 0
-13687 -6924 -7053 -7086 0
-13687 -6924 -7051 -7088 0
-13687 -6924 -7049 -7090 0
-13687 -6924 -7047 -7092 0
-13687 -6924 -7045 -7094 0
-13687 -6924 -7043 -7096 0
-13687 -6924 -7041 -7098 0
-13687 -6924 -7039 -7100 0
-13687 -6924 -7037 -7102 0
-13687 -6924 -7035 -7104 0
-13687 -6924 -7033 -7106 0
-13687 -6924 -7031 -7108 0
-13687 -6924 -7029 -7110 0
-13687 -6924 -7027 -7112 0
-13687 -6924 -7025 -7114 0
-13687 -6924 -7023 -7116 0
-13687 -6924 -7021 -7118 0
-13687 -6924 -7019 -7120 0
-13687 -6924 -7017 -7122 0
-13687 -6924 -7015 0
-13687 -6924 -7014 0
-13687 -6922 -7080 0
-13687 -6922 -7059 -7082 0
-13687 -6922 -7057 -7084 0
-13687 -6922 -7055 -7086 0
-13687 -6922 -7053 -7088 0
-13687 -6922 -7051 -7090 0
-13687 -6922 -7049 -7092 0
-13687 -6922 -7047 -7094 0
-13687 -6922 -7045 -7096 0
-13687 -6922 -7043 -7098 0
-13687 -6922 -7041 -7100 0
-13687 -6922 -7039 -7102 0
-13687 -6922 -7037 -7104 0
-13687 -6922 -7035 -7106 0
-13687 -6922 -7033 -7108 0
-13687 -6922 -7031 -7110 0
-13687 -6922 -7029 -7112 0
-13687 -6922 -7027 -7114 0
-13687 -6922 -7025 -7116 0
-13687 -6922 -7023 -7118 0
-13687 -6922 -7021 -7120 0
-13687 -6922 -7019 -7122 0
-13687 -6922 -7017 0
-13687 -6922 -7015 0
-13687 -6922 -7014 0
-13687 -6921 -7082 0
-13687 -6921 -7059 -7084 0
-13687 -6921 -7057 -7086 0
-13687 -6921 -7055 -7088 0
-13687 -6921 -7053 -7090 0
-13687 -6921 -7051 -7092 0
-13687 -6921 -7049 -7094 0
-13687 -6921 -7047 -7096 0
-13687 -6921 -7045 -7098 0
-13687 -6921 -7043 -7100 0
-13687 -6921 -7041 -7102 0
-13687 -6921 -7039 -7104 0
-13687 -6921 -7037 -7106 0
-13687 -6921 -7035 -7108 0
-13687 -6921 -7033 -7110 0
-13687 -6921 -7031 -7112 0
-13687 -6921 -7029 -7114 0
-13687 -6921 -7027 -7116 0
-13687 -6921 -7025 -7118 0
-13687 -6921 -7023 -7120 0
-13687 -6921 -7021 -7122 0
-13687 -6921 -7019 0
-13687 -6921 -7017 0
-13687 -6921 -7015 0
-13687 -6921 -7014 0
13687 7019 7122 0
13687 7021 7120 0
13687 7023 7118 0
13687 7025 7116 0
13687 7027 7114 0
13687 7029 7112 0
13687 7031 7110 0
13687 7033 7108 0
13687 7035 7106 0
13687 7037 7104 0
13687 7039 7102 0
13687 7041 7100 0
13687 7043 7098 0
13687 7045 7096 0
13687 7047 7094 0
13687 7049 7092 0
13687 7051 7090 0
13687 7053 7088 0
13687 7055 7086 0
13687 7057 7084 0
13687 7059 7082 0
13687 6921 7017 7122 0
13687 6921 7019 7120 0
13687 6921 7021 7118 0
13687 6921 7023 7116 0
13687 6921 7025 7114 0
13687 6921 7027 7112 0
13687 6921 7029 7110 0
13687 6921 7031 7108 0
13687 6921 7033 7106 0
13687 6921 7035 7104 0
13687 6921 7037 7102 0
13687 6921 7039 7100 0
13687 6921 7041 7098 0
13687 6921 7043 7096 0
13687 6921 7045 7094 0
13687 6921 7047 7092 0
13687 6921 7049 7090 0
13687 6921 7051 7088 0
13687 6921 7053 7086 0
13687 6921 7055 7084 0
13687 6921 7057 7082 0
13687 6921 7059 7080 0
13687 6922 7015 7122 0
13687 6922 7017 7120 0
13687 6922 7019 7118 0
13687 6922 7021 7116 0
13687 6922 7023 7114 0
13687 6922 7025 7112 0
13687 6922 7027 7110 0
13687 6922 7029 7108 0
13687 6922 7031 7106 0
13687 6922 7033 7104 0
13687 6922 7035 7102 0
13687 6922 7037 7100 0
13687 6922 7039 7098 0
13687 6922 7041 7096 0
13687 6922 7043 7094 0
13687 6922 7045 7092 0
13687 6922 7047 7090 0
13687 6922 7049 7088 0
13687 6922 7051 7086 0
13687 6922 7053 7084 0
13687 6922 7055 7082 0
13687 6922 7057 7080 0
13687 6922 7059 7078 0
13687 6924 7014 7122 0
13687 6924 7015 7120 0
13687 6924 7017 7118 0
13687 6924 7019 7116 0
13687 6924 7021 7114 0
13687 6924 7023 7112 0
13687 6924 7025 7110 0
13687 6924 7027 7108 0
13687 6924 7029 7106 0
13687 6924 7031 7104 0
13687 6924 7033 7102 0
13687 6924 7035 7100 0
13687 6924 7037 7098 0
13687 6924 7039 7096 0
13687 6924 7041 7094 0
13687 6924 7043 7092 0
13687 6924 7045 7090 0
13687 6924 7047 7088 0
13687 6924 7049 7086 0
13687 6924 7051 7084 0
13687 6924 7053 7082 0
13687 6924 7055 7080 0
13687 6924 7057 7078 0
13687 6924 7059 7076 0
13687 6926 7122 0
13687 6926 7014 7120 0
13687 6926 7015 7118 0
13687 6926 7017 7116 0
13687 6926 7019 7114 0
13687 6926 7021 7112 0
13687 6926 7023 7110 0
13687 6926 7025 7108 0
13687 6926 7027 7106 0
13687 6926 7029 7104 0
13687 6926 7031 7102 0
13687 6926 7033 7100 0
13687 6926 7035 7098 0
13687 6926 7037 7096 0
13687 6926 7039 7094 0
13687 6926 7041 7092 0
13687 6926 7043 7090 0
13687 6926 7045 7088 0
13687 6926 7047 7086 0
13687 6926 7049 7084 0
13687 6926 7051 7082 0
13687 6926 7053 7080 0
13687 6926 7055 7078 0
13687 6926 7057 7076 0
13687 6926 7059 7074 0
13687 6928 7120 0
13687 6928 7014 7118 0
13687 6928 7015 7116 0
13687 6928 7017 7114 0
13687 6928 7019 7112 0
13687 6928 7021 7110 0
13687 6928 7023 7108 0
13687 6928 7025 7106 0
13687 6928 7027 7104 0
13687 6928 7029 7102 0
13687 6928 7031 7100 0
13687 6928 7033 7098 0
13687 6928 7035 7096 0
13687 6928 7037 7094 0
13687 6928 7039 7092 0
13687 6928 7041 7090 0
13687 6928 7043 7088 0
13687 6928 7045 7086 0
13687 6928 7047 7084 0
13687 6928 7049 7082 0
13687 6928 7051 7080 0
13687 6928 7053 7078 0
13687 6928 7055 7076 0
13687 6928 7057 7074 0
13687 6928 7059 7072 0
13687 6930 7118 0
13687 6930 7014 7116 0
13687 6930 7015 7114 0
13687 6930 7017 7112 0
13687 6930 7019 7110 0
13687 6930 7021 7108 0
13687 6930 7023 7106 0
13687 6930 7025 7104 0
13687 6930 7027 7102 0
13687 6930 7029 7100 0
13687 6930 7031 7098 0
13687 6930 7033 7096 0
13687 6930 7035 7094 0
13687 6930 7037 7092 0
13687 6930 7039 7090 0
13687 6930 7041 7088 0
13687 6930 7043 7086 0
13687 6930 7045 7084 0
13687 6930 7047 7082 0
13687 6930 7049 7080 0
13687 6930 7051 7078 0
13687 6930 7053 7076 0
13687 6930 7055 7074 0
13687 6930 7057 7072 0
13687 6930 7059 7070 0
13687 6932 7116 0
13687 6932 7014 7114 0
13687 6932 7015 7112 0
13687 6932 7017 7110 0
13687 6932 7019 7108 0
13687 6932 7021 7106 0
13687 6932 7023 7104 0
13687 6932 7025 7102 0
13687 6932 7027 7100 0
13687 6932 7029 7098 0
13687 6932 7031 7096 0
13687 6932 7033 7094 0
13687 6932 7035 7092 0
13687 6932 7037 7090 0
13687 6932 7039 7088 0
13687 6932 7041 7086 0
13687 6932 7043 7084 0
13687 6932 7045 7082 0
13687 6932 7047 7080 0
13687 6932 7049 7078 0
13687 6932 7051 7076 0
13687 6932 7053 7074 0
13687 6932 7055 7072 0
13687 6932 7057 7070 0
13687 6932 7059 7068 0
13687 6934 7114 0
13687 6934 7014 7112 0
13687 6934 7015 7110 0
13687 6934 7017 7108 0
13687 6934 7019 7106 0
13687 6934 7021 7104 0
13687 6934 7023 7102 0
13687 6934 7025 7100 0
13687 6934 7027 7098 0
13687 6934 7029 7096 0
13687 6934 7031 7094 0
13687 6934 7033 7092 0
13687 6934 7035 7090 0
13687 6934 7037 7088 0
13687 6934 7039 7086 0
13687 6934 7041 7084 0
13687 6934 7043 7082 0
13687 6934 7045 7080 0
13687 6934 7047 7078 0
13687 6934 7049 7076 0
13687 6934 7051 7074 0
13687 6934 7053 7072 0
13687 6934 7055 7070 0
13687 6934 7057 7068 0
13687 6934 7059 7066 0
13687 6936 7112 0
13687 6936 7014 7110 0
13687 6936 7015 7108 0
13687 6936 7017 7106 0
13687 6936 7019 7104 0
13687 6936 7021 7102 0
13687 6936 7023 7100 0
13687 6936 7025 7098 0
13687 6936 7027 7096 0
13687 6936 7029 7094 0
13687 6936 7031 7092 0
13687 6936 7033 7090 0
13687 6936 7035 7088 0
13687 6936 7037 7086 0
13687 6936 7039 7084 0
13687 6936 7041 7082 0
13687 6936 7043 7080 0
13687 6936 7045 7078 0
13687 6936 7047 7076 0
13687 6936 7049 7074 0
13687 6936 7051 7072 0
13687 6936 7053 7070 0
13687 6936 7055 7068 0
13687 6936 7057 7066 0
13687 6936 7059 7064 0
13687 6938 7110 0
13687 6938 7014 7108 0
13687 6938 7015 7106 0
13687 6938 7017 7104 0
13687 6938 7019 7102 0
13687 6938 7021 7100 0
13687 6938 7023 7098 0
13687 6938 7025 7096 0
13687 6938 7027 7094 0
13687 6938 7029 7092 0
13687 6938 7031 7090 0
13687 6938 7033 7088 0
13687 6938 7035 7086 0
13687 6938 7037 7084 0
13687 6938 7039 7082 0
13687 6938 7041 7080 0
13687 6938 7043 7078 0
13687 6938 7045 7076 0
13687 6938 7047 7074 0
13687 6938 7049 7072 0
13687 6938 7051 7070 0
13687 6938 7053 7068 0
13687 6938 7055 7066 0
13687 6938 7057 7064 0
13687 6938 7059 7062 0
13687 6940 7108 0
13687 6940 7014 7106 0
13687 6940 7015 7104 0
13687 6940 7017 7102 0
13687 6940 7019 7100 0
13687 6940 7021 7098 0
13687 6940 7023 7096 0
13687 6940 7025 7094 0
13687 6940 7027 7092 0
13687 6940 7029 7090 0
13687 6940 7031 7088 0
13687 6940 7033 7086 0
13687 6940 7035 7084 0
13687 6940 7037 7082 0
13687 6940 7039 7080 0
13687 6940 7041 7078 0
13687 6940 7043 7076 0
13687 6940 7045 7074 0
13687 6940 7047 7072 0
13687 6940 7049 7070 0
13687 6940 7051 7068 0
13687 6940 7053 7066 0
13687 6940 7055 7064 0
13687 6940 7057 7062 0
13687 6940 7059 7061 0
13687 6942 7106 0
13687 6942 7014 7104 0
13687 6942 7015 7102 0
13687 6942 7017 7100 0
13687 6942 7019 7098 0
13687 6942 7021 7096 0
13687 6942 7023 7094 0
13687 6942 7025 7092 0
13687 6942 7027 7090 0
13687 6942 7029 7088 0
13687 6942 7031 7086 0
13687 6942 7033 7084 0
13687 6942 7035 7082 0
13687 6942 7037 7080 0
13687 6942 7039 7078 0
13687 6942 7041 7076 0
13687 6942 7043 7074 0
13687 6942 7045 7072 0
13687 6942 7047 7070 0
13687 6942 7049 7068 0
13687 6942 7051 7066 0
13687 6942 7053 7064 0
13687 6942 7055 7062 0
13687 6942 7057 7061 0
13687 6942 7059 0
13687 6944 7104 0
13687 6944 7014 7102 0
13687 6944 7015 7100 0
13687 6944 7017 7098 0
13687 6944 7019 7096 0
13687 6944 7021 7094 0
13687 6944 7023 7092 0
13687 6944 7025 7090 0
13687 6944 7027 7088 0
13687 6944 7029 7086 0
13687 6944 7031 7084 0
13687 6944 7033 7082 0
13687 6944 7035 7080 0
13687 6944 7037 7078 0
13687 6944 7039 7076 0
13687 6944 7041 7074 0
13687 6944 7043 7072 0
13687 6944 7045 7070 0
13687 6944 7047 7068 0
13687 6944 7049 7066 0
13687 6944 7051 7064 0
13687 6944 7053 7062 0
13687 6944 7055 7061 0
13687 6944 7057 0
13687 6944 7059 0
13687 6946 7102 0
13687 6946 7014 7100 0
13687 6946 7015 7098 0
13687 6946 7017 7096 0
13687 6946 7019 7094 0
13687 6946 7021 7092 0
13687 6946 7023 7090 0
13687 6946 7025 7088 0
13687 6946 7027 7086 0
13687 6946 7029 7084 0
13687 6946 7031 7082 0
13687 6946 7033 7080 0
13687 6946 7035 7078 0
13687 6946 7037 7076 0
13687 6946 7039 7074 0
13687 6946 7041 7072 0
13687 6946 7043 7070 0
13687 6946 7045 7068 0
13687 6946 7047 7066 0
13687 6946 7049 7064 0
13687 6946 7051 7062 0
13687 6946 7053 7061 0
13687 6946 7055 0
13687 6946 7057 0
13687 6946 7059 0
13687 6948 7100 0
13687 6948 7014 7098 0
13687 6948 7015 7096 0
13687 6948 7017 7094 0
13687 6948 7019 7092 0
13687 6948 7021 7090 0
13687 6948 7023 7088 0
13687 6948 7025 7086 0
13687 6948 7027 7084 0
13687 6948 7029 7082 0
13687 6948 7031 7080 0
13687 6948 7033 7078 0
13687 6948 7035 7076 0
13687 6948 7037 7074 0
13687 6948 7039 7072 0
13687 6948 7041 7070 0
13687 6948 7043 7068 0
13687 6948 7045 7066 0
13687 6948 7047 7064 0
13687 6948 7049 7062 0
13687 6948 7051 7061 0
13687 6948 7053 0
13687 6948 7055 0
13687 6948 7057 0
13687 6948 7059 0
13687 6950 7098 0
13687 6950 7014 7096 0
13687 6950 7015 7094 0
13687 6950 7017 7092 0
13687 6950 7019 7090 0
13687 6950 7021 7088 0
13687 6950 7023 7086 0
13687 6950 7025 7084 0
13687 6950 7027 7082 0
13687 6950 7029 7080 0
13687 6950 7031 7078 0
13687 6950 7033 7076 0
13687 6950 7035 7074 0
13687 6950 7037 7072 0
13687 6950 7039 7070 0
13687 6950 7041 7068 0
13687 6950 7043 7066 0
13687 6950 7045 7064 0
13687 6950 7047 7062 0
13687 6950 7049 7061 0
13687 6950 7051 0
13687 6950 7053 0
13687 6950 7055 0
13687 6950 7057 0
13687 6950 7059 0
c (((aux600 + aux603 + aux604)<=36)=tv=SATLiteral(13688))
-13688 7255 7356 0
-13688 7257 7354 0
-13688 7259 7352 0
-13688 7261 7350 0
-13688 7263 7348 0
-13688 7265 7346 0
-13688 7267 7344 0
-13688 7269 7342 0
-13688 7271 7340 0
-13688 7273 7338 0
-13688 7275 7336 0
-13688 7277 7334 0
-13688 7279 7332 0
-13688 7281 7330 0
-13688 7283 7328 0
-13688 7285 7326 0
-13688 7287 7324 0
-13688 7289 7322 0
-13688 7291 7320 0
-13688 7293 7318 0
-13688 7155 7253 7356 0
-13688 7155 7255 7354 0
-13688 7155 7257 7352 0
-13688 7155 7259 7350 0
-13688 7155 7261 7348 0
-13688 7155 7263 7346 0
-13688 7155 7265 7344 0
-13688 7155 7267 7342 0
-13688 7155 7269 7340 0
-13688 7155 7271 7338 0
-13688 7155 7273 7336 0
-13688 7155 7275 7334 0
-13688 7155 7277 7332 0
-13688 7155 7279 7330 0
-13688 7155 7281 7328 0
-13688 7155 7283 7326 0
-13688 7155 7285 7324 0
-13688 7155 7287 7322 0
-13688 7155 7289 7320 0
-13688 7155 7291 7318 0
-13688 7155 7293 7316 0
-13688 7156 7251 7356 0
-13688 7156 7253 7354 0
-13688 7156 7255 7352 0
-13688 7156 7257 7350 0
-13688 7156 7259 7348 0
-13688 7156 7261 7346 0
-13688 7156 7263 7344 0
-13688 7156 7265 7342 0
-13688 7156 7267 7340 0
-13688 7156 7269 7338 0
-13688 7156 7271 7336 0
-13688 7156 7273 7334 0
-13688 7156 7275 7332 0
-13688 7156 7277 7330 0
-13688 7156 7279 7328 0
-13688 7156 7281 7326 0
-13688 7156 7283 7324 0
-13688 7156 7285 7322 0
-13688 7156 7287 7320 0
-13688 7156 7289 7318 0
-13688 7156 7291 7316 0
-13688 7156 7293 7314 0
-13688 7158 7249 7356 0
-13688 7158 7251 7354 0
-13688 7158 7253 7352 0
-13688 7158 7255 7350 0
-13688 7158 7257 7348 0
-13688 7158 7259 7346 0
-13688 7158 7261 7344 0
-13688 7158 7263 7342 0
-13688 7158 7265 7340 0
-13688 7158 7267 7338 0
-13688 7158 7269 7336 0
-13688 7158 7271 7334 0
-13688 7158 7273 7332 0
-13688 7158 7275 7330 0
-13688 7158 7277 7328 0
-13688 7158 7279 7326 0
-13688 7158 7281 7324 0
-13688 7158 7283 7322 0
-13688 7158 7285 7320 0
-13688 7158 7287 7318 0
-13688 7158 7289 7316 0
-13688 7158 7291 7314 0
-13688 7158 7293 7312 0
-13688 7160 7248 7356 0
-13688 7160 7249 7354 0
-13688 7160 7251 7352 0
-13688 7160 7253 7350 0
-13688 7160 7255 7348 0
-13688 7160 7257 7346 0
-13688 7160 7259 7344 0
-13688 7160 7261 7342 0
-13688 7160 7263 7340 0
-13688 7160 7265 7338 0
-13688 7160 7267 7336 0
-13688 7160 7269 7334 0
-13688 7160 7271 7332 0
-13688 7160 7273 7330 0
-13688 7160 7275 7328 0
-13688 7160 7277 7326 0
-13688 7160 7279 7324 0
-13688 7160 7281 7322 0
-13688 7160 7283 7320 0
-13688 7160 7285 7318 0
-13688 7160 7287 7316 0
-13688 7160 7289 7314 0
-13688 7160 7291 7312 0
-13688 7160 7293 7310 0
-13688 7162 7356 0
-13688 7162 7248 7354 0
-13688 7162 7249 7352 0
-13688 7162 7251 7350 0
-13688 7162 7253 7348 0
-13688 7162 7255 7346 0
-13688 7162 7257 7344 0
-13688 7162 7259 7342 0
-13688 7162 7261 7340 0
-13688 7162 7263 7338 0
-13688 7162 7265 7336 0
-13688 7162 7267 7334 0
-13688 7162 7269 7332 0
-13688 7162 7271 7330 0
-13688 7162 7273 7328 0
-13688 7162 7275 7326 0
-13688 7162 7277 7324 0
-13688 7162 7279 7322 0
-13688 7162 7281 7320 0
-13688 7162 7283 7318 0
-13688 7162 7285 7316 0
-13688 7162 7287 7314 0
-13688 7162 7289 7312 0
-13688 7162 7291 7310 0
-13688 7162 7293 7308 0
-13688 7164 7354 0
-13688 7164 7248 7352 0
-13688 7164 7249 7350 0
-13688 7164 7251 7348 0
-13688 7164 7253 7346 0
-13688 7164 7255 7344 0
-13688 7164 7257 7342 0
-13688 7164 7259 7340 0
-13688 7164 7261 7338 0
-13688 7164 7263 7336 0
-13688 7164 7265 7334 0
-13688 7164 7267 7332 0
-13688 7164 7269 7330 0
-13688 7164 7271 7328 0
-13688 7164 7273 7326 0
-13688 7164 7275 7324 0
-13688 7164 7277 7322 0
-13688 7164 7279 7320 0
-13688 7164 7281 7318 0
-13688 7164 7283 7316 0
-13688 7164 7285 7314 0
-13688 7164 7287 7312 0
-13688 7164 7289 7310 0
-13688 7164 7291 7308 0
-13688 7164 7293 7306 0
-13688 7166 7352 0
-13688 7166 7248 7350 0
-13688 7166 7249 7348 0
-13688 7166 7251 7346 0
-13688 7166 7253 7344 0
-13688 7166 7255 7342 0
-13688 7166 7257 7340 0
-13688 7166 7259 7338 0
-13688 7166 7261 7336 0
-13688 7166 7263 7334 0
-13688 7166 7265 7332 0
-13688 7166 7267 7330 0
-13688 7166 7269 7328 0
-13688 7166 7271 7326 0
-13688 7166 7273 7324 0
-13688 7166 7275 7322 0
-13688 7166 7277 7320 0
-13688 7166 7279 7318 0
-13688 7166 7281 7316 0
-13688 7166 7283 7314 0
-13688 7166 7285 7312 0
-13688 7166 7287 7310 0
-13688 7166 7289 7308 0
-13688 7166 7291 7306 0
-13688 7166 7293 7304 0
-13688 7168 7350 0
-13688 7168 7248 7348 0
-13688 7168 7249 7346 0
-13688 7168 7251 7344 0
-13688 7168 7253 7342 0
-13688 7168 7255 7340 0
-13688 7168 7257 7338 0
-13688 7168 7259 7336 0
-13688 7168 7261 7334 0
-13688 7168 7263 7332 0
-13688 7168 7265 7330 0
-13688 7168 7267 7328 0
-13688 7168 7269 7326 0
-13688 7168 7271 7324 0
-13688 7168 7273 7322 0
-13688 7168 7275 7320 0
-13688 7168 7277 7318 0
-13688 7168 7279 7316 0
-13688 7168 7281 7314 0
-13688 7168 7283 7312 0
-13688 7168 7285 7310 0
-13688 7168 7287 7308 0
-13688 7168 7289 7306 0
-13688 7168 7291 7304 0
-13688 7168 7293 7302 0
-13688 7170 7348 0
-13688 7170 7248 7346 0
-13688 7170 7249 7344 0
-13688 7170 7251 7342 0
-13688 7170 7253 7340 0
-13688 7170 7255 7338 0
-13688 7170 7257 7336 0
-13688 7170 7259 7334 0
-13688 7170 7261 7332 0
-13688 7170 7263 7330 0
-13688 7170 7265 7328 0
-13688 7170 7267 7326 0
-13688 7170 7269 7324 0
-13688 7170 7271 7322 0
-13688 7170 7273 7320 0
-13688 7170 7275 7318 0
-13688 7170 7277 7316 0
-13688 7170 7279 7314 0
-13688 7170 7281 7312 0
-13688 7170 7283 7310 0
-13688 7170 7285 7308 0
-13688 7170 7287 7306 0
-13688 7170 7289 7304 0
-13688 7170 7291 7302 0
-13688 7170 7293 7300 0
-13688 7172 7346 0
-13688 7172 7248 7344 0
-13688 7172 7249 7342 0
-13688 7172 7251 7340 0
-13688 7172 7253 7338 0
-13688 7172 7255 7336 0
-13688 7172 7257 7334 0
-13688 7172 7259 7332 0
-13688 7172 7261 7330 0
-13688 7172 7263 7328 0
-13688 7172 7265 7326 0
-13688 7172 7267 7324 0
-13688 7172 7269 7322 0
-13688 7172 7271 7320 0
-13688 7172 7273 7318 0
-13688 7172 7275 7316 0
-13688 7172 7277 7314 0
-13688 7172 7279 7312 0
-13688 7172 7281 7310 0
-13688 7172 7283 7308 0
-13688 7172 7285 7306 0
-13688 7172 7287 7304 0
-13688 7172 7289 7302 0
-13688 7172 7291 7300 0
-13688 7172 7293 7298 0
-13688 7174 7344 0
-13688 7174 7248 7342 0
-13688 7174 7249 7340 0
-13688 7174 7251 7338 0
-13688 7174 7253 7336 0
-13688 7174 7255 7334 0
-13688 7174 7257 7332 0
-13688 7174 7259 7330 0
-13688 7174 7261 7328 0
-13688 7174 7263 7326 0
-13688 7174 7265 7324 0
-13688 7174 7267 7322 0
-13688 7174 7269 7320 0
-13688 7174 7271 7318 0
-13688 7174 7273 7316 0
-13688 7174 7275 7314 0
-13688 7174 7277 7312 0
-13688 7174 7279 7310 0
-13688 7174 7281 7308 0
-13688 7174 7283 7306 0
-13688 7174 7285 7304 0
-13688 7174 7287 7302 0
-13688 7174 7289 7300 0
-13688 7174 7291 7298 0
-13688 7174 7293 7296 0
-13688 7176 7342 0
-13688 7176 7248 7340 0
-13688 7176 7249 7338 0
-13688 7176 7251 7336 0
-13688 7176 7253 7334 0
-13688 7176 7255 7332 0
-13688 7176 7257 7330 0
-13688 7176 7259 7328 0
-13688 7176 7261 7326 0
-13688 7176 7263 7324 0
-13688 7176 7265 7322 0
-13688 7176 7267 7320 0
-13688 7176 7269 7318 0
-13688 7176 7271 7316 0
-13688 7176 7273 7314 0
-13688 7176 7275 7312 0
-13688 7176 7277 7310 0
-13688 7176 7279 7308 0
-13688 7176 7281 7306 0
-13688 7176 7283 7304 0
-13688 7176 7285 7302 0
-13688 7176 7287 7300 0
-13688 7176 7289 7298 0
-13688 7176 7291 7296 0
-13688 7176 7293 7295 0
-13688 7178 7340 0
-13688 7178 7248 7338 0
-13688 7178 7249 7336 0
-13688 7178 7251 7334 0
-13688 7178 7253 7332 0
-13688 7178 7255 7330 0
-13688 7178 7257 7328 0
-13688 7178 7259 7326 0
-13688 7178 7261 7324 0
-13688 7178 7263 7322 0
-13688 7178 7265 7320 0
-13688 7178 7267 7318 0
-13688 7178 7269 7316 0
-13688 7178 7271 7314 0
-13688 7178 7273 7312 0
-13688 7178 7275 7310 0
-13688 7178 7277 7308 0
-13688 7178 7279 7306 0
-13688 7178 7281 7304 0
-13688 7178 7283 7302 0
-13688 7178 7285 7300 0
-13688 7178 7287 7298 0
-13688 7178 7289 7296 0
-13688 7178 7291 7295 0
-13688 7178 7293 0
-13688 7180 7338 0
-13688 7180 7248 7336 0
-13688 7180 7249 7334 0
-13688 7180 7251 7332 0
-13688 7180 7253 7330 0
-13688 7180 7255 7328 0
-13688 7180 7257 7326 0
-13688 7180 7259 7324 0
-13688 7180 7261 7322 0
-13688 7180 7263 7320 0
-13688 7180 7265 7318 0
-13688 7180 7267 7316 0
-13688 7180 7269 7314 0
-13688 7180 7271 7312 0
-13688 7180 7273 7310 0
-13688 7180 7275 7308 0
-13688 7180 7277 7306 0
-13688 7180 7279 7304 0
-13688 7180 7281 7302 0
-13688 7180 7283 7300 0
-13688 7180 7285 7298 0
-13688 7180 7287 7296 0
-13688 7180 7289 7295 0
-13688 7180 7291 0
-13688 7180 7293 0
-13688 7182 7336 0
-13688 7182 7248 7334 0
-13688 7182 7249 7332 0
-13688 7182 7251 7330 0
-13688 7182 7253 7328 0
-13688 7182 7255 7326 0
-13688 7182 7257 7324 0
-13688 7182 7259 7322 0
-13688 7182 7261 7320 0
-13688 7182 7263 7318 0
-13688 7182 7265 7316 0
-13688 7182 7267 7314 0
-13688 7182 7269 7312 0
-13688 7182 7271 7310 0
-13688 7182 7273 7308 0
-13688 7182 7275 7306 0
-13688 7182 7277 7304 0
-13688 7182 7279 7302 0
-13688 7182 7281 7300 0
-13688 7182 7283 7298 0
-13688 7182 7285 7296 0
-13688 7182 7287 7295 0
-13688 7182 7289 0
-13688 7182 7291 0
-13688 7182 7293 0
-13688 7184 7334 0
-13688 7184 7248 7332 0
-13688 7184 7249 7330 0
-13688 7184 7251 7328 0
-13688 7184 7253 7326 0
-13688 7184 7255 7324 0
-13688 7184 7257 7322 0
-13688 7184 7259 7320 0
-13688 7184 7261 7318 0
-13688 7184 7263 7316 0
-13688 7184 7265 7314 0
-13688 7184 7267 7312 0
-13688 7184 7269 7310 0
-13688 7184 7271 7308 0
-13688 7184 7273 7306 0
-13688 7184 7275 7304 0
-13688 7184 7277 7302 0
-13688 7184 7279 7300 0
-13688 7184 7281 7298 0
-13688 7184 7283 7296 0
-13688 7184 7285 7295 0
-13688 7184 7287 0
-13688 7184 7289 0
-13688 7184 7291 0
-13688 7184 7293 0
13688 -7287 -7295 0
13688 -7285 -7296 0
13688 -7283 -7298 0
13688 -7281 -7300 0
13688 -7279 -7302 0
13688 -7277 -7304 0
13688 -7275 -7306 0
13688 -7273 -7308 0
13688 -7271 -7310 0
13688 -7269 -7312 0
13688 -7267 -7314 0
13688 -7265 -7316 0
13688 -7263 -7318 0
13688 -7261 -7320 0
13688 -7259 -7322 0
13688 -7257 -7324 0
13688 -7255 -7326 0
13688 -7253 -7328 0
13688 -7251 -7330 0
13688 -7249 -7332 0
13688 -7248 -7334 0
13688 -7184 -7289 -7295 0
13688 -7184 -7287 -7296 0
13688 -7184 -7285 -7298 0
13688 -7184 -7283 -7300 0
13688 -7184 -7281 -7302 0
13688 -7184 -7279 -7304 0
13688 -7184 -7277 -7306 0
13688 -7184 -7275 -7308 0
13688 -7184 -7273 -7310 0
13688 -7184 -7271 -7312 0
13688 -7184 -7269 -7314 0
13688 -7184 -7267 -7316 0
13688 -7184 -7265 -7318 0
13688 -7184 -7263 -7320 0
13688 -7184 -7261 -7322 0
13688 -7184 -7259 -7324 0
13688 -7184 -7257 -7326 0
13688 -7184 -7255 -7328 0
13688 -7184 -7253 -7330 0
13688 -7184 -7251 -7332 0
13688 -7184 -7249 -7334 0
13688 -7184 -7248 -7336 0
13688 -7182 -7291 -7295 0
13688 -7182 -7289 -7296 0
13688 -7182 -7287 -7298 0
13688 -7182 -7285 -7300 0
13688 -7182 -7283 -7302 0
13688 -7182 -7281 -7304 0
13688 -7182 -7279 -7306 0
13688 -7182 -7277 -7308 0
13688 -7182 -7275 -7310 0
13688 -7182 -7273 -7312 0
13688 -7182 -7271 -7314 0
13688 -7182 -7269 -7316 0
13688 -7182 -7267 -7318 0
13688 -7182 -7265 -7320 0
13688 -7182 -7263 -7322 0
13688 -7182 -7261 -7324 0
13688 -7182 -7259 -7326 0
13688 -7182 -7257 -7328 0
13688 -7182 -7255 -7330 0
13688 -7182 -7253 -7332 0
13688 -7182 -7251 -7334 0
13688 -7182 -7249 -7336 0
13688 -7182 -7248 -7338 0
13688 -7180 -7293 -7295 0
13688 -7180 -7291 -7296 0
13688 -7180 -7289 -7298 0
13688 -7180 -7287 -7300 0
13688 -7180 -7285 -7302 0
13688 -7180 -7283 -7304 0
13688 -7180 -7281 -7306 0
13688 -7180 -7279 -7308 0
13688 -7180 -7277 -7310 0
13688 -7180 -7275 -7312 0
13688 -7180 -7273 -7314 0
13688 -7180 -7271 -7316 0
13688 -7180 -7269 -7318 0
13688 -7180 -7267 -7320 0
13688 -7180 -7265 -7322 0
13688 -7180 -7263 -7324 0
13688 -7180 -7261 -7326 0
13688 -7180 -7259 -7328 0
13688 -7180 -7257 -7330 0
13688 -7180 -7255 -7332 0
13688 -7180 -7253 -7334 0
13688 -7180 -7251 -7336 0
13688 -7180 -7249 -7338 0
13688 -7180 -7248 -7340 0
13688 -7178 -7295 0
13688 -7178 -7293 -7296 0
13688 -7178 -7291 -7298 0
13688 -7178 -7289 -7300 0
13688 -7178 -7287 -7302 0
13688 -7178 -7285 -7304 0
13688 -7178 -7283 -7306 0
13688 -7178 -7281 -7308 0
13688 -7178 -7279 -7310 0
13688 -7178 -7277 -7312 0
13688 -7178 -7275 -7314 0
13688 -7178 -7273 -7316 0
13688 -7178 -7271 -7318 0
13688 -7178 -7269 -7320 0
13688 -7178 -7267 -7322 0
13688 -7178 -7265 -7324 0
13688 -7178 -7263 -7326 0
13688 -7178 -7261 -7328 0
13688 -7178 -7259 -7330 0
13688 -7178 -7257 -7332 0
13688 -7178 -7255 -7334 0
13688 -7178 -7253 -7336 0
13688 -7178 -7251 -7338 0
13688 -7178 -7249 -7340 0
13688 -7178 -7248 -7342 0
13688 -7176 -7296 0
13688 -7176 -7293 -7298 0
13688 -7176 -7291 -7300 0
13688 -7176 -7289 -7302 0
13688 -7176 -7287 -7304 0
13688 -7176 -7285 -7306 0
13688 -7176 -7283 -7308 0
13688 -7176 -7281 -7310 0
13688 -7176 -7279 -7312 0
13688 -7176 -7277 -7314 0
13688 -7176 -7275 -7316 0
13688 -7176 -7273 -7318 0
13688 -7176 -7271 -7320 0
13688 -7176 -7269 -7322 0
13688 -7176 -7267 -7324 0
13688 -7176 -7265 -7326 0
13688 -7176 -7263 -7328 0
13688 -7176 -7261 -7330 0
13688 -7176 -7259 -7332 0
13688 -7176 -7257 -7334 0
13688 -7176 -7255 -7336 0
13688 -7176 -7253 -7338 0
13688 -7176 -7251 -7340 0
13688 -7176 -7249 -7342 0
13688 -7176 -7248 -7344 0
13688 -7174 -7298 0
13688 -7174 -7293 -7300 0
13688 -7174 -7291 -7302 0
13688 -7174 -7289 -7304 0
13688 -7174 -7287 -7306 0
13688 -7174 -7285 -7308 0
13688 -7174 -7283 -7310 0
13688 -7174 -7281 -7312 0
13688 -7174 -7279 -7314 0
13688 -7174 -7277 -7316 0
13688 -7174 -7275 -7318 0
13688 -7174 -7273 -7320 0
13688 -7174 -7271 -7322 0
13688 -7174 -7269 -7324 0
13688 -7174 -7267 -7326 0
13688 -7174 -7265 -7328 0
13688 -7174 -7263 -7330 0
13688 -7174 -7261 -7332 0
13688 -7174 -7259 -7334 0
13688 -7174 -7257 -7336 0
13688 -7174 -7255 -7338 0
13688 -7174 -7253 -7340 0
13688 -7174 -7251 -7342 0
13688 -7174 -7249 -7344 0
13688 -7174 -7248 -7346 0
13688 -7172 -7300 0
13688 -7172 -7293 -7302 0
13688 -7172 -7291 -7304 0
13688 -7172 -7289 -7306 0
13688 -7172 -7287 -7308 0
13688 -7172 -7285 -7310 0
13688 -7172 -7283 -7312 0
13688 -7172 -7281 -7314 0
13688 -7172 -7279 -7316 0
13688 -7172 -7277 -7318 0
13688 -7172 -7275 -7320 0
13688 -7172 -7273 -7322 0
13688 -7172 -7271 -7324 0
13688 -7172 -7269 -7326 0
13688 -7172 -7267 -7328 0
13688 -7172 -7265 -7330 0
13688 -7172 -7263 -7332 0
13688 -7172 -7261 -7334 0
13688 -7172 -7259 -7336 0
13688 -7172 -7257 -7338 0
13688 -7172 -7255 -7340 0
13688 -7172 -7253 -7342 0
13688 -7172 -7251 -7344 0
13688 -7172 -7249 -7346 0
13688 -7172 -7248 -7348 0
13688 -7170 -7302 0
13688 -7170 -7293 -7304 0
13688 -7170 -7291 -7306 0
13688 -7170 -7289 -7308 0
13688 -7170 -7287 -7310 0
13688 -7170 -7285 -7312 0
13688 -7170 -7283 -7314 0
13688 -7170 -7281 -7316 0
13688 -7170 -7279 -7318 0
13688 -7170 -7277 -7320 0
13688 -7170 -7275 -7322 0
13688 -7170 -7273 -7324 0
13688 -7170 -7271 -7326 0
13688 -7170 -7269 -7328 0
13688 -7170 -7267 -7330 0
13688 -7170 -7265 -7332 0
13688 -7170 -7263 -7334 0
13688 -7170 -7261 -7336 0
13688 -7170 -7259 -7338 0
13688 -7170 -7257 -7340 0
13688 -7170 -7255 -7342 0
13688 -7170 -7253 -7344 0
13688 -7170 -7251 -7346 0
13688 -7170 -7249 -7348 0
13688 -7170 -7248 -7350 0
13688 -7168 -7304 0
13688 -7168 -7293 -7306 0
13688 -7168 -7291 -7308 0
13688 -7168 -7289 -7310 0
13688 -7168 -7287 -7312 0
13688 -7168 -7285 -7314 0
13688 -7168 -7283 -7316 0
13688 -7168 -7281 -7318 0
13688 -7168 -7279 -7320 0
13688 -7168 -7277 -7322 0
13688 -7168 -7275 -7324 0
13688 -7168 -7273 -7326 0
13688 -7168 -7271 -7328 0
13688 -7168 -7269 -7330 0
13688 -7168 -7267 -7332 0
13688 -7168 -7265 -7334 0
13688 -7168 -7263 -7336 0
13688 -7168 -7261 -7338 0
13688 -7168 -7259 -7340 0
13688 -7168 -7257 -7342 0
13688 -7168 -7255 -7344 0
13688 -7168 -7253 -7346 0
13688 -7168 -7251 -7348 0
13688 -7168 -7249 -7350 0
13688 -7168 -7248 -7352 0
13688 -7166 -7306 0
13688 -7166 -7293 -7308 0
13688 -7166 -7291 -7310 0
13688 -7166 -7289 -7312 0
13688 -7166 -7287 -7314 0
13688 -7166 -7285 -7316 0
13688 -7166 -7283 -7318 0
13688 -7166 -7281 -7320 0
13688 -7166 -7279 -7322 0
13688 -7166 -7277 -7324 0
13688 -7166 -7275 -7326 0
13688 -7166 -7273 -7328 0
13688 -7166 -7271 -7330 0
13688 -7166 -7269 -7332 0
13688 -7166 -7267 -7334 0
13688 -7166 -7265 -7336 0
13688 -7166 -7263 -7338 0
13688 -7166 -7261 -7340 0
13688 -7166 -7259 -7342 0
13688 -7166 -7257 -7344 0
13688 -7166 -7255 -7346 0
13688 -7166 -7253 -7348 0
13688 -7166 -7251 -7350 0
13688 -7166 -7249 -7352 0
13688 -7166 -7248 -7354 0
13688 -7164 -7308 0
13688 -7164 -7293 -7310 0
13688 -7164 -7291 -7312 0
13688 -7164 -7289 -7314 0
13688 -7164 -7287 -7316 0
13688 -7164 -7285 -7318 0
13688 -7164 -7283 -7320 0
13688 -7164 -7281 -7322 0
13688 -7164 -7279 -7324 0
13688 -7164 -7277 -7326 0
13688 -7164 -7275 -7328 0
13688 -7164 -7273 -7330 0
13688 -7164 -7271 -7332 0
13688 -7164 -7269 -7334 0
13688 -7164 -7267 -7336 0
13688 -7164 -7265 -7338 0
13688 -7164 -7263 -7340 0
13688 -7164 -7261 -7342 0
13688 -7164 -7259 -7344 0
13688 -7164 -7257 -7346 0
13688 -7164 -7255 -7348 0
13688 -7164 -7253 -7350 0
13688 -7164 -7251 -7352 0
13688 -7164 -7249 -7354 0
13688 -7164 -7248 -7356 0
13688 -7162 -7310 0
13688 -7162 -7293 -7312 0
13688 -7162 -7291 -7314 0
13688 -7162 -7289 -7316 0
13688 -7162 -7287 -7318 0
13688 -7162 -7285 -7320 0
13688 -7162 -7283 -7322 0
13688 -7162 -7281 -7324 0
13688 -7162 -7279 -7326 0
13688 -7162 -7277 -7328 0
13688 -7162 -7275 -7330 0
13688 -7162 -7273 -7332 0
13688 -7162 -7271 -7334 0
13688 -7162 -7269 -7336 0
13688 -7162 -7267 -7338 0
13688 -7162 -7265 -7340 0
13688 -7162 -7263 -7342 0
13688 -7162 -7261 -7344 0
13688 -7162 -7259 -7346 0
13688 -7162 -7257 -7348 0
13688 -7162 -7255 -7350 0
13688 -7162 -7253 -7352 0
13688 -7162 -7251 -7354 0
13688 -7162 -7249 -7356 0
13688 -7162 -7248 0
13688 -7160 -7312 0
13688 -7160 -7293 -7314 0
13688 -7160 -7291 -7316 0
13688 -7160 -7289 -7318 0
13688 -7160 -7287 -7320 0
13688 -7160 -7285 -7322 0
13688 -7160 -7283 -7324 0
13688 -7160 -7281 -7326 0
13688 -7160 -7279 -7328 0
13688 -7160 -7277 -7330 0
13688 -7160 -7275 -7332 0
13688 -7160 -7273 -7334 0
13688 -7160 -7271 -7336 0
13688 -7160 -7269 -7338 0
13688 -7160 -7267 -7340 0
13688 -7160 -7265 -7342 0
13688 -7160 -7263 -7344 0
13688 -7160 -7261 -7346 0
13688 -7160 -7259 -7348 0
13688 -7160 -7257 -7350 0
13688 -7160 -7255 -7352 0
13688 -7160 -7253 -7354 0
13688 -7160 -7251 -7356 0
13688 -7160 -7249 0
13688 -7160 -7248 0
13688 -7158 -7314 0
13688 -7158 -7293 -7316 0
13688 -7158 -7291 -7318 0
13688 -7158 -7289 -7320 0
13688 -7158 -7287 -7322 0
13688 -7158 -7285 -7324 0
13688 -7158 -7283 -7326 0
13688 -7158 -7281 -7328 0
13688 -7158 -7279 -7330 0
13688 -7158 -7277 -7332 0
13688 -7158 -7275 -7334 0
13688 -7158 -7273 -7336 0
13688 -7158 -7271 -7338 0
13688 -7158 -7269 -7340 0
13688 -7158 -7267 -7342 0
13688 -7158 -7265 -7344 0
13688 -7158 -7263 -7346 0
13688 -7158 -7261 -7348 0
13688 -7158 -7259 -7350 0
13688 -7158 -7257 -7352 0
13688 -7158 -7255 -7354 0
13688 -7158 -7253 -7356 0
13688 -7158 -7251 0
13688 -7158 -7249 0
13688 -7158 -7248 0
13688 -7156 -7316 0
13688 -7156 -7293 -7318 0
13688 -7156 -7291 -7320 0
13688 -7156 -7289 -7322 0
13688 -7156 -7287 -7324 0
13688 -7156 -7285 -7326 0
13688 -7156 -7283 -7328 0
13688 -7156 -7281 -7330 0
13688 -7156 -7279 -7332 0
13688 -7156 -7277 -7334 0
13688 -7156 -7275 -7336 0
13688 -7156 -7273 -7338 0
13688 -7156 -7271 -7340 0
13688 -7156 -7269 -7342 0
13688 -7156 -7267 -7344 0
13688 -7156 -7265 -7346 0
13688 -7156 -7263 -7348 0
13688 -7156 -7261 -7350 0
13688 -7156 -7259 -7352 0
13688 -7156 -7257 -7354 0
13688 -7156 -7255 -7356 0
13688 -7156 -7253 0
13688 -7156 -7251 0
13688 -7156 -7249 0
13688 -7156 -7248 0
13688 -7155 -7318 0
13688 -7155 -7293 -7320 0
13688 -7155 -7291 -7322 0
13688 -7155 -7289 -7324 0
13688 -7155 -7287 -7326 0
13688 -7155 -7285 -7328 0
13688 -7155 -7283 -7330 0
13688 -7155 -7281 -7332 0
13688 -7155 -7279 -7334 0
13688 -7155 -7277 -7336 0
13688 -7155 -7275 -7338 0
13688 -7155 -7273 -7340 0
13688 -7155 -7271 -7342 0
13688 -7155 -7269 -7344 0
13688 -7155 -7267 -7346 0
13688 -7155 -7265 -7348 0
13688 -7155 -7263 -7350 0
13688 -7155 -7261 -7352 0
13688 -7155 -7259 -7354 0
13688 -7155 -7257 -7356 0
13688 -7155 -7255 0
13688 -7155 -7253 0
13688 -7155 -7251 0
13688 -7155 -7249 0
13688 -7155 -7248 0
c ((36<=(aux600 + aux603 + aux604))=tv=SATLiteral(13689))
-13689 -7285 -7295 0
-13689 -7283 -7296 0
-13689 -7281 -7298 0
-13689 -7279 -7300 0
-13689 -7277 -7302 0
-13689 -7275 -7304 0
-13689 -7273 -7306 0
-13689 -7271 -7308 0
-13689 -7269 -7310 0
-13689 -7267 -7312 0
-13689 -7265 -7314 0
-13689 -7263 -7316 0
-13689 -7261 -7318 0
-13689 -7259 -7320 0
-13689 -7257 -7322 0
-13689 -7255 -7324 0
-13689 -7253 -7326 0
-13689 -7251 -7328 0
-13689 -7249 -7330 0
-13689 -7248 -7332 0
-13689 -7184 -7287 -7295 0
-13689 -7184 -7285 -7296 0
-13689 -7184 -7283 -7298 0
-13689 -7184 -7281 -7300 0
-13689 -7184 -7279 -7302 0
-13689 -7184 -7277 -7304 0
-13689 -7184 -7275 -7306 0
-13689 -7184 -7273 -7308 0
-13689 -7184 -7271 -7310 0
-13689 -7184 -7269 -7312 0
-13689 -7184 -7267 -7314 0
-13689 -7184 -7265 -7316 0
-13689 -7184 -7263 -7318 0
-13689 -7184 -7261 -7320 0
-13689 -7184 -7259 -7322 0
-13689 -7184 -7257 -7324 0
-13689 -7184 -7255 -7326 0
-13689 -7184 -7253 -7328 0
-13689 -7184 -7251 -7330 0
-13689 -7184 -7249 -7332 0
-13689 -7184 -7248 -7334 0
-13689 -7182 -7289 -7295 0
-13689 -7182 -7287 -7296 0
-13689 -7182 -7285 -7298 0
-13689 -7182 -7283 -7300 0
-13689 -7182 -7281 -7302 0
-13689 -7182 -7279 -7304 0
-13689 -7182 -7277 -7306 0
-13689 -7182 -7275 -7308 0
-13689 -7182 -7273 -7310 0
-13689 -7182 -7271 -7312 0
-13689 -7182 -7269 -7314 0
-13689 -7182 -7267 -7316 0
-13689 -7182 -7265 -7318 0
-13689 -7182 -7263 -7320 0
-13689 -7182 -7261 -7322 0
-13689 -7182 -7259 -7324 0
-13689 -7182 -7257 -7326 0
-13689 -7182 -7255 -7328 0
-13689 -7182 -7253 -7330 0
-13689 -7182 -7251 -7332 0
-13689 -7182 -7249 -7334 0
-13689 -7182 -7248 -7336 0
-13689 -7180 -7291 -7295 0
-13689 -7180 -7289 -7296 0
-13689 -7180 -7287 -7298 0
-13689 -7180 -7285 -7300 0
-13689 -7180 -7283 -7302 0
-13689 -7180 -7281 -7304 0
-13689 -7180 -7279 -7306 0
-13689 -7180 -7277 -7308 0
-13689 -7180 -7275 -7310 0
-13689 -7180 -7273 -7312 0
-13689 -7180 -7271 -7314 0
-13689 -7180 -7269 -7316 0
-13689 -7180 -7267 -7318 0
-13689 -7180 -7265 -7320 0
-13689 -7180 -7263 -7322 0
-13689 -7180 -7261 -7324 0
-13689 -7180 -7259 -7326 0
-13689 -7180 -7257 -7328 0
-13689 -7180 -7255 -7330 0
-13689 -7180 -7253 -7332 0
-13689 -7180 -7251 -7334 0
-13689 -7180 -7249 -7336 0
-13689 -7180 -7248 -7338 0
-13689 -7178 -7293 -7295 0
-13689 -7178 -7291 -7296 0
-13689 -7178 -7289 -7298 0
-13689 -7178 -7287 -7300 0
-13689 -7178 -7285 -7302 0
-13689 -7178 -7283 -7304 0
-13689 -7178 -7281 -7306 0
-13689 -7178 -7279 -7308 0
-13689 -7178 -7277 -7310 0
-13689 -7178 -7275 -7312 0
-13689 -7178 -7273 -7314 0
-13689 -7178 -7271 -7316 0
-13689 -7178 -7269 -7318 0
-13689 -7178 -7267 -7320 0
-13689 -7178 -7265 -7322 0
-13689 -7178 -7263 -7324 0
-13689 -7178 -7261 -7326 0
-13689 -7178 -7259 -7328 0
-13689 -7178 -7257 -7330 0
-13689 -7178 -7255 -7332 0
-13689 -7178 -7253 -7334 0
-13689 -7178 -7251 -7336 0
-13689 -7178 -7249 -7338 0
-13689 -7178 -7248 -7340 0
-13689 -7176 -7295 0
-13689 -7176 -7293 -7296 0
-13689 -7176 -7291 -7298 0
-13689 -7176 -7289 -7300 0
-13689 -7176 -7287 -7302 0
-13689 -7176 -7285 -7304 0
-13689 -7176 -7283 -7306 0
-13689 -7176 -7281 -7308 0
-13689 -7176 -7279 -7310 0
-13689 -7176 -7277 -7312 0
-13689 -7176 -7275 -7314 0
-13689 -7176 -7273 -7316 0
-13689 -7176 -7271 -7318 0
-13689 -7176 -7269 -7320 0
-13689 -7176 -7267 -7322 0
-13689 -7176 -7265 -7324 0
-13689 -7176 -7263 -7326 0
-13689 -7176 -7261 -7328 0
-13689 -7176 -7259 -7330 0
-13689 -7176 -7257 -7332 0
-13689 -7176 -7255 -7334 0
-13689 -7176 -7253 -7336 0
-13689 -7176 -7251 -7338 0
-13689 -7176 -7249 -7340 0
-13689 -7176 -7248 -7342 0
-13689 -7174 -7296 0
-13689 -7174 -7293 -7298 0
-13689 -7174 -7291 -7300 0
-13689 -7174 -7289 -7302 0
-13689 -7174 -7287 -7304 0
-13689 -7174 -7285 -7306 0
-13689 -7174 -7283 -7308 0
-13689 -7174 -7281 -7310 0
-13689 -7174 -7279 -7312 0
-13689 -7174 -7277 -7314 0
-13689 -7174 -7275 -7316 0
-13689 -7174 -7273 -7318 0
-13689 -7174 -7271 -7320 0
-13689 -7174 -7269 -7322 0
-13689 -7174 -7267 -7324 0
-13689 -7174 -7265 -7326 0
-13689 -7174 -7263 -7328 0
-13689 -7174 -7261 -7330 0
-13689 -7174 -7259 -7332 0
-13689 -7174 -7257 -7334 0
-13689 -7174 -7255 -7336 0
-13689 -7174 -7253 -7338 0
-13689 -7174 -7251 -7340 0
-13689 -7174 -7249 -7342 0
-13689 -7174 -7248 -7344 0
-13689 -7172 -7298 0
-13689 -7172 -7293 -7300 0
-13689 -7172 -7291 -7302 0
-13689 -7172 -7289 -7304 0
-13689 -7172 -7287 -7306 0
-13689 -7172 -7285 -7308 0
-13689 -7172 -7283 -7310 0
-13689 -7172 -7281 -7312 0
-13689 -7172 -7279 -7314 0
-13689 -7172 -7277 -7316 0
-13689 -7172 -7275 -7318 0
-13689 -7172 -7273 -7320 0
-13689 -7172 -7271 -7322 0
-13689 -7172 -7269 -7324 0
-13689 -7172 -7267 -7326 0
-13689 -7172 -7265 -7328 0
-13689 -7172 -7263 -7330 0
-13689 -7172 -7261 -7332 0
-13689 -7172 -7259 -7334 0
-13689 -7172 -7257 -7336 0
-13689 -7172 -7255 -7338 0
-13689 -7172 -7253 -7340 0
-13689 -7172 -7251 -7342 0
-13689 -7172 -7249 -7344 0
-13689 -7172 -7248 -7346 0
-13689 -7170 -7300 0
-13689 -7170 -7293 -7302 0
-13689 -7170 -7291 -7304 0
-13689 -7170 -7289 -7306 0
-13689 -7170 -7287 -7308 0
-13689 -7170 -7285 -7310 0
-13689 -7170 -7283 -7312 0
-13689 -7170 -7281 -7314 0
-13689 -7170 -7279 -7316 0
-13689 -7170 -7277 -7318 0
-13689 -7170 -7275 -7320 0
-13689 -7170 -7273 -7322 0
-13689 -7170 -7271 -7324 0
-13689 -7170 -7269 -7326 0
-13689 -7170 -7267 -7328 0
-13689 -7170 -7265 -7330 0
-13689 -7170 -7263 -7332 0
-13689 -7170 -7261 -7334 0
-13689 -7170 -7259 -7336 0
-13689 -7170 -7257 -7338 0
-13689 -7170 -7255 -7340 0
-13689 -7170 -7253 -7342 0
-13689 -7170 -7251 -7344 0
-13689 -7170 -7249 -7346 0
-13689 -7170 -7248 -7348 0
-13689 -7168 -7302 0
-13689 -7168 -7293 -7304 0
-13689 -7168 -7291 -7306 0
-13689 -7168 -7289 -7308 0
-13689 -7168 -7287 -7310 0
-13689 -7168 -7285 -7312 0
-13689 -7168 -7283 -7314 0
-13689 -7168 -7281 -7316 0
-13689 -7168 -7279 -7318 0
-13689 -7168 -7277 -7320 0
-13689 -7168 -7275 -7322 0
-13689 -7168 -7273 -7324 0
-13689 -7168 -7271 -7326 0
-13689 -7168 -7269 -7328 0
-13689 -7168 -7267 -7330 0
-13689 -7168 -7265 -7332 0
-13689 -7168 -7263 -7334 0
-13689 -7168 -7261 -7336 0
-13689 -7168 -7259 -7338 0
-13689 -7168 -7257 -7340 0
-13689 -7168 -7255 -7342 0
-13689 -7168 -7253 -7344 0
-13689 -7168 -7251 -7346 0
-13689 -7168 -7249 -7348 0
-13689 -7168 -7248 -7350 0
-13689 -7166 -7304 0
-13689 -7166 -7293 -7306 0
-13689 -7166 -7291 -7308 0
-13689 -7166 -7289 -7310 0
-13689 -7166 -7287 -7312 0
-13689 -7166 -7285 -7314 0
-13689 -7166 -7283 -7316 0
-13689 -7166 -7281 -7318 0
-13689 -7166 -7279 -7320 0
-13689 -7166 -7277 -7322 0
-13689 -7166 -7275 -7324 0
-13689 -7166 -7273 -7326 0
-13689 -7166 -7271 -7328 0
-13689 -7166 -7269 -7330 0
-13689 -7166 -7267 -7332 0
-13689 -7166 -7265 -7334 0
-13689 -7166 -7263 -7336 0
-13689 -7166 -7261 -7338 0
-13689 -7166 -7259 -7340 0
-13689 -7166 -7257 -7342 0
-13689 -7166 -7255 -7344 0
-13689 -7166 -7253 -7346 0
-13689 -7166 -7251 -7348 0
-13689 -7166 -7249 -7350 0
-13689 -7166 -7248 -7352 0
-13689 -7164 -7306 0
-13689 -7164 -7293 -7308 0
-13689 -7164 -7291 -7310 0
-13689 -7164 -7289 -7312 0
-13689 -7164 -7287 -7314 0
-13689 -7164 -7285 -7316 0
-13689 -7164 -7283 -7318 0
-13689 -7164 -7281 -7320 0
-13689 -7164 -7279 -7322 0
-13689 -7164 -7277 -7324 0
-13689 -7164 -7275 -7326 0
-13689 -7164 -7273 -7328 0
-13689 -7164 -7271 -7330 0
-13689 -7164 -7269 -7332 0
-13689 -7164 -7267 -7334 0
-13689 -7164 -7265 -7336 0
-13689 -7164 -7263 -7338 0
-13689 -7164 -7261 -7340 0
-13689 -7164 -7259 -7342 0
-13689 -7164 -7257 -7344 0
-13689 -7164 -7255 -7346 0
-13689 -7164 -7253 -7348 0
-13689 -7164 -7251 -7350 0
-13689 -7164 -7249 -7352 0
-13689 -7164 -7248 -7354 0
-13689 -7162 -7308 0
-13689 -7162 -7293 -7310 0
-13689 -7162 -7291 -7312 0
-13689 -7162 -7289 -7314 0
-13689 -7162 -7287 -7316 0
-13689 -7162 -7285 -7318 0
-13689 -7162 -7283 -7320 0
-13689 -7162 -7281 -7322 0
-13689 -7162 -7279 -7324 0
-13689 -7162 -7277 -7326 0
-13689 -7162 -7275 -7328 0
-13689 -7162 -7273 -7330 0
-13689 -7162 -7271 -7332 0
-13689 -7162 -7269 -7334 0
-13689 -7162 -7267 -7336 0
-13689 -7162 -7265 -7338 0
-13689 -7162 -7263 -7340 0
-13689 -7162 -7261 -7342 0
-13689 -7162 -7259 -7344 0
-13689 -7162 -7257 -7346 0
-13689 -7162 -7255 -7348 0
-13689 -7162 -7253 -7350 0
-13689 -7162 -7251 -7352 0
-13689 -7162 -7249 -7354 0
-13689 -7162 -7248 -7356 0
-13689 -7160 -7310 0
-13689 -7160 -7293 -7312 0
-13689 -7160 -7291 -7314 0
-13689 -7160 -7289 -7316 0
-13689 -7160 -7287 -7318 0
-13689 -7160 -7285 -7320 0
-13689 -7160 -7283 -7322 0
-13689 -7160 -7281 -7324 0
-13689 -7160 -7279 -7326 0
-13689 -7160 -7277 -7328 0
-13689 -7160 -7275 -7330 0
-13689 -7160 -7273 -7332 0
-13689 -7160 -7271 -7334 0
-13689 -7160 -7269 -7336 0
-13689 -7160 -7267 -7338 0
-13689 -7160 -7265 -7340 0
-13689 -7160 -7263 -7342 0
-13689 -7160 -7261 -7344 0
-13689 -7160 -7259 -7346 0
-13689 -7160 -7257 -7348 0
-13689 -7160 -7255 -7350 0
-13689 -7160 -7253 -7352 0
-13689 -7160 -7251 -7354 0
-13689 -7160 -7249 -7356 0
-13689 -7160 -7248 0
-13689 -7158 -7312 0
-13689 -7158 -7293 -7314 0
-13689 -7158 -7291 -7316 0
-13689 -7158 -7289 -7318 0
-13689 -7158 -7287 -7320 0
-13689 -7158 -7285 -7322 0
-13689 -7158 -7283 -7324 0
-13689 -7158 -7281 -7326 0
-13689 -7158 -7279 -7328 0
-13689 -7158 -7277 -7330 0
-13689 -7158 -7275 -7332 0
-13689 -7158 -7273 -7334 0
-13689 -7158 -7271 -7336 0
-13689 -7158 -7269 -7338 0
-13689 -7158 -7267 -7340 0
-13689 -7158 -7265 -7342 0
-13689 -7158 -7263 -7344 0
-13689 -7158 -7261 -7346 0
-13689 -7158 -7259 -7348 0
-13689 -7158 -7257 -7350 0
-13689 -7158 -7255 -7352 0
-13689 -7158 -7253 -7354 0
-13689 -7158 -7251 -7356 0
-13689 -7158 -7249 0
-13689 -7158 -7248 0
-13689 -7156 -7314 0
-13689 -7156 -7293 -7316 0
-13689 -7156 -7291 -7318 0
-13689 -7156 -7289 -7320 0
-13689 -7156 -7287 -7322 0
-13689 -7156 -7285 -7324 0
-13689 -7156 -7283 -7326 0
-13689 -7156 -7281 -7328 0
-13689 -7156 -7279 -7330 0
-13689 -7156 -7277 -7332 0
-13689 -7156 -7275 -7334 0
-13689 -7156 -7273 -7336 0
-13689 -7156 -7271 -7338 0
-13689 -7156 -7269 -7340 0
-13689 -7156 -7267 -7342 0
-13689 -7156 -7265 -7344 0
-13689 -7156 -7263 -7346 0
-13689 -7156 -7261 -7348 0
-13689 -7156 -7259 -7350 0
-13689 -7156 -7257 -7352 0
-13689 -7156 -7255 -7354 0
-13689 -7156 -7253 -7356 0
-13689 -7156 -7251 0
-13689 -7156 -7249 0
-13689 -7156 -7248 0
-13689 -7155 -7316 0
-13689 -7155 -7293 -7318 0
-13689 -7155 -7291 -7320 0
-13689 -7155 -7289 -7322 0
-13689 -7155 -7287 -7324 0
-13689 -7155 -7285 -7326 0
-13689 -7155 -7283 -7328 0
-13689 -7155 -7281 -7330 0
-13689 -7155 -7279 -7332 0
-13689 -7155 -7277 -7334 0
-13689 -7155 -7275 -7336 0
-13689 -7155 -7273 -7338 0
-13689 -7155 -7271 -7340 0
-13689 -7155 -7269 -7342 0
-13689 -7155 -7267 -7344 0
-13689 -7155 -7265 -7346 0
-13689 -7155 -7263 -7348 0
-13689 -7155 -7261 -7350 0
-13689 -7155 -7259 -7352 0
-13689 -7155 -7257 -7354 0
-13689 -7155 -7255 -7356 0
-13689 -7155 -7253 0
-13689 -7155 -7251 0
-13689 -7155 -7249 0
-13689 -7155 -7248 0
13689 7253 7356 0
13689 7255 7354 0
13689 7257 7352 0
13689 7259 7350 0
13689 7261 7348 0
13689 7263 7346 0
13689 7265 7344 0
13689 7267 7342 0
13689 7269 7340 0
13689 7271 7338 0
13689 7273 7336 0
13689 7275 7334 0
13689 7277 7332 0
13689 7279 7330 0
13689 7281 7328 0
13689 7283 7326 0
13689 7285 7324 0
13689 7287 7322 0
13689 7289 7320 0
13689 7291 7318 0
13689 7293 7316 0
13689 7155 7251 7356 0
13689 7155 7253 7354 0
13689 7155 7255 7352 0
13689 7155 7257 7350 0
13689 7155 7259 7348 0
13689 7155 7261 7346 0
13689 7155 7263 7344 0
13689 7155 7265 7342 0
13689 7155 7267 7340 0
13689 7155 7269 7338 0
13689 7155 7271 7336 0
13689 7155 7273 7334 0
13689 7155 7275 7332 0
13689 7155 7277 7330 0
13689 7155 7279 7328 0
13689 7155 7281 7326 0
13689 7155 7283 7324 0
13689 7155 7285 7322 0
13689 7155 7287 7320 0
13689 7155 7289 7318 0
13689 7155 7291 7316 0
13689 7155 7293 7314 0
13689 7156 7249 7356 0
13689 7156 7251 7354 0
13689 7156 7253 7352 0
13689 7156 7255 7350 0
13689 7156 7257 7348 0
13689 7156 7259 7346 0
13689 7156 7261 7344 0
13689 7156 7263 7342 0
13689 7156 7265 7340 0
13689 7156 7267 7338 0
13689 7156 7269 7336 0
13689 7156 7271 7334 0
13689 7156 7273 7332 0
13689 7156 7275 7330 0
13689 7156 7277 7328 0
13689 7156 7279 7326 0
13689 7156 7281 7324 0
13689 7156 7283 7322 0
13689 7156 7285 7320 0
13689 7156 7287 7318 0
13689 7156 7289 7316 0
13689 7156 7291 7314 0
13689 7156 7293 7312 0
13689 7158 7248 7356 0
13689 7158 7249 7354 0
13689 7158 7251 7352 0
13689 7158 7253 7350 0
13689 7158 7255 7348 0
13689 7158 7257 7346 0
13689 7158 7259 7344 0
13689 7158 7261 7342 0
13689 7158 7263 7340 0
13689 7158 7265 7338 0
13689 7158 7267 7336 0
13689 7158 7269 7334 0
13689 7158 7271 7332 0
13689 7158 7273 7330 0
13689 7158 7275 7328 0
13689 7158 7277 7326 0
13689 7158 7279 7324 0
13689 7158 7281 7322 0
13689 7158 7283 7320 0
13689 7158 7285 7318 0
13689 7158 7287 7316 0
13689 7158 7289 7314 0
13689 7158 7291 7312 0
13689 7158 7293 7310 0
13689 7160 7356 0
13689 7160 7248 7354 0
13689 7160 7249 7352 0
13689 7160 7251 7350 0
13689 7160 7253 7348 0
13689 7160 7255 7346 0
13689 7160 7257 7344 0
13689 7160 7259 7342 0
13689 7160 7261 7340 0
13689 7160 7263 7338 0
13689 7160 7265 7336 0
13689 7160 7267 7334 0
13689 7160 7269 7332 0
13689 7160 7271 7330 0
13689 7160 7273 7328 0
13689 7160 7275 7326 0
13689 7160 7277 7324 0
13689 7160 7279 7322 0
13689 7160 7281 7320 0
13689 7160 7283 7318 0
13689 7160 7285 7316 0
13689 7160 7287 7314 0
13689 7160 7289 7312 0
13689 7160 7291 7310 0
13689 7160 7293 7308 0
13689 7162 7354 0
13689 7162 7248 7352 0
13689 7162 7249 7350 0
13689 7162 7251 7348 0
13689 7162 7253 7346 0
13689 7162 7255 7344 0
13689 7162 7257 7342 0
13689 7162 7259 7340 0
13689 7162 7261 7338 0
13689 7162 7263 7336 0
13689 7162 7265 7334 0
13689 7162 7267 7332 0
13689 7162 7269 7330 0
13689 7162 7271 7328 0
13689 7162 7273 7326 0
13689 7162 7275 7324 0
13689 7162 7277 7322 0
13689 7162 7279 7320 0
13689 7162 7281 7318 0
13689 7162 7283 7316 0
13689 7162 7285 7314 0
13689 7162 7287 7312 0
13689 7162 7289 7310 0
13689 7162 7291 7308 0
13689 7162 7293 7306 0
13689 7164 7352 0
13689 7164 7248 7350 0
13689 7164 7249 7348 0
13689 7164 7251 7346 0
13689 7164 7253 7344 0
13689 7164 7255 7342 0
13689 7164 7257 7340 0
13689 7164 7259 7338 0
13689 7164 7261 7336 0
13689 7164 7263 7334 0
13689 7164 7265 7332 0
13689 7164 7267 7330 0
13689 7164 7269 7328 0
13689 7164 7271 7326 0
13689 7164 7273 7324 0
13689 7164 7275 7322 0
13689 7164 7277 7320 0
13689 7164 7279 7318 0
13689 7164 7281 7316 0
13689 7164 7283 7314 0
13689 7164 7285 7312 0
13689 7164 7287 7310 0
13689 7164 7289 7308 0
13689 7164 7291 7306 0
13689 7164 7293 7304 0
13689 7166 7350 0
13689 7166 7248 7348 0
13689 7166 7249 7346 0
13689 7166 7251 7344 0
13689 7166 7253 7342 0
13689 7166 7255 7340 0
13689 7166 7257 7338 0
13689 7166 7259 7336 0
13689 7166 7261 7334 0
13689 7166 7263 7332 0
13689 7166 7265 7330 0
13689 7166 7267 7328 0
13689 7166 7269 7326 0
13689 7166 7271 7324 0
13689 7166 7273 7322 0
13689 7166 7275 7320 0
13689 7166 7277 7318 0
13689 7166 7279 7316 0
13689 7166 7281 7314 0
13689 7166 7283 7312 0
13689 7166 7285 7310 0
13689 7166 7287 7308 0
13689 7166 7289 7306 0
13689 7166 7291 7304 0
13689 7166 7293 7302 0
13689 7168 7348 0
13689 7168 7248 7346 0
13689 7168 7249 7344 0
13689 7168 7251 7342 0
13689 7168 7253 7340 0
13689 7168 7255 7338 0
13689 7168 7257 7336 0
13689 7168 7259 7334 0
13689 7168 7261 7332 0
13689 7168 7263 7330 0
13689 7168 7265 7328 0
13689 7168 7267 7326 0
13689 7168 7269 7324 0
13689 7168 7271 7322 0
13689 7168 7273 7320 0
13689 7168 7275 7318 0
13689 7168 7277 7316 0
13689 7168 7279 7314 0
13689 7168 7281 7312 0
13689 7168 7283 7310 0
13689 7168 7285 7308 0
13689 7168 7287 7306 0
13689 7168 7289 7304 0
13689 7168 7291 7302 0
13689 7168 7293 7300 0
13689 7170 7346 0
13689 7170 7248 7344 0
13689 7170 7249 7342 0
13689 7170 7251 7340 0
13689 7170 7253 7338 0
13689 7170 7255 7336 0
13689 7170 7257 7334 0
13689 7170 7259 7332 0
13689 7170 7261 7330 0
13689 7170 7263 7328 0
13689 7170 7265 7326 0
13689 7170 7267 7324 0
13689 7170 7269 7322 0
13689 7170 7271 7320 0
13689 7170 7273 7318 0
13689 7170 7275 7316 0
13689 7170 7277 7314 0
13689 7170 7279 7312 0
13689 7170 7281 7310 0
13689 7170 7283 7308 0
13689 7170 7285 7306 0
13689 7170 7287 7304 0
13689 7170 7289 7302 0
13689 7170 7291 7300 0
13689 7170 7293 7298 0
13689 7172 7344 0
13689 7172 7248 7342 0
13689 7172 7249 7340 0
13689 7172 7251 7338 0
13689 7172 7253 7336 0
13689 7172 7255 7334 0
13689 7172 7257 7332 0
13689 7172 7259 7330 0
13689 7172 7261 7328 0
13689 7172 7263 7326 0
13689 7172 7265 7324 0
13689 7172 7267 7322 0
13689 7172 7269 7320 0
13689 7172 7271 7318 0
13689 7172 7273 7316 0
13689 7172 7275 7314 0
13689 7172 7277 7312 0
13689 7172 7279 7310 0
13689 7172 7281 7308 0
13689 7172 7283 7306 0
13689 7172 7285 7304 0
13689 7172 7287 7302 0
13689 7172 7289 7300 0
13689 7172 7291 7298 0
13689 7172 7293 7296 0
13689 7174 7342 0
13689 7174 7248 7340 0
13689 7174 7249 7338 0
13689 7174 7251 7336 0
13689 7174 7253 7334 0
13689 7174 7255 7332 0
13689 7174 7257 7330 0
13689 7174 7259 7328 0
13689 7174 7261 7326 0
13689 7174 7263 7324 0
13689 7174 7265 7322 0
13689 7174 7267 7320 0
13689 7174 7269 7318 0
13689 7174 7271 7316 0
13689 7174 7273 7314 0
13689 7174 7275 7312 0
13689 7174 7277 7310 0
13689 7174 7279 7308 0
13689 7174 7281 7306 0
13689 7174 7283 7304 0
13689 7174 7285 7302 0
13689 7174 7287 7300 0
13689 7174 7289 7298 0
13689 7174 7291 7296 0
13689 7174 7293 7295 0
13689 7176 7340 0
13689 7176 7248 7338 0
13689 7176 7249 7336 0
13689 7176 7251 7334 0
13689 7176 7253 7332 0
13689 7176 7255 7330 0
13689 7176 7257 7328 0
13689 7176 7259 7326 0
13689 7176 7261 7324 0
13689 7176 7263 7322 0
13689 7176 7265 7320 0
13689 7176 7267 7318 0
13689 7176 7269 7316 0
13689 7176 7271 7314 0
13689 7176 7273 7312 0
13689 7176 7275 7310 0
13689 7176 7277 7308 0
13689 7176 7279 7306 0
13689 7176 7281 7304 0
13689 7176 7283 7302 0
13689 7176 7285 7300 0
13689 7176 7287 7298 0
13689 7176 7289 7296 0
13689 7176 7291 7295 0
13689 7176 7293 0
13689 7178 7338 0
13689 7178 7248 7336 0
13689 7178 7249 7334 0
13689 7178 7251 7332 0
13689 7178 7253 7330 0
13689 7178 7255 7328 0
13689 7178 7257 7326 0
13689 7178 7259 7324 0
13689 7178 7261 7322 0
13689 7178 7263 7320 0
13689 7178 7265 7318 0
13689 7178 7267 7316 0
13689 7178 7269 7314 0
13689 7178 7271 7312 0
13689 7178 7273 7310 0
13689 7178 7275 7308 0
13689 7178 7277 7306 0
13689 7178 7279 7304 0
13689 7178 7281 7302 0
13689 7178 7283 7300 0
13689 7178 7285 7298 0
13689 7178 7287 7296 0
13689 7178 7289 7295 0
13689 7178 7291 0
13689 7178 7293 0
13689 7180 7336 0
13689 7180 7248 7334 0
13689 7180 7249 7332 0
13689 7180 7251 7330 0
13689 7180 7253 7328 0
13689 7180 7255 7326 0
13689 7180 7257 7324 0
13689 7180 7259 7322 0
13689 7180 7261 7320 0
13689 7180 7263 7318 0
13689 7180 7265 7316 0
13689 7180 7267 7314 0
13689 7180 7269 7312 0
13689 7180 7271 7310 0
13689 7180 7273 7308 0
13689 7180 7275 7306 0
13689 7180 7277 7304 0
13689 7180 7279 7302 0
13689 7180 7281 7300 0
13689 7180 7283 7298 0
13689 7180 7285 7296 0
13689 7180 7287 7295 0
13689 7180 7289 0
13689 7180 7291 0
13689 7180 7293 0
13689 7182 7334 0
13689 7182 7248 7332 0
13689 7182 7249 7330 0
13689 7182 7251 7328 0
13689 7182 7253 7326 0
13689 7182 7255 7324 0
13689 7182 7257 7322 0
13689 7182 7259 7320 0
13689 7182 7261 7318 0
13689 7182 7263 7316 0
13689 7182 7265 7314 0
13689 7182 7267 7312 0
13689 7182 7269 7310 0
13689 7182 7271 7308 0
13689 7182 7273 7306 0
13689 7182 7275 7304 0
13689 7182 7277 7302 0
13689 7182 7279 7300 0
13689 7182 7281 7298 0
13689 7182 7283 7296 0
13689 7182 7285 7295 0
13689 7182 7287 0
13689 7182 7289 0
13689 7182 7291 0
13689 7182 7293 0
13689 7184 7332 0
13689 7184 7248 7330 0
13689 7184 7249 7328 0
13689 7184 7251 7326 0
13689 7184 7253 7324 0
13689 7184 7255 7322 0
13689 7184 7257 7320 0
13689 7184 7259 7318 0
13689 7184 7261 7316 0
13689 7184 7263 7314 0
13689 7184 7265 7312 0
13689 7184 7267 7310 0
13689 7184 7269 7308 0
13689 7184 7271 7306 0
13689 7184 7273 7304 0
13689 7184 7275 7302 0
13689 7184 7277 7300 0
13689 7184 7279 7298 0
13689 7184 7281 7296 0
13689 7184 7283 7295 0
13689 7184 7285 0
13689 7184 7287 0
13689 7184 7289 0
13689 7184 7291 0
13689 7184 7293 0
c (((aux606 + aux609 + aux610)<=36)=tv=SATLiteral(13690))
-13690 7489 7590 0
-13690 7491 7588 0
-13690 7493 7586 0
-13690 7495 7584 0
-13690 7497 7582 0
-13690 7499 7580 0
-13690 7501 7578 0
-13690 7503 7576 0
-13690 7505 7574 0
-13690 7507 7572 0
-13690 7509 7570 0
-13690 7511 7568 0
-13690 7513 7566 0
-13690 7515 7564 0
-13690 7517 7562 0
-13690 7519 7560 0
-13690 7521 7558 0
-13690 7523 7556 0
-13690 7525 7554 0
-13690 7527 7552 0
-13690 7389 7487 7590 0
-13690 7389 7489 7588 0
-13690 7389 7491 7586 0
-13690 7389 7493 7584 0
-13690 7389 7495 7582 0
-13690 7389 7497 7580 0
-13690 7389 7499 7578 0
-13690 7389 7501 7576 0
-13690 7389 7503 7574 0
-13690 7389 7505 7572 0
-13690 7389 7507 7570 0
-13690 7389 7509 7568 0
-13690 7389 7511 7566 0
-13690 7389 7513 7564 0
-13690 7389 7515 7562 0
-13690 7389 7517 7560 0
-13690 7389 7519 7558 0
-13690 7389 7521 7556 0
-13690 7389 7523 7554 0
-13690 7389 7525 7552 0
-13690 7389 7527 7550 0
-13690 7390 7485 7590 0
-13690 7390 7487 7588 0
-13690 7390 7489 7586 0
-13690 7390 7491 7584 0
-13690 7390 7493 7582 0
-13690 7390 7495 7580 0
-13690 7390 7497 7578 0
-13690 7390 7499 7576 0
-13690 7390 7501 7574 0
-13690 7390 7503 7572 0
-13690 7390 7505 7570 0
-13690 7390 7507 7568 0
-13690 7390 7509 7566 0
-13690 7390 7511 7564 0
-13690 7390 7513 7562 0
-13690 7390 7515 7560 0
-13690 7390 7517 7558 0
-13690 7390 7519 7556 0
-13690 7390 7521 7554 0
-13690 7390 7523 7552 0
-13690 7390 7525 7550 0
-13690 7390 7527 7548 0
-13690 7392 7483 7590 0
-13690 7392 7485 7588 0
-13690 7392 7487 7586 0
-13690 7392 7489 7584 0
-13690 7392 7491 7582 0
-13690 7392 7493 7580 0
-13690 7392 7495 7578 0
-13690 7392 7497 7576 0
-13690 7392 7499 7574 0
-13690 7392 7501 7572 0
-13690 7392 7503 7570 0
-13690 7392 7505 7568 0
-13690 7392 7507 7566 0
-13690 7392 7509 7564 0
-13690 7392 7511 7562 0
-13690 7392 7513 7560 0
-13690 7392 7515 7558 0
-13690 7392 7517 7556 0
-13690 7392 7519 7554 0
-13690 7392 7521 7552 0
-13690 7392 7523 7550 0
-13690 7392 7525 7548 0
-13690 7392 7527 7546 0
-13690 7394 7482 7590 0
-13690 7394 7483 7588 0
-13690 7394 7485 7586 0
-13690 7394 7487 7584 0
-13690 7394 7489 7582 0
-13690 7394 7491 7580 0
-13690 7394 7493 7578 0
-13690 7394 7495 7576 0
-13690 7394 7497 7574 0
-13690 7394 7499 7572 0
-13690 7394 7501 7570 0
-13690 7394 7503 7568 0
-13690 7394 7505 7566 0
-13690 7394 7507 7564 0
-13690 7394 7509 7562 0
-13690 7394 7511 7560 0
-13690 7394 7513 7558 0
-13690 7394 7515 7556 0
-13690 7394 7517 7554 0
-13690 7394 7519 7552 0
-13690 7394 7521 7550 0
-13690 7394 7523 7548 0
-13690 7394 7525 7546 0
-13690 7394 7527 7544 0
-13690 7396 7590 0
-13690 7396 7482 7588 0
-13690 7396 7483 7586 0
-13690 7396 7485 7584 0
-13690 7396 7487 7582 0
-13690 7396 7489 7580 0
-13690 7396 7491 7578 0
-13690 7396 7493 7576 0
-13690 7396 7495 7574 0
-13690 7396 7497 7572 0
-13690 7396 7499 7570 0
-13690 7396 7501 7568 0
-13690 7396 7503 7566 0
-13690 7396 7505 7564 0
-13690 7396 7507 7562 0
-13690 7396 7509 7560 0
-13690 7396 7511 7558 0
-13690 7396 7513 7556 0
-13690 7396 7515 7554 0
-13690 7396 7517 7552 0
-13690 7396 7519 7550 0
-13690 7396 7521 7548 0
-13690 7396 7523 7546 0
-13690 7396 7525 7544 0
-13690 7396 7527 7542 0
-13690 7398 7588 0
-13690 7398 7482 7586 0
-13690 7398 7483 7584 0
-13690 7398 7485 7582 0
-13690 7398 7487 7580 0
-13690 7398 7489 7578 0
-13690 7398 7491 7576 0
-13690 7398 7493 7574 0
-13690 7398 7495 7572 0
-13690 7398 7497 7570 0
-13690 7398 7499 7568 0
-13690 7398 7501 7566 0
-13690 7398 7503 7564 0
-13690 7398 7505 7562 0
-13690 7398 7507 7560 0
-13690 7398 7509 7558 0
-13690 7398 7511 7556 0
-13690 7398 7513 7554 0
-13690 7398 7515 7552 0
-13690 7398 7517 7550 0
-13690 7398 7519 7548 0
-13690 7398 7521 7546 0
-13690 7398 7523 7544 0
-13690 7398 7525 7542 0
-13690 7398 7527 7540 0
-13690 7400 7586 0
-13690 7400 7482 7584 0
-13690 7400 7483 7582 0
-13690 7400 7485 7580 0
-13690 7400 7487 7578 0
-13690 7400 7489 7576 0
-13690 7400 7491 7574 0
-13690 7400 7493 7572 0
-13690 7400 7495 7570 0
-13690 7400 7497 7568 0
-13690 7400 7499 7566 0
-13690 7400 7501 7564 0
-13690 7400 7503 7562 0
-13690 7400 7505 7560 0
-13690 7400 7507 7558 0
-13690 7400 7509 7556 0
-13690 7400 7511 7554 0
-13690 7400 7513 7552 0
-13690 7400 7515 7550 0
-13690 7400 7517 7548 0
-13690 7400 7519 7546 0
-13690 7400 7521 7544 0
-13690 7400 7523 7542 0
-13690 7400 7525 7540 0
-13690 7400 7527 7538 0
-13690 7402 7584 0
-13690 7402 7482 7582 0
-13690 7402 7483 7580 0
-13690 7402 7485 7578 0
-13690 7402 7487 7576 0
-13690 7402 7489 7574 0
-13690 7402 7491 7572 0
-13690 7402 7493 7570 0
-13690 7402 7495 7568 0
-13690 7402 7497 7566 0
-13690 7402 7499 7564 0
-13690 7402 7501 7562 0
-13690 7402 7503 7560 0
-13690 7402 7505 7558 0
-13690 7402 7507 7556 0
-13690 7402 7509 7554 0
-13690 7402 7511 7552 0
-13690 7402 7513 7550 0
-13690 7402 7515 7548 0
-13690 7402 7517 7546 0
-13690 7402 7519 7544 0
-13690 7402 7521 7542 0
-13690 7402 7523 7540 0
-13690 7402 7525 7538 0
-13690 7402 7527 7536 0
-13690 7404 7582 0
-13690 7404 7482 7580 0
-13690 7404 7483 7578 0
-13690 7404 7485 7576 0
-13690 7404 7487 7574 0
-13690 7404 7489 7572 0
-13690 7404 7491 7570 0
-13690 7404 7493 7568 0
-13690 7404 7495 7566 0
-13690 7404 7497 7564 0
-13690 7404 7499 7562 0
-13690 7404 7501 7560 0
-13690 7404 7503 7558 0
-13690 7404 7505 7556 0
-13690 7404 7507 7554 0
-13690 7404 7509 7552 0
-13690 7404 7511 7550 0
-13690 7404 7513 7548 0
-13690 7404 7515 7546 0
-13690 7404 7517 7544 0
-13690 7404 7519 7542 0
-13690 7404 7521 7540 0
-13690 7404 7523 7538 0
-13690 7404 7525 7536 0
-13690 7404 7527 7534 0
-13690 7406 7580 0
-13690 7406 7482 7578 0
-13690 7406 7483 7576 0
-13690 7406 7485 7574 0
-13690 7406 7487 7572 0
-13690 7406 7489 7570 0
-13690 7406 7491 7568 0
-13690 7406 7493 7566 0
-13690 7406 7495 7564 0
-13690 7406 7497 7562 0
-13690 7406 7499 7560 0
-13690 7406 7501 7558 0
-13690 7406 7503 7556 0
-13690 7406 7505 7554 0
-13690 7406 7507 7552 0
-13690 7406 7509 7550 0
-13690 7406 7511 7548 0
-13690 7406 7513 7546 0
-13690 7406 7515 7544 0
-13690 7406 7517 7542 0
-13690 7406 7519 7540 0
-13690 7406 7521 7538 0
-13690 7406 7523 7536 0
-13690 7406 7525 7534 0
-13690 7406 7527 7532 0
-13690 7408 7578 0
-13690 7408 7482 7576 0
-13690 7408 7483 7574 0
-13690 7408 7485 7572 0
-13690 7408 7487 7570 0
-13690 7408 7489 7568 0
-13690 7408 7491 7566 0
-13690 7408 7493 7564 0
-13690 7408 7495 7562 0
-13690 7408 7497 7560 0
-13690 7408 7499 7558 0
-13690 7408 7501 7556 0
-13690 7408 7503 7554 0
-13690 7408 7505 7552 0
-13690 7408 7507 7550 0
-13690 7408 7509 7548 0
-13690 7408 7511 7546 0
-13690 7408 7513 7544 0
-13690 7408 7515 7542 0
-13690 7408 7517 7540 0
-13690 7408 7519 7538 0
-13690 7408 7521 7536 0
-13690 7408 7523 7534 0
-13690 7408 7525 7532 0
-13690 7408 7527 7530 0
-13690 7410 7576 0
-13690 7410 7482 7574 0
-13690 7410 7483 7572 0
-13690 7410 7485 7570 0
-13690 7410 7487 7568 0
-13690 7410 7489 7566 0
-13690 7410 7491 7564 0
-13690 7410 7493 7562 0
-13690 7410 7495 7560 0
-13690 7410 7497 7558 0
-13690 7410 7499 7556 0
-13690 7410 7501 7554 0
-13690 7410 7503 7552 0
-13690 7410 7505 7550 0
-13690 7410 7507 7548 0
-13690 7410 7509 7546 0
-13690 7410 7511 7544 0
-13690 7410 7513 7542 0
-13690 7410 7515 7540 0
-13690 7410 7517 7538 0
-13690 7410 7519 7536 0
-13690 7410 7521 7534 0
-13690 7410 7523 7532 0
-13690 7410 7525 7530 0
-13690 7410 7527 7529 0
-13690 7412 7574 0
-13690 7412 7482 7572 0
-13690 7412 7483 7570 0
-13690 7412 7485 7568 0
-13690 7412 7487 7566 0
-13690 7412 7489 7564 0
-13690 7412 7491 7562 0
-13690 7412 7493 7560 0
-13690 7412 7495 7558 0
-13690 7412 7497 7556 0
-13690 7412 7499 7554 0
-13690 7412 7501 7552 0
-13690 7412 7503 7550 0
-13690 7412 7505 7548 0
-13690 7412 7507 7546 0
-13690 7412 7509 7544 0
-13690 7412 7511 7542 0
-13690 7412 7513 7540 0
-13690 7412 7515 7538 0
-13690 7412 7517 7536 0
-13690 7412 7519 7534 0
-13690 7412 7521 7532 0
-13690 7412 7523 7530 0
-13690 7412 7525 7529 0
-13690 7412 7527 0
-13690 7414 7572 0
-13690 7414 7482 7570 0
-13690 7414 7483 7568 0
-13690 7414 7485 7566 0
-13690 7414 7487 7564 0
-13690 7414 7489 7562 0
-13690 7414 7491 7560 0
-13690 7414 7493 7558 0
-13690 7414 7495 7556 0
-13690 7414 7497 7554 0
-13690 7414 7499 7552 0
-13690 7414 7501 7550 0
-13690 7414 7503 7548 0
-13690 7414 7505 7546 0
-13690 7414 7507 7544 0
-13690 7414 7509 7542 0
-13690 7414 7511 7540 0
-13690 7414 7513 7538 0
-13690 7414 7515 7536 0
-13690 7414 7517 7534 0
-13690 7414 7519 7532 0
-13690 7414 7521 7530 0
-13690 7414 7523 7529 0
-13690 7414 7525 0
-13690 7414 7527 0
-13690 7416 7570 0
-13690 7416 7482 7568 0
-13690 7416 7483 7566 0
-13690 7416 7485 7564 0
-13690 7416 7487 7562 0
-13690 7416 7489 7560 0
-13690 7416 7491 7558 0
-13690 7416 7493 7556 0
-13690 7416 7495 7554 0
-13690 7416 7497 7552 0
-13690 7416 7499 7550 0
-13690 7416 7501 7548 0
-13690 7416 7503 7546 0
-13690 7416 7505 7544 0
-13690 7416 7507 7542 0
-13690 7416 7509 7540 0
-13690 7416 7511 7538 0
-13690 7416 7513 7536 0
-13690 7416 7515 7534 0
-13690 7416 7517 7532 0
-13690 7416 7519 7530 0
-13690 7416 7521 7529 0
-13690 7416 7523 0
-13690 7416 7525 0
-13690 7416 7527 0
-13690 7418 7568 0
-13690 7418 7482 7566 0
-13690 7418 7483 7564 0
-13690 7418 7485 7562 0
-13690 7418 7487 7560 0
-13690 7418 7489 7558 0
-13690 7418 7491 7556 0
-13690 7418 7493 7554 0
-13690 7418 7495 7552 0
-13690 7418 7497 7550 0
-13690 7418 7499 7548 0
-13690 7418 7501 7546 0
-13690 7418 7503 7544 0
-13690 7418 7505 7542 0
-13690 7418 7507 7540 0
-13690 7418 7509 7538 0
-13690 7418 7511 7536 0
-13690 7418 7513 7534 0
-13690 7418 7515 7532 0
-13690 7418 7517 7530 0
-13690 7418 7519 7529 0
-13690 7418 7521 0
-13690 7418 7523 0
-13690 7418 7525 0
-13690 7418 7527 0
13690 -7521 -7529 0
13690 -7519 -7530 0
13690 -7517 -7532 0
13690 -7515 -7534 0
13690 -7513 -7536 0
13690 -7511 -7538 0
13690 -7509 -7540 0
13690 -7507 -7542 0
13690 -7505 -7544 0
13690 -7503 -7546 0
13690 -7501 -7548 0
13690 -7499 -7550 0
13690 -7497 -7552 0
13690 -7495 -7554 0
13690 -7493 -7556 0
13690 -7491 -7558 0
13690 -7489 -7560 0
13690 -7487 -7562 0
13690 -7485 -7564 0
13690 -7483 -7566 0
13690 -7482 -7568 0
13690 -7418 -7523 -7529 0
13690 -7418 -7521 -7530 0
13690 -7418 -7519 -7532 0
13690 -7418 -7517 -7534 0
13690 -7418 -7515 -7536 0
13690 -7418 -7513 -7538 0
13690 -7418 -7511 -7540 0
13690 -7418 -7509 -7542 0
13690 -7418 -7507 -7544 0
13690 -7418 -7505 -7546 0
13690 -7418 -7503 -7548 0
13690 -7418 -7501 -7550 0
13690 -7418 -7499 -7552 0
13690 -7418 -7497 -7554 0
13690 -7418 -7495 -7556 0
13690 -7418 -7493 -7558 0
13690 -7418 -7491 -7560 0
13690 -7418 -7489 -7562 0
13690 -7418 -7487 -7564 0
13690 -7418 -7485 -7566 0
13690 -7418 -7483 -7568 0
13690 -7418 -7482 -7570 0
13690 -7416 -7525 -7529 0
13690 -7416 -7523 -7530 0
13690 -7416 -7521 -7532 0
13690 -7416 -7519 -7534 0
13690 -7416 -7517 -7536 0
13690 -7416 -7515 -7538 0
13690 -7416 -7513 -7540 0
13690 -7416 -7511 -7542 0
13690 -7416 -7509 -7544 0
13690 -7416 -7507 -7546 0
13690 -7416 -7505 -7548 0
13690 -7416 -7503 -7550 0
13690 -7416 -7501 -7552 0
13690 -7416 -7499 -7554 0
13690 -7416 -7497 -7556 0
13690 -7416 -7495 -7558 0
13690 -7416 -7493 -7560 0
13690 -7416 -7491 -7562 0
13690 -7416 -7489 -7564 0
13690 -7416 -7487 -7566 0
13690 -7416 -7485 -7568 0
13690 -7416 -7483 -7570 0
13690 -7416 -7482 -7572 0
13690 -7414 -7527 -7529 0
13690 -7414 -7525 -7530 0
13690 -7414 -7523 -7532 0
13690 -7414 -7521 -7534 0
13690 -7414 -7519 -7536 0
13690 -7414 -7517 -7538 0
13690 -7414 -7515 -7540 0
13690 -7414 -7513 -7542 0
13690 -7414 -7511 -7544 0
13690 -7414 -7509 -7546 0
13690 -7414 -7507 -7548 0
13690 -7414 -7505 -7550 0
13690 -7414 -7503 -7552 0
13690 -7414 -7501 -7554 0
13690 -7414 -7499 -7556 0
13690 -7414 -7497 -7558 0
13690 -7414 -7495 -7560 0
13690 -7414 -7493 -7562 0
13690 -7414 -7491 -7564 0
13690 -7414 -7489 -7566 0
13690 -7414 -7487 -7568 0
13690 -7414 -7485 -7570 0
13690 -7414 -7483 -7572 0
13690 -7414 -7482 -7574 0
13690 -7412 -7529 0
13690 -7412 -7527 -7530 0
13690 -7412 -7525 -7532 0
13690 -7412 -7523 -7534 0
13690 -7412 -7521 -7536 0
13690 -7412 -7519 -7538 0
13690 -7412 -7517 -7540 0
13690 -7412 -7515 -7542 0
13690 -7412 -7513 -7544 0
13690 -7412 -7511 -7546 0
13690 -7412 -7509 -7548 0
13690 -7412 -7507 -7550 0
13690 -7412 -7505 -7552 0
13690 -7412 -7503 -7554 0
13690 -7412 -7501 -7556 0
13690 -7412 -7499 -7558 0
13690 -7412 -7497 -7560 0
13690 -7412 -7495 -7562 0
13690 -7412 -7493 -7564 0
13690 -7412 -7491 -7566 0
13690 -7412 -7489 -7568 0
13690 -7412 -7487 -7570 0
13690 -7412 -7485 -7572 0
13690 -7412 -7483 -7574 0
13690 -7412 -7482 -7576 0
13690 -7410 -7530 0
13690 -7410 -7527 -7532 0
13690 -7410 -7525 -7534 0
13690 -7410 -7523 -7536 0
13690 -7410 -7521 -7538 0
13690 -7410 -7519 -7540 0
13690 -7410 -7517 -7542 0
13690 -7410 -7515 -7544 0
13690 -7410 -7513 -7546 0
13690 -7410 -7511 -7548 0
13690 -7410 -7509 -7550 0
13690 -7410 -7507 -7552 0
13690 -7410 -7505 -7554 0
13690 -7410 -7503 -7556 0
13690 -7410 -7501 -7558 0
13690 -7410 -7499 -7560 0
13690 -7410 -7497 -7562 0
13690 -7410 -7495 -7564 0
13690 -7410 -7493 -7566 0
13690 -7410 -7491 -7568 0
13690 -7410 -7489 -7570 0
13690 -7410 -7487 -7572 0
13690 -7410 -7485 -7574 0
13690 -7410 -7483 -7576 0
13690 -7410 -7482 -7578 0
13690 -7408 -7532 0
13690 -7408 -7527 -7534 0
13690 -7408 -7525 -7536 0
13690 -7408 -7523 -7538 0
13690 -7408 -7521 -7540 0
13690 -7408 -7519 -7542 0
13690 -7408 -7517 -7544 0
13690 -7408 -7515 -7546 0
13690 -7408 -7513 -7548 0
13690 -7408 -7511 -7550 0
13690 -7408 -7509 -7552 0
13690 -7408 -7507 -7554 0
13690 -7408 -7505 -7556 0
13690 -7408 -7503 -7558 0
13690 -7408 -7501 -7560 0
13690 -7408 -7499 -7562 0
13690 -7408 -7497 -7564 0
13690 -7408 -7495 -7566 0
13690 -7408 -7493 -7568 0
13690 -7408 -7491 -7570 0
13690 -7408 -7489 -7572 0
13690 -7408 -7487 -7574 0
13690 -7408 -7485 -7576 0
13690 -7408 -7483 -7578 0
13690 -7408 -7482 -7580 0
13690 -7406 -7534 0
13690 -7406 -7527 -7536 0
13690 -7406 -7525 -7538 0
13690 -7406 -7523 -7540 0
13690 -7406 -7521 -7542 0
13690 -7406 -7519 -7544 0
13690 -7406 -7517 -7546 0
13690 -7406 -7515 -7548 0
13690 -7406 -7513 -7550 0
13690 -7406 -7511 -7552 0
13690 -7406 -7509 -7554 0
13690 -7406 -7507 -7556 0
13690 -7406 -7505 -7558 0
13690 -7406 -7503 -7560 0
13690 -7406 -7501 -7562 0
13690 -7406 -7499 -7564 0
13690 -7406 -7497 -7566 0
13690 -7406 -7495 -7568 0
13690 -7406 -7493 -7570 0
13690 -7406 -7491 -7572 0
13690 -7406 -7489 -7574 0
13690 -7406 -7487 -7576 0
13690 -7406 -7485 -7578 0
13690 -7406 -7483 -7580 0
13690 -7406 -7482 -7582 0
13690 -7404 -7536 0
13690 -7404 -7527 -7538 0
13690 -7404 -7525 -7540 0
13690 -7404 -7523 -7542 0
13690 -7404 -7521 -7544 0
13690 -7404 -7519 -7546 0
13690 -7404 -7517 -7548 0
13690 -7404 -7515 -7550 0
13690 -7404 -7513 -7552 0
13690 -7404 -7511 -7554 0
13690 -7404 -7509 -7556 0
13690 -7404 -7507 -7558 0
13690 -7404 -7505 -7560 0
13690 -7404 -7503 -7562 0
13690 -7404 -7501 -7564 0
13690 -7404 -7499 -7566 0
13690 -7404 -7497 -7568 0
13690 -7404 -7495 -7570 0
13690 -7404 -7493 -7572 0
13690 -7404 -7491 -7574 0
13690 -7404 -7489 -7576 0
13690 -7404 -7487 -7578 0
13690 -7404 -7485 -7580 0
13690 -7404 -7483 -7582 0
13690 -7404 -7482 -7584 0
13690 -7402 -7538 0
13690 -7402 -7527 -7540 0
13690 -7402 -7525 -7542 0
13690 -7402 -7523 -7544 0
13690 -7402 -7521 -7546 0
13690 -7402 -7519 -7548 0
13690 -7402 -7517 -7550 0
13690 -7402 -7515 -7552 0
13690 -7402 -7513 -7554 0
13690 -7402 -7511 -7556 0
13690 -7402 -7509 -7558 0
13690 -7402 -7507 -7560 0
13690 -7402 -7505 -7562 0
13690 -7402 -7503 -7564 0
13690 -7402 -7501 -7566 0
13690 -7402 -7499 -7568 0
13690 -7402 -7497 -7570 0
13690 -7402 -7495 -7572 0
13690 -7402 -7493 -7574 0
13690 -7402 -7491 -7576 0
13690 -7402 -7489 -7578 0
13690 -7402 -7487 -7580 0
13690 -7402 -7485 -7582 0
13690 -7402 -7483 -7584 0
13690 -7402 -7482 -7586 0
13690 -7400 -7540 0
13690 -7400 -7527 -7542 0
13690 -7400 -7525 -7544 0
13690 -7400 -7523 -7546 0
13690 -7400 -7521 -7548 0
13690 -7400 -7519 -7550 0
13690 -7400 -7517 -7552 0
13690 -7400 -7515 -7554 0
13690 -7400 -7513 -7556 0
13690 -7400 -7511 -7558 0
13690 -7400 -7509 -7560 0
13690 -7400 -7507 -7562 0
13690 -7400 -7505 -7564 0
13690 -7400 -7503 -7566 0
13690 -7400 -7501 -7568 0
13690 -7400 -7499 -7570 0
13690 -7400 -7497 -7572 0
13690 -7400 -7495 -7574 0
13690 -7400 -7493 -7576 0
13690 -7400 -7491 -7578 0
13690 -7400 -7489 -7580 0
13690 -7400 -7487 -7582 0
13690 -7400 -7485 -7584 0
13690 -7400 -7483 -7586 0
13690 -7400 -7482 -7588 0
13690 -7398 -7542 0
13690 -7398 -7527 -7544 0
13690 -7398 -7525 -7546 0
13690 -7398 -7523 -7548 0
13690 -7398 -7521 -7550 0
13690 -7398 -7519 -7552 0
13690 -7398 -7517 -7554 0
13690 -7398 -7515 -7556 0
13690 -7398 -7513 -7558 0
13690 -7398 -7511 -7560 0
13690 -7398 -7509 -7562 0
13690 -7398 -7507 -7564 0
13690 -7398 -7505 -7566 0
13690 -7398 -7503 -7568 0
13690 -7398 -7501 -7570 0
13690 -7398 -7499 -7572 0
13690 -7398 -7497 -7574 0
13690 -7398 -7495 -7576 0
13690 -7398 -7493 -7578 0
13690 -7398 -7491 -7580 0
13690 -7398 -7489 -7582 0
13690 -7398 -7487 -7584 0
13690 -7398 -7485 -7586 0
13690 -7398 -7483 -7588 0
13690 -7398 -7482 -7590 0
13690 -7396 -7544 0
13690 -7396 -7527 -7546 0
13690 -7396 -7525 -7548 0
13690 -7396 -7523 -7550 0
13690 -7396 -7521 -7552 0
13690 -7396 -7519 -7554 0
13690 -7396 -7517 -7556 0
13690 -7396 -7515 -7558 0
13690 -7396 -7513 -7560 0
13690 -7396 -7511 -7562 0
13690 -7396 -7509 -7564 0
13690 -7396 -7507 -7566 0
13690 -7396 -7505 -7568 0
13690 -7396 -7503 -7570 0
13690 -7396 -7501 -7572 0
13690 -7396 -7499 -7574 0
13690 -7396 -7497 -7576 0
13690 -7396 -7495 -7578 0
13690 -7396 -7493 -7580 0
13690 -7396 -7491 -7582 0
13690 -7396 -7489 -7584 0
13690 -7396 -7487 -7586 0
13690 -7396 -7485 -7588 0
13690 -7396 -7483 -7590 0
13690 -7396 -7482 0
13690 -7394 -7546 0
13690 -7394 -7527 -7548 0
13690 -7394 -7525 -7550 0
13690 -7394 -7523 -7552 0
13690 -7394 -7521 -7554 0
13690 -7394 -7519 -7556 0
13690 -7394 -7517 -7558 0
13690 -7394 -7515 -7560 0
13690 -7394 -7513 -7562 0
13690 -7394 -7511 -7564 0
13690 -7394 -7509 -7566 0
13690 -7394 -7507 -7568 0
13690 -7394 -7505 -7570 0
13690 -7394 -7503 -7572 0
13690 -7394 -7501 -7574 0
13690 -7394 -7499 -7576 0
13690 -7394 -7497 -7578 0
13690 -7394 -7495 -7580 0
13690 -7394 -7493 -7582 0
13690 -7394 -7491 -7584 0
13690 -7394 -7489 -7586 0
13690 -7394 -7487 -7588 0
13690 -7394 -7485 -7590 0
13690 -7394 -7483 0
13690 -7394 -7482 0
13690 -7392 -7548 0
13690 -7392 -7527 -7550 0
13690 -7392 -7525 -7552 0
13690 -7392 -7523 -7554 0
13690 -7392 -7521 -7556 0
13690 -7392 -7519 -7558 0
13690 -7392 -7517 -7560 0
13690 -7392 -7515 -7562 0
13690 -7392 -7513 -7564 0
13690 -7392 -7511 -7566 0
13690 -7392 -7509 -7568 0
13690 -7392 -7507 -7570 0
13690 -7392 -7505 -7572 0
13690 -7392 -7503 -7574 0
13690 -7392 -7501 -7576 0
13690 -7392 -7499 -7578 0
13690 -7392 -7497 -7580 0
13690 -7392 -7495 -7582 0
13690 -7392 -7493 -7584 0
13690 -7392 -7491 -7586 0
13690 -7392 -7489 -7588 0
13690 -7392 -7487 -7590 0
13690 -7392 -7485 0
13690 -7392 -7483 0
13690 -7392 -7482 0
13690 -7390 -7550 0
13690 -7390 -7527 -7552 0
13690 -7390 -7525 -7554 0
13690 -7390 -7523 -7556 0
13690 -7390 -7521 -7558 0
13690 -7390 -7519 -7560 0
13690 -7390 -7517 -7562 0
13690 -7390 -7515 -7564 0
13690 -7390 -7513 -7566 0
13690 -7390 -7511 -7568 0
13690 -7390 -7509 -7570 0
13690 -7390 -7507 -7572 0
13690 -7390 -7505 -7574 0
13690 -7390 -7503 -7576 0
13690 -7390 -7501 -7578 0
13690 -7390 -7499 -7580 0
13690 -7390 -7497 -7582 0
13690 -7390 -7495 -7584 0
13690 -7390 -7493 -7586 0
13690 -7390 -7491 -7588 0
13690 -7390 -7489 -7590 0
13690 -7390 -7487 0
13690 -7390 -7485 0
13690 -7390 -7483 0
13690 -7390 -7482 0
13690 -7389 -7552 0
13690 -7389 -7527 -7554 0
13690 -7389 -7525 -7556 0
13690 -7389 -7523 -7558 0
13690 -7389 -7521 -7560 0
13690 -7389 -7519 -7562 0
13690 -7389 -7517 -7564 0
13690 -7389 -7515 -7566 0
13690 -7389 -7513 -7568 0
13690 -7389 -7511 -7570 0
13690 -7389 -7509 -7572 0
13690 -7389 -7507 -7574 0
13690 -7389 -7505 -7576 0
13690 -7389 -7503 -7578 0
13690 -7389 -7501 -7580 0
13690 -7389 -7499 -7582 0
13690 -7389 -7497 -7584 0
13690 -7389 -7495 -7586 0
13690 -7389 -7493 -7588 0
13690 -7389 -7491 -7590 0
13690 -7389 -7489 0
13690 -7389 -7487 0
13690 -7389 -7485 0
13690 -7389 -7483 0
13690 -7389 -7482 0
c ((36<=(aux606 + aux609 + aux610))=tv=SATLiteral(13691))
-13691 -7519 -7529 0
-13691 -7517 -7530 0
-13691 -7515 -7532 0
-13691 -7513 -7534 0
-13691 -7511 -7536 0
-13691 -7509 -7538 0
-13691 -7507 -7540 0
-13691 -7505 -7542 0
-13691 -7503 -7544 0
-13691 -7501 -7546 0
-13691 -7499 -7548 0
-13691 -7497 -7550 0
-13691 -7495 -7552 0
-13691 -7493 -7554 0
-13691 -7491 -7556 0
-13691 -7489 -7558 0
-13691 -7487 -7560 0
-13691 -7485 -7562 0
-13691 -7483 -7564 0
-13691 -7482 -7566 0
-13691 -7418 -7521 -7529 0
-13691 -7418 -7519 -7530 0
-13691 -7418 -7517 -7532 0
-13691 -7418 -7515 -7534 0
-13691 -7418 -7513 -7536 0
-13691 -7418 -7511 -7538 0
-13691 -7418 -7509 -7540 0
-13691 -7418 -7507 -7542 0
-13691 -7418 -7505 -7544 0
-13691 -7418 -7503 -7546 0
-13691 -7418 -7501 -7548 0
-13691 -7418 -7499 -7550 0
-13691 -7418 -7497 -7552 0
-13691 -7418 -7495 -7554 0
-13691 -7418 -7493 -7556 0
-13691 -7418 -7491 -7558 0
-13691 -7418 -7489 -7560 0
-13691 -7418 -7487 -7562 0
-13691 -7418 -7485 -7564 0
-13691 -7418 -7483 -7566 0
-13691 -7418 -7482 -7568 0
-13691 -7416 -7523 -7529 0
-13691 -7416 -7521 -7530 0
-13691 -7416 -7519 -7532 0
-13691 -7416 -7517 -7534 0
-13691 -7416 -7515 -7536 0
-13691 -7416 -7513 -7538 0
-13691 -7416 -7511 -7540 0
-13691 -7416 -7509 -7542 0
-13691 -7416 -7507 -7544 0
-13691 -7416 -7505 -7546 0
-13691 -7416 -7503 -7548 0
-13691 -7416 -7501 -7550 0
-13691 -7416 -7499 -7552 0
-13691 -7416 -7497 -7554 0
-13691 -7416 -7495 -7556 0
-13691 -7416 -7493 -7558 0
-13691 -7416 -7491 -7560 0
-13691 -7416 -7489 -7562 0
-13691 -7416 -7487 -7564 0
-13691 -7416 -7485 -7566 0
-13691 -7416 -7483 -7568 0
-13691 -7416 -7482 -7570 0
-13691 -7414 -7525 -7529 0
-13691 -7414 -7523 -7530 0
-13691 -7414 -7521 -7532 0
-13691 -7414 -7519 -7534 0
-13691 -7414 -7517 -7536 0
-13691 -7414 -7515 -7538 0
-13691 -7414 -7513 -7540 0
-13691 -7414 -7511 -7542 0
-13691 -7414 -7509 -7544 0
-13691 -7414 -7507 -7546 0
-13691 -7414 -7505 -7548 0
-13691 -7414 -7503 -7550 0
-13691 -7414 -7501 -7552 0
-13691 -7414 -7499 -7554 0
-13691 -7414 -7497 -7556 0
-13691 -7414 -7495 -7558 0
-13691 -7414 -7493 -7560 0
-13691 -7414 -7491 -7562 0
-13691 -7414 -7489 -7564 0
-13691 -7414 -7487 -7566 0
-13691 -7414 -7485 -7568 0
-13691 -7414 -7483 -7570 0
-13691 -7414 -7482 -7572 0
-13691 -7412 -7527 -7529 0
-13691 -7412 -7525 -7530 0
-13691 -7412 -7523 -7532 0
-13691 -7412 -7521 -7534 0
-13691 -7412 -7519 -7536 0
-13691 -7412 -7517 -7538 0
-13691 -7412 -7515 -7540 0
-13691 -7412 -7513 -7542 0
-13691 -7412 -7511 -7544 0
-13691 -7412 -7509 -7546 0
-13691 -7412 -7507 -7548 0
-13691 -7412 -7505 -7550 0
-13691 -7412 -7503 -7552 0
-13691 -7412 -7501 -7554 0
-13691 -7412 -7499 -7556 0
-13691 -7412 -7497 -7558 0
-13691 -7412 -7495 -7560 0
-13691 -7412 -7493 -7562 0
-13691 -7412 -7491 -7564 0
-13691 -7412 -7489 -7566 0
-13691 -7412 -7487 -7568 0
-13691 -7412 -7485 -7570 0
-13691 -7412 -7483 -7572 0
-13691 -7412 -7482 -7574 0
-13691 -7410 -7529 0
-13691 -7410 -7527 -7530 0
-13691 -7410 -7525 -7532 0
-13691 -7410 -7523 -7534 0
-13691 -7410 -7521 -7536 0
-13691 -7410 -7519 -7538 0
-13691 -7410 -7517 -7540 0
-13691 -7410 -7515 -7542 0
-13691 -7410 -7513 -7544 0
-13691 -7410 -7511 -7546 0
-13691 -7410 -7509 -7548 0
-13691 -7410 -7507 -7550 0
-13691 -7410 -7505 -7552 0
-13691 -7410 -7503 -7554 0
-13691 -7410 -7501 -7556 0
-13691 -7410 -7499 -7558 0
-13691 -7410 -7497 -7560 0
-13691 -7410 -7495 -7562 0
-13691 -7410 -7493 -7564 0
-13691 -7410 -7491 -7566 0
-13691 -7410 -7489 -7568 0
-13691 -7410 -7487 -7570 0
-13691 -7410 -7485 -7572 0
-13691 -7410 -7483 -7574 0
-13691 -7410 -7482 -7576 0
-13691 -7408 -7530 0
-13691 -7408 -7527 -7532 0
-13691 -7408 -7525 -7534 0
-13691 -7408 -7523 -7536 0
-13691 -7408 -7521 -7538 0
-13691 -7408 -7519 -7540 0
-13691 -7408 -7517 -7542 0
-13691 -7408 -7515 -7544 0
-13691 -7408 -7513 -7546 0
-13691 -7408 -7511 -7548 0
-13691 -7408 -7509 -7550 0
-13691 -7408 -7507 -7552 0
-13691 -7408 -7505 -7554 0
-13691 -7408 -7503 -7556 0
-13691 -7408 -7501 -7558 0
-13691 -7408 -7499 -7560 0
-13691 -7408 -7497 -7562 0
-13691 -7408 -7495 -7564 0
-13691 -7408 -7493 -7566 0
-13691 -7408 -7491 -7568 0
-13691 -7408 -7489 -7570 0
-13691 -7408 -7487 -7572 0
-13691 -7408 -7485 -7574 0
-13691 -7408 -7483 -7576 0
-13691 -7408 -7482 -7578 0
-13691 -7406 -7532 0
-13691 -7406 -7527 -7534 0
-13691 -7406 -7525 -7536 0
-13691 -7406 -7523 -7538 0
-13691 -7406 -7521 -7540 0
-13691 -7406 -7519 -7542 0
-13691 -7406 -7517 -7544 0
-13691 -7406 -7515 -7546 0
-13691 -7406 -7513 -7548 0
-13691 -7406 -7511 -7550 0
-13691 -7406 -7509 -7552 0
-13691 -7406 -7507 -7554 0
-13691 -7406 -7505 -7556 0
-13691 -7406 -7503 -7558 0
-13691 -7406 -7501 -7560 0
-13691 -7406 -7499 -7562 0
-13691 -7406 -7497 -7564 0
-13691 -7406 -7495 -7566 0
-13691 -7406 -7493 -7568 0
-13691 -7406 -7491 -7570 0
-13691 -7406 -7489 -7572 0
-13691 -7406 -7487 -7574 0
-13691 -7406 -7485 -7576 0
-13691 -7406 -7483 -7578 0
-13691 -7406 -7482 -7580 0
-13691 -7404 -7534 0
-13691 -7404 -7527 -7536 0
-13691 -7404 -7525 -7538 0
-13691 -7404 -7523 -7540 0
-13691 -7404 -7521 -7542 0
-13691 -7404 -7519 -7544 0
-13691 -7404 -7517 -7546 0
-13691 -7404 -7515 -7548 0
-13691 -7404 -7513 -7550 0
-13691 -7404 -7511 -7552 0
-13691 -7404 -7509 -7554 0
-13691 -7404 -7507 -7556 0
-13691 -7404 -7505 -7558 0
-13691 -7404 -7503 -7560 0
-13691 -7404 -7501 -7562 0
-13691 -7404 -7499 -7564 0
-13691 -7404 -7497 -7566 0
-13691 -7404 -7495 -7568 0
-13691 -7404 -7493 -7570 0
-13691 -7404 -7491 -7572 0
-13691 -7404 -7489 -7574 0
-13691 -7404 -7487 -7576 0
-13691 -7404 -7485 -7578 0
-13691 -7404 -7483 -7580 0
-13691 -7404 -7482 -7582 0
-13691 -7402 -7536 0
-13691 -7402 -7527 -7538 0
-13691 -7402 -7525 -7540 0
-13691 -7402 -7523 -7542 0
-13691 -7402 -7521 -7544 0
-13691 -7402 -7519 -7546 0
-13691 -7402 -7517 -7548 0
-13691 -7402 -7515 -7550 0
-13691 -7402 -7513 -7552 0
-13691 -7402 -7511 -7554 0
-13691 -7402 -7509 -7556 0
-13691 -7402 -7507 -7558 0
-13691 -7402 -7505 -7560 0
-13691 -7402 -7503 -7562 0
-13691 -7402 -7501 -7564 0
-13691 -7402 -7499 -7566 0
-13691 -7402 -7497 -7568 0
-13691 -7402 -7495 -7570 0
-13691 -7402 -7493 -7572 0
-13691 -7402 -7491 -7574 0
-13691 -7402 -7489 -7576 0
-13691 -7402 -7487 -7578 0
-13691 -7402 -7485 -7580 0
-13691 -7402 -7483 -7582 0
-13691 -7402 -7482 -7584 0
-13691 -7400 -7538 0
-13691 -7400 -7527 -7540 0
-13691 -7400 -7525 -7542 0
-13691 -7400 -7523 -7544 0
-13691 -7400 -7521 -7546 0
-13691 -7400 -7519 -7548 0
-13691 -7400 -7517 -7550 0
-13691 -7400 -7515 -7552 0
-13691 -7400 -7513 -7554 0
-13691 -7400 -7511 -7556 0
-13691 -7400 -7509 -7558 0
-13691 -7400 -7507 -7560 0
-13691 -7400 -7505 -7562 0
-13691 -7400 -7503 -7564 0
-13691 -7400 -7501 -7566 0
-13691 -7400 -7499 -7568 0
-13691 -7400 -7497 -7570 0
-13691 -7400 -7495 -7572 0
-13691 -7400 -7493 -7574 0
-13691 -7400 -7491 -7576 0
-13691 -7400 -7489 -7578 0
-13691 -7400 -7487 -7580 0
-13691 -7400 -7485 -7582 0
-13691 -7400 -7483 -7584 0
-13691 -7400 -7482 -7586 0
-13691 -7398 -7540 0
-13691 -7398 -7527 -7542 0
-13691 -7398 -7525 -7544 0
-13691 -7398 -7523 -7546 0
-13691 -7398 -7521 -7548 0
-13691 -7398 -7519 -7550 0
-13691 -7398 -7517 -7552 0
-13691 -7398 -7515 -7554 0
-13691 -7398 -7513 -7556 0
-13691 -7398 -7511 -7558 0
-13691 -7398 -7509 -7560 0
-13691 -7398 -7507 -7562 0
-13691 -7398 -7505 -7564 0
-13691 -7398 -7503 -7566 0
-13691 -7398 -7501 -7568 0
-13691 -7398 -7499 -7570 0
-13691 -7398 -7497 -7572 0
-13691 -7398 -7495 -7574 0
-13691 -7398 -7493 -7576 0
-13691 -7398 -7491 -7578 0
-13691 -7398 -7489 -7580 0
-13691 -7398 -7487 -7582 0
-13691 -7398 -7485 -7584 0
-13691 -7398 -7483 -7586 0
-13691 -7398 -7482 -7588 0
-13691 -7396 -7542 0
-13691 -7396 -7527 -7544 0
-13691 -7396 -7525 -7546 0
-13691 -7396 -7523 -7548 0
-13691 -7396 -7521 -7550 0
-13691 -7396 -7519 -7552 0
-13691 -7396 -7517 -7554 0
-13691 -7396 -7515 -7556 0
-13691 -7396 -7513 -7558 0
-13691 -7396 -7511 -7560 0
-13691 -7396 -7509 -7562 0
-13691 -7396 -7507 -7564 0
-13691 -7396 -7505 -7566 0
-13691 -7396 -7503 -7568 0
-13691 -7396 -7501 -7570 0
-13691 -7396 -7499 -7572 0
-13691 -7396 -7497 -7574 0
-13691 -7396 -7495 -7576 0
-13691 -7396 -7493 -7578 0
-13691 -7396 -7491 -7580 0
-13691 -7396 -7489 -7582 0
-13691 -7396 -7487 -7584 0
-13691 -7396 -7485 -7586 0
-13691 -7396 -7483 -7588 0
-13691 -7396 -7482 -7590 0
-13691 -7394 -7544 0
-13691 -7394 -7527 -7546 0
-13691 -7394 -7525 -7548 0
-13691 -7394 -7523 -7550 0
-13691 -7394 -7521 -7552 0
-13691 -7394 -7519 -7554 0
-13691 -7394 -7517 -7556 0
-13691 -7394 -7515 -7558 0
-13691 -7394 -7513 -7560 0
-13691 -7394 -7511 -7562 0
-13691 -7394 -7509 -7564 0
-13691 -7394 -7507 -7566 0
-13691 -7394 -7505 -7568 0
-13691 -7394 -7503 -7570 0
-13691 -7394 -7501 -7572 0
-13691 -7394 -7499 -7574 0
-13691 -7394 -7497 -7576 0
-13691 -7394 -7495 -7578 0
-13691 -7394 -7493 -7580 0
-13691 -7394 -7491 -7582 0
-13691 -7394 -7489 -7584 0
-13691 -7394 -7487 -7586 0
-13691 -7394 -7485 -7588 0
-13691 -7394 -7483 -7590 0
-13691 -7394 -7482 0
-13691 -7392 -7546 0
-13691 -7392 -7527 -7548 0
-13691 -7392 -7525 -7550 0
-13691 -7392 -7523 -7552 0
-13691 -7392 -7521 -7554 0
-13691 -7392 -7519 -7556 0
-13691 -7392 -7517 -7558 0
-13691 -7392 -7515 -7560 0
-13691 -7392 -7513 -7562 0
-13691 -7392 -7511 -7564 0
-13691 -7392 -7509 -7566 0
-13691 -7392 -7507 -7568 0
-13691 -7392 -7505 -7570 0
-13691 -7392 -7503 -7572 0
-13691 -7392 -7501 -7574 0
-13691 -7392 -7499 -7576 0
-13691 -7392 -7497 -7578 0
-13691 -7392 -7495 -7580 0
-13691 -7392 -7493 -7582 0
-13691 -7392 -7491 -7584 0
-13691 -7392 -7489 -7586 0
-13691 -7392 -7487 -7588 0
-13691 -7392 -7485 -7590 0
-13691 -7392 -7483 0
-13691 -7392 -7482 0
-13691 -7390 -7548 0
-13691 -7390 -7527 -7550 0
-13691 -7390 -7525 -7552 0
-13691 -7390 -7523 -7554 0
-13691 -7390 -7521 -7556 0
-13691 -7390 -7519 -7558 0
-13691 -7390 -7517 -7560 0
-13691 -7390 -7515 -7562 0
-13691 -7390 -7513 -7564 0
-13691 -7390 -7511 -7566 0
-13691 -7390 -7509 -7568 0
-13691 -7390 -7507 -7570 0
-13691 -7390 -7505 -7572 0
-13691 -7390 -7503 -7574 0
-13691 -7390 -7501 -7576 0
-13691 -7390 -7499 -7578 0
-13691 -7390 -7497 -7580 0
-13691 -7390 -7495 -7582 0
-13691 -7390 -7493 -7584 0
-13691 -7390 -7491 -7586 0
-13691 -7390 -7489 -7588 0
-13691 -7390 -7487 -7590 0
-13691 -7390 -7485 0
-13691 -7390 -7483 0
-13691 -7390 -7482 0
-13691 -7389 -7550 0
-13691 -7389 -7527 -7552 0
-13691 -7389 -7525 -7554 0
-13691 -7389 -7523 -7556 0
-13691 -7389 -7521 -7558 0
-13691 -7389 -7519 -7560 0
-13691 -7389 -7517 -7562 0
-13691 -7389 -7515 -7564 0
-13691 -7389 -7513 -7566 0
-13691 -7389 -7511 -7568 0
-13691 -7389 -7509 -7570 0
-13691 -7389 -7507 -7572 0
-13691 -7389 -7505 -7574 0
-13691 -7389 -7503 -7576 0
-13691 -7389 -7501 -7578 0
-13691 -7389 -7499 -7580 0
-13691 -7389 -7497 -7582 0
-13691 -7389 -7495 -7584 0
-13691 -7389 -7493 -7586 0
-13691 -7389 -7491 -7588 0
-13691 -7389 -7489 -7590 0
-13691 -7389 -7487 0
-13691 -7389 -7485 0
-13691 -7389 -7483 0
-13691 -7389 -7482 0
13691 7487 7590 0
13691 7489 7588 0
13691 7491 7586 0
13691 7493 7584 0
13691 7495 7582 0
13691 7497 7580 0
13691 7499 7578 0
13691 7501 7576 0
13691 7503 7574 0
13691 7505 7572 0
13691 7507 7570 0
13691 7509 7568 0
13691 7511 7566 0
13691 7513 7564 0
13691 7515 7562 0
13691 7517 7560 0
13691 7519 7558 0
13691 7521 7556 0
13691 7523 7554 0
13691 7525 7552 0
13691 7527 7550 0
13691 7389 7485 7590 0
13691 7389 7487 7588 0
13691 7389 7489 7586 0
13691 7389 7491 7584 0
13691 7389 7493 7582 0
13691 7389 7495 7580 0
13691 7389 7497 7578 0
13691 7389 7499 7576 0
13691 7389 7501 7574 0
13691 7389 7503 7572 0
13691 7389 7505 7570 0
13691 7389 7507 7568 0
13691 7389 7509 7566 0
13691 7389 7511 7564 0
13691 7389 7513 7562 0
13691 7389 7515 7560 0
13691 7389 7517 7558 0
13691 7389 7519 7556 0
13691 7389 7521 7554 0
13691 7389 7523 7552 0
13691 7389 7525 7550 0
13691 7389 7527 7548 0
13691 7390 7483 7590 0
13691 7390 7485 7588 0
13691 7390 7487 7586 0
13691 7390 7489 7584 0
13691 7390 7491 7582 0
13691 7390 7493 7580 0
13691 7390 7495 7578 0
13691 7390 7497 7576 0
13691 7390 7499 7574 0
13691 7390 7501 7572 0
13691 7390 7503 7570 0
13691 7390 7505 7568 0
13691 7390 7507 7566 0
13691 7390 7509 7564 0
13691 7390 7511 7562 0
13691 7390 7513 7560 0
13691 7390 7515 7558 0
13691 7390 7517 7556 0
13691 7390 7519 7554 0
13691 7390 7521 7552 0
13691 7390 7523 7550 0
13691 7390 7525 7548 0
13691 7390 7527 7546 0
13691 7392 7482 7590 0
13691 7392 7483 7588 0
13691 7392 7485 7586 0
13691 7392 7487 7584 0
13691 7392 7489 7582 0
13691 7392 7491 7580 0
13691 7392 7493 7578 0
13691 7392 7495 7576 0
13691 7392 7497 7574 0
13691 7392 7499 7572 0
13691 7392 7501 7570 0
13691 7392 7503 7568 0
13691 7392 7505 7566 0
13691 7392 7507 7564 0
13691 7392 7509 7562 0
13691 7392 7511 7560 0
13691 7392 7513 7558 0
13691 7392 7515 7556 0
13691 7392 7517 7554 0
13691 7392 7519 7552 0
13691 7392 7521 7550 0
13691 7392 7523 7548 0
13691 7392 7525 7546 0
13691 7392 7527 7544 0
13691 7394 7590 0
13691 7394 7482 7588 0
13691 7394 7483 7586 0
13691 7394 7485 7584 0
13691 7394 7487 7582 0
13691 7394 7489 7580 0
13691 7394 7491 7578 0
13691 7394 7493 7576 0
13691 7394 7495 7574 0
13691 7394 7497 7572 0
13691 7394 7499 7570 0
13691 7394 7501 7568 0
13691 7394 7503 7566 0
13691 7394 7505 7564 0
13691 7394 7507 7562 0
13691 7394 7509 7560 0
13691 7394 7511 7558 0
13691 7394 7513 7556 0
13691 7394 7515 7554 0
13691 7394 7517 7552 0
13691 7394 7519 7550 0
13691 7394 7521 7548 0
13691 7394 7523 7546 0
13691 7394 7525 7544 0
13691 7394 7527 7542 0
13691 7396 7588 0
13691 7396 7482 7586 0
13691 7396 7483 7584 0
13691 7396 7485 7582 0
13691 7396 7487 7580 0
13691 7396 7489 7578 0
13691 7396 7491 7576 0
13691 7396 7493 7574 0
13691 7396 7495 7572 0
13691 7396 7497 7570 0
13691 7396 7499 7568 0
13691 7396 7501 7566 0
13691 7396 7503 7564 0
13691 7396 7505 7562 0
13691 7396 7507 7560 0
13691 7396 7509 7558 0
13691 7396 7511 7556 0
13691 7396 7513 7554 0
13691 7396 7515 7552 0
13691 7396 7517 7550 0
13691 7396 7519 7548 0
13691 7396 7521 7546 0
13691 7396 7523 7544 0
13691 7396 7525 7542 0
13691 7396 7527 7540 0
13691 7398 7586 0
13691 7398 7482 7584 0
13691 7398 7483 7582 0
13691 7398 7485 7580 0
13691 7398 7487 7578 0
13691 7398 7489 7576 0
13691 7398 7491 7574 0
13691 7398 7493 7572 0
13691 7398 7495 7570 0
13691 7398 7497 7568 0
13691 7398 7499 7566 0
13691 7398 7501 7564 0
13691 7398 7503 7562 0
13691 7398 7505 7560 0
13691 7398 7507 7558 0
13691 7398 7509 7556 0
13691 7398 7511 7554 0
13691 7398 7513 7552 0
13691 7398 7515 7550 0
13691 7398 7517 7548 0
13691 7398 7519 7546 0
13691 7398 7521 7544 0
13691 7398 7523 7542 0
13691 7398 7525 7540 0
13691 7398 7527 7538 0
13691 7400 7584 0
13691 7400 7482 7582 0
13691 7400 7483 7580 0
13691 7400 7485 7578 0
13691 7400 7487 7576 0
13691 7400 7489 7574 0
13691 7400 7491 7572 0
13691 7400 7493 7570 0
13691 7400 7495 7568 0
13691 7400 7497 7566 0
13691 7400 7499 7564 0
13691 7400 7501 7562 0
13691 7400 7503 7560 0
13691 7400 7505 7558 0
13691 7400 7507 7556 0
13691 7400 7509 7554 0
13691 7400 7511 7552 0
13691 7400 7513 7550 0
13691 7400 7515 7548 0
13691 7400 7517 7546 0
13691 7400 7519 7544 0
13691 7400 7521 7542 0
13691 7400 7523 7540 0
13691 7400 7525 7538 0
13691 7400 7527 7536 0
13691 7402 7582 0
13691 7402 7482 7580 0
13691 7402 7483 7578 0
13691 7402 7485 7576 0
13691 7402 7487 7574 0
13691 7402 7489 7572 0
13691 7402 7491 7570 0
13691 7402 7493 7568 0
13691 7402 7495 7566 0
13691 7402 7497 7564 0
13691 7402 7499 7562 0
13691 7402 7501 7560 0
13691 7402 7503 7558 0
13691 7402 7505 7556 0
13691 7402 7507 7554 0
13691 7402 7509 7552 0
13691 7402 7511 7550 0
13691 7402 7513 7548 0
13691 7402 7515 7546 0
13691 7402 7517 7544 0
13691 7402 7519 7542 0
13691 7402 7521 7540 0
13691 7402 7523 7538 0
13691 7402 7525 7536 0
13691 7402 7527 7534 0
13691 7404 7580 0
13691 7404 7482 7578 0
13691 7404 7483 7576 0
13691 7404 7485 7574 0
13691 7404 7487 7572 0
13691 7404 7489 7570 0
13691 7404 7491 7568 0
13691 7404 7493 7566 0
13691 7404 7495 7564 0
13691 7404 7497 7562 0
13691 7404 7499 7560 0
13691 7404 7501 7558 0
13691 7404 7503 7556 0
13691 7404 7505 7554 0
13691 7404 7507 7552 0
13691 7404 7509 7550 0
13691 7404 7511 7548 0
13691 7404 7513 7546 0
13691 7404 7515 7544 0
13691 7404 7517 7542 0
13691 7404 7519 7540 0
13691 7404 7521 7538 0
13691 7404 7523 7536 0
13691 7404 7525 7534 0
13691 7404 7527 7532 0
13691 7406 7578 0
13691 7406 7482 7576 0
13691 7406 7483 7574 0
13691 7406 7485 7572 0
13691 7406 7487 7570 0
13691 7406 7489 7568 0
13691 7406 7491 7566 0
13691 7406 7493 7564 0
13691 7406 7495 7562 0
13691 7406 7497 7560 0
13691 7406 7499 7558 0
13691 7406 7501 7556 0
13691 7406 7503 7554 0
13691 7406 7505 7552 0
13691 7406 7507 7550 0
13691 7406 7509 7548 0
13691 7406 7511 7546 0
13691 7406 7513 7544 0
13691 7406 7515 7542 0
13691 7406 7517 7540 0
13691 7406 7519 7538 0
13691 7406 7521 7536 0
13691 7406 7523 7534 0
13691 7406 7525 7532 0
13691 7406 7527 7530 0
13691 7408 7576 0
13691 7408 7482 7574 0
13691 7408 7483 7572 0
13691 7408 7485 7570 0
13691 7408 7487 7568 0
13691 7408 7489 7566 0
13691 7408 7491 7564 0
13691 7408 7493 7562 0
13691 7408 7495 7560 0
13691 7408 7497 7558 0
13691 7408 7499 7556 0
13691 7408 7501 7554 0
13691 7408 7503 7552 0
13691 7408 7505 7550 0
13691 7408 7507 7548 0
13691 7408 7509 7546 0
13691 7408 7511 7544 0
13691 7408 7513 7542 0
13691 7408 7515 7540 0
13691 7408 7517 7538 0
13691 7408 7519 7536 0
13691 7408 7521 7534 0
13691 7408 7523 7532 0
13691 7408 7525 7530 0
13691 7408 7527 7529 0
13691 7410 7574 0
13691 7410 7482 7572 0
13691 7410 7483 7570 0
13691 7410 7485 7568 0
13691 7410 7487 7566 0
13691 7410 7489 7564 0
13691 7410 7491 7562 0
13691 7410 7493 7560 0
13691 7410 7495 7558 0
13691 7410 7497 7556 0
13691 7410 7499 7554 0
13691 7410 7501 7552 0
13691 7410 7503 7550 0
13691 7410 7505 7548 0
13691 7410 7507 7546 0
13691 7410 7509 7544 0
13691 7410 7511 7542 0
13691 7410 7513 7540 0
13691 7410 7515 7538 0
13691 7410 7517 7536 0
13691 7410 7519 7534 0
13691 7410 7521 7532 0
13691 7410 7523 7530 0
13691 7410 7525 7529 0
13691 7410 7527 0
13691 7412 7572 0
13691 7412 7482 7570 0
13691 7412 7483 7568 0
13691 7412 7485 7566 0
13691 7412 7487 7564 0
13691 7412 7489 7562 0
13691 7412 7491 7560 0
13691 7412 7493 7558 0
13691 7412 7495 7556 0
13691 7412 7497 7554 0
13691 7412 7499 7552 0
13691 7412 7501 7550 0
13691 7412 7503 7548 0
13691 7412 7505 7546 0
13691 7412 7507 7544 0
13691 7412 7509 7542 0
13691 7412 7511 7540 0
13691 7412 7513 7538 0
13691 7412 7515 7536 0
13691 7412 7517 7534 0
13691 7412 7519 7532 0
13691 7412 7521 7530 0
13691 7412 7523 7529 0
13691 7412 7525 0
13691 7412 7527 0
13691 7414 7570 0
13691 7414 7482 7568 0
13691 7414 7483 7566 0
13691 7414 7485 7564 0
13691 7414 7487 7562 0
13691 7414 7489 7560 0
13691 7414 7491 7558 0
13691 7414 7493 7556 0
13691 7414 7495 7554 0
13691 7414 7497 7552 0
13691 7414 7499 7550 0
13691 7414 7501 7548 0
13691 7414 7503 7546 0
13691 7414 7505 7544 0
13691 7414 7507 7542 0
13691 7414 7509 7540 0
13691 7414 7511 7538 0
13691 7414 7513 7536 0
13691 7414 7515 7534 0
13691 7414 7517 7532 0
13691 7414 7519 7530 0
13691 7414 7521 7529 0
13691 7414 7523 0
13691 7414 7525 0
13691 7414 7527 0
13691 7416 7568 0
13691 7416 7482 7566 0
13691 7416 7483 7564 0
13691 7416 7485 7562 0
13691 7416 7487 7560 0
13691 7416 7489 7558 0
13691 7416 7491 7556 0
13691 7416 7493 7554 0
13691 7416 7495 7552 0
13691 7416 7497 7550 0
13691 7416 7499 7548 0
13691 7416 7501 7546 0
13691 7416 7503 7544 0
13691 7416 7505 7542 0
13691 7416 7507 7540 0
13691 7416 7509 7538 0
13691 7416 7511 7536 0
13691 7416 7513 7534 0
13691 7416 7515 7532 0
13691 7416 7517 7530 0
13691 7416 7519 7529 0
13691 7416 7521 0
13691 7416 7523 0
13691 7416 7525 0
13691 7416 7527 0
13691 7418 7566 0
13691 7418 7482 7564 0
13691 7418 7483 7562 0
13691 7418 7485 7560 0
13691 7418 7487 7558 0
13691 7418 7489 7556 0
13691 7418 7491 7554 0
13691 7418 7493 7552 0
13691 7418 7495 7550 0
13691 7418 7497 7548 0
13691 7418 7499 7546 0
13691 7418 7501 7544 0
13691 7418 7503 7542 0
13691 7418 7505 7540 0
13691 7418 7507 7538 0
13691 7418 7509 7536 0
13691 7418 7511 7534 0
13691 7418 7513 7532 0
13691 7418 7515 7530 0
13691 7418 7517 7529 0
13691 7418 7519 0
13691 7418 7521 0
13691 7418 7523 0
13691 7418 7525 0
13691 7418 7527 0
c (((aux612 + aux615 + aux616)<=1)=tv=SATLiteral(13692))
-13692 7610 0
-13692 7604 7609 0
-13692 7605 0
-13692 7607 0
-13692 7595 7609 0
-13692 7595 7604 0
-13692 7595 7605 0
-13692 7595 7607 0
-13692 7596 0
-13692 7596 7604 0
-13692 7596 7605 0
-13692 7596 7607 0
13692 -7596 -7604 -7609 0
13692 -7595 -7605 -7609 0
13692 -7595 -7604 -7610 0
c ((1<=(aux612 + aux615 + aux616))=tv=SATLiteral(13693))
-13693 -7595 -7604 -7609 0
13693 7609 0
13693 7604 0
13693 7605 0
13693 7607 0
13693 7595 0
13693 7595 7604 0
13693 7595 7605 0
13693 7595 7607 0
13693 7596 0
13693 7596 7604 0
13693 7596 7605 0
13693 7596 7607 0
c (((aux618 + aux621 + aux622)<=1)=tv=SATLiteral(13694))
-13694 7634 0
-13694 7628 7633 0
-13694 7629 0
-13694 7631 0
-13694 7619 7633 0
-13694 7619 7628 0
-13694 7619 7629 0
-13694 7619 7631 0
-13694 7620 0
-13694 7620 7628 0
-13694 7620 7629 0
-13694 7620 7631 0
13694 -7620 -7628 -7633 0
13694 -7619 -7629 -7633 0
13694 -7619 -7628 -7634 0
c ((1<=(aux618 + aux621 + aux622))=tv=SATLiteral(13695))
-13695 -7619 -7628 -7633 0
13695 7633 0
13695 7628 0
13695 7629 0
13695 7631 0
13695 7619 0
13695 7619 7628 0
13695 7619 7629 0
13695 7619 7631 0
13695 7620 0
13695 7620 7628 0
13695 7620 7629 0
13695 7620 7631 0
c (((aux624 + aux627 + aux628)<=1)=tv=SATLiteral(13696))
-13696 7658 0
-13696 7652 7657 0
-13696 7653 0
-13696 7655 0
-13696 7643 7657 0
-13696 7643 7652 0
-13696 7643 7653 0
-13696 7643 7655 0
-13696 7644 0
-13696 7644 7652 0
-13696 7644 7653 0
-13696 7644 7655 0
13696 -7644 -7652 -7657 0
13696 -7643 -7653 -7657 0
13696 -7643 -7652 -7658 0
c ((1<=(aux624 + aux627 + aux628))=tv=SATLiteral(13697))
-13697 -7643 -7652 -7657 0
13697 7657 0
13697 7652 0
13697 7653 0
13697 7655 0
13697 7643 0
13697 7643 7652 0
13697 7643 7653 0
13697 7643 7655 0
13697 7644 0
13697 7644 7652 0
13697 7644 7653 0
13697 7644 7655 0
c (((aux630 + aux633 + aux634)<=1)=tv=SATLiteral(13698))
-13698 7682 0
-13698 7676 7681 0
-13698 7677 0
-13698 7679 0
-13698 7667 7681 0
-13698 7667 7676 0
-13698 7667 7677 0
-13698 7667 7679 0
-13698 7668 0
-13698 7668 7676 0
-13698 7668 7677 0
-13698 7668 7679 0
13698 -7668 -7676 -7681 0
13698 -7667 -7677 -7681 0
13698 -7667 -7676 -7682 0
c ((1<=(aux630 + aux633 + aux634))=tv=SATLiteral(13699))
-13699 -7667 -7676 -7681 0
13699 7681 0
13699 7676 0
13699 7677 0
13699 7679 0
13699 7667 0
13699 7667 7676 0
13699 7667 7677 0
13699 7667 7679 0
13699 7668 0
13699 7668 7676 0
13699 7668 7677 0
13699 7668 7679 0
c (((aux636 + aux639 + aux640)<=1)=tv=SATLiteral(13700))
-13700 7706 0
-13700 7700 7705 0
-13700 7701 0
-13700 7703 0
-13700 7691 7705 0
-13700 7691 7700 0
-13700 7691 7701 0
-13700 7691 7703 0
-13700 7692 0
-13700 7692 7700 0
-13700 7692 7701 0
-13700 7692 7703 0
13700 -7692 -7700 -7705 0
13700 -7691 -7701 -7705 0
13700 -7691 -7700 -7706 0
c ((1<=(aux636 + aux639 + aux640))=tv=SATLiteral(13701))
-13701 -7691 -7700 -7705 0
13701 7705 0
13701 7700 0
13701 7701 0
13701 7703 0
13701 7691 0
13701 7691 7700 0
13701 7691 7701 0
13701 7691 7703 0
13701 7692 0
13701 7692 7700 0
13701 7692 7701 0
13701 7692 7703 0
c (((aux642 + aux645 + aux646)<=1)=tv=SATLiteral(13702))
-13702 7730 0
-13702 7724 7729 0
-13702 7725 0
-13702 7727 0
-13702 7715 7729 0
-13702 7715 7724 0
-13702 7715 7725 0
-13702 7715 7727 0
-13702 7716 0
-13702 7716 7724 0
-13702 7716 7725 0
-13702 7716 7727 0
13702 -7716 -7724 -7729 0
13702 -7715 -7725 -7729 0
13702 -7715 -7724 -7730 0
c ((1<=(aux642 + aux645 + aux646))=tv=SATLiteral(13703))
-13703 -7715 -7724 -7729 0
13703 7729 0
13703 7724 0
13703 7725 0
13703 7727 0
13703 7715 0
13703 7715 7724 0
13703 7715 7725 0
13703 7715 7727 0
13703 7716 0
13703 7716 7724 0
13703 7716 7725 0
13703 7716 7727 0
c (((aux648 + aux651 + aux652)<=1)=tv=SATLiteral(13704))
-13704 7754 0
-13704 7748 7753 0
-13704 7749 0
-13704 7751 0
-13704 7739 7753 0
-13704 7739 7748 0
-13704 7739 7749 0
-13704 7739 7751 0
-13704 7740 0
-13704 7740 7748 0
-13704 7740 7749 0
-13704 7740 7751 0
13704 -7740 -7748 -7753 0
13704 -7739 -7749 -7753 0
13704 -7739 -7748 -7754 0
c ((1<=(aux648 + aux651 + aux652))=tv=SATLiteral(13705))
-13705 -7739 -7748 -7753 0
13705 7753 0
13705 7748 0
13705 7749 0
13705 7751 0
13705 7739 0
13705 7739 7748 0
13705 7739 7749 0
13705 7739 7751 0
13705 7740 0
13705 7740 7748 0
13705 7740 7749 0
13705 7740 7751 0
c (((aux654 + aux657 + aux658)<=1)=tv=SATLiteral(13706))
-13706 7778 0
-13706 7772 7777 0
-13706 7773 0
-13706 7775 0
-13706 7763 7777 0
-13706 7763 7772 0
-13706 7763 7773 0
-13706 7763 7775 0
-13706 7764 0
-13706 7764 7772 0
-13706 7764 7773 0
-13706 7764 7775 0
13706 -7764 -7772 -7777 0
13706 -7763 -7773 -7777 0
13706 -7763 -7772 -7778 0
c ((1<=(aux654 + aux657 + aux658))=tv=SATLiteral(13707))
-13707 -7763 -7772 -7777 0
13707 7777 0
13707 7772 0
13707 7773 0
13707 7775 0
13707 7763 0
13707 7763 7772 0
13707 7763 7773 0
13707 7763 7775 0
13707 7764 0
13707 7764 7772 0
13707 7764 7773 0
13707 7764 7775 0
c (((aux660 + aux663 + aux664)<=1)=tv=SATLiteral(13708))
-13708 7802 0
-13708 7796 7801 0
-13708 7797 0
-13708 7799 0
-13708 7787 7801 0
-13708 7787 7796 0
-13708 7787 7797 0
-13708 7787 7799 0
-13708 7788 0
-13708 7788 7796 0
-13708 7788 7797 0
-13708 7788 7799 0
13708 -7788 -7796 -7801 0
13708 -7787 -7797 -7801 0
13708 -7787 -7796 -7802 0
c ((1<=(aux660 + aux663 + aux664))=tv=SATLiteral(13709))
-13709 -7787 -7796 -7801 0
13709 7801 0
13709 7796 0
13709 7797 0
13709 7799 0
13709 7787 0
13709 7787 7796 0
13709 7787 7797 0
13709 7787 7799 0
13709 7788 0
13709 7788 7796 0
13709 7788 7797 0
13709 7788 7799 0
c (((aux666 + aux669 + aux670)<=1)=tv=SATLiteral(13710))
-13710 7826 0
-13710 7820 7825 0
-13710 7821 0
-13710 7823 0
-13710 7811 7825 0
-13710 7811 7820 0
-13710 7811 7821 0
-13710 7811 7823 0
-13710 7812 0
-13710 7812 7820 0
-13710 7812 7821 0
-13710 7812 7823 0
13710 -7812 -7820 -7825 0
13710 -7811 -7821 -7825 0
13710 -7811 -7820 -7826 0
c ((1<=(aux666 + aux669 + aux670))=tv=SATLiteral(13711))
-13711 -7811 -7820 -7825 0
13711 7825 0
13711 7820 0
13711 7821 0
13711 7823 0
13711 7811 0
13711 7811 7820 0
13711 7811 7821 0
13711 7811 7823 0
13711 7812 0
13711 7812 7820 0
13711 7812 7821 0
13711 7812 7823 0
c (((aux672 + aux675 + aux676)<=1)=tv=SATLiteral(13712))
-13712 7850 0
-13712 7844 7849 0
-13712 7845 0
-13712 7847 0
-13712 7835 7849 0
-13712 7835 7844 0
-13712 7835 7845 0
-13712 7835 7847 0
-13712 7836 0
-13712 7836 7844 0
-13712 7836 7845 0
-13712 7836 7847 0
13712 -7836 -7844 -7849 0
13712 -7835 -7845 -7849 0
13712 -7835 -7844 -7850 0
c ((1<=(aux672 + aux675 + aux676))=tv=SATLiteral(13713))
-13713 -7835 -7844 -7849 0
13713 7849 0
13713 7844 0
13713 7845 0
13713 7847 0
13713 7835 0
13713 7835 7844 0
13713 7835 7845 0
13713 7835 7847 0
13713 7836 0
13713 7836 7844 0
13713 7836 7845 0
13713 7836 7847 0
c (((aux678 + aux681 + aux682)<=1)=tv=SATLiteral(13714))
-13714 7874 0
-13714 7868 7873 0
-13714 7869 0
-13714 7871 0
-13714 7859 7873 0
-13714 7859 7868 0
-13714 7859 7869 0
-13714 7859 7871 0
-13714 7860 0
-13714 7860 7868 0
-13714 7860 7869 0
-13714 7860 7871 0
13714 -7860 -7868 -7873 0
13714 -7859 -7869 -7873 0
13714 -7859 -7868 -7874 0
c ((1<=(aux678 + aux681 + aux682))=tv=SATLiteral(13715))
-13715 -7859 -7868 -7873 0
13715 7873 0
13715 7868 0
13715 7869 0
13715 7871 0
13715 7859 0
13715 7859 7868 0
13715 7859 7869 0
13715 7859 7871 0
13715 7860 0
13715 7860 7868 0
13715 7860 7869 0
13715 7860 7871 0
c (((aux684 + aux687 + aux688)<=1)=tv=SATLiteral(13716))
-13716 7898 0
-13716 7892 7897 0
-13716 7893 0
-13716 7895 0
-13716 7883 7897 0
-13716 7883 7892 0
-13716 7883 7893 0
-13716 7883 7895 0
-13716 7884 0
-13716 7884 7892 0
-13716 7884 7893 0
-13716 7884 7895 0
13716 -7884 -7892 -7897 0
13716 -7883 -7893 -7897 0
13716 -7883 -7892 -7898 0
c ((1<=(aux684 + aux687 + aux688))=tv=SATLiteral(13717))
-13717 -7883 -7892 -7897 0
13717 7897 0
13717 7892 0
13717 7893 0
13717 7895 0
13717 7883 0
13717 7883 7892 0
13717 7883 7893 0
13717 7883 7895 0
13717 7884 0
13717 7884 7892 0
13717 7884 7893 0
13717 7884 7895 0
c (((aux690 + aux693 + aux694)<=1)=tv=SATLiteral(13718))
-13718 7922 0
-13718 7916 7921 0
-13718 7917 0
-13718 7919 0
-13718 7907 7921 0
-13718 7907 7916 0
-13718 7907 7917 0
-13718 7907 7919 0
-13718 7908 0
-13718 7908 7916 0
-13718 7908 7917 0
-13718 7908 7919 0
13718 -7908 -7916 -7921 0
13718 -7907 -7917 -7921 0
13718 -7907 -7916 -7922 0
c ((1<=(aux690 + aux693 + aux694))=tv=SATLiteral(13719))
-13719 -7907 -7916 -7921 0
13719 7921 0
13719 7916 0
13719 7917 0
13719 7919 0
13719 7907 0
13719 7907 7916 0
13719 7907 7917 0
13719 7907 7919 0
13719 7908 0
13719 7908 7916 0
13719 7908 7917 0
13719 7908 7919 0
c (((aux696 + aux699 + aux700)<=1)=tv=SATLiteral(13720))
-13720 7946 0
-13720 7940 7945 0
-13720 7941 0
-13720 7943 0
-13720 7931 7945 0
-13720 7931 7940 0
-13720 7931 7941 0
-13720 7931 7943 0
-13720 7932 0
-13720 7932 7940 0
-13720 7932 7941 0
-13720 7932 7943 0
13720 -7932 -7940 -7945 0
13720 -7931 -7941 -7945 0
13720 -7931 -7940 -7946 0
c ((1<=(aux696 + aux699 + aux700))=tv=SATLiteral(13721))
-13721 -7931 -7940 -7945 0
13721 7945 0
13721 7940 0
13721 7941 0
13721 7943 0
13721 7931 0
13721 7931 7940 0
13721 7931 7941 0
13721 7931 7943 0
13721 7932 0
13721 7932 7940 0
13721 7932 7941 0
13721 7932 7943 0
c (((aux702 + aux705 + aux706)<=1)=tv=SATLiteral(13722))
-13722 7970 0
-13722 7964 7969 0
-13722 7965 0
-13722 7967 0
-13722 7955 7969 0
-13722 7955 7964 0
-13722 7955 7965 0
-13722 7955 7967 0
-13722 7956 0
-13722 7956 7964 0
-13722 7956 7965 0
-13722 7956 7967 0
13722 -7956 -7964 -7969 0
13722 -7955 -7965 -7969 0
13722 -7955 -7964 -7970 0
c ((1<=(aux702 + aux705 + aux706))=tv=SATLiteral(13723))
-13723 -7955 -7964 -7969 0
13723 7969 0
13723 7964 0
13723 7965 0
13723 7967 0
13723 7955 0
13723 7955 7964 0
13723 7955 7965 0
13723 7955 7967 0
13723 7956 0
13723 7956 7964 0
13723 7956 7965 0
13723 7956 7967 0
c (((aux708 + aux711 + aux712)<=1)=tv=SATLiteral(13724))
-13724 7994 0
-13724 7988 7993 0
-13724 7989 0
-13724 7991 0
-13724 7979 7993 0
-13724 7979 7988 0
-13724 7979 7989 0
-13724 7979 7991 0
-13724 7980 0
-13724 7980 7988 0
-13724 7980 7989 0
-13724 7980 7991 0
13724 -7980 -7988 -7993 0
13724 -7979 -7989 -7993 0
13724 -7979 -7988 -7994 0
c ((1<=(aux708 + aux711 + aux712))=tv=SATLiteral(13725))
-13725 -7979 -7988 -7993 0
13725 7993 0
13725 7988 0
13725 7989 0
13725 7991 0
13725 7979 0
13725 7979 7988 0
13725 7979 7989 0
13725 7979 7991 0
13725 7980 0
13725 7980 7988 0
13725 7980 7989 0
13725 7980 7991 0
c (((aux714 + aux717 + aux718)<=1)=tv=SATLiteral(13726))
-13726 8018 0
-13726 8012 8017 0
-13726 8013 0
-13726 8015 0
-13726 8003 8017 0
-13726 8003 8012 0
-13726 8003 8013 0
-13726 8003 8015 0
-13726 8004 0
-13726 8004 8012 0
-13726 8004 8013 0
-13726 8004 8015 0
13726 -8004 -8012 -8017 0
13726 -8003 -8013 -8017 0
13726 -8003 -8012 -8018 0
c ((1<=(aux714 + aux717 + aux718))=tv=SATLiteral(13727))
-13727 -8003 -8012 -8017 0
13727 8017 0
13727 8012 0
13727 8013 0
13727 8015 0
13727 8003 0
13727 8003 8012 0
13727 8003 8013 0
13727 8003 8015 0
13727 8004 0
13727 8004 8012 0
13727 8004 8013 0
13727 8004 8015 0
c (((aux720 + aux723 + aux724)<=1)=tv=SATLiteral(13728))
-13728 8042 0
-13728 8036 8041 0
-13728 8037 0
-13728 8039 0
-13728 8027 8041 0
-13728 8027 8036 0
-13728 8027 8037 0
-13728 8027 8039 0
-13728 8028 0
-13728 8028 8036 0
-13728 8028 8037 0
-13728 8028 8039 0
13728 -8028 -8036 -8041 0
13728 -8027 -8037 -8041 0
13728 -8027 -8036 -8042 0
c ((1<=(aux720 + aux723 + aux724))=tv=SATLiteral(13729))
-13729 -8027 -8036 -8041 0
13729 8041 0
13729 8036 0
13729 8037 0
13729 8039 0
13729 8027 0
13729 8027 8036 0
13729 8027 8037 0
13729 8027 8039 0
13729 8028 0
13729 8028 8036 0
13729 8028 8037 0
13729 8028 8039 0
c (((aux726 + aux729 + aux730)<=1)=tv=SATLiteral(13730))
-13730 8066 0
-13730 8060 8065 0
-13730 8061 0
-13730 8063 0
-13730 8051 8065 0
-13730 8051 8060 0
-13730 8051 8061 0
-13730 8051 8063 0
-13730 8052 0
-13730 8052 8060 0
-13730 8052 8061 0
-13730 8052 8063 0
13730 -8052 -8060 -8065 0
13730 -8051 -8061 -8065 0
13730 -8051 -8060 -8066 0
c ((1<=(aux726 + aux729 + aux730))=tv=SATLiteral(13731))
-13731 -8051 -8060 -8065 0
13731 8065 0
13731 8060 0
13731 8061 0
13731 8063 0
13731 8051 0
13731 8051 8060 0
13731 8051 8061 0
13731 8051 8063 0
13731 8052 0
13731 8052 8060 0
13731 8052 8061 0
13731 8052 8063 0
c (((aux732 + aux735 + aux736)<=1)=tv=SATLiteral(13732))
-13732 8090 0
-13732 8084 8089 0
-13732 8085 0
-13732 8087 0
-13732 8075 8089 0
-13732 8075 8084 0
-13732 8075 8085 0
-13732 8075 8087 0
-13732 8076 0
-13732 8076 8084 0
-13732 8076 8085 0
-13732 8076 8087 0
13732 -8076 -8084 -8089 0
13732 -8075 -8085 -8089 0
13732 -8075 -8084 -8090 0
c ((1<=(aux732 + aux735 + aux736))=tv=SATLiteral(13733))
-13733 -8075 -8084 -8089 0
13733 8089 0
13733 8084 0
13733 8085 0
13733 8087 0
13733 8075 0
13733 8075 8084 0
13733 8075 8085 0
13733 8075 8087 0
13733 8076 0
13733 8076 8084 0
13733 8076 8085 0
13733 8076 8087 0
c (((aux738 + aux741 + aux742)<=1)=tv=SATLiteral(13734))
-13734 8114 0
-13734 8108 8113 0
-13734 8109 0
-13734 8111 0
-13734 8099 8113 0
-13734 8099 8108 0
-13734 8099 8109 0
-13734 8099 8111 0
-13734 8100 0
-13734 8100 8108 0
-13734 8100 8109 0
-13734 8100 8111 0
13734 -8100 -8108 -8113 0
13734 -8099 -8109 -8113 0
13734 -8099 -8108 -8114 0
c ((1<=(aux738 + aux741 + aux742))=tv=SATLiteral(13735))
-13735 -8099 -8108 -8113 0
13735 8113 0
13735 8108 0
13735 8109 0
13735 8111 0
13735 8099 0
13735 8099 8108 0
13735 8099 8109 0
13735 8099 8111 0
13735 8100 0
13735 8100 8108 0
13735 8100 8109 0
13735 8100 8111 0
c (((aux744 + aux747 + aux748)<=1)=tv=SATLiteral(13736))
-13736 8138 0
-13736 8132 8137 0
-13736 8133 0
-13736 8135 0
-13736 8123 8137 0
-13736 8123 8132 0
-13736 8123 8133 0
-13736 8123 8135 0
-13736 8124 0
-13736 8124 8132 0
-13736 8124 8133 0
-13736 8124 8135 0
13736 -8124 -8132 -8137 0
13736 -8123 -8133 -8137 0
13736 -8123 -8132 -8138 0
c ((1<=(aux744 + aux747 + aux748))=tv=SATLiteral(13737))
-13737 -8123 -8132 -8137 0
13737 8137 0
13737 8132 0
13737 8133 0
13737 8135 0
13737 8123 0
13737 8123 8132 0
13737 8123 8133 0
13737 8123 8135 0
13737 8124 0
13737 8124 8132 0
13737 8124 8133 0
13737 8124 8135 0
c (((aux750 + aux753 + aux754)<=1)=tv=SATLiteral(13738))
-13738 8162 0
-13738 8156 8161 0
-13738 8157 0
-13738 8159 0
-13738 8147 8161 0
-13738 8147 8156 0
-13738 8147 8157 0
-13738 8147 8159 0
-13738 8148 0
-13738 8148 8156 0
-13738 8148 8157 0
-13738 8148 8159 0
13738 -8148 -8156 -8161 0
13738 -8147 -8157 -8161 0
13738 -8147 -8156 -8162 0
c ((1<=(aux750 + aux753 + aux754))=tv=SATLiteral(13739))
-13739 -8147 -8156 -8161 0
13739 8161 0
13739 8156 0
13739 8157 0
13739 8159 0
13739 8147 0
13739 8147 8156 0
13739 8147 8157 0
13739 8147 8159 0
13739 8148 0
13739 8148 8156 0
13739 8148 8157 0
13739 8148 8159 0
c (((aux756 + aux759 + aux760)<=1)=tv=SATLiteral(13740))
-13740 8186 0
-13740 8180 8185 0
-13740 8181 0
-13740 8183 0
-13740 8171 8185 0
-13740 8171 8180 0
-13740 8171 8181 0
-13740 8171 8183 0
-13740 8172 0
-13740 8172 8180 0
-13740 8172 8181 0
-13740 8172 8183 0
13740 -8172 -8180 -8185 0
13740 -8171 -8181 -8185 0
13740 -8171 -8180 -8186 0
c ((1<=(aux756 + aux759 + aux760))=tv=SATLiteral(13741))
-13741 -8171 -8180 -8185 0
13741 8185 0
13741 8180 0
13741 8181 0
13741 8183 0
13741 8171 0
13741 8171 8180 0
13741 8171 8181 0
13741 8171 8183 0
13741 8172 0
13741 8172 8180 0
13741 8172 8181 0
13741 8172 8183 0
c (((aux762 + aux765 + aux766)<=1)=tv=SATLiteral(13742))
-13742 8210 0
-13742 8204 8209 0
-13742 8205 0
-13742 8207 0
-13742 8195 8209 0
-13742 8195 8204 0
-13742 8195 8205 0
-13742 8195 8207 0
-13742 8196 0
-13742 8196 8204 0
-13742 8196 8205 0
-13742 8196 8207 0
13742 -8196 -8204 -8209 0
13742 -8195 -8205 -8209 0
13742 -8195 -8204 -8210 0
c ((1<=(aux762 + aux765 + aux766))=tv=SATLiteral(13743))
-13743 -8195 -8204 -8209 0
13743 8209 0
13743 8204 0
13743 8205 0
13743 8207 0
13743 8195 0
13743 8195 8204 0
13743 8195 8205 0
13743 8195 8207 0
13743 8196 0
13743 8196 8204 0
13743 8196 8205 0
13743 8196 8207 0
c (((aux768 + aux771 + aux772)<=1)=tv=SATLiteral(13744))
-13744 8234 0
-13744 8228 8233 0
-13744 8229 0
-13744 8231 0
-13744 8219 8233 0
-13744 8219 8228 0
-13744 8219 8229 0
-13744 8219 8231 0
-13744 8220 0
-13744 8220 8228 0
-13744 8220 8229 0
-13744 8220 8231 0
13744 -8220 -8228 -8233 0
13744 -8219 -8229 -8233 0
13744 -8219 -8228 -8234 0
c ((1<=(aux768 + aux771 + aux772))=tv=SATLiteral(13745))
-13745 -8219 -8228 -8233 0
13745 8233 0
13745 8228 0
13745 8229 0
13745 8231 0
13745 8219 0
13745 8219 8228 0
13745 8219 8229 0
13745 8219 8231 0
13745 8220 0
13745 8220 8228 0
13745 8220 8229 0
13745 8220 8231 0
c (((aux774 + aux777 + aux778)<=1)=tv=SATLiteral(13746))
-13746 8258 0
-13746 8252 8257 0
-13746 8253 0
-13746 8255 0
-13746 8243 8257 0
-13746 8243 8252 0
-13746 8243 8253 0
-13746 8243 8255 0
-13746 8244 0
-13746 8244 8252 0
-13746 8244 8253 0
-13746 8244 8255 0
13746 -8244 -8252 -8257 0
13746 -8243 -8253 -8257 0
13746 -8243 -8252 -8258 0
c ((1<=(aux774 + aux777 + aux778))=tv=SATLiteral(13747))
-13747 -8243 -8252 -8257 0
13747 8257 0
13747 8252 0
13747 8253 0
13747 8255 0
13747 8243 0
13747 8243 8252 0
13747 8243 8253 0
13747 8243 8255 0
13747 8244 0
13747 8244 8252 0
13747 8244 8253 0
13747 8244 8255 0
c (((aux780 + aux783 + aux784)<=1)=tv=SATLiteral(13748))
-13748 8282 0
-13748 8276 8281 0
-13748 8277 0
-13748 8279 0
-13748 8267 8281 0
-13748 8267 8276 0
-13748 8267 8277 0
-13748 8267 8279 0
-13748 8268 0
-13748 8268 8276 0
-13748 8268 8277 0
-13748 8268 8279 0
13748 -8268 -8276 -8281 0
13748 -8267 -8277 -8281 0
13748 -8267 -8276 -8282 0
c ((1<=(aux780 + aux783 + aux784))=tv=SATLiteral(13749))
-13749 -8267 -8276 -8281 0
13749 8281 0
13749 8276 0
13749 8277 0
13749 8279 0
13749 8267 0
13749 8267 8276 0
13749 8267 8277 0
13749 8267 8279 0
13749 8268 0
13749 8268 8276 0
13749 8268 8277 0
13749 8268 8279 0
c (((aux786 + aux789 + aux790)<=1)=tv=SATLiteral(13750))
-13750 8306 0
-13750 8300 8305 0
-13750 8301 0
-13750 8303 0
-13750 8291 8305 0
-13750 8291 8300 0
-13750 8291 8301 0
-13750 8291 8303 0
-13750 8292 0
-13750 8292 8300 0
-13750 8292 8301 0
-13750 8292 8303 0
13750 -8292 -8300 -8305 0
13750 -8291 -8301 -8305 0
13750 -8291 -8300 -8306 0
c ((1<=(aux786 + aux789 + aux790))=tv=SATLiteral(13751))
-13751 -8291 -8300 -8305 0
13751 8305 0
13751 8300 0
13751 8301 0
13751 8303 0
13751 8291 0
13751 8291 8300 0
13751 8291 8301 0
13751 8291 8303 0
13751 8292 0
13751 8292 8300 0
13751 8292 8301 0
13751 8292 8303 0
c (((aux792 + aux795 + aux796)<=1)=tv=SATLiteral(13752))
-13752 8330 0
-13752 8324 8329 0
-13752 8325 0
-13752 8327 0
-13752 8315 8329 0
-13752 8315 8324 0
-13752 8315 8325 0
-13752 8315 8327 0
-13752 8316 0
-13752 8316 8324 0
-13752 8316 8325 0
-13752 8316 8327 0
13752 -8316 -8324 -8329 0
13752 -8315 -8325 -8329 0
13752 -8315 -8324 -8330 0
c ((1<=(aux792 + aux795 + aux796))=tv=SATLiteral(13753))
-13753 -8315 -8324 -8329 0
13753 8329 0
13753 8324 0
13753 8325 0
13753 8327 0
13753 8315 0
13753 8315 8324 0
13753 8315 8325 0
13753 8315 8327 0
13753 8316 0
13753 8316 8324 0
13753 8316 8325 0
13753 8316 8327 0
c (((aux798 + aux801 + aux802)<=1)=tv=SATLiteral(13754))
-13754 8354 0
-13754 8348 8353 0
-13754 8349 0
-13754 8351 0
-13754 8339 8353 0
-13754 8339 8348 0
-13754 8339 8349 0
-13754 8339 8351 0
-13754 8340 0
-13754 8340 8348 0
-13754 8340 8349 0
-13754 8340 8351 0
13754 -8340 -8348 -8353 0
13754 -8339 -8349 -8353 0
13754 -8339 -8348 -8354 0
c ((1<=(aux798 + aux801 + aux802))=tv=SATLiteral(13755))
-13755 -8339 -8348 -8353 0
13755 8353 0
13755 8348 0
13755 8349 0
13755 8351 0
13755 8339 0
13755 8339 8348 0
13755 8339 8349 0
13755 8339 8351 0
13755 8340 0
13755 8340 8348 0
13755 8340 8349 0
13755 8340 8351 0
c (((aux804 + aux807 + aux808)<=1)=tv=SATLiteral(13756))
-13756 8378 0
-13756 8372 8377 0
-13756 8373 0
-13756 8375 0
-13756 8363 8377 0
-13756 8363 8372 0
-13756 8363 8373 0
-13756 8363 8375 0
-13756 8364 0
-13756 8364 8372 0
-13756 8364 8373 0
-13756 8364 8375 0
13756 -8364 -8372 -8377 0
13756 -8363 -8373 -8377 0
13756 -8363 -8372 -8378 0
c ((1<=(aux804 + aux807 + aux808))=tv=SATLiteral(13757))
-13757 -8363 -8372 -8377 0
13757 8377 0
13757 8372 0
13757 8373 0
13757 8375 0
13757 8363 0
13757 8363 8372 0
13757 8363 8373 0
13757 8363 8375 0
13757 8364 0
13757 8364 8372 0
13757 8364 8373 0
13757 8364 8375 0
c (((aux810 + aux813 + aux814)<=1)=tv=SATLiteral(13758))
-13758 8402 0
-13758 8396 8401 0
-13758 8397 0
-13758 8399 0
-13758 8387 8401 0
-13758 8387 8396 0
-13758 8387 8397 0
-13758 8387 8399 0
-13758 8388 0
-13758 8388 8396 0
-13758 8388 8397 0
-13758 8388 8399 0
13758 -8388 -8396 -8401 0
13758 -8387 -8397 -8401 0
13758 -8387 -8396 -8402 0
c ((1<=(aux810 + aux813 + aux814))=tv=SATLiteral(13759))
-13759 -8387 -8396 -8401 0
13759 8401 0
13759 8396 0
13759 8397 0
13759 8399 0
13759 8387 0
13759 8387 8396 0
13759 8387 8397 0
13759 8387 8399 0
13759 8388 0
13759 8388 8396 0
13759 8388 8397 0
13759 8388 8399 0
c (((aux816 + aux819 + aux820)<=1)=tv=SATLiteral(13760))
-13760 8426 0
-13760 8420 8425 0
-13760 8421 0
-13760 8423 0
-13760 8411 8425 0
-13760 8411 8420 0
-13760 8411 8421 0
-13760 8411 8423 0
-13760 8412 0
-13760 8412 8420 0
-13760 8412 8421 0
-13760 8412 8423 0
13760 -8412 -8420 -8425 0
13760 -8411 -8421 -8425 0
13760 -8411 -8420 -8426 0
c ((1<=(aux816 + aux819 + aux820))=tv=SATLiteral(13761))
-13761 -8411 -8420 -8425 0
13761 8425 0
13761 8420 0
13761 8421 0
13761 8423 0
13761 8411 0
13761 8411 8420 0
13761 8411 8421 0
13761 8411 8423 0
13761 8412 0
13761 8412 8420 0
13761 8412 8421 0
13761 8412 8423 0
c (((aux822 + aux825 + aux826)<=1)=tv=SATLiteral(13762))
-13762 8450 0
-13762 8444 8449 0
-13762 8445 0
-13762 8447 0
-13762 8435 8449 0
-13762 8435 8444 0
-13762 8435 8445 0
-13762 8435 8447 0
-13762 8436 0
-13762 8436 8444 0
-13762 8436 8445 0
-13762 8436 8447 0
13762 -8436 -8444 -8449 0
13762 -8435 -8445 -8449 0
13762 -8435 -8444 -8450 0
c ((1<=(aux822 + aux825 + aux826))=tv=SATLiteral(13763))
-13763 -8435 -8444 -8449 0
13763 8449 0
13763 8444 0
13763 8445 0
13763 8447 0
13763 8435 0
13763 8435 8444 0
13763 8435 8445 0
13763 8435 8447 0
13763 8436 0
13763 8436 8444 0
13763 8436 8445 0
13763 8436 8447 0
c (((aux828 + aux831 + aux832)<=1)=tv=SATLiteral(13764))
-13764 8474 0
-13764 8468 8473 0
-13764 8469 0
-13764 8471 0
-13764 8459 8473 0
-13764 8459 8468 0
-13764 8459 8469 0
-13764 8459 8471 0
-13764 8460 0
-13764 8460 8468 0
-13764 8460 8469 0
-13764 8460 8471 0
13764 -8460 -8468 -8473 0
13764 -8459 -8469 -8473 0
13764 -8459 -8468 -8474 0
c ((1<=(aux828 + aux831 + aux832))=tv=SATLiteral(13765))
-13765 -8459 -8468 -8473 0
13765 8473 0
13765 8468 0
13765 8469 0
13765 8471 0
13765 8459 0
13765 8459 8468 0
13765 8459 8469 0
13765 8459 8471 0
13765 8460 0
13765 8460 8468 0
13765 8460 8469 0
13765 8460 8471 0
c (((aux834 + aux837 + aux838)<=1)=tv=SATLiteral(13766))
-13766 8498 0
-13766 8492 8497 0
-13766 8493 0
-13766 8495 0
-13766 8483 8497 0
-13766 8483 8492 0
-13766 8483 8493 0
-13766 8483 8495 0
-13766 8484 0
-13766 8484 8492 0
-13766 8484 8493 0
-13766 8484 8495 0
13766 -8484 -8492 -8497 0
13766 -8483 -8493 -8497 0
13766 -8483 -8492 -8498 0
c ((1<=(aux834 + aux837 + aux838))=tv=SATLiteral(13767))
-13767 -8483 -8492 -8497 0
13767 8497 0
13767 8492 0
13767 8493 0
13767 8495 0
13767 8483 0
13767 8483 8492 0
13767 8483 8493 0
13767 8483 8495 0
13767 8484 0
13767 8484 8492 0
13767 8484 8493 0
13767 8484 8495 0
c (((aux840 + aux843 + aux844)<=1)=tv=SATLiteral(13768))
-13768 8522 0
-13768 8516 8521 0
-13768 8517 0
-13768 8519 0
-13768 8507 8521 0
-13768 8507 8516 0
-13768 8507 8517 0
-13768 8507 8519 0
-13768 8508 0
-13768 8508 8516 0
-13768 8508 8517 0
-13768 8508 8519 0
13768 -8508 -8516 -8521 0
13768 -8507 -8517 -8521 0
13768 -8507 -8516 -8522 0
c ((1<=(aux840 + aux843 + aux844))=tv=SATLiteral(13769))
-13769 -8507 -8516 -8521 0
13769 8521 0
13769 8516 0
13769 8517 0
13769 8519 0
13769 8507 0
13769 8507 8516 0
13769 8507 8517 0
13769 8507 8519 0
13769 8508 0
13769 8508 8516 0
13769 8508 8517 0
13769 8508 8519 0
c (((aux846 + aux849 + aux850)<=1)=tv=SATLiteral(13770))
-13770 8546 0
-13770 8540 8545 0
-13770 8541 0
-13770 8543 0
-13770 8531 8545 0
-13770 8531 8540 0
-13770 8531 8541 0
-13770 8531 8543 0
-13770 8532 0
-13770 8532 8540 0
-13770 8532 8541 0
-13770 8532 8543 0
13770 -8532 -8540 -8545 0
13770 -8531 -8541 -8545 0
13770 -8531 -8540 -8546 0
c ((1<=(aux846 + aux849 + aux850))=tv=SATLiteral(13771))
-13771 -8531 -8540 -8545 0
13771 8545 0
13771 8540 0
13771 8541 0
13771 8543 0
13771 8531 0
13771 8531 8540 0
13771 8531 8541 0
13771 8531 8543 0
13771 8532 0
13771 8532 8540 0
13771 8532 8541 0
13771 8532 8543 0
c (((aux852 + aux855 + aux856)<=1)=tv=SATLiteral(13772))
-13772 8570 0
-13772 8564 8569 0
-13772 8565 0
-13772 8567 0
-13772 8555 8569 0
-13772 8555 8564 0
-13772 8555 8565 0
-13772 8555 8567 0
-13772 8556 0
-13772 8556 8564 0
-13772 8556 8565 0
-13772 8556 8567 0
13772 -8556 -8564 -8569 0
13772 -8555 -8565 -8569 0
13772 -8555 -8564 -8570 0
c ((1<=(aux852 + aux855 + aux856))=tv=SATLiteral(13773))
-13773 -8555 -8564 -8569 0
13773 8569 0
13773 8564 0
13773 8565 0
13773 8567 0
13773 8555 0
13773 8555 8564 0
13773 8555 8565 0
13773 8555 8567 0
13773 8556 0
13773 8556 8564 0
13773 8556 8565 0
13773 8556 8567 0
c (((aux858 + aux861 + aux862)<=1)=tv=SATLiteral(13774))
-13774 8594 0
-13774 8588 8593 0
-13774 8589 0
-13774 8591 0
-13774 8579 8593 0
-13774 8579 8588 0
-13774 8579 8589 0
-13774 8579 8591 0
-13774 8580 0
-13774 8580 8588 0
-13774 8580 8589 0
-13774 8580 8591 0
13774 -8580 -8588 -8593 0
13774 -8579 -8589 -8593 0
13774 -8579 -8588 -8594 0
c ((1<=(aux858 + aux861 + aux862))=tv=SATLiteral(13775))
-13775 -8579 -8588 -8593 0
13775 8593 0
13775 8588 0
13775 8589 0
13775 8591 0
13775 8579 0
13775 8579 8588 0
13775 8579 8589 0
13775 8579 8591 0
13775 8580 0
13775 8580 8588 0
13775 8580 8589 0
13775 8580 8591 0
c (((aux864 + aux867 + aux868)<=1)=tv=SATLiteral(13776))
-13776 8618 0
-13776 8612 8617 0
-13776 8613 0
-13776 8615 0
-13776 8603 8617 0
-13776 8603 8612 0
-13776 8603 8613 0
-13776 8603 8615 0
-13776 8604 0
-13776 8604 8612 0
-13776 8604 8613 0
-13776 8604 8615 0
13776 -8604 -8612 -8617 0
13776 -8603 -8613 -8617 0
13776 -8603 -8612 -8618 0
c ((1<=(aux864 + aux867 + aux868))=tv=SATLiteral(13777))
-13777 -8603 -8612 -8617 0
13777 8617 0
13777 8612 0
13777 8613 0
13777 8615 0
13777 8603 0
13777 8603 8612 0
13777 8603 8613 0
13777 8603 8615 0
13777 8604 0
13777 8604 8612 0
13777 8604 8613 0
13777 8604 8615 0
c (((aux870 + aux873 + aux874)<=1)=tv=SATLiteral(13778))
-13778 8642 0
-13778 8636 8641 0
-13778 8637 0
-13778 8639 0
-13778 8627 8641 0
-13778 8627 8636 0
-13778 8627 8637 0
-13778 8627 8639 0
-13778 8628 0
-13778 8628 8636 0
-13778 8628 8637 0
-13778 8628 8639 0
13778 -8628 -8636 -8641 0
13778 -8627 -8637 -8641 0
13778 -8627 -8636 -8642 0
c ((1<=(aux870 + aux873 + aux874))=tv=SATLiteral(13779))
-13779 -8627 -8636 -8641 0
13779 8641 0
13779 8636 0
13779 8637 0
13779 8639 0
13779 8627 0
13779 8627 8636 0
13779 8627 8637 0
13779 8627 8639 0
13779 8628 0
13779 8628 8636 0
13779 8628 8637 0
13779 8628 8639 0
c (((aux876 + aux879 + aux880)<=1)=tv=SATLiteral(13780))
-13780 8666 0
-13780 8660 8665 0
-13780 8661 0
-13780 8663 0
-13780 8651 8665 0
-13780 8651 8660 0
-13780 8651 8661 0
-13780 8651 8663 0
-13780 8652 0
-13780 8652 8660 0
-13780 8652 8661 0
-13780 8652 8663 0
13780 -8652 -8660 -8665 0
13780 -8651 -8661 -8665 0
13780 -8651 -8660 -8666 0
c ((1<=(aux876 + aux879 + aux880))=tv=SATLiteral(13781))
-13781 -8651 -8660 -8665 0
13781 8665 0
13781 8660 0
13781 8661 0
13781 8663 0
13781 8651 0
13781 8651 8660 0
13781 8651 8661 0
13781 8651 8663 0
13781 8652 0
13781 8652 8660 0
13781 8652 8661 0
13781 8652 8663 0
c (((aux882 + aux885 + aux886)<=1)=tv=SATLiteral(13782))
-13782 8690 0
-13782 8684 8689 0
-13782 8685 0
-13782 8687 0
-13782 8675 8689 0
-13782 8675 8684 0
-13782 8675 8685 0
-13782 8675 8687 0
-13782 8676 0
-13782 8676 8684 0
-13782 8676 8685 0
-13782 8676 8687 0
13782 -8676 -8684 -8689 0
13782 -8675 -8685 -8689 0
13782 -8675 -8684 -8690 0
c ((1<=(aux882 + aux885 + aux886))=tv=SATLiteral(13783))
-13783 -8675 -8684 -8689 0
13783 8689 0
13783 8684 0
13783 8685 0
13783 8687 0
13783 8675 0
13783 8675 8684 0
13783 8675 8685 0
13783 8675 8687 0
13783 8676 0
13783 8676 8684 0
13783 8676 8685 0
13783 8676 8687 0
c (((aux888 + aux891 + aux892)<=1)=tv=SATLiteral(13784))
-13784 8714 0
-13784 8708 8713 0
-13784 8709 0
-13784 8711 0
-13784 8699 8713 0
-13784 8699 8708 0
-13784 8699 8709 0
-13784 8699 8711 0
-13784 8700 0
-13784 8700 8708 0
-13784 8700 8709 0
-13784 8700 8711 0
13784 -8700 -8708 -8713 0
13784 -8699 -8709 -8713 0
13784 -8699 -8708 -8714 0
c ((1<=(aux888 + aux891 + aux892))=tv=SATLiteral(13785))
-13785 -8699 -8708 -8713 0
13785 8713 0
13785 8708 0
13785 8709 0
13785 8711 0
13785 8699 0
13785 8699 8708 0
13785 8699 8709 0
13785 8699 8711 0
13785 8700 0
13785 8700 8708 0
13785 8700 8709 0
13785 8700 8711 0
c (((aux894 + aux897 + aux898)<=1)=tv=SATLiteral(13786))
-13786 8738 0
-13786 8732 8737 0
-13786 8733 0
-13786 8735 0
-13786 8723 8737 0
-13786 8723 8732 0
-13786 8723 8733 0
-13786 8723 8735 0
-13786 8724 0
-13786 8724 8732 0
-13786 8724 8733 0
-13786 8724 8735 0
13786 -8724 -8732 -8737 0
13786 -8723 -8733 -8737 0
13786 -8723 -8732 -8738 0
c ((1<=(aux894 + aux897 + aux898))=tv=SATLiteral(13787))
-13787 -8723 -8732 -8737 0
13787 8737 0
13787 8732 0
13787 8733 0
13787 8735 0
13787 8723 0
13787 8723 8732 0
13787 8723 8733 0
13787 8723 8735 0
13787 8724 0
13787 8724 8732 0
13787 8724 8733 0
13787 8724 8735 0
c (((aux900 + aux903 + aux904)<=1)=tv=SATLiteral(13788))
-13788 8762 0
-13788 8756 8761 0
-13788 8757 0
-13788 8759 0
-13788 8747 8761 0
-13788 8747 8756 0
-13788 8747 8757 0
-13788 8747 8759 0
-13788 8748 0
-13788 8748 8756 0
-13788 8748 8757 0
-13788 8748 8759 0
13788 -8748 -8756 -8761 0
13788 -8747 -8757 -8761 0
13788 -8747 -8756 -8762 0
c ((1<=(aux900 + aux903 + aux904))=tv=SATLiteral(13789))
-13789 -8747 -8756 -8761 0
13789 8761 0
13789 8756 0
13789 8757 0
13789 8759 0
13789 8747 0
13789 8747 8756 0
13789 8747 8757 0
13789 8747 8759 0
13789 8748 0
13789 8748 8756 0
13789 8748 8757 0
13789 8748 8759 0
c (((aux906 + aux909 + aux910)<=1)=tv=SATLiteral(13790))
-13790 8786 0
-13790 8780 8785 0
-13790 8781 0
-13790 8783 0
-13790 8771 8785 0
-13790 8771 8780 0
-13790 8771 8781 0
-13790 8771 8783 0
-13790 8772 0
-13790 8772 8780 0
-13790 8772 8781 0
-13790 8772 8783 0
13790 -8772 -8780 -8785 0
13790 -8771 -8781 -8785 0
13790 -8771 -8780 -8786 0
c ((1<=(aux906 + aux909 + aux910))=tv=SATLiteral(13791))
-13791 -8771 -8780 -8785 0
13791 8785 0
13791 8780 0
13791 8781 0
13791 8783 0
13791 8771 0
13791 8771 8780 0
13791 8771 8781 0
13791 8771 8783 0
13791 8772 0
13791 8772 8780 0
13791 8772 8781 0
13791 8772 8783 0
c (((aux912 + aux915 + aux916)<=1)=tv=SATLiteral(13792))
-13792 8810 0
-13792 8804 8809 0
-13792 8805 0
-13792 8807 0
-13792 8795 8809 0
-13792 8795 8804 0
-13792 8795 8805 0
-13792 8795 8807 0
-13792 8796 0
-13792 8796 8804 0
-13792 8796 8805 0
-13792 8796 8807 0
13792 -8796 -8804 -8809 0
13792 -8795 -8805 -8809 0
13792 -8795 -8804 -8810 0
c ((1<=(aux912 + aux915 + aux916))=tv=SATLiteral(13793))
-13793 -8795 -8804 -8809 0
13793 8809 0
13793 8804 0
13793 8805 0
13793 8807 0
13793 8795 0
13793 8795 8804 0
13793 8795 8805 0
13793 8795 8807 0
13793 8796 0
13793 8796 8804 0
13793 8796 8805 0
13793 8796 8807 0
c (((aux918 + aux921 + aux922)<=1)=tv=SATLiteral(13794))
-13794 8834 0
-13794 8828 8833 0
-13794 8829 0
-13794 8831 0
-13794 8819 8833 0
-13794 8819 8828 0
-13794 8819 8829 0
-13794 8819 8831 0
-13794 8820 0
-13794 8820 8828 0
-13794 8820 8829 0
-13794 8820 8831 0
13794 -8820 -8828 -8833 0
13794 -8819 -8829 -8833 0
13794 -8819 -8828 -8834 0
c ((1<=(aux918 + aux921 + aux922))=tv=SATLiteral(13795))
-13795 -8819 -8828 -8833 0
13795 8833 0
13795 8828 0
13795 8829 0
13795 8831 0
13795 8819 0
13795 8819 8828 0
13795 8819 8829 0
13795 8819 8831 0
13795 8820 0
13795 8820 8828 0
13795 8820 8829 0
13795 8820 8831 0
c (((aux924 + aux927 + aux928)<=1)=tv=SATLiteral(13796))
-13796 8858 0
-13796 8852 8857 0
-13796 8853 0
-13796 8855 0
-13796 8843 8857 0
-13796 8843 8852 0
-13796 8843 8853 0
-13796 8843 8855 0
-13796 8844 0
-13796 8844 8852 0
-13796 8844 8853 0
-13796 8844 8855 0
13796 -8844 -8852 -8857 0
13796 -8843 -8853 -8857 0
13796 -8843 -8852 -8858 0
c ((1<=(aux924 + aux927 + aux928))=tv=SATLiteral(13797))
-13797 -8843 -8852 -8857 0
13797 8857 0
13797 8852 0
13797 8853 0
13797 8855 0
13797 8843 0
13797 8843 8852 0
13797 8843 8853 0
13797 8843 8855 0
13797 8844 0
13797 8844 8852 0
13797 8844 8853 0
13797 8844 8855 0
c (((aux930 + aux933 + aux934)<=1)=tv=SATLiteral(13798))
-13798 8882 0
-13798 8876 8881 0
-13798 8877 0
-13798 8879 0
-13798 8867 8881 0
-13798 8867 8876 0
-13798 8867 8877 0
-13798 8867 8879 0
-13798 8868 0
-13798 8868 8876 0
-13798 8868 8877 0
-13798 8868 8879 0
13798 -8868 -8876 -8881 0
13798 -8867 -8877 -8881 0
13798 -8867 -8876 -8882 0
c ((1<=(aux930 + aux933 + aux934))=tv=SATLiteral(13799))
-13799 -8867 -8876 -8881 0
13799 8881 0
13799 8876 0
13799 8877 0
13799 8879 0
13799 8867 0
13799 8867 8876 0
13799 8867 8877 0
13799 8867 8879 0
13799 8868 0
13799 8868 8876 0
13799 8868 8877 0
13799 8868 8879 0
c (((aux936 + aux939 + aux940)<=1)=tv=SATLiteral(13800))
-13800 8906 0
-13800 8900 8905 0
-13800 8901 0
-13800 8903 0
-13800 8891 8905 0
-13800 8891 8900 0
-13800 8891 8901 0
-13800 8891 8903 0
-13800 8892 0
-13800 8892 8900 0
-13800 8892 8901 0
-13800 8892 8903 0
13800 -8892 -8900 -8905 0
13800 -8891 -8901 -8905 0
13800 -8891 -8900 -8906 0
c ((1<=(aux936 + aux939 + aux940))=tv=SATLiteral(13801))
-13801 -8891 -8900 -8905 0
13801 8905 0
13801 8900 0
13801 8901 0
13801 8903 0
13801 8891 0
13801 8891 8900 0
13801 8891 8901 0
13801 8891 8903 0
13801 8892 0
13801 8892 8900 0
13801 8892 8901 0
13801 8892 8903 0
c (((aux942 + aux945 + aux946)<=1)=tv=SATLiteral(13802))
-13802 8930 0
-13802 8924 8929 0
-13802 8925 0
-13802 8927 0
-13802 8915 8929 0
-13802 8915 8924 0
-13802 8915 8925 0
-13802 8915 8927 0
-13802 8916 0
-13802 8916 8924 0
-13802 8916 8925 0
-13802 8916 8927 0
13802 -8916 -8924 -8929 0
13802 -8915 -8925 -8929 0
13802 -8915 -8924 -8930 0
c ((1<=(aux942 + aux945 + aux946))=tv=SATLiteral(13803))
-13803 -8915 -8924 -8929 0
13803 8929 0
13803 8924 0
13803 8925 0
13803 8927 0
13803 8915 0
13803 8915 8924 0
13803 8915 8925 0
13803 8915 8927 0
13803 8916 0
13803 8916 8924 0
13803 8916 8925 0
13803 8916 8927 0
c (((aux948 + aux951 + aux952)<=1)=tv=SATLiteral(13804))
-13804 8954 0
-13804 8948 8953 0
-13804 8949 0
-13804 8951 0
-13804 8939 8953 0
-13804 8939 8948 0
-13804 8939 8949 0
-13804 8939 8951 0
-13804 8940 0
-13804 8940 8948 0
-13804 8940 8949 0
-13804 8940 8951 0
13804 -8940 -8948 -8953 0
13804 -8939 -8949 -8953 0
13804 -8939 -8948 -8954 0
c ((1<=(aux948 + aux951 + aux952))=tv=SATLiteral(13805))
-13805 -8939 -8948 -8953 0
13805 8953 0
13805 8948 0
13805 8949 0
13805 8951 0
13805 8939 0
13805 8939 8948 0
13805 8939 8949 0
13805 8939 8951 0
13805 8940 0
13805 8940 8948 0
13805 8940 8949 0
13805 8940 8951 0
c (((aux954 + aux957 + aux958)<=1)=tv=SATLiteral(13806))
-13806 8978 0
-13806 8972 8977 0
-13806 8973 0
-13806 8975 0
-13806 8963 8977 0
-13806 8963 8972 0
-13806 8963 8973 0
-13806 8963 8975 0
-13806 8964 0
-13806 8964 8972 0
-13806 8964 8973 0
-13806 8964 8975 0
13806 -8964 -8972 -8977 0
13806 -8963 -8973 -8977 0
13806 -8963 -8972 -8978 0
c ((1<=(aux954 + aux957 + aux958))=tv=SATLiteral(13807))
-13807 -8963 -8972 -8977 0
13807 8977 0
13807 8972 0
13807 8973 0
13807 8975 0
13807 8963 0
13807 8963 8972 0
13807 8963 8973 0
13807 8963 8975 0
13807 8964 0
13807 8964 8972 0
13807 8964 8973 0
13807 8964 8975 0
c (((aux960 + aux963 + aux964)<=1)=tv=SATLiteral(13808))
-13808 9002 0
-13808 8996 9001 0
-13808 8997 0
-13808 8999 0
-13808 8987 9001 0
-13808 8987 8996 0
-13808 8987 8997 0
-13808 8987 8999 0
-13808 8988 0
-13808 8988 8996 0
-13808 8988 8997 0
-13808 8988 8999 0
13808 -8988 -8996 -9001 0
13808 -8987 -8997 -9001 0
13808 -8987 -8996 -9002 0
c ((1<=(aux960 + aux963 + aux964))=tv=SATLiteral(13809))
-13809 -8987 -8996 -9001 0
13809 9001 0
13809 8996 0
13809 8997 0
13809 8999 0
13809 8987 0
13809 8987 8996 0
13809 8987 8997 0
13809 8987 8999 0
13809 8988 0
13809 8988 8996 0
13809 8988 8997 0
13809 8988 8999 0
c (((aux966 + aux969 + aux970)<=1)=tv=SATLiteral(13810))
-13810 9026 0
-13810 9020 9025 0
-13810 9021 0
-13810 9023 0
-13810 9011 9025 0
-13810 9011 9020 0
-13810 9011 9021 0
-13810 9011 9023 0
-13810 9012 0
-13810 9012 9020 0
-13810 9012 9021 0
-13810 9012 9023 0
13810 -9012 -9020 -9025 0
13810 -9011 -9021 -9025 0
13810 -9011 -9020 -9026 0
c ((1<=(aux966 + aux969 + aux970))=tv=SATLiteral(13811))
-13811 -9011 -9020 -9025 0
13811 9025 0
13811 9020 0
13811 9021 0
13811 9023 0
13811 9011 0
13811 9011 9020 0
13811 9011 9021 0
13811 9011 9023 0
13811 9012 0
13811 9012 9020 0
13811 9012 9021 0
13811 9012 9023 0
c (((aux972 + aux975 + aux976)<=1)=tv=SATLiteral(13812))
-13812 9050 0
-13812 9044 9049 0
-13812 9045 0
-13812 9047 0
-13812 9035 9049 0
-13812 9035 9044 0
-13812 9035 9045 0
-13812 9035 9047 0
-13812 9036 0
-13812 9036 9044 0
-13812 9036 9045 0
-13812 9036 9047 0
13812 -9036 -9044 -9049 0
13812 -9035 -9045 -9049 0
13812 -9035 -9044 -9050 0
c ((1<=(aux972 + aux975 + aux976))=tv=SATLiteral(13813))
-13813 -9035 -9044 -9049 0
13813 9049 0
13813 9044 0
13813 9045 0
13813 9047 0
13813 9035 0
13813 9035 9044 0
13813 9035 9045 0
13813 9035 9047 0
13813 9036 0
13813 9036 9044 0
13813 9036 9045 0
13813 9036 9047 0
c (((aux978 + aux981 + aux982)<=1)=tv=SATLiteral(13814))
-13814 9074 0
-13814 9068 9073 0
-13814 9069 0
-13814 9071 0
-13814 9059 9073 0
-13814 9059 9068 0
-13814 9059 9069 0
-13814 9059 9071 0
-13814 9060 0
-13814 9060 9068 0
-13814 9060 9069 0
-13814 9060 9071 0
13814 -9060 -9068 -9073 0
13814 -9059 -9069 -9073 0
13814 -9059 -9068 -9074 0
c ((1<=(aux978 + aux981 + aux982))=tv=SATLiteral(13815))
-13815 -9059 -9068 -9073 0
13815 9073 0
13815 9068 0
13815 9069 0
13815 9071 0
13815 9059 0
13815 9059 9068 0
13815 9059 9069 0
13815 9059 9071 0
13815 9060 0
13815 9060 9068 0
13815 9060 9069 0
13815 9060 9071 0
c (((aux984 + aux987 + aux988)<=1)=tv=SATLiteral(13816))
-13816 9098 0
-13816 9092 9097 0
-13816 9093 0
-13816 9095 0
-13816 9083 9097 0
-13816 9083 9092 0
-13816 9083 9093 0
-13816 9083 9095 0
-13816 9084 0
-13816 9084 9092 0
-13816 9084 9093 0
-13816 9084 9095 0
13816 -9084 -9092 -9097 0
13816 -9083 -9093 -9097 0
13816 -9083 -9092 -9098 0
c ((1<=(aux984 + aux987 + aux988))=tv=SATLiteral(13817))
-13817 -9083 -9092 -9097 0
13817 9097 0
13817 9092 0
13817 9093 0
13817 9095 0
13817 9083 0
13817 9083 9092 0
13817 9083 9093 0
13817 9083 9095 0
13817 9084 0
13817 9084 9092 0
13817 9084 9093 0
13817 9084 9095 0
c (((aux990 + aux993 + aux994)<=1)=tv=SATLiteral(13818))
-13818 9122 0
-13818 9116 9121 0
-13818 9117 0
-13818 9119 0
-13818 9107 9121 0
-13818 9107 9116 0
-13818 9107 9117 0
-13818 9107 9119 0
-13818 9108 0
-13818 9108 9116 0
-13818 9108 9117 0
-13818 9108 9119 0
13818 -9108 -9116 -9121 0
13818 -9107 -9117 -9121 0
13818 -9107 -9116 -9122 0
c ((1<=(aux990 + aux993 + aux994))=tv=SATLiteral(13819))
-13819 -9107 -9116 -9121 0
13819 9121 0
13819 9116 0
13819 9117 0
13819 9119 0
13819 9107 0
13819 9107 9116 0
13819 9107 9117 0
13819 9107 9119 0
13819 9108 0
13819 9108 9116 0
13819 9108 9117 0
13819 9108 9119 0
c (((aux996 + aux999 + aux1000)<=1)=tv=SATLiteral(13820))
-13820 9146 0
-13820 9140 9145 0
-13820 9141 0
-13820 9143 0
-13820 9131 9145 0
-13820 9131 9140 0
-13820 9131 9141 0
-13820 9131 9143 0
-13820 9132 0
-13820 9132 9140 0
-13820 9132 9141 0
-13820 9132 9143 0
13820 -9132 -9140 -9145 0
13820 -9131 -9141 -9145 0
13820 -9131 -9140 -9146 0
c ((1<=(aux996 + aux999 + aux1000))=tv=SATLiteral(13821))
-13821 -9131 -9140 -9145 0
13821 9145 0
13821 9140 0
13821 9141 0
13821 9143 0
13821 9131 0
13821 9131 9140 0
13821 9131 9141 0
13821 9131 9143 0
13821 9132 0
13821 9132 9140 0
13821 9132 9141 0
13821 9132 9143 0
c (((aux1002 + aux1005 + aux1006)<=1)=tv=SATLiteral(13822))
-13822 9170 0
-13822 9164 9169 0
-13822 9165 0
-13822 9167 0
-13822 9155 9169 0
-13822 9155 9164 0
-13822 9155 9165 0
-13822 9155 9167 0
-13822 9156 0
-13822 9156 9164 0
-13822 9156 9165 0
-13822 9156 9167 0
13822 -9156 -9164 -9169 0
13822 -9155 -9165 -9169 0
13822 -9155 -9164 -9170 0
c ((1<=(aux1002 + aux1005 + aux1006))=tv=SATLiteral(13823))
-13823 -9155 -9164 -9169 0
13823 9169 0
13823 9164 0
13823 9165 0
13823 9167 0
13823 9155 0
13823 9155 9164 0
13823 9155 9165 0
13823 9155 9167 0
13823 9156 0
13823 9156 9164 0
13823 9156 9165 0
13823 9156 9167 0
c (((aux1008 + aux1011 + aux1012)<=1)=tv=SATLiteral(13824))
-13824 9194 0
-13824 9188 9193 0
-13824 9189 0
-13824 9191 0
-13824 9179 9193 0
-13824 9179 9188 0
-13824 9179 9189 0
-13824 9179 9191 0
-13824 9180 0
-13824 9180 9188 0
-13824 9180 9189 0
-13824 9180 9191 0
13824 -9180 -9188 -9193 0
13824 -9179 -9189 -9193 0
13824 -9179 -9188 -9194 0
c ((1<=(aux1008 + aux1011 + aux1012))=tv=SATLiteral(13825))
-13825 -9179 -9188 -9193 0
13825 9193 0
13825 9188 0
13825 9189 0
13825 9191 0
13825 9179 0
13825 9179 9188 0
13825 9179 9189 0
13825 9179 9191 0
13825 9180 0
13825 9180 9188 0
13825 9180 9189 0
13825 9180 9191 0
c (((aux1014 + aux1017 + aux1018)<=1)=tv=SATLiteral(13826))
-13826 9218 0
-13826 9212 9217 0
-13826 9213 0
-13826 9215 0
-13826 9203 9217 0
-13826 9203 9212 0
-13826 9203 9213 0
-13826 9203 9215 0
-13826 9204 0
-13826 9204 9212 0
-13826 9204 9213 0
-13826 9204 9215 0
13826 -9204 -9212 -9217 0
13826 -9203 -9213 -9217 0
13826 -9203 -9212 -9218 0
c ((1<=(aux1014 + aux1017 + aux1018))=tv=SATLiteral(13827))
-13827 -9203 -9212 -9217 0
13827 9217 0
13827 9212 0
13827 9213 0
13827 9215 0
13827 9203 0
13827 9203 9212 0
13827 9203 9213 0
13827 9203 9215 0
13827 9204 0
13827 9204 9212 0
13827 9204 9213 0
13827 9204 9215 0
c (((aux1020 + aux1023 + aux1024)<=1)=tv=SATLiteral(13828))
-13828 9242 0
-13828 9236 9241 0
-13828 9237 0
-13828 9239 0
-13828 9227 9241 0
-13828 9227 9236 0
-13828 9227 9237 0
-13828 9227 9239 0
-13828 9228 0
-13828 9228 9236 0
-13828 9228 9237 0
-13828 9228 9239 0
13828 -9228 -9236 -9241 0
13828 -9227 -9237 -9241 0
13828 -9227 -9236 -9242 0
c ((1<=(aux1020 + aux1023 + aux1024))=tv=SATLiteral(13829))
-13829 -9227 -9236 -9241 0
13829 9241 0
13829 9236 0
13829 9237 0
13829 9239 0
13829 9227 0
13829 9227 9236 0
13829 9227 9237 0
13829 9227 9239 0
13829 9228 0
13829 9228 9236 0
13829 9228 9237 0
13829 9228 9239 0
c (((aux1026 + aux1029 + aux1030)<=1)=tv=SATLiteral(13830))
-13830 9266 0
-13830 9260 9265 0
-13830 9261 0
-13830 9263 0
-13830 9251 9265 0
-13830 9251 9260 0
-13830 9251 9261 0
-13830 9251 9263 0
-13830 9252 0
-13830 9252 9260 0
-13830 9252 9261 0
-13830 9252 9263 0
13830 -9252 -9260 -9265 0
13830 -9251 -9261 -9265 0
13830 -9251 -9260 -9266 0
c ((1<=(aux1026 + aux1029 + aux1030))=tv=SATLiteral(13831))
-13831 -9251 -9260 -9265 0
13831 9265 0
13831 9260 0
13831 9261 0
13831 9263 0
13831 9251 0
13831 9251 9260 0
13831 9251 9261 0
13831 9251 9263 0
13831 9252 0
13831 9252 9260 0
13831 9252 9261 0
13831 9252 9263 0
c (((aux1032 + aux1035 + aux1036)<=1)=tv=SATLiteral(13832))
-13832 9290 0
-13832 9284 9289 0
-13832 9285 0
-13832 9287 0
-13832 9275 9289 0
-13832 9275 9284 0
-13832 9275 9285 0
-13832 9275 9287 0
-13832 9276 0
-13832 9276 9284 0
-13832 9276 9285 0
-13832 9276 9287 0
13832 -9276 -9284 -9289 0
13832 -9275 -9285 -9289 0
13832 -9275 -9284 -9290 0
c ((1<=(aux1032 + aux1035 + aux1036))=tv=SATLiteral(13833))
-13833 -9275 -9284 -9289 0
13833 9289 0
13833 9284 0
13833 9285 0
13833 9287 0
13833 9275 0
13833 9275 9284 0
13833 9275 9285 0
13833 9275 9287 0
13833 9276 0
13833 9276 9284 0
13833 9276 9285 0
13833 9276 9287 0
c (((aux1038 + aux1041 + aux1042)<=1)=tv=SATLiteral(13834))
-13834 9314 0
-13834 9308 9313 0
-13834 9309 0
-13834 9311 0
-13834 9299 9313 0
-13834 9299 9308 0
-13834 9299 9309 0
-13834 9299 9311 0
-13834 9300 0
-13834 9300 9308 0
-13834 9300 9309 0
-13834 9300 9311 0
13834 -9300 -9308 -9313 0
13834 -9299 -9309 -9313 0
13834 -9299 -9308 -9314 0
c ((1<=(aux1038 + aux1041 + aux1042))=tv=SATLiteral(13835))
-13835 -9299 -9308 -9313 0
13835 9313 0
13835 9308 0
13835 9309 0
13835 9311 0
13835 9299 0
13835 9299 9308 0
13835 9299 9309 0
13835 9299 9311 0
13835 9300 0
13835 9300 9308 0
13835 9300 9309 0
13835 9300 9311 0
c (((aux1044 + aux1047 + aux1048)<=1)=tv=SATLiteral(13836))
-13836 9338 0
-13836 9332 9337 0
-13836 9333 0
-13836 9335 0
-13836 9323 9337 0
-13836 9323 9332 0
-13836 9323 9333 0
-13836 9323 9335 0
-13836 9324 0
-13836 9324 9332 0
-13836 9324 9333 0
-13836 9324 9335 0
13836 -9324 -9332 -9337 0
13836 -9323 -9333 -9337 0
13836 -9323 -9332 -9338 0
c ((1<=(aux1044 + aux1047 + aux1048))=tv=SATLiteral(13837))
-13837 -9323 -9332 -9337 0
13837 9337 0
13837 9332 0
13837 9333 0
13837 9335 0
13837 9323 0
13837 9323 9332 0
13837 9323 9333 0
13837 9323 9335 0
13837 9324 0
13837 9324 9332 0
13837 9324 9333 0
13837 9324 9335 0
c (((aux1050 + aux1053 + aux1054)<=1)=tv=SATLiteral(13838))
-13838 9362 0
-13838 9356 9361 0
-13838 9357 0
-13838 9359 0
-13838 9347 9361 0
-13838 9347 9356 0
-13838 9347 9357 0
-13838 9347 9359 0
-13838 9348 0
-13838 9348 9356 0
-13838 9348 9357 0
-13838 9348 9359 0
13838 -9348 -9356 -9361 0
13838 -9347 -9357 -9361 0
13838 -9347 -9356 -9362 0
c ((1<=(aux1050 + aux1053 + aux1054))=tv=SATLiteral(13839))
-13839 -9347 -9356 -9361 0
13839 9361 0
13839 9356 0
13839 9357 0
13839 9359 0
13839 9347 0
13839 9347 9356 0
13839 9347 9357 0
13839 9347 9359 0
13839 9348 0
13839 9348 9356 0
13839 9348 9357 0
13839 9348 9359 0
c (((aux1056 + aux1059 + aux1060)<=1)=tv=SATLiteral(13840))
-13840 9386 0
-13840 9380 9385 0
-13840 9381 0
-13840 9383 0
-13840 9371 9385 0
-13840 9371 9380 0
-13840 9371 9381 0
-13840 9371 9383 0
-13840 9372 0
-13840 9372 9380 0
-13840 9372 9381 0
-13840 9372 9383 0
13840 -9372 -9380 -9385 0
13840 -9371 -9381 -9385 0
13840 -9371 -9380 -9386 0
c ((1<=(aux1056 + aux1059 + aux1060))=tv=SATLiteral(13841))
-13841 -9371 -9380 -9385 0
13841 9385 0
13841 9380 0
13841 9381 0
13841 9383 0
13841 9371 0
13841 9371 9380 0
13841 9371 9381 0
13841 9371 9383 0
13841 9372 0
13841 9372 9380 0
13841 9372 9381 0
13841 9372 9383 0
c (((aux1062 + aux1065 + aux1066)<=1)=tv=SATLiteral(13842))
-13842 9410 0
-13842 9404 9409 0
-13842 9405 0
-13842 9407 0
-13842 9395 9409 0
-13842 9395 9404 0
-13842 9395 9405 0
-13842 9395 9407 0
-13842 9396 0
-13842 9396 9404 0
-13842 9396 9405 0
-13842 9396 9407 0
13842 -9396 -9404 -9409 0
13842 -9395 -9405 -9409 0
13842 -9395 -9404 -9410 0
c ((1<=(aux1062 + aux1065 + aux1066))=tv=SATLiteral(13843))
-13843 -9395 -9404 -9409 0
13843 9409 0
13843 9404 0
13843 9405 0
13843 9407 0
13843 9395 0
13843 9395 9404 0
13843 9395 9405 0
13843 9395 9407 0
13843 9396 0
13843 9396 9404 0
13843 9396 9405 0
13843 9396 9407 0
c (((aux1068 + aux1071 + aux1072)<=1)=tv=SATLiteral(13844))
-13844 9434 0
-13844 9428 9433 0
-13844 9429 0
-13844 9431 0
-13844 9419 9433 0
-13844 9419 9428 0
-13844 9419 9429 0
-13844 9419 9431 0
-13844 9420 0
-13844 9420 9428 0
-13844 9420 9429 0
-13844 9420 9431 0
13844 -9420 -9428 -9433 0
13844 -9419 -9429 -9433 0
13844 -9419 -9428 -9434 0
c ((1<=(aux1068 + aux1071 + aux1072))=tv=SATLiteral(13845))
-13845 -9419 -9428 -9433 0
13845 9433 0
13845 9428 0
13845 9429 0
13845 9431 0
13845 9419 0
13845 9419 9428 0
13845 9419 9429 0
13845 9419 9431 0
13845 9420 0
13845 9420 9428 0
13845 9420 9429 0
13845 9420 9431 0
c (((aux1074 + aux1077 + aux1078)<=1)=tv=SATLiteral(13846))
-13846 9458 0
-13846 9452 9457 0
-13846 9453 0
-13846 9455 0
-13846 9443 9457 0
-13846 9443 9452 0
-13846 9443 9453 0
-13846 9443 9455 0
-13846 9444 0
-13846 9444 9452 0
-13846 9444 9453 0
-13846 9444 9455 0
13846 -9444 -9452 -9457 0
13846 -9443 -9453 -9457 0
13846 -9443 -9452 -9458 0
c ((1<=(aux1074 + aux1077 + aux1078))=tv=SATLiteral(13847))
-13847 -9443 -9452 -9457 0
13847 9457 0
13847 9452 0
13847 9453 0
13847 9455 0
13847 9443 0
13847 9443 9452 0
13847 9443 9453 0
13847 9443 9455 0
13847 9444 0
13847 9444 9452 0
13847 9444 9453 0
13847 9444 9455 0
c (((aux1080 + aux1083 + aux1084)<=1)=tv=SATLiteral(13848))
-13848 9482 0
-13848 9476 9481 0
-13848 9477 0
-13848 9479 0
-13848 9467 9481 0
-13848 9467 9476 0
-13848 9467 9477 0
-13848 9467 9479 0
-13848 9468 0
-13848 9468 9476 0
-13848 9468 9477 0
-13848 9468 9479 0
13848 -9468 -9476 -9481 0
13848 -9467 -9477 -9481 0
13848 -9467 -9476 -9482 0
c ((1<=(aux1080 + aux1083 + aux1084))=tv=SATLiteral(13849))
-13849 -9467 -9476 -9481 0
13849 9481 0
13849 9476 0
13849 9477 0
13849 9479 0
13849 9467 0
13849 9467 9476 0
13849 9467 9477 0
13849 9467 9479 0
13849 9468 0
13849 9468 9476 0
13849 9468 9477 0
13849 9468 9479 0
c (((aux1086 + aux1089 + aux1090)<=1)=tv=SATLiteral(13850))
-13850 9506 0
-13850 9500 9505 0
-13850 9501 0
-13850 9503 0
-13850 9491 9505 0
-13850 9491 9500 0
-13850 9491 9501 0
-13850 9491 9503 0
-13850 9492 0
-13850 9492 9500 0
-13850 9492 9501 0
-13850 9492 9503 0
13850 -9492 -9500 -9505 0
13850 -9491 -9501 -9505 0
13850 -9491 -9500 -9506 0
c ((1<=(aux1086 + aux1089 + aux1090))=tv=SATLiteral(13851))
-13851 -9491 -9500 -9505 0
13851 9505 0
13851 9500 0
13851 9501 0
13851 9503 0
13851 9491 0
13851 9491 9500 0
13851 9491 9501 0
13851 9491 9503 0
13851 9492 0
13851 9492 9500 0
13851 9492 9501 0
13851 9492 9503 0
c (((aux1092 + aux1095 + aux1096)<=1)=tv=SATLiteral(13852))
-13852 9530 0
-13852 9524 9529 0
-13852 9525 0
-13852 9527 0
-13852 9515 9529 0
-13852 9515 9524 0
-13852 9515 9525 0
-13852 9515 9527 0
-13852 9516 0
-13852 9516 9524 0
-13852 9516 9525 0
-13852 9516 9527 0
13852 -9516 -9524 -9529 0
13852 -9515 -9525 -9529 0
13852 -9515 -9524 -9530 0
c ((1<=(aux1092 + aux1095 + aux1096))=tv=SATLiteral(13853))
-13853 -9515 -9524 -9529 0
13853 9529 0
13853 9524 0
13853 9525 0
13853 9527 0
13853 9515 0
13853 9515 9524 0
13853 9515 9525 0
13853 9515 9527 0
13853 9516 0
13853 9516 9524 0
13853 9516 9525 0
13853 9516 9527 0
c (((aux1098 + aux1101 + aux1102)<=1)=tv=SATLiteral(13854))
-13854 9554 0
-13854 9548 9553 0
-13854 9549 0
-13854 9551 0
-13854 9539 9553 0
-13854 9539 9548 0
-13854 9539 9549 0
-13854 9539 9551 0
-13854 9540 0
-13854 9540 9548 0
-13854 9540 9549 0
-13854 9540 9551 0
13854 -9540 -9548 -9553 0
13854 -9539 -9549 -9553 0
13854 -9539 -9548 -9554 0
c ((1<=(aux1098 + aux1101 + aux1102))=tv=SATLiteral(13855))
-13855 -9539 -9548 -9553 0
13855 9553 0
13855 9548 0
13855 9549 0
13855 9551 0
13855 9539 0
13855 9539 9548 0
13855 9539 9549 0
13855 9539 9551 0
13855 9540 0
13855 9540 9548 0
13855 9540 9549 0
13855 9540 9551 0
c (((aux1104 + aux1107 + aux1108)<=1)=tv=SATLiteral(13856))
-13856 9578 0
-13856 9572 9577 0
-13856 9573 0
-13856 9575 0
-13856 9563 9577 0
-13856 9563 9572 0
-13856 9563 9573 0
-13856 9563 9575 0
-13856 9564 0
-13856 9564 9572 0
-13856 9564 9573 0
-13856 9564 9575 0
13856 -9564 -9572 -9577 0
13856 -9563 -9573 -9577 0
13856 -9563 -9572 -9578 0
c ((1<=(aux1104 + aux1107 + aux1108))=tv=SATLiteral(13857))
-13857 -9563 -9572 -9577 0
13857 9577 0
13857 9572 0
13857 9573 0
13857 9575 0
13857 9563 0
13857 9563 9572 0
13857 9563 9573 0
13857 9563 9575 0
13857 9564 0
13857 9564 9572 0
13857 9564 9573 0
13857 9564 9575 0
c (((aux1110 + aux1113 + aux1114)<=1)=tv=SATLiteral(13858))
-13858 9602 0
-13858 9596 9601 0
-13858 9597 0
-13858 9599 0
-13858 9587 9601 0
-13858 9587 9596 0
-13858 9587 9597 0
-13858 9587 9599 0
-13858 9588 0
-13858 9588 9596 0
-13858 9588 9597 0
-13858 9588 9599 0
13858 -9588 -9596 -9601 0
13858 -9587 -9597 -9601 0
13858 -9587 -9596 -9602 0
c ((1<=(aux1110 + aux1113 + aux1114))=tv=SATLiteral(13859))
-13859 -9587 -9596 -9601 0
13859 9601 0
13859 9596 0
13859 9597 0
13859 9599 0
13859 9587 0
13859 9587 9596 0
13859 9587 9597 0
13859 9587 9599 0
13859 9588 0
13859 9588 9596 0
13859 9588 9597 0
13859 9588 9599 0
c (((aux1116 + aux1119 + aux1120)<=1)=tv=SATLiteral(13860))
-13860 9626 0
-13860 9620 9625 0
-13860 9621 0
-13860 9623 0
-13860 9611 9625 0
-13860 9611 9620 0
-13860 9611 9621 0
-13860 9611 9623 0
-13860 9612 0
-13860 9612 9620 0
-13860 9612 9621 0
-13860 9612 9623 0
13860 -9612 -9620 -9625 0
13860 -9611 -9621 -9625 0
13860 -9611 -9620 -9626 0
c ((1<=(aux1116 + aux1119 + aux1120))=tv=SATLiteral(13861))
-13861 -9611 -9620 -9625 0
13861 9625 0
13861 9620 0
13861 9621 0
13861 9623 0
13861 9611 0
13861 9611 9620 0
13861 9611 9621 0
13861 9611 9623 0
13861 9612 0
13861 9612 9620 0
13861 9612 9621 0
13861 9612 9623 0
c (((aux1122 + aux1125 + aux1126)<=1)=tv=SATLiteral(13862))
-13862 9650 0
-13862 9644 9649 0
-13862 9645 0
-13862 9647 0
-13862 9635 9649 0
-13862 9635 9644 0
-13862 9635 9645 0
-13862 9635 9647 0
-13862 9636 0
-13862 9636 9644 0
-13862 9636 9645 0
-13862 9636 9647 0
13862 -9636 -9644 -9649 0
13862 -9635 -9645 -9649 0
13862 -9635 -9644 -9650 0
c ((1<=(aux1122 + aux1125 + aux1126))=tv=SATLiteral(13863))
-13863 -9635 -9644 -9649 0
13863 9649 0
13863 9644 0
13863 9645 0
13863 9647 0
13863 9635 0
13863 9635 9644 0
13863 9635 9645 0
13863 9635 9647 0
13863 9636 0
13863 9636 9644 0
13863 9636 9645 0
13863 9636 9647 0
c (((aux1128 + aux1131 + aux1132)<=1)=tv=SATLiteral(13864))
-13864 9674 0
-13864 9668 9673 0
-13864 9669 0
-13864 9671 0
-13864 9659 9673 0
-13864 9659 9668 0
-13864 9659 9669 0
-13864 9659 9671 0
-13864 9660 0
-13864 9660 9668 0
-13864 9660 9669 0
-13864 9660 9671 0
13864 -9660 -9668 -9673 0
13864 -9659 -9669 -9673 0
13864 -9659 -9668 -9674 0
c ((1<=(aux1128 + aux1131 + aux1132))=tv=SATLiteral(13865))
-13865 -9659 -9668 -9673 0
13865 9673 0
13865 9668 0
13865 9669 0
13865 9671 0
13865 9659 0
13865 9659 9668 0
13865 9659 9669 0
13865 9659 9671 0
13865 9660 0
13865 9660 9668 0
13865 9660 9669 0
13865 9660 9671 0
c (((aux1134 + aux1137 + aux1138)<=1)=tv=SATLiteral(13866))
-13866 9698 0
-13866 9692 9697 0
-13866 9693 0
-13866 9695 0
-13866 9683 9697 0
-13866 9683 9692 0
-13866 9683 9693 0
-13866 9683 9695 0
-13866 9684 0
-13866 9684 9692 0
-13866 9684 9693 0
-13866 9684 9695 0
13866 -9684 -9692 -9697 0
13866 -9683 -9693 -9697 0
13866 -9683 -9692 -9698 0
c ((1<=(aux1134 + aux1137 + aux1138))=tv=SATLiteral(13867))
-13867 -9683 -9692 -9697 0
13867 9697 0
13867 9692 0
13867 9693 0
13867 9695 0
13867 9683 0
13867 9683 9692 0
13867 9683 9693 0
13867 9683 9695 0
13867 9684 0
13867 9684 9692 0
13867 9684 9693 0
13867 9684 9695 0
c (((aux1140 + aux1143 + aux1144)<=1)=tv=SATLiteral(13868))
-13868 9722 0
-13868 9716 9721 0
-13868 9717 0
-13868 9719 0
-13868 9707 9721 0
-13868 9707 9716 0
-13868 9707 9717 0
-13868 9707 9719 0
-13868 9708 0
-13868 9708 9716 0
-13868 9708 9717 0
-13868 9708 9719 0
13868 -9708 -9716 -9721 0
13868 -9707 -9717 -9721 0
13868 -9707 -9716 -9722 0
c ((1<=(aux1140 + aux1143 + aux1144))=tv=SATLiteral(13869))
-13869 -9707 -9716 -9721 0
13869 9721 0
13869 9716 0
13869 9717 0
13869 9719 0
13869 9707 0
13869 9707 9716 0
13869 9707 9717 0
13869 9707 9719 0
13869 9708 0
13869 9708 9716 0
13869 9708 9717 0
13869 9708 9719 0
c (((aux1146 + aux1149 + aux1150)<=1)=tv=SATLiteral(13870))
-13870 9746 0
-13870 9740 9745 0
-13870 9741 0
-13870 9743 0
-13870 9731 9745 0
-13870 9731 9740 0
-13870 9731 9741 0
-13870 9731 9743 0
-13870 9732 0
-13870 9732 9740 0
-13870 9732 9741 0
-13870 9732 9743 0
13870 -9732 -9740 -9745 0
13870 -9731 -9741 -9745 0
13870 -9731 -9740 -9746 0
c ((1<=(aux1146 + aux1149 + aux1150))=tv=SATLiteral(13871))
-13871 -9731 -9740 -9745 0
13871 9745 0
13871 9740 0
13871 9741 0
13871 9743 0
13871 9731 0
13871 9731 9740 0
13871 9731 9741 0
13871 9731 9743 0
13871 9732 0
13871 9732 9740 0
13871 9732 9741 0
13871 9732 9743 0
c (((aux1152 + aux1155 + aux1156)<=1)=tv=SATLiteral(13872))
-13872 9770 0
-13872 9764 9769 0
-13872 9765 0
-13872 9767 0
-13872 9755 9769 0
-13872 9755 9764 0
-13872 9755 9765 0
-13872 9755 9767 0
-13872 9756 0
-13872 9756 9764 0
-13872 9756 9765 0
-13872 9756 9767 0
13872 -9756 -9764 -9769 0
13872 -9755 -9765 -9769 0
13872 -9755 -9764 -9770 0
c ((1<=(aux1152 + aux1155 + aux1156))=tv=SATLiteral(13873))
-13873 -9755 -9764 -9769 0
13873 9769 0
13873 9764 0
13873 9765 0
13873 9767 0
13873 9755 0
13873 9755 9764 0
13873 9755 9765 0
13873 9755 9767 0
13873 9756 0
13873 9756 9764 0
13873 9756 9765 0
13873 9756 9767 0
c (((aux1158 + aux1161 + aux1162)<=1)=tv=SATLiteral(13874))
-13874 9794 0
-13874 9788 9793 0
-13874 9789 0
-13874 9791 0
-13874 9779 9793 0
-13874 9779 9788 0
-13874 9779 9789 0
-13874 9779 9791 0
-13874 9780 0
-13874 9780 9788 0
-13874 9780 9789 0
-13874 9780 9791 0
13874 -9780 -9788 -9793 0
13874 -9779 -9789 -9793 0
13874 -9779 -9788 -9794 0
c ((1<=(aux1158 + aux1161 + aux1162))=tv=SATLiteral(13875))
-13875 -9779 -9788 -9793 0
13875 9793 0
13875 9788 0
13875 9789 0
13875 9791 0
13875 9779 0
13875 9779 9788 0
13875 9779 9789 0
13875 9779 9791 0
13875 9780 0
13875 9780 9788 0
13875 9780 9789 0
13875 9780 9791 0
c (((aux1164 + aux1167 + aux1168)<=1)=tv=SATLiteral(13876))
-13876 9818 0
-13876 9812 9817 0
-13876 9813 0
-13876 9815 0
-13876 9803 9817 0
-13876 9803 9812 0
-13876 9803 9813 0
-13876 9803 9815 0
-13876 9804 0
-13876 9804 9812 0
-13876 9804 9813 0
-13876 9804 9815 0
13876 -9804 -9812 -9817 0
13876 -9803 -9813 -9817 0
13876 -9803 -9812 -9818 0
c ((1<=(aux1164 + aux1167 + aux1168))=tv=SATLiteral(13877))
-13877 -9803 -9812 -9817 0
13877 9817 0
13877 9812 0
13877 9813 0
13877 9815 0
13877 9803 0
13877 9803 9812 0
13877 9803 9813 0
13877 9803 9815 0
13877 9804 0
13877 9804 9812 0
13877 9804 9813 0
13877 9804 9815 0
c (((aux1170 + aux1173 + aux1174)<=1)=tv=SATLiteral(13878))
-13878 9842 0
-13878 9836 9841 0
-13878 9837 0
-13878 9839 0
-13878 9827 9841 0
-13878 9827 9836 0
-13878 9827 9837 0
-13878 9827 9839 0
-13878 9828 0
-13878 9828 9836 0
-13878 9828 9837 0
-13878 9828 9839 0
13878 -9828 -9836 -9841 0
13878 -9827 -9837 -9841 0
13878 -9827 -9836 -9842 0
c ((1<=(aux1170 + aux1173 + aux1174))=tv=SATLiteral(13879))
-13879 -9827 -9836 -9841 0
13879 9841 0
13879 9836 0
13879 9837 0
13879 9839 0
13879 9827 0
13879 9827 9836 0
13879 9827 9837 0
13879 9827 9839 0
13879 9828 0
13879 9828 9836 0
13879 9828 9837 0
13879 9828 9839 0
c (((aux1176 + aux1179 + aux1180)<=1)=tv=SATLiteral(13880))
-13880 9866 0
-13880 9860 9865 0
-13880 9861 0
-13880 9863 0
-13880 9851 9865 0
-13880 9851 9860 0
-13880 9851 9861 0
-13880 9851 9863 0
-13880 9852 0
-13880 9852 9860 0
-13880 9852 9861 0
-13880 9852 9863 0
13880 -9852 -9860 -9865 0
13880 -9851 -9861 -9865 0
13880 -9851 -9860 -9866 0
c ((1<=(aux1176 + aux1179 + aux1180))=tv=SATLiteral(13881))
-13881 -9851 -9860 -9865 0
13881 9865 0
13881 9860 0
13881 9861 0
13881 9863 0
13881 9851 0
13881 9851 9860 0
13881 9851 9861 0
13881 9851 9863 0
13881 9852 0
13881 9852 9860 0
13881 9852 9861 0
13881 9852 9863 0
c (((aux1182 + aux1185 + aux1186)<=1)=tv=SATLiteral(13882))
-13882 9890 0
-13882 9884 9889 0
-13882 9885 0
-13882 9887 0
-13882 9875 9889 0
-13882 9875 9884 0
-13882 9875 9885 0
-13882 9875 9887 0
-13882 9876 0
-13882 9876 9884 0
-13882 9876 9885 0
-13882 9876 9887 0
13882 -9876 -9884 -9889 0
13882 -9875 -9885 -9889 0
13882 -9875 -9884 -9890 0
c ((1<=(aux1182 + aux1185 + aux1186))=tv=SATLiteral(13883))
-13883 -9875 -9884 -9889 0
13883 9889 0
13883 9884 0
13883 9885 0
13883 9887 0
13883 9875 0
13883 9875 9884 0
13883 9875 9885 0
13883 9875 9887 0
13883 9876 0
13883 9876 9884 0
13883 9876 9885 0
13883 9876 9887 0
c (((aux1188 + aux1191 + aux1192)<=1)=tv=SATLiteral(13884))
-13884 9914 0
-13884 9908 9913 0
-13884 9909 0
-13884 9911 0
-13884 9899 9913 0
-13884 9899 9908 0
-13884 9899 9909 0
-13884 9899 9911 0
-13884 9900 0
-13884 9900 9908 0
-13884 9900 9909 0
-13884 9900 9911 0
13884 -9900 -9908 -9913 0
13884 -9899 -9909 -9913 0
13884 -9899 -9908 -9914 0
c ((1<=(aux1188 + aux1191 + aux1192))=tv=SATLiteral(13885))
-13885 -9899 -9908 -9913 0
13885 9913 0
13885 9908 0
13885 9909 0
13885 9911 0
13885 9899 0
13885 9899 9908 0
13885 9899 9909 0
13885 9899 9911 0
13885 9900 0
13885 9900 9908 0
13885 9900 9909 0
13885 9900 9911 0
c (((aux1194 + aux1197 + aux1198)<=1)=tv=SATLiteral(13886))
-13886 9938 0
-13886 9932 9937 0
-13886 9933 0
-13886 9935 0
-13886 9923 9937 0
-13886 9923 9932 0
-13886 9923 9933 0
-13886 9923 9935 0
-13886 9924 0
-13886 9924 9932 0
-13886 9924 9933 0
-13886 9924 9935 0
13886 -9924 -9932 -9937 0
13886 -9923 -9933 -9937 0
13886 -9923 -9932 -9938 0
c ((1<=(aux1194 + aux1197 + aux1198))=tv=SATLiteral(13887))
-13887 -9923 -9932 -9937 0
13887 9937 0
13887 9932 0
13887 9933 0
13887 9935 0
13887 9923 0
13887 9923 9932 0
13887 9923 9933 0
13887 9923 9935 0
13887 9924 0
13887 9924 9932 0
13887 9924 9933 0
13887 9924 9935 0
c (((aux1200 + aux1203 + aux1204)<=1)=tv=SATLiteral(13888))
-13888 9962 0
-13888 9956 9961 0
-13888 9957 0
-13888 9959 0
-13888 9947 9961 0
-13888 9947 9956 0
-13888 9947 9957 0
-13888 9947 9959 0
-13888 9948 0
-13888 9948 9956 0
-13888 9948 9957 0
-13888 9948 9959 0
13888 -9948 -9956 -9961 0
13888 -9947 -9957 -9961 0
13888 -9947 -9956 -9962 0
c ((1<=(aux1200 + aux1203 + aux1204))=tv=SATLiteral(13889))
-13889 -9947 -9956 -9961 0
13889 9961 0
13889 9956 0
13889 9957 0
13889 9959 0
13889 9947 0
13889 9947 9956 0
13889 9947 9957 0
13889 9947 9959 0
13889 9948 0
13889 9948 9956 0
13889 9948 9957 0
13889 9948 9959 0
c (((aux1206 + aux1209 + aux1210)<=1)=tv=SATLiteral(13890))
-13890 9986 0
-13890 9980 9985 0
-13890 9981 0
-13890 9983 0
-13890 9971 9985 0
-13890 9971 9980 0
-13890 9971 9981 0
-13890 9971 9983 0
-13890 9972 0
-13890 9972 9980 0
-13890 9972 9981 0
-13890 9972 9983 0
13890 -9972 -9980 -9985 0
13890 -9971 -9981 -9985 0
13890 -9971 -9980 -9986 0
c ((1<=(aux1206 + aux1209 + aux1210))=tv=SATLiteral(13891))
-13891 -9971 -9980 -9985 0
13891 9985 0
13891 9980 0
13891 9981 0
13891 9983 0
13891 9971 0
13891 9971 9980 0
13891 9971 9981 0
13891 9971 9983 0
13891 9972 0
13891 9972 9980 0
13891 9972 9981 0
13891 9972 9983 0
c (((aux1212 + aux1215 + aux1216)<=1)=tv=SATLiteral(13892))
-13892 10010 0
-13892 10004 10009 0
-13892 10005 0
-13892 10007 0
-13892 9995 10009 0
-13892 9995 10004 0
-13892 9995 10005 0
-13892 9995 10007 0
-13892 9996 0
-13892 9996 10004 0
-13892 9996 10005 0
-13892 9996 10007 0
13892 -9996 -10004 -10009 0
13892 -9995 -10005 -10009 0
13892 -9995 -10004 -10010 0
c ((1<=(aux1212 + aux1215 + aux1216))=tv=SATLiteral(13893))
-13893 -9995 -10004 -10009 0
13893 10009 0
13893 10004 0
13893 10005 0
13893 10007 0
13893 9995 0
13893 9995 10004 0
13893 9995 10005 0
13893 9995 10007 0
13893 9996 0
13893 9996 10004 0
13893 9996 10005 0
13893 9996 10007 0
c (((aux1218 + aux1221 + aux1222)<=1)=tv=SATLiteral(13894))
-13894 10034 0
-13894 10028 10033 0
-13894 10029 0
-13894 10031 0
-13894 10019 10033 0
-13894 10019 10028 0
-13894 10019 10029 0
-13894 10019 10031 0
-13894 10020 0
-13894 10020 10028 0
-13894 10020 10029 0
-13894 10020 10031 0
13894 -10020 -10028 -10033 0
13894 -10019 -10029 -10033 0
13894 -10019 -10028 -10034 0
c ((1<=(aux1218 + aux1221 + aux1222))=tv=SATLiteral(13895))
-13895 -10019 -10028 -10033 0
13895 10033 0
13895 10028 0
13895 10029 0
13895 10031 0
13895 10019 0
13895 10019 10028 0
13895 10019 10029 0
13895 10019 10031 0
13895 10020 0
13895 10020 10028 0
13895 10020 10029 0
13895 10020 10031 0
c (((aux1224 + aux1227 + aux1228)<=1)=tv=SATLiteral(13896))
-13896 10058 0
-13896 10052 10057 0
-13896 10053 0
-13896 10055 0
-13896 10043 10057 0
-13896 10043 10052 0
-13896 10043 10053 0
-13896 10043 10055 0
-13896 10044 0
-13896 10044 10052 0
-13896 10044 10053 0
-13896 10044 10055 0
13896 -10044 -10052 -10057 0
13896 -10043 -10053 -10057 0
13896 -10043 -10052 -10058 0
c ((1<=(aux1224 + aux1227 + aux1228))=tv=SATLiteral(13897))
-13897 -10043 -10052 -10057 0
13897 10057 0
13897 10052 0
13897 10053 0
13897 10055 0
13897 10043 0
13897 10043 10052 0
13897 10043 10053 0
13897 10043 10055 0
13897 10044 0
13897 10044 10052 0
13897 10044 10053 0
13897 10044 10055 0
c (((aux1230 + aux1233 + aux1234)<=1)=tv=SATLiteral(13898))
-13898 10082 0
-13898 10076 10081 0
-13898 10077 0
-13898 10079 0
-13898 10067 10081 0
-13898 10067 10076 0
-13898 10067 10077 0
-13898 10067 10079 0
-13898 10068 0
-13898 10068 10076 0
-13898 10068 10077 0
-13898 10068 10079 0
13898 -10068 -10076 -10081 0
13898 -10067 -10077 -10081 0
13898 -10067 -10076 -10082 0
c ((1<=(aux1230 + aux1233 + aux1234))=tv=SATLiteral(13899))
-13899 -10067 -10076 -10081 0
13899 10081 0
13899 10076 0
13899 10077 0
13899 10079 0
13899 10067 0
13899 10067 10076 0
13899 10067 10077 0
13899 10067 10079 0
13899 10068 0
13899 10068 10076 0
13899 10068 10077 0
13899 10068 10079 0
c (((aux1236 + aux1239 + aux1240)<=1)=tv=SATLiteral(13900))
-13900 10106 0
-13900 10100 10105 0
-13900 10101 0
-13900 10103 0
-13900 10091 10105 0
-13900 10091 10100 0
-13900 10091 10101 0
-13900 10091 10103 0
-13900 10092 0
-13900 10092 10100 0
-13900 10092 10101 0
-13900 10092 10103 0
13900 -10092 -10100 -10105 0
13900 -10091 -10101 -10105 0
13900 -10091 -10100 -10106 0
c ((1<=(aux1236 + aux1239 + aux1240))=tv=SATLiteral(13901))
-13901 -10091 -10100 -10105 0
13901 10105 0
13901 10100 0
13901 10101 0
13901 10103 0
13901 10091 0
13901 10091 10100 0
13901 10091 10101 0
13901 10091 10103 0
13901 10092 0
13901 10092 10100 0
13901 10092 10101 0
13901 10092 10103 0
c (((aux1242 + aux1245 + aux1246)<=1)=tv=SATLiteral(13902))
-13902 10130 0
-13902 10124 10129 0
-13902 10125 0
-13902 10127 0
-13902 10115 10129 0
-13902 10115 10124 0
-13902 10115 10125 0
-13902 10115 10127 0
-13902 10116 0
-13902 10116 10124 0
-13902 10116 10125 0
-13902 10116 10127 0
13902 -10116 -10124 -10129 0
13902 -10115 -10125 -10129 0
13902 -10115 -10124 -10130 0
c ((1<=(aux1242 + aux1245 + aux1246))=tv=SATLiteral(13903))
-13903 -10115 -10124 -10129 0
13903 10129 0
13903 10124 0
13903 10125 0
13903 10127 0
13903 10115 0
13903 10115 10124 0
13903 10115 10125 0
13903 10115 10127 0
13903 10116 0
13903 10116 10124 0
13903 10116 10125 0
13903 10116 10127 0
c (((aux1248 + aux1251 + aux1252)<=1)=tv=SATLiteral(13904))
-13904 10154 0
-13904 10148 10153 0
-13904 10149 0
-13904 10151 0
-13904 10139 10153 0
-13904 10139 10148 0
-13904 10139 10149 0
-13904 10139 10151 0
-13904 10140 0
-13904 10140 10148 0
-13904 10140 10149 0
-13904 10140 10151 0
13904 -10140 -10148 -10153 0
13904 -10139 -10149 -10153 0
13904 -10139 -10148 -10154 0
c ((1<=(aux1248 + aux1251 + aux1252))=tv=SATLiteral(13905))
-13905 -10139 -10148 -10153 0
13905 10153 0
13905 10148 0
13905 10149 0
13905 10151 0
13905 10139 0
13905 10139 10148 0
13905 10139 10149 0
13905 10139 10151 0
13905 10140 0
13905 10140 10148 0
13905 10140 10149 0
13905 10140 10151 0
c (((aux1254 + aux1257 + aux1258)<=1)=tv=SATLiteral(13906))
-13906 10178 0
-13906 10172 10177 0
-13906 10173 0
-13906 10175 0
-13906 10163 10177 0
-13906 10163 10172 0
-13906 10163 10173 0
-13906 10163 10175 0
-13906 10164 0
-13906 10164 10172 0
-13906 10164 10173 0
-13906 10164 10175 0
13906 -10164 -10172 -10177 0
13906 -10163 -10173 -10177 0
13906 -10163 -10172 -10178 0
c ((1<=(aux1254 + aux1257 + aux1258))=tv=SATLiteral(13907))
-13907 -10163 -10172 -10177 0
13907 10177 0
13907 10172 0
13907 10173 0
13907 10175 0
13907 10163 0
13907 10163 10172 0
13907 10163 10173 0
13907 10163 10175 0
13907 10164 0
13907 10164 10172 0
13907 10164 10173 0
13907 10164 10175 0
c (((aux1260 + aux1263 + aux1264)<=1)=tv=SATLiteral(13908))
-13908 10202 0
-13908 10196 10201 0
-13908 10197 0
-13908 10199 0
-13908 10187 10201 0
-13908 10187 10196 0
-13908 10187 10197 0
-13908 10187 10199 0
-13908 10188 0
-13908 10188 10196 0
-13908 10188 10197 0
-13908 10188 10199 0
13908 -10188 -10196 -10201 0
13908 -10187 -10197 -10201 0
13908 -10187 -10196 -10202 0
c ((1<=(aux1260 + aux1263 + aux1264))=tv=SATLiteral(13909))
-13909 -10187 -10196 -10201 0
13909 10201 0
13909 10196 0
13909 10197 0
13909 10199 0
13909 10187 0
13909 10187 10196 0
13909 10187 10197 0
13909 10187 10199 0
13909 10188 0
13909 10188 10196 0
13909 10188 10197 0
13909 10188 10199 0
c (((aux1266 + aux1269 + aux1270)<=1)=tv=SATLiteral(13910))
-13910 10226 0
-13910 10220 10225 0
-13910 10221 0
-13910 10223 0
-13910 10211 10225 0
-13910 10211 10220 0
-13910 10211 10221 0
-13910 10211 10223 0
-13910 10212 0
-13910 10212 10220 0
-13910 10212 10221 0
-13910 10212 10223 0
13910 -10212 -10220 -10225 0
13910 -10211 -10221 -10225 0
13910 -10211 -10220 -10226 0
c ((1<=(aux1266 + aux1269 + aux1270))=tv=SATLiteral(13911))
-13911 -10211 -10220 -10225 0
13911 10225 0
13911 10220 0
13911 10221 0
13911 10223 0
13911 10211 0
13911 10211 10220 0
13911 10211 10221 0
13911 10211 10223 0
13911 10212 0
13911 10212 10220 0
13911 10212 10221 0
13911 10212 10223 0
c (((aux1272 + aux1275 + aux1276)<=1)=tv=SATLiteral(13912))
-13912 10250 0
-13912 10244 10249 0
-13912 10245 0
-13912 10247 0
-13912 10235 10249 0
-13912 10235 10244 0
-13912 10235 10245 0
-13912 10235 10247 0
-13912 10236 0
-13912 10236 10244 0
-13912 10236 10245 0
-13912 10236 10247 0
13912 -10236 -10244 -10249 0
13912 -10235 -10245 -10249 0
13912 -10235 -10244 -10250 0
c ((1<=(aux1272 + aux1275 + aux1276))=tv=SATLiteral(13913))
-13913 -10235 -10244 -10249 0
13913 10249 0
13913 10244 0
13913 10245 0
13913 10247 0
13913 10235 0
13913 10235 10244 0
13913 10235 10245 0
13913 10235 10247 0
13913 10236 0
13913 10236 10244 0
13913 10236 10245 0
13913 10236 10247 0
c (((aux1278 + aux1281 + aux1282)<=1)=tv=SATLiteral(13914))
-13914 10274 0
-13914 10268 10273 0
-13914 10269 0
-13914 10271 0
-13914 10259 10273 0
-13914 10259 10268 0
-13914 10259 10269 0
-13914 10259 10271 0
-13914 10260 0
-13914 10260 10268 0
-13914 10260 10269 0
-13914 10260 10271 0
13914 -10260 -10268 -10273 0
13914 -10259 -10269 -10273 0
13914 -10259 -10268 -10274 0
c ((1<=(aux1278 + aux1281 + aux1282))=tv=SATLiteral(13915))
-13915 -10259 -10268 -10273 0
13915 10273 0
13915 10268 0
13915 10269 0
13915 10271 0
13915 10259 0
13915 10259 10268 0
13915 10259 10269 0
13915 10259 10271 0
13915 10260 0
13915 10260 10268 0
13915 10260 10269 0
13915 10260 10271 0
c (((aux1284 + aux1287 + aux1288)<=1)=tv=SATLiteral(13916))
-13916 10298 0
-13916 10292 10297 0
-13916 10293 0
-13916 10295 0
-13916 10283 10297 0
-13916 10283 10292 0
-13916 10283 10293 0
-13916 10283 10295 0
-13916 10284 0
-13916 10284 10292 0
-13916 10284 10293 0
-13916 10284 10295 0
13916 -10284 -10292 -10297 0
13916 -10283 -10293 -10297 0
13916 -10283 -10292 -10298 0
c ((1<=(aux1284 + aux1287 + aux1288))=tv=SATLiteral(13917))
-13917 -10283 -10292 -10297 0
13917 10297 0
13917 10292 0
13917 10293 0
13917 10295 0
13917 10283 0
13917 10283 10292 0
13917 10283 10293 0
13917 10283 10295 0
13917 10284 0
13917 10284 10292 0
13917 10284 10293 0
13917 10284 10295 0
c (((aux1290 + aux1293 + aux1294)<=1)=tv=SATLiteral(13918))
-13918 10322 0
-13918 10316 10321 0
-13918 10317 0
-13918 10319 0
-13918 10307 10321 0
-13918 10307 10316 0
-13918 10307 10317 0
-13918 10307 10319 0
-13918 10308 0
-13918 10308 10316 0
-13918 10308 10317 0
-13918 10308 10319 0
13918 -10308 -10316 -10321 0
13918 -10307 -10317 -10321 0
13918 -10307 -10316 -10322 0
c ((1<=(aux1290 + aux1293 + aux1294))=tv=SATLiteral(13919))
-13919 -10307 -10316 -10321 0
13919 10321 0
13919 10316 0
13919 10317 0
13919 10319 0
13919 10307 0
13919 10307 10316 0
13919 10307 10317 0
13919 10307 10319 0
13919 10308 0
13919 10308 10316 0
13919 10308 10317 0
13919 10308 10319 0
c (((aux1296 + aux1299 + aux1300)<=1)=tv=SATLiteral(13920))
-13920 10346 0
-13920 10340 10345 0
-13920 10341 0
-13920 10343 0
-13920 10331 10345 0
-13920 10331 10340 0
-13920 10331 10341 0
-13920 10331 10343 0
-13920 10332 0
-13920 10332 10340 0
-13920 10332 10341 0
-13920 10332 10343 0
13920 -10332 -10340 -10345 0
13920 -10331 -10341 -10345 0
13920 -10331 -10340 -10346 0
c ((1<=(aux1296 + aux1299 + aux1300))=tv=SATLiteral(13921))
-13921 -10331 -10340 -10345 0
13921 10345 0
13921 10340 0
13921 10341 0
13921 10343 0
13921 10331 0
13921 10331 10340 0
13921 10331 10341 0
13921 10331 10343 0
13921 10332 0
13921 10332 10340 0
13921 10332 10341 0
13921 10332 10343 0
c (((aux1302 + aux1305 + aux1306)<=1)=tv=SATLiteral(13922))
-13922 10370 0
-13922 10364 10369 0
-13922 10365 0
-13922 10367 0
-13922 10355 10369 0
-13922 10355 10364 0
-13922 10355 10365 0
-13922 10355 10367 0
-13922 10356 0
-13922 10356 10364 0
-13922 10356 10365 0
-13922 10356 10367 0
13922 -10356 -10364 -10369 0
13922 -10355 -10365 -10369 0
13922 -10355 -10364 -10370 0
c ((1<=(aux1302 + aux1305 + aux1306))=tv=SATLiteral(13923))
-13923 -10355 -10364 -10369 0
13923 10369 0
13923 10364 0
13923 10365 0
13923 10367 0
13923 10355 0
13923 10355 10364 0
13923 10355 10365 0
13923 10355 10367 0
13923 10356 0
13923 10356 10364 0
13923 10356 10365 0
13923 10356 10367 0
c (((aux1308 + aux1311 + aux1312)<=1)=tv=SATLiteral(13924))
-13924 10394 0
-13924 10388 10393 0
-13924 10389 0
-13924 10391 0
-13924 10379 10393 0
-13924 10379 10388 0
-13924 10379 10389 0
-13924 10379 10391 0
-13924 10380 0
-13924 10380 10388 0
-13924 10380 10389 0
-13924 10380 10391 0
13924 -10380 -10388 -10393 0
13924 -10379 -10389 -10393 0
13924 -10379 -10388 -10394 0
c ((1<=(aux1308 + aux1311 + aux1312))=tv=SATLiteral(13925))
-13925 -10379 -10388 -10393 0
13925 10393 0
13925 10388 0
13925 10389 0
13925 10391 0
13925 10379 0
13925 10379 10388 0
13925 10379 10389 0
13925 10379 10391 0
13925 10380 0
13925 10380 10388 0
13925 10380 10389 0
13925 10380 10391 0
c (((aux1314 + aux1317 + aux1318)<=1)=tv=SATLiteral(13926))
-13926 10418 0
-13926 10412 10417 0
-13926 10413 0
-13926 10415 0
-13926 10403 10417 0
-13926 10403 10412 0
-13926 10403 10413 0
-13926 10403 10415 0
-13926 10404 0
-13926 10404 10412 0
-13926 10404 10413 0
-13926 10404 10415 0
13926 -10404 -10412 -10417 0
13926 -10403 -10413 -10417 0
13926 -10403 -10412 -10418 0
c ((1<=(aux1314 + aux1317 + aux1318))=tv=SATLiteral(13927))
-13927 -10403 -10412 -10417 0
13927 10417 0
13927 10412 0
13927 10413 0
13927 10415 0
13927 10403 0
13927 10403 10412 0
13927 10403 10413 0
13927 10403 10415 0
13927 10404 0
13927 10404 10412 0
13927 10404 10413 0
13927 10404 10415 0
c (((aux1320 + aux1323 + aux1324)<=1)=tv=SATLiteral(13928))
-13928 10442 0
-13928 10436 10441 0
-13928 10437 0
-13928 10439 0
-13928 10427 10441 0
-13928 10427 10436 0
-13928 10427 10437 0
-13928 10427 10439 0
-13928 10428 0
-13928 10428 10436 0
-13928 10428 10437 0
-13928 10428 10439 0
13928 -10428 -10436 -10441 0
13928 -10427 -10437 -10441 0
13928 -10427 -10436 -10442 0
c ((1<=(aux1320 + aux1323 + aux1324))=tv=SATLiteral(13929))
-13929 -10427 -10436 -10441 0
13929 10441 0
13929 10436 0
13929 10437 0
13929 10439 0
13929 10427 0
13929 10427 10436 0
13929 10427 10437 0
13929 10427 10439 0
13929 10428 0
13929 10428 10436 0
13929 10428 10437 0
13929 10428 10439 0
c (((aux1326 + aux1329 + aux1330)<=1)=tv=SATLiteral(13930))
-13930 10466 0
-13930 10460 10465 0
-13930 10461 0
-13930 10463 0
-13930 10451 10465 0
-13930 10451 10460 0
-13930 10451 10461 0
-13930 10451 10463 0
-13930 10452 0
-13930 10452 10460 0
-13930 10452 10461 0
-13930 10452 10463 0
13930 -10452 -10460 -10465 0
13930 -10451 -10461 -10465 0
13930 -10451 -10460 -10466 0
c ((1<=(aux1326 + aux1329 + aux1330))=tv=SATLiteral(13931))
-13931 -10451 -10460 -10465 0
13931 10465 0
13931 10460 0
13931 10461 0
13931 10463 0
13931 10451 0
13931 10451 10460 0
13931 10451 10461 0
13931 10451 10463 0
13931 10452 0
13931 10452 10460 0
13931 10452 10461 0
13931 10452 10463 0
c (((aux1332 + aux1335 + aux1336)<=1)=tv=SATLiteral(13932))
-13932 10490 0
-13932 10484 10489 0
-13932 10485 0
-13932 10487 0
-13932 10475 10489 0
-13932 10475 10484 0
-13932 10475 10485 0
-13932 10475 10487 0
-13932 10476 0
-13932 10476 10484 0
-13932 10476 10485 0
-13932 10476 10487 0
13932 -10476 -10484 -10489 0
13932 -10475 -10485 -10489 0
13932 -10475 -10484 -10490 0
c ((1<=(aux1332 + aux1335 + aux1336))=tv=SATLiteral(13933))
-13933 -10475 -10484 -10489 0
13933 10489 0
13933 10484 0
13933 10485 0
13933 10487 0
13933 10475 0
13933 10475 10484 0
13933 10475 10485 0
13933 10475 10487 0
13933 10476 0
13933 10476 10484 0
13933 10476 10485 0
13933 10476 10487 0
c (((aux1338 + aux1341 + aux1342)<=1)=tv=SATLiteral(13934))
-13934 10514 0
-13934 10508 10513 0
-13934 10509 0
-13934 10511 0
-13934 10499 10513 0
-13934 10499 10508 0
-13934 10499 10509 0
-13934 10499 10511 0
-13934 10500 0
-13934 10500 10508 0
-13934 10500 10509 0
-13934 10500 10511 0
13934 -10500 -10508 -10513 0
13934 -10499 -10509 -10513 0
13934 -10499 -10508 -10514 0
c ((1<=(aux1338 + aux1341 + aux1342))=tv=SATLiteral(13935))
-13935 -10499 -10508 -10513 0
13935 10513 0
13935 10508 0
13935 10509 0
13935 10511 0
13935 10499 0
13935 10499 10508 0
13935 10499 10509 0
13935 10499 10511 0
13935 10500 0
13935 10500 10508 0
13935 10500 10509 0
13935 10500 10511 0
c (((aux1344 + aux1347 + aux1348)<=1)=tv=SATLiteral(13936))
-13936 10538 0
-13936 10532 10537 0
-13936 10533 0
-13936 10535 0
-13936 10523 10537 0
-13936 10523 10532 0
-13936 10523 10533 0
-13936 10523 10535 0
-13936 10524 0
-13936 10524 10532 0
-13936 10524 10533 0
-13936 10524 10535 0
13936 -10524 -10532 -10537 0
13936 -10523 -10533 -10537 0
13936 -10523 -10532 -10538 0
c ((1<=(aux1344 + aux1347 + aux1348))=tv=SATLiteral(13937))
-13937 -10523 -10532 -10537 0
13937 10537 0
13937 10532 0
13937 10533 0
13937 10535 0
13937 10523 0
13937 10523 10532 0
13937 10523 10533 0
13937 10523 10535 0
13937 10524 0
13937 10524 10532 0
13937 10524 10533 0
13937 10524 10535 0
c (((aux1350 + aux1353 + aux1354)<=1)=tv=SATLiteral(13938))
-13938 10562 0
-13938 10556 10561 0
-13938 10557 0
-13938 10559 0
-13938 10547 10561 0
-13938 10547 10556 0
-13938 10547 10557 0
-13938 10547 10559 0
-13938 10548 0
-13938 10548 10556 0
-13938 10548 10557 0
-13938 10548 10559 0
13938 -10548 -10556 -10561 0
13938 -10547 -10557 -10561 0
13938 -10547 -10556 -10562 0
c ((1<=(aux1350 + aux1353 + aux1354))=tv=SATLiteral(13939))
-13939 -10547 -10556 -10561 0
13939 10561 0
13939 10556 0
13939 10557 0
13939 10559 0
13939 10547 0
13939 10547 10556 0
13939 10547 10557 0
13939 10547 10559 0
13939 10548 0
13939 10548 10556 0
13939 10548 10557 0
13939 10548 10559 0
c (((aux1356 + aux1359 + aux1360)<=1)=tv=SATLiteral(13940))
-13940 10586 0
-13940 10580 10585 0
-13940 10581 0
-13940 10583 0
-13940 10571 10585 0
-13940 10571 10580 0
-13940 10571 10581 0
-13940 10571 10583 0
-13940 10572 0
-13940 10572 10580 0
-13940 10572 10581 0
-13940 10572 10583 0
13940 -10572 -10580 -10585 0
13940 -10571 -10581 -10585 0
13940 -10571 -10580 -10586 0
c ((1<=(aux1356 + aux1359 + aux1360))=tv=SATLiteral(13941))
-13941 -10571 -10580 -10585 0
13941 10585 0
13941 10580 0
13941 10581 0
13941 10583 0
13941 10571 0
13941 10571 10580 0
13941 10571 10581 0
13941 10571 10583 0
13941 10572 0
13941 10572 10580 0
13941 10572 10581 0
13941 10572 10583 0
c (((aux1362 + aux1365 + aux1366)<=1)=tv=SATLiteral(13942))
-13942 10610 0
-13942 10604 10609 0
-13942 10605 0
-13942 10607 0
-13942 10595 10609 0
-13942 10595 10604 0
-13942 10595 10605 0
-13942 10595 10607 0
-13942 10596 0
-13942 10596 10604 0
-13942 10596 10605 0
-13942 10596 10607 0
13942 -10596 -10604 -10609 0
13942 -10595 -10605 -10609 0
13942 -10595 -10604 -10610 0
c ((1<=(aux1362 + aux1365 + aux1366))=tv=SATLiteral(13943))
-13943 -10595 -10604 -10609 0
13943 10609 0
13943 10604 0
13943 10605 0
13943 10607 0
13943 10595 0
13943 10595 10604 0
13943 10595 10605 0
13943 10595 10607 0
13943 10596 0
13943 10596 10604 0
13943 10596 10605 0
13943 10596 10607 0
c (((aux1368 + aux1371 + aux1372)<=1)=tv=SATLiteral(13944))
-13944 10634 0
-13944 10628 10633 0
-13944 10629 0
-13944 10631 0
-13944 10619 10633 0
-13944 10619 10628 0
-13944 10619 10629 0
-13944 10619 10631 0
-13944 10620 0
-13944 10620 10628 0
-13944 10620 10629 0
-13944 10620 10631 0
13944 -10620 -10628 -10633 0
13944 -10619 -10629 -10633 0
13944 -10619 -10628 -10634 0
c ((1<=(aux1368 + aux1371 + aux1372))=tv=SATLiteral(13945))
-13945 -10619 -10628 -10633 0
13945 10633 0
13945 10628 0
13945 10629 0
13945 10631 0
13945 10619 0
13945 10619 10628 0
13945 10619 10629 0
13945 10619 10631 0
13945 10620 0
13945 10620 10628 0
13945 10620 10629 0
13945 10620 10631 0
c (((aux1374 + aux1377 + aux1378)<=1)=tv=SATLiteral(13946))
-13946 10658 0
-13946 10652 10657 0
-13946 10653 0
-13946 10655 0
-13946 10643 10657 0
-13946 10643 10652 0
-13946 10643 10653 0
-13946 10643 10655 0
-13946 10644 0
-13946 10644 10652 0
-13946 10644 10653 0
-13946 10644 10655 0
13946 -10644 -10652 -10657 0
13946 -10643 -10653 -10657 0
13946 -10643 -10652 -10658 0
c ((1<=(aux1374 + aux1377 + aux1378))=tv=SATLiteral(13947))
-13947 -10643 -10652 -10657 0
13947 10657 0
13947 10652 0
13947 10653 0
13947 10655 0
13947 10643 0
13947 10643 10652 0
13947 10643 10653 0
13947 10643 10655 0
13947 10644 0
13947 10644 10652 0
13947 10644 10653 0
13947 10644 10655 0
c (((aux1380 + aux1383 + aux1384)<=1)=tv=SATLiteral(13948))
-13948 10682 0
-13948 10676 10681 0
-13948 10677 0
-13948 10679 0
-13948 10667 10681 0
-13948 10667 10676 0
-13948 10667 10677 0
-13948 10667 10679 0
-13948 10668 0
-13948 10668 10676 0
-13948 10668 10677 0
-13948 10668 10679 0
13948 -10668 -10676 -10681 0
13948 -10667 -10677 -10681 0
13948 -10667 -10676 -10682 0
c ((1<=(aux1380 + aux1383 + aux1384))=tv=SATLiteral(13949))
-13949 -10667 -10676 -10681 0
13949 10681 0
13949 10676 0
13949 10677 0
13949 10679 0
13949 10667 0
13949 10667 10676 0
13949 10667 10677 0
13949 10667 10679 0
13949 10668 0
13949 10668 10676 0
13949 10668 10677 0
13949 10668 10679 0
c (((aux1386 + aux1389 + aux1390)<=1)=tv=SATLiteral(13950))
-13950 10706 0
-13950 10700 10705 0
-13950 10701 0
-13950 10703 0
-13950 10691 10705 0
-13950 10691 10700 0
-13950 10691 10701 0
-13950 10691 10703 0
-13950 10692 0
-13950 10692 10700 0
-13950 10692 10701 0
-13950 10692 10703 0
13950 -10692 -10700 -10705 0
13950 -10691 -10701 -10705 0
13950 -10691 -10700 -10706 0
c ((1<=(aux1386 + aux1389 + aux1390))=tv=SATLiteral(13951))
-13951 -10691 -10700 -10705 0
13951 10705 0
13951 10700 0
13951 10701 0
13951 10703 0
13951 10691 0
13951 10691 10700 0
13951 10691 10701 0
13951 10691 10703 0
13951 10692 0
13951 10692 10700 0
13951 10692 10701 0
13951 10692 10703 0
c (((aux1392 + aux1395 + aux1396)<=1)=tv=SATLiteral(13952))
-13952 10730 0
-13952 10724 10729 0
-13952 10725 0
-13952 10727 0
-13952 10715 10729 0
-13952 10715 10724 0
-13952 10715 10725 0
-13952 10715 10727 0
-13952 10716 0
-13952 10716 10724 0
-13952 10716 10725 0
-13952 10716 10727 0
13952 -10716 -10724 -10729 0
13952 -10715 -10725 -10729 0
13952 -10715 -10724 -10730 0
c ((1<=(aux1392 + aux1395 + aux1396))=tv=SATLiteral(13953))
-13953 -10715 -10724 -10729 0
13953 10729 0
13953 10724 0
13953 10725 0
13953 10727 0
13953 10715 0
13953 10715 10724 0
13953 10715 10725 0
13953 10715 10727 0
13953 10716 0
13953 10716 10724 0
13953 10716 10725 0
13953 10716 10727 0
c (((aux1398 + aux1401 + aux1402)<=1)=tv=SATLiteral(13954))
-13954 10754 0
-13954 10748 10753 0
-13954 10749 0
-13954 10751 0
-13954 10739 10753 0
-13954 10739 10748 0
-13954 10739 10749 0
-13954 10739 10751 0
-13954 10740 0
-13954 10740 10748 0
-13954 10740 10749 0
-13954 10740 10751 0
13954 -10740 -10748 -10753 0
13954 -10739 -10749 -10753 0
13954 -10739 -10748 -10754 0
c ((1<=(aux1398 + aux1401 + aux1402))=tv=SATLiteral(13955))
-13955 -10739 -10748 -10753 0
13955 10753 0
13955 10748 0
13955 10749 0
13955 10751 0
13955 10739 0
13955 10739 10748 0
13955 10739 10749 0
13955 10739 10751 0
13955 10740 0
13955 10740 10748 0
13955 10740 10749 0
13955 10740 10751 0
c (((aux1404 + aux1407 + aux1408)<=1)=tv=SATLiteral(13956))
-13956 10778 0
-13956 10772 10777 0
-13956 10773 0
-13956 10775 0
-13956 10763 10777 0
-13956 10763 10772 0
-13956 10763 10773 0
-13956 10763 10775 0
-13956 10764 0
-13956 10764 10772 0
-13956 10764 10773 0
-13956 10764 10775 0
13956 -10764 -10772 -10777 0
13956 -10763 -10773 -10777 0
13956 -10763 -10772 -10778 0
c ((1<=(aux1404 + aux1407 + aux1408))=tv=SATLiteral(13957))
-13957 -10763 -10772 -10777 0
13957 10777 0
13957 10772 0
13957 10773 0
13957 10775 0
13957 10763 0
13957 10763 10772 0
13957 10763 10773 0
13957 10763 10775 0
13957 10764 0
13957 10764 10772 0
13957 10764 10773 0
13957 10764 10775 0
c (((aux1410 + aux1413 + aux1414)<=1)=tv=SATLiteral(13958))
-13958 10802 0
-13958 10796 10801 0
-13958 10797 0
-13958 10799 0
-13958 10787 10801 0
-13958 10787 10796 0
-13958 10787 10797 0
-13958 10787 10799 0
-13958 10788 0
-13958 10788 10796 0
-13958 10788 10797 0
-13958 10788 10799 0
13958 -10788 -10796 -10801 0
13958 -10787 -10797 -10801 0
13958 -10787 -10796 -10802 0
c ((1<=(aux1410 + aux1413 + aux1414))=tv=SATLiteral(13959))
-13959 -10787 -10796 -10801 0
13959 10801 0
13959 10796 0
13959 10797 0
13959 10799 0
13959 10787 0
13959 10787 10796 0
13959 10787 10797 0
13959 10787 10799 0
13959 10788 0
13959 10788 10796 0
13959 10788 10797 0
13959 10788 10799 0
c (((aux1416 + aux1419 + aux1420)<=1)=tv=SATLiteral(13960))
-13960 10826 0
-13960 10820 10825 0
-13960 10821 0
-13960 10823 0
-13960 10811 10825 0
-13960 10811 10820 0
-13960 10811 10821 0
-13960 10811 10823 0
-13960 10812 0
-13960 10812 10820 0
-13960 10812 10821 0
-13960 10812 10823 0
13960 -10812 -10820 -10825 0
13960 -10811 -10821 -10825 0
13960 -10811 -10820 -10826 0
c ((1<=(aux1416 + aux1419 + aux1420))=tv=SATLiteral(13961))
-13961 -10811 -10820 -10825 0
13961 10825 0
13961 10820 0
13961 10821 0
13961 10823 0
13961 10811 0
13961 10811 10820 0
13961 10811 10821 0
13961 10811 10823 0
13961 10812 0
13961 10812 10820 0
13961 10812 10821 0
13961 10812 10823 0
c (((aux1422 + aux1425 + aux1426)<=1)=tv=SATLiteral(13962))
-13962 10850 0
-13962 10844 10849 0
-13962 10845 0
-13962 10847 0
-13962 10835 10849 0
-13962 10835 10844 0
-13962 10835 10845 0
-13962 10835 10847 0
-13962 10836 0
-13962 10836 10844 0
-13962 10836 10845 0
-13962 10836 10847 0
13962 -10836 -10844 -10849 0
13962 -10835 -10845 -10849 0
13962 -10835 -10844 -10850 0
c ((1<=(aux1422 + aux1425 + aux1426))=tv=SATLiteral(13963))
-13963 -10835 -10844 -10849 0
13963 10849 0
13963 10844 0
13963 10845 0
13963 10847 0
13963 10835 0
13963 10835 10844 0
13963 10835 10845 0
13963 10835 10847 0
13963 10836 0
13963 10836 10844 0
13963 10836 10845 0
13963 10836 10847 0
c (((aux1428 + aux1431 + aux1432)<=1)=tv=SATLiteral(13964))
-13964 10874 0
-13964 10868 10873 0
-13964 10869 0
-13964 10871 0
-13964 10859 10873 0
-13964 10859 10868 0
-13964 10859 10869 0
-13964 10859 10871 0
-13964 10860 0
-13964 10860 10868 0
-13964 10860 10869 0
-13964 10860 10871 0
13964 -10860 -10868 -10873 0
13964 -10859 -10869 -10873 0
13964 -10859 -10868 -10874 0
c ((1<=(aux1428 + aux1431 + aux1432))=tv=SATLiteral(13965))
-13965 -10859 -10868 -10873 0
13965 10873 0
13965 10868 0
13965 10869 0
13965 10871 0
13965 10859 0
13965 10859 10868 0
13965 10859 10869 0
13965 10859 10871 0
13965 10860 0
13965 10860 10868 0
13965 10860 10869 0
13965 10860 10871 0
c (((aux1434 + aux1437 + aux1438)<=1)=tv=SATLiteral(13966))
-13966 10898 0
-13966 10892 10897 0
-13966 10893 0
-13966 10895 0
-13966 10883 10897 0
-13966 10883 10892 0
-13966 10883 10893 0
-13966 10883 10895 0
-13966 10884 0
-13966 10884 10892 0
-13966 10884 10893 0
-13966 10884 10895 0
13966 -10884 -10892 -10897 0
13966 -10883 -10893 -10897 0
13966 -10883 -10892 -10898 0
c ((1<=(aux1434 + aux1437 + aux1438))=tv=SATLiteral(13967))
-13967 -10883 -10892 -10897 0
13967 10897 0
13967 10892 0
13967 10893 0
13967 10895 0
13967 10883 0
13967 10883 10892 0
13967 10883 10893 0
13967 10883 10895 0
13967 10884 0
13967 10884 10892 0
13967 10884 10893 0
13967 10884 10895 0
c (((aux1440 + aux1443 + aux1444)<=1)=tv=SATLiteral(13968))
-13968 10922 0
-13968 10916 10921 0
-13968 10917 0
-13968 10919 0
-13968 10907 10921 0
-13968 10907 10916 0
-13968 10907 10917 0
-13968 10907 10919 0
-13968 10908 0
-13968 10908 10916 0
-13968 10908 10917 0
-13968 10908 10919 0
13968 -10908 -10916 -10921 0
13968 -10907 -10917 -10921 0
13968 -10907 -10916 -10922 0
c ((1<=(aux1440 + aux1443 + aux1444))=tv=SATLiteral(13969))
-13969 -10907 -10916 -10921 0
13969 10921 0
13969 10916 0
13969 10917 0
13969 10919 0
13969 10907 0
13969 10907 10916 0
13969 10907 10917 0
13969 10907 10919 0
13969 10908 0
13969 10908 10916 0
13969 10908 10917 0
13969 10908 10919 0
c (((aux1446 + aux1449 + aux1450)<=1)=tv=SATLiteral(13970))
-13970 10946 0
-13970 10940 10945 0
-13970 10941 0
-13970 10943 0
-13970 10931 10945 0
-13970 10931 10940 0
-13970 10931 10941 0
-13970 10931 10943 0
-13970 10932 0
-13970 10932 10940 0
-13970 10932 10941 0
-13970 10932 10943 0
13970 -10932 -10940 -10945 0
13970 -10931 -10941 -10945 0
13970 -10931 -10940 -10946 0
c ((1<=(aux1446 + aux1449 + aux1450))=tv=SATLiteral(13971))
-13971 -10931 -10940 -10945 0
13971 10945 0
13971 10940 0
13971 10941 0
13971 10943 0
13971 10931 0
13971 10931 10940 0
13971 10931 10941 0
13971 10931 10943 0
13971 10932 0
13971 10932 10940 0
13971 10932 10941 0
13971 10932 10943 0
c (((aux1452 + aux1455 + aux1456)<=1)=tv=SATLiteral(13972))
-13972 10970 0
-13972 10964 10969 0
-13972 10965 0
-13972 10967 0
-13972 10955 10969 0
-13972 10955 10964 0
-13972 10955 10965 0
-13972 10955 10967 0
-13972 10956 0
-13972 10956 10964 0
-13972 10956 10965 0
-13972 10956 10967 0
13972 -10956 -10964 -10969 0
13972 -10955 -10965 -10969 0
13972 -10955 -10964 -10970 0
c ((1<=(aux1452 + aux1455 + aux1456))=tv=SATLiteral(13973))
-13973 -10955 -10964 -10969 0
13973 10969 0
13973 10964 0
13973 10965 0
13973 10967 0
13973 10955 0
13973 10955 10964 0
13973 10955 10965 0
13973 10955 10967 0
13973 10956 0
13973 10956 10964 0
13973 10956 10965 0
13973 10956 10967 0
c (((aux1458 + aux1461 + aux1462)<=1)=tv=SATLiteral(13974))
-13974 10994 0
-13974 10988 10993 0
-13974 10989 0
-13974 10991 0
-13974 10979 10993 0
-13974 10979 10988 0
-13974 10979 10989 0
-13974 10979 10991 0
-13974 10980 0
-13974 10980 10988 0
-13974 10980 10989 0
-13974 10980 10991 0
13974 -10980 -10988 -10993 0
13974 -10979 -10989 -10993 0
13974 -10979 -10988 -10994 0
c ((1<=(aux1458 + aux1461 + aux1462))=tv=SATLiteral(13975))
-13975 -10979 -10988 -10993 0
13975 10993 0
13975 10988 0
13975 10989 0
13975 10991 0
13975 10979 0
13975 10979 10988 0
13975 10979 10989 0
13975 10979 10991 0
13975 10980 0
13975 10980 10988 0
13975 10980 10989 0
13975 10980 10991 0
c (((aux1464 + aux1467 + aux1468)<=1)=tv=SATLiteral(13976))
-13976 11018 0
-13976 11012 11017 0
-13976 11013 0
-13976 11015 0
-13976 11003 11017 0
-13976 11003 11012 0
-13976 11003 11013 0
-13976 11003 11015 0
-13976 11004 0
-13976 11004 11012 0
-13976 11004 11013 0
-13976 11004 11015 0
13976 -11004 -11012 -11017 0
13976 -11003 -11013 -11017 0
13976 -11003 -11012 -11018 0
c ((1<=(aux1464 + aux1467 + aux1468))=tv=SATLiteral(13977))
-13977 -11003 -11012 -11017 0
13977 11017 0
13977 11012 0
13977 11013 0
13977 11015 0
13977 11003 0
13977 11003 11012 0
13977 11003 11013 0
13977 11003 11015 0
13977 11004 0
13977 11004 11012 0
13977 11004 11013 0
13977 11004 11015 0
c (((aux1470 + aux1473 + aux1474)<=1)=tv=SATLiteral(13978))
-13978 11042 0
-13978 11036 11041 0
-13978 11037 0
-13978 11039 0
-13978 11027 11041 0
-13978 11027 11036 0
-13978 11027 11037 0
-13978 11027 11039 0
-13978 11028 0
-13978 11028 11036 0
-13978 11028 11037 0
-13978 11028 11039 0
13978 -11028 -11036 -11041 0
13978 -11027 -11037 -11041 0
13978 -11027 -11036 -11042 0
c ((1<=(aux1470 + aux1473 + aux1474))=tv=SATLiteral(13979))
-13979 -11027 -11036 -11041 0
13979 11041 0
13979 11036 0
13979 11037 0
13979 11039 0
13979 11027 0
13979 11027 11036 0
13979 11027 11037 0
13979 11027 11039 0
13979 11028 0
13979 11028 11036 0
13979 11028 11037 0
13979 11028 11039 0
c (((aux1476 + aux1479 + aux1480)<=1)=tv=SATLiteral(13980))
-13980 11066 0
-13980 11060 11065 0
-13980 11061 0
-13980 11063 0
-13980 11051 11065 0
-13980 11051 11060 0
-13980 11051 11061 0
-13980 11051 11063 0
-13980 11052 0
-13980 11052 11060 0
-13980 11052 11061 0
-13980 11052 11063 0
13980 -11052 -11060 -11065 0
13980 -11051 -11061 -11065 0
13980 -11051 -11060 -11066 0
c ((1<=(aux1476 + aux1479 + aux1480))=tv=SATLiteral(13981))
-13981 -11051 -11060 -11065 0
13981 11065 0
13981 11060 0
13981 11061 0
13981 11063 0
13981 11051 0
13981 11051 11060 0
13981 11051 11061 0
13981 11051 11063 0
13981 11052 0
13981 11052 11060 0
13981 11052 11061 0
13981 11052 11063 0
c (((aux1482 + aux1485 + aux1486)<=1)=tv=SATLiteral(13982))
-13982 11090 0
-13982 11084 11089 0
-13982 11085 0
-13982 11087 0
-13982 11075 11089 0
-13982 11075 11084 0
-13982 11075 11085 0
-13982 11075 11087 0
-13982 11076 0
-13982 11076 11084 0
-13982 11076 11085 0
-13982 11076 11087 0
13982 -11076 -11084 -11089 0
13982 -11075 -11085 -11089 0
13982 -11075 -11084 -11090 0
c ((1<=(aux1482 + aux1485 + aux1486))=tv=SATLiteral(13983))
-13983 -11075 -11084 -11089 0
13983 11089 0
13983 11084 0
13983 11085 0
13983 11087 0
13983 11075 0
13983 11075 11084 0
13983 11075 11085 0
13983 11075 11087 0
13983 11076 0
13983 11076 11084 0
13983 11076 11085 0
13983 11076 11087 0
c (((aux1488 + aux1491 + aux1492)<=1)=tv=SATLiteral(13984))
-13984 11114 0
-13984 11108 11113 0
-13984 11109 0
-13984 11111 0
-13984 11099 11113 0
-13984 11099 11108 0
-13984 11099 11109 0
-13984 11099 11111 0
-13984 11100 0
-13984 11100 11108 0
-13984 11100 11109 0
-13984 11100 11111 0
13984 -11100 -11108 -11113 0
13984 -11099 -11109 -11113 0
13984 -11099 -11108 -11114 0
c ((1<=(aux1488 + aux1491 + aux1492))=tv=SATLiteral(13985))
-13985 -11099 -11108 -11113 0
13985 11113 0
13985 11108 0
13985 11109 0
13985 11111 0
13985 11099 0
13985 11099 11108 0
13985 11099 11109 0
13985 11099 11111 0
13985 11100 0
13985 11100 11108 0
13985 11100 11109 0
13985 11100 11111 0
c (((aux1494 + aux1497 + aux1498)<=1)=tv=SATLiteral(13986))
-13986 11138 0
-13986 11132 11137 0
-13986 11133 0
-13986 11135 0
-13986 11123 11137 0
-13986 11123 11132 0
-13986 11123 11133 0
-13986 11123 11135 0
-13986 11124 0
-13986 11124 11132 0
-13986 11124 11133 0
-13986 11124 11135 0
13986 -11124 -11132 -11137 0
13986 -11123 -11133 -11137 0
13986 -11123 -11132 -11138 0
c ((1<=(aux1494 + aux1497 + aux1498))=tv=SATLiteral(13987))
-13987 -11123 -11132 -11137 0
13987 11137 0
13987 11132 0
13987 11133 0
13987 11135 0
13987 11123 0
13987 11123 11132 0
13987 11123 11133 0
13987 11123 11135 0
13987 11124 0
13987 11124 11132 0
13987 11124 11133 0
13987 11124 11135 0
c (((aux1500 + aux1503 + aux1504)<=1)=tv=SATLiteral(13988))
-13988 11162 0
-13988 11156 11161 0
-13988 11157 0
-13988 11159 0
-13988 11147 11161 0
-13988 11147 11156 0
-13988 11147 11157 0
-13988 11147 11159 0
-13988 11148 0
-13988 11148 11156 0
-13988 11148 11157 0
-13988 11148 11159 0
13988 -11148 -11156 -11161 0
13988 -11147 -11157 -11161 0
13988 -11147 -11156 -11162 0
c ((1<=(aux1500 + aux1503 + aux1504))=tv=SATLiteral(13989))
-13989 -11147 -11156 -11161 0
13989 11161 0
13989 11156 0
13989 11157 0
13989 11159 0
13989 11147 0
13989 11147 11156 0
13989 11147 11157 0
13989 11147 11159 0
13989 11148 0
13989 11148 11156 0
13989 11148 11157 0
13989 11148 11159 0
c (((aux1506 + aux1509 + aux1510)<=1)=tv=SATLiteral(13990))
-13990 11186 0
-13990 11180 11185 0
-13990 11181 0
-13990 11183 0
-13990 11171 11185 0
-13990 11171 11180 0
-13990 11171 11181 0
-13990 11171 11183 0
-13990 11172 0
-13990 11172 11180 0
-13990 11172 11181 0
-13990 11172 11183 0
13990 -11172 -11180 -11185 0
13990 -11171 -11181 -11185 0
13990 -11171 -11180 -11186 0
c ((1<=(aux1506 + aux1509 + aux1510))=tv=SATLiteral(13991))
-13991 -11171 -11180 -11185 0
13991 11185 0
13991 11180 0
13991 11181 0
13991 11183 0
13991 11171 0
13991 11171 11180 0
13991 11171 11181 0
13991 11171 11183 0
13991 11172 0
13991 11172 11180 0
13991 11172 11181 0
13991 11172 11183 0
c (((aux1512 + aux1515 + aux1516)<=1)=tv=SATLiteral(13992))
-13992 11210 0
-13992 11204 11209 0
-13992 11205 0
-13992 11207 0
-13992 11195 11209 0
-13992 11195 11204 0
-13992 11195 11205 0
-13992 11195 11207 0
-13992 11196 0
-13992 11196 11204 0
-13992 11196 11205 0
-13992 11196 11207 0
13992 -11196 -11204 -11209 0
13992 -11195 -11205 -11209 0
13992 -11195 -11204 -11210 0
c ((1<=(aux1512 + aux1515 + aux1516))=tv=SATLiteral(13993))
-13993 -11195 -11204 -11209 0
13993 11209 0
13993 11204 0
13993 11205 0
13993 11207 0
13993 11195 0
13993 11195 11204 0
13993 11195 11205 0
13993 11195 11207 0
13993 11196 0
13993 11196 11204 0
13993 11196 11205 0
13993 11196 11207 0
c (((aux1518 + aux1521 + aux1522)<=1)=tv=SATLiteral(13994))
-13994 11234 0
-13994 11228 11233 0
-13994 11229 0
-13994 11231 0
-13994 11219 11233 0
-13994 11219 11228 0
-13994 11219 11229 0
-13994 11219 11231 0
-13994 11220 0
-13994 11220 11228 0
-13994 11220 11229 0
-13994 11220 11231 0
13994 -11220 -11228 -11233 0
13994 -11219 -11229 -11233 0
13994 -11219 -11228 -11234 0
c ((1<=(aux1518 + aux1521 + aux1522))=tv=SATLiteral(13995))
-13995 -11219 -11228 -11233 0
13995 11233 0
13995 11228 0
13995 11229 0
13995 11231 0
13995 11219 0
13995 11219 11228 0
13995 11219 11229 0
13995 11219 11231 0
13995 11220 0
13995 11220 11228 0
13995 11220 11229 0
13995 11220 11231 0
c (((aux1524 + aux1527 + aux1528)<=1)=tv=SATLiteral(13996))
-13996 11258 0
-13996 11252 11257 0
-13996 11253 0
-13996 11255 0
-13996 11243 11257 0
-13996 11243 11252 0
-13996 11243 11253 0
-13996 11243 11255 0
-13996 11244 0
-13996 11244 11252 0
-13996 11244 11253 0
-13996 11244 11255 0
13996 -11244 -11252 -11257 0
13996 -11243 -11253 -11257 0
13996 -11243 -11252 -11258 0
c ((1<=(aux1524 + aux1527 + aux1528))=tv=SATLiteral(13997))
-13997 -11243 -11252 -11257 0
13997 11257 0
13997 11252 0
13997 11253 0
13997 11255 0
13997 11243 0
13997 11243 11252 0
13997 11243 11253 0
13997 11243 11255 0
13997 11244 0
13997 11244 11252 0
13997 11244 11253 0
13997 11244 11255 0
c (((aux1530 + aux1533 + aux1534)<=1)=tv=SATLiteral(13998))
-13998 11282 0
-13998 11276 11281 0
-13998 11277 0
-13998 11279 0
-13998 11267 11281 0
-13998 11267 11276 0
-13998 11267 11277 0
-13998 11267 11279 0
-13998 11268 0
-13998 11268 11276 0
-13998 11268 11277 0
-13998 11268 11279 0
13998 -11268 -11276 -11281 0
13998 -11267 -11277 -11281 0
13998 -11267 -11276 -11282 0
c ((1<=(aux1530 + aux1533 + aux1534))=tv=SATLiteral(13999))
-13999 -11267 -11276 -11281 0
13999 11281 0
13999 11276 0
13999 11277 0
13999 11279 0
13999 11267 0
13999 11267 11276 0
13999 11267 11277 0
13999 11267 11279 0
13999 11268 0
13999 11268 11276 0
13999 11268 11277 0
13999 11268 11279 0
c (((aux1536 + aux1539 + aux1540)<=1)=tv=SATLiteral(14000))
-14000 11306 0
-14000 11300 11305 0
-14000 11301 0
-14000 11303 0
-14000 11291 11305 0
-14000 11291 11300 0
-14000 11291 11301 0
-14000 11291 11303 0
-14000 11292 0
-14000 11292 11300 0
-14000 11292 11301 0
-14000 11292 11303 0
14000 -11292 -11300 -11305 0
14000 -11291 -11301 -11305 0
14000 -11291 -11300 -11306 0
c ((1<=(aux1536 + aux1539 + aux1540))=tv=SATLiteral(14001))
-14001 -11291 -11300 -11305 0
14001 11305 0
14001 11300 0
14001 11301 0
14001 11303 0
14001 11291 0
14001 11291 11300 0
14001 11291 11301 0
14001 11291 11303 0
14001 11292 0
14001 11292 11300 0
14001 11292 11301 0
14001 11292 11303 0
c (((aux1542 + aux1545 + aux1546)<=1)=tv=SATLiteral(14002))
-14002 11330 0
-14002 11324 11329 0
-14002 11325 0
-14002 11327 0
-14002 11315 11329 0
-14002 11315 11324 0
-14002 11315 11325 0
-14002 11315 11327 0
-14002 11316 0
-14002 11316 11324 0
-14002 11316 11325 0
-14002 11316 11327 0
14002 -11316 -11324 -11329 0
14002 -11315 -11325 -11329 0
14002 -11315 -11324 -11330 0
c ((1<=(aux1542 + aux1545 + aux1546))=tv=SATLiteral(14003))
-14003 -11315 -11324 -11329 0
14003 11329 0
14003 11324 0
14003 11325 0
14003 11327 0
14003 11315 0
14003 11315 11324 0
14003 11315 11325 0
14003 11315 11327 0
14003 11316 0
14003 11316 11324 0
14003 11316 11325 0
14003 11316 11327 0
c (((aux1548 + aux1551 + aux1552)<=1)=tv=SATLiteral(14004))
-14004 11354 0
-14004 11348 11353 0
-14004 11349 0
-14004 11351 0
-14004 11339 11353 0
-14004 11339 11348 0
-14004 11339 11349 0
-14004 11339 11351 0
-14004 11340 0
-14004 11340 11348 0
-14004 11340 11349 0
-14004 11340 11351 0
14004 -11340 -11348 -11353 0
14004 -11339 -11349 -11353 0
14004 -11339 -11348 -11354 0
c ((1<=(aux1548 + aux1551 + aux1552))=tv=SATLiteral(14005))
-14005 -11339 -11348 -11353 0
14005 11353 0
14005 11348 0
14005 11349 0
14005 11351 0
14005 11339 0
14005 11339 11348 0
14005 11339 11349 0
14005 11339 11351 0
14005 11340 0
14005 11340 11348 0
14005 11340 11349 0
14005 11340 11351 0
c (((aux1554 + aux1557 + aux1558)<=1)=tv=SATLiteral(14006))
-14006 11378 0
-14006 11372 11377 0
-14006 11373 0
-14006 11375 0
-14006 11363 11377 0
-14006 11363 11372 0
-14006 11363 11373 0
-14006 11363 11375 0
-14006 11364 0
-14006 11364 11372 0
-14006 11364 11373 0
-14006 11364 11375 0
14006 -11364 -11372 -11377 0
14006 -11363 -11373 -11377 0
14006 -11363 -11372 -11378 0
c ((1<=(aux1554 + aux1557 + aux1558))=tv=SATLiteral(14007))
-14007 -11363 -11372 -11377 0
14007 11377 0
14007 11372 0
14007 11373 0
14007 11375 0
14007 11363 0
14007 11363 11372 0
14007 11363 11373 0
14007 11363 11375 0
14007 11364 0
14007 11364 11372 0
14007 11364 11373 0
14007 11364 11375 0
c (((aux1560 + aux1563 + aux1564)<=1)=tv=SATLiteral(14008))
-14008 11402 0
-14008 11396 11401 0
-14008 11397 0
-14008 11399 0
-14008 11387 11401 0
-14008 11387 11396 0
-14008 11387 11397 0
-14008 11387 11399 0
-14008 11388 0
-14008 11388 11396 0
-14008 11388 11397 0
-14008 11388 11399 0
14008 -11388 -11396 -11401 0
14008 -11387 -11397 -11401 0
14008 -11387 -11396 -11402 0
c ((1<=(aux1560 + aux1563 + aux1564))=tv=SATLiteral(14009))
-14009 -11387 -11396 -11401 0
14009 11401 0
14009 11396 0
14009 11397 0
14009 11399 0
14009 11387 0
14009 11387 11396 0
14009 11387 11397 0
14009 11387 11399 0
14009 11388 0
14009 11388 11396 0
14009 11388 11397 0
14009 11388 11399 0
c (((aux1566 + aux1569 + aux1570)<=1)=tv=SATLiteral(14010))
-14010 11426 0
-14010 11420 11425 0
-14010 11421 0
-14010 11423 0
-14010 11411 11425 0
-14010 11411 11420 0
-14010 11411 11421 0
-14010 11411 11423 0
-14010 11412 0
-14010 11412 11420 0
-14010 11412 11421 0
-14010 11412 11423 0
14010 -11412 -11420 -11425 0
14010 -11411 -11421 -11425 0
14010 -11411 -11420 -11426 0
c ((1<=(aux1566 + aux1569 + aux1570))=tv=SATLiteral(14011))
-14011 -11411 -11420 -11425 0
14011 11425 0
14011 11420 0
14011 11421 0
14011 11423 0
14011 11411 0
14011 11411 11420 0
14011 11411 11421 0
14011 11411 11423 0
14011 11412 0
14011 11412 11420 0
14011 11412 11421 0
14011 11412 11423 0
c (((aux1572 + aux1575 + aux1576)<=1)=tv=SATLiteral(14012))
-14012 11450 0
-14012 11444 11449 0
-14012 11445 0
-14012 11447 0
-14012 11435 11449 0
-14012 11435 11444 0
-14012 11435 11445 0
-14012 11435 11447 0
-14012 11436 0
-14012 11436 11444 0
-14012 11436 11445 0
-14012 11436 11447 0
14012 -11436 -11444 -11449 0
14012 -11435 -11445 -11449 0
14012 -11435 -11444 -11450 0
c ((1<=(aux1572 + aux1575 + aux1576))=tv=SATLiteral(14013))
-14013 -11435 -11444 -11449 0
14013 11449 0
14013 11444 0
14013 11445 0
14013 11447 0
14013 11435 0
14013 11435 11444 0
14013 11435 11445 0
14013 11435 11447 0
14013 11436 0
14013 11436 11444 0
14013 11436 11445 0
14013 11436 11447 0
c (((aux1578 + aux1581 + aux1582)<=1)=tv=SATLiteral(14014))
-14014 11474 0
-14014 11468 11473 0
-14014 11469 0
-14014 11471 0
-14014 11459 11473 0
-14014 11459 11468 0
-14014 11459 11469 0
-14014 11459 11471 0
-14014 11460 0
-14014 11460 11468 0
-14014 11460 11469 0
-14014 11460 11471 0
14014 -11460 -11468 -11473 0
14014 -11459 -11469 -11473 0
14014 -11459 -11468 -11474 0
c ((1<=(aux1578 + aux1581 + aux1582))=tv=SATLiteral(14015))
-14015 -11459 -11468 -11473 0
14015 11473 0
14015 11468 0
14015 11469 0
14015 11471 0
14015 11459 0
14015 11459 11468 0
14015 11459 11469 0
14015 11459 11471 0
14015 11460 0
14015 11460 11468 0
14015 11460 11469 0
14015 11460 11471 0
c (((aux1584 + aux1587 + aux1588)<=1)=tv=SATLiteral(14016))
-14016 11498 0
-14016 11492 11497 0
-14016 11493 0
-14016 11495 0
-14016 11483 11497 0
-14016 11483 11492 0
-14016 11483 11493 0
-14016 11483 11495 0
-14016 11484 0
-14016 11484 11492 0
-14016 11484 11493 0
-14016 11484 11495 0
14016 -11484 -11492 -11497 0
14016 -11483 -11493 -11497 0
14016 -11483 -11492 -11498 0
c ((1<=(aux1584 + aux1587 + aux1588))=tv=SATLiteral(14017))
-14017 -11483 -11492 -11497 0
14017 11497 0
14017 11492 0
14017 11493 0
14017 11495 0
14017 11483 0
14017 11483 11492 0
14017 11483 11493 0
14017 11483 11495 0
14017 11484 0
14017 11484 11492 0
14017 11484 11493 0
14017 11484 11495 0
c (((aux1590 + aux1593 + aux1594)<=1)=tv=SATLiteral(14018))
-14018 11522 0
-14018 11516 11521 0
-14018 11517 0
-14018 11519 0
-14018 11507 11521 0
-14018 11507 11516 0
-14018 11507 11517 0
-14018 11507 11519 0
-14018 11508 0
-14018 11508 11516 0
-14018 11508 11517 0
-14018 11508 11519 0
14018 -11508 -11516 -11521 0
14018 -11507 -11517 -11521 0
14018 -11507 -11516 -11522 0
c ((1<=(aux1590 + aux1593 + aux1594))=tv=SATLiteral(14019))
-14019 -11507 -11516 -11521 0
14019 11521 0
14019 11516 0
14019 11517 0
14019 11519 0
14019 11507 0
14019 11507 11516 0
14019 11507 11517 0
14019 11507 11519 0
14019 11508 0
14019 11508 11516 0
14019 11508 11517 0
14019 11508 11519 0
c (((aux1596 + aux1599 + aux1600)<=1)=tv=SATLiteral(14020))
-14020 11546 0
-14020 11540 11545 0
-14020 11541 0
-14020 11543 0
-14020 11531 11545 0
-14020 11531 11540 0
-14020 11531 11541 0
-14020 11531 11543 0
-14020 11532 0
-14020 11532 11540 0
-14020 11532 11541 0
-14020 11532 11543 0
14020 -11532 -11540 -11545 0
14020 -11531 -11541 -11545 0
14020 -11531 -11540 -11546 0
c ((1<=(aux1596 + aux1599 + aux1600))=tv=SATLiteral(14021))
-14021 -11531 -11540 -11545 0
14021 11545 0
14021 11540 0
14021 11541 0
14021 11543 0
14021 11531 0
14021 11531 11540 0
14021 11531 11541 0
14021 11531 11543 0
14021 11532 0
14021 11532 11540 0
14021 11532 11541 0
14021 11532 11543 0
c (((aux1602 + aux1605 + aux1606)<=1)=tv=SATLiteral(14022))
-14022 11570 0
-14022 11564 11569 0
-14022 11565 0
-14022 11567 0
-14022 11555 11569 0
-14022 11555 11564 0
-14022 11555 11565 0
-14022 11555 11567 0
-14022 11556 0
-14022 11556 11564 0
-14022 11556 11565 0
-14022 11556 11567 0
14022 -11556 -11564 -11569 0
14022 -11555 -11565 -11569 0
14022 -11555 -11564 -11570 0
c ((1<=(aux1602 + aux1605 + aux1606))=tv=SATLiteral(14023))
-14023 -11555 -11564 -11569 0
14023 11569 0
14023 11564 0
14023 11565 0
14023 11567 0
14023 11555 0
14023 11555 11564 0
14023 11555 11565 0
14023 11555 11567 0
14023 11556 0
14023 11556 11564 0
14023 11556 11565 0
14023 11556 11567 0
c (((aux1608 + aux1611 + aux1612)<=1)=tv=SATLiteral(14024))
-14024 11594 0
-14024 11588 11593 0
-14024 11589 0
-14024 11591 0
-14024 11579 11593 0
-14024 11579 11588 0
-14024 11579 11589 0
-14024 11579 11591 0
-14024 11580 0
-14024 11580 11588 0
-14024 11580 11589 0
-14024 11580 11591 0
14024 -11580 -11588 -11593 0
14024 -11579 -11589 -11593 0
14024 -11579 -11588 -11594 0
c ((1<=(aux1608 + aux1611 + aux1612))=tv=SATLiteral(14025))
-14025 -11579 -11588 -11593 0
14025 11593 0
14025 11588 0
14025 11589 0
14025 11591 0
14025 11579 0
14025 11579 11588 0
14025 11579 11589 0
14025 11579 11591 0
14025 11580 0
14025 11580 11588 0
14025 11580 11589 0
14025 11580 11591 0
c (((aux1614 + aux1617 + aux1618)<=1)=tv=SATLiteral(14026))
-14026 11618 0
-14026 11612 11617 0
-14026 11613 0
-14026 11615 0
-14026 11603 11617 0
-14026 11603 11612 0
-14026 11603 11613 0
-14026 11603 11615 0
-14026 11604 0
-14026 11604 11612 0
-14026 11604 11613 0
-14026 11604 11615 0
14026 -11604 -11612 -11617 0
14026 -11603 -11613 -11617 0
14026 -11603 -11612 -11618 0
c ((1<=(aux1614 + aux1617 + aux1618))=tv=SATLiteral(14027))
-14027 -11603 -11612 -11617 0
14027 11617 0
14027 11612 0
14027 11613 0
14027 11615 0
14027 11603 0
14027 11603 11612 0
14027 11603 11613 0
14027 11603 11615 0
14027 11604 0
14027 11604 11612 0
14027 11604 11613 0
14027 11604 11615 0
c (((aux1620 + aux1623 + aux1624)<=1)=tv=SATLiteral(14028))
-14028 11642 0
-14028 11636 11641 0
-14028 11637 0
-14028 11639 0
-14028 11627 11641 0
-14028 11627 11636 0
-14028 11627 11637 0
-14028 11627 11639 0
-14028 11628 0
-14028 11628 11636 0
-14028 11628 11637 0
-14028 11628 11639 0
14028 -11628 -11636 -11641 0
14028 -11627 -11637 -11641 0
14028 -11627 -11636 -11642 0
c ((1<=(aux1620 + aux1623 + aux1624))=tv=SATLiteral(14029))
-14029 -11627 -11636 -11641 0
14029 11641 0
14029 11636 0
14029 11637 0
14029 11639 0
14029 11627 0
14029 11627 11636 0
14029 11627 11637 0
14029 11627 11639 0
14029 11628 0
14029 11628 11636 0
14029 11628 11637 0
14029 11628 11639 0
c (((aux1626 + aux1629 + aux1630)<=1)=tv=SATLiteral(14030))
-14030 11666 0
-14030 11660 11665 0
-14030 11661 0
-14030 11663 0
-14030 11651 11665 0
-14030 11651 11660 0
-14030 11651 11661 0
-14030 11651 11663 0
-14030 11652 0
-14030 11652 11660 0
-14030 11652 11661 0
-14030 11652 11663 0
14030 -11652 -11660 -11665 0
14030 -11651 -11661 -11665 0
14030 -11651 -11660 -11666 0
c ((1<=(aux1626 + aux1629 + aux1630))=tv=SATLiteral(14031))
-14031 -11651 -11660 -11665 0
14031 11665 0
14031 11660 0
14031 11661 0
14031 11663 0
14031 11651 0
14031 11651 11660 0
14031 11651 11661 0
14031 11651 11663 0
14031 11652 0
14031 11652 11660 0
14031 11652 11661 0
14031 11652 11663 0
c (((aux1632 + aux1635 + aux1636)<=1)=tv=SATLiteral(14032))
-14032 11690 0
-14032 11684 11689 0
-14032 11685 0
-14032 11687 0
-14032 11675 11689 0
-14032 11675 11684 0
-14032 11675 11685 0
-14032 11675 11687 0
-14032 11676 0
-14032 11676 11684 0
-14032 11676 11685 0
-14032 11676 11687 0
14032 -11676 -11684 -11689 0
14032 -11675 -11685 -11689 0
14032 -11675 -11684 -11690 0
c ((1<=(aux1632 + aux1635 + aux1636))=tv=SATLiteral(14033))
-14033 -11675 -11684 -11689 0
14033 11689 0
14033 11684 0
14033 11685 0
14033 11687 0
14033 11675 0
14033 11675 11684 0
14033 11675 11685 0
14033 11675 11687 0
14033 11676 0
14033 11676 11684 0
14033 11676 11685 0
14033 11676 11687 0
c (((aux1638 + aux1641 + aux1642)<=1)=tv=SATLiteral(14034))
-14034 11714 0
-14034 11708 11713 0
-14034 11709 0
-14034 11711 0
-14034 11699 11713 0
-14034 11699 11708 0
-14034 11699 11709 0
-14034 11699 11711 0
-14034 11700 0
-14034 11700 11708 0
-14034 11700 11709 0
-14034 11700 11711 0
14034 -11700 -11708 -11713 0
14034 -11699 -11709 -11713 0
14034 -11699 -11708 -11714 0
c ((1<=(aux1638 + aux1641 + aux1642))=tv=SATLiteral(14035))
-14035 -11699 -11708 -11713 0
14035 11713 0
14035 11708 0
14035 11709 0
14035 11711 0
14035 11699 0
14035 11699 11708 0
14035 11699 11709 0
14035 11699 11711 0
14035 11700 0
14035 11700 11708 0
14035 11700 11709 0
14035 11700 11711 0
c (((aux1644 + aux1647 + aux1648)<=1)=tv=SATLiteral(14036))
-14036 11738 0
-14036 11732 11737 0
-14036 11733 0
-14036 11735 0
-14036 11723 11737 0
-14036 11723 11732 0
-14036 11723 11733 0
-14036 11723 11735 0
-14036 11724 0
-14036 11724 11732 0
-14036 11724 11733 0
-14036 11724 11735 0
14036 -11724 -11732 -11737 0
14036 -11723 -11733 -11737 0
14036 -11723 -11732 -11738 0
c ((1<=(aux1644 + aux1647 + aux1648))=tv=SATLiteral(14037))
-14037 -11723 -11732 -11737 0
14037 11737 0
14037 11732 0
14037 11733 0
14037 11735 0
14037 11723 0
14037 11723 11732 0
14037 11723 11733 0
14037 11723 11735 0
14037 11724 0
14037 11724 11732 0
14037 11724 11733 0
14037 11724 11735 0
c (((aux1650 + aux1653 + aux1654)<=1)=tv=SATLiteral(14038))
-14038 11762 0
-14038 11756 11761 0
-14038 11757 0
-14038 11759 0
-14038 11747 11761 0
-14038 11747 11756 0
-14038 11747 11757 0
-14038 11747 11759 0
-14038 11748 0
-14038 11748 11756 0
-14038 11748 11757 0
-14038 11748 11759 0
14038 -11748 -11756 -11761 0
14038 -11747 -11757 -11761 0
14038 -11747 -11756 -11762 0
c ((1<=(aux1650 + aux1653 + aux1654))=tv=SATLiteral(14039))
-14039 -11747 -11756 -11761 0
14039 11761 0
14039 11756 0
14039 11757 0
14039 11759 0
14039 11747 0
14039 11747 11756 0
14039 11747 11757 0
14039 11747 11759 0
14039 11748 0
14039 11748 11756 0
14039 11748 11757 0
14039 11748 11759 0
c (((aux1656 + aux1659 + aux1660)<=1)=tv=SATLiteral(14040))
-14040 11786 0
-14040 11780 11785 0
-14040 11781 0
-14040 11783 0
-14040 11771 11785 0
-14040 11771 11780 0
-14040 11771 11781 0
-14040 11771 11783 0
-14040 11772 0
-14040 11772 11780 0
-14040 11772 11781 0
-14040 11772 11783 0
14040 -11772 -11780 -11785 0
14040 -11771 -11781 -11785 0
14040 -11771 -11780 -11786 0
c ((1<=(aux1656 + aux1659 + aux1660))=tv=SATLiteral(14041))
-14041 -11771 -11780 -11785 0
14041 11785 0
14041 11780 0
14041 11781 0
14041 11783 0
14041 11771 0
14041 11771 11780 0
14041 11771 11781 0
14041 11771 11783 0
14041 11772 0
14041 11772 11780 0
14041 11772 11781 0
14041 11772 11783 0
c (((aux1662 + aux1665 + aux1666)<=1)=tv=SATLiteral(14042))
-14042 11810 0
-14042 11804 11809 0
-14042 11805 0
-14042 11807 0
-14042 11795 11809 0
-14042 11795 11804 0
-14042 11795 11805 0
-14042 11795 11807 0
-14042 11796 0
-14042 11796 11804 0
-14042 11796 11805 0
-14042 11796 11807 0
14042 -11796 -11804 -11809 0
14042 -11795 -11805 -11809 0
14042 -11795 -11804 -11810 0
c ((1<=(aux1662 + aux1665 + aux1666))=tv=SATLiteral(14043))
-14043 -11795 -11804 -11809 0
14043 11809 0
14043 11804 0
14043 11805 0
14043 11807 0
14043 11795 0
14043 11795 11804 0
14043 11795 11805 0
14043 11795 11807 0
14043 11796 0
14043 11796 11804 0
14043 11796 11805 0
14043 11796 11807 0
c (((aux1668 + aux1671 + aux1672)<=1)=tv=SATLiteral(14044))
-14044 11834 0
-14044 11828 11833 0
-14044 11829 0
-14044 11831 0
-14044 11819 11833 0
-14044 11819 11828 0
-14044 11819 11829 0
-14044 11819 11831 0
-14044 11820 0
-14044 11820 11828 0
-14044 11820 11829 0
-14044 11820 11831 0
14044 -11820 -11828 -11833 0
14044 -11819 -11829 -11833 0
14044 -11819 -11828 -11834 0
c ((1<=(aux1668 + aux1671 + aux1672))=tv=SATLiteral(14045))
-14045 -11819 -11828 -11833 0
14045 11833 0
14045 11828 0
14045 11829 0
14045 11831 0
14045 11819 0
14045 11819 11828 0
14045 11819 11829 0
14045 11819 11831 0
14045 11820 0
14045 11820 11828 0
14045 11820 11829 0
14045 11820 11831 0
c (((aux1674 + aux1677 + aux1678)<=1)=tv=SATLiteral(14046))
-14046 11858 0
-14046 11852 11857 0
-14046 11853 0
-14046 11855 0
-14046 11843 11857 0
-14046 11843 11852 0
-14046 11843 11853 0
-14046 11843 11855 0
-14046 11844 0
-14046 11844 11852 0
-14046 11844 11853 0
-14046 11844 11855 0
14046 -11844 -11852 -11857 0
14046 -11843 -11853 -11857 0
14046 -11843 -11852 -11858 0
c ((1<=(aux1674 + aux1677 + aux1678))=tv=SATLiteral(14047))
-14047 -11843 -11852 -11857 0
14047 11857 0
14047 11852 0
14047 11853 0
14047 11855 0
14047 11843 0
14047 11843 11852 0
14047 11843 11853 0
14047 11843 11855 0
14047 11844 0
14047 11844 11852 0
14047 11844 11853 0
14047 11844 11855 0
c (((aux1680 + aux1683 + aux1684)<=1)=tv=SATLiteral(14048))
-14048 11882 0
-14048 11876 11881 0
-14048 11877 0
-14048 11879 0
-14048 11867 11881 0
-14048 11867 11876 0
-14048 11867 11877 0
-14048 11867 11879 0
-14048 11868 0
-14048 11868 11876 0
-14048 11868 11877 0
-14048 11868 11879 0
14048 -11868 -11876 -11881 0
14048 -11867 -11877 -11881 0
14048 -11867 -11876 -11882 0
c ((1<=(aux1680 + aux1683 + aux1684))=tv=SATLiteral(14049))
-14049 -11867 -11876 -11881 0
14049 11881 0
14049 11876 0
14049 11877 0
14049 11879 0
14049 11867 0
14049 11867 11876 0
14049 11867 11877 0
14049 11867 11879 0
14049 11868 0
14049 11868 11876 0
14049 11868 11877 0
14049 11868 11879 0
c (((aux1686 + aux1689 + aux1690)<=1)=tv=SATLiteral(14050))
-14050 11906 0
-14050 11900 11905 0
-14050 11901 0
-14050 11903 0
-14050 11891 11905 0
-14050 11891 11900 0
-14050 11891 11901 0
-14050 11891 11903 0
-14050 11892 0
-14050 11892 11900 0
-14050 11892 11901 0
-14050 11892 11903 0
14050 -11892 -11900 -11905 0
14050 -11891 -11901 -11905 0
14050 -11891 -11900 -11906 0
c ((1<=(aux1686 + aux1689 + aux1690))=tv=SATLiteral(14051))
-14051 -11891 -11900 -11905 0
14051 11905 0
14051 11900 0
14051 11901 0
14051 11903 0
14051 11891 0
14051 11891 11900 0
14051 11891 11901 0
14051 11891 11903 0
14051 11892 0
14051 11892 11900 0
14051 11892 11901 0
14051 11892 11903 0
c (((aux1692 + aux1695 + aux1696)<=1)=tv=SATLiteral(14052))
-14052 11930 0
-14052 11924 11929 0
-14052 11925 0
-14052 11927 0
-14052 11915 11929 0
-14052 11915 11924 0
-14052 11915 11925 0
-14052 11915 11927 0
-14052 11916 0
-14052 11916 11924 0
-14052 11916 11925 0
-14052 11916 11927 0
14052 -11916 -11924 -11929 0
14052 -11915 -11925 -11929 0
14052 -11915 -11924 -11930 0
c ((1<=(aux1692 + aux1695 + aux1696))=tv=SATLiteral(14053))
-14053 -11915 -11924 -11929 0
14053 11929 0
14053 11924 0
14053 11925 0
14053 11927 0
14053 11915 0
14053 11915 11924 0
14053 11915 11925 0
14053 11915 11927 0
14053 11916 0
14053 11916 11924 0
14053 11916 11925 0
14053 11916 11927 0
c (((aux1698 + aux1701 + aux1702)<=1)=tv=SATLiteral(14054))
-14054 11954 0
-14054 11948 11953 0
-14054 11949 0
-14054 11951 0
-14054 11939 11953 0
-14054 11939 11948 0
-14054 11939 11949 0
-14054 11939 11951 0
-14054 11940 0
-14054 11940 11948 0
-14054 11940 11949 0
-14054 11940 11951 0
14054 -11940 -11948 -11953 0
14054 -11939 -11949 -11953 0
14054 -11939 -11948 -11954 0
c ((1<=(aux1698 + aux1701 + aux1702))=tv=SATLiteral(14055))
-14055 -11939 -11948 -11953 0
14055 11953 0
14055 11948 0
14055 11949 0
14055 11951 0
14055 11939 0
14055 11939 11948 0
14055 11939 11949 0
14055 11939 11951 0
14055 11940 0
14055 11940 11948 0
14055 11940 11949 0
14055 11940 11951 0
c (((aux1704 + aux1707 + aux1708)<=1)=tv=SATLiteral(14056))
-14056 11978 0
-14056 11972 11977 0
-14056 11973 0
-14056 11975 0
-14056 11963 11977 0
-14056 11963 11972 0
-14056 11963 11973 0
-14056 11963 11975 0
-14056 11964 0
-14056 11964 11972 0
-14056 11964 11973 0
-14056 11964 11975 0
14056 -11964 -11972 -11977 0
14056 -11963 -11973 -11977 0
14056 -11963 -11972 -11978 0
c ((1<=(aux1704 + aux1707 + aux1708))=tv=SATLiteral(14057))
-14057 -11963 -11972 -11977 0
14057 11977 0
14057 11972 0
14057 11973 0
14057 11975 0
14057 11963 0
14057 11963 11972 0
14057 11963 11973 0
14057 11963 11975 0
14057 11964 0
14057 11964 11972 0
14057 11964 11973 0
14057 11964 11975 0
c (((aux1710 + aux1713 + aux1714)<=1)=tv=SATLiteral(14058))
-14058 12002 0
-14058 11996 12001 0
-14058 11997 0
-14058 11999 0
-14058 11987 12001 0
-14058 11987 11996 0
-14058 11987 11997 0
-14058 11987 11999 0
-14058 11988 0
-14058 11988 11996 0
-14058 11988 11997 0
-14058 11988 11999 0
14058 -11988 -11996 -12001 0
14058 -11987 -11997 -12001 0
14058 -11987 -11996 -12002 0
c ((1<=(aux1710 + aux1713 + aux1714))=tv=SATLiteral(14059))
-14059 -11987 -11996 -12001 0
14059 12001 0
14059 11996 0
14059 11997 0
14059 11999 0
14059 11987 0
14059 11987 11996 0
14059 11987 11997 0
14059 11987 11999 0
14059 11988 0
14059 11988 11996 0
14059 11988 11997 0
14059 11988 11999 0
c (((aux1716 + aux1719 + aux1720)<=1)=tv=SATLiteral(14060))
-14060 12026 0
-14060 12020 12025 0
-14060 12021 0
-14060 12023 0
-14060 12011 12025 0
-14060 12011 12020 0
-14060 12011 12021 0
-14060 12011 12023 0
-14060 12012 0
-14060 12012 12020 0
-14060 12012 12021 0
-14060 12012 12023 0
14060 -12012 -12020 -12025 0
14060 -12011 -12021 -12025 0
14060 -12011 -12020 -12026 0
c ((1<=(aux1716 + aux1719 + aux1720))=tv=SATLiteral(14061))
-14061 -12011 -12020 -12025 0
14061 12025 0
14061 12020 0
14061 12021 0
14061 12023 0
14061 12011 0
14061 12011 12020 0
14061 12011 12021 0
14061 12011 12023 0
14061 12012 0
14061 12012 12020 0
14061 12012 12021 0
14061 12012 12023 0
c (((aux1722 + aux1725 + aux1726)<=1)=tv=SATLiteral(14062))
-14062 12050 0
-14062 12044 12049 0
-14062 12045 0
-14062 12047 0
-14062 12035 12049 0
-14062 12035 12044 0
-14062 12035 12045 0
-14062 12035 12047 0
-14062 12036 0
-14062 12036 12044 0
-14062 12036 12045 0
-14062 12036 12047 0
14062 -12036 -12044 -12049 0
14062 -12035 -12045 -12049 0
14062 -12035 -12044 -12050 0
c ((1<=(aux1722 + aux1725 + aux1726))=tv=SATLiteral(14063))
-14063 -12035 -12044 -12049 0
14063 12049 0
14063 12044 0
14063 12045 0
14063 12047 0
14063 12035 0
14063 12035 12044 0
14063 12035 12045 0
14063 12035 12047 0
14063 12036 0
14063 12036 12044 0
14063 12036 12045 0
14063 12036 12047 0
c (((aux1728 + aux1731 + aux1732)<=1)=tv=SATLiteral(14064))
-14064 12074 0
-14064 12068 12073 0
-14064 12069 0
-14064 12071 0
-14064 12059 12073 0
-14064 12059 12068 0
-14064 12059 12069 0
-14064 12059 12071 0
-14064 12060 0
-14064 12060 12068 0
-14064 12060 12069 0
-14064 12060 12071 0
14064 -12060 -12068 -12073 0
14064 -12059 -12069 -12073 0
14064 -12059 -12068 -12074 0
c ((1<=(aux1728 + aux1731 + aux1732))=tv=SATLiteral(14065))
-14065 -12059 -12068 -12073 0
14065 12073 0
14065 12068 0
14065 12069 0
14065 12071 0
14065 12059 0
14065 12059 12068 0
14065 12059 12069 0
14065 12059 12071 0
14065 12060 0
14065 12060 12068 0
14065 12060 12069 0
14065 12060 12071 0
c (((aux1734 + aux1737 + aux1738)<=1)=tv=SATLiteral(14066))
-14066 12098 0
-14066 12092 12097 0
-14066 12093 0
-14066 12095 0
-14066 12083 12097 0
-14066 12083 12092 0
-14066 12083 12093 0
-14066 12083 12095 0
-14066 12084 0
-14066 12084 12092 0
-14066 12084 12093 0
-14066 12084 12095 0
14066 -12084 -12092 -12097 0
14066 -12083 -12093 -12097 0
14066 -12083 -12092 -12098 0
c ((1<=(aux1734 + aux1737 + aux1738))=tv=SATLiteral(14067))
-14067 -12083 -12092 -12097 0
14067 12097 0
14067 12092 0
14067 12093 0
14067 12095 0
14067 12083 0
14067 12083 12092 0
14067 12083 12093 0
14067 12083 12095 0
14067 12084 0
14067 12084 12092 0
14067 12084 12093 0
14067 12084 12095 0
c (((aux1740 + aux1743 + aux1744)<=1)=tv=SATLiteral(14068))
-14068 12122 0
-14068 12116 12121 0
-14068 12117 0
-14068 12119 0
-14068 12107 12121 0
-14068 12107 12116 0
-14068 12107 12117 0
-14068 12107 12119 0
-14068 12108 0
-14068 12108 12116 0
-14068 12108 12117 0
-14068 12108 12119 0
14068 -12108 -12116 -12121 0
14068 -12107 -12117 -12121 0
14068 -12107 -12116 -12122 0
c ((1<=(aux1740 + aux1743 + aux1744))=tv=SATLiteral(14069))
-14069 -12107 -12116 -12121 0
14069 12121 0
14069 12116 0
14069 12117 0
14069 12119 0
14069 12107 0
14069 12107 12116 0
14069 12107 12117 0
14069 12107 12119 0
14069 12108 0
14069 12108 12116 0
14069 12108 12117 0
14069 12108 12119 0
c (((aux1746 + aux1749 + aux1750)<=1)=tv=SATLiteral(14070))
-14070 12146 0
-14070 12140 12145 0
-14070 12141 0
-14070 12143 0
-14070 12131 12145 0
-14070 12131 12140 0
-14070 12131 12141 0
-14070 12131 12143 0
-14070 12132 0
-14070 12132 12140 0
-14070 12132 12141 0
-14070 12132 12143 0
14070 -12132 -12140 -12145 0
14070 -12131 -12141 -12145 0
14070 -12131 -12140 -12146 0
c ((1<=(aux1746 + aux1749 + aux1750))=tv=SATLiteral(14071))
-14071 -12131 -12140 -12145 0
14071 12145 0
14071 12140 0
14071 12141 0
14071 12143 0
14071 12131 0
14071 12131 12140 0
14071 12131 12141 0
14071 12131 12143 0
14071 12132 0
14071 12132 12140 0
14071 12132 12141 0
14071 12132 12143 0
c (((aux1752 + aux1755 + aux1756)<=1)=tv=SATLiteral(14072))
-14072 12170 0
-14072 12164 12169 0
-14072 12165 0
-14072 12167 0
-14072 12155 12169 0
-14072 12155 12164 0
-14072 12155 12165 0
-14072 12155 12167 0
-14072 12156 0
-14072 12156 12164 0
-14072 12156 12165 0
-14072 12156 12167 0
14072 -12156 -12164 -12169 0
14072 -12155 -12165 -12169 0
14072 -12155 -12164 -12170 0
c ((1<=(aux1752 + aux1755 + aux1756))=tv=SATLiteral(14073))
-14073 -12155 -12164 -12169 0
14073 12169 0
14073 12164 0
14073 12165 0
14073 12167 0
14073 12155 0
14073 12155 12164 0
14073 12155 12165 0
14073 12155 12167 0
14073 12156 0
14073 12156 12164 0
14073 12156 12165 0
14073 12156 12167 0
c (((aux1758 + aux1761 + aux1762)<=1)=tv=SATLiteral(14074))
-14074 12194 0
-14074 12188 12193 0
-14074 12189 0
-14074 12191 0
-14074 12179 12193 0
-14074 12179 12188 0
-14074 12179 12189 0
-14074 12179 12191 0
-14074 12180 0
-14074 12180 12188 0
-14074 12180 12189 0
-14074 12180 12191 0
14074 -12180 -12188 -12193 0
14074 -12179 -12189 -12193 0
14074 -12179 -12188 -12194 0
c ((1<=(aux1758 + aux1761 + aux1762))=tv=SATLiteral(14075))
-14075 -12179 -12188 -12193 0
14075 12193 0
14075 12188 0
14075 12189 0
14075 12191 0
14075 12179 0
14075 12179 12188 0
14075 12179 12189 0
14075 12179 12191 0
14075 12180 0
14075 12180 12188 0
14075 12180 12189 0
14075 12180 12191 0
c (((aux1764 + aux1767 + aux1768)<=1)=tv=SATLiteral(14076))
-14076 12218 0
-14076 12212 12217 0
-14076 12213 0
-14076 12215 0
-14076 12203 12217 0
-14076 12203 12212 0
-14076 12203 12213 0
-14076 12203 12215 0
-14076 12204 0
-14076 12204 12212 0
-14076 12204 12213 0
-14076 12204 12215 0
14076 -12204 -12212 -12217 0
14076 -12203 -12213 -12217 0
14076 -12203 -12212 -12218 0
c ((1<=(aux1764 + aux1767 + aux1768))=tv=SATLiteral(14077))
-14077 -12203 -12212 -12217 0
14077 12217 0
14077 12212 0
14077 12213 0
14077 12215 0
14077 12203 0
14077 12203 12212 0
14077 12203 12213 0
14077 12203 12215 0
14077 12204 0
14077 12204 12212 0
14077 12204 12213 0
14077 12204 12215 0
c (((aux1770 + aux1773 + aux1774)<=1)=tv=SATLiteral(14078))
-14078 12242 0
-14078 12236 12241 0
-14078 12237 0
-14078 12239 0
-14078 12227 12241 0
-14078 12227 12236 0
-14078 12227 12237 0
-14078 12227 12239 0
-14078 12228 0
-14078 12228 12236 0
-14078 12228 12237 0
-14078 12228 12239 0
14078 -12228 -12236 -12241 0
14078 -12227 -12237 -12241 0
14078 -12227 -12236 -12242 0
c ((1<=(aux1770 + aux1773 + aux1774))=tv=SATLiteral(14079))
-14079 -12227 -12236 -12241 0
14079 12241 0
14079 12236 0
14079 12237 0
14079 12239 0
14079 12227 0
14079 12227 12236 0
14079 12227 12237 0
14079 12227 12239 0
14079 12228 0
14079 12228 12236 0
14079 12228 12237 0
14079 12228 12239 0
c (((aux1776 + aux1779 + aux1780)<=1)=tv=SATLiteral(14080))
-14080 12266 0
-14080 12260 12265 0
-14080 12261 0
-14080 12263 0
-14080 12251 12265 0
-14080 12251 12260 0
-14080 12251 12261 0
-14080 12251 12263 0
-14080 12252 0
-14080 12252 12260 0
-14080 12252 12261 0
-14080 12252 12263 0
14080 -12252 -12260 -12265 0
14080 -12251 -12261 -12265 0
14080 -12251 -12260 -12266 0
c ((1<=(aux1776 + aux1779 + aux1780))=tv=SATLiteral(14081))
-14081 -12251 -12260 -12265 0
14081 12265 0
14081 12260 0
14081 12261 0
14081 12263 0
14081 12251 0
14081 12251 12260 0
14081 12251 12261 0
14081 12251 12263 0
14081 12252 0
14081 12252 12260 0
14081 12252 12261 0
14081 12252 12263 0
c (((aux1782 + aux1785 + aux1786)<=1)=tv=SATLiteral(14082))
-14082 12290 0
-14082 12284 12289 0
-14082 12285 0
-14082 12287 0
-14082 12275 12289 0
-14082 12275 12284 0
-14082 12275 12285 0
-14082 12275 12287 0
-14082 12276 0
-14082 12276 12284 0
-14082 12276 12285 0
-14082 12276 12287 0
14082 -12276 -12284 -12289 0
14082 -12275 -12285 -12289 0
14082 -12275 -12284 -12290 0
c ((1<=(aux1782 + aux1785 + aux1786))=tv=SATLiteral(14083))
-14083 -12275 -12284 -12289 0
14083 12289 0
14083 12284 0
14083 12285 0
14083 12287 0
14083 12275 0
14083 12275 12284 0
14083 12275 12285 0
14083 12275 12287 0
14083 12276 0
14083 12276 12284 0
14083 12276 12285 0
14083 12276 12287 0
c (((aux1788 + aux1791 + aux1792)<=1)=tv=SATLiteral(14084))
-14084 12314 0
-14084 12308 12313 0
-14084 12309 0
-14084 12311 0
-14084 12299 12313 0
-14084 12299 12308 0
-14084 12299 12309 0
-14084 12299 12311 0
-14084 12300 0
-14084 12300 12308 0
-14084 12300 12309 0
-14084 12300 12311 0
14084 -12300 -12308 -12313 0
14084 -12299 -12309 -12313 0
14084 -12299 -12308 -12314 0
c ((1<=(aux1788 + aux1791 + aux1792))=tv=SATLiteral(14085))
-14085 -12299 -12308 -12313 0
14085 12313 0
14085 12308 0
14085 12309 0
14085 12311 0
14085 12299 0
14085 12299 12308 0
14085 12299 12309 0
14085 12299 12311 0
14085 12300 0
14085 12300 12308 0
14085 12300 12309 0
14085 12300 12311 0
c (((aux1794 + aux1797 + aux1798)<=1)=tv=SATLiteral(14086))
-14086 12338 0
-14086 12332 12337 0
-14086 12333 0
-14086 12335 0
-14086 12323 12337 0
-14086 12323 12332 0
-14086 12323 12333 0
-14086 12323 12335 0
-14086 12324 0
-14086 12324 12332 0
-14086 12324 12333 0
-14086 12324 12335 0
14086 -12324 -12332 -12337 0
14086 -12323 -12333 -12337 0
14086 -12323 -12332 -12338 0
c ((1<=(aux1794 + aux1797 + aux1798))=tv=SATLiteral(14087))
-14087 -12323 -12332 -12337 0
14087 12337 0
14087 12332 0
14087 12333 0
14087 12335 0
14087 12323 0
14087 12323 12332 0
14087 12323 12333 0
14087 12323 12335 0
14087 12324 0
14087 12324 12332 0
14087 12324 12333 0
14087 12324 12335 0
c (((aux1800 + aux1803 + aux1804)<=1)=tv=SATLiteral(14088))
-14088 12362 0
-14088 12356 12361 0
-14088 12357 0
-14088 12359 0
-14088 12347 12361 0
-14088 12347 12356 0
-14088 12347 12357 0
-14088 12347 12359 0
-14088 12348 0
-14088 12348 12356 0
-14088 12348 12357 0
-14088 12348 12359 0
14088 -12348 -12356 -12361 0
14088 -12347 -12357 -12361 0
14088 -12347 -12356 -12362 0
c ((1<=(aux1800 + aux1803 + aux1804))=tv=SATLiteral(14089))
-14089 -12347 -12356 -12361 0
14089 12361 0
14089 12356 0
14089 12357 0
14089 12359 0
14089 12347 0
14089 12347 12356 0
14089 12347 12357 0
14089 12347 12359 0
14089 12348 0
14089 12348 12356 0
14089 12348 12357 0
14089 12348 12359 0
c (((aux1806 + aux1809 + aux1810)<=1)=tv=SATLiteral(14090))
-14090 12386 0
-14090 12380 12385 0
-14090 12381 0
-14090 12383 0
-14090 12371 12385 0
-14090 12371 12380 0
-14090 12371 12381 0
-14090 12371 12383 0
-14090 12372 0
-14090 12372 12380 0
-14090 12372 12381 0
-14090 12372 12383 0
14090 -12372 -12380 -12385 0
14090 -12371 -12381 -12385 0
14090 -12371 -12380 -12386 0
c ((1<=(aux1806 + aux1809 + aux1810))=tv=SATLiteral(14091))
-14091 -12371 -12380 -12385 0
14091 12385 0
14091 12380 0
14091 12381 0
14091 12383 0
14091 12371 0
14091 12371 12380 0
14091 12371 12381 0
14091 12371 12383 0
14091 12372 0
14091 12372 12380 0
14091 12372 12381 0
14091 12372 12383 0
c (((aux1812 + aux1815 + aux1816)<=1)=tv=SATLiteral(14092))
-14092 12410 0
-14092 12404 12409 0
-14092 12405 0
-14092 12407 0
-14092 12395 12409 0
-14092 12395 12404 0
-14092 12395 12405 0
-14092 12395 12407 0
-14092 12396 0
-14092 12396 12404 0
-14092 12396 12405 0
-14092 12396 12407 0
14092 -12396 -12404 -12409 0
14092 -12395 -12405 -12409 0
14092 -12395 -12404 -12410 0
c ((1<=(aux1812 + aux1815 + aux1816))=tv=SATLiteral(14093))
-14093 -12395 -12404 -12409 0
14093 12409 0
14093 12404 0
14093 12405 0
14093 12407 0
14093 12395 0
14093 12395 12404 0
14093 12395 12405 0
14093 12395 12407 0
14093 12396 0
14093 12396 12404 0
14093 12396 12405 0
14093 12396 12407 0
c (((aux1818 + aux1821 + aux1822)<=1)=tv=SATLiteral(14094))
-14094 12434 0
-14094 12428 12433 0
-14094 12429 0
-14094 12431 0
-14094 12419 12433 0
-14094 12419 12428 0
-14094 12419 12429 0
-14094 12419 12431 0
-14094 12420 0
-14094 12420 12428 0
-14094 12420 12429 0
-14094 12420 12431 0
14094 -12420 -12428 -12433 0
14094 -12419 -12429 -12433 0
14094 -12419 -12428 -12434 0
c ((1<=(aux1818 + aux1821 + aux1822))=tv=SATLiteral(14095))
-14095 -12419 -12428 -12433 0
14095 12433 0
14095 12428 0
14095 12429 0
14095 12431 0
14095 12419 0
14095 12419 12428 0
14095 12419 12429 0
14095 12419 12431 0
14095 12420 0
14095 12420 12428 0
14095 12420 12429 0
14095 12420 12431 0
c (((aux1824 + aux1827 + aux1828)<=1)=tv=SATLiteral(14096))
-14096 12458 0
-14096 12452 12457 0
-14096 12453 0
-14096 12455 0
-14096 12443 12457 0
-14096 12443 12452 0
-14096 12443 12453 0
-14096 12443 12455 0
-14096 12444 0
-14096 12444 12452 0
-14096 12444 12453 0
-14096 12444 12455 0
14096 -12444 -12452 -12457 0
14096 -12443 -12453 -12457 0
14096 -12443 -12452 -12458 0
c ((1<=(aux1824 + aux1827 + aux1828))=tv=SATLiteral(14097))
-14097 -12443 -12452 -12457 0
14097 12457 0
14097 12452 0
14097 12453 0
14097 12455 0
14097 12443 0
14097 12443 12452 0
14097 12443 12453 0
14097 12443 12455 0
14097 12444 0
14097 12444 12452 0
14097 12444 12453 0
14097 12444 12455 0
c (((aux1830 + aux1833 + aux1834)<=1)=tv=SATLiteral(14098))
-14098 12482 0
-14098 12476 12481 0
-14098 12477 0
-14098 12479 0
-14098 12467 12481 0
-14098 12467 12476 0
-14098 12467 12477 0
-14098 12467 12479 0
-14098 12468 0
-14098 12468 12476 0
-14098 12468 12477 0
-14098 12468 12479 0
14098 -12468 -12476 -12481 0
14098 -12467 -12477 -12481 0
14098 -12467 -12476 -12482 0
c ((1<=(aux1830 + aux1833 + aux1834))=tv=SATLiteral(14099))
-14099 -12467 -12476 -12481 0
14099 12481 0
14099 12476 0
14099 12477 0
14099 12479 0
14099 12467 0
14099 12467 12476 0
14099 12467 12477 0
14099 12467 12479 0
14099 12468 0
14099 12468 12476 0
14099 12468 12477 0
14099 12468 12479 0
c (((aux1836 + aux1839 + aux1840)<=1)=tv=SATLiteral(14100))
-14100 12506 0
-14100 12500 12505 0
-14100 12501 0
-14100 12503 0
-14100 12491 12505 0
-14100 12491 12500 0
-14100 12491 12501 0
-14100 12491 12503 0
-14100 12492 0
-14100 12492 12500 0
-14100 12492 12501 0
-14100 12492 12503 0
14100 -12492 -12500 -12505 0
14100 -12491 -12501 -12505 0
14100 -12491 -12500 -12506 0
c ((1<=(aux1836 + aux1839 + aux1840))=tv=SATLiteral(14101))
-14101 -12491 -12500 -12505 0
14101 12505 0
14101 12500 0
14101 12501 0
14101 12503 0
14101 12491 0
14101 12491 12500 0
14101 12491 12501 0
14101 12491 12503 0
14101 12492 0
14101 12492 12500 0
14101 12492 12501 0
14101 12492 12503 0
c (((aux1842 + aux1845 + aux1846)<=1)=tv=SATLiteral(14102))
-14102 12530 0
-14102 12524 12529 0
-14102 12525 0
-14102 12527 0
-14102 12515 12529 0
-14102 12515 12524 0
-14102 12515 12525 0
-14102 12515 12527 0
-14102 12516 0
-14102 12516 12524 0
-14102 12516 12525 0
-14102 12516 12527 0
14102 -12516 -12524 -12529 0
14102 -12515 -12525 -12529 0
14102 -12515 -12524 -12530 0
c ((1<=(aux1842 + aux1845 + aux1846))=tv=SATLiteral(14103))
-14103 -12515 -12524 -12529 0
14103 12529 0
14103 12524 0
14103 12525 0
14103 12527 0
14103 12515 0
14103 12515 12524 0
14103 12515 12525 0
14103 12515 12527 0
14103 12516 0
14103 12516 12524 0
14103 12516 12525 0
14103 12516 12527 0
c (((aux1848 + aux1851 + aux1852)<=1)=tv=SATLiteral(14104))
-14104 12554 0
-14104 12548 12553 0
-14104 12549 0
-14104 12551 0
-14104 12539 12553 0
-14104 12539 12548 0
-14104 12539 12549 0
-14104 12539 12551 0
-14104 12540 0
-14104 12540 12548 0
-14104 12540 12549 0
-14104 12540 12551 0
14104 -12540 -12548 -12553 0
14104 -12539 -12549 -12553 0
14104 -12539 -12548 -12554 0
c ((1<=(aux1848 + aux1851 + aux1852))=tv=SATLiteral(14105))
-14105 -12539 -12548 -12553 0
14105 12553 0
14105 12548 0
14105 12549 0
14105 12551 0
14105 12539 0
14105 12539 12548 0
14105 12539 12549 0
14105 12539 12551 0
14105 12540 0
14105 12540 12548 0
14105 12540 12549 0
14105 12540 12551 0
c (((aux1854 + aux1857 + aux1858)<=1)=tv=SATLiteral(14106))
-14106 12578 0
-14106 12572 12577 0
-14106 12573 0
-14106 12575 0
-14106 12563 12577 0
-14106 12563 12572 0
-14106 12563 12573 0
-14106 12563 12575 0
-14106 12564 0
-14106 12564 12572 0
-14106 12564 12573 0
-14106 12564 12575 0
14106 -12564 -12572 -12577 0
14106 -12563 -12573 -12577 0
14106 -12563 -12572 -12578 0
c ((1<=(aux1854 + aux1857 + aux1858))=tv=SATLiteral(14107))
-14107 -12563 -12572 -12577 0
14107 12577 0
14107 12572 0
14107 12573 0
14107 12575 0
14107 12563 0
14107 12563 12572 0
14107 12563 12573 0
14107 12563 12575 0
14107 12564 0
14107 12564 12572 0
14107 12564 12573 0
14107 12564 12575 0
c (((aux1860 + aux1863 + aux1864)<=1)=tv=SATLiteral(14108))
-14108 12602 0
-14108 12596 12601 0
-14108 12597 0
-14108 12599 0
-14108 12587 12601 0
-14108 12587 12596 0
-14108 12587 12597 0
-14108 12587 12599 0
-14108 12588 0
-14108 12588 12596 0
-14108 12588 12597 0
-14108 12588 12599 0
14108 -12588 -12596 -12601 0
14108 -12587 -12597 -12601 0
14108 -12587 -12596 -12602 0
c ((1<=(aux1860 + aux1863 + aux1864))=tv=SATLiteral(14109))
-14109 -12587 -12596 -12601 0
14109 12601 0
14109 12596 0
14109 12597 0
14109 12599 0
14109 12587 0
14109 12587 12596 0
14109 12587 12597 0
14109 12587 12599 0
14109 12588 0
14109 12588 12596 0
14109 12588 12597 0
14109 12588 12599 0
c (((aux1866 + aux1869 + aux1870)<=1)=tv=SATLiteral(14110))
-14110 12626 0
-14110 12620 12625 0
-14110 12621 0
-14110 12623 0
-14110 12611 12625 0
-14110 12611 12620 0
-14110 12611 12621 0
-14110 12611 12623 0
-14110 12612 0
-14110 12612 12620 0
-14110 12612 12621 0
-14110 12612 12623 0
14110 -12612 -12620 -12625 0
14110 -12611 -12621 -12625 0
14110 -12611 -12620 -12626 0
c ((1<=(aux1866 + aux1869 + aux1870))=tv=SATLiteral(14111))
-14111 -12611 -12620 -12625 0
14111 12625 0
14111 12620 0
14111 12621 0
14111 12623 0
14111 12611 0
14111 12611 12620 0
14111 12611 12621 0
14111 12611 12623 0
14111 12612 0
14111 12612 12620 0
14111 12612 12621 0
14111 12612 12623 0
c (((aux1872 + aux1875 + aux1876)<=1)=tv=SATLiteral(14112))
-14112 12650 0
-14112 12644 12649 0
-14112 12645 0
-14112 12647 0
-14112 12635 12649 0
-14112 12635 12644 0
-14112 12635 12645 0
-14112 12635 12647 0
-14112 12636 0
-14112 12636 12644 0
-14112 12636 12645 0
-14112 12636 12647 0
14112 -12636 -12644 -12649 0
14112 -12635 -12645 -12649 0
14112 -12635 -12644 -12650 0
c ((1<=(aux1872 + aux1875 + aux1876))=tv=SATLiteral(14113))
-14113 -12635 -12644 -12649 0
14113 12649 0
14113 12644 0
14113 12645 0
14113 12647 0
14113 12635 0
14113 12635 12644 0
14113 12635 12645 0
14113 12635 12647 0
14113 12636 0
14113 12636 12644 0
14113 12636 12645 0
14113 12636 12647 0
c (((aux1878 + aux1881 + aux1882)<=1)=tv=SATLiteral(14114))
-14114 12674 0
-14114 12668 12673 0
-14114 12669 0
-14114 12671 0
-14114 12659 12673 0
-14114 12659 12668 0
-14114 12659 12669 0
-14114 12659 12671 0
-14114 12660 0
-14114 12660 12668 0
-14114 12660 12669 0
-14114 12660 12671 0
14114 -12660 -12668 -12673 0
14114 -12659 -12669 -12673 0
14114 -12659 -12668 -12674 0
c ((1<=(aux1878 + aux1881 + aux1882))=tv=SATLiteral(14115))
-14115 -12659 -12668 -12673 0
14115 12673 0
14115 12668 0
14115 12669 0
14115 12671 0
14115 12659 0
14115 12659 12668 0
14115 12659 12669 0
14115 12659 12671 0
14115 12660 0
14115 12660 12668 0
14115 12660 12669 0
14115 12660 12671 0
c (((aux1884 + aux1887 + aux1888)<=1)=tv=SATLiteral(14116))
-14116 12698 0
-14116 12692 12697 0
-14116 12693 0
-14116 12695 0
-14116 12683 12697 0
-14116 12683 12692 0
-14116 12683 12693 0
-14116 12683 12695 0
-14116 12684 0
-14116 12684 12692 0
-14116 12684 12693 0
-14116 12684 12695 0
14116 -12684 -12692 -12697 0
14116 -12683 -12693 -12697 0
14116 -12683 -12692 -12698 0
c ((1<=(aux1884 + aux1887 + aux1888))=tv=SATLiteral(14117))
-14117 -12683 -12692 -12697 0
14117 12697 0
14117 12692 0
14117 12693 0
14117 12695 0
14117 12683 0
14117 12683 12692 0
14117 12683 12693 0
14117 12683 12695 0
14117 12684 0
14117 12684 12692 0
14117 12684 12693 0
14117 12684 12695 0
c (((aux1890 + aux1893 + aux1894)<=1)=tv=SATLiteral(14118))
-14118 12722 0
-14118 12716 12721 0
-14118 12717 0
-14118 12719 0
-14118 12707 12721 0
-14118 12707 12716 0
-14118 12707 12717 0
-14118 12707 12719 0
-14118 12708 0
-14118 12708 12716 0
-14118 12708 12717 0
-14118 12708 12719 0
14118 -12708 -12716 -12721 0
14118 -12707 -12717 -12721 0
14118 -12707 -12716 -12722 0
c ((1<=(aux1890 + aux1893 + aux1894))=tv=SATLiteral(14119))
-14119 -12707 -12716 -12721 0
14119 12721 0
14119 12716 0
14119 12717 0
14119 12719 0
14119 12707 0
14119 12707 12716 0
14119 12707 12717 0
14119 12707 12719 0
14119 12708 0
14119 12708 12716 0
14119 12708 12717 0
14119 12708 12719 0
c (((aux1896 + aux1899 + aux1900)<=1)=tv=SATLiteral(14120))
-14120 12746 0
-14120 12740 12745 0
-14120 12741 0
-14120 12743 0
-14120 12731 12745 0
-14120 12731 12740 0
-14120 12731 12741 0
-14120 12731 12743 0
-14120 12732 0
-14120 12732 12740 0
-14120 12732 12741 0
-14120 12732 12743 0
14120 -12732 -12740 -12745 0
14120 -12731 -12741 -12745 0
14120 -12731 -12740 -12746 0
c ((1<=(aux1896 + aux1899 + aux1900))=tv=SATLiteral(14121))
-14121 -12731 -12740 -12745 0
14121 12745 0
14121 12740 0
14121 12741 0
14121 12743 0
14121 12731 0
14121 12731 12740 0
14121 12731 12741 0
14121 12731 12743 0
14121 12732 0
14121 12732 12740 0
14121 12732 12741 0
14121 12732 12743 0
c (((aux1902 + aux1905 + aux1906)<=1)=tv=SATLiteral(14122))
-14122 12770 0
-14122 12764 12769 0
-14122 12765 0
-14122 12767 0
-14122 12755 12769 0
-14122 12755 12764 0
-14122 12755 12765 0
-14122 12755 12767 0
-14122 12756 0
-14122 12756 12764 0
-14122 12756 12765 0
-14122 12756 12767 0
14122 -12756 -12764 -12769 0
14122 -12755 -12765 -12769 0
14122 -12755 -12764 -12770 0
c ((1<=(aux1902 + aux1905 + aux1906))=tv=SATLiteral(14123))
-14123 -12755 -12764 -12769 0
14123 12769 0
14123 12764 0
14123 12765 0
14123 12767 0
14123 12755 0
14123 12755 12764 0
14123 12755 12765 0
14123 12755 12767 0
14123 12756 0
14123 12756 12764 0
14123 12756 12765 0
14123 12756 12767 0
c (((aux1908 + aux1911 + aux1912)<=1)=tv=SATLiteral(14124))
-14124 12794 0
-14124 12788 12793 0
-14124 12789 0
-14124 12791 0
-14124 12779 12793 0
-14124 12779 12788 0
-14124 12779 12789 0
-14124 12779 12791 0
-14124 12780 0
-14124 12780 12788 0
-14124 12780 12789 0
-14124 12780 12791 0
14124 -12780 -12788 -12793 0
14124 -12779 -12789 -12793 0
14124 -12779 -12788 -12794 0
c ((1<=(aux1908 + aux1911 + aux1912))=tv=SATLiteral(14125))
-14125 -12779 -12788 -12793 0
14125 12793 0
14125 12788 0
14125 12789 0
14125 12791 0
14125 12779 0
14125 12779 12788 0
14125 12779 12789 0
14125 12779 12791 0
14125 12780 0
14125 12780 12788 0
14125 12780 12789 0
14125 12780 12791 0
c (((aux1914 + aux1917 + aux1918)<=1)=tv=SATLiteral(14126))
-14126 12818 0
-14126 12812 12817 0
-14126 12813 0
-14126 12815 0
-14126 12803 12817 0
-14126 12803 12812 0
-14126 12803 12813 0
-14126 12803 12815 0
-14126 12804 0
-14126 12804 12812 0
-14126 12804 12813 0
-14126 12804 12815 0
14126 -12804 -12812 -12817 0
14126 -12803 -12813 -12817 0
14126 -12803 -12812 -12818 0
c ((1<=(aux1914 + aux1917 + aux1918))=tv=SATLiteral(14127))
-14127 -12803 -12812 -12817 0
14127 12817 0
14127 12812 0
14127 12813 0
14127 12815 0
14127 12803 0
14127 12803 12812 0
14127 12803 12813 0
14127 12803 12815 0
14127 12804 0
14127 12804 12812 0
14127 12804 12813 0
14127 12804 12815 0
c (((aux1920 + aux1923 + aux1924)<=1)=tv=SATLiteral(14128))
-14128 12842 0
-14128 12836 12841 0
-14128 12837 0
-14128 12839 0
-14128 12827 12841 0
-14128 12827 12836 0
-14128 12827 12837 0
-14128 12827 12839 0
-14128 12828 0
-14128 12828 12836 0
-14128 12828 12837 0
-14128 12828 12839 0
14128 -12828 -12836 -12841 0
14128 -12827 -12837 -12841 0
14128 -12827 -12836 -12842 0
c ((1<=(aux1920 + aux1923 + aux1924))=tv=SATLiteral(14129))
-14129 -12827 -12836 -12841 0
14129 12841 0
14129 12836 0
14129 12837 0
14129 12839 0
14129 12827 0
14129 12827 12836 0
14129 12827 12837 0
14129 12827 12839 0
14129 12828 0
14129 12828 12836 0
14129 12828 12837 0
14129 12828 12839 0
c (((aux1926 + aux1929 + aux1930)<=1)=tv=SATLiteral(14130))
-14130 12866 0
-14130 12860 12865 0
-14130 12861 0
-14130 12863 0
-14130 12851 12865 0
-14130 12851 12860 0
-14130 12851 12861 0
-14130 12851 12863 0
-14130 12852 0
-14130 12852 12860 0
-14130 12852 12861 0
-14130 12852 12863 0
14130 -12852 -12860 -12865 0
14130 -12851 -12861 -12865 0
14130 -12851 -12860 -12866 0
c ((1<=(aux1926 + aux1929 + aux1930))=tv=SATLiteral(14131))
-14131 -12851 -12860 -12865 0
14131 12865 0
14131 12860 0
14131 12861 0
14131 12863 0
14131 12851 0
14131 12851 12860 0
14131 12851 12861 0
14131 12851 12863 0
14131 12852 0
14131 12852 12860 0
14131 12852 12861 0
14131 12852 12863 0
c (((aux1932 + aux1935 + aux1936)<=1)=tv=SATLiteral(14132))
-14132 12890 0
-14132 12884 12889 0
-14132 12885 0
-14132 12887 0
-14132 12875 12889 0
-14132 12875 12884 0
-14132 12875 12885 0
-14132 12875 12887 0
-14132 12876 0
-14132 12876 12884 0
-14132 12876 12885 0
-14132 12876 12887 0
14132 -12876 -12884 -12889 0
14132 -12875 -12885 -12889 0
14132 -12875 -12884 -12890 0
c ((1<=(aux1932 + aux1935 + aux1936))=tv=SATLiteral(14133))
-14133 -12875 -12884 -12889 0
14133 12889 0
14133 12884 0
14133 12885 0
14133 12887 0
14133 12875 0
14133 12875 12884 0
14133 12875 12885 0
14133 12875 12887 0
14133 12876 0
14133 12876 12884 0
14133 12876 12885 0
14133 12876 12887 0
c (((aux1938 + aux1941 + aux1942)<=1)=tv=SATLiteral(14134))
-14134 12914 0
-14134 12908 12913 0
-14134 12909 0
-14134 12911 0
-14134 12899 12913 0
-14134 12899 12908 0
-14134 12899 12909 0
-14134 12899 12911 0
-14134 12900 0
-14134 12900 12908 0
-14134 12900 12909 0
-14134 12900 12911 0
14134 -12900 -12908 -12913 0
14134 -12899 -12909 -12913 0
14134 -12899 -12908 -12914 0
c ((1<=(aux1938 + aux1941 + aux1942))=tv=SATLiteral(14135))
-14135 -12899 -12908 -12913 0
14135 12913 0
14135 12908 0
14135 12909 0
14135 12911 0
14135 12899 0
14135 12899 12908 0
14135 12899 12909 0
14135 12899 12911 0
14135 12900 0
14135 12900 12908 0
14135 12900 12909 0
14135 12900 12911 0
c (((aux1944 + aux1947 + aux1948)<=1)=tv=SATLiteral(14136))
-14136 12938 0
-14136 12932 12937 0
-14136 12933 0
-14136 12935 0
-14136 12923 12937 0
-14136 12923 12932 0
-14136 12923 12933 0
-14136 12923 12935 0
-14136 12924 0
-14136 12924 12932 0
-14136 12924 12933 0
-14136 12924 12935 0
14136 -12924 -12932 -12937 0
14136 -12923 -12933 -12937 0
14136 -12923 -12932 -12938 0
c ((1<=(aux1944 + aux1947 + aux1948))=tv=SATLiteral(14137))
-14137 -12923 -12932 -12937 0
14137 12937 0
14137 12932 0
14137 12933 0
14137 12935 0
14137 12923 0
14137 12923 12932 0
14137 12923 12933 0
14137 12923 12935 0
14137 12924 0
14137 12924 12932 0
14137 12924 12933 0
14137 12924 12935 0
c (((aux1950 + aux1953 + aux1954)<=1)=tv=SATLiteral(14138))
-14138 12962 0
-14138 12956 12961 0
-14138 12957 0
-14138 12959 0
-14138 12947 12961 0
-14138 12947 12956 0
-14138 12947 12957 0
-14138 12947 12959 0
-14138 12948 0
-14138 12948 12956 0
-14138 12948 12957 0
-14138 12948 12959 0
14138 -12948 -12956 -12961 0
14138 -12947 -12957 -12961 0
14138 -12947 -12956 -12962 0
c ((1<=(aux1950 + aux1953 + aux1954))=tv=SATLiteral(14139))
-14139 -12947 -12956 -12961 0
14139 12961 0
14139 12956 0
14139 12957 0
14139 12959 0
14139 12947 0
14139 12947 12956 0
14139 12947 12957 0
14139 12947 12959 0
14139 12948 0
14139 12948 12956 0
14139 12948 12957 0
14139 12948 12959 0
c (((aux1956 + aux1959 + aux1960)<=1)=tv=SATLiteral(14140))
-14140 12986 0
-14140 12980 12985 0
-14140 12981 0
-14140 12983 0
-14140 12971 12985 0
-14140 12971 12980 0
-14140 12971 12981 0
-14140 12971 12983 0
-14140 12972 0
-14140 12972 12980 0
-14140 12972 12981 0
-14140 12972 12983 0
14140 -12972 -12980 -12985 0
14140 -12971 -12981 -12985 0
14140 -12971 -12980 -12986 0
c ((1<=(aux1956 + aux1959 + aux1960))=tv=SATLiteral(14141))
-14141 -12971 -12980 -12985 0
14141 12985 0
14141 12980 0
14141 12981 0
14141 12983 0
14141 12971 0
14141 12971 12980 0
14141 12971 12981 0
14141 12971 12983 0
14141 12972 0
14141 12972 12980 0
14141 12972 12981 0
14141 12972 12983 0
c (((aux1962 + aux1965 + aux1966)<=1)=tv=SATLiteral(14142))
-14142 13010 0
-14142 13004 13009 0
-14142 13005 0
-14142 13007 0
-14142 12995 13009 0
-14142 12995 13004 0
-14142 12995 13005 0
-14142 12995 13007 0
-14142 12996 0
-14142 12996 13004 0
-14142 12996 13005 0
-14142 12996 13007 0
14142 -12996 -13004 -13009 0
14142 -12995 -13005 -13009 0
14142 -12995 -13004 -13010 0
c ((1<=(aux1962 + aux1965 + aux1966))=tv=SATLiteral(14143))
-14143 -12995 -13004 -13009 0
14143 13009 0
14143 13004 0
14143 13005 0
14143 13007 0
14143 12995 0
14143 12995 13004 0
14143 12995 13005 0
14143 12995 13007 0
14143 12996 0
14143 12996 13004 0
14143 12996 13005 0
14143 12996 13007 0
c (((aux1968 + aux1971 + aux1972)<=1)=tv=SATLiteral(14144))
-14144 13034 0
-14144 13028 13033 0
-14144 13029 0
-14144 13031 0
-14144 13019 13033 0
-14144 13019 13028 0
-14144 13019 13029 0
-14144 13019 13031 0
-14144 13020 0
-14144 13020 13028 0
-14144 13020 13029 0
-14144 13020 13031 0
14144 -13020 -13028 -13033 0
14144 -13019 -13029 -13033 0
14144 -13019 -13028 -13034 0
c ((1<=(aux1968 + aux1971 + aux1972))=tv=SATLiteral(14145))
-14145 -13019 -13028 -13033 0
14145 13033 0
14145 13028 0
14145 13029 0
14145 13031 0
14145 13019 0
14145 13019 13028 0
14145 13019 13029 0
14145 13019 13031 0
14145 13020 0
14145 13020 13028 0
14145 13020 13029 0
14145 13020 13031 0
c (((aux1974 + aux1977 + aux1978)<=1)=tv=SATLiteral(14146))
-14146 13058 0
-14146 13052 13057 0
-14146 13053 0
-14146 13055 0
-14146 13043 13057 0
-14146 13043 13052 0
-14146 13043 13053 0
-14146 13043 13055 0
-14146 13044 0
-14146 13044 13052 0
-14146 13044 13053 0
-14146 13044 13055 0
14146 -13044 -13052 -13057 0
14146 -13043 -13053 -13057 0
14146 -13043 -13052 -13058 0
c ((1<=(aux1974 + aux1977 + aux1978))=tv=SATLiteral(14147))
-14147 -13043 -13052 -13057 0
14147 13057 0
14147 13052 0
14147 13053 0
14147 13055 0
14147 13043 0
14147 13043 13052 0
14147 13043 13053 0
14147 13043 13055 0
14147 13044 0
14147 13044 13052 0
14147 13044 13053 0
14147 13044 13055 0
c (((aux1980 + aux1983 + aux1984)<=1)=tv=SATLiteral(14148))
-14148 13082 0
-14148 13076 13081 0
-14148 13077 0
-14148 13079 0
-14148 13067 13081 0
-14148 13067 13076 0
-14148 13067 13077 0
-14148 13067 13079 0
-14148 13068 0
-14148 13068 13076 0
-14148 13068 13077 0
-14148 13068 13079 0
14148 -13068 -13076 -13081 0
14148 -13067 -13077 -13081 0
14148 -13067 -13076 -13082 0
c ((1<=(aux1980 + aux1983 + aux1984))=tv=SATLiteral(14149))
-14149 -13067 -13076 -13081 0
14149 13081 0
14149 13076 0
14149 13077 0
14149 13079 0
14149 13067 0
14149 13067 13076 0
14149 13067 13077 0
14149 13067 13079 0
14149 13068 0
14149 13068 13076 0
14149 13068 13077 0
14149 13068 13079 0
c (((aux1986 + aux1989 + aux1990)<=1)=tv=SATLiteral(14150))
-14150 13106 0
-14150 13100 13105 0
-14150 13101 0
-14150 13103 0
-14150 13091 13105 0
-14150 13091 13100 0
-14150 13091 13101 0
-14150 13091 13103 0
-14150 13092 0
-14150 13092 13100 0
-14150 13092 13101 0
-14150 13092 13103 0
14150 -13092 -13100 -13105 0
14150 -13091 -13101 -13105 0
14150 -13091 -13100 -13106 0
c ((1<=(aux1986 + aux1989 + aux1990))=tv=SATLiteral(14151))
-14151 -13091 -13100 -13105 0
14151 13105 0
14151 13100 0
14151 13101 0
14151 13103 0
14151 13091 0
14151 13091 13100 0
14151 13091 13101 0
14151 13091 13103 0
14151 13092 0
14151 13092 13100 0
14151 13092 13101 0
14151 13092 13103 0
c (((aux1992 + aux1995 + aux1996)<=1)=tv=SATLiteral(14152))
-14152 13130 0
-14152 13124 13129 0
-14152 13125 0
-14152 13127 0
-14152 13115 13129 0
-14152 13115 13124 0
-14152 13115 13125 0
-14152 13115 13127 0
-14152 13116 0
-14152 13116 13124 0
-14152 13116 13125 0
-14152 13116 13127 0
14152 -13116 -13124 -13129 0
14152 -13115 -13125 -13129 0
14152 -13115 -13124 -13130 0
c ((1<=(aux1992 + aux1995 + aux1996))=tv=SATLiteral(14153))
-14153 -13115 -13124 -13129 0
14153 13129 0
14153 13124 0
14153 13125 0
14153 13127 0
14153 13115 0
14153 13115 13124 0
14153 13115 13125 0
14153 13115 13127 0
14153 13116 0
14153 13116 13124 0
14153 13116 13125 0
14153 13116 13127 0
c (((aux1998 + aux2001 + aux2002)<=1)=tv=SATLiteral(14154))
-14154 13154 0
-14154 13148 13153 0
-14154 13149 0
-14154 13151 0
-14154 13139 13153 0
-14154 13139 13148 0
-14154 13139 13149 0
-14154 13139 13151 0
-14154 13140 0
-14154 13140 13148 0
-14154 13140 13149 0
-14154 13140 13151 0
14154 -13140 -13148 -13153 0
14154 -13139 -13149 -13153 0
14154 -13139 -13148 -13154 0
c ((1<=(aux1998 + aux2001 + aux2002))=tv=SATLiteral(14155))
-14155 -13139 -13148 -13153 0
14155 13153 0
14155 13148 0
14155 13149 0
14155 13151 0
14155 13139 0
14155 13139 13148 0
14155 13139 13149 0
14155 13139 13151 0
14155 13140 0
14155 13140 13148 0
14155 13140 13149 0
14155 13140 13151 0
c (((aux2004 + aux2007 + aux2008)<=1)=tv=SATLiteral(14156))
-14156 13178 0
-14156 13172 13177 0
-14156 13173 0
-14156 13175 0
-14156 13163 13177 0
-14156 13163 13172 0
-14156 13163 13173 0
-14156 13163 13175 0
-14156 13164 0
-14156 13164 13172 0
-14156 13164 13173 0
-14156 13164 13175 0
14156 -13164 -13172 -13177 0
14156 -13163 -13173 -13177 0
14156 -13163 -13172 -13178 0
c ((1<=(aux2004 + aux2007 + aux2008))=tv=SATLiteral(14157))
-14157 -13163 -13172 -13177 0
14157 13177 0
14157 13172 0
14157 13173 0
14157 13175 0
14157 13163 0
14157 13163 13172 0
14157 13163 13173 0
14157 13163 13175 0
14157 13164 0
14157 13164 13172 0
14157 13164 13173 0
14157 13164 13175 0
c (((aux2010 + aux2013 + aux2014)<=1)=tv=SATLiteral(14158))
-14158 13202 0
-14158 13196 13201 0
-14158 13197 0
-14158 13199 0
-14158 13187 13201 0
-14158 13187 13196 0
-14158 13187 13197 0
-14158 13187 13199 0
-14158 13188 0
-14158 13188 13196 0
-14158 13188 13197 0
-14158 13188 13199 0
14158 -13188 -13196 -13201 0
14158 -13187 -13197 -13201 0
14158 -13187 -13196 -13202 0
c ((1<=(aux2010 + aux2013 + aux2014))=tv=SATLiteral(14159))
-14159 -13187 -13196 -13201 0
14159 13201 0
14159 13196 0
14159 13197 0
14159 13199 0
14159 13187 0
14159 13187 13196 0
14159 13187 13197 0
14159 13187 13199 0
14159 13188 0
14159 13188 13196 0
14159 13188 13197 0
14159 13188 13199 0
c (((aux2016 + aux2019 + aux2020)<=1)=tv=SATLiteral(14160))
-14160 13226 0
-14160 13220 13225 0
-14160 13221 0
-14160 13223 0
-14160 13211 13225 0
-14160 13211 13220 0
-14160 13211 13221 0
-14160 13211 13223 0
-14160 13212 0
-14160 13212 13220 0
-14160 13212 13221 0
-14160 13212 13223 0
14160 -13212 -13220 -13225 0
14160 -13211 -13221 -13225 0
14160 -13211 -13220 -13226 0
c ((1<=(aux2016 + aux2019 + aux2020))=tv=SATLiteral(14161))
-14161 -13211 -13220 -13225 0
14161 13225 0
14161 13220 0
14161 13221 0
14161 13223 0
14161 13211 0
14161 13211 13220 0
14161 13211 13221 0
14161 13211 13223 0
14161 13212 0
14161 13212 13220 0
14161 13212 13221 0
14161 13212 13223 0
c (((aux2022 + aux2025 + aux2026)<=1)=tv=SATLiteral(14162))
-14162 13250 0
-14162 13244 13249 0
-14162 13245 0
-14162 13247 0
-14162 13235 13249 0
-14162 13235 13244 0
-14162 13235 13245 0
-14162 13235 13247 0
-14162 13236 0
-14162 13236 13244 0
-14162 13236 13245 0
-14162 13236 13247 0
14162 -13236 -13244 -13249 0
14162 -13235 -13245 -13249 0
14162 -13235 -13244 -13250 0
c ((1<=(aux2022 + aux2025 + aux2026))=tv=SATLiteral(14163))
-14163 -13235 -13244 -13249 0
14163 13249 0
14163 13244 0
14163 13245 0
14163 13247 0
14163 13235 0
14163 13235 13244 0
14163 13235 13245 0
14163 13235 13247 0
14163 13236 0
14163 13236 13244 0
14163 13236 13245 0
14163 13236 13247 0
c (((aux2028 + aux2031 + aux2032)<=1)=tv=SATLiteral(14164))
-14164 13274 0
-14164 13268 13273 0
-14164 13269 0
-14164 13271 0
-14164 13259 13273 0
-14164 13259 13268 0
-14164 13259 13269 0
-14164 13259 13271 0
-14164 13260 0
-14164 13260 13268 0
-14164 13260 13269 0
-14164 13260 13271 0
14164 -13260 -13268 -13273 0
14164 -13259 -13269 -13273 0
14164 -13259 -13268 -13274 0
c ((1<=(aux2028 + aux2031 + aux2032))=tv=SATLiteral(14165))
-14165 -13259 -13268 -13273 0
14165 13273 0
14165 13268 0
14165 13269 0
14165 13271 0
14165 13259 0
14165 13259 13268 0
14165 13259 13269 0
14165 13259 13271 0
14165 13260 0
14165 13260 13268 0
14165 13260 13269 0
14165 13260 13271 0
c (((aux2034 + aux2037 + aux2038)<=1)=tv=SATLiteral(14166))
-14166 13298 0
-14166 13292 13297 0
-14166 13293 0
-14166 13295 0
-14166 13283 13297 0
-14166 13283 13292 0
-14166 13283 13293 0
-14166 13283 13295 0
-14166 13284 0
-14166 13284 13292 0
-14166 13284 13293 0
-14166 13284 13295 0
14166 -13284 -13292 -13297 0
14166 -13283 -13293 -13297 0
14166 -13283 -13292 -13298 0
c ((1<=(aux2034 + aux2037 + aux2038))=tv=SATLiteral(14167))
-14167 -13283 -13292 -13297 0
14167 13297 0
14167 13292 0
14167 13293 0
14167 13295 0
14167 13283 0
14167 13283 13292 0
14167 13283 13293 0
14167 13283 13295 0
14167 13284 0
14167 13284 13292 0
14167 13284 13293 0
14167 13284 13295 0
c (((aux2040 + aux2043 + aux2044)<=1)=tv=SATLiteral(14168))
-14168 13322 0
-14168 13316 13321 0
-14168 13317 0
-14168 13319 0
-14168 13307 13321 0
-14168 13307 13316 0
-14168 13307 13317 0
-14168 13307 13319 0
-14168 13308 0
-14168 13308 13316 0
-14168 13308 13317 0
-14168 13308 13319 0
14168 -13308 -13316 -13321 0
14168 -13307 -13317 -13321 0
14168 -13307 -13316 -13322 0
c ((1<=(aux2040 + aux2043 + aux2044))=tv=SATLiteral(14169))
-14169 -13307 -13316 -13321 0
14169 13321 0
14169 13316 0
14169 13317 0
14169 13319 0
14169 13307 0
14169 13307 13316 0
14169 13307 13317 0
14169 13307 13319 0
14169 13308 0
14169 13308 13316 0
14169 13308 13317 0
14169 13308 13319 0
c (((aux2046 + aux2049 + aux2050)<=1)=tv=SATLiteral(14170))
-14170 13346 0
-14170 13340 13345 0
-14170 13341 0
-14170 13343 0
-14170 13331 13345 0
-14170 13331 13340 0
-14170 13331 13341 0
-14170 13331 13343 0
-14170 13332 0
-14170 13332 13340 0
-14170 13332 13341 0
-14170 13332 13343 0
14170 -13332 -13340 -13345 0
14170 -13331 -13341 -13345 0
14170 -13331 -13340 -13346 0
c ((1<=(aux2046 + aux2049 + aux2050))=tv=SATLiteral(14171))
-14171 -13331 -13340 -13345 0
14171 13345 0
14171 13340 0
14171 13341 0
14171 13343 0
14171 13331 0
14171 13331 13340 0
14171 13331 13341 0
14171 13331 13343 0
14171 13332 0
14171 13332 13340 0
14171 13332 13341 0
14171 13332 13343 0
c (((aux2052 + aux2055 + aux2056)<=1)=tv=SATLiteral(14172))
-14172 13370 0
-14172 13364 13369 0
-14172 13365 0
-14172 13367 0
-14172 13355 13369 0
-14172 13355 13364 0
-14172 13355 13365 0
-14172 13355 13367 0
-14172 13356 0
-14172 13356 13364 0
-14172 13356 13365 0
-14172 13356 13367 0
14172 -13356 -13364 -13369 0
14172 -13355 -13365 -13369 0
14172 -13355 -13364 -13370 0
c ((1<=(aux2052 + aux2055 + aux2056))=tv=SATLiteral(14173))
-14173 -13355 -13364 -13369 0
14173 13369 0
14173 13364 0
14173 13365 0
14173 13367 0
14173 13355 0
14173 13355 13364 0
14173 13355 13365 0
14173 13355 13367 0
14173 13356 0
14173 13356 13364 0
14173 13356 13365 0
14173 13356 13367 0
c (((aux2058 + aux2061 + aux2062)<=1)=tv=SATLiteral(14174))
-14174 13394 0
-14174 13388 13393 0
-14174 13389 0
-14174 13391 0
-14174 13379 13393 0
-14174 13379 13388 0
-14174 13379 13389 0
-14174 13379 13391 0
-14174 13380 0
-14174 13380 13388 0
-14174 13380 13389 0
-14174 13380 13391 0
14174 -13380 -13388 -13393 0
14174 -13379 -13389 -13393 0
14174 -13379 -13388 -13394 0
c ((1<=(aux2058 + aux2061 + aux2062))=tv=SATLiteral(14175))
-14175 -13379 -13388 -13393 0
14175 13393 0
14175 13388 0
14175 13389 0
14175 13391 0
14175 13379 0
14175 13379 13388 0
14175 13379 13389 0
14175 13379 13391 0
14175 13380 0
14175 13380 13388 0
14175 13380 13389 0
14175 13380 13391 0
c (((aux2064 + aux2067 + aux2068)<=1)=tv=SATLiteral(14176))
-14176 13418 0
-14176 13412 13417 0
-14176 13413 0
-14176 13415 0
-14176 13403 13417 0
-14176 13403 13412 0
-14176 13403 13413 0
-14176 13403 13415 0
-14176 13404 0
-14176 13404 13412 0
-14176 13404 13413 0
-14176 13404 13415 0
14176 -13404 -13412 -13417 0
14176 -13403 -13413 -13417 0
14176 -13403 -13412 -13418 0
c ((1<=(aux2064 + aux2067 + aux2068))=tv=SATLiteral(14177))
-14177 -13403 -13412 -13417 0
14177 13417 0
14177 13412 0
14177 13413 0
14177 13415 0
14177 13403 0
14177 13403 13412 0
14177 13403 13413 0
14177 13403 13415 0
14177 13404 0
14177 13404 13412 0
14177 13404 13413 0
14177 13404 13415 0
c ((SATLiteral(13586) /\ SATLiteral(13587))=tv=SATLiteral(1329))
1329 -13586 -13587 0
13586 -1329 0
13587 -1329 0
c ((SATLiteral(13588) /\ SATLiteral(13589))=tv=SATLiteral(1330))
1330 -13588 -13589 0
13588 -1330 0
13589 -1330 0
c ((SATLiteral(13590) /\ SATLiteral(13591))=tv=SATLiteral(1331))
1331 -13590 -13591 0
13590 -1331 0
13591 -1331 0
c ((SATLiteral(13592) /\ SATLiteral(13593))=tv=SATLiteral(1332))
1332 -13592 -13593 0
13592 -1332 0
13593 -1332 0
c ((SATLiteral(13594) /\ SATLiteral(13595))=tv=SATLiteral(1333))
1333 -13594 -13595 0
13594 -1333 0
13595 -1333 0
c ((SATLiteral(13596) /\ SATLiteral(13597))=tv=SATLiteral(1334))
1334 -13596 -13597 0
13596 -1334 0
13597 -1334 0
c ((SATLiteral(13598) /\ SATLiteral(13599))=tv=SATLiteral(1335))
1335 -13598 -13599 0
13598 -1335 0
13599 -1335 0
c ((SATLiteral(13600) /\ SATLiteral(13601))=tv=SATLiteral(1336))
1336 -13600 -13601 0
13600 -1336 0
13601 -1336 0
c ((SATLiteral(13602) /\ SATLiteral(13603))=tv=SATLiteral(1337))
1337 -13602 -13603 0
13602 -1337 0
13603 -1337 0
c ((SATLiteral(13604) /\ SATLiteral(13605))=tv=SATLiteral(1338))
1338 -13604 -13605 0
13604 -1338 0
13605 -1338 0
c ((SATLiteral(13606) /\ SATLiteral(13607))=tv=SATLiteral(1339))
1339 -13606 -13607 0
13606 -1339 0
13607 -1339 0
c ((SATLiteral(13608) /\ SATLiteral(13609))=tv=SATLiteral(1340))
1340 -13608 -13609 0
13608 -1340 0
13609 -1340 0
c ((SATLiteral(13610) /\ SATLiteral(13611))=tv=SATLiteral(1341))
1341 -13610 -13611 0
13610 -1341 0
13611 -1341 0
c ((SATLiteral(13612) /\ SATLiteral(13613))=tv=SATLiteral(1342))
1342 -13612 -13613 0
13612 -1342 0
13613 -1342 0
c ((SATLiteral(13614) /\ SATLiteral(13615))=tv=SATLiteral(1343))
1343 -13614 -13615 0
13614 -1343 0
13615 -1343 0
c ((SATLiteral(13616) /\ SATLiteral(13617))=tv=SATLiteral(1344))
1344 -13616 -13617 0
13616 -1344 0
13617 -1344 0
c ((SATLiteral(13618) /\ SATLiteral(13619))=tv=SATLiteral(1345))
1345 -13618 -13619 0
13618 -1345 0
13619 -1345 0
c ((SATLiteral(13620) /\ SATLiteral(13621))=tv=SATLiteral(1346))
1346 -13620 -13621 0
13620 -1346 0
13621 -1346 0
c ((SATLiteral(13622) /\ SATLiteral(13623))=tv=SATLiteral(1347))
1347 -13622 -13623 0
13622 -1347 0
13623 -1347 0
c ((SATLiteral(13624) /\ SATLiteral(13625))=tv=SATLiteral(1348))
1348 -13624 -13625 0
13624 -1348 0
13625 -1348 0
c ((SATLiteral(13626) /\ SATLiteral(13627))=tv=SATLiteral(1349))
1349 -13626 -13627 0
13626 -1349 0
13627 -1349 0
c ((SATLiteral(13628) /\ SATLiteral(13629))=tv=SATLiteral(1350))
1350 -13628 -13629 0
13628 -1350 0
13629 -1350 0
c ((SATLiteral(13630) /\ SATLiteral(13631))=tv=SATLiteral(1351))
1351 -13630 -13631 0
13630 -1351 0
13631 -1351 0
c ((SATLiteral(13632) /\ SATLiteral(13633))=tv=SATLiteral(1352))
1352 -13632 -13633 0
13632 -1352 0
13633 -1352 0
c ((SATLiteral(13634) /\ SATLiteral(13635))=tv=SATLiteral(1353))
1353 -13634 -13635 0
13634 -1353 0
13635 -1353 0
c ((SATLiteral(13636) /\ SATLiteral(13637))=tv=SATLiteral(1354))
1354 -13636 -13637 0
13636 -1354 0
13637 -1354 0
c ((SATLiteral(13638) /\ SATLiteral(13639))=tv=SATLiteral(1355))
1355 -13638 -13639 0
13638 -1355 0
13639 -1355 0
c ((SATLiteral(13640) /\ SATLiteral(13641))=tv=SATLiteral(1356))
1356 -13640 -13641 0
13640 -1356 0
13641 -1356 0
c ((SATLiteral(13642) /\ SATLiteral(13643))=tv=SATLiteral(1357))
1357 -13642 -13643 0
13642 -1357 0
13643 -1357 0
c ((x_00001_00001 != x_00001_00002)=tv=SATLiteral(1358))
-2 17 1358 0
-4 19 1358 0
-6 21 1358 0
-8 23 1358 0
-10 25 1358 0
-12 27 1358 0
-14 29 1358 0
-16 31 1358 0
15 -30 1358 0
-17 2 1358 0
-19 4 1358 0
-21 6 1358 0
-23 8 1358 0
-25 10 1358 0
-27 12 1358 0
-29 14 1358 0
-31 16 1358 0
30 -15 1358 0
-2 -17 -1358 0
-4 -19 -1358 0
-6 -21 -1358 0
-8 -23 -1358 0
-10 -25 -1358 0
-12 -27 -1358 0
-14 -29 -1358 0
-16 -31 -1358 0
15 30 -1358 0
c ((x_00002_00007 != x_00001_00007)=tv=SATLiteral(1359))
-227 92 1359 0
-229 94 1359 0
-231 96 1359 0
-233 98 1359 0
-235 100 1359 0
-237 102 1359 0
-239 104 1359 0
-241 106 1359 0
240 -105 1359 0
-92 227 1359 0
-94 229 1359 0
-96 231 1359 0
-98 233 1359 0
-100 235 1359 0
-102 237 1359 0
-104 239 1359 0
-106 241 1359 0
105 -240 1359 0
-227 -92 -1359 0
-229 -94 -1359 0
-231 -96 -1359 0
-233 -98 -1359 0
-235 -100 -1359 0
-237 -102 -1359 0
-239 -104 -1359 0
-241 -106 -1359 0
240 105 -1359 0
c ((x_00002_00008 != x_00001_00008)=tv=SATLiteral(1360))
-242 107 1360 0
-244 109 1360 0
-246 111 1360 0
-248 113 1360 0
-250 115 1360 0
-252 117 1360 0
-254 119 1360 0
-256 121 1360 0
255 -120 1360 0
-107 242 1360 0
-109 244 1360 0
-111 246 1360 0
-113 248 1360 0
-115 250 1360 0
-117 252 1360 0
-119 254 1360 0
-121 256 1360 0
120 -255 1360 0
-242 -107 -1360 0
-244 -109 -1360 0
-246 -111 -1360 0
-248 -113 -1360 0
-250 -115 -1360 0
-252 -117 -1360 0
-254 -119 -1360 0
-256 -121 -1360 0
255 120 -1360 0
c ((x_00002_00003 != x_00002_00004)=tv=SATLiteral(1361))
-167 182 1361 0
-169 184 1361 0
-171 186 1361 0
-173 188 1361 0
-175 190 1361 0
-177 192 1361 0
-179 194 1361 0
-181 196 1361 0
180 -195 1361 0
-182 167 1361 0
-184 169 1361 0
-186 171 1361 0
-188 173 1361 0
-190 175 1361 0
-192 177 1361 0
-194 179 1361 0
-196 181 1361 0
195 -180 1361 0
-167 -182 -1361 0
-169 -184 -1361 0
-171 -186 -1361 0
-173 -188 -1361 0
-175 -190 -1361 0
-177 -192 -1361 0
-179 -194 -1361 0
-181 -196 -1361 0
180 195 -1361 0
c ((x_00004_00001 != x_00005_00001)=tv=SATLiteral(1362))
-407 542 1362 0
-409 544 1362 0
-411 546 1362 0
-413 548 1362 0
-415 550 1362 0
-417 552 1362 0
-419 554 1362 0
-421 556 1362 0
420 -555 1362 0
-542 407 1362 0
-544 409 1362 0
-546 411 1362 0
-548 413 1362 0
-550 415 1362 0
-552 417 1362 0
-554 419 1362 0
-556 421 1362 0
555 -420 1362 0
-407 -542 -1362 0
-409 -544 -1362 0
-411 -546 -1362 0
-413 -548 -1362 0
-415 -550 -1362 0
-417 -552 -1362 0
-419 -554 -1362 0
-421 -556 -1362 0
420 555 -1362 0
c ((x_00004_00002 != x_00004_00003)=tv=SATLiteral(1363))
-422 437 1363 0
-424 439 1363 0
-426 441 1363 0
-428 443 1363 0
-430 445 1363 0
-432 447 1363 0
-434 449 1363 0
-436 451 1363 0
435 -450 1363 0
-437 422 1363 0
-439 424 1363 0
-441 426 1363 0
-443 428 1363 0
-445 430 1363 0
-447 432 1363 0
-449 434 1363 0
-451 436 1363 0
450 -435 1363 0
-422 -437 -1363 0
-424 -439 -1363 0
-426 -441 -1363 0
-428 -443 -1363 0
-430 -445 -1363 0
-432 -447 -1363 0
-434 -449 -1363 0
-436 -451 -1363 0
435 450 -1363 0
c ((x_00005_00009 != x_00006_00009)=tv=SATLiteral(1364))
-662 797 1364 0
-664 799 1364 0
-666 801 1364 0
-668 803 1364 0
-670 805 1364 0
-672 807 1364 0
-674 809 1364 0
-676 811 1364 0
675 -810 1364 0
-797 662 1364 0
-799 664 1364 0
-801 666 1364 0
-803 668 1364 0
-805 670 1364 0
-807 672 1364 0
-809 674 1364 0
-811 676 1364 0
810 -675 1364 0
-662 -797 -1364 0
-664 -799 -1364 0
-666 -801 -1364 0
-668 -803 -1364 0
-670 -805 -1364 0
-672 -807 -1364 0
-674 -809 -1364 0
-676 -811 -1364 0
675 810 -1364 0
c ((x_00006_00007 != x_00006_00008)=tv=SATLiteral(1365))
-767 782 1365 0
-769 784 1365 0
-771 786 1365 0
-773 788 1365 0
-775 790 1365 0
-777 792 1365 0
-779 794 1365 0
-781 796 1365 0
780 -795 1365 0
-782 767 1365 0
-784 769 1365 0
-786 771 1365 0
-788 773 1365 0
-790 775 1365 0
-792 777 1365 0
-794 779 1365 0
-796 781 1365 0
795 -780 1365 0
-767 -782 -1365 0
-769 -784 -1365 0
-771 -786 -1365 0
-773 -788 -1365 0
-775 -790 -1365 0
-777 -792 -1365 0
-779 -794 -1365 0
-781 -796 -1365 0
780 795 -1365 0
c ((x_00008_00002 != x_00009_00002)=tv=SATLiteral(1366))
-962 1097 1366 0
-964 1099 1366 0
-966 1101 1366 0
-968 1103 1366 0
-970 1105 1366 0
-972 1107 1366 0
-974 1109 1366 0
-976 1111 1366 0
975 -1110 1366 0
-1097 962 1366 0
-1099 964 1366 0
-1101 966 1366 0
-1103 968 1366 0
-1105 970 1366 0
-1107 972 1366 0
-1109 974 1366 0
-1111 976 1366 0
1110 -975 1366 0
-962 -1097 -1366 0
-964 -1099 -1366 0
-966 -1101 -1366 0
-968 -1103 -1366 0
-970 -1105 -1366 0
-972 -1107 -1366 0
-974 -1109 -1366 0
-976 -1111 -1366 0
975 1110 -1366 0
c ((x_00008_00003 != x_00009_00003)=tv=SATLiteral(1367))
-977 1112 1367 0
-979 1114 1367 0
-981 1116 1367 0
-983 1118 1367 0
-985 1120 1367 0
-987 1122 1367 0
-989 1124 1367 0
-991 1126 1367 0
990 -1125 1367 0
-1112 977 1367 0
-1114 979 1367 0
-1116 981 1367 0
-1118 983 1367 0
-1120 985 1367 0
-1122 987 1367 0
-1124 989 1367 0
-1126 991 1367 0
1125 -990 1367 0
-977 -1112 -1367 0
-979 -1114 -1367 0
-981 -1116 -1367 0
-983 -1118 -1367 0
-985 -1120 -1367 0
-987 -1122 -1367 0
-989 -1124 -1367 0
-991 -1126 -1367 0
990 1125 -1367 0
c ((x_00008_00006 != x_00008_00007)=tv=SATLiteral(1368))
-1022 1037 1368 0
-1024 1039 1368 0
-1026 1041 1368 0
-1028 1043 1368 0
-1030 1045 1368 0
-1032 1047 1368 0
-1034 1049 1368 0
-1036 1051 1368 0
1035 -1050 1368 0
-1037 1022 1368 0
-1039 1024 1368 0
-1041 1026 1368 0
-1043 1028 1368 0
-1045 1030 1368 0
-1047 1032 1368 0
-1049 1034 1368 0
-1051 1036 1368 0
1050 -1035 1368 0
-1022 -1037 -1368 0
-1024 -1039 -1368 0
-1026 -1041 -1368 0
-1028 -1043 -1368 0
-1030 -1045 -1368 0
-1032 -1047 -1368 0
-1034 -1049 -1368 0
-1036 -1051 -1368 0
1035 1050 -1368 0
c ((x_00009_00008 != x_00009_00009)=tv=SATLiteral(1369))
-1187 1202 1369 0
-1189 1204 1369 0
-1191 1206 1369 0
-1193 1208 1369 0
-1195 1210 1369 0
-1197 1212 1369 0
-1199 1214 1369 0
-1201 1216 1369 0
1200 -1215 1369 0
-1202 1187 1369 0
-1204 1189 1369 0
-1206 1191 1369 0
-1208 1193 1369 0
-1210 1195 1369 0
-1212 1197 1369 0
-1214 1199 1369 0
-1216 1201 1369 0
1215 -1200 1369 0
-1187 -1202 -1369 0
-1189 -1204 -1369 0
-1191 -1206 -1369 0
-1193 -1208 -1369 0
-1195 -1210 -1369 0
-1197 -1212 -1369 0
-1199 -1214 -1369 0
-1201 -1216 -1369 0
1200 1215 -1369 0
c ((SATLiteral(13644) /\ SATLiteral(13645))=tv=SATLiteral(1370))
1370 -13644 -13645 0
13644 -1370 0
13645 -1370 0
c ((SATLiteral(13646) /\ SATLiteral(13647))=tv=SATLiteral(1371))
1371 -13646 -13647 0
13646 -1371 0
13647 -1371 0
c ((SATLiteral(13648) /\ SATLiteral(13649))=tv=SATLiteral(1372))
1372 -13648 -13649 0
13648 -1372 0
13649 -1372 0
c ((SATLiteral(13650) /\ SATLiteral(13651))=tv=SATLiteral(1373))
1373 -13650 -13651 0
13650 -1373 0
13651 -1373 0
c ((SATLiteral(13652) /\ SATLiteral(13653))=tv=SATLiteral(1374))
1374 -13652 -13653 0
13652 -1374 0
13653 -1374 0
c ((SATLiteral(13654) /\ SATLiteral(13655))=tv=SATLiteral(1375))
1375 -13654 -13655 0
13654 -1375 0
13655 -1375 0
c ((SATLiteral(13656) /\ SATLiteral(13657))=tv=SATLiteral(1376))
1376 -13656 -13657 0
13656 -1376 0
13657 -1376 0
c ((SATLiteral(13658) /\ SATLiteral(13659))=tv=SATLiteral(1377))
1377 -13658 -13659 0
13658 -1377 0
13659 -1377 0
c ((SATLiteral(13660) /\ SATLiteral(13661))=tv=SATLiteral(1378))
1378 -13660 -13661 0
13660 -1378 0
13661 -1378 0
c ((SATLiteral(13662) /\ SATLiteral(13663))=tv=SATLiteral(1379))
1379 -13662 -13663 0
13662 -1379 0
13663 -1379 0
c ((SATLiteral(13664) /\ SATLiteral(13665))=tv=SATLiteral(1380))
1380 -13664 -13665 0
13664 -1380 0
13665 -1380 0
c ((SATLiteral(13666) /\ SATLiteral(13667))=tv=SATLiteral(1381))
1381 -13666 -13667 0
13666 -1381 0
13667 -1381 0
c ((SATLiteral(13668) /\ SATLiteral(13669))=tv=SATLiteral(1382))
1382 -13668 -13669 0
13668 -1382 0
13669 -1382 0
c ((SATLiteral(13670) /\ SATLiteral(13671))=tv=SATLiteral(1383))
1383 -13670 -13671 0
13670 -1383 0
13671 -1383 0
c ((SATLiteral(13672) /\ SATLiteral(13673))=tv=SATLiteral(1384))
1384 -13672 -13673 0
13672 -1384 0
13673 -1384 0
c ((SATLiteral(13674) /\ SATLiteral(13675))=tv=SATLiteral(1385))
1385 -13674 -13675 0
13674 -1385 0
13675 -1385 0
c ((SATLiteral(13676) /\ SATLiteral(13677))=tv=SATLiteral(1386))
1386 -13676 -13677 0
13676 -1386 0
13677 -1386 0
c ((SATLiteral(13678) /\ SATLiteral(13679))=tv=SATLiteral(1387))
1387 -13678 -13679 0
13678 -1387 0
13679 -1387 0
c ((SATLiteral(13680) /\ SATLiteral(13681))=tv=SATLiteral(1388))
1388 -13680 -13681 0
13680 -1388 0
13681 -1388 0
c ((SATLiteral(13682) /\ SATLiteral(13683))=tv=SATLiteral(1389))
1389 -13682 -13683 0
13682 -1389 0
13683 -1389 0
c ((SATLiteral(13684) /\ SATLiteral(13685))=tv=SATLiteral(1390))
1390 -13684 -13685 0
13684 -1390 0
13685 -1390 0
c ((SATLiteral(13686) /\ SATLiteral(13687))=tv=SATLiteral(1391))
1391 -13686 -13687 0
13686 -1391 0
13687 -1391 0
c ((SATLiteral(13688) /\ SATLiteral(13689))=tv=SATLiteral(1392))
1392 -13688 -13689 0
13688 -1392 0
13689 -1392 0
c ((SATLiteral(13690) /\ SATLiteral(13691))=tv=SATLiteral(1393))
1393 -13690 -13691 0
13690 -1393 0
13691 -1393 0
c ((SATLiteral(13692) /\ SATLiteral(13693))=tv=SATLiteral(1394))
1394 -13692 -13693 0
13692 -1394 0
13693 -1394 0
c ((SATLiteral(13694) /\ SATLiteral(13695))=tv=SATLiteral(1395))
1395 -13694 -13695 0
13694 -1395 0
13695 -1395 0
c ((SATLiteral(13696) /\ SATLiteral(13697))=tv=SATLiteral(1396))
1396 -13696 -13697 0
13696 -1396 0
13697 -1396 0
c ((SATLiteral(13698) /\ SATLiteral(13699))=tv=SATLiteral(1397))
1397 -13698 -13699 0
13698 -1397 0
13699 -1397 0
c ((SATLiteral(13700) /\ SATLiteral(13701))=tv=SATLiteral(1398))
1398 -13700 -13701 0
13700 -1398 0
13701 -1398 0
c ((SATLiteral(13702) /\ SATLiteral(13703))=tv=SATLiteral(1399))
1399 -13702 -13703 0
13702 -1399 0
13703 -1399 0
c ((SATLiteral(13704) /\ SATLiteral(13705))=tv=SATLiteral(1400))
1400 -13704 -13705 0
13704 -1400 0
13705 -1400 0
c ((SATLiteral(13706) /\ SATLiteral(13707))=tv=SATLiteral(1401))
1401 -13706 -13707 0
13706 -1401 0
13707 -1401 0
c ((SATLiteral(13708) /\ SATLiteral(13709))=tv=SATLiteral(1402))
1402 -13708 -13709 0
13708 -1402 0
13709 -1402 0
c ((SATLiteral(13710) /\ SATLiteral(13711))=tv=SATLiteral(1403))
1403 -13710 -13711 0
13710 -1403 0
13711 -1403 0
c ((SATLiteral(13712) /\ SATLiteral(13713))=tv=SATLiteral(1404))
1404 -13712 -13713 0
13712 -1404 0
13713 -1404 0
c ((SATLiteral(13714) /\ SATLiteral(13715))=tv=SATLiteral(1405))
1405 -13714 -13715 0
13714 -1405 0
13715 -1405 0
c ((SATLiteral(13716) /\ SATLiteral(13717))=tv=SATLiteral(1406))
1406 -13716 -13717 0
13716 -1406 0
13717 -1406 0
c ((SATLiteral(13718) /\ SATLiteral(13719))=tv=SATLiteral(1407))
1407 -13718 -13719 0
13718 -1407 0
13719 -1407 0
c ((SATLiteral(13720) /\ SATLiteral(13721))=tv=SATLiteral(1408))
1408 -13720 -13721 0
13720 -1408 0
13721 -1408 0
c ((SATLiteral(13722) /\ SATLiteral(13723))=tv=SATLiteral(1409))
1409 -13722 -13723 0
13722 -1409 0
13723 -1409 0
c ((SATLiteral(13724) /\ SATLiteral(13725))=tv=SATLiteral(1410))
1410 -13724 -13725 0
13724 -1410 0
13725 -1410 0
c ((SATLiteral(13726) /\ SATLiteral(13727))=tv=SATLiteral(1411))
1411 -13726 -13727 0
13726 -1411 0
13727 -1411 0
c ((SATLiteral(13728) /\ SATLiteral(13729))=tv=SATLiteral(1412))
1412 -13728 -13729 0
13728 -1412 0
13729 -1412 0
c ((SATLiteral(13730) /\ SATLiteral(13731))=tv=SATLiteral(1413))
1413 -13730 -13731 0
13730 -1413 0
13731 -1413 0
c ((SATLiteral(13732) /\ SATLiteral(13733))=tv=SATLiteral(1414))
1414 -13732 -13733 0
13732 -1414 0
13733 -1414 0
c ((SATLiteral(13734) /\ SATLiteral(13735))=tv=SATLiteral(1415))
1415 -13734 -13735 0
13734 -1415 0
13735 -1415 0
c ((SATLiteral(13736) /\ SATLiteral(13737))=tv=SATLiteral(1416))
1416 -13736 -13737 0
13736 -1416 0
13737 -1416 0
c ((SATLiteral(13738) /\ SATLiteral(13739))=tv=SATLiteral(1417))
1417 -13738 -13739 0
13738 -1417 0
13739 -1417 0
c ((SATLiteral(13740) /\ SATLiteral(13741))=tv=SATLiteral(1418))
1418 -13740 -13741 0
13740 -1418 0
13741 -1418 0
c ((SATLiteral(13742) /\ SATLiteral(13743))=tv=SATLiteral(1419))
1419 -13742 -13743 0
13742 -1419 0
13743 -1419 0
c ((SATLiteral(13744) /\ SATLiteral(13745))=tv=SATLiteral(1420))
1420 -13744 -13745 0
13744 -1420 0
13745 -1420 0
c ((SATLiteral(13746) /\ SATLiteral(13747))=tv=SATLiteral(1421))
1421 -13746 -13747 0
13746 -1421 0
13747 -1421 0
c ((SATLiteral(13748) /\ SATLiteral(13749))=tv=SATLiteral(1422))
1422 -13748 -13749 0
13748 -1422 0
13749 -1422 0
c ((SATLiteral(13750) /\ SATLiteral(13751))=tv=SATLiteral(1423))
1423 -13750 -13751 0
13750 -1423 0
13751 -1423 0
c ((SATLiteral(13752) /\ SATLiteral(13753))=tv=SATLiteral(1424))
1424 -13752 -13753 0
13752 -1424 0
13753 -1424 0
c ((SATLiteral(13754) /\ SATLiteral(13755))=tv=SATLiteral(1425))
1425 -13754 -13755 0
13754 -1425 0
13755 -1425 0
c ((SATLiteral(13756) /\ SATLiteral(13757))=tv=SATLiteral(1426))
1426 -13756 -13757 0
13756 -1426 0
13757 -1426 0
c ((SATLiteral(13758) /\ SATLiteral(13759))=tv=SATLiteral(1427))
1427 -13758 -13759 0
13758 -1427 0
13759 -1427 0
c ((SATLiteral(13760) /\ SATLiteral(13761))=tv=SATLiteral(1428))
1428 -13760 -13761 0
13760 -1428 0
13761 -1428 0
c ((SATLiteral(13762) /\ SATLiteral(13763))=tv=SATLiteral(1429))
1429 -13762 -13763 0
13762 -1429 0
13763 -1429 0
c ((SATLiteral(13764) /\ SATLiteral(13765))=tv=SATLiteral(1430))
1430 -13764 -13765 0
13764 -1430 0
13765 -1430 0
c ((SATLiteral(13766) /\ SATLiteral(13767))=tv=SATLiteral(1431))
1431 -13766 -13767 0
13766 -1431 0
13767 -1431 0
c ((SATLiteral(13768) /\ SATLiteral(13769))=tv=SATLiteral(1432))
1432 -13768 -13769 0
13768 -1432 0
13769 -1432 0
c ((SATLiteral(13770) /\ SATLiteral(13771))=tv=SATLiteral(1433))
1433 -13770 -13771 0
13770 -1433 0
13771 -1433 0
c ((SATLiteral(13772) /\ SATLiteral(13773))=tv=SATLiteral(1434))
1434 -13772 -13773 0
13772 -1434 0
13773 -1434 0
c ((SATLiteral(13774) /\ SATLiteral(13775))=tv=SATLiteral(1435))
1435 -13774 -13775 0
13774 -1435 0
13775 -1435 0
c ((SATLiteral(13776) /\ SATLiteral(13777))=tv=SATLiteral(1436))
1436 -13776 -13777 0
13776 -1436 0
13777 -1436 0
c ((SATLiteral(13778) /\ SATLiteral(13779))=tv=SATLiteral(1437))
1437 -13778 -13779 0
13778 -1437 0
13779 -1437 0
c ((SATLiteral(13780) /\ SATLiteral(13781))=tv=SATLiteral(1438))
1438 -13780 -13781 0
13780 -1438 0
13781 -1438 0
c ((SATLiteral(13782) /\ SATLiteral(13783))=tv=SATLiteral(1439))
1439 -13782 -13783 0
13782 -1439 0
13783 -1439 0
c ((SATLiteral(13784) /\ SATLiteral(13785))=tv=SATLiteral(1440))
1440 -13784 -13785 0
13784 -1440 0
13785 -1440 0
c ((SATLiteral(13786) /\ SATLiteral(13787))=tv=SATLiteral(1441))
1441 -13786 -13787 0
13786 -1441 0
13787 -1441 0
c ((SATLiteral(13788) /\ SATLiteral(13789))=tv=SATLiteral(1442))
1442 -13788 -13789 0
13788 -1442 0
13789 -1442 0
c ((SATLiteral(13790) /\ SATLiteral(13791))=tv=SATLiteral(1443))
1443 -13790 -13791 0
13790 -1443 0
13791 -1443 0
c ((SATLiteral(13792) /\ SATLiteral(13793))=tv=SATLiteral(1444))
1444 -13792 -13793 0
13792 -1444 0
13793 -1444 0
c ((SATLiteral(13794) /\ SATLiteral(13795))=tv=SATLiteral(1445))
1445 -13794 -13795 0
13794 -1445 0
13795 -1445 0
c ((SATLiteral(13796) /\ SATLiteral(13797))=tv=SATLiteral(1446))
1446 -13796 -13797 0
13796 -1446 0
13797 -1446 0
c ((SATLiteral(13798) /\ SATLiteral(13799))=tv=SATLiteral(1447))
1447 -13798 -13799 0
13798 -1447 0
13799 -1447 0
c ((SATLiteral(13800) /\ SATLiteral(13801))=tv=SATLiteral(1448))
1448 -13800 -13801 0
13800 -1448 0
13801 -1448 0
c ((SATLiteral(13802) /\ SATLiteral(13803))=tv=SATLiteral(1449))
1449 -13802 -13803 0
13802 -1449 0
13803 -1449 0
c ((SATLiteral(13804) /\ SATLiteral(13805))=tv=SATLiteral(1450))
1450 -13804 -13805 0
13804 -1450 0
13805 -1450 0
c ((SATLiteral(13806) /\ SATLiteral(13807))=tv=SATLiteral(1451))
1451 -13806 -13807 0
13806 -1451 0
13807 -1451 0
c ((SATLiteral(13808) /\ SATLiteral(13809))=tv=SATLiteral(1452))
1452 -13808 -13809 0
13808 -1452 0
13809 -1452 0
c ((SATLiteral(13810) /\ SATLiteral(13811))=tv=SATLiteral(1453))
1453 -13810 -13811 0
13810 -1453 0
13811 -1453 0
c ((SATLiteral(13812) /\ SATLiteral(13813))=tv=SATLiteral(1454))
1454 -13812 -13813 0
13812 -1454 0
13813 -1454 0
c ((SATLiteral(13814) /\ SATLiteral(13815))=tv=SATLiteral(1455))
1455 -13814 -13815 0
13814 -1455 0
13815 -1455 0
c ((SATLiteral(13816) /\ SATLiteral(13817))=tv=SATLiteral(1456))
1456 -13816 -13817 0
13816 -1456 0
13817 -1456 0
c ((SATLiteral(13818) /\ SATLiteral(13819))=tv=SATLiteral(1457))
1457 -13818 -13819 0
13818 -1457 0
13819 -1457 0
c ((SATLiteral(13820) /\ SATLiteral(13821))=tv=SATLiteral(1458))
1458 -13820 -13821 0
13820 -1458 0
13821 -1458 0
c ((SATLiteral(13822) /\ SATLiteral(13823))=tv=SATLiteral(1459))
1459 -13822 -13823 0
13822 -1459 0
13823 -1459 0
c ((SATLiteral(13824) /\ SATLiteral(13825))=tv=SATLiteral(1460))
1460 -13824 -13825 0
13824 -1460 0
13825 -1460 0
c ((SATLiteral(13826) /\ SATLiteral(13827))=tv=SATLiteral(1461))
1461 -13826 -13827 0
13826 -1461 0
13827 -1461 0
c ((SATLiteral(13828) /\ SATLiteral(13829))=tv=SATLiteral(1462))
1462 -13828 -13829 0
13828 -1462 0
13829 -1462 0
c ((SATLiteral(13830) /\ SATLiteral(13831))=tv=SATLiteral(1463))
1463 -13830 -13831 0
13830 -1463 0
13831 -1463 0
c ((SATLiteral(13832) /\ SATLiteral(13833))=tv=SATLiteral(1464))
1464 -13832 -13833 0
13832 -1464 0
13833 -1464 0
c ((SATLiteral(13834) /\ SATLiteral(13835))=tv=SATLiteral(1465))
1465 -13834 -13835 0
13834 -1465 0
13835 -1465 0
c ((SATLiteral(13836) /\ SATLiteral(13837))=tv=SATLiteral(1466))
1466 -13836 -13837 0
13836 -1466 0
13837 -1466 0
c ((SATLiteral(13838) /\ SATLiteral(13839))=tv=SATLiteral(1467))
1467 -13838 -13839 0
13838 -1467 0
13839 -1467 0
c ((SATLiteral(13840) /\ SATLiteral(13841))=tv=SATLiteral(1468))
1468 -13840 -13841 0
13840 -1468 0
13841 -1468 0
c ((SATLiteral(13842) /\ SATLiteral(13843))=tv=SATLiteral(1469))
1469 -13842 -13843 0
13842 -1469 0
13843 -1469 0
c ((SATLiteral(13844) /\ SATLiteral(13845))=tv=SATLiteral(1470))
1470 -13844 -13845 0
13844 -1470 0
13845 -1470 0
c ((SATLiteral(13846) /\ SATLiteral(13847))=tv=SATLiteral(1471))
1471 -13846 -13847 0
13846 -1471 0
13847 -1471 0
c ((SATLiteral(13848) /\ SATLiteral(13849))=tv=SATLiteral(1472))
1472 -13848 -13849 0
13848 -1472 0
13849 -1472 0
c ((SATLiteral(13850) /\ SATLiteral(13851))=tv=SATLiteral(1473))
1473 -13850 -13851 0
13850 -1473 0
13851 -1473 0
c ((SATLiteral(13852) /\ SATLiteral(13853))=tv=SATLiteral(1474))
1474 -13852 -13853 0
13852 -1474 0
13853 -1474 0
c ((SATLiteral(13854) /\ SATLiteral(13855))=tv=SATLiteral(1475))
1475 -13854 -13855 0
13854 -1475 0
13855 -1475 0
c ((SATLiteral(13856) /\ SATLiteral(13857))=tv=SATLiteral(1476))
1476 -13856 -13857 0
13856 -1476 0
13857 -1476 0
c ((SATLiteral(13858) /\ SATLiteral(13859))=tv=SATLiteral(1477))
1477 -13858 -13859 0
13858 -1477 0
13859 -1477 0
c ((SATLiteral(13860) /\ SATLiteral(13861))=tv=SATLiteral(1478))
1478 -13860 -13861 0
13860 -1478 0
13861 -1478 0
c ((SATLiteral(13862) /\ SATLiteral(13863))=tv=SATLiteral(1479))
1479 -13862 -13863 0
13862 -1479 0
13863 -1479 0
c ((SATLiteral(13864) /\ SATLiteral(13865))=tv=SATLiteral(1480))
1480 -13864 -13865 0
13864 -1480 0
13865 -1480 0
c ((SATLiteral(13866) /\ SATLiteral(13867))=tv=SATLiteral(1481))
1481 -13866 -13867 0
13866 -1481 0
13867 -1481 0
c ((SATLiteral(13868) /\ SATLiteral(13869))=tv=SATLiteral(1482))
1482 -13868 -13869 0
13868 -1482 0
13869 -1482 0
c ((SATLiteral(13870) /\ SATLiteral(13871))=tv=SATLiteral(1483))
1483 -13870 -13871 0
13870 -1483 0
13871 -1483 0
c ((SATLiteral(13872) /\ SATLiteral(13873))=tv=SATLiteral(1484))
1484 -13872 -13873 0
13872 -1484 0
13873 -1484 0
c ((SATLiteral(13874) /\ SATLiteral(13875))=tv=SATLiteral(1485))
1485 -13874 -13875 0
13874 -1485 0
13875 -1485 0
c ((SATLiteral(13876) /\ SATLiteral(13877))=tv=SATLiteral(1486))
1486 -13876 -13877 0
13876 -1486 0
13877 -1486 0
c ((SATLiteral(13878) /\ SATLiteral(13879))=tv=SATLiteral(1487))
1487 -13878 -13879 0
13878 -1487 0
13879 -1487 0
c ((SATLiteral(13880) /\ SATLiteral(13881))=tv=SATLiteral(1488))
1488 -13880 -13881 0
13880 -1488 0
13881 -1488 0
c ((SATLiteral(13882) /\ SATLiteral(13883))=tv=SATLiteral(1489))
1489 -13882 -13883 0
13882 -1489 0
13883 -1489 0
c ((SATLiteral(13884) /\ SATLiteral(13885))=tv=SATLiteral(1490))
1490 -13884 -13885 0
13884 -1490 0
13885 -1490 0
c ((SATLiteral(13886) /\ SATLiteral(13887))=tv=SATLiteral(1491))
1491 -13886 -13887 0
13886 -1491 0
13887 -1491 0
c ((SATLiteral(13888) /\ SATLiteral(13889))=tv=SATLiteral(1492))
1492 -13888 -13889 0
13888 -1492 0
13889 -1492 0
c ((SATLiteral(13890) /\ SATLiteral(13891))=tv=SATLiteral(1493))
1493 -13890 -13891 0
13890 -1493 0
13891 -1493 0
c ((SATLiteral(13892) /\ SATLiteral(13893))=tv=SATLiteral(1494))
1494 -13892 -13893 0
13892 -1494 0
13893 -1494 0
c ((SATLiteral(13894) /\ SATLiteral(13895))=tv=SATLiteral(1495))
1495 -13894 -13895 0
13894 -1495 0
13895 -1495 0
c ((SATLiteral(13896) /\ SATLiteral(13897))=tv=SATLiteral(1496))
1496 -13896 -13897 0
13896 -1496 0
13897 -1496 0
c ((SATLiteral(13898) /\ SATLiteral(13899))=tv=SATLiteral(1497))
1497 -13898 -13899 0
13898 -1497 0
13899 -1497 0
c ((SATLiteral(13900) /\ SATLiteral(13901))=tv=SATLiteral(1498))
1498 -13900 -13901 0
13900 -1498 0
13901 -1498 0
c ((SATLiteral(13902) /\ SATLiteral(13903))=tv=SATLiteral(1499))
1499 -13902 -13903 0
13902 -1499 0
13903 -1499 0
c ((SATLiteral(13904) /\ SATLiteral(13905))=tv=SATLiteral(1500))
1500 -13904 -13905 0
13904 -1500 0
13905 -1500 0
c ((SATLiteral(13906) /\ SATLiteral(13907))=tv=SATLiteral(1501))
1501 -13906 -13907 0
13906 -1501 0
13907 -1501 0
c ((SATLiteral(13908) /\ SATLiteral(13909))=tv=SATLiteral(1502))
1502 -13908 -13909 0
13908 -1502 0
13909 -1502 0
c ((SATLiteral(13910) /\ SATLiteral(13911))=tv=SATLiteral(1503))
1503 -13910 -13911 0
13910 -1503 0
13911 -1503 0
c ((SATLiteral(13912) /\ SATLiteral(13913))=tv=SATLiteral(1504))
1504 -13912 -13913 0
13912 -1504 0
13913 -1504 0
c ((SATLiteral(13914) /\ SATLiteral(13915))=tv=SATLiteral(1505))
1505 -13914 -13915 0
13914 -1505 0
13915 -1505 0
c ((SATLiteral(13916) /\ SATLiteral(13917))=tv=SATLiteral(1506))
1506 -13916 -13917 0
13916 -1506 0
13917 -1506 0
c ((SATLiteral(13918) /\ SATLiteral(13919))=tv=SATLiteral(1507))
1507 -13918 -13919 0
13918 -1507 0
13919 -1507 0
c ((SATLiteral(13920) /\ SATLiteral(13921))=tv=SATLiteral(1508))
1508 -13920 -13921 0
13920 -1508 0
13921 -1508 0
c ((SATLiteral(13922) /\ SATLiteral(13923))=tv=SATLiteral(1509))
1509 -13922 -13923 0
13922 -1509 0
13923 -1509 0
c ((SATLiteral(13924) /\ SATLiteral(13925))=tv=SATLiteral(1510))
1510 -13924 -13925 0
13924 -1510 0
13925 -1510 0
c ((SATLiteral(13926) /\ SATLiteral(13927))=tv=SATLiteral(1511))
1511 -13926 -13927 0
13926 -1511 0
13927 -1511 0
c ((SATLiteral(13928) /\ SATLiteral(13929))=tv=SATLiteral(1512))
1512 -13928 -13929 0
13928 -1512 0
13929 -1512 0
c ((SATLiteral(13930) /\ SATLiteral(13931))=tv=SATLiteral(1513))
1513 -13930 -13931 0
13930 -1513 0
13931 -1513 0
c ((SATLiteral(13932) /\ SATLiteral(13933))=tv=SATLiteral(1514))
1514 -13932 -13933 0
13932 -1514 0
13933 -1514 0
c ((SATLiteral(13934) /\ SATLiteral(13935))=tv=SATLiteral(1515))
1515 -13934 -13935 0
13934 -1515 0
13935 -1515 0
c ((SATLiteral(13936) /\ SATLiteral(13937))=tv=SATLiteral(1516))
1516 -13936 -13937 0
13936 -1516 0
13937 -1516 0
c ((SATLiteral(13938) /\ SATLiteral(13939))=tv=SATLiteral(1517))
1517 -13938 -13939 0
13938 -1517 0
13939 -1517 0
c ((SATLiteral(13940) /\ SATLiteral(13941))=tv=SATLiteral(1518))
1518 -13940 -13941 0
13940 -1518 0
13941 -1518 0
c ((SATLiteral(13942) /\ SATLiteral(13943))=tv=SATLiteral(1519))
1519 -13942 -13943 0
13942 -1519 0
13943 -1519 0
c ((SATLiteral(13944) /\ SATLiteral(13945))=tv=SATLiteral(1520))
1520 -13944 -13945 0
13944 -1520 0
13945 -1520 0
c ((SATLiteral(13946) /\ SATLiteral(13947))=tv=SATLiteral(1521))
1521 -13946 -13947 0
13946 -1521 0
13947 -1521 0
c ((SATLiteral(13948) /\ SATLiteral(13949))=tv=SATLiteral(1522))
1522 -13948 -13949 0
13948 -1522 0
13949 -1522 0
c ((SATLiteral(13950) /\ SATLiteral(13951))=tv=SATLiteral(1523))
1523 -13950 -13951 0
13950 -1523 0
13951 -1523 0
c ((SATLiteral(13952) /\ SATLiteral(13953))=tv=SATLiteral(1524))
1524 -13952 -13953 0
13952 -1524 0
13953 -1524 0
c ((SATLiteral(13954) /\ SATLiteral(13955))=tv=SATLiteral(1525))
1525 -13954 -13955 0
13954 -1525 0
13955 -1525 0
c ((SATLiteral(13956) /\ SATLiteral(13957))=tv=SATLiteral(1526))
1526 -13956 -13957 0
13956 -1526 0
13957 -1526 0
c ((SATLiteral(13958) /\ SATLiteral(13959))=tv=SATLiteral(1527))
1527 -13958 -13959 0
13958 -1527 0
13959 -1527 0
c ((SATLiteral(13960) /\ SATLiteral(13961))=tv=SATLiteral(1528))
1528 -13960 -13961 0
13960 -1528 0
13961 -1528 0
c ((SATLiteral(13962) /\ SATLiteral(13963))=tv=SATLiteral(1529))
1529 -13962 -13963 0
13962 -1529 0
13963 -1529 0
c ((SATLiteral(13964) /\ SATLiteral(13965))=tv=SATLiteral(1530))
1530 -13964 -13965 0
13964 -1530 0
13965 -1530 0
c ((SATLiteral(13966) /\ SATLiteral(13967))=tv=SATLiteral(1531))
1531 -13966 -13967 0
13966 -1531 0
13967 -1531 0
c ((SATLiteral(13968) /\ SATLiteral(13969))=tv=SATLiteral(1532))
1532 -13968 -13969 0
13968 -1532 0
13969 -1532 0
c ((SATLiteral(13970) /\ SATLiteral(13971))=tv=SATLiteral(1533))
1533 -13970 -13971 0
13970 -1533 0
13971 -1533 0
c ((SATLiteral(13972) /\ SATLiteral(13973))=tv=SATLiteral(1534))
1534 -13972 -13973 0
13972 -1534 0
13973 -1534 0
c ((SATLiteral(13974) /\ SATLiteral(13975))=tv=SATLiteral(1535))
1535 -13974 -13975 0
13974 -1535 0
13975 -1535 0
c ((SATLiteral(13976) /\ SATLiteral(13977))=tv=SATLiteral(1536))
1536 -13976 -13977 0
13976 -1536 0
13977 -1536 0
c ((SATLiteral(13978) /\ SATLiteral(13979))=tv=SATLiteral(1537))
1537 -13978 -13979 0
13978 -1537 0
13979 -1537 0
c ((SATLiteral(13980) /\ SATLiteral(13981))=tv=SATLiteral(1538))
1538 -13980 -13981 0
13980 -1538 0
13981 -1538 0
c ((SATLiteral(13982) /\ SATLiteral(13983))=tv=SATLiteral(1539))
1539 -13982 -13983 0
13982 -1539 0
13983 -1539 0
c ((SATLiteral(13984) /\ SATLiteral(13985))=tv=SATLiteral(1540))
1540 -13984 -13985 0
13984 -1540 0
13985 -1540 0
c ((SATLiteral(13986) /\ SATLiteral(13987))=tv=SATLiteral(1541))
1541 -13986 -13987 0
13986 -1541 0
13987 -1541 0
c ((SATLiteral(13988) /\ SATLiteral(13989))=tv=SATLiteral(1542))
1542 -13988 -13989 0
13988 -1542 0
13989 -1542 0
c ((SATLiteral(13990) /\ SATLiteral(13991))=tv=SATLiteral(1543))
1543 -13990 -13991 0
13990 -1543 0
13991 -1543 0
c ((SATLiteral(13992) /\ SATLiteral(13993))=tv=SATLiteral(1544))
1544 -13992 -13993 0
13992 -1544 0
13993 -1544 0
c ((SATLiteral(13994) /\ SATLiteral(13995))=tv=SATLiteral(1545))
1545 -13994 -13995 0
13994 -1545 0
13995 -1545 0
c ((SATLiteral(13996) /\ SATLiteral(13997))=tv=SATLiteral(1546))
1546 -13996 -13997 0
13996 -1546 0
13997 -1546 0
c ((SATLiteral(13998) /\ SATLiteral(13999))=tv=SATLiteral(1547))
1547 -13998 -13999 0
13998 -1547 0
13999 -1547 0
c ((SATLiteral(14000) /\ SATLiteral(14001))=tv=SATLiteral(1548))
1548 -14000 -14001 0
14000 -1548 0
14001 -1548 0
c ((SATLiteral(14002) /\ SATLiteral(14003))=tv=SATLiteral(1549))
1549 -14002 -14003 0
14002 -1549 0
14003 -1549 0
c ((SATLiteral(14004) /\ SATLiteral(14005))=tv=SATLiteral(1550))
1550 -14004 -14005 0
14004 -1550 0
14005 -1550 0
c ((SATLiteral(14006) /\ SATLiteral(14007))=tv=SATLiteral(1551))
1551 -14006 -14007 0
14006 -1551 0
14007 -1551 0
c ((SATLiteral(14008) /\ SATLiteral(14009))=tv=SATLiteral(1552))
1552 -14008 -14009 0
14008 -1552 0
14009 -1552 0
c ((SATLiteral(14010) /\ SATLiteral(14011))=tv=SATLiteral(1553))
1553 -14010 -14011 0
14010 -1553 0
14011 -1553 0
c ((SATLiteral(14012) /\ SATLiteral(14013))=tv=SATLiteral(1554))
1554 -14012 -14013 0
14012 -1554 0
14013 -1554 0
c ((SATLiteral(14014) /\ SATLiteral(14015))=tv=SATLiteral(1555))
1555 -14014 -14015 0
14014 -1555 0
14015 -1555 0
c ((SATLiteral(14016) /\ SATLiteral(14017))=tv=SATLiteral(1556))
1556 -14016 -14017 0
14016 -1556 0
14017 -1556 0
c ((SATLiteral(14018) /\ SATLiteral(14019))=tv=SATLiteral(1557))
1557 -14018 -14019 0
14018 -1557 0
14019 -1557 0
c ((SATLiteral(14020) /\ SATLiteral(14021))=tv=SATLiteral(1558))
1558 -14020 -14021 0
14020 -1558 0
14021 -1558 0
c ((SATLiteral(14022) /\ SATLiteral(14023))=tv=SATLiteral(1559))
1559 -14022 -14023 0
14022 -1559 0
14023 -1559 0
c ((SATLiteral(14024) /\ SATLiteral(14025))=tv=SATLiteral(1560))
1560 -14024 -14025 0
14024 -1560 0
14025 -1560 0
c ((SATLiteral(14026) /\ SATLiteral(14027))=tv=SATLiteral(1561))
1561 -14026 -14027 0
14026 -1561 0
14027 -1561 0
c ((SATLiteral(14028) /\ SATLiteral(14029))=tv=SATLiteral(1562))
1562 -14028 -14029 0
14028 -1562 0
14029 -1562 0
c ((SATLiteral(14030) /\ SATLiteral(14031))=tv=SATLiteral(1563))
1563 -14030 -14031 0
14030 -1563 0
14031 -1563 0
c ((SATLiteral(14032) /\ SATLiteral(14033))=tv=SATLiteral(1564))
1564 -14032 -14033 0
14032 -1564 0
14033 -1564 0
c ((SATLiteral(14034) /\ SATLiteral(14035))=tv=SATLiteral(1565))
1565 -14034 -14035 0
14034 -1565 0
14035 -1565 0
c ((SATLiteral(14036) /\ SATLiteral(14037))=tv=SATLiteral(1566))
1566 -14036 -14037 0
14036 -1566 0
14037 -1566 0
c ((SATLiteral(14038) /\ SATLiteral(14039))=tv=SATLiteral(1567))
1567 -14038 -14039 0
14038 -1567 0
14039 -1567 0
c ((SATLiteral(14040) /\ SATLiteral(14041))=tv=SATLiteral(1568))
1568 -14040 -14041 0
14040 -1568 0
14041 -1568 0
c ((SATLiteral(14042) /\ SATLiteral(14043))=tv=SATLiteral(1569))
1569 -14042 -14043 0
14042 -1569 0
14043 -1569 0
c ((SATLiteral(14044) /\ SATLiteral(14045))=tv=SATLiteral(1570))
1570 -14044 -14045 0
14044 -1570 0
14045 -1570 0
c ((SATLiteral(14046) /\ SATLiteral(14047))=tv=SATLiteral(1571))
1571 -14046 -14047 0
14046 -1571 0
14047 -1571 0
c ((SATLiteral(14048) /\ SATLiteral(14049))=tv=SATLiteral(1572))
1572 -14048 -14049 0
14048 -1572 0
14049 -1572 0
c ((SATLiteral(14050) /\ SATLiteral(14051))=tv=SATLiteral(1573))
1573 -14050 -14051 0
14050 -1573 0
14051 -1573 0
c ((SATLiteral(14052) /\ SATLiteral(14053))=tv=SATLiteral(1574))
1574 -14052 -14053 0
14052 -1574 0
14053 -1574 0
c ((SATLiteral(14054) /\ SATLiteral(14055))=tv=SATLiteral(1575))
1575 -14054 -14055 0
14054 -1575 0
14055 -1575 0
c ((SATLiteral(14056) /\ SATLiteral(14057))=tv=SATLiteral(1576))
1576 -14056 -14057 0
14056 -1576 0
14057 -1576 0
c ((SATLiteral(14058) /\ SATLiteral(14059))=tv=SATLiteral(1577))
1577 -14058 -14059 0
14058 -1577 0
14059 -1577 0
c ((SATLiteral(14060) /\ SATLiteral(14061))=tv=SATLiteral(1578))
1578 -14060 -14061 0
14060 -1578 0
14061 -1578 0
c ((SATLiteral(14062) /\ SATLiteral(14063))=tv=SATLiteral(1579))
1579 -14062 -14063 0
14062 -1579 0
14063 -1579 0
c ((SATLiteral(14064) /\ SATLiteral(14065))=tv=SATLiteral(1580))
1580 -14064 -14065 0
14064 -1580 0
14065 -1580 0
c ((SATLiteral(14066) /\ SATLiteral(14067))=tv=SATLiteral(1581))
1581 -14066 -14067 0
14066 -1581 0
14067 -1581 0
c ((SATLiteral(14068) /\ SATLiteral(14069))=tv=SATLiteral(1582))
1582 -14068 -14069 0
14068 -1582 0
14069 -1582 0
c ((SATLiteral(14070) /\ SATLiteral(14071))=tv=SATLiteral(1583))
1583 -14070 -14071 0
14070 -1583 0
14071 -1583 0
c ((SATLiteral(14072) /\ SATLiteral(14073))=tv=SATLiteral(1584))
1584 -14072 -14073 0
14072 -1584 0
14073 -1584 0
c ((SATLiteral(14074) /\ SATLiteral(14075))=tv=SATLiteral(1585))
1585 -14074 -14075 0
14074 -1585 0
14075 -1585 0
c ((SATLiteral(14076) /\ SATLiteral(14077))=tv=SATLiteral(1586))
1586 -14076 -14077 0
14076 -1586 0
14077 -1586 0
c ((SATLiteral(14078) /\ SATLiteral(14079))=tv=SATLiteral(1587))
1587 -14078 -14079 0
14078 -1587 0
14079 -1587 0
c ((SATLiteral(14080) /\ SATLiteral(14081))=tv=SATLiteral(1588))
1588 -14080 -14081 0
14080 -1588 0
14081 -1588 0
c ((SATLiteral(14082) /\ SATLiteral(14083))=tv=SATLiteral(1589))
1589 -14082 -14083 0
14082 -1589 0
14083 -1589 0
c ((SATLiteral(14084) /\ SATLiteral(14085))=tv=SATLiteral(1590))
1590 -14084 -14085 0
14084 -1590 0
14085 -1590 0
c ((SATLiteral(14086) /\ SATLiteral(14087))=tv=SATLiteral(1591))
1591 -14086 -14087 0
14086 -1591 0
14087 -1591 0
c ((SATLiteral(14088) /\ SATLiteral(14089))=tv=SATLiteral(1592))
1592 -14088 -14089 0
14088 -1592 0
14089 -1592 0
c ((SATLiteral(14090) /\ SATLiteral(14091))=tv=SATLiteral(1593))
1593 -14090 -14091 0
14090 -1593 0
14091 -1593 0
c ((SATLiteral(14092) /\ SATLiteral(14093))=tv=SATLiteral(1594))
1594 -14092 -14093 0
14092 -1594 0
14093 -1594 0
c ((SATLiteral(14094) /\ SATLiteral(14095))=tv=SATLiteral(1595))
1595 -14094 -14095 0
14094 -1595 0
14095 -1595 0
c ((SATLiteral(14096) /\ SATLiteral(14097))=tv=SATLiteral(1596))
1596 -14096 -14097 0
14096 -1596 0
14097 -1596 0
c ((SATLiteral(14098) /\ SATLiteral(14099))=tv=SATLiteral(1597))
1597 -14098 -14099 0
14098 -1597 0
14099 -1597 0
c ((SATLiteral(14100) /\ SATLiteral(14101))=tv=SATLiteral(1598))
1598 -14100 -14101 0
14100 -1598 0
14101 -1598 0
c ((SATLiteral(14102) /\ SATLiteral(14103))=tv=SATLiteral(1599))
1599 -14102 -14103 0
14102 -1599 0
14103 -1599 0
c ((SATLiteral(14104) /\ SATLiteral(14105))=tv=SATLiteral(1600))
1600 -14104 -14105 0
14104 -1600 0
14105 -1600 0
c ((SATLiteral(14106) /\ SATLiteral(14107))=tv=SATLiteral(1601))
1601 -14106 -14107 0
14106 -1601 0
14107 -1601 0
c ((SATLiteral(14108) /\ SATLiteral(14109))=tv=SATLiteral(1602))
1602 -14108 -14109 0
14108 -1602 0
14109 -1602 0
c ((SATLiteral(14110) /\ SATLiteral(14111))=tv=SATLiteral(1603))
1603 -14110 -14111 0
14110 -1603 0
14111 -1603 0
c ((SATLiteral(14112) /\ SATLiteral(14113))=tv=SATLiteral(1604))
1604 -14112 -14113 0
14112 -1604 0
14113 -1604 0
c ((SATLiteral(14114) /\ SATLiteral(14115))=tv=SATLiteral(1605))
1605 -14114 -14115 0
14114 -1605 0
14115 -1605 0
c ((SATLiteral(14116) /\ SATLiteral(14117))=tv=SATLiteral(1606))
1606 -14116 -14117 0
14116 -1606 0
14117 -1606 0
c ((SATLiteral(14118) /\ SATLiteral(14119))=tv=SATLiteral(1607))
1607 -14118 -14119 0
14118 -1607 0
14119 -1607 0
c ((SATLiteral(14120) /\ SATLiteral(14121))=tv=SATLiteral(1608))
1608 -14120 -14121 0
14120 -1608 0
14121 -1608 0
c ((SATLiteral(14122) /\ SATLiteral(14123))=tv=SATLiteral(1609))
1609 -14122 -14123 0
14122 -1609 0
14123 -1609 0
c ((SATLiteral(14124) /\ SATLiteral(14125))=tv=SATLiteral(1610))
1610 -14124 -14125 0
14124 -1610 0
14125 -1610 0
c ((SATLiteral(14126) /\ SATLiteral(14127))=tv=SATLiteral(1611))
1611 -14126 -14127 0
14126 -1611 0
14127 -1611 0
c ((SATLiteral(14128) /\ SATLiteral(14129))=tv=SATLiteral(1612))
1612 -14128 -14129 0
14128 -1612 0
14129 -1612 0
c ((SATLiteral(14130) /\ SATLiteral(14131))=tv=SATLiteral(1613))
1613 -14130 -14131 0
14130 -1613 0
14131 -1613 0
c ((SATLiteral(14132) /\ SATLiteral(14133))=tv=SATLiteral(1614))
1614 -14132 -14133 0
14132 -1614 0
14133 -1614 0
c ((SATLiteral(14134) /\ SATLiteral(14135))=tv=SATLiteral(1615))
1615 -14134 -14135 0
14134 -1615 0
14135 -1615 0
c ((SATLiteral(14136) /\ SATLiteral(14137))=tv=SATLiteral(1616))
1616 -14136 -14137 0
14136 -1616 0
14137 -1616 0
c ((SATLiteral(14138) /\ SATLiteral(14139))=tv=SATLiteral(1617))
1617 -14138 -14139 0
14138 -1617 0
14139 -1617 0
c ((SATLiteral(14140) /\ SATLiteral(14141))=tv=SATLiteral(1618))
1618 -14140 -14141 0
14140 -1618 0
14141 -1618 0
c ((SATLiteral(14142) /\ SATLiteral(14143))=tv=SATLiteral(1619))
1619 -14142 -14143 0
14142 -1619 0
14143 -1619 0
c ((SATLiteral(14144) /\ SATLiteral(14145))=tv=SATLiteral(1620))
1620 -14144 -14145 0
14144 -1620 0
14145 -1620 0
c ((SATLiteral(14146) /\ SATLiteral(14147))=tv=SATLiteral(1621))
1621 -14146 -14147 0
14146 -1621 0
14147 -1621 0
c ((SATLiteral(14148) /\ SATLiteral(14149))=tv=SATLiteral(1622))
1622 -14148 -14149 0
14148 -1622 0
14149 -1622 0
c ((SATLiteral(14150) /\ SATLiteral(14151))=tv=SATLiteral(1623))
1623 -14150 -14151 0
14150 -1623 0
14151 -1623 0
c ((SATLiteral(14152) /\ SATLiteral(14153))=tv=SATLiteral(1624))
1624 -14152 -14153 0
14152 -1624 0
14153 -1624 0
c ((SATLiteral(14154) /\ SATLiteral(14155))=tv=SATLiteral(1625))
1625 -14154 -14155 0
14154 -1625 0
14155 -1625 0
c ((SATLiteral(14156) /\ SATLiteral(14157))=tv=SATLiteral(1626))
1626 -14156 -14157 0
14156 -1626 0
14157 -1626 0
c ((SATLiteral(14158) /\ SATLiteral(14159))=tv=SATLiteral(1627))
1627 -14158 -14159 0
14158 -1627 0
14159 -1627 0
c ((SATLiteral(14160) /\ SATLiteral(14161))=tv=SATLiteral(1628))
1628 -14160 -14161 0
14160 -1628 0
14161 -1628 0
c ((SATLiteral(14162) /\ SATLiteral(14163))=tv=SATLiteral(1629))
1629 -14162 -14163 0
14162 -1629 0
14163 -1629 0
c ((SATLiteral(14164) /\ SATLiteral(14165))=tv=SATLiteral(1630))
1630 -14164 -14165 0
14164 -1630 0
14165 -1630 0
c ((SATLiteral(14166) /\ SATLiteral(14167))=tv=SATLiteral(1631))
1631 -14166 -14167 0
14166 -1631 0
14167 -1631 0
c ((SATLiteral(14168) /\ SATLiteral(14169))=tv=SATLiteral(1632))
1632 -14168 -14169 0
14168 -1632 0
14169 -1632 0
c ((SATLiteral(14170) /\ SATLiteral(14171))=tv=SATLiteral(1633))
1633 -14170 -14171 0
14170 -1633 0
14171 -1633 0
c ((SATLiteral(14172) /\ SATLiteral(14173))=tv=SATLiteral(1634))
1634 -14172 -14173 0
14172 -1634 0
14173 -1634 0
c ((SATLiteral(14174) /\ SATLiteral(14175))=tv=SATLiteral(1635))
1635 -14174 -14175 0
14174 -1635 0
14175 -1635 0
c ((SATLiteral(14176) /\ SATLiteral(14177))=tv=SATLiteral(1636))
1636 -14176 -14177 0
14176 -1636 0
14177 -1636 0
c (((SATLiteral(32) + SATLiteral(47) + SATLiteral(62))<=1)=tv=SATLiteral(1637))
-1637 -47 -62 0
-1637 -32 -62 0
-1637 -32 -47 0
1637 47 62 0
1637 32 62 0
1637 32 47 0
c (((SATLiteral(34) + SATLiteral(49) + SATLiteral(64))<=1)=tv=SATLiteral(1638))
-1638 -49 -64 0
-1638 -34 -64 0
-1638 -34 -49 0
1638 49 64 0
1638 34 64 0
1638 34 49 0
c (((SATLiteral(36) + SATLiteral(51) + SATLiteral(66))<=1)=tv=SATLiteral(1639))
-1639 -51 -66 0
-1639 -36 -66 0
-1639 -36 -51 0
1639 51 66 0
1639 36 66 0
1639 36 51 0
c (((SATLiteral(38) + SATLiteral(53) + SATLiteral(68))<=1)=tv=SATLiteral(1640))
-1640 -53 -68 0
-1640 -38 -68 0
-1640 -38 -53 0
1640 53 68 0
1640 38 68 0
1640 38 53 0
c (((SATLiteral(40) + SATLiteral(55) + SATLiteral(70))<=1)=tv=SATLiteral(1641))
-1641 -55 -70 0
-1641 -40 -70 0
-1641 -40 -55 0
1641 55 70 0
1641 40 70 0
1641 40 55 0
c (((SATLiteral(42) + SATLiteral(57) + SATLiteral(72))<=1)=tv=SATLiteral(1642))
-1642 -57 -72 0
-1642 -42 -72 0
-1642 -42 -57 0
1642 57 72 0
1642 42 72 0
1642 42 57 0
c (((SATLiteral(44) + SATLiteral(59) + SATLiteral(74))<=1)=tv=SATLiteral(1643))
-1643 -59 -74 0
-1643 -44 -74 0
-1643 -44 -59 0
1643 59 74 0
1643 44 74 0
1643 44 59 0
c (((SATLiteral(46) + SATLiteral(61) + SATLiteral(76))<=1)=tv=SATLiteral(1644))
-1644 -61 -76 0
-1644 -46 -76 0
-1644 -46 -61 0
1644 61 76 0
1644 46 76 0
1644 46 61 0
c (((SATLiteral(-45) + SATLiteral(-60) + SATLiteral(-75))<=1)=tv=SATLiteral(1645))
-1645 60 75 0
-1645 45 75 0
-1645 45 60 0
1645 -60 -75 0
1645 -45 -75 0
1645 -45 -60 0
c (((SATLiteral(77) + aux2069 + SATLiteral(197))<=1)=tv=SATLiteral(1646))
-1646 13425 0
-1646 -197 13424 0
-1646 -77 13424 0
-1646 -77 -197 0
1646 197 -13424 0
1646 77 -13424 0
1646 77 197 -13425 0
c (((SATLiteral(79) + aux2070 + SATLiteral(199))<=1)=tv=SATLiteral(1647))
-1647 13428 0
-1647 -199 13427 0
-1647 -79 13427 0
-1647 -79 -199 0
1647 199 -13427 0
1647 79 -13427 0
1647 79 199 -13428 0
c (((SATLiteral(81) + aux2071 + SATLiteral(201))<=1)=tv=SATLiteral(1648))
-1648 13431 0
-1648 -201 13430 0
-1648 -81 13430 0
-1648 -81 -201 0
1648 201 -13430 0
1648 81 -13430 0
1648 81 201 -13431 0
c (((SATLiteral(83) + aux2072 + SATLiteral(203))<=1)=tv=SATLiteral(1649))
-1649 13434 0
-1649 -203 13433 0
-1649 -83 13433 0
-1649 -83 -203 0
1649 203 -13433 0
1649 83 -13433 0
1649 83 203 -13434 0
c (((SATLiteral(85) + aux2073 + SATLiteral(205))<=1)=tv=SATLiteral(1650))
-1650 13437 0
-1650 -205 13436 0
-1650 -85 13436 0
-1650 -85 -205 0
1650 205 -13436 0
1650 85 -13436 0
1650 85 205 -13437 0
c (((SATLiteral(87) + aux2074 + SATLiteral(207))<=1)=tv=SATLiteral(1651))
-1651 13440 0
-1651 -207 13439 0
-1651 -87 13439 0
-1651 -87 -207 0
1651 207 -13439 0
1651 87 -13439 0
1651 87 207 -13440 0
c (((SATLiteral(89) + aux2075 + SATLiteral(209))<=1)=tv=SATLiteral(1652))
-1652 13443 0
-1652 -209 13442 0
-1652 -89 13442 0
-1652 -89 -209 0
1652 209 -13442 0
1652 89 -13442 0
1652 89 209 -13443 0
c (((SATLiteral(91) + aux2076 + SATLiteral(211))<=1)=tv=SATLiteral(1653))
-1653 13446 0
-1653 -211 13445 0
-1653 -91 13445 0
-1653 -91 -211 0
1653 211 -13445 0
1653 91 -13445 0
1653 91 211 -13446 0
c (((SATLiteral(-90) + aux2077 + SATLiteral(-210))<=1)=tv=SATLiteral(1654))
-1654 13449 0
-1654 210 13448 0
-1654 90 13448 0
-1654 90 210 0
1654 -210 -13448 0
1654 -90 -13448 0
1654 -90 -210 -13449 0
c (((SATLiteral(122) + aux2078 + SATLiteral(527))<=1)=tv=SATLiteral(1655))
-1655 13452 0
-1655 -527 13451 0
-1655 -122 13451 0
-1655 -122 -527 0
1655 527 -13451 0
1655 122 -13451 0
1655 122 527 -13452 0
c (((SATLiteral(124) + aux2079 + SATLiteral(529))<=1)=tv=SATLiteral(1656))
-1656 13455 0
-1656 -529 13454 0
-1656 -124 13454 0
-1656 -124 -529 0
1656 529 -13454 0
1656 124 -13454 0
1656 124 529 -13455 0
c (((SATLiteral(126) + aux2080 + SATLiteral(531))<=1)=tv=SATLiteral(1657))
-1657 13458 0
-1657 -531 13457 0
-1657 -126 13457 0
-1657 -126 -531 0
1657 531 -13457 0
1657 126 -13457 0
1657 126 531 -13458 0
c (((SATLiteral(128) + aux2081 + SATLiteral(533))<=1)=tv=SATLiteral(1658))
-1658 13461 0
-1658 -533 13460 0
-1658 -128 13460 0
-1658 -128 -533 0
1658 533 -13460 0
1658 128 -13460 0
1658 128 533 -13461 0
c (((SATLiteral(130) + aux2082 + SATLiteral(535))<=1)=tv=SATLiteral(1659))
-1659 13464 0
-1659 -535 13463 0
-1659 -130 13463 0
-1659 -130 -535 0
1659 535 -13463 0
1659 130 -13463 0
1659 130 535 -13464 0
c (((SATLiteral(132) + aux2083 + SATLiteral(537))<=1)=tv=SATLiteral(1660))
-1660 13467 0
-1660 -537 13466 0
-1660 -132 13466 0
-1660 -132 -537 0
1660 537 -13466 0
1660 132 -13466 0
1660 132 537 -13467 0
c (((SATLiteral(134) + aux2084 + SATLiteral(539))<=1)=tv=SATLiteral(1661))
-1661 13470 0
-1661 -539 13469 0
-1661 -134 13469 0
-1661 -134 -539 0
1661 539 -13469 0
1661 134 -13469 0
1661 134 539 -13470 0
c (((SATLiteral(136) + aux2085 + SATLiteral(541))<=1)=tv=SATLiteral(1662))
-1662 13473 0
-1662 -541 13472 0
-1662 -136 13472 0
-1662 -136 -541 0
1662 541 -13472 0
1662 136 -13472 0
1662 136 541 -13473 0
c (((SATLiteral(-135) + aux2086 + SATLiteral(-540))<=1)=tv=SATLiteral(1663))
-1663 13476 0
-1663 540 13475 0
-1663 135 13475 0
-1663 135 540 0
1663 -540 -13475 0
1663 -135 -13475 0
1663 -135 -540 -13476 0
c (((SATLiteral(287) + aux2087 + SATLiteral(137))<=1)=tv=SATLiteral(1664))
-1664 13479 0
-1664 -137 13478 0
-1664 -287 13478 0
-1664 -287 -137 0
1664 137 -13478 0
1664 287 -13478 0
1664 287 137 -13479 0
c (((SATLiteral(289) + aux2088 + SATLiteral(139))<=1)=tv=SATLiteral(1665))
-1665 13482 0
-1665 -139 13481 0
-1665 -289 13481 0
-1665 -289 -139 0
1665 139 -13481 0
1665 289 -13481 0
1665 289 139 -13482 0
c (((SATLiteral(291) + aux2089 + SATLiteral(141))<=1)=tv=SATLiteral(1666))
-1666 13485 0
-1666 -141 13484 0
-1666 -291 13484 0
-1666 -291 -141 0
1666 141 -13484 0
1666 291 -13484 0
1666 291 141 -13485 0
c (((SATLiteral(293) + aux2090 + SATLiteral(143))<=1)=tv=SATLiteral(1667))
-1667 13488 0
-1667 -143 13487 0
-1667 -293 13487 0
-1667 -293 -143 0
1667 143 -13487 0
1667 293 -13487 0
1667 293 143 -13488 0
c (((SATLiteral(295) + aux2091 + SATLiteral(145))<=1)=tv=SATLiteral(1668))
-1668 13491 0
-1668 -145 13490 0
-1668 -295 13490 0
-1668 -295 -145 0
1668 145 -13490 0
1668 295 -13490 0
1668 295 145 -13491 0
c (((SATLiteral(297) + aux2092 + SATLiteral(147))<=1)=tv=SATLiteral(1669))
-1669 13494 0
-1669 -147 13493 0
-1669 -297 13493 0
-1669 -297 -147 0
1669 147 -13493 0
1669 297 -13493 0
1669 297 147 -13494 0
c (((SATLiteral(299) + aux2093 + SATLiteral(149))<=1)=tv=SATLiteral(1670))
-1670 13497 0
-1670 -149 13496 0
-1670 -299 13496 0
-1670 -299 -149 0
1670 149 -13496 0
1670 299 -13496 0
1670 299 149 -13497 0
c (((SATLiteral(301) + aux2094 + SATLiteral(151))<=1)=tv=SATLiteral(1671))
-1671 13500 0
-1671 -151 13499 0
-1671 -301 13499 0
-1671 -301 -151 0
1671 151 -13499 0
1671 301 -13499 0
1671 301 151 -13500 0
c (((SATLiteral(-300) + aux2095 + SATLiteral(-150))<=1)=tv=SATLiteral(1672))
-1672 13503 0
-1672 150 13502 0
-1672 300 13502 0
-1672 300 150 0
1672 -150 -13502 0
1672 -300 -13502 0
1672 -300 -150 -13503 0
c (((SATLiteral(302) + SATLiteral(317) + SATLiteral(452))<=1)=tv=SATLiteral(1673))
-1673 -317 -452 0
-1673 -302 -452 0
-1673 -302 -317 0
1673 317 452 0
1673 302 452 0
1673 302 317 0
c (((SATLiteral(304) + SATLiteral(319) + SATLiteral(454))<=1)=tv=SATLiteral(1674))
-1674 -319 -454 0
-1674 -304 -454 0
-1674 -304 -319 0
1674 319 454 0
1674 304 454 0
1674 304 319 0
c (((SATLiteral(306) + SATLiteral(321) + SATLiteral(456))<=1)=tv=SATLiteral(1675))
-1675 -321 -456 0
-1675 -306 -456 0
-1675 -306 -321 0
1675 321 456 0
1675 306 456 0
1675 306 321 0
c (((SATLiteral(308) + SATLiteral(323) + SATLiteral(458))<=1)=tv=SATLiteral(1676))
-1676 -323 -458 0
-1676 -308 -458 0
-1676 -308 -323 0
1676 323 458 0
1676 308 458 0
1676 308 323 0
c (((SATLiteral(310) + SATLiteral(325) + SATLiteral(460))<=1)=tv=SATLiteral(1677))
-1677 -325 -460 0
-1677 -310 -460 0
-1677 -310 -325 0
1677 325 460 0
1677 310 460 0
1677 310 325 0
c (((SATLiteral(312) + SATLiteral(327) + SATLiteral(462))<=1)=tv=SATLiteral(1678))
-1678 -327 -462 0
-1678 -312 -462 0
-1678 -312 -327 0
1678 327 462 0
1678 312 462 0
1678 312 327 0
c (((SATLiteral(314) + SATLiteral(329) + SATLiteral(464))<=1)=tv=SATLiteral(1679))
-1679 -329 -464 0
-1679 -314 -464 0
-1679 -314 -329 0
1679 329 464 0
1679 314 464 0
1679 314 329 0
c (((SATLiteral(316) + SATLiteral(331) + SATLiteral(466))<=1)=tv=SATLiteral(1680))
-1680 -331 -466 0
-1680 -316 -466 0
-1680 -316 -331 0
1680 331 466 0
1680 316 466 0
1680 316 331 0
c (((SATLiteral(-315) + SATLiteral(-330) + SATLiteral(-465))<=1)=tv=SATLiteral(1681))
-1681 330 465 0
-1681 315 465 0
-1681 315 330 0
1681 -330 -465 0
1681 -315 -465 0
1681 -315 -330 0
c (((SATLiteral(347) + SATLiteral(482) + SATLiteral(617))<=1)=tv=SATLiteral(1682))
-1682 -482 -617 0
-1682 -347 -617 0
-1682 -347 -482 0
1682 482 617 0
1682 347 617 0
1682 347 482 0
c (((SATLiteral(349) + SATLiteral(484) + SATLiteral(619))<=1)=tv=SATLiteral(1683))
-1683 -484 -619 0
-1683 -349 -619 0
-1683 -349 -484 0
1683 484 619 0
1683 349 619 0
1683 349 484 0
c (((SATLiteral(351) + SATLiteral(486) + SATLiteral(621))<=1)=tv=SATLiteral(1684))
-1684 -486 -621 0
-1684 -351 -621 0
-1684 -351 -486 0
1684 486 621 0
1684 351 621 0
1684 351 486 0
c (((SATLiteral(353) + SATLiteral(488) + SATLiteral(623))<=1)=tv=SATLiteral(1685))
-1685 -488 -623 0
-1685 -353 -623 0
-1685 -353 -488 0
1685 488 623 0
1685 353 623 0
1685 353 488 0
c (((SATLiteral(355) + SATLiteral(490) + SATLiteral(625))<=1)=tv=SATLiteral(1686))
-1686 -490 -625 0
-1686 -355 -625 0
-1686 -355 -490 0
1686 490 625 0
1686 355 625 0
1686 355 490 0
c (((SATLiteral(357) + SATLiteral(492) + SATLiteral(627))<=1)=tv=SATLiteral(1687))
-1687 -492 -627 0
-1687 -357 -627 0
-1687 -357 -492 0
1687 492 627 0
1687 357 627 0
1687 357 492 0
c (((SATLiteral(359) + SATLiteral(494) + SATLiteral(629))<=1)=tv=SATLiteral(1688))
-1688 -494 -629 0
-1688 -359 -629 0
-1688 -359 -494 0
1688 494 629 0
1688 359 629 0
1688 359 494 0
c (((SATLiteral(361) + SATLiteral(496) + SATLiteral(631))<=1)=tv=SATLiteral(1689))
-1689 -496 -631 0
-1689 -361 -631 0
-1689 -361 -496 0
1689 496 631 0
1689 361 631 0
1689 361 496 0
c (((SATLiteral(-360) + SATLiteral(-495) + SATLiteral(-630))<=1)=tv=SATLiteral(1690))
-1690 495 630 0
-1690 360 630 0
-1690 360 495 0
1690 -495 -630 0
1690 -360 -630 0
1690 -360 -495 0
c (((SATLiteral(362) + SATLiteral(377) + SATLiteral(497))<=1)=tv=SATLiteral(1691))
-1691 -377 -497 0
-1691 -362 -497 0
-1691 -362 -377 0
1691 377 497 0
1691 362 497 0
1691 362 377 0
c (((SATLiteral(364) + SATLiteral(379) + SATLiteral(499))<=1)=tv=SATLiteral(1692))
-1692 -379 -499 0
-1692 -364 -499 0
-1692 -364 -379 0
1692 379 499 0
1692 364 499 0
1692 364 379 0
c (((SATLiteral(366) + SATLiteral(381) + SATLiteral(501))<=1)=tv=SATLiteral(1693))
-1693 -381 -501 0
-1693 -366 -501 0
-1693 -366 -381 0
1693 381 501 0
1693 366 501 0
1693 366 381 0
c (((SATLiteral(368) + SATLiteral(383) + SATLiteral(503))<=1)=tv=SATLiteral(1694))
-1694 -383 -503 0
-1694 -368 -503 0
-1694 -368 -383 0
1694 383 503 0
1694 368 503 0
1694 368 383 0
c (((SATLiteral(370) + SATLiteral(385) + SATLiteral(505))<=1)=tv=SATLiteral(1695))
-1695 -385 -505 0
-1695 -370 -505 0
-1695 -370 -385 0
1695 385 505 0
1695 370 505 0
1695 370 385 0
c (((SATLiteral(372) + SATLiteral(387) + SATLiteral(507))<=1)=tv=SATLiteral(1696))
-1696 -387 -507 0
-1696 -372 -507 0
-1696 -372 -387 0
1696 387 507 0
1696 372 507 0
1696 372 387 0
c (((SATLiteral(374) + SATLiteral(389) + SATLiteral(509))<=1)=tv=SATLiteral(1697))
-1697 -389 -509 0
-1697 -374 -509 0
-1697 -374 -389 0
1697 389 509 0
1697 374 509 0
1697 374 389 0
c (((SATLiteral(376) + SATLiteral(391) + SATLiteral(511))<=1)=tv=SATLiteral(1698))
-1698 -391 -511 0
-1698 -376 -511 0
-1698 -376 -391 0
1698 391 511 0
1698 376 511 0
1698 376 391 0
c (((SATLiteral(-375) + SATLiteral(-390) + SATLiteral(-510))<=1)=tv=SATLiteral(1699))
-1699 390 510 0
-1699 375 510 0
-1699 375 390 0
1699 -390 -510 0
1699 -375 -510 0
1699 -375 -390 0
c (((SATLiteral(737) + SATLiteral(467) + SATLiteral(602))<=1)=tv=SATLiteral(1700))
-1700 -467 -602 0
-1700 -737 -602 0
-1700 -737 -467 0
1700 467 602 0
1700 737 602 0
1700 737 467 0
c (((SATLiteral(739) + SATLiteral(469) + SATLiteral(604))<=1)=tv=SATLiteral(1701))
-1701 -469 -604 0
-1701 -739 -604 0
-1701 -739 -469 0
1701 469 604 0
1701 739 604 0
1701 739 469 0
c (((SATLiteral(741) + SATLiteral(471) + SATLiteral(606))<=1)=tv=SATLiteral(1702))
-1702 -471 -606 0
-1702 -741 -606 0
-1702 -741 -471 0
1702 471 606 0
1702 741 606 0
1702 741 471 0
c (((SATLiteral(743) + SATLiteral(473) + SATLiteral(608))<=1)=tv=SATLiteral(1703))
-1703 -473 -608 0
-1703 -743 -608 0
-1703 -743 -473 0
1703 473 608 0
1703 743 608 0
1703 743 473 0
c (((SATLiteral(745) + SATLiteral(475) + SATLiteral(610))<=1)=tv=SATLiteral(1704))
-1704 -475 -610 0
-1704 -745 -610 0
-1704 -745 -475 0
1704 475 610 0
1704 745 610 0
1704 745 475 0
c (((SATLiteral(747) + SATLiteral(477) + SATLiteral(612))<=1)=tv=SATLiteral(1705))
-1705 -477 -612 0
-1705 -747 -612 0
-1705 -747 -477 0
1705 477 612 0
1705 747 612 0
1705 747 477 0
c (((SATLiteral(749) + SATLiteral(479) + SATLiteral(614))<=1)=tv=SATLiteral(1706))
-1706 -479 -614 0
-1706 -749 -614 0
-1706 -749 -479 0
1706 479 614 0
1706 749 614 0
1706 749 479 0
c (((SATLiteral(751) + SATLiteral(481) + SATLiteral(616))<=1)=tv=SATLiteral(1707))
-1707 -481 -616 0
-1707 -751 -616 0
-1707 -751 -481 0
1707 481 616 0
1707 751 616 0
1707 751 481 0
c (((SATLiteral(-750) + SATLiteral(-480) + SATLiteral(-615))<=1)=tv=SATLiteral(1708))
-1708 480 615 0
-1708 750 615 0
-1708 750 480 0
1708 -480 -615 0
1708 -750 -615 0
1708 -750 -480 0
c (((SATLiteral(512) + SATLiteral(632) + SATLiteral(647))<=1)=tv=SATLiteral(1709))
-1709 -632 -647 0
-1709 -512 -647 0
-1709 -512 -632 0
1709 632 647 0
1709 512 647 0
1709 512 632 0
c (((SATLiteral(514) + SATLiteral(634) + SATLiteral(649))<=1)=tv=SATLiteral(1710))
-1710 -634 -649 0
-1710 -514 -649 0
-1710 -514 -634 0
1710 634 649 0
1710 514 649 0
1710 514 634 0
c (((SATLiteral(516) + SATLiteral(636) + SATLiteral(651))<=1)=tv=SATLiteral(1711))
-1711 -636 -651 0
-1711 -516 -651 0
-1711 -516 -636 0
1711 636 651 0
1711 516 651 0
1711 516 636 0
c (((SATLiteral(518) + SATLiteral(638) + SATLiteral(653))<=1)=tv=SATLiteral(1712))
-1712 -638 -653 0
-1712 -518 -653 0
-1712 -518 -638 0
1712 638 653 0
1712 518 653 0
1712 518 638 0
c (((SATLiteral(520) + SATLiteral(640) + SATLiteral(655))<=1)=tv=SATLiteral(1713))
-1713 -640 -655 0
-1713 -520 -655 0
-1713 -520 -640 0
1713 640 655 0
1713 520 655 0
1713 520 640 0
c (((SATLiteral(522) + SATLiteral(642) + SATLiteral(657))<=1)=tv=SATLiteral(1714))
-1714 -642 -657 0
-1714 -522 -657 0
-1714 -522 -642 0
1714 642 657 0
1714 522 657 0
1714 522 642 0
c (((SATLiteral(524) + SATLiteral(644) + SATLiteral(659))<=1)=tv=SATLiteral(1715))
-1715 -644 -659 0
-1715 -524 -659 0
-1715 -524 -644 0
1715 644 659 0
1715 524 659 0
1715 524 644 0
c (((SATLiteral(526) + SATLiteral(646) + SATLiteral(661))<=1)=tv=SATLiteral(1716))
-1716 -646 -661 0
-1716 -526 -661 0
-1716 -526 -646 0
1716 646 661 0
1716 526 661 0
1716 526 646 0
c (((SATLiteral(-525) + SATLiteral(-645) + SATLiteral(-660))<=1)=tv=SATLiteral(1717))
-1717 645 660 0
-1717 525 660 0
-1717 525 645 0
1717 -645 -660 0
1717 -525 -660 0
1717 -525 -645 0
c (((SATLiteral(692) + SATLiteral(557) + SATLiteral(572))<=1)=tv=SATLiteral(1718))
-1718 -557 -572 0
-1718 -692 -572 0
-1718 -692 -557 0
1718 557 572 0
1718 692 572 0
1718 692 557 0
c (((SATLiteral(694) + SATLiteral(559) + SATLiteral(574))<=1)=tv=SATLiteral(1719))
-1719 -559 -574 0
-1719 -694 -574 0
-1719 -694 -559 0
1719 559 574 0
1719 694 574 0
1719 694 559 0
c (((SATLiteral(696) + SATLiteral(561) + SATLiteral(576))<=1)=tv=SATLiteral(1720))
-1720 -561 -576 0
-1720 -696 -576 0
-1720 -696 -561 0
1720 561 576 0
1720 696 576 0
1720 696 561 0
c (((SATLiteral(698) + SATLiteral(563) + SATLiteral(578))<=1)=tv=SATLiteral(1721))
-1721 -563 -578 0
-1721 -698 -578 0
-1721 -698 -563 0
1721 563 578 0
1721 698 578 0
1721 698 563 0
c (((SATLiteral(700) + SATLiteral(565) + SATLiteral(580))<=1)=tv=SATLiteral(1722))
-1722 -565 -580 0
-1722 -700 -580 0
-1722 -700 -565 0
1722 565 580 0
1722 700 580 0
1722 700 565 0
c (((SATLiteral(702) + SATLiteral(567) + SATLiteral(582))<=1)=tv=SATLiteral(1723))
-1723 -567 -582 0
-1723 -702 -582 0
-1723 -702 -567 0
1723 567 582 0
1723 702 582 0
1723 702 567 0
c (((SATLiteral(704) + SATLiteral(569) + SATLiteral(584))<=1)=tv=SATLiteral(1724))
-1724 -569 -584 0
-1724 -704 -584 0
-1724 -704 -569 0
1724 569 584 0
1724 704 584 0
1724 704 569 0
c (((SATLiteral(706) + SATLiteral(571) + SATLiteral(586))<=1)=tv=SATLiteral(1725))
-1725 -571 -586 0
-1725 -706 -586 0
-1725 -706 -571 0
1725 571 586 0
1725 706 586 0
1725 706 571 0
c (((SATLiteral(-705) + SATLiteral(-570) + SATLiteral(-585))<=1)=tv=SATLiteral(1726))
-1726 570 585 0
-1726 705 585 0
-1726 705 570 0
1726 -570 -585 0
1726 -705 -585 0
1726 -705 -570 0
c (((SATLiteral(722) + SATLiteral(857) + SATLiteral(587))<=1)=tv=SATLiteral(1727))
-1727 -857 -587 0
-1727 -722 -587 0
-1727 -722 -857 0
1727 857 587 0
1727 722 587 0
1727 722 857 0
c (((SATLiteral(724) + SATLiteral(859) + SATLiteral(589))<=1)=tv=SATLiteral(1728))
-1728 -859 -589 0
-1728 -724 -589 0
-1728 -724 -859 0
1728 859 589 0
1728 724 589 0
1728 724 859 0
c (((SATLiteral(726) + SATLiteral(861) + SATLiteral(591))<=1)=tv=SATLiteral(1729))
-1729 -861 -591 0
-1729 -726 -591 0
-1729 -726 -861 0
1729 861 591 0
1729 726 591 0
1729 726 861 0
c (((SATLiteral(728) + SATLiteral(863) + SATLiteral(593))<=1)=tv=SATLiteral(1730))
-1730 -863 -593 0
-1730 -728 -593 0
-1730 -728 -863 0
1730 863 593 0
1730 728 593 0
1730 728 863 0
c (((SATLiteral(730) + SATLiteral(865) + SATLiteral(595))<=1)=tv=SATLiteral(1731))
-1731 -865 -595 0
-1731 -730 -595 0
-1731 -730 -865 0
1731 865 595 0
1731 730 595 0
1731 730 865 0
c (((SATLiteral(732) + SATLiteral(867) + SATLiteral(597))<=1)=tv=SATLiteral(1732))
-1732 -867 -597 0
-1732 -732 -597 0
-1732 -732 -867 0
1732 867 597 0
1732 732 597 0
1732 732 867 0
c (((SATLiteral(734) + SATLiteral(869) + SATLiteral(599))<=1)=tv=SATLiteral(1733))
-1733 -869 -599 0
-1733 -734 -599 0
-1733 -734 -869 0
1733 869 599 0
1733 734 599 0
1733 734 869 0
c (((SATLiteral(736) + SATLiteral(871) + SATLiteral(601))<=1)=tv=SATLiteral(1734))
-1734 -871 -601 0
-1734 -736 -601 0
-1734 -736 -871 0
1734 871 601 0
1734 736 601 0
1734 736 871 0
c (((SATLiteral(-735) + SATLiteral(-870) + SATLiteral(-600))<=1)=tv=SATLiteral(1735))
-1735 870 600 0
-1735 735 600 0
-1735 735 870 0
1735 -870 -600 0
1735 -735 -600 0
1735 -735 -870 0
c (((SATLiteral(677) + aux2096 + SATLiteral(1082))<=1)=tv=SATLiteral(1736))
-1736 13506 0
-1736 -1082 13505 0
-1736 -677 13505 0
-1736 -677 -1082 0
1736 1082 -13505 0
1736 677 -13505 0
1736 677 1082 -13506 0
c (((SATLiteral(679) + aux2097 + SATLiteral(1084))<=1)=tv=SATLiteral(1737))
-1737 13509 0
-1737 -1084 13508 0
-1737 -679 13508 0
-1737 -679 -1084 0
1737 1084 -13508 0
1737 679 -13508 0
1737 679 1084 -13509 0
c (((SATLiteral(681) + aux2098 + SATLiteral(1086))<=1)=tv=SATLiteral(1738))
-1738 13512 0
-1738 -1086 13511 0
-1738 -681 13511 0
-1738 -681 -1086 0
1738 1086 -13511 0
1738 681 -13511 0
1738 681 1086 -13512 0
c (((SATLiteral(683) + aux2099 + SATLiteral(1088))<=1)=tv=SATLiteral(1739))
-1739 13515 0
-1739 -1088 13514 0
-1739 -683 13514 0
-1739 -683 -1088 0
1739 1088 -13514 0
1739 683 -13514 0
1739 683 1088 -13515 0
c (((SATLiteral(685) + aux2100 + SATLiteral(1090))<=1)=tv=SATLiteral(1740))
-1740 13518 0
-1740 -1090 13517 0
-1740 -685 13517 0
-1740 -685 -1090 0
1740 1090 -13517 0
1740 685 -13517 0
1740 685 1090 -13518 0
c (((SATLiteral(687) + aux2101 + SATLiteral(1092))<=1)=tv=SATLiteral(1741))
-1741 13521 0
-1741 -1092 13520 0
-1741 -687 13520 0
-1741 -687 -1092 0
1741 1092 -13520 0
1741 687 -13520 0
1741 687 1092 -13521 0
c (((SATLiteral(689) + aux2102 + SATLiteral(1094))<=1)=tv=SATLiteral(1742))
-1742 13524 0
-1742 -1094 13523 0
-1742 -689 13523 0
-1742 -689 -1094 0
1742 1094 -13523 0
1742 689 -13523 0
1742 689 1094 -13524 0
c (((SATLiteral(691) + aux2103 + SATLiteral(1096))<=1)=tv=SATLiteral(1743))
-1743 13527 0
-1743 -1096 13526 0
-1743 -691 13526 0
-1743 -691 -1096 0
1743 1096 -13526 0
1743 691 -13526 0
1743 691 1096 -13527 0
c (((SATLiteral(-690) + aux2104 + SATLiteral(-1095))<=1)=tv=SATLiteral(1744))
-1744 13530 0
-1744 1095 13529 0
-1744 690 13529 0
-1744 690 1095 0
1744 -1095 -13529 0
1744 -690 -13529 0
1744 -690 -1095 -13530 0
c (((SATLiteral(707) + SATLiteral(827) + SATLiteral(842))<=1)=tv=SATLiteral(1745))
-1745 -827 -842 0
-1745 -707 -842 0
-1745 -707 -827 0
1745 827 842 0
1745 707 842 0
1745 707 827 0
c (((SATLiteral(709) + SATLiteral(829) + SATLiteral(844))<=1)=tv=SATLiteral(1746))
-1746 -829 -844 0
-1746 -709 -844 0
-1746 -709 -829 0
1746 829 844 0
1746 709 844 0
1746 709 829 0
c (((SATLiteral(711) + SATLiteral(831) + SATLiteral(846))<=1)=tv=SATLiteral(1747))
-1747 -831 -846 0
-1747 -711 -846 0
-1747 -711 -831 0
1747 831 846 0
1747 711 846 0
1747 711 831 0
c (((SATLiteral(713) + SATLiteral(833) + SATLiteral(848))<=1)=tv=SATLiteral(1748))
-1748 -833 -848 0
-1748 -713 -848 0
-1748 -713 -833 0
1748 833 848 0
1748 713 848 0
1748 713 833 0
c (((SATLiteral(715) + SATLiteral(835) + SATLiteral(850))<=1)=tv=SATLiteral(1749))
-1749 -835 -850 0
-1749 -715 -850 0
-1749 -715 -835 0
1749 835 850 0
1749 715 850 0
1749 715 835 0
c (((SATLiteral(717) + SATLiteral(837) + SATLiteral(852))<=1)=tv=SATLiteral(1750))
-1750 -837 -852 0
-1750 -717 -852 0
-1750 -717 -837 0
1750 837 852 0
1750 717 852 0
1750 717 837 0
c (((SATLiteral(719) + SATLiteral(839) + SATLiteral(854))<=1)=tv=SATLiteral(1751))
-1751 -839 -854 0
-1751 -719 -854 0
-1751 -719 -839 0
1751 839 854 0
1751 719 854 0
1751 719 839 0
c (((SATLiteral(721) + SATLiteral(841) + SATLiteral(856))<=1)=tv=SATLiteral(1752))
-1752 -841 -856 0
-1752 -721 -856 0
-1752 -721 -841 0
1752 841 856 0
1752 721 856 0
1752 721 841 0
c (((SATLiteral(-720) + SATLiteral(-840) + SATLiteral(-855))<=1)=tv=SATLiteral(1753))
-1753 840 855 0
-1753 720 855 0
-1753 720 840 0
1753 -840 -855 0
1753 -720 -855 0
1753 -720 -840 0
c (((SATLiteral(752) + SATLiteral(887) + SATLiteral(902))<=1)=tv=SATLiteral(1754))
-1754 -887 -902 0
-1754 -752 -902 0
-1754 -752 -887 0
1754 887 902 0
1754 752 902 0
1754 752 887 0
c (((SATLiteral(754) + SATLiteral(889) + SATLiteral(904))<=1)=tv=SATLiteral(1755))
-1755 -889 -904 0
-1755 -754 -904 0
-1755 -754 -889 0
1755 889 904 0
1755 754 904 0
1755 754 889 0
c (((SATLiteral(756) + SATLiteral(891) + SATLiteral(906))<=1)=tv=SATLiteral(1756))
-1756 -891 -906 0
-1756 -756 -906 0
-1756 -756 -891 0
1756 891 906 0
1756 756 906 0
1756 756 891 0
c (((SATLiteral(758) + SATLiteral(893) + SATLiteral(908))<=1)=tv=SATLiteral(1757))
-1757 -893 -908 0
-1757 -758 -908 0
-1757 -758 -893 0
1757 893 908 0
1757 758 908 0
1757 758 893 0
c (((SATLiteral(760) + SATLiteral(895) + SATLiteral(910))<=1)=tv=SATLiteral(1758))
-1758 -895 -910 0
-1758 -760 -910 0
-1758 -760 -895 0
1758 895 910 0
1758 760 910 0
1758 760 895 0
c (((SATLiteral(762) + SATLiteral(897) + SATLiteral(912))<=1)=tv=SATLiteral(1759))
-1759 -897 -912 0
-1759 -762 -912 0
-1759 -762 -897 0
1759 897 912 0
1759 762 912 0
1759 762 897 0
c (((SATLiteral(764) + SATLiteral(899) + SATLiteral(914))<=1)=tv=SATLiteral(1760))
-1760 -899 -914 0
-1760 -764 -914 0
-1760 -764 -899 0
1760 899 914 0
1760 764 914 0
1760 764 899 0
c (((SATLiteral(766) + SATLiteral(901) + SATLiteral(916))<=1)=tv=SATLiteral(1761))
-1761 -901 -916 0
-1761 -766 -916 0
-1761 -766 -901 0
1761 901 916 0
1761 766 916 0
1761 766 901 0
c (((SATLiteral(-765) + SATLiteral(-900) + SATLiteral(-915))<=1)=tv=SATLiteral(1762))
-1762 900 915 0
-1762 765 915 0
-1762 765 900 0
1762 -900 -915 0
1762 -765 -915 0
1762 -765 -900 0
c (((SATLiteral(1007) + aux2105 + SATLiteral(1127))<=1)=tv=SATLiteral(1763))
-1763 13533 0
-1763 -1127 13532 0
-1763 -1007 13532 0
-1763 -1007 -1127 0
1763 1127 -13532 0
1763 1007 -13532 0
1763 1007 1127 -13533 0
c (((SATLiteral(1009) + aux2106 + SATLiteral(1129))<=1)=tv=SATLiteral(1764))
-1764 13536 0
-1764 -1129 13535 0
-1764 -1009 13535 0
-1764 -1009 -1129 0
1764 1129 -13535 0
1764 1009 -13535 0
1764 1009 1129 -13536 0
c (((SATLiteral(1011) + aux2107 + SATLiteral(1131))<=1)=tv=SATLiteral(1765))
-1765 13539 0
-1765 -1131 13538 0
-1765 -1011 13538 0
-1765 -1011 -1131 0
1765 1131 -13538 0
1765 1011 -13538 0
1765 1011 1131 -13539 0
c (((SATLiteral(1013) + aux2108 + SATLiteral(1133))<=1)=tv=SATLiteral(1766))
-1766 13542 0
-1766 -1133 13541 0
-1766 -1013 13541 0
-1766 -1013 -1133 0
1766 1133 -13541 0
1766 1013 -13541 0
1766 1013 1133 -13542 0
c (((SATLiteral(1015) + aux2109 + SATLiteral(1135))<=1)=tv=SATLiteral(1767))
-1767 13545 0
-1767 -1135 13544 0
-1767 -1015 13544 0
-1767 -1015 -1135 0
1767 1135 -13544 0
1767 1015 -13544 0
1767 1015 1135 -13545 0
c (((SATLiteral(1017) + aux2110 + SATLiteral(1137))<=1)=tv=SATLiteral(1768))
-1768 13548 0
-1768 -1137 13547 0
-1768 -1017 13547 0
-1768 -1017 -1137 0
1768 1137 -13547 0
1768 1017 -13547 0
1768 1017 1137 -13548 0
c (((SATLiteral(1019) + aux2111 + SATLiteral(1139))<=1)=tv=SATLiteral(1769))
-1769 13551 0
-1769 -1139 13550 0
-1769 -1019 13550 0
-1769 -1019 -1139 0
1769 1139 -13550 0
1769 1019 -13550 0
1769 1019 1139 -13551 0
c (((SATLiteral(1021) + aux2112 + SATLiteral(1141))<=1)=tv=SATLiteral(1770))
-1770 13554 0
-1770 -1141 13553 0
-1770 -1021 13553 0
-1770 -1021 -1141 0
1770 1141 -13553 0
1770 1021 -13553 0
1770 1021 1141 -13554 0
c (((SATLiteral(-1020) + aux2113 + SATLiteral(-1140))<=1)=tv=SATLiteral(1771))
-1771 13557 0
-1771 1140 13556 0
-1771 1020 13556 0
-1771 1020 1140 0
1771 -1140 -13556 0
1771 -1020 -13556 0
1771 -1020 -1140 -13557 0
c (((SATLiteral(1067) + aux2114 + SATLiteral(917))<=1)=tv=SATLiteral(1772))
-1772 13560 0
-1772 -917 13559 0
-1772 -1067 13559 0
-1772 -1067 -917 0
1772 917 -13559 0
1772 1067 -13559 0
1772 1067 917 -13560 0
c (((SATLiteral(1069) + aux2115 + SATLiteral(919))<=1)=tv=SATLiteral(1773))
-1773 13563 0
-1773 -919 13562 0
-1773 -1069 13562 0
-1773 -1069 -919 0
1773 919 -13562 0
1773 1069 -13562 0
1773 1069 919 -13563 0
c (((SATLiteral(1071) + aux2116 + SATLiteral(921))<=1)=tv=SATLiteral(1774))
-1774 13566 0
-1774 -921 13565 0
-1774 -1071 13565 0
-1774 -1071 -921 0
1774 921 -13565 0
1774 1071 -13565 0
1774 1071 921 -13566 0
c (((SATLiteral(1073) + aux2117 + SATLiteral(923))<=1)=tv=SATLiteral(1775))
-1775 13569 0
-1775 -923 13568 0
-1775 -1073 13568 0
-1775 -1073 -923 0
1775 923 -13568 0
1775 1073 -13568 0
1775 1073 923 -13569 0
c (((SATLiteral(1075) + aux2118 + SATLiteral(925))<=1)=tv=SATLiteral(1776))
-1776 13572 0
-1776 -925 13571 0
-1776 -1075 13571 0
-1776 -1075 -925 0
1776 925 -13571 0
1776 1075 -13571 0
1776 1075 925 -13572 0
c (((SATLiteral(1077) + aux2119 + SATLiteral(927))<=1)=tv=SATLiteral(1777))
-1777 13575 0
-1777 -927 13574 0
-1777 -1077 13574 0
-1777 -1077 -927 0
1777 927 -13574 0
1777 1077 -13574 0
1777 1077 927 -13575 0
c (((SATLiteral(1079) + aux2120 + SATLiteral(929))<=1)=tv=SATLiteral(1778))
-1778 13578 0
-1778 -929 13577 0
-1778 -1079 13577 0
-1778 -1079 -929 0
1778 929 -13577 0
1778 1079 -13577 0
1778 1079 929 -13578 0
c (((SATLiteral(1081) + aux2121 + SATLiteral(931))<=1)=tv=SATLiteral(1779))
-1779 13581 0
-1779 -931 13580 0
-1779 -1081 13580 0
-1779 -1081 -931 0
1779 931 -13580 0
1779 1081 -13580 0
1779 1081 931 -13581 0
c (((SATLiteral(-1080) + aux2122 + SATLiteral(-930))<=1)=tv=SATLiteral(1780))
-1780 13584 0
-1780 930 13583 0
-1780 1080 13583 0
-1780 1080 930 0
1780 -930 -13583 0
1780 -1080 -13583 0
1780 -1080 -930 -13584 0
c (((SATLiteral(1142) + SATLiteral(1157) + SATLiteral(1172))<=1)=tv=SATLiteral(1781))
-1781 -1157 -1172 0
-1781 -1142 -1172 0
-1781 -1142 -1157 0
1781 1157 1172 0
1781 1142 1172 0
1781 1142 1157 0
c (((SATLiteral(1144) + SATLiteral(1159) + SATLiteral(1174))<=1)=tv=SATLiteral(1782))
-1782 -1159 -1174 0
-1782 -1144 -1174 0
-1782 -1144 -1159 0
1782 1159 1174 0
1782 1144 1174 0
1782 1144 1159 0
c (((SATLiteral(1146) + SATLiteral(1161) + SATLiteral(1176))<=1)=tv=SATLiteral(1783))
-1783 -1161 -1176 0
-1783 -1146 -1176 0
-1783 -1146 -1161 0
1783 1161 1176 0
1783 1146 1176 0
1783 1146 1161 0
c (((SATLiteral(1148) + SATLiteral(1163) + SATLiteral(1178))<=1)=tv=SATLiteral(1784))
-1784 -1163 -1178 0
-1784 -1148 -1178 0
-1784 -1148 -1163 0
1784 1163 1178 0
1784 1148 1178 0
1784 1148 1163 0
c (((SATLiteral(1150) + SATLiteral(1165) + SATLiteral(1180))<=1)=tv=SATLiteral(1785))
-1785 -1165 -1180 0
-1785 -1150 -1180 0
-1785 -1150 -1165 0
1785 1165 1180 0
1785 1150 1180 0
1785 1150 1165 0
c (((SATLiteral(1152) + SATLiteral(1167) + SATLiteral(1182))<=1)=tv=SATLiteral(1786))
-1786 -1167 -1182 0
-1786 -1152 -1182 0
-1786 -1152 -1167 0
1786 1167 1182 0
1786 1152 1182 0
1786 1152 1167 0
c (((SATLiteral(1154) + SATLiteral(1169) + SATLiteral(1184))<=1)=tv=SATLiteral(1787))
-1787 -1169 -1184 0
-1787 -1154 -1184 0
-1787 -1154 -1169 0
1787 1169 1184 0
1787 1154 1184 0
1787 1154 1169 0
c (((SATLiteral(1156) + SATLiteral(1171) + SATLiteral(1186))<=1)=tv=SATLiteral(1788))
-1788 -1171 -1186 0
-1788 -1156 -1186 0
-1788 -1156 -1171 0
1788 1171 1186 0
1788 1156 1186 0
1788 1156 1171 0
c (((SATLiteral(-1155) + SATLiteral(-1170) + SATLiteral(-1185))<=1)=tv=SATLiteral(1789))
-1789 1170 1185 0
-1789 1155 1185 0
-1789 1155 1170 0
1789 -1170 -1185 0
1789 -1155 -1185 0
1789 -1155 -1170 0
c (SATLiteral(1273) -> SATLiteral(1329))
-1273 1329 0
c (SATLiteral(1274) -> SATLiteral(1330))
-1274 1330 0
c (SATLiteral(1275) -> SATLiteral(1331))
-1275 1331 0
c (SATLiteral(1276) -> SATLiteral(1332))
-1276 1332 0
c (SATLiteral(1277) -> SATLiteral(1333))
-1277 1333 0
c (SATLiteral(1278) -> SATLiteral(1334))
-1278 1334 0
c (SATLiteral(1279) -> SATLiteral(1335))
-1279 1335 0
c (SATLiteral(1280) -> SATLiteral(1336))
-1280 1336 0
c (SATLiteral(1281) -> SATLiteral(1337))
-1281 1337 0
c (SATLiteral(1282) -> SATLiteral(1338))
-1282 1338 0
c (SATLiteral(1283) -> SATLiteral(1339))
-1283 1339 0
c (SATLiteral(1284) -> SATLiteral(1340))
-1284 1340 0
c (SATLiteral(1285) -> SATLiteral(1341))
-1285 1341 0
c (SATLiteral(1286) -> SATLiteral(1342))
-1286 1342 0
c (SATLiteral(1287) -> SATLiteral(1343))
-1287 1343 0
c (SATLiteral(1288) -> SATLiteral(1344))
-1288 1344 0
c (SATLiteral(1289) -> SATLiteral(1345))
-1289 1345 0
c (SATLiteral(1290) -> SATLiteral(1346))
-1290 1346 0
c (SATLiteral(1291) -> SATLiteral(1347))
-1291 1347 0
c (SATLiteral(1292) -> SATLiteral(1348))
-1292 1348 0
c (SATLiteral(1293) -> SATLiteral(1349))
-1293 1349 0
c (SATLiteral(1294) -> SATLiteral(1350))
-1294 1350 0
c (SATLiteral(1295) -> SATLiteral(1351))
-1295 1351 0
c (SATLiteral(1296) -> SATLiteral(1352))
-1296 1352 0
c (SATLiteral(1297) -> SATLiteral(1353))
-1297 1353 0
c (SATLiteral(1298) -> SATLiteral(1354))
-1298 1354 0
c (SATLiteral(1299) -> SATLiteral(1355))
-1299 1355 0
c (SATLiteral(1300) -> SATLiteral(1356))
-1300 1356 0
c (SATLiteral(1301) -> SATLiteral(1357))
-1301 1357 0
c (SATLiteral(1244) -> SATLiteral(1358))
-1244 1358 0
c (SATLiteral(1247) -> SATLiteral(1359))
-1247 1359 0
c (SATLiteral(1248) -> SATLiteral(1360))
-1248 1360 0
c (SATLiteral(1251) -> SATLiteral(1361))
-1251 1361 0
c (SATLiteral(1255) -> SATLiteral(1362))
-1255 1362 0
c (SATLiteral(1256) -> SATLiteral(1363))
-1256 1363 0
c (SATLiteral(1261) -> SATLiteral(1364))
-1261 1364 0
c (SATLiteral(1265) -> SATLiteral(1365))
-1265 1365 0
c (SATLiteral(1268) -> SATLiteral(1366))
-1268 1366 0
c (SATLiteral(1269) -> SATLiteral(1367))
-1269 1367 0
c (SATLiteral(1270) -> SATLiteral(1368))
-1270 1368 0
c (SATLiteral(1272) -> SATLiteral(1369))
-1272 1369 0
c (SATLiteral(1302) -> SATLiteral(1370))
-1302 1370 0
c (SATLiteral(1303) -> SATLiteral(1371))
-1303 1371 0
c (SATLiteral(1304) -> SATLiteral(1372))
-1304 1372 0
c (SATLiteral(1305) -> SATLiteral(1373))
-1305 1373 0
c (SATLiteral(1306) -> SATLiteral(1374))
-1306 1374 0
c (SATLiteral(1307) -> SATLiteral(1375))
-1307 1375 0
c (SATLiteral(1308) -> SATLiteral(1376))
-1308 1376 0
c (SATLiteral(1309) -> SATLiteral(1377))
-1309 1377 0
c (SATLiteral(1310) -> SATLiteral(1378))
-1310 1378 0
c (SATLiteral(1311) -> SATLiteral(1379))
-1311 1379 0
c (SATLiteral(1312) -> SATLiteral(1380))
-1312 1380 0
c (SATLiteral(1313) -> SATLiteral(1381))
-1313 1381 0
c (SATLiteral(1314) -> SATLiteral(1382))
-1314 1382 0
c (SATLiteral(1315) -> SATLiteral(1383))
-1315 1383 0
c (SATLiteral(1316) -> SATLiteral(1384))
-1316 1384 0
c (SATLiteral(1317) -> SATLiteral(1385))
-1317 1385 0
c (SATLiteral(1318) -> SATLiteral(1386))
-1318 1386 0
c (SATLiteral(1319) -> SATLiteral(1387))
-1319 1387 0
c (SATLiteral(1388) \/ SATLiteral(-1320))
1388 -1320 0
c (SATLiteral(-1320) \/ SATLiteral(1389))
-1320 1389 0
c (SATLiteral(1390) \/ SATLiteral(-1320))
1390 -1320 0
c (SATLiteral(1391) \/ SATLiteral(-1321))
1391 -1321 0
c (SATLiteral(-1321) \/ SATLiteral(1392))
-1321 1392 0
c (SATLiteral(1393) \/ SATLiteral(-1321))
1393 -1321 0
c (SATLiteral(1217) -> SATLiteral(1394))
-1217 1394 0
c (SATLiteral(1217) -> SATLiteral(1395))
-1217 1395 0
c (SATLiteral(1217) -> SATLiteral(1396))
-1217 1396 0
c (SATLiteral(1217) -> SATLiteral(1397))
-1217 1397 0
c (SATLiteral(1217) -> SATLiteral(1398))
-1217 1398 0
c (SATLiteral(1217) -> SATLiteral(1399))
-1217 1399 0
c (SATLiteral(1217) -> SATLiteral(1400))
-1217 1400 0
c (SATLiteral(1217) -> SATLiteral(1401))
-1217 1401 0
c (SATLiteral(1217) -> SATLiteral(1402))
-1217 1402 0
c (SATLiteral(1218) -> SATLiteral(1403))
-1218 1403 0
c (SATLiteral(1218) -> SATLiteral(1404))
-1218 1404 0
c (SATLiteral(1218) -> SATLiteral(1405))
-1218 1405 0
c (SATLiteral(1218) -> SATLiteral(1406))
-1218 1406 0
c (SATLiteral(1218) -> SATLiteral(1407))
-1218 1407 0
c (SATLiteral(1218) -> SATLiteral(1408))
-1218 1408 0
c (SATLiteral(1218) -> SATLiteral(1409))
-1218 1409 0
c (SATLiteral(1218) -> SATLiteral(1410))
-1218 1410 0
c (SATLiteral(1218) -> SATLiteral(1411))
-1218 1411 0
c (SATLiteral(1219) -> SATLiteral(1412))
-1219 1412 0
c (SATLiteral(1219) -> SATLiteral(1413))
-1219 1413 0
c (SATLiteral(1219) -> SATLiteral(1414))
-1219 1414 0
c (SATLiteral(1219) -> SATLiteral(1415))
-1219 1415 0
c (SATLiteral(1219) -> SATLiteral(1416))
-1219 1416 0
c (SATLiteral(1219) -> SATLiteral(1417))
-1219 1417 0
c (SATLiteral(1219) -> SATLiteral(1418))
-1219 1418 0
c (SATLiteral(1219) -> SATLiteral(1419))
-1219 1419 0
c (SATLiteral(1219) -> SATLiteral(1420))
-1219 1420 0
c (SATLiteral(1220) -> SATLiteral(1421))
-1220 1421 0
c (SATLiteral(1220) -> SATLiteral(1422))
-1220 1422 0
c (SATLiteral(1220) -> SATLiteral(1423))
-1220 1423 0
c (SATLiteral(1220) -> SATLiteral(1424))
-1220 1424 0
c (SATLiteral(1220) -> SATLiteral(1425))
-1220 1425 0
c (SATLiteral(1220) -> SATLiteral(1426))
-1220 1426 0
c (SATLiteral(1220) -> SATLiteral(1427))
-1220 1427 0
c (SATLiteral(1220) -> SATLiteral(1428))
-1220 1428 0
c (SATLiteral(1220) -> SATLiteral(1429))
-1220 1429 0
c (SATLiteral(1221) -> SATLiteral(1430))
-1221 1430 0
c (SATLiteral(1221) -> SATLiteral(1431))
-1221 1431 0
c (SATLiteral(1221) -> SATLiteral(1432))
-1221 1432 0
c (SATLiteral(1221) -> SATLiteral(1433))
-1221 1433 0
c (SATLiteral(1221) -> SATLiteral(1434))
-1221 1434 0
c (SATLiteral(1221) -> SATLiteral(1435))
-1221 1435 0
c (SATLiteral(1221) -> SATLiteral(1436))
-1221 1436 0
c (SATLiteral(1221) -> SATLiteral(1437))
-1221 1437 0
c (SATLiteral(1221) -> SATLiteral(1438))
-1221 1438 0
c (SATLiteral(1222) -> SATLiteral(1439))
-1222 1439 0
c (SATLiteral(1222) -> SATLiteral(1440))
-1222 1440 0
c (SATLiteral(1222) -> SATLiteral(1441))
-1222 1441 0
c (SATLiteral(1222) -> SATLiteral(1442))
-1222 1442 0
c (SATLiteral(1222) -> SATLiteral(1443))
-1222 1443 0
c (SATLiteral(1222) -> SATLiteral(1444))
-1222 1444 0
c (SATLiteral(1222) -> SATLiteral(1445))
-1222 1445 0
c (SATLiteral(1222) -> SATLiteral(1446))
-1222 1446 0
c (SATLiteral(1222) -> SATLiteral(1447))
-1222 1447 0
c (SATLiteral(1223) -> SATLiteral(1448))
-1223 1448 0
c (SATLiteral(1223) -> SATLiteral(1449))
-1223 1449 0
c (SATLiteral(1223) -> SATLiteral(1450))
-1223 1450 0
c (SATLiteral(1223) -> SATLiteral(1451))
-1223 1451 0
c (SATLiteral(1223) -> SATLiteral(1452))
-1223 1452 0
c (SATLiteral(1223) -> SATLiteral(1453))
-1223 1453 0
c (SATLiteral(1223) -> SATLiteral(1454))
-1223 1454 0
c (SATLiteral(1223) -> SATLiteral(1455))
-1223 1455 0
c (SATLiteral(1223) -> SATLiteral(1456))
-1223 1456 0
c (SATLiteral(1224) -> SATLiteral(1457))
-1224 1457 0
c (SATLiteral(1224) -> SATLiteral(1458))
-1224 1458 0
c (SATLiteral(1224) -> SATLiteral(1459))
-1224 1459 0
c (SATLiteral(1224) -> SATLiteral(1460))
-1224 1460 0
c (SATLiteral(1224) -> SATLiteral(1461))
-1224 1461 0
c (SATLiteral(1224) -> SATLiteral(1462))
-1224 1462 0
c (SATLiteral(1224) -> SATLiteral(1463))
-1224 1463 0
c (SATLiteral(1224) -> SATLiteral(1464))
-1224 1464 0
c (SATLiteral(1224) -> SATLiteral(1465))
-1224 1465 0
c (SATLiteral(1225) -> SATLiteral(1466))
-1225 1466 0
c (SATLiteral(1225) -> SATLiteral(1467))
-1225 1467 0
c (SATLiteral(1225) -> SATLiteral(1468))
-1225 1468 0
c (SATLiteral(1225) -> SATLiteral(1469))
-1225 1469 0
c (SATLiteral(1225) -> SATLiteral(1470))
-1225 1470 0
c (SATLiteral(1225) -> SATLiteral(1471))
-1225 1471 0
c (SATLiteral(1225) -> SATLiteral(1472))
-1225 1472 0
c (SATLiteral(1225) -> SATLiteral(1473))
-1225 1473 0
c (SATLiteral(1225) -> SATLiteral(1474))
-1225 1474 0
c (SATLiteral(1226) -> SATLiteral(1475))
-1226 1475 0
c (SATLiteral(1226) -> SATLiteral(1476))
-1226 1476 0
c (SATLiteral(1226) -> SATLiteral(1477))
-1226 1477 0
c (SATLiteral(1226) -> SATLiteral(1478))
-1226 1478 0
c (SATLiteral(1226) -> SATLiteral(1479))
-1226 1479 0
c (SATLiteral(1226) -> SATLiteral(1480))
-1226 1480 0
c (SATLiteral(1226) -> SATLiteral(1481))
-1226 1481 0
c (SATLiteral(1226) -> SATLiteral(1482))
-1226 1482 0
c (SATLiteral(1226) -> SATLiteral(1483))
-1226 1483 0
c (SATLiteral(1227) -> SATLiteral(1484))
-1227 1484 0
c (SATLiteral(1227) -> SATLiteral(1485))
-1227 1485 0
c (SATLiteral(1227) -> SATLiteral(1486))
-1227 1486 0
c (SATLiteral(1227) -> SATLiteral(1487))
-1227 1487 0
c (SATLiteral(1227) -> SATLiteral(1488))
-1227 1488 0
c (SATLiteral(1227) -> SATLiteral(1489))
-1227 1489 0
c (SATLiteral(1227) -> SATLiteral(1490))
-1227 1490 0
c (SATLiteral(1227) -> SATLiteral(1491))
-1227 1491 0
c (SATLiteral(1227) -> SATLiteral(1492))
-1227 1492 0
c (SATLiteral(1228) -> SATLiteral(1493))
-1228 1493 0
c (SATLiteral(1228) -> SATLiteral(1494))
-1228 1494 0
c (SATLiteral(1228) -> SATLiteral(1495))
-1228 1495 0
c (SATLiteral(1228) -> SATLiteral(1496))
-1228 1496 0
c (SATLiteral(1228) -> SATLiteral(1497))
-1228 1497 0
c (SATLiteral(1228) -> SATLiteral(1498))
-1228 1498 0
c (SATLiteral(1228) -> SATLiteral(1499))
-1228 1499 0
c (SATLiteral(1228) -> SATLiteral(1500))
-1228 1500 0
c (SATLiteral(1228) -> SATLiteral(1501))
-1228 1501 0
c (SATLiteral(1229) -> SATLiteral(1502))
-1229 1502 0
c (SATLiteral(1229) -> SATLiteral(1503))
-1229 1503 0
c (SATLiteral(1229) -> SATLiteral(1504))
-1229 1504 0
c (SATLiteral(1229) -> SATLiteral(1505))
-1229 1505 0
c (SATLiteral(1229) -> SATLiteral(1506))
-1229 1506 0
c (SATLiteral(1229) -> SATLiteral(1507))
-1229 1507 0
c (SATLiteral(1229) -> SATLiteral(1508))
-1229 1508 0
c (SATLiteral(1229) -> SATLiteral(1509))
-1229 1509 0
c (SATLiteral(1229) -> SATLiteral(1510))
-1229 1510 0
c (SATLiteral(1230) -> SATLiteral(1511))
-1230 1511 0
c (SATLiteral(1230) -> SATLiteral(1512))
-1230 1512 0
c (SATLiteral(1230) -> SATLiteral(1513))
-1230 1513 0
c (SATLiteral(1230) -> SATLiteral(1514))
-1230 1514 0
c (SATLiteral(1230) -> SATLiteral(1515))
-1230 1515 0
c (SATLiteral(1230) -> SATLiteral(1516))
-1230 1516 0
c (SATLiteral(1230) -> SATLiteral(1517))
-1230 1517 0
c (SATLiteral(1230) -> SATLiteral(1518))
-1230 1518 0
c (SATLiteral(1230) -> SATLiteral(1519))
-1230 1519 0
c (SATLiteral(1231) -> SATLiteral(1520))
-1231 1520 0
c (SATLiteral(1231) -> SATLiteral(1521))
-1231 1521 0
c (SATLiteral(1231) -> SATLiteral(1522))
-1231 1522 0
c (SATLiteral(1231) -> SATLiteral(1523))
-1231 1523 0
c (SATLiteral(1231) -> SATLiteral(1524))
-1231 1524 0
c (SATLiteral(1231) -> SATLiteral(1525))
-1231 1525 0
c (SATLiteral(1231) -> SATLiteral(1526))
-1231 1526 0
c (SATLiteral(1231) -> SATLiteral(1527))
-1231 1527 0
c (SATLiteral(1231) -> SATLiteral(1528))
-1231 1528 0
c (SATLiteral(1232) -> SATLiteral(1529))
-1232 1529 0
c (SATLiteral(1232) -> SATLiteral(1530))
-1232 1530 0
c (SATLiteral(1232) -> SATLiteral(1531))
-1232 1531 0
c (SATLiteral(1232) -> SATLiteral(1532))
-1232 1532 0
c (SATLiteral(1232) -> SATLiteral(1533))
-1232 1533 0
c (SATLiteral(1232) -> SATLiteral(1534))
-1232 1534 0
c (SATLiteral(1232) -> SATLiteral(1535))
-1232 1535 0
c (SATLiteral(1232) -> SATLiteral(1536))
-1232 1536 0
c (SATLiteral(1232) -> SATLiteral(1537))
-1232 1537 0
c (SATLiteral(1233) -> SATLiteral(1538))
-1233 1538 0
c (SATLiteral(1233) -> SATLiteral(1539))
-1233 1539 0
c (SATLiteral(1233) -> SATLiteral(1540))
-1233 1540 0
c (SATLiteral(1233) -> SATLiteral(1541))
-1233 1541 0
c (SATLiteral(1233) -> SATLiteral(1542))
-1233 1542 0
c (SATLiteral(1233) -> SATLiteral(1543))
-1233 1543 0
c (SATLiteral(1233) -> SATLiteral(1544))
-1233 1544 0
c (SATLiteral(1233) -> SATLiteral(1545))
-1233 1545 0
c (SATLiteral(1233) -> SATLiteral(1546))
-1233 1546 0
c (SATLiteral(1234) -> SATLiteral(1547))
-1234 1547 0
c (SATLiteral(1234) -> SATLiteral(1548))
-1234 1548 0
c (SATLiteral(1234) -> SATLiteral(1549))
-1234 1549 0
c (SATLiteral(1234) -> SATLiteral(1550))
-1234 1550 0
c (SATLiteral(1234) -> SATLiteral(1551))
-1234 1551 0
c (SATLiteral(1234) -> SATLiteral(1552))
-1234 1552 0
c (SATLiteral(1234) -> SATLiteral(1553))
-1234 1553 0
c (SATLiteral(1234) -> SATLiteral(1554))
-1234 1554 0
c (SATLiteral(1234) -> SATLiteral(1555))
-1234 1555 0
c (SATLiteral(1235) -> SATLiteral(1556))
-1235 1556 0
c (SATLiteral(1235) -> SATLiteral(1557))
-1235 1557 0
c (SATLiteral(1235) -> SATLiteral(1558))
-1235 1558 0
c (SATLiteral(1235) -> SATLiteral(1559))
-1235 1559 0
c (SATLiteral(1235) -> SATLiteral(1560))
-1235 1560 0
c (SATLiteral(1235) -> SATLiteral(1561))
-1235 1561 0
c (SATLiteral(1235) -> SATLiteral(1562))
-1235 1562 0
c (SATLiteral(1235) -> SATLiteral(1563))
-1235 1563 0
c (SATLiteral(1235) -> SATLiteral(1564))
-1235 1564 0
c (SATLiteral(1236) -> SATLiteral(1565))
-1236 1565 0
c (SATLiteral(1236) -> SATLiteral(1566))
-1236 1566 0
c (SATLiteral(1236) -> SATLiteral(1567))
-1236 1567 0
c (SATLiteral(1236) -> SATLiteral(1568))
-1236 1568 0
c (SATLiteral(1236) -> SATLiteral(1569))
-1236 1569 0
c (SATLiteral(1236) -> SATLiteral(1570))
-1236 1570 0
c (SATLiteral(1236) -> SATLiteral(1571))
-1236 1571 0
c (SATLiteral(1236) -> SATLiteral(1572))
-1236 1572 0
c (SATLiteral(1236) -> SATLiteral(1573))
-1236 1573 0
c (SATLiteral(1237) -> SATLiteral(1574))
-1237 1574 0
c (SATLiteral(1237) -> SATLiteral(1575))
-1237 1575 0
c (SATLiteral(1237) -> SATLiteral(1576))
-1237 1576 0
c (SATLiteral(1237) -> SATLiteral(1577))
-1237 1577 0
c (SATLiteral(1237) -> SATLiteral(1578))
-1237 1578 0
c (SATLiteral(1237) -> SATLiteral(1579))
-1237 1579 0
c (SATLiteral(1237) -> SATLiteral(1580))
-1237 1580 0
c (SATLiteral(1237) -> SATLiteral(1581))
-1237 1581 0
c (SATLiteral(1237) -> SATLiteral(1582))
-1237 1582 0
c (SATLiteral(1238) -> SATLiteral(1583))
-1238 1583 0
c (SATLiteral(1238) -> SATLiteral(1584))
-1238 1584 0
c (SATLiteral(1238) -> SATLiteral(1585))
-1238 1585 0
c (SATLiteral(1238) -> SATLiteral(1586))
-1238 1586 0
c (SATLiteral(1238) -> SATLiteral(1587))
-1238 1587 0
c (SATLiteral(1238) -> SATLiteral(1588))
-1238 1588 0
c (SATLiteral(1238) -> SATLiteral(1589))
-1238 1589 0
c (SATLiteral(1238) -> SATLiteral(1590))
-1238 1590 0
c (SATLiteral(1238) -> SATLiteral(1591))
-1238 1591 0
c (SATLiteral(1239) -> SATLiteral(1592))
-1239 1592 0
c (SATLiteral(1239) -> SATLiteral(1593))
-1239 1593 0
c (SATLiteral(1239) -> SATLiteral(1594))
-1239 1594 0
c (SATLiteral(1239) -> SATLiteral(1595))
-1239 1595 0
c (SATLiteral(1239) -> SATLiteral(1596))
-1239 1596 0
c (SATLiteral(1239) -> SATLiteral(1597))
-1239 1597 0
c (SATLiteral(1239) -> SATLiteral(1598))
-1239 1598 0
c (SATLiteral(1239) -> SATLiteral(1599))
-1239 1599 0
c (SATLiteral(1239) -> SATLiteral(1600))
-1239 1600 0
c (SATLiteral(1240) -> SATLiteral(1601))
-1240 1601 0
c (SATLiteral(1240) -> SATLiteral(1602))
-1240 1602 0
c (SATLiteral(1240) -> SATLiteral(1603))
-1240 1603 0
c (SATLiteral(1240) -> SATLiteral(1604))
-1240 1604 0
c (SATLiteral(1240) -> SATLiteral(1605))
-1240 1605 0
c (SATLiteral(1240) -> SATLiteral(1606))
-1240 1606 0
c (SATLiteral(1240) -> SATLiteral(1607))
-1240 1607 0
c (SATLiteral(1240) -> SATLiteral(1608))
-1240 1608 0
c (SATLiteral(1240) -> SATLiteral(1609))
-1240 1609 0
c (SATLiteral(1241) -> SATLiteral(1610))
-1241 1610 0
c (SATLiteral(1241) -> SATLiteral(1611))
-1241 1611 0
c (SATLiteral(1241) -> SATLiteral(1612))
-1241 1612 0
c (SATLiteral(1241) -> SATLiteral(1613))
-1241 1613 0
c (SATLiteral(1241) -> SATLiteral(1614))
-1241 1614 0
c (SATLiteral(1241) -> SATLiteral(1615))
-1241 1615 0
c (SATLiteral(1241) -> SATLiteral(1616))
-1241 1616 0
c (SATLiteral(1241) -> SATLiteral(1617))
-1241 1617 0
c (SATLiteral(1241) -> SATLiteral(1618))
-1241 1618 0
c (SATLiteral(1242) -> SATLiteral(1619))
-1242 1619 0
c (SATLiteral(1242) -> SATLiteral(1620))
-1242 1620 0
c (SATLiteral(1242) -> SATLiteral(1621))
-1242 1621 0
c (SATLiteral(1242) -> SATLiteral(1622))
-1242 1622 0
c (SATLiteral(1242) -> SATLiteral(1623))
-1242 1623 0
c (SATLiteral(1242) -> SATLiteral(1624))
-1242 1624 0
c (SATLiteral(1242) -> SATLiteral(1625))
-1242 1625 0
c (SATLiteral(1242) -> SATLiteral(1626))
-1242 1626 0
c (SATLiteral(1242) -> SATLiteral(1627))
-1242 1627 0
c (SATLiteral(1243) -> SATLiteral(1628))
-1243 1628 0
c (SATLiteral(1243) -> SATLiteral(1629))
-1243 1629 0
c (SATLiteral(1243) -> SATLiteral(1630))
-1243 1630 0
c (SATLiteral(1243) -> SATLiteral(1631))
-1243 1631 0
c (SATLiteral(1243) -> SATLiteral(1632))
-1243 1632 0
c (SATLiteral(1243) -> SATLiteral(1633))
-1243 1633 0
c (SATLiteral(1243) -> SATLiteral(1634))
-1243 1634 0
c (SATLiteral(1243) -> SATLiteral(1635))
-1243 1635 0
c (SATLiteral(1243) -> SATLiteral(1636))
-1243 1636 0
c (SATLiteral(1245) -> SATLiteral(1637))
-1245 1637 0
c (SATLiteral(1245) -> SATLiteral(1638))
-1245 1638 0
c (SATLiteral(1245) -> SATLiteral(1639))
-1245 1639 0
c (SATLiteral(1245) -> SATLiteral(1640))
-1245 1640 0
c (SATLiteral(1245) -> SATLiteral(1641))
-1245 1641 0
c (SATLiteral(1245) -> SATLiteral(1642))
-1245 1642 0
c (SATLiteral(1245) -> SATLiteral(1643))
-1245 1643 0
c (SATLiteral(1245) -> SATLiteral(1644))
-1245 1644 0
c (SATLiteral(1245) -> SATLiteral(1645))
-1245 1645 0
c (SATLiteral(1246) -> SATLiteral(1646))
-1246 1646 0
c (SATLiteral(1246) -> SATLiteral(1647))
-1246 1647 0
c (SATLiteral(1246) -> SATLiteral(1648))
-1246 1648 0
c (SATLiteral(1246) -> SATLiteral(1649))
-1246 1649 0
c (SATLiteral(1246) -> SATLiteral(1650))
-1246 1650 0
c (SATLiteral(1246) -> SATLiteral(1651))
-1246 1651 0
c (SATLiteral(1246) -> SATLiteral(1652))
-1246 1652 0
c (SATLiteral(1246) -> SATLiteral(1653))
-1246 1653 0
c (SATLiteral(1246) -> SATLiteral(1654))
-1246 1654 0
c (SATLiteral(1249) -> SATLiteral(1655))
-1249 1655 0
c (SATLiteral(1249) -> SATLiteral(1656))
-1249 1656 0
c (SATLiteral(1249) -> SATLiteral(1657))
-1249 1657 0
c (SATLiteral(1249) -> SATLiteral(1658))
-1249 1658 0
c (SATLiteral(1249) -> SATLiteral(1659))
-1249 1659 0
c (SATLiteral(1249) -> SATLiteral(1660))
-1249 1660 0
c (SATLiteral(1249) -> SATLiteral(1661))
-1249 1661 0
c (SATLiteral(1249) -> SATLiteral(1662))
-1249 1662 0
c (SATLiteral(1249) -> SATLiteral(1663))
-1249 1663 0
c (SATLiteral(1250) -> SATLiteral(1664))
-1250 1664 0
c (SATLiteral(1250) -> SATLiteral(1665))
-1250 1665 0
c (SATLiteral(1250) -> SATLiteral(1666))
-1250 1666 0
c (SATLiteral(1250) -> SATLiteral(1667))
-1250 1667 0
c (SATLiteral(1250) -> SATLiteral(1668))
-1250 1668 0
c (SATLiteral(1250) -> SATLiteral(1669))
-1250 1669 0
c (SATLiteral(1250) -> SATLiteral(1670))
-1250 1670 0
c (SATLiteral(1250) -> SATLiteral(1671))
-1250 1671 0
c (SATLiteral(1250) -> SATLiteral(1672))
-1250 1672 0
c (SATLiteral(1252) -> SATLiteral(1673))
-1252 1673 0
c (SATLiteral(1252) -> SATLiteral(1674))
-1252 1674 0
c (SATLiteral(1252) -> SATLiteral(1675))
-1252 1675 0
c (SATLiteral(1252) -> SATLiteral(1676))
-1252 1676 0
c (SATLiteral(1252) -> SATLiteral(1677))
-1252 1677 0
c (SATLiteral(1252) -> SATLiteral(1678))
-1252 1678 0
c (SATLiteral(1252) -> SATLiteral(1679))
-1252 1679 0
c (SATLiteral(1252) -> SATLiteral(1680))
-1252 1680 0
c (SATLiteral(1252) -> SATLiteral(1681))
-1252 1681 0
c (SATLiteral(1253) -> SATLiteral(1682))
-1253 1682 0
c (SATLiteral(1253) -> SATLiteral(1683))
-1253 1683 0
c (SATLiteral(1253) -> SATLiteral(1684))
-1253 1684 0
c (SATLiteral(1253) -> SATLiteral(1685))
-1253 1685 0
c (SATLiteral(1253) -> SATLiteral(1686))
-1253 1686 0
c (SATLiteral(1253) -> SATLiteral(1687))
-1253 1687 0
c (SATLiteral(1253) -> SATLiteral(1688))
-1253 1688 0
c (SATLiteral(1253) -> SATLiteral(1689))
-1253 1689 0
c (SATLiteral(1253) -> SATLiteral(1690))
-1253 1690 0
c (SATLiteral(1254) -> SATLiteral(1691))
-1254 1691 0
c (SATLiteral(1254) -> SATLiteral(1692))
-1254 1692 0
c (SATLiteral(1254) -> SATLiteral(1693))
-1254 1693 0
c (SATLiteral(1254) -> SATLiteral(1694))
-1254 1694 0
c (SATLiteral(1254) -> SATLiteral(1695))
-1254 1695 0
c (SATLiteral(1254) -> SATLiteral(1696))
-1254 1696 0
c (SATLiteral(1254) -> SATLiteral(1697))
-1254 1697 0
c (SATLiteral(1254) -> SATLiteral(1698))
-1254 1698 0
c (SATLiteral(1254) -> SATLiteral(1699))
-1254 1699 0
c (SATLiteral(1257) -> SATLiteral(1700))
-1257 1700 0
c (SATLiteral(1257) -> SATLiteral(1701))
-1257 1701 0
c (SATLiteral(1257) -> SATLiteral(1702))
-1257 1702 0
c (SATLiteral(1257) -> SATLiteral(1703))
-1257 1703 0
c (SATLiteral(1257) -> SATLiteral(1704))
-1257 1704 0
c (SATLiteral(1257) -> SATLiteral(1705))
-1257 1705 0
c (SATLiteral(1257) -> SATLiteral(1706))
-1257 1706 0
c (SATLiteral(1257) -> SATLiteral(1707))
-1257 1707 0
c (SATLiteral(1257) -> SATLiteral(1708))
-1257 1708 0
c (SATLiteral(1258) -> SATLiteral(1709))
-1258 1709 0
c (SATLiteral(1258) -> SATLiteral(1710))
-1258 1710 0
c (SATLiteral(1258) -> SATLiteral(1711))
-1258 1711 0
c (SATLiteral(1258) -> SATLiteral(1712))
-1258 1712 0
c (SATLiteral(1258) -> SATLiteral(1713))
-1258 1713 0
c (SATLiteral(1258) -> SATLiteral(1714))
-1258 1714 0
c (SATLiteral(1258) -> SATLiteral(1715))
-1258 1715 0
c (SATLiteral(1258) -> SATLiteral(1716))
-1258 1716 0
c (SATLiteral(1258) -> SATLiteral(1717))
-1258 1717 0
c (SATLiteral(1259) -> SATLiteral(1718))
-1259 1718 0
c (SATLiteral(1259) -> SATLiteral(1719))
-1259 1719 0
c (SATLiteral(1259) -> SATLiteral(1720))
-1259 1720 0
c (SATLiteral(1259) -> SATLiteral(1721))
-1259 1721 0
c (SATLiteral(1259) -> SATLiteral(1722))
-1259 1722 0
c (SATLiteral(1259) -> SATLiteral(1723))
-1259 1723 0
c (SATLiteral(1259) -> SATLiteral(1724))
-1259 1724 0
c (SATLiteral(1259) -> SATLiteral(1725))
-1259 1725 0
c (SATLiteral(1259) -> SATLiteral(1726))
-1259 1726 0
c (SATLiteral(1260) -> SATLiteral(1727))
-1260 1727 0
c (SATLiteral(1260) -> SATLiteral(1728))
-1260 1728 0
c (SATLiteral(1260) -> SATLiteral(1729))
-1260 1729 0
c (SATLiteral(1260) -> SATLiteral(1730))
-1260 1730 0
c (SATLiteral(1260) -> SATLiteral(1731))
-1260 1731 0
c (SATLiteral(1260) -> SATLiteral(1732))
-1260 1732 0
c (SATLiteral(1260) -> SATLiteral(1733))
-1260 1733 0
c (SATLiteral(1260) -> SATLiteral(1734))
-1260 1734 0
c (SATLiteral(1260) -> SATLiteral(1735))
-1260 1735 0
c (SATLiteral(1262) -> SATLiteral(1736))
-1262 1736 0
c (SATLiteral(1262) -> SATLiteral(1737))
-1262 1737 0
c (SATLiteral(1262) -> SATLiteral(1738))
-1262 1738 0
c (SATLiteral(1262) -> SATLiteral(1739))
-1262 1739 0
c (SATLiteral(1262) -> SATLiteral(1740))
-1262 1740 0
c (SATLiteral(1262) -> SATLiteral(1741))
-1262 1741 0
c (SATLiteral(1262) -> SATLiteral(1742))
-1262 1742 0
c (SATLiteral(1262) -> SATLiteral(1743))
-1262 1743 0
c (SATLiteral(1262) -> SATLiteral(1744))
-1262 1744 0
c (SATLiteral(1263) -> SATLiteral(1745))
-1263 1745 0
c (SATLiteral(1263) -> SATLiteral(1746))
-1263 1746 0
c (SATLiteral(1263) -> SATLiteral(1747))
-1263 1747 0
c (SATLiteral(1263) -> SATLiteral(1748))
-1263 1748 0
c (SATLiteral(1263) -> SATLiteral(1749))
-1263 1749 0
c (SATLiteral(1263) -> SATLiteral(1750))
-1263 1750 0
c (SATLiteral(1263) -> SATLiteral(1751))
-1263 1751 0
c (SATLiteral(1263) -> SATLiteral(1752))
-1263 1752 0
c (SATLiteral(1263) -> SATLiteral(1753))
-1263 1753 0
c (SATLiteral(1264) -> SATLiteral(1754))
-1264 1754 0
c (SATLiteral(1264) -> SATLiteral(1755))
-1264 1755 0
c (SATLiteral(1264) -> SATLiteral(1756))
-1264 1756 0
c (SATLiteral(1264) -> SATLiteral(1757))
-1264 1757 0
c (SATLiteral(1264) -> SATLiteral(1758))
-1264 1758 0
c (SATLiteral(1264) -> SATLiteral(1759))
-1264 1759 0
c (SATLiteral(1264) -> SATLiteral(1760))
-1264 1760 0
c (SATLiteral(1264) -> SATLiteral(1761))
-1264 1761 0
c (SATLiteral(1264) -> SATLiteral(1762))
-1264 1762 0
c (SATLiteral(1266) -> SATLiteral(1763))
-1266 1763 0
c (SATLiteral(1266) -> SATLiteral(1764))
-1266 1764 0
c (SATLiteral(1266) -> SATLiteral(1765))
-1266 1765 0
c (SATLiteral(1266) -> SATLiteral(1766))
-1266 1766 0
c (SATLiteral(1266) -> SATLiteral(1767))
-1266 1767 0
c (SATLiteral(1266) -> SATLiteral(1768))
-1266 1768 0
c (SATLiteral(1266) -> SATLiteral(1769))
-1266 1769 0
c (SATLiteral(1266) -> SATLiteral(1770))
-1266 1770 0
c (SATLiteral(1266) -> SATLiteral(1771))
-1266 1771 0
c (SATLiteral(1267) -> SATLiteral(1772))
-1267 1772 0
c (SATLiteral(1267) -> SATLiteral(1773))
-1267 1773 0
c (SATLiteral(1267) -> SATLiteral(1774))
-1267 1774 0
c (SATLiteral(1267) -> SATLiteral(1775))
-1267 1775 0
c (SATLiteral(1267) -> SATLiteral(1776))
-1267 1776 0
c (SATLiteral(1267) -> SATLiteral(1777))
-1267 1777 0
c (SATLiteral(1267) -> SATLiteral(1778))
-1267 1778 0
c (SATLiteral(1267) -> SATLiteral(1779))
-1267 1779 0
c (SATLiteral(1267) -> SATLiteral(1780))
-1267 1780 0
c (SATLiteral(1271) -> SATLiteral(1781))
-1271 1781 0
c (SATLiteral(1271) -> SATLiteral(1782))
-1271 1782 0
c (SATLiteral(1271) -> SATLiteral(1783))
-1271 1783 0
c (SATLiteral(1271) -> SATLiteral(1784))
-1271 1784 0
c (SATLiteral(1271) -> SATLiteral(1785))
-1271 1785 0
c (SATLiteral(1271) -> SATLiteral(1786))
-1271 1786 0
c (SATLiteral(1271) -> SATLiteral(1787))
-1271 1787 0
c (SATLiteral(1271) -> SATLiteral(1788))
-1271 1788 0
c (SATLiteral(1271) -> SATLiteral(1789))
-1271 1789 0
c (( - aux461 + shift(x_00001_00006, -1) + shift(x_00002_00005, -1))<=0)
197 -1790 0
198 -1791 0
200 -1793 0
202 -1795 0
204 -1797 0
206 -1799 0
208 -1801 0
210 -1803 0
77 -1790 0
77 197 -1791 0
77 198 -1793 0
77 200 -1795 0
77 202 -1797 0
77 204 -1799 0
77 206 -1801 0
77 208 -1803 0
77 210 -1805 0
78 -1791 0
78 197 -1793 0
78 198 -1795 0
78 200 -1797 0
78 202 -1799 0
78 204 -1801 0
78 206 -1803 0
78 208 -1805 0
78 210 -1807 0
80 -1793 0
80 197 -1795 0
80 198 -1797 0
80 200 -1799 0
80 202 -1801 0
80 204 -1803 0
80 206 -1805 0
80 208 -1807 0
80 210 -1809 0
82 -1795 0
82 197 -1797 0
82 198 -1799 0
82 200 -1801 0
82 202 -1803 0
82 204 -1805 0
82 206 -1807 0
82 208 -1809 0
82 210 -1811 0
84 -1797 0
84 197 -1799 0
84 198 -1801 0
84 200 -1803 0
84 202 -1805 0
84 204 -1807 0
84 206 -1809 0
84 208 -1811 0
84 210 -1813 0
86 -1799 0
86 197 -1801 0
86 198 -1803 0
86 200 -1805 0
86 202 -1807 0
86 204 -1809 0
86 206 -1811 0
86 208 -1813 0
86 210 -1815 0
88 -1801 0
88 197 -1803 0
88 198 -1805 0
88 200 -1807 0
88 202 -1809 0
88 204 -1811 0
88 206 -1813 0
88 208 -1815 0
88 210 -1817 0
90 -1803 0
90 197 -1805 0
90 198 -1807 0
90 200 -1809 0
90 202 -1811 0
90 204 -1813 0
90 206 -1815 0
90 208 -1817 0
90 210 -1819 0
c (0<=( - aux461 + shift(x_00001_00006, -1) + shift(x_00002_00005, -1)))
-210 1819 0
-208 1817 0
-206 1815 0
-204 1813 0
-202 1811 0
-200 1809 0
-198 1807 0
-197 1805 0
-90 1819 0
-90 -210 1817 0
-90 -208 1815 0
-90 -206 1813 0
-90 -204 1811 0
-90 -202 1809 0
-90 -200 1807 0
-90 -198 1805 0
-90 -197 1803 0
-88 1817 0
-88 -210 1815 0
-88 -208 1813 0
-88 -206 1811 0
-88 -204 1809 0
-88 -202 1807 0
-88 -200 1805 0
-88 -198 1803 0
-88 -197 1801 0
-86 1815 0
-86 -210 1813 0
-86 -208 1811 0
-86 -206 1809 0
-86 -204 1807 0
-86 -202 1805 0
-86 -200 1803 0
-86 -198 1801 0
-86 -197 1799 0
-84 1813 0
-84 -210 1811 0
-84 -208 1809 0
-84 -206 1807 0
-84 -204 1805 0
-84 -202 1803 0
-84 -200 1801 0
-84 -198 1799 0
-84 -197 1797 0
-82 1811 0
-82 -210 1809 0
-82 -208 1807 0
-82 -206 1805 0
-82 -204 1803 0
-82 -202 1801 0
-82 -200 1799 0
-82 -198 1797 0
-82 -197 1795 0
-80 1809 0
-80 -210 1807 0
-80 -208 1805 0
-80 -206 1803 0
-80 -204 1801 0
-80 -202 1799 0
-80 -200 1797 0
-80 -198 1795 0
-80 -197 1793 0
-78 1807 0
-78 -210 1805 0
-78 -208 1803 0
-78 -206 1801 0
-78 -204 1799 0
-78 -202 1797 0
-78 -200 1795 0
-78 -198 1793 0
-78 -197 1791 0
-77 1805 0
-77 -210 1803 0
-77 -208 1801 0
-77 -206 1799 0
-77 -204 1797 0
-77 -202 1795 0
-77 -200 1793 0
-77 -198 1791 0
-77 -197 1790 0
c (( - aux462 + shift(x_00001_00009, -1) + shift(x_00002_00009, -1))<=0)
257 -1821 0
258 -1822 0
260 -1824 0
262 -1826 0
264 -1828 0
266 -1830 0
268 -1832 0
270 -1834 0
122 -1821 0
122 257 -1822 0
122 258 -1824 0
122 260 -1826 0
122 262 -1828 0
122 264 -1830 0
122 266 -1832 0
122 268 -1834 0
122 270 -1836 0
123 -1822 0
123 257 -1824 0
123 258 -1826 0
123 260 -1828 0
123 262 -1830 0
123 264 -1832 0
123 266 -1834 0
123 268 -1836 0
123 270 -1838 0
125 -1824 0
125 257 -1826 0
125 258 -1828 0
125 260 -1830 0
125 262 -1832 0
125 264 -1834 0
125 266 -1836 0
125 268 -1838 0
125 270 -1840 0
127 -1826 0
127 257 -1828 0
127 258 -1830 0
127 260 -1832 0
127 262 -1834 0
127 264 -1836 0
127 266 -1838 0
127 268 -1840 0
127 270 -1842 0
129 -1828 0
129 257 -1830 0
129 258 -1832 0
129 260 -1834 0
129 262 -1836 0
129 264 -1838 0
129 266 -1840 0
129 268 -1842 0
129 270 -1844 0
131 -1830 0
131 257 -1832 0
131 258 -1834 0
131 260 -1836 0
131 262 -1838 0
131 264 -1840 0
131 266 -1842 0
131 268 -1844 0
131 270 -1846 0
133 -1832 0
133 257 -1834 0
133 258 -1836 0
133 260 -1838 0
133 262 -1840 0
133 264 -1842 0
133 266 -1844 0
133 268 -1846 0
133 270 -1848 0
135 -1834 0
135 257 -1836 0
135 258 -1838 0
135 260 -1840 0
135 262 -1842 0
135 264 -1844 0
135 266 -1846 0
135 268 -1848 0
135 270 -1850 0
c (0<=( - aux462 + shift(x_00001_00009, -1) + shift(x_00002_00009, -1)))
-270 1850 0
-268 1848 0
-266 1846 0
-264 1844 0
-262 1842 0
-260 1840 0
-258 1838 0
-257 1836 0
-135 1850 0
-135 -270 1848 0
-135 -268 1846 0
-135 -266 1844 0
-135 -264 1842 0
-135 -262 1840 0
-135 -260 1838 0
-135 -258 1836 0
-135 -257 1834 0
-133 1848 0
-133 -270 1846 0
-133 -268 1844 0
-133 -266 1842 0
-133 -264 1840 0
-133 -262 1838 0
-133 -260 1836 0
-133 -258 1834 0
-133 -257 1832 0
-131 1846 0
-131 -270 1844 0
-131 -268 1842 0
-131 -266 1840 0
-131 -264 1838 0
-131 -262 1836 0
-131 -260 1834 0
-131 -258 1832 0
-131 -257 1830 0
-129 1844 0
-129 -270 1842 0
-129 -268 1840 0
-129 -266 1838 0
-129 -264 1836 0
-129 -262 1834 0
-129 -260 1832 0
-129 -258 1830 0
-129 -257 1828 0
-127 1842 0
-127 -270 1840 0
-127 -268 1838 0
-127 -266 1836 0
-127 -264 1834 0
-127 -262 1832 0
-127 -260 1830 0
-127 -258 1828 0
-127 -257 1826 0
-125 1840 0
-125 -270 1838 0
-125 -268 1836 0
-125 -266 1834 0
-125 -264 1832 0
-125 -262 1830 0
-125 -260 1828 0
-125 -258 1826 0
-125 -257 1824 0
-123 1838 0
-123 -270 1836 0
-123 -268 1834 0
-123 -266 1832 0
-123 -264 1830 0
-123 -262 1828 0
-123 -260 1826 0
-123 -258 1824 0
-123 -257 1822 0
-122 1836 0
-122 -270 1834 0
-122 -268 1832 0
-122 -266 1830 0
-122 -264 1828 0
-122 -262 1826 0
-122 -260 1824 0
-122 -258 1822 0
-122 -257 1821 0
c (( - aux463 + shift(x_00003_00002, -1) + shift(x_00002_00001, -1))<=0)
137 -1852 0
138 -1853 0
140 -1855 0
142 -1857 0
144 -1859 0
146 -1861 0
148 -1863 0
150 -1865 0
287 -1852 0
287 137 -1853 0
287 138 -1855 0
287 140 -1857 0
287 142 -1859 0
287 144 -1861 0
287 146 -1863 0
287 148 -1865 0
287 150 -1867 0
288 -1853 0
288 137 -1855 0
288 138 -1857 0
288 140 -1859 0
288 142 -1861 0
288 144 -1863 0
288 146 -1865 0
288 148 -1867 0
288 150 -1869 0
290 -1855 0
290 137 -1857 0
290 138 -1859 0
290 140 -1861 0
290 142 -1863 0
290 144 -1865 0
290 146 -1867 0
290 148 -1869 0
290 150 -1871 0
292 -1857 0
292 137 -1859 0
292 138 -1861 0
292 140 -1863 0
292 142 -1865 0
292 144 -1867 0
292 146 -1869 0
292 148 -1871 0
292 150 -1873 0
294 -1859 0
294 137 -1861 0
294 138 -1863 0
294 140 -1865 0
294 142 -1867 0
294 144 -1869 0
294 146 -1871 0
294 148 -1873 0
294 150 -1875 0
296 -1861 0
296 137 -1863 0
296 138 -1865 0
296 140 -1867 0
296 142 -1869 0
296 144 -1871 0
296 146 -1873 0
296 148 -1875 0
296 150 -1877 0
298 -1863 0
298 137 -1865 0
298 138 -1867 0
298 140 -1869 0
298 142 -1871 0
298 144 -1873 0
298 146 -1875 0
298 148 -1877 0
298 150 -1879 0
300 -1865 0
300 137 -1867 0
300 138 -1869 0
300 140 -1871 0
300 142 -1873 0
300 144 -1875 0
300 146 -1877 0
300 148 -1879 0
300 150 -1881 0
c (0<=( - aux463 + shift(x_00003_00002, -1) + shift(x_00002_00001, -1)))
-150 1881 0
-148 1879 0
-146 1877 0
-144 1875 0
-142 1873 0
-140 1871 0
-138 1869 0
-137 1867 0
-300 1881 0
-300 -150 1879 0
-300 -148 1877 0
-300 -146 1875 0
-300 -144 1873 0
-300 -142 1871 0
-300 -140 1869 0
-300 -138 1867 0
-300 -137 1865 0
-298 1879 0
-298 -150 1877 0
-298 -148 1875 0
-298 -146 1873 0
-298 -144 1871 0
-298 -142 1869 0
-298 -140 1867 0
-298 -138 1865 0
-298 -137 1863 0
-296 1877 0
-296 -150 1875 0
-296 -148 1873 0
-296 -146 1871 0
-296 -144 1869 0
-296 -142 1867 0
-296 -140 1865 0
-296 -138 1863 0
-296 -137 1861 0
-294 1875 0
-294 -150 1873 0
-294 -148 1871 0
-294 -146 1869 0
-294 -144 1867 0
-294 -142 1865 0
-294 -140 1863 0
-294 -138 1861 0
-294 -137 1859 0
-292 1873 0
-292 -150 1871 0
-292 -148 1869 0
-292 -146 1867 0
-292 -144 1865 0
-292 -142 1863 0
-292 -140 1861 0
-292 -138 1859 0
-292 -137 1857 0
-290 1871 0
-290 -150 1869 0
-290 -148 1867 0
-290 -146 1865 0
-290 -144 1863 0
-290 -142 1861 0
-290 -140 1859 0
-290 -138 1857 0
-290 -137 1855 0
-288 1869 0
-288 -150 1867 0
-288 -148 1865 0
-288 -146 1863 0
-288 -144 1861 0
-288 -142 1859 0
-288 -140 1857 0
-288 -138 1855 0
-288 -137 1853 0
-287 1867 0
-287 -150 1865 0
-287 -148 1863 0
-287 -146 1861 0
-287 -144 1859 0
-287 -142 1857 0
-287 -140 1855 0
-287 -138 1853 0
-287 -137 1852 0
c ((shift(x_00007_00001, -1) - aux464 + shift(x_00006_00001, -1))<=0)
677 -1883 0
678 -1884 0
680 -1886 0
682 -1888 0
684 -1890 0
686 -1892 0
688 -1894 0
690 -1896 0
812 -1883 0
812 677 -1884 0
812 678 -1886 0
812 680 -1888 0
812 682 -1890 0
812 684 -1892 0
812 686 -1894 0
812 688 -1896 0
812 690 -1898 0
813 -1884 0
813 677 -1886 0
813 678 -1888 0
813 680 -1890 0
813 682 -1892 0
813 684 -1894 0
813 686 -1896 0
813 688 -1898 0
813 690 -1900 0
815 -1886 0
815 677 -1888 0
815 678 -1890 0
815 680 -1892 0
815 682 -1894 0
815 684 -1896 0
815 686 -1898 0
815 688 -1900 0
815 690 -1902 0
817 -1888 0
817 677 -1890 0
817 678 -1892 0
817 680 -1894 0
817 682 -1896 0
817 684 -1898 0
817 686 -1900 0
817 688 -1902 0
817 690 -1904 0
819 -1890 0
819 677 -1892 0
819 678 -1894 0
819 680 -1896 0
819 682 -1898 0
819 684 -1900 0
819 686 -1902 0
819 688 -1904 0
819 690 -1906 0
821 -1892 0
821 677 -1894 0
821 678 -1896 0
821 680 -1898 0
821 682 -1900 0
821 684 -1902 0
821 686 -1904 0
821 688 -1906 0
821 690 -1908 0
823 -1894 0
823 677 -1896 0
823 678 -1898 0
823 680 -1900 0
823 682 -1902 0
823 684 -1904 0
823 686 -1906 0
823 688 -1908 0
823 690 -1910 0
825 -1896 0
825 677 -1898 0
825 678 -1900 0
825 680 -1902 0
825 682 -1904 0
825 684 -1906 0
825 686 -1908 0
825 688 -1910 0
825 690 -1912 0
c (0<=(shift(x_00007_00001, -1) - aux464 + shift(x_00006_00001, -1)))
-690 1912 0
-688 1910 0
-686 1908 0
-684 1906 0
-682 1904 0
-680 1902 0
-678 1900 0
-677 1898 0
-825 1912 0
-825 -690 1910 0
-825 -688 1908 0
-825 -686 1906 0
-825 -684 1904 0
-825 -682 1902 0
-825 -680 1900 0
-825 -678 1898 0
-825 -677 1896 0
-823 1910 0
-823 -690 1908 0
-823 -688 1906 0
-823 -686 1904 0
-823 -684 1902 0
-823 -682 1900 0
-823 -680 1898 0
-823 -678 1896 0
-823 -677 1894 0
-821 1908 0
-821 -690 1906 0
-821 -688 1904 0
-821 -686 1902 0
-821 -684 1900 0
-821 -682 1898 0
-821 -680 1896 0
-821 -678 1894 0
-821 -677 1892 0
-819 1906 0
-819 -690 1904 0
-819 -688 1902 0
-819 -686 1900 0
-819 -684 1898 0
-819 -682 1896 0
-819 -680 1894 0
-819 -678 1892 0
-819 -677 1890 0
-817 1904 0
-817 -690 1902 0
-817 -688 1900 0
-817 -686 1898 0
-817 -684 1896 0
-817 -682 1894 0
-817 -680 1892 0
-817 -678 1890 0
-817 -677 1888 0
-815 1902 0
-815 -690 1900 0
-815 -688 1898 0
-815 -686 1896 0
-815 -684 1894 0
-815 -682 1892 0
-815 -680 1890 0
-815 -678 1888 0
-815 -677 1886 0
-813 1900 0
-813 -690 1898 0
-813 -688 1896 0
-813 -686 1894 0
-813 -684 1892 0
-813 -682 1890 0
-813 -680 1888 0
-813 -678 1886 0
-813 -677 1884 0
-812 1898 0
-812 -690 1896 0
-812 -688 1894 0
-812 -686 1892 0
-812 -684 1890 0
-812 -682 1888 0
-812 -680 1886 0
-812 -678 1884 0
-812 -677 1883 0
c ((shift(x_00007_00005, -1) - aux465 + shift(x_00009_00004, -1))<=0)
1127 -1914 0
1128 -1915 0
1130 -1917 0
1132 -1919 0
1134 -1921 0
1136 -1923 0
1138 -1925 0
1140 -1927 0
872 -1914 0
872 1127 -1915 0
872 1128 -1917 0
872 1130 -1919 0
872 1132 -1921 0
872 1134 -1923 0
872 1136 -1925 0
872 1138 -1927 0
872 1140 -1929 0
873 -1915 0
873 1127 -1917 0
873 1128 -1919 0
873 1130 -1921 0
873 1132 -1923 0
873 1134 -1925 0
873 1136 -1927 0
873 1138 -1929 0
873 1140 -1931 0
875 -1917 0
875 1127 -1919 0
875 1128 -1921 0
875 1130 -1923 0
875 1132 -1925 0
875 1134 -1927 0
875 1136 -1929 0
875 1138 -1931 0
875 1140 -1933 0
877 -1919 0
877 1127 -1921 0
877 1128 -1923 0
877 1130 -1925 0
877 1132 -1927 0
877 1134 -1929 0
877 1136 -1931 0
877 1138 -1933 0
877 1140 -1935 0
879 -1921 0
879 1127 -1923 0
879 1128 -1925 0
879 1130 -1927 0
879 1132 -1929 0
879 1134 -1931 0
879 1136 -1933 0
879 1138 -1935 0
879 1140 -1937 0
881 -1923 0
881 1127 -1925 0
881 1128 -1927 0
881 1130 -1929 0
881 1132 -1931 0
881 1134 -1933 0
881 1136 -1935 0
881 1138 -1937 0
881 1140 -1939 0
883 -1925 0
883 1127 -1927 0
883 1128 -1929 0
883 1130 -1931 0
883 1132 -1933 0
883 1134 -1935 0
883 1136 -1937 0
883 1138 -1939 0
883 1140 -1941 0
885 -1927 0
885 1127 -1929 0
885 1128 -1931 0
885 1130 -1933 0
885 1132 -1935 0
885 1134 -1937 0
885 1136 -1939 0
885 1138 -1941 0
885 1140 -1943 0
c (0<=(shift(x_00007_00005, -1) - aux465 + shift(x_00009_00004, -1)))
-1140 1943 0
-1138 1941 0
-1136 1939 0
-1134 1937 0
-1132 1935 0
-1130 1933 0
-1128 1931 0
-1127 1929 0
-885 1943 0
-885 -1140 1941 0
-885 -1138 1939 0
-885 -1136 1937 0
-885 -1134 1935 0
-885 -1132 1933 0
-885 -1130 1931 0
-885 -1128 1929 0
-885 -1127 1927 0
-883 1941 0
-883 -1140 1939 0
-883 -1138 1937 0
-883 -1136 1935 0
-883 -1134 1933 0
-883 -1132 1931 0
-883 -1130 1929 0
-883 -1128 1927 0
-883 -1127 1925 0
-881 1939 0
-881 -1140 1937 0
-881 -1138 1935 0
-881 -1136 1933 0
-881 -1134 1931 0
-881 -1132 1929 0
-881 -1130 1927 0
-881 -1128 1925 0
-881 -1127 1923 0
-879 1937 0
-879 -1140 1935 0
-879 -1138 1933 0
-879 -1136 1931 0
-879 -1134 1929 0
-879 -1132 1927 0
-879 -1130 1925 0
-879 -1128 1923 0
-879 -1127 1921 0
-877 1935 0
-877 -1140 1933 0
-877 -1138 1931 0
-877 -1136 1929 0
-877 -1134 1927 0
-877 -1132 1925 0
-877 -1130 1923 0
-877 -1128 1921 0
-877 -1127 1919 0
-875 1933 0
-875 -1140 1931 0
-875 -1138 1929 0
-875 -1136 1927 0
-875 -1134 1925 0
-875 -1132 1923 0
-875 -1130 1921 0
-875 -1128 1919 0
-875 -1127 1917 0
-873 1931 0
-873 -1140 1929 0
-873 -1138 1927 0
-873 -1136 1925 0
-873 -1134 1923 0
-873 -1132 1921 0
-873 -1130 1919 0
-873 -1128 1917 0
-873 -1127 1915 0
-872 1929 0
-872 -1140 1927 0
-872 -1138 1925 0
-872 -1136 1923 0
-872 -1134 1921 0
-872 -1132 1919 0
-872 -1130 1917 0
-872 -1128 1915 0
-872 -1127 1914 0
c ((shift(x_00007_00008, -1) - aux466 + shift(x_00008_00009, -1))<=0)
1067 -1945 0
1068 -1946 0
1070 -1948 0
1072 -1950 0
1074 -1952 0
1076 -1954 0
1078 -1956 0
1080 -1958 0
917 -1945 0
917 1067 -1946 0
917 1068 -1948 0
917 1070 -1950 0
917 1072 -1952 0
917 1074 -1954 0
917 1076 -1956 0
917 1078 -1958 0
917 1080 -1960 0
918 -1946 0
918 1067 -1948 0
918 1068 -1950 0
918 1070 -1952 0
918 1072 -1954 0
918 1074 -1956 0
918 1076 -1958 0
918 1078 -1960 0
918 1080 -1962 0
920 -1948 0
920 1067 -1950 0
920 1068 -1952 0
920 1070 -1954 0
920 1072 -1956 0
920 1074 -1958 0
920 1076 -1960 0
920 1078 -1962 0
920 1080 -1964 0
922 -1950 0
922 1067 -1952 0
922 1068 -1954 0
922 1070 -1956 0
922 1072 -1958 0
922 1074 -1960 0
922 1076 -1962 0
922 1078 -1964 0
922 1080 -1966 0
924 -1952 0
924 1067 -1954 0
924 1068 -1956 0
924 1070 -1958 0
924 1072 -1960 0
924 1074 -1962 0
924 1076 -1964 0
924 1078 -1966 0
924 1080 -1968 0
926 -1954 0
926 1067 -1956 0
926 1068 -1958 0
926 1070 -1960 0
926 1072 -1962 0
926 1074 -1964 0
926 1076 -1966 0
926 1078 -1968 0
926 1080 -1970 0
928 -1956 0
928 1067 -1958 0
928 1068 -1960 0
928 1070 -1962 0
928 1072 -1964 0
928 1074 -1966 0
928 1076 -1968 0
928 1078 -1970 0
928 1080 -1972 0
930 -1958 0
930 1067 -1960 0
930 1068 -1962 0
930 1070 -1964 0
930 1072 -1966 0
930 1074 -1968 0
930 1076 -1970 0
930 1078 -1972 0
930 1080 -1974 0
c (0<=(shift(x_00007_00008, -1) - aux466 + shift(x_00008_00009, -1)))
-1080 1974 0
-1078 1972 0
-1076 1970 0
-1074 1968 0
-1072 1966 0
-1070 1964 0
-1068 1962 0
-1067 1960 0
-930 1974 0
-930 -1080 1972 0
-930 -1078 1970 0
-930 -1076 1968 0
-930 -1074 1966 0
-930 -1072 1964 0
-930 -1070 1962 0
-930 -1068 1960 0
-930 -1067 1958 0
-928 1972 0
-928 -1080 1970 0
-928 -1078 1968 0
-928 -1076 1966 0
-928 -1074 1964 0
-928 -1072 1962 0
-928 -1070 1960 0
-928 -1068 1958 0
-928 -1067 1956 0
-926 1970 0
-926 -1080 1968 0
-926 -1078 1966 0
-926 -1076 1964 0
-926 -1074 1962 0
-926 -1072 1960 0
-926 -1070 1958 0
-926 -1068 1956 0
-926 -1067 1954 0
-924 1968 0
-924 -1080 1966 0
-924 -1078 1964 0
-924 -1076 1962 0
-924 -1074 1960 0
-924 -1072 1958 0
-924 -1070 1956 0
-924 -1068 1954 0
-924 -1067 1952 0
-922 1966 0
-922 -1080 1964 0
-922 -1078 1962 0
-922 -1076 1960 0
-922 -1074 1958 0
-922 -1072 1956 0
-922 -1070 1954 0
-922 -1068 1952 0
-922 -1067 1950 0
-920 1964 0
-920 -1080 1962 0
-920 -1078 1960 0
-920 -1076 1958 0
-920 -1074 1956 0
-920 -1072 1954 0
-920 -1070 1952 0
-920 -1068 1950 0
-920 -1067 1948 0
-918 1962 0
-918 -1080 1960 0
-918 -1078 1958 0
-918 -1076 1956 0
-918 -1074 1954 0
-918 -1072 1952 0
-918 -1070 1950 0
-918 -1068 1948 0
-918 -1067 1946 0
-917 1960 0
-917 -1080 1958 0
-917 -1078 1956 0
-917 -1076 1954 0
-917 -1074 1952 0
-917 -1072 1950 0
-917 -1070 1948 0
-917 -1068 1946 0
-917 -1067 1945 0
c ((SATLiteral(332) - aux2069 + SATLiteral(212))<=0)
-212 -13424 0
-332 -13424 0
-332 -212 -13425 0
c (0<=(SATLiteral(332) - aux2069 + SATLiteral(212)))
212 13425 0
332 13425 0
332 212 13424 0
c ((SATLiteral(334) - aux2070 + SATLiteral(214))<=0)
-214 -13427 0
-334 -13427 0
-334 -214 -13428 0
c (0<=(SATLiteral(334) - aux2070 + SATLiteral(214)))
214 13428 0
334 13428 0
334 214 13427 0
c ((SATLiteral(336) - aux2071 + SATLiteral(216))<=0)
-216 -13430 0
-336 -13430 0
-336 -216 -13431 0
c (0<=(SATLiteral(336) - aux2071 + SATLiteral(216)))
216 13431 0
336 13431 0
336 216 13430 0
c ((SATLiteral(338) - aux2072 + SATLiteral(218))<=0)
-218 -13433 0
-338 -13433 0
-338 -218 -13434 0
c (0<=(SATLiteral(338) - aux2072 + SATLiteral(218)))
218 13434 0
338 13434 0
338 218 13433 0
c ((SATLiteral(340) - aux2073 + SATLiteral(220))<=0)
-220 -13436 0
-340 -13436 0
-340 -220 -13437 0
c (0<=(SATLiteral(340) - aux2073 + SATLiteral(220)))
220 13437 0
340 13437 0
340 220 13436 0
c ((SATLiteral(342) - aux2074 + SATLiteral(222))<=0)
-222 -13439 0
-342 -13439 0
-342 -222 -13440 0
c (0<=(SATLiteral(342) - aux2074 + SATLiteral(222)))
222 13440 0
342 13440 0
342 222 13439 0
c ((SATLiteral(344) - aux2075 + SATLiteral(224))<=0)
-224 -13442 0
-344 -13442 0
-344 -224 -13443 0
c (0<=(SATLiteral(344) - aux2075 + SATLiteral(224)))
224 13443 0
344 13443 0
344 224 13442 0
c ((SATLiteral(346) - aux2076 + SATLiteral(226))<=0)
-226 -13445 0
-346 -13445 0
-346 -226 -13446 0
c (0<=(SATLiteral(346) - aux2076 + SATLiteral(226)))
226 13446 0
346 13446 0
346 226 13445 0
c ((SATLiteral(-345) - aux2077 + SATLiteral(-225))<=0)
225 -13448 0
345 -13448 0
345 225 -13449 0
c (0<=(SATLiteral(-345) - aux2077 + SATLiteral(-225)))
-225 13449 0
-345 13449 0
-345 -225 13448 0
c ((SATLiteral(392) - aux2078 + SATLiteral(257))<=0)
-257 -13451 0
-392 -13451 0
-392 -257 -13452 0
c (0<=(SATLiteral(392) - aux2078 + SATLiteral(257)))
257 13452 0
392 13452 0
392 257 13451 0
c ((SATLiteral(394) - aux2079 + SATLiteral(259))<=0)
-259 -13454 0
-394 -13454 0
-394 -259 -13455 0
c (0<=(SATLiteral(394) - aux2079 + SATLiteral(259)))
259 13455 0
394 13455 0
394 259 13454 0
c ((SATLiteral(396) - aux2080 + SATLiteral(261))<=0)
-261 -13457 0
-396 -13457 0
-396 -261 -13458 0
c (0<=(SATLiteral(396) - aux2080 + SATLiteral(261)))
261 13458 0
396 13458 0
396 261 13457 0
c ((SATLiteral(398) - aux2081 + SATLiteral(263))<=0)
-263 -13460 0
-398 -13460 0
-398 -263 -13461 0
c (0<=(SATLiteral(398) - aux2081 + SATLiteral(263)))
263 13461 0
398 13461 0
398 263 13460 0
c ((SATLiteral(400) - aux2082 + SATLiteral(265))<=0)
-265 -13463 0
-400 -13463 0
-400 -265 -13464 0
c (0<=(SATLiteral(400) - aux2082 + SATLiteral(265)))
265 13464 0
400 13464 0
400 265 13463 0
c ((SATLiteral(402) - aux2083 + SATLiteral(267))<=0)
-267 -13466 0
-402 -13466 0
-402 -267 -13467 0
c (0<=(SATLiteral(402) - aux2083 + SATLiteral(267)))
267 13467 0
402 13467 0
402 267 13466 0
c ((SATLiteral(404) - aux2084 + SATLiteral(269))<=0)
-269 -13469 0
-404 -13469 0
-404 -269 -13470 0
c (0<=(SATLiteral(404) - aux2084 + SATLiteral(269)))
269 13470 0
404 13470 0
404 269 13469 0
c ((SATLiteral(406) - aux2085 + SATLiteral(271))<=0)
-271 -13472 0
-406 -13472 0
-406 -271 -13473 0
c (0<=(SATLiteral(406) - aux2085 + SATLiteral(271)))
271 13473 0
406 13473 0
406 271 13472 0
c ((SATLiteral(-405) - aux2086 + SATLiteral(-270))<=0)
270 -13475 0
405 -13475 0
405 270 -13476 0
c (0<=(SATLiteral(-405) - aux2086 + SATLiteral(-270)))
-270 13476 0
-405 13476 0
-405 -270 13475 0
c ((SATLiteral(272) - aux2087 + SATLiteral(152))<=0)
-152 -13478 0
-272 -13478 0
-272 -152 -13479 0
c (0<=(SATLiteral(272) - aux2087 + SATLiteral(152)))
152 13479 0
272 13479 0
272 152 13478 0
c ((SATLiteral(274) - aux2088 + SATLiteral(154))<=0)
-154 -13481 0
-274 -13481 0
-274 -154 -13482 0
c (0<=(SATLiteral(274) - aux2088 + SATLiteral(154)))
154 13482 0
274 13482 0
274 154 13481 0
c ((SATLiteral(276) - aux2089 + SATLiteral(156))<=0)
-156 -13484 0
-276 -13484 0
-276 -156 -13485 0
c (0<=(SATLiteral(276) - aux2089 + SATLiteral(156)))
156 13485 0
276 13485 0
276 156 13484 0
c ((SATLiteral(278) - aux2090 + SATLiteral(158))<=0)
-158 -13487 0
-278 -13487 0
-278 -158 -13488 0
c (0<=(SATLiteral(278) - aux2090 + SATLiteral(158)))
158 13488 0
278 13488 0
278 158 13487 0
c ((SATLiteral(280) - aux2091 + SATLiteral(160))<=0)
-160 -13490 0
-280 -13490 0
-280 -160 -13491 0
c (0<=(SATLiteral(280) - aux2091 + SATLiteral(160)))
160 13491 0
280 13491 0
280 160 13490 0
c ((SATLiteral(282) - aux2092 + SATLiteral(162))<=0)
-162 -13493 0
-282 -13493 0
-282 -162 -13494 0
c (0<=(SATLiteral(282) - aux2092 + SATLiteral(162)))
162 13494 0
282 13494 0
282 162 13493 0
c ((SATLiteral(284) - aux2093 + SATLiteral(164))<=0)
-164 -13496 0
-284 -13496 0
-284 -164 -13497 0
c (0<=(SATLiteral(284) - aux2093 + SATLiteral(164)))
164 13497 0
284 13497 0
284 164 13496 0
c ((SATLiteral(286) - aux2094 + SATLiteral(166))<=0)
-166 -13499 0
-286 -13499 0
-286 -166 -13500 0
c (0<=(SATLiteral(286) - aux2094 + SATLiteral(166)))
166 13500 0
286 13500 0
286 166 13499 0
c ((SATLiteral(-285) - aux2095 + SATLiteral(-165))<=0)
165 -13502 0
285 -13502 0
285 165 -13503 0
c (0<=(SATLiteral(-285) - aux2095 + SATLiteral(-165)))
-165 13503 0
-285 13503 0
-285 -165 13502 0
c ((SATLiteral(947) - aux2096 + SATLiteral(812))<=0)
-812 -13505 0
-947 -13505 0
-947 -812 -13506 0
c (0<=(SATLiteral(947) - aux2096 + SATLiteral(812)))
812 13506 0
947 13506 0
947 812 13505 0
c ((SATLiteral(949) - aux2097 + SATLiteral(814))<=0)
-814 -13508 0
-949 -13508 0
-949 -814 -13509 0
c (0<=(SATLiteral(949) - aux2097 + SATLiteral(814)))
814 13509 0
949 13509 0
949 814 13508 0
c ((SATLiteral(951) - aux2098 + SATLiteral(816))<=0)
-816 -13511 0
-951 -13511 0
-951 -816 -13512 0
c (0<=(SATLiteral(951) - aux2098 + SATLiteral(816)))
816 13512 0
951 13512 0
951 816 13511 0
c ((SATLiteral(953) - aux2099 + SATLiteral(818))<=0)
-818 -13514 0
-953 -13514 0
-953 -818 -13515 0
c (0<=(SATLiteral(953) - aux2099 + SATLiteral(818)))
818 13515 0
953 13515 0
953 818 13514 0
c ((SATLiteral(955) - aux2100 + SATLiteral(820))<=0)
-820 -13517 0
-955 -13517 0
-955 -820 -13518 0
c (0<=(SATLiteral(955) - aux2100 + SATLiteral(820)))
820 13518 0
955 13518 0
955 820 13517 0
c ((SATLiteral(957) - aux2101 + SATLiteral(822))<=0)
-822 -13520 0
-957 -13520 0
-957 -822 -13521 0
c (0<=(SATLiteral(957) - aux2101 + SATLiteral(822)))
822 13521 0
957 13521 0
957 822 13520 0
c ((SATLiteral(959) - aux2102 + SATLiteral(824))<=0)
-824 -13523 0
-959 -13523 0
-959 -824 -13524 0
c (0<=(SATLiteral(959) - aux2102 + SATLiteral(824)))
824 13524 0
959 13524 0
959 824 13523 0
c ((SATLiteral(961) - aux2103 + SATLiteral(826))<=0)
-826 -13526 0
-961 -13526 0
-961 -826 -13527 0
c (0<=(SATLiteral(961) - aux2103 + SATLiteral(826)))
826 13527 0
961 13527 0
961 826 13526 0
c ((SATLiteral(-960) - aux2104 + SATLiteral(-825))<=0)
825 -13529 0
960 -13529 0
960 825 -13530 0
c (0<=(SATLiteral(-960) - aux2104 + SATLiteral(-825)))
-825 13530 0
-960 13530 0
-960 -825 13529 0
c ((SATLiteral(992) - aux2105 + SATLiteral(872))<=0)
-872 -13532 0
-992 -13532 0
-992 -872 -13533 0
c (0<=(SATLiteral(992) - aux2105 + SATLiteral(872)))
872 13533 0
992 13533 0
992 872 13532 0
c ((SATLiteral(994) - aux2106 + SATLiteral(874))<=0)
-874 -13535 0
-994 -13535 0
-994 -874 -13536 0
c (0<=(SATLiteral(994) - aux2106 + SATLiteral(874)))
874 13536 0
994 13536 0
994 874 13535 0
c ((SATLiteral(996) - aux2107 + SATLiteral(876))<=0)
-876 -13538 0
-996 -13538 0
-996 -876 -13539 0
c (0<=(SATLiteral(996) - aux2107 + SATLiteral(876)))
876 13539 0
996 13539 0
996 876 13538 0
c ((SATLiteral(998) - aux2108 + SATLiteral(878))<=0)
-878 -13541 0
-998 -13541 0
-998 -878 -13542 0
c (0<=(SATLiteral(998) - aux2108 + SATLiteral(878)))
878 13542 0
998 13542 0
998 878 13541 0
c ((SATLiteral(1000) - aux2109 + SATLiteral(880))<=0)
-880 -13544 0
-1000 -13544 0
-1000 -880 -13545 0
c (0<=(SATLiteral(1000) - aux2109 + SATLiteral(880)))
880 13545 0
1000 13545 0
1000 880 13544 0
c ((SATLiteral(1002) - aux2110 + SATLiteral(882))<=0)
-882 -13547 0
-1002 -13547 0
-1002 -882 -13548 0
c (0<=(SATLiteral(1002) - aux2110 + SATLiteral(882)))
882 13548 0
1002 13548 0
1002 882 13547 0
c ((SATLiteral(1004) - aux2111 + SATLiteral(884))<=0)
-884 -13550 0
-1004 -13550 0
-1004 -884 -13551 0
c (0<=(SATLiteral(1004) - aux2111 + SATLiteral(884)))
884 13551 0
1004 13551 0
1004 884 13550 0
c ((SATLiteral(1006) - aux2112 + SATLiteral(886))<=0)
-886 -13553 0
-1006 -13553 0
-1006 -886 -13554 0
c (0<=(SATLiteral(1006) - aux2112 + SATLiteral(886)))
886 13554 0
1006 13554 0
1006 886 13553 0
c ((SATLiteral(-1005) - aux2113 + SATLiteral(-885))<=0)
885 -13556 0
1005 -13556 0
1005 885 -13557 0
c (0<=(SATLiteral(-1005) - aux2113 + SATLiteral(-885)))
-885 13557 0
-1005 13557 0
-1005 -885 13556 0
c ((SATLiteral(1052) - aux2114 + SATLiteral(932))<=0)
-932 -13559 0
-1052 -13559 0
-1052 -932 -13560 0
c (0<=(SATLiteral(1052) - aux2114 + SATLiteral(932)))
932 13560 0
1052 13560 0
1052 932 13559 0
c ((SATLiteral(1054) - aux2115 + SATLiteral(934))<=0)
-934 -13562 0
-1054 -13562 0
-1054 -934 -13563 0
c (0<=(SATLiteral(1054) - aux2115 + SATLiteral(934)))
934 13563 0
1054 13563 0
1054 934 13562 0
c ((SATLiteral(1056) - aux2116 + SATLiteral(936))<=0)
-936 -13565 0
-1056 -13565 0
-1056 -936 -13566 0
c (0<=(SATLiteral(1056) - aux2116 + SATLiteral(936)))
936 13566 0
1056 13566 0
1056 936 13565 0
c ((SATLiteral(1058) - aux2117 + SATLiteral(938))<=0)
-938 -13568 0
-1058 -13568 0
-1058 -938 -13569 0
c (0<=(SATLiteral(1058) - aux2117 + SATLiteral(938)))
938 13569 0
1058 13569 0
1058 938 13568 0
c ((SATLiteral(1060) - aux2118 + SATLiteral(940))<=0)
-940 -13571 0
-1060 -13571 0
-1060 -940 -13572 0
c (0<=(SATLiteral(1060) - aux2118 + SATLiteral(940)))
940 13572 0
1060 13572 0
1060 940 13571 0
c ((SATLiteral(1062) - aux2119 + SATLiteral(942))<=0)
-942 -13574 0
-1062 -13574 0
-1062 -942 -13575 0
c (0<=(SATLiteral(1062) - aux2119 + SATLiteral(942)))
942 13575 0
1062 13575 0
1062 942 13574 0
c ((SATLiteral(1064) - aux2120 + SATLiteral(944))<=0)
-944 -13577 0
-1064 -13577 0
-1064 -944 -13578 0
c (0<=(SATLiteral(1064) - aux2120 + SATLiteral(944)))
944 13578 0
1064 13578 0
1064 944 13577 0
c ((SATLiteral(1066) - aux2121 + SATLiteral(946))<=0)
-946 -13580 0
-1066 -13580 0
-1066 -946 -13581 0
c (0<=(SATLiteral(1066) - aux2121 + SATLiteral(946)))
946 13581 0
1066 13581 0
1066 946 13580 0
c ((SATLiteral(-1065) - aux2122 + SATLiteral(-945))<=0)
945 -13583 0
1065 -13583 0
1065 945 -13584 0
c (0<=(SATLiteral(-1065) - aux2122 + SATLiteral(-945)))
-945 13584 0
-1065 13584 0
-1065 -945 13583 0
c (( - aux467 + shift(x_00006_00001, -1) + shift(x_00002_00001, -1))<=0)
137 -1976 0
138 -1977 0
140 -1979 0
142 -1981 0
144 -1983 0
146 -1985 0
148 -1987 0
150 -1989 0
677 -1976 0
677 137 -1977 0
677 138 -1979 0
677 140 -1981 0
677 142 -1983 0
677 144 -1985 0
677 146 -1987 0
677 148 -1989 0
677 150 -1991 0
678 -1977 0
678 137 -1979 0
678 138 -1981 0
678 140 -1983 0
678 142 -1985 0
678 144 -1987 0
678 146 -1989 0
678 148 -1991 0
678 150 -1993 0
680 -1979 0
680 137 -1981 0
680 138 -1983 0
680 140 -1985 0
680 142 -1987 0
680 144 -1989 0
680 146 -1991 0
680 148 -1993 0
680 150 -1995 0
682 -1981 0
682 137 -1983 0
682 138 -1985 0
682 140 -1987 0
682 142 -1989 0
682 144 -1991 0
682 146 -1993 0
682 148 -1995 0
682 150 -1997 0
684 -1983 0
684 137 -1985 0
684 138 -1987 0
684 140 -1989 0
684 142 -1991 0
684 144 -1993 0
684 146 -1995 0
684 148 -1997 0
684 150 -1999 0
686 -1985 0
686 137 -1987 0
686 138 -1989 0
686 140 -1991 0
686 142 -1993 0
686 144 -1995 0
686 146 -1997 0
686 148 -1999 0
686 150 -2001 0
688 -1987 0
688 137 -1989 0
688 138 -1991 0
688 140 -1993 0
688 142 -1995 0
688 144 -1997 0
688 146 -1999 0
688 148 -2001 0
688 150 -2003 0
690 -1989 0
690 137 -1991 0
690 138 -1993 0
690 140 -1995 0
690 142 -1997 0
690 144 -1999 0
690 146 -2001 0
690 148 -2003 0
690 150 -2005 0
c (0<=( - aux467 + shift(x_00006_00001, -1) + shift(x_00002_00001, -1)))
-150 2005 0
-148 2003 0
-146 2001 0
-144 1999 0
-142 1997 0
-140 1995 0
-138 1993 0
-137 1991 0
-690 2005 0
-690 -150 2003 0
-690 -148 2001 0
-690 -146 1999 0
-690 -144 1997 0
-690 -142 1995 0
-690 -140 1993 0
-690 -138 1991 0
-690 -137 1989 0
-688 2003 0
-688 -150 2001 0
-688 -148 1999 0
-688 -146 1997 0
-688 -144 1995 0
-688 -142 1993 0
-688 -140 1991 0
-688 -138 1989 0
-688 -137 1987 0
-686 2001 0
-686 -150 1999 0
-686 -148 1997 0
-686 -146 1995 0
-686 -144 1993 0
-686 -142 1991 0
-686 -140 1989 0
-686 -138 1987 0
-686 -137 1985 0
-684 1999 0
-684 -150 1997 0
-684 -148 1995 0
-684 -146 1993 0
-684 -144 1991 0
-684 -142 1989 0
-684 -140 1987 0
-684 -138 1985 0
-684 -137 1983 0
-682 1997 0
-682 -150 1995 0
-682 -148 1993 0
-682 -146 1991 0
-682 -144 1989 0
-682 -142 1987 0
-682 -140 1985 0
-682 -138 1983 0
-682 -137 1981 0
-680 1995 0
-680 -150 1993 0
-680 -148 1991 0
-680 -146 1989 0
-680 -144 1987 0
-680 -142 1985 0
-680 -140 1983 0
-680 -138 1981 0
-680 -137 1979 0
-678 1993 0
-678 -150 1991 0
-678 -148 1989 0
-678 -146 1987 0
-678 -144 1985 0
-678 -142 1983 0
-678 -140 1981 0
-678 -138 1979 0
-678 -137 1977 0
-677 1991 0
-677 -150 1989 0
-677 -148 1987 0
-677 -146 1985 0
-677 -144 1983 0
-677 -142 1981 0
-677 -140 1979 0
-677 -138 1977 0
-677 -137 1976 0
c ((shift(x_00007_00001, -1) - aux468 + shift(x_00001_00001, -1))<=0)
2 -2007 0
3 -2008 0
5 -2010 0
7 -2012 0
9 -2014 0
11 -2016 0
13 -2018 0
15 -2020 0
812 -2007 0
812 2 -2008 0
812 3 -2010 0
812 5 -2012 0
812 7 -2014 0
812 9 -2016 0
812 11 -2018 0
812 13 -2020 0
812 15 -2022 0
813 -2008 0
813 2 -2010 0
813 3 -2012 0
813 5 -2014 0
813 7 -2016 0
813 9 -2018 0
813 11 -2020 0
813 13 -2022 0
813 15 -2024 0
815 -2010 0
815 2 -2012 0
815 3 -2014 0
815 5 -2016 0
815 7 -2018 0
815 9 -2020 0
815 11 -2022 0
815 13 -2024 0
815 15 -2026 0
817 -2012 0
817 2 -2014 0
817 3 -2016 0
817 5 -2018 0
817 7 -2020 0
817 9 -2022 0
817 11 -2024 0
817 13 -2026 0
817 15 -2028 0
819 -2014 0
819 2 -2016 0
819 3 -2018 0
819 5 -2020 0
819 7 -2022 0
819 9 -2024 0
819 11 -2026 0
819 13 -2028 0
819 15 -2030 0
821 -2016 0
821 2 -2018 0
821 3 -2020 0
821 5 -2022 0
821 7 -2024 0
821 9 -2026 0
821 11 -2028 0
821 13 -2030 0
821 15 -2032 0
823 -2018 0
823 2 -2020 0
823 3 -2022 0
823 5 -2024 0
823 7 -2026 0
823 9 -2028 0
823 11 -2030 0
823 13 -2032 0
823 15 -2034 0
825 -2020 0
825 2 -2022 0
825 3 -2024 0
825 5 -2026 0
825 7 -2028 0
825 9 -2030 0
825 11 -2032 0
825 13 -2034 0
825 15 -2036 0
c (0<=(shift(x_00007_00001, -1) - aux468 + shift(x_00001_00001, -1)))
-15 2036 0
-13 2034 0
-11 2032 0
-9 2030 0
-7 2028 0
-5 2026 0
-3 2024 0
-2 2022 0
-825 2036 0
-825 -15 2034 0
-825 -13 2032 0
-825 -11 2030 0
-825 -9 2028 0
-825 -7 2026 0
-825 -5 2024 0
-825 -3 2022 0
-825 -2 2020 0
-823 2034 0
-823 -15 2032 0
-823 -13 2030 0
-823 -11 2028 0
-823 -9 2026 0
-823 -7 2024 0
-823 -5 2022 0
-823 -3 2020 0
-823 -2 2018 0
-821 2032 0
-821 -15 2030 0
-821 -13 2028 0
-821 -11 2026 0
-821 -9 2024 0
-821 -7 2022 0
-821 -5 2020 0
-821 -3 2018 0
-821 -2 2016 0
-819 2030 0
-819 -15 2028 0
-819 -13 2026 0
-819 -11 2024 0
-819 -9 2022 0
-819 -7 2020 0
-819 -5 2018 0
-819 -3 2016 0
-819 -2 2014 0
-817 2028 0
-817 -15 2026 0
-817 -13 2024 0
-817 -11 2022 0
-817 -9 2020 0
-817 -7 2018 0
-817 -5 2016 0
-817 -3 2014 0
-817 -2 2012 0
-815 2026 0
-815 -15 2024 0
-815 -13 2022 0
-815 -11 2020 0
-815 -9 2018 0
-815 -7 2016 0
-815 -5 2014 0
-815 -3 2012 0
-815 -2 2010 0
-813 2024 0
-813 -15 2022 0
-813 -13 2020 0
-813 -11 2018 0
-813 -9 2016 0
-813 -7 2014 0
-813 -5 2012 0
-813 -3 2010 0
-813 -2 2008 0
-812 2022 0
-812 -15 2020 0
-812 -13 2018 0
-812 -11 2016 0
-812 -9 2014 0
-812 -7 2012 0
-812 -5 2010 0
-812 -3 2008 0
-812 -2 2007 0
c (( - aux469 + shift(x_00005_00001, -1) + shift(x_00008_00001, -1))<=0)
947 -2038 0
948 -2039 0
950 -2041 0
952 -2043 0
954 -2045 0
956 -2047 0
958 -2049 0
960 -2051 0
542 -2038 0
542 947 -2039 0
542 948 -2041 0
542 950 -2043 0
542 952 -2045 0
542 954 -2047 0
542 956 -2049 0
542 958 -2051 0
542 960 -2053 0
543 -2039 0
543 947 -2041 0
543 948 -2043 0
543 950 -2045 0
543 952 -2047 0
543 954 -2049 0
543 956 -2051 0
543 958 -2053 0
543 960 -2055 0
545 -2041 0
545 947 -2043 0
545 948 -2045 0
545 950 -2047 0
545 952 -2049 0
545 954 -2051 0
545 956 -2053 0
545 958 -2055 0
545 960 -2057 0
547 -2043 0
547 947 -2045 0
547 948 -2047 0
547 950 -2049 0
547 952 -2051 0
547 954 -2053 0
547 956 -2055 0
547 958 -2057 0
547 960 -2059 0
549 -2045 0
549 947 -2047 0
549 948 -2049 0
549 950 -2051 0
549 952 -2053 0
549 954 -2055 0
549 956 -2057 0
549 958 -2059 0
549 960 -2061 0
551 -2047 0
551 947 -2049 0
551 948 -2051 0
551 950 -2053 0
551 952 -2055 0
551 954 -2057 0
551 956 -2059 0
551 958 -2061 0
551 960 -2063 0
553 -2049 0
553 947 -2051 0
553 948 -2053 0
553 950 -2055 0
553 952 -2057 0
553 954 -2059 0
553 956 -2061 0
553 958 -2063 0
553 960 -2065 0
555 -2051 0
555 947 -2053 0
555 948 -2055 0
555 950 -2057 0
555 952 -2059 0
555 954 -2061 0
555 956 -2063 0
555 958 -2065 0
555 960 -2067 0
c (0<=( - aux469 + shift(x_00005_00001, -1) + shift(x_00008_00001, -1)))
-960 2067 0
-958 2065 0
-956 2063 0
-954 2061 0
-952 2059 0
-950 2057 0
-948 2055 0
-947 2053 0
-555 2067 0
-555 -960 2065 0
-555 -958 2063 0
-555 -956 2061 0
-555 -954 2059 0
-555 -952 2057 0
-555 -950 2055 0
-555 -948 2053 0
-555 -947 2051 0
-553 2065 0
-553 -960 2063 0
-553 -958 2061 0
-553 -956 2059 0
-553 -954 2057 0
-553 -952 2055 0
-553 -950 2053 0
-553 -948 2051 0
-553 -947 2049 0
-551 2063 0
-551 -960 2061 0
-551 -958 2059 0
-551 -956 2057 0
-551 -954 2055 0
-551 -952 2053 0
-551 -950 2051 0
-551 -948 2049 0
-551 -947 2047 0
-549 2061 0
-549 -960 2059 0
-549 -958 2057 0
-549 -956 2055 0
-549 -954 2053 0
-549 -952 2051 0
-549 -950 2049 0
-549 -948 2047 0
-549 -947 2045 0
-547 2059 0
-547 -960 2057 0
-547 -958 2055 0
-547 -956 2053 0
-547 -954 2051 0
-547 -952 2049 0
-547 -950 2047 0
-547 -948 2045 0
-547 -947 2043 0
-545 2057 0
-545 -960 2055 0
-545 -958 2053 0
-545 -956 2051 0
-545 -954 2049 0
-545 -952 2047 0
-545 -950 2045 0
-545 -948 2043 0
-545 -947 2041 0
-543 2055 0
-543 -960 2053 0
-543 -958 2051 0
-543 -956 2049 0
-543 -954 2047 0
-543 -952 2045 0
-543 -950 2043 0
-543 -948 2041 0
-543 -947 2039 0
-542 2053 0
-542 -960 2051 0
-542 -958 2049 0
-542 -956 2047 0
-542 -954 2045 0
-542 -952 2043 0
-542 -950 2041 0
-542 -948 2039 0
-542 -947 2038 0
c (( - aux470 + shift(x_00004_00001, -1) + shift(x_00009_00001, -1))<=0)
1082 -2069 0
1083 -2070 0
1085 -2072 0
1087 -2074 0
1089 -2076 0
1091 -2078 0
1093 -2080 0
1095 -2082 0
407 -2069 0
407 1082 -2070 0
407 1083 -2072 0
407 1085 -2074 0
407 1087 -2076 0
407 1089 -2078 0
407 1091 -2080 0
407 1093 -2082 0
407 1095 -2084 0
408 -2070 0
408 1082 -2072 0
408 1083 -2074 0
408 1085 -2076 0
408 1087 -2078 0
408 1089 -2080 0
408 1091 -2082 0
408 1093 -2084 0
408 1095 -2086 0
410 -2072 0
410 1082 -2074 0
410 1083 -2076 0
410 1085 -2078 0
410 1087 -2080 0
410 1089 -2082 0
410 1091 -2084 0
410 1093 -2086 0
410 1095 -2088 0
412 -2074 0
412 1082 -2076 0
412 1083 -2078 0
412 1085 -2080 0
412 1087 -2082 0
412 1089 -2084 0
412 1091 -2086 0
412 1093 -2088 0
412 1095 -2090 0
414 -2076 0
414 1082 -2078 0
414 1083 -2080 0
414 1085 -2082 0
414 1087 -2084 0
414 1089 -2086 0
414 1091 -2088 0
414 1093 -2090 0
414 1095 -2092 0
416 -2078 0
416 1082 -2080 0
416 1083 -2082 0
416 1085 -2084 0
416 1087 -2086 0
416 1089 -2088 0
416 1091 -2090 0
416 1093 -2092 0
416 1095 -2094 0
418 -2080 0
418 1082 -2082 0
418 1083 -2084 0
418 1085 -2086 0
418 1087 -2088 0
418 1089 -2090 0
418 1091 -2092 0
418 1093 -2094 0
418 1095 -2096 0
420 -2082 0
420 1082 -2084 0
420 1083 -2086 0
420 1085 -2088 0
420 1087 -2090 0
420 1089 -2092 0
420 1091 -2094 0
420 1093 -2096 0
420 1095 -2098 0
c (0<=( - aux470 + shift(x_00004_00001, -1) + shift(x_00009_00001, -1)))
-1095 2098 0
-1093 2096 0
-1091 2094 0
-1089 2092 0
-1087 2090 0
-1085 2088 0
-1083 2086 0
-1082 2084 0
-420 2098 0
-420 -1095 2096 0
-420 -1093 2094 0
-420 -1091 2092 0
-420 -1089 2090 0
-420 -1087 2088 0
-420 -1085 2086 0
-420 -1083 2084 0
-420 -1082 2082 0
-418 2096 0
-418 -1095 2094 0
-418 -1093 2092 0
-418 -1091 2090 0
-418 -1089 2088 0
-418 -1087 2086 0
-418 -1085 2084 0
-418 -1083 2082 0
-418 -1082 2080 0
-416 2094 0
-416 -1095 2092 0
-416 -1093 2090 0
-416 -1091 2088 0
-416 -1089 2086 0
-416 -1087 2084 0
-416 -1085 2082 0
-416 -1083 2080 0
-416 -1082 2078 0
-414 2092 0
-414 -1095 2090 0
-414 -1093 2088 0
-414 -1091 2086 0
-414 -1089 2084 0
-414 -1087 2082 0
-414 -1085 2080 0
-414 -1083 2078 0
-414 -1082 2076 0
-412 2090 0
-412 -1095 2088 0
-412 -1093 2086 0
-412 -1091 2084 0
-412 -1089 2082 0
-412 -1087 2080 0
-412 -1085 2078 0
-412 -1083 2076 0
-412 -1082 2074 0
-410 2088 0
-410 -1095 2086 0
-410 -1093 2084 0
-410 -1091 2082 0
-410 -1089 2080 0
-410 -1087 2078 0
-410 -1085 2076 0
-410 -1083 2074 0
-410 -1082 2072 0
-408 2086 0
-408 -1095 2084 0
-408 -1093 2082 0
-408 -1091 2080 0
-408 -1089 2078 0
-408 -1087 2076 0
-408 -1085 2074 0
-408 -1083 2072 0
-408 -1082 2070 0
-407 2084 0
-407 -1095 2082 0
-407 -1093 2080 0
-407 -1091 2078 0
-407 -1089 2076 0
-407 -1087 2074 0
-407 -1085 2072 0
-407 -1083 2070 0
-407 -1082 2069 0
c ((aux470 - aux471 + shift(x_00003_00001, -1))<=0)
2069 -2100 0
2070 -2101 0
2072 -2103 0
2074 -2105 0
2076 -2107 0
2078 -2109 0
2080 -2111 0
2082 -2113 0
2084 -2115 0
2086 -2117 0
2088 -2119 0
2090 -2121 0
2092 -2123 0
2094 -2125 0
2096 -2127 0
2098 -2129 0
272 -2100 0
272 2069 -2101 0
272 2070 -2103 0
272 2072 -2105 0
272 2074 -2107 0
272 2076 -2109 0
272 2078 -2111 0
272 2080 -2113 0
272 2082 -2115 0
272 2084 -2117 0
272 2086 -2119 0
272 2088 -2121 0
272 2090 -2123 0
272 2092 -2125 0
272 2094 -2127 0
272 2096 -2129 0
272 2098 -2131 0
273 -2101 0
273 2069 -2103 0
273 2070 -2105 0
273 2072 -2107 0
273 2074 -2109 0
273 2076 -2111 0
273 2078 -2113 0
273 2080 -2115 0
273 2082 -2117 0
273 2084 -2119 0
273 2086 -2121 0
273 2088 -2123 0
273 2090 -2125 0
273 2092 -2127 0
273 2094 -2129 0
273 2096 -2131 0
273 2098 -2133 0
275 -2103 0
275 2069 -2105 0
275 2070 -2107 0
275 2072 -2109 0
275 2074 -2111 0
275 2076 -2113 0
275 2078 -2115 0
275 2080 -2117 0
275 2082 -2119 0
275 2084 -2121 0
275 2086 -2123 0
275 2088 -2125 0
275 2090 -2127 0
275 2092 -2129 0
275 2094 -2131 0
275 2096 -2133 0
275 2098 -2135 0
277 -2105 0
277 2069 -2107 0
277 2070 -2109 0
277 2072 -2111 0
277 2074 -2113 0
277 2076 -2115 0
277 2078 -2117 0
277 2080 -2119 0
277 2082 -2121 0
277 2084 -2123 0
277 2086 -2125 0
277 2088 -2127 0
277 2090 -2129 0
277 2092 -2131 0
277 2094 -2133 0
277 2096 -2135 0
277 2098 -2137 0
279 -2107 0
279 2069 -2109 0
279 2070 -2111 0
279 2072 -2113 0
279 2074 -2115 0
279 2076 -2117 0
279 2078 -2119 0
279 2080 -2121 0
279 2082 -2123 0
279 2084 -2125 0
279 2086 -2127 0
279 2088 -2129 0
279 2090 -2131 0
279 2092 -2133 0
279 2094 -2135 0
279 2096 -2137 0
279 2098 -2139 0
281 -2109 0
281 2069 -2111 0
281 2070 -2113 0
281 2072 -2115 0
281 2074 -2117 0
281 2076 -2119 0
281 2078 -2121 0
281 2080 -2123 0
281 2082 -2125 0
281 2084 -2127 0
281 2086 -2129 0
281 2088 -2131 0
281 2090 -2133 0
281 2092 -2135 0
281 2094 -2137 0
281 2096 -2139 0
281 2098 -2141 0
283 -2111 0
283 2069 -2113 0
283 2070 -2115 0
283 2072 -2117 0
283 2074 -2119 0
283 2076 -2121 0
283 2078 -2123 0
283 2080 -2125 0
283 2082 -2127 0
283 2084 -2129 0
283 2086 -2131 0
283 2088 -2133 0
283 2090 -2135 0
283 2092 -2137 0
283 2094 -2139 0
283 2096 -2141 0
283 2098 -2143 0
285 -2113 0
285 2069 -2115 0
285 2070 -2117 0
285 2072 -2119 0
285 2074 -2121 0
285 2076 -2123 0
285 2078 -2125 0
285 2080 -2127 0
285 2082 -2129 0
285 2084 -2131 0
285 2086 -2133 0
285 2088 -2135 0
285 2090 -2137 0
285 2092 -2139 0
285 2094 -2141 0
285 2096 -2143 0
285 2098 -2145 0
c (0<=(aux470 - aux471 + shift(x_00003_00001, -1)))
-2098 2145 0
-2096 2143 0
-2094 2141 0
-2092 2139 0
-2090 2137 0
-2088 2135 0
-2086 2133 0
-2084 2131 0
-2082 2129 0
-2080 2127 0
-2078 2125 0
-2076 2123 0
-2074 2121 0
-2072 2119 0
-2070 2117 0
-2069 2115 0
-285 2145 0
-285 -2098 2143 0
-285 -2096 2141 0
-285 -2094 2139 0
-285 -2092 2137 0
-285 -2090 2135 0
-285 -2088 2133 0
-285 -2086 2131 0
-285 -2084 2129 0
-285 -2082 2127 0
-285 -2080 2125 0
-285 -2078 2123 0
-285 -2076 2121 0
-285 -2074 2119 0
-285 -2072 2117 0
-285 -2070 2115 0
-285 -2069 2113 0
-283 2143 0
-283 -2098 2141 0
-283 -2096 2139 0
-283 -2094 2137 0
-283 -2092 2135 0
-283 -2090 2133 0
-283 -2088 2131 0
-283 -2086 2129 0
-283 -2084 2127 0
-283 -2082 2125 0
-283 -2080 2123 0
-283 -2078 2121 0
-283 -2076 2119 0
-283 -2074 2117 0
-283 -2072 2115 0
-283 -2070 2113 0
-283 -2069 2111 0
-281 2141 0
-281 -2098 2139 0
-281 -2096 2137 0
-281 -2094 2135 0
-281 -2092 2133 0
-281 -2090 2131 0
-281 -2088 2129 0
-281 -2086 2127 0
-281 -2084 2125 0
-281 -2082 2123 0
-281 -2080 2121 0
-281 -2078 2119 0
-281 -2076 2117 0
-281 -2074 2115 0
-281 -2072 2113 0
-281 -2070 2111 0
-281 -2069 2109 0
-279 2139 0
-279 -2098 2137 0
-279 -2096 2135 0
-279 -2094 2133 0
-279 -2092 2131 0
-279 -2090 2129 0
-279 -2088 2127 0
-279 -2086 2125 0
-279 -2084 2123 0
-279 -2082 2121 0
-279 -2080 2119 0
-279 -2078 2117 0
-279 -2076 2115 0
-279 -2074 2113 0
-279 -2072 2111 0
-279 -2070 2109 0
-279 -2069 2107 0
-277 2137 0
-277 -2098 2135 0
-277 -2096 2133 0
-277 -2094 2131 0
-277 -2092 2129 0
-277 -2090 2127 0
-277 -2088 2125 0
-277 -2086 2123 0
-277 -2084 2121 0
-277 -2082 2119 0
-277 -2080 2117 0
-277 -2078 2115 0
-277 -2076 2113 0
-277 -2074 2111 0
-277 -2072 2109 0
-277 -2070 2107 0
-277 -2069 2105 0
-275 2135 0
-275 -2098 2133 0
-275 -2096 2131 0
-275 -2094 2129 0
-275 -2092 2127 0
-275 -2090 2125 0
-275 -2088 2123 0
-275 -2086 2121 0
-275 -2084 2119 0
-275 -2082 2117 0
-275 -2080 2115 0
-275 -2078 2113 0
-275 -2076 2111 0
-275 -2074 2109 0
-275 -2072 2107 0
-275 -2070 2105 0
-275 -2069 2103 0
-273 2133 0
-273 -2098 2131 0
-273 -2096 2129 0
-273 -2094 2127 0
-273 -2092 2125 0
-273 -2090 2123 0
-273 -2088 2121 0
-273 -2086 2119 0
-273 -2084 2117 0
-273 -2082 2115 0
-273 -2080 2113 0
-273 -2078 2111 0
-273 -2076 2109 0
-273 -2074 2107 0
-273 -2072 2105 0
-273 -2070 2103 0
-273 -2069 2101 0
-272 2131 0
-272 -2098 2129 0
-272 -2096 2127 0
-272 -2094 2125 0
-272 -2092 2123 0
-272 -2090 2121 0
-272 -2088 2119 0
-272 -2086 2117 0
-272 -2084 2115 0
-272 -2082 2113 0
-272 -2080 2111 0
-272 -2078 2109 0
-272 -2076 2107 0
-272 -2074 2105 0
-272 -2072 2103 0
-272 -2070 2101 0
-272 -2069 2100 0
c ((aux467 + aux469 - aux472)<=0)
2038 -2147 0
2039 -2148 0
2041 -2150 0
2043 -2152 0
2045 -2154 0
2047 -2156 0
2049 -2158 0
2051 -2160 0
2053 -2162 0
2055 -2164 0
2057 -2166 0
2059 -2168 0
2061 -2170 0
2063 -2172 0
2065 -2174 0
2067 -2176 0
1976 -2147 0
1976 2038 -2148 0
1976 2039 -2150 0
1976 2041 -2152 0
1976 2043 -2154 0
1976 2045 -2156 0
1976 2047 -2158 0
1976 2049 -2160 0
1976 2051 -2162 0
1976 2053 -2164 0
1976 2055 -2166 0
1976 2057 -2168 0
1976 2059 -2170 0
1976 2061 -2172 0
1976 2063 -2174 0
1976 2065 -2176 0
1976 2067 -2178 0
1977 -2148 0
1977 2038 -2150 0
1977 2039 -2152 0
1977 2041 -2154 0
1977 2043 -2156 0
1977 2045 -2158 0
1977 2047 -2160 0
1977 2049 -2162 0
1977 2051 -2164 0
1977 2053 -2166 0
1977 2055 -2168 0
1977 2057 -2170 0
1977 2059 -2172 0
1977 2061 -2174 0
1977 2063 -2176 0
1977 2065 -2178 0
1977 2067 -2180 0
1979 -2150 0
1979 2038 -2152 0
1979 2039 -2154 0
1979 2041 -2156 0
1979 2043 -2158 0
1979 2045 -2160 0
1979 2047 -2162 0
1979 2049 -2164 0
1979 2051 -2166 0
1979 2053 -2168 0
1979 2055 -2170 0
1979 2057 -2172 0
1979 2059 -2174 0
1979 2061 -2176 0
1979 2063 -2178 0
1979 2065 -2180 0
1979 2067 -2182 0
1981 -2152 0
1981 2038 -2154 0
1981 2039 -2156 0
1981 2041 -2158 0
1981 2043 -2160 0
1981 2045 -2162 0
1981 2047 -2164 0
1981 2049 -2166 0
1981 2051 -2168 0
1981 2053 -2170 0
1981 2055 -2172 0
1981 2057 -2174 0
1981 2059 -2176 0
1981 2061 -2178 0
1981 2063 -2180 0
1981 2065 -2182 0
1981 2067 -2184 0
1983 -2154 0
1983 2038 -2156 0
1983 2039 -2158 0
1983 2041 -2160 0
1983 2043 -2162 0
1983 2045 -2164 0
1983 2047 -2166 0
1983 2049 -2168 0
1983 2051 -2170 0
1983 2053 -2172 0
1983 2055 -2174 0
1983 2057 -2176 0
1983 2059 -2178 0
1983 2061 -2180 0
1983 2063 -2182 0
1983 2065 -2184 0
1983 2067 -2186 0
1985 -2156 0
1985 2038 -2158 0
1985 2039 -2160 0
1985 2041 -2162 0
1985 2043 -2164 0
1985 2045 -2166 0
1985 2047 -2168 0
1985 2049 -2170 0
1985 2051 -2172 0
1985 2053 -2174 0
1985 2055 -2176 0
1985 2057 -2178 0
1985 2059 -2180 0
1985 2061 -2182 0
1985 2063 -2184 0
1985 2065 -2186 0
1985 2067 -2188 0
1987 -2158 0
1987 2038 -2160 0
1987 2039 -2162 0
1987 2041 -2164 0
1987 2043 -2166 0
1987 2045 -2168 0
1987 2047 -2170 0
1987 2049 -2172 0
1987 2051 -2174 0
1987 2053 -2176 0
1987 2055 -2178 0
1987 2057 -2180 0
1987 2059 -2182 0
1987 2061 -2184 0
1987 2063 -2186 0
1987 2065 -2188 0
1987 2067 -2190 0
1989 -2160 0
1989 2038 -2162 0
1989 2039 -2164 0
1989 2041 -2166 0
1989 2043 -2168 0
1989 2045 -2170 0
1989 2047 -2172 0
1989 2049 -2174 0
1989 2051 -2176 0
1989 2053 -2178 0
1989 2055 -2180 0
1989 2057 -2182 0
1989 2059 -2184 0
1989 2061 -2186 0
1989 2063 -2188 0
1989 2065 -2190 0
1989 2067 -2192 0
1991 -2162 0
1991 2038 -2164 0
1991 2039 -2166 0
1991 2041 -2168 0
1991 2043 -2170 0
1991 2045 -2172 0
1991 2047 -2174 0
1991 2049 -2176 0
1991 2051 -2178 0
1991 2053 -2180 0
1991 2055 -2182 0
1991 2057 -2184 0
1991 2059 -2186 0
1991 2061 -2188 0
1991 2063 -2190 0
1991 2065 -2192 0
1991 2067 -2194 0
1993 -2164 0
1993 2038 -2166 0
1993 2039 -2168 0
1993 2041 -2170 0
1993 2043 -2172 0
1993 2045 -2174 0
1993 2047 -2176 0
1993 2049 -2178 0
1993 2051 -2180 0
1993 2053 -2182 0
1993 2055 -2184 0
1993 2057 -2186 0
1993 2059 -2188 0
1993 2061 -2190 0
1993 2063 -2192 0
1993 2065 -2194 0
1993 2067 -2196 0
1995 -2166 0
1995 2038 -2168 0
1995 2039 -2170 0
1995 2041 -2172 0
1995 2043 -2174 0
1995 2045 -2176 0
1995 2047 -2178 0
1995 2049 -2180 0
1995 2051 -2182 0
1995 2053 -2184 0
1995 2055 -2186 0
1995 2057 -2188 0
1995 2059 -2190 0
1995 2061 -2192 0
1995 2063 -2194 0
1995 2065 -2196 0
1995 2067 -2198 0
1997 -2168 0
1997 2038 -2170 0
1997 2039 -2172 0
1997 2041 -2174 0
1997 2043 -2176 0
1997 2045 -2178 0
1997 2047 -2180 0
1997 2049 -2182 0
1997 2051 -2184 0
1997 2053 -2186 0
1997 2055 -2188 0
1997 2057 -2190 0
1997 2059 -2192 0
1997 2061 -2194 0
1997 2063 -2196 0
1997 2065 -2198 0
1997 2067 -2200 0
1999 -2170 0
1999 2038 -2172 0
1999 2039 -2174 0
1999 2041 -2176 0
1999 2043 -2178 0
1999 2045 -2180 0
1999 2047 -2182 0
1999 2049 -2184 0
1999 2051 -2186 0
1999 2053 -2188 0
1999 2055 -2190 0
1999 2057 -2192 0
1999 2059 -2194 0
1999 2061 -2196 0
1999 2063 -2198 0
1999 2065 -2200 0
1999 2067 -2202 0
2001 -2172 0
2001 2038 -2174 0
2001 2039 -2176 0
2001 2041 -2178 0
2001 2043 -2180 0
2001 2045 -2182 0
2001 2047 -2184 0
2001 2049 -2186 0
2001 2051 -2188 0
2001 2053 -2190 0
2001 2055 -2192 0
2001 2057 -2194 0
2001 2059 -2196 0
2001 2061 -2198 0
2001 2063 -2200 0
2001 2065 -2202 0
2001 2067 -2204 0
2003 -2174 0
2003 2038 -2176 0
2003 2039 -2178 0
2003 2041 -2180 0
2003 2043 -2182 0
2003 2045 -2184 0
2003 2047 -2186 0
2003 2049 -2188 0
2003 2051 -2190 0
2003 2053 -2192 0
2003 2055 -2194 0
2003 2057 -2196 0
2003 2059 -2198 0
2003 2061 -2200 0
2003 2063 -2202 0
2003 2065 -2204 0
2003 2067 -2206 0
2005 -2176 0
2005 2038 -2178 0
2005 2039 -2180 0
2005 2041 -2182 0
2005 2043 -2184 0
2005 2045 -2186 0
2005 2047 -2188 0
2005 2049 -2190 0
2005 2051 -2192 0
2005 2053 -2194 0
2005 2055 -2196 0
2005 2057 -2198 0
2005 2059 -2200 0
2005 2061 -2202 0
2005 2063 -2204 0
2005 2065 -2206 0
2005 2067 -2208 0
c (0<=(aux467 + aux469 - aux472))
-2067 2208 0
-2065 2206 0
-2063 2204 0
-2061 2202 0
-2059 2200 0
-2057 2198 0
-2055 2196 0
-2053 2194 0
-2051 2192 0
-2049 2190 0
-2047 2188 0
-2045 2186 0
-2043 2184 0
-2041 2182 0
-2039 2180 0
-2038 2178 0
-2005 2208 0
-2005 -2067 2206 0
-2005 -2065 2204 0
-2005 -2063 2202 0
-2005 -2061 2200 0
-2005 -2059 2198 0
-2005 -2057 2196 0
-2005 -2055 2194 0
-2005 -2053 2192 0
-2005 -2051 2190 0
-2005 -2049 2188 0
-2005 -2047 2186 0
-2005 -2045 2184 0
-2005 -2043 2182 0
-2005 -2041 2180 0
-2005 -2039 2178 0
-2005 -2038 2176 0
-2003 2206 0
-2003 -2067 2204 0
-2003 -2065 2202 0
-2003 -2063 2200 0
-2003 -2061 2198 0
-2003 -2059 2196 0
-2003 -2057 2194 0
-2003 -2055 2192 0
-2003 -2053 2190 0
-2003 -2051 2188 0
-2003 -2049 2186 0
-2003 -2047 2184 0
-2003 -2045 2182 0
-2003 -2043 2180 0
-2003 -2041 2178 0
-2003 -2039 2176 0
-2003 -2038 2174 0
-2001 2204 0
-2001 -2067 2202 0
-2001 -2065 2200 0
-2001 -2063 2198 0
-2001 -2061 2196 0
-2001 -2059 2194 0
-2001 -2057 2192 0
-2001 -2055 2190 0
-2001 -2053 2188 0
-2001 -2051 2186 0
-2001 -2049 2184 0
-2001 -2047 2182 0
-2001 -2045 2180 0
-2001 -2043 2178 0
-2001 -2041 2176 0
-2001 -2039 2174 0
-2001 -2038 2172 0
-1999 2202 0
-1999 -2067 2200 0
-1999 -2065 2198 0
-1999 -2063 2196 0
-1999 -2061 2194 0
-1999 -2059 2192 0
-1999 -2057 2190 0
-1999 -2055 2188 0
-1999 -2053 2186 0
-1999 -2051 2184 0
-1999 -2049 2182 0
-1999 -2047 2180 0
-1999 -2045 2178 0
-1999 -2043 2176 0
-1999 -2041 2174 0
-1999 -2039 2172 0
-1999 -2038 2170 0
-1997 2200 0
-1997 -2067 2198 0
-1997 -2065 2196 0
-1997 -2063 2194 0
-1997 -2061 2192 0
-1997 -2059 2190 0
-1997 -2057 2188 0
-1997 -2055 2186 0
-1997 -2053 2184 0
-1997 -2051 2182 0
-1997 -2049 2180 0
-1997 -2047 2178 0
-1997 -2045 2176 0
-1997 -2043 2174 0
-1997 -2041 2172 0
-1997 -2039 2170 0
-1997 -2038 2168 0
-1995 2198 0
-1995 -2067 2196 0
-1995 -2065 2194 0
-1995 -2063 2192 0
-1995 -2061 2190 0
-1995 -2059 2188 0
-1995 -2057 2186 0
-1995 -2055 2184 0
-1995 -2053 2182 0
-1995 -2051 2180 0
-1995 -2049 2178 0
-1995 -2047 2176 0
-1995 -2045 2174 0
-1995 -2043 2172 0
-1995 -2041 2170 0
-1995 -2039 2168 0
-1995 -2038 2166 0
-1993 2196 0
-1993 -2067 2194 0
-1993 -2065 2192 0
-1993 -2063 2190 0
-1993 -2061 2188 0
-1993 -2059 2186 0
-1993 -2057 2184 0
-1993 -2055 2182 0
-1993 -2053 2180 0
-1993 -2051 2178 0
-1993 -2049 2176 0
-1993 -2047 2174 0
-1993 -2045 2172 0
-1993 -2043 2170 0
-1993 -2041 2168 0
-1993 -2039 2166 0
-1993 -2038 2164 0
-1991 2194 0
-1991 -2067 2192 0
-1991 -2065 2190 0
-1991 -2063 2188 0
-1991 -2061 2186 0
-1991 -2059 2184 0
-1991 -2057 2182 0
-1991 -2055 2180 0
-1991 -2053 2178 0
-1991 -2051 2176 0
-1991 -2049 2174 0
-1991 -2047 2172 0
-1991 -2045 2170 0
-1991 -2043 2168 0
-1991 -2041 2166 0
-1991 -2039 2164 0
-1991 -2038 2162 0
-1989 2192 0
-1989 -2067 2190 0
-1989 -2065 2188 0
-1989 -2063 2186 0
-1989 -2061 2184 0
-1989 -2059 2182 0
-1989 -2057 2180 0
-1989 -2055 2178 0
-1989 -2053 2176 0
-1989 -2051 2174 0
-1989 -2049 2172 0
-1989 -2047 2170 0
-1989 -2045 2168 0
-1989 -2043 2166 0
-1989 -2041 2164 0
-1989 -2039 2162 0
-1989 -2038 2160 0
-1987 2190 0
-1987 -2067 2188 0
-1987 -2065 2186 0
-1987 -2063 2184 0
-1987 -2061 2182 0
-1987 -2059 2180 0
-1987 -2057 2178 0
-1987 -2055 2176 0
-1987 -2053 2174 0
-1987 -2051 2172 0
-1987 -2049 2170 0
-1987 -2047 2168 0
-1987 -2045 2166 0
-1987 -2043 2164 0
-1987 -2041 2162 0
-1987 -2039 2160 0
-1987 -2038 2158 0
-1985 2188 0
-1985 -2067 2186 0
-1985 -2065 2184 0
-1985 -2063 2182 0
-1985 -2061 2180 0
-1985 -2059 2178 0
-1985 -2057 2176 0
-1985 -2055 2174 0
-1985 -2053 2172 0
-1985 -2051 2170 0
-1985 -2049 2168 0
-1985 -2047 2166 0
-1985 -2045 2164 0
-1985 -2043 2162 0
-1985 -2041 2160 0
-1985 -2039 2158 0
-1985 -2038 2156 0
-1983 2186 0
-1983 -2067 2184 0
-1983 -2065 2182 0
-1983 -2063 2180 0
-1983 -2061 2178 0
-1983 -2059 2176 0
-1983 -2057 2174 0
-1983 -2055 2172 0
-1983 -2053 2170 0
-1983 -2051 2168 0
-1983 -2049 2166 0
-1983 -2047 2164 0
-1983 -2045 2162 0
-1983 -2043 2160 0
-1983 -2041 2158 0
-1983 -2039 2156 0
-1983 -2038 2154 0
-1981 2184 0
-1981 -2067 2182 0
-1981 -2065 2180 0
-1981 -2063 2178 0
-1981 -2061 2176 0
-1981 -2059 2174 0
-1981 -2057 2172 0
-1981 -2055 2170 0
-1981 -2053 2168 0
-1981 -2051 2166 0
-1981 -2049 2164 0
-1981 -2047 2162 0
-1981 -2045 2160 0
-1981 -2043 2158 0
-1981 -2041 2156 0
-1981 -2039 2154 0
-1981 -2038 2152 0
-1979 2182 0
-1979 -2067 2180 0
-1979 -2065 2178 0
-1979 -2063 2176 0
-1979 -2061 2174 0
-1979 -2059 2172 0
-1979 -2057 2170 0
-1979 -2055 2168 0
-1979 -2053 2166 0
-1979 -2051 2164 0
-1979 -2049 2162 0
-1979 -2047 2160 0
-1979 -2045 2158 0
-1979 -2043 2156 0
-1979 -2041 2154 0
-1979 -2039 2152 0
-1979 -2038 2150 0
-1977 2180 0
-1977 -2067 2178 0
-1977 -2065 2176 0
-1977 -2063 2174 0
-1977 -2061 2172 0
-1977 -2059 2170 0
-1977 -2057 2168 0
-1977 -2055 2166 0
-1977 -2053 2164 0
-1977 -2051 2162 0
-1977 -2049 2160 0
-1977 -2047 2158 0
-1977 -2045 2156 0
-1977 -2043 2154 0
-1977 -2041 2152 0
-1977 -2039 2150 0
-1977 -2038 2148 0
-1976 2178 0
-1976 -2067 2176 0
-1976 -2065 2174 0
-1976 -2063 2172 0
-1976 -2061 2170 0
-1976 -2059 2168 0
-1976 -2057 2166 0
-1976 -2055 2164 0
-1976 -2053 2162 0
-1976 -2051 2160 0
-1976 -2049 2158 0
-1976 -2047 2156 0
-1976 -2045 2154 0
-1976 -2043 2152 0
-1976 -2041 2150 0
-1976 -2039 2148 0
-1976 -2038 2147 0
c (( - aux473 + shift(x_00006_00002, -1) + shift(x_00002_00002, -1))<=0)
152 -2210 0
153 -2211 0
155 -2213 0
157 -2215 0
159 -2217 0
161 -2219 0
163 -2221 0
165 -2223 0
692 -2210 0
692 152 -2211 0
692 153 -2213 0
692 155 -2215 0
692 157 -2217 0
692 159 -2219 0
692 161 -2221 0
692 163 -2223 0
692 165 -2225 0
693 -2211 0
693 152 -2213 0
693 153 -2215 0
693 155 -2217 0
693 157 -2219 0
693 159 -2221 0
693 161 -2223 0
693 163 -2225 0
693 165 -2227 0
695 -2213 0
695 152 -2215 0
695 153 -2217 0
695 155 -2219 0
695 157 -2221 0
695 159 -2223 0
695 161 -2225 0
695 163 -2227 0
695 165 -2229 0
697 -2215 0
697 152 -2217 0
697 153 -2219 0
697 155 -2221 0
697 157 -2223 0
697 159 -2225 0
697 161 -2227 0
697 163 -2229 0
697 165 -2231 0
699 -2217 0
699 152 -2219 0
699 153 -2221 0
699 155 -2223 0
699 157 -2225 0
699 159 -2227 0
699 161 -2229 0
699 163 -2231 0
699 165 -2233 0
701 -2219 0
701 152 -2221 0
701 153 -2223 0
701 155 -2225 0
701 157 -2227 0
701 159 -2229 0
701 161 -2231 0
701 163 -2233 0
701 165 -2235 0
703 -2221 0
703 152 -2223 0
703 153 -2225 0
703 155 -2227 0
703 157 -2229 0
703 159 -2231 0
703 161 -2233 0
703 163 -2235 0
703 165 -2237 0
705 -2223 0
705 152 -2225 0
705 153 -2227 0
705 155 -2229 0
705 157 -2231 0
705 159 -2233 0
705 161 -2235 0
705 163 -2237 0
705 165 -2239 0
c (0<=( - aux473 + shift(x_00006_00002, -1) + shift(x_00002_00002, -1)))
-165 2239 0
-163 2237 0
-161 2235 0
-159 2233 0
-157 2231 0
-155 2229 0
-153 2227 0
-152 2225 0
-705 2239 0
-705 -165 2237 0
-705 -163 2235 0
-705 -161 2233 0
-705 -159 2231 0
-705 -157 2229 0
-705 -155 2227 0
-705 -153 2225 0
-705 -152 2223 0
-703 2237 0
-703 -165 2235 0
-703 -163 2233 0
-703 -161 2231 0
-703 -159 2229 0
-703 -157 2227 0
-703 -155 2225 0
-703 -153 2223 0
-703 -152 2221 0
-701 2235 0
-701 -165 2233 0
-701 -163 2231 0
-701 -161 2229 0
-701 -159 2227 0
-701 -157 2225 0
-701 -155 2223 0
-701 -153 2221 0
-701 -152 2219 0
-699 2233 0
-699 -165 2231 0
-699 -163 2229 0
-699 -161 2227 0
-699 -159 2225 0
-699 -157 2223 0
-699 -155 2221 0
-699 -153 2219 0
-699 -152 2217 0
-697 2231 0
-697 -165 2229 0
-697 -163 2227 0
-697 -161 2225 0
-697 -159 2223 0
-697 -157 2221 0
-697 -155 2219 0
-697 -153 2217 0
-697 -152 2215 0
-695 2229 0
-695 -165 2227 0
-695 -163 2225 0
-695 -161 2223 0
-695 -159 2221 0
-695 -157 2219 0
-695 -155 2217 0
-695 -153 2215 0
-695 -152 2213 0
-693 2227 0
-693 -165 2225 0
-693 -163 2223 0
-693 -161 2221 0
-693 -159 2219 0
-693 -157 2217 0
-693 -155 2215 0
-693 -153 2213 0
-693 -152 2211 0
-692 2225 0
-692 -165 2223 0
-692 -163 2221 0
-692 -161 2219 0
-692 -159 2217 0
-692 -157 2215 0
-692 -155 2213 0
-692 -153 2211 0
-692 -152 2210 0
c ((shift(x_00007_00002, -1) - aux474 + shift(x_00001_00002, -1))<=0)
17 -2241 0
18 -2242 0
20 -2244 0
22 -2246 0
24 -2248 0
26 -2250 0
28 -2252 0
30 -2254 0
827 -2241 0
827 17 -2242 0
827 18 -2244 0
827 20 -2246 0
827 22 -2248 0
827 24 -2250 0
827 26 -2252 0
827 28 -2254 0
827 30 -2256 0
828 -2242 0
828 17 -2244 0
828 18 -2246 0
828 20 -2248 0
828 22 -2250 0
828 24 -2252 0
828 26 -2254 0
828 28 -2256 0
828 30 -2258 0
830 -2244 0
830 17 -2246 0
830 18 -2248 0
830 20 -2250 0
830 22 -2252 0
830 24 -2254 0
830 26 -2256 0
830 28 -2258 0
830 30 -2260 0
832 -2246 0
832 17 -2248 0
832 18 -2250 0
832 20 -2252 0
832 22 -2254 0
832 24 -2256 0
832 26 -2258 0
832 28 -2260 0
832 30 -2262 0
834 -2248 0
834 17 -2250 0
834 18 -2252 0
834 20 -2254 0
834 22 -2256 0
834 24 -2258 0
834 26 -2260 0
834 28 -2262 0
834 30 -2264 0
836 -2250 0
836 17 -2252 0
836 18 -2254 0
836 20 -2256 0
836 22 -2258 0
836 24 -2260 0
836 26 -2262 0
836 28 -2264 0
836 30 -2266 0
838 -2252 0
838 17 -2254 0
838 18 -2256 0
838 20 -2258 0
838 22 -2260 0
838 24 -2262 0
838 26 -2264 0
838 28 -2266 0
838 30 -2268 0
840 -2254 0
840 17 -2256 0
840 18 -2258 0
840 20 -2260 0
840 22 -2262 0
840 24 -2264 0
840 26 -2266 0
840 28 -2268 0
840 30 -2270 0
c (0<=(shift(x_00007_00002, -1) - aux474 + shift(x_00001_00002, -1)))
-30 2270 0
-28 2268 0
-26 2266 0
-24 2264 0
-22 2262 0
-20 2260 0
-18 2258 0
-17 2256 0
-840 2270 0
-840 -30 2268 0
-840 -28 2266 0
-840 -26 2264 0
-840 -24 2262 0
-840 -22 2260 0
-840 -20 2258 0
-840 -18 2256 0
-840 -17 2254 0
-838 2268 0
-838 -30 2266 0
-838 -28 2264 0
-838 -26 2262 0
-838 -24 2260 0
-838 -22 2258 0
-838 -20 2256 0
-838 -18 2254 0
-838 -17 2252 0
-836 2266 0
-836 -30 2264 0
-836 -28 2262 0
-836 -26 2260 0
-836 -24 2258 0
-836 -22 2256 0
-836 -20 2254 0
-836 -18 2252 0
-836 -17 2250 0
-834 2264 0
-834 -30 2262 0
-834 -28 2260 0
-834 -26 2258 0
-834 -24 2256 0
-834 -22 2254 0
-834 -20 2252 0
-834 -18 2250 0
-834 -17 2248 0
-832 2262 0
-832 -30 2260 0
-832 -28 2258 0
-832 -26 2256 0
-832 -24 2254 0
-832 -22 2252 0
-832 -20 2250 0
-832 -18 2248 0
-832 -17 2246 0
-830 2260 0
-830 -30 2258 0
-830 -28 2256 0
-830 -26 2254 0
-830 -24 2252 0
-830 -22 2250 0
-830 -20 2248 0
-830 -18 2246 0
-830 -17 2244 0
-828 2258 0
-828 -30 2256 0
-828 -28 2254 0
-828 -26 2252 0
-828 -24 2250 0
-828 -22 2248 0
-828 -20 2246 0
-828 -18 2244 0
-828 -17 2242 0
-827 2256 0
-827 -30 2254 0
-827 -28 2252 0
-827 -26 2250 0
-827 -24 2248 0
-827 -22 2246 0
-827 -20 2244 0
-827 -18 2242 0
-827 -17 2241 0
c (( - aux475 + shift(x_00005_00002, -1) + shift(x_00008_00002, -1))<=0)
962 -2272 0
963 -2273 0
965 -2275 0
967 -2277 0
969 -2279 0
971 -2281 0
973 -2283 0
975 -2285 0
557 -2272 0
557 962 -2273 0
557 963 -2275 0
557 965 -2277 0
557 967 -2279 0
557 969 -2281 0
557 971 -2283 0
557 973 -2285 0
557 975 -2287 0
558 -2273 0
558 962 -2275 0
558 963 -2277 0
558 965 -2279 0
558 967 -2281 0
558 969 -2283 0
558 971 -2285 0
558 973 -2287 0
558 975 -2289 0
560 -2275 0
560 962 -2277 0
560 963 -2279 0
560 965 -2281 0
560 967 -2283 0
560 969 -2285 0
560 971 -2287 0
560 973 -2289 0
560 975 -2291 0
562 -2277 0
562 962 -2279 0
562 963 -2281 0
562 965 -2283 0
562 967 -2285 0
562 969 -2287 0
562 971 -2289 0
562 973 -2291 0
562 975 -2293 0
564 -2279 0
564 962 -2281 0
564 963 -2283 0
564 965 -2285 0
564 967 -2287 0
564 969 -2289 0
564 971 -2291 0
564 973 -2293 0
564 975 -2295 0
566 -2281 0
566 962 -2283 0
566 963 -2285 0
566 965 -2287 0
566 967 -2289 0
566 969 -2291 0
566 971 -2293 0
566 973 -2295 0
566 975 -2297 0
568 -2283 0
568 962 -2285 0
568 963 -2287 0
568 965 -2289 0
568 967 -2291 0
568 969 -2293 0
568 971 -2295 0
568 973 -2297 0
568 975 -2299 0
570 -2285 0
570 962 -2287 0
570 963 -2289 0
570 965 -2291 0
570 967 -2293 0
570 969 -2295 0
570 971 -2297 0
570 973 -2299 0
570 975 -2301 0
c (0<=( - aux475 + shift(x_00005_00002, -1) + shift(x_00008_00002, -1)))
-975 2301 0
-973 2299 0
-971 2297 0
-969 2295 0
-967 2293 0
-965 2291 0
-963 2289 0
-962 2287 0
-570 2301 0
-570 -975 2299 0
-570 -973 2297 0
-570 -971 2295 0
-570 -969 2293 0
-570 -967 2291 0
-570 -965 2289 0
-570 -963 2287 0
-570 -962 2285 0
-568 2299 0
-568 -975 2297 0
-568 -973 2295 0
-568 -971 2293 0
-568 -969 2291 0
-568 -967 2289 0
-568 -965 2287 0
-568 -963 2285 0
-568 -962 2283 0
-566 2297 0
-566 -975 2295 0
-566 -973 2293 0
-566 -971 2291 0
-566 -969 2289 0
-566 -967 2287 0
-566 -965 2285 0
-566 -963 2283 0
-566 -962 2281 0
-564 2295 0
-564 -975 2293 0
-564 -973 2291 0
-564 -971 2289 0
-564 -969 2287 0
-564 -967 2285 0
-564 -965 2283 0
-564 -963 2281 0
-564 -962 2279 0
-562 2293 0
-562 -975 2291 0
-562 -973 2289 0
-562 -971 2287 0
-562 -969 2285 0
-562 -967 2283 0
-562 -965 2281 0
-562 -963 2279 0
-562 -962 2277 0
-560 2291 0
-560 -975 2289 0
-560 -973 2287 0
-560 -971 2285 0
-560 -969 2283 0
-560 -967 2281 0
-560 -965 2279 0
-560 -963 2277 0
-560 -962 2275 0
-558 2289 0
-558 -975 2287 0
-558 -973 2285 0
-558 -971 2283 0
-558 -969 2281 0
-558 -967 2279 0
-558 -965 2277 0
-558 -963 2275 0
-558 -962 2273 0
-557 2287 0
-557 -975 2285 0
-557 -973 2283 0
-557 -971 2281 0
-557 -969 2279 0
-557 -967 2277 0
-557 -965 2275 0
-557 -963 2273 0
-557 -962 2272 0
c (( - aux476 + shift(x_00004_00002, -1) + shift(x_00009_00002, -1))<=0)
1097 -2303 0
1098 -2304 0
1100 -2306 0
1102 -2308 0
1104 -2310 0
1106 -2312 0
1108 -2314 0
1110 -2316 0
422 -2303 0
422 1097 -2304 0
422 1098 -2306 0
422 1100 -2308 0
422 1102 -2310 0
422 1104 -2312 0
422 1106 -2314 0
422 1108 -2316 0
422 1110 -2318 0
423 -2304 0
423 1097 -2306 0
423 1098 -2308 0
423 1100 -2310 0
423 1102 -2312 0
423 1104 -2314 0
423 1106 -2316 0
423 1108 -2318 0
423 1110 -2320 0
425 -2306 0
425 1097 -2308 0
425 1098 -2310 0
425 1100 -2312 0
425 1102 -2314 0
425 1104 -2316 0
425 1106 -2318 0
425 1108 -2320 0
425 1110 -2322 0
427 -2308 0
427 1097 -2310 0
427 1098 -2312 0
427 1100 -2314 0
427 1102 -2316 0
427 1104 -2318 0
427 1106 -2320 0
427 1108 -2322 0
427 1110 -2324 0
429 -2310 0
429 1097 -2312 0
429 1098 -2314 0
429 1100 -2316 0
429 1102 -2318 0
429 1104 -2320 0
429 1106 -2322 0
429 1108 -2324 0
429 1110 -2326 0
431 -2312 0
431 1097 -2314 0
431 1098 -2316 0
431 1100 -2318 0
431 1102 -2320 0
431 1104 -2322 0
431 1106 -2324 0
431 1108 -2326 0
431 1110 -2328 0
433 -2314 0
433 1097 -2316 0
433 1098 -2318 0
433 1100 -2320 0
433 1102 -2322 0
433 1104 -2324 0
433 1106 -2326 0
433 1108 -2328 0
433 1110 -2330 0
435 -2316 0
435 1097 -2318 0
435 1098 -2320 0
435 1100 -2322 0
435 1102 -2324 0
435 1104 -2326 0
435 1106 -2328 0
435 1108 -2330 0
435 1110 -2332 0
c (0<=( - aux476 + shift(x_00004_00002, -1) + shift(x_00009_00002, -1)))
-1110 2332 0
-1108 2330 0
-1106 2328 0
-1104 2326 0
-1102 2324 0
-1100 2322 0
-1098 2320 0
-1097 2318 0
-435 2332 0
-435 -1110 2330 0
-435 -1108 2328 0
-435 -1106 2326 0
-435 -1104 2324 0
-435 -1102 2322 0
-435 -1100 2320 0
-435 -1098 2318 0
-435 -1097 2316 0
-433 2330 0
-433 -1110 2328 0
-433 -1108 2326 0
-433 -1106 2324 0
-433 -1104 2322 0
-433 -1102 2320 0
-433 -1100 2318 0
-433 -1098 2316 0
-433 -1097 2314 0
-431 2328 0
-431 -1110 2326 0
-431 -1108 2324 0
-431 -1106 2322 0
-431 -1104 2320 0
-431 -1102 2318 0
-431 -1100 2316 0
-431 -1098 2314 0
-431 -1097 2312 0
-429 2326 0
-429 -1110 2324 0
-429 -1108 2322 0
-429 -1106 2320 0
-429 -1104 2318 0
-429 -1102 2316 0
-429 -1100 2314 0
-429 -1098 2312 0
-429 -1097 2310 0
-427 2324 0
-427 -1110 2322 0
-427 -1108 2320 0
-427 -1106 2318 0
-427 -1104 2316 0
-427 -1102 2314 0
-427 -1100 2312 0
-427 -1098 2310 0
-427 -1097 2308 0
-425 2322 0
-425 -1110 2320 0
-425 -1108 2318 0
-425 -1106 2316 0
-425 -1104 2314 0
-425 -1102 2312 0
-425 -1100 2310 0
-425 -1098 2308 0
-425 -1097 2306 0
-423 2320 0
-423 -1110 2318 0
-423 -1108 2316 0
-423 -1106 2314 0
-423 -1104 2312 0
-423 -1102 2310 0
-423 -1100 2308 0
-423 -1098 2306 0
-423 -1097 2304 0
-422 2318 0
-422 -1110 2316 0
-422 -1108 2314 0
-422 -1106 2312 0
-422 -1104 2310 0
-422 -1102 2308 0
-422 -1100 2306 0
-422 -1098 2304 0
-422 -1097 2303 0
c ((aux476 - aux477 + shift(x_00003_00002, -1))<=0)
2303 -2334 0
2304 -2335 0
2306 -2337 0
2308 -2339 0
2310 -2341 0
2312 -2343 0
2314 -2345 0
2316 -2347 0
2318 -2349 0
2320 -2351 0
2322 -2353 0
2324 -2355 0
2326 -2357 0
2328 -2359 0
2330 -2361 0
2332 -2363 0
287 -2334 0
287 2303 -2335 0
287 2304 -2337 0
287 2306 -2339 0
287 2308 -2341 0
287 2310 -2343 0
287 2312 -2345 0
287 2314 -2347 0
287 2316 -2349 0
287 2318 -2351 0
287 2320 -2353 0
287 2322 -2355 0
287 2324 -2357 0
287 2326 -2359 0
287 2328 -2361 0
287 2330 -2363 0
287 2332 -2365 0
288 -2335 0
288 2303 -2337 0
288 2304 -2339 0
288 2306 -2341 0
288 2308 -2343 0
288 2310 -2345 0
288 2312 -2347 0
288 2314 -2349 0
288 2316 -2351 0
288 2318 -2353 0
288 2320 -2355 0
288 2322 -2357 0
288 2324 -2359 0
288 2326 -2361 0
288 2328 -2363 0
288 2330 -2365 0
288 2332 -2367 0
290 -2337 0
290 2303 -2339 0
290 2304 -2341 0
290 2306 -2343 0
290 2308 -2345 0
290 2310 -2347 0
290 2312 -2349 0
290 2314 -2351 0
290 2316 -2353 0
290 2318 -2355 0
290 2320 -2357 0
290 2322 -2359 0
290 2324 -2361 0
290 2326 -2363 0
290 2328 -2365 0
290 2330 -2367 0
290 2332 -2369 0
292 -2339 0
292 2303 -2341 0
292 2304 -2343 0
292 2306 -2345 0
292 2308 -2347 0
292 2310 -2349 0
292 2312 -2351 0
292 2314 -2353 0
292 2316 -2355 0
292 2318 -2357 0
292 2320 -2359 0
292 2322 -2361 0
292 2324 -2363 0
292 2326 -2365 0
292 2328 -2367 0
292 2330 -2369 0
292 2332 -2371 0
294 -2341 0
294 2303 -2343 0
294 2304 -2345 0
294 2306 -2347 0
294 2308 -2349 0
294 2310 -2351 0
294 2312 -2353 0
294 2314 -2355 0
294 2316 -2357 0
294 2318 -2359 0
294 2320 -2361 0
294 2322 -2363 0
294 2324 -2365 0
294 2326 -2367 0
294 2328 -2369 0
294 2330 -2371 0
294 2332 -2373 0
296 -2343 0
296 2303 -2345 0
296 2304 -2347 0
296 2306 -2349 0
296 2308 -2351 0
296 2310 -2353 0
296 2312 -2355 0
296 2314 -2357 0
296 2316 -2359 0
296 2318 -2361 0
296 2320 -2363 0
296 2322 -2365 0
296 2324 -2367 0
296 2326 -2369 0
296 2328 -2371 0
296 2330 -2373 0
296 2332 -2375 0
298 -2345 0
298 2303 -2347 0
298 2304 -2349 0
298 2306 -2351 0
298 2308 -2353 0
298 2310 -2355 0
298 2312 -2357 0
298 2314 -2359 0
298 2316 -2361 0
298 2318 -2363 0
298 2320 -2365 0
298 2322 -2367 0
298 2324 -2369 0
298 2326 -2371 0
298 2328 -2373 0
298 2330 -2375 0
298 2332 -2377 0
300 -2347 0
300 2303 -2349 0
300 2304 -2351 0
300 2306 -2353 0
300 2308 -2355 0
300 2310 -2357 0
300 2312 -2359 0
300 2314 -2361 0
300 2316 -2363 0
300 2318 -2365 0
300 2320 -2367 0
300 2322 -2369 0
300 2324 -2371 0
300 2326 -2373 0
300 2328 -2375 0
300 2330 -2377 0
300 2332 -2379 0
c (0<=(aux476 - aux477 + shift(x_00003_00002, -1)))
-2332 2379 0
-2330 2377 0
-2328 2375 0
-2326 2373 0
-2324 2371 0
-2322 2369 0
-2320 2367 0
-2318 2365 0
-2316 2363 0
-2314 2361 0
-2312 2359 0
-2310 2357 0
-2308 2355 0
-2306 2353 0
-2304 2351 0
-2303 2349 0
-300 2379 0
-300 -2332 2377 0
-300 -2330 2375 0
-300 -2328 2373 0
-300 -2326 2371 0
-300 -2324 2369 0
-300 -2322 2367 0
-300 -2320 2365 0
-300 -2318 2363 0
-300 -2316 2361 0
-300 -2314 2359 0
-300 -2312 2357 0
-300 -2310 2355 0
-300 -2308 2353 0
-300 -2306 2351 0
-300 -2304 2349 0
-300 -2303 2347 0
-298 2377 0
-298 -2332 2375 0
-298 -2330 2373 0
-298 -2328 2371 0
-298 -2326 2369 0
-298 -2324 2367 0
-298 -2322 2365 0
-298 -2320 2363 0
-298 -2318 2361 0
-298 -2316 2359 0
-298 -2314 2357 0
-298 -2312 2355 0
-298 -2310 2353 0
-298 -2308 2351 0
-298 -2306 2349 0
-298 -2304 2347 0
-298 -2303 2345 0
-296 2375 0
-296 -2332 2373 0
-296 -2330 2371 0
-296 -2328 2369 0
-296 -2326 2367 0
-296 -2324 2365 0
-296 -2322 2363 0
-296 -2320 2361 0
-296 -2318 2359 0
-296 -2316 2357 0
-296 -2314 2355 0
-296 -2312 2353 0
-296 -2310 2351 0
-296 -2308 2349 0
-296 -2306 2347 0
-296 -2304 2345 0
-296 -2303 2343 0
-294 2373 0
-294 -2332 2371 0
-294 -2330 2369 0
-294 -2328 2367 0
-294 -2326 2365 0
-294 -2324 2363 0
-294 -2322 2361 0
-294 -2320 2359 0
-294 -2318 2357 0
-294 -2316 2355 0
-294 -2314 2353 0
-294 -2312 2351 0
-294 -2310 2349 0
-294 -2308 2347 0
-294 -2306 2345 0
-294 -2304 2343 0
-294 -2303 2341 0
-292 2371 0
-292 -2332 2369 0
-292 -2330 2367 0
-292 -2328 2365 0
-292 -2326 2363 0
-292 -2324 2361 0
-292 -2322 2359 0
-292 -2320 2357 0
-292 -2318 2355 0
-292 -2316 2353 0
-292 -2314 2351 0
-292 -2312 2349 0
-292 -2310 2347 0
-292 -2308 2345 0
-292 -2306 2343 0
-292 -2304 2341 0
-292 -2303 2339 0
-290 2369 0
-290 -2332 2367 0
-290 -2330 2365 0
-290 -2328 2363 0
-290 -2326 2361 0
-290 -2324 2359 0
-290 -2322 2357 0
-290 -2320 2355 0
-290 -2318 2353 0
-290 -2316 2351 0
-290 -2314 2349 0
-290 -2312 2347 0
-290 -2310 2345 0
-290 -2308 2343 0
-290 -2306 2341 0
-290 -2304 2339 0
-290 -2303 2337 0
-288 2367 0
-288 -2332 2365 0
-288 -2330 2363 0
-288 -2328 2361 0
-288 -2326 2359 0
-288 -2324 2357 0
-288 -2322 2355 0
-288 -2320 2353 0
-288 -2318 2351 0
-288 -2316 2349 0
-288 -2314 2347 0
-288 -2312 2345 0
-288 -2310 2343 0
-288 -2308 2341 0
-288 -2306 2339 0
-288 -2304 2337 0
-288 -2303 2335 0
-287 2365 0
-287 -2332 2363 0
-287 -2330 2361 0
-287 -2328 2359 0
-287 -2326 2357 0
-287 -2324 2355 0
-287 -2322 2353 0
-287 -2320 2351 0
-287 -2318 2349 0
-287 -2316 2347 0
-287 -2314 2345 0
-287 -2312 2343 0
-287 -2310 2341 0
-287 -2308 2339 0
-287 -2306 2337 0
-287 -2304 2335 0
-287 -2303 2334 0
c ((aux473 + aux475 - aux478)<=0)
2272 -2381 0
2273 -2382 0
2275 -2384 0
2277 -2386 0
2279 -2388 0
2281 -2390 0
2283 -2392 0
2285 -2394 0
2287 -2396 0
2289 -2398 0
2291 -2400 0
2293 -2402 0
2295 -2404 0
2297 -2406 0
2299 -2408 0
2301 -2410 0
2210 -2381 0
2210 2272 -2382 0
2210 2273 -2384 0
2210 2275 -2386 0
2210 2277 -2388 0
2210 2279 -2390 0
2210 2281 -2392 0
2210 2283 -2394 0
2210 2285 -2396 0
2210 2287 -2398 0
2210 2289 -2400 0
2210 2291 -2402 0
2210 2293 -2404 0
2210 2295 -2406 0
2210 2297 -2408 0
2210 2299 -2410 0
2210 2301 -2412 0
2211 -2382 0
2211 2272 -2384 0
2211 2273 -2386 0
2211 2275 -2388 0
2211 2277 -2390 0
2211 2279 -2392 0
2211 2281 -2394 0
2211 2283 -2396 0
2211 2285 -2398 0
2211 2287 -2400 0
2211 2289 -2402 0
2211 2291 -2404 0
2211 2293 -2406 0
2211 2295 -2408 0
2211 2297 -2410 0
2211 2299 -2412 0
2211 2301 -2414 0
2213 -2384 0
2213 2272 -2386 0
2213 2273 -2388 0
2213 2275 -2390 0
2213 2277 -2392 0
2213 2279 -2394 0
2213 2281 -2396 0
2213 2283 -2398 0
2213 2285 -2400 0
2213 2287 -2402 0
2213 2289 -2404 0
2213 2291 -2406 0
2213 2293 -2408 0
2213 2295 -2410 0
2213 2297 -2412 0
2213 2299 -2414 0
2213 2301 -2416 0
2215 -2386 0
2215 2272 -2388 0
2215 2273 -2390 0
2215 2275 -2392 0
2215 2277 -2394 0
2215 2279 -2396 0
2215 2281 -2398 0
2215 2283 -2400 0
2215 2285 -2402 0
2215 2287 -2404 0
2215 2289 -2406 0
2215 2291 -2408 0
2215 2293 -2410 0
2215 2295 -2412 0
2215 2297 -2414 0
2215 2299 -2416 0
2215 2301 -2418 0
2217 -2388 0
2217 2272 -2390 0
2217 2273 -2392 0
2217 2275 -2394 0
2217 2277 -2396 0
2217 2279 -2398 0
2217 2281 -2400 0
2217 2283 -2402 0
2217 2285 -2404 0
2217 2287 -2406 0
2217 2289 -2408 0
2217 2291 -2410 0
2217 2293 -2412 0
2217 2295 -2414 0
2217 2297 -2416 0
2217 2299 -2418 0
2217 2301 -2420 0
2219 -2390 0
2219 2272 -2392 0
2219 2273 -2394 0
2219 2275 -2396 0
2219 2277 -2398 0
2219 2279 -2400 0
2219 2281 -2402 0
2219 2283 -2404 0
2219 2285 -2406 0
2219 2287 -2408 0
2219 2289 -2410 0
2219 2291 -2412 0
2219 2293 -2414 0
2219 2295 -2416 0
2219 2297 -2418 0
2219 2299 -2420 0
2219 2301 -2422 0
2221 -2392 0
2221 2272 -2394 0
2221 2273 -2396 0
2221 2275 -2398 0
2221 2277 -2400 0
2221 2279 -2402 0
2221 2281 -2404 0
2221 2283 -2406 0
2221 2285 -2408 0
2221 2287 -2410 0
2221 2289 -2412 0
2221 2291 -2414 0
2221 2293 -2416 0
2221 2295 -2418 0
2221 2297 -2420 0
2221 2299 -2422 0
2221 2301 -2424 0
2223 -2394 0
2223 2272 -2396 0
2223 2273 -2398 0
2223 2275 -2400 0
2223 2277 -2402 0
2223 2279 -2404 0
2223 2281 -2406 0
2223 2283 -2408 0
2223 2285 -2410 0
2223 2287 -2412 0
2223 2289 -2414 0
2223 2291 -2416 0
2223 2293 -2418 0
2223 2295 -2420 0
2223 2297 -2422 0
2223 2299 -2424 0
2223 2301 -2426 0
2225 -2396 0
2225 2272 -2398 0
2225 2273 -2400 0
2225 2275 -2402 0
2225 2277 -2404 0
2225 2279 -2406 0
2225 2281 -2408 0
2225 2283 -2410 0
2225 2285 -2412 0
2225 2287 -2414 0
2225 2289 -2416 0
2225 2291 -2418 0
2225 2293 -2420 0
2225 2295 -2422 0
2225 2297 -2424 0
2225 2299 -2426 0
2225 2301 -2428 0
2227 -2398 0
2227 2272 -2400 0
2227 2273 -2402 0
2227 2275 -2404 0
2227 2277 -2406 0
2227 2279 -2408 0
2227 2281 -2410 0
2227 2283 -2412 0
2227 2285 -2414 0
2227 2287 -2416 0
2227 2289 -2418 0
2227 2291 -2420 0
2227 2293 -2422 0
2227 2295 -2424 0
2227 2297 -2426 0
2227 2299 -2428 0
2227 2301 -2430 0
2229 -2400 0
2229 2272 -2402 0
2229 2273 -2404 0
2229 2275 -2406 0
2229 2277 -2408 0
2229 2279 -2410 0
2229 2281 -2412 0
2229 2283 -2414 0
2229 2285 -2416 0
2229 2287 -2418 0
2229 2289 -2420 0
2229 2291 -2422 0
2229 2293 -2424 0
2229 2295 -2426 0
2229 2297 -2428 0
2229 2299 -2430 0
2229 2301 -2432 0
2231 -2402 0
2231 2272 -2404 0
2231 2273 -2406 0
2231 2275 -2408 0
2231 2277 -2410 0
2231 2279 -2412 0
2231 2281 -2414 0
2231 2283 -2416 0
2231 2285 -2418 0
2231 2287 -2420 0
2231 2289 -2422 0
2231 2291 -2424 0
2231 2293 -2426 0
2231 2295 -2428 0
2231 2297 -2430 0
2231 2299 -2432 0
2231 2301 -2434 0
2233 -2404 0
2233 2272 -2406 0
2233 2273 -2408 0
2233 2275 -2410 0
2233 2277 -2412 0
2233 2279 -2414 0
2233 2281 -2416 0
2233 2283 -2418 0
2233 2285 -2420 0
2233 2287 -2422 0
2233 2289 -2424 0
2233 2291 -2426 0
2233 2293 -2428 0
2233 2295 -2430 0
2233 2297 -2432 0
2233 2299 -2434 0
2233 2301 -2436 0
2235 -2406 0
2235 2272 -2408 0
2235 2273 -2410 0
2235 2275 -2412 0
2235 2277 -2414 0
2235 2279 -2416 0
2235 2281 -2418 0
2235 2283 -2420 0
2235 2285 -2422 0
2235 2287 -2424 0
2235 2289 -2426 0
2235 2291 -2428 0
2235 2293 -2430 0
2235 2295 -2432 0
2235 2297 -2434 0
2235 2299 -2436 0
2235 2301 -2438 0
2237 -2408 0
2237 2272 -2410 0
2237 2273 -2412 0
2237 2275 -2414 0
2237 2277 -2416 0
2237 2279 -2418 0
2237 2281 -2420 0
2237 2283 -2422 0
2237 2285 -2424 0
2237 2287 -2426 0
2237 2289 -2428 0
2237 2291 -2430 0
2237 2293 -2432 0
2237 2295 -2434 0
2237 2297 -2436 0
2237 2299 -2438 0
2237 2301 -2440 0
2239 -2410 0
2239 2272 -2412 0
2239 2273 -2414 0
2239 2275 -2416 0
2239 2277 -2418 0
2239 2279 -2420 0
2239 2281 -2422 0
2239 2283 -2424 0
2239 2285 -2426 0
2239 2287 -2428 0
2239 2289 -2430 0
2239 2291 -2432 0
2239 2293 -2434 0
2239 2295 -2436 0
2239 2297 -2438 0
2239 2299 -2440 0
2239 2301 -2442 0
c (0<=(aux473 + aux475 - aux478))
-2301 2442 0
-2299 2440 0
-2297 2438 0
-2295 2436 0
-2293 2434 0
-2291 2432 0
-2289 2430 0
-2287 2428 0
-2285 2426 0
-2283 2424 0
-2281 2422 0
-2279 2420 0
-2277 2418 0
-2275 2416 0
-2273 2414 0
-2272 2412 0
-2239 2442 0
-2239 -2301 2440 0
-2239 -2299 2438 0
-2239 -2297 2436 0
-2239 -2295 2434 0
-2239 -2293 2432 0
-2239 -2291 2430 0
-2239 -2289 2428 0
-2239 -2287 2426 0
-2239 -2285 2424 0
-2239 -2283 2422 0
-2239 -2281 2420 0
-2239 -2279 2418 0
-2239 -2277 2416 0
-2239 -2275 2414 0
-2239 -2273 2412 0
-2239 -2272 2410 0
-2237 2440 0
-2237 -2301 2438 0
-2237 -2299 2436 0
-2237 -2297 2434 0
-2237 -2295 2432 0
-2237 -2293 2430 0
-2237 -2291 2428 0
-2237 -2289 2426 0
-2237 -2287 2424 0
-2237 -2285 2422 0
-2237 -2283 2420 0
-2237 -2281 2418 0
-2237 -2279 2416 0
-2237 -2277 2414 0
-2237 -2275 2412 0
-2237 -2273 2410 0
-2237 -2272 2408 0
-2235 2438 0
-2235 -2301 2436 0
-2235 -2299 2434 0
-2235 -2297 2432 0
-2235 -2295 2430 0
-2235 -2293 2428 0
-2235 -2291 2426 0
-2235 -2289 2424 0
-2235 -2287 2422 0
-2235 -2285 2420 0
-2235 -2283 2418 0
-2235 -2281 2416 0
-2235 -2279 2414 0
-2235 -2277 2412 0
-2235 -2275 2410 0
-2235 -2273 2408 0
-2235 -2272 2406 0
-2233 2436 0
-2233 -2301 2434 0
-2233 -2299 2432 0
-2233 -2297 2430 0
-2233 -2295 2428 0
-2233 -2293 2426 0
-2233 -2291 2424 0
-2233 -2289 2422 0
-2233 -2287 2420 0
-2233 -2285 2418 0
-2233 -2283 2416 0
-2233 -2281 2414 0
-2233 -2279 2412 0
-2233 -2277 2410 0
-2233 -2275 2408 0
-2233 -2273 2406 0
-2233 -2272 2404 0
-2231 2434 0
-2231 -2301 2432 0
-2231 -2299 2430 0
-2231 -2297 2428 0
-2231 -2295 2426 0
-2231 -2293 2424 0
-2231 -2291 2422 0
-2231 -2289 2420 0
-2231 -2287 2418 0
-2231 -2285 2416 0
-2231 -2283 2414 0
-2231 -2281 2412 0
-2231 -2279 2410 0
-2231 -2277 2408 0
-2231 -2275 2406 0
-2231 -2273 2404 0
-2231 -2272 2402 0
-2229 2432 0
-2229 -2301 2430 0
-2229 -2299 2428 0
-2229 -2297 2426 0
-2229 -2295 2424 0
-2229 -2293 2422 0
-2229 -2291 2420 0
-2229 -2289 2418 0
-2229 -2287 2416 0
-2229 -2285 2414 0
-2229 -2283 2412 0
-2229 -2281 2410 0
-2229 -2279 2408 0
-2229 -2277 2406 0
-2229 -2275 2404 0
-2229 -2273 2402 0
-2229 -2272 2400 0
-2227 2430 0
-2227 -2301 2428 0
-2227 -2299 2426 0
-2227 -2297 2424 0
-2227 -2295 2422 0
-2227 -2293 2420 0
-2227 -2291 2418 0
-2227 -2289 2416 0
-2227 -2287 2414 0
-2227 -2285 2412 0
-2227 -2283 2410 0
-2227 -2281 2408 0
-2227 -2279 2406 0
-2227 -2277 2404 0
-2227 -2275 2402 0
-2227 -2273 2400 0
-2227 -2272 2398 0
-2225 2428 0
-2225 -2301 2426 0
-2225 -2299 2424 0
-2225 -2297 2422 0
-2225 -2295 2420 0
-2225 -2293 2418 0
-2225 -2291 2416 0
-2225 -2289 2414 0
-2225 -2287 2412 0
-2225 -2285 2410 0
-2225 -2283 2408 0
-2225 -2281 2406 0
-2225 -2279 2404 0
-2225 -2277 2402 0
-2225 -2275 2400 0
-2225 -2273 2398 0
-2225 -2272 2396 0
-2223 2426 0
-2223 -2301 2424 0
-2223 -2299 2422 0
-2223 -2297 2420 0
-2223 -2295 2418 0
-2223 -2293 2416 0
-2223 -2291 2414 0
-2223 -2289 2412 0
-2223 -2287 2410 0
-2223 -2285 2408 0
-2223 -2283 2406 0
-2223 -2281 2404 0
-2223 -2279 2402 0
-2223 -2277 2400 0
-2223 -2275 2398 0
-2223 -2273 2396 0
-2223 -2272 2394 0
-2221 2424 0
-2221 -2301 2422 0
-2221 -2299 2420 0
-2221 -2297 2418 0
-2221 -2295 2416 0
-2221 -2293 2414 0
-2221 -2291 2412 0
-2221 -2289 2410 0
-2221 -2287 2408 0
-2221 -2285 2406 0
-2221 -2283 2404 0
-2221 -2281 2402 0
-2221 -2279 2400 0
-2221 -2277 2398 0
-2221 -2275 2396 0
-2221 -2273 2394 0
-2221 -2272 2392 0
-2219 2422 0
-2219 -2301 2420 0
-2219 -2299 2418 0
-2219 -2297 2416 0
-2219 -2295 2414 0
-2219 -2293 2412 0
-2219 -2291 2410 0
-2219 -2289 2408 0
-2219 -2287 2406 0
-2219 -2285 2404 0
-2219 -2283 2402 0
-2219 -2281 2400 0
-2219 -2279 2398 0
-2219 -2277 2396 0
-2219 -2275 2394 0
-2219 -2273 2392 0
-2219 -2272 2390 0
-2217 2420 0
-2217 -2301 2418 0
-2217 -2299 2416 0
-2217 -2297 2414 0
-2217 -2295 2412 0
-2217 -2293 2410 0
-2217 -2291 2408 0
-2217 -2289 2406 0
-2217 -2287 2404 0
-2217 -2285 2402 0
-2217 -2283 2400 0
-2217 -2281 2398 0
-2217 -2279 2396 0
-2217 -2277 2394 0
-2217 -2275 2392 0
-2217 -2273 2390 0
-2217 -2272 2388 0
-2215 2418 0
-2215 -2301 2416 0
-2215 -2299 2414 0
-2215 -2297 2412 0
-2215 -2295 2410 0
-2215 -2293 2408 0
-2215 -2291 2406 0
-2215 -2289 2404 0
-2215 -2287 2402 0
-2215 -2285 2400 0
-2215 -2283 2398 0
-2215 -2281 2396 0
-2215 -2279 2394 0
-2215 -2277 2392 0
-2215 -2275 2390 0
-2215 -2273 2388 0
-2215 -2272 2386 0
-2213 2416 0
-2213 -2301 2414 0
-2213 -2299 2412 0
-2213 -2297 2410 0
-2213 -2295 2408 0
-2213 -2293 2406 0
-2213 -2291 2404 0
-2213 -2289 2402 0
-2213 -2287 2400 0
-2213 -2285 2398 0
-2213 -2283 2396 0
-2213 -2281 2394 0
-2213 -2279 2392 0
-2213 -2277 2390 0
-2213 -2275 2388 0
-2213 -2273 2386 0
-2213 -2272 2384 0
-2211 2414 0
-2211 -2301 2412 0
-2211 -2299 2410 0
-2211 -2297 2408 0
-2211 -2295 2406 0
-2211 -2293 2404 0
-2211 -2291 2402 0
-2211 -2289 2400 0
-2211 -2287 2398 0
-2211 -2285 2396 0
-2211 -2283 2394 0
-2211 -2281 2392 0
-2211 -2279 2390 0
-2211 -2277 2388 0
-2211 -2275 2386 0
-2211 -2273 2384 0
-2211 -2272 2382 0
-2210 2412 0
-2210 -2301 2410 0
-2210 -2299 2408 0
-2210 -2297 2406 0
-2210 -2295 2404 0
-2210 -2293 2402 0
-2210 -2291 2400 0
-2210 -2289 2398 0
-2210 -2287 2396 0
-2210 -2285 2394 0
-2210 -2283 2392 0
-2210 -2281 2390 0
-2210 -2279 2388 0
-2210 -2277 2386 0
-2210 -2275 2384 0
-2210 -2273 2382 0
-2210 -2272 2381 0
c (( - aux479 + shift(x_00006_00003, -1) + shift(x_00002_00003, -1))<=0)
167 -2444 0
168 -2445 0
170 -2447 0
172 -2449 0
174 -2451 0
176 -2453 0
178 -2455 0
180 -2457 0
707 -2444 0
707 167 -2445 0
707 168 -2447 0
707 170 -2449 0
707 172 -2451 0
707 174 -2453 0
707 176 -2455 0
707 178 -2457 0
707 180 -2459 0
708 -2445 0
708 167 -2447 0
708 168 -2449 0
708 170 -2451 0
708 172 -2453 0
708 174 -2455 0
708 176 -2457 0
708 178 -2459 0
708 180 -2461 0
710 -2447 0
710 167 -2449 0
710 168 -2451 0
710 170 -2453 0
710 172 -2455 0
710 174 -2457 0
710 176 -2459 0
710 178 -2461 0
710 180 -2463 0
712 -2449 0
712 167 -2451 0
712 168 -2453 0
712 170 -2455 0
712 172 -2457 0
712 174 -2459 0
712 176 -2461 0
712 178 -2463 0
712 180 -2465 0
714 -2451 0
714 167 -2453 0
714 168 -2455 0
714 170 -2457 0
714 172 -2459 0
714 174 -2461 0
714 176 -2463 0
714 178 -2465 0
714 180 -2467 0
716 -2453 0
716 167 -2455 0
716 168 -2457 0
716 170 -2459 0
716 172 -2461 0
716 174 -2463 0
716 176 -2465 0
716 178 -2467 0
716 180 -2469 0
718 -2455 0
718 167 -2457 0
718 168 -2459 0
718 170 -2461 0
718 172 -2463 0
718 174 -2465 0
718 176 -2467 0
718 178 -2469 0
718 180 -2471 0
720 -2457 0
720 167 -2459 0
720 168 -2461 0
720 170 -2463 0
720 172 -2465 0
720 174 -2467 0
720 176 -2469 0
720 178 -2471 0
720 180 -2473 0
c (0<=( - aux479 + shift(x_00006_00003, -1) + shift(x_00002_00003, -1)))
-180 2473 0
-178 2471 0
-176 2469 0
-174 2467 0
-172 2465 0
-170 2463 0
-168 2461 0
-167 2459 0
-720 2473 0
-720 -180 2471 0
-720 -178 2469 0
-720 -176 2467 0
-720 -174 2465 0
-720 -172 2463 0
-720 -170 2461 0
-720 -168 2459 0
-720 -167 2457 0
-718 2471 0
-718 -180 2469 0
-718 -178 2467 0
-718 -176 2465 0
-718 -174 2463 0
-718 -172 2461 0
-718 -170 2459 0
-718 -168 2457 0
-718 -167 2455 0
-716 2469 0
-716 -180 2467 0
-716 -178 2465 0
-716 -176 2463 0
-716 -174 2461 0
-716 -172 2459 0
-716 -170 2457 0
-716 -168 2455 0
-716 -167 2453 0
-714 2467 0
-714 -180 2465 0
-714 -178 2463 0
-714 -176 2461 0
-714 -174 2459 0
-714 -172 2457 0
-714 -170 2455 0
-714 -168 2453 0
-714 -167 2451 0
-712 2465 0
-712 -180 2463 0
-712 -178 2461 0
-712 -176 2459 0
-712 -174 2457 0
-712 -172 2455 0
-712 -170 2453 0
-712 -168 2451 0
-712 -167 2449 0
-710 2463 0
-710 -180 2461 0
-710 -178 2459 0
-710 -176 2457 0
-710 -174 2455 0
-710 -172 2453 0
-710 -170 2451 0
-710 -168 2449 0
-710 -167 2447 0
-708 2461 0
-708 -180 2459 0
-708 -178 2457 0
-708 -176 2455 0
-708 -174 2453 0
-708 -172 2451 0
-708 -170 2449 0
-708 -168 2447 0
-708 -167 2445 0
-707 2459 0
-707 -180 2457 0
-707 -178 2455 0
-707 -176 2453 0
-707 -174 2451 0
-707 -172 2449 0
-707 -170 2447 0
-707 -168 2445 0
-707 -167 2444 0
c ((shift(x_00007_00003, -1) - aux480 + shift(x_00001_00003, -1))<=0)
32 -2475 0
33 -2476 0
35 -2478 0
37 -2480 0
39 -2482 0
41 -2484 0
43 -2486 0
45 -2488 0
842 -2475 0
842 32 -2476 0
842 33 -2478 0
842 35 -2480 0
842 37 -2482 0
842 39 -2484 0
842 41 -2486 0
842 43 -2488 0
842 45 -2490 0
843 -2476 0
843 32 -2478 0
843 33 -2480 0
843 35 -2482 0
843 37 -2484 0
843 39 -2486 0
843 41 -2488 0
843 43 -2490 0
843 45 -2492 0
845 -2478 0
845 32 -2480 0
845 33 -2482 0
845 35 -2484 0
845 37 -2486 0
845 39 -2488 0
845 41 -2490 0
845 43 -2492 0
845 45 -2494 0
847 -2480 0
847 32 -2482 0
847 33 -2484 0
847 35 -2486 0
847 37 -2488 0
847 39 -2490 0
847 41 -2492 0
847 43 -2494 0
847 45 -2496 0
849 -2482 0
849 32 -2484 0
849 33 -2486 0
849 35 -2488 0
849 37 -2490 0
849 39 -2492 0
849 41 -2494 0
849 43 -2496 0
849 45 -2498 0
851 -2484 0
851 32 -2486 0
851 33 -2488 0
851 35 -2490 0
851 37 -2492 0
851 39 -2494 0
851 41 -2496 0
851 43 -2498 0
851 45 -2500 0
853 -2486 0
853 32 -2488 0
853 33 -2490 0
853 35 -2492 0
853 37 -2494 0
853 39 -2496 0
853 41 -2498 0
853 43 -2500 0
853 45 -2502 0
855 -2488 0
855 32 -2490 0
855 33 -2492 0
855 35 -2494 0
855 37 -2496 0
855 39 -2498 0
855 41 -2500 0
855 43 -2502 0
855 45 -2504 0
c (0<=(shift(x_00007_00003, -1) - aux480 + shift(x_00001_00003, -1)))
-45 2504 0
-43 2502 0
-41 2500 0
-39 2498 0
-37 2496 0
-35 2494 0
-33 2492 0
-32 2490 0
-855 2504 0
-855 -45 2502 0
-855 -43 2500 0
-855 -41 2498 0
-855 -39 2496 0
-855 -37 2494 0
-855 -35 2492 0
-855 -33 2490 0
-855 -32 2488 0
-853 2502 0
-853 -45 2500 0
-853 -43 2498 0
-853 -41 2496 0
-853 -39 2494 0
-853 -37 2492 0
-853 -35 2490 0
-853 -33 2488 0
-853 -32 2486 0
-851 2500 0
-851 -45 2498 0
-851 -43 2496 0
-851 -41 2494 0
-851 -39 2492 0
-851 -37 2490 0
-851 -35 2488 0
-851 -33 2486 0
-851 -32 2484 0
-849 2498 0
-849 -45 2496 0
-849 -43 2494 0
-849 -41 2492 0
-849 -39 2490 0
-849 -37 2488 0
-849 -35 2486 0
-849 -33 2484 0
-849 -32 2482 0
-847 2496 0
-847 -45 2494 0
-847 -43 2492 0
-847 -41 2490 0
-847 -39 2488 0
-847 -37 2486 0
-847 -35 2484 0
-847 -33 2482 0
-847 -32 2480 0
-845 2494 0
-845 -45 2492 0
-845 -43 2490 0
-845 -41 2488 0
-845 -39 2486 0
-845 -37 2484 0
-845 -35 2482 0
-845 -33 2480 0
-845 -32 2478 0
-843 2492 0
-843 -45 2490 0
-843 -43 2488 0
-843 -41 2486 0
-843 -39 2484 0
-843 -37 2482 0
-843 -35 2480 0
-843 -33 2478 0
-843 -32 2476 0
-842 2490 0
-842 -45 2488 0
-842 -43 2486 0
-842 -41 2484 0
-842 -39 2482 0
-842 -37 2480 0
-842 -35 2478 0
-842 -33 2476 0
-842 -32 2475 0
c (( - aux481 + shift(x_00005_00003, -1) + shift(x_00008_00003, -1))<=0)
977 -2506 0
978 -2507 0
980 -2509 0
982 -2511 0
984 -2513 0
986 -2515 0
988 -2517 0
990 -2519 0
572 -2506 0
572 977 -2507 0
572 978 -2509 0
572 980 -2511 0
572 982 -2513 0
572 984 -2515 0
572 986 -2517 0
572 988 -2519 0
572 990 -2521 0
573 -2507 0
573 977 -2509 0
573 978 -2511 0
573 980 -2513 0
573 982 -2515 0
573 984 -2517 0
573 986 -2519 0
573 988 -2521 0
573 990 -2523 0
575 -2509 0
575 977 -2511 0
575 978 -2513 0
575 980 -2515 0
575 982 -2517 0
575 984 -2519 0
575 986 -2521 0
575 988 -2523 0
575 990 -2525 0
577 -2511 0
577 977 -2513 0
577 978 -2515 0
577 980 -2517 0
577 982 -2519 0
577 984 -2521 0
577 986 -2523 0
577 988 -2525 0
577 990 -2527 0
579 -2513 0
579 977 -2515 0
579 978 -2517 0
579 980 -2519 0
579 982 -2521 0
579 984 -2523 0
579 986 -2525 0
579 988 -2527 0
579 990 -2529 0
581 -2515 0
581 977 -2517 0
581 978 -2519 0
581 980 -2521 0
581 982 -2523 0
581 984 -2525 0
581 986 -2527 0
581 988 -2529 0
581 990 -2531 0
583 -2517 0
583 977 -2519 0
583 978 -2521 0
583 980 -2523 0
583 982 -2525 0
583 984 -2527 0
583 986 -2529 0
583 988 -2531 0
583 990 -2533 0
585 -2519 0
585 977 -2521 0
585 978 -2523 0
585 980 -2525 0
585 982 -2527 0
585 984 -2529 0
585 986 -2531 0
585 988 -2533 0
585 990 -2535 0
c (0<=( - aux481 + shift(x_00005_00003, -1) + shift(x_00008_00003, -1)))
-990 2535 0
-988 2533 0
-986 2531 0
-984 2529 0
-982 2527 0
-980 2525 0
-978 2523 0
-977 2521 0
-585 2535 0
-585 -990 2533 0
-585 -988 2531 0
-585 -986 2529 0
-585 -984 2527 0
-585 -982 2525 0
-585 -980 2523 0
-585 -978 2521 0
-585 -977 2519 0
-583 2533 0
-583 -990 2531 0
-583 -988 2529 0
-583 -986 2527 0
-583 -984 2525 0
-583 -982 2523 0
-583 -980 2521 0
-583 -978 2519 0
-583 -977 2517 0
-581 2531 0
-581 -990 2529 0
-581 -988 2527 0
-581 -986 2525 0
-581 -984 2523 0
-581 -982 2521 0
-581 -980 2519 0
-581 -978 2517 0
-581 -977 2515 0
-579 2529 0
-579 -990 2527 0
-579 -988 2525 0
-579 -986 2523 0
-579 -984 2521 0
-579 -982 2519 0
-579 -980 2517 0
-579 -978 2515 0
-579 -977 2513 0
-577 2527 0
-577 -990 2525 0
-577 -988 2523 0
-577 -986 2521 0
-577 -984 2519 0
-577 -982 2517 0
-577 -980 2515 0
-577 -978 2513 0
-577 -977 2511 0
-575 2525 0
-575 -990 2523 0
-575 -988 2521 0
-575 -986 2519 0
-575 -984 2517 0
-575 -982 2515 0
-575 -980 2513 0
-575 -978 2511 0
-575 -977 2509 0
-573 2523 0
-573 -990 2521 0
-573 -988 2519 0
-573 -986 2517 0
-573 -984 2515 0
-573 -982 2513 0
-573 -980 2511 0
-573 -978 2509 0
-573 -977 2507 0
-572 2521 0
-572 -990 2519 0
-572 -988 2517 0
-572 -986 2515 0
-572 -984 2513 0
-572 -982 2511 0
-572 -980 2509 0
-572 -978 2507 0
-572 -977 2506 0
c (( - aux482 + shift(x_00004_00003, -1) + shift(x_00009_00003, -1))<=0)
1112 -2537 0
1113 -2538 0
1115 -2540 0
1117 -2542 0
1119 -2544 0
1121 -2546 0
1123 -2548 0
1125 -2550 0
437 -2537 0
437 1112 -2538 0
437 1113 -2540 0
437 1115 -2542 0
437 1117 -2544 0
437 1119 -2546 0
437 1121 -2548 0
437 1123 -2550 0
437 1125 -2552 0
438 -2538 0
438 1112 -2540 0
438 1113 -2542 0
438 1115 -2544 0
438 1117 -2546 0
438 1119 -2548 0
438 1121 -2550 0
438 1123 -2552 0
438 1125 -2554 0
440 -2540 0
440 1112 -2542 0
440 1113 -2544 0
440 1115 -2546 0
440 1117 -2548 0
440 1119 -2550 0
440 1121 -2552 0
440 1123 -2554 0
440 1125 -2556 0
442 -2542 0
442 1112 -2544 0
442 1113 -2546 0
442 1115 -2548 0
442 1117 -2550 0
442 1119 -2552 0
442 1121 -2554 0
442 1123 -2556 0
442 1125 -2558 0
444 -2544 0
444 1112 -2546 0
444 1113 -2548 0
444 1115 -2550 0
444 1117 -2552 0
444 1119 -2554 0
444 1121 -2556 0
444 1123 -2558 0
444 1125 -2560 0
446 -2546 0
446 1112 -2548 0
446 1113 -2550 0
446 1115 -2552 0
446 1117 -2554 0
446 1119 -2556 0
446 1121 -2558 0
446 1123 -2560 0
446 1125 -2562 0
448 -2548 0
448 1112 -2550 0
448 1113 -2552 0
448 1115 -2554 0
448 1117 -2556 0
448 1119 -2558 0
448 1121 -2560 0
448 1123 -2562 0
448 1125 -2564 0
450 -2550 0
450 1112 -2552 0
450 1113 -2554 0
450 1115 -2556 0
450 1117 -2558 0
450 1119 -2560 0
450 1121 -2562 0
450 1123 -2564 0
450 1125 -2566 0
c (0<=( - aux482 + shift(x_00004_00003, -1) + shift(x_00009_00003, -1)))
-1125 2566 0
-1123 2564 0
-1121 2562 0
-1119 2560 0
-1117 2558 0
-1115 2556 0
-1113 2554 0
-1112 2552 0
-450 2566 0
-450 -1125 2564 0
-450 -1123 2562 0
-450 -1121 2560 0
-450 -1119 2558 0
-450 -1117 2556 0
-450 -1115 2554 0
-450 -1113 2552 0
-450 -1112 2550 0
-448 2564 0
-448 -1125 2562 0
-448 -1123 2560 0
-448 -1121 2558 0
-448 -1119 2556 0
-448 -1117 2554 0
-448 -1115 2552 0
-448 -1113 2550 0
-448 -1112 2548 0
-446 2562 0
-446 -1125 2560 0
-446 -1123 2558 0
-446 -1121 2556 0
-446 -1119 2554 0
-446 -1117 2552 0
-446 -1115 2550 0
-446 -1113 2548 0
-446 -1112 2546 0
-444 2560 0
-444 -1125 2558 0
-444 -1123 2556 0
-444 -1121 2554 0
-444 -1119 2552 0
-444 -1117 2550 0
-444 -1115 2548 0
-444 -1113 2546 0
-444 -1112 2544 0
-442 2558 0
-442 -1125 2556 0
-442 -1123 2554 0
-442 -1121 2552 0
-442 -1119 2550 0
-442 -1117 2548 0
-442 -1115 2546 0
-442 -1113 2544 0
-442 -1112 2542 0
-440 2556 0
-440 -1125 2554 0
-440 -1123 2552 0
-440 -1121 2550 0
-440 -1119 2548 0
-440 -1117 2546 0
-440 -1115 2544 0
-440 -1113 2542 0
-440 -1112 2540 0
-438 2554 0
-438 -1125 2552 0
-438 -1123 2550 0
-438 -1121 2548 0
-438 -1119 2546 0
-438 -1117 2544 0
-438 -1115 2542 0
-438 -1113 2540 0
-438 -1112 2538 0
-437 2552 0
-437 -1125 2550 0
-437 -1123 2548 0
-437 -1121 2546 0
-437 -1119 2544 0
-437 -1117 2542 0
-437 -1115 2540 0
-437 -1113 2538 0
-437 -1112 2537 0
c ((aux482 - aux483 + shift(x_00003_00003, -1))<=0)
2537 -2568 0
2538 -2569 0
2540 -2571 0
2542 -2573 0
2544 -2575 0
2546 -2577 0
2548 -2579 0
2550 -2581 0
2552 -2583 0
2554 -2585 0
2556 -2587 0
2558 -2589 0
2560 -2591 0
2562 -2593 0
2564 -2595 0
2566 -2597 0
302 -2568 0
302 2537 -2569 0
302 2538 -2571 0
302 2540 -2573 0
302 2542 -2575 0
302 2544 -2577 0
302 2546 -2579 0
302 2548 -2581 0
302 2550 -2583 0
302 2552 -2585 0
302 2554 -2587 0
302 2556 -2589 0
302 2558 -2591 0
302 2560 -2593 0
302 2562 -2595 0
302 2564 -2597 0
302 2566 -2599 0
303 -2569 0
303 2537 -2571 0
303 2538 -2573 0
303 2540 -2575 0
303 2542 -2577 0
303 2544 -2579 0
303 2546 -2581 0
303 2548 -2583 0
303 2550 -2585 0
303 2552 -2587 0
303 2554 -2589 0
303 2556 -2591 0
303 2558 -2593 0
303 2560 -2595 0
303 2562 -2597 0
303 2564 -2599 0
303 2566 -2601 0
305 -2571 0
305 2537 -2573 0
305 2538 -2575 0
305 2540 -2577 0
305 2542 -2579 0
305 2544 -2581 0
305 2546 -2583 0
305 2548 -2585 0
305 2550 -2587 0
305 2552 -2589 0
305 2554 -2591 0
305 2556 -2593 0
305 2558 -2595 0
305 2560 -2597 0
305 2562 -2599 0
305 2564 -2601 0
305 2566 -2603 0
307 -2573 0
307 2537 -2575 0
307 2538 -2577 0
307 2540 -2579 0
307 2542 -2581 0
307 2544 -2583 0
307 2546 -2585 0
307 2548 -2587 0
307 2550 -2589 0
307 2552 -2591 0
307 2554 -2593 0
307 2556 -2595 0
307 2558 -2597 0
307 2560 -2599 0
307 2562 -2601 0
307 2564 -2603 0
307 2566 -2605 0
309 -2575 0
309 2537 -2577 0
309 2538 -2579 0
309 2540 -2581 0
309 2542 -2583 0
309 2544 -2585 0
309 2546 -2587 0
309 2548 -2589 0
309 2550 -2591 0
309 2552 -2593 0
309 2554 -2595 0
309 2556 -2597 0
309 2558 -2599 0
309 2560 -2601 0
309 2562 -2603 0
309 2564 -2605 0
309 2566 -2607 0
311 -2577 0
311 2537 -2579 0
311 2538 -2581 0
311 2540 -2583 0
311 2542 -2585 0
311 2544 -2587 0
311 2546 -2589 0
311 2548 -2591 0
311 2550 -2593 0
311 2552 -2595 0
311 2554 -2597 0
311 2556 -2599 0
311 2558 -2601 0
311 2560 -2603 0
311 2562 -2605 0
311 2564 -2607 0
311 2566 -2609 0
313 -2579 0
313 2537 -2581 0
313 2538 -2583 0
313 2540 -2585 0
313 2542 -2587 0
313 2544 -2589 0
313 2546 -2591 0
313 2548 -2593 0
313 2550 -2595 0
313 2552 -2597 0
313 2554 -2599 0
313 2556 -2601 0
313 2558 -2603 0
313 2560 -2605 0
313 2562 -2607 0
313 2564 -2609 0
313 2566 -2611 0
315 -2581 0
315 2537 -2583 0
315 2538 -2585 0
315 2540 -2587 0
315 2542 -2589 0
315 2544 -2591 0
315 2546 -2593 0
315 2548 -2595 0
315 2550 -2597 0
315 2552 -2599 0
315 2554 -2601 0
315 2556 -2603 0
315 2558 -2605 0
315 2560 -2607 0
315 2562 -2609 0
315 2564 -2611 0
315 2566 -2613 0
c (0<=(aux482 - aux483 + shift(x_00003_00003, -1)))
-2566 2613 0
-2564 2611 0
-2562 2609 0
-2560 2607 0
-2558 2605 0
-2556 2603 0
-2554 2601 0
-2552 2599 0
-2550 2597 0
-2548 2595 0
-2546 2593 0
-2544 2591 0
-2542 2589 0
-2540 2587 0
-2538 2585 0
-2537 2583 0
-315 2613 0
-315 -2566 2611 0
-315 -2564 2609 0
-315 -2562 2607 0
-315 -2560 2605 0
-315 -2558 2603 0
-315 -2556 2601 0
-315 -2554 2599 0
-315 -2552 2597 0
-315 -2550 2595 0
-315 -2548 2593 0
-315 -2546 2591 0
-315 -2544 2589 0
-315 -2542 2587 0
-315 -2540 2585 0
-315 -2538 2583 0
-315 -2537 2581 0
-313 2611 0
-313 -2566 2609 0
-313 -2564 2607 0
-313 -2562 2605 0
-313 -2560 2603 0
-313 -2558 2601 0
-313 -2556 2599 0
-313 -2554 2597 0
-313 -2552 2595 0
-313 -2550 2593 0
-313 -2548 2591 0
-313 -2546 2589 0
-313 -2544 2587 0
-313 -2542 2585 0
-313 -2540 2583 0
-313 -2538 2581 0
-313 -2537 2579 0
-311 2609 0
-311 -2566 2607 0
-311 -2564 2605 0
-311 -2562 2603 0
-311 -2560 2601 0
-311 -2558 2599 0
-311 -2556 2597 0
-311 -2554 2595 0
-311 -2552 2593 0
-311 -2550 2591 0
-311 -2548 2589 0
-311 -2546 2587 0
-311 -2544 2585 0
-311 -2542 2583 0
-311 -2540 2581 0
-311 -2538 2579 0
-311 -2537 2577 0
-309 2607 0
-309 -2566 2605 0
-309 -2564 2603 0
-309 -2562 2601 0
-309 -2560 2599 0
-309 -2558 2597 0
-309 -2556 2595 0
-309 -2554 2593 0
-309 -2552 2591 0
-309 -2550 2589 0
-309 -2548 2587 0
-309 -2546 2585 0
-309 -2544 2583 0
-309 -2542 2581 0
-309 -2540 2579 0
-309 -2538 2577 0
-309 -2537 2575 0
-307 2605 0
-307 -2566 2603 0
-307 -2564 2601 0
-307 -2562 2599 0
-307 -2560 2597 0
-307 -2558 2595 0
-307 -2556 2593 0
-307 -2554 2591 0
-307 -2552 2589 0
-307 -2550 2587 0
-307 -2548 2585 0
-307 -2546 2583 0
-307 -2544 2581 0
-307 -2542 2579 0
-307 -2540 2577 0
-307 -2538 2575 0
-307 -2537 2573 0
-305 2603 0
-305 -2566 2601 0
-305 -2564 2599 0
-305 -2562 2597 0
-305 -2560 2595 0
-305 -2558 2593 0
-305 -2556 2591 0
-305 -2554 2589 0
-305 -2552 2587 0
-305 -2550 2585 0
-305 -2548 2583 0
-305 -2546 2581 0
-305 -2544 2579 0
-305 -2542 2577 0
-305 -2540 2575 0
-305 -2538 2573 0
-305 -2537 2571 0
-303 2601 0
-303 -2566 2599 0
-303 -2564 2597 0
-303 -2562 2595 0
-303 -2560 2593 0
-303 -2558 2591 0
-303 -2556 2589 0
-303 -2554 2587 0
-303 -2552 2585 0
-303 -2550 2583 0
-303 -2548 2581 0
-303 -2546 2579 0
-303 -2544 2577 0
-303 -2542 2575 0
-303 -2540 2573 0
-303 -2538 2571 0
-303 -2537 2569 0
-302 2599 0
-302 -2566 2597 0
-302 -2564 2595 0
-302 -2562 2593 0
-302 -2560 2591 0
-302 -2558 2589 0
-302 -2556 2587 0
-302 -2554 2585 0
-302 -2552 2583 0
-302 -2550 2581 0
-302 -2548 2579 0
-302 -2546 2577 0
-302 -2544 2575 0
-302 -2542 2573 0
-302 -2540 2571 0
-302 -2538 2569 0
-302 -2537 2568 0
c ((aux479 + aux481 - aux484)<=0)
2506 -2615 0
2507 -2616 0
2509 -2618 0
2511 -2620 0
2513 -2622 0
2515 -2624 0
2517 -2626 0
2519 -2628 0
2521 -2630 0
2523 -2632 0
2525 -2634 0
2527 -2636 0
2529 -2638 0
2531 -2640 0
2533 -2642 0
2535 -2644 0
2444 -2615 0
2444 2506 -2616 0
2444 2507 -2618 0
2444 2509 -2620 0
2444 2511 -2622 0
2444 2513 -2624 0
2444 2515 -2626 0
2444 2517 -2628 0
2444 2519 -2630 0
2444 2521 -2632 0
2444 2523 -2634 0
2444 2525 -2636 0
2444 2527 -2638 0
2444 2529 -2640 0
2444 2531 -2642 0
2444 2533 -2644 0
2444 2535 -2646 0
2445 -2616 0
2445 2506 -2618 0
2445 2507 -2620 0
2445 2509 -2622 0
2445 2511 -2624 0
2445 2513 -2626 0
2445 2515 -2628 0
2445 2517 -2630 0
2445 2519 -2632 0
2445 2521 -2634 0
2445 2523 -2636 0
2445 2525 -2638 0
2445 2527 -2640 0
2445 2529 -2642 0
2445 2531 -2644 0
2445 2533 -2646 0
2445 2535 -2648 0
2447 -2618 0
2447 2506 -2620 0
2447 2507 -2622 0
2447 2509 -2624 0
2447 2511 -2626 0
2447 2513 -2628 0
2447 2515 -2630 0
2447 2517 -2632 0
2447 2519 -2634 0
2447 2521 -2636 0
2447 2523 -2638 0
2447 2525 -2640 0
2447 2527 -2642 0
2447 2529 -2644 0
2447 2531 -2646 0
2447 2533 -2648 0
2447 2535 -2650 0
2449 -2620 0
2449 2506 -2622 0
2449 2507 -2624 0
2449 2509 -2626 0
2449 2511 -2628 0
2449 2513 -2630 0
2449 2515 -2632 0
2449 2517 -2634 0
2449 2519 -2636 0
2449 2521 -2638 0
2449 2523 -2640 0
2449 2525 -2642 0
2449 2527 -2644 0
2449 2529 -2646 0
2449 2531 -2648 0
2449 2533 -2650 0
2449 2535 -2652 0
2451 -2622 0
2451 2506 -2624 0
2451 2507 -2626 0
2451 2509 -2628 0
2451 2511 -2630 0
2451 2513 -2632 0
2451 2515 -2634 0
2451 2517 -2636 0
2451 2519 -2638 0
2451 2521 -2640 0
2451 2523 -2642 0
2451 2525 -2644 0
2451 2527 -2646 0
2451 2529 -2648 0
2451 2531 -2650 0
2451 2533 -2652 0
2451 2535 -2654 0
2453 -2624 0
2453 2506 -2626 0
2453 2507 -2628 0
2453 2509 -2630 0
2453 2511 -2632 0
2453 2513 -2634 0
2453 2515 -2636 0
2453 2517 -2638 0
2453 2519 -2640 0
2453 2521 -2642 0
2453 2523 -2644 0
2453 2525 -2646 0
2453 2527 -2648 0
2453 2529 -2650 0
2453 2531 -2652 0
2453 2533 -2654 0
2453 2535 -2656 0
2455 -2626 0
2455 2506 -2628 0
2455 2507 -2630 0
2455 2509 -2632 0
2455 2511 -2634 0
2455 2513 -2636 0
2455 2515 -2638 0
2455 2517 -2640 0
2455 2519 -2642 0
2455 2521 -2644 0
2455 2523 -2646 0
2455 2525 -2648 0
2455 2527 -2650 0
2455 2529 -2652 0
2455 2531 -2654 0
2455 2533 -2656 0
2455 2535 -2658 0
2457 -2628 0
2457 2506 -2630 0
2457 2507 -2632 0
2457 2509 -2634 0
2457 2511 -2636 0
2457 2513 -2638 0
2457 2515 -2640 0
2457 2517 -2642 0
2457 2519 -2644 0
2457 2521 -2646 0
2457 2523 -2648 0
2457 2525 -2650 0
2457 2527 -2652 0
2457 2529 -2654 0
2457 2531 -2656 0
2457 2533 -2658 0
2457 2535 -2660 0
2459 -2630 0
2459 2506 -2632 0
2459 2507 -2634 0
2459 2509 -2636 0
2459 2511 -2638 0
2459 2513 -2640 0
2459 2515 -2642 0
2459 2517 -2644 0
2459 2519 -2646 0
2459 2521 -2648 0
2459 2523 -2650 0
2459 2525 -2652 0
2459 2527 -2654 0
2459 2529 -2656 0
2459 2531 -2658 0
2459 2533 -2660 0
2459 2535 -2662 0
2461 -2632 0
2461 2506 -2634 0
2461 2507 -2636 0
2461 2509 -2638 0
2461 2511 -2640 0
2461 2513 -2642 0
2461 2515 -2644 0
2461 2517 -2646 0
2461 2519 -2648 0
2461 2521 -2650 0
2461 2523 -2652 0
2461 2525 -2654 0
2461 2527 -2656 0
2461 2529 -2658 0
2461 2531 -2660 0
2461 2533 -2662 0
2461 2535 -2664 0
2463 -2634 0
2463 2506 -2636 0
2463 2507 -2638 0
2463 2509 -2640 0
2463 2511 -2642 0
2463 2513 -2644 0
2463 2515 -2646 0
2463 2517 -2648 0
2463 2519 -2650 0
2463 2521 -2652 0
2463 2523 -2654 0
2463 2525 -2656 0
2463 2527 -2658 0
2463 2529 -2660 0
2463 2531 -2662 0
2463 2533 -2664 0
2463 2535 -2666 0
2465 -2636 0
2465 2506 -2638 0
2465 2507 -2640 0
2465 2509 -2642 0
2465 2511 -2644 0
2465 2513 -2646 0
2465 2515 -2648 0
2465 2517 -2650 0
2465 2519 -2652 0
2465 2521 -2654 0
2465 2523 -2656 0
2465 2525 -2658 0
2465 2527 -2660 0
2465 2529 -2662 0
2465 2531 -2664 0
2465 2533 -2666 0
2465 2535 -2668 0
2467 -2638 0
2467 2506 -2640 0
2467 2507 -2642 0
2467 2509 -2644 0
2467 2511 -2646 0
2467 2513 -2648 0
2467 2515 -2650 0
2467 2517 -2652 0
2467 2519 -2654 0
2467 2521 -2656 0
2467 2523 -2658 0
2467 2525 -2660 0
2467 2527 -2662 0
2467 2529 -2664 0
2467 2531 -2666 0
2467 2533 -2668 0
2467 2535 -2670 0
2469 -2640 0
2469 2506 -2642 0
2469 2507 -2644 0
2469 2509 -2646 0
2469 2511 -2648 0
2469 2513 -2650 0
2469 2515 -2652 0
2469 2517 -2654 0
2469 2519 -2656 0
2469 2521 -2658 0
2469 2523 -2660 0
2469 2525 -2662 0
2469 2527 -2664 0
2469 2529 -2666 0
2469 2531 -2668 0
2469 2533 -2670 0
2469 2535 -2672 0
2471 -2642 0
2471 2506 -2644 0
2471 2507 -2646 0
2471 2509 -2648 0
2471 2511 -2650 0
2471 2513 -2652 0
2471 2515 -2654 0
2471 2517 -2656 0
2471 2519 -2658 0
2471 2521 -2660 0
2471 2523 -2662 0
2471 2525 -2664 0
2471 2527 -2666 0
2471 2529 -2668 0
2471 2531 -2670 0
2471 2533 -2672 0
2471 2535 -2674 0
2473 -2644 0
2473 2506 -2646 0
2473 2507 -2648 0
2473 2509 -2650 0
2473 2511 -2652 0
2473 2513 -2654 0
2473 2515 -2656 0
2473 2517 -2658 0
2473 2519 -2660 0
2473 2521 -2662 0
2473 2523 -2664 0
2473 2525 -2666 0
2473 2527 -2668 0
2473 2529 -2670 0
2473 2531 -2672 0
2473 2533 -2674 0
2473 2535 -2676 0
c (0<=(aux479 + aux481 - aux484))
-2535 2676 0
-2533 2674 0
-2531 2672 0
-2529 2670 0
-2527 2668 0
-2525 2666 0
-2523 2664 0
-2521 2662 0
-2519 2660 0
-2517 2658 0
-2515 2656 0
-2513 2654 0
-2511 2652 0
-2509 2650 0
-2507 2648 0
-2506 2646 0
-2473 2676 0
-2473 -2535 2674 0
-2473 -2533 2672 0
-2473 -2531 2670 0
-2473 -2529 2668 0
-2473 -2527 2666 0
-2473 -2525 2664 0
-2473 -2523 2662 0
-2473 -2521 2660 0
-2473 -2519 2658 0
-2473 -2517 2656 0
-2473 -2515 2654 0
-2473 -2513 2652 0
-2473 -2511 2650 0
-2473 -2509 2648 0
-2473 -2507 2646 0
-2473 -2506 2644 0
-2471 2674 0
-2471 -2535 2672 0
-2471 -2533 2670 0
-2471 -2531 2668 0
-2471 -2529 2666 0
-2471 -2527 2664 0
-2471 -2525 2662 0
-2471 -2523 2660 0
-2471 -2521 2658 0
-2471 -2519 2656 0
-2471 -2517 2654 0
-2471 -2515 2652 0
-2471 -2513 2650 0
-2471 -2511 2648 0
-2471 -2509 2646 0
-2471 -2507 2644 0
-2471 -2506 2642 0
-2469 2672 0
-2469 -2535 2670 0
-2469 -2533 2668 0
-2469 -2531 2666 0
-2469 -2529 2664 0
-2469 -2527 2662 0
-2469 -2525 2660 0
-2469 -2523 2658 0
-2469 -2521 2656 0
-2469 -2519 2654 0
-2469 -2517 2652 0
-2469 -2515 2650 0
-2469 -2513 2648 0
-2469 -2511 2646 0
-2469 -2509 2644 0
-2469 -2507 2642 0
-2469 -2506 2640 0
-2467 2670 0
-2467 -2535 2668 0
-2467 -2533 2666 0
-2467 -2531 2664 0
-2467 -2529 2662 0
-2467 -2527 2660 0
-2467 -2525 2658 0
-2467 -2523 2656 0
-2467 -2521 2654 0
-2467 -2519 2652 0
-2467 -2517 2650 0
-2467 -2515 2648 0
-2467 -2513 2646 0
-2467 -2511 2644 0
-2467 -2509 2642 0
-2467 -2507 2640 0
-2467 -2506 2638 0
-2465 2668 0
-2465 -2535 2666 0
-2465 -2533 2664 0
-2465 -2531 2662 0
-2465 -2529 2660 0
-2465 -2527 2658 0
-2465 -2525 2656 0
-2465 -2523 2654 0
-2465 -2521 2652 0
-2465 -2519 2650 0
-2465 -2517 2648 0
-2465 -2515 2646 0
-2465 -2513 2644 0
-2465 -2511 2642 0
-2465 -2509 2640 0
-2465 -2507 2638 0
-2465 -2506 2636 0
-2463 2666 0
-2463 -2535 2664 0
-2463 -2533 2662 0
-2463 -2531 2660 0
-2463 -2529 2658 0
-2463 -2527 2656 0
-2463 -2525 2654 0
-2463 -2523 2652 0
-2463 -2521 2650 0
-2463 -2519 2648 0
-2463 -2517 2646 0
-2463 -2515 2644 0
-2463 -2513 2642 0
-2463 -2511 2640 0
-2463 -2509 2638 0
-2463 -2507 2636 0
-2463 -2506 2634 0
-2461 2664 0
-2461 -2535 2662 0
-2461 -2533 2660 0
-2461 -2531 2658 0
-2461 -2529 2656 0
-2461 -2527 2654 0
-2461 -2525 2652 0
-2461 -2523 2650 0
-2461 -2521 2648 0
-2461 -2519 2646 0
-2461 -2517 2644 0
-2461 -2515 2642 0
-2461 -2513 2640 0
-2461 -2511 2638 0
-2461 -2509 2636 0
-2461 -2507 2634 0
-2461 -2506 2632 0
-2459 2662 0
-2459 -2535 2660 0
-2459 -2533 2658 0
-2459 -2531 2656 0
-2459 -2529 2654 0
-2459 -2527 2652 0
-2459 -2525 2650 0
-2459 -2523 2648 0
-2459 -2521 2646 0
-2459 -2519 2644 0
-2459 -2517 2642 0
-2459 -2515 2640 0
-2459 -2513 2638 0
-2459 -2511 2636 0
-2459 -2509 2634 0
-2459 -2507 2632 0
-2459 -2506 2630 0
-2457 2660 0
-2457 -2535 2658 0
-2457 -2533 2656 0
-2457 -2531 2654 0
-2457 -2529 2652 0
-2457 -2527 2650 0
-2457 -2525 2648 0
-2457 -2523 2646 0
-2457 -2521 2644 0
-2457 -2519 2642 0
-2457 -2517 2640 0
-2457 -2515 2638 0
-2457 -2513 2636 0
-2457 -2511 2634 0
-2457 -2509 2632 0
-2457 -2507 2630 0
-2457 -2506 2628 0
-2455 2658 0
-2455 -2535 2656 0
-2455 -2533 2654 0
-2455 -2531 2652 0
-2455 -2529 2650 0
-2455 -2527 2648 0
-2455 -2525 2646 0
-2455 -2523 2644 0
-2455 -2521 2642 0
-2455 -2519 2640 0
-2455 -2517 2638 0
-2455 -2515 2636 0
-2455 -2513 2634 0
-2455 -2511 2632 0
-2455 -2509 2630 0
-2455 -2507 2628 0
-2455 -2506 2626 0
-2453 2656 0
-2453 -2535 2654 0
-2453 -2533 2652 0
-2453 -2531 2650 0
-2453 -2529 2648 0
-2453 -2527 2646 0
-2453 -2525 2644 0
-2453 -2523 2642 0
-2453 -2521 2640 0
-2453 -2519 2638 0
-2453 -2517 2636 0
-2453 -2515 2634 0
-2453 -2513 2632 0
-2453 -2511 2630 0
-2453 -2509 2628 0
-2453 -2507 2626 0
-2453 -2506 2624 0
-2451 2654 0
-2451 -2535 2652 0
-2451 -2533 2650 0
-2451 -2531 2648 0
-2451 -2529 2646 0
-2451 -2527 2644 0
-2451 -2525 2642 0
-2451 -2523 2640 0
-2451 -2521 2638 0
-2451 -2519 2636 0
-2451 -2517 2634 0
-2451 -2515 2632 0
-2451 -2513 2630 0
-2451 -2511 2628 0
-2451 -2509 2626 0
-2451 -2507 2624 0
-2451 -2506 2622 0
-2449 2652 0
-2449 -2535 2650 0
-2449 -2533 2648 0
-2449 -2531 2646 0
-2449 -2529 2644 0
-2449 -2527 2642 0
-2449 -2525 2640 0
-2449 -2523 2638 0
-2449 -2521 2636 0
-2449 -2519 2634 0
-2449 -2517 2632 0
-2449 -2515 2630 0
-2449 -2513 2628 0
-2449 -2511 2626 0
-2449 -2509 2624 0
-2449 -2507 2622 0
-2449 -2506 2620 0
-2447 2650 0
-2447 -2535 2648 0
-2447 -2533 2646 0
-2447 -2531 2644 0
-2447 -2529 2642 0
-2447 -2527 2640 0
-2447 -2525 2638 0
-2447 -2523 2636 0
-2447 -2521 2634 0
-2447 -2519 2632 0
-2447 -2517 2630 0
-2447 -2515 2628 0
-2447 -2513 2626 0
-2447 -2511 2624 0
-2447 -2509 2622 0
-2447 -2507 2620 0
-2447 -2506 2618 0
-2445 2648 0
-2445 -2535 2646 0
-2445 -2533 2644 0
-2445 -2531 2642 0
-2445 -2529 2640 0
-2445 -2527 2638 0
-2445 -2525 2636 0
-2445 -2523 2634 0
-2445 -2521 2632 0
-2445 -2519 2630 0
-2445 -2517 2628 0
-2445 -2515 2626 0
-2445 -2513 2624 0
-2445 -2511 2622 0
-2445 -2509 2620 0
-2445 -2507 2618 0
-2445 -2506 2616 0
-2444 2646 0
-2444 -2535 2644 0
-2444 -2533 2642 0
-2444 -2531 2640 0
-2444 -2529 2638 0
-2444 -2527 2636 0
-2444 -2525 2634 0
-2444 -2523 2632 0
-2444 -2521 2630 0
-2444 -2519 2628 0
-2444 -2517 2626 0
-2444 -2515 2624 0
-2444 -2513 2622 0
-2444 -2511 2620 0
-2444 -2509 2618 0
-2444 -2507 2616 0
-2444 -2506 2615 0
c (( - aux485 + shift(x_00006_00004, -1) + shift(x_00002_00004, -1))<=0)
182 -2678 0
183 -2679 0
185 -2681 0
187 -2683 0
189 -2685 0
191 -2687 0
193 -2689 0
195 -2691 0
722 -2678 0
722 182 -2679 0
722 183 -2681 0
722 185 -2683 0
722 187 -2685 0
722 189 -2687 0
722 191 -2689 0
722 193 -2691 0
722 195 -2693 0
723 -2679 0
723 182 -2681 0
723 183 -2683 0
723 185 -2685 0
723 187 -2687 0
723 189 -2689 0
723 191 -2691 0
723 193 -2693 0
723 195 -2695 0
725 -2681 0
725 182 -2683 0
725 183 -2685 0
725 185 -2687 0
725 187 -2689 0
725 189 -2691 0
725 191 -2693 0
725 193 -2695 0
725 195 -2697 0
727 -2683 0
727 182 -2685 0
727 183 -2687 0
727 185 -2689 0
727 187 -2691 0
727 189 -2693 0
727 191 -2695 0
727 193 -2697 0
727 195 -2699 0
729 -2685 0
729 182 -2687 0
729 183 -2689 0
729 185 -2691 0
729 187 -2693 0
729 189 -2695 0
729 191 -2697 0
729 193 -2699 0
729 195 -2701 0
731 -2687 0
731 182 -2689 0
731 183 -2691 0
731 185 -2693 0
731 187 -2695 0
731 189 -2697 0
731 191 -2699 0
731 193 -2701 0
731 195 -2703 0
733 -2689 0
733 182 -2691 0
733 183 -2693 0
733 185 -2695 0
733 187 -2697 0
733 189 -2699 0
733 191 -2701 0
733 193 -2703 0
733 195 -2705 0
735 -2691 0
735 182 -2693 0
735 183 -2695 0
735 185 -2697 0
735 187 -2699 0
735 189 -2701 0
735 191 -2703 0
735 193 -2705 0
735 195 -2707 0
c (0<=( - aux485 + shift(x_00006_00004, -1) + shift(x_00002_00004, -1)))
-195 2707 0
-193 2705 0
-191 2703 0
-189 2701 0
-187 2699 0
-185 2697 0
-183 2695 0
-182 2693 0
-735 2707 0
-735 -195 2705 0
-735 -193 2703 0
-735 -191 2701 0
-735 -189 2699 0
-735 -187 2697 0
-735 -185 2695 0
-735 -183 2693 0
-735 -182 2691 0
-733 2705 0
-733 -195 2703 0
-733 -193 2701 0
-733 -191 2699 0
-733 -189 2697 0
-733 -187 2695 0
-733 -185 2693 0
-733 -183 2691 0
-733 -182 2689 0
-731 2703 0
-731 -195 2701 0
-731 -193 2699 0
-731 -191 2697 0
-731 -189 2695 0
-731 -187 2693 0
-731 -185 2691 0
-731 -183 2689 0
-731 -182 2687 0
-729 2701 0
-729 -195 2699 0
-729 -193 2697 0
-729 -191 2695 0
-729 -189 2693 0
-729 -187 2691 0
-729 -185 2689 0
-729 -183 2687 0
-729 -182 2685 0
-727 2699 0
-727 -195 2697 0
-727 -193 2695 0
-727 -191 2693 0
-727 -189 2691 0
-727 -187 2689 0
-727 -185 2687 0
-727 -183 2685 0
-727 -182 2683 0
-725 2697 0
-725 -195 2695 0
-725 -193 2693 0
-725 -191 2691 0
-725 -189 2689 0
-725 -187 2687 0
-725 -185 2685 0
-725 -183 2683 0
-725 -182 2681 0
-723 2695 0
-723 -195 2693 0
-723 -193 2691 0
-723 -191 2689 0
-723 -189 2687 0
-723 -187 2685 0
-723 -185 2683 0
-723 -183 2681 0
-723 -182 2679 0
-722 2693 0
-722 -195 2691 0
-722 -193 2689 0
-722 -191 2687 0
-722 -189 2685 0
-722 -187 2683 0
-722 -185 2681 0
-722 -183 2679 0
-722 -182 2678 0
c ((shift(x_00007_00004, -1) - aux486 + shift(x_00001_00004, -1))<=0)
47 -2709 0
48 -2710 0
50 -2712 0
52 -2714 0
54 -2716 0
56 -2718 0
58 -2720 0
60 -2722 0
857 -2709 0
857 47 -2710 0
857 48 -2712 0
857 50 -2714 0
857 52 -2716 0
857 54 -2718 0
857 56 -2720 0
857 58 -2722 0
857 60 -2724 0
858 -2710 0
858 47 -2712 0
858 48 -2714 0
858 50 -2716 0
858 52 -2718 0
858 54 -2720 0
858 56 -2722 0
858 58 -2724 0
858 60 -2726 0
860 -2712 0
860 47 -2714 0
860 48 -2716 0
860 50 -2718 0
860 52 -2720 0
860 54 -2722 0
860 56 -2724 0
860 58 -2726 0
860 60 -2728 0
862 -2714 0
862 47 -2716 0
862 48 -2718 0
862 50 -2720 0
862 52 -2722 0
862 54 -2724 0
862 56 -2726 0
862 58 -2728 0
862 60 -2730 0
864 -2716 0
864 47 -2718 0
864 48 -2720 0
864 50 -2722 0
864 52 -2724 0
864 54 -2726 0
864 56 -2728 0
864 58 -2730 0
864 60 -2732 0
866 -2718 0
866 47 -2720 0
866 48 -2722 0
866 50 -2724 0
866 52 -2726 0
866 54 -2728 0
866 56 -2730 0
866 58 -2732 0
866 60 -2734 0
868 -2720 0
868 47 -2722 0
868 48 -2724 0
868 50 -2726 0
868 52 -2728 0
868 54 -2730 0
868 56 -2732 0
868 58 -2734 0
868 60 -2736 0
870 -2722 0
870 47 -2724 0
870 48 -2726 0
870 50 -2728 0
870 52 -2730 0
870 54 -2732 0
870 56 -2734 0
870 58 -2736 0
870 60 -2738 0
c (0<=(shift(x_00007_00004, -1) - aux486 + shift(x_00001_00004, -1)))
-60 2738 0
-58 2736 0
-56 2734 0
-54 2732 0
-52 2730 0
-50 2728 0
-48 2726 0
-47 2724 0
-870 2738 0
-870 -60 2736 0
-870 -58 2734 0
-870 -56 2732 0
-870 -54 2730 0
-870 -52 2728 0
-870 -50 2726 0
-870 -48 2724 0
-870 -47 2722 0
-868 2736 0
-868 -60 2734 0
-868 -58 2732 0
-868 -56 2730 0
-868 -54 2728 0
-868 -52 2726 0
-868 -50 2724 0
-868 -48 2722 0
-868 -47 2720 0
-866 2734 0
-866 -60 2732 0
-866 -58 2730 0
-866 -56 2728 0
-866 -54 2726 0
-866 -52 2724 0
-866 -50 2722 0
-866 -48 2720 0
-866 -47 2718 0
-864 2732 0
-864 -60 2730 0
-864 -58 2728 0
-864 -56 2726 0
-864 -54 2724 0
-864 -52 2722 0
-864 -50 2720 0
-864 -48 2718 0
-864 -47 2716 0
-862 2730 0
-862 -60 2728 0
-862 -58 2726 0
-862 -56 2724 0
-862 -54 2722 0
-862 -52 2720 0
-862 -50 2718 0
-862 -48 2716 0
-862 -47 2714 0
-860 2728 0
-860 -60 2726 0
-860 -58 2724 0
-860 -56 2722 0
-860 -54 2720 0
-860 -52 2718 0
-860 -50 2716 0
-860 -48 2714 0
-860 -47 2712 0
-858 2726 0
-858 -60 2724 0
-858 -58 2722 0
-858 -56 2720 0
-858 -54 2718 0
-858 -52 2716 0
-858 -50 2714 0
-858 -48 2712 0
-858 -47 2710 0
-857 2724 0
-857 -60 2722 0
-857 -58 2720 0
-857 -56 2718 0
-857 -54 2716 0
-857 -52 2714 0
-857 -50 2712 0
-857 -48 2710 0
-857 -47 2709 0
c (( - aux487 + shift(x_00005_00004, -1) + shift(x_00008_00004, -1))<=0)
992 -2740 0
993 -2741 0
995 -2743 0
997 -2745 0
999 -2747 0
1001 -2749 0
1003 -2751 0
1005 -2753 0
587 -2740 0
587 992 -2741 0
587 993 -2743 0
587 995 -2745 0
587 997 -2747 0
587 999 -2749 0
587 1001 -2751 0
587 1003 -2753 0
587 1005 -2755 0
588 -2741 0
588 992 -2743 0
588 993 -2745 0
588 995 -2747 0
588 997 -2749 0
588 999 -2751 0
588 1001 -2753 0
588 1003 -2755 0
588 1005 -2757 0
590 -2743 0
590 992 -2745 0
590 993 -2747 0
590 995 -2749 0
590 997 -2751 0
590 999 -2753 0
590 1001 -2755 0
590 1003 -2757 0
590 1005 -2759 0
592 -2745 0
592 992 -2747 0
592 993 -2749 0
592 995 -2751 0
592 997 -2753 0
592 999 -2755 0
592 1001 -2757 0
592 1003 -2759 0
592 1005 -2761 0
594 -2747 0
594 992 -2749 0
594 993 -2751 0
594 995 -2753 0
594 997 -2755 0
594 999 -2757 0
594 1001 -2759 0
594 1003 -2761 0
594 1005 -2763 0
596 -2749 0
596 992 -2751 0
596 993 -2753 0
596 995 -2755 0
596 997 -2757 0
596 999 -2759 0
596 1001 -2761 0
596 1003 -2763 0
596 1005 -2765 0
598 -2751 0
598 992 -2753 0
598 993 -2755 0
598 995 -2757 0
598 997 -2759 0
598 999 -2761 0
598 1001 -2763 0
598 1003 -2765 0
598 1005 -2767 0
600 -2753 0
600 992 -2755 0
600 993 -2757 0
600 995 -2759 0
600 997 -2761 0
600 999 -2763 0
600 1001 -2765 0
600 1003 -2767 0
600 1005 -2769 0
c (0<=( - aux487 + shift(x_00005_00004, -1) + shift(x_00008_00004, -1)))
-1005 2769 0
-1003 2767 0
-1001 2765 0
-999 2763 0
-997 2761 0
-995 2759 0
-993 2757 0
-992 2755 0
-600 2769 0
-600 -1005 2767 0
-600 -1003 2765 0
-600 -1001 2763 0
-600 -999 2761 0
-600 -997 2759 0
-600 -995 2757 0
-600 -993 2755 0
-600 -992 2753 0
-598 2767 0
-598 -1005 2765 0
-598 -1003 2763 0
-598 -1001 2761 0
-598 -999 2759 0
-598 -997 2757 0
-598 -995 2755 0
-598 -993 2753 0
-598 -992 2751 0
-596 2765 0
-596 -1005 2763 0
-596 -1003 2761 0
-596 -1001 2759 0
-596 -999 2757 0
-596 -997 2755 0
-596 -995 2753 0
-596 -993 2751 0
-596 -992 2749 0
-594 2763 0
-594 -1005 2761 0
-594 -1003 2759 0
-594 -1001 2757 0
-594 -999 2755 0
-594 -997 2753 0
-594 -995 2751 0
-594 -993 2749 0
-594 -992 2747 0
-592 2761 0
-592 -1005 2759 0
-592 -1003 2757 0
-592 -1001 2755 0
-592 -999 2753 0
-592 -997 2751 0
-592 -995 2749 0
-592 -993 2747 0
-592 -992 2745 0
-590 2759 0
-590 -1005 2757 0
-590 -1003 2755 0
-590 -1001 2753 0
-590 -999 2751 0
-590 -997 2749 0
-590 -995 2747 0
-590 -993 2745 0
-590 -992 2743 0
-588 2757 0
-588 -1005 2755 0
-588 -1003 2753 0
-588 -1001 2751 0
-588 -999 2749 0
-588 -997 2747 0
-588 -995 2745 0
-588 -993 2743 0
-588 -992 2741 0
-587 2755 0
-587 -1005 2753 0
-587 -1003 2751 0
-587 -1001 2749 0
-587 -999 2747 0
-587 -997 2745 0
-587 -995 2743 0
-587 -993 2741 0
-587 -992 2740 0
c (( - aux488 + shift(x_00004_00004, -1) + shift(x_00009_00004, -1))<=0)
1127 -2771 0
1128 -2772 0
1130 -2774 0
1132 -2776 0
1134 -2778 0
1136 -2780 0
1138 -2782 0
1140 -2784 0
452 -2771 0
452 1127 -2772 0
452 1128 -2774 0
452 1130 -2776 0
452 1132 -2778 0
452 1134 -2780 0
452 1136 -2782 0
452 1138 -2784 0
452 1140 -2786 0
453 -2772 0
453 1127 -2774 0
453 1128 -2776 0
453 1130 -2778 0
453 1132 -2780 0
453 1134 -2782 0
453 1136 -2784 0
453 1138 -2786 0
453 1140 -2788 0
455 -2774 0
455 1127 -2776 0
455 1128 -2778 0
455 1130 -2780 0
455 1132 -2782 0
455 1134 -2784 0
455 1136 -2786 0
455 1138 -2788 0
455 1140 -2790 0
457 -2776 0
457 1127 -2778 0
457 1128 -2780 0
457 1130 -2782 0
457 1132 -2784 0
457 1134 -2786 0
457 1136 -2788 0
457 1138 -2790 0
457 1140 -2792 0
459 -2778 0
459 1127 -2780 0
459 1128 -2782 0
459 1130 -2784 0
459 1132 -2786 0
459 1134 -2788 0
459 1136 -2790 0
459 1138 -2792 0
459 1140 -2794 0
461 -2780 0
461 1127 -2782 0
461 1128 -2784 0
461 1130 -2786 0
461 1132 -2788 0
461 1134 -2790 0
461 1136 -2792 0
461 1138 -2794 0
461 1140 -2796 0
463 -2782 0
463 1127 -2784 0
463 1128 -2786 0
463 1130 -2788 0
463 1132 -2790 0
463 1134 -2792 0
463 1136 -2794 0
463 1138 -2796 0
463 1140 -2798 0
465 -2784 0
465 1127 -2786 0
465 1128 -2788 0
465 1130 -2790 0
465 1132 -2792 0
465 1134 -2794 0
465 1136 -2796 0
465 1138 -2798 0
465 1140 -2800 0
c (0<=( - aux488 + shift(x_00004_00004, -1) + shift(x_00009_00004, -1)))
-1140 2800 0
-1138 2798 0
-1136 2796 0
-1134 2794 0
-1132 2792 0
-1130 2790 0
-1128 2788 0
-1127 2786 0
-465 2800 0
-465 -1140 2798 0
-465 -1138 2796 0
-465 -1136 2794 0
-465 -1134 2792 0
-465 -1132 2790 0
-465 -1130 2788 0
-465 -1128 2786 0
-465 -1127 2784 0
-463 2798 0
-463 -1140 2796 0
-463 -1138 2794 0
-463 -1136 2792 0
-463 -1134 2790 0
-463 -1132 2788 0
-463 -1130 2786 0
-463 -1128 2784 0
-463 -1127 2782 0
-461 2796 0
-461 -1140 2794 0
-461 -1138 2792 0
-461 -1136 2790 0
-461 -1134 2788 0
-461 -1132 2786 0
-461 -1130 2784 0
-461 -1128 2782 0
-461 -1127 2780 0
-459 2794 0
-459 -1140 2792 0
-459 -1138 2790 0
-459 -1136 2788 0
-459 -1134 2786 0
-459 -1132 2784 0
-459 -1130 2782 0
-459 -1128 2780 0
-459 -1127 2778 0
-457 2792 0
-457 -1140 2790 0
-457 -1138 2788 0
-457 -1136 2786 0
-457 -1134 2784 0
-457 -1132 2782 0
-457 -1130 2780 0
-457 -1128 2778 0
-457 -1127 2776 0
-455 2790 0
-455 -1140 2788 0
-455 -1138 2786 0
-455 -1136 2784 0
-455 -1134 2782 0
-455 -1132 2780 0
-455 -1130 2778 0
-455 -1128 2776 0
-455 -1127 2774 0
-453 2788 0
-453 -1140 2786 0
-453 -1138 2784 0
-453 -1136 2782 0
-453 -1134 2780 0
-453 -1132 2778 0
-453 -1130 2776 0
-453 -1128 2774 0
-453 -1127 2772 0
-452 2786 0
-452 -1140 2784 0
-452 -1138 2782 0
-452 -1136 2780 0
-452 -1134 2778 0
-452 -1132 2776 0
-452 -1130 2774 0
-452 -1128 2772 0
-452 -1127 2771 0
c ((aux488 - aux489 + shift(x_00003_00004, -1))<=0)
2771 -2802 0
2772 -2803 0
2774 -2805 0
2776 -2807 0
2778 -2809 0
2780 -2811 0
2782 -2813 0
2784 -2815 0
2786 -2817 0
2788 -2819 0
2790 -2821 0
2792 -2823 0
2794 -2825 0
2796 -2827 0
2798 -2829 0
2800 -2831 0
317 -2802 0
317 2771 -2803 0
317 2772 -2805 0
317 2774 -2807 0
317 2776 -2809 0
317 2778 -2811 0
317 2780 -2813 0
317 2782 -2815 0
317 2784 -2817 0
317 2786 -2819 0
317 2788 -2821 0
317 2790 -2823 0
317 2792 -2825 0
317 2794 -2827 0
317 2796 -2829 0
317 2798 -2831 0
317 2800 -2833 0
318 -2803 0
318 2771 -2805 0
318 2772 -2807 0
318 2774 -2809 0
318 2776 -2811 0
318 2778 -2813 0
318 2780 -2815 0
318 2782 -2817 0
318 2784 -2819 0
318 2786 -2821 0
318 2788 -2823 0
318 2790 -2825 0
318 2792 -2827 0
318 2794 -2829 0
318 2796 -2831 0
318 2798 -2833 0
318 2800 -2835 0
320 -2805 0
320 2771 -2807 0
320 2772 -2809 0
320 2774 -2811 0
320 2776 -2813 0
320 2778 -2815 0
320 2780 -2817 0
320 2782 -2819 0
320 2784 -2821 0
320 2786 -2823 0
320 2788 -2825 0
320 2790 -2827 0
320 2792 -2829 0
320 2794 -2831 0
320 2796 -2833 0
320 2798 -2835 0
320 2800 -2837 0
322 -2807 0
322 2771 -2809 0
322 2772 -2811 0
322 2774 -2813 0
322 2776 -2815 0
322 2778 -2817 0
322 2780 -2819 0
322 2782 -2821 0
322 2784 -2823 0
322 2786 -2825 0
322 2788 -2827 0
322 2790 -2829 0
322 2792 -2831 0
322 2794 -2833 0
322 2796 -2835 0
322 2798 -2837 0
322 2800 -2839 0
324 -2809 0
324 2771 -2811 0
324 2772 -2813 0
324 2774 -2815 0
324 2776 -2817 0
324 2778 -2819 0
324 2780 -2821 0
324 2782 -2823 0
324 2784 -2825 0
324 2786 -2827 0
324 2788 -2829 0
324 2790 -2831 0
324 2792 -2833 0
324 2794 -2835 0
324 2796 -2837 0
324 2798 -2839 0
324 2800 -2841 0
326 -2811 0
326 2771 -2813 0
326 2772 -2815 0
326 2774 -2817 0
326 2776 -2819 0
326 2778 -2821 0
326 2780 -2823 0
326 2782 -2825 0
326 2784 -2827 0
326 2786 -2829 0
326 2788 -2831 0
326 2790 -2833 0
326 2792 -2835 0
326 2794 -2837 0
326 2796 -2839 0
326 2798 -2841 0
326 2800 -2843 0
328 -2813 0
328 2771 -2815 0
328 2772 -2817 0
328 2774 -2819 0
328 2776 -2821 0
328 2778 -2823 0
328 2780 -2825 0
328 2782 -2827 0
328 2784 -2829 0
328 2786 -2831 0
328 2788 -2833 0
328 2790 -2835 0
328 2792 -2837 0
328 2794 -2839 0
328 2796 -2841 0
328 2798 -2843 0
328 2800 -2845 0
330 -2815 0
330 2771 -2817 0
330 2772 -2819 0
330 2774 -2821 0
330 2776 -2823 0
330 2778 -2825 0
330 2780 -2827 0
330 2782 -2829 0
330 2784 -2831 0
330 2786 -2833 0
330 2788 -2835 0
330 2790 -2837 0
330 2792 -2839 0
330 2794 -2841 0
330 2796 -2843 0
330 2798 -2845 0
330 2800 -2847 0
c (0<=(aux488 - aux489 + shift(x_00003_00004, -1)))
-2800 2847 0
-2798 2845 0
-2796 2843 0
-2794 2841 0
-2792 2839 0
-2790 2837 0
-2788 2835 0
-2786 2833 0
-2784 2831 0
-2782 2829 0
-2780 2827 0
-2778 2825 0
-2776 2823 0
-2774 2821 0
-2772 2819 0
-2771 2817 0
-330 2847 0
-330 -2800 2845 0
-330 -2798 2843 0
-330 -2796 2841 0
-330 -2794 2839 0
-330 -2792 2837 0
-330 -2790 2835 0
-330 -2788 2833 0
-330 -2786 2831 0
-330 -2784 2829 0
-330 -2782 2827 0
-330 -2780 2825 0
-330 -2778 2823 0
-330 -2776 2821 0
-330 -2774 2819 0
-330 -2772 2817 0
-330 -2771 2815 0
-328 2845 0
-328 -2800 2843 0
-328 -2798 2841 0
-328 -2796 2839 0
-328 -2794 2837 0
-328 -2792 2835 0
-328 -2790 2833 0
-328 -2788 2831 0
-328 -2786 2829 0
-328 -2784 2827 0
-328 -2782 2825 0
-328 -2780 2823 0
-328 -2778 2821 0
-328 -2776 2819 0
-328 -2774 2817 0
-328 -2772 2815 0
-328 -2771 2813 0
-326 2843 0
-326 -2800 2841 0
-326 -2798 2839 0
-326 -2796 2837 0
-326 -2794 2835 0
-326 -2792 2833 0
-326 -2790 2831 0
-326 -2788 2829 0
-326 -2786 2827 0
-326 -2784 2825 0
-326 -2782 2823 0
-326 -2780 2821 0
-326 -2778 2819 0
-326 -2776 2817 0
-326 -2774 2815 0
-326 -2772 2813 0
-326 -2771 2811 0
-324 2841 0
-324 -2800 2839 0
-324 -2798 2837 0
-324 -2796 2835 0
-324 -2794 2833 0
-324 -2792 2831 0
-324 -2790 2829 0
-324 -2788 2827 0
-324 -2786 2825 0
-324 -2784 2823 0
-324 -2782 2821 0
-324 -2780 2819 0
-324 -2778 2817 0
-324 -2776 2815 0
-324 -2774 2813 0
-324 -2772 2811 0
-324 -2771 2809 0
-322 2839 0
-322 -2800 2837 0
-322 -2798 2835 0
-322 -2796 2833 0
-322 -2794 2831 0
-322 -2792 2829 0
-322 -2790 2827 0
-322 -2788 2825 0
-322 -2786 2823 0
-322 -2784 2821 0
-322 -2782 2819 0
-322 -2780 2817 0
-322 -2778 2815 0
-322 -2776 2813 0
-322 -2774 2811 0
-322 -2772 2809 0
-322 -2771 2807 0
-320 2837 0
-320 -2800 2835 0
-320 -2798 2833 0
-320 -2796 2831 0
-320 -2794 2829 0
-320 -2792 2827 0
-320 -2790 2825 0
-320 -2788 2823 0
-320 -2786 2821 0
-320 -2784 2819 0
-320 -2782 2817 0
-320 -2780 2815 0
-320 -2778 2813 0
-320 -2776 2811 0
-320 -2774 2809 0
-320 -2772 2807 0
-320 -2771 2805 0
-318 2835 0
-318 -2800 2833 0
-318 -2798 2831 0
-318 -2796 2829 0
-318 -2794 2827 0
-318 -2792 2825 0
-318 -2790 2823 0
-318 -2788 2821 0
-318 -2786 2819 0
-318 -2784 2817 0
-318 -2782 2815 0
-318 -2780 2813 0
-318 -2778 2811 0
-318 -2776 2809 0
-318 -2774 2807 0
-318 -2772 2805 0
-318 -2771 2803 0
-317 2833 0
-317 -2800 2831 0
-317 -2798 2829 0
-317 -2796 2827 0
-317 -2794 2825 0
-317 -2792 2823 0
-317 -2790 2821 0
-317 -2788 2819 0
-317 -2786 2817 0
-317 -2784 2815 0
-317 -2782 2813 0
-317 -2780 2811 0
-317 -2778 2809 0
-317 -2776 2807 0
-317 -2774 2805 0
-317 -2772 2803 0
-317 -2771 2802 0
c ((aux485 + aux487 - aux490)<=0)
2740 -2849 0
2741 -2850 0
2743 -2852 0
2745 -2854 0
2747 -2856 0
2749 -2858 0
2751 -2860 0
2753 -2862 0
2755 -2864 0
2757 -2866 0
2759 -2868 0
2761 -2870 0
2763 -2872 0
2765 -2874 0
2767 -2876 0
2769 -2878 0
2678 -2849 0
2678 2740 -2850 0
2678 2741 -2852 0
2678 2743 -2854 0
2678 2745 -2856 0
2678 2747 -2858 0
2678 2749 -2860 0
2678 2751 -2862 0
2678 2753 -2864 0
2678 2755 -2866 0
2678 2757 -2868 0
2678 2759 -2870 0
2678 2761 -2872 0
2678 2763 -2874 0
2678 2765 -2876 0
2678 2767 -2878 0
2678 2769 -2880 0
2679 -2850 0
2679 2740 -2852 0
2679 2741 -2854 0
2679 2743 -2856 0
2679 2745 -2858 0
2679 2747 -2860 0
2679 2749 -2862 0
2679 2751 -2864 0
2679 2753 -2866 0
2679 2755 -2868 0
2679 2757 -2870 0
2679 2759 -2872 0
2679 2761 -2874 0
2679 2763 -2876 0
2679 2765 -2878 0
2679 2767 -2880 0
2679 2769 -2882 0
2681 -2852 0
2681 2740 -2854 0
2681 2741 -2856 0
2681 2743 -2858 0
2681 2745 -2860 0
2681 2747 -2862 0
2681 2749 -2864 0
2681 2751 -2866 0
2681 2753 -2868 0
2681 2755 -2870 0
2681 2757 -2872 0
2681 2759 -2874 0
2681 2761 -2876 0
2681 2763 -2878 0
2681 2765 -2880 0
2681 2767 -2882 0
2681 2769 -2884 0
2683 -2854 0
2683 2740 -2856 0
2683 2741 -2858 0
2683 2743 -2860 0
2683 2745 -2862 0
2683 2747 -2864 0
2683 2749 -2866 0
2683 2751 -2868 0
2683 2753 -2870 0
2683 2755 -2872 0
2683 2757 -2874 0
2683 2759 -2876 0
2683 2761 -2878 0
2683 2763 -2880 0
2683 2765 -2882 0
2683 2767 -2884 0
2683 2769 -2886 0
2685 -2856 0
2685 2740 -2858 0
2685 2741 -2860 0
2685 2743 -2862 0
2685 2745 -2864 0
2685 2747 -2866 0
2685 2749 -2868 0
2685 2751 -2870 0
2685 2753 -2872 0
2685 2755 -2874 0
2685 2757 -2876 0
2685 2759 -2878 0
2685 2761 -2880 0
2685 2763 -2882 0
2685 2765 -2884 0
2685 2767 -2886 0
2685 2769 -2888 0
2687 -2858 0
2687 2740 -2860 0
2687 2741 -2862 0
2687 2743 -2864 0
2687 2745 -2866 0
2687 2747 -2868 0
2687 2749 -2870 0
2687 2751 -2872 0
2687 2753 -2874 0
2687 2755 -2876 0
2687 2757 -2878 0
2687 2759 -2880 0
2687 2761 -2882 0
2687 2763 -2884 0
2687 2765 -2886 0
2687 2767 -2888 0
2687 2769 -2890 0
2689 -2860 0
2689 2740 -2862 0
2689 2741 -2864 0
2689 2743 -2866 0
2689 2745 -2868 0
2689 2747 -2870 0
2689 2749 -2872 0
2689 2751 -2874 0
2689 2753 -2876 0
2689 2755 -2878 0
2689 2757 -2880 0
2689 2759 -2882 0
2689 2761 -2884 0
2689 2763 -2886 0
2689 2765 -2888 0
2689 2767 -2890 0
2689 2769 -2892 0
2691 -2862 0
2691 2740 -2864 0
2691 2741 -2866 0
2691 2743 -2868 0
2691 2745 -2870 0
2691 2747 -2872 0
2691 2749 -2874 0
2691 2751 -2876 0
2691 2753 -2878 0
2691 2755 -2880 0
2691 2757 -2882 0
2691 2759 -2884 0
2691 2761 -2886 0
2691 2763 -2888 0
2691 2765 -2890 0
2691 2767 -2892 0
2691 2769 -2894 0
2693 -2864 0
2693 2740 -2866 0
2693 2741 -2868 0
2693 2743 -2870 0
2693 2745 -2872 0
2693 2747 -2874 0
2693 2749 -2876 0
2693 2751 -2878 0
2693 2753 -2880 0
2693 2755 -2882 0
2693 2757 -2884 0
2693 2759 -2886 0
2693 2761 -2888 0
2693 2763 -2890 0
2693 2765 -2892 0
2693 2767 -2894 0
2693 2769 -2896 0
2695 -2866 0
2695 2740 -2868 0
2695 2741 -2870 0
2695 2743 -2872 0
2695 2745 -2874 0
2695 2747 -2876 0
2695 2749 -2878 0
2695 2751 -2880 0
2695 2753 -2882 0
2695 2755 -2884 0
2695 2757 -2886 0
2695 2759 -2888 0
2695 2761 -2890 0
2695 2763 -2892 0
2695 2765 -2894 0
2695 2767 -2896 0
2695 2769 -2898 0
2697 -2868 0
2697 2740 -2870 0
2697 2741 -2872 0
2697 2743 -2874 0
2697 2745 -2876 0
2697 2747 -2878 0
2697 2749 -2880 0
2697 2751 -2882 0
2697 2753 -2884 0
2697 2755 -2886 0
2697 2757 -2888 0
2697 2759 -2890 0
2697 2761 -2892 0
2697 2763 -2894 0
2697 2765 -2896 0
2697 2767 -2898 0
2697 2769 -2900 0
2699 -2870 0
2699 2740 -2872 0
2699 2741 -2874 0
2699 2743 -2876 0
2699 2745 -2878 0
2699 2747 -2880 0
2699 2749 -2882 0
2699 2751 -2884 0
2699 2753 -2886 0
2699 2755 -2888 0
2699 2757 -2890 0
2699 2759 -2892 0
2699 2761 -2894 0
2699 2763 -2896 0
2699 2765 -2898 0
2699 2767 -2900 0
2699 2769 -2902 0
2701 -2872 0
2701 2740 -2874 0
2701 2741 -2876 0
2701 2743 -2878 0
2701 2745 -2880 0
2701 2747 -2882 0
2701 2749 -2884 0
2701 2751 -2886 0
2701 2753 -2888 0
2701 2755 -2890 0
2701 2757 -2892 0
2701 2759 -2894 0
2701 2761 -2896 0
2701 2763 -2898 0
2701 2765 -2900 0
2701 2767 -2902 0
2701 2769 -2904 0
2703 -2874 0
2703 2740 -2876 0
2703 2741 -2878 0
2703 2743 -2880 0
2703 2745 -2882 0
2703 2747 -2884 0
2703 2749 -2886 0
2703 2751 -2888 0
2703 2753 -2890 0
2703 2755 -2892 0
2703 2757 -2894 0
2703 2759 -2896 0
2703 2761 -2898 0
2703 2763 -2900 0
2703 2765 -2902 0
2703 2767 -2904 0
2703 2769 -2906 0
2705 -2876 0
2705 2740 -2878 0
2705 2741 -2880 0
2705 2743 -2882 0
2705 2745 -2884 0
2705 2747 -2886 0
2705 2749 -2888 0
2705 2751 -2890 0
2705 2753 -2892 0
2705 2755 -2894 0
2705 2757 -2896 0
2705 2759 -2898 0
2705 2761 -2900 0
2705 2763 -2902 0
2705 2765 -2904 0
2705 2767 -2906 0
2705 2769 -2908 0
2707 -2878 0
2707 2740 -2880 0
2707 2741 -2882 0
2707 2743 -2884 0
2707 2745 -2886 0
2707 2747 -2888 0
2707 2749 -2890 0
2707 2751 -2892 0
2707 2753 -2894 0
2707 2755 -2896 0
2707 2757 -2898 0
2707 2759 -2900 0
2707 2761 -2902 0
2707 2763 -2904 0
2707 2765 -2906 0
2707 2767 -2908 0
2707 2769 -2910 0
c (0<=(aux485 + aux487 - aux490))
-2769 2910 0
-2767 2908 0
-2765 2906 0
-2763 2904 0
-2761 2902 0
-2759 2900 0
-2757 2898 0
-2755 2896 0
-2753 2894 0
-2751 2892 0
-2749 2890 0
-2747 2888 0
-2745 2886 0
-2743 2884 0
-2741 2882 0
-2740 2880 0
-2707 2910 0
-2707 -2769 2908 0
-2707 -2767 2906 0
-2707 -2765 2904 0
-2707 -2763 2902 0
-2707 -2761 2900 0
-2707 -2759 2898 0
-2707 -2757 2896 0
-2707 -2755 2894 0
-2707 -2753 2892 0
-2707 -2751 2890 0
-2707 -2749 2888 0
-2707 -2747 2886 0
-2707 -2745 2884 0
-2707 -2743 2882 0
-2707 -2741 2880 0
-2707 -2740 2878 0
-2705 2908 0
-2705 -2769 2906 0
-2705 -2767 2904 0
-2705 -2765 2902 0
-2705 -2763 2900 0
-2705 -2761 2898 0
-2705 -2759 2896 0
-2705 -2757 2894 0
-2705 -2755 2892 0
-2705 -2753 2890 0
-2705 -2751 2888 0
-2705 -2749 2886 0
-2705 -2747 2884 0
-2705 -2745 2882 0
-2705 -2743 2880 0
-2705 -2741 2878 0
-2705 -2740 2876 0
-2703 2906 0
-2703 -2769 2904 0
-2703 -2767 2902 0
-2703 -2765 2900 0
-2703 -2763 2898 0
-2703 -2761 2896 0
-2703 -2759 2894 0
-2703 -2757 2892 0
-2703 -2755 2890 0
-2703 -2753 2888 0
-2703 -2751 2886 0
-2703 -2749 2884 0
-2703 -2747 2882 0
-2703 -2745 2880 0
-2703 -2743 2878 0
-2703 -2741 2876 0
-2703 -2740 2874 0
-2701 2904 0
-2701 -2769 2902 0
-2701 -2767 2900 0
-2701 -2765 2898 0
-2701 -2763 2896 0
-2701 -2761 2894 0
-2701 -2759 2892 0
-2701 -2757 2890 0
-2701 -2755 2888 0
-2701 -2753 2886 0
-2701 -2751 2884 0
-2701 -2749 2882 0
-2701 -2747 2880 0
-2701 -2745 2878 0
-2701 -2743 2876 0
-2701 -2741 2874 0
-2701 -2740 2872 0
-2699 2902 0
-2699 -2769 2900 0
-2699 -2767 2898 0
-2699 -2765 2896 0
-2699 -2763 2894 0
-2699 -2761 2892 0
-2699 -2759 2890 0
-2699 -2757 2888 0
-2699 -2755 2886 0
-2699 -2753 2884 0
-2699 -2751 2882 0
-2699 -2749 2880 0
-2699 -2747 2878 0
-2699 -2745 2876 0
-2699 -2743 2874 0
-2699 -2741 2872 0
-2699 -2740 2870 0
-2697 2900 0
-2697 -2769 2898 0
-2697 -2767 2896 0
-2697 -2765 2894 0
-2697 -2763 2892 0
-2697 -2761 2890 0
-2697 -2759 2888 0
-2697 -2757 2886 0
-2697 -2755 2884 0
-2697 -2753 2882 0
-2697 -2751 2880 0
-2697 -2749 2878 0
-2697 -2747 2876 0
-2697 -2745 2874 0
-2697 -2743 2872 0
-2697 -2741 2870 0
-2697 -2740 2868 0
-2695 2898 0
-2695 -2769 2896 0
-2695 -2767 2894 0
-2695 -2765 2892 0
-2695 -2763 2890 0
-2695 -2761 2888 0
-2695 -2759 2886 0
-2695 -2757 2884 0
-2695 -2755 2882 0
-2695 -2753 2880 0
-2695 -2751 2878 0
-2695 -2749 2876 0
-2695 -2747 2874 0
-2695 -2745 2872 0
-2695 -2743 2870 0
-2695 -2741 2868 0
-2695 -2740 2866 0
-2693 2896 0
-2693 -2769 2894 0
-2693 -2767 2892 0
-2693 -2765 2890 0
-2693 -2763 2888 0
-2693 -2761 2886 0
-2693 -2759 2884 0
-2693 -2757 2882 0
-2693 -2755 2880 0
-2693 -2753 2878 0
-2693 -2751 2876 0
-2693 -2749 2874 0
-2693 -2747 2872 0
-2693 -2745 2870 0
-2693 -2743 2868 0
-2693 -2741 2866 0
-2693 -2740 2864 0
-2691 2894 0
-2691 -2769 2892 0
-2691 -2767 2890 0
-2691 -2765 2888 0
-2691 -2763 2886 0
-2691 -2761 2884 0
-2691 -2759 2882 0
-2691 -2757 2880 0
-2691 -2755 2878 0
-2691 -2753 2876 0
-2691 -2751 2874 0
-2691 -2749 2872 0
-2691 -2747 2870 0
-2691 -2745 2868 0
-2691 -2743 2866 0
-2691 -2741 2864 0
-2691 -2740 2862 0
-2689 2892 0
-2689 -2769 2890 0
-2689 -2767 2888 0
-2689 -2765 2886 0
-2689 -2763 2884 0
-2689 -2761 2882 0
-2689 -2759 2880 0
-2689 -2757 2878 0
-2689 -2755 2876 0
-2689 -2753 2874 0
-2689 -2751 2872 0
-2689 -2749 2870 0
-2689 -2747 2868 0
-2689 -2745 2866 0
-2689 -2743 2864 0
-2689 -2741 2862 0
-2689 -2740 2860 0
-2687 2890 0
-2687 -2769 2888 0
-2687 -2767 2886 0
-2687 -2765 2884 0
-2687 -2763 2882 0
-2687 -2761 2880 0
-2687 -2759 2878 0
-2687 -2757 2876 0
-2687 -2755 2874 0
-2687 -2753 2872 0
-2687 -2751 2870 0
-2687 -2749 2868 0
-2687 -2747 2866 0
-2687 -2745 2864 0
-2687 -2743 2862 0
-2687 -2741 2860 0
-2687 -2740 2858 0
-2685 2888 0
-2685 -2769 2886 0
-2685 -2767 2884 0
-2685 -2765 2882 0
-2685 -2763 2880 0
-2685 -2761 2878 0
-2685 -2759 2876 0
-2685 -2757 2874 0
-2685 -2755 2872 0
-2685 -2753 2870 0
-2685 -2751 2868 0
-2685 -2749 2866 0
-2685 -2747 2864 0
-2685 -2745 2862 0
-2685 -2743 2860 0
-2685 -2741 2858 0
-2685 -2740 2856 0
-2683 2886 0
-2683 -2769 2884 0
-2683 -2767 2882 0
-2683 -2765 2880 0
-2683 -2763 2878 0
-2683 -2761 2876 0
-2683 -2759 2874 0
-2683 -2757 2872 0
-2683 -2755 2870 0
-2683 -2753 2868 0
-2683 -2751 2866 0
-2683 -2749 2864 0
-2683 -2747 2862 0
-2683 -2745 2860 0
-2683 -2743 2858 0
-2683 -2741 2856 0
-2683 -2740 2854 0
-2681 2884 0
-2681 -2769 2882 0
-2681 -2767 2880 0
-2681 -2765 2878 0
-2681 -2763 2876 0
-2681 -2761 2874 0
-2681 -2759 2872 0
-2681 -2757 2870 0
-2681 -2755 2868 0
-2681 -2753 2866 0
-2681 -2751 2864 0
-2681 -2749 2862 0
-2681 -2747 2860 0
-2681 -2745 2858 0
-2681 -2743 2856 0
-2681 -2741 2854 0
-2681 -2740 2852 0
-2679 2882 0
-2679 -2769 2880 0
-2679 -2767 2878 0
-2679 -2765 2876 0
-2679 -2763 2874 0
-2679 -2761 2872 0
-2679 -2759 2870 0
-2679 -2757 2868 0
-2679 -2755 2866 0
-2679 -2753 2864 0
-2679 -2751 2862 0
-2679 -2749 2860 0
-2679 -2747 2858 0
-2679 -2745 2856 0
-2679 -2743 2854 0
-2679 -2741 2852 0
-2679 -2740 2850 0
-2678 2880 0
-2678 -2769 2878 0
-2678 -2767 2876 0
-2678 -2765 2874 0
-2678 -2763 2872 0
-2678 -2761 2870 0
-2678 -2759 2868 0
-2678 -2757 2866 0
-2678 -2755 2864 0
-2678 -2753 2862 0
-2678 -2751 2860 0
-2678 -2749 2858 0
-2678 -2747 2856 0
-2678 -2745 2854 0
-2678 -2743 2852 0
-2678 -2741 2850 0
-2678 -2740 2849 0
c (( - aux491 + shift(x_00006_00005, -1) + shift(x_00002_00005, -1))<=0)
197 -2912 0
198 -2913 0
200 -2915 0
202 -2917 0
204 -2919 0
206 -2921 0
208 -2923 0
210 -2925 0
737 -2912 0
737 197 -2913 0
737 198 -2915 0
737 200 -2917 0
737 202 -2919 0
737 204 -2921 0
737 206 -2923 0
737 208 -2925 0
737 210 -2927 0
738 -2913 0
738 197 -2915 0
738 198 -2917 0
738 200 -2919 0
738 202 -2921 0
738 204 -2923 0
738 206 -2925 0
738 208 -2927 0
738 210 -2929 0
740 -2915 0
740 197 -2917 0
740 198 -2919 0
740 200 -2921 0
740 202 -2923 0
740 204 -2925 0
740 206 -2927 0
740 208 -2929 0
740 210 -2931 0
742 -2917 0
742 197 -2919 0
742 198 -2921 0
742 200 -2923 0
742 202 -2925 0
742 204 -2927 0
742 206 -2929 0
742 208 -2931 0
742 210 -2933 0
744 -2919 0
744 197 -2921 0
744 198 -2923 0
744 200 -2925 0
744 202 -2927 0
744 204 -2929 0
744 206 -2931 0
744 208 -2933 0
744 210 -2935 0
746 -2921 0
746 197 -2923 0
746 198 -2925 0
746 200 -2927 0
746 202 -2929 0
746 204 -2931 0
746 206 -2933 0
746 208 -2935 0
746 210 -2937 0
748 -2923 0
748 197 -2925 0
748 198 -2927 0
748 200 -2929 0
748 202 -2931 0
748 204 -2933 0
748 206 -2935 0
748 208 -2937 0
748 210 -2939 0
750 -2925 0
750 197 -2927 0
750 198 -2929 0
750 200 -2931 0
750 202 -2933 0
750 204 -2935 0
750 206 -2937 0
750 208 -2939 0
750 210 -2941 0
c (0<=( - aux491 + shift(x_00006_00005, -1) + shift(x_00002_00005, -1)))
-210 2941 0
-208 2939 0
-206 2937 0
-204 2935 0
-202 2933 0
-200 2931 0
-198 2929 0
-197 2927 0
-750 2941 0
-750 -210 2939 0
-750 -208 2937 0
-750 -206 2935 0
-750 -204 2933 0
-750 -202 2931 0
-750 -200 2929 0
-750 -198 2927 0
-750 -197 2925 0
-748 2939 0
-748 -210 2937 0
-748 -208 2935 0
-748 -206 2933 0
-748 -204 2931 0
-748 -202 2929 0
-748 -200 2927 0
-748 -198 2925 0
-748 -197 2923 0
-746 2937 0
-746 -210 2935 0
-746 -208 2933 0
-746 -206 2931 0
-746 -204 2929 0
-746 -202 2927 0
-746 -200 2925 0
-746 -198 2923 0
-746 -197 2921 0
-744 2935 0
-744 -210 2933 0
-744 -208 2931 0
-744 -206 2929 0
-744 -204 2927 0
-744 -202 2925 0
-744 -200 2923 0
-744 -198 2921 0
-744 -197 2919 0
-742 2933 0
-742 -210 2931 0
-742 -208 2929 0
-742 -206 2927 0
-742 -204 2925 0
-742 -202 2923 0
-742 -200 2921 0
-742 -198 2919 0
-742 -197 2917 0
-740 2931 0
-740 -210 2929 0
-740 -208 2927 0
-740 -206 2925 0
-740 -204 2923 0
-740 -202 2921 0
-740 -200 2919 0
-740 -198 2917 0
-740 -197 2915 0
-738 2929 0
-738 -210 2927 0
-738 -208 2925 0
-738 -206 2923 0
-738 -204 2921 0
-738 -202 2919 0
-738 -200 2917 0
-738 -198 2915 0
-738 -197 2913 0
-737 2927 0
-737 -210 2925 0
-737 -208 2923 0
-737 -206 2921 0
-737 -204 2919 0
-737 -202 2917 0
-737 -200 2915 0
-737 -198 2913 0
-737 -197 2912 0
c ((shift(x_00007_00005, -1) - aux492 + shift(x_00001_00005, -1))<=0)
62 -2943 0
63 -2944 0
65 -2946 0
67 -2948 0
69 -2950 0
71 -2952 0
73 -2954 0
75 -2956 0
872 -2943 0
872 62 -2944 0
872 63 -2946 0
872 65 -2948 0
872 67 -2950 0
872 69 -2952 0
872 71 -2954 0
872 73 -2956 0
872 75 -2958 0
873 -2944 0
873 62 -2946 0
873 63 -2948 0
873 65 -2950 0
873 67 -2952 0
873 69 -2954 0
873 71 -2956 0
873 73 -2958 0
873 75 -2960 0
875 -2946 0
875 62 -2948 0
875 63 -2950 0
875 65 -2952 0
875 67 -2954 0
875 69 -2956 0
875 71 -2958 0
875 73 -2960 0
875 75 -2962 0
877 -2948 0
877 62 -2950 0
877 63 -2952 0
877 65 -2954 0
877 67 -2956 0
877 69 -2958 0
877 71 -2960 0
877 73 -2962 0
877 75 -2964 0
879 -2950 0
879 62 -2952 0
879 63 -2954 0
879 65 -2956 0
879 67 -2958 0
879 69 -2960 0
879 71 -2962 0
879 73 -2964 0
879 75 -2966 0
881 -2952 0
881 62 -2954 0
881 63 -2956 0
881 65 -2958 0
881 67 -2960 0
881 69 -2962 0
881 71 -2964 0
881 73 -2966 0
881 75 -2968 0
883 -2954 0
883 62 -2956 0
883 63 -2958 0
883 65 -2960 0
883 67 -2962 0
883 69 -2964 0
883 71 -2966 0
883 73 -2968 0
883 75 -2970 0
885 -2956 0
885 62 -2958 0
885 63 -2960 0
885 65 -2962 0
885 67 -2964 0
885 69 -2966 0
885 71 -2968 0
885 73 -2970 0
885 75 -2972 0
c (0<=(shift(x_00007_00005, -1) - aux492 + shift(x_00001_00005, -1)))
-75 2972 0
-73 2970 0
-71 2968 0
-69 2966 0
-67 2964 0
-65 2962 0
-63 2960 0
-62 2958 0
-885 2972 0
-885 -75 2970 0
-885 -73 2968 0
-885 -71 2966 0
-885 -69 2964 0
-885 -67 2962 0
-885 -65 2960 0
-885 -63 2958 0
-885 -62 2956 0
-883 2970 0
-883 -75 2968 0
-883 -73 2966 0
-883 -71 2964 0
-883 -69 2962 0
-883 -67 2960 0
-883 -65 2958 0
-883 -63 2956 0
-883 -62 2954 0
-881 2968 0
-881 -75 2966 0
-881 -73 2964 0
-881 -71 2962 0
-881 -69 2960 0
-881 -67 2958 0
-881 -65 2956 0
-881 -63 2954 0
-881 -62 2952 0
-879 2966 0
-879 -75 2964 0
-879 -73 2962 0
-879 -71 2960 0
-879 -69 2958 0
-879 -67 2956 0
-879 -65 2954 0
-879 -63 2952 0
-879 -62 2950 0
-877 2964 0
-877 -75 2962 0
-877 -73 2960 0
-877 -71 2958 0
-877 -69 2956 0
-877 -67 2954 0
-877 -65 2952 0
-877 -63 2950 0
-877 -62 2948 0
-875 2962 0
-875 -75 2960 0
-875 -73 2958 0
-875 -71 2956 0
-875 -69 2954 0
-875 -67 2952 0
-875 -65 2950 0
-875 -63 2948 0
-875 -62 2946 0
-873 2960 0
-873 -75 2958 0
-873 -73 2956 0
-873 -71 2954 0
-873 -69 2952 0
-873 -67 2950 0
-873 -65 2948 0
-873 -63 2946 0
-873 -62 2944 0
-872 2958 0
-872 -75 2956 0
-872 -73 2954 0
-872 -71 2952 0
-872 -69 2950 0
-872 -67 2948 0
-872 -65 2946 0
-872 -63 2944 0
-872 -62 2943 0
c (( - aux493 + shift(x_00005_00005, -1) + shift(x_00008_00005, -1))<=0)
1007 -2974 0
1008 -2975 0
1010 -2977 0
1012 -2979 0
1014 -2981 0
1016 -2983 0
1018 -2985 0
1020 -2987 0
602 -2974 0
602 1007 -2975 0
602 1008 -2977 0
602 1010 -2979 0
602 1012 -2981 0
602 1014 -2983 0
602 1016 -2985 0
602 1018 -2987 0
602 1020 -2989 0
603 -2975 0
603 1007 -2977 0
603 1008 -2979 0
603 1010 -2981 0
603 1012 -2983 0
603 1014 -2985 0
603 1016 -2987 0
603 1018 -2989 0
603 1020 -2991 0
605 -2977 0
605 1007 -2979 0
605 1008 -2981 0
605 1010 -2983 0
605 1012 -2985 0
605 1014 -2987 0
605 1016 -2989 0
605 1018 -2991 0
605 1020 -2993 0
607 -2979 0
607 1007 -2981 0
607 1008 -2983 0
607 1010 -2985 0
607 1012 -2987 0
607 1014 -2989 0
607 1016 -2991 0
607 1018 -2993 0
607 1020 -2995 0
609 -2981 0
609 1007 -2983 0
609 1008 -2985 0
609 1010 -2987 0
609 1012 -2989 0
609 1014 -2991 0
609 1016 -2993 0
609 1018 -2995 0
609 1020 -2997 0
611 -2983 0
611 1007 -2985 0
611 1008 -2987 0
611 1010 -2989 0
611 1012 -2991 0
611 1014 -2993 0
611 1016 -2995 0
611 1018 -2997 0
611 1020 -2999 0
613 -2985 0
613 1007 -2987 0
613 1008 -2989 0
613 1010 -2991 0
613 1012 -2993 0
613 1014 -2995 0
613 1016 -2997 0
613 1018 -2999 0
613 1020 -3001 0
615 -2987 0
615 1007 -2989 0
615 1008 -2991 0
615 1010 -2993 0
615 1012 -2995 0
615 1014 -2997 0
615 1016 -2999 0
615 1018 -3001 0
615 1020 -3003 0
c (0<=( - aux493 + shift(x_00005_00005, -1) + shift(x_00008_00005, -1)))
-1020 3003 0
-1018 3001 0
-1016 2999 0
-1014 2997 0
-1012 2995 0
-1010 2993 0
-1008 2991 0
-1007 2989 0
-615 3003 0
-615 -1020 3001 0
-615 -1018 2999 0
-615 -1016 2997 0
-615 -1014 2995 0
-615 -1012 2993 0
-615 -1010 2991 0
-615 -1008 2989 0
-615 -1007 2987 0
-613 3001 0
-613 -1020 2999 0
-613 -1018 2997 0
-613 -1016 2995 0
-613 -1014 2993 0
-613 -1012 2991 0
-613 -1010 2989 0
-613 -1008 2987 0
-613 -1007 2985 0
-611 2999 0
-611 -1020 2997 0
-611 -1018 2995 0
-611 -1016 2993 0
-611 -1014 2991 0
-611 -1012 2989 0
-611 -1010 2987 0
-611 -1008 2985 0
-611 -1007 2983 0
-609 2997 0
-609 -1020 2995 0
-609 -1018 2993 0
-609 -1016 2991 0
-609 -1014 2989 0
-609 -1012 2987 0
-609 -1010 2985 0
-609 -1008 2983 0
-609 -1007 2981 0
-607 2995 0
-607 -1020 2993 0
-607 -1018 2991 0
-607 -1016 2989 0
-607 -1014 2987 0
-607 -1012 2985 0
-607 -1010 2983 0
-607 -1008 2981 0
-607 -1007 2979 0
-605 2993 0
-605 -1020 2991 0
-605 -1018 2989 0
-605 -1016 2987 0
-605 -1014 2985 0
-605 -1012 2983 0
-605 -1010 2981 0
-605 -1008 2979 0
-605 -1007 2977 0
-603 2991 0
-603 -1020 2989 0
-603 -1018 2987 0
-603 -1016 2985 0
-603 -1014 2983 0
-603 -1012 2981 0
-603 -1010 2979 0
-603 -1008 2977 0
-603 -1007 2975 0
-602 2989 0
-602 -1020 2987 0
-602 -1018 2985 0
-602 -1016 2983 0
-602 -1014 2981 0
-602 -1012 2979 0
-602 -1010 2977 0
-602 -1008 2975 0
-602 -1007 2974 0
c (( - aux494 + shift(x_00004_00005, -1) + shift(x_00009_00005, -1))<=0)
1142 -3005 0
1143 -3006 0
1145 -3008 0
1147 -3010 0
1149 -3012 0
1151 -3014 0
1153 -3016 0
1155 -3018 0
467 -3005 0
467 1142 -3006 0
467 1143 -3008 0
467 1145 -3010 0
467 1147 -3012 0
467 1149 -3014 0
467 1151 -3016 0
467 1153 -3018 0
467 1155 -3020 0
468 -3006 0
468 1142 -3008 0
468 1143 -3010 0
468 1145 -3012 0
468 1147 -3014 0
468 1149 -3016 0
468 1151 -3018 0
468 1153 -3020 0
468 1155 -3022 0
470 -3008 0
470 1142 -3010 0
470 1143 -3012 0
470 1145 -3014 0
470 1147 -3016 0
470 1149 -3018 0
470 1151 -3020 0
470 1153 -3022 0
470 1155 -3024 0
472 -3010 0
472 1142 -3012 0
472 1143 -3014 0
472 1145 -3016 0
472 1147 -3018 0
472 1149 -3020 0
472 1151 -3022 0
472 1153 -3024 0
472 1155 -3026 0
474 -3012 0
474 1142 -3014 0
474 1143 -3016 0
474 1145 -3018 0
474 1147 -3020 0
474 1149 -3022 0
474 1151 -3024 0
474 1153 -3026 0
474 1155 -3028 0
476 -3014 0
476 1142 -3016 0
476 1143 -3018 0
476 1145 -3020 0
476 1147 -3022 0
476 1149 -3024 0
476 1151 -3026 0
476 1153 -3028 0
476 1155 -3030 0
478 -3016 0
478 1142 -3018 0
478 1143 -3020 0
478 1145 -3022 0
478 1147 -3024 0
478 1149 -3026 0
478 1151 -3028 0
478 1153 -3030 0
478 1155 -3032 0
480 -3018 0
480 1142 -3020 0
480 1143 -3022 0
480 1145 -3024 0
480 1147 -3026 0
480 1149 -3028 0
480 1151 -3030 0
480 1153 -3032 0
480 1155 -3034 0
c (0<=( - aux494 + shift(x_00004_00005, -1) + shift(x_00009_00005, -1)))
-1155 3034 0
-1153 3032 0
-1151 3030 0
-1149 3028 0
-1147 3026 0
-1145 3024 0
-1143 3022 0
-1142 3020 0
-480 3034 0
-480 -1155 3032 0
-480 -1153 3030 0
-480 -1151 3028 0
-480 -1149 3026 0
-480 -1147 3024 0
-480 -1145 3022 0
-480 -1143 3020 0
-480 -1142 3018 0
-478 3032 0
-478 -1155 3030 0
-478 -1153 3028 0
-478 -1151 3026 0
-478 -1149 3024 0
-478 -1147 3022 0
-478 -1145 3020 0
-478 -1143 3018 0
-478 -1142 3016 0
-476 3030 0
-476 -1155 3028 0
-476 -1153 3026 0
-476 -1151 3024 0
-476 -1149 3022 0
-476 -1147 3020 0
-476 -1145 3018 0
-476 -1143 3016 0
-476 -1142 3014 0
-474 3028 0
-474 -1155 3026 0
-474 -1153 3024 0
-474 -1151 3022 0
-474 -1149 3020 0
-474 -1147 3018 0
-474 -1145 3016 0
-474 -1143 3014 0
-474 -1142 3012 0
-472 3026 0
-472 -1155 3024 0
-472 -1153 3022 0
-472 -1151 3020 0
-472 -1149 3018 0
-472 -1147 3016 0
-472 -1145 3014 0
-472 -1143 3012 0
-472 -1142 3010 0
-470 3024 0
-470 -1155 3022 0
-470 -1153 3020 0
-470 -1151 3018 0
-470 -1149 3016 0
-470 -1147 3014 0
-470 -1145 3012 0
-470 -1143 3010 0
-470 -1142 3008 0
-468 3022 0
-468 -1155 3020 0
-468 -1153 3018 0
-468 -1151 3016 0
-468 -1149 3014 0
-468 -1147 3012 0
-468 -1145 3010 0
-468 -1143 3008 0
-468 -1142 3006 0
-467 3020 0
-467 -1155 3018 0
-467 -1153 3016 0
-467 -1151 3014 0
-467 -1149 3012 0
-467 -1147 3010 0
-467 -1145 3008 0
-467 -1143 3006 0
-467 -1142 3005 0
c ((aux494 - aux495 + shift(x_00003_00005, -1))<=0)
3005 -3036 0
3006 -3037 0
3008 -3039 0
3010 -3041 0
3012 -3043 0
3014 -3045 0
3016 -3047 0
3018 -3049 0
3020 -3051 0
3022 -3053 0
3024 -3055 0
3026 -3057 0
3028 -3059 0
3030 -3061 0
3032 -3063 0
3034 -3065 0
332 -3036 0
332 3005 -3037 0
332 3006 -3039 0
332 3008 -3041 0
332 3010 -3043 0
332 3012 -3045 0
332 3014 -3047 0
332 3016 -3049 0
332 3018 -3051 0
332 3020 -3053 0
332 3022 -3055 0
332 3024 -3057 0
332 3026 -3059 0
332 3028 -3061 0
332 3030 -3063 0
332 3032 -3065 0
332 3034 -3067 0
333 -3037 0
333 3005 -3039 0
333 3006 -3041 0
333 3008 -3043 0
333 3010 -3045 0
333 3012 -3047 0
333 3014 -3049 0
333 3016 -3051 0
333 3018 -3053 0
333 3020 -3055 0
333 3022 -3057 0
333 3024 -3059 0
333 3026 -3061 0
333 3028 -3063 0
333 3030 -3065 0
333 3032 -3067 0
333 3034 -3069 0
335 -3039 0
335 3005 -3041 0
335 3006 -3043 0
335 3008 -3045 0
335 3010 -3047 0
335 3012 -3049 0
335 3014 -3051 0
335 3016 -3053 0
335 3018 -3055 0
335 3020 -3057 0
335 3022 -3059 0
335 3024 -3061 0
335 3026 -3063 0
335 3028 -3065 0
335 3030 -3067 0
335 3032 -3069 0
335 3034 -3071 0
337 -3041 0
337 3005 -3043 0
337 3006 -3045 0
337 3008 -3047 0
337 3010 -3049 0
337 3012 -3051 0
337 3014 -3053 0
337 3016 -3055 0
337 3018 -3057 0
337 3020 -3059 0
337 3022 -3061 0
337 3024 -3063 0
337 3026 -3065 0
337 3028 -3067 0
337 3030 -3069 0
337 3032 -3071 0
337 3034 -3073 0
339 -3043 0
339 3005 -3045 0
339 3006 -3047 0
339 3008 -3049 0
339 3010 -3051 0
339 3012 -3053 0
339 3014 -3055 0
339 3016 -3057 0
339 3018 -3059 0
339 3020 -3061 0
339 3022 -3063 0
339 3024 -3065 0
339 3026 -3067 0
339 3028 -3069 0
339 3030 -3071 0
339 3032 -3073 0
339 3034 -3075 0
341 -3045 0
341 3005 -3047 0
341 3006 -3049 0
341 3008 -3051 0
341 3010 -3053 0
341 3012 -3055 0
341 3014 -3057 0
341 3016 -3059 0
341 3018 -3061 0
341 3020 -3063 0
341 3022 -3065 0
341 3024 -3067 0
341 3026 -3069 0
341 3028 -3071 0
341 3030 -3073 0
341 3032 -3075 0
341 3034 -3077 0
343 -3047 0
343 3005 -3049 0
343 3006 -3051 0
343 3008 -3053 0
343 3010 -3055 0
343 3012 -3057 0
343 3014 -3059 0
343 3016 -3061 0
343 3018 -3063 0
343 3020 -3065 0
343 3022 -3067 0
343 3024 -3069 0
343 3026 -3071 0
343 3028 -3073 0
343 3030 -3075 0
343 3032 -3077 0
343 3034 -3079 0
345 -3049 0
345 3005 -3051 0
345 3006 -3053 0
345 3008 -3055 0
345 3010 -3057 0
345 3012 -3059 0
345 3014 -3061 0
345 3016 -3063 0
345 3018 -3065 0
345 3020 -3067 0
345 3022 -3069 0
345 3024 -3071 0
345 3026 -3073 0
345 3028 -3075 0
345 3030 -3077 0
345 3032 -3079 0
345 3034 -3081 0
c (0<=(aux494 - aux495 + shift(x_00003_00005, -1)))
-3034 3081 0
-3032 3079 0
-3030 3077 0
-3028 3075 0
-3026 3073 0
-3024 3071 0
-3022 3069 0
-3020 3067 0
-3018 3065 0
-3016 3063 0
-3014 3061 0
-3012 3059 0
-3010 3057 0
-3008 3055 0
-3006 3053 0
-3005 3051 0
-345 3081 0
-345 -3034 3079 0
-345 -3032 3077 0
-345 -3030 3075 0
-345 -3028 3073 0
-345 -3026 3071 0
-345 -3024 3069 0
-345 -3022 3067 0
-345 -3020 3065 0
-345 -3018 3063 0
-345 -3016 3061 0
-345 -3014 3059 0
-345 -3012 3057 0
-345 -3010 3055 0
-345 -3008 3053 0
-345 -3006 3051 0
-345 -3005 3049 0
-343 3079 0
-343 -3034 3077 0
-343 -3032 3075 0
-343 -3030 3073 0
-343 -3028 3071 0
-343 -3026 3069 0
-343 -3024 3067 0
-343 -3022 3065 0
-343 -3020 3063 0
-343 -3018 3061 0
-343 -3016 3059 0
-343 -3014 3057 0
-343 -3012 3055 0
-343 -3010 3053 0
-343 -3008 3051 0
-343 -3006 3049 0
-343 -3005 3047 0
-341 3077 0
-341 -3034 3075 0
-341 -3032 3073 0
-341 -3030 3071 0
-341 -3028 3069 0
-341 -3026 3067 0
-341 -3024 3065 0
-341 -3022 3063 0
-341 -3020 3061 0
-341 -3018 3059 0
-341 -3016 3057 0
-341 -3014 3055 0
-341 -3012 3053 0
-341 -3010 3051 0
-341 -3008 3049 0
-341 -3006 3047 0
-341 -3005 3045 0
-339 3075 0
-339 -3034 3073 0
-339 -3032 3071 0
-339 -3030 3069 0
-339 -3028 3067 0
-339 -3026 3065 0
-339 -3024 3063 0
-339 -3022 3061 0
-339 -3020 3059 0
-339 -3018 3057 0
-339 -3016 3055 0
-339 -3014 3053 0
-339 -3012 3051 0
-339 -3010 3049 0
-339 -3008 3047 0
-339 -3006 3045 0
-339 -3005 3043 0
-337 3073 0
-337 -3034 3071 0
-337 -3032 3069 0
-337 -3030 3067 0
-337 -3028 3065 0
-337 -3026 3063 0
-337 -3024 3061 0
-337 -3022 3059 0
-337 -3020 3057 0
-337 -3018 3055 0
-337 -3016 3053 0
-337 -3014 3051 0
-337 -3012 3049 0
-337 -3010 3047 0
-337 -3008 3045 0
-337 -3006 3043 0
-337 -3005 3041 0
-335 3071 0
-335 -3034 3069 0
-335 -3032 3067 0
-335 -3030 3065 0
-335 -3028 3063 0
-335 -3026 3061 0
-335 -3024 3059 0
-335 -3022 3057 0
-335 -3020 3055 0
-335 -3018 3053 0
-335 -3016 3051 0
-335 -3014 3049 0
-335 -3012 3047 0
-335 -3010 3045 0
-335 -3008 3043 0
-335 -3006 3041 0
-335 -3005 3039 0
-333 3069 0
-333 -3034 3067 0
-333 -3032 3065 0
-333 -3030 3063 0
-333 -3028 3061 0
-333 -3026 3059 0
-333 -3024 3057 0
-333 -3022 3055 0
-333 -3020 3053 0
-333 -3018 3051 0
-333 -3016 3049 0
-333 -3014 3047 0
-333 -3012 3045 0
-333 -3010 3043 0
-333 -3008 3041 0
-333 -3006 3039 0
-333 -3005 3037 0
-332 3067 0
-332 -3034 3065 0
-332 -3032 3063 0
-332 -3030 3061 0
-332 -3028 3059 0
-332 -3026 3057 0
-332 -3024 3055 0
-332 -3022 3053 0
-332 -3020 3051 0
-332 -3018 3049 0
-332 -3016 3047 0
-332 -3014 3045 0
-332 -3012 3043 0
-332 -3010 3041 0
-332 -3008 3039 0
-332 -3006 3037 0
-332 -3005 3036 0
c ((aux491 + aux493 - aux496)<=0)
2974 -3083 0
2975 -3084 0
2977 -3086 0
2979 -3088 0
2981 -3090 0
2983 -3092 0
2985 -3094 0
2987 -3096 0
2989 -3098 0
2991 -3100 0
2993 -3102 0
2995 -3104 0
2997 -3106 0
2999 -3108 0
3001 -3110 0
3003 -3112 0
2912 -3083 0
2912 2974 -3084 0
2912 2975 -3086 0
2912 2977 -3088 0
2912 2979 -3090 0
2912 2981 -3092 0
2912 2983 -3094 0
2912 2985 -3096 0
2912 2987 -3098 0
2912 2989 -3100 0
2912 2991 -3102 0
2912 2993 -3104 0
2912 2995 -3106 0
2912 2997 -3108 0
2912 2999 -3110 0
2912 3001 -3112 0
2912 3003 -3114 0
2913 -3084 0
2913 2974 -3086 0
2913 2975 -3088 0
2913 2977 -3090 0
2913 2979 -3092 0
2913 2981 -3094 0
2913 2983 -3096 0
2913 2985 -3098 0
2913 2987 -3100 0
2913 2989 -3102 0
2913 2991 -3104 0
2913 2993 -3106 0
2913 2995 -3108 0
2913 2997 -3110 0
2913 2999 -3112 0
2913 3001 -3114 0
2913 3003 -3116 0
2915 -3086 0
2915 2974 -3088 0
2915 2975 -3090 0
2915 2977 -3092 0
2915 2979 -3094 0
2915 2981 -3096 0
2915 2983 -3098 0
2915 2985 -3100 0
2915 2987 -3102 0
2915 2989 -3104 0
2915 2991 -3106 0
2915 2993 -3108 0
2915 2995 -3110 0
2915 2997 -3112 0
2915 2999 -3114 0
2915 3001 -3116 0
2915 3003 -3118 0
2917 -3088 0
2917 2974 -3090 0
2917 2975 -3092 0
2917 2977 -3094 0
2917 2979 -3096 0
2917 2981 -3098 0
2917 2983 -3100 0
2917 2985 -3102 0
2917 2987 -3104 0
2917 2989 -3106 0
2917 2991 -3108 0
2917 2993 -3110 0
2917 2995 -3112 0
2917 2997 -3114 0
2917 2999 -3116 0
2917 3001 -3118 0
2917 3003 -3120 0
2919 -3090 0
2919 2974 -3092 0
2919 2975 -3094 0
2919 2977 -3096 0
2919 2979 -3098 0
2919 2981 -3100 0
2919 2983 -3102 0
2919 2985 -3104 0
2919 2987 -3106 0
2919 2989 -3108 0
2919 2991 -3110 0
2919 2993 -3112 0
2919 2995 -3114 0
2919 2997 -3116 0
2919 2999 -3118 0
2919 3001 -3120 0
2919 3003 -3122 0
2921 -3092 0
2921 2974 -3094 0
2921 2975 -3096 0
2921 2977 -3098 0
2921 2979 -3100 0
2921 2981 -3102 0
2921 2983 -3104 0
2921 2985 -3106 0
2921 2987 -3108 0
2921 2989 -3110 0
2921 2991 -3112 0
2921 2993 -3114 0
2921 2995 -3116 0
2921 2997 -3118 0
2921 2999 -3120 0
2921 3001 -3122 0
2921 3003 -3124 0
2923 -3094 0
2923 2974 -3096 0
2923 2975 -3098 0
2923 2977 -3100 0
2923 2979 -3102 0
2923 2981 -3104 0
2923 2983 -3106 0
2923 2985 -3108 0
2923 2987 -3110 0
2923 2989 -3112 0
2923 2991 -3114 0
2923 2993 -3116 0
2923 2995 -3118 0
2923 2997 -3120 0
2923 2999 -3122 0
2923 3001 -3124 0
2923 3003 -3126 0
2925 -3096 0
2925 2974 -3098 0
2925 2975 -3100 0
2925 2977 -3102 0
2925 2979 -3104 0
2925 2981 -3106 0
2925 2983 -3108 0
2925 2985 -3110 0
2925 2987 -3112 0
2925 2989 -3114 0
2925 2991 -3116 0
2925 2993 -3118 0
2925 2995 -3120 0
2925 2997 -3122 0
2925 2999 -3124 0
2925 3001 -3126 0
2925 3003 -3128 0
2927 -3098 0
2927 2974 -3100 0
2927 2975 -3102 0
2927 2977 -3104 0
2927 2979 -3106 0
2927 2981 -3108 0
2927 2983 -3110 0
2927 2985 -3112 0
2927 2987 -3114 0
2927 2989 -3116 0
2927 2991 -3118 0
2927 2993 -3120 0
2927 2995 -3122 0
2927 2997 -3124 0
2927 2999 -3126 0
2927 3001 -3128 0
2927 3003 -3130 0
2929 -3100 0
2929 2974 -3102 0
2929 2975 -3104 0
2929 2977 -3106 0
2929 2979 -3108 0
2929 2981 -3110 0
2929 2983 -3112 0
2929 2985 -3114 0
2929 2987 -3116 0
2929 2989 -3118 0
2929 2991 -3120 0
2929 2993 -3122 0
2929 2995 -3124 0
2929 2997 -3126 0
2929 2999 -3128 0
2929 3001 -3130 0
2929 3003 -3132 0
2931 -3102 0
2931 2974 -3104 0
2931 2975 -3106 0
2931 2977 -3108 0
2931 2979 -3110 0
2931 2981 -3112 0
2931 2983 -3114 0
2931 2985 -3116 0
2931 2987 -3118 0
2931 2989 -3120 0
2931 2991 -3122 0
2931 2993 -3124 0
2931 2995 -3126 0
2931 2997 -3128 0
2931 2999 -3130 0
2931 3001 -3132 0
2931 3003 -3134 0
2933 -3104 0
2933 2974 -3106 0
2933 2975 -3108 0
2933 2977 -3110 0
2933 2979 -3112 0
2933 2981 -3114 0
2933 2983 -3116 0
2933 2985 -3118 0
2933 2987 -3120 0
2933 2989 -3122 0
2933 2991 -3124 0
2933 2993 -3126 0
2933 2995 -3128 0
2933 2997 -3130 0
2933 2999 -3132 0
2933 3001 -3134 0
2933 3003 -3136 0
2935 -3106 0
2935 2974 -3108 0
2935 2975 -3110 0
2935 2977 -3112 0
2935 2979 -3114 0
2935 2981 -3116 0
2935 2983 -3118 0
2935 2985 -3120 0
2935 2987 -3122 0
2935 2989 -3124 0
2935 2991 -3126 0
2935 2993 -3128 0
2935 2995 -3130 0
2935 2997 -3132 0
2935 2999 -3134 0
2935 3001 -3136 0
2935 3003 -3138 0
2937 -3108 0
2937 2974 -3110 0
2937 2975 -3112 0
2937 2977 -3114 0
2937 2979 -3116 0
2937 2981 -3118 0
2937 2983 -3120 0
2937 2985 -3122 0
2937 2987 -3124 0
2937 2989 -3126 0
2937 2991 -3128 0
2937 2993 -3130 0
2937 2995 -3132 0
2937 2997 -3134 0
2937 2999 -3136 0
2937 3001 -3138 0
2937 3003 -3140 0
2939 -3110 0
2939 2974 -3112 0
2939 2975 -3114 0
2939 2977 -3116 0
2939 2979 -3118 0
2939 2981 -3120 0
2939 2983 -3122 0
2939 2985 -3124 0
2939 2987 -3126 0
2939 2989 -3128 0
2939 2991 -3130 0
2939 2993 -3132 0
2939 2995 -3134 0
2939 2997 -3136 0
2939 2999 -3138 0
2939 3001 -3140 0
2939 3003 -3142 0
2941 -3112 0
2941 2974 -3114 0
2941 2975 -3116 0
2941 2977 -3118 0
2941 2979 -3120 0
2941 2981 -3122 0
2941 2983 -3124 0
2941 2985 -3126 0
2941 2987 -3128 0
2941 2989 -3130 0
2941 2991 -3132 0
2941 2993 -3134 0
2941 2995 -3136 0
2941 2997 -3138 0
2941 2999 -3140 0
2941 3001 -3142 0
2941 3003 -3144 0
c (0<=(aux491 + aux493 - aux496))
-3003 3144 0
-3001 3142 0
-2999 3140 0
-2997 3138 0
-2995 3136 0
-2993 3134 0
-2991 3132 0
-2989 3130 0
-2987 3128 0
-2985 3126 0
-2983 3124 0
-2981 3122 0
-2979 3120 0
-2977 3118 0
-2975 3116 0
-2974 3114 0
-2941 3144 0
-2941 -3003 3142 0
-2941 -3001 3140 0
-2941 -2999 3138 0
-2941 -2997 3136 0
-2941 -2995 3134 0
-2941 -2993 3132 0
-2941 -2991 3130 0
-2941 -2989 3128 0
-2941 -2987 3126 0
-2941 -2985 3124 0
-2941 -2983 3122 0
-2941 -2981 3120 0
-2941 -2979 3118 0
-2941 -2977 3116 0
-2941 -2975 3114 0
-2941 -2974 3112 0
-2939 3142 0
-2939 -3003 3140 0
-2939 -3001 3138 0
-2939 -2999 3136 0
-2939 -2997 3134 0
-2939 -2995 3132 0
-2939 -2993 3130 0
-2939 -2991 3128 0
-2939 -2989 3126 0
-2939 -2987 3124 0
-2939 -2985 3122 0
-2939 -2983 3120 0
-2939 -2981 3118 0
-2939 -2979 3116 0
-2939 -2977 3114 0
-2939 -2975 3112 0
-2939 -2974 3110 0
-2937 3140 0
-2937 -3003 3138 0
-2937 -3001 3136 0
-2937 -2999 3134 0
-2937 -2997 3132 0
-2937 -2995 3130 0
-2937 -2993 3128 0
-2937 -2991 3126 0
-2937 -2989 3124 0
-2937 -2987 3122 0
-2937 -2985 3120 0
-2937 -2983 3118 0
-2937 -2981 3116 0
-2937 -2979 3114 0
-2937 -2977 3112 0
-2937 -2975 3110 0
-2937 -2974 3108 0
-2935 3138 0
-2935 -3003 3136 0
-2935 -3001 3134 0
-2935 -2999 3132 0
-2935 -2997 3130 0
-2935 -2995 3128 0
-2935 -2993 3126 0
-2935 -2991 3124 0
-2935 -2989 3122 0
-2935 -2987 3120 0
-2935 -2985 3118 0
-2935 -2983 3116 0
-2935 -2981 3114 0
-2935 -2979 3112 0
-2935 -2977 3110 0
-2935 -2975 3108 0
-2935 -2974 3106 0
-2933 3136 0
-2933 -3003 3134 0
-2933 -3001 3132 0
-2933 -2999 3130 0
-2933 -2997 3128 0
-2933 -2995 3126 0
-2933 -2993 3124 0
-2933 -2991 3122 0
-2933 -2989 3120 0
-2933 -2987 3118 0
-2933 -2985 3116 0
-2933 -2983 3114 0
-2933 -2981 3112 0
-2933 -2979 3110 0
-2933 -2977 3108 0
-2933 -2975 3106 0
-2933 -2974 3104 0
-2931 3134 0
-2931 -3003 3132 0
-2931 -3001 3130 0
-2931 -2999 3128 0
-2931 -2997 3126 0
-2931 -2995 3124 0
-2931 -2993 3122 0
-2931 -2991 3120 0
-2931 -2989 3118 0
-2931 -2987 3116 0
-2931 -2985 3114 0
-2931 -2983 3112 0
-2931 -2981 3110 0
-2931 -2979 3108 0
-2931 -2977 3106 0
-2931 -2975 3104 0
-2931 -2974 3102 0
-2929 3132 0
-2929 -3003 3130 0
-2929 -3001 3128 0
-2929 -2999 3126 0
-2929 -2997 3124 0
-2929 -2995 3122 0
-2929 -2993 3120 0
-2929 -2991 3118 0
-2929 -2989 3116 0
-2929 -2987 3114 0
-2929 -2985 3112 0
-2929 -2983 3110 0
-2929 -2981 3108 0
-2929 -2979 3106 0
-2929 -2977 3104 0
-2929 -2975 3102 0
-2929 -2974 3100 0
-2927 3130 0
-2927 -3003 3128 0
-2927 -3001 3126 0
-2927 -2999 3124 0
-2927 -2997 3122 0
-2927 -2995 3120 0
-2927 -2993 3118 0
-2927 -2991 3116 0
-2927 -2989 3114 0
-2927 -2987 3112 0
-2927 -2985 3110 0
-2927 -2983 3108 0
-2927 -2981 3106 0
-2927 -2979 3104 0
-2927 -2977 3102 0
-2927 -2975 3100 0
-2927 -2974 3098 0
-2925 3128 0
-2925 -3003 3126 0
-2925 -3001 3124 0
-2925 -2999 3122 0
-2925 -2997 3120 0
-2925 -2995 3118 0
-2925 -2993 3116 0
-2925 -2991 3114 0
-2925 -2989 3112 0
-2925 -2987 3110 0
-2925 -2985 3108 0
-2925 -2983 3106 0
-2925 -2981 3104 0
-2925 -2979 3102 0
-2925 -2977 3100 0
-2925 -2975 3098 0
-2925 -2974 3096 0
-2923 3126 0
-2923 -3003 3124 0
-2923 -3001 3122 0
-2923 -2999 3120 0
-2923 -2997 3118 0
-2923 -2995 3116 0
-2923 -2993 3114 0
-2923 -2991 3112 0
-2923 -2989 3110 0
-2923 -2987 3108 0
-2923 -2985 3106 0
-2923 -2983 3104 0
-2923 -2981 3102 0
-2923 -2979 3100 0
-2923 -2977 3098 0
-2923 -2975 3096 0
-2923 -2974 3094 0
-2921 3124 0
-2921 -3003 3122 0
-2921 -3001 3120 0
-2921 -2999 3118 0
-2921 -2997 3116 0
-2921 -2995 3114 0
-2921 -2993 3112 0
-2921 -2991 3110 0
-2921 -2989 3108 0
-2921 -2987 3106 0
-2921 -2985 3104 0
-2921 -2983 3102 0
-2921 -2981 3100 0
-2921 -2979 3098 0
-2921 -2977 3096 0
-2921 -2975 3094 0
-2921 -2974 3092 0
-2919 3122 0
-2919 -3003 3120 0
-2919 -3001 3118 0
-2919 -2999 3116 0
-2919 -2997 3114 0
-2919 -2995 3112 0
-2919 -2993 3110 0
-2919 -2991 3108 0
-2919 -2989 3106 0
-2919 -2987 3104 0
-2919 -2985 3102 0
-2919 -2983 3100 0
-2919 -2981 3098 0
-2919 -2979 3096 0
-2919 -2977 3094 0
-2919 -2975 3092 0
-2919 -2974 3090 0
-2917 3120 0
-2917 -3003 3118 0
-2917 -3001 3116 0
-2917 -2999 3114 0
-2917 -2997 3112 0
-2917 -2995 3110 0
-2917 -2993 3108 0
-2917 -2991 3106 0
-2917 -2989 3104 0
-2917 -2987 3102 0
-2917 -2985 3100 0
-2917 -2983 3098 0
-2917 -2981 3096 0
-2917 -2979 3094 0
-2917 -2977 3092 0
-2917 -2975 3090 0
-2917 -2974 3088 0
-2915 3118 0
-2915 -3003 3116 0
-2915 -3001 3114 0
-2915 -2999 3112 0
-2915 -2997 3110 0
-2915 -2995 3108 0
-2915 -2993 3106 0
-2915 -2991 3104 0
-2915 -2989 3102 0
-2915 -2987 3100 0
-2915 -2985 3098 0
-2915 -2983 3096 0
-2915 -2981 3094 0
-2915 -2979 3092 0
-2915 -2977 3090 0
-2915 -2975 3088 0
-2915 -2974 3086 0
-2913 3116 0
-2913 -3003 3114 0
-2913 -3001 3112 0
-2913 -2999 3110 0
-2913 -2997 3108 0
-2913 -2995 3106 0
-2913 -2993 3104 0
-2913 -2991 3102 0
-2913 -2989 3100 0
-2913 -2987 3098 0
-2913 -2985 3096 0
-2913 -2983 3094 0
-2913 -2981 3092 0
-2913 -2979 3090 0
-2913 -2977 3088 0
-2913 -2975 3086 0
-2913 -2974 3084 0
-2912 3114 0
-2912 -3003 3112 0
-2912 -3001 3110 0
-2912 -2999 3108 0
-2912 -2997 3106 0
-2912 -2995 3104 0
-2912 -2993 3102 0
-2912 -2991 3100 0
-2912 -2989 3098 0
-2912 -2987 3096 0
-2912 -2985 3094 0
-2912 -2983 3092 0
-2912 -2981 3090 0
-2912 -2979 3088 0
-2912 -2977 3086 0
-2912 -2975 3084 0
-2912 -2974 3083 0
c (( - aux497 + shift(x_00006_00006, -1) + shift(x_00002_00006, -1))<=0)
212 -3146 0
213 -3147 0
215 -3149 0
217 -3151 0
219 -3153 0
221 -3155 0
223 -3157 0
225 -3159 0
752 -3146 0
752 212 -3147 0
752 213 -3149 0
752 215 -3151 0
752 217 -3153 0
752 219 -3155 0
752 221 -3157 0
752 223 -3159 0
752 225 -3161 0
753 -3147 0
753 212 -3149 0
753 213 -3151 0
753 215 -3153 0
753 217 -3155 0
753 219 -3157 0
753 221 -3159 0
753 223 -3161 0
753 225 -3163 0
755 -3149 0
755 212 -3151 0
755 213 -3153 0
755 215 -3155 0
755 217 -3157 0
755 219 -3159 0
755 221 -3161 0
755 223 -3163 0
755 225 -3165 0
757 -3151 0
757 212 -3153 0
757 213 -3155 0
757 215 -3157 0
757 217 -3159 0
757 219 -3161 0
757 221 -3163 0
757 223 -3165 0
757 225 -3167 0
759 -3153 0
759 212 -3155 0
759 213 -3157 0
759 215 -3159 0
759 217 -3161 0
759 219 -3163 0
759 221 -3165 0
759 223 -3167 0
759 225 -3169 0
761 -3155 0
761 212 -3157 0
761 213 -3159 0
761 215 -3161 0
761 217 -3163 0
761 219 -3165 0
761 221 -3167 0
761 223 -3169 0
761 225 -3171 0
763 -3157 0
763 212 -3159 0
763 213 -3161 0
763 215 -3163 0
763 217 -3165 0
763 219 -3167 0
763 221 -3169 0
763 223 -3171 0
763 225 -3173 0
765 -3159 0
765 212 -3161 0
765 213 -3163 0
765 215 -3165 0
765 217 -3167 0
765 219 -3169 0
765 221 -3171 0
765 223 -3173 0
765 225 -3175 0
c (0<=( - aux497 + shift(x_00006_00006, -1) + shift(x_00002_00006, -1)))
-225 3175 0
-223 3173 0
-221 3171 0
-219 3169 0
-217 3167 0
-215 3165 0
-213 3163 0
-212 3161 0
-765 3175 0
-765 -225 3173 0
-765 -223 3171 0
-765 -221 3169 0
-765 -219 3167 0
-765 -217 3165 0
-765 -215 3163 0
-765 -213 3161 0
-765 -212 3159 0
-763 3173 0
-763 -225 3171 0
-763 -223 3169 0
-763 -221 3167 0
-763 -219 3165 0
-763 -217 3163 0
-763 -215 3161 0
-763 -213 3159 0
-763 -212 3157 0
-761 3171 0
-761 -225 3169 0
-761 -223 3167 0
-761 -221 3165 0
-761 -219 3163 0
-761 -217 3161 0
-761 -215 3159 0
-761 -213 3157 0
-761 -212 3155 0
-759 3169 0
-759 -225 3167 0
-759 -223 3165 0
-759 -221 3163 0
-759 -219 3161 0
-759 -217 3159 0
-759 -215 3157 0
-759 -213 3155 0
-759 -212 3153 0
-757 3167 0
-757 -225 3165 0
-757 -223 3163 0
-757 -221 3161 0
-757 -219 3159 0
-757 -217 3157 0
-757 -215 3155 0
-757 -213 3153 0
-757 -212 3151 0
-755 3165 0
-755 -225 3163 0
-755 -223 3161 0
-755 -221 3159 0
-755 -219 3157 0
-755 -217 3155 0
-755 -215 3153 0
-755 -213 3151 0
-755 -212 3149 0
-753 3163 0
-753 -225 3161 0
-753 -223 3159 0
-753 -221 3157 0
-753 -219 3155 0
-753 -217 3153 0
-753 -215 3151 0
-753 -213 3149 0
-753 -212 3147 0
-752 3161 0
-752 -225 3159 0
-752 -223 3157 0
-752 -221 3155 0
-752 -219 3153 0
-752 -217 3151 0
-752 -215 3149 0
-752 -213 3147 0
-752 -212 3146 0
c ((shift(x_00007_00006, -1) - aux498 + shift(x_00001_00006, -1))<=0)
77 -3177 0
78 -3178 0
80 -3180 0
82 -3182 0
84 -3184 0
86 -3186 0
88 -3188 0
90 -3190 0
887 -3177 0
887 77 -3178 0
887 78 -3180 0
887 80 -3182 0
887 82 -3184 0
887 84 -3186 0
887 86 -3188 0
887 88 -3190 0
887 90 -3192 0
888 -3178 0
888 77 -3180 0
888 78 -3182 0
888 80 -3184 0
888 82 -3186 0
888 84 -3188 0
888 86 -3190 0
888 88 -3192 0
888 90 -3194 0
890 -3180 0
890 77 -3182 0
890 78 -3184 0
890 80 -3186 0
890 82 -3188 0
890 84 -3190 0
890 86 -3192 0
890 88 -3194 0
890 90 -3196 0
892 -3182 0
892 77 -3184 0
892 78 -3186 0
892 80 -3188 0
892 82 -3190 0
892 84 -3192 0
892 86 -3194 0
892 88 -3196 0
892 90 -3198 0
894 -3184 0
894 77 -3186 0
894 78 -3188 0
894 80 -3190 0
894 82 -3192 0
894 84 -3194 0
894 86 -3196 0
894 88 -3198 0
894 90 -3200 0
896 -3186 0
896 77 -3188 0
896 78 -3190 0
896 80 -3192 0
896 82 -3194 0
896 84 -3196 0
896 86 -3198 0
896 88 -3200 0
896 90 -3202 0
898 -3188 0
898 77 -3190 0
898 78 -3192 0
898 80 -3194 0
898 82 -3196 0
898 84 -3198 0
898 86 -3200 0
898 88 -3202 0
898 90 -3204 0
900 -3190 0
900 77 -3192 0
900 78 -3194 0
900 80 -3196 0
900 82 -3198 0
900 84 -3200 0
900 86 -3202 0
900 88 -3204 0
900 90 -3206 0
c (0<=(shift(x_00007_00006, -1) - aux498 + shift(x_00001_00006, -1)))
-90 3206 0
-88 3204 0
-86 3202 0
-84 3200 0
-82 3198 0
-80 3196 0
-78 3194 0
-77 3192 0
-900 3206 0
-900 -90 3204 0
-900 -88 3202 0
-900 -86 3200 0
-900 -84 3198 0
-900 -82 3196 0
-900 -80 3194 0
-900 -78 3192 0
-900 -77 3190 0
-898 3204 0
-898 -90 3202 0
-898 -88 3200 0
-898 -86 3198 0
-898 -84 3196 0
-898 -82 3194 0
-898 -80 3192 0
-898 -78 3190 0
-898 -77 3188 0
-896 3202 0
-896 -90 3200 0
-896 -88 3198 0
-896 -86 3196 0
-896 -84 3194 0
-896 -82 3192 0
-896 -80 3190 0
-896 -78 3188 0
-896 -77 3186 0
-894 3200 0
-894 -90 3198 0
-894 -88 3196 0
-894 -86 3194 0
-894 -84 3192 0
-894 -82 3190 0
-894 -80 3188 0
-894 -78 3186 0
-894 -77 3184 0
-892 3198 0
-892 -90 3196 0
-892 -88 3194 0
-892 -86 3192 0
-892 -84 3190 0
-892 -82 3188 0
-892 -80 3186 0
-892 -78 3184 0
-892 -77 3182 0
-890 3196 0
-890 -90 3194 0
-890 -88 3192 0
-890 -86 3190 0
-890 -84 3188 0
-890 -82 3186 0
-890 -80 3184 0
-890 -78 3182 0
-890 -77 3180 0
-888 3194 0
-888 -90 3192 0
-888 -88 3190 0
-888 -86 3188 0
-888 -84 3186 0
-888 -82 3184 0
-888 -80 3182 0
-888 -78 3180 0
-888 -77 3178 0
-887 3192 0
-887 -90 3190 0
-887 -88 3188 0
-887 -86 3186 0
-887 -84 3184 0
-887 -82 3182 0
-887 -80 3180 0
-887 -78 3178 0
-887 -77 3177 0
c (( - aux499 + shift(x_00005_00006, -1) + shift(x_00008_00006, -1))<=0)
1022 -3208 0
1023 -3209 0
1025 -3211 0
1027 -3213 0
1029 -3215 0
1031 -3217 0
1033 -3219 0
1035 -3221 0
617 -3208 0
617 1022 -3209 0
617 1023 -3211 0
617 1025 -3213 0
617 1027 -3215 0
617 1029 -3217 0
617 1031 -3219 0
617 1033 -3221 0
617 1035 -3223 0
618 -3209 0
618 1022 -3211 0
618 1023 -3213 0
618 1025 -3215 0
618 1027 -3217 0
618 1029 -3219 0
618 1031 -3221 0
618 1033 -3223 0
618 1035 -3225 0
620 -3211 0
620 1022 -3213 0
620 1023 -3215 0
620 1025 -3217 0
620 1027 -3219 0
620 1029 -3221 0
620 1031 -3223 0
620 1033 -3225 0
620 1035 -3227 0
622 -3213 0
622 1022 -3215 0
622 1023 -3217 0
622 1025 -3219 0
622 1027 -3221 0
622 1029 -3223 0
622 1031 -3225 0
622 1033 -3227 0
622 1035 -3229 0
624 -3215 0
624 1022 -3217 0
624 1023 -3219 0
624 1025 -3221 0
624 1027 -3223 0
624 1029 -3225 0
624 1031 -3227 0
624 1033 -3229 0
624 1035 -3231 0
626 -3217 0
626 1022 -3219 0
626 1023 -3221 0
626 1025 -3223 0
626 1027 -3225 0
626 1029 -3227 0
626 1031 -3229 0
626 1033 -3231 0
626 1035 -3233 0
628 -3219 0
628 1022 -3221 0
628 1023 -3223 0
628 1025 -3225 0
628 1027 -3227 0
628 1029 -3229 0
628 1031 -3231 0
628 1033 -3233 0
628 1035 -3235 0
630 -3221 0
630 1022 -3223 0
630 1023 -3225 0
630 1025 -3227 0
630 1027 -3229 0
630 1029 -3231 0
630 1031 -3233 0
630 1033 -3235 0
630 1035 -3237 0
c (0<=( - aux499 + shift(x_00005_00006, -1) + shift(x_00008_00006, -1)))
-1035 3237 0
-1033 3235 0
-1031 3233 0
-1029 3231 0
-1027 3229 0
-1025 3227 0
-1023 3225 0
-1022 3223 0
-630 3237 0
-630 -1035 3235 0
-630 -1033 3233 0
-630 -1031 3231 0
-630 -1029 3229 0
-630 -1027 3227 0
-630 -1025 3225 0
-630 -1023 3223 0
-630 -1022 3221 0
-628 3235 0
-628 -1035 3233 0
-628 -1033 3231 0
-628 -1031 3229 0
-628 -1029 3227 0
-628 -1027 3225 0
-628 -1025 3223 0
-628 -1023 3221 0
-628 -1022 3219 0
-626 3233 0
-626 -1035 3231 0
-626 -1033 3229 0
-626 -1031 3227 0
-626 -1029 3225 0
-626 -1027 3223 0
-626 -1025 3221 0
-626 -1023 3219 0
-626 -1022 3217 0
-624 3231 0
-624 -1035 3229 0
-624 -1033 3227 0
-624 -1031 3225 0
-624 -1029 3223 0
-624 -1027 3221 0
-624 -1025 3219 0
-624 -1023 3217 0
-624 -1022 3215 0
-622 3229 0
-622 -1035 3227 0
-622 -1033 3225 0
-622 -1031 3223 0
-622 -1029 3221 0
-622 -1027 3219 0
-622 -1025 3217 0
-622 -1023 3215 0
-622 -1022 3213 0
-620 3227 0
-620 -1035 3225 0
-620 -1033 3223 0
-620 -1031 3221 0
-620 -1029 3219 0
-620 -1027 3217 0
-620 -1025 3215 0
-620 -1023 3213 0
-620 -1022 3211 0
-618 3225 0
-618 -1035 3223 0
-618 -1033 3221 0
-618 -1031 3219 0
-618 -1029 3217 0
-618 -1027 3215 0
-618 -1025 3213 0
-618 -1023 3211 0
-618 -1022 3209 0
-617 3223 0
-617 -1035 3221 0
-617 -1033 3219 0
-617 -1031 3217 0
-617 -1029 3215 0
-617 -1027 3213 0
-617 -1025 3211 0
-617 -1023 3209 0
-617 -1022 3208 0
c (( - aux500 + shift(x_00004_00006, -1) + shift(x_00009_00006, -1))<=0)
1157 -3239 0
1158 -3240 0
1160 -3242 0
1162 -3244 0
1164 -3246 0
1166 -3248 0
1168 -3250 0
1170 -3252 0
482 -3239 0
482 1157 -3240 0
482 1158 -3242 0
482 1160 -3244 0
482 1162 -3246 0
482 1164 -3248 0
482 1166 -3250 0
482 1168 -3252 0
482 1170 -3254 0
483 -3240 0
483 1157 -3242 0
483 1158 -3244 0
483 1160 -3246 0
483 1162 -3248 0
483 1164 -3250 0
483 1166 -3252 0
483 1168 -3254 0
483 1170 -3256 0
485 -3242 0
485 1157 -3244 0
485 1158 -3246 0
485 1160 -3248 0
485 1162 -3250 0
485 1164 -3252 0
485 1166 -3254 0
485 1168 -3256 0
485 1170 -3258 0
487 -3244 0
487 1157 -3246 0
487 1158 -3248 0
487 1160 -3250 0
487 1162 -3252 0
487 1164 -3254 0
487 1166 -3256 0
487 1168 -3258 0
487 1170 -3260 0
489 -3246 0
489 1157 -3248 0
489 1158 -3250 0
489 1160 -3252 0
489 1162 -3254 0
489 1164 -3256 0
489 1166 -3258 0
489 1168 -3260 0
489 1170 -3262 0
491 -3248 0
491 1157 -3250 0
491 1158 -3252 0
491 1160 -3254 0
491 1162 -3256 0
491 1164 -3258 0
491 1166 -3260 0
491 1168 -3262 0
491 1170 -3264 0
493 -3250 0
493 1157 -3252 0
493 1158 -3254 0
493 1160 -3256 0
493 1162 -3258 0
493 1164 -3260 0
493 1166 -3262 0
493 1168 -3264 0
493 1170 -3266 0
495 -3252 0
495 1157 -3254 0
495 1158 -3256 0
495 1160 -3258 0
495 1162 -3260 0
495 1164 -3262 0
495 1166 -3264 0
495 1168 -3266 0
495 1170 -3268 0
c (0<=( - aux500 + shift(x_00004_00006, -1) + shift(x_00009_00006, -1)))
-1170 3268 0
-1168 3266 0
-1166 3264 0
-1164 3262 0
-1162 3260 0
-1160 3258 0
-1158 3256 0
-1157 3254 0
-495 3268 0
-495 -1170 3266 0
-495 -1168 3264 0
-495 -1166 3262 0
-495 -1164 3260 0
-495 -1162 3258 0
-495 -1160 3256 0
-495 -1158 3254 0
-495 -1157 3252 0
-493 3266 0
-493 -1170 3264 0
-493 -1168 3262 0
-493 -1166 3260 0
-493 -1164 3258 0
-493 -1162 3256 0
-493 -1160 3254 0
-493 -1158 3252 0
-493 -1157 3250 0
-491 3264 0
-491 -1170 3262 0
-491 -1168 3260 0
-491 -1166 3258 0
-491 -1164 3256 0
-491 -1162 3254 0
-491 -1160 3252 0
-491 -1158 3250 0
-491 -1157 3248 0
-489 3262 0
-489 -1170 3260 0
-489 -1168 3258 0
-489 -1166 3256 0
-489 -1164 3254 0
-489 -1162 3252 0
-489 -1160 3250 0
-489 -1158 3248 0
-489 -1157 3246 0
-487 3260 0
-487 -1170 3258 0
-487 -1168 3256 0
-487 -1166 3254 0
-487 -1164 3252 0
-487 -1162 3250 0
-487 -1160 3248 0
-487 -1158 3246 0
-487 -1157 3244 0
-485 3258 0
-485 -1170 3256 0
-485 -1168 3254 0
-485 -1166 3252 0
-485 -1164 3250 0
-485 -1162 3248 0
-485 -1160 3246 0
-485 -1158 3244 0
-485 -1157 3242 0
-483 3256 0
-483 -1170 3254 0
-483 -1168 3252 0
-483 -1166 3250 0
-483 -1164 3248 0
-483 -1162 3246 0
-483 -1160 3244 0
-483 -1158 3242 0
-483 -1157 3240 0
-482 3254 0
-482 -1170 3252 0
-482 -1168 3250 0
-482 -1166 3248 0
-482 -1164 3246 0
-482 -1162 3244 0
-482 -1160 3242 0
-482 -1158 3240 0
-482 -1157 3239 0
c ((aux500 - aux501 + shift(x_00003_00006, -1))<=0)
3239 -3270 0
3240 -3271 0
3242 -3273 0
3244 -3275 0
3246 -3277 0
3248 -3279 0
3250 -3281 0
3252 -3283 0
3254 -3285 0
3256 -3287 0
3258 -3289 0
3260 -3291 0
3262 -3293 0
3264 -3295 0
3266 -3297 0
3268 -3299 0
347 -3270 0
347 3239 -3271 0
347 3240 -3273 0
347 3242 -3275 0
347 3244 -3277 0
347 3246 -3279 0
347 3248 -3281 0
347 3250 -3283 0
347 3252 -3285 0
347 3254 -3287 0
347 3256 -3289 0
347 3258 -3291 0
347 3260 -3293 0
347 3262 -3295 0
347 3264 -3297 0
347 3266 -3299 0
347 3268 -3301 0
348 -3271 0
348 3239 -3273 0
348 3240 -3275 0
348 3242 -3277 0
348 3244 -3279 0
348 3246 -3281 0
348 3248 -3283 0
348 3250 -3285 0
348 3252 -3287 0
348 3254 -3289 0
348 3256 -3291 0
348 3258 -3293 0
348 3260 -3295 0
348 3262 -3297 0
348 3264 -3299 0
348 3266 -3301 0
348 3268 -3303 0
350 -3273 0
350 3239 -3275 0
350 3240 -3277 0
350 3242 -3279 0
350 3244 -3281 0
350 3246 -3283 0
350 3248 -3285 0
350 3250 -3287 0
350 3252 -3289 0
350 3254 -3291 0
350 3256 -3293 0
350 3258 -3295 0
350 3260 -3297 0
350 3262 -3299 0
350 3264 -3301 0
350 3266 -3303 0
350 3268 -3305 0
352 -3275 0
352 3239 -3277 0
352 3240 -3279 0
352 3242 -3281 0
352 3244 -3283 0
352 3246 -3285 0
352 3248 -3287 0
352 3250 -3289 0
352 3252 -3291 0
352 3254 -3293 0
352 3256 -3295 0
352 3258 -3297 0
352 3260 -3299 0
352 3262 -3301 0
352 3264 -3303 0
352 3266 -3305 0
352 3268 -3307 0
354 -3277 0
354 3239 -3279 0
354 3240 -3281 0
354 3242 -3283 0
354 3244 -3285 0
354 3246 -3287 0
354 3248 -3289 0
354 3250 -3291 0
354 3252 -3293 0
354 3254 -3295 0
354 3256 -3297 0
354 3258 -3299 0
354 3260 -3301 0
354 3262 -3303 0
354 3264 -3305 0
354 3266 -3307 0
354 3268 -3309 0
356 -3279 0
356 3239 -3281 0
356 3240 -3283 0
356 3242 -3285 0
356 3244 -3287 0
356 3246 -3289 0
356 3248 -3291 0
356 3250 -3293 0
356 3252 -3295 0
356 3254 -3297 0
356 3256 -3299 0
356 3258 -3301 0
356 3260 -3303 0
356 3262 -3305 0
356 3264 -3307 0
356 3266 -3309 0
356 3268 -3311 0
358 -3281 0
358 3239 -3283 0
358 3240 -3285 0
358 3242 -3287 0
358 3244 -3289 0
358 3246 -3291 0
358 3248 -3293 0
358 3250 -3295 0
358 3252 -3297 0
358 3254 -3299 0
358 3256 -3301 0
358 3258 -3303 0
358 3260 -3305 0
358 3262 -3307 0
358 3264 -3309 0
358 3266 -3311 0
358 3268 -3313 0
360 -3283 0
360 3239 -3285 0
360 3240 -3287 0
360 3242 -3289 0
360 3244 -3291 0
360 3246 -3293 0
360 3248 -3295 0
360 3250 -3297 0
360 3252 -3299 0
360 3254 -3301 0
360 3256 -3303 0
360 3258 -3305 0
360 3260 -3307 0
360 3262 -3309 0
360 3264 -3311 0
360 3266 -3313 0
360 3268 -3315 0
c (0<=(aux500 - aux501 + shift(x_00003_00006, -1)))
-3268 3315 0
-3266 3313 0
-3264 3311 0
-3262 3309 0
-3260 3307 0
-3258 3305 0
-3256 3303 0
-3254 3301 0
-3252 3299 0
-3250 3297 0
-3248 3295 0
-3246 3293 0
-3244 3291 0
-3242 3289 0
-3240 3287 0
-3239 3285 0
-360 3315 0
-360 -3268 3313 0
-360 -3266 3311 0
-360 -3264 3309 0
-360 -3262 3307 0
-360 -3260 3305 0
-360 -3258 3303 0
-360 -3256 3301 0
-360 -3254 3299 0
-360 -3252 3297 0
-360 -3250 3295 0
-360 -3248 3293 0
-360 -3246 3291 0
-360 -3244 3289 0
-360 -3242 3287 0
-360 -3240 3285 0
-360 -3239 3283 0
-358 3313 0
-358 -3268 3311 0
-358 -3266 3309 0
-358 -3264 3307 0
-358 -3262 3305 0
-358 -3260 3303 0
-358 -3258 3301 0
-358 -3256 3299 0
-358 -3254 3297 0
-358 -3252 3295 0
-358 -3250 3293 0
-358 -3248 3291 0
-358 -3246 3289 0
-358 -3244 3287 0
-358 -3242 3285 0
-358 -3240 3283 0
-358 -3239 3281 0
-356 3311 0
-356 -3268 3309 0
-356 -3266 3307 0
-356 -3264 3305 0
-356 -3262 3303 0
-356 -3260 3301 0
-356 -3258 3299 0
-356 -3256 3297 0
-356 -3254 3295 0
-356 -3252 3293 0
-356 -3250 3291 0
-356 -3248 3289 0
-356 -3246 3287 0
-356 -3244 3285 0
-356 -3242 3283 0
-356 -3240 3281 0
-356 -3239 3279 0
-354 3309 0
-354 -3268 3307 0
-354 -3266 3305 0
-354 -3264 3303 0
-354 -3262 3301 0
-354 -3260 3299 0
-354 -3258 3297 0
-354 -3256 3295 0
-354 -3254 3293 0
-354 -3252 3291 0
-354 -3250 3289 0
-354 -3248 3287 0
-354 -3246 3285 0
-354 -3244 3283 0
-354 -3242 3281 0
-354 -3240 3279 0
-354 -3239 3277 0
-352 3307 0
-352 -3268 3305 0
-352 -3266 3303 0
-352 -3264 3301 0
-352 -3262 3299 0
-352 -3260 3297 0
-352 -3258 3295 0
-352 -3256 3293 0
-352 -3254 3291 0
-352 -3252 3289 0
-352 -3250 3287 0
-352 -3248 3285 0
-352 -3246 3283 0
-352 -3244 3281 0
-352 -3242 3279 0
-352 -3240 3277 0
-352 -3239 3275 0
-350 3305 0
-350 -3268 3303 0
-350 -3266 3301 0
-350 -3264 3299 0
-350 -3262 3297 0
-350 -3260 3295 0
-350 -3258 3293 0
-350 -3256 3291 0
-350 -3254 3289 0
-350 -3252 3287 0
-350 -3250 3285 0
-350 -3248 3283 0
-350 -3246 3281 0
-350 -3244 3279 0
-350 -3242 3277 0
-350 -3240 3275 0
-350 -3239 3273 0
-348 3303 0
-348 -3268 3301 0
-348 -3266 3299 0
-348 -3264 3297 0
-348 -3262 3295 0
-348 -3260 3293 0
-348 -3258 3291 0
-348 -3256 3289 0
-348 -3254 3287 0
-348 -3252 3285 0
-348 -3250 3283 0
-348 -3248 3281 0
-348 -3246 3279 0
-348 -3244 3277 0
-348 -3242 3275 0
-348 -3240 3273 0
-348 -3239 3271 0
-347 3301 0
-347 -3268 3299 0
-347 -3266 3297 0
-347 -3264 3295 0
-347 -3262 3293 0
-347 -3260 3291 0
-347 -3258 3289 0
-347 -3256 3287 0
-347 -3254 3285 0
-347 -3252 3283 0
-347 -3250 3281 0
-347 -3248 3279 0
-347 -3246 3277 0
-347 -3244 3275 0
-347 -3242 3273 0
-347 -3240 3271 0
-347 -3239 3270 0
c ((aux497 + aux499 - aux502)<=0)
3208 -3317 0
3209 -3318 0
3211 -3320 0
3213 -3322 0
3215 -3324 0
3217 -3326 0
3219 -3328 0
3221 -3330 0
3223 -3332 0
3225 -3334 0
3227 -3336 0
3229 -3338 0
3231 -3340 0
3233 -3342 0
3235 -3344 0
3237 -3346 0
3146 -3317 0
3146 3208 -3318 0
3146 3209 -3320 0
3146 3211 -3322 0
3146 3213 -3324 0
3146 3215 -3326 0
3146 3217 -3328 0
3146 3219 -3330 0
3146 3221 -3332 0
3146 3223 -3334 0
3146 3225 -3336 0
3146 3227 -3338 0
3146 3229 -3340 0
3146 3231 -3342 0
3146 3233 -3344 0
3146 3235 -3346 0
3146 3237 -3348 0
3147 -3318 0
3147 3208 -3320 0
3147 3209 -3322 0
3147 3211 -3324 0
3147 3213 -3326 0
3147 3215 -3328 0
3147 3217 -3330 0
3147 3219 -3332 0
3147 3221 -3334 0
3147 3223 -3336 0
3147 3225 -3338 0
3147 3227 -3340 0
3147 3229 -3342 0
3147 3231 -3344 0
3147 3233 -3346 0
3147 3235 -3348 0
3147 3237 -3350 0
3149 -3320 0
3149 3208 -3322 0
3149 3209 -3324 0
3149 3211 -3326 0
3149 3213 -3328 0
3149 3215 -3330 0
3149 3217 -3332 0
3149 3219 -3334 0
3149 3221 -3336 0
3149 3223 -3338 0
3149 3225 -3340 0
3149 3227 -3342 0
3149 3229 -3344 0
3149 3231 -3346 0
3149 3233 -3348 0
3149 3235 -3350 0
3149 3237 -3352 0
3151 -3322 0
3151 3208 -3324 0
3151 3209 -3326 0
3151 3211 -3328 0
3151 3213 -3330 0
3151 3215 -3332 0
3151 3217 -3334 0
3151 3219 -3336 0
3151 3221 -3338 0
3151 3223 -3340 0
3151 3225 -3342 0
3151 3227 -3344 0
3151 3229 -3346 0
3151 3231 -3348 0
3151 3233 -3350 0
3151 3235 -3352 0
3151 3237 -3354 0
3153 -3324 0
3153 3208 -3326 0
3153 3209 -3328 0
3153 3211 -3330 0
3153 3213 -3332 0
3153 3215 -3334 0
3153 3217 -3336 0
3153 3219 -3338 0
3153 3221 -3340 0
3153 3223 -3342 0
3153 3225 -3344 0
3153 3227 -3346 0
3153 3229 -3348 0
3153 3231 -3350 0
3153 3233 -3352 0
3153 3235 -3354 0
3153 3237 -3356 0
3155 -3326 0
3155 3208 -3328 0
3155 3209 -3330 0
3155 3211 -3332 0
3155 3213 -3334 0
3155 3215 -3336 0
3155 3217 -3338 0
3155 3219 -3340 0
3155 3221 -3342 0
3155 3223 -3344 0
3155 3225 -3346 0
3155 3227 -3348 0
3155 3229 -3350 0
3155 3231 -3352 0
3155 3233 -3354 0
3155 3235 -3356 0
3155 3237 -3358 0
3157 -3328 0
3157 3208 -3330 0
3157 3209 -3332 0
3157 3211 -3334 0
3157 3213 -3336 0
3157 3215 -3338 0
3157 3217 -3340 0
3157 3219 -3342 0
3157 3221 -3344 0
3157 3223 -3346 0
3157 3225 -3348 0
3157 3227 -3350 0
3157 3229 -3352 0
3157 3231 -3354 0
3157 3233 -3356 0
3157 3235 -3358 0
3157 3237 -3360 0
3159 -3330 0
3159 3208 -3332 0
3159 3209 -3334 0
3159 3211 -3336 0
3159 3213 -3338 0
3159 3215 -3340 0
3159 3217 -3342 0
3159 3219 -3344 0
3159 3221 -3346 0
3159 3223 -3348 0
3159 3225 -3350 0
3159 3227 -3352 0
3159 3229 -3354 0
3159 3231 -3356 0
3159 3233 -3358 0
3159 3235 -3360 0
3159 3237 -3362 0
3161 -3332 0
3161 3208 -3334 0
3161 3209 -3336 0
3161 3211 -3338 0
3161 3213 -3340 0
3161 3215 -3342 0
3161 3217 -3344 0
3161 3219 -3346 0
3161 3221 -3348 0
3161 3223 -3350 0
3161 3225 -3352 0
3161 3227 -3354 0
3161 3229 -3356 0
3161 3231 -3358 0
3161 3233 -3360 0
3161 3235 -3362 0
3161 3237 -3364 0
3163 -3334 0
3163 3208 -3336 0
3163 3209 -3338 0
3163 3211 -3340 0
3163 3213 -3342 0
3163 3215 -3344 0
3163 3217 -3346 0
3163 3219 -3348 0
3163 3221 -3350 0
3163 3223 -3352 0
3163 3225 -3354 0
3163 3227 -3356 0
3163 3229 -3358 0
3163 3231 -3360 0
3163 3233 -3362 0
3163 3235 -3364 0
3163 3237 -3366 0
3165 -3336 0
3165 3208 -3338 0
3165 3209 -3340 0
3165 3211 -3342 0
3165 3213 -3344 0
3165 3215 -3346 0
3165 3217 -3348 0
3165 3219 -3350 0
3165 3221 -3352 0
3165 3223 -3354 0
3165 3225 -3356 0
3165 3227 -3358 0
3165 3229 -3360 0
3165 3231 -3362 0
3165 3233 -3364 0
3165 3235 -3366 0
3165 3237 -3368 0
3167 -3338 0
3167 3208 -3340 0
3167 3209 -3342 0
3167 3211 -3344 0
3167 3213 -3346 0
3167 3215 -3348 0
3167 3217 -3350 0
3167 3219 -3352 0
3167 3221 -3354 0
3167 3223 -3356 0
3167 3225 -3358 0
3167 3227 -3360 0
3167 3229 -3362 0
3167 3231 -3364 0
3167 3233 -3366 0
3167 3235 -3368 0
3167 3237 -3370 0
3169 -3340 0
3169 3208 -3342 0
3169 3209 -3344 0
3169 3211 -3346 0
3169 3213 -3348 0
3169 3215 -3350 0
3169 3217 -3352 0
3169 3219 -3354 0
3169 3221 -3356 0
3169 3223 -3358 0
3169 3225 -3360 0
3169 3227 -3362 0
3169 3229 -3364 0
3169 3231 -3366 0
3169 3233 -3368 0
3169 3235 -3370 0
3169 3237 -3372 0
3171 -3342 0
3171 3208 -3344 0
3171 3209 -3346 0
3171 3211 -3348 0
3171 3213 -3350 0
3171 3215 -3352 0
3171 3217 -3354 0
3171 3219 -3356 0
3171 3221 -3358 0
3171 3223 -3360 0
3171 3225 -3362 0
3171 3227 -3364 0
3171 3229 -3366 0
3171 3231 -3368 0
3171 3233 -3370 0
3171 3235 -3372 0
3171 3237 -3374 0
3173 -3344 0
3173 3208 -3346 0
3173 3209 -3348 0
3173 3211 -3350 0
3173 3213 -3352 0
3173 3215 -3354 0
3173 3217 -3356 0
3173 3219 -3358 0
3173 3221 -3360 0
3173 3223 -3362 0
3173 3225 -3364 0
3173 3227 -3366 0
3173 3229 -3368 0
3173 3231 -3370 0
3173 3233 -3372 0
3173 3235 -3374 0
3173 3237 -3376 0
3175 -3346 0
3175 3208 -3348 0
3175 3209 -3350 0
3175 3211 -3352 0
3175 3213 -3354 0
3175 3215 -3356 0
3175 3217 -3358 0
3175 3219 -3360 0
3175 3221 -3362 0
3175 3223 -3364 0
3175 3225 -3366 0
3175 3227 -3368 0
3175 3229 -3370 0
3175 3231 -3372 0
3175 3233 -3374 0
3175 3235 -3376 0
3175 3237 -3378 0
c (0<=(aux497 + aux499 - aux502))
-3237 3378 0
-3235 3376 0
-3233 3374 0
-3231 3372 0
-3229 3370 0
-3227 3368 0
-3225 3366 0
-3223 3364 0
-3221 3362 0
-3219 3360 0
-3217 3358 0
-3215 3356 0
-3213 3354 0
-3211 3352 0
-3209 3350 0
-3208 3348 0
-3175 3378 0
-3175 -3237 3376 0
-3175 -3235 3374 0
-3175 -3233 3372 0
-3175 -3231 3370 0
-3175 -3229 3368 0
-3175 -3227 3366 0
-3175 -3225 3364 0
-3175 -3223 3362 0
-3175 -3221 3360 0
-3175 -3219 3358 0
-3175 -3217 3356 0
-3175 -3215 3354 0
-3175 -3213 3352 0
-3175 -3211 3350 0
-3175 -3209 3348 0
-3175 -3208 3346 0
-3173 3376 0
-3173 -3237 3374 0
-3173 -3235 3372 0
-3173 -3233 3370 0
-3173 -3231 3368 0
-3173 -3229 3366 0
-3173 -3227 3364 0
-3173 -3225 3362 0
-3173 -3223 3360 0
-3173 -3221 3358 0
-3173 -3219 3356 0
-3173 -3217 3354 0
-3173 -3215 3352 0
-3173 -3213 3350 0
-3173 -3211 3348 0
-3173 -3209 3346 0
-3173 -3208 3344 0
-3171 3374 0
-3171 -3237 3372 0
-3171 -3235 3370 0
-3171 -3233 3368 0
-3171 -3231 3366 0
-3171 -3229 3364 0
-3171 -3227 3362 0
-3171 -3225 3360 0
-3171 -3223 3358 0
-3171 -3221 3356 0
-3171 -3219 3354 0
-3171 -3217 3352 0
-3171 -3215 3350 0
-3171 -3213 3348 0
-3171 -3211 3346 0
-3171 -3209 3344 0
-3171 -3208 3342 0
-3169 3372 0
-3169 -3237 3370 0
-3169 -3235 3368 0
-3169 -3233 3366 0
-3169 -3231 3364 0
-3169 -3229 3362 0
-3169 -3227 3360 0
-3169 -3225 3358 0
-3169 -3223 3356 0
-3169 -3221 3354 0
-3169 -3219 3352 0
-3169 -3217 3350 0
-3169 -3215 3348 0
-3169 -3213 3346 0
-3169 -3211 3344 0
-3169 -3209 3342 0
-3169 -3208 3340 0
-3167 3370 0
-3167 -3237 3368 0
-3167 -3235 3366 0
-3167 -3233 3364 0
-3167 -3231 3362 0
-3167 -3229 3360 0
-3167 -3227 3358 0
-3167 -3225 3356 0
-3167 -3223 3354 0
-3167 -3221 3352 0
-3167 -3219 3350 0
-3167 -3217 3348 0
-3167 -3215 3346 0
-3167 -3213 3344 0
-3167 -3211 3342 0
-3167 -3209 3340 0
-3167 -3208 3338 0
-3165 3368 0
-3165 -3237 3366 0
-3165 -3235 3364 0
-3165 -3233 3362 0
-3165 -3231 3360 0
-3165 -3229 3358 0
-3165 -3227 3356 0
-3165 -3225 3354 0
-3165 -3223 3352 0
-3165 -3221 3350 0
-3165 -3219 3348 0
-3165 -3217 3346 0
-3165 -3215 3344 0
-3165 -3213 3342 0
-3165 -3211 3340 0
-3165 -3209 3338 0
-3165 -3208 3336 0
-3163 3366 0
-3163 -3237 3364 0
-3163 -3235 3362 0
-3163 -3233 3360 0
-3163 -3231 3358 0
-3163 -3229 3356 0
-3163 -3227 3354 0
-3163 -3225 3352 0
-3163 -3223 3350 0
-3163 -3221 3348 0
-3163 -3219 3346 0
-3163 -3217 3344 0
-3163 -3215 3342 0
-3163 -3213 3340 0
-3163 -3211 3338 0
-3163 -3209 3336 0
-3163 -3208 3334 0
-3161 3364 0
-3161 -3237 3362 0
-3161 -3235 3360 0
-3161 -3233 3358 0
-3161 -3231 3356 0
-3161 -3229 3354 0
-3161 -3227 3352 0
-3161 -3225 3350 0
-3161 -3223 3348 0
-3161 -3221 3346 0
-3161 -3219 3344 0
-3161 -3217 3342 0
-3161 -3215 3340 0
-3161 -3213 3338 0
-3161 -3211 3336 0
-3161 -3209 3334 0
-3161 -3208 3332 0
-3159 3362 0
-3159 -3237 3360 0
-3159 -3235 3358 0
-3159 -3233 3356 0
-3159 -3231 3354 0
-3159 -3229 3352 0
-3159 -3227 3350 0
-3159 -3225 3348 0
-3159 -3223 3346 0
-3159 -3221 3344 0
-3159 -3219 3342 0
-3159 -3217 3340 0
-3159 -3215 3338 0
-3159 -3213 3336 0
-3159 -3211 3334 0
-3159 -3209 3332 0
-3159 -3208 3330 0
-3157 3360 0
-3157 -3237 3358 0
-3157 -3235 3356 0
-3157 -3233 3354 0
-3157 -3231 3352 0
-3157 -3229 3350 0
-3157 -3227 3348 0
-3157 -3225 3346 0
-3157 -3223 3344 0
-3157 -3221 3342 0
-3157 -3219 3340 0
-3157 -3217 3338 0
-3157 -3215 3336 0
-3157 -3213 3334 0
-3157 -3211 3332 0
-3157 -3209 3330 0
-3157 -3208 3328 0
-3155 3358 0
-3155 -3237 3356 0
-3155 -3235 3354 0
-3155 -3233 3352 0
-3155 -3231 3350 0
-3155 -3229 3348 0
-3155 -3227 3346 0
-3155 -3225 3344 0
-3155 -3223 3342 0
-3155 -3221 3340 0
-3155 -3219 3338 0
-3155 -3217 3336 0
-3155 -3215 3334 0
-3155 -3213 3332 0
-3155 -3211 3330 0
-3155 -3209 3328 0
-3155 -3208 3326 0
-3153 3356 0
-3153 -3237 3354 0
-3153 -3235 3352 0
-3153 -3233 3350 0
-3153 -3231 3348 0
-3153 -3229 3346 0
-3153 -3227 3344 0
-3153 -3225 3342 0
-3153 -3223 3340 0
-3153 -3221 3338 0
-3153 -3219 3336 0
-3153 -3217 3334 0
-3153 -3215 3332 0
-3153 -3213 3330 0
-3153 -3211 3328 0
-3153 -3209 3326 0
-3153 -3208 3324 0
-3151 3354 0
-3151 -3237 3352 0
-3151 -3235 3350 0
-3151 -3233 3348 0
-3151 -3231 3346 0
-3151 -3229 3344 0
-3151 -3227 3342 0
-3151 -3225 3340 0
-3151 -3223 3338 0
-3151 -3221 3336 0
-3151 -3219 3334 0
-3151 -3217 3332 0
-3151 -3215 3330 0
-3151 -3213 3328 0
-3151 -3211 3326 0
-3151 -3209 3324 0
-3151 -3208 3322 0
-3149 3352 0
-3149 -3237 3350 0
-3149 -3235 3348 0
-3149 -3233 3346 0
-3149 -3231 3344 0
-3149 -3229 3342 0
-3149 -3227 3340 0
-3149 -3225 3338 0
-3149 -3223 3336 0
-3149 -3221 3334 0
-3149 -3219 3332 0
-3149 -3217 3330 0
-3149 -3215 3328 0
-3149 -3213 3326 0
-3149 -3211 3324 0
-3149 -3209 3322 0
-3149 -3208 3320 0
-3147 3350 0
-3147 -3237 3348 0
-3147 -3235 3346 0
-3147 -3233 3344 0
-3147 -3231 3342 0
-3147 -3229 3340 0
-3147 -3227 3338 0
-3147 -3225 3336 0
-3147 -3223 3334 0
-3147 -3221 3332 0
-3147 -3219 3330 0
-3147 -3217 3328 0
-3147 -3215 3326 0
-3147 -3213 3324 0
-3147 -3211 3322 0
-3147 -3209 3320 0
-3147 -3208 3318 0
-3146 3348 0
-3146 -3237 3346 0
-3146 -3235 3344 0
-3146 -3233 3342 0
-3146 -3231 3340 0
-3146 -3229 3338 0
-3146 -3227 3336 0
-3146 -3225 3334 0
-3146 -3223 3332 0
-3146 -3221 3330 0
-3146 -3219 3328 0
-3146 -3217 3326 0
-3146 -3215 3324 0
-3146 -3213 3322 0
-3146 -3211 3320 0
-3146 -3209 3318 0
-3146 -3208 3317 0
c (( - aux503 + shift(x_00006_00007, -1) + shift(x_00002_00007, -1))<=0)
227 -3380 0
228 -3381 0
230 -3383 0
232 -3385 0
234 -3387 0
236 -3389 0
238 -3391 0
240 -3393 0
767 -3380 0
767 227 -3381 0
767 228 -3383 0
767 230 -3385 0
767 232 -3387 0
767 234 -3389 0
767 236 -3391 0
767 238 -3393 0
767 240 -3395 0
768 -3381 0
768 227 -3383 0
768 228 -3385 0
768 230 -3387 0
768 232 -3389 0
768 234 -3391 0
768 236 -3393 0
768 238 -3395 0
768 240 -3397 0
770 -3383 0
770 227 -3385 0
770 228 -3387 0
770 230 -3389 0
770 232 -3391 0
770 234 -3393 0
770 236 -3395 0
770 238 -3397 0
770 240 -3399 0
772 -3385 0
772 227 -3387 0
772 228 -3389 0
772 230 -3391 0
772 232 -3393 0
772 234 -3395 0
772 236 -3397 0
772 238 -3399 0
772 240 -3401 0
774 -3387 0
774 227 -3389 0
774 228 -3391 0
774 230 -3393 0
774 232 -3395 0
774 234 -3397 0
774 236 -3399 0
774 238 -3401 0
774 240 -3403 0
776 -3389 0
776 227 -3391 0
776 228 -3393 0
776 230 -3395 0
776 232 -3397 0
776 234 -3399 0
776 236 -3401 0
776 238 -3403 0
776 240 -3405 0
778 -3391 0
778 227 -3393 0
778 228 -3395 0
778 230 -3397 0
778 232 -3399 0
778 234 -3401 0
778 236 -3403 0
778 238 -3405 0
778 240 -3407 0
780 -3393 0
780 227 -3395 0
780 228 -3397 0
780 230 -3399 0
780 232 -3401 0
780 234 -3403 0
780 236 -3405 0
780 238 -3407 0
780 240 -3409 0
c (0<=( - aux503 + shift(x_00006_00007, -1) + shift(x_00002_00007, -1)))
-240 3409 0
-238 3407 0
-236 3405 0
-234 3403 0
-232 3401 0
-230 3399 0
-228 3397 0
-227 3395 0
-780 3409 0
-780 -240 3407 0
-780 -238 3405 0
-780 -236 3403 0
-780 -234 3401 0
-780 -232 3399 0
-780 -230 3397 0
-780 -228 3395 0
-780 -227 3393 0
-778 3407 0
-778 -240 3405 0
-778 -238 3403 0
-778 -236 3401 0
-778 -234 3399 0
-778 -232 3397 0
-778 -230 3395 0
-778 -228 3393 0
-778 -227 3391 0
-776 3405 0
-776 -240 3403 0
-776 -238 3401 0
-776 -236 3399 0
-776 -234 3397 0
-776 -232 3395 0
-776 -230 3393 0
-776 -228 3391 0
-776 -227 3389 0
-774 3403 0
-774 -240 3401 0
-774 -238 3399 0
-774 -236 3397 0
-774 -234 3395 0
-774 -232 3393 0
-774 -230 3391 0
-774 -228 3389 0
-774 -227 3387 0
-772 3401 0
-772 -240 3399 0
-772 -238 3397 0
-772 -236 3395 0
-772 -234 3393 0
-772 -232 3391 0
-772 -230 3389 0
-772 -228 3387 0
-772 -227 3385 0
-770 3399 0
-770 -240 3397 0
-770 -238 3395 0
-770 -236 3393 0
-770 -234 3391 0
-770 -232 3389 0
-770 -230 3387 0
-770 -228 3385 0
-770 -227 3383 0
-768 3397 0
-768 -240 3395 0
-768 -238 3393 0
-768 -236 3391 0
-768 -234 3389 0
-768 -232 3387 0
-768 -230 3385 0
-768 -228 3383 0
-768 -227 3381 0
-767 3395 0
-767 -240 3393 0
-767 -238 3391 0
-767 -236 3389 0
-767 -234 3387 0
-767 -232 3385 0
-767 -230 3383 0
-767 -228 3381 0
-767 -227 3380 0
c ((shift(x_00007_00007, -1) - aux504 + shift(x_00001_00007, -1))<=0)
92 -3411 0
93 -3412 0
95 -3414 0
97 -3416 0
99 -3418 0
101 -3420 0
103 -3422 0
105 -3424 0
902 -3411 0
902 92 -3412 0
902 93 -3414 0
902 95 -3416 0
902 97 -3418 0
902 99 -3420 0
902 101 -3422 0
902 103 -3424 0
902 105 -3426 0
903 -3412 0
903 92 -3414 0
903 93 -3416 0
903 95 -3418 0
903 97 -3420 0
903 99 -3422 0
903 101 -3424 0
903 103 -3426 0
903 105 -3428 0
905 -3414 0
905 92 -3416 0
905 93 -3418 0
905 95 -3420 0
905 97 -3422 0
905 99 -3424 0
905 101 -3426 0
905 103 -3428 0
905 105 -3430 0
907 -3416 0
907 92 -3418 0
907 93 -3420 0
907 95 -3422 0
907 97 -3424 0
907 99 -3426 0
907 101 -3428 0
907 103 -3430 0
907 105 -3432 0
909 -3418 0
909 92 -3420 0
909 93 -3422 0
909 95 -3424 0
909 97 -3426 0
909 99 -3428 0
909 101 -3430 0
909 103 -3432 0
909 105 -3434 0
911 -3420 0
911 92 -3422 0
911 93 -3424 0
911 95 -3426 0
911 97 -3428 0
911 99 -3430 0
911 101 -3432 0
911 103 -3434 0
911 105 -3436 0
913 -3422 0
913 92 -3424 0
913 93 -3426 0
913 95 -3428 0
913 97 -3430 0
913 99 -3432 0
913 101 -3434 0
913 103 -3436 0
913 105 -3438 0
915 -3424 0
915 92 -3426 0
915 93 -3428 0
915 95 -3430 0
915 97 -3432 0
915 99 -3434 0
915 101 -3436 0
915 103 -3438 0
915 105 -3440 0
c (0<=(shift(x_00007_00007, -1) - aux504 + shift(x_00001_00007, -1)))
-105 3440 0
-103 3438 0
-101 3436 0
-99 3434 0
-97 3432 0
-95 3430 0
-93 3428 0
-92 3426 0
-915 3440 0
-915 -105 3438 0
-915 -103 3436 0
-915 -101 3434 0
-915 -99 3432 0
-915 -97 3430 0
-915 -95 3428 0
-915 -93 3426 0
-915 -92 3424 0
-913 3438 0
-913 -105 3436 0
-913 -103 3434 0
-913 -101 3432 0
-913 -99 3430 0
-913 -97 3428 0
-913 -95 3426 0
-913 -93 3424 0
-913 -92 3422 0
-911 3436 0
-911 -105 3434 0
-911 -103 3432 0
-911 -101 3430 0
-911 -99 3428 0
-911 -97 3426 0
-911 -95 3424 0
-911 -93 3422 0
-911 -92 3420 0
-909 3434 0
-909 -105 3432 0
-909 -103 3430 0
-909 -101 3428 0
-909 -99 3426 0
-909 -97 3424 0
-909 -95 3422 0
-909 -93 3420 0
-909 -92 3418 0
-907 3432 0
-907 -105 3430 0
-907 -103 3428 0
-907 -101 3426 0
-907 -99 3424 0
-907 -97 3422 0
-907 -95 3420 0
-907 -93 3418 0
-907 -92 3416 0
-905 3430 0
-905 -105 3428 0
-905 -103 3426 0
-905 -101 3424 0
-905 -99 3422 0
-905 -97 3420 0
-905 -95 3418 0
-905 -93 3416 0
-905 -92 3414 0
-903 3428 0
-903 -105 3426 0
-903 -103 3424 0
-903 -101 3422 0
-903 -99 3420 0
-903 -97 3418 0
-903 -95 3416 0
-903 -93 3414 0
-903 -92 3412 0
-902 3426 0
-902 -105 3424 0
-902 -103 3422 0
-902 -101 3420 0
-902 -99 3418 0
-902 -97 3416 0
-902 -95 3414 0
-902 -93 3412 0
-902 -92 3411 0
c (( - aux505 + shift(x_00005_00007, -1) + shift(x_00008_00007, -1))<=0)
1037 -3442 0
1038 -3443 0
1040 -3445 0
1042 -3447 0
1044 -3449 0
1046 -3451 0
1048 -3453 0
1050 -3455 0
632 -3442 0
632 1037 -3443 0
632 1038 -3445 0
632 1040 -3447 0
632 1042 -3449 0
632 1044 -3451 0
632 1046 -3453 0
632 1048 -3455 0
632 1050 -3457 0
633 -3443 0
633 1037 -3445 0
633 1038 -3447 0
633 1040 -3449 0
633 1042 -3451 0
633 1044 -3453 0
633 1046 -3455 0
633 1048 -3457 0
633 1050 -3459 0
635 -3445 0
635 1037 -3447 0
635 1038 -3449 0
635 1040 -3451 0
635 1042 -3453 0
635 1044 -3455 0
635 1046 -3457 0
635 1048 -3459 0
635 1050 -3461 0
637 -3447 0
637 1037 -3449 0
637 1038 -3451 0
637 1040 -3453 0
637 1042 -3455 0
637 1044 -3457 0
637 1046 -3459 0
637 1048 -3461 0
637 1050 -3463 0
639 -3449 0
639 1037 -3451 0
639 1038 -3453 0
639 1040 -3455 0
639 1042 -3457 0
639 1044 -3459 0
639 1046 -3461 0
639 1048 -3463 0
639 1050 -3465 0
641 -3451 0
641 1037 -3453 0
641 1038 -3455 0
641 1040 -3457 0
641 1042 -3459 0
641 1044 -3461 0
641 1046 -3463 0
641 1048 -3465 0
641 1050 -3467 0
643 -3453 0
643 1037 -3455 0
643 1038 -3457 0
643 1040 -3459 0
643 1042 -3461 0
643 1044 -3463 0
643 1046 -3465 0
643 1048 -3467 0
643 1050 -3469 0
645 -3455 0
645 1037 -3457 0
645 1038 -3459 0
645 1040 -3461 0
645 1042 -3463 0
645 1044 -3465 0
645 1046 -3467 0
645 1048 -3469 0
645 1050 -3471 0
c (0<=( - aux505 + shift(x_00005_00007, -1) + shift(x_00008_00007, -1)))
-1050 3471 0
-1048 3469 0
-1046 3467 0
-1044 3465 0
-1042 3463 0
-1040 3461 0
-1038 3459 0
-1037 3457 0
-645 3471 0
-645 -1050 3469 0
-645 -1048 3467 0
-645 -1046 3465 0
-645 -1044 3463 0
-645 -1042 3461 0
-645 -1040 3459 0
-645 -1038 3457 0
-645 -1037 3455 0
-643 3469 0
-643 -1050 3467 0
-643 -1048 3465 0
-643 -1046 3463 0
-643 -1044 3461 0
-643 -1042 3459 0
-643 -1040 3457 0
-643 -1038 3455 0
-643 -1037 3453 0
-641 3467 0
-641 -1050 3465 0
-641 -1048 3463 0
-641 -1046 3461 0
-641 -1044 3459 0
-641 -1042 3457 0
-641 -1040 3455 0
-641 -1038 3453 0
-641 -1037 3451 0
-639 3465 0
-639 -1050 3463 0
-639 -1048 3461 0
-639 -1046 3459 0
-639 -1044 3457 0
-639 -1042 3455 0
-639 -1040 3453 0
-639 -1038 3451 0
-639 -1037 3449 0
-637 3463 0
-637 -1050 3461 0
-637 -1048 3459 0
-637 -1046 3457 0
-637 -1044 3455 0
-637 -1042 3453 0
-637 -1040 3451 0
-637 -1038 3449 0
-637 -1037 3447 0
-635 3461 0
-635 -1050 3459 0
-635 -1048 3457 0
-635 -1046 3455 0
-635 -1044 3453 0
-635 -1042 3451 0
-635 -1040 3449 0
-635 -1038 3447 0
-635 -1037 3445 0
-633 3459 0
-633 -1050 3457 0
-633 -1048 3455 0
-633 -1046 3453 0
-633 -1044 3451 0
-633 -1042 3449 0
-633 -1040 3447 0
-633 -1038 3445 0
-633 -1037 3443 0
-632 3457 0
-632 -1050 3455 0
-632 -1048 3453 0
-632 -1046 3451 0
-632 -1044 3449 0
-632 -1042 3447 0
-632 -1040 3445 0
-632 -1038 3443 0
-632 -1037 3442 0
c (( - aux506 + shift(x_00004_00007, -1) + shift(x_00009_00007, -1))<=0)
1172 -3473 0
1173 -3474 0
1175 -3476 0
1177 -3478 0
1179 -3480 0
1181 -3482 0
1183 -3484 0
1185 -3486 0
497 -3473 0
497 1172 -3474 0
497 1173 -3476 0
497 1175 -3478 0
497 1177 -3480 0
497 1179 -3482 0
497 1181 -3484 0
497 1183 -3486 0
497 1185 -3488 0
498 -3474 0
498 1172 -3476 0
498 1173 -3478 0
498 1175 -3480 0
498 1177 -3482 0
498 1179 -3484 0
498 1181 -3486 0
498 1183 -3488 0
498 1185 -3490 0
500 -3476 0
500 1172 -3478 0
500 1173 -3480 0
500 1175 -3482 0
500 1177 -3484 0
500 1179 -3486 0
500 1181 -3488 0
500 1183 -3490 0
500 1185 -3492 0
502 -3478 0
502 1172 -3480 0
502 1173 -3482 0
502 1175 -3484 0
502 1177 -3486 0
502 1179 -3488 0
502 1181 -3490 0
502 1183 -3492 0
502 1185 -3494 0
504 -3480 0
504 1172 -3482 0
504 1173 -3484 0
504 1175 -3486 0
504 1177 -3488 0
504 1179 -3490 0
504 1181 -3492 0
504 1183 -3494 0
504 1185 -3496 0
506 -3482 0
506 1172 -3484 0
506 1173 -3486 0
506 1175 -3488 0
506 1177 -3490 0
506 1179 -3492 0
506 1181 -3494 0
506 1183 -3496 0
506 1185 -3498 0
508 -3484 0
508 1172 -3486 0
508 1173 -3488 0
508 1175 -3490 0
508 1177 -3492 0
508 1179 -3494 0
508 1181 -3496 0
508 1183 -3498 0
508 1185 -3500 0
510 -3486 0
510 1172 -3488 0
510 1173 -3490 0
510 1175 -3492 0
510 1177 -3494 0
510 1179 -3496 0
510 1181 -3498 0
510 1183 -3500 0
510 1185 -3502 0
c (0<=( - aux506 + shift(x_00004_00007, -1) + shift(x_00009_00007, -1)))
-1185 3502 0
-1183 3500 0
-1181 3498 0
-1179 3496 0
-1177 3494 0
-1175 3492 0
-1173 3490 0
-1172 3488 0
-510 3502 0
-510 -1185 3500 0
-510 -1183 3498 0
-510 -1181 3496 0
-510 -1179 3494 0
-510 -1177 3492 0
-510 -1175 3490 0
-510 -1173 3488 0
-510 -1172 3486 0
-508 3500 0
-508 -1185 3498 0
-508 -1183 3496 0
-508 -1181 3494 0
-508 -1179 3492 0
-508 -1177 3490 0
-508 -1175 3488 0
-508 -1173 3486 0
-508 -1172 3484 0
-506 3498 0
-506 -1185 3496 0
-506 -1183 3494 0
-506 -1181 3492 0
-506 -1179 3490 0
-506 -1177 3488 0
-506 -1175 3486 0
-506 -1173 3484 0
-506 -1172 3482 0
-504 3496 0
-504 -1185 3494 0
-504 -1183 3492 0
-504 -1181 3490 0
-504 -1179 3488 0
-504 -1177 3486 0
-504 -1175 3484 0
-504 -1173 3482 0
-504 -1172 3480 0
-502 3494 0
-502 -1185 3492 0
-502 -1183 3490 0
-502 -1181 3488 0
-502 -1179 3486 0
-502 -1177 3484 0
-502 -1175 3482 0
-502 -1173 3480 0
-502 -1172 3478 0
-500 3492 0
-500 -1185 3490 0
-500 -1183 3488 0
-500 -1181 3486 0
-500 -1179 3484 0
-500 -1177 3482 0
-500 -1175 3480 0
-500 -1173 3478 0
-500 -1172 3476 0
-498 3490 0
-498 -1185 3488 0
-498 -1183 3486 0
-498 -1181 3484 0
-498 -1179 3482 0
-498 -1177 3480 0
-498 -1175 3478 0
-498 -1173 3476 0
-498 -1172 3474 0
-497 3488 0
-497 -1185 3486 0
-497 -1183 3484 0
-497 -1181 3482 0
-497 -1179 3480 0
-497 -1177 3478 0
-497 -1175 3476 0
-497 -1173 3474 0
-497 -1172 3473 0
c ((aux506 - aux507 + shift(x_00003_00007, -1))<=0)
3473 -3504 0
3474 -3505 0
3476 -3507 0
3478 -3509 0
3480 -3511 0
3482 -3513 0
3484 -3515 0
3486 -3517 0
3488 -3519 0
3490 -3521 0
3492 -3523 0
3494 -3525 0
3496 -3527 0
3498 -3529 0
3500 -3531 0
3502 -3533 0
362 -3504 0
362 3473 -3505 0
362 3474 -3507 0
362 3476 -3509 0
362 3478 -3511 0
362 3480 -3513 0
362 3482 -3515 0
362 3484 -3517 0
362 3486 -3519 0
362 3488 -3521 0
362 3490 -3523 0
362 3492 -3525 0
362 3494 -3527 0
362 3496 -3529 0
362 3498 -3531 0
362 3500 -3533 0
362 3502 -3535 0
363 -3505 0
363 3473 -3507 0
363 3474 -3509 0
363 3476 -3511 0
363 3478 -3513 0
363 3480 -3515 0
363 3482 -3517 0
363 3484 -3519 0
363 3486 -3521 0
363 3488 -3523 0
363 3490 -3525 0
363 3492 -3527 0
363 3494 -3529 0
363 3496 -3531 0
363 3498 -3533 0
363 3500 -3535 0
363 3502 -3537 0
365 -3507 0
365 3473 -3509 0
365 3474 -3511 0
365 3476 -3513 0
365 3478 -3515 0
365 3480 -3517 0
365 3482 -3519 0
365 3484 -3521 0
365 3486 -3523 0
365 3488 -3525 0
365 3490 -3527 0
365 3492 -3529 0
365 3494 -3531 0
365 3496 -3533 0
365 3498 -3535 0
365 3500 -3537 0
365 3502 -3539 0
367 -3509 0
367 3473 -3511 0
367 3474 -3513 0
367 3476 -3515 0
367 3478 -3517 0
367 3480 -3519 0
367 3482 -3521 0
367 3484 -3523 0
367 3486 -3525 0
367 3488 -3527 0
367 3490 -3529 0
367 3492 -3531 0
367 3494 -3533 0
367 3496 -3535 0
367 3498 -3537 0
367 3500 -3539 0
367 3502 -3541 0
369 -3511 0
369 3473 -3513 0
369 3474 -3515 0
369 3476 -3517 0
369 3478 -3519 0
369 3480 -3521 0
369 3482 -3523 0
369 3484 -3525 0
369 3486 -3527 0
369 3488 -3529 0
369 3490 -3531 0
369 3492 -3533 0
369 3494 -3535 0
369 3496 -3537 0
369 3498 -3539 0
369 3500 -3541 0
369 3502 -3543 0
371 -3513 0
371 3473 -3515 0
371 3474 -3517 0
371 3476 -3519 0
371 3478 -3521 0
371 3480 -3523 0
371 3482 -3525 0
371 3484 -3527 0
371 3486 -3529 0
371 3488 -3531 0
371 3490 -3533 0
371 3492 -3535 0
371 3494 -3537 0
371 3496 -3539 0
371 3498 -3541 0
371 3500 -3543 0
371 3502 -3545 0
373 -3515 0
373 3473 -3517 0
373 3474 -3519 0
373 3476 -3521 0
373 3478 -3523 0
373 3480 -3525 0
373 3482 -3527 0
373 3484 -3529 0
373 3486 -3531 0
373 3488 -3533 0
373 3490 -3535 0
373 3492 -3537 0
373 3494 -3539 0
373 3496 -3541 0
373 3498 -3543 0
373 3500 -3545 0
373 3502 -3547 0
375 -3517 0
375 3473 -3519 0
375 3474 -3521 0
375 3476 -3523 0
375 3478 -3525 0
375 3480 -3527 0
375 3482 -3529 0
375 3484 -3531 0
375 3486 -3533 0
375 3488 -3535 0
375 3490 -3537 0
375 3492 -3539 0
375 3494 -3541 0
375 3496 -3543 0
375 3498 -3545 0
375 3500 -3547 0
375 3502 -3549 0
c (0<=(aux506 - aux507 + shift(x_00003_00007, -1)))
-3502 3549 0
-3500 3547 0
-3498 3545 0
-3496 3543 0
-3494 3541 0
-3492 3539 0
-3490 3537 0
-3488 3535 0
-3486 3533 0
-3484 3531 0
-3482 3529 0
-3480 3527 0
-3478 3525 0
-3476 3523 0
-3474 3521 0
-3473 3519 0
-375 3549 0
-375 -3502 3547 0
-375 -3500 3545 0
-375 -3498 3543 0
-375 -3496 3541 0
-375 -3494 3539 0
-375 -3492 3537 0
-375 -3490 3535 0
-375 -3488 3533 0
-375 -3486 3531 0
-375 -3484 3529 0
-375 -3482 3527 0
-375 -3480 3525 0
-375 -3478 3523 0
-375 -3476 3521 0
-375 -3474 3519 0
-375 -3473 3517 0
-373 3547 0
-373 -3502 3545 0
-373 -3500 3543 0
-373 -3498 3541 0
-373 -3496 3539 0
-373 -3494 3537 0
-373 -3492 3535 0
-373 -3490 3533 0
-373 -3488 3531 0
-373 -3486 3529 0
-373 -3484 3527 0
-373 -3482 3525 0
-373 -3480 3523 0
-373 -3478 3521 0
-373 -3476 3519 0
-373 -3474 3517 0
-373 -3473 3515 0
-371 3545 0
-371 -3502 3543 0
-371 -3500 3541 0
-371 -3498 3539 0
-371 -3496 3537 0
-371 -3494 3535 0
-371 -3492 3533 0
-371 -3490 3531 0
-371 -3488 3529 0
-371 -3486 3527 0
-371 -3484 3525 0
-371 -3482 3523 0
-371 -3480 3521 0
-371 -3478 3519 0
-371 -3476 3517 0
-371 -3474 3515 0
-371 -3473 3513 0
-369 3543 0
-369 -3502 3541 0
-369 -3500 3539 0
-369 -3498 3537 0
-369 -3496 3535 0
-369 -3494 3533 0
-369 -3492 3531 0
-369 -3490 3529 0
-369 -3488 3527 0
-369 -3486 3525 0
-369 -3484 3523 0
-369 -3482 3521 0
-369 -3480 3519 0
-369 -3478 3517 0
-369 -3476 3515 0
-369 -3474 3513 0
-369 -3473 3511 0
-367 3541 0
-367 -3502 3539 0
-367 -3500 3537 0
-367 -3498 3535 0
-367 -3496 3533 0
-367 -3494 3531 0
-367 -3492 3529 0
-367 -3490 3527 0
-367 -3488 3525 0
-367 -3486 3523 0
-367 -3484 3521 0
-367 -3482 3519 0
-367 -3480 3517 0
-367 -3478 3515 0
-367 -3476 3513 0
-367 -3474 3511 0
-367 -3473 3509 0
-365 3539 0
-365 -3502 3537 0
-365 -3500 3535 0
-365 -3498 3533 0
-365 -3496 3531 0
-365 -3494 3529 0
-365 -3492 3527 0
-365 -3490 3525 0
-365 -3488 3523 0
-365 -3486 3521 0
-365 -3484 3519 0
-365 -3482 3517 0
-365 -3480 3515 0
-365 -3478 3513 0
-365 -3476 3511 0
-365 -3474 3509 0
-365 -3473 3507 0
-363 3537 0
-363 -3502 3535 0
-363 -3500 3533 0
-363 -3498 3531 0
-363 -3496 3529 0
-363 -3494 3527 0
-363 -3492 3525 0
-363 -3490 3523 0
-363 -3488 3521 0
-363 -3486 3519 0
-363 -3484 3517 0
-363 -3482 3515 0
-363 -3480 3513 0
-363 -3478 3511 0
-363 -3476 3509 0
-363 -3474 3507 0
-363 -3473 3505 0
-362 3535 0
-362 -3502 3533 0
-362 -3500 3531 0
-362 -3498 3529 0
-362 -3496 3527 0
-362 -3494 3525 0
-362 -3492 3523 0
-362 -3490 3521 0
-362 -3488 3519 0
-362 -3486 3517 0
-362 -3484 3515 0
-362 -3482 3513 0
-362 -3480 3511 0
-362 -3478 3509 0
-362 -3476 3507 0
-362 -3474 3505 0
-362 -3473 3504 0
c ((aux503 + aux505 - aux508)<=0)
3442 -3551 0
3443 -3552 0
3445 -3554 0
3447 -3556 0
3449 -3558 0
3451 -3560 0
3453 -3562 0
3455 -3564 0
3457 -3566 0
3459 -3568 0
3461 -3570 0
3463 -3572 0
3465 -3574 0
3467 -3576 0
3469 -3578 0
3471 -3580 0
3380 -3551 0
3380 3442 -3552 0
3380 3443 -3554 0
3380 3445 -3556 0
3380 3447 -3558 0
3380 3449 -3560 0
3380 3451 -3562 0
3380 3453 -3564 0
3380 3455 -3566 0
3380 3457 -3568 0
3380 3459 -3570 0
3380 3461 -3572 0
3380 3463 -3574 0
3380 3465 -3576 0
3380 3467 -3578 0
3380 3469 -3580 0
3380 3471 -3582 0
3381 -3552 0
3381 3442 -3554 0
3381 3443 -3556 0
3381 3445 -3558 0
3381 3447 -3560 0
3381 3449 -3562 0
3381 3451 -3564 0
3381 3453 -3566 0
3381 3455 -3568 0
3381 3457 -3570 0
3381 3459 -3572 0
3381 3461 -3574 0
3381 3463 -3576 0
3381 3465 -3578 0
3381 3467 -3580 0
3381 3469 -3582 0
3381 3471 -3584 0
3383 -3554 0
3383 3442 -3556 0
3383 3443 -3558 0
3383 3445 -3560 0
3383 3447 -3562 0
3383 3449 -3564 0
3383 3451 -3566 0
3383 3453 -3568 0
3383 3455 -3570 0
3383 3457 -3572 0
3383 3459 -3574 0
3383 3461 -3576 0
3383 3463 -3578 0
3383 3465 -3580 0
3383 3467 -3582 0
3383 3469 -3584 0
3383 3471 -3586 0
3385 -3556 0
3385 3442 -3558 0
3385 3443 -3560 0
3385 3445 -3562 0
3385 3447 -3564 0
3385 3449 -3566 0
3385 3451 -3568 0
3385 3453 -3570 0
3385 3455 -3572 0
3385 3457 -3574 0
3385 3459 -3576 0
3385 3461 -3578 0
3385 3463 -3580 0
3385 3465 -3582 0
3385 3467 -3584 0
3385 3469 -3586 0
3385 3471 -3588 0
3387 -3558 0
3387 3442 -3560 0
3387 3443 -3562 0
3387 3445 -3564 0
3387 3447 -3566 0
3387 3449 -3568 0
3387 3451 -3570 0
3387 3453 -3572 0
3387 3455 -3574 0
3387 3457 -3576 0
3387 3459 -3578 0
3387 3461 -3580 0
3387 3463 -3582 0
3387 3465 -3584 0
3387 3467 -3586 0
3387 3469 -3588 0
3387 3471 -3590 0
3389 -3560 0
3389 3442 -3562 0
3389 3443 -3564 0
3389 3445 -3566 0
3389 3447 -3568 0
3389 3449 -3570 0
3389 3451 -3572 0
3389 3453 -3574 0
3389 3455 -3576 0
3389 3457 -3578 0
3389 3459 -3580 0
3389 3461 -3582 0
3389 3463 -3584 0
3389 3465 -3586 0
3389 3467 -3588 0
3389 3469 -3590 0
3389 3471 -3592 0
3391 -3562 0
3391 3442 -3564 0
3391 3443 -3566 0
3391 3445 -3568 0
3391 3447 -3570 0
3391 3449 -3572 0
3391 3451 -3574 0
3391 3453 -3576 0
3391 3455 -3578 0
3391 3457 -3580 0
3391 3459 -3582 0
3391 3461 -3584 0
3391 3463 -3586 0
3391 3465 -3588 0
3391 3467 -3590 0
3391 3469 -3592 0
3391 3471 -3594 0
3393 -3564 0
3393 3442 -3566 0
3393 3443 -3568 0
3393 3445 -3570 0
3393 3447 -3572 0
3393 3449 -3574 0
3393 3451 -3576 0
3393 3453 -3578 0
3393 3455 -3580 0
3393 3457 -3582 0
3393 3459 -3584 0
3393 3461 -3586 0
3393 3463 -3588 0
3393 3465 -3590 0
3393 3467 -3592 0
3393 3469 -3594 0
3393 3471 -3596 0
3395 -3566 0
3395 3442 -3568 0
3395 3443 -3570 0
3395 3445 -3572 0
3395 3447 -3574 0
3395 3449 -3576 0
3395 3451 -3578 0
3395 3453 -3580 0
3395 3455 -3582 0
3395 3457 -3584 0
3395 3459 -3586 0
3395 3461 -3588 0
3395 3463 -3590 0
3395 3465 -3592 0
3395 3467 -3594 0
3395 3469 -3596 0
3395 3471 -3598 0
3397 -3568 0
3397 3442 -3570 0
3397 3443 -3572 0
3397 3445 -3574 0
3397 3447 -3576 0
3397 3449 -3578 0
3397 3451 -3580 0
3397 3453 -3582 0
3397 3455 -3584 0
3397 3457 -3586 0
3397 3459 -3588 0
3397 3461 -3590 0
3397 3463 -3592 0
3397 3465 -3594 0
3397 3467 -3596 0
3397 3469 -3598 0
3397 3471 -3600 0
3399 -3570 0
3399 3442 -3572 0
3399 3443 -3574 0
3399 3445 -3576 0
3399 3447 -3578 0
3399 3449 -3580 0
3399 3451 -3582 0
3399 3453 -3584 0
3399 3455 -3586 0
3399 3457 -3588 0
3399 3459 -3590 0
3399 3461 -3592 0
3399 3463 -3594 0
3399 3465 -3596 0
3399 3467 -3598 0
3399 3469 -3600 0
3399 3471 -3602 0
3401 -3572 0
3401 3442 -3574 0
3401 3443 -3576 0
3401 3445 -3578 0
3401 3447 -3580 0
3401 3449 -3582 0
3401 3451 -3584 0
3401 3453 -3586 0
3401 3455 -3588 0
3401 3457 -3590 0
3401 3459 -3592 0
3401 3461 -3594 0
3401 3463 -3596 0
3401 3465 -3598 0
3401 3467 -3600 0
3401 3469 -3602 0
3401 3471 -3604 0
3403 -3574 0
3403 3442 -3576 0
3403 3443 -3578 0
3403 3445 -3580 0
3403 3447 -3582 0
3403 3449 -3584 0
3403 3451 -3586 0
3403 3453 -3588 0
3403 3455 -3590 0
3403 3457 -3592 0
3403 3459 -3594 0
3403 3461 -3596 0
3403 3463 -3598 0
3403 3465 -3600 0
3403 3467 -3602 0
3403 3469 -3604 0
3403 3471 -3606 0
3405 -3576 0
3405 3442 -3578 0
3405 3443 -3580 0
3405 3445 -3582 0
3405 3447 -3584 0
3405 3449 -3586 0
3405 3451 -3588 0
3405 3453 -3590 0
3405 3455 -3592 0
3405 3457 -3594 0
3405 3459 -3596 0
3405 3461 -3598 0
3405 3463 -3600 0
3405 3465 -3602 0
3405 3467 -3604 0
3405 3469 -3606 0
3405 3471 -3608 0
3407 -3578 0
3407 3442 -3580 0
3407 3443 -3582 0
3407 3445 -3584 0
3407 3447 -3586 0
3407 3449 -3588 0
3407 3451 -3590 0
3407 3453 -3592 0
3407 3455 -3594 0
3407 3457 -3596 0
3407 3459 -3598 0
3407 3461 -3600 0
3407 3463 -3602 0
3407 3465 -3604 0
3407 3467 -3606 0
3407 3469 -3608 0
3407 3471 -3610 0
3409 -3580 0
3409 3442 -3582 0
3409 3443 -3584 0
3409 3445 -3586 0
3409 3447 -3588 0
3409 3449 -3590 0
3409 3451 -3592 0
3409 3453 -3594 0
3409 3455 -3596 0
3409 3457 -3598 0
3409 3459 -3600 0
3409 3461 -3602 0
3409 3463 -3604 0
3409 3465 -3606 0
3409 3467 -3608 0
3409 3469 -3610 0
3409 3471 -3612 0
c (0<=(aux503 + aux505 - aux508))
-3471 3612 0
-3469 3610 0
-3467 3608 0
-3465 3606 0
-3463 3604 0
-3461 3602 0
-3459 3600 0
-3457 3598 0
-3455 3596 0
-3453 3594 0
-3451 3592 0
-3449 3590 0
-3447 3588 0
-3445 3586 0
-3443 3584 0
-3442 3582 0
-3409 3612 0
-3409 -3471 3610 0
-3409 -3469 3608 0
-3409 -3467 3606 0
-3409 -3465 3604 0
-3409 -3463 3602 0
-3409 -3461 3600 0
-3409 -3459 3598 0
-3409 -3457 3596 0
-3409 -3455 3594 0
-3409 -3453 3592 0
-3409 -3451 3590 0
-3409 -3449 3588 0
-3409 -3447 3586 0
-3409 -3445 3584 0
-3409 -3443 3582 0
-3409 -3442 3580 0
-3407 3610 0
-3407 -3471 3608 0
-3407 -3469 3606 0
-3407 -3467 3604 0
-3407 -3465 3602 0
-3407 -3463 3600 0
-3407 -3461 3598 0
-3407 -3459 3596 0
-3407 -3457 3594 0
-3407 -3455 3592 0
-3407 -3453 3590 0
-3407 -3451 3588 0
-3407 -3449 3586 0
-3407 -3447 3584 0
-3407 -3445 3582 0
-3407 -3443 3580 0
-3407 -3442 3578 0
-3405 3608 0
-3405 -3471 3606 0
-3405 -3469 3604 0
-3405 -3467 3602 0
-3405 -3465 3600 0
-3405 -3463 3598 0
-3405 -3461 3596 0
-3405 -3459 3594 0
-3405 -3457 3592 0
-3405 -3455 3590 0
-3405 -3453 3588 0
-3405 -3451 3586 0
-3405 -3449 3584 0
-3405 -3447 3582 0
-3405 -3445 3580 0
-3405 -3443 3578 0
-3405 -3442 3576 0
-3403 3606 0
-3403 -3471 3604 0
-3403 -3469 3602 0
-3403 -3467 3600 0
-3403 -3465 3598 0
-3403 -3463 3596 0
-3403 -3461 3594 0
-3403 -3459 3592 0
-3403 -3457 3590 0
-3403 -3455 3588 0
-3403 -3453 3586 0
-3403 -3451 3584 0
-3403 -3449 3582 0
-3403 -3447 3580 0
-3403 -3445 3578 0
-3403 -3443 3576 0
-3403 -3442 3574 0
-3401 3604 0
-3401 -3471 3602 0
-3401 -3469 3600 0
-3401 -3467 3598 0
-3401 -3465 3596 0
-3401 -3463 3594 0
-3401 -3461 3592 0
-3401 -3459 3590 0
-3401 -3457 3588 0
-3401 -3455 3586 0
-3401 -3453 3584 0
-3401 -3451 3582 0
-3401 -3449 3580 0
-3401 -3447 3578 0
-3401 -3445 3576 0
-3401 -3443 3574 0
-3401 -3442 3572 0
-3399 3602 0
-3399 -3471 3600 0
-3399 -3469 3598 0
-3399 -3467 3596 0
-3399 -3465 3594 0
-3399 -3463 3592 0
-3399 -3461 3590 0
-3399 -3459 3588 0
-3399 -3457 3586 0
-3399 -3455 3584 0
-3399 -3453 3582 0
-3399 -3451 3580 0
-3399 -3449 3578 0
-3399 -3447 3576 0
-3399 -3445 3574 0
-3399 -3443 3572 0
-3399 -3442 3570 0
-3397 3600 0
-3397 -3471 3598 0
-3397 -3469 3596 0
-3397 -3467 3594 0
-3397 -3465 3592 0
-3397 -3463 3590 0
-3397 -3461 3588 0
-3397 -3459 3586 0
-3397 -3457 3584 0
-3397 -3455 3582 0
-3397 -3453 3580 0
-3397 -3451 3578 0
-3397 -3449 3576 0
-3397 -3447 3574 0
-3397 -3445 3572 0
-3397 -3443 3570 0
-3397 -3442 3568 0
-3395 3598 0
-3395 -3471 3596 0
-3395 -3469 3594 0
-3395 -3467 3592 0
-3395 -3465 3590 0
-3395 -3463 3588 0
-3395 -3461 3586 0
-3395 -3459 3584 0
-3395 -3457 3582 0
-3395 -3455 3580 0
-3395 -3453 3578 0
-3395 -3451 3576 0
-3395 -3449 3574 0
-3395 -3447 3572 0
-3395 -3445 3570 0
-3395 -3443 3568 0
-3395 -3442 3566 0
-3393 3596 0
-3393 -3471 3594 0
-3393 -3469 3592 0
-3393 -3467 3590 0
-3393 -3465 3588 0
-3393 -3463 3586 0
-3393 -3461 3584 0
-3393 -3459 3582 0
-3393 -3457 3580 0
-3393 -3455 3578 0
-3393 -3453 3576 0
-3393 -3451 3574 0
-3393 -3449 3572 0
-3393 -3447 3570 0
-3393 -3445 3568 0
-3393 -3443 3566 0
-3393 -3442 3564 0
-3391 3594 0
-3391 -3471 3592 0
-3391 -3469 3590 0
-3391 -3467 3588 0
-3391 -3465 3586 0
-3391 -3463 3584 0
-3391 -3461 3582 0
-3391 -3459 3580 0
-3391 -3457 3578 0
-3391 -3455 3576 0
-3391 -3453 3574 0
-3391 -3451 3572 0
-3391 -3449 3570 0
-3391 -3447 3568 0
-3391 -3445 3566 0
-3391 -3443 3564 0
-3391 -3442 3562 0
-3389 3592 0
-3389 -3471 3590 0
-3389 -3469 3588 0
-3389 -3467 3586 0
-3389 -3465 3584 0
-3389 -3463 3582 0
-3389 -3461 3580 0
-3389 -3459 3578 0
-3389 -3457 3576 0
-3389 -3455 3574 0
-3389 -3453 3572 0
-3389 -3451 3570 0
-3389 -3449 3568 0
-3389 -3447 3566 0
-3389 -3445 3564 0
-3389 -3443 3562 0
-3389 -3442 3560 0
-3387 3590 0
-3387 -3471 3588 0
-3387 -3469 3586 0
-3387 -3467 3584 0
-3387 -3465 3582 0
-3387 -3463 3580 0
-3387 -3461 3578 0
-3387 -3459 3576 0
-3387 -3457 3574 0
-3387 -3455 3572 0
-3387 -3453 3570 0
-3387 -3451 3568 0
-3387 -3449 3566 0
-3387 -3447 3564 0
-3387 -3445 3562 0
-3387 -3443 3560 0
-3387 -3442 3558 0
-3385 3588 0
-3385 -3471 3586 0
-3385 -3469 3584 0
-3385 -3467 3582 0
-3385 -3465 3580 0
-3385 -3463 3578 0
-3385 -3461 3576 0
-3385 -3459 3574 0
-3385 -3457 3572 0
-3385 -3455 3570 0
-3385 -3453 3568 0
-3385 -3451 3566 0
-3385 -3449 3564 0
-3385 -3447 3562 0
-3385 -3445 3560 0
-3385 -3443 3558 0
-3385 -3442 3556 0
-3383 3586 0
-3383 -3471 3584 0
-3383 -3469 3582 0
-3383 -3467 3580 0
-3383 -3465 3578 0
-3383 -3463 3576 0
-3383 -3461 3574 0
-3383 -3459 3572 0
-3383 -3457 3570 0
-3383 -3455 3568 0
-3383 -3453 3566 0
-3383 -3451 3564 0
-3383 -3449 3562 0
-3383 -3447 3560 0
-3383 -3445 3558 0
-3383 -3443 3556 0
-3383 -3442 3554 0
-3381 3584 0
-3381 -3471 3582 0
-3381 -3469 3580 0
-3381 -3467 3578 0
-3381 -3465 3576 0
-3381 -3463 3574 0
-3381 -3461 3572 0
-3381 -3459 3570 0
-3381 -3457 3568 0
-3381 -3455 3566 0
-3381 -3453 3564 0
-3381 -3451 3562 0
-3381 -3449 3560 0
-3381 -3447 3558 0
-3381 -3445 3556 0
-3381 -3443 3554 0
-3381 -3442 3552 0
-3380 3582 0
-3380 -3471 3580 0
-3380 -3469 3578 0
-3380 -3467 3576 0
-3380 -3465 3574 0
-3380 -3463 3572 0
-3380 -3461 3570 0
-3380 -3459 3568 0
-3380 -3457 3566 0
-3380 -3455 3564 0
-3380 -3453 3562 0
-3380 -3451 3560 0
-3380 -3449 3558 0
-3380 -3447 3556 0
-3380 -3445 3554 0
-3380 -3443 3552 0
-3380 -3442 3551 0
c (( - aux509 + shift(x_00006_00008, -1) + shift(x_00002_00008, -1))<=0)
242 -3614 0
243 -3615 0
245 -3617 0
247 -3619 0
249 -3621 0
251 -3623 0
253 -3625 0
255 -3627 0
782 -3614 0
782 242 -3615 0
782 243 -3617 0
782 245 -3619 0
782 247 -3621 0
782 249 -3623 0
782 251 -3625 0
782 253 -3627 0
782 255 -3629 0
783 -3615 0
783 242 -3617 0
783 243 -3619 0
783 245 -3621 0
783 247 -3623 0
783 249 -3625 0
783 251 -3627 0
783 253 -3629 0
783 255 -3631 0
785 -3617 0
785 242 -3619 0
785 243 -3621 0
785 245 -3623 0
785 247 -3625 0
785 249 -3627 0
785 251 -3629 0
785 253 -3631 0
785 255 -3633 0
787 -3619 0
787 242 -3621 0
787 243 -3623 0
787 245 -3625 0
787 247 -3627 0
787 249 -3629 0
787 251 -3631 0
787 253 -3633 0
787 255 -3635 0
789 -3621 0
789 242 -3623 0
789 243 -3625 0
789 245 -3627 0
789 247 -3629 0
789 249 -3631 0
789 251 -3633 0
789 253 -3635 0
789 255 -3637 0
791 -3623 0
791 242 -3625 0
791 243 -3627 0
791 245 -3629 0
791 247 -3631 0
791 249 -3633 0
791 251 -3635 0
791 253 -3637 0
791 255 -3639 0
793 -3625 0
793 242 -3627 0
793 243 -3629 0
793 245 -3631 0
793 247 -3633 0
793 249 -3635 0
793 251 -3637 0
793 253 -3639 0
793 255 -3641 0
795 -3627 0
795 242 -3629 0
795 243 -3631 0
795 245 -3633 0
795 247 -3635 0
795 249 -3637 0
795 251 -3639 0
795 253 -3641 0
795 255 -3643 0
c (0<=( - aux509 + shift(x_00006_00008, -1) + shift(x_00002_00008, -1)))
-255 3643 0
-253 3641 0
-251 3639 0
-249 3637 0
-247 3635 0
-245 3633 0
-243 3631 0
-242 3629 0
-795 3643 0
-795 -255 3641 0
-795 -253 3639 0
-795 -251 3637 0
-795 -249 3635 0
-795 -247 3633 0
-795 -245 3631 0
-795 -243 3629 0
-795 -242 3627 0
-793 3641 0
-793 -255 3639 0
-793 -253 3637 0
-793 -251 3635 0
-793 -249 3633 0
-793 -247 3631 0
-793 -245 3629 0
-793 -243 3627 0
-793 -242 3625 0
-791 3639 0
-791 -255 3637 0
-791 -253 3635 0
-791 -251 3633 0
-791 -249 3631 0
-791 -247 3629 0
-791 -245 3627 0
-791 -243 3625 0
-791 -242 3623 0
-789 3637 0
-789 -255 3635 0
-789 -253 3633 0
-789 -251 3631 0
-789 -249 3629 0
-789 -247 3627 0
-789 -245 3625 0
-789 -243 3623 0
-789 -242 3621 0
-787 3635 0
-787 -255 3633 0
-787 -253 3631 0
-787 -251 3629 0
-787 -249 3627 0
-787 -247 3625 0
-787 -245 3623 0
-787 -243 3621 0
-787 -242 3619 0
-785 3633 0
-785 -255 3631 0
-785 -253 3629 0
-785 -251 3627 0
-785 -249 3625 0
-785 -247 3623 0
-785 -245 3621 0
-785 -243 3619 0
-785 -242 3617 0
-783 3631 0
-783 -255 3629 0
-783 -253 3627 0
-783 -251 3625 0
-783 -249 3623 0
-783 -247 3621 0
-783 -245 3619 0
-783 -243 3617 0
-783 -242 3615 0
-782 3629 0
-782 -255 3627 0
-782 -253 3625 0
-782 -251 3623 0
-782 -249 3621 0
-782 -247 3619 0
-782 -245 3617 0
-782 -243 3615 0
-782 -242 3614 0
c ((shift(x_00007_00008, -1) - aux510 + shift(x_00001_00008, -1))<=0)
107 -3645 0
108 -3646 0
110 -3648 0
112 -3650 0
114 -3652 0
116 -3654 0
118 -3656 0
120 -3658 0
917 -3645 0
917 107 -3646 0
917 108 -3648 0
917 110 -3650 0
917 112 -3652 0
917 114 -3654 0
917 116 -3656 0
917 118 -3658 0
917 120 -3660 0
918 -3646 0
918 107 -3648 0
918 108 -3650 0
918 110 -3652 0
918 112 -3654 0
918 114 -3656 0
918 116 -3658 0
918 118 -3660 0
918 120 -3662 0
920 -3648 0
920 107 -3650 0
920 108 -3652 0
920 110 -3654 0
920 112 -3656 0
920 114 -3658 0
920 116 -3660 0
920 118 -3662 0
920 120 -3664 0
922 -3650 0
922 107 -3652 0
922 108 -3654 0
922 110 -3656 0
922 112 -3658 0
922 114 -3660 0
922 116 -3662 0
922 118 -3664 0
922 120 -3666 0
924 -3652 0
924 107 -3654 0
924 108 -3656 0
924 110 -3658 0
924 112 -3660 0
924 114 -3662 0
924 116 -3664 0
924 118 -3666 0
924 120 -3668 0
926 -3654 0
926 107 -3656 0
926 108 -3658 0
926 110 -3660 0
926 112 -3662 0
926 114 -3664 0
926 116 -3666 0
926 118 -3668 0
926 120 -3670 0
928 -3656 0
928 107 -3658 0
928 108 -3660 0
928 110 -3662 0
928 112 -3664 0
928 114 -3666 0
928 116 -3668 0
928 118 -3670 0
928 120 -3672 0
930 -3658 0
930 107 -3660 0
930 108 -3662 0
930 110 -3664 0
930 112 -3666 0
930 114 -3668 0
930 116 -3670 0
930 118 -3672 0
930 120 -3674 0
c (0<=(shift(x_00007_00008, -1) - aux510 + shift(x_00001_00008, -1)))
-120 3674 0
-118 3672 0
-116 3670 0
-114 3668 0
-112 3666 0
-110 3664 0
-108 3662 0
-107 3660 0
-930 3674 0
-930 -120 3672 0
-930 -118 3670 0
-930 -116 3668 0
-930 -114 3666 0
-930 -112 3664 0
-930 -110 3662 0
-930 -108 3660 0
-930 -107 3658 0
-928 3672 0
-928 -120 3670 0
-928 -118 3668 0
-928 -116 3666 0
-928 -114 3664 0
-928 -112 3662 0
-928 -110 3660 0
-928 -108 3658 0
-928 -107 3656 0
-926 3670 0
-926 -120 3668 0
-926 -118 3666 0
-926 -116 3664 0
-926 -114 3662 0
-926 -112 3660 0
-926 -110 3658 0
-926 -108 3656 0
-926 -107 3654 0
-924 3668 0
-924 -120 3666 0
-924 -118 3664 0
-924 -116 3662 0
-924 -114 3660 0
-924 -112 3658 0
-924 -110 3656 0
-924 -108 3654 0
-924 -107 3652 0
-922 3666 0
-922 -120 3664 0
-922 -118 3662 0
-922 -116 3660 0
-922 -114 3658 0
-922 -112 3656 0
-922 -110 3654 0
-922 -108 3652 0
-922 -107 3650 0
-920 3664 0
-920 -120 3662 0
-920 -118 3660 0
-920 -116 3658 0
-920 -114 3656 0
-920 -112 3654 0
-920 -110 3652 0
-920 -108 3650 0
-920 -107 3648 0
-918 3662 0
-918 -120 3660 0
-918 -118 3658 0
-918 -116 3656 0
-918 -114 3654 0
-918 -112 3652 0
-918 -110 3650 0
-918 -108 3648 0
-918 -107 3646 0
-917 3660 0
-917 -120 3658 0
-917 -118 3656 0
-917 -116 3654 0
-917 -114 3652 0
-917 -112 3650 0
-917 -110 3648 0
-917 -108 3646 0
-917 -107 3645 0
c (( - aux511 + shift(x_00005_00008, -1) + shift(x_00008_00008, -1))<=0)
1052 -3676 0
1053 -3677 0
1055 -3679 0
1057 -3681 0
1059 -3683 0
1061 -3685 0
1063 -3687 0
1065 -3689 0
647 -3676 0
647 1052 -3677 0
647 1053 -3679 0
647 1055 -3681 0
647 1057 -3683 0
647 1059 -3685 0
647 1061 -3687 0
647 1063 -3689 0
647 1065 -3691 0
648 -3677 0
648 1052 -3679 0
648 1053 -3681 0
648 1055 -3683 0
648 1057 -3685 0
648 1059 -3687 0
648 1061 -3689 0
648 1063 -3691 0
648 1065 -3693 0
650 -3679 0
650 1052 -3681 0
650 1053 -3683 0
650 1055 -3685 0
650 1057 -3687 0
650 1059 -3689 0
650 1061 -3691 0
650 1063 -3693 0
650 1065 -3695 0
652 -3681 0
652 1052 -3683 0
652 1053 -3685 0
652 1055 -3687 0
652 1057 -3689 0
652 1059 -3691 0
652 1061 -3693 0
652 1063 -3695 0
652 1065 -3697 0
654 -3683 0
654 1052 -3685 0
654 1053 -3687 0
654 1055 -3689 0
654 1057 -3691 0
654 1059 -3693 0
654 1061 -3695 0
654 1063 -3697 0
654 1065 -3699 0
656 -3685 0
656 1052 -3687 0
656 1053 -3689 0
656 1055 -3691 0
656 1057 -3693 0
656 1059 -3695 0
656 1061 -3697 0
656 1063 -3699 0
656 1065 -3701 0
658 -3687 0
658 1052 -3689 0
658 1053 -3691 0
658 1055 -3693 0
658 1057 -3695 0
658 1059 -3697 0
658 1061 -3699 0
658 1063 -3701 0
658 1065 -3703 0
660 -3689 0
660 1052 -3691 0
660 1053 -3693 0
660 1055 -3695 0
660 1057 -3697 0
660 1059 -3699 0
660 1061 -3701 0
660 1063 -3703 0
660 1065 -3705 0
c (0<=( - aux511 + shift(x_00005_00008, -1) + shift(x_00008_00008, -1)))
-1065 3705 0
-1063 3703 0
-1061 3701 0
-1059 3699 0
-1057 3697 0
-1055 3695 0
-1053 3693 0
-1052 3691 0
-660 3705 0
-660 -1065 3703 0
-660 -1063 3701 0
-660 -1061 3699 0
-660 -1059 3697 0
-660 -1057 3695 0
-660 -1055 3693 0
-660 -1053 3691 0
-660 -1052 3689 0
-658 3703 0
-658 -1065 3701 0
-658 -1063 3699 0
-658 -1061 3697 0
-658 -1059 3695 0
-658 -1057 3693 0
-658 -1055 3691 0
-658 -1053 3689 0
-658 -1052 3687 0
-656 3701 0
-656 -1065 3699 0
-656 -1063 3697 0
-656 -1061 3695 0
-656 -1059 3693 0
-656 -1057 3691 0
-656 -1055 3689 0
-656 -1053 3687 0
-656 -1052 3685 0
-654 3699 0
-654 -1065 3697 0
-654 -1063 3695 0
-654 -1061 3693 0
-654 -1059 3691 0
-654 -1057 3689 0
-654 -1055 3687 0
-654 -1053 3685 0
-654 -1052 3683 0
-652 3697 0
-652 -1065 3695 0
-652 -1063 3693 0
-652 -1061 3691 0
-652 -1059 3689 0
-652 -1057 3687 0
-652 -1055 3685 0
-652 -1053 3683 0
-652 -1052 3681 0
-650 3695 0
-650 -1065 3693 0
-650 -1063 3691 0
-650 -1061 3689 0
-650 -1059 3687 0
-650 -1057 3685 0
-650 -1055 3683 0
-650 -1053 3681 0
-650 -1052 3679 0
-648 3693 0
-648 -1065 3691 0
-648 -1063 3689 0
-648 -1061 3687 0
-648 -1059 3685 0
-648 -1057 3683 0
-648 -1055 3681 0
-648 -1053 3679 0
-648 -1052 3677 0
-647 3691 0
-647 -1065 3689 0
-647 -1063 3687 0
-647 -1061 3685 0
-647 -1059 3683 0
-647 -1057 3681 0
-647 -1055 3679 0
-647 -1053 3677 0
-647 -1052 3676 0
c (( - aux512 + shift(x_00004_00008, -1) + shift(x_00009_00008, -1))<=0)
1187 -3707 0
1188 -3708 0
1190 -3710 0
1192 -3712 0
1194 -3714 0
1196 -3716 0
1198 -3718 0
1200 -3720 0
512 -3707 0
512 1187 -3708 0
512 1188 -3710 0
512 1190 -3712 0
512 1192 -3714 0
512 1194 -3716 0
512 1196 -3718 0
512 1198 -3720 0
512 1200 -3722 0
513 -3708 0
513 1187 -3710 0
513 1188 -3712 0
513 1190 -3714 0
513 1192 -3716 0
513 1194 -3718 0
513 1196 -3720 0
513 1198 -3722 0
513 1200 -3724 0
515 -3710 0
515 1187 -3712 0
515 1188 -3714 0
515 1190 -3716 0
515 1192 -3718 0
515 1194 -3720 0
515 1196 -3722 0
515 1198 -3724 0
515 1200 -3726 0
517 -3712 0
517 1187 -3714 0
517 1188 -3716 0
517 1190 -3718 0
517 1192 -3720 0
517 1194 -3722 0
517 1196 -3724 0
517 1198 -3726 0
517 1200 -3728 0
519 -3714 0
519 1187 -3716 0
519 1188 -3718 0
519 1190 -3720 0
519 1192 -3722 0
519 1194 -3724 0
519 1196 -3726 0
519 1198 -3728 0
519 1200 -3730 0
521 -3716 0
521 1187 -3718 0
521 1188 -3720 0
521 1190 -3722 0
521 1192 -3724 0
521 1194 -3726 0
521 1196 -3728 0
521 1198 -3730 0
521 1200 -3732 0
523 -3718 0
523 1187 -3720 0
523 1188 -3722 0
523 1190 -3724 0
523 1192 -3726 0
523 1194 -3728 0
523 1196 -3730 0
523 1198 -3732 0
523 1200 -3734 0
525 -3720 0
525 1187 -3722 0
525 1188 -3724 0
525 1190 -3726 0
525 1192 -3728 0
525 1194 -3730 0
525 1196 -3732 0
525 1198 -3734 0
525 1200 -3736 0
c (0<=( - aux512 + shift(x_00004_00008, -1) + shift(x_00009_00008, -1)))
-1200 3736 0
-1198 3734 0
-1196 3732 0
-1194 3730 0
-1192 3728 0
-1190 3726 0
-1188 3724 0
-1187 3722 0
-525 3736 0
-525 -1200 3734 0
-525 -1198 3732 0
-525 -1196 3730 0
-525 -1194 3728 0
-525 -1192 3726 0
-525 -1190 3724 0
-525 -1188 3722 0
-525 -1187 3720 0
-523 3734 0
-523 -1200 3732 0
-523 -1198 3730 0
-523 -1196 3728 0
-523 -1194 3726 0
-523 -1192 3724 0
-523 -1190 3722 0
-523 -1188 3720 0
-523 -1187 3718 0
-521 3732 0
-521 -1200 3730 0
-521 -1198 3728 0
-521 -1196 3726 0
-521 -1194 3724 0
-521 -1192 3722 0
-521 -1190 3720 0
-521 -1188 3718 0
-521 -1187 3716 0
-519 3730 0
-519 -1200 3728 0
-519 -1198 3726 0
-519 -1196 3724 0
-519 -1194 3722 0
-519 -1192 3720 0
-519 -1190 3718 0
-519 -1188 3716 0
-519 -1187 3714 0
-517 3728 0
-517 -1200 3726 0
-517 -1198 3724 0
-517 -1196 3722 0
-517 -1194 3720 0
-517 -1192 3718 0
-517 -1190 3716 0
-517 -1188 3714 0
-517 -1187 3712 0
-515 3726 0
-515 -1200 3724 0
-515 -1198 3722 0
-515 -1196 3720 0
-515 -1194 3718 0
-515 -1192 3716 0
-515 -1190 3714 0
-515 -1188 3712 0
-515 -1187 3710 0
-513 3724 0
-513 -1200 3722 0
-513 -1198 3720 0
-513 -1196 3718 0
-513 -1194 3716 0
-513 -1192 3714 0
-513 -1190 3712 0
-513 -1188 3710 0
-513 -1187 3708 0
-512 3722 0
-512 -1200 3720 0
-512 -1198 3718 0
-512 -1196 3716 0
-512 -1194 3714 0
-512 -1192 3712 0
-512 -1190 3710 0
-512 -1188 3708 0
-512 -1187 3707 0
c ((aux512 - aux513 + shift(x_00003_00008, -1))<=0)
3707 -3738 0
3708 -3739 0
3710 -3741 0
3712 -3743 0
3714 -3745 0
3716 -3747 0
3718 -3749 0
3720 -3751 0
3722 -3753 0
3724 -3755 0
3726 -3757 0
3728 -3759 0
3730 -3761 0
3732 -3763 0
3734 -3765 0
3736 -3767 0
377 -3738 0
377 3707 -3739 0
377 3708 -3741 0
377 3710 -3743 0
377 3712 -3745 0
377 3714 -3747 0
377 3716 -3749 0
377 3718 -3751 0
377 3720 -3753 0
377 3722 -3755 0
377 3724 -3757 0
377 3726 -3759 0
377 3728 -3761 0
377 3730 -3763 0
377 3732 -3765 0
377 3734 -3767 0
377 3736 -3769 0
378 -3739 0
378 3707 -3741 0
378 3708 -3743 0
378 3710 -3745 0
378 3712 -3747 0
378 3714 -3749 0
378 3716 -3751 0
378 3718 -3753 0
378 3720 -3755 0
378 3722 -3757 0
378 3724 -3759 0
378 3726 -3761 0
378 3728 -3763 0
378 3730 -3765 0
378 3732 -3767 0
378 3734 -3769 0
378 3736 -3771 0
380 -3741 0
380 3707 -3743 0
380 3708 -3745 0
380 3710 -3747 0
380 3712 -3749 0
380 3714 -3751 0
380 3716 -3753 0
380 3718 -3755 0
380 3720 -3757 0
380 3722 -3759 0
380 3724 -3761 0
380 3726 -3763 0
380 3728 -3765 0
380 3730 -3767 0
380 3732 -3769 0
380 3734 -3771 0
380 3736 -3773 0
382 -3743 0
382 3707 -3745 0
382 3708 -3747 0
382 3710 -3749 0
382 3712 -3751 0
382 3714 -3753 0
382 3716 -3755 0
382 3718 -3757 0
382 3720 -3759 0
382 3722 -3761 0
382 3724 -3763 0
382 3726 -3765 0
382 3728 -3767 0
382 3730 -3769 0
382 3732 -3771 0
382 3734 -3773 0
382 3736 -3775 0
384 -3745 0
384 3707 -3747 0
384 3708 -3749 0
384 3710 -3751 0
384 3712 -3753 0
384 3714 -3755 0
384 3716 -3757 0
384 3718 -3759 0
384 3720 -3761 0
384 3722 -3763 0
384 3724 -3765 0
384 3726 -3767 0
384 3728 -3769 0
384 3730 -3771 0
384 3732 -3773 0
384 3734 -3775 0
384 3736 -3777 0
386 -3747 0
386 3707 -3749 0
386 3708 -3751 0
386 3710 -3753 0
386 3712 -3755 0
386 3714 -3757 0
386 3716 -3759 0
386 3718 -3761 0
386 3720 -3763 0
386 3722 -3765 0
386 3724 -3767 0
386 3726 -3769 0
386 3728 -3771 0
386 3730 -3773 0
386 3732 -3775 0
386 3734 -3777 0
386 3736 -3779 0
388 -3749 0
388 3707 -3751 0
388 3708 -3753 0
388 3710 -3755 0
388 3712 -3757 0
388 3714 -3759 0
388 3716 -3761 0
388 3718 -3763 0
388 3720 -3765 0
388 3722 -3767 0
388 3724 -3769 0
388 3726 -3771 0
388 3728 -3773 0
388 3730 -3775 0
388 3732 -3777 0
388 3734 -3779 0
388 3736 -3781 0
390 -3751 0
390 3707 -3753 0
390 3708 -3755 0
390 3710 -3757 0
390 3712 -3759 0
390 3714 -3761 0
390 3716 -3763 0
390 3718 -3765 0
390 3720 -3767 0
390 3722 -3769 0
390 3724 -3771 0
390 3726 -3773 0
390 3728 -3775 0
390 3730 -3777 0
390 3732 -3779 0
390 3734 -3781 0
390 3736 -3783 0
c (0<=(aux512 - aux513 + shift(x_00003_00008, -1)))
-3736 3783 0
-3734 3781 0
-3732 3779 0
-3730 3777 0
-3728 3775 0
-3726 3773 0
-3724 3771 0
-3722 3769 0
-3720 3767 0
-3718 3765 0
-3716 3763 0
-3714 3761 0
-3712 3759 0
-3710 3757 0
-3708 3755 0
-3707 3753 0
-390 3783 0
-390 -3736 3781 0
-390 -3734 3779 0
-390 -3732 3777 0
-390 -3730 3775 0
-390 -3728 3773 0
-390 -3726 3771 0
-390 -3724 3769 0
-390 -3722 3767 0
-390 -3720 3765 0
-390 -3718 3763 0
-390 -3716 3761 0
-390 -3714 3759 0
-390 -3712 3757 0
-390 -3710 3755 0
-390 -3708 3753 0
-390 -3707 3751 0
-388 3781 0
-388 -3736 3779 0
-388 -3734 3777 0
-388 -3732 3775 0
-388 -3730 3773 0
-388 -3728 3771 0
-388 -3726 3769 0
-388 -3724 3767 0
-388 -3722 3765 0
-388 -3720 3763 0
-388 -3718 3761 0
-388 -3716 3759 0
-388 -3714 3757 0
-388 -3712 3755 0
-388 -3710 3753 0
-388 -3708 3751 0
-388 -3707 3749 0
-386 3779 0
-386 -3736 3777 0
-386 -3734 3775 0
-386 -3732 3773 0
-386 -3730 3771 0
-386 -3728 3769 0
-386 -3726 3767 0
-386 -3724 3765 0
-386 -3722 3763 0
-386 -3720 3761 0
-386 -3718 3759 0
-386 -3716 3757 0
-386 -3714 3755 0
-386 -3712 3753 0
-386 -3710 3751 0
-386 -3708 3749 0
-386 -3707 3747 0
-384 3777 0
-384 -3736 3775 0
-384 -3734 3773 0
-384 -3732 3771 0
-384 -3730 3769 0
-384 -3728 3767 0
-384 -3726 3765 0
-384 -3724 3763 0
-384 -3722 3761 0
-384 -3720 3759 0
-384 -3718 3757 0
-384 -3716 3755 0
-384 -3714 3753 0
-384 -3712 3751 0
-384 -3710 3749 0
-384 -3708 3747 0
-384 -3707 3745 0
-382 3775 0
-382 -3736 3773 0
-382 -3734 3771 0
-382 -3732 3769 0
-382 -3730 3767 0
-382 -3728 3765 0
-382 -3726 3763 0
-382 -3724 3761 0
-382 -3722 3759 0
-382 -3720 3757 0
-382 -3718 3755 0
-382 -3716 3753 0
-382 -3714 3751 0
-382 -3712 3749 0
-382 -3710 3747 0
-382 -3708 3745 0
-382 -3707 3743 0
-380 3773 0
-380 -3736 3771 0
-380 -3734 3769 0
-380 -3732 3767 0
-380 -3730 3765 0
-380 -3728 3763 0
-380 -3726 3761 0
-380 -3724 3759 0
-380 -3722 3757 0
-380 -3720 3755 0
-380 -3718 3753 0
-380 -3716 3751 0
-380 -3714 3749 0
-380 -3712 3747 0
-380 -3710 3745 0
-380 -3708 3743 0
-380 -3707 3741 0
-378 3771 0
-378 -3736 3769 0
-378 -3734 3767 0
-378 -3732 3765 0
-378 -3730 3763 0
-378 -3728 3761 0
-378 -3726 3759 0
-378 -3724 3757 0
-378 -3722 3755 0
-378 -3720 3753 0
-378 -3718 3751 0
-378 -3716 3749 0
-378 -3714 3747 0
-378 -3712 3745 0
-378 -3710 3743 0
-378 -3708 3741 0
-378 -3707 3739 0
-377 3769 0
-377 -3736 3767 0
-377 -3734 3765 0
-377 -3732 3763 0
-377 -3730 3761 0
-377 -3728 3759 0
-377 -3726 3757 0
-377 -3724 3755 0
-377 -3722 3753 0
-377 -3720 3751 0
-377 -3718 3749 0
-377 -3716 3747 0
-377 -3714 3745 0
-377 -3712 3743 0
-377 -3710 3741 0
-377 -3708 3739 0
-377 -3707 3738 0
c ((aux509 + aux511 - aux514)<=0)
3676 -3785 0
3677 -3786 0
3679 -3788 0
3681 -3790 0
3683 -3792 0
3685 -3794 0
3687 -3796 0
3689 -3798 0
3691 -3800 0
3693 -3802 0
3695 -3804 0
3697 -3806 0
3699 -3808 0
3701 -3810 0
3703 -3812 0
3705 -3814 0
3614 -3785 0
3614 3676 -3786 0
3614 3677 -3788 0
3614 3679 -3790 0
3614 3681 -3792 0
3614 3683 -3794 0
3614 3685 -3796 0
3614 3687 -3798 0
3614 3689 -3800 0
3614 3691 -3802 0
3614 3693 -3804 0
3614 3695 -3806 0
3614 3697 -3808 0
3614 3699 -3810 0
3614 3701 -3812 0
3614 3703 -3814 0
3614 3705 -3816 0
3615 -3786 0
3615 3676 -3788 0
3615 3677 -3790 0
3615 3679 -3792 0
3615 3681 -3794 0
3615 3683 -3796 0
3615 3685 -3798 0
3615 3687 -3800 0
3615 3689 -3802 0
3615 3691 -3804 0
3615 3693 -3806 0
3615 3695 -3808 0
3615 3697 -3810 0
3615 3699 -3812 0
3615 3701 -3814 0
3615 3703 -3816 0
3615 3705 -3818 0
3617 -3788 0
3617 3676 -3790 0
3617 3677 -3792 0
3617 3679 -3794 0
3617 3681 -3796 0
3617 3683 -3798 0
3617 3685 -3800 0
3617 3687 -3802 0
3617 3689 -3804 0
3617 3691 -3806 0
3617 3693 -3808 0
3617 3695 -3810 0
3617 3697 -3812 0
3617 3699 -3814 0
3617 3701 -3816 0
3617 3703 -3818 0
3617 3705 -3820 0
3619 -3790 0
3619 3676 -3792 0
3619 3677 -3794 0
3619 3679 -3796 0
3619 3681 -3798 0
3619 3683 -3800 0
3619 3685 -3802 0
3619 3687 -3804 0
3619 3689 -3806 0
3619 3691 -3808 0
3619 3693 -3810 0
3619 3695 -3812 0
3619 3697 -3814 0
3619 3699 -3816 0
3619 3701 -3818 0
3619 3703 -3820 0
3619 3705 -3822 0
3621 -3792 0
3621 3676 -3794 0
3621 3677 -3796 0
3621 3679 -3798 0
3621 3681 -3800 0
3621 3683 -3802 0
3621 3685 -3804 0
3621 3687 -3806 0
3621 3689 -3808 0
3621 3691 -3810 0
3621 3693 -3812 0
3621 3695 -3814 0
3621 3697 -3816 0
3621 3699 -3818 0
3621 3701 -3820 0
3621 3703 -3822 0
3621 3705 -3824 0
3623 -3794 0
3623 3676 -3796 0
3623 3677 -3798 0
3623 3679 -3800 0
3623 3681 -3802 0
3623 3683 -3804 0
3623 3685 -3806 0
3623 3687 -3808 0
3623 3689 -3810 0
3623 3691 -3812 0
3623 3693 -3814 0
3623 3695 -3816 0
3623 3697 -3818 0
3623 3699 -3820 0
3623 3701 -3822 0
3623 3703 -3824 0
3623 3705 -3826 0
3625 -3796 0
3625 3676 -3798 0
3625 3677 -3800 0
3625 3679 -3802 0
3625 3681 -3804 0
3625 3683 -3806 0
3625 3685 -3808 0
3625 3687 -3810 0
3625 3689 -3812 0
3625 3691 -3814 0
3625 3693 -3816 0
3625 3695 -3818 0
3625 3697 -3820 0
3625 3699 -3822 0
3625 3701 -3824 0
3625 3703 -3826 0
3625 3705 -3828 0
3627 -3798 0
3627 3676 -3800 0
3627 3677 -3802 0
3627 3679 -3804 0
3627 3681 -3806 0
3627 3683 -3808 0
3627 3685 -3810 0
3627 3687 -3812 0
3627 3689 -3814 0
3627 3691 -3816 0
3627 3693 -3818 0
3627 3695 -3820 0
3627 3697 -3822 0
3627 3699 -3824 0
3627 3701 -3826 0
3627 3703 -3828 0
3627 3705 -3830 0
3629 -3800 0
3629 3676 -3802 0
3629 3677 -3804 0
3629 3679 -3806 0
3629 3681 -3808 0
3629 3683 -3810 0
3629 3685 -3812 0
3629 3687 -3814 0
3629 3689 -3816 0
3629 3691 -3818 0
3629 3693 -3820 0
3629 3695 -3822 0
3629 3697 -3824 0
3629 3699 -3826 0
3629 3701 -3828 0
3629 3703 -3830 0
3629 3705 -3832 0
3631 -3802 0
3631 3676 -3804 0
3631 3677 -3806 0
3631 3679 -3808 0
3631 3681 -3810 0
3631 3683 -3812 0
3631 3685 -3814 0
3631 3687 -3816 0
3631 3689 -3818 0
3631 3691 -3820 0
3631 3693 -3822 0
3631 3695 -3824 0
3631 3697 -3826 0
3631 3699 -3828 0
3631 3701 -3830 0
3631 3703 -3832 0
3631 3705 -3834 0
3633 -3804 0
3633 3676 -3806 0
3633 3677 -3808 0
3633 3679 -3810 0
3633 3681 -3812 0
3633 3683 -3814 0
3633 3685 -3816 0
3633 3687 -3818 0
3633 3689 -3820 0
3633 3691 -3822 0
3633 3693 -3824 0
3633 3695 -3826 0
3633 3697 -3828 0
3633 3699 -3830 0
3633 3701 -3832 0
3633 3703 -3834 0
3633 3705 -3836 0
3635 -3806 0
3635 3676 -3808 0
3635 3677 -3810 0
3635 3679 -3812 0
3635 3681 -3814 0
3635 3683 -3816 0
3635 3685 -3818 0
3635 3687 -3820 0
3635 3689 -3822 0
3635 3691 -3824 0
3635 3693 -3826 0
3635 3695 -3828 0
3635 3697 -3830 0
3635 3699 -3832 0
3635 3701 -3834 0
3635 3703 -3836 0
3635 3705 -3838 0
3637 -3808 0
3637 3676 -3810 0
3637 3677 -3812 0
3637 3679 -3814 0
3637 3681 -3816 0
3637 3683 -3818 0
3637 3685 -3820 0
3637 3687 -3822 0
3637 3689 -3824 0
3637 3691 -3826 0
3637 3693 -3828 0
3637 3695 -3830 0
3637 3697 -3832 0
3637 3699 -3834 0
3637 3701 -3836 0
3637 3703 -3838 0
3637 3705 -3840 0
3639 -3810 0
3639 3676 -3812 0
3639 3677 -3814 0
3639 3679 -3816 0
3639 3681 -3818 0
3639 3683 -3820 0
3639 3685 -3822 0
3639 3687 -3824 0
3639 3689 -3826 0
3639 3691 -3828 0
3639 3693 -3830 0
3639 3695 -3832 0
3639 3697 -3834 0
3639 3699 -3836 0
3639 3701 -3838 0
3639 3703 -3840 0
3639 3705 -3842 0
3641 -3812 0
3641 3676 -3814 0
3641 3677 -3816 0
3641 3679 -3818 0
3641 3681 -3820 0
3641 3683 -3822 0
3641 3685 -3824 0
3641 3687 -3826 0
3641 3689 -3828 0
3641 3691 -3830 0
3641 3693 -3832 0
3641 3695 -3834 0
3641 3697 -3836 0
3641 3699 -3838 0
3641 3701 -3840 0
3641 3703 -3842 0
3641 3705 -3844 0
3643 -3814 0
3643 3676 -3816 0
3643 3677 -3818 0
3643 3679 -3820 0
3643 3681 -3822 0
3643 3683 -3824 0
3643 3685 -3826 0
3643 3687 -3828 0
3643 3689 -3830 0
3643 3691 -3832 0
3643 3693 -3834 0
3643 3695 -3836 0
3643 3697 -3838 0
3643 3699 -3840 0
3643 3701 -3842 0
3643 3703 -3844 0
3643 3705 -3846 0
c (0<=(aux509 + aux511 - aux514))
-3705 3846 0
-3703 3844 0
-3701 3842 0
-3699 3840 0
-3697 3838 0
-3695 3836 0
-3693 3834 0
-3691 3832 0
-3689 3830 0
-3687 3828 0
-3685 3826 0
-3683 3824 0
-3681 3822 0
-3679 3820 0
-3677 3818 0
-3676 3816 0
-3643 3846 0
-3643 -3705 3844 0
-3643 -3703 3842 0
-3643 -3701 3840 0
-3643 -3699 3838 0
-3643 -3697 3836 0
-3643 -3695 3834 0
-3643 -3693 3832 0
-3643 -3691 3830 0
-3643 -3689 3828 0
-3643 -3687 3826 0
-3643 -3685 3824 0
-3643 -3683 3822 0
-3643 -3681 3820 0
-3643 -3679 3818 0
-3643 -3677 3816 0
-3643 -3676 3814 0
-3641 3844 0
-3641 -3705 3842 0
-3641 -3703 3840 0
-3641 -3701 3838 0
-3641 -3699 3836 0
-3641 -3697 3834 0
-3641 -3695 3832 0
-3641 -3693 3830 0
-3641 -3691 3828 0
-3641 -3689 3826 0
-3641 -3687 3824 0
-3641 -3685 3822 0
-3641 -3683 3820 0
-3641 -3681 3818 0
-3641 -3679 3816 0
-3641 -3677 3814 0
-3641 -3676 3812 0
-3639 3842 0
-3639 -3705 3840 0
-3639 -3703 3838 0
-3639 -3701 3836 0
-3639 -3699 3834 0
-3639 -3697 3832 0
-3639 -3695 3830 0
-3639 -3693 3828 0
-3639 -3691 3826 0
-3639 -3689 3824 0
-3639 -3687 3822 0
-3639 -3685 3820 0
-3639 -3683 3818 0
-3639 -3681 3816 0
-3639 -3679 3814 0
-3639 -3677 3812 0
-3639 -3676 3810 0
-3637 3840 0
-3637 -3705 3838 0
-3637 -3703 3836 0
-3637 -3701 3834 0
-3637 -3699 3832 0
-3637 -3697 3830 0
-3637 -3695 3828 0
-3637 -3693 3826 0
-3637 -3691 3824 0
-3637 -3689 3822 0
-3637 -3687 3820 0
-3637 -3685 3818 0
-3637 -3683 3816 0
-3637 -3681 3814 0
-3637 -3679 3812 0
-3637 -3677 3810 0
-3637 -3676 3808 0
-3635 3838 0
-3635 -3705 3836 0
-3635 -3703 3834 0
-3635 -3701 3832 0
-3635 -3699 3830 0
-3635 -3697 3828 0
-3635 -3695 3826 0
-3635 -3693 3824 0
-3635 -3691 3822 0
-3635 -3689 3820 0
-3635 -3687 3818 0
-3635 -3685 3816 0
-3635 -3683 3814 0
-3635 -3681 3812 0
-3635 -3679 3810 0
-3635 -3677 3808 0
-3635 -3676 3806 0
-3633 3836 0
-3633 -3705 3834 0
-3633 -3703 3832 0
-3633 -3701 3830 0
-3633 -3699 3828 0
-3633 -3697 3826 0
-3633 -3695 3824 0
-3633 -3693 3822 0
-3633 -3691 3820 0
-3633 -3689 3818 0
-3633 -3687 3816 0
-3633 -3685 3814 0
-3633 -3683 3812 0
-3633 -3681 3810 0
-3633 -3679 3808 0
-3633 -3677 3806 0
-3633 -3676 3804 0
-3631 3834 0
-3631 -3705 3832 0
-3631 -3703 3830 0
-3631 -3701 3828 0
-3631 -3699 3826 0
-3631 -3697 3824 0
-3631 -3695 3822 0
-3631 -3693 3820 0
-3631 -3691 3818 0
-3631 -3689 3816 0
-3631 -3687 3814 0
-3631 -3685 3812 0
-3631 -3683 3810 0
-3631 -3681 3808 0
-3631 -3679 3806 0
-3631 -3677 3804 0
-3631 -3676 3802 0
-3629 3832 0
-3629 -3705 3830 0
-3629 -3703 3828 0
-3629 -3701 3826 0
-3629 -3699 3824 0
-3629 -3697 3822 0
-3629 -3695 3820 0
-3629 -3693 3818 0
-3629 -3691 3816 0
-3629 -3689 3814 0
-3629 -3687 3812 0
-3629 -3685 3810 0
-3629 -3683 3808 0
-3629 -3681 3806 0
-3629 -3679 3804 0
-3629 -3677 3802 0
-3629 -3676 3800 0
-3627 3830 0
-3627 -3705 3828 0
-3627 -3703 3826 0
-3627 -3701 3824 0
-3627 -3699 3822 0
-3627 -3697 3820 0
-3627 -3695 3818 0
-3627 -3693 3816 0
-3627 -3691 3814 0
-3627 -3689 3812 0
-3627 -3687 3810 0
-3627 -3685 3808 0
-3627 -3683 3806 0
-3627 -3681 3804 0
-3627 -3679 3802 0
-3627 -3677 3800 0
-3627 -3676 3798 0
-3625 3828 0
-3625 -3705 3826 0
-3625 -3703 3824 0
-3625 -3701 3822 0
-3625 -3699 3820 0
-3625 -3697 3818 0
-3625 -3695 3816 0
-3625 -3693 3814 0
-3625 -3691 3812 0
-3625 -3689 3810 0
-3625 -3687 3808 0
-3625 -3685 3806 0
-3625 -3683 3804 0
-3625 -3681 3802 0
-3625 -3679 3800 0
-3625 -3677 3798 0
-3625 -3676 3796 0
-3623 3826 0
-3623 -3705 3824 0
-3623 -3703 3822 0
-3623 -3701 3820 0
-3623 -3699 3818 0
-3623 -3697 3816 0
-3623 -3695 3814 0
-3623 -3693 3812 0
-3623 -3691 3810 0
-3623 -3689 3808 0
-3623 -3687 3806 0
-3623 -3685 3804 0
-3623 -3683 3802 0
-3623 -3681 3800 0
-3623 -3679 3798 0
-3623 -3677 3796 0
-3623 -3676 3794 0
-3621 3824 0
-3621 -3705 3822 0
-3621 -3703 3820 0
-3621 -3701 3818 0
-3621 -3699 3816 0
-3621 -3697 3814 0
-3621 -3695 3812 0
-3621 -3693 3810 0
-3621 -3691 3808 0
-3621 -3689 3806 0
-3621 -3687 3804 0
-3621 -3685 3802 0
-3621 -3683 3800 0
-3621 -3681 3798 0
-3621 -3679 3796 0
-3621 -3677 3794 0
-3621 -3676 3792 0
-3619 3822 0
-3619 -3705 3820 0
-3619 -3703 3818 0
-3619 -3701 3816 0
-3619 -3699 3814 0
-3619 -3697 3812 0
-3619 -3695 3810 0
-3619 -3693 3808 0
-3619 -3691 3806 0
-3619 -3689 3804 0
-3619 -3687 3802 0
-3619 -3685 3800 0
-3619 -3683 3798 0
-3619 -3681 3796 0
-3619 -3679 3794 0
-3619 -3677 3792 0
-3619 -3676 3790 0
-3617 3820 0
-3617 -3705 3818 0
-3617 -3703 3816 0
-3617 -3701 3814 0
-3617 -3699 3812 0
-3617 -3697 3810 0
-3617 -3695 3808 0
-3617 -3693 3806 0
-3617 -3691 3804 0
-3617 -3689 3802 0
-3617 -3687 3800 0
-3617 -3685 3798 0
-3617 -3683 3796 0
-3617 -3681 3794 0
-3617 -3679 3792 0
-3617 -3677 3790 0
-3617 -3676 3788 0
-3615 3818 0
-3615 -3705 3816 0
-3615 -3703 3814 0
-3615 -3701 3812 0
-3615 -3699 3810 0
-3615 -3697 3808 0
-3615 -3695 3806 0
-3615 -3693 3804 0
-3615 -3691 3802 0
-3615 -3689 3800 0
-3615 -3687 3798 0
-3615 -3685 3796 0
-3615 -3683 3794 0
-3615 -3681 3792 0
-3615 -3679 3790 0
-3615 -3677 3788 0
-3615 -3676 3786 0
-3614 3816 0
-3614 -3705 3814 0
-3614 -3703 3812 0
-3614 -3701 3810 0
-3614 -3699 3808 0
-3614 -3697 3806 0
-3614 -3695 3804 0
-3614 -3693 3802 0
-3614 -3691 3800 0
-3614 -3689 3798 0
-3614 -3687 3796 0
-3614 -3685 3794 0
-3614 -3683 3792 0
-3614 -3681 3790 0
-3614 -3679 3788 0
-3614 -3677 3786 0
-3614 -3676 3785 0
c (( - aux515 + shift(x_00006_00009, -1) + shift(x_00002_00009, -1))<=0)
257 -3848 0
258 -3849 0
260 -3851 0
262 -3853 0
264 -3855 0
266 -3857 0
268 -3859 0
270 -3861 0
797 -3848 0
797 257 -3849 0
797 258 -3851 0
797 260 -3853 0
797 262 -3855 0
797 264 -3857 0
797 266 -3859 0
797 268 -3861 0
797 270 -3863 0
798 -3849 0
798 257 -3851 0
798 258 -3853 0
798 260 -3855 0
798 262 -3857 0
798 264 -3859 0
798 266 -3861 0
798 268 -3863 0
798 270 -3865 0
800 -3851 0
800 257 -3853 0
800 258 -3855 0
800 260 -3857 0
800 262 -3859 0
800 264 -3861 0
800 266 -3863 0
800 268 -3865 0
800 270 -3867 0
802 -3853 0
802 257 -3855 0
802 258 -3857 0
802 260 -3859 0
802 262 -3861 0
802 264 -3863 0
802 266 -3865 0
802 268 -3867 0
802 270 -3869 0
804 -3855 0
804 257 -3857 0
804 258 -3859 0
804 260 -3861 0
804 262 -3863 0
804 264 -3865 0
804 266 -3867 0
804 268 -3869 0
804 270 -3871 0
806 -3857 0
806 257 -3859 0
806 258 -3861 0
806 260 -3863 0
806 262 -3865 0
806 264 -3867 0
806 266 -3869 0
806 268 -3871 0
806 270 -3873 0
808 -3859 0
808 257 -3861 0
808 258 -3863 0
808 260 -3865 0
808 262 -3867 0
808 264 -3869 0
808 266 -3871 0
808 268 -3873 0
808 270 -3875 0
810 -3861 0
810 257 -3863 0
810 258 -3865 0
810 260 -3867 0
810 262 -3869 0
810 264 -3871 0
810 266 -3873 0
810 268 -3875 0
810 270 -3877 0
c (0<=( - aux515 + shift(x_00006_00009, -1) + shift(x_00002_00009, -1)))
-270 3877 0
-268 3875 0
-266 3873 0
-264 3871 0
-262 3869 0
-260 3867 0
-258 3865 0
-257 3863 0
-810 3877 0
-810 -270 3875 0
-810 -268 3873 0
-810 -266 3871 0
-810 -264 3869 0
-810 -262 3867 0
-810 -260 3865 0
-810 -258 3863 0
-810 -257 3861 0
-808 3875 0
-808 -270 3873 0
-808 -268 3871 0
-808 -266 3869 0
-808 -264 3867 0
-808 -262 3865 0
-808 -260 3863 0
-808 -258 3861 0
-808 -257 3859 0
-806 3873 0
-806 -270 3871 0
-806 -268 3869 0
-806 -266 3867 0
-806 -264 3865 0
-806 -262 3863 0
-806 -260 3861 0
-806 -258 3859 0
-806 -257 3857 0
-804 3871 0
-804 -270 3869 0
-804 -268 3867 0
-804 -266 3865 0
-804 -264 3863 0
-804 -262 3861 0
-804 -260 3859 0
-804 -258 3857 0
-804 -257 3855 0
-802 3869 0
-802 -270 3867 0
-802 -268 3865 0
-802 -266 3863 0
-802 -264 3861 0
-802 -262 3859 0
-802 -260 3857 0
-802 -258 3855 0
-802 -257 3853 0
-800 3867 0
-800 -270 3865 0
-800 -268 3863 0
-800 -266 3861 0
-800 -264 3859 0
-800 -262 3857 0
-800 -260 3855 0
-800 -258 3853 0
-800 -257 3851 0
-798 3865 0
-798 -270 3863 0
-798 -268 3861 0
-798 -266 3859 0
-798 -264 3857 0
-798 -262 3855 0
-798 -260 3853 0
-798 -258 3851 0
-798 -257 3849 0
-797 3863 0
-797 -270 3861 0
-797 -268 3859 0
-797 -266 3857 0
-797 -264 3855 0
-797 -262 3853 0
-797 -260 3851 0
-797 -258 3849 0
-797 -257 3848 0
c ((shift(x_00007_00009, -1) - aux516 + shift(x_00001_00009, -1))<=0)
122 -3879 0
123 -3880 0
125 -3882 0
127 -3884 0
129 -3886 0
131 -3888 0
133 -3890 0
135 -3892 0
932 -3879 0
932 122 -3880 0
932 123 -3882 0
932 125 -3884 0
932 127 -3886 0
932 129 -3888 0
932 131 -3890 0
932 133 -3892 0
932 135 -3894 0
933 -3880 0
933 122 -3882 0
933 123 -3884 0
933 125 -3886 0
933 127 -3888 0
933 129 -3890 0
933 131 -3892 0
933 133 -3894 0
933 135 -3896 0
935 -3882 0
935 122 -3884 0
935 123 -3886 0
935 125 -3888 0
935 127 -3890 0
935 129 -3892 0
935 131 -3894 0
935 133 -3896 0
935 135 -3898 0
937 -3884 0
937 122 -3886 0
937 123 -3888 0
937 125 -3890 0
937 127 -3892 0
937 129 -3894 0
937 131 -3896 0
937 133 -3898 0
937 135 -3900 0
939 -3886 0
939 122 -3888 0
939 123 -3890 0
939 125 -3892 0
939 127 -3894 0
939 129 -3896 0
939 131 -3898 0
939 133 -3900 0
939 135 -3902 0
941 -3888 0
941 122 -3890 0
941 123 -3892 0
941 125 -3894 0
941 127 -3896 0
941 129 -3898 0
941 131 -3900 0
941 133 -3902 0
941 135 -3904 0
943 -3890 0
943 122 -3892 0
943 123 -3894 0
943 125 -3896 0
943 127 -3898 0
943 129 -3900 0
943 131 -3902 0
943 133 -3904 0
943 135 -3906 0
945 -3892 0
945 122 -3894 0
945 123 -3896 0
945 125 -3898 0
945 127 -3900 0
945 129 -3902 0
945 131 -3904 0
945 133 -3906 0
945 135 -3908 0
c (0<=(shift(x_00007_00009, -1) - aux516 + shift(x_00001_00009, -1)))
-135 3908 0
-133 3906 0
-131 3904 0
-129 3902 0
-127 3900 0
-125 3898 0
-123 3896 0
-122 3894 0
-945 3908 0
-945 -135 3906 0
-945 -133 3904 0
-945 -131 3902 0
-945 -129 3900 0
-945 -127 3898 0
-945 -125 3896 0
-945 -123 3894 0
-945 -122 3892 0
-943 3906 0
-943 -135 3904 0
-943 -133 3902 0
-943 -131 3900 0
-943 -129 3898 0
-943 -127 3896 0
-943 -125 3894 0
-943 -123 3892 0
-943 -122 3890 0
-941 3904 0
-941 -135 3902 0
-941 -133 3900 0
-941 -131 3898 0
-941 -129 3896 0
-941 -127 3894 0
-941 -125 3892 0
-941 -123 3890 0
-941 -122 3888 0
-939 3902 0
-939 -135 3900 0
-939 -133 3898 0
-939 -131 3896 0
-939 -129 3894 0
-939 -127 3892 0
-939 -125 3890 0
-939 -123 3888 0
-939 -122 3886 0
-937 3900 0
-937 -135 3898 0
-937 -133 3896 0
-937 -131 3894 0
-937 -129 3892 0
-937 -127 3890 0
-937 -125 3888 0
-937 -123 3886 0
-937 -122 3884 0
-935 3898 0
-935 -135 3896 0
-935 -133 3894 0
-935 -131 3892 0
-935 -129 3890 0
-935 -127 3888 0
-935 -125 3886 0
-935 -123 3884 0
-935 -122 3882 0
-933 3896 0
-933 -135 3894 0
-933 -133 3892 0
-933 -131 3890 0
-933 -129 3888 0
-933 -127 3886 0
-933 -125 3884 0
-933 -123 3882 0
-933 -122 3880 0
-932 3894 0
-932 -135 3892 0
-932 -133 3890 0
-932 -131 3888 0
-932 -129 3886 0
-932 -127 3884 0
-932 -125 3882 0
-932 -123 3880 0
-932 -122 3879 0
c (( - aux517 + shift(x_00005_00009, -1) + shift(x_00008_00009, -1))<=0)
1067 -3910 0
1068 -3911 0
1070 -3913 0
1072 -3915 0
1074 -3917 0
1076 -3919 0
1078 -3921 0
1080 -3923 0
662 -3910 0
662 1067 -3911 0
662 1068 -3913 0
662 1070 -3915 0
662 1072 -3917 0
662 1074 -3919 0
662 1076 -3921 0
662 1078 -3923 0
662 1080 -3925 0
663 -3911 0
663 1067 -3913 0
663 1068 -3915 0
663 1070 -3917 0
663 1072 -3919 0
663 1074 -3921 0
663 1076 -3923 0
663 1078 -3925 0
663 1080 -3927 0
665 -3913 0
665 1067 -3915 0
665 1068 -3917 0
665 1070 -3919 0
665 1072 -3921 0
665 1074 -3923 0
665 1076 -3925 0
665 1078 -3927 0
665 1080 -3929 0
667 -3915 0
667 1067 -3917 0
667 1068 -3919 0
667 1070 -3921 0
667 1072 -3923 0
667 1074 -3925 0
667 1076 -3927 0
667 1078 -3929 0
667 1080 -3931 0
669 -3917 0
669 1067 -3919 0
669 1068 -3921 0
669 1070 -3923 0
669 1072 -3925 0
669 1074 -3927 0
669 1076 -3929 0
669 1078 -3931 0
669 1080 -3933 0
671 -3919 0
671 1067 -3921 0
671 1068 -3923 0
671 1070 -3925 0
671 1072 -3927 0
671 1074 -3929 0
671 1076 -3931 0
671 1078 -3933 0
671 1080 -3935 0
673 -3921 0
673 1067 -3923 0
673 1068 -3925 0
673 1070 -3927 0
673 1072 -3929 0
673 1074 -3931 0
673 1076 -3933 0
673 1078 -3935 0
673 1080 -3937 0
675 -3923 0
675 1067 -3925 0
675 1068 -3927 0
675 1070 -3929 0
675 1072 -3931 0
675 1074 -3933 0
675 1076 -3935 0
675 1078 -3937 0
675 1080 -3939 0
c (0<=( - aux517 + shift(x_00005_00009, -1) + shift(x_00008_00009, -1)))
-1080 3939 0
-1078 3937 0
-1076 3935 0
-1074 3933 0
-1072 3931 0
-1070 3929 0
-1068 3927 0
-1067 3925 0
-675 3939 0
-675 -1080 3937 0
-675 -1078 3935 0
-675 -1076 3933 0
-675 -1074 3931 0
-675 -1072 3929 0
-675 -1070 3927 0
-675 -1068 3925 0
-675 -1067 3923 0
-673 3937 0
-673 -1080 3935 0
-673 -1078 3933 0
-673 -1076 3931 0
-673 -1074 3929 0
-673 -1072 3927 0
-673 -1070 3925 0
-673 -1068 3923 0
-673 -1067 3921 0
-671 3935 0
-671 -1080 3933 0
-671 -1078 3931 0
-671 -1076 3929 0
-671 -1074 3927 0
-671 -1072 3925 0
-671 -1070 3923 0
-671 -1068 3921 0
-671 -1067 3919 0
-669 3933 0
-669 -1080 3931 0
-669 -1078 3929 0
-669 -1076 3927 0
-669 -1074 3925 0
-669 -1072 3923 0
-669 -1070 3921 0
-669 -1068 3919 0
-669 -1067 3917 0
-667 3931 0
-667 -1080 3929 0
-667 -1078 3927 0
-667 -1076 3925 0
-667 -1074 3923 0
-667 -1072 3921 0
-667 -1070 3919 0
-667 -1068 3917 0
-667 -1067 3915 0
-665 3929 0
-665 -1080 3927 0
-665 -1078 3925 0
-665 -1076 3923 0
-665 -1074 3921 0
-665 -1072 3919 0
-665 -1070 3917 0
-665 -1068 3915 0
-665 -1067 3913 0
-663 3927 0
-663 -1080 3925 0
-663 -1078 3923 0
-663 -1076 3921 0
-663 -1074 3919 0
-663 -1072 3917 0
-663 -1070 3915 0
-663 -1068 3913 0
-663 -1067 3911 0
-662 3925 0
-662 -1080 3923 0
-662 -1078 3921 0
-662 -1076 3919 0
-662 -1074 3917 0
-662 -1072 3915 0
-662 -1070 3913 0
-662 -1068 3911 0
-662 -1067 3910 0
c (( - aux518 + shift(x_00004_00009, -1) + shift(x_00009_00009, -1))<=0)
1202 -3941 0
1203 -3942 0
1205 -3944 0
1207 -3946 0
1209 -3948 0
1211 -3950 0
1213 -3952 0
1215 -3954 0
527 -3941 0
527 1202 -3942 0
527 1203 -3944 0
527 1205 -3946 0
527 1207 -3948 0
527 1209 -3950 0
527 1211 -3952 0
527 1213 -3954 0
527 1215 -3956 0
528 -3942 0
528 1202 -3944 0
528 1203 -3946 0
528 1205 -3948 0
528 1207 -3950 0
528 1209 -3952 0
528 1211 -3954 0
528 1213 -3956 0
528 1215 -3958 0
530 -3944 0
530 1202 -3946 0
530 1203 -3948 0
530 1205 -3950 0
530 1207 -3952 0
530 1209 -3954 0
530 1211 -3956 0
530 1213 -3958 0
530 1215 -3960 0
532 -3946 0
532 1202 -3948 0
532 1203 -3950 0
532 1205 -3952 0
532 1207 -3954 0
532 1209 -3956 0
532 1211 -3958 0
532 1213 -3960 0
532 1215 -3962 0
534 -3948 0
534 1202 -3950 0
534 1203 -3952 0
534 1205 -3954 0
534 1207 -3956 0
534 1209 -3958 0
534 1211 -3960 0
534 1213 -3962 0
534 1215 -3964 0
536 -3950 0
536 1202 -3952 0
536 1203 -3954 0
536 1205 -3956 0
536 1207 -3958 0
536 1209 -3960 0
536 1211 -3962 0
536 1213 -3964 0
536 1215 -3966 0
538 -3952 0
538 1202 -3954 0
538 1203 -3956 0
538 1205 -3958 0
538 1207 -3960 0
538 1209 -3962 0
538 1211 -3964 0
538 1213 -3966 0
538 1215 -3968 0
540 -3954 0
540 1202 -3956 0
540 1203 -3958 0
540 1205 -3960 0
540 1207 -3962 0
540 1209 -3964 0
540 1211 -3966 0
540 1213 -3968 0
540 1215 -3970 0
c (0<=( - aux518 + shift(x_00004_00009, -1) + shift(x_00009_00009, -1)))
-1215 3970 0
-1213 3968 0
-1211 3966 0
-1209 3964 0
-1207 3962 0
-1205 3960 0
-1203 3958 0
-1202 3956 0
-540 3970 0
-540 -1215 3968 0
-540 -1213 3966 0
-540 -1211 3964 0
-540 -1209 3962 0
-540 -1207 3960 0
-540 -1205 3958 0
-540 -1203 3956 0
-540 -1202 3954 0
-538 3968 0
-538 -1215 3966 0
-538 -1213 3964 0
-538 -1211 3962 0
-538 -1209 3960 0
-538 -1207 3958 0
-538 -1205 3956 0
-538 -1203 3954 0
-538 -1202 3952 0
-536 3966 0
-536 -1215 3964 0
-536 -1213 3962 0
-536 -1211 3960 0
-536 -1209 3958 0
-536 -1207 3956 0
-536 -1205 3954 0
-536 -1203 3952 0
-536 -1202 3950 0
-534 3964 0
-534 -1215 3962 0
-534 -1213 3960 0
-534 -1211 3958 0
-534 -1209 3956 0
-534 -1207 3954 0
-534 -1205 3952 0
-534 -1203 3950 0
-534 -1202 3948 0
-532 3962 0
-532 -1215 3960 0
-532 -1213 3958 0
-532 -1211 3956 0
-532 -1209 3954 0
-532 -1207 3952 0
-532 -1205 3950 0
-532 -1203 3948 0
-532 -1202 3946 0
-530 3960 0
-530 -1215 3958 0
-530 -1213 3956 0
-530 -1211 3954 0
-530 -1209 3952 0
-530 -1207 3950 0
-530 -1205 3948 0
-530 -1203 3946 0
-530 -1202 3944 0
-528 3958 0
-528 -1215 3956 0
-528 -1213 3954 0
-528 -1211 3952 0
-528 -1209 3950 0
-528 -1207 3948 0
-528 -1205 3946 0
-528 -1203 3944 0
-528 -1202 3942 0
-527 3956 0
-527 -1215 3954 0
-527 -1213 3952 0
-527 -1211 3950 0
-527 -1209 3948 0
-527 -1207 3946 0
-527 -1205 3944 0
-527 -1203 3942 0
-527 -1202 3941 0
c ((aux518 - aux519 + shift(x_00003_00009, -1))<=0)
3941 -3972 0
3942 -3973 0
3944 -3975 0
3946 -3977 0
3948 -3979 0
3950 -3981 0
3952 -3983 0
3954 -3985 0
3956 -3987 0
3958 -3989 0
3960 -3991 0
3962 -3993 0
3964 -3995 0
3966 -3997 0
3968 -3999 0
3970 -4001 0
392 -3972 0
392 3941 -3973 0
392 3942 -3975 0
392 3944 -3977 0
392 3946 -3979 0
392 3948 -3981 0
392 3950 -3983 0
392 3952 -3985 0
392 3954 -3987 0
392 3956 -3989 0
392 3958 -3991 0
392 3960 -3993 0
392 3962 -3995 0
392 3964 -3997 0
392 3966 -3999 0
392 3968 -4001 0
392 3970 -4003 0
393 -3973 0
393 3941 -3975 0
393 3942 -3977 0
393 3944 -3979 0
393 3946 -3981 0
393 3948 -3983 0
393 3950 -3985 0
393 3952 -3987 0
393 3954 -3989 0
393 3956 -3991 0
393 3958 -3993 0
393 3960 -3995 0
393 3962 -3997 0
393 3964 -3999 0
393 3966 -4001 0
393 3968 -4003 0
393 3970 -4005 0
395 -3975 0
395 3941 -3977 0
395 3942 -3979 0
395 3944 -3981 0
395 3946 -3983 0
395 3948 -3985 0
395 3950 -3987 0
395 3952 -3989 0
395 3954 -3991 0
395 3956 -3993 0
395 3958 -3995 0
395 3960 -3997 0
395 3962 -3999 0
395 3964 -4001 0
395 3966 -4003 0
395 3968 -4005 0
395 3970 -4007 0
397 -3977 0
397 3941 -3979 0
397 3942 -3981 0
397 3944 -3983 0
397 3946 -3985 0
397 3948 -3987 0
397 3950 -3989 0
397 3952 -3991 0
397 3954 -3993 0
397 3956 -3995 0
397 3958 -3997 0
397 3960 -3999 0
397 3962 -4001 0
397 3964 -4003 0
397 3966 -4005 0
397 3968 -4007 0
397 3970 -4009 0
399 -3979 0
399 3941 -3981 0
399 3942 -3983 0
399 3944 -3985 0
399 3946 -3987 0
399 3948 -3989 0
399 3950 -3991 0
399 3952 -3993 0
399 3954 -3995 0
399 3956 -3997 0
399 3958 -3999 0
399 3960 -4001 0
399 3962 -4003 0
399 3964 -4005 0
399 3966 -4007 0
399 3968 -4009 0
399 3970 -4011 0
401 -3981 0
401 3941 -3983 0
401 3942 -3985 0
401 3944 -3987 0
401 3946 -3989 0
401 3948 -3991 0
401 3950 -3993 0
401 3952 -3995 0
401 3954 -3997 0
401 3956 -3999 0
401 3958 -4001 0
401 3960 -4003 0
401 3962 -4005 0
401 3964 -4007 0
401 3966 -4009 0
401 3968 -4011 0
401 3970 -4013 0
403 -3983 0
403 3941 -3985 0
403 3942 -3987 0
403 3944 -3989 0
403 3946 -3991 0
403 3948 -3993 0
403 3950 -3995 0
403 3952 -3997 0
403 3954 -3999 0
403 3956 -4001 0
403 3958 -4003 0
403 3960 -4005 0
403 3962 -4007 0
403 3964 -4009 0
403 3966 -4011 0
403 3968 -4013 0
403 3970 -4015 0
405 -3985 0
405 3941 -3987 0
405 3942 -3989 0
405 3944 -3991 0
405 3946 -3993 0
405 3948 -3995 0
405 3950 -3997 0
405 3952 -3999 0
405 3954 -4001 0
405 3956 -4003 0
405 3958 -4005 0
405 3960 -4007 0
405 3962 -4009 0
405 3964 -4011 0
405 3966 -4013 0
405 3968 -4015 0
405 3970 -4017 0
c (0<=(aux518 - aux519 + shift(x_00003_00009, -1)))
-3970 4017 0
-3968 4015 0
-3966 4013 0
-3964 4011 0
-3962 4009 0
-3960 4007 0
-3958 4005 0
-3956 4003 0
-3954 4001 0
-3952 3999 0
-3950 3997 0
-3948 3995 0
-3946 3993 0
-3944 3991 0
-3942 3989 0
-3941 3987 0
-405 4017 0
-405 -3970 4015 0
-405 -3968 4013 0
-405 -3966 4011 0
-405 -3964 4009 0
-405 -3962 4007 0
-405 -3960 4005 0
-405 -3958 4003 0
-405 -3956 4001 0
-405 -3954 3999 0
-405 -3952 3997 0
-405 -3950 3995 0
-405 -3948 3993 0
-405 -3946 3991 0
-405 -3944 3989 0
-405 -3942 3987 0
-405 -3941 3985 0
-403 4015 0
-403 -3970 4013 0
-403 -3968 4011 0
-403 -3966 4009 0
-403 -3964 4007 0
-403 -3962 4005 0
-403 -3960 4003 0
-403 -3958 4001 0
-403 -3956 3999 0
-403 -3954 3997 0
-403 -3952 3995 0
-403 -3950 3993 0
-403 -3948 3991 0
-403 -3946 3989 0
-403 -3944 3987 0
-403 -3942 3985 0
-403 -3941 3983 0
-401 4013 0
-401 -3970 4011 0
-401 -3968 4009 0
-401 -3966 4007 0
-401 -3964 4005 0
-401 -3962 4003 0
-401 -3960 4001 0
-401 -3958 3999 0
-401 -3956 3997 0
-401 -3954 3995 0
-401 -3952 3993 0
-401 -3950 3991 0
-401 -3948 3989 0
-401 -3946 3987 0
-401 -3944 3985 0
-401 -3942 3983 0
-401 -3941 3981 0
-399 4011 0
-399 -3970 4009 0
-399 -3968 4007 0
-399 -3966 4005 0
-399 -3964 4003 0
-399 -3962 4001 0
-399 -3960 3999 0
-399 -3958 3997 0
-399 -3956 3995 0
-399 -3954 3993 0
-399 -3952 3991 0
-399 -3950 3989 0
-399 -3948 3987 0
-399 -3946 3985 0
-399 -3944 3983 0
-399 -3942 3981 0
-399 -3941 3979 0
-397 4009 0
-397 -3970 4007 0
-397 -3968 4005 0
-397 -3966 4003 0
-397 -3964 4001 0
-397 -3962 3999 0
-397 -3960 3997 0
-397 -3958 3995 0
-397 -3956 3993 0
-397 -3954 3991 0
-397 -3952 3989 0
-397 -3950 3987 0
-397 -3948 3985 0
-397 -3946 3983 0
-397 -3944 3981 0
-397 -3942 3979 0
-397 -3941 3977 0
-395 4007 0
-395 -3970 4005 0
-395 -3968 4003 0
-395 -3966 4001 0
-395 -3964 3999 0
-395 -3962 3997 0
-395 -3960 3995 0
-395 -3958 3993 0
-395 -3956 3991 0
-395 -3954 3989 0
-395 -3952 3987 0
-395 -3950 3985 0
-395 -3948 3983 0
-395 -3946 3981 0
-395 -3944 3979 0
-395 -3942 3977 0
-395 -3941 3975 0
-393 4005 0
-393 -3970 4003 0
-393 -3968 4001 0
-393 -3966 3999 0
-393 -3964 3997 0
-393 -3962 3995 0
-393 -3960 3993 0
-393 -3958 3991 0
-393 -3956 3989 0
-393 -3954 3987 0
-393 -3952 3985 0
-393 -3950 3983 0
-393 -3948 3981 0
-393 -3946 3979 0
-393 -3944 3977 0
-393 -3942 3975 0
-393 -3941 3973 0
-392 4003 0
-392 -3970 4001 0
-392 -3968 3999 0
-392 -3966 3997 0
-392 -3964 3995 0
-392 -3962 3993 0
-392 -3960 3991 0
-392 -3958 3989 0
-392 -3956 3987 0
-392 -3954 3985 0
-392 -3952 3983 0
-392 -3950 3981 0
-392 -3948 3979 0
-392 -3946 3977 0
-392 -3944 3975 0
-392 -3942 3973 0
-392 -3941 3972 0
c ((aux515 + aux517 - aux520)<=0)
3910 -4019 0
3911 -4020 0
3913 -4022 0
3915 -4024 0
3917 -4026 0
3919 -4028 0
3921 -4030 0
3923 -4032 0
3925 -4034 0
3927 -4036 0
3929 -4038 0
3931 -4040 0
3933 -4042 0
3935 -4044 0
3937 -4046 0
3939 -4048 0
3848 -4019 0
3848 3910 -4020 0
3848 3911 -4022 0
3848 3913 -4024 0
3848 3915 -4026 0
3848 3917 -4028 0
3848 3919 -4030 0
3848 3921 -4032 0
3848 3923 -4034 0
3848 3925 -4036 0
3848 3927 -4038 0
3848 3929 -4040 0
3848 3931 -4042 0
3848 3933 -4044 0
3848 3935 -4046 0
3848 3937 -4048 0
3848 3939 -4050 0
3849 -4020 0
3849 3910 -4022 0
3849 3911 -4024 0
3849 3913 -4026 0
3849 3915 -4028 0
3849 3917 -4030 0
3849 3919 -4032 0
3849 3921 -4034 0
3849 3923 -4036 0
3849 3925 -4038 0
3849 3927 -4040 0
3849 3929 -4042 0
3849 3931 -4044 0
3849 3933 -4046 0
3849 3935 -4048 0
3849 3937 -4050 0
3849 3939 -4052 0
3851 -4022 0
3851 3910 -4024 0
3851 3911 -4026 0
3851 3913 -4028 0
3851 3915 -4030 0
3851 3917 -4032 0
3851 3919 -4034 0
3851 3921 -4036 0
3851 3923 -4038 0
3851 3925 -4040 0
3851 3927 -4042 0
3851 3929 -4044 0
3851 3931 -4046 0
3851 3933 -4048 0
3851 3935 -4050 0
3851 3937 -4052 0
3851 3939 -4054 0
3853 -4024 0
3853 3910 -4026 0
3853 3911 -4028 0
3853 3913 -4030 0
3853 3915 -4032 0
3853 3917 -4034 0
3853 3919 -4036 0
3853 3921 -4038 0
3853 3923 -4040 0
3853 3925 -4042 0
3853 3927 -4044 0
3853 3929 -4046 0
3853 3931 -4048 0
3853 3933 -4050 0
3853 3935 -4052 0
3853 3937 -4054 0
3853 3939 -4056 0
3855 -4026 0
3855 3910 -4028 0
3855 3911 -4030 0
3855 3913 -4032 0
3855 3915 -4034 0
3855 3917 -4036 0
3855 3919 -4038 0
3855 3921 -4040 0
3855 3923 -4042 0
3855 3925 -4044 0
3855 3927 -4046 0
3855 3929 -4048 0
3855 3931 -4050 0
3855 3933 -4052 0
3855 3935 -4054 0
3855 3937 -4056 0
3855 3939 -4058 0
3857 -4028 0
3857 3910 -4030 0
3857 3911 -4032 0
3857 3913 -4034 0
3857 3915 -4036 0
3857 3917 -4038 0
3857 3919 -4040 0
3857 3921 -4042 0
3857 3923 -4044 0
3857 3925 -4046 0
3857 3927 -4048 0
3857 3929 -4050 0
3857 3931 -4052 0
3857 3933 -4054 0
3857 3935 -4056 0
3857 3937 -4058 0
3857 3939 -4060 0
3859 -4030 0
3859 3910 -4032 0
3859 3911 -4034 0
3859 3913 -4036 0
3859 3915 -4038 0
3859 3917 -4040 0
3859 3919 -4042 0
3859 3921 -4044 0
3859 3923 -4046 0
3859 3925 -4048 0
3859 3927 -4050 0
3859 3929 -4052 0
3859 3931 -4054 0
3859 3933 -4056 0
3859 3935 -4058 0
3859 3937 -4060 0
3859 3939 -4062 0
3861 -4032 0
3861 3910 -4034 0
3861 3911 -4036 0
3861 3913 -4038 0
3861 3915 -4040 0
3861 3917 -4042 0
3861 3919 -4044 0
3861 3921 -4046 0
3861 3923 -4048 0
3861 3925 -4050 0
3861 3927 -4052 0
3861 3929 -4054 0
3861 3931 -4056 0
3861 3933 -4058 0
3861 3935 -4060 0
3861 3937 -4062 0
3861 3939 -4064 0
3863 -4034 0
3863 3910 -4036 0
3863 3911 -4038 0
3863 3913 -4040 0
3863 3915 -4042 0
3863 3917 -4044 0
3863 3919 -4046 0
3863 3921 -4048 0
3863 3923 -4050 0
3863 3925 -4052 0
3863 3927 -4054 0
3863 3929 -4056 0
3863 3931 -4058 0
3863 3933 -4060 0
3863 3935 -4062 0
3863 3937 -4064 0
3863 3939 -4066 0
3865 -4036 0
3865 3910 -4038 0
3865 3911 -4040 0
3865 3913 -4042 0
3865 3915 -4044 0
3865 3917 -4046 0
3865 3919 -4048 0
3865 3921 -4050 0
3865 3923 -4052 0
3865 3925 -4054 0
3865 3927 -4056 0
3865 3929 -4058 0
3865 3931 -4060 0
3865 3933 -4062 0
3865 3935 -4064 0
3865 3937 -4066 0
3865 3939 -4068 0
3867 -4038 0
3867 3910 -4040 0
3867 3911 -4042 0
3867 3913 -4044 0
3867 3915 -4046 0
3867 3917 -4048 0
3867 3919 -4050 0
3867 3921 -4052 0
3867 3923 -4054 0
3867 3925 -4056 0
3867 3927 -4058 0
3867 3929 -4060 0
3867 3931 -4062 0
3867 3933 -4064 0
3867 3935 -4066 0
3867 3937 -4068 0
3867 3939 -4070 0
3869 -4040 0
3869 3910 -4042 0
3869 3911 -4044 0
3869 3913 -4046 0
3869 3915 -4048 0
3869 3917 -4050 0
3869 3919 -4052 0
3869 3921 -4054 0
3869 3923 -4056 0
3869 3925 -4058 0
3869 3927 -4060 0
3869 3929 -4062 0
3869 3931 -4064 0
3869 3933 -4066 0
3869 3935 -4068 0
3869 3937 -4070 0
3869 3939 -4072 0
3871 -4042 0
3871 3910 -4044 0
3871 3911 -4046 0
3871 3913 -4048 0
3871 3915 -4050 0
3871 3917 -4052 0
3871 3919 -4054 0
3871 3921 -4056 0
3871 3923 -4058 0
3871 3925 -4060 0
3871 3927 -4062 0
3871 3929 -4064 0
3871 3931 -4066 0
3871 3933 -4068 0
3871 3935 -4070 0
3871 3937 -4072 0
3871 3939 -4074 0
3873 -4044 0
3873 3910 -4046 0
3873 3911 -4048 0
3873 3913 -4050 0
3873 3915 -4052 0
3873 3917 -4054 0
3873 3919 -4056 0
3873 3921 -4058 0
3873 3923 -4060 0
3873 3925 -4062 0
3873 3927 -4064 0
3873 3929 -4066 0
3873 3931 -4068 0
3873 3933 -4070 0
3873 3935 -4072 0
3873 3937 -4074 0
3873 3939 -4076 0
3875 -4046 0
3875 3910 -4048 0
3875 3911 -4050 0
3875 3913 -4052 0
3875 3915 -4054 0
3875 3917 -4056 0
3875 3919 -4058 0
3875 3921 -4060 0
3875 3923 -4062 0
3875 3925 -4064 0
3875 3927 -4066 0
3875 3929 -4068 0
3875 3931 -4070 0
3875 3933 -4072 0
3875 3935 -4074 0
3875 3937 -4076 0
3875 3939 -4078 0
3877 -4048 0
3877 3910 -4050 0
3877 3911 -4052 0
3877 3913 -4054 0
3877 3915 -4056 0
3877 3917 -4058 0
3877 3919 -4060 0
3877 3921 -4062 0
3877 3923 -4064 0
3877 3925 -4066 0
3877 3927 -4068 0
3877 3929 -4070 0
3877 3931 -4072 0
3877 3933 -4074 0
3877 3935 -4076 0
3877 3937 -4078 0
3877 3939 -4080 0
c (0<=(aux515 + aux517 - aux520))
-3939 4080 0
-3937 4078 0
-3935 4076 0
-3933 4074 0
-3931 4072 0
-3929 4070 0
-3927 4068 0
-3925 4066 0
-3923 4064 0
-3921 4062 0
-3919 4060 0
-3917 4058 0
-3915 4056 0
-3913 4054 0
-3911 4052 0
-3910 4050 0
-3877 4080 0
-3877 -3939 4078 0
-3877 -3937 4076 0
-3877 -3935 4074 0
-3877 -3933 4072 0
-3877 -3931 4070 0
-3877 -3929 4068 0
-3877 -3927 4066 0
-3877 -3925 4064 0
-3877 -3923 4062 0
-3877 -3921 4060 0
-3877 -3919 4058 0
-3877 -3917 4056 0
-3877 -3915 4054 0
-3877 -3913 4052 0
-3877 -3911 4050 0
-3877 -3910 4048 0
-3875 4078 0
-3875 -3939 4076 0
-3875 -3937 4074 0
-3875 -3935 4072 0
-3875 -3933 4070 0
-3875 -3931 4068 0
-3875 -3929 4066 0
-3875 -3927 4064 0
-3875 -3925 4062 0
-3875 -3923 4060 0
-3875 -3921 4058 0
-3875 -3919 4056 0
-3875 -3917 4054 0
-3875 -3915 4052 0
-3875 -3913 4050 0
-3875 -3911 4048 0
-3875 -3910 4046 0
-3873 4076 0
-3873 -3939 4074 0
-3873 -3937 4072 0
-3873 -3935 4070 0
-3873 -3933 4068 0
-3873 -3931 4066 0
-3873 -3929 4064 0
-3873 -3927 4062 0
-3873 -3925 4060 0
-3873 -3923 4058 0
-3873 -3921 4056 0
-3873 -3919 4054 0
-3873 -3917 4052 0
-3873 -3915 4050 0
-3873 -3913 4048 0
-3873 -3911 4046 0
-3873 -3910 4044 0
-3871 4074 0
-3871 -3939 4072 0
-3871 -3937 4070 0
-3871 -3935 4068 0
-3871 -3933 4066 0
-3871 -3931 4064 0
-3871 -3929 4062 0
-3871 -3927 4060 0
-3871 -3925 4058 0
-3871 -3923 4056 0
-3871 -3921 4054 0
-3871 -3919 4052 0
-3871 -3917 4050 0
-3871 -3915 4048 0
-3871 -3913 4046 0
-3871 -3911 4044 0
-3871 -3910 4042 0
-3869 4072 0
-3869 -3939 4070 0
-3869 -3937 4068 0
-3869 -3935 4066 0
-3869 -3933 4064 0
-3869 -3931 4062 0
-3869 -3929 4060 0
-3869 -3927 4058 0
-3869 -3925 4056 0
-3869 -3923 4054 0
-3869 -3921 4052 0
-3869 -3919 4050 0
-3869 -3917 4048 0
-3869 -3915 4046 0
-3869 -3913 4044 0
-3869 -3911 4042 0
-3869 -3910 4040 0
-3867 4070 0
-3867 -3939 4068 0
-3867 -3937 4066 0
-3867 -3935 4064 0
-3867 -3933 4062 0
-3867 -3931 4060 0
-3867 -3929 4058 0
-3867 -3927 4056 0
-3867 -3925 4054 0
-3867 -3923 4052 0
-3867 -3921 4050 0
-3867 -3919 4048 0
-3867 -3917 4046 0
-3867 -3915 4044 0
-3867 -3913 4042 0
-3867 -3911 4040 0
-3867 -3910 4038 0
-3865 4068 0
-3865 -3939 4066 0
-3865 -3937 4064 0
-3865 -3935 4062 0
-3865 -3933 4060 0
-3865 -3931 4058 0
-3865 -3929 4056 0
-3865 -3927 4054 0
-3865 -3925 4052 0
-3865 -3923 4050 0
-3865 -3921 4048 0
-3865 -3919 4046 0
-3865 -3917 4044 0
-3865 -3915 4042 0
-3865 -3913 4040 0
-3865 -3911 4038 0
-3865 -3910 4036 0
-3863 4066 0
-3863 -3939 4064 0
-3863 -3937 4062 0
-3863 -3935 4060 0
-3863 -3933 4058 0
-3863 -3931 4056 0
-3863 -3929 4054 0
-3863 -3927 4052 0
-3863 -3925 4050 0
-3863 -3923 4048 0
-3863 -3921 4046 0
-3863 -3919 4044 0
-3863 -3917 4042 0
-3863 -3915 4040 0
-3863 -3913 4038 0
-3863 -3911 4036 0
-3863 -3910 4034 0
-3861 4064 0
-3861 -3939 4062 0
-3861 -3937 4060 0
-3861 -3935 4058 0
-3861 -3933 4056 0
-3861 -3931 4054 0
-3861 -3929 4052 0
-3861 -3927 4050 0
-3861 -3925 4048 0
-3861 -3923 4046 0
-3861 -3921 4044 0
-3861 -3919 4042 0
-3861 -3917 4040 0
-3861 -3915 4038 0
-3861 -3913 4036 0
-3861 -3911 4034 0
-3861 -3910 4032 0
-3859 4062 0
-3859 -3939 4060 0
-3859 -3937 4058 0
-3859 -3935 4056 0
-3859 -3933 4054 0
-3859 -3931 4052 0
-3859 -3929 4050 0
-3859 -3927 4048 0
-3859 -3925 4046 0
-3859 -3923 4044 0
-3859 -3921 4042 0
-3859 -3919 4040 0
-3859 -3917 4038 0
-3859 -3915 4036 0
-3859 -3913 4034 0
-3859 -3911 4032 0
-3859 -3910 4030 0
-3857 4060 0
-3857 -3939 4058 0
-3857 -3937 4056 0
-3857 -3935 4054 0
-3857 -3933 4052 0
-3857 -3931 4050 0
-3857 -3929 4048 0
-3857 -3927 4046 0
-3857 -3925 4044 0
-3857 -3923 4042 0
-3857 -3921 4040 0
-3857 -3919 4038 0
-3857 -3917 4036 0
-3857 -3915 4034 0
-3857 -3913 4032 0
-3857 -3911 4030 0
-3857 -3910 4028 0
-3855 4058 0
-3855 -3939 4056 0
-3855 -3937 4054 0
-3855 -3935 4052 0
-3855 -3933 4050 0
-3855 -3931 4048 0
-3855 -3929 4046 0
-3855 -3927 4044 0
-3855 -3925 4042 0
-3855 -3923 4040 0
-3855 -3921 4038 0
-3855 -3919 4036 0
-3855 -3917 4034 0
-3855 -3915 4032 0
-3855 -3913 4030 0
-3855 -3911 4028 0
-3855 -3910 4026 0
-3853 4056 0
-3853 -3939 4054 0
-3853 -3937 4052 0
-3853 -3935 4050 0
-3853 -3933 4048 0
-3853 -3931 4046 0
-3853 -3929 4044 0
-3853 -3927 4042 0
-3853 -3925 4040 0
-3853 -3923 4038 0
-3853 -3921 4036 0
-3853 -3919 4034 0
-3853 -3917 4032 0
-3853 -3915 4030 0
-3853 -3913 4028 0
-3853 -3911 4026 0
-3853 -3910 4024 0
-3851 4054 0
-3851 -3939 4052 0
-3851 -3937 4050 0
-3851 -3935 4048 0
-3851 -3933 4046 0
-3851 -3931 4044 0
-3851 -3929 4042 0
-3851 -3927 4040 0
-3851 -3925 4038 0
-3851 -3923 4036 0
-3851 -3921 4034 0
-3851 -3919 4032 0
-3851 -3917 4030 0
-3851 -3915 4028 0
-3851 -3913 4026 0
-3851 -3911 4024 0
-3851 -3910 4022 0
-3849 4052 0
-3849 -3939 4050 0
-3849 -3937 4048 0
-3849 -3935 4046 0
-3849 -3933 4044 0
-3849 -3931 4042 0
-3849 -3929 4040 0
-3849 -3927 4038 0
-3849 -3925 4036 0
-3849 -3923 4034 0
-3849 -3921 4032 0
-3849 -3919 4030 0
-3849 -3917 4028 0
-3849 -3915 4026 0
-3849 -3913 4024 0
-3849 -3911 4022 0
-3849 -3910 4020 0
-3848 4050 0
-3848 -3939 4048 0
-3848 -3937 4046 0
-3848 -3935 4044 0
-3848 -3933 4042 0
-3848 -3931 4040 0
-3848 -3929 4038 0
-3848 -3927 4036 0
-3848 -3925 4034 0
-3848 -3923 4032 0
-3848 -3921 4030 0
-3848 -3919 4028 0
-3848 -3917 4026 0
-3848 -3915 4024 0
-3848 -3913 4022 0
-3848 -3911 4020 0
-3848 -3910 4019 0
c (( - aux521 + shift(x_00001_00001, -1) + shift(x_00001_00009, -1))<=0)
122 -4082 0
123 -4083 0
125 -4085 0
127 -4087 0
129 -4089 0
131 -4091 0
133 -4093 0
135 -4095 0
2 -4082 0
2 122 -4083 0
2 123 -4085 0
2 125 -4087 0
2 127 -4089 0
2 129 -4091 0
2 131 -4093 0
2 133 -4095 0
2 135 -4097 0
3 -4083 0
3 122 -4085 0
3 123 -4087 0
3 125 -4089 0
3 127 -4091 0
3 129 -4093 0
3 131 -4095 0
3 133 -4097 0
3 135 -4099 0
5 -4085 0
5 122 -4087 0
5 123 -4089 0
5 125 -4091 0
5 127 -4093 0
5 129 -4095 0
5 131 -4097 0
5 133 -4099 0
5 135 -4101 0
7 -4087 0
7 122 -4089 0
7 123 -4091 0
7 125 -4093 0
7 127 -4095 0
7 129 -4097 0
7 131 -4099 0
7 133 -4101 0
7 135 -4103 0
9 -4089 0
9 122 -4091 0
9 123 -4093 0
9 125 -4095 0
9 127 -4097 0
9 129 -4099 0
9 131 -4101 0
9 133 -4103 0
9 135 -4105 0
11 -4091 0
11 122 -4093 0
11 123 -4095 0
11 125 -4097 0
11 127 -4099 0
11 129 -4101 0
11 131 -4103 0
11 133 -4105 0
11 135 -4107 0
13 -4093 0
13 122 -4095 0
13 123 -4097 0
13 125 -4099 0
13 127 -4101 0
13 129 -4103 0
13 131 -4105 0
13 133 -4107 0
13 135 -4109 0
15 -4095 0
15 122 -4097 0
15 123 -4099 0
15 125 -4101 0
15 127 -4103 0
15 129 -4105 0
15 131 -4107 0
15 133 -4109 0
15 135 -4111 0
c (0<=( - aux521 + shift(x_00001_00001, -1) + shift(x_00001_00009, -1)))
-135 4111 0
-133 4109 0
-131 4107 0
-129 4105 0
-127 4103 0
-125 4101 0
-123 4099 0
-122 4097 0
-15 4111 0
-15 -135 4109 0
-15 -133 4107 0
-15 -131 4105 0
-15 -129 4103 0
-15 -127 4101 0
-15 -125 4099 0
-15 -123 4097 0
-15 -122 4095 0
-13 4109 0
-13 -135 4107 0
-13 -133 4105 0
-13 -131 4103 0
-13 -129 4101 0
-13 -127 4099 0
-13 -125 4097 0
-13 -123 4095 0
-13 -122 4093 0
-11 4107 0
-11 -135 4105 0
-11 -133 4103 0
-11 -131 4101 0
-11 -129 4099 0
-11 -127 4097 0
-11 -125 4095 0
-11 -123 4093 0
-11 -122 4091 0
-9 4105 0
-9 -135 4103 0
-9 -133 4101 0
-9 -131 4099 0
-9 -129 4097 0
-9 -127 4095 0
-9 -125 4093 0
-9 -123 4091 0
-9 -122 4089 0
-7 4103 0
-7 -135 4101 0
-7 -133 4099 0
-7 -131 4097 0
-7 -129 4095 0
-7 -127 4093 0
-7 -125 4091 0
-7 -123 4089 0
-7 -122 4087 0
-5 4101 0
-5 -135 4099 0
-5 -133 4097 0
-5 -131 4095 0
-5 -129 4093 0
-5 -127 4091 0
-5 -125 4089 0
-5 -123 4087 0
-5 -122 4085 0
-3 4099 0
-3 -135 4097 0
-3 -133 4095 0
-3 -131 4093 0
-3 -129 4091 0
-3 -127 4089 0
-3 -125 4087 0
-3 -123 4085 0
-3 -122 4083 0
-2 4097 0
-2 -135 4095 0
-2 -133 4093 0
-2 -131 4091 0
-2 -129 4089 0
-2 -127 4087 0
-2 -125 4085 0
-2 -123 4083 0
-2 -122 4082 0
c (( - aux522 + shift(x_00001_00002, -1) + shift(x_00001_00008, -1))<=0)
107 -4113 0
108 -4114 0
110 -4116 0
112 -4118 0
114 -4120 0
116 -4122 0
118 -4124 0
120 -4126 0
17 -4113 0
17 107 -4114 0
17 108 -4116 0
17 110 -4118 0
17 112 -4120 0
17 114 -4122 0
17 116 -4124 0
17 118 -4126 0
17 120 -4128 0
18 -4114 0
18 107 -4116 0
18 108 -4118 0
18 110 -4120 0
18 112 -4122 0
18 114 -4124 0
18 116 -4126 0
18 118 -4128 0
18 120 -4130 0
20 -4116 0
20 107 -4118 0
20 108 -4120 0
20 110 -4122 0
20 112 -4124 0
20 114 -4126 0
20 116 -4128 0
20 118 -4130 0
20 120 -4132 0
22 -4118 0
22 107 -4120 0
22 108 -4122 0
22 110 -4124 0
22 112 -4126 0
22 114 -4128 0
22 116 -4130 0
22 118 -4132 0
22 120 -4134 0
24 -4120 0
24 107 -4122 0
24 108 -4124 0
24 110 -4126 0
24 112 -4128 0
24 114 -4130 0
24 116 -4132 0
24 118 -4134 0
24 120 -4136 0
26 -4122 0
26 107 -4124 0
26 108 -4126 0
26 110 -4128 0
26 112 -4130 0
26 114 -4132 0
26 116 -4134 0
26 118 -4136 0
26 120 -4138 0
28 -4124 0
28 107 -4126 0
28 108 -4128 0
28 110 -4130 0
28 112 -4132 0
28 114 -4134 0
28 116 -4136 0
28 118 -4138 0
28 120 -4140 0
30 -4126 0
30 107 -4128 0
30 108 -4130 0
30 110 -4132 0
30 112 -4134 0
30 114 -4136 0
30 116 -4138 0
30 118 -4140 0
30 120 -4142 0
c (0<=( - aux522 + shift(x_00001_00002, -1) + shift(x_00001_00008, -1)))
-120 4142 0
-118 4140 0
-116 4138 0
-114 4136 0
-112 4134 0
-110 4132 0
-108 4130 0
-107 4128 0
-30 4142 0
-30 -120 4140 0
-30 -118 4138 0
-30 -116 4136 0
-30 -114 4134 0
-30 -112 4132 0
-30 -110 4130 0
-30 -108 4128 0
-30 -107 4126 0
-28 4140 0
-28 -120 4138 0
-28 -118 4136 0
-28 -116 4134 0
-28 -114 4132 0
-28 -112 4130 0
-28 -110 4128 0
-28 -108 4126 0
-28 -107 4124 0
-26 4138 0
-26 -120 4136 0
-26 -118 4134 0
-26 -116 4132 0
-26 -114 4130 0
-26 -112 4128 0
-26 -110 4126 0
-26 -108 4124 0
-26 -107 4122 0
-24 4136 0
-24 -120 4134 0
-24 -118 4132 0
-24 -116 4130 0
-24 -114 4128 0
-24 -112 4126 0
-24 -110 4124 0
-24 -108 4122 0
-24 -107 4120 0
-22 4134 0
-22 -120 4132 0
-22 -118 4130 0
-22 -116 4128 0
-22 -114 4126 0
-22 -112 4124 0
-22 -110 4122 0
-22 -108 4120 0
-22 -107 4118 0
-20 4132 0
-20 -120 4130 0
-20 -118 4128 0
-20 -116 4126 0
-20 -114 4124 0
-20 -112 4122 0
-20 -110 4120 0
-20 -108 4118 0
-20 -107 4116 0
-18 4130 0
-18 -120 4128 0
-18 -118 4126 0
-18 -116 4124 0
-18 -114 4122 0
-18 -112 4120 0
-18 -110 4118 0
-18 -108 4116 0
-18 -107 4114 0
-17 4128 0
-17 -120 4126 0
-17 -118 4124 0
-17 -116 4122 0
-17 -114 4120 0
-17 -112 4118 0
-17 -110 4116 0
-17 -108 4114 0
-17 -107 4113 0
c (( - aux523 + shift(x_00001_00004, -1) + shift(x_00001_00007, -1))<=0)
92 -4144 0
93 -4145 0
95 -4147 0
97 -4149 0
99 -4151 0
101 -4153 0
103 -4155 0
105 -4157 0
47 -4144 0
47 92 -4145 0
47 93 -4147 0
47 95 -4149 0
47 97 -4151 0
47 99 -4153 0
47 101 -4155 0
47 103 -4157 0
47 105 -4159 0
48 -4145 0
48 92 -4147 0
48 93 -4149 0
48 95 -4151 0
48 97 -4153 0
48 99 -4155 0
48 101 -4157 0
48 103 -4159 0
48 105 -4161 0
50 -4147 0
50 92 -4149 0
50 93 -4151 0
50 95 -4153 0
50 97 -4155 0
50 99 -4157 0
50 101 -4159 0
50 103 -4161 0
50 105 -4163 0
52 -4149 0
52 92 -4151 0
52 93 -4153 0
52 95 -4155 0
52 97 -4157 0
52 99 -4159 0
52 101 -4161 0
52 103 -4163 0
52 105 -4165 0
54 -4151 0
54 92 -4153 0
54 93 -4155 0
54 95 -4157 0
54 97 -4159 0
54 99 -4161 0
54 101 -4163 0
54 103 -4165 0
54 105 -4167 0
56 -4153 0
56 92 -4155 0
56 93 -4157 0
56 95 -4159 0
56 97 -4161 0
56 99 -4163 0
56 101 -4165 0
56 103 -4167 0
56 105 -4169 0
58 -4155 0
58 92 -4157 0
58 93 -4159 0
58 95 -4161 0
58 97 -4163 0
58 99 -4165 0
58 101 -4167 0
58 103 -4169 0
58 105 -4171 0
60 -4157 0
60 92 -4159 0
60 93 -4161 0
60 95 -4163 0
60 97 -4165 0
60 99 -4167 0
60 101 -4169 0
60 103 -4171 0
60 105 -4173 0
c (0<=( - aux523 + shift(x_00001_00004, -1) + shift(x_00001_00007, -1)))
-105 4173 0
-103 4171 0
-101 4169 0
-99 4167 0
-97 4165 0
-95 4163 0
-93 4161 0
-92 4159 0
-60 4173 0
-60 -105 4171 0
-60 -103 4169 0
-60 -101 4167 0
-60 -99 4165 0
-60 -97 4163 0
-60 -95 4161 0
-60 -93 4159 0
-60 -92 4157 0
-58 4171 0
-58 -105 4169 0
-58 -103 4167 0
-58 -101 4165 0
-58 -99 4163 0
-58 -97 4161 0
-58 -95 4159 0
-58 -93 4157 0
-58 -92 4155 0
-56 4169 0
-56 -105 4167 0
-56 -103 4165 0
-56 -101 4163 0
-56 -99 4161 0
-56 -97 4159 0
-56 -95 4157 0
-56 -93 4155 0
-56 -92 4153 0
-54 4167 0
-54 -105 4165 0
-54 -103 4163 0
-54 -101 4161 0
-54 -99 4159 0
-54 -97 4157 0
-54 -95 4155 0
-54 -93 4153 0
-54 -92 4151 0
-52 4165 0
-52 -105 4163 0
-52 -103 4161 0
-52 -101 4159 0
-52 -99 4157 0
-52 -97 4155 0
-52 -95 4153 0
-52 -93 4151 0
-52 -92 4149 0
-50 4163 0
-50 -105 4161 0
-50 -103 4159 0
-50 -101 4157 0
-50 -99 4155 0
-50 -97 4153 0
-50 -95 4151 0
-50 -93 4149 0
-50 -92 4147 0
-48 4161 0
-48 -105 4159 0
-48 -103 4157 0
-48 -101 4155 0
-48 -99 4153 0
-48 -97 4151 0
-48 -95 4149 0
-48 -93 4147 0
-48 -92 4145 0
-47 4159 0
-47 -105 4157 0
-47 -103 4155 0
-47 -101 4153 0
-47 -99 4151 0
-47 -97 4149 0
-47 -95 4147 0
-47 -93 4145 0
-47 -92 4144 0
c (( - aux524 + shift(x_00001_00005, -1) + shift(x_00001_00006, -1))<=0)
77 -4175 0
78 -4176 0
80 -4178 0
82 -4180 0
84 -4182 0
86 -4184 0
88 -4186 0
90 -4188 0
62 -4175 0
62 77 -4176 0
62 78 -4178 0
62 80 -4180 0
62 82 -4182 0
62 84 -4184 0
62 86 -4186 0
62 88 -4188 0
62 90 -4190 0
63 -4176 0
63 77 -4178 0
63 78 -4180 0
63 80 -4182 0
63 82 -4184 0
63 84 -4186 0
63 86 -4188 0
63 88 -4190 0
63 90 -4192 0
65 -4178 0
65 77 -4180 0
65 78 -4182 0
65 80 -4184 0
65 82 -4186 0
65 84 -4188 0
65 86 -4190 0
65 88 -4192 0
65 90 -4194 0
67 -4180 0
67 77 -4182 0
67 78 -4184 0
67 80 -4186 0
67 82 -4188 0
67 84 -4190 0
67 86 -4192 0
67 88 -4194 0
67 90 -4196 0
69 -4182 0
69 77 -4184 0
69 78 -4186 0
69 80 -4188 0
69 82 -4190 0
69 84 -4192 0
69 86 -4194 0
69 88 -4196 0
69 90 -4198 0
71 -4184 0
71 77 -4186 0
71 78 -4188 0
71 80 -4190 0
71 82 -4192 0
71 84 -4194 0
71 86 -4196 0
71 88 -4198 0
71 90 -4200 0
73 -4186 0
73 77 -4188 0
73 78 -4190 0
73 80 -4192 0
73 82 -4194 0
73 84 -4196 0
73 86 -4198 0
73 88 -4200 0
73 90 -4202 0
75 -4188 0
75 77 -4190 0
75 78 -4192 0
75 80 -4194 0
75 82 -4196 0
75 84 -4198 0
75 86 -4200 0
75 88 -4202 0
75 90 -4204 0
c (0<=( - aux524 + shift(x_00001_00005, -1) + shift(x_00001_00006, -1)))
-90 4204 0
-88 4202 0
-86 4200 0
-84 4198 0
-82 4196 0
-80 4194 0
-78 4192 0
-77 4190 0
-75 4204 0
-75 -90 4202 0
-75 -88 4200 0
-75 -86 4198 0
-75 -84 4196 0
-75 -82 4194 0
-75 -80 4192 0
-75 -78 4190 0
-75 -77 4188 0
-73 4202 0
-73 -90 4200 0
-73 -88 4198 0
-73 -86 4196 0
-73 -84 4194 0
-73 -82 4192 0
-73 -80 4190 0
-73 -78 4188 0
-73 -77 4186 0
-71 4200 0
-71 -90 4198 0
-71 -88 4196 0
-71 -86 4194 0
-71 -84 4192 0
-71 -82 4190 0
-71 -80 4188 0
-71 -78 4186 0
-71 -77 4184 0
-69 4198 0
-69 -90 4196 0
-69 -88 4194 0
-69 -86 4192 0
-69 -84 4190 0
-69 -82 4188 0
-69 -80 4186 0
-69 -78 4184 0
-69 -77 4182 0
-67 4196 0
-67 -90 4194 0
-67 -88 4192 0
-67 -86 4190 0
-67 -84 4188 0
-67 -82 4186 0
-67 -80 4184 0
-67 -78 4182 0
-67 -77 4180 0
-65 4194 0
-65 -90 4192 0
-65 -88 4190 0
-65 -86 4188 0
-65 -84 4186 0
-65 -82 4184 0
-65 -80 4182 0
-65 -78 4180 0
-65 -77 4178 0
-63 4192 0
-63 -90 4190 0
-63 -88 4188 0
-63 -86 4186 0
-63 -84 4184 0
-63 -82 4182 0
-63 -80 4180 0
-63 -78 4178 0
-63 -77 4176 0
-62 4190 0
-62 -90 4188 0
-62 -88 4186 0
-62 -86 4184 0
-62 -84 4182 0
-62 -82 4180 0
-62 -80 4178 0
-62 -78 4176 0
-62 -77 4175 0
c ((aux524 - aux525 + shift(x_00001_00003, -1))<=0)
4175 -4206 0
4176 -4207 0
4178 -4209 0
4180 -4211 0
4182 -4213 0
4184 -4215 0
4186 -4217 0
4188 -4219 0
4190 -4221 0
4192 -4223 0
4194 -4225 0
4196 -4227 0
4198 -4229 0
4200 -4231 0
4202 -4233 0
4204 -4235 0
32 -4206 0
32 4175 -4207 0
32 4176 -4209 0
32 4178 -4211 0
32 4180 -4213 0
32 4182 -4215 0
32 4184 -4217 0
32 4186 -4219 0
32 4188 -4221 0
32 4190 -4223 0
32 4192 -4225 0
32 4194 -4227 0
32 4196 -4229 0
32 4198 -4231 0
32 4200 -4233 0
32 4202 -4235 0
32 4204 -4237 0
33 -4207 0
33 4175 -4209 0
33 4176 -4211 0
33 4178 -4213 0
33 4180 -4215 0
33 4182 -4217 0
33 4184 -4219 0
33 4186 -4221 0
33 4188 -4223 0
33 4190 -4225 0
33 4192 -4227 0
33 4194 -4229 0
33 4196 -4231 0
33 4198 -4233 0
33 4200 -4235 0
33 4202 -4237 0
33 4204 -4239 0
35 -4209 0
35 4175 -4211 0
35 4176 -4213 0
35 4178 -4215 0
35 4180 -4217 0
35 4182 -4219 0
35 4184 -4221 0
35 4186 -4223 0
35 4188 -4225 0
35 4190 -4227 0
35 4192 -4229 0
35 4194 -4231 0
35 4196 -4233 0
35 4198 -4235 0
35 4200 -4237 0
35 4202 -4239 0
35 4204 -4241 0
37 -4211 0
37 4175 -4213 0
37 4176 -4215 0
37 4178 -4217 0
37 4180 -4219 0
37 4182 -4221 0
37 4184 -4223 0
37 4186 -4225 0
37 4188 -4227 0
37 4190 -4229 0
37 4192 -4231 0
37 4194 -4233 0
37 4196 -4235 0
37 4198 -4237 0
37 4200 -4239 0
37 4202 -4241 0
37 4204 -4243 0
39 -4213 0
39 4175 -4215 0
39 4176 -4217 0
39 4178 -4219 0
39 4180 -4221 0
39 4182 -4223 0
39 4184 -4225 0
39 4186 -4227 0
39 4188 -4229 0
39 4190 -4231 0
39 4192 -4233 0
39 4194 -4235 0
39 4196 -4237 0
39 4198 -4239 0
39 4200 -4241 0
39 4202 -4243 0
39 4204 -4245 0
41 -4215 0
41 4175 -4217 0
41 4176 -4219 0
41 4178 -4221 0
41 4180 -4223 0
41 4182 -4225 0
41 4184 -4227 0
41 4186 -4229 0
41 4188 -4231 0
41 4190 -4233 0
41 4192 -4235 0
41 4194 -4237 0
41 4196 -4239 0
41 4198 -4241 0
41 4200 -4243 0
41 4202 -4245 0
41 4204 -4247 0
43 -4217 0
43 4175 -4219 0
43 4176 -4221 0
43 4178 -4223 0
43 4180 -4225 0
43 4182 -4227 0
43 4184 -4229 0
43 4186 -4231 0
43 4188 -4233 0
43 4190 -4235 0
43 4192 -4237 0
43 4194 -4239 0
43 4196 -4241 0
43 4198 -4243 0
43 4200 -4245 0
43 4202 -4247 0
43 4204 -4249 0
45 -4219 0
45 4175 -4221 0
45 4176 -4223 0
45 4178 -4225 0
45 4180 -4227 0
45 4182 -4229 0
45 4184 -4231 0
45 4186 -4233 0
45 4188 -4235 0
45 4190 -4237 0
45 4192 -4239 0
45 4194 -4241 0
45 4196 -4243 0
45 4198 -4245 0
45 4200 -4247 0
45 4202 -4249 0
45 4204 -4251 0
c (0<=(aux524 - aux525 + shift(x_00001_00003, -1)))
-4204 4251 0
-4202 4249 0
-4200 4247 0
-4198 4245 0
-4196 4243 0
-4194 4241 0
-4192 4239 0
-4190 4237 0
-4188 4235 0
-4186 4233 0
-4184 4231 0
-4182 4229 0
-4180 4227 0
-4178 4225 0
-4176 4223 0
-4175 4221 0
-45 4251 0
-45 -4204 4249 0
-45 -4202 4247 0
-45 -4200 4245 0
-45 -4198 4243 0
-45 -4196 4241 0
-45 -4194 4239 0
-45 -4192 4237 0
-45 -4190 4235 0
-45 -4188 4233 0
-45 -4186 4231 0
-45 -4184 4229 0
-45 -4182 4227 0
-45 -4180 4225 0
-45 -4178 4223 0
-45 -4176 4221 0
-45 -4175 4219 0
-43 4249 0
-43 -4204 4247 0
-43 -4202 4245 0
-43 -4200 4243 0
-43 -4198 4241 0
-43 -4196 4239 0
-43 -4194 4237 0
-43 -4192 4235 0
-43 -4190 4233 0
-43 -4188 4231 0
-43 -4186 4229 0
-43 -4184 4227 0
-43 -4182 4225 0
-43 -4180 4223 0
-43 -4178 4221 0
-43 -4176 4219 0
-43 -4175 4217 0
-41 4247 0
-41 -4204 4245 0
-41 -4202 4243 0
-41 -4200 4241 0
-41 -4198 4239 0
-41 -4196 4237 0
-41 -4194 4235 0
-41 -4192 4233 0
-41 -4190 4231 0
-41 -4188 4229 0
-41 -4186 4227 0
-41 -4184 4225 0
-41 -4182 4223 0
-41 -4180 4221 0
-41 -4178 4219 0
-41 -4176 4217 0
-41 -4175 4215 0
-39 4245 0
-39 -4204 4243 0
-39 -4202 4241 0
-39 -4200 4239 0
-39 -4198 4237 0
-39 -4196 4235 0
-39 -4194 4233 0
-39 -4192 4231 0
-39 -4190 4229 0
-39 -4188 4227 0
-39 -4186 4225 0
-39 -4184 4223 0
-39 -4182 4221 0
-39 -4180 4219 0
-39 -4178 4217 0
-39 -4176 4215 0
-39 -4175 4213 0
-37 4243 0
-37 -4204 4241 0
-37 -4202 4239 0
-37 -4200 4237 0
-37 -4198 4235 0
-37 -4196 4233 0
-37 -4194 4231 0
-37 -4192 4229 0
-37 -4190 4227 0
-37 -4188 4225 0
-37 -4186 4223 0
-37 -4184 4221 0
-37 -4182 4219 0
-37 -4180 4217 0
-37 -4178 4215 0
-37 -4176 4213 0
-37 -4175 4211 0
-35 4241 0
-35 -4204 4239 0
-35 -4202 4237 0
-35 -4200 4235 0
-35 -4198 4233 0
-35 -4196 4231 0
-35 -4194 4229 0
-35 -4192 4227 0
-35 -4190 4225 0
-35 -4188 4223 0
-35 -4186 4221 0
-35 -4184 4219 0
-35 -4182 4217 0
-35 -4180 4215 0
-35 -4178 4213 0
-35 -4176 4211 0
-35 -4175 4209 0
-33 4239 0
-33 -4204 4237 0
-33 -4202 4235 0
-33 -4200 4233 0
-33 -4198 4231 0
-33 -4196 4229 0
-33 -4194 4227 0
-33 -4192 4225 0
-33 -4190 4223 0
-33 -4188 4221 0
-33 -4186 4219 0
-33 -4184 4217 0
-33 -4182 4215 0
-33 -4180 4213 0
-33 -4178 4211 0
-33 -4176 4209 0
-33 -4175 4207 0
-32 4237 0
-32 -4204 4235 0
-32 -4202 4233 0
-32 -4200 4231 0
-32 -4198 4229 0
-32 -4196 4227 0
-32 -4194 4225 0
-32 -4192 4223 0
-32 -4190 4221 0
-32 -4188 4219 0
-32 -4186 4217 0
-32 -4184 4215 0
-32 -4182 4213 0
-32 -4180 4211 0
-32 -4178 4209 0
-32 -4176 4207 0
-32 -4175 4206 0
c ((aux521 + aux523 - aux526)<=0)
4144 -4253 0
4145 -4254 0
4147 -4256 0
4149 -4258 0
4151 -4260 0
4153 -4262 0
4155 -4264 0
4157 -4266 0
4159 -4268 0
4161 -4270 0
4163 -4272 0
4165 -4274 0
4167 -4276 0
4169 -4278 0
4171 -4280 0
4173 -4282 0
4082 -4253 0
4082 4144 -4254 0
4082 4145 -4256 0
4082 4147 -4258 0
4082 4149 -4260 0
4082 4151 -4262 0
4082 4153 -4264 0
4082 4155 -4266 0
4082 4157 -4268 0
4082 4159 -4270 0
4082 4161 -4272 0
4082 4163 -4274 0
4082 4165 -4276 0
4082 4167 -4278 0
4082 4169 -4280 0
4082 4171 -4282 0
4082 4173 -4284 0
4083 -4254 0
4083 4144 -4256 0
4083 4145 -4258 0
4083 4147 -4260 0
4083 4149 -4262 0
4083 4151 -4264 0
4083 4153 -4266 0
4083 4155 -4268 0
4083 4157 -4270 0
4083 4159 -4272 0
4083 4161 -4274 0
4083 4163 -4276 0
4083 4165 -4278 0
4083 4167 -4280 0
4083 4169 -4282 0
4083 4171 -4284 0
4083 4173 -4286 0
4085 -4256 0
4085 4144 -4258 0
4085 4145 -4260 0
4085 4147 -4262 0
4085 4149 -4264 0
4085 4151 -4266 0
4085 4153 -4268 0
4085 4155 -4270 0
4085 4157 -4272 0
4085 4159 -4274 0
4085 4161 -4276 0
4085 4163 -4278 0
4085 4165 -4280 0
4085 4167 -4282 0
4085 4169 -4284 0
4085 4171 -4286 0
4085 4173 -4288 0
4087 -4258 0
4087 4144 -4260 0
4087 4145 -4262 0
4087 4147 -4264 0
4087 4149 -4266 0
4087 4151 -4268 0
4087 4153 -4270 0
4087 4155 -4272 0
4087 4157 -4274 0
4087 4159 -4276 0
4087 4161 -4278 0
4087 4163 -4280 0
4087 4165 -4282 0
4087 4167 -4284 0
4087 4169 -4286 0
4087 4171 -4288 0
4087 4173 -4290 0
4089 -4260 0
4089 4144 -4262 0
4089 4145 -4264 0
4089 4147 -4266 0
4089 4149 -4268 0
4089 4151 -4270 0
4089 4153 -4272 0
4089 4155 -4274 0
4089 4157 -4276 0
4089 4159 -4278 0
4089 4161 -4280 0
4089 4163 -4282 0
4089 4165 -4284 0
4089 4167 -4286 0
4089 4169 -4288 0
4089 4171 -4290 0
4089 4173 -4292 0
4091 -4262 0
4091 4144 -4264 0
4091 4145 -4266 0
4091 4147 -4268 0
4091 4149 -4270 0
4091 4151 -4272 0
4091 4153 -4274 0
4091 4155 -4276 0
4091 4157 -4278 0
4091 4159 -4280 0
4091 4161 -4282 0
4091 4163 -4284 0
4091 4165 -4286 0
4091 4167 -4288 0
4091 4169 -4290 0
4091 4171 -4292 0
4091 4173 -4294 0
4093 -4264 0
4093 4144 -4266 0
4093 4145 -4268 0
4093 4147 -4270 0
4093 4149 -4272 0
4093 4151 -4274 0
4093 4153 -4276 0
4093 4155 -4278 0
4093 4157 -4280 0
4093 4159 -4282 0
4093 4161 -4284 0
4093 4163 -4286 0
4093 4165 -4288 0
4093 4167 -4290 0
4093 4169 -4292 0
4093 4171 -4294 0
4093 4173 -4296 0
4095 -4266 0
4095 4144 -4268 0
4095 4145 -4270 0
4095 4147 -4272 0
4095 4149 -4274 0
4095 4151 -4276 0
4095 4153 -4278 0
4095 4155 -4280 0
4095 4157 -4282 0
4095 4159 -4284 0
4095 4161 -4286 0
4095 4163 -4288 0
4095 4165 -4290 0
4095 4167 -4292 0
4095 4169 -4294 0
4095 4171 -4296 0
4095 4173 -4298 0
4097 -4268 0
4097 4144 -4270 0
4097 4145 -4272 0
4097 4147 -4274 0
4097 4149 -4276 0
4097 4151 -4278 0
4097 4153 -4280 0
4097 4155 -4282 0
4097 4157 -4284 0
4097 4159 -4286 0
4097 4161 -4288 0
4097 4163 -4290 0
4097 4165 -4292 0
4097 4167 -4294 0
4097 4169 -4296 0
4097 4171 -4298 0
4097 4173 -4300 0
4099 -4270 0
4099 4144 -4272 0
4099 4145 -4274 0
4099 4147 -4276 0
4099 4149 -4278 0
4099 4151 -4280 0
4099 4153 -4282 0
4099 4155 -4284 0
4099 4157 -4286 0
4099 4159 -4288 0
4099 4161 -4290 0
4099 4163 -4292 0
4099 4165 -4294 0
4099 4167 -4296 0
4099 4169 -4298 0
4099 4171 -4300 0
4099 4173 -4302 0
4101 -4272 0
4101 4144 -4274 0
4101 4145 -4276 0
4101 4147 -4278 0
4101 4149 -4280 0
4101 4151 -4282 0
4101 4153 -4284 0
4101 4155 -4286 0
4101 4157 -4288 0
4101 4159 -4290 0
4101 4161 -4292 0
4101 4163 -4294 0
4101 4165 -4296 0
4101 4167 -4298 0
4101 4169 -4300 0
4101 4171 -4302 0
4101 4173 -4304 0
4103 -4274 0
4103 4144 -4276 0
4103 4145 -4278 0
4103 4147 -4280 0
4103 4149 -4282 0
4103 4151 -4284 0
4103 4153 -4286 0
4103 4155 -4288 0
4103 4157 -4290 0
4103 4159 -4292 0
4103 4161 -4294 0
4103 4163 -4296 0
4103 4165 -4298 0
4103 4167 -4300 0
4103 4169 -4302 0
4103 4171 -4304 0
4103 4173 -4306 0
4105 -4276 0
4105 4144 -4278 0
4105 4145 -4280 0
4105 4147 -4282 0
4105 4149 -4284 0
4105 4151 -4286 0
4105 4153 -4288 0
4105 4155 -4290 0
4105 4157 -4292 0
4105 4159 -4294 0
4105 4161 -4296 0
4105 4163 -4298 0
4105 4165 -4300 0
4105 4167 -4302 0
4105 4169 -4304 0
4105 4171 -4306 0
4105 4173 -4308 0
4107 -4278 0
4107 4144 -4280 0
4107 4145 -4282 0
4107 4147 -4284 0
4107 4149 -4286 0
4107 4151 -4288 0
4107 4153 -4290 0
4107 4155 -4292 0
4107 4157 -4294 0
4107 4159 -4296 0
4107 4161 -4298 0
4107 4163 -4300 0
4107 4165 -4302 0
4107 4167 -4304 0
4107 4169 -4306 0
4107 4171 -4308 0
4107 4173 -4310 0
4109 -4280 0
4109 4144 -4282 0
4109 4145 -4284 0
4109 4147 -4286 0
4109 4149 -4288 0
4109 4151 -4290 0
4109 4153 -4292 0
4109 4155 -4294 0
4109 4157 -4296 0
4109 4159 -4298 0
4109 4161 -4300 0
4109 4163 -4302 0
4109 4165 -4304 0
4109 4167 -4306 0
4109 4169 -4308 0
4109 4171 -4310 0
4109 4173 -4312 0
4111 -4282 0
4111 4144 -4284 0
4111 4145 -4286 0
4111 4147 -4288 0
4111 4149 -4290 0
4111 4151 -4292 0
4111 4153 -4294 0
4111 4155 -4296 0
4111 4157 -4298 0
4111 4159 -4300 0
4111 4161 -4302 0
4111 4163 -4304 0
4111 4165 -4306 0
4111 4167 -4308 0
4111 4169 -4310 0
4111 4171 -4312 0
4111 4173 -4314 0
c (0<=(aux521 + aux523 - aux526))
-4173 4314 0
-4171 4312 0
-4169 4310 0
-4167 4308 0
-4165 4306 0
-4163 4304 0
-4161 4302 0
-4159 4300 0
-4157 4298 0
-4155 4296 0
-4153 4294 0
-4151 4292 0
-4149 4290 0
-4147 4288 0
-4145 4286 0
-4144 4284 0
-4111 4314 0
-4111 -4173 4312 0
-4111 -4171 4310 0
-4111 -4169 4308 0
-4111 -4167 4306 0
-4111 -4165 4304 0
-4111 -4163 4302 0
-4111 -4161 4300 0
-4111 -4159 4298 0
-4111 -4157 4296 0
-4111 -4155 4294 0
-4111 -4153 4292 0
-4111 -4151 4290 0
-4111 -4149 4288 0
-4111 -4147 4286 0
-4111 -4145 4284 0
-4111 -4144 4282 0
-4109 4312 0
-4109 -4173 4310 0
-4109 -4171 4308 0
-4109 -4169 4306 0
-4109 -4167 4304 0
-4109 -4165 4302 0
-4109 -4163 4300 0
-4109 -4161 4298 0
-4109 -4159 4296 0
-4109 -4157 4294 0
-4109 -4155 4292 0
-4109 -4153 4290 0
-4109 -4151 4288 0
-4109 -4149 4286 0
-4109 -4147 4284 0
-4109 -4145 4282 0
-4109 -4144 4280 0
-4107 4310 0
-4107 -4173 4308 0
-4107 -4171 4306 0
-4107 -4169 4304 0
-4107 -4167 4302 0
-4107 -4165 4300 0
-4107 -4163 4298 0
-4107 -4161 4296 0
-4107 -4159 4294 0
-4107 -4157 4292 0
-4107 -4155 4290 0
-4107 -4153 4288 0
-4107 -4151 4286 0
-4107 -4149 4284 0
-4107 -4147 4282 0
-4107 -4145 4280 0
-4107 -4144 4278 0
-4105 4308 0
-4105 -4173 4306 0
-4105 -4171 4304 0
-4105 -4169 4302 0
-4105 -4167 4300 0
-4105 -4165 4298 0
-4105 -4163 4296 0
-4105 -4161 4294 0
-4105 -4159 4292 0
-4105 -4157 4290 0
-4105 -4155 4288 0
-4105 -4153 4286 0
-4105 -4151 4284 0
-4105 -4149 4282 0
-4105 -4147 4280 0
-4105 -4145 4278 0
-4105 -4144 4276 0
-4103 4306 0
-4103 -4173 4304 0
-4103 -4171 4302 0
-4103 -4169 4300 0
-4103 -4167 4298 0
-4103 -4165 4296 0
-4103 -4163 4294 0
-4103 -4161 4292 0
-4103 -4159 4290 0
-4103 -4157 4288 0
-4103 -4155 4286 0
-4103 -4153 4284 0
-4103 -4151 4282 0
-4103 -4149 4280 0
-4103 -4147 4278 0
-4103 -4145 4276 0
-4103 -4144 4274 0
-4101 4304 0
-4101 -4173 4302 0
-4101 -4171 4300 0
-4101 -4169 4298 0
-4101 -4167 4296 0
-4101 -4165 4294 0
-4101 -4163 4292 0
-4101 -4161 4290 0
-4101 -4159 4288 0
-4101 -4157 4286 0
-4101 -4155 4284 0
-4101 -4153 4282 0
-4101 -4151 4280 0
-4101 -4149 4278 0
-4101 -4147 4276 0
-4101 -4145 4274 0
-4101 -4144 4272 0
-4099 4302 0
-4099 -4173 4300 0
-4099 -4171 4298 0
-4099 -4169 4296 0
-4099 -4167 4294 0
-4099 -4165 4292 0
-4099 -4163 4290 0
-4099 -4161 4288 0
-4099 -4159 4286 0
-4099 -4157 4284 0
-4099 -4155 4282 0
-4099 -4153 4280 0
-4099 -4151 4278 0
-4099 -4149 4276 0
-4099 -4147 4274 0
-4099 -4145 4272 0
-4099 -4144 4270 0
-4097 4300 0
-4097 -4173 4298 0
-4097 -4171 4296 0
-4097 -4169 4294 0
-4097 -4167 4292 0
-4097 -4165 4290 0
-4097 -4163 4288 0
-4097 -4161 4286 0
-4097 -4159 4284 0
-4097 -4157 4282 0
-4097 -4155 4280 0
-4097 -4153 4278 0
-4097 -4151 4276 0
-4097 -4149 4274 0
-4097 -4147 4272 0
-4097 -4145 4270 0
-4097 -4144 4268 0
-4095 4298 0
-4095 -4173 4296 0
-4095 -4171 4294 0
-4095 -4169 4292 0
-4095 -4167 4290 0
-4095 -4165 4288 0
-4095 -4163 4286 0
-4095 -4161 4284 0
-4095 -4159 4282 0
-4095 -4157 4280 0
-4095 -4155 4278 0
-4095 -4153 4276 0
-4095 -4151 4274 0
-4095 -4149 4272 0
-4095 -4147 4270 0
-4095 -4145 4268 0
-4095 -4144 4266 0
-4093 4296 0
-4093 -4173 4294 0
-4093 -4171 4292 0
-4093 -4169 4290 0
-4093 -4167 4288 0
-4093 -4165 4286 0
-4093 -4163 4284 0
-4093 -4161 4282 0
-4093 -4159 4280 0
-4093 -4157 4278 0
-4093 -4155 4276 0
-4093 -4153 4274 0
-4093 -4151 4272 0
-4093 -4149 4270 0
-4093 -4147 4268 0
-4093 -4145 4266 0
-4093 -4144 4264 0
-4091 4294 0
-4091 -4173 4292 0
-4091 -4171 4290 0
-4091 -4169 4288 0
-4091 -4167 4286 0
-4091 -4165 4284 0
-4091 -4163 4282 0
-4091 -4161 4280 0
-4091 -4159 4278 0
-4091 -4157 4276 0
-4091 -4155 4274 0
-4091 -4153 4272 0
-4091 -4151 4270 0
-4091 -4149 4268 0
-4091 -4147 4266 0
-4091 -4145 4264 0
-4091 -4144 4262 0
-4089 4292 0
-4089 -4173 4290 0
-4089 -4171 4288 0
-4089 -4169 4286 0
-4089 -4167 4284 0
-4089 -4165 4282 0
-4089 -4163 4280 0
-4089 -4161 4278 0
-4089 -4159 4276 0
-4089 -4157 4274 0
-4089 -4155 4272 0
-4089 -4153 4270 0
-4089 -4151 4268 0
-4089 -4149 4266 0
-4089 -4147 4264 0
-4089 -4145 4262 0
-4089 -4144 4260 0
-4087 4290 0
-4087 -4173 4288 0
-4087 -4171 4286 0
-4087 -4169 4284 0
-4087 -4167 4282 0
-4087 -4165 4280 0
-4087 -4163 4278 0
-4087 -4161 4276 0
-4087 -4159 4274 0
-4087 -4157 4272 0
-4087 -4155 4270 0
-4087 -4153 4268 0
-4087 -4151 4266 0
-4087 -4149 4264 0
-4087 -4147 4262 0
-4087 -4145 4260 0
-4087 -4144 4258 0
-4085 4288 0
-4085 -4173 4286 0
-4085 -4171 4284 0
-4085 -4169 4282 0
-4085 -4167 4280 0
-4085 -4165 4278 0
-4085 -4163 4276 0
-4085 -4161 4274 0
-4085 -4159 4272 0
-4085 -4157 4270 0
-4085 -4155 4268 0
-4085 -4153 4266 0
-4085 -4151 4264 0
-4085 -4149 4262 0
-4085 -4147 4260 0
-4085 -4145 4258 0
-4085 -4144 4256 0
-4083 4286 0
-4083 -4173 4284 0
-4083 -4171 4282 0
-4083 -4169 4280 0
-4083 -4167 4278 0
-4083 -4165 4276 0
-4083 -4163 4274 0
-4083 -4161 4272 0
-4083 -4159 4270 0
-4083 -4157 4268 0
-4083 -4155 4266 0
-4083 -4153 4264 0
-4083 -4151 4262 0
-4083 -4149 4260 0
-4083 -4147 4258 0
-4083 -4145 4256 0
-4083 -4144 4254 0
-4082 4284 0
-4082 -4173 4282 0
-4082 -4171 4280 0
-4082 -4169 4278 0
-4082 -4167 4276 0
-4082 -4165 4274 0
-4082 -4163 4272 0
-4082 -4161 4270 0
-4082 -4159 4268 0
-4082 -4157 4266 0
-4082 -4155 4264 0
-4082 -4153 4262 0
-4082 -4151 4260 0
-4082 -4149 4258 0
-4082 -4147 4256 0
-4082 -4145 4254 0
-4082 -4144 4253 0
c (( - aux527 + shift(x_00002_00001, -1) + shift(x_00002_00009, -1))<=0)
257 -4316 0
258 -4317 0
260 -4319 0
262 -4321 0
264 -4323 0
266 -4325 0
268 -4327 0
270 -4329 0
137 -4316 0
137 257 -4317 0
137 258 -4319 0
137 260 -4321 0
137 262 -4323 0
137 264 -4325 0
137 266 -4327 0
137 268 -4329 0
137 270 -4331 0
138 -4317 0
138 257 -4319 0
138 258 -4321 0
138 260 -4323 0
138 262 -4325 0
138 264 -4327 0
138 266 -4329 0
138 268 -4331 0
138 270 -4333 0
140 -4319 0
140 257 -4321 0
140 258 -4323 0
140 260 -4325 0
140 262 -4327 0
140 264 -4329 0
140 266 -4331 0
140 268 -4333 0
140 270 -4335 0
142 -4321 0
142 257 -4323 0
142 258 -4325 0
142 260 -4327 0
142 262 -4329 0
142 264 -4331 0
142 266 -4333 0
142 268 -4335 0
142 270 -4337 0
144 -4323 0
144 257 -4325 0
144 258 -4327 0
144 260 -4329 0
144 262 -4331 0
144 264 -4333 0
144 266 -4335 0
144 268 -4337 0
144 270 -4339 0
146 -4325 0
146 257 -4327 0
146 258 -4329 0
146 260 -4331 0
146 262 -4333 0
146 264 -4335 0
146 266 -4337 0
146 268 -4339 0
146 270 -4341 0
148 -4327 0
148 257 -4329 0
148 258 -4331 0
148 260 -4333 0
148 262 -4335 0
148 264 -4337 0
148 266 -4339 0
148 268 -4341 0
148 270 -4343 0
150 -4329 0
150 257 -4331 0
150 258 -4333 0
150 260 -4335 0
150 262 -4337 0
150 264 -4339 0
150 266 -4341 0
150 268 -4343 0
150 270 -4345 0
c (0<=( - aux527 + shift(x_00002_00001, -1) + shift(x_00002_00009, -1)))
-270 4345 0
-268 4343 0
-266 4341 0
-264 4339 0
-262 4337 0
-260 4335 0
-258 4333 0
-257 4331 0
-150 4345 0
-150 -270 4343 0
-150 -268 4341 0
-150 -266 4339 0
-150 -264 4337 0
-150 -262 4335 0
-150 -260 4333 0
-150 -258 4331 0
-150 -257 4329 0
-148 4343 0
-148 -270 4341 0
-148 -268 4339 0
-148 -266 4337 0
-148 -264 4335 0
-148 -262 4333 0
-148 -260 4331 0
-148 -258 4329 0
-148 -257 4327 0
-146 4341 0
-146 -270 4339 0
-146 -268 4337 0
-146 -266 4335 0
-146 -264 4333 0
-146 -262 4331 0
-146 -260 4329 0
-146 -258 4327 0
-146 -257 4325 0
-144 4339 0
-144 -270 4337 0
-144 -268 4335 0
-144 -266 4333 0
-144 -264 4331 0
-144 -262 4329 0
-144 -260 4327 0
-144 -258 4325 0
-144 -257 4323 0
-142 4337 0
-142 -270 4335 0
-142 -268 4333 0
-142 -266 4331 0
-142 -264 4329 0
-142 -262 4327 0
-142 -260 4325 0
-142 -258 4323 0
-142 -257 4321 0
-140 4335 0
-140 -270 4333 0
-140 -268 4331 0
-140 -266 4329 0
-140 -264 4327 0
-140 -262 4325 0
-140 -260 4323 0
-140 -258 4321 0
-140 -257 4319 0
-138 4333 0
-138 -270 4331 0
-138 -268 4329 0
-138 -266 4327 0
-138 -264 4325 0
-138 -262 4323 0
-138 -260 4321 0
-138 -258 4319 0
-138 -257 4317 0
-137 4331 0
-137 -270 4329 0
-137 -268 4327 0
-137 -266 4325 0
-137 -264 4323 0
-137 -262 4321 0
-137 -260 4319 0
-137 -258 4317 0
-137 -257 4316 0
c (( - aux528 + shift(x_00002_00002, -1) + shift(x_00002_00008, -1))<=0)
242 -4347 0
243 -4348 0
245 -4350 0
247 -4352 0
249 -4354 0
251 -4356 0
253 -4358 0
255 -4360 0
152 -4347 0
152 242 -4348 0
152 243 -4350 0
152 245 -4352 0
152 247 -4354 0
152 249 -4356 0
152 251 -4358 0
152 253 -4360 0
152 255 -4362 0
153 -4348 0
153 242 -4350 0
153 243 -4352 0
153 245 -4354 0
153 247 -4356 0
153 249 -4358 0
153 251 -4360 0
153 253 -4362 0
153 255 -4364 0
155 -4350 0
155 242 -4352 0
155 243 -4354 0
155 245 -4356 0
155 247 -4358 0
155 249 -4360 0
155 251 -4362 0
155 253 -4364 0
155 255 -4366 0
157 -4352 0
157 242 -4354 0
157 243 -4356 0
157 245 -4358 0
157 247 -4360 0
157 249 -4362 0
157 251 -4364 0
157 253 -4366 0
157 255 -4368 0
159 -4354 0
159 242 -4356 0
159 243 -4358 0
159 245 -4360 0
159 247 -4362 0
159 249 -4364 0
159 251 -4366 0
159 253 -4368 0
159 255 -4370 0
161 -4356 0
161 242 -4358 0
161 243 -4360 0
161 245 -4362 0
161 247 -4364 0
161 249 -4366 0
161 251 -4368 0
161 253 -4370 0
161 255 -4372 0
163 -4358 0
163 242 -4360 0
163 243 -4362 0
163 245 -4364 0
163 247 -4366 0
163 249 -4368 0
163 251 -4370 0
163 253 -4372 0
163 255 -4374 0
165 -4360 0
165 242 -4362 0
165 243 -4364 0
165 245 -4366 0
165 247 -4368 0
165 249 -4370 0
165 251 -4372 0
165 253 -4374 0
165 255 -4376 0
c (0<=( - aux528 + shift(x_00002_00002, -1) + shift(x_00002_00008, -1)))
-255 4376 0
-253 4374 0
-251 4372 0
-249 4370 0
-247 4368 0
-245 4366 0
-243 4364 0
-242 4362 0
-165 4376 0
-165 -255 4374 0
-165 -253 4372 0
-165 -251 4370 0
-165 -249 4368 0
-165 -247 4366 0
-165 -245 4364 0
-165 -243 4362 0
-165 -242 4360 0
-163 4374 0
-163 -255 4372 0
-163 -253 4370 0
-163 -251 4368 0
-163 -249 4366 0
-163 -247 4364 0
-163 -245 4362 0
-163 -243 4360 0
-163 -242 4358 0
-161 4372 0
-161 -255 4370 0
-161 -253 4368 0
-161 -251 4366 0
-161 -249 4364 0
-161 -247 4362 0
-161 -245 4360 0
-161 -243 4358 0
-161 -242 4356 0
-159 4370 0
-159 -255 4368 0
-159 -253 4366 0
-159 -251 4364 0
-159 -249 4362 0
-159 -247 4360 0
-159 -245 4358 0
-159 -243 4356 0
-159 -242 4354 0
-157 4368 0
-157 -255 4366 0
-157 -253 4364 0
-157 -251 4362 0
-157 -249 4360 0
-157 -247 4358 0
-157 -245 4356 0
-157 -243 4354 0
-157 -242 4352 0
-155 4366 0
-155 -255 4364 0
-155 -253 4362 0
-155 -251 4360 0
-155 -249 4358 0
-155 -247 4356 0
-155 -245 4354 0
-155 -243 4352 0
-155 -242 4350 0
-153 4364 0
-153 -255 4362 0
-153 -253 4360 0
-153 -251 4358 0
-153 -249 4356 0
-153 -247 4354 0
-153 -245 4352 0
-153 -243 4350 0
-153 -242 4348 0
-152 4362 0
-152 -255 4360 0
-152 -253 4358 0
-152 -251 4356 0
-152 -249 4354 0
-152 -247 4352 0
-152 -245 4350 0
-152 -243 4348 0
-152 -242 4347 0
c (( - aux529 + shift(x_00002_00004, -1) + shift(x_00002_00007, -1))<=0)
227 -4378 0
228 -4379 0
230 -4381 0
232 -4383 0
234 -4385 0
236 -4387 0
238 -4389 0
240 -4391 0
182 -4378 0
182 227 -4379 0
182 228 -4381 0
182 230 -4383 0
182 232 -4385 0
182 234 -4387 0
182 236 -4389 0
182 238 -4391 0
182 240 -4393 0
183 -4379 0
183 227 -4381 0
183 228 -4383 0
183 230 -4385 0
183 232 -4387 0
183 234 -4389 0
183 236 -4391 0
183 238 -4393 0
183 240 -4395 0
185 -4381 0
185 227 -4383 0
185 228 -4385 0
185 230 -4387 0
185 232 -4389 0
185 234 -4391 0
185 236 -4393 0
185 238 -4395 0
185 240 -4397 0
187 -4383 0
187 227 -4385 0
187 228 -4387 0
187 230 -4389 0
187 232 -4391 0
187 234 -4393 0
187 236 -4395 0
187 238 -4397 0
187 240 -4399 0
189 -4385 0
189 227 -4387 0
189 228 -4389 0
189 230 -4391 0
189 232 -4393 0
189 234 -4395 0
189 236 -4397 0
189 238 -4399 0
189 240 -4401 0
191 -4387 0
191 227 -4389 0
191 228 -4391 0
191 230 -4393 0
191 232 -4395 0
191 234 -4397 0
191 236 -4399 0
191 238 -4401 0
191 240 -4403 0
193 -4389 0
193 227 -4391 0
193 228 -4393 0
193 230 -4395 0
193 232 -4397 0
193 234 -4399 0
193 236 -4401 0
193 238 -4403 0
193 240 -4405 0
195 -4391 0
195 227 -4393 0
195 228 -4395 0
195 230 -4397 0
195 232 -4399 0
195 234 -4401 0
195 236 -4403 0
195 238 -4405 0
195 240 -4407 0
c (0<=( - aux529 + shift(x_00002_00004, -1) + shift(x_00002_00007, -1)))
-240 4407 0
-238 4405 0
-236 4403 0
-234 4401 0
-232 4399 0
-230 4397 0
-228 4395 0
-227 4393 0
-195 4407 0
-195 -240 4405 0
-195 -238 4403 0
-195 -236 4401 0
-195 -234 4399 0
-195 -232 4397 0
-195 -230 4395 0
-195 -228 4393 0
-195 -227 4391 0
-193 4405 0
-193 -240 4403 0
-193 -238 4401 0
-193 -236 4399 0
-193 -234 4397 0
-193 -232 4395 0
-193 -230 4393 0
-193 -228 4391 0
-193 -227 4389 0
-191 4403 0
-191 -240 4401 0
-191 -238 4399 0
-191 -236 4397 0
-191 -234 4395 0
-191 -232 4393 0
-191 -230 4391 0
-191 -228 4389 0
-191 -227 4387 0
-189 4401 0
-189 -240 4399 0
-189 -238 4397 0
-189 -236 4395 0
-189 -234 4393 0
-189 -232 4391 0
-189 -230 4389 0
-189 -228 4387 0
-189 -227 4385 0
-187 4399 0
-187 -240 4397 0
-187 -238 4395 0
-187 -236 4393 0
-187 -234 4391 0
-187 -232 4389 0
-187 -230 4387 0
-187 -228 4385 0
-187 -227 4383 0
-185 4397 0
-185 -240 4395 0
-185 -238 4393 0
-185 -236 4391 0
-185 -234 4389 0
-185 -232 4387 0
-185 -230 4385 0
-185 -228 4383 0
-185 -227 4381 0
-183 4395 0
-183 -240 4393 0
-183 -238 4391 0
-183 -236 4389 0
-183 -234 4387 0
-183 -232 4385 0
-183 -230 4383 0
-183 -228 4381 0
-183 -227 4379 0
-182 4393 0
-182 -240 4391 0
-182 -238 4389 0
-182 -236 4387 0
-182 -234 4385 0
-182 -232 4383 0
-182 -230 4381 0
-182 -228 4379 0
-182 -227 4378 0
c (( - aux530 + shift(x_00002_00005, -1) + shift(x_00002_00006, -1))<=0)
212 -4409 0
213 -4410 0
215 -4412 0
217 -4414 0
219 -4416 0
221 -4418 0
223 -4420 0
225 -4422 0
197 -4409 0
197 212 -4410 0
197 213 -4412 0
197 215 -4414 0
197 217 -4416 0
197 219 -4418 0
197 221 -4420 0
197 223 -4422 0
197 225 -4424 0
198 -4410 0
198 212 -4412 0
198 213 -4414 0
198 215 -4416 0
198 217 -4418 0
198 219 -4420 0
198 221 -4422 0
198 223 -4424 0
198 225 -4426 0
200 -4412 0
200 212 -4414 0
200 213 -4416 0
200 215 -4418 0
200 217 -4420 0
200 219 -4422 0
200 221 -4424 0
200 223 -4426 0
200 225 -4428 0
202 -4414 0
202 212 -4416 0
202 213 -4418 0
202 215 -4420 0
202 217 -4422 0
202 219 -4424 0
202 221 -4426 0
202 223 -4428 0
202 225 -4430 0
204 -4416 0
204 212 -4418 0
204 213 -4420 0
204 215 -4422 0
204 217 -4424 0
204 219 -4426 0
204 221 -4428 0
204 223 -4430 0
204 225 -4432 0
206 -4418 0
206 212 -4420 0
206 213 -4422 0
206 215 -4424 0
206 217 -4426 0
206 219 -4428 0
206 221 -4430 0
206 223 -4432 0
206 225 -4434 0
208 -4420 0
208 212 -4422 0
208 213 -4424 0
208 215 -4426 0
208 217 -4428 0
208 219 -4430 0
208 221 -4432 0
208 223 -4434 0
208 225 -4436 0
210 -4422 0
210 212 -4424 0
210 213 -4426 0
210 215 -4428 0
210 217 -4430 0
210 219 -4432 0
210 221 -4434 0
210 223 -4436 0
210 225 -4438 0
c (0<=( - aux530 + shift(x_00002_00005, -1) + shift(x_00002_00006, -1)))
-225 4438 0
-223 4436 0
-221 4434 0
-219 4432 0
-217 4430 0
-215 4428 0
-213 4426 0
-212 4424 0
-210 4438 0
-210 -225 4436 0
-210 -223 4434 0
-210 -221 4432 0
-210 -219 4430 0
-210 -217 4428 0
-210 -215 4426 0
-210 -213 4424 0
-210 -212 4422 0
-208 4436 0
-208 -225 4434 0
-208 -223 4432 0
-208 -221 4430 0
-208 -219 4428 0
-208 -217 4426 0
-208 -215 4424 0
-208 -213 4422 0
-208 -212 4420 0
-206 4434 0
-206 -225 4432 0
-206 -223 4430 0
-206 -221 4428 0
-206 -219 4426 0
-206 -217 4424 0
-206 -215 4422 0
-206 -213 4420 0
-206 -212 4418 0
-204 4432 0
-204 -225 4430 0
-204 -223 4428 0
-204 -221 4426 0
-204 -219 4424 0
-204 -217 4422 0
-204 -215 4420 0
-204 -213 4418 0
-204 -212 4416 0
-202 4430 0
-202 -225 4428 0
-202 -223 4426 0
-202 -221 4424 0
-202 -219 4422 0
-202 -217 4420 0
-202 -215 4418 0
-202 -213 4416 0
-202 -212 4414 0
-200 4428 0
-200 -225 4426 0
-200 -223 4424 0
-200 -221 4422 0
-200 -219 4420 0
-200 -217 4418 0
-200 -215 4416 0
-200 -213 4414 0
-200 -212 4412 0
-198 4426 0
-198 -225 4424 0
-198 -223 4422 0
-198 -221 4420 0
-198 -219 4418 0
-198 -217 4416 0
-198 -215 4414 0
-198 -213 4412 0
-198 -212 4410 0
-197 4424 0
-197 -225 4422 0
-197 -223 4420 0
-197 -221 4418 0
-197 -219 4416 0
-197 -217 4414 0
-197 -215 4412 0
-197 -213 4410 0
-197 -212 4409 0
c ((aux530 - aux531 + shift(x_00002_00003, -1))<=0)
4409 -4440 0
4410 -4441 0
4412 -4443 0
4414 -4445 0
4416 -4447 0
4418 -4449 0
4420 -4451 0
4422 -4453 0
4424 -4455 0
4426 -4457 0
4428 -4459 0
4430 -4461 0
4432 -4463 0
4434 -4465 0
4436 -4467 0
4438 -4469 0
167 -4440 0
167 4409 -4441 0
167 4410 -4443 0
167 4412 -4445 0
167 4414 -4447 0
167 4416 -4449 0
167 4418 -4451 0
167 4420 -4453 0
167 4422 -4455 0
167 4424 -4457 0
167 4426 -4459 0
167 4428 -4461 0
167 4430 -4463 0
167 4432 -4465 0
167 4434 -4467 0
167 4436 -4469 0
167 4438 -4471 0
168 -4441 0
168 4409 -4443 0
168 4410 -4445 0
168 4412 -4447 0
168 4414 -4449 0
168 4416 -4451 0
168 4418 -4453 0
168 4420 -4455 0
168 4422 -4457 0
168 4424 -4459 0
168 4426 -4461 0
168 4428 -4463 0
168 4430 -4465 0
168 4432 -4467 0
168 4434 -4469 0
168 4436 -4471 0
168 4438 -4473 0
170 -4443 0
170 4409 -4445 0
170 4410 -4447 0
170 4412 -4449 0
170 4414 -4451 0
170 4416 -4453 0
170 4418 -4455 0
170 4420 -4457 0
170 4422 -4459 0
170 4424 -4461 0
170 4426 -4463 0
170 4428 -4465 0
170 4430 -4467 0
170 4432 -4469 0
170 4434 -4471 0
170 4436 -4473 0
170 4438 -4475 0
172 -4445 0
172 4409 -4447 0
172 4410 -4449 0
172 4412 -4451 0
172 4414 -4453 0
172 4416 -4455 0
172 4418 -4457 0
172 4420 -4459 0
172 4422 -4461 0
172 4424 -4463 0
172 4426 -4465 0
172 4428 -4467 0
172 4430 -4469 0
172 4432 -4471 0
172 4434 -4473 0
172 4436 -4475 0
172 4438 -4477 0
174 -4447 0
174 4409 -4449 0
174 4410 -4451 0
174 4412 -4453 0
174 4414 -4455 0
174 4416 -4457 0
174 4418 -4459 0
174 4420 -4461 0
174 4422 -4463 0
174 4424 -4465 0
174 4426 -4467 0
174 4428 -4469 0
174 4430 -4471 0
174 4432 -4473 0
174 4434 -4475 0
174 4436 -4477 0
174 4438 -4479 0
176 -4449 0
176 4409 -4451 0
176 4410 -4453 0
176 4412 -4455 0
176 4414 -4457 0
176 4416 -4459 0
176 4418 -4461 0
176 4420 -4463 0
176 4422 -4465 0
176 4424 -4467 0
176 4426 -4469 0
176 4428 -4471 0
176 4430 -4473 0
176 4432 -4475 0
176 4434 -4477 0
176 4436 -4479 0
176 4438 -4481 0
178 -4451 0
178 4409 -4453 0
178 4410 -4455 0
178 4412 -4457 0
178 4414 -4459 0
178 4416 -4461 0
178 4418 -4463 0
178 4420 -4465 0
178 4422 -4467 0
178 4424 -4469 0
178 4426 -4471 0
178 4428 -4473 0
178 4430 -4475 0
178 4432 -4477 0
178 4434 -4479 0
178 4436 -4481 0
178 4438 -4483 0
180 -4453 0
180 4409 -4455 0
180 4410 -4457 0
180 4412 -4459 0
180 4414 -4461 0
180 4416 -4463 0
180 4418 -4465 0
180 4420 -4467 0
180 4422 -4469 0
180 4424 -4471 0
180 4426 -4473 0
180 4428 -4475 0
180 4430 -4477 0
180 4432 -4479 0
180 4434 -4481 0
180 4436 -4483 0
180 4438 -4485 0
c (0<=(aux530 - aux531 + shift(x_00002_00003, -1)))
-4438 4485 0
-4436 4483 0
-4434 4481 0
-4432 4479 0
-4430 4477 0
-4428 4475 0
-4426 4473 0
-4424 4471 0
-4422 4469 0
-4420 4467 0
-4418 4465 0
-4416 4463 0
-4414 4461 0
-4412 4459 0
-4410 4457 0
-4409 4455 0
-180 4485 0
-180 -4438 4483 0
-180 -4436 4481 0
-180 -4434 4479 0
-180 -4432 4477 0
-180 -4430 4475 0
-180 -4428 4473 0
-180 -4426 4471 0
-180 -4424 4469 0
-180 -4422 4467 0
-180 -4420 4465 0
-180 -4418 4463 0
-180 -4416 4461 0
-180 -4414 4459 0
-180 -4412 4457 0
-180 -4410 4455 0
-180 -4409 4453 0
-178 4483 0
-178 -4438 4481 0
-178 -4436 4479 0
-178 -4434 4477 0
-178 -4432 4475 0
-178 -4430 4473 0
-178 -4428 4471 0
-178 -4426 4469 0
-178 -4424 4467 0
-178 -4422 4465 0
-178 -4420 4463 0
-178 -4418 4461 0
-178 -4416 4459 0
-178 -4414 4457 0
-178 -4412 4455 0
-178 -4410 4453 0
-178 -4409 4451 0
-176 4481 0
-176 -4438 4479 0
-176 -4436 4477 0
-176 -4434 4475 0
-176 -4432 4473 0
-176 -4430 4471 0
-176 -4428 4469 0
-176 -4426 4467 0
-176 -4424 4465 0
-176 -4422 4463 0
-176 -4420 4461 0
-176 -4418 4459 0
-176 -4416 4457 0
-176 -4414 4455 0
-176 -4412 4453 0
-176 -4410 4451 0
-176 -4409 4449 0
-174 4479 0
-174 -4438 4477 0
-174 -4436 4475 0
-174 -4434 4473 0
-174 -4432 4471 0
-174 -4430 4469 0
-174 -4428 4467 0
-174 -4426 4465 0
-174 -4424 4463 0
-174 -4422 4461 0
-174 -4420 4459 0
-174 -4418 4457 0
-174 -4416 4455 0
-174 -4414 4453 0
-174 -4412 4451 0
-174 -4410 4449 0
-174 -4409 4447 0
-172 4477 0
-172 -4438 4475 0
-172 -4436 4473 0
-172 -4434 4471 0
-172 -4432 4469 0
-172 -4430 4467 0
-172 -4428 4465 0
-172 -4426 4463 0
-172 -4424 4461 0
-172 -4422 4459 0
-172 -4420 4457 0
-172 -4418 4455 0
-172 -4416 4453 0
-172 -4414 4451 0
-172 -4412 4449 0
-172 -4410 4447 0
-172 -4409 4445 0
-170 4475 0
-170 -4438 4473 0
-170 -4436 4471 0
-170 -4434 4469 0
-170 -4432 4467 0
-170 -4430 4465 0
-170 -4428 4463 0
-170 -4426 4461 0
-170 -4424 4459 0
-170 -4422 4457 0
-170 -4420 4455 0
-170 -4418 4453 0
-170 -4416 4451 0
-170 -4414 4449 0
-170 -4412 4447 0
-170 -4410 4445 0
-170 -4409 4443 0
-168 4473 0
-168 -4438 4471 0
-168 -4436 4469 0
-168 -4434 4467 0
-168 -4432 4465 0
-168 -4430 4463 0
-168 -4428 4461 0
-168 -4426 4459 0
-168 -4424 4457 0
-168 -4422 4455 0
-168 -4420 4453 0
-168 -4418 4451 0
-168 -4416 4449 0
-168 -4414 4447 0
-168 -4412 4445 0
-168 -4410 4443 0
-168 -4409 4441 0
-167 4471 0
-167 -4438 4469 0
-167 -4436 4467 0
-167 -4434 4465 0
-167 -4432 4463 0
-167 -4430 4461 0
-167 -4428 4459 0
-167 -4426 4457 0
-167 -4424 4455 0
-167 -4422 4453 0
-167 -4420 4451 0
-167 -4418 4449 0
-167 -4416 4447 0
-167 -4414 4445 0
-167 -4412 4443 0
-167 -4410 4441 0
-167 -4409 4440 0
c ((aux527 + aux529 - aux532)<=0)
4378 -4487 0
4379 -4488 0
4381 -4490 0
4383 -4492 0
4385 -4494 0
4387 -4496 0
4389 -4498 0
4391 -4500 0
4393 -4502 0
4395 -4504 0
4397 -4506 0
4399 -4508 0
4401 -4510 0
4403 -4512 0
4405 -4514 0
4407 -4516 0
4316 -4487 0
4316 4378 -4488 0
4316 4379 -4490 0
4316 4381 -4492 0
4316 4383 -4494 0
4316 4385 -4496 0
4316 4387 -4498 0
4316 4389 -4500 0
4316 4391 -4502 0
4316 4393 -4504 0
4316 4395 -4506 0
4316 4397 -4508 0
4316 4399 -4510 0
4316 4401 -4512 0
4316 4403 -4514 0
4316 4405 -4516 0
4316 4407 -4518 0
4317 -4488 0
4317 4378 -4490 0
4317 4379 -4492 0
4317 4381 -4494 0
4317 4383 -4496 0
4317 4385 -4498 0
4317 4387 -4500 0
4317 4389 -4502 0
4317 4391 -4504 0
4317 4393 -4506 0
4317 4395 -4508 0
4317 4397 -4510 0
4317 4399 -4512 0
4317 4401 -4514 0
4317 4403 -4516 0
4317 4405 -4518 0
4317 4407 -4520 0
4319 -4490 0
4319 4378 -4492 0
4319 4379 -4494 0
4319 4381 -4496 0
4319 4383 -4498 0
4319 4385 -4500 0
4319 4387 -4502 0
4319 4389 -4504 0
4319 4391 -4506 0
4319 4393 -4508 0
4319 4395 -4510 0
4319 4397 -4512 0
4319 4399 -4514 0
4319 4401 -4516 0
4319 4403 -4518 0
4319 4405 -4520 0
4319 4407 -4522 0
4321 -4492 0
4321 4378 -4494 0
4321 4379 -4496 0
4321 4381 -4498 0
4321 4383 -4500 0
4321 4385 -4502 0
4321 4387 -4504 0
4321 4389 -4506 0
4321 4391 -4508 0
4321 4393 -4510 0
4321 4395 -4512 0
4321 4397 -4514 0
4321 4399 -4516 0
4321 4401 -4518 0
4321 4403 -4520 0
4321 4405 -4522 0
4321 4407 -4524 0
4323 -4494 0
4323 4378 -4496 0
4323 4379 -4498 0
4323 4381 -4500 0
4323 4383 -4502 0
4323 4385 -4504 0
4323 4387 -4506 0
4323 4389 -4508 0
4323 4391 -4510 0
4323 4393 -4512 0
4323 4395 -4514 0
4323 4397 -4516 0
4323 4399 -4518 0
4323 4401 -4520 0
4323 4403 -4522 0
4323 4405 -4524 0
4323 4407 -4526 0
4325 -4496 0
4325 4378 -4498 0
4325 4379 -4500 0
4325 4381 -4502 0
4325 4383 -4504 0
4325 4385 -4506 0
4325 4387 -4508 0
4325 4389 -4510 0
4325 4391 -4512 0
4325 4393 -4514 0
4325 4395 -4516 0
4325 4397 -4518 0
4325 4399 -4520 0
4325 4401 -4522 0
4325 4403 -4524 0
4325 4405 -4526 0
4325 4407 -4528 0
4327 -4498 0
4327 4378 -4500 0
4327 4379 -4502 0
4327 4381 -4504 0
4327 4383 -4506 0
4327 4385 -4508 0
4327 4387 -4510 0
4327 4389 -4512 0
4327 4391 -4514 0
4327 4393 -4516 0
4327 4395 -4518 0
4327 4397 -4520 0
4327 4399 -4522 0
4327 4401 -4524 0
4327 4403 -4526 0
4327 4405 -4528 0
4327 4407 -4530 0
4329 -4500 0
4329 4378 -4502 0
4329 4379 -4504 0
4329 4381 -4506 0
4329 4383 -4508 0
4329 4385 -4510 0
4329 4387 -4512 0
4329 4389 -4514 0
4329 4391 -4516 0
4329 4393 -4518 0
4329 4395 -4520 0
4329 4397 -4522 0
4329 4399 -4524 0
4329 4401 -4526 0
4329 4403 -4528 0
4329 4405 -4530 0
4329 4407 -4532 0
4331 -4502 0
4331 4378 -4504 0
4331 4379 -4506 0
4331 4381 -4508 0
4331 4383 -4510 0
4331 4385 -4512 0
4331 4387 -4514 0
4331 4389 -4516 0
4331 4391 -4518 0
4331 4393 -4520 0
4331 4395 -4522 0
4331 4397 -4524 0
4331 4399 -4526 0
4331 4401 -4528 0
4331 4403 -4530 0
4331 4405 -4532 0
4331 4407 -4534 0
4333 -4504 0
4333 4378 -4506 0
4333 4379 -4508 0
4333 4381 -4510 0
4333 4383 -4512 0
4333 4385 -4514 0
4333 4387 -4516 0
4333 4389 -4518 0
4333 4391 -4520 0
4333 4393 -4522 0
4333 4395 -4524 0
4333 4397 -4526 0
4333 4399 -4528 0
4333 4401 -4530 0
4333 4403 -4532 0
4333 4405 -4534 0
4333 4407 -4536 0
4335 -4506 0
4335 4378 -4508 0
4335 4379 -4510 0
4335 4381 -4512 0
4335 4383 -4514 0
4335 4385 -4516 0
4335 4387 -4518 0
4335 4389 -4520 0
4335 4391 -4522 0
4335 4393 -4524 0
4335 4395 -4526 0
4335 4397 -4528 0
4335 4399 -4530 0
4335 4401 -4532 0
4335 4403 -4534 0
4335 4405 -4536 0
4335 4407 -4538 0
4337 -4508 0
4337 4378 -4510 0
4337 4379 -4512 0
4337 4381 -4514 0
4337 4383 -4516 0
4337 4385 -4518 0
4337 4387 -4520 0
4337 4389 -4522 0
4337 4391 -4524 0
4337 4393 -4526 0
4337 4395 -4528 0
4337 4397 -4530 0
4337 4399 -4532 0
4337 4401 -4534 0
4337 4403 -4536 0
4337 4405 -4538 0
4337 4407 -4540 0
4339 -4510 0
4339 4378 -4512 0
4339 4379 -4514 0
4339 4381 -4516 0
4339 4383 -4518 0
4339 4385 -4520 0
4339 4387 -4522 0
4339 4389 -4524 0
4339 4391 -4526 0
4339 4393 -4528 0
4339 4395 -4530 0
4339 4397 -4532 0
4339 4399 -4534 0
4339 4401 -4536 0
4339 4403 -4538 0
4339 4405 -4540 0
4339 4407 -4542 0
4341 -4512 0
4341 4378 -4514 0
4341 4379 -4516 0
4341 4381 -4518 0
4341 4383 -4520 0
4341 4385 -4522 0
4341 4387 -4524 0
4341 4389 -4526 0
4341 4391 -4528 0
4341 4393 -4530 0
4341 4395 -4532 0
4341 4397 -4534 0
4341 4399 -4536 0
4341 4401 -4538 0
4341 4403 -4540 0
4341 4405 -4542 0
4341 4407 -4544 0
4343 -4514 0
4343 4378 -4516 0
4343 4379 -4518 0
4343 4381 -4520 0
4343 4383 -4522 0
4343 4385 -4524 0
4343 4387 -4526 0
4343 4389 -4528 0
4343 4391 -4530 0
4343 4393 -4532 0
4343 4395 -4534 0
4343 4397 -4536 0
4343 4399 -4538 0
4343 4401 -4540 0
4343 4403 -4542 0
4343 4405 -4544 0
4343 4407 -4546 0
4345 -4516 0
4345 4378 -4518 0
4345 4379 -4520 0
4345 4381 -4522 0
4345 4383 -4524 0
4345 4385 -4526 0
4345 4387 -4528 0
4345 4389 -4530 0
4345 4391 -4532 0
4345 4393 -4534 0
4345 4395 -4536 0
4345 4397 -4538 0
4345 4399 -4540 0
4345 4401 -4542 0
4345 4403 -4544 0
4345 4405 -4546 0
4345 4407 -4548 0
c (0<=(aux527 + aux529 - aux532))
-4407 4548 0
-4405 4546 0
-4403 4544 0
-4401 4542 0
-4399 4540 0
-4397 4538 0
-4395 4536 0
-4393 4534 0
-4391 4532 0
-4389 4530 0
-4387 4528 0
-4385 4526 0
-4383 4524 0
-4381 4522 0
-4379 4520 0
-4378 4518 0
-4345 4548 0
-4345 -4407 4546 0
-4345 -4405 4544 0
-4345 -4403 4542 0
-4345 -4401 4540 0
-4345 -4399 4538 0
-4345 -4397 4536 0
-4345 -4395 4534 0
-4345 -4393 4532 0
-4345 -4391 4530 0
-4345 -4389 4528 0
-4345 -4387 4526 0
-4345 -4385 4524 0
-4345 -4383 4522 0
-4345 -4381 4520 0
-4345 -4379 4518 0
-4345 -4378 4516 0
-4343 4546 0
-4343 -4407 4544 0
-4343 -4405 4542 0
-4343 -4403 4540 0
-4343 -4401 4538 0
-4343 -4399 4536 0
-4343 -4397 4534 0
-4343 -4395 4532 0
-4343 -4393 4530 0
-4343 -4391 4528 0
-4343 -4389 4526 0
-4343 -4387 4524 0
-4343 -4385 4522 0
-4343 -4383 4520 0
-4343 -4381 4518 0
-4343 -4379 4516 0
-4343 -4378 4514 0
-4341 4544 0
-4341 -4407 4542 0
-4341 -4405 4540 0
-4341 -4403 4538 0
-4341 -4401 4536 0
-4341 -4399 4534 0
-4341 -4397 4532 0
-4341 -4395 4530 0
-4341 -4393 4528 0
-4341 -4391 4526 0
-4341 -4389 4524 0
-4341 -4387 4522 0
-4341 -4385 4520 0
-4341 -4383 4518 0
-4341 -4381 4516 0
-4341 -4379 4514 0
-4341 -4378 4512 0
-4339 4542 0
-4339 -4407 4540 0
-4339 -4405 4538 0
-4339 -4403 4536 0
-4339 -4401 4534 0
-4339 -4399 4532 0
-4339 -4397 4530 0
-4339 -4395 4528 0
-4339 -4393 4526 0
-4339 -4391 4524 0
-4339 -4389 4522 0
-4339 -4387 4520 0
-4339 -4385 4518 0
-4339 -4383 4516 0
-4339 -4381 4514 0
-4339 -4379 4512 0
-4339 -4378 4510 0
-4337 4540 0
-4337 -4407 4538 0
-4337 -4405 4536 0
-4337 -4403 4534 0
-4337 -4401 4532 0
-4337 -4399 4530 0
-4337 -4397 4528 0
-4337 -4395 4526 0
-4337 -4393 4524 0
-4337 -4391 4522 0
-4337 -4389 4520 0
-4337 -4387 4518 0
-4337 -4385 4516 0
-4337 -4383 4514 0
-4337 -4381 4512 0
-4337 -4379 4510 0
-4337 -4378 4508 0
-4335 4538 0
-4335 -4407 4536 0
-4335 -4405 4534 0
-4335 -4403 4532 0
-4335 -4401 4530 0
-4335 -4399 4528 0
-4335 -4397 4526 0
-4335 -4395 4524 0
-4335 -4393 4522 0
-4335 -4391 4520 0
-4335 -4389 4518 0
-4335 -4387 4516 0
-4335 -4385 4514 0
-4335 -4383 4512 0
-4335 -4381 4510 0
-4335 -4379 4508 0
-4335 -4378 4506 0
-4333 4536 0
-4333 -4407 4534 0
-4333 -4405 4532 0
-4333 -4403 4530 0
-4333 -4401 4528 0
-4333 -4399 4526 0
-4333 -4397 4524 0
-4333 -4395 4522 0
-4333 -4393 4520 0
-4333 -4391 4518 0
-4333 -4389 4516 0
-4333 -4387 4514 0
-4333 -4385 4512 0
-4333 -4383 4510 0
-4333 -4381 4508 0
-4333 -4379 4506 0
-4333 -4378 4504 0
-4331 4534 0
-4331 -4407 4532 0
-4331 -4405 4530 0
-4331 -4403 4528 0
-4331 -4401 4526 0
-4331 -4399 4524 0
-4331 -4397 4522 0
-4331 -4395 4520 0
-4331 -4393 4518 0
-4331 -4391 4516 0
-4331 -4389 4514 0
-4331 -4387 4512 0
-4331 -4385 4510 0
-4331 -4383 4508 0
-4331 -4381 4506 0
-4331 -4379 4504 0
-4331 -4378 4502 0
-4329 4532 0
-4329 -4407 4530 0
-4329 -4405 4528 0
-4329 -4403 4526 0
-4329 -4401 4524 0
-4329 -4399 4522 0
-4329 -4397 4520 0
-4329 -4395 4518 0
-4329 -4393 4516 0
-4329 -4391 4514 0
-4329 -4389 4512 0
-4329 -4387 4510 0
-4329 -4385 4508 0
-4329 -4383 4506 0
-4329 -4381 4504 0
-4329 -4379 4502 0
-4329 -4378 4500 0
-4327 4530 0
-4327 -4407 4528 0
-4327 -4405 4526 0
-4327 -4403 4524 0
-4327 -4401 4522 0
-4327 -4399 4520 0
-4327 -4397 4518 0
-4327 -4395 4516 0
-4327 -4393 4514 0
-4327 -4391 4512 0
-4327 -4389 4510 0
-4327 -4387 4508 0
-4327 -4385 4506 0
-4327 -4383 4504 0
-4327 -4381 4502 0
-4327 -4379 4500 0
-4327 -4378 4498 0
-4325 4528 0
-4325 -4407 4526 0
-4325 -4405 4524 0
-4325 -4403 4522 0
-4325 -4401 4520 0
-4325 -4399 4518 0
-4325 -4397 4516 0
-4325 -4395 4514 0
-4325 -4393 4512 0
-4325 -4391 4510 0
-4325 -4389 4508 0
-4325 -4387 4506 0
-4325 -4385 4504 0
-4325 -4383 4502 0
-4325 -4381 4500 0
-4325 -4379 4498 0
-4325 -4378 4496 0
-4323 4526 0
-4323 -4407 4524 0
-4323 -4405 4522 0
-4323 -4403 4520 0
-4323 -4401 4518 0
-4323 -4399 4516 0
-4323 -4397 4514 0
-4323 -4395 4512 0
-4323 -4393 4510 0
-4323 -4391 4508 0
-4323 -4389 4506 0
-4323 -4387 4504 0
-4323 -4385 4502 0
-4323 -4383 4500 0
-4323 -4381 4498 0
-4323 -4379 4496 0
-4323 -4378 4494 0
-4321 4524 0
-4321 -4407 4522 0
-4321 -4405 4520 0
-4321 -4403 4518 0
-4321 -4401 4516 0
-4321 -4399 4514 0
-4321 -4397 4512 0
-4321 -4395 4510 0
-4321 -4393 4508 0
-4321 -4391 4506 0
-4321 -4389 4504 0
-4321 -4387 4502 0
-4321 -4385 4500 0
-4321 -4383 4498 0
-4321 -4381 4496 0
-4321 -4379 4494 0
-4321 -4378 4492 0
-4319 4522 0
-4319 -4407 4520 0
-4319 -4405 4518 0
-4319 -4403 4516 0
-4319 -4401 4514 0
-4319 -4399 4512 0
-4319 -4397 4510 0
-4319 -4395 4508 0
-4319 -4393 4506 0
-4319 -4391 4504 0
-4319 -4389 4502 0
-4319 -4387 4500 0
-4319 -4385 4498 0
-4319 -4383 4496 0
-4319 -4381 4494 0
-4319 -4379 4492 0
-4319 -4378 4490 0
-4317 4520 0
-4317 -4407 4518 0
-4317 -4405 4516 0
-4317 -4403 4514 0
-4317 -4401 4512 0
-4317 -4399 4510 0
-4317 -4397 4508 0
-4317 -4395 4506 0
-4317 -4393 4504 0
-4317 -4391 4502 0
-4317 -4389 4500 0
-4317 -4387 4498 0
-4317 -4385 4496 0
-4317 -4383 4494 0
-4317 -4381 4492 0
-4317 -4379 4490 0
-4317 -4378 4488 0
-4316 4518 0
-4316 -4407 4516 0
-4316 -4405 4514 0
-4316 -4403 4512 0
-4316 -4401 4510 0
-4316 -4399 4508 0
-4316 -4397 4506 0
-4316 -4395 4504 0
-4316 -4393 4502 0
-4316 -4391 4500 0
-4316 -4389 4498 0
-4316 -4387 4496 0
-4316 -4385 4494 0
-4316 -4383 4492 0
-4316 -4381 4490 0
-4316 -4379 4488 0
-4316 -4378 4487 0
c (( - aux533 + shift(x_00003_00001, -1) + shift(x_00003_00009, -1))<=0)
392 -4550 0
393 -4551 0
395 -4553 0
397 -4555 0
399 -4557 0
401 -4559 0
403 -4561 0
405 -4563 0
272 -4550 0
272 392 -4551 0
272 393 -4553 0
272 395 -4555 0
272 397 -4557 0
272 399 -4559 0
272 401 -4561 0
272 403 -4563 0
272 405 -4565 0
273 -4551 0
273 392 -4553 0
273 393 -4555 0
273 395 -4557 0
273 397 -4559 0
273 399 -4561 0
273 401 -4563 0
273 403 -4565 0
273 405 -4567 0
275 -4553 0
275 392 -4555 0
275 393 -4557 0
275 395 -4559 0
275 397 -4561 0
275 399 -4563 0
275 401 -4565 0
275 403 -4567 0
275 405 -4569 0
277 -4555 0
277 392 -4557 0
277 393 -4559 0
277 395 -4561 0
277 397 -4563 0
277 399 -4565 0
277 401 -4567 0
277 403 -4569 0
277 405 -4571 0
279 -4557 0
279 392 -4559 0
279 393 -4561 0
279 395 -4563 0
279 397 -4565 0
279 399 -4567 0
279 401 -4569 0
279 403 -4571 0
279 405 -4573 0
281 -4559 0
281 392 -4561 0
281 393 -4563 0
281 395 -4565 0
281 397 -4567 0
281 399 -4569 0
281 401 -4571 0
281 403 -4573 0
281 405 -4575 0
283 -4561 0
283 392 -4563 0
283 393 -4565 0
283 395 -4567 0
283 397 -4569 0
283 399 -4571 0
283 401 -4573 0
283 403 -4575 0
283 405 -4577 0
285 -4563 0
285 392 -4565 0
285 393 -4567 0
285 395 -4569 0
285 397 -4571 0
285 399 -4573 0
285 401 -4575 0
285 403 -4577 0
285 405 -4579 0
c (0<=( - aux533 + shift(x_00003_00001, -1) + shift(x_00003_00009, -1)))
-405 4579 0
-403 4577 0
-401 4575 0
-399 4573 0
-397 4571 0
-395 4569 0
-393 4567 0
-392 4565 0
-285 4579 0
-285 -405 4577 0
-285 -403 4575 0
-285 -401 4573 0
-285 -399 4571 0
-285 -397 4569 0
-285 -395 4567 0
-285 -393 4565 0
-285 -392 4563 0
-283 4577 0
-283 -405 4575 0
-283 -403 4573 0
-283 -401 4571 0
-283 -399 4569 0
-283 -397 4567 0
-283 -395 4565 0
-283 -393 4563 0
-283 -392 4561 0
-281 4575 0
-281 -405 4573 0
-281 -403 4571 0
-281 -401 4569 0
-281 -399 4567 0
-281 -397 4565 0
-281 -395 4563 0
-281 -393 4561 0
-281 -392 4559 0
-279 4573 0
-279 -405 4571 0
-279 -403 4569 0
-279 -401 4567 0
-279 -399 4565 0
-279 -397 4563 0
-279 -395 4561 0
-279 -393 4559 0
-279 -392 4557 0
-277 4571 0
-277 -405 4569 0
-277 -403 4567 0
-277 -401 4565 0
-277 -399 4563 0
-277 -397 4561 0
-277 -395 4559 0
-277 -393 4557 0
-277 -392 4555 0
-275 4569 0
-275 -405 4567 0
-275 -403 4565 0
-275 -401 4563 0
-275 -399 4561 0
-275 -397 4559 0
-275 -395 4557 0
-275 -393 4555 0
-275 -392 4553 0
-273 4567 0
-273 -405 4565 0
-273 -403 4563 0
-273 -401 4561 0
-273 -399 4559 0
-273 -397 4557 0
-273 -395 4555 0
-273 -393 4553 0
-273 -392 4551 0
-272 4565 0
-272 -405 4563 0
-272 -403 4561 0
-272 -401 4559 0
-272 -399 4557 0
-272 -397 4555 0
-272 -395 4553 0
-272 -393 4551 0
-272 -392 4550 0
c (( - aux534 + shift(x_00003_00002, -1) + shift(x_00003_00008, -1))<=0)
377 -4581 0
378 -4582 0
380 -4584 0
382 -4586 0
384 -4588 0
386 -4590 0
388 -4592 0
390 -4594 0
287 -4581 0
287 377 -4582 0
287 378 -4584 0
287 380 -4586 0
287 382 -4588 0
287 384 -4590 0
287 386 -4592 0
287 388 -4594 0
287 390 -4596 0
288 -4582 0
288 377 -4584 0
288 378 -4586 0
288 380 -4588 0
288 382 -4590 0
288 384 -4592 0
288 386 -4594 0
288 388 -4596 0
288 390 -4598 0
290 -4584 0
290 377 -4586 0
290 378 -4588 0
290 380 -4590 0
290 382 -4592 0
290 384 -4594 0
290 386 -4596 0
290 388 -4598 0
290 390 -4600 0
292 -4586 0
292 377 -4588 0
292 378 -4590 0
292 380 -4592 0
292 382 -4594 0
292 384 -4596 0
292 386 -4598 0
292 388 -4600 0
292 390 -4602 0
294 -4588 0
294 377 -4590 0
294 378 -4592 0
294 380 -4594 0
294 382 -4596 0
294 384 -4598 0
294 386 -4600 0
294 388 -4602 0
294 390 -4604 0
296 -4590 0
296 377 -4592 0
296 378 -4594 0
296 380 -4596 0
296 382 -4598 0
296 384 -4600 0
296 386 -4602 0
296 388 -4604 0
296 390 -4606 0
298 -4592 0
298 377 -4594 0
298 378 -4596 0
298 380 -4598 0
298 382 -4600 0
298 384 -4602 0
298 386 -4604 0
298 388 -4606 0
298 390 -4608 0
300 -4594 0
300 377 -4596 0
300 378 -4598 0
300 380 -4600 0
300 382 -4602 0
300 384 -4604 0
300 386 -4606 0
300 388 -4608 0
300 390 -4610 0
c (0<=( - aux534 + shift(x_00003_00002, -1) + shift(x_00003_00008, -1)))
-390 4610 0
-388 4608 0
-386 4606 0
-384 4604 0
-382 4602 0
-380 4600 0
-378 4598 0
-377 4596 0
-300 4610 0
-300 -390 4608 0
-300 -388 4606 0
-300 -386 4604 0
-300 -384 4602 0
-300 -382 4600 0
-300 -380 4598 0
-300 -378 4596 0
-300 -377 4594 0
-298 4608 0
-298 -390 4606 0
-298 -388 4604 0
-298 -386 4602 0
-298 -384 4600 0
-298 -382 4598 0
-298 -380 4596 0
-298 -378 4594 0
-298 -377 4592 0
-296 4606 0
-296 -390 4604 0
-296 -388 4602 0
-296 -386 4600 0
-296 -384 4598 0
-296 -382 4596 0
-296 -380 4594 0
-296 -378 4592 0
-296 -377 4590 0
-294 4604 0
-294 -390 4602 0
-294 -388 4600 0
-294 -386 4598 0
-294 -384 4596 0
-294 -382 4594 0
-294 -380 4592 0
-294 -378 4590 0
-294 -377 4588 0
-292 4602 0
-292 -390 4600 0
-292 -388 4598 0
-292 -386 4596 0
-292 -384 4594 0
-292 -382 4592 0
-292 -380 4590 0
-292 -378 4588 0
-292 -377 4586 0
-290 4600 0
-290 -390 4598 0
-290 -388 4596 0
-290 -386 4594 0
-290 -384 4592 0
-290 -382 4590 0
-290 -380 4588 0
-290 -378 4586 0
-290 -377 4584 0
-288 4598 0
-288 -390 4596 0
-288 -388 4594 0
-288 -386 4592 0
-288 -384 4590 0
-288 -382 4588 0
-288 -380 4586 0
-288 -378 4584 0
-288 -377 4582 0
-287 4596 0
-287 -390 4594 0
-287 -388 4592 0
-287 -386 4590 0
-287 -384 4588 0
-287 -382 4586 0
-287 -380 4584 0
-287 -378 4582 0
-287 -377 4581 0
c (( - aux535 + shift(x_00003_00004, -1) + shift(x_00003_00007, -1))<=0)
362 -4612 0
363 -4613 0
365 -4615 0
367 -4617 0
369 -4619 0
371 -4621 0
373 -4623 0
375 -4625 0
317 -4612 0
317 362 -4613 0
317 363 -4615 0
317 365 -4617 0
317 367 -4619 0
317 369 -4621 0
317 371 -4623 0
317 373 -4625 0
317 375 -4627 0
318 -4613 0
318 362 -4615 0
318 363 -4617 0
318 365 -4619 0
318 367 -4621 0
318 369 -4623 0
318 371 -4625 0
318 373 -4627 0
318 375 -4629 0
320 -4615 0
320 362 -4617 0
320 363 -4619 0
320 365 -4621 0
320 367 -4623 0
320 369 -4625 0
320 371 -4627 0
320 373 -4629 0
320 375 -4631 0
322 -4617 0
322 362 -4619 0
322 363 -4621 0
322 365 -4623 0
322 367 -4625 0
322 369 -4627 0
322 371 -4629 0
322 373 -4631 0
322 375 -4633 0
324 -4619 0
324 362 -4621 0
324 363 -4623 0
324 365 -4625 0
324 367 -4627 0
324 369 -4629 0
324 371 -4631 0
324 373 -4633 0
324 375 -4635 0
326 -4621 0
326 362 -4623 0
326 363 -4625 0
326 365 -4627 0
326 367 -4629 0
326 369 -4631 0
326 371 -4633 0
326 373 -4635 0
326 375 -4637 0
328 -4623 0
328 362 -4625 0
328 363 -4627 0
328 365 -4629 0
328 367 -4631 0
328 369 -4633 0
328 371 -4635 0
328 373 -4637 0
328 375 -4639 0
330 -4625 0
330 362 -4627 0
330 363 -4629 0
330 365 -4631 0
330 367 -4633 0
330 369 -4635 0
330 371 -4637 0
330 373 -4639 0
330 375 -4641 0
c (0<=( - aux535 + shift(x_00003_00004, -1) + shift(x_00003_00007, -1)))
-375 4641 0
-373 4639 0
-371 4637 0
-369 4635 0
-367 4633 0
-365 4631 0
-363 4629 0
-362 4627 0
-330 4641 0
-330 -375 4639 0
-330 -373 4637 0
-330 -371 4635 0
-330 -369 4633 0
-330 -367 4631 0
-330 -365 4629 0
-330 -363 4627 0
-330 -362 4625 0
-328 4639 0
-328 -375 4637 0
-328 -373 4635 0
-328 -371 4633 0
-328 -369 4631 0
-328 -367 4629 0
-328 -365 4627 0
-328 -363 4625 0
-328 -362 4623 0
-326 4637 0
-326 -375 4635 0
-326 -373 4633 0
-326 -371 4631 0
-326 -369 4629 0
-326 -367 4627 0
-326 -365 4625 0
-326 -363 4623 0
-326 -362 4621 0
-324 4635 0
-324 -375 4633 0
-324 -373 4631 0
-324 -371 4629 0
-324 -369 4627 0
-324 -367 4625 0
-324 -365 4623 0
-324 -363 4621 0
-324 -362 4619 0
-322 4633 0
-322 -375 4631 0
-322 -373 4629 0
-322 -371 4627 0
-322 -369 4625 0
-322 -367 4623 0
-322 -365 4621 0
-322 -363 4619 0
-322 -362 4617 0
-320 4631 0
-320 -375 4629 0
-320 -373 4627 0
-320 -371 4625 0
-320 -369 4623 0
-320 -367 4621 0
-320 -365 4619 0
-320 -363 4617 0
-320 -362 4615 0
-318 4629 0
-318 -375 4627 0
-318 -373 4625 0
-318 -371 4623 0
-318 -369 4621 0
-318 -367 4619 0
-318 -365 4617 0
-318 -363 4615 0
-318 -362 4613 0
-317 4627 0
-317 -375 4625 0
-317 -373 4623 0
-317 -371 4621 0
-317 -369 4619 0
-317 -367 4617 0
-317 -365 4615 0
-317 -363 4613 0
-317 -362 4612 0
c (( - aux536 + shift(x_00003_00005, -1) + shift(x_00003_00006, -1))<=0)
347 -4643 0
348 -4644 0
350 -4646 0
352 -4648 0
354 -4650 0
356 -4652 0
358 -4654 0
360 -4656 0
332 -4643 0
332 347 -4644 0
332 348 -4646 0
332 350 -4648 0
332 352 -4650 0
332 354 -4652 0
332 356 -4654 0
332 358 -4656 0
332 360 -4658 0
333 -4644 0
333 347 -4646 0
333 348 -4648 0
333 350 -4650 0
333 352 -4652 0
333 354 -4654 0
333 356 -4656 0
333 358 -4658 0
333 360 -4660 0
335 -4646 0
335 347 -4648 0
335 348 -4650 0
335 350 -4652 0
335 352 -4654 0
335 354 -4656 0
335 356 -4658 0
335 358 -4660 0
335 360 -4662 0
337 -4648 0
337 347 -4650 0
337 348 -4652 0
337 350 -4654 0
337 352 -4656 0
337 354 -4658 0
337 356 -4660 0
337 358 -4662 0
337 360 -4664 0
339 -4650 0
339 347 -4652 0
339 348 -4654 0
339 350 -4656 0
339 352 -4658 0
339 354 -4660 0
339 356 -4662 0
339 358 -4664 0
339 360 -4666 0
341 -4652 0
341 347 -4654 0
341 348 -4656 0
341 350 -4658 0
341 352 -4660 0
341 354 -4662 0
341 356 -4664 0
341 358 -4666 0
341 360 -4668 0
343 -4654 0
343 347 -4656 0
343 348 -4658 0
343 350 -4660 0
343 352 -4662 0
343 354 -4664 0
343 356 -4666 0
343 358 -4668 0
343 360 -4670 0
345 -4656 0
345 347 -4658 0
345 348 -4660 0
345 350 -4662 0
345 352 -4664 0
345 354 -4666 0
345 356 -4668 0
345 358 -4670 0
345 360 -4672 0
c (0<=( - aux536 + shift(x_00003_00005, -1) + shift(x_00003_00006, -1)))
-360 4672 0
-358 4670 0
-356 4668 0
-354 4666 0
-352 4664 0
-350 4662 0
-348 4660 0
-347 4658 0
-345 4672 0
-345 -360 4670 0
-345 -358 4668 0
-345 -356 4666 0
-345 -354 4664 0
-345 -352 4662 0
-345 -350 4660 0
-345 -348 4658 0
-345 -347 4656 0
-343 4670 0
-343 -360 4668 0
-343 -358 4666 0
-343 -356 4664 0
-343 -354 4662 0
-343 -352 4660 0
-343 -350 4658 0
-343 -348 4656 0
-343 -347 4654 0
-341 4668 0
-341 -360 4666 0
-341 -358 4664 0
-341 -356 4662 0
-341 -354 4660 0
-341 -352 4658 0
-341 -350 4656 0
-341 -348 4654 0
-341 -347 4652 0
-339 4666 0
-339 -360 4664 0
-339 -358 4662 0
-339 -356 4660 0
-339 -354 4658 0
-339 -352 4656 0
-339 -350 4654 0
-339 -348 4652 0
-339 -347 4650 0
-337 4664 0
-337 -360 4662 0
-337 -358 4660 0
-337 -356 4658 0
-337 -354 4656 0
-337 -352 4654 0
-337 -350 4652 0
-337 -348 4650 0
-337 -347 4648 0
-335 4662 0
-335 -360 4660 0
-335 -358 4658 0
-335 -356 4656 0
-335 -354 4654 0
-335 -352 4652 0
-335 -350 4650 0
-335 -348 4648 0
-335 -347 4646 0
-333 4660 0
-333 -360 4658 0
-333 -358 4656 0
-333 -356 4654 0
-333 -354 4652 0
-333 -352 4650 0
-333 -350 4648 0
-333 -348 4646 0
-333 -347 4644 0
-332 4658 0
-332 -360 4656 0
-332 -358 4654 0
-332 -356 4652 0
-332 -354 4650 0
-332 -352 4648 0
-332 -350 4646 0
-332 -348 4644 0
-332 -347 4643 0
c ((aux536 - aux537 + shift(x_00003_00003, -1))<=0)
4643 -4674 0
4644 -4675 0
4646 -4677 0
4648 -4679 0
4650 -4681 0
4652 -4683 0
4654 -4685 0
4656 -4687 0
4658 -4689 0
4660 -4691 0
4662 -4693 0
4664 -4695 0
4666 -4697 0
4668 -4699 0
4670 -4701 0
4672 -4703 0
302 -4674 0
302 4643 -4675 0
302 4644 -4677 0
302 4646 -4679 0
302 4648 -4681 0
302 4650 -4683 0
302 4652 -4685 0
302 4654 -4687 0
302 4656 -4689 0
302 4658 -4691 0
302 4660 -4693 0
302 4662 -4695 0
302 4664 -4697 0
302 4666 -4699 0
302 4668 -4701 0
302 4670 -4703 0
302 4672 -4705 0
303 -4675 0
303 4643 -4677 0
303 4644 -4679 0
303 4646 -4681 0
303 4648 -4683 0
303 4650 -4685 0
303 4652 -4687 0
303 4654 -4689 0
303 4656 -4691 0
303 4658 -4693 0
303 4660 -4695 0
303 4662 -4697 0
303 4664 -4699 0
303 4666 -4701 0
303 4668 -4703 0
303 4670 -4705 0
303 4672 -4707 0
305 -4677 0
305 4643 -4679 0
305 4644 -4681 0
305 4646 -4683 0
305 4648 -4685 0
305 4650 -4687 0
305 4652 -4689 0
305 4654 -4691 0
305 4656 -4693 0
305 4658 -4695 0
305 4660 -4697 0
305 4662 -4699 0
305 4664 -4701 0
305 4666 -4703 0
305 4668 -4705 0
305 4670 -4707 0
305 4672 -4709 0
307 -4679 0
307 4643 -4681 0
307 4644 -4683 0
307 4646 -4685 0
307 4648 -4687 0
307 4650 -4689 0
307 4652 -4691 0
307 4654 -4693 0
307 4656 -4695 0
307 4658 -4697 0
307 4660 -4699 0
307 4662 -4701 0
307 4664 -4703 0
307 4666 -4705 0
307 4668 -4707 0
307 4670 -4709 0
307 4672 -4711 0
309 -4681 0
309 4643 -4683 0
309 4644 -4685 0
309 4646 -4687 0
309 4648 -4689 0
309 4650 -4691 0
309 4652 -4693 0
309 4654 -4695 0
309 4656 -4697 0
309 4658 -4699 0
309 4660 -4701 0
309 4662 -4703 0
309 4664 -4705 0
309 4666 -4707 0
309 4668 -4709 0
309 4670 -4711 0
309 4672 -4713 0
311 -4683 0
311 4643 -4685 0
311 4644 -4687 0
311 4646 -4689 0
311 4648 -4691 0
311 4650 -4693 0
311 4652 -4695 0
311 4654 -4697 0
311 4656 -4699 0
311 4658 -4701 0
311 4660 -4703 0
311 4662 -4705 0
311 4664 -4707 0
311 4666 -4709 0
311 4668 -4711 0
311 4670 -4713 0
311 4672 -4715 0
313 -4685 0
313 4643 -4687 0
313 4644 -4689 0
313 4646 -4691 0
313 4648 -4693 0
313 4650 -4695 0
313 4652 -4697 0
313 4654 -4699 0
313 4656 -4701 0
313 4658 -4703 0
313 4660 -4705 0
313 4662 -4707 0
313 4664 -4709 0
313 4666 -4711 0
313 4668 -4713 0
313 4670 -4715 0
313 4672 -4717 0
315 -4687 0
315 4643 -4689 0
315 4644 -4691 0
315 4646 -4693 0
315 4648 -4695 0
315 4650 -4697 0
315 4652 -4699 0
315 4654 -4701 0
315 4656 -4703 0
315 4658 -4705 0
315 4660 -4707 0
315 4662 -4709 0
315 4664 -4711 0
315 4666 -4713 0
315 4668 -4715 0
315 4670 -4717 0
315 4672 -4719 0
c (0<=(aux536 - aux537 + shift(x_00003_00003, -1)))
-4672 4719 0
-4670 4717 0
-4668 4715 0
-4666 4713 0
-4664 4711 0
-4662 4709 0
-4660 4707 0
-4658 4705 0
-4656 4703 0
-4654 4701 0
-4652 4699 0
-4650 4697 0
-4648 4695 0
-4646 4693 0
-4644 4691 0
-4643 4689 0
-315 4719 0
-315 -4672 4717 0
-315 -4670 4715 0
-315 -4668 4713 0
-315 -4666 4711 0
-315 -4664 4709 0
-315 -4662 4707 0
-315 -4660 4705 0
-315 -4658 4703 0
-315 -4656 4701 0
-315 -4654 4699 0
-315 -4652 4697 0
-315 -4650 4695 0
-315 -4648 4693 0
-315 -4646 4691 0
-315 -4644 4689 0
-315 -4643 4687 0
-313 4717 0
-313 -4672 4715 0
-313 -4670 4713 0
-313 -4668 4711 0
-313 -4666 4709 0
-313 -4664 4707 0
-313 -4662 4705 0
-313 -4660 4703 0
-313 -4658 4701 0
-313 -4656 4699 0
-313 -4654 4697 0
-313 -4652 4695 0
-313 -4650 4693 0
-313 -4648 4691 0
-313 -4646 4689 0
-313 -4644 4687 0
-313 -4643 4685 0
-311 4715 0
-311 -4672 4713 0
-311 -4670 4711 0
-311 -4668 4709 0
-311 -4666 4707 0
-311 -4664 4705 0
-311 -4662 4703 0
-311 -4660 4701 0
-311 -4658 4699 0
-311 -4656 4697 0
-311 -4654 4695 0
-311 -4652 4693 0
-311 -4650 4691 0
-311 -4648 4689 0
-311 -4646 4687 0
-311 -4644 4685 0
-311 -4643 4683 0
-309 4713 0
-309 -4672 4711 0
-309 -4670 4709 0
-309 -4668 4707 0
-309 -4666 4705 0
-309 -4664 4703 0
-309 -4662 4701 0
-309 -4660 4699 0
-309 -4658 4697 0
-309 -4656 4695 0
-309 -4654 4693 0
-309 -4652 4691 0
-309 -4650 4689 0
-309 -4648 4687 0
-309 -4646 4685 0
-309 -4644 4683 0
-309 -4643 4681 0
-307 4711 0
-307 -4672 4709 0
-307 -4670 4707 0
-307 -4668 4705 0
-307 -4666 4703 0
-307 -4664 4701 0
-307 -4662 4699 0
-307 -4660 4697 0
-307 -4658 4695 0
-307 -4656 4693 0
-307 -4654 4691 0
-307 -4652 4689 0
-307 -4650 4687 0
-307 -4648 4685 0
-307 -4646 4683 0
-307 -4644 4681 0
-307 -4643 4679 0
-305 4709 0
-305 -4672 4707 0
-305 -4670 4705 0
-305 -4668 4703 0
-305 -4666 4701 0
-305 -4664 4699 0
-305 -4662 4697 0
-305 -4660 4695 0
-305 -4658 4693 0
-305 -4656 4691 0
-305 -4654 4689 0
-305 -4652 4687 0
-305 -4650 4685 0
-305 -4648 4683 0
-305 -4646 4681 0
-305 -4644 4679 0
-305 -4643 4677 0
-303 4707 0
-303 -4672 4705 0
-303 -4670 4703 0
-303 -4668 4701 0
-303 -4666 4699 0
-303 -4664 4697 0
-303 -4662 4695 0
-303 -4660 4693 0
-303 -4658 4691 0
-303 -4656 4689 0
-303 -4654 4687 0
-303 -4652 4685 0
-303 -4650 4683 0
-303 -4648 4681 0
-303 -4646 4679 0
-303 -4644 4677 0
-303 -4643 4675 0
-302 4705 0
-302 -4672 4703 0
-302 -4670 4701 0
-302 -4668 4699 0
-302 -4666 4697 0
-302 -4664 4695 0
-302 -4662 4693 0
-302 -4660 4691 0
-302 -4658 4689 0
-302 -4656 4687 0
-302 -4654 4685 0
-302 -4652 4683 0
-302 -4650 4681 0
-302 -4648 4679 0
-302 -4646 4677 0
-302 -4644 4675 0
-302 -4643 4674 0
c ((aux533 + aux535 - aux538)<=0)
4612 -4721 0
4613 -4722 0
4615 -4724 0
4617 -4726 0
4619 -4728 0
4621 -4730 0
4623 -4732 0
4625 -4734 0
4627 -4736 0
4629 -4738 0
4631 -4740 0
4633 -4742 0
4635 -4744 0
4637 -4746 0
4639 -4748 0
4641 -4750 0
4550 -4721 0
4550 4612 -4722 0
4550 4613 -4724 0
4550 4615 -4726 0
4550 4617 -4728 0
4550 4619 -4730 0
4550 4621 -4732 0
4550 4623 -4734 0
4550 4625 -4736 0
4550 4627 -4738 0
4550 4629 -4740 0
4550 4631 -4742 0
4550 4633 -4744 0
4550 4635 -4746 0
4550 4637 -4748 0
4550 4639 -4750 0
4550 4641 -4752 0
4551 -4722 0
4551 4612 -4724 0
4551 4613 -4726 0
4551 4615 -4728 0
4551 4617 -4730 0
4551 4619 -4732 0
4551 4621 -4734 0
4551 4623 -4736 0
4551 4625 -4738 0
4551 4627 -4740 0
4551 4629 -4742 0
4551 4631 -4744 0
4551 4633 -4746 0
4551 4635 -4748 0
4551 4637 -4750 0
4551 4639 -4752 0
4551 4641 -4754 0
4553 -4724 0
4553 4612 -4726 0
4553 4613 -4728 0
4553 4615 -4730 0
4553 4617 -4732 0
4553 4619 -4734 0
4553 4621 -4736 0
4553 4623 -4738 0
4553 4625 -4740 0
4553 4627 -4742 0
4553 4629 -4744 0
4553 4631 -4746 0
4553 4633 -4748 0
4553 4635 -4750 0
4553 4637 -4752 0
4553 4639 -4754 0
4553 4641 -4756 0
4555 -4726 0
4555 4612 -4728 0
4555 4613 -4730 0
4555 4615 -4732 0
4555 4617 -4734 0
4555 4619 -4736 0
4555 4621 -4738 0
4555 4623 -4740 0
4555 4625 -4742 0
4555 4627 -4744 0
4555 4629 -4746 0
4555 4631 -4748 0
4555 4633 -4750 0
4555 4635 -4752 0
4555 4637 -4754 0
4555 4639 -4756 0
4555 4641 -4758 0
4557 -4728 0
4557 4612 -4730 0
4557 4613 -4732 0
4557 4615 -4734 0
4557 4617 -4736 0
4557 4619 -4738 0
4557 4621 -4740 0
4557 4623 -4742 0
4557 4625 -4744 0
4557 4627 -4746 0
4557 4629 -4748 0
4557 4631 -4750 0
4557 4633 -4752 0
4557 4635 -4754 0
4557 4637 -4756 0
4557 4639 -4758 0
4557 4641 -4760 0
4559 -4730 0
4559 4612 -4732 0
4559 4613 -4734 0
4559 4615 -4736 0
4559 4617 -4738 0
4559 4619 -4740 0
4559 4621 -4742 0
4559 4623 -4744 0
4559 4625 -4746 0
4559 4627 -4748 0
4559 4629 -4750 0
4559 4631 -4752 0
4559 4633 -4754 0
4559 4635 -4756 0
4559 4637 -4758 0
4559 4639 -4760 0
4559 4641 -4762 0
4561 -4732 0
4561 4612 -4734 0
4561 4613 -4736 0
4561 4615 -4738 0
4561 4617 -4740 0
4561 4619 -4742 0
4561 4621 -4744 0
4561 4623 -4746 0
4561 4625 -4748 0
4561 4627 -4750 0
4561 4629 -4752 0
4561 4631 -4754 0
4561 4633 -4756 0
4561 4635 -4758 0
4561 4637 -4760 0
4561 4639 -4762 0
4561 4641 -4764 0
4563 -4734 0
4563 4612 -4736 0
4563 4613 -4738 0
4563 4615 -4740 0
4563 4617 -4742 0
4563 4619 -4744 0
4563 4621 -4746 0
4563 4623 -4748 0
4563 4625 -4750 0
4563 4627 -4752 0
4563 4629 -4754 0
4563 4631 -4756 0
4563 4633 -4758 0
4563 4635 -4760 0
4563 4637 -4762 0
4563 4639 -4764 0
4563 4641 -4766 0
4565 -4736 0
4565 4612 -4738 0
4565 4613 -4740 0
4565 4615 -4742 0
4565 4617 -4744 0
4565 4619 -4746 0
4565 4621 -4748 0
4565 4623 -4750 0
4565 4625 -4752 0
4565 4627 -4754 0
4565 4629 -4756 0
4565 4631 -4758 0
4565 4633 -4760 0
4565 4635 -4762 0
4565 4637 -4764 0
4565 4639 -4766 0
4565 4641 -4768 0
4567 -4738 0
4567 4612 -4740 0
4567 4613 -4742 0
4567 4615 -4744 0
4567 4617 -4746 0
4567 4619 -4748 0
4567 4621 -4750 0
4567 4623 -4752 0
4567 4625 -4754 0
4567 4627 -4756 0
4567 4629 -4758 0
4567 4631 -4760 0
4567 4633 -4762 0
4567 4635 -4764 0
4567 4637 -4766 0
4567 4639 -4768 0
4567 4641 -4770 0
4569 -4740 0
4569 4612 -4742 0
4569 4613 -4744 0
4569 4615 -4746 0
4569 4617 -4748 0
4569 4619 -4750 0
4569 4621 -4752 0
4569 4623 -4754 0
4569 4625 -4756 0
4569 4627 -4758 0
4569 4629 -4760 0
4569 4631 -4762 0
4569 4633 -4764 0
4569 4635 -4766 0
4569 4637 -4768 0
4569 4639 -4770 0
4569 4641 -4772 0
4571 -4742 0
4571 4612 -4744 0
4571 4613 -4746 0
4571 4615 -4748 0
4571 4617 -4750 0
4571 4619 -4752 0
4571 4621 -4754 0
4571 4623 -4756 0
4571 4625 -4758 0
4571 4627 -4760 0
4571 4629 -4762 0
4571 4631 -4764 0
4571 4633 -4766 0
4571 4635 -4768 0
4571 4637 -4770 0
4571 4639 -4772 0
4571 4641 -4774 0
4573 -4744 0
4573 4612 -4746 0
4573 4613 -4748 0
4573 4615 -4750 0
4573 4617 -4752 0
4573 4619 -4754 0
4573 4621 -4756 0
4573 4623 -4758 0
4573 4625 -4760 0
4573 4627 -4762 0
4573 4629 -4764 0
4573 4631 -4766 0
4573 4633 -4768 0
4573 4635 -4770 0
4573 4637 -4772 0
4573 4639 -4774 0
4573 4641 -4776 0
4575 -4746 0
4575 4612 -4748 0
4575 4613 -4750 0
4575 4615 -4752 0
4575 4617 -4754 0
4575 4619 -4756 0
4575 4621 -4758 0
4575 4623 -4760 0
4575 4625 -4762 0
4575 4627 -4764 0
4575 4629 -4766 0
4575 4631 -4768 0
4575 4633 -4770 0
4575 4635 -4772 0
4575 4637 -4774 0
4575 4639 -4776 0
4575 4641 -4778 0
4577 -4748 0
4577 4612 -4750 0
4577 4613 -4752 0
4577 4615 -4754 0
4577 4617 -4756 0
4577 4619 -4758 0
4577 4621 -4760 0
4577 4623 -4762 0
4577 4625 -4764 0
4577 4627 -4766 0
4577 4629 -4768 0
4577 4631 -4770 0
4577 4633 -4772 0
4577 4635 -4774 0
4577 4637 -4776 0
4577 4639 -4778 0
4577 4641 -4780 0
4579 -4750 0
4579 4612 -4752 0
4579 4613 -4754 0
4579 4615 -4756 0
4579 4617 -4758 0
4579 4619 -4760 0
4579 4621 -4762 0
4579 4623 -4764 0
4579 4625 -4766 0
4579 4627 -4768 0
4579 4629 -4770 0
4579 4631 -4772 0
4579 4633 -4774 0
4579 4635 -4776 0
4579 4637 -4778 0
4579 4639 -4780 0
4579 4641 -4782 0
c (0<=(aux533 + aux535 - aux538))
-4641 4782 0
-4639 4780 0
-4637 4778 0
-4635 4776 0
-4633 4774 0
-4631 4772 0
-4629 4770 0
-4627 4768 0
-4625 4766 0
-4623 4764 0
-4621 4762 0
-4619 4760 0
-4617 4758 0
-4615 4756 0
-4613 4754 0
-4612 4752 0
-4579 4782 0
-4579 -4641 4780 0
-4579 -4639 4778 0
-4579 -4637 4776 0
-4579 -4635 4774 0
-4579 -4633 4772 0
-4579 -4631 4770 0
-4579 -4629 4768 0
-4579 -4627 4766 0
-4579 -4625 4764 0
-4579 -4623 4762 0
-4579 -4621 4760 0
-4579 -4619 4758 0
-4579 -4617 4756 0
-4579 -4615 4754 0
-4579 -4613 4752 0
-4579 -4612 4750 0
-4577 4780 0
-4577 -4641 4778 0
-4577 -4639 4776 0
-4577 -4637 4774 0
-4577 -4635 4772 0
-4577 -4633 4770 0
-4577 -4631 4768 0
-4577 -4629 4766 0
-4577 -4627 4764 0
-4577 -4625 4762 0
-4577 -4623 4760 0
-4577 -4621 4758 0
-4577 -4619 4756 0
-4577 -4617 4754 0
-4577 -4615 4752 0
-4577 -4613 4750 0
-4577 -4612 4748 0
-4575 4778 0
-4575 -4641 4776 0
-4575 -4639 4774 0
-4575 -4637 4772 0
-4575 -4635 4770 0
-4575 -4633 4768 0
-4575 -4631 4766 0
-4575 -4629 4764 0
-4575 -4627 4762 0
-4575 -4625 4760 0
-4575 -4623 4758 0
-4575 -4621 4756 0
-4575 -4619 4754 0
-4575 -4617 4752 0
-4575 -4615 4750 0
-4575 -4613 4748 0
-4575 -4612 4746 0
-4573 4776 0
-4573 -4641 4774 0
-4573 -4639 4772 0
-4573 -4637 4770 0
-4573 -4635 4768 0
-4573 -4633 4766 0
-4573 -4631 4764 0
-4573 -4629 4762 0
-4573 -4627 4760 0
-4573 -4625 4758 0
-4573 -4623 4756 0
-4573 -4621 4754 0
-4573 -4619 4752 0
-4573 -4617 4750 0
-4573 -4615 4748 0
-4573 -4613 4746 0
-4573 -4612 4744 0
-4571 4774 0
-4571 -4641 4772 0
-4571 -4639 4770 0
-4571 -4637 4768 0
-4571 -4635 4766 0
-4571 -4633 4764 0
-4571 -4631 4762 0
-4571 -4629 4760 0
-4571 -4627 4758 0
-4571 -4625 4756 0
-4571 -4623 4754 0
-4571 -4621 4752 0
-4571 -4619 4750 0
-4571 -4617 4748 0
-4571 -4615 4746 0
-4571 -4613 4744 0
-4571 -4612 4742 0
-4569 4772 0
-4569 -4641 4770 0
-4569 -4639 4768 0
-4569 -4637 4766 0
-4569 -4635 4764 0
-4569 -4633 4762 0
-4569 -4631 4760 0
-4569 -4629 4758 0
-4569 -4627 4756 0
-4569 -4625 4754 0
-4569 -4623 4752 0
-4569 -4621 4750 0
-4569 -4619 4748 0
-4569 -4617 4746 0
-4569 -4615 4744 0
-4569 -4613 4742 0
-4569 -4612 4740 0
-4567 4770 0
-4567 -4641 4768 0
-4567 -4639 4766 0
-4567 -4637 4764 0
-4567 -4635 4762 0
-4567 -4633 4760 0
-4567 -4631 4758 0
-4567 -4629 4756 0
-4567 -4627 4754 0
-4567 -4625 4752 0
-4567 -4623 4750 0
-4567 -4621 4748 0
-4567 -4619 4746 0
-4567 -4617 4744 0
-4567 -4615 4742 0
-4567 -4613 4740 0
-4567 -4612 4738 0
-4565 4768 0
-4565 -4641 4766 0
-4565 -4639 4764 0
-4565 -4637 4762 0
-4565 -4635 4760 0
-4565 -4633 4758 0
-4565 -4631 4756 0
-4565 -4629 4754 0
-4565 -4627 4752 0
-4565 -4625 4750 0
-4565 -4623 4748 0
-4565 -4621 4746 0
-4565 -4619 4744 0
-4565 -4617 4742 0
-4565 -4615 4740 0
-4565 -4613 4738 0
-4565 -4612 4736 0
-4563 4766 0
-4563 -4641 4764 0
-4563 -4639 4762 0
-4563 -4637 4760 0
-4563 -4635 4758 0
-4563 -4633 4756 0
-4563 -4631 4754 0
-4563 -4629 4752 0
-4563 -4627 4750 0
-4563 -4625 4748 0
-4563 -4623 4746 0
-4563 -4621 4744 0
-4563 -4619 4742 0
-4563 -4617 4740 0
-4563 -4615 4738 0
-4563 -4613 4736 0
-4563 -4612 4734 0
-4561 4764 0
-4561 -4641 4762 0
-4561 -4639 4760 0
-4561 -4637 4758 0
-4561 -4635 4756 0
-4561 -4633 4754 0
-4561 -4631 4752 0
-4561 -4629 4750 0
-4561 -4627 4748 0
-4561 -4625 4746 0
-4561 -4623 4744 0
-4561 -4621 4742 0
-4561 -4619 4740 0
-4561 -4617 4738 0
-4561 -4615 4736 0
-4561 -4613 4734 0
-4561 -4612 4732 0
-4559 4762 0
-4559 -4641 4760 0
-4559 -4639 4758 0
-4559 -4637 4756 0
-4559 -4635 4754 0
-4559 -4633 4752 0
-4559 -4631 4750 0
-4559 -4629 4748 0
-4559 -4627 4746 0
-4559 -4625 4744 0
-4559 -4623 4742 0
-4559 -4621 4740 0
-4559 -4619 4738 0
-4559 -4617 4736 0
-4559 -4615 4734 0
-4559 -4613 4732 0
-4559 -4612 4730 0
-4557 4760 0
-4557 -4641 4758 0
-4557 -4639 4756 0
-4557 -4637 4754 0
-4557 -4635 4752 0
-4557 -4633 4750 0
-4557 -4631 4748 0
-4557 -4629 4746 0
-4557 -4627 4744 0
-4557 -4625 4742 0
-4557 -4623 4740 0
-4557 -4621 4738 0
-4557 -4619 4736 0
-4557 -4617 4734 0
-4557 -4615 4732 0
-4557 -4613 4730 0
-4557 -4612 4728 0
-4555 4758 0
-4555 -4641 4756 0
-4555 -4639 4754 0
-4555 -4637 4752 0
-4555 -4635 4750 0
-4555 -4633 4748 0
-4555 -4631 4746 0
-4555 -4629 4744 0
-4555 -4627 4742 0
-4555 -4625 4740 0
-4555 -4623 4738 0
-4555 -4621 4736 0
-4555 -4619 4734 0
-4555 -4617 4732 0
-4555 -4615 4730 0
-4555 -4613 4728 0
-4555 -4612 4726 0
-4553 4756 0
-4553 -4641 4754 0
-4553 -4639 4752 0
-4553 -4637 4750 0
-4553 -4635 4748 0
-4553 -4633 4746 0
-4553 -4631 4744 0
-4553 -4629 4742 0
-4553 -4627 4740 0
-4553 -4625 4738 0
-4553 -4623 4736 0
-4553 -4621 4734 0
-4553 -4619 4732 0
-4553 -4617 4730 0
-4553 -4615 4728 0
-4553 -4613 4726 0
-4553 -4612 4724 0
-4551 4754 0
-4551 -4641 4752 0
-4551 -4639 4750 0
-4551 -4637 4748 0
-4551 -4635 4746 0
-4551 -4633 4744 0
-4551 -4631 4742 0
-4551 -4629 4740 0
-4551 -4627 4738 0
-4551 -4625 4736 0
-4551 -4623 4734 0
-4551 -4621 4732 0
-4551 -4619 4730 0
-4551 -4617 4728 0
-4551 -4615 4726 0
-4551 -4613 4724 0
-4551 -4612 4722 0
-4550 4752 0
-4550 -4641 4750 0
-4550 -4639 4748 0
-4550 -4637 4746 0
-4550 -4635 4744 0
-4550 -4633 4742 0
-4550 -4631 4740 0
-4550 -4629 4738 0
-4550 -4627 4736 0
-4550 -4625 4734 0
-4550 -4623 4732 0
-4550 -4621 4730 0
-4550 -4619 4728 0
-4550 -4617 4726 0
-4550 -4615 4724 0
-4550 -4613 4722 0
-4550 -4612 4721 0
c (( - aux539 + shift(x_00004_00001, -1) + shift(x_00004_00009, -1))<=0)
527 -4784 0
528 -4785 0
530 -4787 0
532 -4789 0
534 -4791 0
536 -4793 0
538 -4795 0
540 -4797 0
407 -4784 0
407 527 -4785 0
407 528 -4787 0
407 530 -4789 0
407 532 -4791 0
407 534 -4793 0
407 536 -4795 0
407 538 -4797 0
407 540 -4799 0
408 -4785 0
408 527 -4787 0
408 528 -4789 0
408 530 -4791 0
408 532 -4793 0
408 534 -4795 0
408 536 -4797 0
408 538 -4799 0
408 540 -4801 0
410 -4787 0
410 527 -4789 0
410 528 -4791 0
410 530 -4793 0
410 532 -4795 0
410 534 -4797 0
410 536 -4799 0
410 538 -4801 0
410 540 -4803 0
412 -4789 0
412 527 -4791 0
412 528 -4793 0
412 530 -4795 0
412 532 -4797 0
412 534 -4799 0
412 536 -4801 0
412 538 -4803 0
412 540 -4805 0
414 -4791 0
414 527 -4793 0
414 528 -4795 0
414 530 -4797 0
414 532 -4799 0
414 534 -4801 0
414 536 -4803 0
414 538 -4805 0
414 540 -4807 0
416 -4793 0
416 527 -4795 0
416 528 -4797 0
416 530 -4799 0
416 532 -4801 0
416 534 -4803 0
416 536 -4805 0
416 538 -4807 0
416 540 -4809 0
418 -4795 0
418 527 -4797 0
418 528 -4799 0
418 530 -4801 0
418 532 -4803 0
418 534 -4805 0
418 536 -4807 0
418 538 -4809 0
418 540 -4811 0
420 -4797 0
420 527 -4799 0
420 528 -4801 0
420 530 -4803 0
420 532 -4805 0
420 534 -4807 0
420 536 -4809 0
420 538 -4811 0
420 540 -4813 0
c (0<=( - aux539 + shift(x_00004_00001, -1) + shift(x_00004_00009, -1)))
-540 4813 0
-538 4811 0
-536 4809 0
-534 4807 0
-532 4805 0
-530 4803 0
-528 4801 0
-527 4799 0
-420 4813 0
-420 -540 4811 0
-420 -538 4809 0
-420 -536 4807 0
-420 -534 4805 0
-420 -532 4803 0
-420 -530 4801 0
-420 -528 4799 0
-420 -527 4797 0
-418 4811 0
-418 -540 4809 0
-418 -538 4807 0
-418 -536 4805 0
-418 -534 4803 0
-418 -532 4801 0
-418 -530 4799 0
-418 -528 4797 0
-418 -527 4795 0
-416 4809 0
-416 -540 4807 0
-416 -538 4805 0
-416 -536 4803 0
-416 -534 4801 0
-416 -532 4799 0
-416 -530 4797 0
-416 -528 4795 0
-416 -527 4793 0
-414 4807 0
-414 -540 4805 0
-414 -538 4803 0
-414 -536 4801 0
-414 -534 4799 0
-414 -532 4797 0
-414 -530 4795 0
-414 -528 4793 0
-414 -527 4791 0
-412 4805 0
-412 -540 4803 0
-412 -538 4801 0
-412 -536 4799 0
-412 -534 4797 0
-412 -532 4795 0
-412 -530 4793 0
-412 -528 4791 0
-412 -527 4789 0
-410 4803 0
-410 -540 4801 0
-410 -538 4799 0
-410 -536 4797 0
-410 -534 4795 0
-410 -532 4793 0
-410 -530 4791 0
-410 -528 4789 0
-410 -527 4787 0
-408 4801 0
-408 -540 4799 0
-408 -538 4797 0
-408 -536 4795 0
-408 -534 4793 0
-408 -532 4791 0
-408 -530 4789 0
-408 -528 4787 0
-408 -527 4785 0
-407 4799 0
-407 -540 4797 0
-407 -538 4795 0
-407 -536 4793 0
-407 -534 4791 0
-407 -532 4789 0
-407 -530 4787 0
-407 -528 4785 0
-407 -527 4784 0
c (( - aux540 + shift(x_00004_00002, -1) + shift(x_00004_00008, -1))<=0)
512 -4815 0
513 -4816 0
515 -4818 0
517 -4820 0
519 -4822 0
521 -4824 0
523 -4826 0
525 -4828 0
422 -4815 0
422 512 -4816 0
422 513 -4818 0
422 515 -4820 0
422 517 -4822 0
422 519 -4824 0
422 521 -4826 0
422 523 -4828 0
422 525 -4830 0
423 -4816 0
423 512 -4818 0
423 513 -4820 0
423 515 -4822 0
423 517 -4824 0
423 519 -4826 0
423 521 -4828 0
423 523 -4830 0
423 525 -4832 0
425 -4818 0
425 512 -4820 0
425 513 -4822 0
425 515 -4824 0
425 517 -4826 0
425 519 -4828 0
425 521 -4830 0
425 523 -4832 0
425 525 -4834 0
427 -4820 0
427 512 -4822 0
427 513 -4824 0
427 515 -4826 0
427 517 -4828 0
427 519 -4830 0
427 521 -4832 0
427 523 -4834 0
427 525 -4836 0
429 -4822 0
429 512 -4824 0
429 513 -4826 0
429 515 -4828 0
429 517 -4830 0
429 519 -4832 0
429 521 -4834 0
429 523 -4836 0
429 525 -4838 0
431 -4824 0
431 512 -4826 0
431 513 -4828 0
431 515 -4830 0
431 517 -4832 0
431 519 -4834 0
431 521 -4836 0
431 523 -4838 0
431 525 -4840 0
433 -4826 0
433 512 -4828 0
433 513 -4830 0
433 515 -4832 0
433 517 -4834 0
433 519 -4836 0
433 521 -4838 0
433 523 -4840 0
433 525 -4842 0
435 -4828 0
435 512 -4830 0
435 513 -4832 0
435 515 -4834 0
435 517 -4836 0
435 519 -4838 0
435 521 -4840 0
435 523 -4842 0
435 525 -4844 0
c (0<=( - aux540 + shift(x_00004_00002, -1) + shift(x_00004_00008, -1)))
-525 4844 0
-523 4842 0
-521 4840 0
-519 4838 0
-517 4836 0
-515 4834 0
-513 4832 0
-512 4830 0
-435 4844 0
-435 -525 4842 0
-435 -523 4840 0
-435 -521 4838 0
-435 -519 4836 0
-435 -517 4834 0
-435 -515 4832 0
-435 -513 4830 0
-435 -512 4828 0
-433 4842 0
-433 -525 4840 0
-433 -523 4838 0
-433 -521 4836 0
-433 -519 4834 0
-433 -517 4832 0
-433 -515 4830 0
-433 -513 4828 0
-433 -512 4826 0
-431 4840 0
-431 -525 4838 0
-431 -523 4836 0
-431 -521 4834 0
-431 -519 4832 0
-431 -517 4830 0
-431 -515 4828 0
-431 -513 4826 0
-431 -512 4824 0
-429 4838 0
-429 -525 4836 0
-429 -523 4834 0
-429 -521 4832 0
-429 -519 4830 0
-429 -517 4828 0
-429 -515 4826 0
-429 -513 4824 0
-429 -512 4822 0
-427 4836 0
-427 -525 4834 0
-427 -523 4832 0
-427 -521 4830 0
-427 -519 4828 0
-427 -517 4826 0
-427 -515 4824 0
-427 -513 4822 0
-427 -512 4820 0
-425 4834 0
-425 -525 4832 0
-425 -523 4830 0
-425 -521 4828 0
-425 -519 4826 0
-425 -517 4824 0
-425 -515 4822 0
-425 -513 4820 0
-425 -512 4818 0
-423 4832 0
-423 -525 4830 0
-423 -523 4828 0
-423 -521 4826 0
-423 -519 4824 0
-423 -517 4822 0
-423 -515 4820 0
-423 -513 4818 0
-423 -512 4816 0
-422 4830 0
-422 -525 4828 0
-422 -523 4826 0
-422 -521 4824 0
-422 -519 4822 0
-422 -517 4820 0
-422 -515 4818 0
-422 -513 4816 0
-422 -512 4815 0
c (( - aux541 + shift(x_00004_00004, -1) + shift(x_00004_00007, -1))<=0)
497 -4846 0
498 -4847 0
500 -4849 0
502 -4851 0
504 -4853 0
506 -4855 0
508 -4857 0
510 -4859 0
452 -4846 0
452 497 -4847 0
452 498 -4849 0
452 500 -4851 0
452 502 -4853 0
452 504 -4855 0
452 506 -4857 0
452 508 -4859 0
452 510 -4861 0
453 -4847 0
453 497 -4849 0
453 498 -4851 0
453 500 -4853 0
453 502 -4855 0
453 504 -4857 0
453 506 -4859 0
453 508 -4861 0
453 510 -4863 0
455 -4849 0
455 497 -4851 0
455 498 -4853 0
455 500 -4855 0
455 502 -4857 0
455 504 -4859 0
455 506 -4861 0
455 508 -4863 0
455 510 -4865 0
457 -4851 0
457 497 -4853 0
457 498 -4855 0
457 500 -4857 0
457 502 -4859 0
457 504 -4861 0
457 506 -4863 0
457 508 -4865 0
457 510 -4867 0
459 -4853 0
459 497 -4855 0
459 498 -4857 0
459 500 -4859 0
459 502 -4861 0
459 504 -4863 0
459 506 -4865 0
459 508 -4867 0
459 510 -4869 0
461 -4855 0
461 497 -4857 0
461 498 -4859 0
461 500 -4861 0
461 502 -4863 0
461 504 -4865 0
461 506 -4867 0
461 508 -4869 0
461 510 -4871 0
463 -4857 0
463 497 -4859 0
463 498 -4861 0
463 500 -4863 0
463 502 -4865 0
463 504 -4867 0
463 506 -4869 0
463 508 -4871 0
463 510 -4873 0
465 -4859 0
465 497 -4861 0
465 498 -4863 0
465 500 -4865 0
465 502 -4867 0
465 504 -4869 0
465 506 -4871 0
465 508 -4873 0
465 510 -4875 0
c (0<=( - aux541 + shift(x_00004_00004, -1) + shift(x_00004_00007, -1)))
-510 4875 0
-508 4873 0
-506 4871 0
-504 4869 0
-502 4867 0
-500 4865 0
-498 4863 0
-497 4861 0
-465 4875 0
-465 -510 4873 0
-465 -508 4871 0
-465 -506 4869 0
-465 -504 4867 0
-465 -502 4865 0
-465 -500 4863 0
-465 -498 4861 0
-465 -497 4859 0
-463 4873 0
-463 -510 4871 0
-463 -508 4869 0
-463 -506 4867 0
-463 -504 4865 0
-463 -502 4863 0
-463 -500 4861 0
-463 -498 4859 0
-463 -497 4857 0
-461 4871 0
-461 -510 4869 0
-461 -508 4867 0
-461 -506 4865 0
-461 -504 4863 0
-461 -502 4861 0
-461 -500 4859 0
-461 -498 4857 0
-461 -497 4855 0
-459 4869 0
-459 -510 4867 0
-459 -508 4865 0
-459 -506 4863 0
-459 -504 4861 0
-459 -502 4859 0
-459 -500 4857 0
-459 -498 4855 0
-459 -497 4853 0
-457 4867 0
-457 -510 4865 0
-457 -508 4863 0
-457 -506 4861 0
-457 -504 4859 0
-457 -502 4857 0
-457 -500 4855 0
-457 -498 4853 0
-457 -497 4851 0
-455 4865 0
-455 -510 4863 0
-455 -508 4861 0
-455 -506 4859 0
-455 -504 4857 0
-455 -502 4855 0
-455 -500 4853 0
-455 -498 4851 0
-455 -497 4849 0
-453 4863 0
-453 -510 4861 0
-453 -508 4859 0
-453 -506 4857 0
-453 -504 4855 0
-453 -502 4853 0
-453 -500 4851 0
-453 -498 4849 0
-453 -497 4847 0
-452 4861 0
-452 -510 4859 0
-452 -508 4857 0
-452 -506 4855 0
-452 -504 4853 0
-452 -502 4851 0
-452 -500 4849 0
-452 -498 4847 0
-452 -497 4846 0
c (( - aux542 + shift(x_00004_00005, -1) + shift(x_00004_00006, -1))<=0)
482 -4877 0
483 -4878 0
485 -4880 0
487 -4882 0
489 -4884 0
491 -4886 0
493 -4888 0
495 -4890 0
467 -4877 0
467 482 -4878 0
467 483 -4880 0
467 485 -4882 0
467 487 -4884 0
467 489 -4886 0
467 491 -4888 0
467 493 -4890 0
467 495 -4892 0
468 -4878 0
468 482 -4880 0
468 483 -4882 0
468 485 -4884 0
468 487 -4886 0
468 489 -4888 0
468 491 -4890 0
468 493 -4892 0
468 495 -4894 0
470 -4880 0
470 482 -4882 0
470 483 -4884 0
470 485 -4886 0
470 487 -4888 0
470 489 -4890 0
470 491 -4892 0
470 493 -4894 0
470 495 -4896 0
472 -4882 0
472 482 -4884 0
472 483 -4886 0
472 485 -4888 0
472 487 -4890 0
472 489 -4892 0
472 491 -4894 0
472 493 -4896 0
472 495 -4898 0
474 -4884 0
474 482 -4886 0
474 483 -4888 0
474 485 -4890 0
474 487 -4892 0
474 489 -4894 0
474 491 -4896 0
474 493 -4898 0
474 495 -4900 0
476 -4886 0
476 482 -4888 0
476 483 -4890 0
476 485 -4892 0
476 487 -4894 0
476 489 -4896 0
476 491 -4898 0
476 493 -4900 0
476 495 -4902 0
478 -4888 0
478 482 -4890 0
478 483 -4892 0
478 485 -4894 0
478 487 -4896 0
478 489 -4898 0
478 491 -4900 0
478 493 -4902 0
478 495 -4904 0
480 -4890 0
480 482 -4892 0
480 483 -4894 0
480 485 -4896 0
480 487 -4898 0
480 489 -4900 0
480 491 -4902 0
480 493 -4904 0
480 495 -4906 0
c (0<=( - aux542 + shift(x_00004_00005, -1) + shift(x_00004_00006, -1)))
-495 4906 0
-493 4904 0
-491 4902 0
-489 4900 0
-487 4898 0
-485 4896 0
-483 4894 0
-482 4892 0
-480 4906 0
-480 -495 4904 0
-480 -493 4902 0
-480 -491 4900 0
-480 -489 4898 0
-480 -487 4896 0
-480 -485 4894 0
-480 -483 4892 0
-480 -482 4890 0
-478 4904 0
-478 -495 4902 0
-478 -493 4900 0
-478 -491 4898 0
-478 -489 4896 0
-478 -487 4894 0
-478 -485 4892 0
-478 -483 4890 0
-478 -482 4888 0
-476 4902 0
-476 -495 4900 0
-476 -493 4898 0
-476 -491 4896 0
-476 -489 4894 0
-476 -487 4892 0
-476 -485 4890 0
-476 -483 4888 0
-476 -482 4886 0
-474 4900 0
-474 -495 4898 0
-474 -493 4896 0
-474 -491 4894 0
-474 -489 4892 0
-474 -487 4890 0
-474 -485 4888 0
-474 -483 4886 0
-474 -482 4884 0
-472 4898 0
-472 -495 4896 0
-472 -493 4894 0
-472 -491 4892 0
-472 -489 4890 0
-472 -487 4888 0
-472 -485 4886 0
-472 -483 4884 0
-472 -482 4882 0
-470 4896 0
-470 -495 4894 0
-470 -493 4892 0
-470 -491 4890 0
-470 -489 4888 0
-470 -487 4886 0
-470 -485 4884 0
-470 -483 4882 0
-470 -482 4880 0
-468 4894 0
-468 -495 4892 0
-468 -493 4890 0
-468 -491 4888 0
-468 -489 4886 0
-468 -487 4884 0
-468 -485 4882 0
-468 -483 4880 0
-468 -482 4878 0
-467 4892 0
-467 -495 4890 0
-467 -493 4888 0
-467 -491 4886 0
-467 -489 4884 0
-467 -487 4882 0
-467 -485 4880 0
-467 -483 4878 0
-467 -482 4877 0
c ((aux542 - aux543 + shift(x_00004_00003, -1))<=0)
4877 -4908 0
4878 -4909 0
4880 -4911 0
4882 -4913 0
4884 -4915 0
4886 -4917 0
4888 -4919 0
4890 -4921 0
4892 -4923 0
4894 -4925 0
4896 -4927 0
4898 -4929 0
4900 -4931 0
4902 -4933 0
4904 -4935 0
4906 -4937 0
437 -4908 0
437 4877 -4909 0
437 4878 -4911 0
437 4880 -4913 0
437 4882 -4915 0
437 4884 -4917 0
437 4886 -4919 0
437 4888 -4921 0
437 4890 -4923 0
437 4892 -4925 0
437 4894 -4927 0
437 4896 -4929 0
437 4898 -4931 0
437 4900 -4933 0
437 4902 -4935 0
437 4904 -4937 0
437 4906 -4939 0
438 -4909 0
438 4877 -4911 0
438 4878 -4913 0
438 4880 -4915 0
438 4882 -4917 0
438 4884 -4919 0
438 4886 -4921 0
438 4888 -4923 0
438 4890 -4925 0
438 4892 -4927 0
438 4894 -4929 0
438 4896 -4931 0
438 4898 -4933 0
438 4900 -4935 0
438 4902 -4937 0
438 4904 -4939 0
438 4906 -4941 0
440 -4911 0
440 4877 -4913 0
440 4878 -4915 0
440 4880 -4917 0
440 4882 -4919 0
440 4884 -4921 0
440 4886 -4923 0
440 4888 -4925 0
440 4890 -4927 0
440 4892 -4929 0
440 4894 -4931 0
440 4896 -4933 0
440 4898 -4935 0
440 4900 -4937 0
440 4902 -4939 0
440 4904 -4941 0
440 4906 -4943 0
442 -4913 0
442 4877 -4915 0
442 4878 -4917 0
442 4880 -4919 0
442 4882 -4921 0
442 4884 -4923 0
442 4886 -4925 0
442 4888 -4927 0
442 4890 -4929 0
442 4892 -4931 0
442 4894 -4933 0
442 4896 -4935 0
442 4898 -4937 0
442 4900 -4939 0
442 4902 -4941 0
442 4904 -4943 0
442 4906 -4945 0
444 -4915 0
444 4877 -4917 0
444 4878 -4919 0
444 4880 -4921 0
444 4882 -4923 0
444 4884 -4925 0
444 4886 -4927 0
444 4888 -4929 0
444 4890 -4931 0
444 4892 -4933 0
444 4894 -4935 0
444 4896 -4937 0
444 4898 -4939 0
444 4900 -4941 0
444 4902 -4943 0
444 4904 -4945 0
444 4906 -4947 0
446 -4917 0
446 4877 -4919 0
446 4878 -4921 0
446 4880 -4923 0
446 4882 -4925 0
446 4884 -4927 0
446 4886 -4929 0
446 4888 -4931 0
446 4890 -4933 0
446 4892 -4935 0
446 4894 -4937 0
446 4896 -4939 0
446 4898 -4941 0
446 4900 -4943 0
446 4902 -4945 0
446 4904 -4947 0
446 4906 -4949 0
448 -4919 0
448 4877 -4921 0
448 4878 -4923 0
448 4880 -4925 0
448 4882 -4927 0
448 4884 -4929 0
448 4886 -4931 0
448 4888 -4933 0
448 4890 -4935 0
448 4892 -4937 0
448 4894 -4939 0
448 4896 -4941 0
448 4898 -4943 0
448 4900 -4945 0
448 4902 -4947 0
448 4904 -4949 0
448 4906 -4951 0
450 -4921 0
450 4877 -4923 0
450 4878 -4925 0
450 4880 -4927 0
450 4882 -4929 0
450 4884 -4931 0
450 4886 -4933 0
450 4888 -4935 0
450 4890 -4937 0
450 4892 -4939 0
450 4894 -4941 0
450 4896 -4943 0
450 4898 -4945 0
450 4900 -4947 0
450 4902 -4949 0
450 4904 -4951 0
450 4906 -4953 0
c (0<=(aux542 - aux543 + shift(x_00004_00003, -1)))
-4906 4953 0
-4904 4951 0
-4902 4949 0
-4900 4947 0
-4898 4945 0
-4896 4943 0
-4894 4941 0
-4892 4939 0
-4890 4937 0
-4888 4935 0
-4886 4933 0
-4884 4931 0
-4882 4929 0
-4880 4927 0
-4878 4925 0
-4877 4923 0
-450 4953 0
-450 -4906 4951 0
-450 -4904 4949 0
-450 -4902 4947 0
-450 -4900 4945 0
-450 -4898 4943 0
-450 -4896 4941 0
-450 -4894 4939 0
-450 -4892 4937 0
-450 -4890 4935 0
-450 -4888 4933 0
-450 -4886 4931 0
-450 -4884 4929 0
-450 -4882 4927 0
-450 -4880 4925 0
-450 -4878 4923 0
-450 -4877 4921 0
-448 4951 0
-448 -4906 4949 0
-448 -4904 4947 0
-448 -4902 4945 0
-448 -4900 4943 0
-448 -4898 4941 0
-448 -4896 4939 0
-448 -4894 4937 0
-448 -4892 4935 0
-448 -4890 4933 0
-448 -4888 4931 0
-448 -4886 4929 0
-448 -4884 4927 0
-448 -4882 4925 0
-448 -4880 4923 0
-448 -4878 4921 0
-448 -4877 4919 0
-446 4949 0
-446 -4906 4947 0
-446 -4904 4945 0
-446 -4902 4943 0
-446 -4900 4941 0
-446 -4898 4939 0
-446 -4896 4937 0
-446 -4894 4935 0
-446 -4892 4933 0
-446 -4890 4931 0
-446 -4888 4929 0
-446 -4886 4927 0
-446 -4884 4925 0
-446 -4882 4923 0
-446 -4880 4921 0
-446 -4878 4919 0
-446 -4877 4917 0
-444 4947 0
-444 -4906 4945 0
-444 -4904 4943 0
-444 -4902 4941 0
-444 -4900 4939 0
-444 -4898 4937 0
-444 -4896 4935 0
-444 -4894 4933 0
-444 -4892 4931 0
-444 -4890 4929 0
-444 -4888 4927 0
-444 -4886 4925 0
-444 -4884 4923 0
-444 -4882 4921 0
-444 -4880 4919 0
-444 -4878 4917 0
-444 -4877 4915 0
-442 4945 0
-442 -4906 4943 0
-442 -4904 4941 0
-442 -4902 4939 0
-442 -4900 4937 0
-442 -4898 4935 0
-442 -4896 4933 0
-442 -4894 4931 0
-442 -4892 4929 0
-442 -4890 4927 0
-442 -4888 4925 0
-442 -4886 4923 0
-442 -4884 4921 0
-442 -4882 4919 0
-442 -4880 4917 0
-442 -4878 4915 0
-442 -4877 4913 0
-440 4943 0
-440 -4906 4941 0
-440 -4904 4939 0
-440 -4902 4937 0
-440 -4900 4935 0
-440 -4898 4933 0
-440 -4896 4931 0
-440 -4894 4929 0
-440 -4892 4927 0
-440 -4890 4925 0
-440 -4888 4923 0
-440 -4886 4921 0
-440 -4884 4919 0
-440 -4882 4917 0
-440 -4880 4915 0
-440 -4878 4913 0
-440 -4877 4911 0
-438 4941 0
-438 -4906 4939 0
-438 -4904 4937 0
-438 -4902 4935 0
-438 -4900 4933 0
-438 -4898 4931 0
-438 -4896 4929 0
-438 -4894 4927 0
-438 -4892 4925 0
-438 -4890 4923 0
-438 -4888 4921 0
-438 -4886 4919 0
-438 -4884 4917 0
-438 -4882 4915 0
-438 -4880 4913 0
-438 -4878 4911 0
-438 -4877 4909 0
-437 4939 0
-437 -4906 4937 0
-437 -4904 4935 0
-437 -4902 4933 0
-437 -4900 4931 0
-437 -4898 4929 0
-437 -4896 4927 0
-437 -4894 4925 0
-437 -4892 4923 0
-437 -4890 4921 0
-437 -4888 4919 0
-437 -4886 4917 0
-437 -4884 4915 0
-437 -4882 4913 0
-437 -4880 4911 0
-437 -4878 4909 0
-437 -4877 4908 0
c ((aux539 + aux541 - aux544)<=0)
4846 -4955 0
4847 -4956 0
4849 -4958 0
4851 -4960 0
4853 -4962 0
4855 -4964 0
4857 -4966 0
4859 -4968 0
4861 -4970 0
4863 -4972 0
4865 -4974 0
4867 -4976 0
4869 -4978 0
4871 -4980 0
4873 -4982 0
4875 -4984 0
4784 -4955 0
4784 4846 -4956 0
4784 4847 -4958 0
4784 4849 -4960 0
4784 4851 -4962 0
4784 4853 -4964 0
4784 4855 -4966 0
4784 4857 -4968 0
4784 4859 -4970 0
4784 4861 -4972 0
4784 4863 -4974 0
4784 4865 -4976 0
4784 4867 -4978 0
4784 4869 -4980 0
4784 4871 -4982 0
4784 4873 -4984 0
4784 4875 -4986 0
4785 -4956 0
4785 4846 -4958 0
4785 4847 -4960 0
4785 4849 -4962 0
4785 4851 -4964 0
4785 4853 -4966 0
4785 4855 -4968 0
4785 4857 -4970 0
4785 4859 -4972 0
4785 4861 -4974 0
4785 4863 -4976 0
4785 4865 -4978 0
4785 4867 -4980 0
4785 4869 -4982 0
4785 4871 -4984 0
4785 4873 -4986 0
4785 4875 -4988 0
4787 -4958 0
4787 4846 -4960 0
4787 4847 -4962 0
4787 4849 -4964 0
4787 4851 -4966 0
4787 4853 -4968 0
4787 4855 -4970 0
4787 4857 -4972 0
4787 4859 -4974 0
4787 4861 -4976 0
4787 4863 -4978 0
4787 4865 -4980 0
4787 4867 -4982 0
4787 4869 -4984 0
4787 4871 -4986 0
4787 4873 -4988 0
4787 4875 -4990 0
4789 -4960 0
4789 4846 -4962 0
4789 4847 -4964 0
4789 4849 -4966 0
4789 4851 -4968 0
4789 4853 -4970 0
4789 4855 -4972 0
4789 4857 -4974 0
4789 4859 -4976 0
4789 4861 -4978 0
4789 4863 -4980 0
4789 4865 -4982 0
4789 4867 -4984 0
4789 4869 -4986 0
4789 4871 -4988 0
4789 4873 -4990 0
4789 4875 -4992 0
4791 -4962 0
4791 4846 -4964 0
4791 4847 -4966 0
4791 4849 -4968 0
4791 4851 -4970 0
4791 4853 -4972 0
4791 4855 -4974 0
4791 4857 -4976 0
4791 4859 -4978 0
4791 4861 -4980 0
4791 4863 -4982 0
4791 4865 -4984 0
4791 4867 -4986 0
4791 4869 -4988 0
4791 4871 -4990 0
4791 4873 -4992 0
4791 4875 -4994 0
4793 -4964 0
4793 4846 -4966 0
4793 4847 -4968 0
4793 4849 -4970 0
4793 4851 -4972 0
4793 4853 -4974 0
4793 4855 -4976 0
4793 4857 -4978 0
4793 4859 -4980 0
4793 4861 -4982 0
4793 4863 -4984 0
4793 4865 -4986 0
4793 4867 -4988 0
4793 4869 -4990 0
4793 4871 -4992 0
4793 4873 -4994 0
4793 4875 -4996 0
4795 -4966 0
4795 4846 -4968 0
4795 4847 -4970 0
4795 4849 -4972 0
4795 4851 -4974 0
4795 4853 -4976 0
4795 4855 -4978 0
4795 4857 -4980 0
4795 4859 -4982 0
4795 4861 -4984 0
4795 4863 -4986 0
4795 4865 -4988 0
4795 4867 -4990 0
4795 4869 -4992 0
4795 4871 -4994 0
4795 4873 -4996 0
4795 4875 -4998 0
4797 -4968 0
4797 4846 -4970 0
4797 4847 -4972 0
4797 4849 -4974 0
4797 4851 -4976 0
4797 4853 -4978 0
4797 4855 -4980 0
4797 4857 -4982 0
4797 4859 -4984 0
4797 4861 -4986 0
4797 4863 -4988 0
4797 4865 -4990 0
4797 4867 -4992 0
4797 4869 -4994 0
4797 4871 -4996 0
4797 4873 -4998 0
4797 4875 -5000 0
4799 -4970 0
4799 4846 -4972 0
4799 4847 -4974 0
4799 4849 -4976 0
4799 4851 -4978 0
4799 4853 -4980 0
4799 4855 -4982 0
4799 4857 -4984 0
4799 4859 -4986 0
4799 4861 -4988 0
4799 4863 -4990 0
4799 4865 -4992 0
4799 4867 -4994 0
4799 4869 -4996 0
4799 4871 -4998 0
4799 4873 -5000 0
4799 4875 -5002 0
4801 -4972 0
4801 4846 -4974 0
4801 4847 -4976 0
4801 4849 -4978 0
4801 4851 -4980 0
4801 4853 -4982 0
4801 4855 -4984 0
4801 4857 -4986 0
4801 4859 -4988 0
4801 4861 -4990 0
4801 4863 -4992 0
4801 4865 -4994 0
4801 4867 -4996 0
4801 4869 -4998 0
4801 4871 -5000 0
4801 4873 -5002 0
4801 4875 -5004 0
4803 -4974 0
4803 4846 -4976 0
4803 4847 -4978 0
4803 4849 -4980 0
4803 4851 -4982 0
4803 4853 -4984 0
4803 4855 -4986 0
4803 4857 -4988 0
4803 4859 -4990 0
4803 4861 -4992 0
4803 4863 -4994 0
4803 4865 -4996 0
4803 4867 -4998 0
4803 4869 -5000 0
4803 4871 -5002 0
4803 4873 -5004 0
4803 4875 -5006 0
4805 -4976 0
4805 4846 -4978 0
4805 4847 -4980 0
4805 4849 -4982 0
4805 4851 -4984 0
4805 4853 -4986 0
4805 4855 -4988 0
4805 4857 -4990 0
4805 4859 -4992 0
4805 4861 -4994 0
4805 4863 -4996 0
4805 4865 -4998 0
4805 4867 -5000 0
4805 4869 -5002 0
4805 4871 -5004 0
4805 4873 -5006 0
4805 4875 -5008 0
4807 -4978 0
4807 4846 -4980 0
4807 4847 -4982 0
4807 4849 -4984 0
4807 4851 -4986 0
4807 4853 -4988 0
4807 4855 -4990 0
4807 4857 -4992 0
4807 4859 -4994 0
4807 4861 -4996 0
4807 4863 -4998 0
4807 4865 -5000 0
4807 4867 -5002 0
4807 4869 -5004 0
4807 4871 -5006 0
4807 4873 -5008 0
4807 4875 -5010 0
4809 -4980 0
4809 4846 -4982 0
4809 4847 -4984 0
4809 4849 -4986 0
4809 4851 -4988 0
4809 4853 -4990 0
4809 4855 -4992 0
4809 4857 -4994 0
4809 4859 -4996 0
4809 4861 -4998 0
4809 4863 -5000 0
4809 4865 -5002 0
4809 4867 -5004 0
4809 4869 -5006 0
4809 4871 -5008 0
4809 4873 -5010 0
4809 4875 -5012 0
4811 -4982 0
4811 4846 -4984 0
4811 4847 -4986 0
4811 4849 -4988 0
4811 4851 -4990 0
4811 4853 -4992 0
4811 4855 -4994 0
4811 4857 -4996 0
4811 4859 -4998 0
4811 4861 -5000 0
4811 4863 -5002 0
4811 4865 -5004 0
4811 4867 -5006 0
4811 4869 -5008 0
4811 4871 -5010 0
4811 4873 -5012 0
4811 4875 -5014 0
4813 -4984 0
4813 4846 -4986 0
4813 4847 -4988 0
4813 4849 -4990 0
4813 4851 -4992 0
4813 4853 -4994 0
4813 4855 -4996 0
4813 4857 -4998 0
4813 4859 -5000 0
4813 4861 -5002 0
4813 4863 -5004 0
4813 4865 -5006 0
4813 4867 -5008 0
4813 4869 -5010 0
4813 4871 -5012 0
4813 4873 -5014 0
4813 4875 -5016 0
c (0<=(aux539 + aux541 - aux544))
-4875 5016 0
-4873 5014 0
-4871 5012 0
-4869 5010 0
-4867 5008 0
-4865 5006 0
-4863 5004 0
-4861 5002 0
-4859 5000 0
-4857 4998 0
-4855 4996 0
-4853 4994 0
-4851 4992 0
-4849 4990 0
-4847 4988 0
-4846 4986 0
-4813 5016 0
-4813 -4875 5014 0
-4813 -4873 5012 0
-4813 -4871 5010 0
-4813 -4869 5008 0
-4813 -4867 5006 0
-4813 -4865 5004 0
-4813 -4863 5002 0
-4813 -4861 5000 0
-4813 -4859 4998 0
-4813 -4857 4996 0
-4813 -4855 4994 0
-4813 -4853 4992 0
-4813 -4851 4990 0
-4813 -4849 4988 0
-4813 -4847 4986 0
-4813 -4846 4984 0
-4811 5014 0
-4811 -4875 5012 0
-4811 -4873 5010 0
-4811 -4871 5008 0
-4811 -4869 5006 0
-4811 -4867 5004 0
-4811 -4865 5002 0
-4811 -4863 5000 0
-4811 -4861 4998 0
-4811 -4859 4996 0
-4811 -4857 4994 0
-4811 -4855 4992 0
-4811 -4853 4990 0
-4811 -4851 4988 0
-4811 -4849 4986 0
-4811 -4847 4984 0
-4811 -4846 4982 0
-4809 5012 0
-4809 -4875 5010 0
-4809 -4873 5008 0
-4809 -4871 5006 0
-4809 -4869 5004 0
-4809 -4867 5002 0
-4809 -4865 5000 0
-4809 -4863 4998 0
-4809 -4861 4996 0
-4809 -4859 4994 0
-4809 -4857 4992 0
-4809 -4855 4990 0
-4809 -4853 4988 0
-4809 -4851 4986 0
-4809 -4849 4984 0
-4809 -4847 4982 0
-4809 -4846 4980 0
-4807 5010 0
-4807 -4875 5008 0
-4807 -4873 5006 0
-4807 -4871 5004 0
-4807 -4869 5002 0
-4807 -4867 5000 0
-4807 -4865 4998 0
-4807 -4863 4996 0
-4807 -4861 4994 0
-4807 -4859 4992 0
-4807 -4857 4990 0
-4807 -4855 4988 0
-4807 -4853 4986 0
-4807 -4851 4984 0
-4807 -4849 4982 0
-4807 -4847 4980 0
-4807 -4846 4978 0
-4805 5008 0
-4805 -4875 5006 0
-4805 -4873 5004 0
-4805 -4871 5002 0
-4805 -4869 5000 0
-4805 -4867 4998 0
-4805 -4865 4996 0
-4805 -4863 4994 0
-4805 -4861 4992 0
-4805 -4859 4990 0
-4805 -4857 4988 0
-4805 -4855 4986 0
-4805 -4853 4984 0
-4805 -4851 4982 0
-4805 -4849 4980 0
-4805 -4847 4978 0
-4805 -4846 4976 0
-4803 5006 0
-4803 -4875 5004 0
-4803 -4873 5002 0
-4803 -4871 5000 0
-4803 -4869 4998 0
-4803 -4867 4996 0
-4803 -4865 4994 0
-4803 -4863 4992 0
-4803 -4861 4990 0
-4803 -4859 4988 0
-4803 -4857 4986 0
-4803 -4855 4984 0
-4803 -4853 4982 0
-4803 -4851 4980 0
-4803 -4849 4978 0
-4803 -4847 4976 0
-4803 -4846 4974 0
-4801 5004 0
-4801 -4875 5002 0
-4801 -4873 5000 0
-4801 -4871 4998 0
-4801 -4869 4996 0
-4801 -4867 4994 0
-4801 -4865 4992 0
-4801 -4863 4990 0
-4801 -4861 4988 0
-4801 -4859 4986 0
-4801 -4857 4984 0
-4801 -4855 4982 0
-4801 -4853 4980 0
-4801 -4851 4978 0
-4801 -4849 4976 0
-4801 -4847 4974 0
-4801 -4846 4972 0
-4799 5002 0
-4799 -4875 5000 0
-4799 -4873 4998 0
-4799 -4871 4996 0
-4799 -4869 4994 0
-4799 -4867 4992 0
-4799 -4865 4990 0
-4799 -4863 4988 0
-4799 -4861 4986 0
-4799 -4859 4984 0
-4799 -4857 4982 0
-4799 -4855 4980 0
-4799 -4853 4978 0
-4799 -4851 4976 0
-4799 -4849 4974 0
-4799 -4847 4972 0
-4799 -4846 4970 0
-4797 5000 0
-4797 -4875 4998 0
-4797 -4873 4996 0
-4797 -4871 4994 0
-4797 -4869 4992 0
-4797 -4867 4990 0
-4797 -4865 4988 0
-4797 -4863 4986 0
-4797 -4861 4984 0
-4797 -4859 4982 0
-4797 -4857 4980 0
-4797 -4855 4978 0
-4797 -4853 4976 0
-4797 -4851 4974 0
-4797 -4849 4972 0
-4797 -4847 4970 0
-4797 -4846 4968 0
-4795 4998 0
-4795 -4875 4996 0
-4795 -4873 4994 0
-4795 -4871 4992 0
-4795 -4869 4990 0
-4795 -4867 4988 0
-4795 -4865 4986 0
-4795 -4863 4984 0
-4795 -4861 4982 0
-4795 -4859 4980 0
-4795 -4857 4978 0
-4795 -4855 4976 0
-4795 -4853 4974 0
-4795 -4851 4972 0
-4795 -4849 4970 0
-4795 -4847 4968 0
-4795 -4846 4966 0
-4793 4996 0
-4793 -4875 4994 0
-4793 -4873 4992 0
-4793 -4871 4990 0
-4793 -4869 4988 0
-4793 -4867 4986 0
-4793 -4865 4984 0
-4793 -4863 4982 0
-4793 -4861 4980 0
-4793 -4859 4978 0
-4793 -4857 4976 0
-4793 -4855 4974 0
-4793 -4853 4972 0
-4793 -4851 4970 0
-4793 -4849 4968 0
-4793 -4847 4966 0
-4793 -4846 4964 0
-4791 4994 0
-4791 -4875 4992 0
-4791 -4873 4990 0
-4791 -4871 4988 0
-4791 -4869 4986 0
-4791 -4867 4984 0
-4791 -4865 4982 0
-4791 -4863 4980 0
-4791 -4861 4978 0
-4791 -4859 4976 0
-4791 -4857 4974 0
-4791 -4855 4972 0
-4791 -4853 4970 0
-4791 -4851 4968 0
-4791 -4849 4966 0
-4791 -4847 4964 0
-4791 -4846 4962 0
-4789 4992 0
-4789 -4875 4990 0
-4789 -4873 4988 0
-4789 -4871 4986 0
-4789 -4869 4984 0
-4789 -4867 4982 0
-4789 -4865 4980 0
-4789 -4863 4978 0
-4789 -4861 4976 0
-4789 -4859 4974 0
-4789 -4857 4972 0
-4789 -4855 4970 0
-4789 -4853 4968 0
-4789 -4851 4966 0
-4789 -4849 4964 0
-4789 -4847 4962 0
-4789 -4846 4960 0
-4787 4990 0
-4787 -4875 4988 0
-4787 -4873 4986 0
-4787 -4871 4984 0
-4787 -4869 4982 0
-4787 -4867 4980 0
-4787 -4865 4978 0
-4787 -4863 4976 0
-4787 -4861 4974 0
-4787 -4859 4972 0
-4787 -4857 4970 0
-4787 -4855 4968 0
-4787 -4853 4966 0
-4787 -4851 4964 0
-4787 -4849 4962 0
-4787 -4847 4960 0
-4787 -4846 4958 0
-4785 4988 0
-4785 -4875 4986 0
-4785 -4873 4984 0
-4785 -4871 4982 0
-4785 -4869 4980 0
-4785 -4867 4978 0
-4785 -4865 4976 0
-4785 -4863 4974 0
-4785 -4861 4972 0
-4785 -4859 4970 0
-4785 -4857 4968 0
-4785 -4855 4966 0
-4785 -4853 4964 0
-4785 -4851 4962 0
-4785 -4849 4960 0
-4785 -4847 4958 0
-4785 -4846 4956 0
-4784 4986 0
-4784 -4875 4984 0
-4784 -4873 4982 0
-4784 -4871 4980 0
-4784 -4869 4978 0
-4784 -4867 4976 0
-4784 -4865 4974 0
-4784 -4863 4972 0
-4784 -4861 4970 0
-4784 -4859 4968 0
-4784 -4857 4966 0
-4784 -4855 4964 0
-4784 -4853 4962 0
-4784 -4851 4960 0
-4784 -4849 4958 0
-4784 -4847 4956 0
-4784 -4846 4955 0
c (( - aux545 + shift(x_00005_00001, -1) + shift(x_00005_00009, -1))<=0)
662 -5018 0
663 -5019 0
665 -5021 0
667 -5023 0
669 -5025 0
671 -5027 0
673 -5029 0
675 -5031 0
542 -5018 0
542 662 -5019 0
542 663 -5021 0
542 665 -5023 0
542 667 -5025 0
542 669 -5027 0
542 671 -5029 0
542 673 -5031 0
542 675 -5033 0
543 -5019 0
543 662 -5021 0
543 663 -5023 0
543 665 -5025 0
543 667 -5027 0
543 669 -5029 0
543 671 -5031 0
543 673 -5033 0
543 675 -5035 0
545 -5021 0
545 662 -5023 0
545 663 -5025 0
545 665 -5027 0
545 667 -5029 0
545 669 -5031 0
545 671 -5033 0
545 673 -5035 0
545 675 -5037 0
547 -5023 0
547 662 -5025 0
547 663 -5027 0
547 665 -5029 0
547 667 -5031 0
547 669 -5033 0
547 671 -5035 0
547 673 -5037 0
547 675 -5039 0
549 -5025 0
549 662 -5027 0
549 663 -5029 0
549 665 -5031 0
549 667 -5033 0
549 669 -5035 0
549 671 -5037 0
549 673 -5039 0
549 675 -5041 0
551 -5027 0
551 662 -5029 0
551 663 -5031 0
551 665 -5033 0
551 667 -5035 0
551 669 -5037 0
551 671 -5039 0
551 673 -5041 0
551 675 -5043 0
553 -5029 0
553 662 -5031 0
553 663 -5033 0
553 665 -5035 0
553 667 -5037 0
553 669 -5039 0
553 671 -5041 0
553 673 -5043 0
553 675 -5045 0
555 -5031 0
555 662 -5033 0
555 663 -5035 0
555 665 -5037 0
555 667 -5039 0
555 669 -5041 0
555 671 -5043 0
555 673 -5045 0
555 675 -5047 0
c (0<=( - aux545 + shift(x_00005_00001, -1) + shift(x_00005_00009, -1)))
-675 5047 0
-673 5045 0
-671 5043 0
-669 5041 0
-667 5039 0
-665 5037 0
-663 5035 0
-662 5033 0
-555 5047 0
-555 -675 5045 0
-555 -673 5043 0
-555 -671 5041 0
-555 -669 5039 0
-555 -667 5037 0
-555 -665 5035 0
-555 -663 5033 0
-555 -662 5031 0
-553 5045 0
-553 -675 5043 0
-553 -673 5041 0
-553 -671 5039 0
-553 -669 5037 0
-553 -667 5035 0
-553 -665 5033 0
-553 -663 5031 0
-553 -662 5029 0
-551 5043 0
-551 -675 5041 0
-551 -673 5039 0
-551 -671 5037 0
-551 -669 5035 0
-551 -667 5033 0
-551 -665 5031 0
-551 -663 5029 0
-551 -662 5027 0
-549 5041 0
-549 -675 5039 0
-549 -673 5037 0
-549 -671 5035 0
-549 -669 5033 0
-549 -667 5031 0
-549 -665 5029 0
-549 -663 5027 0
-549 -662 5025 0
-547 5039 0
-547 -675 5037 0
-547 -673 5035 0
-547 -671 5033 0
-547 -669 5031 0
-547 -667 5029 0
-547 -665 5027 0
-547 -663 5025 0
-547 -662 5023 0
-545 5037 0
-545 -675 5035 0
-545 -673 5033 0
-545 -671 5031 0
-545 -669 5029 0
-545 -667 5027 0
-545 -665 5025 0
-545 -663 5023 0
-545 -662 5021 0
-543 5035 0
-543 -675 5033 0
-543 -673 5031 0
-543 -671 5029 0
-543 -669 5027 0
-543 -667 5025 0
-543 -665 5023 0
-543 -663 5021 0
-543 -662 5019 0
-542 5033 0
-542 -675 5031 0
-542 -673 5029 0
-542 -671 5027 0
-542 -669 5025 0
-542 -667 5023 0
-542 -665 5021 0
-542 -663 5019 0
-542 -662 5018 0
c (( - aux546 + shift(x_00005_00002, -1) + shift(x_00005_00008, -1))<=0)
647 -5049 0
648 -5050 0
650 -5052 0
652 -5054 0
654 -5056 0
656 -5058 0
658 -5060 0
660 -5062 0
557 -5049 0
557 647 -5050 0
557 648 -5052 0
557 650 -5054 0
557 652 -5056 0
557 654 -5058 0
557 656 -5060 0
557 658 -5062 0
557 660 -5064 0
558 -5050 0
558 647 -5052 0
558 648 -5054 0
558 650 -5056 0
558 652 -5058 0
558 654 -5060 0
558 656 -5062 0
558 658 -5064 0
558 660 -5066 0
560 -5052 0
560 647 -5054 0
560 648 -5056 0
560 650 -5058 0
560 652 -5060 0
560 654 -5062 0
560 656 -5064 0
560 658 -5066 0
560 660 -5068 0
562 -5054 0
562 647 -5056 0
562 648 -5058 0
562 650 -5060 0
562 652 -5062 0
562 654 -5064 0
562 656 -5066 0
562 658 -5068 0
562 660 -5070 0
564 -5056 0
564 647 -5058 0
564 648 -5060 0
564 650 -5062 0
564 652 -5064 0
564 654 -5066 0
564 656 -5068 0
564 658 -5070 0
564 660 -5072 0
566 -5058 0
566 647 -5060 0
566 648 -5062 0
566 650 -5064 0
566 652 -5066 0
566 654 -5068 0
566 656 -5070 0
566 658 -5072 0
566 660 -5074 0
568 -5060 0
568 647 -5062 0
568 648 -5064 0
568 650 -5066 0
568 652 -5068 0
568 654 -5070 0
568 656 -5072 0
568 658 -5074 0
568 660 -5076 0
570 -5062 0
570 647 -5064 0
570 648 -5066 0
570 650 -5068 0
570 652 -5070 0
570 654 -5072 0
570 656 -5074 0
570 658 -5076 0
570 660 -5078 0
c (0<=( - aux546 + shift(x_00005_00002, -1) + shift(x_00005_00008, -1)))
-660 5078 0
-658 5076 0
-656 5074 0
-654 5072 0
-652 5070 0
-650 5068 0
-648 5066 0
-647 5064 0
-570 5078 0
-570 -660 5076 0
-570 -658 5074 0
-570 -656 5072 0
-570 -654 5070 0
-570 -652 5068 0
-570 -650 5066 0
-570 -648 5064 0
-570 -647 5062 0
-568 5076 0
-568 -660 5074 0
-568 -658 5072 0
-568 -656 5070 0
-568 -654 5068 0
-568 -652 5066 0
-568 -650 5064 0
-568 -648 5062 0
-568 -647 5060 0
-566 5074 0
-566 -660 5072 0
-566 -658 5070 0
-566 -656 5068 0
-566 -654 5066 0
-566 -652 5064 0
-566 -650 5062 0
-566 -648 5060 0
-566 -647 5058 0
-564 5072 0
-564 -660 5070 0
-564 -658 5068 0
-564 -656 5066 0
-564 -654 5064 0
-564 -652 5062 0
-564 -650 5060 0
-564 -648 5058 0
-564 -647 5056 0
-562 5070 0
-562 -660 5068 0
-562 -658 5066 0
-562 -656 5064 0
-562 -654 5062 0
-562 -652 5060 0
-562 -650 5058 0
-562 -648 5056 0
-562 -647 5054 0
-560 5068 0
-560 -660 5066 0
-560 -658 5064 0
-560 -656 5062 0
-560 -654 5060 0
-560 -652 5058 0
-560 -650 5056 0
-560 -648 5054 0
-560 -647 5052 0
-558 5066 0
-558 -660 5064 0
-558 -658 5062 0
-558 -656 5060 0
-558 -654 5058 0
-558 -652 5056 0
-558 -650 5054 0
-558 -648 5052 0
-558 -647 5050 0
-557 5064 0
-557 -660 5062 0
-557 -658 5060 0
-557 -656 5058 0
-557 -654 5056 0
-557 -652 5054 0
-557 -650 5052 0
-557 -648 5050 0
-557 -647 5049 0
c (( - aux547 + shift(x_00005_00004, -1) + shift(x_00005_00007, -1))<=0)
632 -5080 0
633 -5081 0
635 -5083 0
637 -5085 0
639 -5087 0
641 -5089 0
643 -5091 0
645 -5093 0
587 -5080 0
587 632 -5081 0
587 633 -5083 0
587 635 -5085 0
587 637 -5087 0
587 639 -5089 0
587 641 -5091 0
587 643 -5093 0
587 645 -5095 0
588 -5081 0
588 632 -5083 0
588 633 -5085 0
588 635 -5087 0
588 637 -5089 0
588 639 -5091 0
588 641 -5093 0
588 643 -5095 0
588 645 -5097 0
590 -5083 0
590 632 -5085 0
590 633 -5087 0
590 635 -5089 0
590 637 -5091 0
590 639 -5093 0
590 641 -5095 0
590 643 -5097 0
590 645 -5099 0
592 -5085 0
592 632 -5087 0
592 633 -5089 0
592 635 -5091 0
592 637 -5093 0
592 639 -5095 0
592 641 -5097 0
592 643 -5099 0
592 645 -5101 0
594 -5087 0
594 632 -5089 0
594 633 -5091 0
594 635 -5093 0
594 637 -5095 0
594 639 -5097 0
594 641 -5099 0
594 643 -5101 0
594 645 -5103 0
596 -5089 0
596 632 -5091 0
596 633 -5093 0
596 635 -5095 0
596 637 -5097 0
596 639 -5099 0
596 641 -5101 0
596 643 -5103 0
596 645 -5105 0
598 -5091 0
598 632 -5093 0
598 633 -5095 0
598 635 -5097 0
598 637 -5099 0
598 639 -5101 0
598 641 -5103 0
598 643 -5105 0
598 645 -5107 0
600 -5093 0
600 632 -5095 0
600 633 -5097 0
600 635 -5099 0
600 637 -5101 0
600 639 -5103 0
600 641 -5105 0
600 643 -5107 0
600 645 -5109 0
c (0<=( - aux547 + shift(x_00005_00004, -1) + shift(x_00005_00007, -1)))
-645 5109 0
-643 5107 0
-641 5105 0
-639 5103 0
-637 5101 0
-635 5099 0
-633 5097 0
-632 5095 0
-600 5109 0
-600 -645 5107 0
-600 -643 5105 0
-600 -641 5103 0
-600 -639 5101 0
-600 -637 5099 0
-600 -635 5097 0
-600 -633 5095 0
-600 -632 5093 0
-598 5107 0
-598 -645 5105 0
-598 -643 5103 0
-598 -641 5101 0
-598 -639 5099 0
-598 -637 5097 0
-598 -635 5095 0
-598 -633 5093 0
-598 -632 5091 0
-596 5105 0
-596 -645 5103 0
-596 -643 5101 0
-596 -641 5099 0
-596 -639 5097 0
-596 -637 5095 0
-596 -635 5093 0
-596 -633 5091 0
-596 -632 5089 0
-594 5103 0
-594 -645 5101 0
-594 -643 5099 0
-594 -641 5097 0
-594 -639 5095 0
-594 -637 5093 0
-594 -635 5091 0
-594 -633 5089 0
-594 -632 5087 0
-592 5101 0
-592 -645 5099 0
-592 -643 5097 0
-592 -641 5095 0
-592 -639 5093 0
-592 -637 5091 0
-592 -635 5089 0
-592 -633 5087 0
-592 -632 5085 0
-590 5099 0
-590 -645 5097 0
-590 -643 5095 0
-590 -641 5093 0
-590 -639 5091 0
-590 -637 5089 0
-590 -635 5087 0
-590 -633 5085 0
-590 -632 5083 0
-588 5097 0
-588 -645 5095 0
-588 -643 5093 0
-588 -641 5091 0
-588 -639 5089 0
-588 -637 5087 0
-588 -635 5085 0
-588 -633 5083 0
-588 -632 5081 0
-587 5095 0
-587 -645 5093 0
-587 -643 5091 0
-587 -641 5089 0
-587 -639 5087 0
-587 -637 5085 0
-587 -635 5083 0
-587 -633 5081 0
-587 -632 5080 0
c (( - aux548 + shift(x_00005_00005, -1) + shift(x_00005_00006, -1))<=0)
617 -5111 0
618 -5112 0
620 -5114 0
622 -5116 0
624 -5118 0
626 -5120 0
628 -5122 0
630 -5124 0
602 -5111 0
602 617 -5112 0
602 618 -5114 0
602 620 -5116 0
602 622 -5118 0
602 624 -5120 0
602 626 -5122 0
602 628 -5124 0
602 630 -5126 0
603 -5112 0
603 617 -5114 0
603 618 -5116 0
603 620 -5118 0
603 622 -5120 0
603 624 -5122 0
603 626 -5124 0
603 628 -5126 0
603 630 -5128 0
605 -5114 0
605 617 -5116 0
605 618 -5118 0
605 620 -5120 0
605 622 -5122 0
605 624 -5124 0
605 626 -5126 0
605 628 -5128 0
605 630 -5130 0
607 -5116 0
607 617 -5118 0
607 618 -5120 0
607 620 -5122 0
607 622 -5124 0
607 624 -5126 0
607 626 -5128 0
607 628 -5130 0
607 630 -5132 0
609 -5118 0
609 617 -5120 0
609 618 -5122 0
609 620 -5124 0
609 622 -5126 0
609 624 -5128 0
609 626 -5130 0
609 628 -5132 0
609 630 -5134 0
611 -5120 0
611 617 -5122 0
611 618 -5124 0
611 620 -5126 0
611 622 -5128 0
611 624 -5130 0
611 626 -5132 0
611 628 -5134 0
611 630 -5136 0
613 -5122 0
613 617 -5124 0
613 618 -5126 0
613 620 -5128 0
613 622 -5130 0
613 624 -5132 0
613 626 -5134 0
613 628 -5136 0
613 630 -5138 0
615 -5124 0
615 617 -5126 0
615 618 -5128 0
615 620 -5130 0
615 622 -5132 0
615 624 -5134 0
615 626 -5136 0
615 628 -5138 0
615 630 -5140 0
c (0<=( - aux548 + shift(x_00005_00005, -1) + shift(x_00005_00006, -1)))
-630 5140 0
-628 5138 0
-626 5136 0
-624 5134 0
-622 5132 0
-620 5130 0
-618 5128 0
-617 5126 0
-615 5140 0
-615 -630 5138 0
-615 -628 5136 0
-615 -626 5134 0
-615 -624 5132 0
-615 -622 5130 0
-615 -620 5128 0
-615 -618 5126 0
-615 -617 5124 0
-613 5138 0
-613 -630 5136 0
-613 -628 5134 0
-613 -626 5132 0
-613 -624 5130 0
-613 -622 5128 0
-613 -620 5126 0
-613 -618 5124 0
-613 -617 5122 0
-611 5136 0
-611 -630 5134 0
-611 -628 5132 0
-611 -626 5130 0
-611 -624 5128 0
-611 -622 5126 0
-611 -620 5124 0
-611 -618 5122 0
-611 -617 5120 0
-609 5134 0
-609 -630 5132 0
-609 -628 5130 0
-609 -626 5128 0
-609 -624 5126 0
-609 -622 5124 0
-609 -620 5122 0
-609 -618 5120 0
-609 -617 5118 0
-607 5132 0
-607 -630 5130 0
-607 -628 5128 0
-607 -626 5126 0
-607 -624 5124 0
-607 -622 5122 0
-607 -620 5120 0
-607 -618 5118 0
-607 -617 5116 0
-605 5130 0
-605 -630 5128 0
-605 -628 5126 0
-605 -626 5124 0
-605 -624 5122 0
-605 -622 5120 0
-605 -620 5118 0
-605 -618 5116 0
-605 -617 5114 0
-603 5128 0
-603 -630 5126 0
-603 -628 5124 0
-603 -626 5122 0
-603 -624 5120 0
-603 -622 5118 0
-603 -620 5116 0
-603 -618 5114 0
-603 -617 5112 0
-602 5126 0
-602 -630 5124 0
-602 -628 5122 0
-602 -626 5120 0
-602 -624 5118 0
-602 -622 5116 0
-602 -620 5114 0
-602 -618 5112 0
-602 -617 5111 0
c ((aux548 - aux549 + shift(x_00005_00003, -1))<=0)
5111 -5142 0
5112 -5143 0
5114 -5145 0
5116 -5147 0
5118 -5149 0
5120 -5151 0
5122 -5153 0
5124 -5155 0
5126 -5157 0
5128 -5159 0
5130 -5161 0
5132 -5163 0
5134 -5165 0
5136 -5167 0
5138 -5169 0
5140 -5171 0
572 -5142 0
572 5111 -5143 0
572 5112 -5145 0
572 5114 -5147 0
572 5116 -5149 0
572 5118 -5151 0
572 5120 -5153 0
572 5122 -5155 0
572 5124 -5157 0
572 5126 -5159 0
572 5128 -5161 0
572 5130 -5163 0
572 5132 -5165 0
572 5134 -5167 0
572 5136 -5169 0
572 5138 -5171 0
572 5140 -5173 0
573 -5143 0
573 5111 -5145 0
573 5112 -5147 0
573 5114 -5149 0
573 5116 -5151 0
573 5118 -5153 0
573 5120 -5155 0
573 5122 -5157 0
573 5124 -5159 0
573 5126 -5161 0
573 5128 -5163 0
573 5130 -5165 0
573 5132 -5167 0
573 5134 -5169 0
573 5136 -5171 0
573 5138 -5173 0
573 5140 -5175 0
575 -5145 0
575 5111 -5147 0
575 5112 -5149 0
575 5114 -5151 0
575 5116 -5153 0
575 5118 -5155 0
575 5120 -5157 0
575 5122 -5159 0
575 5124 -5161 0
575 5126 -5163 0
575 5128 -5165 0
575 5130 -5167 0
575 5132 -5169 0
575 5134 -5171 0
575 5136 -5173 0
575 5138 -5175 0
575 5140 -5177 0
577 -5147 0
577 5111 -5149 0
577 5112 -5151 0
577 5114 -5153 0
577 5116 -5155 0
577 5118 -5157 0
577 5120 -5159 0
577 5122 -5161 0
577 5124 -5163 0
577 5126 -5165 0
577 5128 -5167 0
577 5130 -5169 0
577 5132 -5171 0
577 5134 -5173 0
577 5136 -5175 0
577 5138 -5177 0
577 5140 -5179 0
579 -5149 0
579 5111 -5151 0
579 5112 -5153 0
579 5114 -5155 0
579 5116 -5157 0
579 5118 -5159 0
579 5120 -5161 0
579 5122 -5163 0
579 5124 -5165 0
579 5126 -5167 0
579 5128 -5169 0
579 5130 -5171 0
579 5132 -5173 0
579 5134 -5175 0
579 5136 -5177 0
579 5138 -5179 0
579 5140 -5181 0
581 -5151 0
581 5111 -5153 0
581 5112 -5155 0
581 5114 -5157 0
581 5116 -5159 0
581 5118 -5161 0
581 5120 -5163 0
581 5122 -5165 0
581 5124 -5167 0
581 5126 -5169 0
581 5128 -5171 0
581 5130 -5173 0
581 5132 -5175 0
581 5134 -5177 0
581 5136 -5179 0
581 5138 -5181 0
581 5140 -5183 0
583 -5153 0
583 5111 -5155 0
583 5112 -5157 0
583 5114 -5159 0
583 5116 -5161 0
583 5118 -5163 0
583 5120 -5165 0
583 5122 -5167 0
583 5124 -5169 0
583 5126 -5171 0
583 5128 -5173 0
583 5130 -5175 0
583 5132 -5177 0
583 5134 -5179 0
583 5136 -5181 0
583 5138 -5183 0
583 5140 -5185 0
585 -5155 0
585 5111 -5157 0
585 5112 -5159 0
585 5114 -5161 0
585 5116 -5163 0
585 5118 -5165 0
585 5120 -5167 0
585 5122 -5169 0
585 5124 -5171 0
585 5126 -5173 0
585 5128 -5175 0
585 5130 -5177 0
585 5132 -5179 0
585 5134 -5181 0
585 5136 -5183 0
585 5138 -5185 0
585 5140 -5187 0
c (0<=(aux548 - aux549 + shift(x_00005_00003, -1)))
-5140 5187 0
-5138 5185 0
-5136 5183 0
-5134 5181 0
-5132 5179 0
-5130 5177 0
-5128 5175 0
-5126 5173 0
-5124 5171 0
-5122 5169 0
-5120 5167 0
-5118 5165 0
-5116 5163 0
-5114 5161 0
-5112 5159 0
-5111 5157 0
-585 5187 0
-585 -5140 5185 0
-585 -5138 5183 0
-585 -5136 5181 0
-585 -5134 5179 0
-585 -5132 5177 0
-585 -5130 5175 0
-585 -5128 5173 0
-585 -5126 5171 0
-585 -5124 5169 0
-585 -5122 5167 0
-585 -5120 5165 0
-585 -5118 5163 0
-585 -5116 5161 0
-585 -5114 5159 0
-585 -5112 5157 0
-585 -5111 5155 0
-583 5185 0
-583 -5140 5183 0
-583 -5138 5181 0
-583 -5136 5179 0
-583 -5134 5177 0
-583 -5132 5175 0
-583 -5130 5173 0
-583 -5128 5171 0
-583 -5126 5169 0
-583 -5124 5167 0
-583 -5122 5165 0
-583 -5120 5163 0
-583 -5118 5161 0
-583 -5116 5159 0
-583 -5114 5157 0
-583 -5112 5155 0
-583 -5111 5153 0
-581 5183 0
-581 -5140 5181 0
-581 -5138 5179 0
-581 -5136 5177 0
-581 -5134 5175 0
-581 -5132 5173 0
-581 -5130 5171 0
-581 -5128 5169 0
-581 -5126 5167 0
-581 -5124 5165 0
-581 -5122 5163 0
-581 -5120 5161 0
-581 -5118 5159 0
-581 -5116 5157 0
-581 -5114 5155 0
-581 -5112 5153 0
-581 -5111 5151 0
-579 5181 0
-579 -5140 5179 0
-579 -5138 5177 0
-579 -5136 5175 0
-579 -5134 5173 0
-579 -5132 5171 0
-579 -5130 5169 0
-579 -5128 5167 0
-579 -5126 5165 0
-579 -5124 5163 0
-579 -5122 5161 0
-579 -5120 5159 0
-579 -5118 5157 0
-579 -5116 5155 0
-579 -5114 5153 0
-579 -5112 5151 0
-579 -5111 5149 0
-577 5179 0
-577 -5140 5177 0
-577 -5138 5175 0
-577 -5136 5173 0
-577 -5134 5171 0
-577 -5132 5169 0
-577 -5130 5167 0
-577 -5128 5165 0
-577 -5126 5163 0
-577 -5124 5161 0
-577 -5122 5159 0
-577 -5120 5157 0
-577 -5118 5155 0
-577 -5116 5153 0
-577 -5114 5151 0
-577 -5112 5149 0
-577 -5111 5147 0
-575 5177 0
-575 -5140 5175 0
-575 -5138 5173 0
-575 -5136 5171 0
-575 -5134 5169 0
-575 -5132 5167 0
-575 -5130 5165 0
-575 -5128 5163 0
-575 -5126 5161 0
-575 -5124 5159 0
-575 -5122 5157 0
-575 -5120 5155 0
-575 -5118 5153 0
-575 -5116 5151 0
-575 -5114 5149 0
-575 -5112 5147 0
-575 -5111 5145 0
-573 5175 0
-573 -5140 5173 0
-573 -5138 5171 0
-573 -5136 5169 0
-573 -5134 5167 0
-573 -5132 5165 0
-573 -5130 5163 0
-573 -5128 5161 0
-573 -5126 5159 0
-573 -5124 5157 0
-573 -5122 5155 0
-573 -5120 5153 0
-573 -5118 5151 0
-573 -5116 5149 0
-573 -5114 5147 0
-573 -5112 5145 0
-573 -5111 5143 0
-572 5173 0
-572 -5140 5171 0
-572 -5138 5169 0
-572 -5136 5167 0
-572 -5134 5165 0
-572 -5132 5163 0
-572 -5130 5161 0
-572 -5128 5159 0
-572 -5126 5157 0
-572 -5124 5155 0
-572 -5122 5153 0
-572 -5120 5151 0
-572 -5118 5149 0
-572 -5116 5147 0
-572 -5114 5145 0
-572 -5112 5143 0
-572 -5111 5142 0
c ((aux545 + aux547 - aux550)<=0)
5080 -5189 0
5081 -5190 0
5083 -5192 0
5085 -5194 0
5087 -5196 0
5089 -5198 0
5091 -5200 0
5093 -5202 0
5095 -5204 0
5097 -5206 0
5099 -5208 0
5101 -5210 0
5103 -5212 0
5105 -5214 0
5107 -5216 0
5109 -5218 0
5018 -5189 0
5018 5080 -5190 0
5018 5081 -5192 0
5018 5083 -5194 0
5018 5085 -5196 0
5018 5087 -5198 0
5018 5089 -5200 0
5018 5091 -5202 0
5018 5093 -5204 0
5018 5095 -5206 0
5018 5097 -5208 0
5018 5099 -5210 0
5018 5101 -5212 0
5018 5103 -5214 0
5018 5105 -5216 0
5018 5107 -5218 0
5018 5109 -5220 0
5019 -5190 0
5019 5080 -5192 0
5019 5081 -5194 0
5019 5083 -5196 0
5019 5085 -5198 0
5019 5087 -5200 0
5019 5089 -5202 0
5019 5091 -5204 0
5019 5093 -5206 0
5019 5095 -5208 0
5019 5097 -5210 0
5019 5099 -5212 0
5019 5101 -5214 0
5019 5103 -5216 0
5019 5105 -5218 0
5019 5107 -5220 0
5019 5109 -5222 0
5021 -5192 0
5021 5080 -5194 0
5021 5081 -5196 0
5021 5083 -5198 0
5021 5085 -5200 0
5021 5087 -5202 0
5021 5089 -5204 0
5021 5091 -5206 0
5021 5093 -5208 0
5021 5095 -5210 0
5021 5097 -5212 0
5021 5099 -5214 0
5021 5101 -5216 0
5021 5103 -5218 0
5021 5105 -5220 0
5021 5107 -5222 0
5021 5109 -5224 0
5023 -5194 0
5023 5080 -5196 0
5023 5081 -5198 0
5023 5083 -5200 0
5023 5085 -5202 0
5023 5087 -5204 0
5023 5089 -5206 0
5023 5091 -5208 0
5023 5093 -5210 0
5023 5095 -5212 0
5023 5097 -5214 0
5023 5099 -5216 0
5023 5101 -5218 0
5023 5103 -5220 0
5023 5105 -5222 0
5023 5107 -5224 0
5023 5109 -5226 0
5025 -5196 0
5025 5080 -5198 0
5025 5081 -5200 0
5025 5083 -5202 0
5025 5085 -5204 0
5025 5087 -5206 0
5025 5089 -5208 0
5025 5091 -5210 0
5025 5093 -5212 0
5025 5095 -5214 0
5025 5097 -5216 0
5025 5099 -5218 0
5025 5101 -5220 0
5025 5103 -5222 0
5025 5105 -5224 0
5025 5107 -5226 0
5025 5109 -5228 0
5027 -5198 0
5027 5080 -5200 0
5027 5081 -5202 0
5027 5083 -5204 0
5027 5085 -5206 0
5027 5087 -5208 0
5027 5089 -5210 0
5027 5091 -5212 0
5027 5093 -5214 0
5027 5095 -5216 0
5027 5097 -5218 0
5027 5099 -5220 0
5027 5101 -5222 0
5027 5103 -5224 0
5027 5105 -5226 0
5027 5107 -5228 0
5027 5109 -5230 0
5029 -5200 0
5029 5080 -5202 0
5029 5081 -5204 0
5029 5083 -5206 0
5029 5085 -5208 0
5029 5087 -5210 0
5029 5089 -5212 0
5029 5091 -5214 0
5029 5093 -5216 0
5029 5095 -5218 0
5029 5097 -5220 0
5029 5099 -5222 0
5029 5101 -5224 0
5029 5103 -5226 0
5029 5105 -5228 0
5029 5107 -5230 0
5029 5109 -5232 0
5031 -5202 0
5031 5080 -5204 0
5031 5081 -5206 0
5031 5083 -5208 0
5031 5085 -5210 0
5031 5087 -5212 0
5031 5089 -5214 0
5031 5091 -5216 0
5031 5093 -5218 0
5031 5095 -5220 0
5031 5097 -5222 0
5031 5099 -5224 0
5031 5101 -5226 0
5031 5103 -5228 0
5031 5105 -5230 0
5031 5107 -5232 0
5031 5109 -5234 0
5033 -5204 0
5033 5080 -5206 0
5033 5081 -5208 0
5033 5083 -5210 0
5033 5085 -5212 0
5033 5087 -5214 0
5033 5089 -5216 0
5033 5091 -5218 0
5033 5093 -5220 0
5033 5095 -5222 0
5033 5097 -5224 0
5033 5099 -5226 0
5033 5101 -5228 0
5033 5103 -5230 0
5033 5105 -5232 0
5033 5107 -5234 0
5033 5109 -5236 0
5035 -5206 0
5035 5080 -5208 0
5035 5081 -5210 0
5035 5083 -5212 0
5035 5085 -5214 0
5035 5087 -5216 0
5035 5089 -5218 0
5035 5091 -5220 0
5035 5093 -5222 0
5035 5095 -5224 0
5035 5097 -5226 0
5035 5099 -5228 0
5035 5101 -5230 0
5035 5103 -5232 0
5035 5105 -5234 0
5035 5107 -5236 0
5035 5109 -5238 0
5037 -5208 0
5037 5080 -5210 0
5037 5081 -5212 0
5037 5083 -5214 0
5037 5085 -5216 0
5037 5087 -5218 0
5037 5089 -5220 0
5037 5091 -5222 0
5037 5093 -5224 0
5037 5095 -5226 0
5037 5097 -5228 0
5037 5099 -5230 0
5037 5101 -5232 0
5037 5103 -5234 0
5037 5105 -5236 0
5037 5107 -5238 0
5037 5109 -5240 0
5039 -5210 0
5039 5080 -5212 0
5039 5081 -5214 0
5039 5083 -5216 0
5039 5085 -5218 0
5039 5087 -5220 0
5039 5089 -5222 0
5039 5091 -5224 0
5039 5093 -5226 0
5039 5095 -5228 0
5039 5097 -5230 0
5039 5099 -5232 0
5039 5101 -5234 0
5039 5103 -5236 0
5039 5105 -5238 0
5039 5107 -5240 0
5039 5109 -5242 0
5041 -5212 0
5041 5080 -5214 0
5041 5081 -5216 0
5041 5083 -5218 0
5041 5085 -5220 0
5041 5087 -5222 0
5041 5089 -5224 0
5041 5091 -5226 0
5041 5093 -5228 0
5041 5095 -5230 0
5041 5097 -5232 0
5041 5099 -5234 0
5041 5101 -5236 0
5041 5103 -5238 0
5041 5105 -5240 0
5041 5107 -5242 0
5041 5109 -5244 0
5043 -5214 0
5043 5080 -5216 0
5043 5081 -5218 0
5043 5083 -5220 0
5043 5085 -5222 0
5043 5087 -5224 0
5043 5089 -5226 0
5043 5091 -5228 0
5043 5093 -5230 0
5043 5095 -5232 0
5043 5097 -5234 0
5043 5099 -5236 0
5043 5101 -5238 0
5043 5103 -5240 0
5043 5105 -5242 0
5043 5107 -5244 0
5043 5109 -5246 0
5045 -5216 0
5045 5080 -5218 0
5045 5081 -5220 0
5045 5083 -5222 0
5045 5085 -5224 0
5045 5087 -5226 0
5045 5089 -5228 0
5045 5091 -5230 0
5045 5093 -5232 0
5045 5095 -5234 0
5045 5097 -5236 0
5045 5099 -5238 0
5045 5101 -5240 0
5045 5103 -5242 0
5045 5105 -5244 0
5045 5107 -5246 0
5045 5109 -5248 0
5047 -5218 0
5047 5080 -5220 0
5047 5081 -5222 0
5047 5083 -5224 0
5047 5085 -5226 0
5047 5087 -5228 0
5047 5089 -5230 0
5047 5091 -5232 0
5047 5093 -5234 0
5047 5095 -5236 0
5047 5097 -5238 0
5047 5099 -5240 0
5047 5101 -5242 0
5047 5103 -5244 0
5047 5105 -5246 0
5047 5107 -5248 0
5047 5109 -5250 0
c (0<=(aux545 + aux547 - aux550))
-5109 5250 0
-5107 5248 0
-5105 5246 0
-5103 5244 0
-5101 5242 0
-5099 5240 0
-5097 5238 0
-5095 5236 0
-5093 5234 0
-5091 5232 0
-5089 5230 0
-5087 5228 0
-5085 5226 0
-5083 5224 0
-5081 5222 0
-5080 5220 0
-5047 5250 0
-5047 -5109 5248 0
-5047 -5107 5246 0
-5047 -5105 5244 0
-5047 -5103 5242 0
-5047 -5101 5240 0
-5047 -5099 5238 0
-5047 -5097 5236 0
-5047 -5095 5234 0
-5047 -5093 5232 0
-5047 -5091 5230 0
-5047 -5089 5228 0
-5047 -5087 5226 0
-5047 -5085 5224 0
-5047 -5083 5222 0
-5047 -5081 5220 0
-5047 -5080 5218 0
-5045 5248 0
-5045 -5109 5246 0
-5045 -5107 5244 0
-5045 -5105 5242 0
-5045 -5103 5240 0
-5045 -5101 5238 0
-5045 -5099 5236 0
-5045 -5097 5234 0
-5045 -5095 5232 0
-5045 -5093 5230 0
-5045 -5091 5228 0
-5045 -5089 5226 0
-5045 -5087 5224 0
-5045 -5085 5222 0
-5045 -5083 5220 0
-5045 -5081 5218 0
-5045 -5080 5216 0
-5043 5246 0
-5043 -5109 5244 0
-5043 -5107 5242 0
-5043 -5105 5240 0
-5043 -5103 5238 0
-5043 -5101 5236 0
-5043 -5099 5234 0
-5043 -5097 5232 0
-5043 -5095 5230 0
-5043 -5093 5228 0
-5043 -5091 5226 0
-5043 -5089 5224 0
-5043 -5087 5222 0
-5043 -5085 5220 0
-5043 -5083 5218 0
-5043 -5081 5216 0
-5043 -5080 5214 0
-5041 5244 0
-5041 -5109 5242 0
-5041 -5107 5240 0
-5041 -5105 5238 0
-5041 -5103 5236 0
-5041 -5101 5234 0
-5041 -5099 5232 0
-5041 -5097 5230 0
-5041 -5095 5228 0
-5041 -5093 5226 0
-5041 -5091 5224 0
-5041 -5089 5222 0
-5041 -5087 5220 0
-5041 -5085 5218 0
-5041 -5083 5216 0
-5041 -5081 5214 0
-5041 -5080 5212 0
-5039 5242 0
-5039 -5109 5240 0
-5039 -5107 5238 0
-5039 -5105 5236 0
-5039 -5103 5234 0
-5039 -5101 5232 0
-5039 -5099 5230 0
-5039 -5097 5228 0
-5039 -5095 5226 0
-5039 -5093 5224 0
-5039 -5091 5222 0
-5039 -5089 5220 0
-5039 -5087 5218 0
-5039 -5085 5216 0
-5039 -5083 5214 0
-5039 -5081 5212 0
-5039 -5080 5210 0
-5037 5240 0
-5037 -5109 5238 0
-5037 -5107 5236 0
-5037 -5105 5234 0
-5037 -5103 5232 0
-5037 -5101 5230 0
-5037 -5099 5228 0
-5037 -5097 5226 0
-5037 -5095 5224 0
-5037 -5093 5222 0
-5037 -5091 5220 0
-5037 -5089 5218 0
-5037 -5087 5216 0
-5037 -5085 5214 0
-5037 -5083 5212 0
-5037 -5081 5210 0
-5037 -5080 5208 0
-5035 5238 0
-5035 -5109 5236 0
-5035 -5107 5234 0
-5035 -5105 5232 0
-5035 -5103 5230 0
-5035 -5101 5228 0
-5035 -5099 5226 0
-5035 -5097 5224 0
-5035 -5095 5222 0
-5035 -5093 5220 0
-5035 -5091 5218 0
-5035 -5089 5216 0
-5035 -5087 5214 0
-5035 -5085 5212 0
-5035 -5083 5210 0
-5035 -5081 5208 0
-5035 -5080 5206 0
-5033 5236 0
-5033 -5109 5234 0
-5033 -5107 5232 0
-5033 -5105 5230 0
-5033 -5103 5228 0
-5033 -5101 5226 0
-5033 -5099 5224 0
-5033 -5097 5222 0
-5033 -5095 5220 0
-5033 -5093 5218 0
-5033 -5091 5216 0
-5033 -5089 5214 0
-5033 -5087 5212 0
-5033 -5085 5210 0
-5033 -5083 5208 0
-5033 -5081 5206 0
-5033 -5080 5204 0
-5031 5234 0
-5031 -5109 5232 0
-5031 -5107 5230 0
-5031 -5105 5228 0
-5031 -5103 5226 0
-5031 -5101 5224 0
-5031 -5099 5222 0
-5031 -5097 5220 0
-5031 -5095 5218 0
-5031 -5093 5216 0
-5031 -5091 5214 0
-5031 -5089 5212 0
-5031 -5087 5210 0
-5031 -5085 5208 0
-5031 -5083 5206 0
-5031 -5081 5204 0
-5031 -5080 5202 0
-5029 5232 0
-5029 -5109 5230 0
-5029 -5107 5228 0
-5029 -5105 5226 0
-5029 -5103 5224 0
-5029 -5101 5222 0
-5029 -5099 5220 0
-5029 -5097 5218 0
-5029 -5095 5216 0
-5029 -5093 5214 0
-5029 -5091 5212 0
-5029 -5089 5210 0
-5029 -5087 5208 0
-5029 -5085 5206 0
-5029 -5083 5204 0
-5029 -5081 5202 0
-5029 -5080 5200 0
-5027 5230 0
-5027 -5109 5228 0
-5027 -5107 5226 0
-5027 -5105 5224 0
-5027 -5103 5222 0
-5027 -5101 5220 0
-5027 -5099 5218 0
-5027 -5097 5216 0
-5027 -5095 5214 0
-5027 -5093 5212 0
-5027 -5091 5210 0
-5027 -5089 5208 0
-5027 -5087 5206 0
-5027 -5085 5204 0
-5027 -5083 5202 0
-5027 -5081 5200 0
-5027 -5080 5198 0
-5025 5228 0
-5025 -5109 5226 0
-5025 -5107 5224 0
-5025 -5105 5222 0
-5025 -5103 5220 0
-5025 -5101 5218 0
-5025 -5099 5216 0
-5025 -5097 5214 0
-5025 -5095 5212 0
-5025 -5093 5210 0
-5025 -5091 5208 0
-5025 -5089 5206 0
-5025 -5087 5204 0
-5025 -5085 5202 0
-5025 -5083 5200 0
-5025 -5081 5198 0
-5025 -5080 5196 0
-5023 5226 0
-5023 -5109 5224 0
-5023 -5107 5222 0
-5023 -5105 5220 0
-5023 -5103 5218 0
-5023 -5101 5216 0
-5023 -5099 5214 0
-5023 -5097 5212 0
-5023 -5095 5210 0
-5023 -5093 5208 0
-5023 -5091 5206 0
-5023 -5089 5204 0
-5023 -5087 5202 0
-5023 -5085 5200 0
-5023 -5083 5198 0
-5023 -5081 5196 0
-5023 -5080 5194 0
-5021 5224 0
-5021 -5109 5222 0
-5021 -5107 5220 0
-5021 -5105 5218 0
-5021 -5103 5216 0
-5021 -5101 5214 0
-5021 -5099 5212 0
-5021 -5097 5210 0
-5021 -5095 5208 0
-5021 -5093 5206 0
-5021 -5091 5204 0
-5021 -5089 5202 0
-5021 -5087 5200 0
-5021 -5085 5198 0
-5021 -5083 5196 0
-5021 -5081 5194 0
-5021 -5080 5192 0
-5019 5222 0
-5019 -5109 5220 0
-5019 -5107 5218 0
-5019 -5105 5216 0
-5019 -5103 5214 0
-5019 -5101 5212 0
-5019 -5099 5210 0
-5019 -5097 5208 0
-5019 -5095 5206 0
-5019 -5093 5204 0
-5019 -5091 5202 0
-5019 -5089 5200 0
-5019 -5087 5198 0
-5019 -5085 5196 0
-5019 -5083 5194 0
-5019 -5081 5192 0
-5019 -5080 5190 0
-5018 5220 0
-5018 -5109 5218 0
-5018 -5107 5216 0
-5018 -5105 5214 0
-5018 -5103 5212 0
-5018 -5101 5210 0
-5018 -5099 5208 0
-5018 -5097 5206 0
-5018 -5095 5204 0
-5018 -5093 5202 0
-5018 -5091 5200 0
-5018 -5089 5198 0
-5018 -5087 5196 0
-5018 -5085 5194 0
-5018 -5083 5192 0
-5018 -5081 5190 0
-5018 -5080 5189 0
c (( - aux551 + shift(x_00006_00001, -1) + shift(x_00006_00009, -1))<=0)
797 -5252 0
798 -5253 0
800 -5255 0
802 -5257 0
804 -5259 0
806 -5261 0
808 -5263 0
810 -5265 0
677 -5252 0
677 797 -5253 0
677 798 -5255 0
677 800 -5257 0
677 802 -5259 0
677 804 -5261 0
677 806 -5263 0
677 808 -5265 0
677 810 -5267 0
678 -5253 0
678 797 -5255 0
678 798 -5257 0
678 800 -5259 0
678 802 -5261 0
678 804 -5263 0
678 806 -5265 0
678 808 -5267 0
678 810 -5269 0
680 -5255 0
680 797 -5257 0
680 798 -5259 0
680 800 -5261 0
680 802 -5263 0
680 804 -5265 0
680 806 -5267 0
680 808 -5269 0
680 810 -5271 0
682 -5257 0
682 797 -5259 0
682 798 -5261 0
682 800 -5263 0
682 802 -5265 0
682 804 -5267 0
682 806 -5269 0
682 808 -5271 0
682 810 -5273 0
684 -5259 0
684 797 -5261 0
684 798 -5263 0
684 800 -5265 0
684 802 -5267 0
684 804 -5269 0
684 806 -5271 0
684 808 -5273 0
684 810 -5275 0
686 -5261 0
686 797 -5263 0
686 798 -5265 0
686 800 -5267 0
686 802 -5269 0
686 804 -5271 0
686 806 -5273 0
686 808 -5275 0
686 810 -5277 0
688 -5263 0
688 797 -5265 0
688 798 -5267 0
688 800 -5269 0
688 802 -5271 0
688 804 -5273 0
688 806 -5275 0
688 808 -5277 0
688 810 -5279 0
690 -5265 0
690 797 -5267 0
690 798 -5269 0
690 800 -5271 0
690 802 -5273 0
690 804 -5275 0
690 806 -5277 0
690 808 -5279 0
690 810 -5281 0
c (0<=( - aux551 + shift(x_00006_00001, -1) + shift(x_00006_00009, -1)))
-810 5281 0
-808 5279 0
-806 5277 0
-804 5275 0
-802 5273 0
-800 5271 0
-798 5269 0
-797 5267 0
-690 5281 0
-690 -810 5279 0
-690 -808 5277 0
-690 -806 5275 0
-690 -804 5273 0
-690 -802 5271 0
-690 -800 5269 0
-690 -798 5267 0
-690 -797 5265 0
-688 5279 0
-688 -810 5277 0
-688 -808 5275 0
-688 -806 5273 0
-688 -804 5271 0
-688 -802 5269 0
-688 -800 5267 0
-688 -798 5265 0
-688 -797 5263 0
-686 5277 0
-686 -810 5275 0
-686 -808 5273 0
-686 -806 5271 0
-686 -804 5269 0
-686 -802 5267 0
-686 -800 5265 0
-686 -798 5263 0
-686 -797 5261 0
-684 5275 0
-684 -810 5273 0
-684 -808 5271 0
-684 -806 5269 0
-684 -804 5267 0
-684 -802 5265 0
-684 -800 5263 0
-684 -798 5261 0
-684 -797 5259 0
-682 5273 0
-682 -810 5271 0
-682 -808 5269 0
-682 -806 5267 0
-682 -804 5265 0
-682 -802 5263 0
-682 -800 5261 0
-682 -798 5259 0
-682 -797 5257 0
-680 5271 0
-680 -810 5269 0
-680 -808 5267 0
-680 -806 5265 0
-680 -804 5263 0
-680 -802 5261 0
-680 -800 5259 0
-680 -798 5257 0
-680 -797 5255 0
-678 5269 0
-678 -810 5267 0
-678 -808 5265 0
-678 -806 5263 0
-678 -804 5261 0
-678 -802 5259 0
-678 -800 5257 0
-678 -798 5255 0
-678 -797 5253 0
-677 5267 0
-677 -810 5265 0
-677 -808 5263 0
-677 -806 5261 0
-677 -804 5259 0
-677 -802 5257 0
-677 -800 5255 0
-677 -798 5253 0
-677 -797 5252 0
c (( - aux552 + shift(x_00006_00002, -1) + shift(x_00006_00008, -1))<=0)
782 -5283 0
783 -5284 0
785 -5286 0
787 -5288 0
789 -5290 0
791 -5292 0
793 -5294 0
795 -5296 0
692 -5283 0
692 782 -5284 0
692 783 -5286 0
692 785 -5288 0
692 787 -5290 0
692 789 -5292 0
692 791 -5294 0
692 793 -5296 0
692 795 -5298 0
693 -5284 0
693 782 -5286 0
693 783 -5288 0
693 785 -5290 0
693 787 -5292 0
693 789 -5294 0
693 791 -5296 0
693 793 -5298 0
693 795 -5300 0
695 -5286 0
695 782 -5288 0
695 783 -5290 0
695 785 -5292 0
695 787 -5294 0
695 789 -5296 0
695 791 -5298 0
695 793 -5300 0
695 795 -5302 0
697 -5288 0
697 782 -5290 0
697 783 -5292 0
697 785 -5294 0
697 787 -5296 0
697 789 -5298 0
697 791 -5300 0
697 793 -5302 0
697 795 -5304 0
699 -5290 0
699 782 -5292 0
699 783 -5294 0
699 785 -5296 0
699 787 -5298 0
699 789 -5300 0
699 791 -5302 0
699 793 -5304 0
699 795 -5306 0
701 -5292 0
701 782 -5294 0
701 783 -5296 0
701 785 -5298 0
701 787 -5300 0
701 789 -5302 0
701 791 -5304 0
701 793 -5306 0
701 795 -5308 0
703 -5294 0
703 782 -5296 0
703 783 -5298 0
703 785 -5300 0
703 787 -5302 0
703 789 -5304 0
703 791 -5306 0
703 793 -5308 0
703 795 -5310 0
705 -5296 0
705 782 -5298 0
705 783 -5300 0
705 785 -5302 0
705 787 -5304 0
705 789 -5306 0
705 791 -5308 0
705 793 -5310 0
705 795 -5312 0
c (0<=( - aux552 + shift(x_00006_00002, -1) + shift(x_00006_00008, -1)))
-795 5312 0
-793 5310 0
-791 5308 0
-789 5306 0
-787 5304 0
-785 5302 0
-783 5300 0
-782 5298 0
-705 5312 0
-705 -795 5310 0
-705 -793 5308 0
-705 -791 5306 0
-705 -789 5304 0
-705 -787 5302 0
-705 -785 5300 0
-705 -783 5298 0
-705 -782 5296 0
-703 5310 0
-703 -795 5308 0
-703 -793 5306 0
-703 -791 5304 0
-703 -789 5302 0
-703 -787 5300 0
-703 -785 5298 0
-703 -783 5296 0
-703 -782 5294 0
-701 5308 0
-701 -795 5306 0
-701 -793 5304 0
-701 -791 5302 0
-701 -789 5300 0
-701 -787 5298 0
-701 -785 5296 0
-701 -783 5294 0
-701 -782 5292 0
-699 5306 0
-699 -795 5304 0
-699 -793 5302 0
-699 -791 5300 0
-699 -789 5298 0
-699 -787 5296 0
-699 -785 5294 0
-699 -783 5292 0
-699 -782 5290 0
-697 5304 0
-697 -795 5302 0
-697 -793 5300 0
-697 -791 5298 0
-697 -789 5296 0
-697 -787 5294 0
-697 -785 5292 0
-697 -783 5290 0
-697 -782 5288 0
-695 5302 0
-695 -795 5300 0
-695 -793 5298 0
-695 -791 5296 0
-695 -789 5294 0
-695 -787 5292 0
-695 -785 5290 0
-695 -783 5288 0
-695 -782 5286 0
-693 5300 0
-693 -795 5298 0
-693 -793 5296 0
-693 -791 5294 0
-693 -789 5292 0
-693 -787 5290 0
-693 -785 5288 0
-693 -783 5286 0
-693 -782 5284 0
-692 5298 0
-692 -795 5296 0
-692 -793 5294 0
-692 -791 5292 0
-692 -789 5290 0
-692 -787 5288 0
-692 -785 5286 0
-692 -783 5284 0
-692 -782 5283 0
c (( - aux553 + shift(x_00006_00004, -1) + shift(x_00006_00007, -1))<=0)
767 -5314 0
768 -5315 0
770 -5317 0
772 -5319 0
774 -5321 0
776 -5323 0
778 -5325 0
780 -5327 0
722 -5314 0
722 767 -5315 0
722 768 -5317 0
722 770 -5319 0
722 772 -5321 0
722 774 -5323 0
722 776 -5325 0
722 778 -5327 0
722 780 -5329 0
723 -5315 0
723 767 -5317 0
723 768 -5319 0
723 770 -5321 0
723 772 -5323 0
723 774 -5325 0
723 776 -5327 0
723 778 -5329 0
723 780 -5331 0
725 -5317 0
725 767 -5319 0
725 768 -5321 0
725 770 -5323 0
725 772 -5325 0
725 774 -5327 0
725 776 -5329 0
725 778 -5331 0
725 780 -5333 0
727 -5319 0
727 767 -5321 0
727 768 -5323 0
727 770 -5325 0
727 772 -5327 0
727 774 -5329 0
727 776 -5331 0
727 778 -5333 0
727 780 -5335 0
729 -5321 0
729 767 -5323 0
729 768 -5325 0
729 770 -5327 0
729 772 -5329 0
729 774 -5331 0
729 776 -5333 0
729 778 -5335 0
729 780 -5337 0
731 -5323 0
731 767 -5325 0
731 768 -5327 0
731 770 -5329 0
731 772 -5331 0
731 774 -5333 0
731 776 -5335 0
731 778 -5337 0
731 780 -5339 0
733 -5325 0
733 767 -5327 0
733 768 -5329 0
733 770 -5331 0
733 772 -5333 0
733 774 -5335 0
733 776 -5337 0
733 778 -5339 0
733 780 -5341 0
735 -5327 0
735 767 -5329 0
735 768 -5331 0
735 770 -5333 0
735 772 -5335 0
735 774 -5337 0
735 776 -5339 0
735 778 -5341 0
735 780 -5343 0
c (0<=( - aux553 + shift(x_00006_00004, -1) + shift(x_00006_00007, -1)))
-780 5343 0
-778 5341 0
-776 5339 0
-774 5337 0
-772 5335 0
-770 5333 0
-768 5331 0
-767 5329 0
-735 5343 0
-735 -780 5341 0
-735 -778 5339 0
-735 -776 5337 0
-735 -774 5335 0
-735 -772 5333 0
-735 -770 5331 0
-735 -768 5329 0
-735 -767 5327 0
-733 5341 0
-733 -780 5339 0
-733 -778 5337 0
-733 -776 5335 0
-733 -774 5333 0
-733 -772 5331 0
-733 -770 5329 0
-733 -768 5327 0
-733 -767 5325 0
-731 5339 0
-731 -780 5337 0
-731 -778 5335 0
-731 -776 5333 0
-731 -774 5331 0
-731 -772 5329 0
-731 -770 5327 0
-731 -768 5325 0
-731 -767 5323 0
-729 5337 0
-729 -780 5335 0
-729 -778 5333 0
-729 -776 5331 0
-729 -774 5329 0
-729 -772 5327 0
-729 -770 5325 0
-729 -768 5323 0
-729 -767 5321 0
-727 5335 0
-727 -780 5333 0
-727 -778 5331 0
-727 -776 5329 0
-727 -774 5327 0
-727 -772 5325 0
-727 -770 5323 0
-727 -768 5321 0
-727 -767 5319 0
-725 5333 0
-725 -780 5331 0
-725 -778 5329 0
-725 -776 5327 0
-725 -774 5325 0
-725 -772 5323 0
-725 -770 5321 0
-725 -768 5319 0
-725 -767 5317 0
-723 5331 0
-723 -780 5329 0
-723 -778 5327 0
-723 -776 5325 0
-723 -774 5323 0
-723 -772 5321 0
-723 -770 5319 0
-723 -768 5317 0
-723 -767 5315 0
-722 5329 0
-722 -780 5327 0
-722 -778 5325 0
-722 -776 5323 0
-722 -774 5321 0
-722 -772 5319 0
-722 -770 5317 0
-722 -768 5315 0
-722 -767 5314 0
c (( - aux554 + shift(x_00006_00005, -1) + shift(x_00006_00006, -1))<=0)
752 -5345 0
753 -5346 0
755 -5348 0
757 -5350 0
759 -5352 0
761 -5354 0
763 -5356 0
765 -5358 0
737 -5345 0
737 752 -5346 0
737 753 -5348 0
737 755 -5350 0
737 757 -5352 0
737 759 -5354 0
737 761 -5356 0
737 763 -5358 0
737 765 -5360 0
738 -5346 0
738 752 -5348 0
738 753 -5350 0
738 755 -5352 0
738 757 -5354 0
738 759 -5356 0
738 761 -5358 0
738 763 -5360 0
738 765 -5362 0
740 -5348 0
740 752 -5350 0
740 753 -5352 0
740 755 -5354 0
740 757 -5356 0
740 759 -5358 0
740 761 -5360 0
740 763 -5362 0
740 765 -5364 0
742 -5350 0
742 752 -5352 0
742 753 -5354 0
742 755 -5356 0
742 757 -5358 0
742 759 -5360 0
742 761 -5362 0
742 763 -5364 0
742 765 -5366 0
744 -5352 0
744 752 -5354 0
744 753 -5356 0
744 755 -5358 0
744 757 -5360 0
744 759 -5362 0
744 761 -5364 0
744 763 -5366 0
744 765 -5368 0
746 -5354 0
746 752 -5356 0
746 753 -5358 0
746 755 -5360 0
746 757 -5362 0
746 759 -5364 0
746 761 -5366 0
746 763 -5368 0
746 765 -5370 0
748 -5356 0
748 752 -5358 0
748 753 -5360 0
748 755 -5362 0
748 757 -5364 0
748 759 -5366 0
748 761 -5368 0
748 763 -5370 0
748 765 -5372 0
750 -5358 0
750 752 -5360 0
750 753 -5362 0
750 755 -5364 0
750 757 -5366 0
750 759 -5368 0
750 761 -5370 0
750 763 -5372 0
750 765 -5374 0
c (0<=( - aux554 + shift(x_00006_00005, -1) + shift(x_00006_00006, -1)))
-765 5374 0
-763 5372 0
-761 5370 0
-759 5368 0
-757 5366 0
-755 5364 0
-753 5362 0
-752 5360 0
-750 5374 0
-750 -765 5372 0
-750 -763 5370 0
-750 -761 5368 0
-750 -759 5366 0
-750 -757 5364 0
-750 -755 5362 0
-750 -753 5360 0
-750 -752 5358 0
-748 5372 0
-748 -765 5370 0
-748 -763 5368 0
-748 -761 5366 0
-748 -759 5364 0
-748 -757 5362 0
-748 -755 5360 0
-748 -753 5358 0
-748 -752 5356 0
-746 5370 0
-746 -765 5368 0
-746 -763 5366 0
-746 -761 5364 0
-746 -759 5362 0
-746 -757 5360 0
-746 -755 5358 0
-746 -753 5356 0
-746 -752 5354 0
-744 5368 0
-744 -765 5366 0
-744 -763 5364 0
-744 -761 5362 0
-744 -759 5360 0
-744 -757 5358 0
-744 -755 5356 0
-744 -753 5354 0
-744 -752 5352 0
-742 5366 0
-742 -765 5364 0
-742 -763 5362 0
-742 -761 5360 0
-742 -759 5358 0
-742 -757 5356 0
-742 -755 5354 0
-742 -753 5352 0
-742 -752 5350 0
-740 5364 0
-740 -765 5362 0
-740 -763 5360 0
-740 -761 5358 0
-740 -759 5356 0
-740 -757 5354 0
-740 -755 5352 0
-740 -753 5350 0
-740 -752 5348 0
-738 5362 0
-738 -765 5360 0
-738 -763 5358 0
-738 -761 5356 0
-738 -759 5354 0
-738 -757 5352 0
-738 -755 5350 0
-738 -753 5348 0
-738 -752 5346 0
-737 5360 0
-737 -765 5358 0
-737 -763 5356 0
-737 -761 5354 0
-737 -759 5352 0
-737 -757 5350 0
-737 -755 5348 0
-737 -753 5346 0
-737 -752 5345 0
c ((aux554 - aux555 + shift(x_00006_00003, -1))<=0)
5345 -5376 0
5346 -5377 0
5348 -5379 0
5350 -5381 0
5352 -5383 0
5354 -5385 0
5356 -5387 0
5358 -5389 0
5360 -5391 0
5362 -5393 0
5364 -5395 0
5366 -5397 0
5368 -5399 0
5370 -5401 0
5372 -5403 0
5374 -5405 0
707 -5376 0
707 5345 -5377 0
707 5346 -5379 0
707 5348 -5381 0
707 5350 -5383 0
707 5352 -5385 0
707 5354 -5387 0
707 5356 -5389 0
707 5358 -5391 0
707 5360 -5393 0
707 5362 -5395 0
707 5364 -5397 0
707 5366 -5399 0
707 5368 -5401 0
707 5370 -5403 0
707 5372 -5405 0
707 5374 -5407 0
708 -5377 0
708 5345 -5379 0
708 5346 -5381 0
708 5348 -5383 0
708 5350 -5385 0
708 5352 -5387 0
708 5354 -5389 0
708 5356 -5391 0
708 5358 -5393 0
708 5360 -5395 0
708 5362 -5397 0
708 5364 -5399 0
708 5366 -5401 0
708 5368 -5403 0
708 5370 -5405 0
708 5372 -5407 0
708 5374 -5409 0
710 -5379 0
710 5345 -5381 0
710 5346 -5383 0
710 5348 -5385 0
710 5350 -5387 0
710 5352 -5389 0
710 5354 -5391 0
710 5356 -5393 0
710 5358 -5395 0
710 5360 -5397 0
710 5362 -5399 0
710 5364 -5401 0
710 5366 -5403 0
710 5368 -5405 0
710 5370 -5407 0
710 5372 -5409 0
710 5374 -5411 0
712 -5381 0
712 5345 -5383 0
712 5346 -5385 0
712 5348 -5387 0
712 5350 -5389 0
712 5352 -5391 0
712 5354 -5393 0
712 5356 -5395 0
712 5358 -5397 0
712 5360 -5399 0
712 5362 -5401 0
712 5364 -5403 0
712 5366 -5405 0
712 5368 -5407 0
712 5370 -5409 0
712 5372 -5411 0
712 5374 -5413 0
714 -5383 0
714 5345 -5385 0
714 5346 -5387 0
714 5348 -5389 0
714 5350 -5391 0
714 5352 -5393 0
714 5354 -5395 0
714 5356 -5397 0
714 5358 -5399 0
714 5360 -5401 0
714 5362 -5403 0
714 5364 -5405 0
714 5366 -5407 0
714 5368 -5409 0
714 5370 -5411 0
714 5372 -5413 0
714 5374 -5415 0
716 -5385 0
716 5345 -5387 0
716 5346 -5389 0
716 5348 -5391 0
716 5350 -5393 0
716 5352 -5395 0
716 5354 -5397 0
716 5356 -5399 0
716 5358 -5401 0
716 5360 -5403 0
716 5362 -5405 0
716 5364 -5407 0
716 5366 -5409 0
716 5368 -5411 0
716 5370 -5413 0
716 5372 -5415 0
716 5374 -5417 0
718 -5387 0
718 5345 -5389 0
718 5346 -5391 0
718 5348 -5393 0
718 5350 -5395 0
718 5352 -5397 0
718 5354 -5399 0
718 5356 -5401 0
718 5358 -5403 0
718 5360 -5405 0
718 5362 -5407 0
718 5364 -5409 0
718 5366 -5411 0
718 5368 -5413 0
718 5370 -5415 0
718 5372 -5417 0
718 5374 -5419 0
720 -5389 0
720 5345 -5391 0
720 5346 -5393 0
720 5348 -5395 0
720 5350 -5397 0
720 5352 -5399 0
720 5354 -5401 0
720 5356 -5403 0
720 5358 -5405 0
720 5360 -5407 0
720 5362 -5409 0
720 5364 -5411 0
720 5366 -5413 0
720 5368 -5415 0
720 5370 -5417 0
720 5372 -5419 0
720 5374 -5421 0
c (0<=(aux554 - aux555 + shift(x_00006_00003, -1)))
-5374 5421 0
-5372 5419 0
-5370 5417 0
-5368 5415 0
-5366 5413 0
-5364 5411 0
-5362 5409 0
-5360 5407 0
-5358 5405 0
-5356 5403 0
-5354 5401 0
-5352 5399 0
-5350 5397 0
-5348 5395 0
-5346 5393 0
-5345 5391 0
-720 5421 0
-720 -5374 5419 0
-720 -5372 5417 0
-720 -5370 5415 0
-720 -5368 5413 0
-720 -5366 5411 0
-720 -5364 5409 0
-720 -5362 5407 0
-720 -5360 5405 0
-720 -5358 5403 0
-720 -5356 5401 0
-720 -5354 5399 0
-720 -5352 5397 0
-720 -5350 5395 0
-720 -5348 5393 0
-720 -5346 5391 0
-720 -5345 5389 0
-718 5419 0
-718 -5374 5417 0
-718 -5372 5415 0
-718 -5370 5413 0
-718 -5368 5411 0
-718 -5366 5409 0
-718 -5364 5407 0
-718 -5362 5405 0
-718 -5360 5403 0
-718 -5358 5401 0
-718 -5356 5399 0
-718 -5354 5397 0
-718 -5352 5395 0
-718 -5350 5393 0
-718 -5348 5391 0
-718 -5346 5389 0
-718 -5345 5387 0
-716 5417 0
-716 -5374 5415 0
-716 -5372 5413 0
-716 -5370 5411 0
-716 -5368 5409 0
-716 -5366 5407 0
-716 -5364 5405 0
-716 -5362 5403 0
-716 -5360 5401 0
-716 -5358 5399 0
-716 -5356 5397 0
-716 -5354 5395 0
-716 -5352 5393 0
-716 -5350 5391 0
-716 -5348 5389 0
-716 -5346 5387 0
-716 -5345 5385 0
-714 5415 0
-714 -5374 5413 0
-714 -5372 5411 0
-714 -5370 5409 0
-714 -5368 5407 0
-714 -5366 5405 0
-714 -5364 5403 0
-714 -5362 5401 0
-714 -5360 5399 0
-714 -5358 5397 0
-714 -5356 5395 0
-714 -5354 5393 0
-714 -5352 5391 0
-714 -5350 5389 0
-714 -5348 5387 0
-714 -5346 5385 0
-714 -5345 5383 0
-712 5413 0
-712 -5374 5411 0
-712 -5372 5409 0
-712 -5370 5407 0
-712 -5368 5405 0
-712 -5366 5403 0
-712 -5364 5401 0
-712 -5362 5399 0
-712 -5360 5397 0
-712 -5358 5395 0
-712 -5356 5393 0
-712 -5354 5391 0
-712 -5352 5389 0
-712 -5350 5387 0
-712 -5348 5385 0
-712 -5346 5383 0
-712 -5345 5381 0
-710 5411 0
-710 -5374 5409 0
-710 -5372 5407 0
-710 -5370 5405 0
-710 -5368 5403 0
-710 -5366 5401 0
-710 -5364 5399 0
-710 -5362 5397 0
-710 -5360 5395 0
-710 -5358 5393 0
-710 -5356 5391 0
-710 -5354 5389 0
-710 -5352 5387 0
-710 -5350 5385 0
-710 -5348 5383 0
-710 -5346 5381 0
-710 -5345 5379 0
-708 5409 0
-708 -5374 5407 0
-708 -5372 5405 0
-708 -5370 5403 0
-708 -5368 5401 0
-708 -5366 5399 0
-708 -5364 5397 0
-708 -5362 5395 0
-708 -5360 5393 0
-708 -5358 5391 0
-708 -5356 5389 0
-708 -5354 5387 0
-708 -5352 5385 0
-708 -5350 5383 0
-708 -5348 5381 0
-708 -5346 5379 0
-708 -5345 5377 0
-707 5407 0
-707 -5374 5405 0
-707 -5372 5403 0
-707 -5370 5401 0
-707 -5368 5399 0
-707 -5366 5397 0
-707 -5364 5395 0
-707 -5362 5393 0
-707 -5360 5391 0
-707 -5358 5389 0
-707 -5356 5387 0
-707 -5354 5385 0
-707 -5352 5383 0
-707 -5350 5381 0
-707 -5348 5379 0
-707 -5346 5377 0
-707 -5345 5376 0
c ((aux551 + aux553 - aux556)<=0)
5314 -5423 0
5315 -5424 0
5317 -5426 0
5319 -5428 0
5321 -5430 0
5323 -5432 0
5325 -5434 0
5327 -5436 0
5329 -5438 0
5331 -5440 0
5333 -5442 0
5335 -5444 0
5337 -5446 0
5339 -5448 0
5341 -5450 0
5343 -5452 0
5252 -5423 0
5252 5314 -5424 0
5252 5315 -5426 0
5252 5317 -5428 0
5252 5319 -5430 0
5252 5321 -5432 0
5252 5323 -5434 0
5252 5325 -5436 0
5252 5327 -5438 0
5252 5329 -5440 0
5252 5331 -5442 0
5252 5333 -5444 0
5252 5335 -5446 0
5252 5337 -5448 0
5252 5339 -5450 0
5252 5341 -5452 0
5252 5343 -5454 0
5253 -5424 0
5253 5314 -5426 0
5253 5315 -5428 0
5253 5317 -5430 0
5253 5319 -5432 0
5253 5321 -5434 0
5253 5323 -5436 0
5253 5325 -5438 0
5253 5327 -5440 0
5253 5329 -5442 0
5253 5331 -5444 0
5253 5333 -5446 0
5253 5335 -5448 0
5253 5337 -5450 0
5253 5339 -5452 0
5253 5341 -5454 0
5253 5343 -5456 0
5255 -5426 0
5255 5314 -5428 0
5255 5315 -5430 0
5255 5317 -5432 0
5255 5319 -5434 0
5255 5321 -5436 0
5255 5323 -5438 0
5255 5325 -5440 0
5255 5327 -5442 0
5255 5329 -5444 0
5255 5331 -5446 0
5255 5333 -5448 0
5255 5335 -5450 0
5255 5337 -5452 0
5255 5339 -5454 0
5255 5341 -5456 0
5255 5343 -5458 0
5257 -5428 0
5257 5314 -5430 0
5257 5315 -5432 0
5257 5317 -5434 0
5257 5319 -5436 0
5257 5321 -5438 0
5257 5323 -5440 0
5257 5325 -5442 0
5257 5327 -5444 0
5257 5329 -5446 0
5257 5331 -5448 0
5257 5333 -5450 0
5257 5335 -5452 0
5257 5337 -5454 0
5257 5339 -5456 0
5257 5341 -5458 0
5257 5343 -5460 0
5259 -5430 0
5259 5314 -5432 0
5259 5315 -5434 0
5259 5317 -5436 0
5259 5319 -5438 0
5259 5321 -5440 0
5259 5323 -5442 0
5259 5325 -5444 0
5259 5327 -5446 0
5259 5329 -5448 0
5259 5331 -5450 0
5259 5333 -5452 0
5259 5335 -5454 0
5259 5337 -5456 0
5259 5339 -5458 0
5259 5341 -5460 0
5259 5343 -5462 0
5261 -5432 0
5261 5314 -5434 0
5261 5315 -5436 0
5261 5317 -5438 0
5261 5319 -5440 0
5261 5321 -5442 0
5261 5323 -5444 0
5261 5325 -5446 0
5261 5327 -5448 0
5261 5329 -5450 0
5261 5331 -5452 0
5261 5333 -5454 0
5261 5335 -5456 0
5261 5337 -5458 0
5261 5339 -5460 0
5261 5341 -5462 0
5261 5343 -5464 0
5263 -5434 0
5263 5314 -5436 0
5263 5315 -5438 0
5263 5317 -5440 0
5263 5319 -5442 0
5263 5321 -5444 0
5263 5323 -5446 0
5263 5325 -5448 0
5263 5327 -5450 0
5263 5329 -5452 0
5263 5331 -5454 0
5263 5333 -5456 0
5263 5335 -5458 0
5263 5337 -5460 0
5263 5339 -5462 0
5263 5341 -5464 0
5263 5343 -5466 0
5265 -5436 0
5265 5314 -5438 0
5265 5315 -5440 0
5265 5317 -5442 0
5265 5319 -5444 0
5265 5321 -5446 0
5265 5323 -5448 0
5265 5325 -5450 0
5265 5327 -5452 0
5265 5329 -5454 0
5265 5331 -5456 0
5265 5333 -5458 0
5265 5335 -5460 0
5265 5337 -5462 0
5265 5339 -5464 0
5265 5341 -5466 0
5265 5343 -5468 0
5267 -5438 0
5267 5314 -5440 0
5267 5315 -5442 0
5267 5317 -5444 0
5267 5319 -5446 0
5267 5321 -5448 0
5267 5323 -5450 0
5267 5325 -5452 0
5267 5327 -5454 0
5267 5329 -5456 0
5267 5331 -5458 0
5267 5333 -5460 0
5267 5335 -5462 0
5267 5337 -5464 0
5267 5339 -5466 0
5267 5341 -5468 0
5267 5343 -5470 0
5269 -5440 0
5269 5314 -5442 0
5269 5315 -5444 0
5269 5317 -5446 0
5269 5319 -5448 0
5269 5321 -5450 0
5269 5323 -5452 0
5269 5325 -5454 0
5269 5327 -5456 0
5269 5329 -5458 0
5269 5331 -5460 0
5269 5333 -5462 0
5269 5335 -5464 0
5269 5337 -5466 0
5269 5339 -5468 0
5269 5341 -5470 0
5269 5343 -5472 0
5271 -5442 0
5271 5314 -5444 0
5271 5315 -5446 0
5271 5317 -5448 0
5271 5319 -5450 0
5271 5321 -5452 0
5271 5323 -5454 0
5271 5325 -5456 0
5271 5327 -5458 0
5271 5329 -5460 0
5271 5331 -5462 0
5271 5333 -5464 0
5271 5335 -5466 0
5271 5337 -5468 0
5271 5339 -5470 0
5271 5341 -5472 0
5271 5343 -5474 0
5273 -5444 0
5273 5314 -5446 0
5273 5315 -5448 0
5273 5317 -5450 0
5273 5319 -5452 0
5273 5321 -5454 0
5273 5323 -5456 0
5273 5325 -5458 0
5273 5327 -5460 0
5273 5329 -5462 0
5273 5331 -5464 0
5273 5333 -5466 0
5273 5335 -5468 0
5273 5337 -5470 0
5273 5339 -5472 0
5273 5341 -5474 0
5273 5343 -5476 0
5275 -5446 0
5275 5314 -5448 0
5275 5315 -5450 0
5275 5317 -5452 0
5275 5319 -5454 0
5275 5321 -5456 0
5275 5323 -5458 0
5275 5325 -5460 0
5275 5327 -5462 0
5275 5329 -5464 0
5275 5331 -5466 0
5275 5333 -5468 0
5275 5335 -5470 0
5275 5337 -5472 0
5275 5339 -5474 0
5275 5341 -5476 0
5275 5343 -5478 0
5277 -5448 0
5277 5314 -5450 0
5277 5315 -5452 0
5277 5317 -5454 0
5277 5319 -5456 0
5277 5321 -5458 0
5277 5323 -5460 0
5277 5325 -5462 0
5277 5327 -5464 0
5277 5329 -5466 0
5277 5331 -5468 0
5277 5333 -5470 0
5277 5335 -5472 0
5277 5337 -5474 0
5277 5339 -5476 0
5277 5341 -5478 0
5277 5343 -5480 0
5279 -5450 0
5279 5314 -5452 0
5279 5315 -5454 0
5279 5317 -5456 0
5279 5319 -5458 0
5279 5321 -5460 0
5279 5323 -5462 0
5279 5325 -5464 0
5279 5327 -5466 0
5279 5329 -5468 0
5279 5331 -5470 0
5279 5333 -5472 0
5279 5335 -5474 0
5279 5337 -5476 0
5279 5339 -5478 0
5279 5341 -5480 0
5279 5343 -5482 0
5281 -5452 0
5281 5314 -5454 0
5281 5315 -5456 0
5281 5317 -5458 0
5281 5319 -5460 0
5281 5321 -5462 0
5281 5323 -5464 0
5281 5325 -5466 0
5281 5327 -5468 0
5281 5329 -5470 0
5281 5331 -5472 0
5281 5333 -5474 0
5281 5335 -5476 0
5281 5337 -5478 0
5281 5339 -5480 0
5281 5341 -5482 0
5281 5343 -5484 0
c (0<=(aux551 + aux553 - aux556))
-5343 5484 0
-5341 5482 0
-5339 5480 0
-5337 5478 0
-5335 5476 0
-5333 5474 0
-5331 5472 0
-5329 5470 0
-5327 5468 0
-5325 5466 0
-5323 5464 0
-5321 5462 0
-5319 5460 0
-5317 5458 0
-5315 5456 0
-5314 5454 0
-5281 5484 0
-5281 -5343 5482 0
-5281 -5341 5480 0
-5281 -5339 5478 0
-5281 -5337 5476 0
-5281 -5335 5474 0
-5281 -5333 5472 0
-5281 -5331 5470 0
-5281 -5329 5468 0
-5281 -5327 5466 0
-5281 -5325 5464 0
-5281 -5323 5462 0
-5281 -5321 5460 0
-5281 -5319 5458 0
-5281 -5317 5456 0
-5281 -5315 5454 0
-5281 -5314 5452 0
-5279 5482 0
-5279 -5343 5480 0
-5279 -5341 5478 0
-5279 -5339 5476 0
-5279 -5337 5474 0
-5279 -5335 5472 0
-5279 -5333 5470 0
-5279 -5331 5468 0
-5279 -5329 5466 0
-5279 -5327 5464 0
-5279 -5325 5462 0
-5279 -5323 5460 0
-5279 -5321 5458 0
-5279 -5319 5456 0
-5279 -5317 5454 0
-5279 -5315 5452 0
-5279 -5314 5450 0
-5277 5480 0
-5277 -5343 5478 0
-5277 -5341 5476 0
-5277 -5339 5474 0
-5277 -5337 5472 0
-5277 -5335 5470 0
-5277 -5333 5468 0
-5277 -5331 5466 0
-5277 -5329 5464 0
-5277 -5327 5462 0
-5277 -5325 5460 0
-5277 -5323 5458 0
-5277 -5321 5456 0
-5277 -5319 5454 0
-5277 -5317 5452 0
-5277 -5315 5450 0
-5277 -5314 5448 0
-5275 5478 0
-5275 -5343 5476 0
-5275 -5341 5474 0
-5275 -5339 5472 0
-5275 -5337 5470 0
-5275 -5335 5468 0
-5275 -5333 5466 0
-5275 -5331 5464 0
-5275 -5329 5462 0
-5275 -5327 5460 0
-5275 -5325 5458 0
-5275 -5323 5456 0
-5275 -5321 5454 0
-5275 -5319 5452 0
-5275 -5317 5450 0
-5275 -5315 5448 0
-5275 -5314 5446 0
-5273 5476 0
-5273 -5343 5474 0
-5273 -5341 5472 0
-5273 -5339 5470 0
-5273 -5337 5468 0
-5273 -5335 5466 0
-5273 -5333 5464 0
-5273 -5331 5462 0
-5273 -5329 5460 0
-5273 -5327 5458 0
-5273 -5325 5456 0
-5273 -5323 5454 0
-5273 -5321 5452 0
-5273 -5319 5450 0
-5273 -5317 5448 0
-5273 -5315 5446 0
-5273 -5314 5444 0
-5271 5474 0
-5271 -5343 5472 0
-5271 -5341 5470 0
-5271 -5339 5468 0
-5271 -5337 5466 0
-5271 -5335 5464 0
-5271 -5333 5462 0
-5271 -5331 5460 0
-5271 -5329 5458 0
-5271 -5327 5456 0
-5271 -5325 5454 0
-5271 -5323 5452 0
-5271 -5321 5450 0
-5271 -5319 5448 0
-5271 -5317 5446 0
-5271 -5315 5444 0
-5271 -5314 5442 0
-5269 5472 0
-5269 -5343 5470 0
-5269 -5341 5468 0
-5269 -5339 5466 0
-5269 -5337 5464 0
-5269 -5335 5462 0
-5269 -5333 5460 0
-5269 -5331 5458 0
-5269 -5329 5456 0
-5269 -5327 5454 0
-5269 -5325 5452 0
-5269 -5323 5450 0
-5269 -5321 5448 0
-5269 -5319 5446 0
-5269 -5317 5444 0
-5269 -5315 5442 0
-5269 -5314 5440 0
-5267 5470 0
-5267 -5343 5468 0
-5267 -5341 5466 0
-5267 -5339 5464 0
-5267 -5337 5462 0
-5267 -5335 5460 0
-5267 -5333 5458 0
-5267 -5331 5456 0
-5267 -5329 5454 0
-5267 -5327 5452 0
-5267 -5325 5450 0
-5267 -5323 5448 0
-5267 -5321 5446 0
-5267 -5319 5444 0
-5267 -5317 5442 0
-5267 -5315 5440 0
-5267 -5314 5438 0
-5265 5468 0
-5265 -5343 5466 0
-5265 -5341 5464 0
-5265 -5339 5462 0
-5265 -5337 5460 0
-5265 -5335 5458 0
-5265 -5333 5456 0
-5265 -5331 5454 0
-5265 -5329 5452 0
-5265 -5327 5450 0
-5265 -5325 5448 0
-5265 -5323 5446 0
-5265 -5321 5444 0
-5265 -5319 5442 0
-5265 -5317 5440 0
-5265 -5315 5438 0
-5265 -5314 5436 0
-5263 5466 0
-5263 -5343 5464 0
-5263 -5341 5462 0
-5263 -5339 5460 0
-5263 -5337 5458 0
-5263 -5335 5456 0
-5263 -5333 5454 0
-5263 -5331 5452 0
-5263 -5329 5450 0
-5263 -5327 5448 0
-5263 -5325 5446 0
-5263 -5323 5444 0
-5263 -5321 5442 0
-5263 -5319 5440 0
-5263 -5317 5438 0
-5263 -5315 5436 0
-5263 -5314 5434 0
-5261 5464 0
-5261 -5343 5462 0
-5261 -5341 5460 0
-5261 -5339 5458 0
-5261 -5337 5456 0
-5261 -5335 5454 0
-5261 -5333 5452 0
-5261 -5331 5450 0
-5261 -5329 5448 0
-5261 -5327 5446 0
-5261 -5325 5444 0
-5261 -5323 5442 0
-5261 -5321 5440 0
-5261 -5319 5438 0
-5261 -5317 5436 0
-5261 -5315 5434 0
-5261 -5314 5432 0
-5259 5462 0
-5259 -5343 5460 0
-5259 -5341 5458 0
-5259 -5339 5456 0
-5259 -5337 5454 0
-5259 -5335 5452 0
-5259 -5333 5450 0
-5259 -5331 5448 0
-5259 -5329 5446 0
-5259 -5327 5444 0
-5259 -5325 5442 0
-5259 -5323 5440 0
-5259 -5321 5438 0
-5259 -5319 5436 0
-5259 -5317 5434 0
-5259 -5315 5432 0
-5259 -5314 5430 0
-5257 5460 0
-5257 -5343 5458 0
-5257 -5341 5456 0
-5257 -5339 5454 0
-5257 -5337 5452 0
-5257 -5335 5450 0
-5257 -5333 5448 0
-5257 -5331 5446 0
-5257 -5329 5444 0
-5257 -5327 5442 0
-5257 -5325 5440 0
-5257 -5323 5438 0
-5257 -5321 5436 0
-5257 -5319 5434 0
-5257 -5317 5432 0
-5257 -5315 5430 0
-5257 -5314 5428 0
-5255 5458 0
-5255 -5343 5456 0
-5255 -5341 5454 0
-5255 -5339 5452 0
-5255 -5337 5450 0
-5255 -5335 5448 0
-5255 -5333 5446 0
-5255 -5331 5444 0
-5255 -5329 5442 0
-5255 -5327 5440 0
-5255 -5325 5438 0
-5255 -5323 5436 0
-5255 -5321 5434 0
-5255 -5319 5432 0
-5255 -5317 5430 0
-5255 -5315 5428 0
-5255 -5314 5426 0
-5253 5456 0
-5253 -5343 5454 0
-5253 -5341 5452 0
-5253 -5339 5450 0
-5253 -5337 5448 0
-5253 -5335 5446 0
-5253 -5333 5444 0
-5253 -5331 5442 0
-5253 -5329 5440 0
-5253 -5327 5438 0
-5253 -5325 5436 0
-5253 -5323 5434 0
-5253 -5321 5432 0
-5253 -5319 5430 0
-5253 -5317 5428 0
-5253 -5315 5426 0
-5253 -5314 5424 0
-5252 5454 0
-5252 -5343 5452 0
-5252 -5341 5450 0
-5252 -5339 5448 0
-5252 -5337 5446 0
-5252 -5335 5444 0
-5252 -5333 5442 0
-5252 -5331 5440 0
-5252 -5329 5438 0
-5252 -5327 5436 0
-5252 -5325 5434 0
-5252 -5323 5432 0
-5252 -5321 5430 0
-5252 -5319 5428 0
-5252 -5317 5426 0
-5252 -5315 5424 0
-5252 -5314 5423 0
c ((shift(x_00007_00001, -1) + shift(x_00007_00009, -1) - aux557)<=0)
932 -5486 0
933 -5487 0
935 -5489 0
937 -5491 0
939 -5493 0
941 -5495 0
943 -5497 0
945 -5499 0
812 -5486 0
812 932 -5487 0
812 933 -5489 0
812 935 -5491 0
812 937 -5493 0
812 939 -5495 0
812 941 -5497 0
812 943 -5499 0
812 945 -5501 0
813 -5487 0
813 932 -5489 0
813 933 -5491 0
813 935 -5493 0
813 937 -5495 0
813 939 -5497 0
813 941 -5499 0
813 943 -5501 0
813 945 -5503 0
815 -5489 0
815 932 -5491 0
815 933 -5493 0
815 935 -5495 0
815 937 -5497 0
815 939 -5499 0
815 941 -5501 0
815 943 -5503 0
815 945 -5505 0
817 -5491 0
817 932 -5493 0
817 933 -5495 0
817 935 -5497 0
817 937 -5499 0
817 939 -5501 0
817 941 -5503 0
817 943 -5505 0
817 945 -5507 0
819 -5493 0
819 932 -5495 0
819 933 -5497 0
819 935 -5499 0
819 937 -5501 0
819 939 -5503 0
819 941 -5505 0
819 943 -5507 0
819 945 -5509 0
821 -5495 0
821 932 -5497 0
821 933 -5499 0
821 935 -5501 0
821 937 -5503 0
821 939 -5505 0
821 941 -5507 0
821 943 -5509 0
821 945 -5511 0
823 -5497 0
823 932 -5499 0
823 933 -5501 0
823 935 -5503 0
823 937 -5505 0
823 939 -5507 0
823 941 -5509 0
823 943 -5511 0
823 945 -5513 0
825 -5499 0
825 932 -5501 0
825 933 -5503 0
825 935 -5505 0
825 937 -5507 0
825 939 -5509 0
825 941 -5511 0
825 943 -5513 0
825 945 -5515 0
c (0<=(shift(x_00007_00001, -1) + shift(x_00007_00009, -1) - aux557))
-945 5515 0
-943 5513 0
-941 5511 0
-939 5509 0
-937 5507 0
-935 5505 0
-933 5503 0
-932 5501 0
-825 5515 0
-825 -945 5513 0
-825 -943 5511 0
-825 -941 5509 0
-825 -939 5507 0
-825 -937 5505 0
-825 -935 5503 0
-825 -933 5501 0
-825 -932 5499 0
-823 5513 0
-823 -945 5511 0
-823 -943 5509 0
-823 -941 5507 0
-823 -939 5505 0
-823 -937 5503 0
-823 -935 5501 0
-823 -933 5499 0
-823 -932 5497 0
-821 5511 0
-821 -945 5509 0
-821 -943 5507 0
-821 -941 5505 0
-821 -939 5503 0
-821 -937 5501 0
-821 -935 5499 0
-821 -933 5497 0
-821 -932 5495 0
-819 5509 0
-819 -945 5507 0
-819 -943 5505 0
-819 -941 5503 0
-819 -939 5501 0
-819 -937 5499 0
-819 -935 5497 0
-819 -933 5495 0
-819 -932 5493 0
-817 5507 0
-817 -945 5505 0
-817 -943 5503 0
-817 -941 5501 0
-817 -939 5499 0
-817 -937 5497 0
-817 -935 5495 0
-817 -933 5493 0
-817 -932 5491 0
-815 5505 0
-815 -945 5503 0
-815 -943 5501 0
-815 -941 5499 0
-815 -939 5497 0
-815 -937 5495 0
-815 -935 5493 0
-815 -933 5491 0
-815 -932 5489 0
-813 5503 0
-813 -945 5501 0
-813 -943 5499 0
-813 -941 5497 0
-813 -939 5495 0
-813 -937 5493 0
-813 -935 5491 0
-813 -933 5489 0
-813 -932 5487 0
-812 5501 0
-812 -945 5499 0
-812 -943 5497 0
-812 -941 5495 0
-812 -939 5493 0
-812 -937 5491 0
-812 -935 5489 0
-812 -933 5487 0
-812 -932 5486 0
c ((shift(x_00007_00002, -1) + shift(x_00007_00008, -1) - aux558)<=0)
917 -5517 0
918 -5518 0
920 -5520 0
922 -5522 0
924 -5524 0
926 -5526 0
928 -5528 0
930 -5530 0
827 -5517 0
827 917 -5518 0
827 918 -5520 0
827 920 -5522 0
827 922 -5524 0
827 924 -5526 0
827 926 -5528 0
827 928 -5530 0
827 930 -5532 0
828 -5518 0
828 917 -5520 0
828 918 -5522 0
828 920 -5524 0
828 922 -5526 0
828 924 -5528 0
828 926 -5530 0
828 928 -5532 0
828 930 -5534 0
830 -5520 0
830 917 -5522 0
830 918 -5524 0
830 920 -5526 0
830 922 -5528 0
830 924 -5530 0
830 926 -5532 0
830 928 -5534 0
830 930 -5536 0
832 -5522 0
832 917 -5524 0
832 918 -5526 0
832 920 -5528 0
832 922 -5530 0
832 924 -5532 0
832 926 -5534 0
832 928 -5536 0
832 930 -5538 0
834 -5524 0
834 917 -5526 0
834 918 -5528 0
834 920 -5530 0
834 922 -5532 0
834 924 -5534 0
834 926 -5536 0
834 928 -5538 0
834 930 -5540 0
836 -5526 0
836 917 -5528 0
836 918 -5530 0
836 920 -5532 0
836 922 -5534 0
836 924 -5536 0
836 926 -5538 0
836 928 -5540 0
836 930 -5542 0
838 -5528 0
838 917 -5530 0
838 918 -5532 0
838 920 -5534 0
838 922 -5536 0
838 924 -5538 0
838 926 -5540 0
838 928 -5542 0
838 930 -5544 0
840 -5530 0
840 917 -5532 0
840 918 -5534 0
840 920 -5536 0
840 922 -5538 0
840 924 -5540 0
840 926 -5542 0
840 928 -5544 0
840 930 -5546 0
c (0<=(shift(x_00007_00002, -1) + shift(x_00007_00008, -1) - aux558))
-930 5546 0
-928 5544 0
-926 5542 0
-924 5540 0
-922 5538 0
-920 5536 0
-918 5534 0
-917 5532 0
-840 5546 0
-840 -930 5544 0
-840 -928 5542 0
-840 -926 5540 0
-840 -924 5538 0
-840 -922 5536 0
-840 -920 5534 0
-840 -918 5532 0
-840 -917 5530 0
-838 5544 0
-838 -930 5542 0
-838 -928 5540 0
-838 -926 5538 0
-838 -924 5536 0
-838 -922 5534 0
-838 -920 5532 0
-838 -918 5530 0
-838 -917 5528 0
-836 5542 0
-836 -930 5540 0
-836 -928 5538 0
-836 -926 5536 0
-836 -924 5534 0
-836 -922 5532 0
-836 -920 5530 0
-836 -918 5528 0
-836 -917 5526 0
-834 5540 0
-834 -930 5538 0
-834 -928 5536 0
-834 -926 5534 0
-834 -924 5532 0
-834 -922 5530 0
-834 -920 5528 0
-834 -918 5526 0
-834 -917 5524 0
-832 5538 0
-832 -930 5536 0
-832 -928 5534 0
-832 -926 5532 0
-832 -924 5530 0
-832 -922 5528 0
-832 -920 5526 0
-832 -918 5524 0
-832 -917 5522 0
-830 5536 0
-830 -930 5534 0
-830 -928 5532 0
-830 -926 5530 0
-830 -924 5528 0
-830 -922 5526 0
-830 -920 5524 0
-830 -918 5522 0
-830 -917 5520 0
-828 5534 0
-828 -930 5532 0
-828 -928 5530 0
-828 -926 5528 0
-828 -924 5526 0
-828 -922 5524 0
-828 -920 5522 0
-828 -918 5520 0
-828 -917 5518 0
-827 5532 0
-827 -930 5530 0
-827 -928 5528 0
-827 -926 5526 0
-827 -924 5524 0
-827 -922 5522 0
-827 -920 5520 0
-827 -918 5518 0
-827 -917 5517 0
c ((shift(x_00007_00004, -1) + shift(x_00007_00007, -1) - aux559)<=0)
902 -5548 0
903 -5549 0
905 -5551 0
907 -5553 0
909 -5555 0
911 -5557 0
913 -5559 0
915 -5561 0
857 -5548 0
857 902 -5549 0
857 903 -5551 0
857 905 -5553 0
857 907 -5555 0
857 909 -5557 0
857 911 -5559 0
857 913 -5561 0
857 915 -5563 0
858 -5549 0
858 902 -5551 0
858 903 -5553 0
858 905 -5555 0
858 907 -5557 0
858 909 -5559 0
858 911 -5561 0
858 913 -5563 0
858 915 -5565 0
860 -5551 0
860 902 -5553 0
860 903 -5555 0
860 905 -5557 0
860 907 -5559 0
860 909 -5561 0
860 911 -5563 0
860 913 -5565 0
860 915 -5567 0
862 -5553 0
862 902 -5555 0
862 903 -5557 0
862 905 -5559 0
862 907 -5561 0
862 909 -5563 0
862 911 -5565 0
862 913 -5567 0
862 915 -5569 0
864 -5555 0
864 902 -5557 0
864 903 -5559 0
864 905 -5561 0
864 907 -5563 0
864 909 -5565 0
864 911 -5567 0
864 913 -5569 0
864 915 -5571 0
866 -5557 0
866 902 -5559 0
866 903 -5561 0
866 905 -5563 0
866 907 -5565 0
866 909 -5567 0
866 911 -5569 0
866 913 -5571 0
866 915 -5573 0
868 -5559 0
868 902 -5561 0
868 903 -5563 0
868 905 -5565 0
868 907 -5567 0
868 909 -5569 0
868 911 -5571 0
868 913 -5573 0
868 915 -5575 0
870 -5561 0
870 902 -5563 0
870 903 -5565 0
870 905 -5567 0
870 907 -5569 0
870 909 -5571 0
870 911 -5573 0
870 913 -5575 0
870 915 -5577 0
c (0<=(shift(x_00007_00004, -1) + shift(x_00007_00007, -1) - aux559))
-915 5577 0
-913 5575 0
-911 5573 0
-909 5571 0
-907 5569 0
-905 5567 0
-903 5565 0
-902 5563 0
-870 5577 0
-870 -915 5575 0
-870 -913 5573 0
-870 -911 5571 0
-870 -909 5569 0
-870 -907 5567 0
-870 -905 5565 0
-870 -903 5563 0
-870 -902 5561 0
-868 5575 0
-868 -915 5573 0
-868 -913 5571 0
-868 -911 5569 0
-868 -909 5567 0
-868 -907 5565 0
-868 -905 5563 0
-868 -903 5561 0
-868 -902 5559 0
-866 5573 0
-866 -915 5571 0
-866 -913 5569 0
-866 -911 5567 0
-866 -909 5565 0
-866 -907 5563 0
-866 -905 5561 0
-866 -903 5559 0
-866 -902 5557 0
-864 5571 0
-864 -915 5569 0
-864 -913 5567 0
-864 -911 5565 0
-864 -909 5563 0
-864 -907 5561 0
-864 -905 5559 0
-864 -903 5557 0
-864 -902 5555 0
-862 5569 0
-862 -915 5567 0
-862 -913 5565 0
-862 -911 5563 0
-862 -909 5561 0
-862 -907 5559 0
-862 -905 5557 0
-862 -903 5555 0
-862 -902 5553 0
-860 5567 0
-860 -915 5565 0
-860 -913 5563 0
-860 -911 5561 0
-860 -909 5559 0
-860 -907 5557 0
-860 -905 5555 0
-860 -903 5553 0
-860 -902 5551 0
-858 5565 0
-858 -915 5563 0
-858 -913 5561 0
-858 -911 5559 0
-858 -909 5557 0
-858 -907 5555 0
-858 -905 5553 0
-858 -903 5551 0
-858 -902 5549 0
-857 5563 0
-857 -915 5561 0
-857 -913 5559 0
-857 -911 5557 0
-857 -909 5555 0
-857 -907 5553 0
-857 -905 5551 0
-857 -903 5549 0
-857 -902 5548 0
c ((shift(x_00007_00005, -1) + shift(x_00007_00006, -1) - aux560)<=0)
887 -5579 0
888 -5580 0
890 -5582 0
892 -5584 0
894 -5586 0
896 -5588 0
898 -5590 0
900 -5592 0
872 -5579 0
872 887 -5580 0
872 888 -5582 0
872 890 -5584 0
872 892 -5586 0
872 894 -5588 0
872 896 -5590 0
872 898 -5592 0
872 900 -5594 0
873 -5580 0
873 887 -5582 0
873 888 -5584 0
873 890 -5586 0
873 892 -5588 0
873 894 -5590 0
873 896 -5592 0
873 898 -5594 0
873 900 -5596 0
875 -5582 0
875 887 -5584 0
875 888 -5586 0
875 890 -5588 0
875 892 -5590 0
875 894 -5592 0
875 896 -5594 0
875 898 -5596 0
875 900 -5598 0
877 -5584 0
877 887 -5586 0
877 888 -5588 0
877 890 -5590 0
877 892 -5592 0
877 894 -5594 0
877 896 -5596 0
877 898 -5598 0
877 900 -5600 0
879 -5586 0
879 887 -5588 0
879 888 -5590 0
879 890 -5592 0
879 892 -5594 0
879 894 -5596 0
879 896 -5598 0
879 898 -5600 0
879 900 -5602 0
881 -5588 0
881 887 -5590 0
881 888 -5592 0
881 890 -5594 0
881 892 -5596 0
881 894 -5598 0
881 896 -5600 0
881 898 -5602 0
881 900 -5604 0
883 -5590 0
883 887 -5592 0
883 888 -5594 0
883 890 -5596 0
883 892 -5598 0
883 894 -5600 0
883 896 -5602 0
883 898 -5604 0
883 900 -5606 0
885 -5592 0
885 887 -5594 0
885 888 -5596 0
885 890 -5598 0
885 892 -5600 0
885 894 -5602 0
885 896 -5604 0
885 898 -5606 0
885 900 -5608 0
c (0<=(shift(x_00007_00005, -1) + shift(x_00007_00006, -1) - aux560))
-900 5608 0
-898 5606 0
-896 5604 0
-894 5602 0
-892 5600 0
-890 5598 0
-888 5596 0
-887 5594 0
-885 5608 0
-885 -900 5606 0
-885 -898 5604 0
-885 -896 5602 0
-885 -894 5600 0
-885 -892 5598 0
-885 -890 5596 0
-885 -888 5594 0
-885 -887 5592 0
-883 5606 0
-883 -900 5604 0
-883 -898 5602 0
-883 -896 5600 0
-883 -894 5598 0
-883 -892 5596 0
-883 -890 5594 0
-883 -888 5592 0
-883 -887 5590 0
-881 5604 0
-881 -900 5602 0
-881 -898 5600 0
-881 -896 5598 0
-881 -894 5596 0
-881 -892 5594 0
-881 -890 5592 0
-881 -888 5590 0
-881 -887 5588 0
-879 5602 0
-879 -900 5600 0
-879 -898 5598 0
-879 -896 5596 0
-879 -894 5594 0
-879 -892 5592 0
-879 -890 5590 0
-879 -888 5588 0
-879 -887 5586 0
-877 5600 0
-877 -900 5598 0
-877 -898 5596 0
-877 -896 5594 0
-877 -894 5592 0
-877 -892 5590 0
-877 -890 5588 0
-877 -888 5586 0
-877 -887 5584 0
-875 5598 0
-875 -900 5596 0
-875 -898 5594 0
-875 -896 5592 0
-875 -894 5590 0
-875 -892 5588 0
-875 -890 5586 0
-875 -888 5584 0
-875 -887 5582 0
-873 5596 0
-873 -900 5594 0
-873 -898 5592 0
-873 -896 5590 0
-873 -894 5588 0
-873 -892 5586 0
-873 -890 5584 0
-873 -888 5582 0
-873 -887 5580 0
-872 5594 0
-872 -900 5592 0
-872 -898 5590 0
-872 -896 5588 0
-872 -894 5586 0
-872 -892 5584 0
-872 -890 5582 0
-872 -888 5580 0
-872 -887 5579 0
c ((shift(x_00007_00003, -1) + aux560 - aux561)<=0)
5579 -5610 0
5580 -5611 0
5582 -5613 0
5584 -5615 0
5586 -5617 0
5588 -5619 0
5590 -5621 0
5592 -5623 0
5594 -5625 0
5596 -5627 0
5598 -5629 0
5600 -5631 0
5602 -5633 0
5604 -5635 0
5606 -5637 0
5608 -5639 0
842 -5610 0
842 5579 -5611 0
842 5580 -5613 0
842 5582 -5615 0
842 5584 -5617 0
842 5586 -5619 0
842 5588 -5621 0
842 5590 -5623 0
842 5592 -5625 0
842 5594 -5627 0
842 5596 -5629 0
842 5598 -5631 0
842 5600 -5633 0
842 5602 -5635 0
842 5604 -5637 0
842 5606 -5639 0
842 5608 -5641 0
843 -5611 0
843 5579 -5613 0
843 5580 -5615 0
843 5582 -5617 0
843 5584 -5619 0
843 5586 -5621 0
843 5588 -5623 0
843 5590 -5625 0
843 5592 -5627 0
843 5594 -5629 0
843 5596 -5631 0
843 5598 -5633 0
843 5600 -5635 0
843 5602 -5637 0
843 5604 -5639 0
843 5606 -5641 0
843 5608 -5643 0
845 -5613 0
845 5579 -5615 0
845 5580 -5617 0
845 5582 -5619 0
845 5584 -5621 0
845 5586 -5623 0
845 5588 -5625 0
845 5590 -5627 0
845 5592 -5629 0
845 5594 -5631 0
845 5596 -5633 0
845 5598 -5635 0
845 5600 -5637 0
845 5602 -5639 0
845 5604 -5641 0
845 5606 -5643 0
845 5608 -5645 0
847 -5615 0
847 5579 -5617 0
847 5580 -5619 0
847 5582 -5621 0
847 5584 -5623 0
847 5586 -5625 0
847 5588 -5627 0
847 5590 -5629 0
847 5592 -5631 0
847 5594 -5633 0
847 5596 -5635 0
847 5598 -5637 0
847 5600 -5639 0
847 5602 -5641 0
847 5604 -5643 0
847 5606 -5645 0
847 5608 -5647 0
849 -5617 0
849 5579 -5619 0
849 5580 -5621 0
849 5582 -5623 0
849 5584 -5625 0
849 5586 -5627 0
849 5588 -5629 0
849 5590 -5631 0
849 5592 -5633 0
849 5594 -5635 0
849 5596 -5637 0
849 5598 -5639 0
849 5600 -5641 0
849 5602 -5643 0
849 5604 -5645 0
849 5606 -5647 0
849 5608 -5649 0
851 -5619 0
851 5579 -5621 0
851 5580 -5623 0
851 5582 -5625 0
851 5584 -5627 0
851 5586 -5629 0
851 5588 -5631 0
851 5590 -5633 0
851 5592 -5635 0
851 5594 -5637 0
851 5596 -5639 0
851 5598 -5641 0
851 5600 -5643 0
851 5602 -5645 0
851 5604 -5647 0
851 5606 -5649 0
851 5608 -5651 0
853 -5621 0
853 5579 -5623 0
853 5580 -5625 0
853 5582 -5627 0
853 5584 -5629 0
853 5586 -5631 0
853 5588 -5633 0
853 5590 -5635 0
853 5592 -5637 0
853 5594 -5639 0
853 5596 -5641 0
853 5598 -5643 0
853 5600 -5645 0
853 5602 -5647 0
853 5604 -5649 0
853 5606 -5651 0
853 5608 -5653 0
855 -5623 0
855 5579 -5625 0
855 5580 -5627 0
855 5582 -5629 0
855 5584 -5631 0
855 5586 -5633 0
855 5588 -5635 0
855 5590 -5637 0
855 5592 -5639 0
855 5594 -5641 0
855 5596 -5643 0
855 5598 -5645 0
855 5600 -5647 0
855 5602 -5649 0
855 5604 -5651 0
855 5606 -5653 0
855 5608 -5655 0
c (0<=(shift(x_00007_00003, -1) + aux560 - aux561))
-5608 5655 0
-5606 5653 0
-5604 5651 0
-5602 5649 0
-5600 5647 0
-5598 5645 0
-5596 5643 0
-5594 5641 0
-5592 5639 0
-5590 5637 0
-5588 5635 0
-5586 5633 0
-5584 5631 0
-5582 5629 0
-5580 5627 0
-5579 5625 0
-855 5655 0
-855 -5608 5653 0
-855 -5606 5651 0
-855 -5604 5649 0
-855 -5602 5647 0
-855 -5600 5645 0
-855 -5598 5643 0
-855 -5596 5641 0
-855 -5594 5639 0
-855 -5592 5637 0
-855 -5590 5635 0
-855 -5588 5633 0
-855 -5586 5631 0
-855 -5584 5629 0
-855 -5582 5627 0
-855 -5580 5625 0
-855 -5579 5623 0
-853 5653 0
-853 -5608 5651 0
-853 -5606 5649 0
-853 -5604 5647 0
-853 -5602 5645 0
-853 -5600 5643 0
-853 -5598 5641 0
-853 -5596 5639 0
-853 -5594 5637 0
-853 -5592 5635 0
-853 -5590 5633 0
-853 -5588 5631 0
-853 -5586 5629 0
-853 -5584 5627 0
-853 -5582 5625 0
-853 -5580 5623 0
-853 -5579 5621 0
-851 5651 0
-851 -5608 5649 0
-851 -5606 5647 0
-851 -5604 5645 0
-851 -5602 5643 0
-851 -5600 5641 0
-851 -5598 5639 0
-851 -5596 5637 0
-851 -5594 5635 0
-851 -5592 5633 0
-851 -5590 5631 0
-851 -5588 5629 0
-851 -5586 5627 0
-851 -5584 5625 0
-851 -5582 5623 0
-851 -5580 5621 0
-851 -5579 5619 0
-849 5649 0
-849 -5608 5647 0
-849 -5606 5645 0
-849 -5604 5643 0
-849 -5602 5641 0
-849 -5600 5639 0
-849 -5598 5637 0
-849 -5596 5635 0
-849 -5594 5633 0
-849 -5592 5631 0
-849 -5590 5629 0
-849 -5588 5627 0
-849 -5586 5625 0
-849 -5584 5623 0
-849 -5582 5621 0
-849 -5580 5619 0
-849 -5579 5617 0
-847 5647 0
-847 -5608 5645 0
-847 -5606 5643 0
-847 -5604 5641 0
-847 -5602 5639 0
-847 -5600 5637 0
-847 -5598 5635 0
-847 -5596 5633 0
-847 -5594 5631 0
-847 -5592 5629 0
-847 -5590 5627 0
-847 -5588 5625 0
-847 -5586 5623 0
-847 -5584 5621 0
-847 -5582 5619 0
-847 -5580 5617 0
-847 -5579 5615 0
-845 5645 0
-845 -5608 5643 0
-845 -5606 5641 0
-845 -5604 5639 0
-845 -5602 5637 0
-845 -5600 5635 0
-845 -5598 5633 0
-845 -5596 5631 0
-845 -5594 5629 0
-845 -5592 5627 0
-845 -5590 5625 0
-845 -5588 5623 0
-845 -5586 5621 0
-845 -5584 5619 0
-845 -5582 5617 0
-845 -5580 5615 0
-845 -5579 5613 0
-843 5643 0
-843 -5608 5641 0
-843 -5606 5639 0
-843 -5604 5637 0
-843 -5602 5635 0
-843 -5600 5633 0
-843 -5598 5631 0
-843 -5596 5629 0
-843 -5594 5627 0
-843 -5592 5625 0
-843 -5590 5623 0
-843 -5588 5621 0
-843 -5586 5619 0
-843 -5584 5617 0
-843 -5582 5615 0
-843 -5580 5613 0
-843 -5579 5611 0
-842 5641 0
-842 -5608 5639 0
-842 -5606 5637 0
-842 -5604 5635 0
-842 -5602 5633 0
-842 -5600 5631 0
-842 -5598 5629 0
-842 -5596 5627 0
-842 -5594 5625 0
-842 -5592 5623 0
-842 -5590 5621 0
-842 -5588 5619 0
-842 -5586 5617 0
-842 -5584 5615 0
-842 -5582 5613 0
-842 -5580 5611 0
-842 -5579 5610 0
c ((aux557 + aux559 - aux562)<=0)
5548 -5657 0
5549 -5658 0
5551 -5660 0
5553 -5662 0
5555 -5664 0
5557 -5666 0
5559 -5668 0
5561 -5670 0
5563 -5672 0
5565 -5674 0
5567 -5676 0
5569 -5678 0
5571 -5680 0
5573 -5682 0
5575 -5684 0
5577 -5686 0
5486 -5657 0
5486 5548 -5658 0
5486 5549 -5660 0
5486 5551 -5662 0
5486 5553 -5664 0
5486 5555 -5666 0
5486 5557 -5668 0
5486 5559 -5670 0
5486 5561 -5672 0
5486 5563 -5674 0
5486 5565 -5676 0
5486 5567 -5678 0
5486 5569 -5680 0
5486 5571 -5682 0
5486 5573 -5684 0
5486 5575 -5686 0
5486 5577 -5688 0
5487 -5658 0
5487 5548 -5660 0
5487 5549 -5662 0
5487 5551 -5664 0
5487 5553 -5666 0
5487 5555 -5668 0
5487 5557 -5670 0
5487 5559 -5672 0
5487 5561 -5674 0
5487 5563 -5676 0
5487 5565 -5678 0
5487 5567 -5680 0
5487 5569 -5682 0
5487 5571 -5684 0
5487 5573 -5686 0
5487 5575 -5688 0
5487 5577 -5690 0
5489 -5660 0
5489 5548 -5662 0
5489 5549 -5664 0
5489 5551 -5666 0
5489 5553 -5668 0
5489 5555 -5670 0
5489 5557 -5672 0
5489 5559 -5674 0
5489 5561 -5676 0
5489 5563 -5678 0
5489 5565 -5680 0
5489 5567 -5682 0
5489 5569 -5684 0
5489 5571 -5686 0
5489 5573 -5688 0
5489 5575 -5690 0
5489 5577 -5692 0
5491 -5662 0
5491 5548 -5664 0
5491 5549 -5666 0
5491 5551 -5668 0
5491 5553 -5670 0
5491 5555 -5672 0
5491 5557 -5674 0
5491 5559 -5676 0
5491 5561 -5678 0
5491 5563 -5680 0
5491 5565 -5682 0
5491 5567 -5684 0
5491 5569 -5686 0
5491 5571 -5688 0
5491 5573 -5690 0
5491 5575 -5692 0
5491 5577 -5694 0
5493 -5664 0
5493 5548 -5666 0
5493 5549 -5668 0
5493 5551 -5670 0
5493 5553 -5672 0
5493 5555 -5674 0
5493 5557 -5676 0
5493 5559 -5678 0
5493 5561 -5680 0
5493 5563 -5682 0
5493 5565 -5684 0
5493 5567 -5686 0
5493 5569 -5688 0
5493 5571 -5690 0
5493 5573 -5692 0
5493 5575 -5694 0
5493 5577 -5696 0
5495 -5666 0
5495 5548 -5668 0
5495 5549 -5670 0
5495 5551 -5672 0
5495 5553 -5674 0
5495 5555 -5676 0
5495 5557 -5678 0
5495 5559 -5680 0
5495 5561 -5682 0
5495 5563 -5684 0
5495 5565 -5686 0
5495 5567 -5688 0
5495 5569 -5690 0
5495 5571 -5692 0
5495 5573 -5694 0
5495 5575 -5696 0
5495 5577 -5698 0
5497 -5668 0
5497 5548 -5670 0
5497 5549 -5672 0
5497 5551 -5674 0
5497 5553 -5676 0
5497 5555 -5678 0
5497 5557 -5680 0
5497 5559 -5682 0
5497 5561 -5684 0
5497 5563 -5686 0
5497 5565 -5688 0
5497 5567 -5690 0
5497 5569 -5692 0
5497 5571 -5694 0
5497 5573 -5696 0
5497 5575 -5698 0
5497 5577 -5700 0
5499 -5670 0
5499 5548 -5672 0
5499 5549 -5674 0
5499 5551 -5676 0
5499 5553 -5678 0
5499 5555 -5680 0
5499 5557 -5682 0
5499 5559 -5684 0
5499 5561 -5686 0
5499 5563 -5688 0
5499 5565 -5690 0
5499 5567 -5692 0
5499 5569 -5694 0
5499 5571 -5696 0
5499 5573 -5698 0
5499 5575 -5700 0
5499 5577 -5702 0
5501 -5672 0
5501 5548 -5674 0
5501 5549 -5676 0
5501 5551 -5678 0
5501 5553 -5680 0
5501 5555 -5682 0
5501 5557 -5684 0
5501 5559 -5686 0
5501 5561 -5688 0
5501 5563 -5690 0
5501 5565 -5692 0
5501 5567 -5694 0
5501 5569 -5696 0
5501 5571 -5698 0
5501 5573 -5700 0
5501 5575 -5702 0
5501 5577 -5704 0
5503 -5674 0
5503 5548 -5676 0
5503 5549 -5678 0
5503 5551 -5680 0
5503 5553 -5682 0
5503 5555 -5684 0
5503 5557 -5686 0
5503 5559 -5688 0
5503 5561 -5690 0
5503 5563 -5692 0
5503 5565 -5694 0
5503 5567 -5696 0
5503 5569 -5698 0
5503 5571 -5700 0
5503 5573 -5702 0
5503 5575 -5704 0
5503 5577 -5706 0
5505 -5676 0
5505 5548 -5678 0
5505 5549 -5680 0
5505 5551 -5682 0
5505 5553 -5684 0
5505 5555 -5686 0
5505 5557 -5688 0
5505 5559 -5690 0
5505 5561 -5692 0
5505 5563 -5694 0
5505 5565 -5696 0
5505 5567 -5698 0
5505 5569 -5700 0
5505 5571 -5702 0
5505 5573 -5704 0
5505 5575 -5706 0
5505 5577 -5708 0
5507 -5678 0
5507 5548 -5680 0
5507 5549 -5682 0
5507 5551 -5684 0
5507 5553 -5686 0
5507 5555 -5688 0
5507 5557 -5690 0
5507 5559 -5692 0
5507 5561 -5694 0
5507 5563 -5696 0
5507 5565 -5698 0
5507 5567 -5700 0
5507 5569 -5702 0
5507 5571 -5704 0
5507 5573 -5706 0
5507 5575 -5708 0
5507 5577 -5710 0
5509 -5680 0
5509 5548 -5682 0
5509 5549 -5684 0
5509 5551 -5686 0
5509 5553 -5688 0
5509 5555 -5690 0
5509 5557 -5692 0
5509 5559 -5694 0
5509 5561 -5696 0
5509 5563 -5698 0
5509 5565 -5700 0
5509 5567 -5702 0
5509 5569 -5704 0
5509 5571 -5706 0
5509 5573 -5708 0
5509 5575 -5710 0
5509 5577 -5712 0
5511 -5682 0
5511 5548 -5684 0
5511 5549 -5686 0
5511 5551 -5688 0
5511 5553 -5690 0
5511 5555 -5692 0
5511 5557 -5694 0
5511 5559 -5696 0
5511 5561 -5698 0
5511 5563 -5700 0
5511 5565 -5702 0
5511 5567 -5704 0
5511 5569 -5706 0
5511 5571 -5708 0
5511 5573 -5710 0
5511 5575 -5712 0
5511 5577 -5714 0
5513 -5684 0
5513 5548 -5686 0
5513 5549 -5688 0
5513 5551 -5690 0
5513 5553 -5692 0
5513 5555 -5694 0
5513 5557 -5696 0
5513 5559 -5698 0
5513 5561 -5700 0
5513 5563 -5702 0
5513 5565 -5704 0
5513 5567 -5706 0
5513 5569 -5708 0
5513 5571 -5710 0
5513 5573 -5712 0
5513 5575 -5714 0
5513 5577 -5716 0
5515 -5686 0
5515 5548 -5688 0
5515 5549 -5690 0
5515 5551 -5692 0
5515 5553 -5694 0
5515 5555 -5696 0
5515 5557 -5698 0
5515 5559 -5700 0
5515 5561 -5702 0
5515 5563 -5704 0
5515 5565 -5706 0
5515 5567 -5708 0
5515 5569 -5710 0
5515 5571 -5712 0
5515 5573 -5714 0
5515 5575 -5716 0
5515 5577 -5718 0
c (0<=(aux557 + aux559 - aux562))
-5577 5718 0
-5575 5716 0
-5573 5714 0
-5571 5712 0
-5569 5710 0
-5567 5708 0
-5565 5706 0
-5563 5704 0
-5561 5702 0
-5559 5700 0
-5557 5698 0
-5555 5696 0
-5553 5694 0
-5551 5692 0
-5549 5690 0
-5548 5688 0
-5515 5718 0
-5515 -5577 5716 0
-5515 -5575 5714 0
-5515 -5573 5712 0
-5515 -5571 5710 0
-5515 -5569 5708 0
-5515 -5567 5706 0
-5515 -5565 5704 0
-5515 -5563 5702 0
-5515 -5561 5700 0
-5515 -5559 5698 0
-5515 -5557 5696 0
-5515 -5555 5694 0
-5515 -5553 5692 0
-5515 -5551 5690 0
-5515 -5549 5688 0
-5515 -5548 5686 0
-5513 5716 0
-5513 -5577 5714 0
-5513 -5575 5712 0
-5513 -5573 5710 0
-5513 -5571 5708 0
-5513 -5569 5706 0
-5513 -5567 5704 0
-5513 -5565 5702 0
-5513 -5563 5700 0
-5513 -5561 5698 0
-5513 -5559 5696 0
-5513 -5557 5694 0
-5513 -5555 5692 0
-5513 -5553 5690 0
-5513 -5551 5688 0
-5513 -5549 5686 0
-5513 -5548 5684 0
-5511 5714 0
-5511 -5577 5712 0
-5511 -5575 5710 0
-5511 -5573 5708 0
-5511 -5571 5706 0
-5511 -5569 5704 0
-5511 -5567 5702 0
-5511 -5565 5700 0
-5511 -5563 5698 0
-5511 -5561 5696 0
-5511 -5559 5694 0
-5511 -5557 5692 0
-5511 -5555 5690 0
-5511 -5553 5688 0
-5511 -5551 5686 0
-5511 -5549 5684 0
-5511 -5548 5682 0
-5509 5712 0
-5509 -5577 5710 0
-5509 -5575 5708 0
-5509 -5573 5706 0
-5509 -5571 5704 0
-5509 -5569 5702 0
-5509 -5567 5700 0
-5509 -5565 5698 0
-5509 -5563 5696 0
-5509 -5561 5694 0
-5509 -5559 5692 0
-5509 -5557 5690 0
-5509 -5555 5688 0
-5509 -5553 5686 0
-5509 -5551 5684 0
-5509 -5549 5682 0
-5509 -5548 5680 0
-5507 5710 0
-5507 -5577 5708 0
-5507 -5575 5706 0
-5507 -5573 5704 0
-5507 -5571 5702 0
-5507 -5569 5700 0
-5507 -5567 5698 0
-5507 -5565 5696 0
-5507 -5563 5694 0
-5507 -5561 5692 0
-5507 -5559 5690 0
-5507 -5557 5688 0
-5507 -5555 5686 0
-5507 -5553 5684 0
-5507 -5551 5682 0
-5507 -5549 5680 0
-5507 -5548 5678 0
-5505 5708 0
-5505 -5577 5706 0
-5505 -5575 5704 0
-5505 -5573 5702 0
-5505 -5571 5700 0
-5505 -5569 5698 0
-5505 -5567 5696 0
-5505 -5565 5694 0
-5505 -5563 5692 0
-5505 -5561 5690 0
-5505 -5559 5688 0
-5505 -5557 5686 0
-5505 -5555 5684 0
-5505 -5553 5682 0
-5505 -5551 5680 0
-5505 -5549 5678 0
-5505 -5548 5676 0
-5503 5706 0
-5503 -5577 5704 0
-5503 -5575 5702 0
-5503 -5573 5700 0
-5503 -5571 5698 0
-5503 -5569 5696 0
-5503 -5567 5694 0
-5503 -5565 5692 0
-5503 -5563 5690 0
-5503 -5561 5688 0
-5503 -5559 5686 0
-5503 -5557 5684 0
-5503 -5555 5682 0
-5503 -5553 5680 0
-5503 -5551 5678 0
-5503 -5549 5676 0
-5503 -5548 5674 0
-5501 5704 0
-5501 -5577 5702 0
-5501 -5575 5700 0
-5501 -5573 5698 0
-5501 -5571 5696 0
-5501 -5569 5694 0
-5501 -5567 5692 0
-5501 -5565 5690 0
-5501 -5563 5688 0
-5501 -5561 5686 0
-5501 -5559 5684 0
-5501 -5557 5682 0
-5501 -5555 5680 0
-5501 -5553 5678 0
-5501 -5551 5676 0
-5501 -5549 5674 0
-5501 -5548 5672 0
-5499 5702 0
-5499 -5577 5700 0
-5499 -5575 5698 0
-5499 -5573 5696 0
-5499 -5571 5694 0
-5499 -5569 5692 0
-5499 -5567 5690 0
-5499 -5565 5688 0
-5499 -5563 5686 0
-5499 -5561 5684 0
-5499 -5559 5682 0
-5499 -5557 5680 0
-5499 -5555 5678 0
-5499 -5553 5676 0
-5499 -5551 5674 0
-5499 -5549 5672 0
-5499 -5548 5670 0
-5497 5700 0
-5497 -5577 5698 0
-5497 -5575 5696 0
-5497 -5573 5694 0
-5497 -5571 5692 0
-5497 -5569 5690 0
-5497 -5567 5688 0
-5497 -5565 5686 0
-5497 -5563 5684 0
-5497 -5561 5682 0
-5497 -5559 5680 0
-5497 -5557 5678 0
-5497 -5555 5676 0
-5497 -5553 5674 0
-5497 -5551 5672 0
-5497 -5549 5670 0
-5497 -5548 5668 0
-5495 5698 0
-5495 -5577 5696 0
-5495 -5575 5694 0
-5495 -5573 5692 0
-5495 -5571 5690 0
-5495 -5569 5688 0
-5495 -5567 5686 0
-5495 -5565 5684 0
-5495 -5563 5682 0
-5495 -5561 5680 0
-5495 -5559 5678 0
-5495 -5557 5676 0
-5495 -5555 5674 0
-5495 -5553 5672 0
-5495 -5551 5670 0
-5495 -5549 5668 0
-5495 -5548 5666 0
-5493 5696 0
-5493 -5577 5694 0
-5493 -5575 5692 0
-5493 -5573 5690 0
-5493 -5571 5688 0
-5493 -5569 5686 0
-5493 -5567 5684 0
-5493 -5565 5682 0
-5493 -5563 5680 0
-5493 -5561 5678 0
-5493 -5559 5676 0
-5493 -5557 5674 0
-5493 -5555 5672 0
-5493 -5553 5670 0
-5493 -5551 5668 0
-5493 -5549 5666 0
-5493 -5548 5664 0
-5491 5694 0
-5491 -5577 5692 0
-5491 -5575 5690 0
-5491 -5573 5688 0
-5491 -5571 5686 0
-5491 -5569 5684 0
-5491 -5567 5682 0
-5491 -5565 5680 0
-5491 -5563 5678 0
-5491 -5561 5676 0
-5491 -5559 5674 0
-5491 -5557 5672 0
-5491 -5555 5670 0
-5491 -5553 5668 0
-5491 -5551 5666 0
-5491 -5549 5664 0
-5491 -5548 5662 0
-5489 5692 0
-5489 -5577 5690 0
-5489 -5575 5688 0
-5489 -5573 5686 0
-5489 -5571 5684 0
-5489 -5569 5682 0
-5489 -5567 5680 0
-5489 -5565 5678 0
-5489 -5563 5676 0
-5489 -5561 5674 0
-5489 -5559 5672 0
-5489 -5557 5670 0
-5489 -5555 5668 0
-5489 -5553 5666 0
-5489 -5551 5664 0
-5489 -5549 5662 0
-5489 -5548 5660 0
-5487 5690 0
-5487 -5577 5688 0
-5487 -5575 5686 0
-5487 -5573 5684 0
-5487 -5571 5682 0
-5487 -5569 5680 0
-5487 -5567 5678 0
-5487 -5565 5676 0
-5487 -5563 5674 0
-5487 -5561 5672 0
-5487 -5559 5670 0
-5487 -5557 5668 0
-5487 -5555 5666 0
-5487 -5553 5664 0
-5487 -5551 5662 0
-5487 -5549 5660 0
-5487 -5548 5658 0
-5486 5688 0
-5486 -5577 5686 0
-5486 -5575 5684 0
-5486 -5573 5682 0
-5486 -5571 5680 0
-5486 -5569 5678 0
-5486 -5567 5676 0
-5486 -5565 5674 0
-5486 -5563 5672 0
-5486 -5561 5670 0
-5486 -5559 5668 0
-5486 -5557 5666 0
-5486 -5555 5664 0
-5486 -5553 5662 0
-5486 -5551 5660 0
-5486 -5549 5658 0
-5486 -5548 5657 0
c (( - aux563 + shift(x_00008_00001, -1) + shift(x_00008_00009, -1))<=0)
1067 -5720 0
1068 -5721 0
1070 -5723 0
1072 -5725 0
1074 -5727 0
1076 -5729 0
1078 -5731 0
1080 -5733 0
947 -5720 0
947 1067 -5721 0
947 1068 -5723 0
947 1070 -5725 0
947 1072 -5727 0
947 1074 -5729 0
947 1076 -5731 0
947 1078 -5733 0
947 1080 -5735 0
948 -5721 0
948 1067 -5723 0
948 1068 -5725 0
948 1070 -5727 0
948 1072 -5729 0
948 1074 -5731 0
948 1076 -5733 0
948 1078 -5735 0
948 1080 -5737 0
950 -5723 0
950 1067 -5725 0
950 1068 -5727 0
950 1070 -5729 0
950 1072 -5731 0
950 1074 -5733 0
950 1076 -5735 0
950 1078 -5737 0
950 1080 -5739 0
952 -5725 0
952 1067 -5727 0
952 1068 -5729 0
952 1070 -5731 0
952 1072 -5733 0
952 1074 -5735 0
952 1076 -5737 0
952 1078 -5739 0
952 1080 -5741 0
954 -5727 0
954 1067 -5729 0
954 1068 -5731 0
954 1070 -5733 0
954 1072 -5735 0
954 1074 -5737 0
954 1076 -5739 0
954 1078 -5741 0
954 1080 -5743 0
956 -5729 0
956 1067 -5731 0
956 1068 -5733 0
956 1070 -5735 0
956 1072 -5737 0
956 1074 -5739 0
956 1076 -5741 0
956 1078 -5743 0
956 1080 -5745 0
958 -5731 0
958 1067 -5733 0
958 1068 -5735 0
958 1070 -5737 0
958 1072 -5739 0
958 1074 -5741 0
958 1076 -5743 0
958 1078 -5745 0
958 1080 -5747 0
960 -5733 0
960 1067 -5735 0
960 1068 -5737 0
960 1070 -5739 0
960 1072 -5741 0
960 1074 -5743 0
960 1076 -5745 0
960 1078 -5747 0
960 1080 -5749 0
c (0<=( - aux563 + shift(x_00008_00001, -1) + shift(x_00008_00009, -1)))
-1080 5749 0
-1078 5747 0
-1076 5745 0
-1074 5743 0
-1072 5741 0
-1070 5739 0
-1068 5737 0
-1067 5735 0
-960 5749 0
-960 -1080 5747 0
-960 -1078 5745 0
-960 -1076 5743 0
-960 -1074 5741 0
-960 -1072 5739 0
-960 -1070 5737 0
-960 -1068 5735 0
-960 -1067 5733 0
-958 5747 0
-958 -1080 5745 0
-958 -1078 5743 0
-958 -1076 5741 0
-958 -1074 5739 0
-958 -1072 5737 0
-958 -1070 5735 0
-958 -1068 5733 0
-958 -1067 5731 0
-956 5745 0
-956 -1080 5743 0
-956 -1078 5741 0
-956 -1076 5739 0
-956 -1074 5737 0
-956 -1072 5735 0
-956 -1070 5733 0
-956 -1068 5731 0
-956 -1067 5729 0
-954 5743 0
-954 -1080 5741 0
-954 -1078 5739 0
-954 -1076 5737 0
-954 -1074 5735 0
-954 -1072 5733 0
-954 -1070 5731 0
-954 -1068 5729 0
-954 -1067 5727 0
-952 5741 0
-952 -1080 5739 0
-952 -1078 5737 0
-952 -1076 5735 0
-952 -1074 5733 0
-952 -1072 5731 0
-952 -1070 5729 0
-952 -1068 5727 0
-952 -1067 5725 0
-950 5739 0
-950 -1080 5737 0
-950 -1078 5735 0
-950 -1076 5733 0
-950 -1074 5731 0
-950 -1072 5729 0
-950 -1070 5727 0
-950 -1068 5725 0
-950 -1067 5723 0
-948 5737 0
-948 -1080 5735 0
-948 -1078 5733 0
-948 -1076 5731 0
-948 -1074 5729 0
-948 -1072 5727 0
-948 -1070 5725 0
-948 -1068 5723 0
-948 -1067 5721 0
-947 5735 0
-947 -1080 5733 0
-947 -1078 5731 0
-947 -1076 5729 0
-947 -1074 5727 0
-947 -1072 5725 0
-947 -1070 5723 0
-947 -1068 5721 0
-947 -1067 5720 0
c (( - aux564 + shift(x_00008_00002, -1) + shift(x_00008_00008, -1))<=0)
1052 -5751 0
1053 -5752 0
1055 -5754 0
1057 -5756 0
1059 -5758 0
1061 -5760 0
1063 -5762 0
1065 -5764 0
962 -5751 0
962 1052 -5752 0
962 1053 -5754 0
962 1055 -5756 0
962 1057 -5758 0
962 1059 -5760 0
962 1061 -5762 0
962 1063 -5764 0
962 1065 -5766 0
963 -5752 0
963 1052 -5754 0
963 1053 -5756 0
963 1055 -5758 0
963 1057 -5760 0
963 1059 -5762 0
963 1061 -5764 0
963 1063 -5766 0
963 1065 -5768 0
965 -5754 0
965 1052 -5756 0
965 1053 -5758 0
965 1055 -5760 0
965 1057 -5762 0
965 1059 -5764 0
965 1061 -5766 0
965 1063 -5768 0
965 1065 -5770 0
967 -5756 0
967 1052 -5758 0
967 1053 -5760 0
967 1055 -5762 0
967 1057 -5764 0
967 1059 -5766 0
967 1061 -5768 0
967 1063 -5770 0
967 1065 -5772 0
969 -5758 0
969 1052 -5760 0
969 1053 -5762 0
969 1055 -5764 0
969 1057 -5766 0
969 1059 -5768 0
969 1061 -5770 0
969 1063 -5772 0
969 1065 -5774 0
971 -5760 0
971 1052 -5762 0
971 1053 -5764 0
971 1055 -5766 0
971 1057 -5768 0
971 1059 -5770 0
971 1061 -5772 0
971 1063 -5774 0
971 1065 -5776 0
973 -5762 0
973 1052 -5764 0
973 1053 -5766 0
973 1055 -5768 0
973 1057 -5770 0
973 1059 -5772 0
973 1061 -5774 0
973 1063 -5776 0
973 1065 -5778 0
975 -5764 0
975 1052 -5766 0
975 1053 -5768 0
975 1055 -5770 0
975 1057 -5772 0
975 1059 -5774 0
975 1061 -5776 0
975 1063 -5778 0
975 1065 -5780 0
c (0<=( - aux564 + shift(x_00008_00002, -1) + shift(x_00008_00008, -1)))
-1065 5780 0
-1063 5778 0
-1061 5776 0
-1059 5774 0
-1057 5772 0
-1055 5770 0
-1053 5768 0
-1052 5766 0
-975 5780 0
-975 -1065 5778 0
-975 -1063 5776 0
-975 -1061 5774 0
-975 -1059 5772 0
-975 -1057 5770 0
-975 -1055 5768 0
-975 -1053 5766 0
-975 -1052 5764 0
-973 5778 0
-973 -1065 5776 0
-973 -1063 5774 0
-973 -1061 5772 0
-973 -1059 5770 0
-973 -1057 5768 0
-973 -1055 5766 0
-973 -1053 5764 0
-973 -1052 5762 0
-971 5776 0
-971 -1065 5774 0
-971 -1063 5772 0
-971 -1061 5770 0
-971 -1059 5768 0
-971 -1057 5766 0
-971 -1055 5764 0
-971 -1053 5762 0
-971 -1052 5760 0
-969 5774 0
-969 -1065 5772 0
-969 -1063 5770 0
-969 -1061 5768 0
-969 -1059 5766 0
-969 -1057 5764 0
-969 -1055 5762 0
-969 -1053 5760 0
-969 -1052 5758 0
-967 5772 0
-967 -1065 5770 0
-967 -1063 5768 0
-967 -1061 5766 0
-967 -1059 5764 0
-967 -1057 5762 0
-967 -1055 5760 0
-967 -1053 5758 0
-967 -1052 5756 0
-965 5770 0
-965 -1065 5768 0
-965 -1063 5766 0
-965 -1061 5764 0
-965 -1059 5762 0
-965 -1057 5760 0
-965 -1055 5758 0
-965 -1053 5756 0
-965 -1052 5754 0
-963 5768 0
-963 -1065 5766 0
-963 -1063 5764 0
-963 -1061 5762 0
-963 -1059 5760 0
-963 -1057 5758 0
-963 -1055 5756 0
-963 -1053 5754 0
-963 -1052 5752 0
-962 5766 0
-962 -1065 5764 0
-962 -1063 5762 0
-962 -1061 5760 0
-962 -1059 5758 0
-962 -1057 5756 0
-962 -1055 5754 0
-962 -1053 5752 0
-962 -1052 5751 0
c (( - aux565 + shift(x_00008_00004, -1) + shift(x_00008_00007, -1))<=0)
1037 -5782 0
1038 -5783 0
1040 -5785 0
1042 -5787 0
1044 -5789 0
1046 -5791 0
1048 -5793 0
1050 -5795 0
992 -5782 0
992 1037 -5783 0
992 1038 -5785 0
992 1040 -5787 0
992 1042 -5789 0
992 1044 -5791 0
992 1046 -5793 0
992 1048 -5795 0
992 1050 -5797 0
993 -5783 0
993 1037 -5785 0
993 1038 -5787 0
993 1040 -5789 0
993 1042 -5791 0
993 1044 -5793 0
993 1046 -5795 0
993 1048 -5797 0
993 1050 -5799 0
995 -5785 0
995 1037 -5787 0
995 1038 -5789 0
995 1040 -5791 0
995 1042 -5793 0
995 1044 -5795 0
995 1046 -5797 0
995 1048 -5799 0
995 1050 -5801 0
997 -5787 0
997 1037 -5789 0
997 1038 -5791 0
997 1040 -5793 0
997 1042 -5795 0
997 1044 -5797 0
997 1046 -5799 0
997 1048 -5801 0
997 1050 -5803 0
999 -5789 0
999 1037 -5791 0
999 1038 -5793 0
999 1040 -5795 0
999 1042 -5797 0
999 1044 -5799 0
999 1046 -5801 0
999 1048 -5803 0
999 1050 -5805 0
1001 -5791 0
1001 1037 -5793 0
1001 1038 -5795 0
1001 1040 -5797 0
1001 1042 -5799 0
1001 1044 -5801 0
1001 1046 -5803 0
1001 1048 -5805 0
1001 1050 -5807 0
1003 -5793 0
1003 1037 -5795 0
1003 1038 -5797 0
1003 1040 -5799 0
1003 1042 -5801 0
1003 1044 -5803 0
1003 1046 -5805 0
1003 1048 -5807 0
1003 1050 -5809 0
1005 -5795 0
1005 1037 -5797 0
1005 1038 -5799 0
1005 1040 -5801 0
1005 1042 -5803 0
1005 1044 -5805 0
1005 1046 -5807 0
1005 1048 -5809 0
1005 1050 -5811 0
c (0<=( - aux565 + shift(x_00008_00004, -1) + shift(x_00008_00007, -1)))
-1050 5811 0
-1048 5809 0
-1046 5807 0
-1044 5805 0
-1042 5803 0
-1040 5801 0
-1038 5799 0
-1037 5797 0
-1005 5811 0
-1005 -1050 5809 0
-1005 -1048 5807 0
-1005 -1046 5805 0
-1005 -1044 5803 0
-1005 -1042 5801 0
-1005 -1040 5799 0
-1005 -1038 5797 0
-1005 -1037 5795 0
-1003 5809 0
-1003 -1050 5807 0
-1003 -1048 5805 0
-1003 -1046 5803 0
-1003 -1044 5801 0
-1003 -1042 5799 0
-1003 -1040 5797 0
-1003 -1038 5795 0
-1003 -1037 5793 0
-1001 5807 0
-1001 -1050 5805 0
-1001 -1048 5803 0
-1001 -1046 5801 0
-1001 -1044 5799 0
-1001 -1042 5797 0
-1001 -1040 5795 0
-1001 -1038 5793 0
-1001 -1037 5791 0
-999 5805 0
-999 -1050 5803 0
-999 -1048 5801 0
-999 -1046 5799 0
-999 -1044 5797 0
-999 -1042 5795 0
-999 -1040 5793 0
-999 -1038 5791 0
-999 -1037 5789 0
-997 5803 0
-997 -1050 5801 0
-997 -1048 5799 0
-997 -1046 5797 0
-997 -1044 5795 0
-997 -1042 5793 0
-997 -1040 5791 0
-997 -1038 5789 0
-997 -1037 5787 0
-995 5801 0
-995 -1050 5799 0
-995 -1048 5797 0
-995 -1046 5795 0
-995 -1044 5793 0
-995 -1042 5791 0
-995 -1040 5789 0
-995 -1038 5787 0
-995 -1037 5785 0
-993 5799 0
-993 -1050 5797 0
-993 -1048 5795 0
-993 -1046 5793 0
-993 -1044 5791 0
-993 -1042 5789 0
-993 -1040 5787 0
-993 -1038 5785 0
-993 -1037 5783 0
-992 5797 0
-992 -1050 5795 0
-992 -1048 5793 0
-992 -1046 5791 0
-992 -1044 5789 0
-992 -1042 5787 0
-992 -1040 5785 0
-992 -1038 5783 0
-992 -1037 5782 0
c (( - aux566 + shift(x_00008_00005, -1) + shift(x_00008_00006, -1))<=0)
1022 -5813 0
1023 -5814 0
1025 -5816 0
1027 -5818 0
1029 -5820 0
1031 -5822 0
1033 -5824 0
1035 -5826 0
1007 -5813 0
1007 1022 -5814 0
1007 1023 -5816 0
1007 1025 -5818 0
1007 1027 -5820 0
1007 1029 -5822 0
1007 1031 -5824 0
1007 1033 -5826 0
1007 1035 -5828 0
1008 -5814 0
1008 1022 -5816 0
1008 1023 -5818 0
1008 1025 -5820 0
1008 1027 -5822 0
1008 1029 -5824 0
1008 1031 -5826 0
1008 1033 -5828 0
1008 1035 -5830 0
1010 -5816 0
1010 1022 -5818 0
1010 1023 -5820 0
1010 1025 -5822 0
1010 1027 -5824 0
1010 1029 -5826 0
1010 1031 -5828 0
1010 1033 -5830 0
1010 1035 -5832 0
1012 -5818 0
1012 1022 -5820 0
1012 1023 -5822 0
1012 1025 -5824 0
1012 1027 -5826 0
1012 1029 -5828 0
1012 1031 -5830 0
1012 1033 -5832 0
1012 1035 -5834 0
1014 -5820 0
1014 1022 -5822 0
1014 1023 -5824 0
1014 1025 -5826 0
1014 1027 -5828 0
1014 1029 -5830 0
1014 1031 -5832 0
1014 1033 -5834 0
1014 1035 -5836 0
1016 -5822 0
1016 1022 -5824 0
1016 1023 -5826 0
1016 1025 -5828 0
1016 1027 -5830 0
1016 1029 -5832 0
1016 1031 -5834 0
1016 1033 -5836 0
1016 1035 -5838 0
1018 -5824 0
1018 1022 -5826 0
1018 1023 -5828 0
1018 1025 -5830 0
1018 1027 -5832 0
1018 1029 -5834 0
1018 1031 -5836 0
1018 1033 -5838 0
1018 1035 -5840 0
1020 -5826 0
1020 1022 -5828 0
1020 1023 -5830 0
1020 1025 -5832 0
1020 1027 -5834 0
1020 1029 -5836 0
1020 1031 -5838 0
1020 1033 -5840 0
1020 1035 -5842 0
c (0<=( - aux566 + shift(x_00008_00005, -1) + shift(x_00008_00006, -1)))
-1035 5842 0
-1033 5840 0
-1031 5838 0
-1029 5836 0
-1027 5834 0
-1025 5832 0
-1023 5830 0
-1022 5828 0
-1020 5842 0
-1020 -1035 5840 0
-1020 -1033 5838 0
-1020 -1031 5836 0
-1020 -1029 5834 0
-1020 -1027 5832 0
-1020 -1025 5830 0
-1020 -1023 5828 0
-1020 -1022 5826 0
-1018 5840 0
-1018 -1035 5838 0
-1018 -1033 5836 0
-1018 -1031 5834 0
-1018 -1029 5832 0
-1018 -1027 5830 0
-1018 -1025 5828 0
-1018 -1023 5826 0
-1018 -1022 5824 0
-1016 5838 0
-1016 -1035 5836 0
-1016 -1033 5834 0
-1016 -1031 5832 0
-1016 -1029 5830 0
-1016 -1027 5828 0
-1016 -1025 5826 0
-1016 -1023 5824 0
-1016 -1022 5822 0
-1014 5836 0
-1014 -1035 5834 0
-1014 -1033 5832 0
-1014 -1031 5830 0
-1014 -1029 5828 0
-1014 -1027 5826 0
-1014 -1025 5824 0
-1014 -1023 5822 0
-1014 -1022 5820 0
-1012 5834 0
-1012 -1035 5832 0
-1012 -1033 5830 0
-1012 -1031 5828 0
-1012 -1029 5826 0
-1012 -1027 5824 0
-1012 -1025 5822 0
-1012 -1023 5820 0
-1012 -1022 5818 0
-1010 5832 0
-1010 -1035 5830 0
-1010 -1033 5828 0
-1010 -1031 5826 0
-1010 -1029 5824 0
-1010 -1027 5822 0
-1010 -1025 5820 0
-1010 -1023 5818 0
-1010 -1022 5816 0
-1008 5830 0
-1008 -1035 5828 0
-1008 -1033 5826 0
-1008 -1031 5824 0
-1008 -1029 5822 0
-1008 -1027 5820 0
-1008 -1025 5818 0
-1008 -1023 5816 0
-1008 -1022 5814 0
-1007 5828 0
-1007 -1035 5826 0
-1007 -1033 5824 0
-1007 -1031 5822 0
-1007 -1029 5820 0
-1007 -1027 5818 0
-1007 -1025 5816 0
-1007 -1023 5814 0
-1007 -1022 5813 0
c ((aux566 - aux567 + shift(x_00008_00003, -1))<=0)
5813 -5844 0
5814 -5845 0
5816 -5847 0
5818 -5849 0
5820 -5851 0
5822 -5853 0
5824 -5855 0
5826 -5857 0
5828 -5859 0
5830 -5861 0
5832 -5863 0
5834 -5865 0
5836 -5867 0
5838 -5869 0
5840 -5871 0
5842 -5873 0
977 -5844 0
977 5813 -5845 0
977 5814 -5847 0
977 5816 -5849 0
977 5818 -5851 0
977 5820 -5853 0
977 5822 -5855 0
977 5824 -5857 0
977 5826 -5859 0
977 5828 -5861 0
977 5830 -5863 0
977 5832 -5865 0
977 5834 -5867 0
977 5836 -5869 0
977 5838 -5871 0
977 5840 -5873 0
977 5842 -5875 0
978 -5845 0
978 5813 -5847 0
978 5814 -5849 0
978 5816 -5851 0
978 5818 -5853 0
978 5820 -5855 0
978 5822 -5857 0
978 5824 -5859 0
978 5826 -5861 0
978 5828 -5863 0
978 5830 -5865 0
978 5832 -5867 0
978 5834 -5869 0
978 5836 -5871 0
978 5838 -5873 0
978 5840 -5875 0
978 5842 -5877 0
980 -5847 0
980 5813 -5849 0
980 5814 -5851 0
980 5816 -5853 0
980 5818 -5855 0
980 5820 -5857 0
980 5822 -5859 0
980 5824 -5861 0
980 5826 -5863 0
980 5828 -5865 0
980 5830 -5867 0
980 5832 -5869 0
980 5834 -5871 0
980 5836 -5873 0
980 5838 -5875 0
980 5840 -5877 0
980 5842 -5879 0
982 -5849 0
982 5813 -5851 0
982 5814 -5853 0
982 5816 -5855 0
982 5818 -5857 0
982 5820 -5859 0
982 5822 -5861 0
982 5824 -5863 0
982 5826 -5865 0
982 5828 -5867 0
982 5830 -5869 0
982 5832 -5871 0
982 5834 -5873 0
982 5836 -5875 0
982 5838 -5877 0
982 5840 -5879 0
982 5842 -5881 0
984 -5851 0
984 5813 -5853 0
984 5814 -5855 0
984 5816 -5857 0
984 5818 -5859 0
984 5820 -5861 0
984 5822 -5863 0
984 5824 -5865 0
984 5826 -5867 0
984 5828 -5869 0
984 5830 -5871 0
984 5832 -5873 0
984 5834 -5875 0
984 5836 -5877 0
984 5838 -5879 0
984 5840 -5881 0
984 5842 -5883 0
986 -5853 0
986 5813 -5855 0
986 5814 -5857 0
986 5816 -5859 0
986 5818 -5861 0
986 5820 -5863 0
986 5822 -5865 0
986 5824 -5867 0
986 5826 -5869 0
986 5828 -5871 0
986 5830 -5873 0
986 5832 -5875 0
986 5834 -5877 0
986 5836 -5879 0
986 5838 -5881 0
986 5840 -5883 0
986 5842 -5885 0
988 -5855 0
988 5813 -5857 0
988 5814 -5859 0
988 5816 -5861 0
988 5818 -5863 0
988 5820 -5865 0
988 5822 -5867 0
988 5824 -5869 0
988 5826 -5871 0
988 5828 -5873 0
988 5830 -5875 0
988 5832 -5877 0
988 5834 -5879 0
988 5836 -5881 0
988 5838 -5883 0
988 5840 -5885 0
988 5842 -5887 0
990 -5857 0
990 5813 -5859 0
990 5814 -5861 0
990 5816 -5863 0
990 5818 -5865 0
990 5820 -5867 0
990 5822 -5869 0
990 5824 -5871 0
990 5826 -5873 0
990 5828 -5875 0
990 5830 -5877 0
990 5832 -5879 0
990 5834 -5881 0
990 5836 -5883 0
990 5838 -5885 0
990 5840 -5887 0
990 5842 -5889 0
c (0<=(aux566 - aux567 + shift(x_00008_00003, -1)))
-5842 5889 0
-5840 5887 0
-5838 5885 0
-5836 5883 0
-5834 5881 0
-5832 5879 0
-5830 5877 0
-5828 5875 0
-5826 5873 0
-5824 5871 0
-5822 5869 0
-5820 5867 0
-5818 5865 0
-5816 5863 0
-5814 5861 0
-5813 5859 0
-990 5889 0
-990 -5842 5887 0
-990 -5840 5885 0
-990 -5838 5883 0
-990 -5836 5881 0
-990 -5834 5879 0
-990 -5832 5877 0
-990 -5830 5875 0
-990 -5828 5873 0
-990 -5826 5871 0
-990 -5824 5869 0
-990 -5822 5867 0
-990 -5820 5865 0
-990 -5818 5863 0
-990 -5816 5861 0
-990 -5814 5859 0
-990 -5813 5857 0
-988 5887 0
-988 -5842 5885 0
-988 -5840 5883 0
-988 -5838 5881 0
-988 -5836 5879 0
-988 -5834 5877 0
-988 -5832 5875 0
-988 -5830 5873 0
-988 -5828 5871 0
-988 -5826 5869 0
-988 -5824 5867 0
-988 -5822 5865 0
-988 -5820 5863 0
-988 -5818 5861 0
-988 -5816 5859 0
-988 -5814 5857 0
-988 -5813 5855 0
-986 5885 0
-986 -5842 5883 0
-986 -5840 5881 0
-986 -5838 5879 0
-986 -5836 5877 0
-986 -5834 5875 0
-986 -5832 5873 0
-986 -5830 5871 0
-986 -5828 5869 0
-986 -5826 5867 0
-986 -5824 5865 0
-986 -5822 5863 0
-986 -5820 5861 0
-986 -5818 5859 0
-986 -5816 5857 0
-986 -5814 5855 0
-986 -5813 5853 0
-984 5883 0
-984 -5842 5881 0
-984 -5840 5879 0
-984 -5838 5877 0
-984 -5836 5875 0
-984 -5834 5873 0
-984 -5832 5871 0
-984 -5830 5869 0
-984 -5828 5867 0
-984 -5826 5865 0
-984 -5824 5863 0
-984 -5822 5861 0
-984 -5820 5859 0
-984 -5818 5857 0
-984 -5816 5855 0
-984 -5814 5853 0
-984 -5813 5851 0
-982 5881 0
-982 -5842 5879 0
-982 -5840 5877 0
-982 -5838 5875 0
-982 -5836 5873 0
-982 -5834 5871 0
-982 -5832 5869 0
-982 -5830 5867 0
-982 -5828 5865 0
-982 -5826 5863 0
-982 -5824 5861 0
-982 -5822 5859 0
-982 -5820 5857 0
-982 -5818 5855 0
-982 -5816 5853 0
-982 -5814 5851 0
-982 -5813 5849 0
-980 5879 0
-980 -5842 5877 0
-980 -5840 5875 0
-980 -5838 5873 0
-980 -5836 5871 0
-980 -5834 5869 0
-980 -5832 5867 0
-980 -5830 5865 0
-980 -5828 5863 0
-980 -5826 5861 0
-980 -5824 5859 0
-980 -5822 5857 0
-980 -5820 5855 0
-980 -5818 5853 0
-980 -5816 5851 0
-980 -5814 5849 0
-980 -5813 5847 0
-978 5877 0
-978 -5842 5875 0
-978 -5840 5873 0
-978 -5838 5871 0
-978 -5836 5869 0
-978 -5834 5867 0
-978 -5832 5865 0
-978 -5830 5863 0
-978 -5828 5861 0
-978 -5826 5859 0
-978 -5824 5857 0
-978 -5822 5855 0
-978 -5820 5853 0
-978 -5818 5851 0
-978 -5816 5849 0
-978 -5814 5847 0
-978 -5813 5845 0
-977 5875 0
-977 -5842 5873 0
-977 -5840 5871 0
-977 -5838 5869 0
-977 -5836 5867 0
-977 -5834 5865 0
-977 -5832 5863 0
-977 -5830 5861 0
-977 -5828 5859 0
-977 -5826 5857 0
-977 -5824 5855 0
-977 -5822 5853 0
-977 -5820 5851 0
-977 -5818 5849 0
-977 -5816 5847 0
-977 -5814 5845 0
-977 -5813 5844 0
c ((aux563 + aux565 - aux568)<=0)
5782 -5891 0
5783 -5892 0
5785 -5894 0
5787 -5896 0
5789 -5898 0
5791 -5900 0
5793 -5902 0
5795 -5904 0
5797 -5906 0
5799 -5908 0
5801 -5910 0
5803 -5912 0
5805 -5914 0
5807 -5916 0
5809 -5918 0
5811 -5920 0
5720 -5891 0
5720 5782 -5892 0
5720 5783 -5894 0
5720 5785 -5896 0
5720 5787 -5898 0
5720 5789 -5900 0
5720 5791 -5902 0
5720 5793 -5904 0
5720 5795 -5906 0
5720 5797 -5908 0
5720 5799 -5910 0
5720 5801 -5912 0
5720 5803 -5914 0
5720 5805 -5916 0
5720 5807 -5918 0
5720 5809 -5920 0
5720 5811 -5922 0
5721 -5892 0
5721 5782 -5894 0
5721 5783 -5896 0
5721 5785 -5898 0
5721 5787 -5900 0
5721 5789 -5902 0
5721 5791 -5904 0
5721 5793 -5906 0
5721 5795 -5908 0
5721 5797 -5910 0
5721 5799 -5912 0
5721 5801 -5914 0
5721 5803 -5916 0
5721 5805 -5918 0
5721 5807 -5920 0
5721 5809 -5922 0
5721 5811 -5924 0
5723 -5894 0
5723 5782 -5896 0
5723 5783 -5898 0
5723 5785 -5900 0
5723 5787 -5902 0
5723 5789 -5904 0
5723 5791 -5906 0
5723 5793 -5908 0
5723 5795 -5910 0
5723 5797 -5912 0
5723 5799 -5914 0
5723 5801 -5916 0
5723 5803 -5918 0
5723 5805 -5920 0
5723 5807 -5922 0
5723 5809 -5924 0
5723 5811 -5926 0
5725 -5896 0
5725 5782 -5898 0
5725 5783 -5900 0
5725 5785 -5902 0
5725 5787 -5904 0
5725 5789 -5906 0
5725 5791 -5908 0
5725 5793 -5910 0
5725 5795 -5912 0
5725 5797 -5914 0
5725 5799 -5916 0
5725 5801 -5918 0
5725 5803 -5920 0
5725 5805 -5922 0
5725 5807 -5924 0
5725 5809 -5926 0
5725 5811 -5928 0
5727 -5898 0
5727 5782 -5900 0
5727 5783 -5902 0
5727 5785 -5904 0
5727 5787 -5906 0
5727 5789 -5908 0
5727 5791 -5910 0
5727 5793 -5912 0
5727 5795 -5914 0
5727 5797 -5916 0
5727 5799 -5918 0
5727 5801 -5920 0
5727 5803 -5922 0
5727 5805 -5924 0
5727 5807 -5926 0
5727 5809 -5928 0
5727 5811 -5930 0
5729 -5900 0
5729 5782 -5902 0
5729 5783 -5904 0
5729 5785 -5906 0
5729 5787 -5908 0
5729 5789 -5910 0
5729 5791 -5912 0
5729 5793 -5914 0
5729 5795 -5916 0
5729 5797 -5918 0
5729 5799 -5920 0
5729 5801 -5922 0
5729 5803 -5924 0
5729 5805 -5926 0
5729 5807 -5928 0
5729 5809 -5930 0
5729 5811 -5932 0
5731 -5902 0
5731 5782 -5904 0
5731 5783 -5906 0
5731 5785 -5908 0
5731 5787 -5910 0
5731 5789 -5912 0
5731 5791 -5914 0
5731 5793 -5916 0
5731 5795 -5918 0
5731 5797 -5920 0
5731 5799 -5922 0
5731 5801 -5924 0
5731 5803 -5926 0
5731 5805 -5928 0
5731 5807 -5930 0
5731 5809 -5932 0
5731 5811 -5934 0
5733 -5904 0
5733 5782 -5906 0
5733 5783 -5908 0
5733 5785 -5910 0
5733 5787 -5912 0
5733 5789 -5914 0
5733 5791 -5916 0
5733 5793 -5918 0
5733 5795 -5920 0
5733 5797 -5922 0
5733 5799 -5924 0
5733 5801 -5926 0
5733 5803 -5928 0
5733 5805 -5930 0
5733 5807 -5932 0
5733 5809 -5934 0
5733 5811 -5936 0
5735 -5906 0
5735 5782 -5908 0
5735 5783 -5910 0
5735 5785 -5912 0
5735 5787 -5914 0
5735 5789 -5916 0
5735 5791 -5918 0
5735 5793 -5920 0
5735 5795 -5922 0
5735 5797 -5924 0
5735 5799 -5926 0
5735 5801 -5928 0
5735 5803 -5930 0
5735 5805 -5932 0
5735 5807 -5934 0
5735 5809 -5936 0
5735 5811 -5938 0
5737 -5908 0
5737 5782 -5910 0
5737 5783 -5912 0
5737 5785 -5914 0
5737 5787 -5916 0
5737 5789 -5918 0
5737 5791 -5920 0
5737 5793 -5922 0
5737 5795 -5924 0
5737 5797 -5926 0
5737 5799 -5928 0
5737 5801 -5930 0
5737 5803 -5932 0
5737 5805 -5934 0
5737 5807 -5936 0
5737 5809 -5938 0
5737 5811 -5940 0
5739 -5910 0
5739 5782 -5912 0
5739 5783 -5914 0
5739 5785 -5916 0
5739 5787 -5918 0
5739 5789 -5920 0
5739 5791 -5922 0
5739 5793 -5924 0
5739 5795 -5926 0
5739 5797 -5928 0
5739 5799 -5930 0
5739 5801 -5932 0
5739 5803 -5934 0
5739 5805 -5936 0
5739 5807 -5938 0
5739 5809 -5940 0
5739 5811 -5942 0
5741 -5912 0
5741 5782 -5914 0
5741 5783 -5916 0
5741 5785 -5918 0
5741 5787 -5920 0
5741 5789 -5922 0
5741 5791 -5924 0
5741 5793 -5926 0
5741 5795 -5928 0
5741 5797 -5930 0
5741 5799 -5932 0
5741 5801 -5934 0
5741 5803 -5936 0
5741 5805 -5938 0
5741 5807 -5940 0
5741 5809 -5942 0
5741 5811 -5944 0
5743 -5914 0
5743 5782 -5916 0
5743 5783 -5918 0
5743 5785 -5920 0
5743 5787 -5922 0
5743 5789 -5924 0
5743 5791 -5926 0
5743 5793 -5928 0
5743 5795 -5930 0
5743 5797 -5932 0
5743 5799 -5934 0
5743 5801 -5936 0
5743 5803 -5938 0
5743 5805 -5940 0
5743 5807 -5942 0
5743 5809 -5944 0
5743 5811 -5946 0
5745 -5916 0
5745 5782 -5918 0
5745 5783 -5920 0
5745 5785 -5922 0
5745 5787 -5924 0
5745 5789 -5926 0
5745 5791 -5928 0
5745 5793 -5930 0
5745 5795 -5932 0
5745 5797 -5934 0
5745 5799 -5936 0
5745 5801 -5938 0
5745 5803 -5940 0
5745 5805 -5942 0
5745 5807 -5944 0
5745 5809 -5946 0
5745 5811 -5948 0
5747 -5918 0
5747 5782 -5920 0
5747 5783 -5922 0
5747 5785 -5924 0
5747 5787 -5926 0
5747 5789 -5928 0
5747 5791 -5930 0
5747 5793 -5932 0
5747 5795 -5934 0
5747 5797 -5936 0
5747 5799 -5938 0
5747 5801 -5940 0
5747 5803 -5942 0
5747 5805 -5944 0
5747 5807 -5946 0
5747 5809 -5948 0
5747 5811 -5950 0
5749 -5920 0
5749 5782 -5922 0
5749 5783 -5924 0
5749 5785 -5926 0
5749 5787 -5928 0
5749 5789 -5930 0
5749 5791 -5932 0
5749 5793 -5934 0
5749 5795 -5936 0
5749 5797 -5938 0
5749 5799 -5940 0
5749 5801 -5942 0
5749 5803 -5944 0
5749 5805 -5946 0
5749 5807 -5948 0
5749 5809 -5950 0
5749 5811 -5952 0
c (0<=(aux563 + aux565 - aux568))
-5811 5952 0
-5809 5950 0
-5807 5948 0
-5805 5946 0
-5803 5944 0
-5801 5942 0
-5799 5940 0
-5797 5938 0
-5795 5936 0
-5793 5934 0
-5791 5932 0
-5789 5930 0
-5787 5928 0
-5785 5926 0
-5783 5924 0
-5782 5922 0
-5749 5952 0
-5749 -5811 5950 0
-5749 -5809 5948 0
-5749 -5807 5946 0
-5749 -5805 5944 0
-5749 -5803 5942 0
-5749 -5801 5940 0
-5749 -5799 5938 0
-5749 -5797 5936 0
-5749 -5795 5934 0
-5749 -5793 5932 0
-5749 -5791 5930 0
-5749 -5789 5928 0
-5749 -5787 5926 0
-5749 -5785 5924 0
-5749 -5783 5922 0
-5749 -5782 5920 0
-5747 5950 0
-5747 -5811 5948 0
-5747 -5809 5946 0
-5747 -5807 5944 0
-5747 -5805 5942 0
-5747 -5803 5940 0
-5747 -5801 5938 0
-5747 -5799 5936 0
-5747 -5797 5934 0
-5747 -5795 5932 0
-5747 -5793 5930 0
-5747 -5791 5928 0
-5747 -5789 5926 0
-5747 -5787 5924 0
-5747 -5785 5922 0
-5747 -5783 5920 0
-5747 -5782 5918 0
-5745 5948 0
-5745 -5811 5946 0
-5745 -5809 5944 0
-5745 -5807 5942 0
-5745 -5805 5940 0
-5745 -5803 5938 0
-5745 -5801 5936 0
-5745 -5799 5934 0
-5745 -5797 5932 0
-5745 -5795 5930 0
-5745 -5793 5928 0
-5745 -5791 5926 0
-5745 -5789 5924 0
-5745 -5787 5922 0
-5745 -5785 5920 0
-5745 -5783 5918 0
-5745 -5782 5916 0
-5743 5946 0
-5743 -5811 5944 0
-5743 -5809 5942 0
-5743 -5807 5940 0
-5743 -5805 5938 0
-5743 -5803 5936 0
-5743 -5801 5934 0
-5743 -5799 5932 0
-5743 -5797 5930 0
-5743 -5795 5928 0
-5743 -5793 5926 0
-5743 -5791 5924 0
-5743 -5789 5922 0
-5743 -5787 5920 0
-5743 -5785 5918 0
-5743 -5783 5916 0
-5743 -5782 5914 0
-5741 5944 0
-5741 -5811 5942 0
-5741 -5809 5940 0
-5741 -5807 5938 0
-5741 -5805 5936 0
-5741 -5803 5934 0
-5741 -5801 5932 0
-5741 -5799 5930 0
-5741 -5797 5928 0
-5741 -5795 5926 0
-5741 -5793 5924 0
-5741 -5791 5922 0
-5741 -5789 5920 0
-5741 -5787 5918 0
-5741 -5785 5916 0
-5741 -5783 5914 0
-5741 -5782 5912 0
-5739 5942 0
-5739 -5811 5940 0
-5739 -5809 5938 0
-5739 -5807 5936 0
-5739 -5805 5934 0
-5739 -5803 5932 0
-5739 -5801 5930 0
-5739 -5799 5928 0
-5739 -5797 5926 0
-5739 -5795 5924 0
-5739 -5793 5922 0
-5739 -5791 5920 0
-5739 -5789 5918 0
-5739 -5787 5916 0
-5739 -5785 5914 0
-5739 -5783 5912 0
-5739 -5782 5910 0
-5737 5940 0
-5737 -5811 5938 0
-5737 -5809 5936 0
-5737 -5807 5934 0
-5737 -5805 5932 0
-5737 -5803 5930 0
-5737 -5801 5928 0
-5737 -5799 5926 0
-5737 -5797 5924 0
-5737 -5795 5922 0
-5737 -5793 5920 0
-5737 -5791 5918 0
-5737 -5789 5916 0
-5737 -5787 5914 0
-5737 -5785 5912 0
-5737 -5783 5910 0
-5737 -5782 5908 0
-5735 5938 0
-5735 -5811 5936 0
-5735 -5809 5934 0
-5735 -5807 5932 0
-5735 -5805 5930 0
-5735 -5803 5928 0
-5735 -5801 5926 0
-5735 -5799 5924 0
-5735 -5797 5922 0
-5735 -5795 5920 0
-5735 -5793 5918 0
-5735 -5791 5916 0
-5735 -5789 5914 0
-5735 -5787 5912 0
-5735 -5785 5910 0
-5735 -5783 5908 0
-5735 -5782 5906 0
-5733 5936 0
-5733 -5811 5934 0
-5733 -5809 5932 0
-5733 -5807 5930 0
-5733 -5805 5928 0
-5733 -5803 5926 0
-5733 -5801 5924 0
-5733 -5799 5922 0
-5733 -5797 5920 0
-5733 -5795 5918 0
-5733 -5793 5916 0
-5733 -5791 5914 0
-5733 -5789 5912 0
-5733 -5787 5910 0
-5733 -5785 5908 0
-5733 -5783 5906 0
-5733 -5782 5904 0
-5731 5934 0
-5731 -5811 5932 0
-5731 -5809 5930 0
-5731 -5807 5928 0
-5731 -5805 5926 0
-5731 -5803 5924 0
-5731 -5801 5922 0
-5731 -5799 5920 0
-5731 -5797 5918 0
-5731 -5795 5916 0
-5731 -5793 5914 0
-5731 -5791 5912 0
-5731 -5789 5910 0
-5731 -5787 5908 0
-5731 -5785 5906 0
-5731 -5783 5904 0
-5731 -5782 5902 0
-5729 5932 0
-5729 -5811 5930 0
-5729 -5809 5928 0
-5729 -5807 5926 0
-5729 -5805 5924 0
-5729 -5803 5922 0
-5729 -5801 5920 0
-5729 -5799 5918 0
-5729 -5797 5916 0
-5729 -5795 5914 0
-5729 -5793 5912 0
-5729 -5791 5910 0
-5729 -5789 5908 0
-5729 -5787 5906 0
-5729 -5785 5904 0
-5729 -5783 5902 0
-5729 -5782 5900 0
-5727 5930 0
-5727 -5811 5928 0
-5727 -5809 5926 0
-5727 -5807 5924 0
-5727 -5805 5922 0
-5727 -5803 5920 0
-5727 -5801 5918 0
-5727 -5799 5916 0
-5727 -5797 5914 0
-5727 -5795 5912 0
-5727 -5793 5910 0
-5727 -5791 5908 0
-5727 -5789 5906 0
-5727 -5787 5904 0
-5727 -5785 5902 0
-5727 -5783 5900 0
-5727 -5782 5898 0
-5725 5928 0
-5725 -5811 5926 0
-5725 -5809 5924 0
-5725 -5807 5922 0
-5725 -5805 5920 0
-5725 -5803 5918 0
-5725 -5801 5916 0
-5725 -5799 5914 0
-5725 -5797 5912 0
-5725 -5795 5910 0
-5725 -5793 5908 0
-5725 -5791 5906 0
-5725 -5789 5904 0
-5725 -5787 5902 0
-5725 -5785 5900 0
-5725 -5783 5898 0
-5725 -5782 5896 0
-5723 5926 0
-5723 -5811 5924 0
-5723 -5809 5922 0
-5723 -5807 5920 0
-5723 -5805 5918 0
-5723 -5803 5916 0
-5723 -5801 5914 0
-5723 -5799 5912 0
-5723 -5797 5910 0
-5723 -5795 5908 0
-5723 -5793 5906 0
-5723 -5791 5904 0
-5723 -5789 5902 0
-5723 -5787 5900 0
-5723 -5785 5898 0
-5723 -5783 5896 0
-5723 -5782 5894 0
-5721 5924 0
-5721 -5811 5922 0
-5721 -5809 5920 0
-5721 -5807 5918 0
-5721 -5805 5916 0
-5721 -5803 5914 0
-5721 -5801 5912 0
-5721 -5799 5910 0
-5721 -5797 5908 0
-5721 -5795 5906 0
-5721 -5793 5904 0
-5721 -5791 5902 0
-5721 -5789 5900 0
-5721 -5787 5898 0
-5721 -5785 5896 0
-5721 -5783 5894 0
-5721 -5782 5892 0
-5720 5922 0
-5720 -5811 5920 0
-5720 -5809 5918 0
-5720 -5807 5916 0
-5720 -5805 5914 0
-5720 -5803 5912 0
-5720 -5801 5910 0
-5720 -5799 5908 0
-5720 -5797 5906 0
-5720 -5795 5904 0
-5720 -5793 5902 0
-5720 -5791 5900 0
-5720 -5789 5898 0
-5720 -5787 5896 0
-5720 -5785 5894 0
-5720 -5783 5892 0
-5720 -5782 5891 0
c (( - aux569 + shift(x_00009_00001, -1) + shift(x_00009_00009, -1))<=0)
1202 -5954 0
1203 -5955 0
1205 -5957 0
1207 -5959 0
1209 -5961 0
1211 -5963 0
1213 -5965 0
1215 -5967 0
1082 -5954 0
1082 1202 -5955 0
1082 1203 -5957 0
1082 1205 -5959 0
1082 1207 -5961 0
1082 1209 -5963 0
1082 1211 -5965 0
1082 1213 -5967 0
1082 1215 -5969 0
1083 -5955 0
1083 1202 -5957 0
1083 1203 -5959 0
1083 1205 -5961 0
1083 1207 -5963 0
1083 1209 -5965 0
1083 1211 -5967 0
1083 1213 -5969 0
1083 1215 -5971 0
1085 -5957 0
1085 1202 -5959 0
1085 1203 -5961 0
1085 1205 -5963 0
1085 1207 -5965 0
1085 1209 -5967 0
1085 1211 -5969 0
1085 1213 -5971 0
1085 1215 -5973 0
1087 -5959 0
1087 1202 -5961 0
1087 1203 -5963 0
1087 1205 -5965 0
1087 1207 -5967 0
1087 1209 -5969 0
1087 1211 -5971 0
1087 1213 -5973 0
1087 1215 -5975 0
1089 -5961 0
1089 1202 -5963 0
1089 1203 -5965 0
1089 1205 -5967 0
1089 1207 -5969 0
1089 1209 -5971 0
1089 1211 -5973 0
1089 1213 -5975 0
1089 1215 -5977 0
1091 -5963 0
1091 1202 -5965 0
1091 1203 -5967 0
1091 1205 -5969 0
1091 1207 -5971 0
1091 1209 -5973 0
1091 1211 -5975 0
1091 1213 -5977 0
1091 1215 -5979 0
1093 -5965 0
1093 1202 -5967 0
1093 1203 -5969 0
1093 1205 -5971 0
1093 1207 -5973 0
1093 1209 -5975 0
1093 1211 -5977 0
1093 1213 -5979 0
1093 1215 -5981 0
1095 -5967 0
1095 1202 -5969 0
1095 1203 -5971 0
1095 1205 -5973 0
1095 1207 -5975 0
1095 1209 -5977 0
1095 1211 -5979 0
1095 1213 -5981 0
1095 1215 -5983 0
c (0<=( - aux569 + shift(x_00009_00001, -1) + shift(x_00009_00009, -1)))
-1215 5983 0
-1213 5981 0
-1211 5979 0
-1209 5977 0
-1207 5975 0
-1205 5973 0
-1203 5971 0
-1202 5969 0
-1095 5983 0
-1095 -1215 5981 0
-1095 -1213 5979 0
-1095 -1211 5977 0
-1095 -1209 5975 0
-1095 -1207 5973 0
-1095 -1205 5971 0
-1095 -1203 5969 0
-1095 -1202 5967 0
-1093 5981 0
-1093 -1215 5979 0
-1093 -1213 5977 0
-1093 -1211 5975 0
-1093 -1209 5973 0
-1093 -1207 5971 0
-1093 -1205 5969 0
-1093 -1203 5967 0
-1093 -1202 5965 0
-1091 5979 0
-1091 -1215 5977 0
-1091 -1213 5975 0
-1091 -1211 5973 0
-1091 -1209 5971 0
-1091 -1207 5969 0
-1091 -1205 5967 0
-1091 -1203 5965 0
-1091 -1202 5963 0
-1089 5977 0
-1089 -1215 5975 0
-1089 -1213 5973 0
-1089 -1211 5971 0
-1089 -1209 5969 0
-1089 -1207 5967 0
-1089 -1205 5965 0
-1089 -1203 5963 0
-1089 -1202 5961 0
-1087 5975 0
-1087 -1215 5973 0
-1087 -1213 5971 0
-1087 -1211 5969 0
-1087 -1209 5967 0
-1087 -1207 5965 0
-1087 -1205 5963 0
-1087 -1203 5961 0
-1087 -1202 5959 0
-1085 5973 0
-1085 -1215 5971 0
-1085 -1213 5969 0
-1085 -1211 5967 0
-1085 -1209 5965 0
-1085 -1207 5963 0
-1085 -1205 5961 0
-1085 -1203 5959 0
-1085 -1202 5957 0
-1083 5971 0
-1083 -1215 5969 0
-1083 -1213 5967 0
-1083 -1211 5965 0
-1083 -1209 5963 0
-1083 -1207 5961 0
-1083 -1205 5959 0
-1083 -1203 5957 0
-1083 -1202 5955 0
-1082 5969 0
-1082 -1215 5967 0
-1082 -1213 5965 0
-1082 -1211 5963 0
-1082 -1209 5961 0
-1082 -1207 5959 0
-1082 -1205 5957 0
-1082 -1203 5955 0
-1082 -1202 5954 0
c (( - aux570 + shift(x_00009_00002, -1) + shift(x_00009_00008, -1))<=0)
1187 -5985 0
1188 -5986 0
1190 -5988 0
1192 -5990 0
1194 -5992 0
1196 -5994 0
1198 -5996 0
1200 -5998 0
1097 -5985 0
1097 1187 -5986 0
1097 1188 -5988 0
1097 1190 -5990 0
1097 1192 -5992 0
1097 1194 -5994 0
1097 1196 -5996 0
1097 1198 -5998 0
1097 1200 -6000 0
1098 -5986 0
1098 1187 -5988 0
1098 1188 -5990 0
1098 1190 -5992 0
1098 1192 -5994 0
1098 1194 -5996 0
1098 1196 -5998 0
1098 1198 -6000 0
1098 1200 -6002 0
1100 -5988 0
1100 1187 -5990 0
1100 1188 -5992 0
1100 1190 -5994 0
1100 1192 -5996 0
1100 1194 -5998 0
1100 1196 -6000 0
1100 1198 -6002 0
1100 1200 -6004 0
1102 -5990 0
1102 1187 -5992 0
1102 1188 -5994 0
1102 1190 -5996 0
1102 1192 -5998 0
1102 1194 -6000 0
1102 1196 -6002 0
1102 1198 -6004 0
1102 1200 -6006 0
1104 -5992 0
1104 1187 -5994 0
1104 1188 -5996 0
1104 1190 -5998 0
1104 1192 -6000 0
1104 1194 -6002 0
1104 1196 -6004 0
1104 1198 -6006 0
1104 1200 -6008 0
1106 -5994 0
1106 1187 -5996 0
1106 1188 -5998 0
1106 1190 -6000 0
1106 1192 -6002 0
1106 1194 -6004 0
1106 1196 -6006 0
1106 1198 -6008 0
1106 1200 -6010 0
1108 -5996 0
1108 1187 -5998 0
1108 1188 -6000 0
1108 1190 -6002 0
1108 1192 -6004 0
1108 1194 -6006 0
1108 1196 -6008 0
1108 1198 -6010 0
1108 1200 -6012 0
1110 -5998 0
1110 1187 -6000 0
1110 1188 -6002 0
1110 1190 -6004 0
1110 1192 -6006 0
1110 1194 -6008 0
1110 1196 -6010 0
1110 1198 -6012 0
1110 1200 -6014 0
c (0<=( - aux570 + shift(x_00009_00002, -1) + shift(x_00009_00008, -1)))
-1200 6014 0
-1198 6012 0
-1196 6010 0
-1194 6008 0
-1192 6006 0
-1190 6004 0
-1188 6002 0
-1187 6000 0
-1110 6014 0
-1110 -1200 6012 0
-1110 -1198 6010 0
-1110 -1196 6008 0
-1110 -1194 6006 0
-1110 -1192 6004 0
-1110 -1190 6002 0
-1110 -1188 6000 0
-1110 -1187 5998 0
-1108 6012 0
-1108 -1200 6010 0
-1108 -1198 6008 0
-1108 -1196 6006 0
-1108 -1194 6004 0
-1108 -1192 6002 0
-1108 -1190 6000 0
-1108 -1188 5998 0
-1108 -1187 5996 0
-1106 6010 0
-1106 -1200 6008 0
-1106 -1198 6006 0
-1106 -1196 6004 0
-1106 -1194 6002 0
-1106 -1192 6000 0
-1106 -1190 5998 0
-1106 -1188 5996 0
-1106 -1187 5994 0
-1104 6008 0
-1104 -1200 6006 0
-1104 -1198 6004 0
-1104 -1196 6002 0
-1104 -1194 6000 0
-1104 -1192 5998 0
-1104 -1190 5996 0
-1104 -1188 5994 0
-1104 -1187 5992 0
-1102 6006 0
-1102 -1200 6004 0
-1102 -1198 6002 0
-1102 -1196 6000 0
-1102 -1194 5998 0
-1102 -1192 5996 0
-1102 -1190 5994 0
-1102 -1188 5992 0
-1102 -1187 5990 0
-1100 6004 0
-1100 -1200 6002 0
-1100 -1198 6000 0
-1100 -1196 5998 0
-1100 -1194 5996 0
-1100 -1192 5994 0
-1100 -1190 5992 0
-1100 -1188 5990 0
-1100 -1187 5988 0
-1098 6002 0
-1098 -1200 6000 0
-1098 -1198 5998 0
-1098 -1196 5996 0
-1098 -1194 5994 0
-1098 -1192 5992 0
-1098 -1190 5990 0
-1098 -1188 5988 0
-1098 -1187 5986 0
-1097 6000 0
-1097 -1200 5998 0
-1097 -1198 5996 0
-1097 -1196 5994 0
-1097 -1194 5992 0
-1097 -1192 5990 0
-1097 -1190 5988 0
-1097 -1188 5986 0
-1097 -1187 5985 0
c (( - aux571 + shift(x_00009_00004, -1) + shift(x_00009_00007, -1))<=0)
1172 -6016 0
1173 -6017 0
1175 -6019 0
1177 -6021 0
1179 -6023 0
1181 -6025 0
1183 -6027 0
1185 -6029 0
1127 -6016 0
1127 1172 -6017 0
1127 1173 -6019 0
1127 1175 -6021 0
1127 1177 -6023 0
1127 1179 -6025 0
1127 1181 -6027 0
1127 1183 -6029 0
1127 1185 -6031 0
1128 -6017 0
1128 1172 -6019 0
1128 1173 -6021 0
1128 1175 -6023 0
1128 1177 -6025 0
1128 1179 -6027 0
1128 1181 -6029 0
1128 1183 -6031 0
1128 1185 -6033 0
1130 -6019 0
1130 1172 -6021 0
1130 1173 -6023 0
1130 1175 -6025 0
1130 1177 -6027 0
1130 1179 -6029 0
1130 1181 -6031 0
1130 1183 -6033 0
1130 1185 -6035 0
1132 -6021 0
1132 1172 -6023 0
1132 1173 -6025 0
1132 1175 -6027 0
1132 1177 -6029 0
1132 1179 -6031 0
1132 1181 -6033 0
1132 1183 -6035 0
1132 1185 -6037 0
1134 -6023 0
1134 1172 -6025 0
1134 1173 -6027 0
1134 1175 -6029 0
1134 1177 -6031 0
1134 1179 -6033 0
1134 1181 -6035 0
1134 1183 -6037 0
1134 1185 -6039 0
1136 -6025 0
1136 1172 -6027 0
1136 1173 -6029 0
1136 1175 -6031 0
1136 1177 -6033 0
1136 1179 -6035 0
1136 1181 -6037 0
1136 1183 -6039 0
1136 1185 -6041 0
1138 -6027 0
1138 1172 -6029 0
1138 1173 -6031 0
1138 1175 -6033 0
1138 1177 -6035 0
1138 1179 -6037 0
1138 1181 -6039 0
1138 1183 -6041 0
1138 1185 -6043 0
1140 -6029 0
1140 1172 -6031 0
1140 1173 -6033 0
1140 1175 -6035 0
1140 1177 -6037 0
1140 1179 -6039 0
1140 1181 -6041 0
1140 1183 -6043 0
1140 1185 -6045 0
c (0<=( - aux571 + shift(x_00009_00004, -1) + shift(x_00009_00007, -1)))
-1185 6045 0
-1183 6043 0
-1181 6041 0
-1179 6039 0
-1177 6037 0
-1175 6035 0
-1173 6033 0
-1172 6031 0
-1140 6045 0
-1140 -1185 6043 0
-1140 -1183 6041 0
-1140 -1181 6039 0
-1140 -1179 6037 0
-1140 -1177 6035 0
-1140 -1175 6033 0
-1140 -1173 6031 0
-1140 -1172 6029 0
-1138 6043 0
-1138 -1185 6041 0
-1138 -1183 6039 0
-1138 -1181 6037 0
-1138 -1179 6035 0
-1138 -1177 6033 0
-1138 -1175 6031 0
-1138 -1173 6029 0
-1138 -1172 6027 0
-1136 6041 0
-1136 -1185 6039 0
-1136 -1183 6037 0
-1136 -1181 6035 0
-1136 -1179 6033 0
-1136 -1177 6031 0
-1136 -1175 6029 0
-1136 -1173 6027 0
-1136 -1172 6025 0
-1134 6039 0
-1134 -1185 6037 0
-1134 -1183 6035 0
-1134 -1181 6033 0
-1134 -1179 6031 0
-1134 -1177 6029 0
-1134 -1175 6027 0
-1134 -1173 6025 0
-1134 -1172 6023 0
-1132 6037 0
-1132 -1185 6035 0
-1132 -1183 6033 0
-1132 -1181 6031 0
-1132 -1179 6029 0
-1132 -1177 6027 0
-1132 -1175 6025 0
-1132 -1173 6023 0
-1132 -1172 6021 0
-1130 6035 0
-1130 -1185 6033 0
-1130 -1183 6031 0
-1130 -1181 6029 0
-1130 -1179 6027 0
-1130 -1177 6025 0
-1130 -1175 6023 0
-1130 -1173 6021 0
-1130 -1172 6019 0
-1128 6033 0
-1128 -1185 6031 0
-1128 -1183 6029 0
-1128 -1181 6027 0
-1128 -1179 6025 0
-1128 -1177 6023 0
-1128 -1175 6021 0
-1128 -1173 6019 0
-1128 -1172 6017 0
-1127 6031 0
-1127 -1185 6029 0
-1127 -1183 6027 0
-1127 -1181 6025 0
-1127 -1179 6023 0
-1127 -1177 6021 0
-1127 -1175 6019 0
-1127 -1173 6017 0
-1127 -1172 6016 0
c (( - aux572 + shift(x_00009_00005, -1) + shift(x_00009_00006, -1))<=0)
1157 -6047 0
1158 -6048 0
1160 -6050 0
1162 -6052 0
1164 -6054 0
1166 -6056 0
1168 -6058 0
1170 -6060 0
1142 -6047 0
1142 1157 -6048 0
1142 1158 -6050 0
1142 1160 -6052 0
1142 1162 -6054 0
1142 1164 -6056 0
1142 1166 -6058 0
1142 1168 -6060 0
1142 1170 -6062 0
1143 -6048 0
1143 1157 -6050 0
1143 1158 -6052 0
1143 1160 -6054 0
1143 1162 -6056 0
1143 1164 -6058 0
1143 1166 -6060 0
1143 1168 -6062 0
1143 1170 -6064 0
1145 -6050 0
1145 1157 -6052 0
1145 1158 -6054 0
1145 1160 -6056 0
1145 1162 -6058 0
1145 1164 -6060 0
1145 1166 -6062 0
1145 1168 -6064 0
1145 1170 -6066 0
1147 -6052 0
1147 1157 -6054 0
1147 1158 -6056 0
1147 1160 -6058 0
1147 1162 -6060 0
1147 1164 -6062 0
1147 1166 -6064 0
1147 1168 -6066 0
1147 1170 -6068 0
1149 -6054 0
1149 1157 -6056 0
1149 1158 -6058 0
1149 1160 -6060 0
1149 1162 -6062 0
1149 1164 -6064 0
1149 1166 -6066 0
1149 1168 -6068 0
1149 1170 -6070 0
1151 -6056 0
1151 1157 -6058 0
1151 1158 -6060 0
1151 1160 -6062 0
1151 1162 -6064 0
1151 1164 -6066 0
1151 1166 -6068 0
1151 1168 -6070 0
1151 1170 -6072 0
1153 -6058 0
1153 1157 -6060 0
1153 1158 -6062 0
1153 1160 -6064 0
1153 1162 -6066 0
1153 1164 -6068 0
1153 1166 -6070 0
1153 1168 -6072 0
1153 1170 -6074 0
1155 -6060 0
1155 1157 -6062 0
1155 1158 -6064 0
1155 1160 -6066 0
1155 1162 -6068 0
1155 1164 -6070 0
1155 1166 -6072 0
1155 1168 -6074 0
1155 1170 -6076 0
c (0<=( - aux572 + shift(x_00009_00005, -1) + shift(x_00009_00006, -1)))
-1170 6076 0
-1168 6074 0
-1166 6072 0
-1164 6070 0
-1162 6068 0
-1160 6066 0
-1158 6064 0
-1157 6062 0
-1155 6076 0
-1155 -1170 6074 0
-1155 -1168 6072 0
-1155 -1166 6070 0
-1155 -1164 6068 0
-1155 -1162 6066 0
-1155 -1160 6064 0
-1155 -1158 6062 0
-1155 -1157 6060 0
-1153 6074 0
-1153 -1170 6072 0
-1153 -1168 6070 0
-1153 -1166 6068 0
-1153 -1164 6066 0
-1153 -1162 6064 0
-1153 -1160 6062 0
-1153 -1158 6060 0
-1153 -1157 6058 0
-1151 6072 0
-1151 -1170 6070 0
-1151 -1168 6068 0
-1151 -1166 6066 0
-1151 -1164 6064 0
-1151 -1162 6062 0
-1151 -1160 6060 0
-1151 -1158 6058 0
-1151 -1157 6056 0
-1149 6070 0
-1149 -1170 6068 0
-1149 -1168 6066 0
-1149 -1166 6064 0
-1149 -1164 6062 0
-1149 -1162 6060 0
-1149 -1160 6058 0
-1149 -1158 6056 0
-1149 -1157 6054 0
-1147 6068 0
-1147 -1170 6066 0
-1147 -1168 6064 0
-1147 -1166 6062 0
-1147 -1164 6060 0
-1147 -1162 6058 0
-1147 -1160 6056 0
-1147 -1158 6054 0
-1147 -1157 6052 0
-1145 6066 0
-1145 -1170 6064 0
-1145 -1168 6062 0
-1145 -1166 6060 0
-1145 -1164 6058 0
-1145 -1162 6056 0
-1145 -1160 6054 0
-1145 -1158 6052 0
-1145 -1157 6050 0
-1143 6064 0
-1143 -1170 6062 0
-1143 -1168 6060 0
-1143 -1166 6058 0
-1143 -1164 6056 0
-1143 -1162 6054 0
-1143 -1160 6052 0
-1143 -1158 6050 0
-1143 -1157 6048 0
-1142 6062 0
-1142 -1170 6060 0
-1142 -1168 6058 0
-1142 -1166 6056 0
-1142 -1164 6054 0
-1142 -1162 6052 0
-1142 -1160 6050 0
-1142 -1158 6048 0
-1142 -1157 6047 0
c ((aux572 - aux573 + shift(x_00009_00003, -1))<=0)
6047 -6078 0
6048 -6079 0
6050 -6081 0
6052 -6083 0
6054 -6085 0
6056 -6087 0
6058 -6089 0
6060 -6091 0
6062 -6093 0
6064 -6095 0
6066 -6097 0
6068 -6099 0
6070 -6101 0
6072 -6103 0
6074 -6105 0
6076 -6107 0
1112 -6078 0
1112 6047 -6079 0
1112 6048 -6081 0
1112 6050 -6083 0
1112 6052 -6085 0
1112 6054 -6087 0
1112 6056 -6089 0
1112 6058 -6091 0
1112 6060 -6093 0
1112 6062 -6095 0
1112 6064 -6097 0
1112 6066 -6099 0
1112 6068 -6101 0
1112 6070 -6103 0
1112 6072 -6105 0
1112 6074 -6107 0
1112 6076 -6109 0
1113 -6079 0
1113 6047 -6081 0
1113 6048 -6083 0
1113 6050 -6085 0
1113 6052 -6087 0
1113 6054 -6089 0
1113 6056 -6091 0
1113 6058 -6093 0
1113 6060 -6095 0
1113 6062 -6097 0
1113 6064 -6099 0
1113 6066 -6101 0
1113 6068 -6103 0
1113 6070 -6105 0
1113 6072 -6107 0
1113 6074 -6109 0
1113 6076 -6111 0
1115 -6081 0
1115 6047 -6083 0
1115 6048 -6085 0
1115 6050 -6087 0
1115 6052 -6089 0
1115 6054 -6091 0
1115 6056 -6093 0
1115 6058 -6095 0
1115 6060 -6097 0
1115 6062 -6099 0
1115 6064 -6101 0
1115 6066 -6103 0
1115 6068 -6105 0
1115 6070 -6107 0
1115 6072 -6109 0
1115 6074 -6111 0
1115 6076 -6113 0
1117 -6083 0
1117 6047 -6085 0
1117 6048 -6087 0
1117 6050 -6089 0
1117 6052 -6091 0
1117 6054 -6093 0
1117 6056 -6095 0
1117 6058 -6097 0
1117 6060 -6099 0
1117 6062 -6101 0
1117 6064 -6103 0
1117 6066 -6105 0
1117 6068 -6107 0
1117 6070 -6109 0
1117 6072 -6111 0
1117 6074 -6113 0
1117 6076 -6115 0
1119 -6085 0
1119 6047 -6087 0
1119 6048 -6089 0
1119 6050 -6091 0
1119 6052 -6093 0
1119 6054 -6095 0
1119 6056 -6097 0
1119 6058 -6099 0
1119 6060 -6101 0
1119 6062 -6103 0
1119 6064 -6105 0
1119 6066 -6107 0
1119 6068 -6109 0
1119 6070 -6111 0
1119 6072 -6113 0
1119 6074 -6115 0
1119 6076 -6117 0
1121 -6087 0
1121 6047 -6089 0
1121 6048 -6091 0
1121 6050 -6093 0
1121 6052 -6095 0
1121 6054 -6097 0
1121 6056 -6099 0
1121 6058 -6101 0
1121 6060 -6103 0
1121 6062 -6105 0
1121 6064 -6107 0
1121 6066 -6109 0
1121 6068 -6111 0
1121 6070 -6113 0
1121 6072 -6115 0
1121 6074 -6117 0
1121 6076 -6119 0
1123 -6089 0
1123 6047 -6091 0
1123 6048 -6093 0
1123 6050 -6095 0
1123 6052 -6097 0
1123 6054 -6099 0
1123 6056 -6101 0
1123 6058 -6103 0
1123 6060 -6105 0
1123 6062 -6107 0
1123 6064 -6109 0
1123 6066 -6111 0
1123 6068 -6113 0
1123 6070 -6115 0
1123 6072 -6117 0
1123 6074 -6119 0
1123 6076 -6121 0
1125 -6091 0
1125 6047 -6093 0
1125 6048 -6095 0
1125 6050 -6097 0
1125 6052 -6099 0
1125 6054 -6101 0
1125 6056 -6103 0
1125 6058 -6105 0
1125 6060 -6107 0
1125 6062 -6109 0
1125 6064 -6111 0
1125 6066 -6113 0
1125 6068 -6115 0
1125 6070 -6117 0
1125 6072 -6119 0
1125 6074 -6121 0
1125 6076 -6123 0
c (0<=(aux572 - aux573 + shift(x_00009_00003, -1)))
-6076 6123 0
-6074 6121 0
-6072 6119 0
-6070 6117 0
-6068 6115 0
-6066 6113 0
-6064 6111 0
-6062 6109 0
-6060 6107 0
-6058 6105 0
-6056 6103 0
-6054 6101 0
-6052 6099 0
-6050 6097 0
-6048 6095 0
-6047 6093 0
-1125 6123 0
-1125 -6076 6121 0
-1125 -6074 6119 0
-1125 -6072 6117 0
-1125 -6070 6115 0
-1125 -6068 6113 0
-1125 -6066 6111 0
-1125 -6064 6109 0
-1125 -6062 6107 0
-1125 -6060 6105 0
-1125 -6058 6103 0
-1125 -6056 6101 0
-1125 -6054 6099 0
-1125 -6052 6097 0
-1125 -6050 6095 0
-1125 -6048 6093 0
-1125 -6047 6091 0
-1123 6121 0
-1123 -6076 6119 0
-1123 -6074 6117 0
-1123 -6072 6115 0
-1123 -6070 6113 0
-1123 -6068 6111 0
-1123 -6066 6109 0
-1123 -6064 6107 0
-1123 -6062 6105 0
-1123 -6060 6103 0
-1123 -6058 6101 0
-1123 -6056 6099 0
-1123 -6054 6097 0
-1123 -6052 6095 0
-1123 -6050 6093 0
-1123 -6048 6091 0
-1123 -6047 6089 0
-1121 6119 0
-1121 -6076 6117 0
-1121 -6074 6115 0
-1121 -6072 6113 0
-1121 -6070 6111 0
-1121 -6068 6109 0
-1121 -6066 6107 0
-1121 -6064 6105 0
-1121 -6062 6103 0
-1121 -6060 6101 0
-1121 -6058 6099 0
-1121 -6056 6097 0
-1121 -6054 6095 0
-1121 -6052 6093 0
-1121 -6050 6091 0
-1121 -6048 6089 0
-1121 -6047 6087 0
-1119 6117 0
-1119 -6076 6115 0
-1119 -6074 6113 0
-1119 -6072 6111 0
-1119 -6070 6109 0
-1119 -6068 6107 0
-1119 -6066 6105 0
-1119 -6064 6103 0
-1119 -6062 6101 0
-1119 -6060 6099 0
-1119 -6058 6097 0
-1119 -6056 6095 0
-1119 -6054 6093 0
-1119 -6052 6091 0
-1119 -6050 6089 0
-1119 -6048 6087 0
-1119 -6047 6085 0
-1117 6115 0
-1117 -6076 6113 0
-1117 -6074 6111 0
-1117 -6072 6109 0
-1117 -6070 6107 0
-1117 -6068 6105 0
-1117 -6066 6103 0
-1117 -6064 6101 0
-1117 -6062 6099 0
-1117 -6060 6097 0
-1117 -6058 6095 0
-1117 -6056 6093 0
-1117 -6054 6091 0
-1117 -6052 6089 0
-1117 -6050 6087 0
-1117 -6048 6085 0
-1117 -6047 6083 0
-1115 6113 0
-1115 -6076 6111 0
-1115 -6074 6109 0
-1115 -6072 6107 0
-1115 -6070 6105 0
-1115 -6068 6103 0
-1115 -6066 6101 0
-1115 -6064 6099 0
-1115 -6062 6097 0
-1115 -6060 6095 0
-1115 -6058 6093 0
-1115 -6056 6091 0
-1115 -6054 6089 0
-1115 -6052 6087 0
-1115 -6050 6085 0
-1115 -6048 6083 0
-1115 -6047 6081 0
-1113 6111 0
-1113 -6076 6109 0
-1113 -6074 6107 0
-1113 -6072 6105 0
-1113 -6070 6103 0
-1113 -6068 6101 0
-1113 -6066 6099 0
-1113 -6064 6097 0
-1113 -6062 6095 0
-1113 -6060 6093 0
-1113 -6058 6091 0
-1113 -6056 6089 0
-1113 -6054 6087 0
-1113 -6052 6085 0
-1113 -6050 6083 0
-1113 -6048 6081 0
-1113 -6047 6079 0
-1112 6109 0
-1112 -6076 6107 0
-1112 -6074 6105 0
-1112 -6072 6103 0
-1112 -6070 6101 0
-1112 -6068 6099 0
-1112 -6066 6097 0
-1112 -6064 6095 0
-1112 -6062 6093 0
-1112 -6060 6091 0
-1112 -6058 6089 0
-1112 -6056 6087 0
-1112 -6054 6085 0
-1112 -6052 6083 0
-1112 -6050 6081 0
-1112 -6048 6079 0
-1112 -6047 6078 0
c ((aux569 + aux571 - aux574)<=0)
6016 -6125 0
6017 -6126 0
6019 -6128 0
6021 -6130 0
6023 -6132 0
6025 -6134 0
6027 -6136 0
6029 -6138 0
6031 -6140 0
6033 -6142 0
6035 -6144 0
6037 -6146 0
6039 -6148 0
6041 -6150 0
6043 -6152 0
6045 -6154 0
5954 -6125 0
5954 6016 -6126 0
5954 6017 -6128 0
5954 6019 -6130 0
5954 6021 -6132 0
5954 6023 -6134 0
5954 6025 -6136 0
5954 6027 -6138 0
5954 6029 -6140 0
5954 6031 -6142 0
5954 6033 -6144 0
5954 6035 -6146 0
5954 6037 -6148 0
5954 6039 -6150 0
5954 6041 -6152 0
5954 6043 -6154 0
5954 6045 -6156 0
5955 -6126 0
5955 6016 -6128 0
5955 6017 -6130 0
5955 6019 -6132 0
5955 6021 -6134 0
5955 6023 -6136 0
5955 6025 -6138 0
5955 6027 -6140 0
5955 6029 -6142 0
5955 6031 -6144 0
5955 6033 -6146 0
5955 6035 -6148 0
5955 6037 -6150 0
5955 6039 -6152 0
5955 6041 -6154 0
5955 6043 -6156 0
5955 6045 -6158 0
5957 -6128 0
5957 6016 -6130 0
5957 6017 -6132 0
5957 6019 -6134 0
5957 6021 -6136 0
5957 6023 -6138 0
5957 6025 -6140 0
5957 6027 -6142 0
5957 6029 -6144 0
5957 6031 -6146 0
5957 6033 -6148 0
5957 6035 -6150 0
5957 6037 -6152 0
5957 6039 -6154 0
5957 6041 -6156 0
5957 6043 -6158 0
5957 6045 -6160 0
5959 -6130 0
5959 6016 -6132 0
5959 6017 -6134 0
5959 6019 -6136 0
5959 6021 -6138 0
5959 6023 -6140 0
5959 6025 -6142 0
5959 6027 -6144 0
5959 6029 -6146 0
5959 6031 -6148 0
5959 6033 -6150 0
5959 6035 -6152 0
5959 6037 -6154 0
5959 6039 -6156 0
5959 6041 -6158 0
5959 6043 -6160 0
5959 6045 -6162 0
5961 -6132 0
5961 6016 -6134 0
5961 6017 -6136 0
5961 6019 -6138 0
5961 6021 -6140 0
5961 6023 -6142 0
5961 6025 -6144 0
5961 6027 -6146 0
5961 6029 -6148 0
5961 6031 -6150 0
5961 6033 -6152 0
5961 6035 -6154 0
5961 6037 -6156 0
5961 6039 -6158 0
5961 6041 -6160 0
5961 6043 -6162 0
5961 6045 -6164 0
5963 -6134 0
5963 6016 -6136 0
5963 6017 -6138 0
5963 6019 -6140 0
5963 6021 -6142 0
5963 6023 -6144 0
5963 6025 -6146 0
5963 6027 -6148 0
5963 6029 -6150 0
5963 6031 -6152 0
5963 6033 -6154 0
5963 6035 -6156 0
5963 6037 -6158 0
5963 6039 -6160 0
5963 6041 -6162 0
5963 6043 -6164 0
5963 6045 -6166 0
5965 -6136 0
5965 6016 -6138 0
5965 6017 -6140 0
5965 6019 -6142 0
5965 6021 -6144 0
5965 6023 -6146 0
5965 6025 -6148 0
5965 6027 -6150 0
5965 6029 -6152 0
5965 6031 -6154 0
5965 6033 -6156 0
5965 6035 -6158 0
5965 6037 -6160 0
5965 6039 -6162 0
5965 6041 -6164 0
5965 6043 -6166 0
5965 6045 -6168 0
5967 -6138 0
5967 6016 -6140 0
5967 6017 -6142 0
5967 6019 -6144 0
5967 6021 -6146 0
5967 6023 -6148 0
5967 6025 -6150 0
5967 6027 -6152 0
5967 6029 -6154 0
5967 6031 -6156 0
5967 6033 -6158 0
5967 6035 -6160 0
5967 6037 -6162 0
5967 6039 -6164 0
5967 6041 -6166 0
5967 6043 -6168 0
5967 6045 -6170 0
5969 -6140 0
5969 6016 -6142 0
5969 6017 -6144 0
5969 6019 -6146 0
5969 6021 -6148 0
5969 6023 -6150 0
5969 6025 -6152 0
5969 6027 -6154 0
5969 6029 -6156 0
5969 6031 -6158 0
5969 6033 -6160 0
5969 6035 -6162 0
5969 6037 -6164 0
5969 6039 -6166 0
5969 6041 -6168 0
5969 6043 -6170 0
5969 6045 -6172 0
5971 -6142 0
5971 6016 -6144 0
5971 6017 -6146 0
5971 6019 -6148 0
5971 6021 -6150 0
5971 6023 -6152 0
5971 6025 -6154 0
5971 6027 -6156 0
5971 6029 -6158 0
5971 6031 -6160 0
5971 6033 -6162 0
5971 6035 -6164 0
5971 6037 -6166 0
5971 6039 -6168 0
5971 6041 -6170 0
5971 6043 -6172 0
5971 6045 -6174 0
5973 -6144 0
5973 6016 -6146 0
5973 6017 -6148 0
5973 6019 -6150 0
5973 6021 -6152 0
5973 6023 -6154 0
5973 6025 -6156 0
5973 6027 -6158 0
5973 6029 -6160 0
5973 6031 -6162 0
5973 6033 -6164 0
5973 6035 -6166 0
5973 6037 -6168 0
5973 6039 -6170 0
5973 6041 -6172 0
5973 6043 -6174 0
5973 6045 -6176 0
5975 -6146 0
5975 6016 -6148 0
5975 6017 -6150 0
5975 6019 -6152 0
5975 6021 -6154 0
5975 6023 -6156 0
5975 6025 -6158 0
5975 6027 -6160 0
5975 6029 -6162 0
5975 6031 -6164 0
5975 6033 -6166 0
5975 6035 -6168 0
5975 6037 -6170 0
5975 6039 -6172 0
5975 6041 -6174 0
5975 6043 -6176 0
5975 6045 -6178 0
5977 -6148 0
5977 6016 -6150 0
5977 6017 -6152 0
5977 6019 -6154 0
5977 6021 -6156 0
5977 6023 -6158 0
5977 6025 -6160 0
5977 6027 -6162 0
5977 6029 -6164 0
5977 6031 -6166 0
5977 6033 -6168 0
5977 6035 -6170 0
5977 6037 -6172 0
5977 6039 -6174 0
5977 6041 -6176 0
5977 6043 -6178 0
5977 6045 -6180 0
5979 -6150 0
5979 6016 -6152 0
5979 6017 -6154 0
5979 6019 -6156 0
5979 6021 -6158 0
5979 6023 -6160 0
5979 6025 -6162 0
5979 6027 -6164 0
5979 6029 -6166 0
5979 6031 -6168 0
5979 6033 -6170 0
5979 6035 -6172 0
5979 6037 -6174 0
5979 6039 -6176 0
5979 6041 -6178 0
5979 6043 -6180 0
5979 6045 -6182 0
5981 -6152 0
5981 6016 -6154 0
5981 6017 -6156 0
5981 6019 -6158 0
5981 6021 -6160 0
5981 6023 -6162 0
5981 6025 -6164 0
5981 6027 -6166 0
5981 6029 -6168 0
5981 6031 -6170 0
5981 6033 -6172 0
5981 6035 -6174 0
5981 6037 -6176 0
5981 6039 -6178 0
5981 6041 -6180 0
5981 6043 -6182 0
5981 6045 -6184 0
5983 -6154 0
5983 6016 -6156 0
5983 6017 -6158 0
5983 6019 -6160 0
5983 6021 -6162 0
5983 6023 -6164 0
5983 6025 -6166 0
5983 6027 -6168 0
5983 6029 -6170 0
5983 6031 -6172 0
5983 6033 -6174 0
5983 6035 -6176 0
5983 6037 -6178 0
5983 6039 -6180 0
5983 6041 -6182 0
5983 6043 -6184 0
5983 6045 -6186 0
c (0<=(aux569 + aux571 - aux574))
-6045 6186 0
-6043 6184 0
-6041 6182 0
-6039 6180 0
-6037 6178 0
-6035 6176 0
-6033 6174 0
-6031 6172 0
-6029 6170 0
-6027 6168 0
-6025 6166 0
-6023 6164 0
-6021 6162 0
-6019 6160 0
-6017 6158 0
-6016 6156 0
-5983 6186 0
-5983 -6045 6184 0
-5983 -6043 6182 0
-5983 -6041 6180 0
-5983 -6039 6178 0
-5983 -6037 6176 0
-5983 -6035 6174 0
-5983 -6033 6172 0
-5983 -6031 6170 0
-5983 -6029 6168 0
-5983 -6027 6166 0
-5983 -6025 6164 0
-5983 -6023 6162 0
-5983 -6021 6160 0
-5983 -6019 6158 0
-5983 -6017 6156 0
-5983 -6016 6154 0
-5981 6184 0
-5981 -6045 6182 0
-5981 -6043 6180 0
-5981 -6041 6178 0
-5981 -6039 6176 0
-5981 -6037 6174 0
-5981 -6035 6172 0
-5981 -6033 6170 0
-5981 -6031 6168 0
-5981 -6029 6166 0
-5981 -6027 6164 0
-5981 -6025 6162 0
-5981 -6023 6160 0
-5981 -6021 6158 0
-5981 -6019 6156 0
-5981 -6017 6154 0
-5981 -6016 6152 0
-5979 6182 0
-5979 -6045 6180 0
-5979 -6043 6178 0
-5979 -6041 6176 0
-5979 -6039 6174 0
-5979 -6037 6172 0
-5979 -6035 6170 0
-5979 -6033 6168 0
-5979 -6031 6166 0
-5979 -6029 6164 0
-5979 -6027 6162 0
-5979 -6025 6160 0
-5979 -6023 6158 0
-5979 -6021 6156 0
-5979 -6019 6154 0
-5979 -6017 6152 0
-5979 -6016 6150 0
-5977 6180 0
-5977 -6045 6178 0
-5977 -6043 6176 0
-5977 -6041 6174 0
-5977 -6039 6172 0
-5977 -6037 6170 0
-5977 -6035 6168 0
-5977 -6033 6166 0
-5977 -6031 6164 0
-5977 -6029 6162 0
-5977 -6027 6160 0
-5977 -6025 6158 0
-5977 -6023 6156 0
-5977 -6021 6154 0
-5977 -6019 6152 0
-5977 -6017 6150 0
-5977 -6016 6148 0
-5975 6178 0
-5975 -6045 6176 0
-5975 -6043 6174 0
-5975 -6041 6172 0
-5975 -6039 6170 0
-5975 -6037 6168 0
-5975 -6035 6166 0
-5975 -6033 6164 0
-5975 -6031 6162 0
-5975 -6029 6160 0
-5975 -6027 6158 0
-5975 -6025 6156 0
-5975 -6023 6154 0
-5975 -6021 6152 0
-5975 -6019 6150 0
-5975 -6017 6148 0
-5975 -6016 6146 0
-5973 6176 0
-5973 -6045 6174 0
-5973 -6043 6172 0
-5973 -6041 6170 0
-5973 -6039 6168 0
-5973 -6037 6166 0
-5973 -6035 6164 0
-5973 -6033 6162 0
-5973 -6031 6160 0
-5973 -6029 6158 0
-5973 -6027 6156 0
-5973 -6025 6154 0
-5973 -6023 6152 0
-5973 -6021 6150 0
-5973 -6019 6148 0
-5973 -6017 6146 0
-5973 -6016 6144 0
-5971 6174 0
-5971 -6045 6172 0
-5971 -6043 6170 0
-5971 -6041 6168 0
-5971 -6039 6166 0
-5971 -6037 6164 0
-5971 -6035 6162 0
-5971 -6033 6160 0
-5971 -6031 6158 0
-5971 -6029 6156 0
-5971 -6027 6154 0
-5971 -6025 6152 0
-5971 -6023 6150 0
-5971 -6021 6148 0
-5971 -6019 6146 0
-5971 -6017 6144 0
-5971 -6016 6142 0
-5969 6172 0
-5969 -6045 6170 0
-5969 -6043 6168 0
-5969 -6041 6166 0
-5969 -6039 6164 0
-5969 -6037 6162 0
-5969 -6035 6160 0
-5969 -6033 6158 0
-5969 -6031 6156 0
-5969 -6029 6154 0
-5969 -6027 6152 0
-5969 -6025 6150 0
-5969 -6023 6148 0
-5969 -6021 6146 0
-5969 -6019 6144 0
-5969 -6017 6142 0
-5969 -6016 6140 0
-5967 6170 0
-5967 -6045 6168 0
-5967 -6043 6166 0
-5967 -6041 6164 0
-5967 -6039 6162 0
-5967 -6037 6160 0
-5967 -6035 6158 0
-5967 -6033 6156 0
-5967 -6031 6154 0
-5967 -6029 6152 0
-5967 -6027 6150 0
-5967 -6025 6148 0
-5967 -6023 6146 0
-5967 -6021 6144 0
-5967 -6019 6142 0
-5967 -6017 6140 0
-5967 -6016 6138 0
-5965 6168 0
-5965 -6045 6166 0
-5965 -6043 6164 0
-5965 -6041 6162 0
-5965 -6039 6160 0
-5965 -6037 6158 0
-5965 -6035 6156 0
-5965 -6033 6154 0
-5965 -6031 6152 0
-5965 -6029 6150 0
-5965 -6027 6148 0
-5965 -6025 6146 0
-5965 -6023 6144 0
-5965 -6021 6142 0
-5965 -6019 6140 0
-5965 -6017 6138 0
-5965 -6016 6136 0
-5963 6166 0
-5963 -6045 6164 0
-5963 -6043 6162 0
-5963 -6041 6160 0
-5963 -6039 6158 0
-5963 -6037 6156 0
-5963 -6035 6154 0
-5963 -6033 6152 0
-5963 -6031 6150 0
-5963 -6029 6148 0
-5963 -6027 6146 0
-5963 -6025 6144 0
-5963 -6023 6142 0
-5963 -6021 6140 0
-5963 -6019 6138 0
-5963 -6017 6136 0
-5963 -6016 6134 0
-5961 6164 0
-5961 -6045 6162 0
-5961 -6043 6160 0
-5961 -6041 6158 0
-5961 -6039 6156 0
-5961 -6037 6154 0
-5961 -6035 6152 0
-5961 -6033 6150 0
-5961 -6031 6148 0
-5961 -6029 6146 0
-5961 -6027 6144 0
-5961 -6025 6142 0
-5961 -6023 6140 0
-5961 -6021 6138 0
-5961 -6019 6136 0
-5961 -6017 6134 0
-5961 -6016 6132 0
-5959 6162 0
-5959 -6045 6160 0
-5959 -6043 6158 0
-5959 -6041 6156 0
-5959 -6039 6154 0
-5959 -6037 6152 0
-5959 -6035 6150 0
-5959 -6033 6148 0
-5959 -6031 6146 0
-5959 -6029 6144 0
-5959 -6027 6142 0
-5959 -6025 6140 0
-5959 -6023 6138 0
-5959 -6021 6136 0
-5959 -6019 6134 0
-5959 -6017 6132 0
-5959 -6016 6130 0
-5957 6160 0
-5957 -6045 6158 0
-5957 -6043 6156 0
-5957 -6041 6154 0
-5957 -6039 6152 0
-5957 -6037 6150 0
-5957 -6035 6148 0
-5957 -6033 6146 0
-5957 -6031 6144 0
-5957 -6029 6142 0
-5957 -6027 6140 0
-5957 -6025 6138 0
-5957 -6023 6136 0
-5957 -6021 6134 0
-5957 -6019 6132 0
-5957 -6017 6130 0
-5957 -6016 6128 0
-5955 6158 0
-5955 -6045 6156 0
-5955 -6043 6154 0
-5955 -6041 6152 0
-5955 -6039 6150 0
-5955 -6037 6148 0
-5955 -6035 6146 0
-5955 -6033 6144 0
-5955 -6031 6142 0
-5955 -6029 6140 0
-5955 -6027 6138 0
-5955 -6025 6136 0
-5955 -6023 6134 0
-5955 -6021 6132 0
-5955 -6019 6130 0
-5955 -6017 6128 0
-5955 -6016 6126 0
-5954 6156 0
-5954 -6045 6154 0
-5954 -6043 6152 0
-5954 -6041 6150 0
-5954 -6039 6148 0
-5954 -6037 6146 0
-5954 -6035 6144 0
-5954 -6033 6142 0
-5954 -6031 6140 0
-5954 -6029 6138 0
-5954 -6027 6136 0
-5954 -6025 6134 0
-5954 -6023 6132 0
-5954 -6021 6130 0
-5954 -6019 6128 0
-5954 -6017 6126 0
-5954 -6016 6125 0
c (( - aux575 + shift(x_00006_00003, -1) + shift(x_00004_00001, -1))<=0)
407 -6188 0
408 -6189 0
410 -6191 0
412 -6193 0
414 -6195 0
416 -6197 0
418 -6199 0
420 -6201 0
707 -6188 0
707 407 -6189 0
707 408 -6191 0
707 410 -6193 0
707 412 -6195 0
707 414 -6197 0
707 416 -6199 0
707 418 -6201 0
707 420 -6203 0
708 -6189 0
708 407 -6191 0
708 408 -6193 0
708 410 -6195 0
708 412 -6197 0
708 414 -6199 0
708 416 -6201 0
708 418 -6203 0
708 420 -6205 0
710 -6191 0
710 407 -6193 0
710 408 -6195 0
710 410 -6197 0
710 412 -6199 0
710 414 -6201 0
710 416 -6203 0
710 418 -6205 0
710 420 -6207 0
712 -6193 0
712 407 -6195 0
712 408 -6197 0
712 410 -6199 0
712 412 -6201 0
712 414 -6203 0
712 416 -6205 0
712 418 -6207 0
712 420 -6209 0
714 -6195 0
714 407 -6197 0
714 408 -6199 0
714 410 -6201 0
714 412 -6203 0
714 414 -6205 0
714 416 -6207 0
714 418 -6209 0
714 420 -6211 0
716 -6197 0
716 407 -6199 0
716 408 -6201 0
716 410 -6203 0
716 412 -6205 0
716 414 -6207 0
716 416 -6209 0
716 418 -6211 0
716 420 -6213 0
718 -6199 0
718 407 -6201 0
718 408 -6203 0
718 410 -6205 0
718 412 -6207 0
718 414 -6209 0
718 416 -6211 0
718 418 -6213 0
718 420 -6215 0
720 -6201 0
720 407 -6203 0
720 408 -6205 0
720 410 -6207 0
720 412 -6209 0
720 414 -6211 0
720 416 -6213 0
720 418 -6215 0
720 420 -6217 0
c (0<=( - aux575 + shift(x_00006_00003, -1) + shift(x_00004_00001, -1)))
-420 6217 0
-418 6215 0
-416 6213 0
-414 6211 0
-412 6209 0
-410 6207 0
-408 6205 0
-407 6203 0
-720 6217 0
-720 -420 6215 0
-720 -418 6213 0
-720 -416 6211 0
-720 -414 6209 0
-720 -412 6207 0
-720 -410 6205 0
-720 -408 6203 0
-720 -407 6201 0
-718 6215 0
-718 -420 6213 0
-718 -418 6211 0
-718 -416 6209 0
-718 -414 6207 0
-718 -412 6205 0
-718 -410 6203 0
-718 -408 6201 0
-718 -407 6199 0
-716 6213 0
-716 -420 6211 0
-716 -418 6209 0
-716 -416 6207 0
-716 -414 6205 0
-716 -412 6203 0
-716 -410 6201 0
-716 -408 6199 0
-716 -407 6197 0
-714 6211 0
-714 -420 6209 0
-714 -418 6207 0
-714 -416 6205 0
-714 -414 6203 0
-714 -412 6201 0
-714 -410 6199 0
-714 -408 6197 0
-714 -407 6195 0
-712 6209 0
-712 -420 6207 0
-712 -418 6205 0
-712 -416 6203 0
-712 -414 6201 0
-712 -412 6199 0
-712 -410 6197 0
-712 -408 6195 0
-712 -407 6193 0
-710 6207 0
-710 -420 6205 0
-710 -418 6203 0
-710 -416 6201 0
-710 -414 6199 0
-710 -412 6197 0
-710 -410 6195 0
-710 -408 6193 0
-710 -407 6191 0
-708 6205 0
-708 -420 6203 0
-708 -418 6201 0
-708 -416 6199 0
-708 -414 6197 0
-708 -412 6195 0
-708 -410 6193 0
-708 -408 6191 0
-708 -407 6189 0
-707 6203 0
-707 -420 6201 0
-707 -418 6199 0
-707 -416 6197 0
-707 -414 6195 0
-707 -412 6193 0
-707 -410 6191 0
-707 -408 6189 0
-707 -407 6188 0
c (( - aux576 + shift(x_00006_00002, -1) + shift(x_00004_00002, -1))<=0)
422 -6219 0
423 -6220 0
425 -6222 0
427 -6224 0
429 -6226 0
431 -6228 0
433 -6230 0
435 -6232 0
692 -6219 0
692 422 -6220 0
692 423 -6222 0
692 425 -6224 0
692 427 -6226 0
692 429 -6228 0
692 431 -6230 0
692 433 -6232 0
692 435 -6234 0
693 -6220 0
693 422 -6222 0
693 423 -6224 0
693 425 -6226 0
693 427 -6228 0
693 429 -6230 0
693 431 -6232 0
693 433 -6234 0
693 435 -6236 0
695 -6222 0
695 422 -6224 0
695 423 -6226 0
695 425 -6228 0
695 427 -6230 0
695 429 -6232 0
695 431 -6234 0
695 433 -6236 0
695 435 -6238 0
697 -6224 0
697 422 -6226 0
697 423 -6228 0
697 425 -6230 0
697 427 -6232 0
697 429 -6234 0
697 431 -6236 0
697 433 -6238 0
697 435 -6240 0
699 -6226 0
699 422 -6228 0
699 423 -6230 0
699 425 -6232 0
699 427 -6234 0
699 429 -6236 0
699 431 -6238 0
699 433 -6240 0
699 435 -6242 0
701 -6228 0
701 422 -6230 0
701 423 -6232 0
701 425 -6234 0
701 427 -6236 0
701 429 -6238 0
701 431 -6240 0
701 433 -6242 0
701 435 -6244 0
703 -6230 0
703 422 -6232 0
703 423 -6234 0
703 425 -6236 0
703 427 -6238 0
703 429 -6240 0
703 431 -6242 0
703 433 -6244 0
703 435 -6246 0
705 -6232 0
705 422 -6234 0
705 423 -6236 0
705 425 -6238 0
705 427 -6240 0
705 429 -6242 0
705 431 -6244 0
705 433 -6246 0
705 435 -6248 0
c (0<=( - aux576 + shift(x_00006_00002, -1) + shift(x_00004_00002, -1)))
-435 6248 0
-433 6246 0
-431 6244 0
-429 6242 0
-427 6240 0
-425 6238 0
-423 6236 0
-422 6234 0
-705 6248 0
-705 -435 6246 0
-705 -433 6244 0
-705 -431 6242 0
-705 -429 6240 0
-705 -427 6238 0
-705 -425 6236 0
-705 -423 6234 0
-705 -422 6232 0
-703 6246 0
-703 -435 6244 0
-703 -433 6242 0
-703 -431 6240 0
-703 -429 6238 0
-703 -427 6236 0
-703 -425 6234 0
-703 -423 6232 0
-703 -422 6230 0
-701 6244 0
-701 -435 6242 0
-701 -433 6240 0
-701 -431 6238 0
-701 -429 6236 0
-701 -427 6234 0
-701 -425 6232 0
-701 -423 6230 0
-701 -422 6228 0
-699 6242 0
-699 -435 6240 0
-699 -433 6238 0
-699 -431 6236 0
-699 -429 6234 0
-699 -427 6232 0
-699 -425 6230 0
-699 -423 6228 0
-699 -422 6226 0
-697 6240 0
-697 -435 6238 0
-697 -433 6236 0
-697 -431 6234 0
-697 -429 6232 0
-697 -427 6230 0
-697 -425 6228 0
-697 -423 6226 0
-697 -422 6224 0
-695 6238 0
-695 -435 6236 0
-695 -433 6234 0
-695 -431 6232 0
-695 -429 6230 0
-695 -427 6228 0
-695 -425 6226 0
-695 -423 6224 0
-695 -422 6222 0
-693 6236 0
-693 -435 6234 0
-693 -433 6232 0
-693 -431 6230 0
-693 -429 6228 0
-693 -427 6226 0
-693 -425 6224 0
-693 -423 6222 0
-693 -422 6220 0
-692 6234 0
-692 -435 6232 0
-692 -433 6230 0
-692 -431 6228 0
-692 -429 6226 0
-692 -427 6224 0
-692 -425 6222 0
-692 -423 6220 0
-692 -422 6219 0
c (( - aux577 + shift(x_00005_00001, -1) + shift(x_00006_00001, -1))<=0)
677 -6250 0
678 -6251 0
680 -6253 0
682 -6255 0
684 -6257 0
686 -6259 0
688 -6261 0
690 -6263 0
542 -6250 0
542 677 -6251 0
542 678 -6253 0
542 680 -6255 0
542 682 -6257 0
542 684 -6259 0
542 686 -6261 0
542 688 -6263 0
542 690 -6265 0
543 -6251 0
543 677 -6253 0
543 678 -6255 0
543 680 -6257 0
543 682 -6259 0
543 684 -6261 0
543 686 -6263 0
543 688 -6265 0
543 690 -6267 0
545 -6253 0
545 677 -6255 0
545 678 -6257 0
545 680 -6259 0
545 682 -6261 0
545 684 -6263 0
545 686 -6265 0
545 688 -6267 0
545 690 -6269 0
547 -6255 0
547 677 -6257 0
547 678 -6259 0
547 680 -6261 0
547 682 -6263 0
547 684 -6265 0
547 686 -6267 0
547 688 -6269 0
547 690 -6271 0
549 -6257 0
549 677 -6259 0
549 678 -6261 0
549 680 -6263 0
549 682 -6265 0
549 684 -6267 0
549 686 -6269 0
549 688 -6271 0
549 690 -6273 0
551 -6259 0
551 677 -6261 0
551 678 -6263 0
551 680 -6265 0
551 682 -6267 0
551 684 -6269 0
551 686 -6271 0
551 688 -6273 0
551 690 -6275 0
553 -6261 0
553 677 -6263 0
553 678 -6265 0
553 680 -6267 0
553 682 -6269 0
553 684 -6271 0
553 686 -6273 0
553 688 -6275 0
553 690 -6277 0
555 -6263 0
555 677 -6265 0
555 678 -6267 0
555 680 -6269 0
555 682 -6271 0
555 684 -6273 0
555 686 -6275 0
555 688 -6277 0
555 690 -6279 0
c (0<=( - aux577 + shift(x_00005_00001, -1) + shift(x_00006_00001, -1)))
-690 6279 0
-688 6277 0
-686 6275 0
-684 6273 0
-682 6271 0
-680 6269 0
-678 6267 0
-677 6265 0
-555 6279 0
-555 -690 6277 0
-555 -688 6275 0
-555 -686 6273 0
-555 -684 6271 0
-555 -682 6269 0
-555 -680 6267 0
-555 -678 6265 0
-555 -677 6263 0
-553 6277 0
-553 -690 6275 0
-553 -688 6273 0
-553 -686 6271 0
-553 -684 6269 0
-553 -682 6267 0
-553 -680 6265 0
-553 -678 6263 0
-553 -677 6261 0
-551 6275 0
-551 -690 6273 0
-551 -688 6271 0
-551 -686 6269 0
-551 -684 6267 0
-551 -682 6265 0
-551 -680 6263 0
-551 -678 6261 0
-551 -677 6259 0
-549 6273 0
-549 -690 6271 0
-549 -688 6269 0
-549 -686 6267 0
-549 -684 6265 0
-549 -682 6263 0
-549 -680 6261 0
-549 -678 6259 0
-549 -677 6257 0
-547 6271 0
-547 -690 6269 0
-547 -688 6267 0
-547 -686 6265 0
-547 -684 6263 0
-547 -682 6261 0
-547 -680 6259 0
-547 -678 6257 0
-547 -677 6255 0
-545 6269 0
-545 -690 6267 0
-545 -688 6265 0
-545 -686 6263 0
-545 -684 6261 0
-545 -682 6259 0
-545 -680 6257 0
-545 -678 6255 0
-545 -677 6253 0
-543 6267 0
-543 -690 6265 0
-543 -688 6263 0
-543 -686 6261 0
-543 -684 6259 0
-543 -682 6257 0
-543 -680 6255 0
-543 -678 6253 0
-543 -677 6251 0
-542 6265 0
-542 -690 6263 0
-542 -688 6261 0
-542 -686 6259 0
-542 -684 6257 0
-542 -682 6255 0
-542 -680 6253 0
-542 -678 6251 0
-542 -677 6250 0
c (( - aux578 + shift(x_00005_00002, -1) + shift(x_00005_00003, -1))<=0)
572 -6281 0
573 -6282 0
575 -6284 0
577 -6286 0
579 -6288 0
581 -6290 0
583 -6292 0
585 -6294 0
557 -6281 0
557 572 -6282 0
557 573 -6284 0
557 575 -6286 0
557 577 -6288 0
557 579 -6290 0
557 581 -6292 0
557 583 -6294 0
557 585 -6296 0
558 -6282 0
558 572 -6284 0
558 573 -6286 0
558 575 -6288 0
558 577 -6290 0
558 579 -6292 0
558 581 -6294 0
558 583 -6296 0
558 585 -6298 0
560 -6284 0
560 572 -6286 0
560 573 -6288 0
560 575 -6290 0
560 577 -6292 0
560 579 -6294 0
560 581 -6296 0
560 583 -6298 0
560 585 -6300 0
562 -6286 0
562 572 -6288 0
562 573 -6290 0
562 575 -6292 0
562 577 -6294 0
562 579 -6296 0
562 581 -6298 0
562 583 -6300 0
562 585 -6302 0
564 -6288 0
564 572 -6290 0
564 573 -6292 0
564 575 -6294 0
564 577 -6296 0
564 579 -6298 0
564 581 -6300 0
564 583 -6302 0
564 585 -6304 0
566 -6290 0
566 572 -6292 0
566 573 -6294 0
566 575 -6296 0
566 577 -6298 0
566 579 -6300 0
566 581 -6302 0
566 583 -6304 0
566 585 -6306 0
568 -6292 0
568 572 -6294 0
568 573 -6296 0
568 575 -6298 0
568 577 -6300 0
568 579 -6302 0
568 581 -6304 0
568 583 -6306 0
568 585 -6308 0
570 -6294 0
570 572 -6296 0
570 573 -6298 0
570 575 -6300 0
570 577 -6302 0
570 579 -6304 0
570 581 -6306 0
570 583 -6308 0
570 585 -6310 0
c (0<=( - aux578 + shift(x_00005_00002, -1) + shift(x_00005_00003, -1)))
-585 6310 0
-583 6308 0
-581 6306 0
-579 6304 0
-577 6302 0
-575 6300 0
-573 6298 0
-572 6296 0
-570 6310 0
-570 -585 6308 0
-570 -583 6306 0
-570 -581 6304 0
-570 -579 6302 0
-570 -577 6300 0
-570 -575 6298 0
-570 -573 6296 0
-570 -572 6294 0
-568 6308 0
-568 -585 6306 0
-568 -583 6304 0
-568 -581 6302 0
-568 -579 6300 0
-568 -577 6298 0
-568 -575 6296 0
-568 -573 6294 0
-568 -572 6292 0
-566 6306 0
-566 -585 6304 0
-566 -583 6302 0
-566 -581 6300 0
-566 -579 6298 0
-566 -577 6296 0
-566 -575 6294 0
-566 -573 6292 0
-566 -572 6290 0
-564 6304 0
-564 -585 6302 0
-564 -583 6300 0
-564 -581 6298 0
-564 -579 6296 0
-564 -577 6294 0
-564 -575 6292 0
-564 -573 6290 0
-564 -572 6288 0
-562 6302 0
-562 -585 6300 0
-562 -583 6298 0
-562 -581 6296 0
-562 -579 6294 0
-562 -577 6292 0
-562 -575 6290 0
-562 -573 6288 0
-562 -572 6286 0
-560 6300 0
-560 -585 6298 0
-560 -583 6296 0
-560 -581 6294 0
-560 -579 6292 0
-560 -577 6290 0
-560 -575 6288 0
-560 -573 6286 0
-560 -572 6284 0
-558 6298 0
-558 -585 6296 0
-558 -583 6294 0
-558 -581 6292 0
-558 -579 6290 0
-558 -577 6288 0
-558 -575 6286 0
-558 -573 6284 0
-558 -572 6282 0
-557 6296 0
-557 -585 6294 0
-557 -583 6292 0
-557 -581 6290 0
-557 -579 6288 0
-557 -577 6286 0
-557 -575 6284 0
-557 -573 6282 0
-557 -572 6281 0
c ((aux578 - aux579 + shift(x_00004_00003, -1))<=0)
6281 -6312 0
6282 -6313 0
6284 -6315 0
6286 -6317 0
6288 -6319 0
6290 -6321 0
6292 -6323 0
6294 -6325 0
6296 -6327 0
6298 -6329 0
6300 -6331 0
6302 -6333 0
6304 -6335 0
6306 -6337 0
6308 -6339 0
6310 -6341 0
437 -6312 0
437 6281 -6313 0
437 6282 -6315 0
437 6284 -6317 0
437 6286 -6319 0
437 6288 -6321 0
437 6290 -6323 0
437 6292 -6325 0
437 6294 -6327 0
437 6296 -6329 0
437 6298 -6331 0
437 6300 -6333 0
437 6302 -6335 0
437 6304 -6337 0
437 6306 -6339 0
437 6308 -6341 0
437 6310 -6343 0
438 -6313 0
438 6281 -6315 0
438 6282 -6317 0
438 6284 -6319 0
438 6286 -6321 0
438 6288 -6323 0
438 6290 -6325 0
438 6292 -6327 0
438 6294 -6329 0
438 6296 -6331 0
438 6298 -6333 0
438 6300 -6335 0
438 6302 -6337 0
438 6304 -6339 0
438 6306 -6341 0
438 6308 -6343 0
438 6310 -6345 0
440 -6315 0
440 6281 -6317 0
440 6282 -6319 0
440 6284 -6321 0
440 6286 -6323 0
440 6288 -6325 0
440 6290 -6327 0
440 6292 -6329 0
440 6294 -6331 0
440 6296 -6333 0
440 6298 -6335 0
440 6300 -6337 0
440 6302 -6339 0
440 6304 -6341 0
440 6306 -6343 0
440 6308 -6345 0
440 6310 -6347 0
442 -6317 0
442 6281 -6319 0
442 6282 -6321 0
442 6284 -6323 0
442 6286 -6325 0
442 6288 -6327 0
442 6290 -6329 0
442 6292 -6331 0
442 6294 -6333 0
442 6296 -6335 0
442 6298 -6337 0
442 6300 -6339 0
442 6302 -6341 0
442 6304 -6343 0
442 6306 -6345 0
442 6308 -6347 0
442 6310 -6349 0
444 -6319 0
444 6281 -6321 0
444 6282 -6323 0
444 6284 -6325 0
444 6286 -6327 0
444 6288 -6329 0
444 6290 -6331 0
444 6292 -6333 0
444 6294 -6335 0
444 6296 -6337 0
444 6298 -6339 0
444 6300 -6341 0
444 6302 -6343 0
444 6304 -6345 0
444 6306 -6347 0
444 6308 -6349 0
444 6310 -6351 0
446 -6321 0
446 6281 -6323 0
446 6282 -6325 0
446 6284 -6327 0
446 6286 -6329 0
446 6288 -6331 0
446 6290 -6333 0
446 6292 -6335 0
446 6294 -6337 0
446 6296 -6339 0
446 6298 -6341 0
446 6300 -6343 0
446 6302 -6345 0
446 6304 -6347 0
446 6306 -6349 0
446 6308 -6351 0
446 6310 -6353 0
448 -6323 0
448 6281 -6325 0
448 6282 -6327 0
448 6284 -6329 0
448 6286 -6331 0
448 6288 -6333 0
448 6290 -6335 0
448 6292 -6337 0
448 6294 -6339 0
448 6296 -6341 0
448 6298 -6343 0
448 6300 -6345 0
448 6302 -6347 0
448 6304 -6349 0
448 6306 -6351 0
448 6308 -6353 0
448 6310 -6355 0
450 -6325 0
450 6281 -6327 0
450 6282 -6329 0
450 6284 -6331 0
450 6286 -6333 0
450 6288 -6335 0
450 6290 -6337 0
450 6292 -6339 0
450 6294 -6341 0
450 6296 -6343 0
450 6298 -6345 0
450 6300 -6347 0
450 6302 -6349 0
450 6304 -6351 0
450 6306 -6353 0
450 6308 -6355 0
450 6310 -6357 0
c (0<=(aux578 - aux579 + shift(x_00004_00003, -1)))
-6310 6357 0
-6308 6355 0
-6306 6353 0
-6304 6351 0
-6302 6349 0
-6300 6347 0
-6298 6345 0
-6296 6343 0
-6294 6341 0
-6292 6339 0
-6290 6337 0
-6288 6335 0
-6286 6333 0
-6284 6331 0
-6282 6329 0
-6281 6327 0
-450 6357 0
-450 -6310 6355 0
-450 -6308 6353 0
-450 -6306 6351 0
-450 -6304 6349 0
-450 -6302 6347 0
-450 -6300 6345 0
-450 -6298 6343 0
-450 -6296 6341 0
-450 -6294 6339 0
-450 -6292 6337 0
-450 -6290 6335 0
-450 -6288 6333 0
-450 -6286 6331 0
-450 -6284 6329 0
-450 -6282 6327 0
-450 -6281 6325 0
-448 6355 0
-448 -6310 6353 0
-448 -6308 6351 0
-448 -6306 6349 0
-448 -6304 6347 0
-448 -6302 6345 0
-448 -6300 6343 0
-448 -6298 6341 0
-448 -6296 6339 0
-448 -6294 6337 0
-448 -6292 6335 0
-448 -6290 6333 0
-448 -6288 6331 0
-448 -6286 6329 0
-448 -6284 6327 0
-448 -6282 6325 0
-448 -6281 6323 0
-446 6353 0
-446 -6310 6351 0
-446 -6308 6349 0
-446 -6306 6347 0
-446 -6304 6345 0
-446 -6302 6343 0
-446 -6300 6341 0
-446 -6298 6339 0
-446 -6296 6337 0
-446 -6294 6335 0
-446 -6292 6333 0
-446 -6290 6331 0
-446 -6288 6329 0
-446 -6286 6327 0
-446 -6284 6325 0
-446 -6282 6323 0
-446 -6281 6321 0
-444 6351 0
-444 -6310 6349 0
-444 -6308 6347 0
-444 -6306 6345 0
-444 -6304 6343 0
-444 -6302 6341 0
-444 -6300 6339 0
-444 -6298 6337 0
-444 -6296 6335 0
-444 -6294 6333 0
-444 -6292 6331 0
-444 -6290 6329 0
-444 -6288 6327 0
-444 -6286 6325 0
-444 -6284 6323 0
-444 -6282 6321 0
-444 -6281 6319 0
-442 6349 0
-442 -6310 6347 0
-442 -6308 6345 0
-442 -6306 6343 0
-442 -6304 6341 0
-442 -6302 6339 0
-442 -6300 6337 0
-442 -6298 6335 0
-442 -6296 6333 0
-442 -6294 6331 0
-442 -6292 6329 0
-442 -6290 6327 0
-442 -6288 6325 0
-442 -6286 6323 0
-442 -6284 6321 0
-442 -6282 6319 0
-442 -6281 6317 0
-440 6347 0
-440 -6310 6345 0
-440 -6308 6343 0
-440 -6306 6341 0
-440 -6304 6339 0
-440 -6302 6337 0
-440 -6300 6335 0
-440 -6298 6333 0
-440 -6296 6331 0
-440 -6294 6329 0
-440 -6292 6327 0
-440 -6290 6325 0
-440 -6288 6323 0
-440 -6286 6321 0
-440 -6284 6319 0
-440 -6282 6317 0
-440 -6281 6315 0
-438 6345 0
-438 -6310 6343 0
-438 -6308 6341 0
-438 -6306 6339 0
-438 -6304 6337 0
-438 -6302 6335 0
-438 -6300 6333 0
-438 -6298 6331 0
-438 -6296 6329 0
-438 -6294 6327 0
-438 -6292 6325 0
-438 -6290 6323 0
-438 -6288 6321 0
-438 -6286 6319 0
-438 -6284 6317 0
-438 -6282 6315 0
-438 -6281 6313 0
-437 6343 0
-437 -6310 6341 0
-437 -6308 6339 0
-437 -6306 6337 0
-437 -6304 6335 0
-437 -6302 6333 0
-437 -6300 6331 0
-437 -6298 6329 0
-437 -6296 6327 0
-437 -6294 6325 0
-437 -6292 6323 0
-437 -6290 6321 0
-437 -6288 6319 0
-437 -6286 6317 0
-437 -6284 6315 0
-437 -6282 6313 0
-437 -6281 6312 0
c ((aux575 + aux577 - aux580)<=0)
6250 -6359 0
6251 -6360 0
6253 -6362 0
6255 -6364 0
6257 -6366 0
6259 -6368 0
6261 -6370 0
6263 -6372 0
6265 -6374 0
6267 -6376 0
6269 -6378 0
6271 -6380 0
6273 -6382 0
6275 -6384 0
6277 -6386 0
6279 -6388 0
6188 -6359 0
6188 6250 -6360 0
6188 6251 -6362 0
6188 6253 -6364 0
6188 6255 -6366 0
6188 6257 -6368 0
6188 6259 -6370 0
6188 6261 -6372 0
6188 6263 -6374 0
6188 6265 -6376 0
6188 6267 -6378 0
6188 6269 -6380 0
6188 6271 -6382 0
6188 6273 -6384 0
6188 6275 -6386 0
6188 6277 -6388 0
6188 6279 -6390 0
6189 -6360 0
6189 6250 -6362 0
6189 6251 -6364 0
6189 6253 -6366 0
6189 6255 -6368 0
6189 6257 -6370 0
6189 6259 -6372 0
6189 6261 -6374 0
6189 6263 -6376 0
6189 6265 -6378 0
6189 6267 -6380 0
6189 6269 -6382 0
6189 6271 -6384 0
6189 6273 -6386 0
6189 6275 -6388 0
6189 6277 -6390 0
6189 6279 -6392 0
6191 -6362 0
6191 6250 -6364 0
6191 6251 -6366 0
6191 6253 -6368 0
6191 6255 -6370 0
6191 6257 -6372 0
6191 6259 -6374 0
6191 6261 -6376 0
6191 6263 -6378 0
6191 6265 -6380 0
6191 6267 -6382 0
6191 6269 -6384 0
6191 6271 -6386 0
6191 6273 -6388 0
6191 6275 -6390 0
6191 6277 -6392 0
6191 6279 -6394 0
6193 -6364 0
6193 6250 -6366 0
6193 6251 -6368 0
6193 6253 -6370 0
6193 6255 -6372 0
6193 6257 -6374 0
6193 6259 -6376 0
6193 6261 -6378 0
6193 6263 -6380 0
6193 6265 -6382 0
6193 6267 -6384 0
6193 6269 -6386 0
6193 6271 -6388 0
6193 6273 -6390 0
6193 6275 -6392 0
6193 6277 -6394 0
6193 6279 -6396 0
6195 -6366 0
6195 6250 -6368 0
6195 6251 -6370 0
6195 6253 -6372 0
6195 6255 -6374 0
6195 6257 -6376 0
6195 6259 -6378 0
6195 6261 -6380 0
6195 6263 -6382 0
6195 6265 -6384 0
6195 6267 -6386 0
6195 6269 -6388 0
6195 6271 -6390 0
6195 6273 -6392 0
6195 6275 -6394 0
6195 6277 -6396 0
6195 6279 -6398 0
6197 -6368 0
6197 6250 -6370 0
6197 6251 -6372 0
6197 6253 -6374 0
6197 6255 -6376 0
6197 6257 -6378 0
6197 6259 -6380 0
6197 6261 -6382 0
6197 6263 -6384 0
6197 6265 -6386 0
6197 6267 -6388 0
6197 6269 -6390 0
6197 6271 -6392 0
6197 6273 -6394 0
6197 6275 -6396 0
6197 6277 -6398 0
6197 6279 -6400 0
6199 -6370 0
6199 6250 -6372 0
6199 6251 -6374 0
6199 6253 -6376 0
6199 6255 -6378 0
6199 6257 -6380 0
6199 6259 -6382 0
6199 6261 -6384 0
6199 6263 -6386 0
6199 6265 -6388 0
6199 6267 -6390 0
6199 6269 -6392 0
6199 6271 -6394 0
6199 6273 -6396 0
6199 6275 -6398 0
6199 6277 -6400 0
6199 6279 -6402 0
6201 -6372 0
6201 6250 -6374 0
6201 6251 -6376 0
6201 6253 -6378 0
6201 6255 -6380 0
6201 6257 -6382 0
6201 6259 -6384 0
6201 6261 -6386 0
6201 6263 -6388 0
6201 6265 -6390 0
6201 6267 -6392 0
6201 6269 -6394 0
6201 6271 -6396 0
6201 6273 -6398 0
6201 6275 -6400 0
6201 6277 -6402 0
6201 6279 -6404 0
6203 -6374 0
6203 6250 -6376 0
6203 6251 -6378 0
6203 6253 -6380 0
6203 6255 -6382 0
6203 6257 -6384 0
6203 6259 -6386 0
6203 6261 -6388 0
6203 6263 -6390 0
6203 6265 -6392 0
6203 6267 -6394 0
6203 6269 -6396 0
6203 6271 -6398 0
6203 6273 -6400 0
6203 6275 -6402 0
6203 6277 -6404 0
6203 6279 -6406 0
6205 -6376 0
6205 6250 -6378 0
6205 6251 -6380 0
6205 6253 -6382 0
6205 6255 -6384 0
6205 6257 -6386 0
6205 6259 -6388 0
6205 6261 -6390 0
6205 6263 -6392 0
6205 6265 -6394 0
6205 6267 -6396 0
6205 6269 -6398 0
6205 6271 -6400 0
6205 6273 -6402 0
6205 6275 -6404 0
6205 6277 -6406 0
6205 6279 -6408 0
6207 -6378 0
6207 6250 -6380 0
6207 6251 -6382 0
6207 6253 -6384 0
6207 6255 -6386 0
6207 6257 -6388 0
6207 6259 -6390 0
6207 6261 -6392 0
6207 6263 -6394 0
6207 6265 -6396 0
6207 6267 -6398 0
6207 6269 -6400 0
6207 6271 -6402 0
6207 6273 -6404 0
6207 6275 -6406 0
6207 6277 -6408 0
6207 6279 -6410 0
6209 -6380 0
6209 6250 -6382 0
6209 6251 -6384 0
6209 6253 -6386 0
6209 6255 -6388 0
6209 6257 -6390 0
6209 6259 -6392 0
6209 6261 -6394 0
6209 6263 -6396 0
6209 6265 -6398 0
6209 6267 -6400 0
6209 6269 -6402 0
6209 6271 -6404 0
6209 6273 -6406 0
6209 6275 -6408 0
6209 6277 -6410 0
6209 6279 -6412 0
6211 -6382 0
6211 6250 -6384 0
6211 6251 -6386 0
6211 6253 -6388 0
6211 6255 -6390 0
6211 6257 -6392 0
6211 6259 -6394 0
6211 6261 -6396 0
6211 6263 -6398 0
6211 6265 -6400 0
6211 6267 -6402 0
6211 6269 -6404 0
6211 6271 -6406 0
6211 6273 -6408 0
6211 6275 -6410 0
6211 6277 -6412 0
6211 6279 -6414 0
6213 -6384 0
6213 6250 -6386 0
6213 6251 -6388 0
6213 6253 -6390 0
6213 6255 -6392 0
6213 6257 -6394 0
6213 6259 -6396 0
6213 6261 -6398 0
6213 6263 -6400 0
6213 6265 -6402 0
6213 6267 -6404 0
6213 6269 -6406 0
6213 6271 -6408 0
6213 6273 -6410 0
6213 6275 -6412 0
6213 6277 -6414 0
6213 6279 -6416 0
6215 -6386 0
6215 6250 -6388 0
6215 6251 -6390 0
6215 6253 -6392 0
6215 6255 -6394 0
6215 6257 -6396 0
6215 6259 -6398 0
6215 6261 -6400 0
6215 6263 -6402 0
6215 6265 -6404 0
6215 6267 -6406 0
6215 6269 -6408 0
6215 6271 -6410 0
6215 6273 -6412 0
6215 6275 -6414 0
6215 6277 -6416 0
6215 6279 -6418 0
6217 -6388 0
6217 6250 -6390 0
6217 6251 -6392 0
6217 6253 -6394 0
6217 6255 -6396 0
6217 6257 -6398 0
6217 6259 -6400 0
6217 6261 -6402 0
6217 6263 -6404 0
6217 6265 -6406 0
6217 6267 -6408 0
6217 6269 -6410 0
6217 6271 -6412 0
6217 6273 -6414 0
6217 6275 -6416 0
6217 6277 -6418 0
6217 6279 -6420 0
c (0<=(aux575 + aux577 - aux580))
-6279 6420 0
-6277 6418 0
-6275 6416 0
-6273 6414 0
-6271 6412 0
-6269 6410 0
-6267 6408 0
-6265 6406 0
-6263 6404 0
-6261 6402 0
-6259 6400 0
-6257 6398 0
-6255 6396 0
-6253 6394 0
-6251 6392 0
-6250 6390 0
-6217 6420 0
-6217 -6279 6418 0
-6217 -6277 6416 0
-6217 -6275 6414 0
-6217 -6273 6412 0
-6217 -6271 6410 0
-6217 -6269 6408 0
-6217 -6267 6406 0
-6217 -6265 6404 0
-6217 -6263 6402 0
-6217 -6261 6400 0
-6217 -6259 6398 0
-6217 -6257 6396 0
-6217 -6255 6394 0
-6217 -6253 6392 0
-6217 -6251 6390 0
-6217 -6250 6388 0
-6215 6418 0
-6215 -6279 6416 0
-6215 -6277 6414 0
-6215 -6275 6412 0
-6215 -6273 6410 0
-6215 -6271 6408 0
-6215 -6269 6406 0
-6215 -6267 6404 0
-6215 -6265 6402 0
-6215 -6263 6400 0
-6215 -6261 6398 0
-6215 -6259 6396 0
-6215 -6257 6394 0
-6215 -6255 6392 0
-6215 -6253 6390 0
-6215 -6251 6388 0
-6215 -6250 6386 0
-6213 6416 0
-6213 -6279 6414 0
-6213 -6277 6412 0
-6213 -6275 6410 0
-6213 -6273 6408 0
-6213 -6271 6406 0
-6213 -6269 6404 0
-6213 -6267 6402 0
-6213 -6265 6400 0
-6213 -6263 6398 0
-6213 -6261 6396 0
-6213 -6259 6394 0
-6213 -6257 6392 0
-6213 -6255 6390 0
-6213 -6253 6388 0
-6213 -6251 6386 0
-6213 -6250 6384 0
-6211 6414 0
-6211 -6279 6412 0
-6211 -6277 6410 0
-6211 -6275 6408 0
-6211 -6273 6406 0
-6211 -6271 6404 0
-6211 -6269 6402 0
-6211 -6267 6400 0
-6211 -6265 6398 0
-6211 -6263 6396 0
-6211 -6261 6394 0
-6211 -6259 6392 0
-6211 -6257 6390 0
-6211 -6255 6388 0
-6211 -6253 6386 0
-6211 -6251 6384 0
-6211 -6250 6382 0
-6209 6412 0
-6209 -6279 6410 0
-6209 -6277 6408 0
-6209 -6275 6406 0
-6209 -6273 6404 0
-6209 -6271 6402 0
-6209 -6269 6400 0
-6209 -6267 6398 0
-6209 -6265 6396 0
-6209 -6263 6394 0
-6209 -6261 6392 0
-6209 -6259 6390 0
-6209 -6257 6388 0
-6209 -6255 6386 0
-6209 -6253 6384 0
-6209 -6251 6382 0
-6209 -6250 6380 0
-6207 6410 0
-6207 -6279 6408 0
-6207 -6277 6406 0
-6207 -6275 6404 0
-6207 -6273 6402 0
-6207 -6271 6400 0
-6207 -6269 6398 0
-6207 -6267 6396 0
-6207 -6265 6394 0
-6207 -6263 6392 0
-6207 -6261 6390 0
-6207 -6259 6388 0
-6207 -6257 6386 0
-6207 -6255 6384 0
-6207 -6253 6382 0
-6207 -6251 6380 0
-6207 -6250 6378 0
-6205 6408 0
-6205 -6279 6406 0
-6205 -6277 6404 0
-6205 -6275 6402 0
-6205 -6273 6400 0
-6205 -6271 6398 0
-6205 -6269 6396 0
-6205 -6267 6394 0
-6205 -6265 6392 0
-6205 -6263 6390 0
-6205 -6261 6388 0
-6205 -6259 6386 0
-6205 -6257 6384 0
-6205 -6255 6382 0
-6205 -6253 6380 0
-6205 -6251 6378 0
-6205 -6250 6376 0
-6203 6406 0
-6203 -6279 6404 0
-6203 -6277 6402 0
-6203 -6275 6400 0
-6203 -6273 6398 0
-6203 -6271 6396 0
-6203 -6269 6394 0
-6203 -6267 6392 0
-6203 -6265 6390 0
-6203 -6263 6388 0
-6203 -6261 6386 0
-6203 -6259 6384 0
-6203 -6257 6382 0
-6203 -6255 6380 0
-6203 -6253 6378 0
-6203 -6251 6376 0
-6203 -6250 6374 0
-6201 6404 0
-6201 -6279 6402 0
-6201 -6277 6400 0
-6201 -6275 6398 0
-6201 -6273 6396 0
-6201 -6271 6394 0
-6201 -6269 6392 0
-6201 -6267 6390 0
-6201 -6265 6388 0
-6201 -6263 6386 0
-6201 -6261 6384 0
-6201 -6259 6382 0
-6201 -6257 6380 0
-6201 -6255 6378 0
-6201 -6253 6376 0
-6201 -6251 6374 0
-6201 -6250 6372 0
-6199 6402 0
-6199 -6279 6400 0
-6199 -6277 6398 0
-6199 -6275 6396 0
-6199 -6273 6394 0
-6199 -6271 6392 0
-6199 -6269 6390 0
-6199 -6267 6388 0
-6199 -6265 6386 0
-6199 -6263 6384 0
-6199 -6261 6382 0
-6199 -6259 6380 0
-6199 -6257 6378 0
-6199 -6255 6376 0
-6199 -6253 6374 0
-6199 -6251 6372 0
-6199 -6250 6370 0
-6197 6400 0
-6197 -6279 6398 0
-6197 -6277 6396 0
-6197 -6275 6394 0
-6197 -6273 6392 0
-6197 -6271 6390 0
-6197 -6269 6388 0
-6197 -6267 6386 0
-6197 -6265 6384 0
-6197 -6263 6382 0
-6197 -6261 6380 0
-6197 -6259 6378 0
-6197 -6257 6376 0
-6197 -6255 6374 0
-6197 -6253 6372 0
-6197 -6251 6370 0
-6197 -6250 6368 0
-6195 6398 0
-6195 -6279 6396 0
-6195 -6277 6394 0
-6195 -6275 6392 0
-6195 -6273 6390 0
-6195 -6271 6388 0
-6195 -6269 6386 0
-6195 -6267 6384 0
-6195 -6265 6382 0
-6195 -6263 6380 0
-6195 -6261 6378 0
-6195 -6259 6376 0
-6195 -6257 6374 0
-6195 -6255 6372 0
-6195 -6253 6370 0
-6195 -6251 6368 0
-6195 -6250 6366 0
-6193 6396 0
-6193 -6279 6394 0
-6193 -6277 6392 0
-6193 -6275 6390 0
-6193 -6273 6388 0
-6193 -6271 6386 0
-6193 -6269 6384 0
-6193 -6267 6382 0
-6193 -6265 6380 0
-6193 -6263 6378 0
-6193 -6261 6376 0
-6193 -6259 6374 0
-6193 -6257 6372 0
-6193 -6255 6370 0
-6193 -6253 6368 0
-6193 -6251 6366 0
-6193 -6250 6364 0
-6191 6394 0
-6191 -6279 6392 0
-6191 -6277 6390 0
-6191 -6275 6388 0
-6191 -6273 6386 0
-6191 -6271 6384 0
-6191 -6269 6382 0
-6191 -6267 6380 0
-6191 -6265 6378 0
-6191 -6263 6376 0
-6191 -6261 6374 0
-6191 -6259 6372 0
-6191 -6257 6370 0
-6191 -6255 6368 0
-6191 -6253 6366 0
-6191 -6251 6364 0
-6191 -6250 6362 0
-6189 6392 0
-6189 -6279 6390 0
-6189 -6277 6388 0
-6189 -6275 6386 0
-6189 -6273 6384 0
-6189 -6271 6382 0
-6189 -6269 6380 0
-6189 -6267 6378 0
-6189 -6265 6376 0
-6189 -6263 6374 0
-6189 -6261 6372 0
-6189 -6259 6370 0
-6189 -6257 6368 0
-6189 -6255 6366 0
-6189 -6253 6364 0
-6189 -6251 6362 0
-6189 -6250 6360 0
-6188 6390 0
-6188 -6279 6388 0
-6188 -6277 6386 0
-6188 -6275 6384 0
-6188 -6273 6382 0
-6188 -6271 6380 0
-6188 -6269 6378 0
-6188 -6267 6376 0
-6188 -6265 6374 0
-6188 -6263 6372 0
-6188 -6261 6370 0
-6188 -6259 6368 0
-6188 -6257 6366 0
-6188 -6255 6364 0
-6188 -6253 6362 0
-6188 -6251 6360 0
-6188 -6250 6359 0
c (( - aux581 + shift(x_00006_00006, -1) + shift(x_00004_00004, -1))<=0)
452 -6422 0
453 -6423 0
455 -6425 0
457 -6427 0
459 -6429 0
461 -6431 0
463 -6433 0
465 -6435 0
752 -6422 0
752 452 -6423 0
752 453 -6425 0
752 455 -6427 0
752 457 -6429 0
752 459 -6431 0
752 461 -6433 0
752 463 -6435 0
752 465 -6437 0
753 -6423 0
753 452 -6425 0
753 453 -6427 0
753 455 -6429 0
753 457 -6431 0
753 459 -6433 0
753 461 -6435 0
753 463 -6437 0
753 465 -6439 0
755 -6425 0
755 452 -6427 0
755 453 -6429 0
755 455 -6431 0
755 457 -6433 0
755 459 -6435 0
755 461 -6437 0
755 463 -6439 0
755 465 -6441 0
757 -6427 0
757 452 -6429 0
757 453 -6431 0
757 455 -6433 0
757 457 -6435 0
757 459 -6437 0
757 461 -6439 0
757 463 -6441 0
757 465 -6443 0
759 -6429 0
759 452 -6431 0
759 453 -6433 0
759 455 -6435 0
759 457 -6437 0
759 459 -6439 0
759 461 -6441 0
759 463 -6443 0
759 465 -6445 0
761 -6431 0
761 452 -6433 0
761 453 -6435 0
761 455 -6437 0
761 457 -6439 0
761 459 -6441 0
761 461 -6443 0
761 463 -6445 0
761 465 -6447 0
763 -6433 0
763 452 -6435 0
763 453 -6437 0
763 455 -6439 0
763 457 -6441 0
763 459 -6443 0
763 461 -6445 0
763 463 -6447 0
763 465 -6449 0
765 -6435 0
765 452 -6437 0
765 453 -6439 0
765 455 -6441 0
765 457 -6443 0
765 459 -6445 0
765 461 -6447 0
765 463 -6449 0
765 465 -6451 0
c (0<=( - aux581 + shift(x_00006_00006, -1) + shift(x_00004_00004, -1)))
-465 6451 0
-463 6449 0
-461 6447 0
-459 6445 0
-457 6443 0
-455 6441 0
-453 6439 0
-452 6437 0
-765 6451 0
-765 -465 6449 0
-765 -463 6447 0
-765 -461 6445 0
-765 -459 6443 0
-765 -457 6441 0
-765 -455 6439 0
-765 -453 6437 0
-765 -452 6435 0
-763 6449 0
-763 -465 6447 0
-763 -463 6445 0
-763 -461 6443 0
-763 -459 6441 0
-763 -457 6439 0
-763 -455 6437 0
-763 -453 6435 0
-763 -452 6433 0
-761 6447 0
-761 -465 6445 0
-761 -463 6443 0
-761 -461 6441 0
-761 -459 6439 0
-761 -457 6437 0
-761 -455 6435 0
-761 -453 6433 0
-761 -452 6431 0
-759 6445 0
-759 -465 6443 0
-759 -463 6441 0
-759 -461 6439 0
-759 -459 6437 0
-759 -457 6435 0
-759 -455 6433 0
-759 -453 6431 0
-759 -452 6429 0
-757 6443 0
-757 -465 6441 0
-757 -463 6439 0
-757 -461 6437 0
-757 -459 6435 0
-757 -457 6433 0
-757 -455 6431 0
-757 -453 6429 0
-757 -452 6427 0
-755 6441 0
-755 -465 6439 0
-755 -463 6437 0
-755 -461 6435 0
-755 -459 6433 0
-755 -457 6431 0
-755 -455 6429 0
-755 -453 6427 0
-755 -452 6425 0
-753 6439 0
-753 -465 6437 0
-753 -463 6435 0
-753 -461 6433 0
-753 -459 6431 0
-753 -457 6429 0
-753 -455 6427 0
-753 -453 6425 0
-753 -452 6423 0
-752 6437 0
-752 -465 6435 0
-752 -463 6433 0
-752 -461 6431 0
-752 -459 6429 0
-752 -457 6427 0
-752 -455 6425 0
-752 -453 6423 0
-752 -452 6422 0
c (( - aux582 + shift(x_00006_00005, -1) + shift(x_00004_00005, -1))<=0)
467 -6453 0
468 -6454 0
470 -6456 0
472 -6458 0
474 -6460 0
476 -6462 0
478 -6464 0
480 -6466 0
737 -6453 0
737 467 -6454 0
737 468 -6456 0
737 470 -6458 0
737 472 -6460 0
737 474 -6462 0
737 476 -6464 0
737 478 -6466 0
737 480 -6468 0
738 -6454 0
738 467 -6456 0
738 468 -6458 0
738 470 -6460 0
738 472 -6462 0
738 474 -6464 0
738 476 -6466 0
738 478 -6468 0
738 480 -6470 0
740 -6456 0
740 467 -6458 0
740 468 -6460 0
740 470 -6462 0
740 472 -6464 0
740 474 -6466 0
740 476 -6468 0
740 478 -6470 0
740 480 -6472 0
742 -6458 0
742 467 -6460 0
742 468 -6462 0
742 470 -6464 0
742 472 -6466 0
742 474 -6468 0
742 476 -6470 0
742 478 -6472 0
742 480 -6474 0
744 -6460 0
744 467 -6462 0
744 468 -6464 0
744 470 -6466 0
744 472 -6468 0
744 474 -6470 0
744 476 -6472 0
744 478 -6474 0
744 480 -6476 0
746 -6462 0
746 467 -6464 0
746 468 -6466 0
746 470 -6468 0
746 472 -6470 0
746 474 -6472 0
746 476 -6474 0
746 478 -6476 0
746 480 -6478 0
748 -6464 0
748 467 -6466 0
748 468 -6468 0
748 470 -6470 0
748 472 -6472 0
748 474 -6474 0
748 476 -6476 0
748 478 -6478 0
748 480 -6480 0
750 -6466 0
750 467 -6468 0
750 468 -6470 0
750 470 -6472 0
750 472 -6474 0
750 474 -6476 0
750 476 -6478 0
750 478 -6480 0
750 480 -6482 0
c (0<=( - aux582 + shift(x_00006_00005, -1) + shift(x_00004_00005, -1)))
-480 6482 0
-478 6480 0
-476 6478 0
-474 6476 0
-472 6474 0
-470 6472 0
-468 6470 0
-467 6468 0
-750 6482 0
-750 -480 6480 0
-750 -478 6478 0
-750 -476 6476 0
-750 -474 6474 0
-750 -472 6472 0
-750 -470 6470 0
-750 -468 6468 0
-750 -467 6466 0
-748 6480 0
-748 -480 6478 0
-748 -478 6476 0
-748 -476 6474 0
-748 -474 6472 0
-748 -472 6470 0
-748 -470 6468 0
-748 -468 6466 0
-748 -467 6464 0
-746 6478 0
-746 -480 6476 0
-746 -478 6474 0
-746 -476 6472 0
-746 -474 6470 0
-746 -472 6468 0
-746 -470 6466 0
-746 -468 6464 0
-746 -467 6462 0
-744 6476 0
-744 -480 6474 0
-744 -478 6472 0
-744 -476 6470 0
-744 -474 6468 0
-744 -472 6466 0
-744 -470 6464 0
-744 -468 6462 0
-744 -467 6460 0
-742 6474 0
-742 -480 6472 0
-742 -478 6470 0
-742 -476 6468 0
-742 -474 6466 0
-742 -472 6464 0
-742 -470 6462 0
-742 -468 6460 0
-742 -467 6458 0
-740 6472 0
-740 -480 6470 0
-740 -478 6468 0
-740 -476 6466 0
-740 -474 6464 0
-740 -472 6462 0
-740 -470 6460 0
-740 -468 6458 0
-740 -467 6456 0
-738 6470 0
-738 -480 6468 0
-738 -478 6466 0
-738 -476 6464 0
-738 -474 6462 0
-738 -472 6460 0
-738 -470 6458 0
-738 -468 6456 0
-738 -467 6454 0
-737 6468 0
-737 -480 6466 0
-737 -478 6464 0
-737 -476 6462 0
-737 -474 6460 0
-737 -472 6458 0
-737 -470 6456 0
-737 -468 6454 0
-737 -467 6453 0
c (( - aux583 + shift(x_00005_00004, -1) + shift(x_00006_00004, -1))<=0)
722 -6484 0
723 -6485 0
725 -6487 0
727 -6489 0
729 -6491 0
731 -6493 0
733 -6495 0
735 -6497 0
587 -6484 0
587 722 -6485 0
587 723 -6487 0
587 725 -6489 0
587 727 -6491 0
587 729 -6493 0
587 731 -6495 0
587 733 -6497 0
587 735 -6499 0
588 -6485 0
588 722 -6487 0
588 723 -6489 0
588 725 -6491 0
588 727 -6493 0
588 729 -6495 0
588 731 -6497 0
588 733 -6499 0
588 735 -6501 0
590 -6487 0
590 722 -6489 0
590 723 -6491 0
590 725 -6493 0
590 727 -6495 0
590 729 -6497 0
590 731 -6499 0
590 733 -6501 0
590 735 -6503 0
592 -6489 0
592 722 -6491 0
592 723 -6493 0
592 725 -6495 0
592 727 -6497 0
592 729 -6499 0
592 731 -6501 0
592 733 -6503 0
592 735 -6505 0
594 -6491 0
594 722 -6493 0
594 723 -6495 0
594 725 -6497 0
594 727 -6499 0
594 729 -6501 0
594 731 -6503 0
594 733 -6505 0
594 735 -6507 0
596 -6493 0
596 722 -6495 0
596 723 -6497 0
596 725 -6499 0
596 727 -6501 0
596 729 -6503 0
596 731 -6505 0
596 733 -6507 0
596 735 -6509 0
598 -6495 0
598 722 -6497 0
598 723 -6499 0
598 725 -6501 0
598 727 -6503 0
598 729 -6505 0
598 731 -6507 0
598 733 -6509 0
598 735 -6511 0
600 -6497 0
600 722 -6499 0
600 723 -6501 0
600 725 -6503 0
600 727 -6505 0
600 729 -6507 0
600 731 -6509 0
600 733 -6511 0
600 735 -6513 0
c (0<=( - aux583 + shift(x_00005_00004, -1) + shift(x_00006_00004, -1)))
-735 6513 0
-733 6511 0
-731 6509 0
-729 6507 0
-727 6505 0
-725 6503 0
-723 6501 0
-722 6499 0
-600 6513 0
-600 -735 6511 0
-600 -733 6509 0
-600 -731 6507 0
-600 -729 6505 0
-600 -727 6503 0
-600 -725 6501 0
-600 -723 6499 0
-600 -722 6497 0
-598 6511 0
-598 -735 6509 0
-598 -733 6507 0
-598 -731 6505 0
-598 -729 6503 0
-598 -727 6501 0
-598 -725 6499 0
-598 -723 6497 0
-598 -722 6495 0
-596 6509 0
-596 -735 6507 0
-596 -733 6505 0
-596 -731 6503 0
-596 -729 6501 0
-596 -727 6499 0
-596 -725 6497 0
-596 -723 6495 0
-596 -722 6493 0
-594 6507 0
-594 -735 6505 0
-594 -733 6503 0
-594 -731 6501 0
-594 -729 6499 0
-594 -727 6497 0
-594 -725 6495 0
-594 -723 6493 0
-594 -722 6491 0
-592 6505 0
-592 -735 6503 0
-592 -733 6501 0
-592 -731 6499 0
-592 -729 6497 0
-592 -727 6495 0
-592 -725 6493 0
-592 -723 6491 0
-592 -722 6489 0
-590 6503 0
-590 -735 6501 0
-590 -733 6499 0
-590 -731 6497 0
-590 -729 6495 0
-590 -727 6493 0
-590 -725 6491 0
-590 -723 6489 0
-590 -722 6487 0
-588 6501 0
-588 -735 6499 0
-588 -733 6497 0
-588 -731 6495 0
-588 -729 6493 0
-588 -727 6491 0
-588 -725 6489 0
-588 -723 6487 0
-588 -722 6485 0
-587 6499 0
-587 -735 6497 0
-587 -733 6495 0
-587 -731 6493 0
-587 -729 6491 0
-587 -727 6489 0
-587 -725 6487 0
-587 -723 6485 0
-587 -722 6484 0
c (( - aux584 + shift(x_00005_00005, -1) + shift(x_00005_00006, -1))<=0)
617 -6515 0
618 -6516 0
620 -6518 0
622 -6520 0
624 -6522 0
626 -6524 0
628 -6526 0
630 -6528 0
602 -6515 0
602 617 -6516 0
602 618 -6518 0
602 620 -6520 0
602 622 -6522 0
602 624 -6524 0
602 626 -6526 0
602 628 -6528 0
602 630 -6530 0
603 -6516 0
603 617 -6518 0
603 618 -6520 0
603 620 -6522 0
603 622 -6524 0
603 624 -6526 0
603 626 -6528 0
603 628 -6530 0
603 630 -6532 0
605 -6518 0
605 617 -6520 0
605 618 -6522 0
605 620 -6524 0
605 622 -6526 0
605 624 -6528 0
605 626 -6530 0
605 628 -6532 0
605 630 -6534 0
607 -6520 0
607 617 -6522 0
607 618 -6524 0
607 620 -6526 0
607 622 -6528 0
607 624 -6530 0
607 626 -6532 0
607 628 -6534 0
607 630 -6536 0
609 -6522 0
609 617 -6524 0
609 618 -6526 0
609 620 -6528 0
609 622 -6530 0
609 624 -6532 0
609 626 -6534 0
609 628 -6536 0
609 630 -6538 0
611 -6524 0
611 617 -6526 0
611 618 -6528 0
611 620 -6530 0
611 622 -6532 0
611 624 -6534 0
611 626 -6536 0
611 628 -6538 0
611 630 -6540 0
613 -6526 0
613 617 -6528 0
613 618 -6530 0
613 620 -6532 0
613 622 -6534 0
613 624 -6536 0
613 626 -6538 0
613 628 -6540 0
613 630 -6542 0
615 -6528 0
615 617 -6530 0
615 618 -6532 0
615 620 -6534 0
615 622 -6536 0
615 624 -6538 0
615 626 -6540 0
615 628 -6542 0
615 630 -6544 0
c (0<=( - aux584 + shift(x_00005_00005, -1) + shift(x_00005_00006, -1)))
-630 6544 0
-628 6542 0
-626 6540 0
-624 6538 0
-622 6536 0
-620 6534 0
-618 6532 0
-617 6530 0
-615 6544 0
-615 -630 6542 0
-615 -628 6540 0
-615 -626 6538 0
-615 -624 6536 0
-615 -622 6534 0
-615 -620 6532 0
-615 -618 6530 0
-615 -617 6528 0
-613 6542 0
-613 -630 6540 0
-613 -628 6538 0
-613 -626 6536 0
-613 -624 6534 0
-613 -622 6532 0
-613 -620 6530 0
-613 -618 6528 0
-613 -617 6526 0
-611 6540 0
-611 -630 6538 0
-611 -628 6536 0
-611 -626 6534 0
-611 -624 6532 0
-611 -622 6530 0
-611 -620 6528 0
-611 -618 6526 0
-611 -617 6524 0
-609 6538 0
-609 -630 6536 0
-609 -628 6534 0
-609 -626 6532 0
-609 -624 6530 0
-609 -622 6528 0
-609 -620 6526 0
-609 -618 6524 0
-609 -617 6522 0
-607 6536 0
-607 -630 6534 0
-607 -628 6532 0
-607 -626 6530 0
-607 -624 6528 0
-607 -622 6526 0
-607 -620 6524 0
-607 -618 6522 0
-607 -617 6520 0
-605 6534 0
-605 -630 6532 0
-605 -628 6530 0
-605 -626 6528 0
-605 -624 6526 0
-605 -622 6524 0
-605 -620 6522 0
-605 -618 6520 0
-605 -617 6518 0
-603 6532 0
-603 -630 6530 0
-603 -628 6528 0
-603 -626 6526 0
-603 -624 6524 0
-603 -622 6522 0
-603 -620 6520 0
-603 -618 6518 0
-603 -617 6516 0
-602 6530 0
-602 -630 6528 0
-602 -628 6526 0
-602 -626 6524 0
-602 -624 6522 0
-602 -622 6520 0
-602 -620 6518 0
-602 -618 6516 0
-602 -617 6515 0
c ((aux584 - aux585 + shift(x_00004_00006, -1))<=0)
6515 -6546 0
6516 -6547 0
6518 -6549 0
6520 -6551 0
6522 -6553 0
6524 -6555 0
6526 -6557 0
6528 -6559 0
6530 -6561 0
6532 -6563 0
6534 -6565 0
6536 -6567 0
6538 -6569 0
6540 -6571 0
6542 -6573 0
6544 -6575 0
482 -6546 0
482 6515 -6547 0
482 6516 -6549 0
482 6518 -6551 0
482 6520 -6553 0
482 6522 -6555 0
482 6524 -6557 0
482 6526 -6559 0
482 6528 -6561 0
482 6530 -6563 0
482 6532 -6565 0
482 6534 -6567 0
482 6536 -6569 0
482 6538 -6571 0
482 6540 -6573 0
482 6542 -6575 0
482 6544 -6577 0
483 -6547 0
483 6515 -6549 0
483 6516 -6551 0
483 6518 -6553 0
483 6520 -6555 0
483 6522 -6557 0
483 6524 -6559 0
483 6526 -6561 0
483 6528 -6563 0
483 6530 -6565 0
483 6532 -6567 0
483 6534 -6569 0
483 6536 -6571 0
483 6538 -6573 0
483 6540 -6575 0
483 6542 -6577 0
483 6544 -6579 0
485 -6549 0
485 6515 -6551 0
485 6516 -6553 0
485 6518 -6555 0
485 6520 -6557 0
485 6522 -6559 0
485 6524 -6561 0
485 6526 -6563 0
485 6528 -6565 0
485 6530 -6567 0
485 6532 -6569 0
485 6534 -6571 0
485 6536 -6573 0
485 6538 -6575 0
485 6540 -6577 0
485 6542 -6579 0
485 6544 -6581 0
487 -6551 0
487 6515 -6553 0
487 6516 -6555 0
487 6518 -6557 0
487 6520 -6559 0
487 6522 -6561 0
487 6524 -6563 0
487 6526 -6565 0
487 6528 -6567 0
487 6530 -6569 0
487 6532 -6571 0
487 6534 -6573 0
487 6536 -6575 0
487 6538 -6577 0
487 6540 -6579 0
487 6542 -6581 0
487 6544 -6583 0
489 -6553 0
489 6515 -6555 0
489 6516 -6557 0
489 6518 -6559 0
489 6520 -6561 0
489 6522 -6563 0
489 6524 -6565 0
489 6526 -6567 0
489 6528 -6569 0
489 6530 -6571 0
489 6532 -6573 0
489 6534 -6575 0
489 6536 -6577 0
489 6538 -6579 0
489 6540 -6581 0
489 6542 -6583 0
489 6544 -6585 0
491 -6555 0
491 6515 -6557 0
491 6516 -6559 0
491 6518 -6561 0
491 6520 -6563 0
491 6522 -6565 0
491 6524 -6567 0
491 6526 -6569 0
491 6528 -6571 0
491 6530 -6573 0
491 6532 -6575 0
491 6534 -6577 0
491 6536 -6579 0
491 6538 -6581 0
491 6540 -6583 0
491 6542 -6585 0
491 6544 -6587 0
493 -6557 0
493 6515 -6559 0
493 6516 -6561 0
493 6518 -6563 0
493 6520 -6565 0
493 6522 -6567 0
493 6524 -6569 0
493 6526 -6571 0
493 6528 -6573 0
493 6530 -6575 0
493 6532 -6577 0
493 6534 -6579 0
493 6536 -6581 0
493 6538 -6583 0
493 6540 -6585 0
493 6542 -6587 0
493 6544 -6589 0
495 -6559 0
495 6515 -6561 0
495 6516 -6563 0
495 6518 -6565 0
495 6520 -6567 0
495 6522 -6569 0
495 6524 -6571 0
495 6526 -6573 0
495 6528 -6575 0
495 6530 -6577 0
495 6532 -6579 0
495 6534 -6581 0
495 6536 -6583 0
495 6538 -6585 0
495 6540 -6587 0
495 6542 -6589 0
495 6544 -6591 0
c (0<=(aux584 - aux585 + shift(x_00004_00006, -1)))
-6544 6591 0
-6542 6589 0
-6540 6587 0
-6538 6585 0
-6536 6583 0
-6534 6581 0
-6532 6579 0
-6530 6577 0
-6528 6575 0
-6526 6573 0
-6524 6571 0
-6522 6569 0
-6520 6567 0
-6518 6565 0
-6516 6563 0
-6515 6561 0
-495 6591 0
-495 -6544 6589 0
-495 -6542 6587 0
-495 -6540 6585 0
-495 -6538 6583 0
-495 -6536 6581 0
-495 -6534 6579 0
-495 -6532 6577 0
-495 -6530 6575 0
-495 -6528 6573 0
-495 -6526 6571 0
-495 -6524 6569 0
-495 -6522 6567 0
-495 -6520 6565 0
-495 -6518 6563 0
-495 -6516 6561 0
-495 -6515 6559 0
-493 6589 0
-493 -6544 6587 0
-493 -6542 6585 0
-493 -6540 6583 0
-493 -6538 6581 0
-493 -6536 6579 0
-493 -6534 6577 0
-493 -6532 6575 0
-493 -6530 6573 0
-493 -6528 6571 0
-493 -6526 6569 0
-493 -6524 6567 0
-493 -6522 6565 0
-493 -6520 6563 0
-493 -6518 6561 0
-493 -6516 6559 0
-493 -6515 6557 0
-491 6587 0
-491 -6544 6585 0
-491 -6542 6583 0
-491 -6540 6581 0
-491 -6538 6579 0
-491 -6536 6577 0
-491 -6534 6575 0
-491 -6532 6573 0
-491 -6530 6571 0
-491 -6528 6569 0
-491 -6526 6567 0
-491 -6524 6565 0
-491 -6522 6563 0
-491 -6520 6561 0
-491 -6518 6559 0
-491 -6516 6557 0
-491 -6515 6555 0
-489 6585 0
-489 -6544 6583 0
-489 -6542 6581 0
-489 -6540 6579 0
-489 -6538 6577 0
-489 -6536 6575 0
-489 -6534 6573 0
-489 -6532 6571 0
-489 -6530 6569 0
-489 -6528 6567 0
-489 -6526 6565 0
-489 -6524 6563 0
-489 -6522 6561 0
-489 -6520 6559 0
-489 -6518 6557 0
-489 -6516 6555 0
-489 -6515 6553 0
-487 6583 0
-487 -6544 6581 0
-487 -6542 6579 0
-487 -6540 6577 0
-487 -6538 6575 0
-487 -6536 6573 0
-487 -6534 6571 0
-487 -6532 6569 0
-487 -6530 6567 0
-487 -6528 6565 0
-487 -6526 6563 0
-487 -6524 6561 0
-487 -6522 6559 0
-487 -6520 6557 0
-487 -6518 6555 0
-487 -6516 6553 0
-487 -6515 6551 0
-485 6581 0
-485 -6544 6579 0
-485 -6542 6577 0
-485 -6540 6575 0
-485 -6538 6573 0
-485 -6536 6571 0
-485 -6534 6569 0
-485 -6532 6567 0
-485 -6530 6565 0
-485 -6528 6563 0
-485 -6526 6561 0
-485 -6524 6559 0
-485 -6522 6557 0
-485 -6520 6555 0
-485 -6518 6553 0
-485 -6516 6551 0
-485 -6515 6549 0
-483 6579 0
-483 -6544 6577 0
-483 -6542 6575 0
-483 -6540 6573 0
-483 -6538 6571 0
-483 -6536 6569 0
-483 -6534 6567 0
-483 -6532 6565 0
-483 -6530 6563 0
-483 -6528 6561 0
-483 -6526 6559 0
-483 -6524 6557 0
-483 -6522 6555 0
-483 -6520 6553 0
-483 -6518 6551 0
-483 -6516 6549 0
-483 -6515 6547 0
-482 6577 0
-482 -6544 6575 0
-482 -6542 6573 0
-482 -6540 6571 0
-482 -6538 6569 0
-482 -6536 6567 0
-482 -6534 6565 0
-482 -6532 6563 0
-482 -6530 6561 0
-482 -6528 6559 0
-482 -6526 6557 0
-482 -6524 6555 0
-482 -6522 6553 0
-482 -6520 6551 0
-482 -6518 6549 0
-482 -6516 6547 0
-482 -6515 6546 0
c ((aux581 + aux583 - aux586)<=0)
6484 -6593 0
6485 -6594 0
6487 -6596 0
6489 -6598 0
6491 -6600 0
6493 -6602 0
6495 -6604 0
6497 -6606 0
6499 -6608 0
6501 -6610 0
6503 -6612 0
6505 -6614 0
6507 -6616 0
6509 -6618 0
6511 -6620 0
6513 -6622 0
6422 -6593 0
6422 6484 -6594 0
6422 6485 -6596 0
6422 6487 -6598 0
6422 6489 -6600 0
6422 6491 -6602 0
6422 6493 -6604 0
6422 6495 -6606 0
6422 6497 -6608 0
6422 6499 -6610 0
6422 6501 -6612 0
6422 6503 -6614 0
6422 6505 -6616 0
6422 6507 -6618 0
6422 6509 -6620 0
6422 6511 -6622 0
6422 6513 -6624 0
6423 -6594 0
6423 6484 -6596 0
6423 6485 -6598 0
6423 6487 -6600 0
6423 6489 -6602 0
6423 6491 -6604 0
6423 6493 -6606 0
6423 6495 -6608 0
6423 6497 -6610 0
6423 6499 -6612 0
6423 6501 -6614 0
6423 6503 -6616 0
6423 6505 -6618 0
6423 6507 -6620 0
6423 6509 -6622 0
6423 6511 -6624 0
6423 6513 -6626 0
6425 -6596 0
6425 6484 -6598 0
6425 6485 -6600 0
6425 6487 -6602 0
6425 6489 -6604 0
6425 6491 -6606 0
6425 6493 -6608 0
6425 6495 -6610 0
6425 6497 -6612 0
6425 6499 -6614 0
6425 6501 -6616 0
6425 6503 -6618 0
6425 6505 -6620 0
6425 6507 -6622 0
6425 6509 -6624 0
6425 6511 -6626 0
6425 6513 -6628 0
6427 -6598 0
6427 6484 -6600 0
6427 6485 -6602 0
6427 6487 -6604 0
6427 6489 -6606 0
6427 6491 -6608 0
6427 6493 -6610 0
6427 6495 -6612 0
6427 6497 -6614 0
6427 6499 -6616 0
6427 6501 -6618 0
6427 6503 -6620 0
6427 6505 -6622 0
6427 6507 -6624 0
6427 6509 -6626 0
6427 6511 -6628 0
6427 6513 -6630 0
6429 -6600 0
6429 6484 -6602 0
6429 6485 -6604 0
6429 6487 -6606 0
6429 6489 -6608 0
6429 6491 -6610 0
6429 6493 -6612 0
6429 6495 -6614 0
6429 6497 -6616 0
6429 6499 -6618 0
6429 6501 -6620 0
6429 6503 -6622 0
6429 6505 -6624 0
6429 6507 -6626 0
6429 6509 -6628 0
6429 6511 -6630 0
6429 6513 -6632 0
6431 -6602 0
6431 6484 -6604 0
6431 6485 -6606 0
6431 6487 -6608 0
6431 6489 -6610 0
6431 6491 -6612 0
6431 6493 -6614 0
6431 6495 -6616 0
6431 6497 -6618 0
6431 6499 -6620 0
6431 6501 -6622 0
6431 6503 -6624 0
6431 6505 -6626 0
6431 6507 -6628 0
6431 6509 -6630 0
6431 6511 -6632 0
6431 6513 -6634 0
6433 -6604 0
6433 6484 -6606 0
6433 6485 -6608 0
6433 6487 -6610 0
6433 6489 -6612 0
6433 6491 -6614 0
6433 6493 -6616 0
6433 6495 -6618 0
6433 6497 -6620 0
6433 6499 -6622 0
6433 6501 -6624 0
6433 6503 -6626 0
6433 6505 -6628 0
6433 6507 -6630 0
6433 6509 -6632 0
6433 6511 -6634 0
6433 6513 -6636 0
6435 -6606 0
6435 6484 -6608 0
6435 6485 -6610 0
6435 6487 -6612 0
6435 6489 -6614 0
6435 6491 -6616 0
6435 6493 -6618 0
6435 6495 -6620 0
6435 6497 -6622 0
6435 6499 -6624 0
6435 6501 -6626 0
6435 6503 -6628 0
6435 6505 -6630 0
6435 6507 -6632 0
6435 6509 -6634 0
6435 6511 -6636 0
6435 6513 -6638 0
6437 -6608 0
6437 6484 -6610 0
6437 6485 -6612 0
6437 6487 -6614 0
6437 6489 -6616 0
6437 6491 -6618 0
6437 6493 -6620 0
6437 6495 -6622 0
6437 6497 -6624 0
6437 6499 -6626 0
6437 6501 -6628 0
6437 6503 -6630 0
6437 6505 -6632 0
6437 6507 -6634 0
6437 6509 -6636 0
6437 6511 -6638 0
6437 6513 -6640 0
6439 -6610 0
6439 6484 -6612 0
6439 6485 -6614 0
6439 6487 -6616 0
6439 6489 -6618 0
6439 6491 -6620 0
6439 6493 -6622 0
6439 6495 -6624 0
6439 6497 -6626 0
6439 6499 -6628 0
6439 6501 -6630 0
6439 6503 -6632 0
6439 6505 -6634 0
6439 6507 -6636 0
6439 6509 -6638 0
6439 6511 -6640 0
6439 6513 -6642 0
6441 -6612 0
6441 6484 -6614 0
6441 6485 -6616 0
6441 6487 -6618 0
6441 6489 -6620 0
6441 6491 -6622 0
6441 6493 -6624 0
6441 6495 -6626 0
6441 6497 -6628 0
6441 6499 -6630 0
6441 6501 -6632 0
6441 6503 -6634 0
6441 6505 -6636 0
6441 6507 -6638 0
6441 6509 -6640 0
6441 6511 -6642 0
6441 6513 -6644 0
6443 -6614 0
6443 6484 -6616 0
6443 6485 -6618 0
6443 6487 -6620 0
6443 6489 -6622 0
6443 6491 -6624 0
6443 6493 -6626 0
6443 6495 -6628 0
6443 6497 -6630 0
6443 6499 -6632 0
6443 6501 -6634 0
6443 6503 -6636 0
6443 6505 -6638 0
6443 6507 -6640 0
6443 6509 -6642 0
6443 6511 -6644 0
6443 6513 -6646 0
6445 -6616 0
6445 6484 -6618 0
6445 6485 -6620 0
6445 6487 -6622 0
6445 6489 -6624 0
6445 6491 -6626 0
6445 6493 -6628 0
6445 6495 -6630 0
6445 6497 -6632 0
6445 6499 -6634 0
6445 6501 -6636 0
6445 6503 -6638 0
6445 6505 -6640 0
6445 6507 -6642 0
6445 6509 -6644 0
6445 6511 -6646 0
6445 6513 -6648 0
6447 -6618 0
6447 6484 -6620 0
6447 6485 -6622 0
6447 6487 -6624 0
6447 6489 -6626 0
6447 6491 -6628 0
6447 6493 -6630 0
6447 6495 -6632 0
6447 6497 -6634 0
6447 6499 -6636 0
6447 6501 -6638 0
6447 6503 -6640 0
6447 6505 -6642 0
6447 6507 -6644 0
6447 6509 -6646 0
6447 6511 -6648 0
6447 6513 -6650 0
6449 -6620 0
6449 6484 -6622 0
6449 6485 -6624 0
6449 6487 -6626 0
6449 6489 -6628 0
6449 6491 -6630 0
6449 6493 -6632 0
6449 6495 -6634 0
6449 6497 -6636 0
6449 6499 -6638 0
6449 6501 -6640 0
6449 6503 -6642 0
6449 6505 -6644 0
6449 6507 -6646 0
6449 6509 -6648 0
6449 6511 -6650 0
6449 6513 -6652 0
6451 -6622 0
6451 6484 -6624 0
6451 6485 -6626 0
6451 6487 -6628 0
6451 6489 -6630 0
6451 6491 -6632 0
6451 6493 -6634 0
6451 6495 -6636 0
6451 6497 -6638 0
6451 6499 -6640 0
6451 6501 -6642 0
6451 6503 -6644 0
6451 6505 -6646 0
6451 6507 -6648 0
6451 6509 -6650 0
6451 6511 -6652 0
6451 6513 -6654 0
c (0<=(aux581 + aux583 - aux586))
-6513 6654 0
-6511 6652 0
-6509 6650 0
-6507 6648 0
-6505 6646 0
-6503 6644 0
-6501 6642 0
-6499 6640 0
-6497 6638 0
-6495 6636 0
-6493 6634 0
-6491 6632 0
-6489 6630 0
-6487 6628 0
-6485 6626 0
-6484 6624 0
-6451 6654 0
-6451 -6513 6652 0
-6451 -6511 6650 0
-6451 -6509 6648 0
-6451 -6507 6646 0
-6451 -6505 6644 0
-6451 -6503 6642 0
-6451 -6501 6640 0
-6451 -6499 6638 0
-6451 -6497 6636 0
-6451 -6495 6634 0
-6451 -6493 6632 0
-6451 -6491 6630 0
-6451 -6489 6628 0
-6451 -6487 6626 0
-6451 -6485 6624 0
-6451 -6484 6622 0
-6449 6652 0
-6449 -6513 6650 0
-6449 -6511 6648 0
-6449 -6509 6646 0
-6449 -6507 6644 0
-6449 -6505 6642 0
-6449 -6503 6640 0
-6449 -6501 6638 0
-6449 -6499 6636 0
-6449 -6497 6634 0
-6449 -6495 6632 0
-6449 -6493 6630 0
-6449 -6491 6628 0
-6449 -6489 6626 0
-6449 -6487 6624 0
-6449 -6485 6622 0
-6449 -6484 6620 0
-6447 6650 0
-6447 -6513 6648 0
-6447 -6511 6646 0
-6447 -6509 6644 0
-6447 -6507 6642 0
-6447 -6505 6640 0
-6447 -6503 6638 0
-6447 -6501 6636 0
-6447 -6499 6634 0
-6447 -6497 6632 0
-6447 -6495 6630 0
-6447 -6493 6628 0
-6447 -6491 6626 0
-6447 -6489 6624 0
-6447 -6487 6622 0
-6447 -6485 6620 0
-6447 -6484 6618 0
-6445 6648 0
-6445 -6513 6646 0
-6445 -6511 6644 0
-6445 -6509 6642 0
-6445 -6507 6640 0
-6445 -6505 6638 0
-6445 -6503 6636 0
-6445 -6501 6634 0
-6445 -6499 6632 0
-6445 -6497 6630 0
-6445 -6495 6628 0
-6445 -6493 6626 0
-6445 -6491 6624 0
-6445 -6489 6622 0
-6445 -6487 6620 0
-6445 -6485 6618 0
-6445 -6484 6616 0
-6443 6646 0
-6443 -6513 6644 0
-6443 -6511 6642 0
-6443 -6509 6640 0
-6443 -6507 6638 0
-6443 -6505 6636 0
-6443 -6503 6634 0
-6443 -6501 6632 0
-6443 -6499 6630 0
-6443 -6497 6628 0
-6443 -6495 6626 0
-6443 -6493 6624 0
-6443 -6491 6622 0
-6443 -6489 6620 0
-6443 -6487 6618 0
-6443 -6485 6616 0
-6443 -6484 6614 0
-6441 6644 0
-6441 -6513 6642 0
-6441 -6511 6640 0
-6441 -6509 6638 0
-6441 -6507 6636 0
-6441 -6505 6634 0
-6441 -6503 6632 0
-6441 -6501 6630 0
-6441 -6499 6628 0
-6441 -6497 6626 0
-6441 -6495 6624 0
-6441 -6493 6622 0
-6441 -6491 6620 0
-6441 -6489 6618 0
-6441 -6487 6616 0
-6441 -6485 6614 0
-6441 -6484 6612 0
-6439 6642 0
-6439 -6513 6640 0
-6439 -6511 6638 0
-6439 -6509 6636 0
-6439 -6507 6634 0
-6439 -6505 6632 0
-6439 -6503 6630 0
-6439 -6501 6628 0
-6439 -6499 6626 0
-6439 -6497 6624 0
-6439 -6495 6622 0
-6439 -6493 6620 0
-6439 -6491 6618 0
-6439 -6489 6616 0
-6439 -6487 6614 0
-6439 -6485 6612 0
-6439 -6484 6610 0
-6437 6640 0
-6437 -6513 6638 0
-6437 -6511 6636 0
-6437 -6509 6634 0
-6437 -6507 6632 0
-6437 -6505 6630 0
-6437 -6503 6628 0
-6437 -6501 6626 0
-6437 -6499 6624 0
-6437 -6497 6622 0
-6437 -6495 6620 0
-6437 -6493 6618 0
-6437 -6491 6616 0
-6437 -6489 6614 0
-6437 -6487 6612 0
-6437 -6485 6610 0
-6437 -6484 6608 0
-6435 6638 0
-6435 -6513 6636 0
-6435 -6511 6634 0
-6435 -6509 6632 0
-6435 -6507 6630 0
-6435 -6505 6628 0
-6435 -6503 6626 0
-6435 -6501 6624 0
-6435 -6499 6622 0
-6435 -6497 6620 0
-6435 -6495 6618 0
-6435 -6493 6616 0
-6435 -6491 6614 0
-6435 -6489 6612 0
-6435 -6487 6610 0
-6435 -6485 6608 0
-6435 -6484 6606 0
-6433 6636 0
-6433 -6513 6634 0
-6433 -6511 6632 0
-6433 -6509 6630 0
-6433 -6507 6628 0
-6433 -6505 6626 0
-6433 -6503 6624 0
-6433 -6501 6622 0
-6433 -6499 6620 0
-6433 -6497 6618 0
-6433 -6495 6616 0
-6433 -6493 6614 0
-6433 -6491 6612 0
-6433 -6489 6610 0
-6433 -6487 6608 0
-6433 -6485 6606 0
-6433 -6484 6604 0
-6431 6634 0
-6431 -6513 6632 0
-6431 -6511 6630 0
-6431 -6509 6628 0
-6431 -6507 6626 0
-6431 -6505 6624 0
-6431 -6503 6622 0
-6431 -6501 6620 0
-6431 -6499 6618 0
-6431 -6497 6616 0
-6431 -6495 6614 0
-6431 -6493 6612 0
-6431 -6491 6610 0
-6431 -6489 6608 0
-6431 -6487 6606 0
-6431 -6485 6604 0
-6431 -6484 6602 0
-6429 6632 0
-6429 -6513 6630 0
-6429 -6511 6628 0
-6429 -6509 6626 0
-6429 -6507 6624 0
-6429 -6505 6622 0
-6429 -6503 6620 0
-6429 -6501 6618 0
-6429 -6499 6616 0
-6429 -6497 6614 0
-6429 -6495 6612 0
-6429 -6493 6610 0
-6429 -6491 6608 0
-6429 -6489 6606 0
-6429 -6487 6604 0
-6429 -6485 6602 0
-6429 -6484 6600 0
-6427 6630 0
-6427 -6513 6628 0
-6427 -6511 6626 0
-6427 -6509 6624 0
-6427 -6507 6622 0
-6427 -6505 6620 0
-6427 -6503 6618 0
-6427 -6501 6616 0
-6427 -6499 6614 0
-6427 -6497 6612 0
-6427 -6495 6610 0
-6427 -6493 6608 0
-6427 -6491 6606 0
-6427 -6489 6604 0
-6427 -6487 6602 0
-6427 -6485 6600 0
-6427 -6484 6598 0
-6425 6628 0
-6425 -6513 6626 0
-6425 -6511 6624 0
-6425 -6509 6622 0
-6425 -6507 6620 0
-6425 -6505 6618 0
-6425 -6503 6616 0
-6425 -6501 6614 0
-6425 -6499 6612 0
-6425 -6497 6610 0
-6425 -6495 6608 0
-6425 -6493 6606 0
-6425 -6491 6604 0
-6425 -6489 6602 0
-6425 -6487 6600 0
-6425 -6485 6598 0
-6425 -6484 6596 0
-6423 6626 0
-6423 -6513 6624 0
-6423 -6511 6622 0
-6423 -6509 6620 0
-6423 -6507 6618 0
-6423 -6505 6616 0
-6423 -6503 6614 0
-6423 -6501 6612 0
-6423 -6499 6610 0
-6423 -6497 6608 0
-6423 -6495 6606 0
-6423 -6493 6604 0
-6423 -6491 6602 0
-6423 -6489 6600 0
-6423 -6487 6598 0
-6423 -6485 6596 0
-6423 -6484 6594 0
-6422 6624 0
-6422 -6513 6622 0
-6422 -6511 6620 0
-6422 -6509 6618 0
-6422 -6507 6616 0
-6422 -6505 6614 0
-6422 -6503 6612 0
-6422 -6501 6610 0
-6422 -6499 6608 0
-6422 -6497 6606 0
-6422 -6495 6604 0
-6422 -6493 6602 0
-6422 -6491 6600 0
-6422 -6489 6598 0
-6422 -6487 6596 0
-6422 -6485 6594 0
-6422 -6484 6593 0
c (( - aux587 + shift(x_00006_00009, -1) + shift(x_00004_00007, -1))<=0)
497 -6656 0
498 -6657 0
500 -6659 0
502 -6661 0
504 -6663 0
506 -6665 0
508 -6667 0
510 -6669 0
797 -6656 0
797 497 -6657 0
797 498 -6659 0
797 500 -6661 0
797 502 -6663 0
797 504 -6665 0
797 506 -6667 0
797 508 -6669 0
797 510 -6671 0
798 -6657 0
798 497 -6659 0
798 498 -6661 0
798 500 -6663 0
798 502 -6665 0
798 504 -6667 0
798 506 -6669 0
798 508 -6671 0
798 510 -6673 0
800 -6659 0
800 497 -6661 0
800 498 -6663 0
800 500 -6665 0
800 502 -6667 0
800 504 -6669 0
800 506 -6671 0
800 508 -6673 0
800 510 -6675 0
802 -6661 0
802 497 -6663 0
802 498 -6665 0
802 500 -6667 0
802 502 -6669 0
802 504 -6671 0
802 506 -6673 0
802 508 -6675 0
802 510 -6677 0
804 -6663 0
804 497 -6665 0
804 498 -6667 0
804 500 -6669 0
804 502 -6671 0
804 504 -6673 0
804 506 -6675 0
804 508 -6677 0
804 510 -6679 0
806 -6665 0
806 497 -6667 0
806 498 -6669 0
806 500 -6671 0
806 502 -6673 0
806 504 -6675 0
806 506 -6677 0
806 508 -6679 0
806 510 -6681 0
808 -6667 0
808 497 -6669 0
808 498 -6671 0
808 500 -6673 0
808 502 -6675 0
808 504 -6677 0
808 506 -6679 0
808 508 -6681 0
808 510 -6683 0
810 -6669 0
810 497 -6671 0
810 498 -6673 0
810 500 -6675 0
810 502 -6677 0
810 504 -6679 0
810 506 -6681 0
810 508 -6683 0
810 510 -6685 0
c (0<=( - aux587 + shift(x_00006_00009, -1) + shift(x_00004_00007, -1)))
-510 6685 0
-508 6683 0
-506 6681 0
-504 6679 0
-502 6677 0
-500 6675 0
-498 6673 0
-497 6671 0
-810 6685 0
-810 -510 6683 0
-810 -508 6681 0
-810 -506 6679 0
-810 -504 6677 0
-810 -502 6675 0
-810 -500 6673 0
-810 -498 6671 0
-810 -497 6669 0
-808 6683 0
-808 -510 6681 0
-808 -508 6679 0
-808 -506 6677 0
-808 -504 6675 0
-808 -502 6673 0
-808 -500 6671 0
-808 -498 6669 0
-808 -497 6667 0
-806 6681 0
-806 -510 6679 0
-806 -508 6677 0
-806 -506 6675 0
-806 -504 6673 0
-806 -502 6671 0
-806 -500 6669 0
-806 -498 6667 0
-806 -497 6665 0
-804 6679 0
-804 -510 6677 0
-804 -508 6675 0
-804 -506 6673 0
-804 -504 6671 0
-804 -502 6669 0
-804 -500 6667 0
-804 -498 6665 0
-804 -497 6663 0
-802 6677 0
-802 -510 6675 0
-802 -508 6673 0
-802 -506 6671 0
-802 -504 6669 0
-802 -502 6667 0
-802 -500 6665 0
-802 -498 6663 0
-802 -497 6661 0
-800 6675 0
-800 -510 6673 0
-800 -508 6671 0
-800 -506 6669 0
-800 -504 6667 0
-800 -502 6665 0
-800 -500 6663 0
-800 -498 6661 0
-800 -497 6659 0
-798 6673 0
-798 -510 6671 0
-798 -508 6669 0
-798 -506 6667 0
-798 -504 6665 0
-798 -502 6663 0
-798 -500 6661 0
-798 -498 6659 0
-798 -497 6657 0
-797 6671 0
-797 -510 6669 0
-797 -508 6667 0
-797 -506 6665 0
-797 -504 6663 0
-797 -502 6661 0
-797 -500 6659 0
-797 -498 6657 0
-797 -497 6656 0
c (( - aux588 + shift(x_00006_00008, -1) + shift(x_00004_00008, -1))<=0)
512 -6687 0
513 -6688 0
515 -6690 0
517 -6692 0
519 -6694 0
521 -6696 0
523 -6698 0
525 -6700 0
782 -6687 0
782 512 -6688 0
782 513 -6690 0
782 515 -6692 0
782 517 -6694 0
782 519 -6696 0
782 521 -6698 0
782 523 -6700 0
782 525 -6702 0
783 -6688 0
783 512 -6690 0
783 513 -6692 0
783 515 -6694 0
783 517 -6696 0
783 519 -6698 0
783 521 -6700 0
783 523 -6702 0
783 525 -6704 0
785 -6690 0
785 512 -6692 0
785 513 -6694 0
785 515 -6696 0
785 517 -6698 0
785 519 -6700 0
785 521 -6702 0
785 523 -6704 0
785 525 -6706 0
787 -6692 0
787 512 -6694 0
787 513 -6696 0
787 515 -6698 0
787 517 -6700 0
787 519 -6702 0
787 521 -6704 0
787 523 -6706 0
787 525 -6708 0
789 -6694 0
789 512 -6696 0
789 513 -6698 0
789 515 -6700 0
789 517 -6702 0
789 519 -6704 0
789 521 -6706 0
789 523 -6708 0
789 525 -6710 0
791 -6696 0
791 512 -6698 0
791 513 -6700 0
791 515 -6702 0
791 517 -6704 0
791 519 -6706 0
791 521 -6708 0
791 523 -6710 0
791 525 -6712 0
793 -6698 0
793 512 -6700 0
793 513 -6702 0
793 515 -6704 0
793 517 -6706 0
793 519 -6708 0
793 521 -6710 0
793 523 -6712 0
793 525 -6714 0
795 -6700 0
795 512 -6702 0
795 513 -6704 0
795 515 -6706 0
795 517 -6708 0
795 519 -6710 0
795 521 -6712 0
795 523 -6714 0
795 525 -6716 0
c (0<=( - aux588 + shift(x_00006_00008, -1) + shift(x_00004_00008, -1)))
-525 6716 0
-523 6714 0
-521 6712 0
-519 6710 0
-517 6708 0
-515 6706 0
-513 6704 0
-512 6702 0
-795 6716 0
-795 -525 6714 0
-795 -523 6712 0
-795 -521 6710 0
-795 -519 6708 0
-795 -517 6706 0
-795 -515 6704 0
-795 -513 6702 0
-795 -512 6700 0
-793 6714 0
-793 -525 6712 0
-793 -523 6710 0
-793 -521 6708 0
-793 -519 6706 0
-793 -517 6704 0
-793 -515 6702 0
-793 -513 6700 0
-793 -512 6698 0
-791 6712 0
-791 -525 6710 0
-791 -523 6708 0
-791 -521 6706 0
-791 -519 6704 0
-791 -517 6702 0
-791 -515 6700 0
-791 -513 6698 0
-791 -512 6696 0
-789 6710 0
-789 -525 6708 0
-789 -523 6706 0
-789 -521 6704 0
-789 -519 6702 0
-789 -517 6700 0
-789 -515 6698 0
-789 -513 6696 0
-789 -512 6694 0
-787 6708 0
-787 -525 6706 0
-787 -523 6704 0
-787 -521 6702 0
-787 -519 6700 0
-787 -517 6698 0
-787 -515 6696 0
-787 -513 6694 0
-787 -512 6692 0
-785 6706 0
-785 -525 6704 0
-785 -523 6702 0
-785 -521 6700 0
-785 -519 6698 0
-785 -517 6696 0
-785 -515 6694 0
-785 -513 6692 0
-785 -512 6690 0
-783 6704 0
-783 -525 6702 0
-783 -523 6700 0
-783 -521 6698 0
-783 -519 6696 0
-783 -517 6694 0
-783 -515 6692 0
-783 -513 6690 0
-783 -512 6688 0
-782 6702 0
-782 -525 6700 0
-782 -523 6698 0
-782 -521 6696 0
-782 -519 6694 0
-782 -517 6692 0
-782 -515 6690 0
-782 -513 6688 0
-782 -512 6687 0
c (( - aux589 + shift(x_00005_00007, -1) + shift(x_00006_00007, -1))<=0)
767 -6718 0
768 -6719 0
770 -6721 0
772 -6723 0
774 -6725 0
776 -6727 0
778 -6729 0
780 -6731 0
632 -6718 0
632 767 -6719 0
632 768 -6721 0
632 770 -6723 0
632 772 -6725 0
632 774 -6727 0
632 776 -6729 0
632 778 -6731 0
632 780 -6733 0
633 -6719 0
633 767 -6721 0
633 768 -6723 0
633 770 -6725 0
633 772 -6727 0
633 774 -6729 0
633 776 -6731 0
633 778 -6733 0
633 780 -6735 0
635 -6721 0
635 767 -6723 0
635 768 -6725 0
635 770 -6727 0
635 772 -6729 0
635 774 -6731 0
635 776 -6733 0
635 778 -6735 0
635 780 -6737 0
637 -6723 0
637 767 -6725 0
637 768 -6727 0
637 770 -6729 0
637 772 -6731 0
637 774 -6733 0
637 776 -6735 0
637 778 -6737 0
637 780 -6739 0
639 -6725 0
639 767 -6727 0
639 768 -6729 0
639 770 -6731 0
639 772 -6733 0
639 774 -6735 0
639 776 -6737 0
639 778 -6739 0
639 780 -6741 0
641 -6727 0
641 767 -6729 0
641 768 -6731 0
641 770 -6733 0
641 772 -6735 0
641 774 -6737 0
641 776 -6739 0
641 778 -6741 0
641 780 -6743 0
643 -6729 0
643 767 -6731 0
643 768 -6733 0
643 770 -6735 0
643 772 -6737 0
643 774 -6739 0
643 776 -6741 0
643 778 -6743 0
643 780 -6745 0
645 -6731 0
645 767 -6733 0
645 768 -6735 0
645 770 -6737 0
645 772 -6739 0
645 774 -6741 0
645 776 -6743 0
645 778 -6745 0
645 780 -6747 0
c (0<=( - aux589 + shift(x_00005_00007, -1) + shift(x_00006_00007, -1)))
-780 6747 0
-778 6745 0
-776 6743 0
-774 6741 0
-772 6739 0
-770 6737 0
-768 6735 0
-767 6733 0
-645 6747 0
-645 -780 6745 0
-645 -778 6743 0
-645 -776 6741 0
-645 -774 6739 0
-645 -772 6737 0
-645 -770 6735 0
-645 -768 6733 0
-645 -767 6731 0
-643 6745 0
-643 -780 6743 0
-643 -778 6741 0
-643 -776 6739 0
-643 -774 6737 0
-643 -772 6735 0
-643 -770 6733 0
-643 -768 6731 0
-643 -767 6729 0
-641 6743 0
-641 -780 6741 0
-641 -778 6739 0
-641 -776 6737 0
-641 -774 6735 0
-641 -772 6733 0
-641 -770 6731 0
-641 -768 6729 0
-641 -767 6727 0
-639 6741 0
-639 -780 6739 0
-639 -778 6737 0
-639 -776 6735 0
-639 -774 6733 0
-639 -772 6731 0
-639 -770 6729 0
-639 -768 6727 0
-639 -767 6725 0
-637 6739 0
-637 -780 6737 0
-637 -778 6735 0
-637 -776 6733 0
-637 -774 6731 0
-637 -772 6729 0
-637 -770 6727 0
-637 -768 6725 0
-637 -767 6723 0
-635 6737 0
-635 -780 6735 0
-635 -778 6733 0
-635 -776 6731 0
-635 -774 6729 0
-635 -772 6727 0
-635 -770 6725 0
-635 -768 6723 0
-635 -767 6721 0
-633 6735 0
-633 -780 6733 0
-633 -778 6731 0
-633 -776 6729 0
-633 -774 6727 0
-633 -772 6725 0
-633 -770 6723 0
-633 -768 6721 0
-633 -767 6719 0
-632 6733 0
-632 -780 6731 0
-632 -778 6729 0
-632 -776 6727 0
-632 -774 6725 0
-632 -772 6723 0
-632 -770 6721 0
-632 -768 6719 0
-632 -767 6718 0
c (( - aux590 + shift(x_00005_00008, -1) + shift(x_00005_00009, -1))<=0)
662 -6749 0
663 -6750 0
665 -6752 0
667 -6754 0
669 -6756 0
671 -6758 0
673 -6760 0
675 -6762 0
647 -6749 0
647 662 -6750 0
647 663 -6752 0
647 665 -6754 0
647 667 -6756 0
647 669 -6758 0
647 671 -6760 0
647 673 -6762 0
647 675 -6764 0
648 -6750 0
648 662 -6752 0
648 663 -6754 0
648 665 -6756 0
648 667 -6758 0
648 669 -6760 0
648 671 -6762 0
648 673 -6764 0
648 675 -6766 0
650 -6752 0
650 662 -6754 0
650 663 -6756 0
650 665 -6758 0
650 667 -6760 0
650 669 -6762 0
650 671 -6764 0
650 673 -6766 0
650 675 -6768 0
652 -6754 0
652 662 -6756 0
652 663 -6758 0
652 665 -6760 0
652 667 -6762 0
652 669 -6764 0
652 671 -6766 0
652 673 -6768 0
652 675 -6770 0
654 -6756 0
654 662 -6758 0
654 663 -6760 0
654 665 -6762 0
654 667 -6764 0
654 669 -6766 0
654 671 -6768 0
654 673 -6770 0
654 675 -6772 0
656 -6758 0
656 662 -6760 0
656 663 -6762 0
656 665 -6764 0
656 667 -6766 0
656 669 -6768 0
656 671 -6770 0
656 673 -6772 0
656 675 -6774 0
658 -6760 0
658 662 -6762 0
658 663 -6764 0
658 665 -6766 0
658 667 -6768 0
658 669 -6770 0
658 671 -6772 0
658 673 -6774 0
658 675 -6776 0
660 -6762 0
660 662 -6764 0
660 663 -6766 0
660 665 -6768 0
660 667 -6770 0
660 669 -6772 0
660 671 -6774 0
660 673 -6776 0
660 675 -6778 0
c (0<=( - aux590 + shift(x_00005_00008, -1) + shift(x_00005_00009, -1)))
-675 6778 0
-673 6776 0
-671 6774 0
-669 6772 0
-667 6770 0
-665 6768 0
-663 6766 0
-662 6764 0
-660 6778 0
-660 -675 6776 0
-660 -673 6774 0
-660 -671 6772 0
-660 -669 6770 0
-660 -667 6768 0
-660 -665 6766 0
-660 -663 6764 0
-660 -662 6762 0
-658 6776 0
-658 -675 6774 0
-658 -673 6772 0
-658 -671 6770 0
-658 -669 6768 0
-658 -667 6766 0
-658 -665 6764 0
-658 -663 6762 0
-658 -662 6760 0
-656 6774 0
-656 -675 6772 0
-656 -673 6770 0
-656 -671 6768 0
-656 -669 6766 0
-656 -667 6764 0
-656 -665 6762 0
-656 -663 6760 0
-656 -662 6758 0
-654 6772 0
-654 -675 6770 0
-654 -673 6768 0
-654 -671 6766 0
-654 -669 6764 0
-654 -667 6762 0
-654 -665 6760 0
-654 -663 6758 0
-654 -662 6756 0
-652 6770 0
-652 -675 6768 0
-652 -673 6766 0
-652 -671 6764 0
-652 -669 6762 0
-652 -667 6760 0
-652 -665 6758 0
-652 -663 6756 0
-652 -662 6754 0
-650 6768 0
-650 -675 6766 0
-650 -673 6764 0
-650 -671 6762 0
-650 -669 6760 0
-650 -667 6758 0
-650 -665 6756 0
-650 -663 6754 0
-650 -662 6752 0
-648 6766 0
-648 -675 6764 0
-648 -673 6762 0
-648 -671 6760 0
-648 -669 6758 0
-648 -667 6756 0
-648 -665 6754 0
-648 -663 6752 0
-648 -662 6750 0
-647 6764 0
-647 -675 6762 0
-647 -673 6760 0
-647 -671 6758 0
-647 -669 6756 0
-647 -667 6754 0
-647 -665 6752 0
-647 -663 6750 0
-647 -662 6749 0
c ((aux590 - aux591 + shift(x_00004_00009, -1))<=0)
6749 -6780 0
6750 -6781 0
6752 -6783 0
6754 -6785 0
6756 -6787 0
6758 -6789 0
6760 -6791 0
6762 -6793 0
6764 -6795 0
6766 -6797 0
6768 -6799 0
6770 -6801 0
6772 -6803 0
6774 -6805 0
6776 -6807 0
6778 -6809 0
527 -6780 0
527 6749 -6781 0
527 6750 -6783 0
527 6752 -6785 0
527 6754 -6787 0
527 6756 -6789 0
527 6758 -6791 0
527 6760 -6793 0
527 6762 -6795 0
527 6764 -6797 0
527 6766 -6799 0
527 6768 -6801 0
527 6770 -6803 0
527 6772 -6805 0
527 6774 -6807 0
527 6776 -6809 0
527 6778 -6811 0
528 -6781 0
528 6749 -6783 0
528 6750 -6785 0
528 6752 -6787 0
528 6754 -6789 0
528 6756 -6791 0
528 6758 -6793 0
528 6760 -6795 0
528 6762 -6797 0
528 6764 -6799 0
528 6766 -6801 0
528 6768 -6803 0
528 6770 -6805 0
528 6772 -6807 0
528 6774 -6809 0
528 6776 -6811 0
528 6778 -6813 0
530 -6783 0
530 6749 -6785 0
530 6750 -6787 0
530 6752 -6789 0
530 6754 -6791 0
530 6756 -6793 0
530 6758 -6795 0
530 6760 -6797 0
530 6762 -6799 0
530 6764 -6801 0
530 6766 -6803 0
530 6768 -6805 0
530 6770 -6807 0
530 6772 -6809 0
530 6774 -6811 0
530 6776 -6813 0
530 6778 -6815 0
532 -6785 0
532 6749 -6787 0
532 6750 -6789 0
532 6752 -6791 0
532 6754 -6793 0
532 6756 -6795 0
532 6758 -6797 0
532 6760 -6799 0
532 6762 -6801 0
532 6764 -6803 0
532 6766 -6805 0
532 6768 -6807 0
532 6770 -6809 0
532 6772 -6811 0
532 6774 -6813 0
532 6776 -6815 0
532 6778 -6817 0
534 -6787 0
534 6749 -6789 0
534 6750 -6791 0
534 6752 -6793 0
534 6754 -6795 0
534 6756 -6797 0
534 6758 -6799 0
534 6760 -6801 0
534 6762 -6803 0
534 6764 -6805 0
534 6766 -6807 0
534 6768 -6809 0
534 6770 -6811 0
534 6772 -6813 0
534 6774 -6815 0
534 6776 -6817 0
534 6778 -6819 0
536 -6789 0
536 6749 -6791 0
536 6750 -6793 0
536 6752 -6795 0
536 6754 -6797 0
536 6756 -6799 0
536 6758 -6801 0
536 6760 -6803 0
536 6762 -6805 0
536 6764 -6807 0
536 6766 -6809 0
536 6768 -6811 0
536 6770 -6813 0
536 6772 -6815 0
536 6774 -6817 0
536 6776 -6819 0
536 6778 -6821 0
538 -6791 0
538 6749 -6793 0
538 6750 -6795 0
538 6752 -6797 0
538 6754 -6799 0
538 6756 -6801 0
538 6758 -6803 0
538 6760 -6805 0
538 6762 -6807 0
538 6764 -6809 0
538 6766 -6811 0
538 6768 -6813 0
538 6770 -6815 0
538 6772 -6817 0
538 6774 -6819 0
538 6776 -6821 0
538 6778 -6823 0
540 -6793 0
540 6749 -6795 0
540 6750 -6797 0
540 6752 -6799 0
540 6754 -6801 0
540 6756 -6803 0
540 6758 -6805 0
540 6760 -6807 0
540 6762 -6809 0
540 6764 -6811 0
540 6766 -6813 0
540 6768 -6815 0
540 6770 -6817 0
540 6772 -6819 0
540 6774 -6821 0
540 6776 -6823 0
540 6778 -6825 0
c (0<=(aux590 - aux591 + shift(x_00004_00009, -1)))
-6778 6825 0
-6776 6823 0
-6774 6821 0
-6772 6819 0
-6770 6817 0
-6768 6815 0
-6766 6813 0
-6764 6811 0
-6762 6809 0
-6760 6807 0
-6758 6805 0
-6756 6803 0
-6754 6801 0
-6752 6799 0
-6750 6797 0
-6749 6795 0
-540 6825 0
-540 -6778 6823 0
-540 -6776 6821 0
-540 -6774 6819 0
-540 -6772 6817 0
-540 -6770 6815 0
-540 -6768 6813 0
-540 -6766 6811 0
-540 -6764 6809 0
-540 -6762 6807 0
-540 -6760 6805 0
-540 -6758 6803 0
-540 -6756 6801 0
-540 -6754 6799 0
-540 -6752 6797 0
-540 -6750 6795 0
-540 -6749 6793 0
-538 6823 0
-538 -6778 6821 0
-538 -6776 6819 0
-538 -6774 6817 0
-538 -6772 6815 0
-538 -6770 6813 0
-538 -6768 6811 0
-538 -6766 6809 0
-538 -6764 6807 0
-538 -6762 6805 0
-538 -6760 6803 0
-538 -6758 6801 0
-538 -6756 6799 0
-538 -6754 6797 0
-538 -6752 6795 0
-538 -6750 6793 0
-538 -6749 6791 0
-536 6821 0
-536 -6778 6819 0
-536 -6776 6817 0
-536 -6774 6815 0
-536 -6772 6813 0
-536 -6770 6811 0
-536 -6768 6809 0
-536 -6766 6807 0
-536 -6764 6805 0
-536 -6762 6803 0
-536 -6760 6801 0
-536 -6758 6799 0
-536 -6756 6797 0
-536 -6754 6795 0
-536 -6752 6793 0
-536 -6750 6791 0
-536 -6749 6789 0
-534 6819 0
-534 -6778 6817 0
-534 -6776 6815 0
-534 -6774 6813 0
-534 -6772 6811 0
-534 -6770 6809 0
-534 -6768 6807 0
-534 -6766 6805 0
-534 -6764 6803 0
-534 -6762 6801 0
-534 -6760 6799 0
-534 -6758 6797 0
-534 -6756 6795 0
-534 -6754 6793 0
-534 -6752 6791 0
-534 -6750 6789 0
-534 -6749 6787 0
-532 6817 0
-532 -6778 6815 0
-532 -6776 6813 0
-532 -6774 6811 0
-532 -6772 6809 0
-532 -6770 6807 0
-532 -6768 6805 0
-532 -6766 6803 0
-532 -6764 6801 0
-532 -6762 6799 0
-532 -6760 6797 0
-532 -6758 6795 0
-532 -6756 6793 0
-532 -6754 6791 0
-532 -6752 6789 0
-532 -6750 6787 0
-532 -6749 6785 0
-530 6815 0
-530 -6778 6813 0
-530 -6776 6811 0
-530 -6774 6809 0
-530 -6772 6807 0
-530 -6770 6805 0
-530 -6768 6803 0
-530 -6766 6801 0
-530 -6764 6799 0
-530 -6762 6797 0
-530 -6760 6795 0
-530 -6758 6793 0
-530 -6756 6791 0
-530 -6754 6789 0
-530 -6752 6787 0
-530 -6750 6785 0
-530 -6749 6783 0
-528 6813 0
-528 -6778 6811 0
-528 -6776 6809 0
-528 -6774 6807 0
-528 -6772 6805 0
-528 -6770 6803 0
-528 -6768 6801 0
-528 -6766 6799 0
-528 -6764 6797 0
-528 -6762 6795 0
-528 -6760 6793 0
-528 -6758 6791 0
-528 -6756 6789 0
-528 -6754 6787 0
-528 -6752 6785 0
-528 -6750 6783 0
-528 -6749 6781 0
-527 6811 0
-527 -6778 6809 0
-527 -6776 6807 0
-527 -6774 6805 0
-527 -6772 6803 0
-527 -6770 6801 0
-527 -6768 6799 0
-527 -6766 6797 0
-527 -6764 6795 0
-527 -6762 6793 0
-527 -6760 6791 0
-527 -6758 6789 0
-527 -6756 6787 0
-527 -6754 6785 0
-527 -6752 6783 0
-527 -6750 6781 0
-527 -6749 6780 0
c ((aux587 + aux589 - aux592)<=0)
6718 -6827 0
6719 -6828 0
6721 -6830 0
6723 -6832 0
6725 -6834 0
6727 -6836 0
6729 -6838 0
6731 -6840 0
6733 -6842 0
6735 -6844 0
6737 -6846 0
6739 -6848 0
6741 -6850 0
6743 -6852 0
6745 -6854 0
6747 -6856 0
6656 -6827 0
6656 6718 -6828 0
6656 6719 -6830 0
6656 6721 -6832 0
6656 6723 -6834 0
6656 6725 -6836 0
6656 6727 -6838 0
6656 6729 -6840 0
6656 6731 -6842 0
6656 6733 -6844 0
6656 6735 -6846 0
6656 6737 -6848 0
6656 6739 -6850 0
6656 6741 -6852 0
6656 6743 -6854 0
6656 6745 -6856 0
6656 6747 -6858 0
6657 -6828 0
6657 6718 -6830 0
6657 6719 -6832 0
6657 6721 -6834 0
6657 6723 -6836 0
6657 6725 -6838 0
6657 6727 -6840 0
6657 6729 -6842 0
6657 6731 -6844 0
6657 6733 -6846 0
6657 6735 -6848 0
6657 6737 -6850 0
6657 6739 -6852 0
6657 6741 -6854 0
6657 6743 -6856 0
6657 6745 -6858 0
6657 6747 -6860 0
6659 -6830 0
6659 6718 -6832 0
6659 6719 -6834 0
6659 6721 -6836 0
6659 6723 -6838 0
6659 6725 -6840 0
6659 6727 -6842 0
6659 6729 -6844 0
6659 6731 -6846 0
6659 6733 -6848 0
6659 6735 -6850 0
6659 6737 -6852 0
6659 6739 -6854 0
6659 6741 -6856 0
6659 6743 -6858 0
6659 6745 -6860 0
6659 6747 -6862 0
6661 -6832 0
6661 6718 -6834 0
6661 6719 -6836 0
6661 6721 -6838 0
6661 6723 -6840 0
6661 6725 -6842 0
6661 6727 -6844 0
6661 6729 -6846 0
6661 6731 -6848 0
6661 6733 -6850 0
6661 6735 -6852 0
6661 6737 -6854 0
6661 6739 -6856 0
6661 6741 -6858 0
6661 6743 -6860 0
6661 6745 -6862 0
6661 6747 -6864 0
6663 -6834 0
6663 6718 -6836 0
6663 6719 -6838 0
6663 6721 -6840 0
6663 6723 -6842 0
6663 6725 -6844 0
6663 6727 -6846 0
6663 6729 -6848 0
6663 6731 -6850 0
6663 6733 -6852 0
6663 6735 -6854 0
6663 6737 -6856 0
6663 6739 -6858 0
6663 6741 -6860 0
6663 6743 -6862 0
6663 6745 -6864 0
6663 6747 -6866 0
6665 -6836 0
6665 6718 -6838 0
6665 6719 -6840 0
6665 6721 -6842 0
6665 6723 -6844 0
6665 6725 -6846 0
6665 6727 -6848 0
6665 6729 -6850 0
6665 6731 -6852 0
6665 6733 -6854 0
6665 6735 -6856 0
6665 6737 -6858 0
6665 6739 -6860 0
6665 6741 -6862 0
6665 6743 -6864 0
6665 6745 -6866 0
6665 6747 -6868 0
6667 -6838 0
6667 6718 -6840 0
6667 6719 -6842 0
6667 6721 -6844 0
6667 6723 -6846 0
6667 6725 -6848 0
6667 6727 -6850 0
6667 6729 -6852 0
6667 6731 -6854 0
6667 6733 -6856 0
6667 6735 -6858 0
6667 6737 -6860 0
6667 6739 -6862 0
6667 6741 -6864 0
6667 6743 -6866 0
6667 6745 -6868 0
6667 6747 -6870 0
6669 -6840 0
6669 6718 -6842 0
6669 6719 -6844 0
6669 6721 -6846 0
6669 6723 -6848 0
6669 6725 -6850 0
6669 6727 -6852 0
6669 6729 -6854 0
6669 6731 -6856 0
6669 6733 -6858 0
6669 6735 -6860 0
6669 6737 -6862 0
6669 6739 -6864 0
6669 6741 -6866 0
6669 6743 -6868 0
6669 6745 -6870 0
6669 6747 -6872 0
6671 -6842 0
6671 6718 -6844 0
6671 6719 -6846 0
6671 6721 -6848 0
6671 6723 -6850 0
6671 6725 -6852 0
6671 6727 -6854 0
6671 6729 -6856 0
6671 6731 -6858 0
6671 6733 -6860 0
6671 6735 -6862 0
6671 6737 -6864 0
6671 6739 -6866 0
6671 6741 -6868 0
6671 6743 -6870 0
6671 6745 -6872 0
6671 6747 -6874 0
6673 -6844 0
6673 6718 -6846 0
6673 6719 -6848 0
6673 6721 -6850 0
6673 6723 -6852 0
6673 6725 -6854 0
6673 6727 -6856 0
6673 6729 -6858 0
6673 6731 -6860 0
6673 6733 -6862 0
6673 6735 -6864 0
6673 6737 -6866 0
6673 6739 -6868 0
6673 6741 -6870 0
6673 6743 -6872 0
6673 6745 -6874 0
6673 6747 -6876 0
6675 -6846 0
6675 6718 -6848 0
6675 6719 -6850 0
6675 6721 -6852 0
6675 6723 -6854 0
6675 6725 -6856 0
6675 6727 -6858 0
6675 6729 -6860 0
6675 6731 -6862 0
6675 6733 -6864 0
6675 6735 -6866 0
6675 6737 -6868 0
6675 6739 -6870 0
6675 6741 -6872 0
6675 6743 -6874 0
6675 6745 -6876 0
6675 6747 -6878 0
6677 -6848 0
6677 6718 -6850 0
6677 6719 -6852 0
6677 6721 -6854 0
6677 6723 -6856 0
6677 6725 -6858 0
6677 6727 -6860 0
6677 6729 -6862 0
6677 6731 -6864 0
6677 6733 -6866 0
6677 6735 -6868 0
6677 6737 -6870 0
6677 6739 -6872 0
6677 6741 -6874 0
6677 6743 -6876 0
6677 6745 -6878 0
6677 6747 -6880 0
6679 -6850 0
6679 6718 -6852 0
6679 6719 -6854 0
6679 6721 -6856 0
6679 6723 -6858 0
6679 6725 -6860 0
6679 6727 -6862 0
6679 6729 -6864 0
6679 6731 -6866 0
6679 6733 -6868 0
6679 6735 -6870 0
6679 6737 -6872 0
6679 6739 -6874 0
6679 6741 -6876 0
6679 6743 -6878 0
6679 6745 -6880 0
6679 6747 -6882 0
6681 -6852 0
6681 6718 -6854 0
6681 6719 -6856 0
6681 6721 -6858 0
6681 6723 -6860 0
6681 6725 -6862 0
6681 6727 -6864 0
6681 6729 -6866 0
6681 6731 -6868 0
6681 6733 -6870 0
6681 6735 -6872 0
6681 6737 -6874 0
6681 6739 -6876 0
6681 6741 -6878 0
6681 6743 -6880 0
6681 6745 -6882 0
6681 6747 -6884 0
6683 -6854 0
6683 6718 -6856 0
6683 6719 -6858 0
6683 6721 -6860 0
6683 6723 -6862 0
6683 6725 -6864 0
6683 6727 -6866 0
6683 6729 -6868 0
6683 6731 -6870 0
6683 6733 -6872 0
6683 6735 -6874 0
6683 6737 -6876 0
6683 6739 -6878 0
6683 6741 -6880 0
6683 6743 -6882 0
6683 6745 -6884 0
6683 6747 -6886 0
6685 -6856 0
6685 6718 -6858 0
6685 6719 -6860 0
6685 6721 -6862 0
6685 6723 -6864 0
6685 6725 -6866 0
6685 6727 -6868 0
6685 6729 -6870 0
6685 6731 -6872 0
6685 6733 -6874 0
6685 6735 -6876 0
6685 6737 -6878 0
6685 6739 -6880 0
6685 6741 -6882 0
6685 6743 -6884 0
6685 6745 -6886 0
6685 6747 -6888 0
c (0<=(aux587 + aux589 - aux592))
-6747 6888 0
-6745 6886 0
-6743 6884 0
-6741 6882 0
-6739 6880 0
-6737 6878 0
-6735 6876 0
-6733 6874 0
-6731 6872 0
-6729 6870 0
-6727 6868 0
-6725 6866 0
-6723 6864 0
-6721 6862 0
-6719 6860 0
-6718 6858 0
-6685 6888 0
-6685 -6747 6886 0
-6685 -6745 6884 0
-6685 -6743 6882 0
-6685 -6741 6880 0
-6685 -6739 6878 0
-6685 -6737 6876 0
-6685 -6735 6874 0
-6685 -6733 6872 0
-6685 -6731 6870 0
-6685 -6729 6868 0
-6685 -6727 6866 0
-6685 -6725 6864 0
-6685 -6723 6862 0
-6685 -6721 6860 0
-6685 -6719 6858 0
-6685 -6718 6856 0
-6683 6886 0
-6683 -6747 6884 0
-6683 -6745 6882 0
-6683 -6743 6880 0
-6683 -6741 6878 0
-6683 -6739 6876 0
-6683 -6737 6874 0
-6683 -6735 6872 0
-6683 -6733 6870 0
-6683 -6731 6868 0
-6683 -6729 6866 0
-6683 -6727 6864 0
-6683 -6725 6862 0
-6683 -6723 6860 0
-6683 -6721 6858 0
-6683 -6719 6856 0
-6683 -6718 6854 0
-6681 6884 0
-6681 -6747 6882 0
-6681 -6745 6880 0
-6681 -6743 6878 0
-6681 -6741 6876 0
-6681 -6739 6874 0
-6681 -6737 6872 0
-6681 -6735 6870 0
-6681 -6733 6868 0
-6681 -6731 6866 0
-6681 -6729 6864 0
-6681 -6727 6862 0
-6681 -6725 6860 0
-6681 -6723 6858 0
-6681 -6721 6856 0
-6681 -6719 6854 0
-6681 -6718 6852 0
-6679 6882 0
-6679 -6747 6880 0
-6679 -6745 6878 0
-6679 -6743 6876 0
-6679 -6741 6874 0
-6679 -6739 6872 0
-6679 -6737 6870 0
-6679 -6735 6868 0
-6679 -6733 6866 0
-6679 -6731 6864 0
-6679 -6729 6862 0
-6679 -6727 6860 0
-6679 -6725 6858 0
-6679 -6723 6856 0
-6679 -6721 6854 0
-6679 -6719 6852 0
-6679 -6718 6850 0
-6677 6880 0
-6677 -6747 6878 0
-6677 -6745 6876 0
-6677 -6743 6874 0
-6677 -6741 6872 0
-6677 -6739 6870 0
-6677 -6737 6868 0
-6677 -6735 6866 0
-6677 -6733 6864 0
-6677 -6731 6862 0
-6677 -6729 6860 0
-6677 -6727 6858 0
-6677 -6725 6856 0
-6677 -6723 6854 0
-6677 -6721 6852 0
-6677 -6719 6850 0
-6677 -6718 6848 0
-6675 6878 0
-6675 -6747 6876 0
-6675 -6745 6874 0
-6675 -6743 6872 0
-6675 -6741 6870 0
-6675 -6739 6868 0
-6675 -6737 6866 0
-6675 -6735 6864 0
-6675 -6733 6862 0
-6675 -6731 6860 0
-6675 -6729 6858 0
-6675 -6727 6856 0
-6675 -6725 6854 0
-6675 -6723 6852 0
-6675 -6721 6850 0
-6675 -6719 6848 0
-6675 -6718 6846 0
-6673 6876 0
-6673 -6747 6874 0
-6673 -6745 6872 0
-6673 -6743 6870 0
-6673 -6741 6868 0
-6673 -6739 6866 0
-6673 -6737 6864 0
-6673 -6735 6862 0
-6673 -6733 6860 0
-6673 -6731 6858 0
-6673 -6729 6856 0
-6673 -6727 6854 0
-6673 -6725 6852 0
-6673 -6723 6850 0
-6673 -6721 6848 0
-6673 -6719 6846 0
-6673 -6718 6844 0
-6671 6874 0
-6671 -6747 6872 0
-6671 -6745 6870 0
-6671 -6743 6868 0
-6671 -6741 6866 0
-6671 -6739 6864 0
-6671 -6737 6862 0
-6671 -6735 6860 0
-6671 -6733 6858 0
-6671 -6731 6856 0
-6671 -6729 6854 0
-6671 -6727 6852 0
-6671 -6725 6850 0
-6671 -6723 6848 0
-6671 -6721 6846 0
-6671 -6719 6844 0
-6671 -6718 6842 0
-6669 6872 0
-6669 -6747 6870 0
-6669 -6745 6868 0
-6669 -6743 6866 0
-6669 -6741 6864 0
-6669 -6739 6862 0
-6669 -6737 6860 0
-6669 -6735 6858 0
-6669 -6733 6856 0
-6669 -6731 6854 0
-6669 -6729 6852 0
-6669 -6727 6850 0
-6669 -6725 6848 0
-6669 -6723 6846 0
-6669 -6721 6844 0
-6669 -6719 6842 0
-6669 -6718 6840 0
-6667 6870 0
-6667 -6747 6868 0
-6667 -6745 6866 0
-6667 -6743 6864 0
-6667 -6741 6862 0
-6667 -6739 6860 0
-6667 -6737 6858 0
-6667 -6735 6856 0
-6667 -6733 6854 0
-6667 -6731 6852 0
-6667 -6729 6850 0
-6667 -6727 6848 0
-6667 -6725 6846 0
-6667 -6723 6844 0
-6667 -6721 6842 0
-6667 -6719 6840 0
-6667 -6718 6838 0
-6665 6868 0
-6665 -6747 6866 0
-6665 -6745 6864 0
-6665 -6743 6862 0
-6665 -6741 6860 0
-6665 -6739 6858 0
-6665 -6737 6856 0
-6665 -6735 6854 0
-6665 -6733 6852 0
-6665 -6731 6850 0
-6665 -6729 6848 0
-6665 -6727 6846 0
-6665 -6725 6844 0
-6665 -6723 6842 0
-6665 -6721 6840 0
-6665 -6719 6838 0
-6665 -6718 6836 0
-6663 6866 0
-6663 -6747 6864 0
-6663 -6745 6862 0
-6663 -6743 6860 0
-6663 -6741 6858 0
-6663 -6739 6856 0
-6663 -6737 6854 0
-6663 -6735 6852 0
-6663 -6733 6850 0
-6663 -6731 6848 0
-6663 -6729 6846 0
-6663 -6727 6844 0
-6663 -6725 6842 0
-6663 -6723 6840 0
-6663 -6721 6838 0
-6663 -6719 6836 0
-6663 -6718 6834 0
-6661 6864 0
-6661 -6747 6862 0
-6661 -6745 6860 0
-6661 -6743 6858 0
-6661 -6741 6856 0
-6661 -6739 6854 0
-6661 -6737 6852 0
-6661 -6735 6850 0
-6661 -6733 6848 0
-6661 -6731 6846 0
-6661 -6729 6844 0
-6661 -6727 6842 0
-6661 -6725 6840 0
-6661 -6723 6838 0
-6661 -6721 6836 0
-6661 -6719 6834 0
-6661 -6718 6832 0
-6659 6862 0
-6659 -6747 6860 0
-6659 -6745 6858 0
-6659 -6743 6856 0
-6659 -6741 6854 0
-6659 -6739 6852 0
-6659 -6737 6850 0
-6659 -6735 6848 0
-6659 -6733 6846 0
-6659 -6731 6844 0
-6659 -6729 6842 0
-6659 -6727 6840 0
-6659 -6725 6838 0
-6659 -6723 6836 0
-6659 -6721 6834 0
-6659 -6719 6832 0
-6659 -6718 6830 0
-6657 6860 0
-6657 -6747 6858 0
-6657 -6745 6856 0
-6657 -6743 6854 0
-6657 -6741 6852 0
-6657 -6739 6850 0
-6657 -6737 6848 0
-6657 -6735 6846 0
-6657 -6733 6844 0
-6657 -6731 6842 0
-6657 -6729 6840 0
-6657 -6727 6838 0
-6657 -6725 6836 0
-6657 -6723 6834 0
-6657 -6721 6832 0
-6657 -6719 6830 0
-6657 -6718 6828 0
-6656 6858 0
-6656 -6747 6856 0
-6656 -6745 6854 0
-6656 -6743 6852 0
-6656 -6741 6850 0
-6656 -6739 6848 0
-6656 -6737 6846 0
-6656 -6735 6844 0
-6656 -6733 6842 0
-6656 -6731 6840 0
-6656 -6729 6838 0
-6656 -6727 6836 0
-6656 -6725 6834 0
-6656 -6723 6832 0
-6656 -6721 6830 0
-6656 -6719 6828 0
-6656 -6718 6827 0
c ((shift(x_00007_00001, -1) - aux593 + shift(x_00009_00003, -1))<=0)
1112 -6890 0
1113 -6891 0
1115 -6893 0
1117 -6895 0
1119 -6897 0
1121 -6899 0
1123 -6901 0
1125 -6903 0
812 -6890 0
812 1112 -6891 0
812 1113 -6893 0
812 1115 -6895 0
812 1117 -6897 0
812 1119 -6899 0
812 1121 -6901 0
812 1123 -6903 0
812 1125 -6905 0
813 -6891 0
813 1112 -6893 0
813 1113 -6895 0
813 1115 -6897 0
813 1117 -6899 0
813 1119 -6901 0
813 1121 -6903 0
813 1123 -6905 0
813 1125 -6907 0
815 -6893 0
815 1112 -6895 0
815 1113 -6897 0
815 1115 -6899 0
815 1117 -6901 0
815 1119 -6903 0
815 1121 -6905 0
815 1123 -6907 0
815 1125 -6909 0
817 -6895 0
817 1112 -6897 0
817 1113 -6899 0
817 1115 -6901 0
817 1117 -6903 0
817 1119 -6905 0
817 1121 -6907 0
817 1123 -6909 0
817 1125 -6911 0
819 -6897 0
819 1112 -6899 0
819 1113 -6901 0
819 1115 -6903 0
819 1117 -6905 0
819 1119 -6907 0
819 1121 -6909 0
819 1123 -6911 0
819 1125 -6913 0
821 -6899 0
821 1112 -6901 0
821 1113 -6903 0
821 1115 -6905 0
821 1117 -6907 0
821 1119 -6909 0
821 1121 -6911 0
821 1123 -6913 0
821 1125 -6915 0
823 -6901 0
823 1112 -6903 0
823 1113 -6905 0
823 1115 -6907 0
823 1117 -6909 0
823 1119 -6911 0
823 1121 -6913 0
823 1123 -6915 0
823 1125 -6917 0
825 -6903 0
825 1112 -6905 0
825 1113 -6907 0
825 1115 -6909 0
825 1117 -6911 0
825 1119 -6913 0
825 1121 -6915 0
825 1123 -6917 0
825 1125 -6919 0
c (0<=(shift(x_00007_00001, -1) - aux593 + shift(x_00009_00003, -1)))
-1125 6919 0
-1123 6917 0
-1121 6915 0
-1119 6913 0
-1117 6911 0
-1115 6909 0
-1113 6907 0
-1112 6905 0
-825 6919 0
-825 -1125 6917 0
-825 -1123 6915 0
-825 -1121 6913 0
-825 -1119 6911 0
-825 -1117 6909 0
-825 -1115 6907 0
-825 -1113 6905 0
-825 -1112 6903 0
-823 6917 0
-823 -1125 6915 0
-823 -1123 6913 0
-823 -1121 6911 0
-823 -1119 6909 0
-823 -1117 6907 0
-823 -1115 6905 0
-823 -1113 6903 0
-823 -1112 6901 0
-821 6915 0
-821 -1125 6913 0
-821 -1123 6911 0
-821 -1121 6909 0
-821 -1119 6907 0
-821 -1117 6905 0
-821 -1115 6903 0
-821 -1113 6901 0
-821 -1112 6899 0
-819 6913 0
-819 -1125 6911 0
-819 -1123 6909 0
-819 -1121 6907 0
-819 -1119 6905 0
-819 -1117 6903 0
-819 -1115 6901 0
-819 -1113 6899 0
-819 -1112 6897 0
-817 6911 0
-817 -1125 6909 0
-817 -1123 6907 0
-817 -1121 6905 0
-817 -1119 6903 0
-817 -1117 6901 0
-817 -1115 6899 0
-817 -1113 6897 0
-817 -1112 6895 0
-815 6909 0
-815 -1125 6907 0
-815 -1123 6905 0
-815 -1121 6903 0
-815 -1119 6901 0
-815 -1117 6899 0
-815 -1115 6897 0
-815 -1113 6895 0
-815 -1112 6893 0
-813 6907 0
-813 -1125 6905 0
-813 -1123 6903 0
-813 -1121 6901 0
-813 -1119 6899 0
-813 -1117 6897 0
-813 -1115 6895 0
-813 -1113 6893 0
-813 -1112 6891 0
-812 6905 0
-812 -1125 6903 0
-812 -1123 6901 0
-812 -1121 6899 0
-812 -1119 6897 0
-812 -1117 6895 0
-812 -1115 6893 0
-812 -1113 6891 0
-812 -1112 6890 0
c ((shift(x_00007_00002, -1) - aux594 + shift(x_00009_00002, -1))<=0)
1097 -6921 0
1098 -6922 0
1100 -6924 0
1102 -6926 0
1104 -6928 0
1106 -6930 0
1108 -6932 0
1110 -6934 0
827 -6921 0
827 1097 -6922 0
827 1098 -6924 0
827 1100 -6926 0
827 1102 -6928 0
827 1104 -6930 0
827 1106 -6932 0
827 1108 -6934 0
827 1110 -6936 0
828 -6922 0
828 1097 -6924 0
828 1098 -6926 0
828 1100 -6928 0
828 1102 -6930 0
828 1104 -6932 0
828 1106 -6934 0
828 1108 -6936 0
828 1110 -6938 0
830 -6924 0
830 1097 -6926 0
830 1098 -6928 0
830 1100 -6930 0
830 1102 -6932 0
830 1104 -6934 0
830 1106 -6936 0
830 1108 -6938 0
830 1110 -6940 0
832 -6926 0
832 1097 -6928 0
832 1098 -6930 0
832 1100 -6932 0
832 1102 -6934 0
832 1104 -6936 0
832 1106 -6938 0
832 1108 -6940 0
832 1110 -6942 0
834 -6928 0
834 1097 -6930 0
834 1098 -6932 0
834 1100 -6934 0
834 1102 -6936 0
834 1104 -6938 0
834 1106 -6940 0
834 1108 -6942 0
834 1110 -6944 0
836 -6930 0
836 1097 -6932 0
836 1098 -6934 0
836 1100 -6936 0
836 1102 -6938 0
836 1104 -6940 0
836 1106 -6942 0
836 1108 -6944 0
836 1110 -6946 0
838 -6932 0
838 1097 -6934 0
838 1098 -6936 0
838 1100 -6938 0
838 1102 -6940 0
838 1104 -6942 0
838 1106 -6944 0
838 1108 -6946 0
838 1110 -6948 0
840 -6934 0
840 1097 -6936 0
840 1098 -6938 0
840 1100 -6940 0
840 1102 -6942 0
840 1104 -6944 0
840 1106 -6946 0
840 1108 -6948 0
840 1110 -6950 0
c (0<=(shift(x_00007_00002, -1) - aux594 + shift(x_00009_00002, -1)))
-1110 6950 0
-1108 6948 0
-1106 6946 0
-1104 6944 0
-1102 6942 0
-1100 6940 0
-1098 6938 0
-1097 6936 0
-840 6950 0
-840 -1110 6948 0
-840 -1108 6946 0
-840 -1106 6944 0
-840 -1104 6942 0
-840 -1102 6940 0
-840 -1100 6938 0
-840 -1098 6936 0
-840 -1097 6934 0
-838 6948 0
-838 -1110 6946 0
-838 -1108 6944 0
-838 -1106 6942 0
-838 -1104 6940 0
-838 -1102 6938 0
-838 -1100 6936 0
-838 -1098 6934 0
-838 -1097 6932 0
-836 6946 0
-836 -1110 6944 0
-836 -1108 6942 0
-836 -1106 6940 0
-836 -1104 6938 0
-836 -1102 6936 0
-836 -1100 6934 0
-836 -1098 6932 0
-836 -1097 6930 0
-834 6944 0
-834 -1110 6942 0
-834 -1108 6940 0
-834 -1106 6938 0
-834 -1104 6936 0
-834 -1102 6934 0
-834 -1100 6932 0
-834 -1098 6930 0
-834 -1097 6928 0
-832 6942 0
-832 -1110 6940 0
-832 -1108 6938 0
-832 -1106 6936 0
-832 -1104 6934 0
-832 -1102 6932 0
-832 -1100 6930 0
-832 -1098 6928 0
-832 -1097 6926 0
-830 6940 0
-830 -1110 6938 0
-830 -1108 6936 0
-830 -1106 6934 0
-830 -1104 6932 0
-830 -1102 6930 0
-830 -1100 6928 0
-830 -1098 6926 0
-830 -1097 6924 0
-828 6938 0
-828 -1110 6936 0
-828 -1108 6934 0
-828 -1106 6932 0
-828 -1104 6930 0
-828 -1102 6928 0
-828 -1100 6926 0
-828 -1098 6924 0
-828 -1097 6922 0
-827 6936 0
-827 -1110 6934 0
-827 -1108 6932 0
-827 -1106 6930 0
-827 -1104 6928 0
-827 -1102 6926 0
-827 -1100 6924 0
-827 -1098 6922 0
-827 -1097 6921 0
c (( - aux595 + shift(x_00008_00001, -1) + shift(x_00009_00001, -1))<=0)
1082 -6952 0
1083 -6953 0
1085 -6955 0
1087 -6957 0
1089 -6959 0
1091 -6961 0
1093 -6963 0
1095 -6965 0
947 -6952 0
947 1082 -6953 0
947 1083 -6955 0
947 1085 -6957 0
947 1087 -6959 0
947 1089 -6961 0
947 1091 -6963 0
947 1093 -6965 0
947 1095 -6967 0
948 -6953 0
948 1082 -6955 0
948 1083 -6957 0
948 1085 -6959 0
948 1087 -6961 0
948 1089 -6963 0
948 1091 -6965 0
948 1093 -6967 0
948 1095 -6969 0
950 -6955 0
950 1082 -6957 0
950 1083 -6959 0
950 1085 -6961 0
950 1087 -6963 0
950 1089 -6965 0
950 1091 -6967 0
950 1093 -6969 0
950 1095 -6971 0
952 -6957 0
952 1082 -6959 0
952 1083 -6961 0
952 1085 -6963 0
952 1087 -6965 0
952 1089 -6967 0
952 1091 -6969 0
952 1093 -6971 0
952 1095 -6973 0
954 -6959 0
954 1082 -6961 0
954 1083 -6963 0
954 1085 -6965 0
954 1087 -6967 0
954 1089 -6969 0
954 1091 -6971 0
954 1093 -6973 0
954 1095 -6975 0
956 -6961 0
956 1082 -6963 0
956 1083 -6965 0
956 1085 -6967 0
956 1087 -6969 0
956 1089 -6971 0
956 1091 -6973 0
956 1093 -6975 0
956 1095 -6977 0
958 -6963 0
958 1082 -6965 0
958 1083 -6967 0
958 1085 -6969 0
958 1087 -6971 0
958 1089 -6973 0
958 1091 -6975 0
958 1093 -6977 0
958 1095 -6979 0
960 -6965 0
960 1082 -6967 0
960 1083 -6969 0
960 1085 -6971 0
960 1087 -6973 0
960 1089 -6975 0
960 1091 -6977 0
960 1093 -6979 0
960 1095 -6981 0
c (0<=( - aux595 + shift(x_00008_00001, -1) + shift(x_00009_00001, -1)))
-1095 6981 0
-1093 6979 0
-1091 6977 0
-1089 6975 0
-1087 6973 0
-1085 6971 0
-1083 6969 0
-1082 6967 0
-960 6981 0
-960 -1095 6979 0
-960 -1093 6977 0
-960 -1091 6975 0
-960 -1089 6973 0
-960 -1087 6971 0
-960 -1085 6969 0
-960 -1083 6967 0
-960 -1082 6965 0
-958 6979 0
-958 -1095 6977 0
-958 -1093 6975 0
-958 -1091 6973 0
-958 -1089 6971 0
-958 -1087 6969 0
-958 -1085 6967 0
-958 -1083 6965 0
-958 -1082 6963 0
-956 6977 0
-956 -1095 6975 0
-956 -1093 6973 0
-956 -1091 6971 0
-956 -1089 6969 0
-956 -1087 6967 0
-956 -1085 6965 0
-956 -1083 6963 0
-956 -1082 6961 0
-954 6975 0
-954 -1095 6973 0
-954 -1093 6971 0
-954 -1091 6969 0
-954 -1089 6967 0
-954 -1087 6965 0
-954 -1085 6963 0
-954 -1083 6961 0
-954 -1082 6959 0
-952 6973 0
-952 -1095 6971 0
-952 -1093 6969 0
-952 -1091 6967 0
-952 -1089 6965 0
-952 -1087 6963 0
-952 -1085 6961 0
-952 -1083 6959 0
-952 -1082 6957 0
-950 6971 0
-950 -1095 6969 0
-950 -1093 6967 0
-950 -1091 6965 0
-950 -1089 6963 0
-950 -1087 6961 0
-950 -1085 6959 0
-950 -1083 6957 0
-950 -1082 6955 0
-948 6969 0
-948 -1095 6967 0
-948 -1093 6965 0
-948 -1091 6963 0
-948 -1089 6961 0
-948 -1087 6959 0
-948 -1085 6957 0
-948 -1083 6955 0
-948 -1082 6953 0
-947 6967 0
-947 -1095 6965 0
-947 -1093 6963 0
-947 -1091 6961 0
-947 -1089 6959 0
-947 -1087 6957 0
-947 -1085 6955 0
-947 -1083 6953 0
-947 -1082 6952 0
c (( - aux596 + shift(x_00008_00002, -1) + shift(x_00008_00003, -1))<=0)
977 -6983 0
978 -6984 0
980 -6986 0
982 -6988 0
984 -6990 0
986 -6992 0
988 -6994 0
990 -6996 0
962 -6983 0
962 977 -6984 0
962 978 -6986 0
962 980 -6988 0
962 982 -6990 0
962 984 -6992 0
962 986 -6994 0
962 988 -6996 0
962 990 -6998 0
963 -6984 0
963 977 -6986 0
963 978 -6988 0
963 980 -6990 0
963 982 -6992 0
963 984 -6994 0
963 986 -6996 0
963 988 -6998 0
963 990 -7000 0
965 -6986 0
965 977 -6988 0
965 978 -6990 0
965 980 -6992 0
965 982 -6994 0
965 984 -6996 0
965 986 -6998 0
965 988 -7000 0
965 990 -7002 0
967 -6988 0
967 977 -6990 0
967 978 -6992 0
967 980 -6994 0
967 982 -6996 0
967 984 -6998 0
967 986 -7000 0
967 988 -7002 0
967 990 -7004 0
969 -6990 0
969 977 -6992 0
969 978 -6994 0
969 980 -6996 0
969 982 -6998 0
969 984 -7000 0
969 986 -7002 0
969 988 -7004 0
969 990 -7006 0
971 -6992 0
971 977 -6994 0
971 978 -6996 0
971 980 -6998 0
971 982 -7000 0
971 984 -7002 0
971 986 -7004 0
971 988 -7006 0
971 990 -7008 0
973 -6994 0
973 977 -6996 0
973 978 -6998 0
973 980 -7000 0
973 982 -7002 0
973 984 -7004 0
973 986 -7006 0
973 988 -7008 0
973 990 -7010 0
975 -6996 0
975 977 -6998 0
975 978 -7000 0
975 980 -7002 0
975 982 -7004 0
975 984 -7006 0
975 986 -7008 0
975 988 -7010 0
975 990 -7012 0
c (0<=( - aux596 + shift(x_00008_00002, -1) + shift(x_00008_00003, -1)))
-990 7012 0
-988 7010 0
-986 7008 0
-984 7006 0
-982 7004 0
-980 7002 0
-978 7000 0
-977 6998 0
-975 7012 0
-975 -990 7010 0
-975 -988 7008 0
-975 -986 7006 0
-975 -984 7004 0
-975 -982 7002 0
-975 -980 7000 0
-975 -978 6998 0
-975 -977 6996 0
-973 7010 0
-973 -990 7008 0
-973 -988 7006 0
-973 -986 7004 0
-973 -984 7002 0
-973 -982 7000 0
-973 -980 6998 0
-973 -978 6996 0
-973 -977 6994 0
-971 7008 0
-971 -990 7006 0
-971 -988 7004 0
-971 -986 7002 0
-971 -984 7000 0
-971 -982 6998 0
-971 -980 6996 0
-971 -978 6994 0
-971 -977 6992 0
-969 7006 0
-969 -990 7004 0
-969 -988 7002 0
-969 -986 7000 0
-969 -984 6998 0
-969 -982 6996 0
-969 -980 6994 0
-969 -978 6992 0
-969 -977 6990 0
-967 7004 0
-967 -990 7002 0
-967 -988 7000 0
-967 -986 6998 0
-967 -984 6996 0
-967 -982 6994 0
-967 -980 6992 0
-967 -978 6990 0
-967 -977 6988 0
-965 7002 0
-965 -990 7000 0
-965 -988 6998 0
-965 -986 6996 0
-965 -984 6994 0
-965 -982 6992 0
-965 -980 6990 0
-965 -978 6988 0
-965 -977 6986 0
-963 7000 0
-963 -990 6998 0
-963 -988 6996 0
-963 -986 6994 0
-963 -984 6992 0
-963 -982 6990 0
-963 -980 6988 0
-963 -978 6986 0
-963 -977 6984 0
-962 6998 0
-962 -990 6996 0
-962 -988 6994 0
-962 -986 6992 0
-962 -984 6990 0
-962 -982 6988 0
-962 -980 6986 0
-962 -978 6984 0
-962 -977 6983 0
c ((shift(x_00007_00003, -1) + aux596 - aux597)<=0)
6983 -7014 0
6984 -7015 0
6986 -7017 0
6988 -7019 0
6990 -7021 0
6992 -7023 0
6994 -7025 0
6996 -7027 0
6998 -7029 0
7000 -7031 0
7002 -7033 0
7004 -7035 0
7006 -7037 0
7008 -7039 0
7010 -7041 0
7012 -7043 0
842 -7014 0
842 6983 -7015 0
842 6984 -7017 0
842 6986 -7019 0
842 6988 -7021 0
842 6990 -7023 0
842 6992 -7025 0
842 6994 -7027 0
842 6996 -7029 0
842 6998 -7031 0
842 7000 -7033 0
842 7002 -7035 0
842 7004 -7037 0
842 7006 -7039 0
842 7008 -7041 0
842 7010 -7043 0
842 7012 -7045 0
843 -7015 0
843 6983 -7017 0
843 6984 -7019 0
843 6986 -7021 0
843 6988 -7023 0
843 6990 -7025 0
843 6992 -7027 0
843 6994 -7029 0
843 6996 -7031 0
843 6998 -7033 0
843 7000 -7035 0
843 7002 -7037 0
843 7004 -7039 0
843 7006 -7041 0
843 7008 -7043 0
843 7010 -7045 0
843 7012 -7047 0
845 -7017 0
845 6983 -7019 0
845 6984 -7021 0
845 6986 -7023 0
845 6988 -7025 0
845 6990 -7027 0
845 6992 -7029 0
845 6994 -7031 0
845 6996 -7033 0
845 6998 -7035 0
845 7000 -7037 0
845 7002 -7039 0
845 7004 -7041 0
845 7006 -7043 0
845 7008 -7045 0
845 7010 -7047 0
845 7012 -7049 0
847 -7019 0
847 6983 -7021 0
847 6984 -7023 0
847 6986 -7025 0
847 6988 -7027 0
847 6990 -7029 0
847 6992 -7031 0
847 6994 -7033 0
847 6996 -7035 0
847 6998 -7037 0
847 7000 -7039 0
847 7002 -7041 0
847 7004 -7043 0
847 7006 -7045 0
847 7008 -7047 0
847 7010 -7049 0
847 7012 -7051 0
849 -7021 0
849 6983 -7023 0
849 6984 -7025 0
849 6986 -7027 0
849 6988 -7029 0
849 6990 -7031 0
849 6992 -7033 0
849 6994 -7035 0
849 6996 -7037 0
849 6998 -7039 0
849 7000 -7041 0
849 7002 -7043 0
849 7004 -7045 0
849 7006 -7047 0
849 7008 -7049 0
849 7010 -7051 0
849 7012 -7053 0
851 -7023 0
851 6983 -7025 0
851 6984 -7027 0
851 6986 -7029 0
851 6988 -7031 0
851 6990 -7033 0
851 6992 -7035 0
851 6994 -7037 0
851 6996 -7039 0
851 6998 -7041 0
851 7000 -7043 0
851 7002 -7045 0
851 7004 -7047 0
851 7006 -7049 0
851 7008 -7051 0
851 7010 -7053 0
851 7012 -7055 0
853 -7025 0
853 6983 -7027 0
853 6984 -7029 0
853 6986 -7031 0
853 6988 -7033 0
853 6990 -7035 0
853 6992 -7037 0
853 6994 -7039 0
853 6996 -7041 0
853 6998 -7043 0
853 7000 -7045 0
853 7002 -7047 0
853 7004 -7049 0
853 7006 -7051 0
853 7008 -7053 0
853 7010 -7055 0
853 7012 -7057 0
855 -7027 0
855 6983 -7029 0
855 6984 -7031 0
855 6986 -7033 0
855 6988 -7035 0
855 6990 -7037 0
855 6992 -7039 0
855 6994 -7041 0
855 6996 -7043 0
855 6998 -7045 0
855 7000 -7047 0
855 7002 -7049 0
855 7004 -7051 0
855 7006 -7053 0
855 7008 -7055 0
855 7010 -7057 0
855 7012 -7059 0
c (0<=(shift(x_00007_00003, -1) + aux596 - aux597))
-7012 7059 0
-7010 7057 0
-7008 7055 0
-7006 7053 0
-7004 7051 0
-7002 7049 0
-7000 7047 0
-6998 7045 0
-6996 7043 0
-6994 7041 0
-6992 7039 0
-6990 7037 0
-6988 7035 0
-6986 7033 0
-6984 7031 0
-6983 7029 0
-855 7059 0
-855 -7012 7057 0
-855 -7010 7055 0
-855 -7008 7053 0
-855 -7006 7051 0
-855 -7004 7049 0
-855 -7002 7047 0
-855 -7000 7045 0
-855 -6998 7043 0
-855 -6996 7041 0
-855 -6994 7039 0
-855 -6992 7037 0
-855 -6990 7035 0
-855 -6988 7033 0
-855 -6986 7031 0
-855 -6984 7029 0
-855 -6983 7027 0
-853 7057 0
-853 -7012 7055 0
-853 -7010 7053 0
-853 -7008 7051 0
-853 -7006 7049 0
-853 -7004 7047 0
-853 -7002 7045 0
-853 -7000 7043 0
-853 -6998 7041 0
-853 -6996 7039 0
-853 -6994 7037 0
-853 -6992 7035 0
-853 -6990 7033 0
-853 -6988 7031 0
-853 -6986 7029 0
-853 -6984 7027 0
-853 -6983 7025 0
-851 7055 0
-851 -7012 7053 0
-851 -7010 7051 0
-851 -7008 7049 0
-851 -7006 7047 0
-851 -7004 7045 0
-851 -7002 7043 0
-851 -7000 7041 0
-851 -6998 7039 0
-851 -6996 7037 0
-851 -6994 7035 0
-851 -6992 7033 0
-851 -6990 7031 0
-851 -6988 7029 0
-851 -6986 7027 0
-851 -6984 7025 0
-851 -6983 7023 0
-849 7053 0
-849 -7012 7051 0
-849 -7010 7049 0
-849 -7008 7047 0
-849 -7006 7045 0
-849 -7004 7043 0
-849 -7002 7041 0
-849 -7000 7039 0
-849 -6998 7037 0
-849 -6996 7035 0
-849 -6994 7033 0
-849 -6992 7031 0
-849 -6990 7029 0
-849 -6988 7027 0
-849 -6986 7025 0
-849 -6984 7023 0
-849 -6983 7021 0
-847 7051 0
-847 -7012 7049 0
-847 -7010 7047 0
-847 -7008 7045 0
-847 -7006 7043 0
-847 -7004 7041 0
-847 -7002 7039 0
-847 -7000 7037 0
-847 -6998 7035 0
-847 -6996 7033 0
-847 -6994 7031 0
-847 -6992 7029 0
-847 -6990 7027 0
-847 -6988 7025 0
-847 -6986 7023 0
-847 -6984 7021 0
-847 -6983 7019 0
-845 7049 0
-845 -7012 7047 0
-845 -7010 7045 0
-845 -7008 7043 0
-845 -7006 7041 0
-845 -7004 7039 0
-845 -7002 7037 0
-845 -7000 7035 0
-845 -6998 7033 0
-845 -6996 7031 0
-845 -6994 7029 0
-845 -6992 7027 0
-845 -6990 7025 0
-845 -6988 7023 0
-845 -6986 7021 0
-845 -6984 7019 0
-845 -6983 7017 0
-843 7047 0
-843 -7012 7045 0
-843 -7010 7043 0
-843 -7008 7041 0
-843 -7006 7039 0
-843 -7004 7037 0
-843 -7002 7035 0
-843 -7000 7033 0
-843 -6998 7031 0
-843 -6996 7029 0
-843 -6994 7027 0
-843 -6992 7025 0
-843 -6990 7023 0
-843 -6988 7021 0
-843 -6986 7019 0
-843 -6984 7017 0
-843 -6983 7015 0
-842 7045 0
-842 -7012 7043 0
-842 -7010 7041 0
-842 -7008 7039 0
-842 -7006 7037 0
-842 -7004 7035 0
-842 -7002 7033 0
-842 -7000 7031 0
-842 -6998 7029 0
-842 -6996 7027 0
-842 -6994 7025 0
-842 -6992 7023 0
-842 -6990 7021 0
-842 -6988 7019 0
-842 -6986 7017 0
-842 -6984 7015 0
-842 -6983 7014 0
c ((aux593 + aux595 - aux598)<=0)
6952 -7061 0
6953 -7062 0
6955 -7064 0
6957 -7066 0
6959 -7068 0
6961 -7070 0
6963 -7072 0
6965 -7074 0
6967 -7076 0
6969 -7078 0
6971 -7080 0
6973 -7082 0
6975 -7084 0
6977 -7086 0
6979 -7088 0
6981 -7090 0
6890 -7061 0
6890 6952 -7062 0
6890 6953 -7064 0
6890 6955 -7066 0
6890 6957 -7068 0
6890 6959 -7070 0
6890 6961 -7072 0
6890 6963 -7074 0
6890 6965 -7076 0
6890 6967 -7078 0
6890 6969 -7080 0
6890 6971 -7082 0
6890 6973 -7084 0
6890 6975 -7086 0
6890 6977 -7088 0
6890 6979 -7090 0
6890 6981 -7092 0
6891 -7062 0
6891 6952 -7064 0
6891 6953 -7066 0
6891 6955 -7068 0
6891 6957 -7070 0
6891 6959 -7072 0
6891 6961 -7074 0
6891 6963 -7076 0
6891 6965 -7078 0
6891 6967 -7080 0
6891 6969 -7082 0
6891 6971 -7084 0
6891 6973 -7086 0
6891 6975 -7088 0
6891 6977 -7090 0
6891 6979 -7092 0
6891 6981 -7094 0
6893 -7064 0
6893 6952 -7066 0
6893 6953 -7068 0
6893 6955 -7070 0
6893 6957 -7072 0
6893 6959 -7074 0
6893 6961 -7076 0
6893 6963 -7078 0
6893 6965 -7080 0
6893 6967 -7082 0
6893 6969 -7084 0
6893 6971 -7086 0
6893 6973 -7088 0
6893 6975 -7090 0
6893 6977 -7092 0
6893 6979 -7094 0
6893 6981 -7096 0
6895 -7066 0
6895 6952 -7068 0
6895 6953 -7070 0
6895 6955 -7072 0
6895 6957 -7074 0
6895 6959 -7076 0
6895 6961 -7078 0
6895 6963 -7080 0
6895 6965 -7082 0
6895 6967 -7084 0
6895 6969 -7086 0
6895 6971 -7088 0
6895 6973 -7090 0
6895 6975 -7092 0
6895 6977 -7094 0
6895 6979 -7096 0
6895 6981 -7098 0
6897 -7068 0
6897 6952 -7070 0
6897 6953 -7072 0
6897 6955 -7074 0
6897 6957 -7076 0
6897 6959 -7078 0
6897 6961 -7080 0
6897 6963 -7082 0
6897 6965 -7084 0
6897 6967 -7086 0
6897 6969 -7088 0
6897 6971 -7090 0
6897 6973 -7092 0
6897 6975 -7094 0
6897 6977 -7096 0
6897 6979 -7098 0
6897 6981 -7100 0
6899 -7070 0
6899 6952 -7072 0
6899 6953 -7074 0
6899 6955 -7076 0
6899 6957 -7078 0
6899 6959 -7080 0
6899 6961 -7082 0
6899 6963 -7084 0
6899 6965 -7086 0
6899 6967 -7088 0
6899 6969 -7090 0
6899 6971 -7092 0
6899 6973 -7094 0
6899 6975 -7096 0
6899 6977 -7098 0
6899 6979 -7100 0
6899 6981 -7102 0
6901 -7072 0
6901 6952 -7074 0
6901 6953 -7076 0
6901 6955 -7078 0
6901 6957 -7080 0
6901 6959 -7082 0
6901 6961 -7084 0
6901 6963 -7086 0
6901 6965 -7088 0
6901 6967 -7090 0
6901 6969 -7092 0
6901 6971 -7094 0
6901 6973 -7096 0
6901 6975 -7098 0
6901 6977 -7100 0
6901 6979 -7102 0
6901 6981 -7104 0
6903 -7074 0
6903 6952 -7076 0
6903 6953 -7078 0
6903 6955 -7080 0
6903 6957 -7082 0
6903 6959 -7084 0
6903 6961 -7086 0
6903 6963 -7088 0
6903 6965 -7090 0
6903 6967 -7092 0
6903 6969 -7094 0
6903 6971 -7096 0
6903 6973 -7098 0
6903 6975 -7100 0
6903 6977 -7102 0
6903 6979 -7104 0
6903 6981 -7106 0
6905 -7076 0
6905 6952 -7078 0
6905 6953 -7080 0
6905 6955 -7082 0
6905 6957 -7084 0
6905 6959 -7086 0
6905 6961 -7088 0
6905 6963 -7090 0
6905 6965 -7092 0
6905 6967 -7094 0
6905 6969 -7096 0
6905 6971 -7098 0
6905 6973 -7100 0
6905 6975 -7102 0
6905 6977 -7104 0
6905 6979 -7106 0
6905 6981 -7108 0
6907 -7078 0
6907 6952 -7080 0
6907 6953 -7082 0
6907 6955 -7084 0
6907 6957 -7086 0
6907 6959 -7088 0
6907 6961 -7090 0
6907 6963 -7092 0
6907 6965 -7094 0
6907 6967 -7096 0
6907 6969 -7098 0
6907 6971 -7100 0
6907 6973 -7102 0
6907 6975 -7104 0
6907 6977 -7106 0
6907 6979 -7108 0
6907 6981 -7110 0
6909 -7080 0
6909 6952 -7082 0
6909 6953 -7084 0
6909 6955 -7086 0
6909 6957 -7088 0
6909 6959 -7090 0
6909 6961 -7092 0
6909 6963 -7094 0
6909 6965 -7096 0
6909 6967 -7098 0
6909 6969 -7100 0
6909 6971 -7102 0
6909 6973 -7104 0
6909 6975 -7106 0
6909 6977 -7108 0
6909 6979 -7110 0
6909 6981 -7112 0
6911 -7082 0
6911 6952 -7084 0
6911 6953 -7086 0
6911 6955 -7088 0
6911 6957 -7090 0
6911 6959 -7092 0
6911 6961 -7094 0
6911 6963 -7096 0
6911 6965 -7098 0
6911 6967 -7100 0
6911 6969 -7102 0
6911 6971 -7104 0
6911 6973 -7106 0
6911 6975 -7108 0
6911 6977 -7110 0
6911 6979 -7112 0
6911 6981 -7114 0
6913 -7084 0
6913 6952 -7086 0
6913 6953 -7088 0
6913 6955 -7090 0
6913 6957 -7092 0
6913 6959 -7094 0
6913 6961 -7096 0
6913 6963 -7098 0
6913 6965 -7100 0
6913 6967 -7102 0
6913 6969 -7104 0
6913 6971 -7106 0
6913 6973 -7108 0
6913 6975 -7110 0
6913 6977 -7112 0
6913 6979 -7114 0
6913 6981 -7116 0
6915 -7086 0
6915 6952 -7088 0
6915 6953 -7090 0
6915 6955 -7092 0
6915 6957 -7094 0
6915 6959 -7096 0
6915 6961 -7098 0
6915 6963 -7100 0
6915 6965 -7102 0
6915 6967 -7104 0
6915 6969 -7106 0
6915 6971 -7108 0
6915 6973 -7110 0
6915 6975 -7112 0
6915 6977 -7114 0
6915 6979 -7116 0
6915 6981 -7118 0
6917 -7088 0
6917 6952 -7090 0
6917 6953 -7092 0
6917 6955 -7094 0
6917 6957 -7096 0
6917 6959 -7098 0
6917 6961 -7100 0
6917 6963 -7102 0
6917 6965 -7104 0
6917 6967 -7106 0
6917 6969 -7108 0
6917 6971 -7110 0
6917 6973 -7112 0
6917 6975 -7114 0
6917 6977 -7116 0
6917 6979 -7118 0
6917 6981 -7120 0
6919 -7090 0
6919 6952 -7092 0
6919 6953 -7094 0
6919 6955 -7096 0
6919 6957 -7098 0
6919 6959 -7100 0
6919 6961 -7102 0
6919 6963 -7104 0
6919 6965 -7106 0
6919 6967 -7108 0
6919 6969 -7110 0
6919 6971 -7112 0
6919 6973 -7114 0
6919 6975 -7116 0
6919 6977 -7118 0
6919 6979 -7120 0
6919 6981 -7122 0
c (0<=(aux593 + aux595 - aux598))
-6981 7122 0
-6979 7120 0
-6977 7118 0
-6975 7116 0
-6973 7114 0
-6971 7112 0
-6969 7110 0
-6967 7108 0
-6965 7106 0
-6963 7104 0
-6961 7102 0
-6959 7100 0
-6957 7098 0
-6955 7096 0
-6953 7094 0
-6952 7092 0
-6919 7122 0
-6919 -6981 7120 0
-6919 -6979 7118 0
-6919 -6977 7116 0
-6919 -6975 7114 0
-6919 -6973 7112 0
-6919 -6971 7110 0
-6919 -6969 7108 0
-6919 -6967 7106 0
-6919 -6965 7104 0
-6919 -6963 7102 0
-6919 -6961 7100 0
-6919 -6959 7098 0
-6919 -6957 7096 0
-6919 -6955 7094 0
-6919 -6953 7092 0
-6919 -6952 7090 0
-6917 7120 0
-6917 -6981 7118 0
-6917 -6979 7116 0
-6917 -6977 7114 0
-6917 -6975 7112 0
-6917 -6973 7110 0
-6917 -6971 7108 0
-6917 -6969 7106 0
-6917 -6967 7104 0
-6917 -6965 7102 0
-6917 -6963 7100 0
-6917 -6961 7098 0
-6917 -6959 7096 0
-6917 -6957 7094 0
-6917 -6955 7092 0
-6917 -6953 7090 0
-6917 -6952 7088 0
-6915 7118 0
-6915 -6981 7116 0
-6915 -6979 7114 0
-6915 -6977 7112 0
-6915 -6975 7110 0
-6915 -6973 7108 0
-6915 -6971 7106 0
-6915 -6969 7104 0
-6915 -6967 7102 0
-6915 -6965 7100 0
-6915 -6963 7098 0
-6915 -6961 7096 0
-6915 -6959 7094 0
-6915 -6957 7092 0
-6915 -6955 7090 0
-6915 -6953 7088 0
-6915 -6952 7086 0
-6913 7116 0
-6913 -6981 7114 0
-6913 -6979 7112 0
-6913 -6977 7110 0
-6913 -6975 7108 0
-6913 -6973 7106 0
-6913 -6971 7104 0
-6913 -6969 7102 0
-6913 -6967 7100 0
-6913 -6965 7098 0
-6913 -6963 7096 0
-6913 -6961 7094 0
-6913 -6959 7092 0
-6913 -6957 7090 0
-6913 -6955 7088 0
-6913 -6953 7086 0
-6913 -6952 7084 0
-6911 7114 0
-6911 -6981 7112 0
-6911 -6979 7110 0
-6911 -6977 7108 0
-6911 -6975 7106 0
-6911 -6973 7104 0
-6911 -6971 7102 0
-6911 -6969 7100 0
-6911 -6967 7098 0
-6911 -6965 7096 0
-6911 -6963 7094 0
-6911 -6961 7092 0
-6911 -6959 7090 0
-6911 -6957 7088 0
-6911 -6955 7086 0
-6911 -6953 7084 0
-6911 -6952 7082 0
-6909 7112 0
-6909 -6981 7110 0
-6909 -6979 7108 0
-6909 -6977 7106 0
-6909 -6975 7104 0
-6909 -6973 7102 0
-6909 -6971 7100 0
-6909 -6969 7098 0
-6909 -6967 7096 0
-6909 -6965 7094 0
-6909 -6963 7092 0
-6909 -6961 7090 0
-6909 -6959 7088 0
-6909 -6957 7086 0
-6909 -6955 7084 0
-6909 -6953 7082 0
-6909 -6952 7080 0
-6907 7110 0
-6907 -6981 7108 0
-6907 -6979 7106 0
-6907 -6977 7104 0
-6907 -6975 7102 0
-6907 -6973 7100 0
-6907 -6971 7098 0
-6907 -6969 7096 0
-6907 -6967 7094 0
-6907 -6965 7092 0
-6907 -6963 7090 0
-6907 -6961 7088 0
-6907 -6959 7086 0
-6907 -6957 7084 0
-6907 -6955 7082 0
-6907 -6953 7080 0
-6907 -6952 7078 0
-6905 7108 0
-6905 -6981 7106 0
-6905 -6979 7104 0
-6905 -6977 7102 0
-6905 -6975 7100 0
-6905 -6973 7098 0
-6905 -6971 7096 0
-6905 -6969 7094 0
-6905 -6967 7092 0
-6905 -6965 7090 0
-6905 -6963 7088 0
-6905 -6961 7086 0
-6905 -6959 7084 0
-6905 -6957 7082 0
-6905 -6955 7080 0
-6905 -6953 7078 0
-6905 -6952 7076 0
-6903 7106 0
-6903 -6981 7104 0
-6903 -6979 7102 0
-6903 -6977 7100 0
-6903 -6975 7098 0
-6903 -6973 7096 0
-6903 -6971 7094 0
-6903 -6969 7092 0
-6903 -6967 7090 0
-6903 -6965 7088 0
-6903 -6963 7086 0
-6903 -6961 7084 0
-6903 -6959 7082 0
-6903 -6957 7080 0
-6903 -6955 7078 0
-6903 -6953 7076 0
-6903 -6952 7074 0
-6901 7104 0
-6901 -6981 7102 0
-6901 -6979 7100 0
-6901 -6977 7098 0
-6901 -6975 7096 0
-6901 -6973 7094 0
-6901 -6971 7092 0
-6901 -6969 7090 0
-6901 -6967 7088 0
-6901 -6965 7086 0
-6901 -6963 7084 0
-6901 -6961 7082 0
-6901 -6959 7080 0
-6901 -6957 7078 0
-6901 -6955 7076 0
-6901 -6953 7074 0
-6901 -6952 7072 0
-6899 7102 0
-6899 -6981 7100 0
-6899 -6979 7098 0
-6899 -6977 7096 0
-6899 -6975 7094 0
-6899 -6973 7092 0
-6899 -6971 7090 0
-6899 -6969 7088 0
-6899 -6967 7086 0
-6899 -6965 7084 0
-6899 -6963 7082 0
-6899 -6961 7080 0
-6899 -6959 7078 0
-6899 -6957 7076 0
-6899 -6955 7074 0
-6899 -6953 7072 0
-6899 -6952 7070 0
-6897 7100 0
-6897 -6981 7098 0
-6897 -6979 7096 0
-6897 -6977 7094 0
-6897 -6975 7092 0
-6897 -6973 7090 0
-6897 -6971 7088 0
-6897 -6969 7086 0
-6897 -6967 7084 0
-6897 -6965 7082 0
-6897 -6963 7080 0
-6897 -6961 7078 0
-6897 -6959 7076 0
-6897 -6957 7074 0
-6897 -6955 7072 0
-6897 -6953 7070 0
-6897 -6952 7068 0
-6895 7098 0
-6895 -6981 7096 0
-6895 -6979 7094 0
-6895 -6977 7092 0
-6895 -6975 7090 0
-6895 -6973 7088 0
-6895 -6971 7086 0
-6895 -6969 7084 0
-6895 -6967 7082 0
-6895 -6965 7080 0
-6895 -6963 7078 0
-6895 -6961 7076 0
-6895 -6959 7074 0
-6895 -6957 7072 0
-6895 -6955 7070 0
-6895 -6953 7068 0
-6895 -6952 7066 0
-6893 7096 0
-6893 -6981 7094 0
-6893 -6979 7092 0
-6893 -6977 7090 0
-6893 -6975 7088 0
-6893 -6973 7086 0
-6893 -6971 7084 0
-6893 -6969 7082 0
-6893 -6967 7080 0
-6893 -6965 7078 0
-6893 -6963 7076 0
-6893 -6961 7074 0
-6893 -6959 7072 0
-6893 -6957 7070 0
-6893 -6955 7068 0
-6893 -6953 7066 0
-6893 -6952 7064 0
-6891 7094 0
-6891 -6981 7092 0
-6891 -6979 7090 0
-6891 -6977 7088 0
-6891 -6975 7086 0
-6891 -6973 7084 0
-6891 -6971 7082 0
-6891 -6969 7080 0
-6891 -6967 7078 0
-6891 -6965 7076 0
-6891 -6963 7074 0
-6891 -6961 7072 0
-6891 -6959 7070 0
-6891 -6957 7068 0
-6891 -6955 7066 0
-6891 -6953 7064 0
-6891 -6952 7062 0
-6890 7092 0
-6890 -6981 7090 0
-6890 -6979 7088 0
-6890 -6977 7086 0
-6890 -6975 7084 0
-6890 -6973 7082 0
-6890 -6971 7080 0
-6890 -6969 7078 0
-6890 -6967 7076 0
-6890 -6965 7074 0
-6890 -6963 7072 0
-6890 -6961 7070 0
-6890 -6959 7068 0
-6890 -6957 7066 0
-6890 -6955 7064 0
-6890 -6953 7062 0
-6890 -6952 7061 0
c ((shift(x_00007_00004, -1) - aux599 + shift(x_00009_00006, -1))<=0)
1157 -7124 0
1158 -7125 0
1160 -7127 0
1162 -7129 0
1164 -7131 0
1166 -7133 0
1168 -7135 0
1170 -7137 0
857 -7124 0
857 1157 -7125 0
857 1158 -7127 0
857 1160 -7129 0
857 1162 -7131 0
857 1164 -7133 0
857 1166 -7135 0
857 1168 -7137 0
857 1170 -7139 0
858 -7125 0
858 1157 -7127 0
858 1158 -7129 0
858 1160 -7131 0
858 1162 -7133 0
858 1164 -7135 0
858 1166 -7137 0
858 1168 -7139 0
858 1170 -7141 0
860 -7127 0
860 1157 -7129 0
860 1158 -7131 0
860 1160 -7133 0
860 1162 -7135 0
860 1164 -7137 0
860 1166 -7139 0
860 1168 -7141 0
860 1170 -7143 0
862 -7129 0
862 1157 -7131 0
862 1158 -7133 0
862 1160 -7135 0
862 1162 -7137 0
862 1164 -7139 0
862 1166 -7141 0
862 1168 -7143 0
862 1170 -7145 0
864 -7131 0
864 1157 -7133 0
864 1158 -7135 0
864 1160 -7137 0
864 1162 -7139 0
864 1164 -7141 0
864 1166 -7143 0
864 1168 -7145 0
864 1170 -7147 0
866 -7133 0
866 1157 -7135 0
866 1158 -7137 0
866 1160 -7139 0
866 1162 -7141 0
866 1164 -7143 0
866 1166 -7145 0
866 1168 -7147 0
866 1170 -7149 0
868 -7135 0
868 1157 -7137 0
868 1158 -7139 0
868 1160 -7141 0
868 1162 -7143 0
868 1164 -7145 0
868 1166 -7147 0
868 1168 -7149 0
868 1170 -7151 0
870 -7137 0
870 1157 -7139 0
870 1158 -7141 0
870 1160 -7143 0
870 1162 -7145 0
870 1164 -7147 0
870 1166 -7149 0
870 1168 -7151 0
870 1170 -7153 0
c (0<=(shift(x_00007_00004, -1) - aux599 + shift(x_00009_00006, -1)))
-1170 7153 0
-1168 7151 0
-1166 7149 0
-1164 7147 0
-1162 7145 0
-1160 7143 0
-1158 7141 0
-1157 7139 0
-870 7153 0
-870 -1170 7151 0
-870 -1168 7149 0
-870 -1166 7147 0
-870 -1164 7145 0
-870 -1162 7143 0
-870 -1160 7141 0
-870 -1158 7139 0
-870 -1157 7137 0
-868 7151 0
-868 -1170 7149 0
-868 -1168 7147 0
-868 -1166 7145 0
-868 -1164 7143 0
-868 -1162 7141 0
-868 -1160 7139 0
-868 -1158 7137 0
-868 -1157 7135 0
-866 7149 0
-866 -1170 7147 0
-866 -1168 7145 0
-866 -1166 7143 0
-866 -1164 7141 0
-866 -1162 7139 0
-866 -1160 7137 0
-866 -1158 7135 0
-866 -1157 7133 0
-864 7147 0
-864 -1170 7145 0
-864 -1168 7143 0
-864 -1166 7141 0
-864 -1164 7139 0
-864 -1162 7137 0
-864 -1160 7135 0
-864 -1158 7133 0
-864 -1157 7131 0
-862 7145 0
-862 -1170 7143 0
-862 -1168 7141 0
-862 -1166 7139 0
-862 -1164 7137 0
-862 -1162 7135 0
-862 -1160 7133 0
-862 -1158 7131 0
-862 -1157 7129 0
-860 7143 0
-860 -1170 7141 0
-860 -1168 7139 0
-860 -1166 7137 0
-860 -1164 7135 0
-860 -1162 7133 0
-860 -1160 7131 0
-860 -1158 7129 0
-860 -1157 7127 0
-858 7141 0
-858 -1170 7139 0
-858 -1168 7137 0
-858 -1166 7135 0
-858 -1164 7133 0
-858 -1162 7131 0
-858 -1160 7129 0
-858 -1158 7127 0
-858 -1157 7125 0
-857 7139 0
-857 -1170 7137 0
-857 -1168 7135 0
-857 -1166 7133 0
-857 -1164 7131 0
-857 -1162 7129 0
-857 -1160 7127 0
-857 -1158 7125 0
-857 -1157 7124 0
c ((shift(x_00007_00005, -1) - aux600 + shift(x_00009_00005, -1))<=0)
1142 -7155 0
1143 -7156 0
1145 -7158 0
1147 -7160 0
1149 -7162 0
1151 -7164 0
1153 -7166 0
1155 -7168 0
872 -7155 0
872 1142 -7156 0
872 1143 -7158 0
872 1145 -7160 0
872 1147 -7162 0
872 1149 -7164 0
872 1151 -7166 0
872 1153 -7168 0
872 1155 -7170 0
873 -7156 0
873 1142 -7158 0
873 1143 -7160 0
873 1145 -7162 0
873 1147 -7164 0
873 1149 -7166 0
873 1151 -7168 0
873 1153 -7170 0
873 1155 -7172 0
875 -7158 0
875 1142 -7160 0
875 1143 -7162 0
875 1145 -7164 0
875 1147 -7166 0
875 1149 -7168 0
875 1151 -7170 0
875 1153 -7172 0
875 1155 -7174 0
877 -7160 0
877 1142 -7162 0
877 1143 -7164 0
877 1145 -7166 0
877 1147 -7168 0
877 1149 -7170 0
877 1151 -7172 0
877 1153 -7174 0
877 1155 -7176 0
879 -7162 0
879 1142 -7164 0
879 1143 -7166 0
879 1145 -7168 0
879 1147 -7170 0
879 1149 -7172 0
879 1151 -7174 0
879 1153 -7176 0
879 1155 -7178 0
881 -7164 0
881 1142 -7166 0
881 1143 -7168 0
881 1145 -7170 0
881 1147 -7172 0
881 1149 -7174 0
881 1151 -7176 0
881 1153 -7178 0
881 1155 -7180 0
883 -7166 0
883 1142 -7168 0
883 1143 -7170 0
883 1145 -7172 0
883 1147 -7174 0
883 1149 -7176 0
883 1151 -7178 0
883 1153 -7180 0
883 1155 -7182 0
885 -7168 0
885 1142 -7170 0
885 1143 -7172 0
885 1145 -7174 0
885 1147 -7176 0
885 1149 -7178 0
885 1151 -7180 0
885 1153 -7182 0
885 1155 -7184 0
c (0<=(shift(x_00007_00005, -1) - aux600 + shift(x_00009_00005, -1)))
-1155 7184 0
-1153 7182 0
-1151 7180 0
-1149 7178 0
-1147 7176 0
-1145 7174 0
-1143 7172 0
-1142 7170 0
-885 7184 0
-885 -1155 7182 0
-885 -1153 7180 0
-885 -1151 7178 0
-885 -1149 7176 0
-885 -1147 7174 0
-885 -1145 7172 0
-885 -1143 7170 0
-885 -1142 7168 0
-883 7182 0
-883 -1155 7180 0
-883 -1153 7178 0
-883 -1151 7176 0
-883 -1149 7174 0
-883 -1147 7172 0
-883 -1145 7170 0
-883 -1143 7168 0
-883 -1142 7166 0
-881 7180 0
-881 -1155 7178 0
-881 -1153 7176 0
-881 -1151 7174 0
-881 -1149 7172 0
-881 -1147 7170 0
-881 -1145 7168 0
-881 -1143 7166 0
-881 -1142 7164 0
-879 7178 0
-879 -1155 7176 0
-879 -1153 7174 0
-879 -1151 7172 0
-879 -1149 7170 0
-879 -1147 7168 0
-879 -1145 7166 0
-879 -1143 7164 0
-879 -1142 7162 0
-877 7176 0
-877 -1155 7174 0
-877 -1153 7172 0
-877 -1151 7170 0
-877 -1149 7168 0
-877 -1147 7166 0
-877 -1145 7164 0
-877 -1143 7162 0
-877 -1142 7160 0
-875 7174 0
-875 -1155 7172 0
-875 -1153 7170 0
-875 -1151 7168 0
-875 -1149 7166 0
-875 -1147 7164 0
-875 -1145 7162 0
-875 -1143 7160 0
-875 -1142 7158 0
-873 7172 0
-873 -1155 7170 0
-873 -1153 7168 0
-873 -1151 7166 0
-873 -1149 7164 0
-873 -1147 7162 0
-873 -1145 7160 0
-873 -1143 7158 0
-873 -1142 7156 0
-872 7170 0
-872 -1155 7168 0
-872 -1153 7166 0
-872 -1151 7164 0
-872 -1149 7162 0
-872 -1147 7160 0
-872 -1145 7158 0
-872 -1143 7156 0
-872 -1142 7155 0
c (( - aux601 + shift(x_00008_00004, -1) + shift(x_00009_00004, -1))<=0)
1127 -7186 0
1128 -7187 0
1130 -7189 0
1132 -7191 0
1134 -7193 0
1136 -7195 0
1138 -7197 0
1140 -7199 0
992 -7186 0
992 1127 -7187 0
992 1128 -7189 0
992 1130 -7191 0
992 1132 -7193 0
992 1134 -7195 0
992 1136 -7197 0
992 1138 -7199 0
992 1140 -7201 0
993 -7187 0
993 1127 -7189 0
993 1128 -7191 0
993 1130 -7193 0
993 1132 -7195 0
993 1134 -7197 0
993 1136 -7199 0
993 1138 -7201 0
993 1140 -7203 0
995 -7189 0
995 1127 -7191 0
995 1128 -7193 0
995 1130 -7195 0
995 1132 -7197 0
995 1134 -7199 0
995 1136 -7201 0
995 1138 -7203 0
995 1140 -7205 0
997 -7191 0
997 1127 -7193 0
997 1128 -7195 0
997 1130 -7197 0
997 1132 -7199 0
997 1134 -7201 0
997 1136 -7203 0
997 1138 -7205 0
997 1140 -7207 0
999 -7193 0
999 1127 -7195 0
999 1128 -7197 0
999 1130 -7199 0
999 1132 -7201 0
999 1134 -7203 0
999 1136 -7205 0
999 1138 -7207 0
999 1140 -7209 0
1001 -7195 0
1001 1127 -7197 0
1001 1128 -7199 0
1001 1130 -7201 0
1001 1132 -7203 0
1001 1134 -7205 0
1001 1136 -7207 0
1001 1138 -7209 0
1001 1140 -7211 0
1003 -7197 0
1003 1127 -7199 0
1003 1128 -7201 0
1003 1130 -7203 0
1003 1132 -7205 0
1003 1134 -7207 0
1003 1136 -7209 0
1003 1138 -7211 0
1003 1140 -7213 0
1005 -7199 0
1005 1127 -7201 0
1005 1128 -7203 0
1005 1130 -7205 0
1005 1132 -7207 0
1005 1134 -7209 0
1005 1136 -7211 0
1005 1138 -7213 0
1005 1140 -7215 0
c (0<=( - aux601 + shift(x_00008_00004, -1) + shift(x_00009_00004, -1)))
-1140 7215 0
-1138 7213 0
-1136 7211 0
-1134 7209 0
-1132 7207 0
-1130 7205 0
-1128 7203 0
-1127 7201 0
-1005 7215 0
-1005 -1140 7213 0
-1005 -1138 7211 0
-1005 -1136 7209 0
-1005 -1134 7207 0
-1005 -1132 7205 0
-1005 -1130 7203 0
-1005 -1128 7201 0
-1005 -1127 7199 0
-1003 7213 0
-1003 -1140 7211 0
-1003 -1138 7209 0
-1003 -1136 7207 0
-1003 -1134 7205 0
-1003 -1132 7203 0
-1003 -1130 7201 0
-1003 -1128 7199 0
-1003 -1127 7197 0
-1001 7211 0
-1001 -1140 7209 0
-1001 -1138 7207 0
-1001 -1136 7205 0
-1001 -1134 7203 0
-1001 -1132 7201 0
-1001 -1130 7199 0
-1001 -1128 7197 0
-1001 -1127 7195 0
-999 7209 0
-999 -1140 7207 0
-999 -1138 7205 0
-999 -1136 7203 0
-999 -1134 7201 0
-999 -1132 7199 0
-999 -1130 7197 0
-999 -1128 7195 0
-999 -1127 7193 0
-997 7207 0
-997 -1140 7205 0
-997 -1138 7203 0
-997 -1136 7201 0
-997 -1134 7199 0
-997 -1132 7197 0
-997 -1130 7195 0
-997 -1128 7193 0
-997 -1127 7191 0
-995 7205 0
-995 -1140 7203 0
-995 -1138 7201 0
-995 -1136 7199 0
-995 -1134 7197 0
-995 -1132 7195 0
-995 -1130 7193 0
-995 -1128 7191 0
-995 -1127 7189 0
-993 7203 0
-993 -1140 7201 0
-993 -1138 7199 0
-993 -1136 7197 0
-993 -1134 7195 0
-993 -1132 7193 0
-993 -1130 7191 0
-993 -1128 7189 0
-993 -1127 7187 0
-992 7201 0
-992 -1140 7199 0
-992 -1138 7197 0
-992 -1136 7195 0
-992 -1134 7193 0
-992 -1132 7191 0
-992 -1130 7189 0
-992 -1128 7187 0
-992 -1127 7186 0
c (( - aux602 + shift(x_00008_00005, -1) + shift(x_00008_00006, -1))<=0)
1022 -7217 0
1023 -7218 0
1025 -7220 0
1027 -7222 0
1029 -7224 0
1031 -7226 0
1033 -7228 0
1035 -7230 0
1007 -7217 0
1007 1022 -7218 0
1007 1023 -7220 0
1007 1025 -7222 0
1007 1027 -7224 0
1007 1029 -7226 0
1007 1031 -7228 0
1007 1033 -7230 0
1007 1035 -7232 0
1008 -7218 0
1008 1022 -7220 0
1008 1023 -7222 0
1008 1025 -7224 0
1008 1027 -7226 0
1008 1029 -7228 0
1008 1031 -7230 0
1008 1033 -7232 0
1008 1035 -7234 0
1010 -7220 0
1010 1022 -7222 0
1010 1023 -7224 0
1010 1025 -7226 0
1010 1027 -7228 0
1010 1029 -7230 0
1010 1031 -7232 0
1010 1033 -7234 0
1010 1035 -7236 0
1012 -7222 0
1012 1022 -7224 0
1012 1023 -7226 0
1012 1025 -7228 0
1012 1027 -7230 0
1012 1029 -7232 0
1012 1031 -7234 0
1012 1033 -7236 0
1012 1035 -7238 0
1014 -7224 0
1014 1022 -7226 0
1014 1023 -7228 0
1014 1025 -7230 0
1014 1027 -7232 0
1014 1029 -7234 0
1014 1031 -7236 0
1014 1033 -7238 0
1014 1035 -7240 0
1016 -7226 0
1016 1022 -7228 0
1016 1023 -7230 0
1016 1025 -7232 0
1016 1027 -7234 0
1016 1029 -7236 0
1016 1031 -7238 0
1016 1033 -7240 0
1016 1035 -7242 0
1018 -7228 0
1018 1022 -7230 0
1018 1023 -7232 0
1018 1025 -7234 0
1018 1027 -7236 0
1018 1029 -7238 0
1018 1031 -7240 0
1018 1033 -7242 0
1018 1035 -7244 0
1020 -7230 0
1020 1022 -7232 0
1020 1023 -7234 0
1020 1025 -7236 0
1020 1027 -7238 0
1020 1029 -7240 0
1020 1031 -7242 0
1020 1033 -7244 0
1020 1035 -7246 0
c (0<=( - aux602 + shift(x_00008_00005, -1) + shift(x_00008_00006, -1)))
-1035 7246 0
-1033 7244 0
-1031 7242 0
-1029 7240 0
-1027 7238 0
-1025 7236 0
-1023 7234 0
-1022 7232 0
-1020 7246 0
-1020 -1035 7244 0
-1020 -1033 7242 0
-1020 -1031 7240 0
-1020 -1029 7238 0
-1020 -1027 7236 0
-1020 -1025 7234 0
-1020 -1023 7232 0
-1020 -1022 7230 0
-1018 7244 0
-1018 -1035 7242 0
-1018 -1033 7240 0
-1018 -1031 7238 0
-1018 -1029 7236 0
-1018 -1027 7234 0
-1018 -1025 7232 0
-1018 -1023 7230 0
-1018 -1022 7228 0
-1016 7242 0
-1016 -1035 7240 0
-1016 -1033 7238 0
-1016 -1031 7236 0
-1016 -1029 7234 0
-1016 -1027 7232 0
-1016 -1025 7230 0
-1016 -1023 7228 0
-1016 -1022 7226 0
-1014 7240 0
-1014 -1035 7238 0
-1014 -1033 7236 0
-1014 -1031 7234 0
-1014 -1029 7232 0
-1014 -1027 7230 0
-1014 -1025 7228 0
-1014 -1023 7226 0
-1014 -1022 7224 0
-1012 7238 0
-1012 -1035 7236 0
-1012 -1033 7234 0
-1012 -1031 7232 0
-1012 -1029 7230 0
-1012 -1027 7228 0
-1012 -1025 7226 0
-1012 -1023 7224 0
-1012 -1022 7222 0
-1010 7236 0
-1010 -1035 7234 0
-1010 -1033 7232 0
-1010 -1031 7230 0
-1010 -1029 7228 0
-1010 -1027 7226 0
-1010 -1025 7224 0
-1010 -1023 7222 0
-1010 -1022 7220 0
-1008 7234 0
-1008 -1035 7232 0
-1008 -1033 7230 0
-1008 -1031 7228 0
-1008 -1029 7226 0
-1008 -1027 7224 0
-1008 -1025 7222 0
-1008 -1023 7220 0
-1008 -1022 7218 0
-1007 7232 0
-1007 -1035 7230 0
-1007 -1033 7228 0
-1007 -1031 7226 0
-1007 -1029 7224 0
-1007 -1027 7222 0
-1007 -1025 7220 0
-1007 -1023 7218 0
-1007 -1022 7217 0
c ((shift(x_00007_00006, -1) + aux602 - aux603)<=0)
7217 -7248 0
7218 -7249 0
7220 -7251 0
7222 -7253 0
7224 -7255 0
7226 -7257 0
7228 -7259 0
7230 -7261 0
7232 -7263 0
7234 -7265 0
7236 -7267 0
7238 -7269 0
7240 -7271 0
7242 -7273 0
7244 -7275 0
7246 -7277 0
887 -7248 0
887 7217 -7249 0
887 7218 -7251 0
887 7220 -7253 0
887 7222 -7255 0
887 7224 -7257 0
887 7226 -7259 0
887 7228 -7261 0
887 7230 -7263 0
887 7232 -7265 0
887 7234 -7267 0
887 7236 -7269 0
887 7238 -7271 0
887 7240 -7273 0
887 7242 -7275 0
887 7244 -7277 0
887 7246 -7279 0
888 -7249 0
888 7217 -7251 0
888 7218 -7253 0
888 7220 -7255 0
888 7222 -7257 0
888 7224 -7259 0
888 7226 -7261 0
888 7228 -7263 0
888 7230 -7265 0
888 7232 -7267 0
888 7234 -7269 0
888 7236 -7271 0
888 7238 -7273 0
888 7240 -7275 0
888 7242 -7277 0
888 7244 -7279 0
888 7246 -7281 0
890 -7251 0
890 7217 -7253 0
890 7218 -7255 0
890 7220 -7257 0
890 7222 -7259 0
890 7224 -7261 0
890 7226 -7263 0
890 7228 -7265 0
890 7230 -7267 0
890 7232 -7269 0
890 7234 -7271 0
890 7236 -7273 0
890 7238 -7275 0
890 7240 -7277 0
890 7242 -7279 0
890 7244 -7281 0
890 7246 -7283 0
892 -7253 0
892 7217 -7255 0
892 7218 -7257 0
892 7220 -7259 0
892 7222 -7261 0
892 7224 -7263 0
892 7226 -7265 0
892 7228 -7267 0
892 7230 -7269 0
892 7232 -7271 0
892 7234 -7273 0
892 7236 -7275 0
892 7238 -7277 0
892 7240 -7279 0
892 7242 -7281 0
892 7244 -7283 0
892 7246 -7285 0
894 -7255 0
894 7217 -7257 0
894 7218 -7259 0
894 7220 -7261 0
894 7222 -7263 0
894 7224 -7265 0
894 7226 -7267 0
894 7228 -7269 0
894 7230 -7271 0
894 7232 -7273 0
894 7234 -7275 0
894 7236 -7277 0
894 7238 -7279 0
894 7240 -7281 0
894 7242 -7283 0
894 7244 -7285 0
894 7246 -7287 0
896 -7257 0
896 7217 -7259 0
896 7218 -7261 0
896 7220 -7263 0
896 7222 -7265 0
896 7224 -7267 0
896 7226 -7269 0
896 7228 -7271 0
896 7230 -7273 0
896 7232 -7275 0
896 7234 -7277 0
896 7236 -7279 0
896 7238 -7281 0
896 7240 -7283 0
896 7242 -7285 0
896 7244 -7287 0
896 7246 -7289 0
898 -7259 0
898 7217 -7261 0
898 7218 -7263 0
898 7220 -7265 0
898 7222 -7267 0
898 7224 -7269 0
898 7226 -7271 0
898 7228 -7273 0
898 7230 -7275 0
898 7232 -7277 0
898 7234 -7279 0
898 7236 -7281 0
898 7238 -7283 0
898 7240 -7285 0
898 7242 -7287 0
898 7244 -7289 0
898 7246 -7291 0
900 -7261 0
900 7217 -7263 0
900 7218 -7265 0
900 7220 -7267 0
900 7222 -7269 0
900 7224 -7271 0
900 7226 -7273 0
900 7228 -7275 0
900 7230 -7277 0
900 7232 -7279 0
900 7234 -7281 0
900 7236 -7283 0
900 7238 -7285 0
900 7240 -7287 0
900 7242 -7289 0
900 7244 -7291 0
900 7246 -7293 0
c (0<=(shift(x_00007_00006, -1) + aux602 - aux603))
-7246 7293 0
-7244 7291 0
-7242 7289 0
-7240 7287 0
-7238 7285 0
-7236 7283 0
-7234 7281 0
-7232 7279 0
-7230 7277 0
-7228 7275 0
-7226 7273 0
-7224 7271 0
-7222 7269 0
-7220 7267 0
-7218 7265 0
-7217 7263 0
-900 7293 0
-900 -7246 7291 0
-900 -7244 7289 0
-900 -7242 7287 0
-900 -7240 7285 0
-900 -7238 7283 0
-900 -7236 7281 0
-900 -7234 7279 0
-900 -7232 7277 0
-900 -7230 7275 0
-900 -7228 7273 0
-900 -7226 7271 0
-900 -7224 7269 0
-900 -7222 7267 0
-900 -7220 7265 0
-900 -7218 7263 0
-900 -7217 7261 0
-898 7291 0
-898 -7246 7289 0
-898 -7244 7287 0
-898 -7242 7285 0
-898 -7240 7283 0
-898 -7238 7281 0
-898 -7236 7279 0
-898 -7234 7277 0
-898 -7232 7275 0
-898 -7230 7273 0
-898 -7228 7271 0
-898 -7226 7269 0
-898 -7224 7267 0
-898 -7222 7265 0
-898 -7220 7263 0
-898 -7218 7261 0
-898 -7217 7259 0
-896 7289 0
-896 -7246 7287 0
-896 -7244 7285 0
-896 -7242 7283 0
-896 -7240 7281 0
-896 -7238 7279 0
-896 -7236 7277 0
-896 -7234 7275 0
-896 -7232 7273 0
-896 -7230 7271 0
-896 -7228 7269 0
-896 -7226 7267 0
-896 -7224 7265 0
-896 -7222 7263 0
-896 -7220 7261 0
-896 -7218 7259 0
-896 -7217 7257 0
-894 7287 0
-894 -7246 7285 0
-894 -7244 7283 0
-894 -7242 7281 0
-894 -7240 7279 0
-894 -7238 7277 0
-894 -7236 7275 0
-894 -7234 7273 0
-894 -7232 7271 0
-894 -7230 7269 0
-894 -7228 7267 0
-894 -7226 7265 0
-894 -7224 7263 0
-894 -7222 7261 0
-894 -7220 7259 0
-894 -7218 7257 0
-894 -7217 7255 0
-892 7285 0
-892 -7246 7283 0
-892 -7244 7281 0
-892 -7242 7279 0
-892 -7240 7277 0
-892 -7238 7275 0
-892 -7236 7273 0
-892 -7234 7271 0
-892 -7232 7269 0
-892 -7230 7267 0
-892 -7228 7265 0
-892 -7226 7263 0
-892 -7224 7261 0
-892 -7222 7259 0
-892 -7220 7257 0
-892 -7218 7255 0
-892 -7217 7253 0
-890 7283 0
-890 -7246 7281 0
-890 -7244 7279 0
-890 -7242 7277 0
-890 -7240 7275 0
-890 -7238 7273 0
-890 -7236 7271 0
-890 -7234 7269 0
-890 -7232 7267 0
-890 -7230 7265 0
-890 -7228 7263 0
-890 -7226 7261 0
-890 -7224 7259 0
-890 -7222 7257 0
-890 -7220 7255 0
-890 -7218 7253 0
-890 -7217 7251 0
-888 7281 0
-888 -7246 7279 0
-888 -7244 7277 0
-888 -7242 7275 0
-888 -7240 7273 0
-888 -7238 7271 0
-888 -7236 7269 0
-888 -7234 7267 0
-888 -7232 7265 0
-888 -7230 7263 0
-888 -7228 7261 0
-888 -7226 7259 0
-888 -7224 7257 0
-888 -7222 7255 0
-888 -7220 7253 0
-888 -7218 7251 0
-888 -7217 7249 0
-887 7279 0
-887 -7246 7277 0
-887 -7244 7275 0
-887 -7242 7273 0
-887 -7240 7271 0
-887 -7238 7269 0
-887 -7236 7267 0
-887 -7234 7265 0
-887 -7232 7263 0
-887 -7230 7261 0
-887 -7228 7259 0
-887 -7226 7257 0
-887 -7224 7255 0
-887 -7222 7253 0
-887 -7220 7251 0
-887 -7218 7249 0
-887 -7217 7248 0
c ((aux599 + aux601 - aux604)<=0)
7186 -7295 0
7187 -7296 0
7189 -7298 0
7191 -7300 0
7193 -7302 0
7195 -7304 0
7197 -7306 0
7199 -7308 0
7201 -7310 0
7203 -7312 0
7205 -7314 0
7207 -7316 0
7209 -7318 0
7211 -7320 0
7213 -7322 0
7215 -7324 0
7124 -7295 0
7124 7186 -7296 0
7124 7187 -7298 0
7124 7189 -7300 0
7124 7191 -7302 0
7124 7193 -7304 0
7124 7195 -7306 0
7124 7197 -7308 0
7124 7199 -7310 0
7124 7201 -7312 0
7124 7203 -7314 0
7124 7205 -7316 0
7124 7207 -7318 0
7124 7209 -7320 0
7124 7211 -7322 0
7124 7213 -7324 0
7124 7215 -7326 0
7125 -7296 0
7125 7186 -7298 0
7125 7187 -7300 0
7125 7189 -7302 0
7125 7191 -7304 0
7125 7193 -7306 0
7125 7195 -7308 0
7125 7197 -7310 0
7125 7199 -7312 0
7125 7201 -7314 0
7125 7203 -7316 0
7125 7205 -7318 0
7125 7207 -7320 0
7125 7209 -7322 0
7125 7211 -7324 0
7125 7213 -7326 0
7125 7215 -7328 0
7127 -7298 0
7127 7186 -7300 0
7127 7187 -7302 0
7127 7189 -7304 0
7127 7191 -7306 0
7127 7193 -7308 0
7127 7195 -7310 0
7127 7197 -7312 0
7127 7199 -7314 0
7127 7201 -7316 0
7127 7203 -7318 0
7127 7205 -7320 0
7127 7207 -7322 0
7127 7209 -7324 0
7127 7211 -7326 0
7127 7213 -7328 0
7127 7215 -7330 0
7129 -7300 0
7129 7186 -7302 0
7129 7187 -7304 0
7129 7189 -7306 0
7129 7191 -7308 0
7129 7193 -7310 0
7129 7195 -7312 0
7129 7197 -7314 0
7129 7199 -7316 0
7129 7201 -7318 0
7129 7203 -7320 0
7129 7205 -7322 0
7129 7207 -7324 0
7129 7209 -7326 0
7129 7211 -7328 0
7129 7213 -7330 0
7129 7215 -7332 0
7131 -7302 0
7131 7186 -7304 0
7131 7187 -7306 0
7131 7189 -7308 0
7131 7191 -7310 0
7131 7193 -7312 0
7131 7195 -7314 0
7131 7197 -7316 0
7131 7199 -7318 0
7131 7201 -7320 0
7131 7203 -7322 0
7131 7205 -7324 0
7131 7207 -7326 0
7131 7209 -7328 0
7131 7211 -7330 0
7131 7213 -7332 0
7131 7215 -7334 0
7133 -7304 0
7133 7186 -7306 0
7133 7187 -7308 0
7133 7189 -7310 0
7133 7191 -7312 0
7133 7193 -7314 0
7133 7195 -7316 0
7133 7197 -7318 0
7133 7199 -7320 0
7133 7201 -7322 0
7133 7203 -7324 0
7133 7205 -7326 0
7133 7207 -7328 0
7133 7209 -7330 0
7133 7211 -7332 0
7133 7213 -7334 0
7133 7215 -7336 0
7135 -7306 0
7135 7186 -7308 0
7135 7187 -7310 0
7135 7189 -7312 0
7135 7191 -7314 0
7135 7193 -7316 0
7135 7195 -7318 0
7135 7197 -7320 0
7135 7199 -7322 0
7135 7201 -7324 0
7135 7203 -7326 0
7135 7205 -7328 0
7135 7207 -7330 0
7135 7209 -7332 0
7135 7211 -7334 0
7135 7213 -7336 0
7135 7215 -7338 0
7137 -7308 0
7137 7186 -7310 0
7137 7187 -7312 0
7137 7189 -7314 0
7137 7191 -7316 0
7137 7193 -7318 0
7137 7195 -7320 0
7137 7197 -7322 0
7137 7199 -7324 0
7137 7201 -7326 0
7137 7203 -7328 0
7137 7205 -7330 0
7137 7207 -7332 0
7137 7209 -7334 0
7137 7211 -7336 0
7137 7213 -7338 0
7137 7215 -7340 0
7139 -7310 0
7139 7186 -7312 0
7139 7187 -7314 0
7139 7189 -7316 0
7139 7191 -7318 0
7139 7193 -7320 0
7139 7195 -7322 0
7139 7197 -7324 0
7139 7199 -7326 0
7139 7201 -7328 0
7139 7203 -7330 0
7139 7205 -7332 0
7139 7207 -7334 0
7139 7209 -7336 0
7139 7211 -7338 0
7139 7213 -7340 0
7139 7215 -7342 0
7141 -7312 0
7141 7186 -7314 0
7141 7187 -7316 0
7141 7189 -7318 0
7141 7191 -7320 0
7141 7193 -7322 0
7141 7195 -7324 0
7141 7197 -7326 0
7141 7199 -7328 0
7141 7201 -7330 0
7141 7203 -7332 0
7141 7205 -7334 0
7141 7207 -7336 0
7141 7209 -7338 0
7141 7211 -7340 0
7141 7213 -7342 0
7141 7215 -7344 0
7143 -7314 0
7143 7186 -7316 0
7143 7187 -7318 0
7143 7189 -7320 0
7143 7191 -7322 0
7143 7193 -7324 0
7143 7195 -7326 0
7143 7197 -7328 0
7143 7199 -7330 0
7143 7201 -7332 0
7143 7203 -7334 0
7143 7205 -7336 0
7143 7207 -7338 0
7143 7209 -7340 0
7143 7211 -7342 0
7143 7213 -7344 0
7143 7215 -7346 0
7145 -7316 0
7145 7186 -7318 0
7145 7187 -7320 0
7145 7189 -7322 0
7145 7191 -7324 0
7145 7193 -7326 0
7145 7195 -7328 0
7145 7197 -7330 0
7145 7199 -7332 0
7145 7201 -7334 0
7145 7203 -7336 0
7145 7205 -7338 0
7145 7207 -7340 0
7145 7209 -7342 0
7145 7211 -7344 0
7145 7213 -7346 0
7145 7215 -7348 0
7147 -7318 0
7147 7186 -7320 0
7147 7187 -7322 0
7147 7189 -7324 0
7147 7191 -7326 0
7147 7193 -7328 0
7147 7195 -7330 0
7147 7197 -7332 0
7147 7199 -7334 0
7147 7201 -7336 0
7147 7203 -7338 0
7147 7205 -7340 0
7147 7207 -7342 0
7147 7209 -7344 0
7147 7211 -7346 0
7147 7213 -7348 0
7147 7215 -7350 0
7149 -7320 0
7149 7186 -7322 0
7149 7187 -7324 0
7149 7189 -7326 0
7149 7191 -7328 0
7149 7193 -7330 0
7149 7195 -7332 0
7149 7197 -7334 0
7149 7199 -7336 0
7149 7201 -7338 0
7149 7203 -7340 0
7149 7205 -7342 0
7149 7207 -7344 0
7149 7209 -7346 0
7149 7211 -7348 0
7149 7213 -7350 0
7149 7215 -7352 0
7151 -7322 0
7151 7186 -7324 0
7151 7187 -7326 0
7151 7189 -7328 0
7151 7191 -7330 0
7151 7193 -7332 0
7151 7195 -7334 0
7151 7197 -7336 0
7151 7199 -7338 0
7151 7201 -7340 0
7151 7203 -7342 0
7151 7205 -7344 0
7151 7207 -7346 0
7151 7209 -7348 0
7151 7211 -7350 0
7151 7213 -7352 0
7151 7215 -7354 0
7153 -7324 0
7153 7186 -7326 0
7153 7187 -7328 0
7153 7189 -7330 0
7153 7191 -7332 0
7153 7193 -7334 0
7153 7195 -7336 0
7153 7197 -7338 0
7153 7199 -7340 0
7153 7201 -7342 0
7153 7203 -7344 0
7153 7205 -7346 0
7153 7207 -7348 0
7153 7209 -7350 0
7153 7211 -7352 0
7153 7213 -7354 0
7153 7215 -7356 0
c (0<=(aux599 + aux601 - aux604))
-7215 7356 0
-7213 7354 0
-7211 7352 0
-7209 7350 0
-7207 7348 0
-7205 7346 0
-7203 7344 0
-7201 7342 0
-7199 7340 0
-7197 7338 0
-7195 7336 0
-7193 7334 0
-7191 7332 0
-7189 7330 0
-7187 7328 0
-7186 7326 0
-7153 7356 0
-7153 -7215 7354 0
-7153 -7213 7352 0
-7153 -7211 7350 0
-7153 -7209 7348 0
-7153 -7207 7346 0
-7153 -7205 7344 0
-7153 -7203 7342 0
-7153 -7201 7340 0
-7153 -7199 7338 0
-7153 -7197 7336 0
-7153 -7195 7334 0
-7153 -7193 7332 0
-7153 -7191 7330 0
-7153 -7189 7328 0
-7153 -7187 7326 0
-7153 -7186 7324 0
-7151 7354 0
-7151 -7215 7352 0
-7151 -7213 7350 0
-7151 -7211 7348 0
-7151 -7209 7346 0
-7151 -7207 7344 0
-7151 -7205 7342 0
-7151 -7203 7340 0
-7151 -7201 7338 0
-7151 -7199 7336 0
-7151 -7197 7334 0
-7151 -7195 7332 0
-7151 -7193 7330 0
-7151 -7191 7328 0
-7151 -7189 7326 0
-7151 -7187 7324 0
-7151 -7186 7322 0
-7149 7352 0
-7149 -7215 7350 0
-7149 -7213 7348 0
-7149 -7211 7346 0
-7149 -7209 7344 0
-7149 -7207 7342 0
-7149 -7205 7340 0
-7149 -7203 7338 0
-7149 -7201 7336 0
-7149 -7199 7334 0
-7149 -7197 7332 0
-7149 -7195 7330 0
-7149 -7193 7328 0
-7149 -7191 7326 0
-7149 -7189 7324 0
-7149 -7187 7322 0
-7149 -7186 7320 0
-7147 7350 0
-7147 -7215 7348 0
-7147 -7213 7346 0
-7147 -7211 7344 0
-7147 -7209 7342 0
-7147 -7207 7340 0
-7147 -7205 7338 0
-7147 -7203 7336 0
-7147 -7201 7334 0
-7147 -7199 7332 0
-7147 -7197 7330 0
-7147 -7195 7328 0
-7147 -7193 7326 0
-7147 -7191 7324 0
-7147 -7189 7322 0
-7147 -7187 7320 0
-7147 -7186 7318 0
-7145 7348 0
-7145 -7215 7346 0
-7145 -7213 7344 0
-7145 -7211 7342 0
-7145 -7209 7340 0
-7145 -7207 7338 0
-7145 -7205 7336 0
-7145 -7203 7334 0
-7145 -7201 7332 0
-7145 -7199 7330 0
-7145 -7197 7328 0
-7145 -7195 7326 0
-7145 -7193 7324 0
-7145 -7191 7322 0
-7145 -7189 7320 0
-7145 -7187 7318 0
-7145 -7186 7316 0
-7143 7346 0
-7143 -7215 7344 0
-7143 -7213 7342 0
-7143 -7211 7340 0
-7143 -7209 7338 0
-7143 -7207 7336 0
-7143 -7205 7334 0
-7143 -7203 7332 0
-7143 -7201 7330 0
-7143 -7199 7328 0
-7143 -7197 7326 0
-7143 -7195 7324 0
-7143 -7193 7322 0
-7143 -7191 7320 0
-7143 -7189 7318 0
-7143 -7187 7316 0
-7143 -7186 7314 0
-7141 7344 0
-7141 -7215 7342 0
-7141 -7213 7340 0
-7141 -7211 7338 0
-7141 -7209 7336 0
-7141 -7207 7334 0
-7141 -7205 7332 0
-7141 -7203 7330 0
-7141 -7201 7328 0
-7141 -7199 7326 0
-7141 -7197 7324 0
-7141 -7195 7322 0
-7141 -7193 7320 0
-7141 -7191 7318 0
-7141 -7189 7316 0
-7141 -7187 7314 0
-7141 -7186 7312 0
-7139 7342 0
-7139 -7215 7340 0
-7139 -7213 7338 0
-7139 -7211 7336 0
-7139 -7209 7334 0
-7139 -7207 7332 0
-7139 -7205 7330 0
-7139 -7203 7328 0
-7139 -7201 7326 0
-7139 -7199 7324 0
-7139 -7197 7322 0
-7139 -7195 7320 0
-7139 -7193 7318 0
-7139 -7191 7316 0
-7139 -7189 7314 0
-7139 -7187 7312 0
-7139 -7186 7310 0
-7137 7340 0
-7137 -7215 7338 0
-7137 -7213 7336 0
-7137 -7211 7334 0
-7137 -7209 7332 0
-7137 -7207 7330 0
-7137 -7205 7328 0
-7137 -7203 7326 0
-7137 -7201 7324 0
-7137 -7199 7322 0
-7137 -7197 7320 0
-7137 -7195 7318 0
-7137 -7193 7316 0
-7137 -7191 7314 0
-7137 -7189 7312 0
-7137 -7187 7310 0
-7137 -7186 7308 0
-7135 7338 0
-7135 -7215 7336 0
-7135 -7213 7334 0
-7135 -7211 7332 0
-7135 -7209 7330 0
-7135 -7207 7328 0
-7135 -7205 7326 0
-7135 -7203 7324 0
-7135 -7201 7322 0
-7135 -7199 7320 0
-7135 -7197 7318 0
-7135 -7195 7316 0
-7135 -7193 7314 0
-7135 -7191 7312 0
-7135 -7189 7310 0
-7135 -7187 7308 0
-7135 -7186 7306 0
-7133 7336 0
-7133 -7215 7334 0
-7133 -7213 7332 0
-7133 -7211 7330 0
-7133 -7209 7328 0
-7133 -7207 7326 0
-7133 -7205 7324 0
-7133 -7203 7322 0
-7133 -7201 7320 0
-7133 -7199 7318 0
-7133 -7197 7316 0
-7133 -7195 7314 0
-7133 -7193 7312 0
-7133 -7191 7310 0
-7133 -7189 7308 0
-7133 -7187 7306 0
-7133 -7186 7304 0
-7131 7334 0
-7131 -7215 7332 0
-7131 -7213 7330 0
-7131 -7211 7328 0
-7131 -7209 7326 0
-7131 -7207 7324 0
-7131 -7205 7322 0
-7131 -7203 7320 0
-7131 -7201 7318 0
-7131 -7199 7316 0
-7131 -7197 7314 0
-7131 -7195 7312 0
-7131 -7193 7310 0
-7131 -7191 7308 0
-7131 -7189 7306 0
-7131 -7187 7304 0
-7131 -7186 7302 0
-7129 7332 0
-7129 -7215 7330 0
-7129 -7213 7328 0
-7129 -7211 7326 0
-7129 -7209 7324 0
-7129 -7207 7322 0
-7129 -7205 7320 0
-7129 -7203 7318 0
-7129 -7201 7316 0
-7129 -7199 7314 0
-7129 -7197 7312 0
-7129 -7195 7310 0
-7129 -7193 7308 0
-7129 -7191 7306 0
-7129 -7189 7304 0
-7129 -7187 7302 0
-7129 -7186 7300 0
-7127 7330 0
-7127 -7215 7328 0
-7127 -7213 7326 0
-7127 -7211 7324 0
-7127 -7209 7322 0
-7127 -7207 7320 0
-7127 -7205 7318 0
-7127 -7203 7316 0
-7127 -7201 7314 0
-7127 -7199 7312 0
-7127 -7197 7310 0
-7127 -7195 7308 0
-7127 -7193 7306 0
-7127 -7191 7304 0
-7127 -7189 7302 0
-7127 -7187 7300 0
-7127 -7186 7298 0
-7125 7328 0
-7125 -7215 7326 0
-7125 -7213 7324 0
-7125 -7211 7322 0
-7125 -7209 7320 0
-7125 -7207 7318 0
-7125 -7205 7316 0
-7125 -7203 7314 0
-7125 -7201 7312 0
-7125 -7199 7310 0
-7125 -7197 7308 0
-7125 -7195 7306 0
-7125 -7193 7304 0
-7125 -7191 7302 0
-7125 -7189 7300 0
-7125 -7187 7298 0
-7125 -7186 7296 0
-7124 7326 0
-7124 -7215 7324 0
-7124 -7213 7322 0
-7124 -7211 7320 0
-7124 -7209 7318 0
-7124 -7207 7316 0
-7124 -7205 7314 0
-7124 -7203 7312 0
-7124 -7201 7310 0
-7124 -7199 7308 0
-7124 -7197 7306 0
-7124 -7195 7304 0
-7124 -7193 7302 0
-7124 -7191 7300 0
-7124 -7189 7298 0
-7124 -7187 7296 0
-7124 -7186 7295 0
c ((shift(x_00007_00007, -1) - aux605 + shift(x_00009_00009, -1))<=0)
1202 -7358 0
1203 -7359 0
1205 -7361 0
1207 -7363 0
1209 -7365 0
1211 -7367 0
1213 -7369 0
1215 -7371 0
902 -7358 0
902 1202 -7359 0
902 1203 -7361 0
902 1205 -7363 0
902 1207 -7365 0
902 1209 -7367 0
902 1211 -7369 0
902 1213 -7371 0
902 1215 -7373 0
903 -7359 0
903 1202 -7361 0
903 1203 -7363 0
903 1205 -7365 0
903 1207 -7367 0
903 1209 -7369 0
903 1211 -7371 0
903 1213 -7373 0
903 1215 -7375 0
905 -7361 0
905 1202 -7363 0
905 1203 -7365 0
905 1205 -7367 0
905 1207 -7369 0
905 1209 -7371 0
905 1211 -7373 0
905 1213 -7375 0
905 1215 -7377 0
907 -7363 0
907 1202 -7365 0
907 1203 -7367 0
907 1205 -7369 0
907 1207 -7371 0
907 1209 -7373 0
907 1211 -7375 0
907 1213 -7377 0
907 1215 -7379 0
909 -7365 0
909 1202 -7367 0
909 1203 -7369 0
909 1205 -7371 0
909 1207 -7373 0
909 1209 -7375 0
909 1211 -7377 0
909 1213 -7379 0
909 1215 -7381 0
911 -7367 0
911 1202 -7369 0
911 1203 -7371 0
911 1205 -7373 0
911 1207 -7375 0
911 1209 -7377 0
911 1211 -7379 0
911 1213 -7381 0
911 1215 -7383 0
913 -7369 0
913 1202 -7371 0
913 1203 -7373 0
913 1205 -7375 0
913 1207 -7377 0
913 1209 -7379 0
913 1211 -7381 0
913 1213 -7383 0
913 1215 -7385 0
915 -7371 0
915 1202 -7373 0
915 1203 -7375 0
915 1205 -7377 0
915 1207 -7379 0
915 1209 -7381 0
915 1211 -7383 0
915 1213 -7385 0
915 1215 -7387 0
c (0<=(shift(x_00007_00007, -1) - aux605 + shift(x_00009_00009, -1)))
-1215 7387 0
-1213 7385 0
-1211 7383 0
-1209 7381 0
-1207 7379 0
-1205 7377 0
-1203 7375 0
-1202 7373 0
-915 7387 0
-915 -1215 7385 0
-915 -1213 7383 0
-915 -1211 7381 0
-915 -1209 7379 0
-915 -1207 7377 0
-915 -1205 7375 0
-915 -1203 7373 0
-915 -1202 7371 0
-913 7385 0
-913 -1215 7383 0
-913 -1213 7381 0
-913 -1211 7379 0
-913 -1209 7377 0
-913 -1207 7375 0
-913 -1205 7373 0
-913 -1203 7371 0
-913 -1202 7369 0
-911 7383 0
-911 -1215 7381 0
-911 -1213 7379 0
-911 -1211 7377 0
-911 -1209 7375 0
-911 -1207 7373 0
-911 -1205 7371 0
-911 -1203 7369 0
-911 -1202 7367 0
-909 7381 0
-909 -1215 7379 0
-909 -1213 7377 0
-909 -1211 7375 0
-909 -1209 7373 0
-909 -1207 7371 0
-909 -1205 7369 0
-909 -1203 7367 0
-909 -1202 7365 0
-907 7379 0
-907 -1215 7377 0
-907 -1213 7375 0
-907 -1211 7373 0
-907 -1209 7371 0
-907 -1207 7369 0
-907 -1205 7367 0
-907 -1203 7365 0
-907 -1202 7363 0
-905 7377 0
-905 -1215 7375 0
-905 -1213 7373 0
-905 -1211 7371 0
-905 -1209 7369 0
-905 -1207 7367 0
-905 -1205 7365 0
-905 -1203 7363 0
-905 -1202 7361 0
-903 7375 0
-903 -1215 7373 0
-903 -1213 7371 0
-903 -1211 7369 0
-903 -1209 7367 0
-903 -1207 7365 0
-903 -1205 7363 0
-903 -1203 7361 0
-903 -1202 7359 0
-902 7373 0
-902 -1215 7371 0
-902 -1213 7369 0
-902 -1211 7367 0
-902 -1209 7365 0
-902 -1207 7363 0
-902 -1205 7361 0
-902 -1203 7359 0
-902 -1202 7358 0
c ((shift(x_00007_00008, -1) - aux606 + shift(x_00009_00008, -1))<=0)
1187 -7389 0
1188 -7390 0
1190 -7392 0
1192 -7394 0
1194 -7396 0
1196 -7398 0
1198 -7400 0
1200 -7402 0
917 -7389 0
917 1187 -7390 0
917 1188 -7392 0
917 1190 -7394 0
917 1192 -7396 0
917 1194 -7398 0
917 1196 -7400 0
917 1198 -7402 0
917 1200 -7404 0
918 -7390 0
918 1187 -7392 0
918 1188 -7394 0
918 1190 -7396 0
918 1192 -7398 0
918 1194 -7400 0
918 1196 -7402 0
918 1198 -7404 0
918 1200 -7406 0
920 -7392 0
920 1187 -7394 0
920 1188 -7396 0
920 1190 -7398 0
920 1192 -7400 0
920 1194 -7402 0
920 1196 -7404 0
920 1198 -7406 0
920 1200 -7408 0
922 -7394 0
922 1187 -7396 0
922 1188 -7398 0
922 1190 -7400 0
922 1192 -7402 0
922 1194 -7404 0
922 1196 -7406 0
922 1198 -7408 0
922 1200 -7410 0
924 -7396 0
924 1187 -7398 0
924 1188 -7400 0
924 1190 -7402 0
924 1192 -7404 0
924 1194 -7406 0
924 1196 -7408 0
924 1198 -7410 0
924 1200 -7412 0
926 -7398 0
926 1187 -7400 0
926 1188 -7402 0
926 1190 -7404 0
926 1192 -7406 0
926 1194 -7408 0
926 1196 -7410 0
926 1198 -7412 0
926 1200 -7414 0
928 -7400 0
928 1187 -7402 0
928 1188 -7404 0
928 1190 -7406 0
928 1192 -7408 0
928 1194 -7410 0
928 1196 -7412 0
928 1198 -7414 0
928 1200 -7416 0
930 -7402 0
930 1187 -7404 0
930 1188 -7406 0
930 1190 -7408 0
930 1192 -7410 0
930 1194 -7412 0
930 1196 -7414 0
930 1198 -7416 0
930 1200 -7418 0
c (0<=(shift(x_00007_00008, -1) - aux606 + shift(x_00009_00008, -1)))
-1200 7418 0
-1198 7416 0
-1196 7414 0
-1194 7412 0
-1192 7410 0
-1190 7408 0
-1188 7406 0
-1187 7404 0
-930 7418 0
-930 -1200 7416 0
-930 -1198 7414 0
-930 -1196 7412 0
-930 -1194 7410 0
-930 -1192 7408 0
-930 -1190 7406 0
-930 -1188 7404 0
-930 -1187 7402 0
-928 7416 0
-928 -1200 7414 0
-928 -1198 7412 0
-928 -1196 7410 0
-928 -1194 7408 0
-928 -1192 7406 0
-928 -1190 7404 0
-928 -1188 7402 0
-928 -1187 7400 0
-926 7414 0
-926 -1200 7412 0
-926 -1198 7410 0
-926 -1196 7408 0
-926 -1194 7406 0
-926 -1192 7404 0
-926 -1190 7402 0
-926 -1188 7400 0
-926 -1187 7398 0
-924 7412 0
-924 -1200 7410 0
-924 -1198 7408 0
-924 -1196 7406 0
-924 -1194 7404 0
-924 -1192 7402 0
-924 -1190 7400 0
-924 -1188 7398 0
-924 -1187 7396 0
-922 7410 0
-922 -1200 7408 0
-922 -1198 7406 0
-922 -1196 7404 0
-922 -1194 7402 0
-922 -1192 7400 0
-922 -1190 7398 0
-922 -1188 7396 0
-922 -1187 7394 0
-920 7408 0
-920 -1200 7406 0
-920 -1198 7404 0
-920 -1196 7402 0
-920 -1194 7400 0
-920 -1192 7398 0
-920 -1190 7396 0
-920 -1188 7394 0
-920 -1187 7392 0
-918 7406 0
-918 -1200 7404 0
-918 -1198 7402 0
-918 -1196 7400 0
-918 -1194 7398 0
-918 -1192 7396 0
-918 -1190 7394 0
-918 -1188 7392 0
-918 -1187 7390 0
-917 7404 0
-917 -1200 7402 0
-917 -1198 7400 0
-917 -1196 7398 0
-917 -1194 7396 0
-917 -1192 7394 0
-917 -1190 7392 0
-917 -1188 7390 0
-917 -1187 7389 0
c (( - aux607 + shift(x_00008_00007, -1) + shift(x_00009_00007, -1))<=0)
1172 -7420 0
1173 -7421 0
1175 -7423 0
1177 -7425 0
1179 -7427 0
1181 -7429 0
1183 -7431 0
1185 -7433 0
1037 -7420 0
1037 1172 -7421 0
1037 1173 -7423 0
1037 1175 -7425 0
1037 1177 -7427 0
1037 1179 -7429 0
1037 1181 -7431 0
1037 1183 -7433 0
1037 1185 -7435 0
1038 -7421 0
1038 1172 -7423 0
1038 1173 -7425 0
1038 1175 -7427 0
1038 1177 -7429 0
1038 1179 -7431 0
1038 1181 -7433 0
1038 1183 -7435 0
1038 1185 -7437 0
1040 -7423 0
1040 1172 -7425 0
1040 1173 -7427 0
1040 1175 -7429 0
1040 1177 -7431 0
1040 1179 -7433 0
1040 1181 -7435 0
1040 1183 -7437 0
1040 1185 -7439 0
1042 -7425 0
1042 1172 -7427 0
1042 1173 -7429 0
1042 1175 -7431 0
1042 1177 -7433 0
1042 1179 -7435 0
1042 1181 -7437 0
1042 1183 -7439 0
1042 1185 -7441 0
1044 -7427 0
1044 1172 -7429 0
1044 1173 -7431 0
1044 1175 -7433 0
1044 1177 -7435 0
1044 1179 -7437 0
1044 1181 -7439 0
1044 1183 -7441 0
1044 1185 -7443 0
1046 -7429 0
1046 1172 -7431 0
1046 1173 -7433 0
1046 1175 -7435 0
1046 1177 -7437 0
1046 1179 -7439 0
1046 1181 -7441 0
1046 1183 -7443 0
1046 1185 -7445 0
1048 -7431 0
1048 1172 -7433 0
1048 1173 -7435 0
1048 1175 -7437 0
1048 1177 -7439 0
1048 1179 -7441 0
1048 1181 -7443 0
1048 1183 -7445 0
1048 1185 -7447 0
1050 -7433 0
1050 1172 -7435 0
1050 1173 -7437 0
1050 1175 -7439 0
1050 1177 -7441 0
1050 1179 -7443 0
1050 1181 -7445 0
1050 1183 -7447 0
1050 1185 -7449 0
c (0<=( - aux607 + shift(x_00008_00007, -1) + shift(x_00009_00007, -1)))
-1185 7449 0
-1183 7447 0
-1181 7445 0
-1179 7443 0
-1177 7441 0
-1175 7439 0
-1173 7437 0
-1172 7435 0
-1050 7449 0
-1050 -1185 7447 0
-1050 -1183 7445 0
-1050 -1181 7443 0
-1050 -1179 7441 0
-1050 -1177 7439 0
-1050 -1175 7437 0
-1050 -1173 7435 0
-1050 -1172 7433 0
-1048 7447 0
-1048 -1185 7445 0
-1048 -1183 7443 0
-1048 -1181 7441 0
-1048 -1179 7439 0
-1048 -1177 7437 0
-1048 -1175 7435 0
-1048 -1173 7433 0
-1048 -1172 7431 0
-1046 7445 0
-1046 -1185 7443 0
-1046 -1183 7441 0
-1046 -1181 7439 0
-1046 -1179 7437 0
-1046 -1177 7435 0
-1046 -1175 7433 0
-1046 -1173 7431 0
-1046 -1172 7429 0
-1044 7443 0
-1044 -1185 7441 0
-1044 -1183 7439 0
-1044 -1181 7437 0
-1044 -1179 7435 0
-1044 -1177 7433 0
-1044 -1175 7431 0
-1044 -1173 7429 0
-1044 -1172 7427 0
-1042 7441 0
-1042 -1185 7439 0
-1042 -1183 7437 0
-1042 -1181 7435 0
-1042 -1179 7433 0
-1042 -1177 7431 0
-1042 -1175 7429 0
-1042 -1173 7427 0
-1042 -1172 7425 0
-1040 7439 0
-1040 -1185 7437 0
-1040 -1183 7435 0
-1040 -1181 7433 0
-1040 -1179 7431 0
-1040 -1177 7429 0
-1040 -1175 7427 0
-1040 -1173 7425 0
-1040 -1172 7423 0
-1038 7437 0
-1038 -1185 7435 0
-1038 -1183 7433 0
-1038 -1181 7431 0
-1038 -1179 7429 0
-1038 -1177 7427 0
-1038 -1175 7425 0
-1038 -1173 7423 0
-1038 -1172 7421 0
-1037 7435 0
-1037 -1185 7433 0
-1037 -1183 7431 0
-1037 -1181 7429 0
-1037 -1179 7427 0
-1037 -1177 7425 0
-1037 -1175 7423 0
-1037 -1173 7421 0
-1037 -1172 7420 0
c (( - aux608 + shift(x_00008_00008, -1) + shift(x_00008_00009, -1))<=0)
1067 -7451 0
1068 -7452 0
1070 -7454 0
1072 -7456 0
1074 -7458 0
1076 -7460 0
1078 -7462 0
1080 -7464 0
1052 -7451 0
1052 1067 -7452 0
1052 1068 -7454 0
1052 1070 -7456 0
1052 1072 -7458 0
1052 1074 -7460 0
1052 1076 -7462 0
1052 1078 -7464 0
1052 1080 -7466 0
1053 -7452 0
1053 1067 -7454 0
1053 1068 -7456 0
1053 1070 -7458 0
1053 1072 -7460 0
1053 1074 -7462 0
1053 1076 -7464 0
1053 1078 -7466 0
1053 1080 -7468 0
1055 -7454 0
1055 1067 -7456 0
1055 1068 -7458 0
1055 1070 -7460 0
1055 1072 -7462 0
1055 1074 -7464 0
1055 1076 -7466 0
1055 1078 -7468 0
1055 1080 -7470 0
1057 -7456 0
1057 1067 -7458 0
1057 1068 -7460 0
1057 1070 -7462 0
1057 1072 -7464 0
1057 1074 -7466 0
1057 1076 -7468 0
1057 1078 -7470 0
1057 1080 -7472 0
1059 -7458 0
1059 1067 -7460 0
1059 1068 -7462 0
1059 1070 -7464 0
1059 1072 -7466 0
1059 1074 -7468 0
1059 1076 -7470 0
1059 1078 -7472 0
1059 1080 -7474 0
1061 -7460 0
1061 1067 -7462 0
1061 1068 -7464 0
1061 1070 -7466 0
1061 1072 -7468 0
1061 1074 -7470 0
1061 1076 -7472 0
1061 1078 -7474 0
1061 1080 -7476 0
1063 -7462 0
1063 1067 -7464 0
1063 1068 -7466 0
1063 1070 -7468 0
1063 1072 -7470 0
1063 1074 -7472 0
1063 1076 -7474 0
1063 1078 -7476 0
1063 1080 -7478 0
1065 -7464 0
1065 1067 -7466 0
1065 1068 -7468 0
1065 1070 -7470 0
1065 1072 -7472 0
1065 1074 -7474 0
1065 1076 -7476 0
1065 1078 -7478 0
1065 1080 -7480 0
c (0<=( - aux608 + shift(x_00008_00008, -1) + shift(x_00008_00009, -1)))
-1080 7480 0
-1078 7478 0
-1076 7476 0
-1074 7474 0
-1072 7472 0
-1070 7470 0
-1068 7468 0
-1067 7466 0
-1065 7480 0
-1065 -1080 7478 0
-1065 -1078 7476 0
-1065 -1076 7474 0
-1065 -1074 7472 0
-1065 -1072 7470 0
-1065 -1070 7468 0
-1065 -1068 7466 0
-1065 -1067 7464 0
-1063 7478 0
-1063 -1080 7476 0
-1063 -1078 7474 0
-1063 -1076 7472 0
-1063 -1074 7470 0
-1063 -1072 7468 0
-1063 -1070 7466 0
-1063 -1068 7464 0
-1063 -1067 7462 0
-1061 7476 0
-1061 -1080 7474 0
-1061 -1078 7472 0
-1061 -1076 7470 0
-1061 -1074 7468 0
-1061 -1072 7466 0
-1061 -1070 7464 0
-1061 -1068 7462 0
-1061 -1067 7460 0
-1059 7474 0
-1059 -1080 7472 0
-1059 -1078 7470 0
-1059 -1076 7468 0
-1059 -1074 7466 0
-1059 -1072 7464 0
-1059 -1070 7462 0
-1059 -1068 7460 0
-1059 -1067 7458 0
-1057 7472 0
-1057 -1080 7470 0
-1057 -1078 7468 0
-1057 -1076 7466 0
-1057 -1074 7464 0
-1057 -1072 7462 0
-1057 -1070 7460 0
-1057 -1068 7458 0
-1057 -1067 7456 0
-1055 7470 0
-1055 -1080 7468 0
-1055 -1078 7466 0
-1055 -1076 7464 0
-1055 -1074 7462 0
-1055 -1072 7460 0
-1055 -1070 7458 0
-1055 -1068 7456 0
-1055 -1067 7454 0
-1053 7468 0
-1053 -1080 7466 0
-1053 -1078 7464 0
-1053 -1076 7462 0
-1053 -1074 7460 0
-1053 -1072 7458 0
-1053 -1070 7456 0
-1053 -1068 7454 0
-1053 -1067 7452 0
-1052 7466 0
-1052 -1080 7464 0
-1052 -1078 7462 0
-1052 -1076 7460 0
-1052 -1074 7458 0
-1052 -1072 7456 0
-1052 -1070 7454 0
-1052 -1068 7452 0
-1052 -1067 7451 0
c ((shift(x_00007_00009, -1) + aux608 - aux609)<=0)
7451 -7482 0
7452 -7483 0
7454 -7485 0
7456 -7487 0
7458 -7489 0
7460 -7491 0
7462 -7493 0
7464 -7495 0
7466 -7497 0
7468 -7499 0
7470 -7501 0
7472 -7503 0
7474 -7505 0
7476 -7507 0
7478 -7509 0
7480 -7511 0
932 -7482 0
932 7451 -7483 0
932 7452 -7485 0
932 7454 -7487 0
932 7456 -7489 0
932 7458 -7491 0
932 7460 -7493 0
932 7462 -7495 0
932 7464 -7497 0
932 7466 -7499 0
932 7468 -7501 0
932 7470 -7503 0
932 7472 -7505 0
932 7474 -7507 0
932 7476 -7509 0
932 7478 -7511 0
932 7480 -7513 0
933 -7483 0
933 7451 -7485 0
933 7452 -7487 0
933 7454 -7489 0
933 7456 -7491 0
933 7458 -7493 0
933 7460 -7495 0
933 7462 -7497 0
933 7464 -7499 0
933 7466 -7501 0
933 7468 -7503 0
933 7470 -7505 0
933 7472 -7507 0
933 7474 -7509 0
933 7476 -7511 0
933 7478 -7513 0
933 7480 -7515 0
935 -7485 0
935 7451 -7487 0
935 7452 -7489 0
935 7454 -7491 0
935 7456 -7493 0
935 7458 -7495 0
935 7460 -7497 0
935 7462 -7499 0
935 7464 -7501 0
935 7466 -7503 0
935 7468 -7505 0
935 7470 -7507 0
935 7472 -7509 0
935 7474 -7511 0
935 7476 -7513 0
935 7478 -7515 0
935 7480 -7517 0
937 -7487 0
937 7451 -7489 0
937 7452 -7491 0
937 7454 -7493 0
937 7456 -7495 0
937 7458 -7497 0
937 7460 -7499 0
937 7462 -7501 0
937 7464 -7503 0
937 7466 -7505 0
937 7468 -7507 0
937 7470 -7509 0
937 7472 -7511 0
937 7474 -7513 0
937 7476 -7515 0
937 7478 -7517 0
937 7480 -7519 0
939 -7489 0
939 7451 -7491 0
939 7452 -7493 0
939 7454 -7495 0
939 7456 -7497 0
939 7458 -7499 0
939 7460 -7501 0
939 7462 -7503 0
939 7464 -7505 0
939 7466 -7507 0
939 7468 -7509 0
939 7470 -7511 0
939 7472 -7513 0
939 7474 -7515 0
939 7476 -7517 0
939 7478 -7519 0
939 7480 -7521 0
941 -7491 0
941 7451 -7493 0
941 7452 -7495 0
941 7454 -7497 0
941 7456 -7499 0
941 7458 -7501 0
941 7460 -7503 0
941 7462 -7505 0
941 7464 -7507 0
941 7466 -7509 0
941 7468 -7511 0
941 7470 -7513 0
941 7472 -7515 0
941 7474 -7517 0
941 7476 -7519 0
941 7478 -7521 0
941 7480 -7523 0
943 -7493 0
943 7451 -7495 0
943 7452 -7497 0
943 7454 -7499 0
943 7456 -7501 0
943 7458 -7503 0
943 7460 -7505 0
943 7462 -7507 0
943 7464 -7509 0
943 7466 -7511 0
943 7468 -7513 0
943 7470 -7515 0
943 7472 -7517 0
943 7474 -7519 0
943 7476 -7521 0
943 7478 -7523 0
943 7480 -7525 0
945 -7495 0
945 7451 -7497 0
945 7452 -7499 0
945 7454 -7501 0
945 7456 -7503 0
945 7458 -7505 0
945 7460 -7507 0
945 7462 -7509 0
945 7464 -7511 0
945 7466 -7513 0
945 7468 -7515 0
945 7470 -7517 0
945 7472 -7519 0
945 7474 -7521 0
945 7476 -7523 0
945 7478 -7525 0
945 7480 -7527 0
c (0<=(shift(x_00007_00009, -1) + aux608 - aux609))
-7480 7527 0
-7478 7525 0
-7476 7523 0
-7474 7521 0
-7472 7519 0
-7470 7517 0
-7468 7515 0
-7466 7513 0
-7464 7511 0
-7462 7509 0
-7460 7507 0
-7458 7505 0
-7456 7503 0
-7454 7501 0
-7452 7499 0
-7451 7497 0
-945 7527 0
-945 -7480 7525 0
-945 -7478 7523 0
-945 -7476 7521 0
-945 -7474 7519 0
-945 -7472 7517 0
-945 -7470 7515 0
-945 -7468 7513 0
-945 -7466 7511 0
-945 -7464 7509 0
-945 -7462 7507 0
-945 -7460 7505 0
-945 -7458 7503 0
-945 -7456 7501 0
-945 -7454 7499 0
-945 -7452 7497 0
-945 -7451 7495 0
-943 7525 0
-943 -7480 7523 0
-943 -7478 7521 0
-943 -7476 7519 0
-943 -7474 7517 0
-943 -7472 7515 0
-943 -7470 7513 0
-943 -7468 7511 0
-943 -7466 7509 0
-943 -7464 7507 0
-943 -7462 7505 0
-943 -7460 7503 0
-943 -7458 7501 0
-943 -7456 7499 0
-943 -7454 7497 0
-943 -7452 7495 0
-943 -7451 7493 0
-941 7523 0
-941 -7480 7521 0
-941 -7478 7519 0
-941 -7476 7517 0
-941 -7474 7515 0
-941 -7472 7513 0
-941 -7470 7511 0
-941 -7468 7509 0
-941 -7466 7507 0
-941 -7464 7505 0
-941 -7462 7503 0
-941 -7460 7501 0
-941 -7458 7499 0
-941 -7456 7497 0
-941 -7454 7495 0
-941 -7452 7493 0
-941 -7451 7491 0
-939 7521 0
-939 -7480 7519 0
-939 -7478 7517 0
-939 -7476 7515 0
-939 -7474 7513 0
-939 -7472 7511 0
-939 -7470 7509 0
-939 -7468 7507 0
-939 -7466 7505 0
-939 -7464 7503 0
-939 -7462 7501 0
-939 -7460 7499 0
-939 -7458 7497 0
-939 -7456 7495 0
-939 -7454 7493 0
-939 -7452 7491 0
-939 -7451 7489 0
-937 7519 0
-937 -7480 7517 0
-937 -7478 7515 0
-937 -7476 7513 0
-937 -7474 7511 0
-937 -7472 7509 0
-937 -7470 7507 0
-937 -7468 7505 0
-937 -7466 7503 0
-937 -7464 7501 0
-937 -7462 7499 0
-937 -7460 7497 0
-937 -7458 7495 0
-937 -7456 7493 0
-937 -7454 7491 0
-937 -7452 7489 0
-937 -7451 7487 0
-935 7517 0
-935 -7480 7515 0
-935 -7478 7513 0
-935 -7476 7511 0
-935 -7474 7509 0
-935 -7472 7507 0
-935 -7470 7505 0
-935 -7468 7503 0
-935 -7466 7501 0
-935 -7464 7499 0
-935 -7462 7497 0
-935 -7460 7495 0
-935 -7458 7493 0
-935 -7456 7491 0
-935 -7454 7489 0
-935 -7452 7487 0
-935 -7451 7485 0
-933 7515 0
-933 -7480 7513 0
-933 -7478 7511 0
-933 -7476 7509 0
-933 -7474 7507 0
-933 -7472 7505 0
-933 -7470 7503 0
-933 -7468 7501 0
-933 -7466 7499 0
-933 -7464 7497 0
-933 -7462 7495 0
-933 -7460 7493 0
-933 -7458 7491 0
-933 -7456 7489 0
-933 -7454 7487 0
-933 -7452 7485 0
-933 -7451 7483 0
-932 7513 0
-932 -7480 7511 0
-932 -7478 7509 0
-932 -7476 7507 0
-932 -7474 7505 0
-932 -7472 7503 0
-932 -7470 7501 0
-932 -7468 7499 0
-932 -7466 7497 0
-932 -7464 7495 0
-932 -7462 7493 0
-932 -7460 7491 0
-932 -7458 7489 0
-932 -7456 7487 0
-932 -7454 7485 0
-932 -7452 7483 0
-932 -7451 7482 0
c ((aux605 + aux607 - aux610)<=0)
7420 -7529 0
7421 -7530 0
7423 -7532 0
7425 -7534 0
7427 -7536 0
7429 -7538 0
7431 -7540 0
7433 -7542 0
7435 -7544 0
7437 -7546 0
7439 -7548 0
7441 -7550 0
7443 -7552 0
7445 -7554 0
7447 -7556 0
7449 -7558 0
7358 -7529 0
7358 7420 -7530 0
7358 7421 -7532 0
7358 7423 -7534 0
7358 7425 -7536 0
7358 7427 -7538 0
7358 7429 -7540 0
7358 7431 -7542 0
7358 7433 -7544 0
7358 7435 -7546 0
7358 7437 -7548 0
7358 7439 -7550 0
7358 7441 -7552 0
7358 7443 -7554 0
7358 7445 -7556 0
7358 7447 -7558 0
7358 7449 -7560 0
7359 -7530 0
7359 7420 -7532 0
7359 7421 -7534 0
7359 7423 -7536 0
7359 7425 -7538 0
7359 7427 -7540 0
7359 7429 -7542 0
7359 7431 -7544 0
7359 7433 -7546 0
7359 7435 -7548 0
7359 7437 -7550 0
7359 7439 -7552 0
7359 7441 -7554 0
7359 7443 -7556 0
7359 7445 -7558 0
7359 7447 -7560 0
7359 7449 -7562 0
7361 -7532 0
7361 7420 -7534 0
7361 7421 -7536 0
7361 7423 -7538 0
7361 7425 -7540 0
7361 7427 -7542 0
7361 7429 -7544 0
7361 7431 -7546 0
7361 7433 -7548 0
7361 7435 -7550 0
7361 7437 -7552 0
7361 7439 -7554 0
7361 7441 -7556 0
7361 7443 -7558 0
7361 7445 -7560 0
7361 7447 -7562 0
7361 7449 -7564 0
7363 -7534 0
7363 7420 -7536 0
7363 7421 -7538 0
7363 7423 -7540 0
7363 7425 -7542 0
7363 7427 -7544 0
7363 7429 -7546 0
7363 7431 -7548 0
7363 7433 -7550 0
7363 7435 -7552 0
7363 7437 -7554 0
7363 7439 -7556 0
7363 7441 -7558 0
7363 7443 -7560 0
7363 7445 -7562 0
7363 7447 -7564 0
7363 7449 -7566 0
7365 -7536 0
7365 7420 -7538 0
7365 7421 -7540 0
7365 7423 -7542 0
7365 7425 -7544 0
7365 7427 -7546 0
7365 7429 -7548 0
7365 7431 -7550 0
7365 7433 -7552 0
7365 7435 -7554 0
7365 7437 -7556 0
7365 7439 -7558 0
7365 7441 -7560 0
7365 7443 -7562 0
7365 7445 -7564 0
7365 7447 -7566 0
7365 7449 -7568 0
7367 -7538 0
7367 7420 -7540 0
7367 7421 -7542 0
7367 7423 -7544 0
7367 7425 -7546 0
7367 7427 -7548 0
7367 7429 -7550 0
7367 7431 -7552 0
7367 7433 -7554 0
7367 7435 -7556 0
7367 7437 -7558 0
7367 7439 -7560 0
7367 7441 -7562 0
7367 7443 -7564 0
7367 7445 -7566 0
7367 7447 -7568 0
7367 7449 -7570 0
7369 -7540 0
7369 7420 -7542 0
7369 7421 -7544 0
7369 7423 -7546 0
7369 7425 -7548 0
7369 7427 -7550 0
7369 7429 -7552 0
7369 7431 -7554 0
7369 7433 -7556 0
7369 7435 -7558 0
7369 7437 -7560 0
7369 7439 -7562 0
7369 7441 -7564 0
7369 7443 -7566 0
7369 7445 -7568 0
7369 7447 -7570 0
7369 7449 -7572 0
7371 -7542 0
7371 7420 -7544 0
7371 7421 -7546 0
7371 7423 -7548 0
7371 7425 -7550 0
7371 7427 -7552 0
7371 7429 -7554 0
7371 7431 -7556 0
7371 7433 -7558 0
7371 7435 -7560 0
7371 7437 -7562 0
7371 7439 -7564 0
7371 7441 -7566 0
7371 7443 -7568 0
7371 7445 -7570 0
7371 7447 -7572 0
7371 7449 -7574 0
7373 -7544 0
7373 7420 -7546 0
7373 7421 -7548 0
7373 7423 -7550 0
7373 7425 -7552 0
7373 7427 -7554 0
7373 7429 -7556 0
7373 7431 -7558 0
7373 7433 -7560 0
7373 7435 -7562 0
7373 7437 -7564 0
7373 7439 -7566 0
7373 7441 -7568 0
7373 7443 -7570 0
7373 7445 -7572 0
7373 7447 -7574 0
7373 7449 -7576 0
7375 -7546 0
7375 7420 -7548 0
7375 7421 -7550 0
7375 7423 -7552 0
7375 7425 -7554 0
7375 7427 -7556 0
7375 7429 -7558 0
7375 7431 -7560 0
7375 7433 -7562 0
7375 7435 -7564 0
7375 7437 -7566 0
7375 7439 -7568 0
7375 7441 -7570 0
7375 7443 -7572 0
7375 7445 -7574 0
7375 7447 -7576 0
7375 7449 -7578 0
7377 -7548 0
7377 7420 -7550 0
7377 7421 -7552 0
7377 7423 -7554 0
7377 7425 -7556 0
7377 7427 -7558 0
7377 7429 -7560 0
7377 7431 -7562 0
7377 7433 -7564 0
7377 7435 -7566 0
7377 7437 -7568 0
7377 7439 -7570 0
7377 7441 -7572 0
7377 7443 -7574 0
7377 7445 -7576 0
7377 7447 -7578 0
7377 7449 -7580 0
7379 -7550 0
7379 7420 -7552 0
7379 7421 -7554 0
7379 7423 -7556 0
7379 7425 -7558 0
7379 7427 -7560 0
7379 7429 -7562 0
7379 7431 -7564 0
7379 7433 -7566 0
7379 7435 -7568 0
7379 7437 -7570 0
7379 7439 -7572 0
7379 7441 -7574 0
7379 7443 -7576 0
7379 7445 -7578 0
7379 7447 -7580 0
7379 7449 -7582 0
7381 -7552 0
7381 7420 -7554 0
7381 7421 -7556 0
7381 7423 -7558 0
7381 7425 -7560 0
7381 7427 -7562 0
7381 7429 -7564 0
7381 7431 -7566 0
7381 7433 -7568 0
7381 7435 -7570 0
7381 7437 -7572 0
7381 7439 -7574 0
7381 7441 -7576 0
7381 7443 -7578 0
7381 7445 -7580 0
7381 7447 -7582 0
7381 7449 -7584 0
7383 -7554 0
7383 7420 -7556 0
7383 7421 -7558 0
7383 7423 -7560 0
7383 7425 -7562 0
7383 7427 -7564 0
7383 7429 -7566 0
7383 7431 -7568 0
7383 7433 -7570 0
7383 7435 -7572 0
7383 7437 -7574 0
7383 7439 -7576 0
7383 7441 -7578 0
7383 7443 -7580 0
7383 7445 -7582 0
7383 7447 -7584 0
7383 7449 -7586 0
7385 -7556 0
7385 7420 -7558 0
7385 7421 -7560 0
7385 7423 -7562 0
7385 7425 -7564 0
7385 7427 -7566 0
7385 7429 -7568 0
7385 7431 -7570 0
7385 7433 -7572 0
7385 7435 -7574 0
7385 7437 -7576 0
7385 7439 -7578 0
7385 7441 -7580 0
7385 7443 -7582 0
7385 7445 -7584 0
7385 7447 -7586 0
7385 7449 -7588 0
7387 -7558 0
7387 7420 -7560 0
7387 7421 -7562 0
7387 7423 -7564 0
7387 7425 -7566 0
7387 7427 -7568 0
7387 7429 -7570 0
7387 7431 -7572 0
7387 7433 -7574 0
7387 7435 -7576 0
7387 7437 -7578 0
7387 7439 -7580 0
7387 7441 -7582 0
7387 7443 -7584 0
7387 7445 -7586 0
7387 7447 -7588 0
7387 7449 -7590 0
c (0<=(aux605 + aux607 - aux610))
-7449 7590 0
-7447 7588 0
-7445 7586 0
-7443 7584 0
-7441 7582 0
-7439 7580 0
-7437 7578 0
-7435 7576 0
-7433 7574 0
-7431 7572 0
-7429 7570 0
-7427 7568 0
-7425 7566 0
-7423 7564 0
-7421 7562 0
-7420 7560 0
-7387 7590 0
-7387 -7449 7588 0
-7387 -7447 7586 0
-7387 -7445 7584 0
-7387 -7443 7582 0
-7387 -7441 7580 0
-7387 -7439 7578 0
-7387 -7437 7576 0
-7387 -7435 7574 0
-7387 -7433 7572 0
-7387 -7431 7570 0
-7387 -7429 7568 0
-7387 -7427 7566 0
-7387 -7425 7564 0
-7387 -7423 7562 0
-7387 -7421 7560 0
-7387 -7420 7558 0
-7385 7588 0
-7385 -7449 7586 0
-7385 -7447 7584 0
-7385 -7445 7582 0
-7385 -7443 7580 0
-7385 -7441 7578 0
-7385 -7439 7576 0
-7385 -7437 7574 0
-7385 -7435 7572 0
-7385 -7433 7570 0
-7385 -7431 7568 0
-7385 -7429 7566 0
-7385 -7427 7564 0
-7385 -7425 7562 0
-7385 -7423 7560 0
-7385 -7421 7558 0
-7385 -7420 7556 0
-7383 7586 0
-7383 -7449 7584 0
-7383 -7447 7582 0
-7383 -7445 7580 0
-7383 -7443 7578 0
-7383 -7441 7576 0
-7383 -7439 7574 0
-7383 -7437 7572 0
-7383 -7435 7570 0
-7383 -7433 7568 0
-7383 -7431 7566 0
-7383 -7429 7564 0
-7383 -7427 7562 0
-7383 -7425 7560 0
-7383 -7423 7558 0
-7383 -7421 7556 0
-7383 -7420 7554 0
-7381 7584 0
-7381 -7449 7582 0
-7381 -7447 7580 0
-7381 -7445 7578 0
-7381 -7443 7576 0
-7381 -7441 7574 0
-7381 -7439 7572 0
-7381 -7437 7570 0
-7381 -7435 7568 0
-7381 -7433 7566 0
-7381 -7431 7564 0
-7381 -7429 7562 0
-7381 -7427 7560 0
-7381 -7425 7558 0
-7381 -7423 7556 0
-7381 -7421 7554 0
-7381 -7420 7552 0
-7379 7582 0
-7379 -7449 7580 0
-7379 -7447 7578 0
-7379 -7445 7576 0
-7379 -7443 7574 0
-7379 -7441 7572 0
-7379 -7439 7570 0
-7379 -7437 7568 0
-7379 -7435 7566 0
-7379 -7433 7564 0
-7379 -7431 7562 0
-7379 -7429 7560 0
-7379 -7427 7558 0
-7379 -7425 7556 0
-7379 -7423 7554 0
-7379 -7421 7552 0
-7379 -7420 7550 0
-7377 7580 0
-7377 -7449 7578 0
-7377 -7447 7576 0
-7377 -7445 7574 0
-7377 -7443 7572 0
-7377 -7441 7570 0
-7377 -7439 7568 0
-7377 -7437 7566 0
-7377 -7435 7564 0
-7377 -7433 7562 0
-7377 -7431 7560 0
-7377 -7429 7558 0
-7377 -7427 7556 0
-7377 -7425 7554 0
-7377 -7423 7552 0
-7377 -7421 7550 0
-7377 -7420 7548 0
-7375 7578 0
-7375 -7449 7576 0
-7375 -7447 7574 0
-7375 -7445 7572 0
-7375 -7443 7570 0
-7375 -7441 7568 0
-7375 -7439 7566 0
-7375 -7437 7564 0
-7375 -7435 7562 0
-7375 -7433 7560 0
-7375 -7431 7558 0
-7375 -7429 7556 0
-7375 -7427 7554 0
-7375 -7425 7552 0
-7375 -7423 7550 0
-7375 -7421 7548 0
-7375 -7420 7546 0
-7373 7576 0
-7373 -7449 7574 0
-7373 -7447 7572 0
-7373 -7445 7570 0
-7373 -7443 7568 0
-7373 -7441 7566 0
-7373 -7439 7564 0
-7373 -7437 7562 0
-7373 -7435 7560 0
-7373 -7433 7558 0
-7373 -7431 7556 0
-7373 -7429 7554 0
-7373 -7427 7552 0
-7373 -7425 7550 0
-7373 -7423 7548 0
-7373 -7421 7546 0
-7373 -7420 7544 0
-7371 7574 0
-7371 -7449 7572 0
-7371 -7447 7570 0
-7371 -7445 7568 0
-7371 -7443 7566 0
-7371 -7441 7564 0
-7371 -7439 7562 0
-7371 -7437 7560 0
-7371 -7435 7558 0
-7371 -7433 7556 0
-7371 -7431 7554 0
-7371 -7429 7552 0
-7371 -7427 7550 0
-7371 -7425 7548 0
-7371 -7423 7546 0
-7371 -7421 7544 0
-7371 -7420 7542 0
-7369 7572 0
-7369 -7449 7570 0
-7369 -7447 7568 0
-7369 -7445 7566 0
-7369 -7443 7564 0
-7369 -7441 7562 0
-7369 -7439 7560 0
-7369 -7437 7558 0
-7369 -7435 7556 0
-7369 -7433 7554 0
-7369 -7431 7552 0
-7369 -7429 7550 0
-7369 -7427 7548 0
-7369 -7425 7546 0
-7369 -7423 7544 0
-7369 -7421 7542 0
-7369 -7420 7540 0
-7367 7570 0
-7367 -7449 7568 0
-7367 -7447 7566 0
-7367 -7445 7564 0
-7367 -7443 7562 0
-7367 -7441 7560 0
-7367 -7439 7558 0
-7367 -7437 7556 0
-7367 -7435 7554 0
-7367 -7433 7552 0
-7367 -7431 7550 0
-7367 -7429 7548 0
-7367 -7427 7546 0
-7367 -7425 7544 0
-7367 -7423 7542 0
-7367 -7421 7540 0
-7367 -7420 7538 0
-7365 7568 0
-7365 -7449 7566 0
-7365 -7447 7564 0
-7365 -7445 7562 0
-7365 -7443 7560 0
-7365 -7441 7558 0
-7365 -7439 7556 0
-7365 -7437 7554 0
-7365 -7435 7552 0
-7365 -7433 7550 0
-7365 -7431 7548 0
-7365 -7429 7546 0
-7365 -7427 7544 0
-7365 -7425 7542 0
-7365 -7423 7540 0
-7365 -7421 7538 0
-7365 -7420 7536 0
-7363 7566 0
-7363 -7449 7564 0
-7363 -7447 7562 0
-7363 -7445 7560 0
-7363 -7443 7558 0
-7363 -7441 7556 0
-7363 -7439 7554 0
-7363 -7437 7552 0
-7363 -7435 7550 0
-7363 -7433 7548 0
-7363 -7431 7546 0
-7363 -7429 7544 0
-7363 -7427 7542 0
-7363 -7425 7540 0
-7363 -7423 7538 0
-7363 -7421 7536 0
-7363 -7420 7534 0
-7361 7564 0
-7361 -7449 7562 0
-7361 -7447 7560 0
-7361 -7445 7558 0
-7361 -7443 7556 0
-7361 -7441 7554 0
-7361 -7439 7552 0
-7361 -7437 7550 0
-7361 -7435 7548 0
-7361 -7433 7546 0
-7361 -7431 7544 0
-7361 -7429 7542 0
-7361 -7427 7540 0
-7361 -7425 7538 0
-7361 -7423 7536 0
-7361 -7421 7534 0
-7361 -7420 7532 0
-7359 7562 0
-7359 -7449 7560 0
-7359 -7447 7558 0
-7359 -7445 7556 0
-7359 -7443 7554 0
-7359 -7441 7552 0
-7359 -7439 7550 0
-7359 -7437 7548 0
-7359 -7435 7546 0
-7359 -7433 7544 0
-7359 -7431 7542 0
-7359 -7429 7540 0
-7359 -7427 7538 0
-7359 -7425 7536 0
-7359 -7423 7534 0
-7359 -7421 7532 0
-7359 -7420 7530 0
-7358 7560 0
-7358 -7449 7558 0
-7358 -7447 7556 0
-7358 -7445 7554 0
-7358 -7443 7552 0
-7358 -7441 7550 0
-7358 -7439 7548 0
-7358 -7437 7546 0
-7358 -7435 7544 0
-7358 -7433 7542 0
-7358 -7431 7540 0
-7358 -7429 7538 0
-7358 -7427 7536 0
-7358 -7425 7534 0
-7358 -7423 7532 0
-7358 -7421 7530 0
-7358 -7420 7529 0
c ((SATLiteral(272) - aux611 + SATLiteral(542))<=0)
-542 -7592 0
-272 -7592 0
-272 -542 -7593 0
c (0<=(SATLiteral(272) - aux611 + SATLiteral(542)))
542 7593 0
272 7593 0
272 542 7592 0
c ((SATLiteral(947) - aux612 + SATLiteral(812))<=0)
-812 -7595 0
-947 -7595 0
-947 -812 -7596 0
c (0<=(SATLiteral(947) - aux612 + SATLiteral(812)))
812 7596 0
947 7596 0
947 812 7595 0
c (( - aux613 + SATLiteral(677) + SATLiteral(137))<=0)
-137 -7598 0
-677 -7598 0
-677 -137 -7599 0
c (0<=( - aux613 + SATLiteral(677) + SATLiteral(137)))
137 7599 0
677 7599 0
677 137 7598 0
c (( - aux614 + SATLiteral(407) + SATLiteral(1082))<=0)
-1082 -7601 0
-407 -7601 0
-407 -1082 -7602 0
c (0<=( - aux614 + SATLiteral(407) + SATLiteral(1082)))
1082 7602 0
407 7602 0
407 1082 7601 0
c ((aux614 - aux615 + SATLiteral(2))<=0)
7601 -7604 0
7602 -7605 0
-2 -7604 0
-2 7601 -7605 0
-2 7602 -7607 0
c (0<=(aux614 - aux615 + SATLiteral(2)))
-7602 7607 0
-7601 7605 0
2 7607 0
2 -7602 7605 0
2 -7601 7604 0
c ((aux611 + aux613 - aux616)<=0)
7598 -7609 0
7599 -7610 0
7592 -7609 0
7592 7598 -7610 0
7592 7599 -7612 0
7593 -7610 0
7593 7598 -7612 0
7593 7599 -7614 0
c (0<=(aux611 + aux613 - aux616))
-7599 7614 0
-7598 7612 0
-7593 7614 0
-7593 -7599 7612 0
-7593 -7598 7610 0
-7592 7612 0
-7592 -7599 7610 0
-7592 -7598 7609 0
c ((SATLiteral(274) - aux617 + SATLiteral(544))<=0)
-544 -7616 0
-274 -7616 0
-274 -544 -7617 0
c (0<=(SATLiteral(274) - aux617 + SATLiteral(544)))
544 7617 0
274 7617 0
274 544 7616 0
c ((SATLiteral(949) - aux618 + SATLiteral(814))<=0)
-814 -7619 0
-949 -7619 0
-949 -814 -7620 0
c (0<=(SATLiteral(949) - aux618 + SATLiteral(814)))
814 7620 0
949 7620 0
949 814 7619 0
c (( - aux619 + SATLiteral(679) + SATLiteral(139))<=0)
-139 -7622 0
-679 -7622 0
-679 -139 -7623 0
c (0<=( - aux619 + SATLiteral(679) + SATLiteral(139)))
139 7623 0
679 7623 0
679 139 7622 0
c (( - aux620 + SATLiteral(409) + SATLiteral(1084))<=0)
-1084 -7625 0
-409 -7625 0
-409 -1084 -7626 0
c (0<=( - aux620 + SATLiteral(409) + SATLiteral(1084)))
1084 7626 0
409 7626 0
409 1084 7625 0
c ((aux620 - aux621 + SATLiteral(4))<=0)
7625 -7628 0
7626 -7629 0
-4 -7628 0
-4 7625 -7629 0
-4 7626 -7631 0
c (0<=(aux620 - aux621 + SATLiteral(4)))
-7626 7631 0
-7625 7629 0
4 7631 0
4 -7626 7629 0
4 -7625 7628 0
c ((aux617 + aux619 - aux622)<=0)
7622 -7633 0
7623 -7634 0
7616 -7633 0
7616 7622 -7634 0
7616 7623 -7636 0
7617 -7634 0
7617 7622 -7636 0
7617 7623 -7638 0
c (0<=(aux617 + aux619 - aux622))
-7623 7638 0
-7622 7636 0
-7617 7638 0
-7617 -7623 7636 0
-7617 -7622 7634 0
-7616 7636 0
-7616 -7623 7634 0
-7616 -7622 7633 0
c ((SATLiteral(276) - aux623 + SATLiteral(546))<=0)
-546 -7640 0
-276 -7640 0
-276 -546 -7641 0
c (0<=(SATLiteral(276) - aux623 + SATLiteral(546)))
546 7641 0
276 7641 0
276 546 7640 0
c ((SATLiteral(951) - aux624 + SATLiteral(816))<=0)
-816 -7643 0
-951 -7643 0
-951 -816 -7644 0
c (0<=(SATLiteral(951) - aux624 + SATLiteral(816)))
816 7644 0
951 7644 0
951 816 7643 0
c (( - aux625 + SATLiteral(681) + SATLiteral(141))<=0)
-141 -7646 0
-681 -7646 0
-681 -141 -7647 0
c (0<=( - aux625 + SATLiteral(681) + SATLiteral(141)))
141 7647 0
681 7647 0
681 141 7646 0
c (( - aux626 + SATLiteral(411) + SATLiteral(1086))<=0)
-1086 -7649 0
-411 -7649 0
-411 -1086 -7650 0
c (0<=( - aux626 + SATLiteral(411) + SATLiteral(1086)))
1086 7650 0
411 7650 0
411 1086 7649 0
c ((aux626 - aux627 + SATLiteral(6))<=0)
7649 -7652 0
7650 -7653 0
-6 -7652 0
-6 7649 -7653 0
-6 7650 -7655 0
c (0<=(aux626 - aux627 + SATLiteral(6)))
-7650 7655 0
-7649 7653 0
6 7655 0
6 -7650 7653 0
6 -7649 7652 0
c ((aux623 + aux625 - aux628)<=0)
7646 -7657 0
7647 -7658 0
7640 -7657 0
7640 7646 -7658 0
7640 7647 -7660 0
7641 -7658 0
7641 7646 -7660 0
7641 7647 -7662 0
c (0<=(aux623 + aux625 - aux628))
-7647 7662 0
-7646 7660 0
-7641 7662 0
-7641 -7647 7660 0
-7641 -7646 7658 0
-7640 7660 0
-7640 -7647 7658 0
-7640 -7646 7657 0
c ((SATLiteral(278) - aux629 + SATLiteral(548))<=0)
-548 -7664 0
-278 -7664 0
-278 -548 -7665 0
c (0<=(SATLiteral(278) - aux629 + SATLiteral(548)))
548 7665 0
278 7665 0
278 548 7664 0
c ((SATLiteral(953) - aux630 + SATLiteral(818))<=0)
-818 -7667 0
-953 -7667 0
-953 -818 -7668 0
c (0<=(SATLiteral(953) - aux630 + SATLiteral(818)))
818 7668 0
953 7668 0
953 818 7667 0
c (( - aux631 + SATLiteral(683) + SATLiteral(143))<=0)
-143 -7670 0
-683 -7670 0
-683 -143 -7671 0
c (0<=( - aux631 + SATLiteral(683) + SATLiteral(143)))
143 7671 0
683 7671 0
683 143 7670 0
c (( - aux632 + SATLiteral(413) + SATLiteral(1088))<=0)
-1088 -7673 0
-413 -7673 0
-413 -1088 -7674 0
c (0<=( - aux632 + SATLiteral(413) + SATLiteral(1088)))
1088 7674 0
413 7674 0
413 1088 7673 0
c ((aux632 - aux633 + SATLiteral(8))<=0)
7673 -7676 0
7674 -7677 0
-8 -7676 0
-8 7673 -7677 0
-8 7674 -7679 0
c (0<=(aux632 - aux633 + SATLiteral(8)))
-7674 7679 0
-7673 7677 0
8 7679 0
8 -7674 7677 0
8 -7673 7676 0
c ((aux629 + aux631 - aux634)<=0)
7670 -7681 0
7671 -7682 0
7664 -7681 0
7664 7670 -7682 0
7664 7671 -7684 0
7665 -7682 0
7665 7670 -7684 0
7665 7671 -7686 0
c (0<=(aux629 + aux631 - aux634))
-7671 7686 0
-7670 7684 0
-7665 7686 0
-7665 -7671 7684 0
-7665 -7670 7682 0
-7664 7684 0
-7664 -7671 7682 0
-7664 -7670 7681 0
c ((SATLiteral(280) - aux635 + SATLiteral(550))<=0)
-550 -7688 0
-280 -7688 0
-280 -550 -7689 0
c (0<=(SATLiteral(280) - aux635 + SATLiteral(550)))
550 7689 0
280 7689 0
280 550 7688 0
c ((SATLiteral(955) - aux636 + SATLiteral(820))<=0)
-820 -7691 0
-955 -7691 0
-955 -820 -7692 0
c (0<=(SATLiteral(955) - aux636 + SATLiteral(820)))
820 7692 0
955 7692 0
955 820 7691 0
c (( - aux637 + SATLiteral(685) + SATLiteral(145))<=0)
-145 -7694 0
-685 -7694 0
-685 -145 -7695 0
c (0<=( - aux637 + SATLiteral(685) + SATLiteral(145)))
145 7695 0
685 7695 0
685 145 7694 0
c (( - aux638 + SATLiteral(415) + SATLiteral(1090))<=0)
-1090 -7697 0
-415 -7697 0
-415 -1090 -7698 0
c (0<=( - aux638 + SATLiteral(415) + SATLiteral(1090)))
1090 7698 0
415 7698 0
415 1090 7697 0
c ((aux638 - aux639 + SATLiteral(10))<=0)
7697 -7700 0
7698 -7701 0
-10 -7700 0
-10 7697 -7701 0
-10 7698 -7703 0
c (0<=(aux638 - aux639 + SATLiteral(10)))
-7698 7703 0
-7697 7701 0
10 7703 0
10 -7698 7701 0
10 -7697 7700 0
c ((aux635 + aux637 - aux640)<=0)
7694 -7705 0
7695 -7706 0
7688 -7705 0
7688 7694 -7706 0
7688 7695 -7708 0
7689 -7706 0
7689 7694 -7708 0
7689 7695 -7710 0
c (0<=(aux635 + aux637 - aux640))
-7695 7710 0
-7694 7708 0
-7689 7710 0
-7689 -7695 7708 0
-7689 -7694 7706 0
-7688 7708 0
-7688 -7695 7706 0
-7688 -7694 7705 0
c ((SATLiteral(282) - aux641 + SATLiteral(552))<=0)
-552 -7712 0
-282 -7712 0
-282 -552 -7713 0
c (0<=(SATLiteral(282) - aux641 + SATLiteral(552)))
552 7713 0
282 7713 0
282 552 7712 0
c ((SATLiteral(957) - aux642 + SATLiteral(822))<=0)
-822 -7715 0
-957 -7715 0
-957 -822 -7716 0
c (0<=(SATLiteral(957) - aux642 + SATLiteral(822)))
822 7716 0
957 7716 0
957 822 7715 0
c (( - aux643 + SATLiteral(687) + SATLiteral(147))<=0)
-147 -7718 0
-687 -7718 0
-687 -147 -7719 0
c (0<=( - aux643 + SATLiteral(687) + SATLiteral(147)))
147 7719 0
687 7719 0
687 147 7718 0
c (( - aux644 + SATLiteral(417) + SATLiteral(1092))<=0)
-1092 -7721 0
-417 -7721 0
-417 -1092 -7722 0
c (0<=( - aux644 + SATLiteral(417) + SATLiteral(1092)))
1092 7722 0
417 7722 0
417 1092 7721 0
c ((aux644 - aux645 + SATLiteral(12))<=0)
7721 -7724 0
7722 -7725 0
-12 -7724 0
-12 7721 -7725 0
-12 7722 -7727 0
c (0<=(aux644 - aux645 + SATLiteral(12)))
-7722 7727 0
-7721 7725 0
12 7727 0
12 -7722 7725 0
12 -7721 7724 0
c ((aux641 + aux643 - aux646)<=0)
7718 -7729 0
7719 -7730 0
7712 -7729 0
7712 7718 -7730 0
7712 7719 -7732 0
7713 -7730 0
7713 7718 -7732 0
7713 7719 -7734 0
c (0<=(aux641 + aux643 - aux646))
-7719 7734 0
-7718 7732 0
-7713 7734 0
-7713 -7719 7732 0
-7713 -7718 7730 0
-7712 7732 0
-7712 -7719 7730 0
-7712 -7718 7729 0
c ((SATLiteral(284) - aux647 + SATLiteral(554))<=0)
-554 -7736 0
-284 -7736 0
-284 -554 -7737 0
c (0<=(SATLiteral(284) - aux647 + SATLiteral(554)))
554 7737 0
284 7737 0
284 554 7736 0
c ((SATLiteral(959) - aux648 + SATLiteral(824))<=0)
-824 -7739 0
-959 -7739 0
-959 -824 -7740 0
c (0<=(SATLiteral(959) - aux648 + SATLiteral(824)))
824 7740 0
959 7740 0
959 824 7739 0
c (( - aux649 + SATLiteral(689) + SATLiteral(149))<=0)
-149 -7742 0
-689 -7742 0
-689 -149 -7743 0
c (0<=( - aux649 + SATLiteral(689) + SATLiteral(149)))
149 7743 0
689 7743 0
689 149 7742 0
c (( - aux650 + SATLiteral(419) + SATLiteral(1094))<=0)
-1094 -7745 0
-419 -7745 0
-419 -1094 -7746 0
c (0<=( - aux650 + SATLiteral(419) + SATLiteral(1094)))
1094 7746 0
419 7746 0
419 1094 7745 0
c ((aux650 - aux651 + SATLiteral(14))<=0)
7745 -7748 0
7746 -7749 0
-14 -7748 0
-14 7745 -7749 0
-14 7746 -7751 0
c (0<=(aux650 - aux651 + SATLiteral(14)))
-7746 7751 0
-7745 7749 0
14 7751 0
14 -7746 7749 0
14 -7745 7748 0
c ((aux647 + aux649 - aux652)<=0)
7742 -7753 0
7743 -7754 0
7736 -7753 0
7736 7742 -7754 0
7736 7743 -7756 0
7737 -7754 0
7737 7742 -7756 0
7737 7743 -7758 0
c (0<=(aux647 + aux649 - aux652))
-7743 7758 0
-7742 7756 0
-7737 7758 0
-7737 -7743 7756 0
-7737 -7742 7754 0
-7736 7756 0
-7736 -7743 7754 0
-7736 -7742 7753 0
c ((SATLiteral(286) - aux653 + SATLiteral(556))<=0)
-556 -7760 0
-286 -7760 0
-286 -556 -7761 0
c (0<=(SATLiteral(286) - aux653 + SATLiteral(556)))
556 7761 0
286 7761 0
286 556 7760 0
c ((SATLiteral(961) - aux654 + SATLiteral(826))<=0)
-826 -7763 0
-961 -7763 0
-961 -826 -7764 0
c (0<=(SATLiteral(961) - aux654 + SATLiteral(826)))
826 7764 0
961 7764 0
961 826 7763 0
c (( - aux655 + SATLiteral(691) + SATLiteral(151))<=0)
-151 -7766 0
-691 -7766 0
-691 -151 -7767 0
c (0<=( - aux655 + SATLiteral(691) + SATLiteral(151)))
151 7767 0
691 7767 0
691 151 7766 0
c (( - aux656 + SATLiteral(421) + SATLiteral(1096))<=0)
-1096 -7769 0
-421 -7769 0
-421 -1096 -7770 0
c (0<=( - aux656 + SATLiteral(421) + SATLiteral(1096)))
1096 7770 0
421 7770 0
421 1096 7769 0
c ((aux656 - aux657 + SATLiteral(16))<=0)
7769 -7772 0
7770 -7773 0
-16 -7772 0
-16 7769 -7773 0
-16 7770 -7775 0
c (0<=(aux656 - aux657 + SATLiteral(16)))
-7770 7775 0
-7769 7773 0
16 7775 0
16 -7770 7773 0
16 -7769 7772 0
c ((aux653 + aux655 - aux658)<=0)
7766 -7777 0
7767 -7778 0
7760 -7777 0
7760 7766 -7778 0
7760 7767 -7780 0
7761 -7778 0
7761 7766 -7780 0
7761 7767 -7782 0
c (0<=(aux653 + aux655 - aux658))
-7767 7782 0
-7766 7780 0
-7761 7782 0
-7761 -7767 7780 0
-7761 -7766 7778 0
-7760 7780 0
-7760 -7767 7778 0
-7760 -7766 7777 0
c ((SATLiteral(-285) - aux659 + SATLiteral(-555))<=0)
555 -7784 0
285 -7784 0
285 555 -7785 0
c (0<=(SATLiteral(-285) - aux659 + SATLiteral(-555)))
-555 7785 0
-285 7785 0
-285 -555 7784 0
c ((SATLiteral(-960) - aux660 + SATLiteral(-825))<=0)
825 -7787 0
960 -7787 0
960 825 -7788 0
c (0<=(SATLiteral(-960) - aux660 + SATLiteral(-825)))
-825 7788 0
-960 7788 0
-960 -825 7787 0
c (( - aux661 + SATLiteral(-690) + SATLiteral(-150))<=0)
150 -7790 0
690 -7790 0
690 150 -7791 0
c (0<=( - aux661 + SATLiteral(-690) + SATLiteral(-150)))
-150 7791 0
-690 7791 0
-690 -150 7790 0
c (( - aux662 + SATLiteral(-420) + SATLiteral(-1095))<=0)
1095 -7793 0
420 -7793 0
420 1095 -7794 0
c (0<=( - aux662 + SATLiteral(-420) + SATLiteral(-1095)))
-1095 7794 0
-420 7794 0
-420 -1095 7793 0
c ((aux662 - aux663 + SATLiteral(-15))<=0)
7793 -7796 0
7794 -7797 0
15 -7796 0
15 7793 -7797 0
15 7794 -7799 0
c (0<=(aux662 - aux663 + SATLiteral(-15)))
-7794 7799 0
-7793 7797 0
-15 7799 0
-15 -7794 7797 0
-15 -7793 7796 0
c ((aux659 + aux661 - aux664)<=0)
7790 -7801 0
7791 -7802 0
7784 -7801 0
7784 7790 -7802 0
7784 7791 -7804 0
7785 -7802 0
7785 7790 -7804 0
7785 7791 -7806 0
c (0<=(aux659 + aux661 - aux664))
-7791 7806 0
-7790 7804 0
-7785 7806 0
-7785 -7791 7804 0
-7785 -7790 7802 0
-7784 7804 0
-7784 -7791 7802 0
-7784 -7790 7801 0
c ((SATLiteral(287) - aux665 + SATLiteral(557))<=0)
-557 -7808 0
-287 -7808 0
-287 -557 -7809 0
c (0<=(SATLiteral(287) - aux665 + SATLiteral(557)))
557 7809 0
287 7809 0
287 557 7808 0
c ((SATLiteral(962) - aux666 + SATLiteral(827))<=0)
-827 -7811 0
-962 -7811 0
-962 -827 -7812 0
c (0<=(SATLiteral(962) - aux666 + SATLiteral(827)))
827 7812 0
962 7812 0
962 827 7811 0
c (( - aux667 + SATLiteral(692) + SATLiteral(152))<=0)
-152 -7814 0
-692 -7814 0
-692 -152 -7815 0
c (0<=( - aux667 + SATLiteral(692) + SATLiteral(152)))
152 7815 0
692 7815 0
692 152 7814 0
c (( - aux668 + SATLiteral(422) + SATLiteral(1097))<=0)
-1097 -7817 0
-422 -7817 0
-422 -1097 -7818 0
c (0<=( - aux668 + SATLiteral(422) + SATLiteral(1097)))
1097 7818 0
422 7818 0
422 1097 7817 0
c ((aux668 - aux669 + SATLiteral(17))<=0)
7817 -7820 0
7818 -7821 0
-17 -7820 0
-17 7817 -7821 0
-17 7818 -7823 0
c (0<=(aux668 - aux669 + SATLiteral(17)))
-7818 7823 0
-7817 7821 0
17 7823 0
17 -7818 7821 0
17 -7817 7820 0
c ((aux665 + aux667 - aux670)<=0)
7814 -7825 0
7815 -7826 0
7808 -7825 0
7808 7814 -7826 0
7808 7815 -7828 0
7809 -7826 0
7809 7814 -7828 0
7809 7815 -7830 0
c (0<=(aux665 + aux667 - aux670))
-7815 7830 0
-7814 7828 0
-7809 7830 0
-7809 -7815 7828 0
-7809 -7814 7826 0
-7808 7828 0
-7808 -7815 7826 0
-7808 -7814 7825 0
c ((SATLiteral(289) - aux671 + SATLiteral(559))<=0)
-559 -7832 0
-289 -7832 0
-289 -559 -7833 0
c (0<=(SATLiteral(289) - aux671 + SATLiteral(559)))
559 7833 0
289 7833 0
289 559 7832 0
c ((SATLiteral(964) - aux672 + SATLiteral(829))<=0)
-829 -7835 0
-964 -7835 0
-964 -829 -7836 0
c (0<=(SATLiteral(964) - aux672 + SATLiteral(829)))
829 7836 0
964 7836 0
964 829 7835 0
c (( - aux673 + SATLiteral(694) + SATLiteral(154))<=0)
-154 -7838 0
-694 -7838 0
-694 -154 -7839 0
c (0<=( - aux673 + SATLiteral(694) + SATLiteral(154)))
154 7839 0
694 7839 0
694 154 7838 0
c (( - aux674 + SATLiteral(424) + SATLiteral(1099))<=0)
-1099 -7841 0
-424 -7841 0
-424 -1099 -7842 0
c (0<=( - aux674 + SATLiteral(424) + SATLiteral(1099)))
1099 7842 0
424 7842 0
424 1099 7841 0
c ((aux674 - aux675 + SATLiteral(19))<=0)
7841 -7844 0
7842 -7845 0
-19 -7844 0
-19 7841 -7845 0
-19 7842 -7847 0
c (0<=(aux674 - aux675 + SATLiteral(19)))
-7842 7847 0
-7841 7845 0
19 7847 0
19 -7842 7845 0
19 -7841 7844 0
c ((aux671 + aux673 - aux676)<=0)
7838 -7849 0
7839 -7850 0
7832 -7849 0
7832 7838 -7850 0
7832 7839 -7852 0
7833 -7850 0
7833 7838 -7852 0
7833 7839 -7854 0
c (0<=(aux671 + aux673 - aux676))
-7839 7854 0
-7838 7852 0
-7833 7854 0
-7833 -7839 7852 0
-7833 -7838 7850 0
-7832 7852 0
-7832 -7839 7850 0
-7832 -7838 7849 0
c ((SATLiteral(291) - aux677 + SATLiteral(561))<=0)
-561 -7856 0
-291 -7856 0
-291 -561 -7857 0
c (0<=(SATLiteral(291) - aux677 + SATLiteral(561)))
561 7857 0
291 7857 0
291 561 7856 0
c ((SATLiteral(966) - aux678 + SATLiteral(831))<=0)
-831 -7859 0
-966 -7859 0
-966 -831 -7860 0
c (0<=(SATLiteral(966) - aux678 + SATLiteral(831)))
831 7860 0
966 7860 0
966 831 7859 0
c (( - aux679 + SATLiteral(696) + SATLiteral(156))<=0)
-156 -7862 0
-696 -7862 0
-696 -156 -7863 0
c (0<=( - aux679 + SATLiteral(696) + SATLiteral(156)))
156 7863 0
696 7863 0
696 156 7862 0
c (( - aux680 + SATLiteral(426) + SATLiteral(1101))<=0)
-1101 -7865 0
-426 -7865 0
-426 -1101 -7866 0
c (0<=( - aux680 + SATLiteral(426) + SATLiteral(1101)))
1101 7866 0
426 7866 0
426 1101 7865 0
c ((aux680 - aux681 + SATLiteral(21))<=0)
7865 -7868 0
7866 -7869 0
-21 -7868 0
-21 7865 -7869 0
-21 7866 -7871 0
c (0<=(aux680 - aux681 + SATLiteral(21)))
-7866 7871 0
-7865 7869 0
21 7871 0
21 -7866 7869 0
21 -7865 7868 0
c ((aux677 + aux679 - aux682)<=0)
7862 -7873 0
7863 -7874 0
7856 -7873 0
7856 7862 -7874 0
7856 7863 -7876 0
7857 -7874 0
7857 7862 -7876 0
7857 7863 -7878 0
c (0<=(aux677 + aux679 - aux682))
-7863 7878 0
-7862 7876 0
-7857 7878 0
-7857 -7863 7876 0
-7857 -7862 7874 0
-7856 7876 0
-7856 -7863 7874 0
-7856 -7862 7873 0
c ((SATLiteral(293) - aux683 + SATLiteral(563))<=0)
-563 -7880 0
-293 -7880 0
-293 -563 -7881 0
c (0<=(SATLiteral(293) - aux683 + SATLiteral(563)))
563 7881 0
293 7881 0
293 563 7880 0
c ((SATLiteral(968) - aux684 + SATLiteral(833))<=0)
-833 -7883 0
-968 -7883 0
-968 -833 -7884 0
c (0<=(SATLiteral(968) - aux684 + SATLiteral(833)))
833 7884 0
968 7884 0
968 833 7883 0
c (( - aux685 + SATLiteral(698) + SATLiteral(158))<=0)
-158 -7886 0
-698 -7886 0
-698 -158 -7887 0
c (0<=( - aux685 + SATLiteral(698) + SATLiteral(158)))
158 7887 0
698 7887 0
698 158 7886 0
c (( - aux686 + SATLiteral(428) + SATLiteral(1103))<=0)
-1103 -7889 0
-428 -7889 0
-428 -1103 -7890 0
c (0<=( - aux686 + SATLiteral(428) + SATLiteral(1103)))
1103 7890 0
428 7890 0
428 1103 7889 0
c ((aux686 - aux687 + SATLiteral(23))<=0)
7889 -7892 0
7890 -7893 0
-23 -7892 0
-23 7889 -7893 0
-23 7890 -7895 0
c (0<=(aux686 - aux687 + SATLiteral(23)))
-7890 7895 0
-7889 7893 0
23 7895 0
23 -7890 7893 0
23 -7889 7892 0
c ((aux683 + aux685 - aux688)<=0)
7886 -7897 0
7887 -7898 0
7880 -7897 0
7880 7886 -7898 0
7880 7887 -7900 0
7881 -7898 0
7881 7886 -7900 0
7881 7887 -7902 0
c (0<=(aux683 + aux685 - aux688))
-7887 7902 0
-7886 7900 0
-7881 7902 0
-7881 -7887 7900 0
-7881 -7886 7898 0
-7880 7900 0
-7880 -7887 7898 0
-7880 -7886 7897 0
c ((SATLiteral(295) - aux689 + SATLiteral(565))<=0)
-565 -7904 0
-295 -7904 0
-295 -565 -7905 0
c (0<=(SATLiteral(295) - aux689 + SATLiteral(565)))
565 7905 0
295 7905 0
295 565 7904 0
c ((SATLiteral(970) - aux690 + SATLiteral(835))<=0)
-835 -7907 0
-970 -7907 0
-970 -835 -7908 0
c (0<=(SATLiteral(970) - aux690 + SATLiteral(835)))
835 7908 0
970 7908 0
970 835 7907 0
c (( - aux691 + SATLiteral(700) + SATLiteral(160))<=0)
-160 -7910 0
-700 -7910 0
-700 -160 -7911 0
c (0<=( - aux691 + SATLiteral(700) + SATLiteral(160)))
160 7911 0
700 7911 0
700 160 7910 0
c (( - aux692 + SATLiteral(430) + SATLiteral(1105))<=0)
-1105 -7913 0
-430 -7913 0
-430 -1105 -7914 0
c (0<=( - aux692 + SATLiteral(430) + SATLiteral(1105)))
1105 7914 0
430 7914 0
430 1105 7913 0
c ((aux692 - aux693 + SATLiteral(25))<=0)
7913 -7916 0
7914 -7917 0
-25 -7916 0
-25 7913 -7917 0
-25 7914 -7919 0
c (0<=(aux692 - aux693 + SATLiteral(25)))
-7914 7919 0
-7913 7917 0
25 7919 0
25 -7914 7917 0
25 -7913 7916 0
c ((aux689 + aux691 - aux694)<=0)
7910 -7921 0
7911 -7922 0
7904 -7921 0
7904 7910 -7922 0
7904 7911 -7924 0
7905 -7922 0
7905 7910 -7924 0
7905 7911 -7926 0
c (0<=(aux689 + aux691 - aux694))
-7911 7926 0
-7910 7924 0
-7905 7926 0
-7905 -7911 7924 0
-7905 -7910 7922 0
-7904 7924 0
-7904 -7911 7922 0
-7904 -7910 7921 0
c ((SATLiteral(297) - aux695 + SATLiteral(567))<=0)
-567 -7928 0
-297 -7928 0
-297 -567 -7929 0
c (0<=(SATLiteral(297) - aux695 + SATLiteral(567)))
567 7929 0
297 7929 0
297 567 7928 0
c ((SATLiteral(972) - aux696 + SATLiteral(837))<=0)
-837 -7931 0
-972 -7931 0
-972 -837 -7932 0
c (0<=(SATLiteral(972) - aux696 + SATLiteral(837)))
837 7932 0
972 7932 0
972 837 7931 0
c (( - aux697 + SATLiteral(702) + SATLiteral(162))<=0)
-162 -7934 0
-702 -7934 0
-702 -162 -7935 0
c (0<=( - aux697 + SATLiteral(702) + SATLiteral(162)))
162 7935 0
702 7935 0
702 162 7934 0
c (( - aux698 + SATLiteral(432) + SATLiteral(1107))<=0)
-1107 -7937 0
-432 -7937 0
-432 -1107 -7938 0
c (0<=( - aux698 + SATLiteral(432) + SATLiteral(1107)))
1107 7938 0
432 7938 0
432 1107 7937 0
c ((aux698 - aux699 + SATLiteral(27))<=0)
7937 -7940 0
7938 -7941 0
-27 -7940 0
-27 7937 -7941 0
-27 7938 -7943 0
c (0<=(aux698 - aux699 + SATLiteral(27)))
-7938 7943 0
-7937 7941 0
27 7943 0
27 -7938 7941 0
27 -7937 7940 0
c ((aux695 + aux697 - aux700)<=0)
7934 -7945 0
7935 -7946 0
7928 -7945 0
7928 7934 -7946 0
7928 7935 -7948 0
7929 -7946 0
7929 7934 -7948 0
7929 7935 -7950 0
c (0<=(aux695 + aux697 - aux700))
-7935 7950 0
-7934 7948 0
-7929 7950 0
-7929 -7935 7948 0
-7929 -7934 7946 0
-7928 7948 0
-7928 -7935 7946 0
-7928 -7934 7945 0
c ((SATLiteral(299) - aux701 + SATLiteral(569))<=0)
-569 -7952 0
-299 -7952 0
-299 -569 -7953 0
c (0<=(SATLiteral(299) - aux701 + SATLiteral(569)))
569 7953 0
299 7953 0
299 569 7952 0
c ((SATLiteral(974) - aux702 + SATLiteral(839))<=0)
-839 -7955 0
-974 -7955 0
-974 -839 -7956 0
c (0<=(SATLiteral(974) - aux702 + SATLiteral(839)))
839 7956 0
974 7956 0
974 839 7955 0
c (( - aux703 + SATLiteral(704) + SATLiteral(164))<=0)
-164 -7958 0
-704 -7958 0
-704 -164 -7959 0
c (0<=( - aux703 + SATLiteral(704) + SATLiteral(164)))
164 7959 0
704 7959 0
704 164 7958 0
c (( - aux704 + SATLiteral(434) + SATLiteral(1109))<=0)
-1109 -7961 0
-434 -7961 0
-434 -1109 -7962 0
c (0<=( - aux704 + SATLiteral(434) + SATLiteral(1109)))
1109 7962 0
434 7962 0
434 1109 7961 0
c ((aux704 - aux705 + SATLiteral(29))<=0)
7961 -7964 0
7962 -7965 0
-29 -7964 0
-29 7961 -7965 0
-29 7962 -7967 0
c (0<=(aux704 - aux705 + SATLiteral(29)))
-7962 7967 0
-7961 7965 0
29 7967 0
29 -7962 7965 0
29 -7961 7964 0
c ((aux701 + aux703 - aux706)<=0)
7958 -7969 0
7959 -7970 0
7952 -7969 0
7952 7958 -7970 0
7952 7959 -7972 0
7953 -7970 0
7953 7958 -7972 0
7953 7959 -7974 0
c (0<=(aux701 + aux703 - aux706))
-7959 7974 0
-7958 7972 0
-7953 7974 0
-7953 -7959 7972 0
-7953 -7958 7970 0
-7952 7972 0
-7952 -7959 7970 0
-7952 -7958 7969 0
c ((SATLiteral(301) - aux707 + SATLiteral(571))<=0)
-571 -7976 0
-301 -7976 0
-301 -571 -7977 0
c (0<=(SATLiteral(301) - aux707 + SATLiteral(571)))
571 7977 0
301 7977 0
301 571 7976 0
c ((SATLiteral(976) - aux708 + SATLiteral(841))<=0)
-841 -7979 0
-976 -7979 0
-976 -841 -7980 0
c (0<=(SATLiteral(976) - aux708 + SATLiteral(841)))
841 7980 0
976 7980 0
976 841 7979 0
c (( - aux709 + SATLiteral(706) + SATLiteral(166))<=0)
-166 -7982 0
-706 -7982 0
-706 -166 -7983 0
c (0<=( - aux709 + SATLiteral(706) + SATLiteral(166)))
166 7983 0
706 7983 0
706 166 7982 0
c (( - aux710 + SATLiteral(436) + SATLiteral(1111))<=0)
-1111 -7985 0
-436 -7985 0
-436 -1111 -7986 0
c (0<=( - aux710 + SATLiteral(436) + SATLiteral(1111)))
1111 7986 0
436 7986 0
436 1111 7985 0
c ((aux710 - aux711 + SATLiteral(31))<=0)
7985 -7988 0
7986 -7989 0
-31 -7988 0
-31 7985 -7989 0
-31 7986 -7991 0
c (0<=(aux710 - aux711 + SATLiteral(31)))
-7986 7991 0
-7985 7989 0
31 7991 0
31 -7986 7989 0
31 -7985 7988 0
c ((aux707 + aux709 - aux712)<=0)
7982 -7993 0
7983 -7994 0
7976 -7993 0
7976 7982 -7994 0
7976 7983 -7996 0
7977 -7994 0
7977 7982 -7996 0
7977 7983 -7998 0
c (0<=(aux707 + aux709 - aux712))
-7983 7998 0
-7982 7996 0
-7977 7998 0
-7977 -7983 7996 0
-7977 -7982 7994 0
-7976 7996 0
-7976 -7983 7994 0
-7976 -7982 7993 0
c ((SATLiteral(-300) - aux713 + SATLiteral(-570))<=0)
570 -8000 0
300 -8000 0
300 570 -8001 0
c (0<=(SATLiteral(-300) - aux713 + SATLiteral(-570)))
-570 8001 0
-300 8001 0
-300 -570 8000 0
c ((SATLiteral(-975) - aux714 + SATLiteral(-840))<=0)
840 -8003 0
975 -8003 0
975 840 -8004 0
c (0<=(SATLiteral(-975) - aux714 + SATLiteral(-840)))
-840 8004 0
-975 8004 0
-975 -840 8003 0
c (( - aux715 + SATLiteral(-705) + SATLiteral(-165))<=0)
165 -8006 0
705 -8006 0
705 165 -8007 0
c (0<=( - aux715 + SATLiteral(-705) + SATLiteral(-165)))
-165 8007 0
-705 8007 0
-705 -165 8006 0
c (( - aux716 + SATLiteral(-435) + SATLiteral(-1110))<=0)
1110 -8009 0
435 -8009 0
435 1110 -8010 0
c (0<=( - aux716 + SATLiteral(-435) + SATLiteral(-1110)))
-1110 8010 0
-435 8010 0
-435 -1110 8009 0
c ((aux716 - aux717 + SATLiteral(-30))<=0)
8009 -8012 0
8010 -8013 0
30 -8012 0
30 8009 -8013 0
30 8010 -8015 0
c (0<=(aux716 - aux717 + SATLiteral(-30)))
-8010 8015 0
-8009 8013 0
-30 8015 0
-30 -8010 8013 0
-30 -8009 8012 0
c ((aux713 + aux715 - aux718)<=0)
8006 -8017 0
8007 -8018 0
8000 -8017 0
8000 8006 -8018 0
8000 8007 -8020 0
8001 -8018 0
8001 8006 -8020 0
8001 8007 -8022 0
c (0<=(aux713 + aux715 - aux718))
-8007 8022 0
-8006 8020 0
-8001 8022 0
-8001 -8007 8020 0
-8001 -8006 8018 0
-8000 8020 0
-8000 -8007 8018 0
-8000 -8006 8017 0
c ((SATLiteral(302) - aux719 + SATLiteral(572))<=0)
-572 -8024 0
-302 -8024 0
-302 -572 -8025 0
c (0<=(SATLiteral(302) - aux719 + SATLiteral(572)))
572 8025 0
302 8025 0
302 572 8024 0
c ((SATLiteral(977) - aux720 + SATLiteral(842))<=0)
-842 -8027 0
-977 -8027 0
-977 -842 -8028 0
c (0<=(SATLiteral(977) - aux720 + SATLiteral(842)))
842 8028 0
977 8028 0
977 842 8027 0
c (( - aux721 + SATLiteral(707) + SATLiteral(167))<=0)
-167 -8030 0
-707 -8030 0
-707 -167 -8031 0
c (0<=( - aux721 + SATLiteral(707) + SATLiteral(167)))
167 8031 0
707 8031 0
707 167 8030 0
c (( - aux722 + SATLiteral(437) + SATLiteral(1112))<=0)
-1112 -8033 0
-437 -8033 0
-437 -1112 -8034 0
c (0<=( - aux722 + SATLiteral(437) + SATLiteral(1112)))
1112 8034 0
437 8034 0
437 1112 8033 0
c ((aux722 - aux723 + SATLiteral(32))<=0)
8033 -8036 0
8034 -8037 0
-32 -8036 0
-32 8033 -8037 0
-32 8034 -8039 0
c (0<=(aux722 - aux723 + SATLiteral(32)))
-8034 8039 0
-8033 8037 0
32 8039 0
32 -8034 8037 0
32 -8033 8036 0
c ((aux719 + aux721 - aux724)<=0)
8030 -8041 0
8031 -8042 0
8024 -8041 0
8024 8030 -8042 0
8024 8031 -8044 0
8025 -8042 0
8025 8030 -8044 0
8025 8031 -8046 0
c (0<=(aux719 + aux721 - aux724))
-8031 8046 0
-8030 8044 0
-8025 8046 0
-8025 -8031 8044 0
-8025 -8030 8042 0
-8024 8044 0
-8024 -8031 8042 0
-8024 -8030 8041 0
c ((SATLiteral(304) - aux725 + SATLiteral(574))<=0)
-574 -8048 0
-304 -8048 0
-304 -574 -8049 0
c (0<=(SATLiteral(304) - aux725 + SATLiteral(574)))
574 8049 0
304 8049 0
304 574 8048 0
c ((SATLiteral(979) - aux726 + SATLiteral(844))<=0)
-844 -8051 0
-979 -8051 0
-979 -844 -8052 0
c (0<=(SATLiteral(979) - aux726 + SATLiteral(844)))
844 8052 0
979 8052 0
979 844 8051 0
c (( - aux727 + SATLiteral(709) + SATLiteral(169))<=0)
-169 -8054 0
-709 -8054 0
-709 -169 -8055 0
c (0<=( - aux727 + SATLiteral(709) + SATLiteral(169)))
169 8055 0
709 8055 0
709 169 8054 0
c (( - aux728 + SATLiteral(439) + SATLiteral(1114))<=0)
-1114 -8057 0
-439 -8057 0
-439 -1114 -8058 0
c (0<=( - aux728 + SATLiteral(439) + SATLiteral(1114)))
1114 8058 0
439 8058 0
439 1114 8057 0
c ((aux728 - aux729 + SATLiteral(34))<=0)
8057 -8060 0
8058 -8061 0
-34 -8060 0
-34 8057 -8061 0
-34 8058 -8063 0
c (0<=(aux728 - aux729 + SATLiteral(34)))
-8058 8063 0
-8057 8061 0
34 8063 0
34 -8058 8061 0
34 -8057 8060 0
c ((aux725 + aux727 - aux730)<=0)
8054 -8065 0
8055 -8066 0
8048 -8065 0
8048 8054 -8066 0
8048 8055 -8068 0
8049 -8066 0
8049 8054 -8068 0
8049 8055 -8070 0
c (0<=(aux725 + aux727 - aux730))
-8055 8070 0
-8054 8068 0
-8049 8070 0
-8049 -8055 8068 0
-8049 -8054 8066 0
-8048 8068 0
-8048 -8055 8066 0
-8048 -8054 8065 0
c ((SATLiteral(306) - aux731 + SATLiteral(576))<=0)
-576 -8072 0
-306 -8072 0
-306 -576 -8073 0
c (0<=(SATLiteral(306) - aux731 + SATLiteral(576)))
576 8073 0
306 8073 0
306 576 8072 0
c ((SATLiteral(981) - aux732 + SATLiteral(846))<=0)
-846 -8075 0
-981 -8075 0
-981 -846 -8076 0
c (0<=(SATLiteral(981) - aux732 + SATLiteral(846)))
846 8076 0
981 8076 0
981 846 8075 0
c (( - aux733 + SATLiteral(711) + SATLiteral(171))<=0)
-171 -8078 0
-711 -8078 0
-711 -171 -8079 0
c (0<=( - aux733 + SATLiteral(711) + SATLiteral(171)))
171 8079 0
711 8079 0
711 171 8078 0
c (( - aux734 + SATLiteral(441) + SATLiteral(1116))<=0)
-1116 -8081 0
-441 -8081 0
-441 -1116 -8082 0
c (0<=( - aux734 + SATLiteral(441) + SATLiteral(1116)))
1116 8082 0
441 8082 0
441 1116 8081 0
c ((aux734 - aux735 + SATLiteral(36))<=0)
8081 -8084 0
8082 -8085 0
-36 -8084 0
-36 8081 -8085 0
-36 8082 -8087 0
c (0<=(aux734 - aux735 + SATLiteral(36)))
-8082 8087 0
-8081 8085 0
36 8087 0
36 -8082 8085 0
36 -8081 8084 0
c ((aux731 + aux733 - aux736)<=0)
8078 -8089 0
8079 -8090 0
8072 -8089 0
8072 8078 -8090 0
8072 8079 -8092 0
8073 -8090 0
8073 8078 -8092 0
8073 8079 -8094 0
c (0<=(aux731 + aux733 - aux736))
-8079 8094 0
-8078 8092 0
-8073 8094 0
-8073 -8079 8092 0
-8073 -8078 8090 0
-8072 8092 0
-8072 -8079 8090 0
-8072 -8078 8089 0
c ((SATLiteral(308) - aux737 + SATLiteral(578))<=0)
-578 -8096 0
-308 -8096 0
-308 -578 -8097 0
c (0<=(SATLiteral(308) - aux737 + SATLiteral(578)))
578 8097 0
308 8097 0
308 578 8096 0
c ((SATLiteral(983) - aux738 + SATLiteral(848))<=0)
-848 -8099 0
-983 -8099 0
-983 -848 -8100 0
c (0<=(SATLiteral(983) - aux738 + SATLiteral(848)))
848 8100 0
983 8100 0
983 848 8099 0
c (( - aux739 + SATLiteral(713) + SATLiteral(173))<=0)
-173 -8102 0
-713 -8102 0
-713 -173 -8103 0
c (0<=( - aux739 + SATLiteral(713) + SATLiteral(173)))
173 8103 0
713 8103 0
713 173 8102 0
c (( - aux740 + SATLiteral(443) + SATLiteral(1118))<=0)
-1118 -8105 0
-443 -8105 0
-443 -1118 -8106 0
c (0<=( - aux740 + SATLiteral(443) + SATLiteral(1118)))
1118 8106 0
443 8106 0
443 1118 8105 0
c ((aux740 - aux741 + SATLiteral(38))<=0)
8105 -8108 0
8106 -8109 0
-38 -8108 0
-38 8105 -8109 0
-38 8106 -8111 0
c (0<=(aux740 - aux741 + SATLiteral(38)))
-8106 8111 0
-8105 8109 0
38 8111 0
38 -8106 8109 0
38 -8105 8108 0
c ((aux737 + aux739 - aux742)<=0)
8102 -8113 0
8103 -8114 0
8096 -8113 0
8096 8102 -8114 0
8096 8103 -8116 0
8097 -8114 0
8097 8102 -8116 0
8097 8103 -8118 0
c (0<=(aux737 + aux739 - aux742))
-8103 8118 0
-8102 8116 0
-8097 8118 0
-8097 -8103 8116 0
-8097 -8102 8114 0
-8096 8116 0
-8096 -8103 8114 0
-8096 -8102 8113 0
c ((SATLiteral(310) - aux743 + SATLiteral(580))<=0)
-580 -8120 0
-310 -8120 0
-310 -580 -8121 0
c (0<=(SATLiteral(310) - aux743 + SATLiteral(580)))
580 8121 0
310 8121 0
310 580 8120 0
c ((SATLiteral(985) - aux744 + SATLiteral(850))<=0)
-850 -8123 0
-985 -8123 0
-985 -850 -8124 0
c (0<=(SATLiteral(985) - aux744 + SATLiteral(850)))
850 8124 0
985 8124 0
985 850 8123 0
c (( - aux745 + SATLiteral(715) + SATLiteral(175))<=0)
-175 -8126 0
-715 -8126 0
-715 -175 -8127 0
c (0<=( - aux745 + SATLiteral(715) + SATLiteral(175)))
175 8127 0
715 8127 0
715 175 8126 0
c (( - aux746 + SATLiteral(445) + SATLiteral(1120))<=0)
-1120 -8129 0
-445 -8129 0
-445 -1120 -8130 0
c (0<=( - aux746 + SATLiteral(445) + SATLiteral(1120)))
1120 8130 0
445 8130 0
445 1120 8129 0
c ((aux746 - aux747 + SATLiteral(40))<=0)
8129 -8132 0
8130 -8133 0
-40 -8132 0
-40 8129 -8133 0
-40 8130 -8135 0
c (0<=(aux746 - aux747 + SATLiteral(40)))
-8130 8135 0
-8129 8133 0
40 8135 0
40 -8130 8133 0
40 -8129 8132 0
c ((aux743 + aux745 - aux748)<=0)
8126 -8137 0
8127 -8138 0
8120 -8137 0
8120 8126 -8138 0
8120 8127 -8140 0
8121 -8138 0
8121 8126 -8140 0
8121 8127 -8142 0
c (0<=(aux743 + aux745 - aux748))
-8127 8142 0
-8126 8140 0
-8121 8142 0
-8121 -8127 8140 0
-8121 -8126 8138 0
-8120 8140 0
-8120 -8127 8138 0
-8120 -8126 8137 0
c ((SATLiteral(312) - aux749 + SATLiteral(582))<=0)
-582 -8144 0
-312 -8144 0
-312 -582 -8145 0
c (0<=(SATLiteral(312) - aux749 + SATLiteral(582)))
582 8145 0
312 8145 0
312 582 8144 0
c ((SATLiteral(987) - aux750 + SATLiteral(852))<=0)
-852 -8147 0
-987 -8147 0
-987 -852 -8148 0
c (0<=(SATLiteral(987) - aux750 + SATLiteral(852)))
852 8148 0
987 8148 0
987 852 8147 0
c (( - aux751 + SATLiteral(717) + SATLiteral(177))<=0)
-177 -8150 0
-717 -8150 0
-717 -177 -8151 0
c (0<=( - aux751 + SATLiteral(717) + SATLiteral(177)))
177 8151 0
717 8151 0
717 177 8150 0
c (( - aux752 + SATLiteral(447) + SATLiteral(1122))<=0)
-1122 -8153 0
-447 -8153 0
-447 -1122 -8154 0
c (0<=( - aux752 + SATLiteral(447) + SATLiteral(1122)))
1122 8154 0
447 8154 0
447 1122 8153 0
c ((aux752 - aux753 + SATLiteral(42))<=0)
8153 -8156 0
8154 -8157 0
-42 -8156 0
-42 8153 -8157 0
-42 8154 -8159 0
c (0<=(aux752 - aux753 + SATLiteral(42)))
-8154 8159 0
-8153 8157 0
42 8159 0
42 -8154 8157 0
42 -8153 8156 0
c ((aux749 + aux751 - aux754)<=0)
8150 -8161 0
8151 -8162 0
8144 -8161 0
8144 8150 -8162 0
8144 8151 -8164 0
8145 -8162 0
8145 8150 -8164 0
8145 8151 -8166 0
c (0<=(aux749 + aux751 - aux754))
-8151 8166 0
-8150 8164 0
-8145 8166 0
-8145 -8151 8164 0
-8145 -8150 8162 0
-8144 8164 0
-8144 -8151 8162 0
-8144 -8150 8161 0
c ((SATLiteral(314) - aux755 + SATLiteral(584))<=0)
-584 -8168 0
-314 -8168 0
-314 -584 -8169 0
c (0<=(SATLiteral(314) - aux755 + SATLiteral(584)))
584 8169 0
314 8169 0
314 584 8168 0
c ((SATLiteral(989) - aux756 + SATLiteral(854))<=0)
-854 -8171 0
-989 -8171 0
-989 -854 -8172 0
c (0<=(SATLiteral(989) - aux756 + SATLiteral(854)))
854 8172 0
989 8172 0
989 854 8171 0
c (( - aux757 + SATLiteral(719) + SATLiteral(179))<=0)
-179 -8174 0
-719 -8174 0
-719 -179 -8175 0
c (0<=( - aux757 + SATLiteral(719) + SATLiteral(179)))
179 8175 0
719 8175 0
719 179 8174 0
c (( - aux758 + SATLiteral(449) + SATLiteral(1124))<=0)
-1124 -8177 0
-449 -8177 0
-449 -1124 -8178 0
c (0<=( - aux758 + SATLiteral(449) + SATLiteral(1124)))
1124 8178 0
449 8178 0
449 1124 8177 0
c ((aux758 - aux759 + SATLiteral(44))<=0)
8177 -8180 0
8178 -8181 0
-44 -8180 0
-44 8177 -8181 0
-44 8178 -8183 0
c (0<=(aux758 - aux759 + SATLiteral(44)))
-8178 8183 0
-8177 8181 0
44 8183 0
44 -8178 8181 0
44 -8177 8180 0
c ((aux755 + aux757 - aux760)<=0)
8174 -8185 0
8175 -8186 0
8168 -8185 0
8168 8174 -8186 0
8168 8175 -8188 0
8169 -8186 0
8169 8174 -8188 0
8169 8175 -8190 0
c (0<=(aux755 + aux757 - aux760))
-8175 8190 0
-8174 8188 0
-8169 8190 0
-8169 -8175 8188 0
-8169 -8174 8186 0
-8168 8188 0
-8168 -8175 8186 0
-8168 -8174 8185 0
c ((SATLiteral(316) - aux761 + SATLiteral(586))<=0)
-586 -8192 0
-316 -8192 0
-316 -586 -8193 0
c (0<=(SATLiteral(316) - aux761 + SATLiteral(586)))
586 8193 0
316 8193 0
316 586 8192 0
c ((SATLiteral(991) - aux762 + SATLiteral(856))<=0)
-856 -8195 0
-991 -8195 0
-991 -856 -8196 0
c (0<=(SATLiteral(991) - aux762 + SATLiteral(856)))
856 8196 0
991 8196 0
991 856 8195 0
c (( - aux763 + SATLiteral(721) + SATLiteral(181))<=0)
-181 -8198 0
-721 -8198 0
-721 -181 -8199 0
c (0<=( - aux763 + SATLiteral(721) + SATLiteral(181)))
181 8199 0
721 8199 0
721 181 8198 0
c (( - aux764 + SATLiteral(451) + SATLiteral(1126))<=0)
-1126 -8201 0
-451 -8201 0
-451 -1126 -8202 0
c (0<=( - aux764 + SATLiteral(451) + SATLiteral(1126)))
1126 8202 0
451 8202 0
451 1126 8201 0
c ((aux764 - aux765 + SATLiteral(46))<=0)
8201 -8204 0
8202 -8205 0
-46 -8204 0
-46 8201 -8205 0
-46 8202 -8207 0
c (0<=(aux764 - aux765 + SATLiteral(46)))
-8202 8207 0
-8201 8205 0
46 8207 0
46 -8202 8205 0
46 -8201 8204 0
c ((aux761 + aux763 - aux766)<=0)
8198 -8209 0
8199 -8210 0
8192 -8209 0
8192 8198 -8210 0
8192 8199 -8212 0
8193 -8210 0
8193 8198 -8212 0
8193 8199 -8214 0
c (0<=(aux761 + aux763 - aux766))
-8199 8214 0
-8198 8212 0
-8193 8214 0
-8193 -8199 8212 0
-8193 -8198 8210 0
-8192 8212 0
-8192 -8199 8210 0
-8192 -8198 8209 0
c ((SATLiteral(-315) - aux767 + SATLiteral(-585))<=0)
585 -8216 0
315 -8216 0
315 585 -8217 0
c (0<=(SATLiteral(-315) - aux767 + SATLiteral(-585)))
-585 8217 0
-315 8217 0
-315 -585 8216 0
c ((SATLiteral(-990) - aux768 + SATLiteral(-855))<=0)
855 -8219 0
990 -8219 0
990 855 -8220 0
c (0<=(SATLiteral(-990) - aux768 + SATLiteral(-855)))
-855 8220 0
-990 8220 0
-990 -855 8219 0
c (( - aux769 + SATLiteral(-720) + SATLiteral(-180))<=0)
180 -8222 0
720 -8222 0
720 180 -8223 0
c (0<=( - aux769 + SATLiteral(-720) + SATLiteral(-180)))
-180 8223 0
-720 8223 0
-720 -180 8222 0
c (( - aux770 + SATLiteral(-450) + SATLiteral(-1125))<=0)
1125 -8225 0
450 -8225 0
450 1125 -8226 0
c (0<=( - aux770 + SATLiteral(-450) + SATLiteral(-1125)))
-1125 8226 0
-450 8226 0
-450 -1125 8225 0
c ((aux770 - aux771 + SATLiteral(-45))<=0)
8225 -8228 0
8226 -8229 0
45 -8228 0
45 8225 -8229 0
45 8226 -8231 0
c (0<=(aux770 - aux771 + SATLiteral(-45)))
-8226 8231 0
-8225 8229 0
-45 8231 0
-45 -8226 8229 0
-45 -8225 8228 0
c ((aux767 + aux769 - aux772)<=0)
8222 -8233 0
8223 -8234 0
8216 -8233 0
8216 8222 -8234 0
8216 8223 -8236 0
8217 -8234 0
8217 8222 -8236 0
8217 8223 -8238 0
c (0<=(aux767 + aux769 - aux772))
-8223 8238 0
-8222 8236 0
-8217 8238 0
-8217 -8223 8236 0
-8217 -8222 8234 0
-8216 8236 0
-8216 -8223 8234 0
-8216 -8222 8233 0
c ((SATLiteral(317) - aux773 + SATLiteral(587))<=0)
-587 -8240 0
-317 -8240 0
-317 -587 -8241 0
c (0<=(SATLiteral(317) - aux773 + SATLiteral(587)))
587 8241 0
317 8241 0
317 587 8240 0
c ((SATLiteral(992) - aux774 + SATLiteral(857))<=0)
-857 -8243 0
-992 -8243 0
-992 -857 -8244 0
c (0<=(SATLiteral(992) - aux774 + SATLiteral(857)))
857 8244 0
992 8244 0
992 857 8243 0
c (( - aux775 + SATLiteral(722) + SATLiteral(182))<=0)
-182 -8246 0
-722 -8246 0
-722 -182 -8247 0
c (0<=( - aux775 + SATLiteral(722) + SATLiteral(182)))
182 8247 0
722 8247 0
722 182 8246 0
c (( - aux776 + SATLiteral(452) + SATLiteral(1127))<=0)
-1127 -8249 0
-452 -8249 0
-452 -1127 -8250 0
c (0<=( - aux776 + SATLiteral(452) + SATLiteral(1127)))
1127 8250 0
452 8250 0
452 1127 8249 0
c ((aux776 - aux777 + SATLiteral(47))<=0)
8249 -8252 0
8250 -8253 0
-47 -8252 0
-47 8249 -8253 0
-47 8250 -8255 0
c (0<=(aux776 - aux777 + SATLiteral(47)))
-8250 8255 0
-8249 8253 0
47 8255 0
47 -8250 8253 0
47 -8249 8252 0
c ((aux773 + aux775 - aux778)<=0)
8246 -8257 0
8247 -8258 0
8240 -8257 0
8240 8246 -8258 0
8240 8247 -8260 0
8241 -8258 0
8241 8246 -8260 0
8241 8247 -8262 0
c (0<=(aux773 + aux775 - aux778))
-8247 8262 0
-8246 8260 0
-8241 8262 0
-8241 -8247 8260 0
-8241 -8246 8258 0
-8240 8260 0
-8240 -8247 8258 0
-8240 -8246 8257 0
c ((SATLiteral(319) - aux779 + SATLiteral(589))<=0)
-589 -8264 0
-319 -8264 0
-319 -589 -8265 0
c (0<=(SATLiteral(319) - aux779 + SATLiteral(589)))
589 8265 0
319 8265 0
319 589 8264 0
c ((SATLiteral(994) - aux780 + SATLiteral(859))<=0)
-859 -8267 0
-994 -8267 0
-994 -859 -8268 0
c (0<=(SATLiteral(994) - aux780 + SATLiteral(859)))
859 8268 0
994 8268 0
994 859 8267 0
c (( - aux781 + SATLiteral(724) + SATLiteral(184))<=0)
-184 -8270 0
-724 -8270 0
-724 -184 -8271 0
c (0<=( - aux781 + SATLiteral(724) + SATLiteral(184)))
184 8271 0
724 8271 0
724 184 8270 0
c (( - aux782 + SATLiteral(454) + SATLiteral(1129))<=0)
-1129 -8273 0
-454 -8273 0
-454 -1129 -8274 0
c (0<=( - aux782 + SATLiteral(454) + SATLiteral(1129)))
1129 8274 0
454 8274 0
454 1129 8273 0
c ((aux782 - aux783 + SATLiteral(49))<=0)
8273 -8276 0
8274 -8277 0
-49 -8276 0
-49 8273 -8277 0
-49 8274 -8279 0
c (0<=(aux782 - aux783 + SATLiteral(49)))
-8274 8279 0
-8273 8277 0
49 8279 0
49 -8274 8277 0
49 -8273 8276 0
c ((aux779 + aux781 - aux784)<=0)
8270 -8281 0
8271 -8282 0
8264 -8281 0
8264 8270 -8282 0
8264 8271 -8284 0
8265 -8282 0
8265 8270 -8284 0
8265 8271 -8286 0
c (0<=(aux779 + aux781 - aux784))
-8271 8286 0
-8270 8284 0
-8265 8286 0
-8265 -8271 8284 0
-8265 -8270 8282 0
-8264 8284 0
-8264 -8271 8282 0
-8264 -8270 8281 0
c ((SATLiteral(321) - aux785 + SATLiteral(591))<=0)
-591 -8288 0
-321 -8288 0
-321 -591 -8289 0
c (0<=(SATLiteral(321) - aux785 + SATLiteral(591)))
591 8289 0
321 8289 0
321 591 8288 0
c ((SATLiteral(996) - aux786 + SATLiteral(861))<=0)
-861 -8291 0
-996 -8291 0
-996 -861 -8292 0
c (0<=(SATLiteral(996) - aux786 + SATLiteral(861)))
861 8292 0
996 8292 0
996 861 8291 0
c (( - aux787 + SATLiteral(726) + SATLiteral(186))<=0)
-186 -8294 0
-726 -8294 0
-726 -186 -8295 0
c (0<=( - aux787 + SATLiteral(726) + SATLiteral(186)))
186 8295 0
726 8295 0
726 186 8294 0
c (( - aux788 + SATLiteral(456) + SATLiteral(1131))<=0)
-1131 -8297 0
-456 -8297 0
-456 -1131 -8298 0
c (0<=( - aux788 + SATLiteral(456) + SATLiteral(1131)))
1131 8298 0
456 8298 0
456 1131 8297 0
c ((aux788 - aux789 + SATLiteral(51))<=0)
8297 -8300 0
8298 -8301 0
-51 -8300 0
-51 8297 -8301 0
-51 8298 -8303 0
c (0<=(aux788 - aux789 + SATLiteral(51)))
-8298 8303 0
-8297 8301 0
51 8303 0
51 -8298 8301 0
51 -8297 8300 0
c ((aux785 + aux787 - aux790)<=0)
8294 -8305 0
8295 -8306 0
8288 -8305 0
8288 8294 -8306 0
8288 8295 -8308 0
8289 -8306 0
8289 8294 -8308 0
8289 8295 -8310 0
c (0<=(aux785 + aux787 - aux790))
-8295 8310 0
-8294 8308 0
-8289 8310 0
-8289 -8295 8308 0
-8289 -8294 8306 0
-8288 8308 0
-8288 -8295 8306 0
-8288 -8294 8305 0
c ((SATLiteral(323) - aux791 + SATLiteral(593))<=0)
-593 -8312 0
-323 -8312 0
-323 -593 -8313 0
c (0<=(SATLiteral(323) - aux791 + SATLiteral(593)))
593 8313 0
323 8313 0
323 593 8312 0
c ((SATLiteral(998) - aux792 + SATLiteral(863))<=0)
-863 -8315 0
-998 -8315 0
-998 -863 -8316 0
c (0<=(SATLiteral(998) - aux792 + SATLiteral(863)))
863 8316 0
998 8316 0
998 863 8315 0
c (( - aux793 + SATLiteral(728) + SATLiteral(188))<=0)
-188 -8318 0
-728 -8318 0
-728 -188 -8319 0
c (0<=( - aux793 + SATLiteral(728) + SATLiteral(188)))
188 8319 0
728 8319 0
728 188 8318 0
c (( - aux794 + SATLiteral(458) + SATLiteral(1133))<=0)
-1133 -8321 0
-458 -8321 0
-458 -1133 -8322 0
c (0<=( - aux794 + SATLiteral(458) + SATLiteral(1133)))
1133 8322 0
458 8322 0
458 1133 8321 0
c ((aux794 - aux795 + SATLiteral(53))<=0)
8321 -8324 0
8322 -8325 0
-53 -8324 0
-53 8321 -8325 0
-53 8322 -8327 0
c (0<=(aux794 - aux795 + SATLiteral(53)))
-8322 8327 0
-8321 8325 0
53 8327 0
53 -8322 8325 0
53 -8321 8324 0
c ((aux791 + aux793 - aux796)<=0)
8318 -8329 0
8319 -8330 0
8312 -8329 0
8312 8318 -8330 0
8312 8319 -8332 0
8313 -8330 0
8313 8318 -8332 0
8313 8319 -8334 0
c (0<=(aux791 + aux793 - aux796))
-8319 8334 0
-8318 8332 0
-8313 8334 0
-8313 -8319 8332 0
-8313 -8318 8330 0
-8312 8332 0
-8312 -8319 8330 0
-8312 -8318 8329 0
c ((SATLiteral(325) - aux797 + SATLiteral(595))<=0)
-595 -8336 0
-325 -8336 0
-325 -595 -8337 0
c (0<=(SATLiteral(325) - aux797 + SATLiteral(595)))
595 8337 0
325 8337 0
325 595 8336 0
c ((SATLiteral(1000) - aux798 + SATLiteral(865))<=0)
-865 -8339 0
-1000 -8339 0
-1000 -865 -8340 0
c (0<=(SATLiteral(1000) - aux798 + SATLiteral(865)))
865 8340 0
1000 8340 0
1000 865 8339 0
c (( - aux799 + SATLiteral(730) + SATLiteral(190))<=0)
-190 -8342 0
-730 -8342 0
-730 -190 -8343 0
c (0<=( - aux799 + SATLiteral(730) + SATLiteral(190)))
190 8343 0
730 8343 0
730 190 8342 0
c (( - aux800 + SATLiteral(460) + SATLiteral(1135))<=0)
-1135 -8345 0
-460 -8345 0
-460 -1135 -8346 0
c (0<=( - aux800 + SATLiteral(460) + SATLiteral(1135)))
1135 8346 0
460 8346 0
460 1135 8345 0
c ((aux800 - aux801 + SATLiteral(55))<=0)
8345 -8348 0
8346 -8349 0
-55 -8348 0
-55 8345 -8349 0
-55 8346 -8351 0
c (0<=(aux800 - aux801 + SATLiteral(55)))
-8346 8351 0
-8345 8349 0
55 8351 0
55 -8346 8349 0
55 -8345 8348 0
c ((aux797 + aux799 - aux802)<=0)
8342 -8353 0
8343 -8354 0
8336 -8353 0
8336 8342 -8354 0
8336 8343 -8356 0
8337 -8354 0
8337 8342 -8356 0
8337 8343 -8358 0
c (0<=(aux797 + aux799 - aux802))
-8343 8358 0
-8342 8356 0
-8337 8358 0
-8337 -8343 8356 0
-8337 -8342 8354 0
-8336 8356 0
-8336 -8343 8354 0
-8336 -8342 8353 0
c ((SATLiteral(327) - aux803 + SATLiteral(597))<=0)
-597 -8360 0
-327 -8360 0
-327 -597 -8361 0
c (0<=(SATLiteral(327) - aux803 + SATLiteral(597)))
597 8361 0
327 8361 0
327 597 8360 0
c ((SATLiteral(1002) - aux804 + SATLiteral(867))<=0)
-867 -8363 0
-1002 -8363 0
-1002 -867 -8364 0
c (0<=(SATLiteral(1002) - aux804 + SATLiteral(867)))
867 8364 0
1002 8364 0
1002 867 8363 0
c (( - aux805 + SATLiteral(732) + SATLiteral(192))<=0)
-192 -8366 0
-732 -8366 0
-732 -192 -8367 0
c (0<=( - aux805 + SATLiteral(732) + SATLiteral(192)))
192 8367 0
732 8367 0
732 192 8366 0
c (( - aux806 + SATLiteral(462) + SATLiteral(1137))<=0)
-1137 -8369 0
-462 -8369 0
-462 -1137 -8370 0
c (0<=( - aux806 + SATLiteral(462) + SATLiteral(1137)))
1137 8370 0
462 8370 0
462 1137 8369 0
c ((aux806 - aux807 + SATLiteral(57))<=0)
8369 -8372 0
8370 -8373 0
-57 -8372 0
-57 8369 -8373 0
-57 8370 -8375 0
c (0<=(aux806 - aux807 + SATLiteral(57)))
-8370 8375 0
-8369 8373 0
57 8375 0
57 -8370 8373 0
57 -8369 8372 0
c ((aux803 + aux805 - aux808)<=0)
8366 -8377 0
8367 -8378 0
8360 -8377 0
8360 8366 -8378 0
8360 8367 -8380 0
8361 -8378 0
8361 8366 -8380 0
8361 8367 -8382 0
c (0<=(aux803 + aux805 - aux808))
-8367 8382 0
-8366 8380 0
-8361 8382 0
-8361 -8367 8380 0
-8361 -8366 8378 0
-8360 8380 0
-8360 -8367 8378 0
-8360 -8366 8377 0
c ((SATLiteral(329) - aux809 + SATLiteral(599))<=0)
-599 -8384 0
-329 -8384 0
-329 -599 -8385 0
c (0<=(SATLiteral(329) - aux809 + SATLiteral(599)))
599 8385 0
329 8385 0
329 599 8384 0
c ((SATLiteral(1004) - aux810 + SATLiteral(869))<=0)
-869 -8387 0
-1004 -8387 0
-1004 -869 -8388 0
c (0<=(SATLiteral(1004) - aux810 + SATLiteral(869)))
869 8388 0
1004 8388 0
1004 869 8387 0
c (( - aux811 + SATLiteral(734) + SATLiteral(194))<=0)
-194 -8390 0
-734 -8390 0
-734 -194 -8391 0
c (0<=( - aux811 + SATLiteral(734) + SATLiteral(194)))
194 8391 0
734 8391 0
734 194 8390 0
c (( - aux812 + SATLiteral(464) + SATLiteral(1139))<=0)
-1139 -8393 0
-464 -8393 0
-464 -1139 -8394 0
c (0<=( - aux812 + SATLiteral(464) + SATLiteral(1139)))
1139 8394 0
464 8394 0
464 1139 8393 0
c ((aux812 - aux813 + SATLiteral(59))<=0)
8393 -8396 0
8394 -8397 0
-59 -8396 0
-59 8393 -8397 0
-59 8394 -8399 0
c (0<=(aux812 - aux813 + SATLiteral(59)))
-8394 8399 0
-8393 8397 0
59 8399 0
59 -8394 8397 0
59 -8393 8396 0
c ((aux809 + aux811 - aux814)<=0)
8390 -8401 0
8391 -8402 0
8384 -8401 0
8384 8390 -8402 0
8384 8391 -8404 0
8385 -8402 0
8385 8390 -8404 0
8385 8391 -8406 0
c (0<=(aux809 + aux811 - aux814))
-8391 8406 0
-8390 8404 0
-8385 8406 0
-8385 -8391 8404 0
-8385 -8390 8402 0
-8384 8404 0
-8384 -8391 8402 0
-8384 -8390 8401 0
c ((SATLiteral(331) - aux815 + SATLiteral(601))<=0)
-601 -8408 0
-331 -8408 0
-331 -601 -8409 0
c (0<=(SATLiteral(331) - aux815 + SATLiteral(601)))
601 8409 0
331 8409 0
331 601 8408 0
c ((SATLiteral(1006) - aux816 + SATLiteral(871))<=0)
-871 -8411 0
-1006 -8411 0
-1006 -871 -8412 0
c (0<=(SATLiteral(1006) - aux816 + SATLiteral(871)))
871 8412 0
1006 8412 0
1006 871 8411 0
c (( - aux817 + SATLiteral(736) + SATLiteral(196))<=0)
-196 -8414 0
-736 -8414 0
-736 -196 -8415 0
c (0<=( - aux817 + SATLiteral(736) + SATLiteral(196)))
196 8415 0
736 8415 0
736 196 8414 0
c (( - aux818 + SATLiteral(466) + SATLiteral(1141))<=0)
-1141 -8417 0
-466 -8417 0
-466 -1141 -8418 0
c (0<=( - aux818 + SATLiteral(466) + SATLiteral(1141)))
1141 8418 0
466 8418 0
466 1141 8417 0
c ((aux818 - aux819 + SATLiteral(61))<=0)
8417 -8420 0
8418 -8421 0
-61 -8420 0
-61 8417 -8421 0
-61 8418 -8423 0
c (0<=(aux818 - aux819 + SATLiteral(61)))
-8418 8423 0
-8417 8421 0
61 8423 0
61 -8418 8421 0
61 -8417 8420 0
c ((aux815 + aux817 - aux820)<=0)
8414 -8425 0
8415 -8426 0
8408 -8425 0
8408 8414 -8426 0
8408 8415 -8428 0
8409 -8426 0
8409 8414 -8428 0
8409 8415 -8430 0
c (0<=(aux815 + aux817 - aux820))
-8415 8430 0
-8414 8428 0
-8409 8430 0
-8409 -8415 8428 0
-8409 -8414 8426 0
-8408 8428 0
-8408 -8415 8426 0
-8408 -8414 8425 0
c ((SATLiteral(-330) - aux821 + SATLiteral(-600))<=0)
600 -8432 0
330 -8432 0
330 600 -8433 0
c (0<=(SATLiteral(-330) - aux821 + SATLiteral(-600)))
-600 8433 0
-330 8433 0
-330 -600 8432 0
c ((SATLiteral(-1005) - aux822 + SATLiteral(-870))<=0)
870 -8435 0
1005 -8435 0
1005 870 -8436 0
c (0<=(SATLiteral(-1005) - aux822 + SATLiteral(-870)))
-870 8436 0
-1005 8436 0
-1005 -870 8435 0
c (( - aux823 + SATLiteral(-735) + SATLiteral(-195))<=0)
195 -8438 0
735 -8438 0
735 195 -8439 0
c (0<=( - aux823 + SATLiteral(-735) + SATLiteral(-195)))
-195 8439 0
-735 8439 0
-735 -195 8438 0
c (( - aux824 + SATLiteral(-465) + SATLiteral(-1140))<=0)
1140 -8441 0
465 -8441 0
465 1140 -8442 0
c (0<=( - aux824 + SATLiteral(-465) + SATLiteral(-1140)))
-1140 8442 0
-465 8442 0
-465 -1140 8441 0
c ((aux824 - aux825 + SATLiteral(-60))<=0)
8441 -8444 0
8442 -8445 0
60 -8444 0
60 8441 -8445 0
60 8442 -8447 0
c (0<=(aux824 - aux825 + SATLiteral(-60)))
-8442 8447 0
-8441 8445 0
-60 8447 0
-60 -8442 8445 0
-60 -8441 8444 0
c ((aux821 + aux823 - aux826)<=0)
8438 -8449 0
8439 -8450 0
8432 -8449 0
8432 8438 -8450 0
8432 8439 -8452 0
8433 -8450 0
8433 8438 -8452 0
8433 8439 -8454 0
c (0<=(aux821 + aux823 - aux826))
-8439 8454 0
-8438 8452 0
-8433 8454 0
-8433 -8439 8452 0
-8433 -8438 8450 0
-8432 8452 0
-8432 -8439 8450 0
-8432 -8438 8449 0
c ((SATLiteral(332) - aux827 + SATLiteral(602))<=0)
-602 -8456 0
-332 -8456 0
-332 -602 -8457 0
c (0<=(SATLiteral(332) - aux827 + SATLiteral(602)))
602 8457 0
332 8457 0
332 602 8456 0
c ((SATLiteral(1007) - aux828 + SATLiteral(872))<=0)
-872 -8459 0
-1007 -8459 0
-1007 -872 -8460 0
c (0<=(SATLiteral(1007) - aux828 + SATLiteral(872)))
872 8460 0
1007 8460 0
1007 872 8459 0
c (( - aux829 + SATLiteral(737) + SATLiteral(197))<=0)
-197 -8462 0
-737 -8462 0
-737 -197 -8463 0
c (0<=( - aux829 + SATLiteral(737) + SATLiteral(197)))
197 8463 0
737 8463 0
737 197 8462 0
c (( - aux830 + SATLiteral(467) + SATLiteral(1142))<=0)
-1142 -8465 0
-467 -8465 0
-467 -1142 -8466 0
c (0<=( - aux830 + SATLiteral(467) + SATLiteral(1142)))
1142 8466 0
467 8466 0
467 1142 8465 0
c ((aux830 - aux831 + SATLiteral(62))<=0)
8465 -8468 0
8466 -8469 0
-62 -8468 0
-62 8465 -8469 0
-62 8466 -8471 0
c (0<=(aux830 - aux831 + SATLiteral(62)))
-8466 8471 0
-8465 8469 0
62 8471 0
62 -8466 8469 0
62 -8465 8468 0
c ((aux827 + aux829 - aux832)<=0)
8462 -8473 0
8463 -8474 0
8456 -8473 0
8456 8462 -8474 0
8456 8463 -8476 0
8457 -8474 0
8457 8462 -8476 0
8457 8463 -8478 0
c (0<=(aux827 + aux829 - aux832))
-8463 8478 0
-8462 8476 0
-8457 8478 0
-8457 -8463 8476 0
-8457 -8462 8474 0
-8456 8476 0
-8456 -8463 8474 0
-8456 -8462 8473 0
c ((SATLiteral(334) - aux833 + SATLiteral(604))<=0)
-604 -8480 0
-334 -8480 0
-334 -604 -8481 0
c (0<=(SATLiteral(334) - aux833 + SATLiteral(604)))
604 8481 0
334 8481 0
334 604 8480 0
c ((SATLiteral(1009) - aux834 + SATLiteral(874))<=0)
-874 -8483 0
-1009 -8483 0
-1009 -874 -8484 0
c (0<=(SATLiteral(1009) - aux834 + SATLiteral(874)))
874 8484 0
1009 8484 0
1009 874 8483 0
c (( - aux835 + SATLiteral(739) + SATLiteral(199))<=0)
-199 -8486 0
-739 -8486 0
-739 -199 -8487 0
c (0<=( - aux835 + SATLiteral(739) + SATLiteral(199)))
199 8487 0
739 8487 0
739 199 8486 0
c (( - aux836 + SATLiteral(469) + SATLiteral(1144))<=0)
-1144 -8489 0
-469 -8489 0
-469 -1144 -8490 0
c (0<=( - aux836 + SATLiteral(469) + SATLiteral(1144)))
1144 8490 0
469 8490 0
469 1144 8489 0
c ((aux836 - aux837 + SATLiteral(64))<=0)
8489 -8492 0
8490 -8493 0
-64 -8492 0
-64 8489 -8493 0
-64 8490 -8495 0
c (0<=(aux836 - aux837 + SATLiteral(64)))
-8490 8495 0
-8489 8493 0
64 8495 0
64 -8490 8493 0
64 -8489 8492 0
c ((aux833 + aux835 - aux838)<=0)
8486 -8497 0
8487 -8498 0
8480 -8497 0
8480 8486 -8498 0
8480 8487 -8500 0
8481 -8498 0
8481 8486 -8500 0
8481 8487 -8502 0
c (0<=(aux833 + aux835 - aux838))
-8487 8502 0
-8486 8500 0
-8481 8502 0
-8481 -8487 8500 0
-8481 -8486 8498 0
-8480 8500 0
-8480 -8487 8498 0
-8480 -8486 8497 0
c ((SATLiteral(336) - aux839 + SATLiteral(606))<=0)
-606 -8504 0
-336 -8504 0
-336 -606 -8505 0
c (0<=(SATLiteral(336) - aux839 + SATLiteral(606)))
606 8505 0
336 8505 0
336 606 8504 0
c ((SATLiteral(1011) - aux840 + SATLiteral(876))<=0)
-876 -8507 0
-1011 -8507 0
-1011 -876 -8508 0
c (0<=(SATLiteral(1011) - aux840 + SATLiteral(876)))
876 8508 0
1011 8508 0
1011 876 8507 0
c (( - aux841 + SATLiteral(741) + SATLiteral(201))<=0)
-201 -8510 0
-741 -8510 0
-741 -201 -8511 0
c (0<=( - aux841 + SATLiteral(741) + SATLiteral(201)))
201 8511 0
741 8511 0
741 201 8510 0
c (( - aux842 + SATLiteral(471) + SATLiteral(1146))<=0)
-1146 -8513 0
-471 -8513 0
-471 -1146 -8514 0
c (0<=( - aux842 + SATLiteral(471) + SATLiteral(1146)))
1146 8514 0
471 8514 0
471 1146 8513 0
c ((aux842 - aux843 + SATLiteral(66))<=0)
8513 -8516 0
8514 -8517 0
-66 -8516 0
-66 8513 -8517 0
-66 8514 -8519 0
c (0<=(aux842 - aux843 + SATLiteral(66)))
-8514 8519 0
-8513 8517 0
66 8519 0
66 -8514 8517 0
66 -8513 8516 0
c ((aux839 + aux841 - aux844)<=0)
8510 -8521 0
8511 -8522 0
8504 -8521 0
8504 8510 -8522 0
8504 8511 -8524 0
8505 -8522 0
8505 8510 -8524 0
8505 8511 -8526 0
c (0<=(aux839 + aux841 - aux844))
-8511 8526 0
-8510 8524 0
-8505 8526 0
-8505 -8511 8524 0
-8505 -8510 8522 0
-8504 8524 0
-8504 -8511 8522 0
-8504 -8510 8521 0
c ((SATLiteral(338) - aux845 + SATLiteral(608))<=0)
-608 -8528 0
-338 -8528 0
-338 -608 -8529 0
c (0<=(SATLiteral(338) - aux845 + SATLiteral(608)))
608 8529 0
338 8529 0
338 608 8528 0
c ((SATLiteral(1013) - aux846 + SATLiteral(878))<=0)
-878 -8531 0
-1013 -8531 0
-1013 -878 -8532 0
c (0<=(SATLiteral(1013) - aux846 + SATLiteral(878)))
878 8532 0
1013 8532 0
1013 878 8531 0
c (( - aux847 + SATLiteral(743) + SATLiteral(203))<=0)
-203 -8534 0
-743 -8534 0
-743 -203 -8535 0
c (0<=( - aux847 + SATLiteral(743) + SATLiteral(203)))
203 8535 0
743 8535 0
743 203 8534 0
c (( - aux848 + SATLiteral(473) + SATLiteral(1148))<=0)
-1148 -8537 0
-473 -8537 0
-473 -1148 -8538 0
c (0<=( - aux848 + SATLiteral(473) + SATLiteral(1148)))
1148 8538 0
473 8538 0
473 1148 8537 0
c ((aux848 - aux849 + SATLiteral(68))<=0)
8537 -8540 0
8538 -8541 0
-68 -8540 0
-68 8537 -8541 0
-68 8538 -8543 0
c (0<=(aux848 - aux849 + SATLiteral(68)))
-8538 8543 0
-8537 8541 0
68 8543 0
68 -8538 8541 0
68 -8537 8540 0
c ((aux845 + aux847 - aux850)<=0)
8534 -8545 0
8535 -8546 0
8528 -8545 0
8528 8534 -8546 0
8528 8535 -8548 0
8529 -8546 0
8529 8534 -8548 0
8529 8535 -8550 0
c (0<=(aux845 + aux847 - aux850))
-8535 8550 0
-8534 8548 0
-8529 8550 0
-8529 -8535 8548 0
-8529 -8534 8546 0
-8528 8548 0
-8528 -8535 8546 0
-8528 -8534 8545 0
c ((SATLiteral(340) - aux851 + SATLiteral(610))<=0)
-610 -8552 0
-340 -8552 0
-340 -610 -8553 0
c (0<=(SATLiteral(340) - aux851 + SATLiteral(610)))
610 8553 0
340 8553 0
340 610 8552 0
c ((SATLiteral(1015) - aux852 + SATLiteral(880))<=0)
-880 -8555 0
-1015 -8555 0
-1015 -880 -8556 0
c (0<=(SATLiteral(1015) - aux852 + SATLiteral(880)))
880 8556 0
1015 8556 0
1015 880 8555 0
c (( - aux853 + SATLiteral(745) + SATLiteral(205))<=0)
-205 -8558 0
-745 -8558 0
-745 -205 -8559 0
c (0<=( - aux853 + SATLiteral(745) + SATLiteral(205)))
205 8559 0
745 8559 0
745 205 8558 0
c (( - aux854 + SATLiteral(475) + SATLiteral(1150))<=0)
-1150 -8561 0
-475 -8561 0
-475 -1150 -8562 0
c (0<=( - aux854 + SATLiteral(475) + SATLiteral(1150)))
1150 8562 0
475 8562 0
475 1150 8561 0
c ((aux854 - aux855 + SATLiteral(70))<=0)
8561 -8564 0
8562 -8565 0
-70 -8564 0
-70 8561 -8565 0
-70 8562 -8567 0
c (0<=(aux854 - aux855 + SATLiteral(70)))
-8562 8567 0
-8561 8565 0
70 8567 0
70 -8562 8565 0
70 -8561 8564 0
c ((aux851 + aux853 - aux856)<=0)
8558 -8569 0
8559 -8570 0
8552 -8569 0
8552 8558 -8570 0
8552 8559 -8572 0
8553 -8570 0
8553 8558 -8572 0
8553 8559 -8574 0
c (0<=(aux851 + aux853 - aux856))
-8559 8574 0
-8558 8572 0
-8553 8574 0
-8553 -8559 8572 0
-8553 -8558 8570 0
-8552 8572 0
-8552 -8559 8570 0
-8552 -8558 8569 0
c ((SATLiteral(342) - aux857 + SATLiteral(612))<=0)
-612 -8576 0
-342 -8576 0
-342 -612 -8577 0
c (0<=(SATLiteral(342) - aux857 + SATLiteral(612)))
612 8577 0
342 8577 0
342 612 8576 0
c ((SATLiteral(1017) - aux858 + SATLiteral(882))<=0)
-882 -8579 0
-1017 -8579 0
-1017 -882 -8580 0
c (0<=(SATLiteral(1017) - aux858 + SATLiteral(882)))
882 8580 0
1017 8580 0
1017 882 8579 0
c (( - aux859 + SATLiteral(747) + SATLiteral(207))<=0)
-207 -8582 0
-747 -8582 0
-747 -207 -8583 0
c (0<=( - aux859 + SATLiteral(747) + SATLiteral(207)))
207 8583 0
747 8583 0
747 207 8582 0
c (( - aux860 + SATLiteral(477) + SATLiteral(1152))<=0)
-1152 -8585 0
-477 -8585 0
-477 -1152 -8586 0
c (0<=( - aux860 + SATLiteral(477) + SATLiteral(1152)))
1152 8586 0
477 8586 0
477 1152 8585 0
c ((aux860 - aux861 + SATLiteral(72))<=0)
8585 -8588 0
8586 -8589 0
-72 -8588 0
-72 8585 -8589 0
-72 8586 -8591 0
c (0<=(aux860 - aux861 + SATLiteral(72)))
-8586 8591 0
-8585 8589 0
72 8591 0
72 -8586 8589 0
72 -8585 8588 0
c ((aux857 + aux859 - aux862)<=0)
8582 -8593 0
8583 -8594 0
8576 -8593 0
8576 8582 -8594 0
8576 8583 -8596 0
8577 -8594 0
8577 8582 -8596 0
8577 8583 -8598 0
c (0<=(aux857 + aux859 - aux862))
-8583 8598 0
-8582 8596 0
-8577 8598 0
-8577 -8583 8596 0
-8577 -8582 8594 0
-8576 8596 0
-8576 -8583 8594 0
-8576 -8582 8593 0
c ((SATLiteral(344) - aux863 + SATLiteral(614))<=0)
-614 -8600 0
-344 -8600 0
-344 -614 -8601 0
c (0<=(SATLiteral(344) - aux863 + SATLiteral(614)))
614 8601 0
344 8601 0
344 614 8600 0
c ((SATLiteral(1019) - aux864 + SATLiteral(884))<=0)
-884 -8603 0
-1019 -8603 0
-1019 -884 -8604 0
c (0<=(SATLiteral(1019) - aux864 + SATLiteral(884)))
884 8604 0
1019 8604 0
1019 884 8603 0
c (( - aux865 + SATLiteral(749) + SATLiteral(209))<=0)
-209 -8606 0
-749 -8606 0
-749 -209 -8607 0
c (0<=( - aux865 + SATLiteral(749) + SATLiteral(209)))
209 8607 0
749 8607 0
749 209 8606 0
c (( - aux866 + SATLiteral(479) + SATLiteral(1154))<=0)
-1154 -8609 0
-479 -8609 0
-479 -1154 -8610 0
c (0<=( - aux866 + SATLiteral(479) + SATLiteral(1154)))
1154 8610 0
479 8610 0
479 1154 8609 0
c ((aux866 - aux867 + SATLiteral(74))<=0)
8609 -8612 0
8610 -8613 0
-74 -8612 0
-74 8609 -8613 0
-74 8610 -8615 0
c (0<=(aux866 - aux867 + SATLiteral(74)))
-8610 8615 0
-8609 8613 0
74 8615 0
74 -8610 8613 0
74 -8609 8612 0
c ((aux863 + aux865 - aux868)<=0)
8606 -8617 0
8607 -8618 0
8600 -8617 0
8600 8606 -8618 0
8600 8607 -8620 0
8601 -8618 0
8601 8606 -8620 0
8601 8607 -8622 0
c (0<=(aux863 + aux865 - aux868))
-8607 8622 0
-8606 8620 0
-8601 8622 0
-8601 -8607 8620 0
-8601 -8606 8618 0
-8600 8620 0
-8600 -8607 8618 0
-8600 -8606 8617 0
c ((SATLiteral(346) - aux869 + SATLiteral(616))<=0)
-616 -8624 0
-346 -8624 0
-346 -616 -8625 0
c (0<=(SATLiteral(346) - aux869 + SATLiteral(616)))
616 8625 0
346 8625 0
346 616 8624 0
c ((SATLiteral(1021) - aux870 + SATLiteral(886))<=0)
-886 -8627 0
-1021 -8627 0
-1021 -886 -8628 0
c (0<=(SATLiteral(1021) - aux870 + SATLiteral(886)))
886 8628 0
1021 8628 0
1021 886 8627 0
c (( - aux871 + SATLiteral(751) + SATLiteral(211))<=0)
-211 -8630 0
-751 -8630 0
-751 -211 -8631 0
c (0<=( - aux871 + SATLiteral(751) + SATLiteral(211)))
211 8631 0
751 8631 0
751 211 8630 0
c (( - aux872 + SATLiteral(481) + SATLiteral(1156))<=0)
-1156 -8633 0
-481 -8633 0
-481 -1156 -8634 0
c (0<=( - aux872 + SATLiteral(481) + SATLiteral(1156)))
1156 8634 0
481 8634 0
481 1156 8633 0
c ((aux872 - aux873 + SATLiteral(76))<=0)
8633 -8636 0
8634 -8637 0
-76 -8636 0
-76 8633 -8637 0
-76 8634 -8639 0
c (0<=(aux872 - aux873 + SATLiteral(76)))
-8634 8639 0
-8633 8637 0
76 8639 0
76 -8634 8637 0
76 -8633 8636 0
c ((aux869 + aux871 - aux874)<=0)
8630 -8641 0
8631 -8642 0
8624 -8641 0
8624 8630 -8642 0
8624 8631 -8644 0
8625 -8642 0
8625 8630 -8644 0
8625 8631 -8646 0
c (0<=(aux869 + aux871 - aux874))
-8631 8646 0
-8630 8644 0
-8625 8646 0
-8625 -8631 8644 0
-8625 -8630 8642 0
-8624 8644 0
-8624 -8631 8642 0
-8624 -8630 8641 0
c ((SATLiteral(-345) - aux875 + SATLiteral(-615))<=0)
615 -8648 0
345 -8648 0
345 615 -8649 0
c (0<=(SATLiteral(-345) - aux875 + SATLiteral(-615)))
-615 8649 0
-345 8649 0
-345 -615 8648 0
c ((SATLiteral(-1020) - aux876 + SATLiteral(-885))<=0)
885 -8651 0
1020 -8651 0
1020 885 -8652 0
c (0<=(SATLiteral(-1020) - aux876 + SATLiteral(-885)))
-885 8652 0
-1020 8652 0
-1020 -885 8651 0
c (( - aux877 + SATLiteral(-750) + SATLiteral(-210))<=0)
210 -8654 0
750 -8654 0
750 210 -8655 0
c (0<=( - aux877 + SATLiteral(-750) + SATLiteral(-210)))
-210 8655 0
-750 8655 0
-750 -210 8654 0
c (( - aux878 + SATLiteral(-480) + SATLiteral(-1155))<=0)
1155 -8657 0
480 -8657 0
480 1155 -8658 0
c (0<=( - aux878 + SATLiteral(-480) + SATLiteral(-1155)))
-1155 8658 0
-480 8658 0
-480 -1155 8657 0
c ((aux878 - aux879 + SATLiteral(-75))<=0)
8657 -8660 0
8658 -8661 0
75 -8660 0
75 8657 -8661 0
75 8658 -8663 0
c (0<=(aux878 - aux879 + SATLiteral(-75)))
-8658 8663 0
-8657 8661 0
-75 8663 0
-75 -8658 8661 0
-75 -8657 8660 0
c ((aux875 + aux877 - aux880)<=0)
8654 -8665 0
8655 -8666 0
8648 -8665 0
8648 8654 -8666 0
8648 8655 -8668 0
8649 -8666 0
8649 8654 -8668 0
8649 8655 -8670 0
c (0<=(aux875 + aux877 - aux880))
-8655 8670 0
-8654 8668 0
-8649 8670 0
-8649 -8655 8668 0
-8649 -8654 8666 0
-8648 8668 0
-8648 -8655 8666 0
-8648 -8654 8665 0
c ((SATLiteral(347) - aux881 + SATLiteral(617))<=0)
-617 -8672 0
-347 -8672 0
-347 -617 -8673 0
c (0<=(SATLiteral(347) - aux881 + SATLiteral(617)))
617 8673 0
347 8673 0
347 617 8672 0
c ((SATLiteral(1022) - aux882 + SATLiteral(887))<=0)
-887 -8675 0
-1022 -8675 0
-1022 -887 -8676 0
c (0<=(SATLiteral(1022) - aux882 + SATLiteral(887)))
887 8676 0
1022 8676 0
1022 887 8675 0
c (( - aux883 + SATLiteral(752) + SATLiteral(212))<=0)
-212 -8678 0
-752 -8678 0
-752 -212 -8679 0
c (0<=( - aux883 + SATLiteral(752) + SATLiteral(212)))
212 8679 0
752 8679 0
752 212 8678 0
c (( - aux884 + SATLiteral(482) + SATLiteral(1157))<=0)
-1157 -8681 0
-482 -8681 0
-482 -1157 -8682 0
c (0<=( - aux884 + SATLiteral(482) + SATLiteral(1157)))
1157 8682 0
482 8682 0
482 1157 8681 0
c ((aux884 - aux885 + SATLiteral(77))<=0)
8681 -8684 0
8682 -8685 0
-77 -8684 0
-77 8681 -8685 0
-77 8682 -8687 0
c (0<=(aux884 - aux885 + SATLiteral(77)))
-8682 8687 0
-8681 8685 0
77 8687 0
77 -8682 8685 0
77 -8681 8684 0
c ((aux881 + aux883 - aux886)<=0)
8678 -8689 0
8679 -8690 0
8672 -8689 0
8672 8678 -8690 0
8672 8679 -8692 0
8673 -8690 0
8673 8678 -8692 0
8673 8679 -8694 0
c (0<=(aux881 + aux883 - aux886))
-8679 8694 0
-8678 8692 0
-8673 8694 0
-8673 -8679 8692 0
-8673 -8678 8690 0
-8672 8692 0
-8672 -8679 8690 0
-8672 -8678 8689 0
c ((SATLiteral(349) - aux887 + SATLiteral(619))<=0)
-619 -8696 0
-349 -8696 0
-349 -619 -8697 0
c (0<=(SATLiteral(349) - aux887 + SATLiteral(619)))
619 8697 0
349 8697 0
349 619 8696 0
c ((SATLiteral(1024) - aux888 + SATLiteral(889))<=0)
-889 -8699 0
-1024 -8699 0
-1024 -889 -8700 0
c (0<=(SATLiteral(1024) - aux888 + SATLiteral(889)))
889 8700 0
1024 8700 0
1024 889 8699 0
c (( - aux889 + SATLiteral(754) + SATLiteral(214))<=0)
-214 -8702 0
-754 -8702 0
-754 -214 -8703 0
c (0<=( - aux889 + SATLiteral(754) + SATLiteral(214)))
214 8703 0
754 8703 0
754 214 8702 0
c (( - aux890 + SATLiteral(484) + SATLiteral(1159))<=0)
-1159 -8705 0
-484 -8705 0
-484 -1159 -8706 0
c (0<=( - aux890 + SATLiteral(484) + SATLiteral(1159)))
1159 8706 0
484 8706 0
484 1159 8705 0
c ((aux890 - aux891 + SATLiteral(79))<=0)
8705 -8708 0
8706 -8709 0
-79 -8708 0
-79 8705 -8709 0
-79 8706 -8711 0
c (0<=(aux890 - aux891 + SATLiteral(79)))
-8706 8711 0
-8705 8709 0
79 8711 0
79 -8706 8709 0
79 -8705 8708 0
c ((aux887 + aux889 - aux892)<=0)
8702 -8713 0
8703 -8714 0
8696 -8713 0
8696 8702 -8714 0
8696 8703 -8716 0
8697 -8714 0
8697 8702 -8716 0
8697 8703 -8718 0
c (0<=(aux887 + aux889 - aux892))
-8703 8718 0
-8702 8716 0
-8697 8718 0
-8697 -8703 8716 0
-8697 -8702 8714 0
-8696 8716 0
-8696 -8703 8714 0
-8696 -8702 8713 0
c ((SATLiteral(351) - aux893 + SATLiteral(621))<=0)
-621 -8720 0
-351 -8720 0
-351 -621 -8721 0
c (0<=(SATLiteral(351) - aux893 + SATLiteral(621)))
621 8721 0
351 8721 0
351 621 8720 0
c ((SATLiteral(1026) - aux894 + SATLiteral(891))<=0)
-891 -8723 0
-1026 -8723 0
-1026 -891 -8724 0
c (0<=(SATLiteral(1026) - aux894 + SATLiteral(891)))
891 8724 0
1026 8724 0
1026 891 8723 0
c (( - aux895 + SATLiteral(756) + SATLiteral(216))<=0)
-216 -8726 0
-756 -8726 0
-756 -216 -8727 0
c (0<=( - aux895 + SATLiteral(756) + SATLiteral(216)))
216 8727 0
756 8727 0
756 216 8726 0
c (( - aux896 + SATLiteral(486) + SATLiteral(1161))<=0)
-1161 -8729 0
-486 -8729 0
-486 -1161 -8730 0
c (0<=( - aux896 + SATLiteral(486) + SATLiteral(1161)))
1161 8730 0
486 8730 0
486 1161 8729 0
c ((aux896 - aux897 + SATLiteral(81))<=0)
8729 -8732 0
8730 -8733 0
-81 -8732 0
-81 8729 -8733 0
-81 8730 -8735 0
c (0<=(aux896 - aux897 + SATLiteral(81)))
-8730 8735 0
-8729 8733 0
81 8735 0
81 -8730 8733 0
81 -8729 8732 0
c ((aux893 + aux895 - aux898)<=0)
8726 -8737 0
8727 -8738 0
8720 -8737 0
8720 8726 -8738 0
8720 8727 -8740 0
8721 -8738 0
8721 8726 -8740 0
8721 8727 -8742 0
c (0<=(aux893 + aux895 - aux898))
-8727 8742 0
-8726 8740 0
-8721 8742 0
-8721 -8727 8740 0
-8721 -8726 8738 0
-8720 8740 0
-8720 -8727 8738 0
-8720 -8726 8737 0
c ((SATLiteral(353) - aux899 + SATLiteral(623))<=0)
-623 -8744 0
-353 -8744 0
-353 -623 -8745 0
c (0<=(SATLiteral(353) - aux899 + SATLiteral(623)))
623 8745 0
353 8745 0
353 623 8744 0
c ((SATLiteral(1028) - aux900 + SATLiteral(893))<=0)
-893 -8747 0
-1028 -8747 0
-1028 -893 -8748 0
c (0<=(SATLiteral(1028) - aux900 + SATLiteral(893)))
893 8748 0
1028 8748 0
1028 893 8747 0
c (( - aux901 + SATLiteral(758) + SATLiteral(218))<=0)
-218 -8750 0
-758 -8750 0
-758 -218 -8751 0
c (0<=( - aux901 + SATLiteral(758) + SATLiteral(218)))
218 8751 0
758 8751 0
758 218 8750 0
c (( - aux902 + SATLiteral(488) + SATLiteral(1163))<=0)
-1163 -8753 0
-488 -8753 0
-488 -1163 -8754 0
c (0<=( - aux902 + SATLiteral(488) + SATLiteral(1163)))
1163 8754 0
488 8754 0
488 1163 8753 0
c ((aux902 - aux903 + SATLiteral(83))<=0)
8753 -8756 0
8754 -8757 0
-83 -8756 0
-83 8753 -8757 0
-83 8754 -8759 0
c (0<=(aux902 - aux903 + SATLiteral(83)))
-8754 8759 0
-8753 8757 0
83 8759 0
83 -8754 8757 0
83 -8753 8756 0
c ((aux899 + aux901 - aux904)<=0)
8750 -8761 0
8751 -8762 0
8744 -8761 0
8744 8750 -8762 0
8744 8751 -8764 0
8745 -8762 0
8745 8750 -8764 0
8745 8751 -8766 0
c (0<=(aux899 + aux901 - aux904))
-8751 8766 0
-8750 8764 0
-8745 8766 0
-8745 -8751 8764 0
-8745 -8750 8762 0
-8744 8764 0
-8744 -8751 8762 0
-8744 -8750 8761 0
c ((SATLiteral(355) - aux905 + SATLiteral(625))<=0)
-625 -8768 0
-355 -8768 0
-355 -625 -8769 0
c (0<=(SATLiteral(355) - aux905 + SATLiteral(625)))
625 8769 0
355 8769 0
355 625 8768 0
c ((SATLiteral(1030) - aux906 + SATLiteral(895))<=0)
-895 -8771 0
-1030 -8771 0
-1030 -895 -8772 0
c (0<=(SATLiteral(1030) - aux906 + SATLiteral(895)))
895 8772 0
1030 8772 0
1030 895 8771 0
c (( - aux907 + SATLiteral(760) + SATLiteral(220))<=0)
-220 -8774 0
-760 -8774 0
-760 -220 -8775 0
c (0<=( - aux907 + SATLiteral(760) + SATLiteral(220)))
220 8775 0
760 8775 0
760 220 8774 0
c (( - aux908 + SATLiteral(490) + SATLiteral(1165))<=0)
-1165 -8777 0
-490 -8777 0
-490 -1165 -8778 0
c (0<=( - aux908 + SATLiteral(490) + SATLiteral(1165)))
1165 8778 0
490 8778 0
490 1165 8777 0
c ((aux908 - aux909 + SATLiteral(85))<=0)
8777 -8780 0
8778 -8781 0
-85 -8780 0
-85 8777 -8781 0
-85 8778 -8783 0
c (0<=(aux908 - aux909 + SATLiteral(85)))
-8778 8783 0
-8777 8781 0
85 8783 0
85 -8778 8781 0
85 -8777 8780 0
c ((aux905 + aux907 - aux910)<=0)
8774 -8785 0
8775 -8786 0
8768 -8785 0
8768 8774 -8786 0
8768 8775 -8788 0
8769 -8786 0
8769 8774 -8788 0
8769 8775 -8790 0
c (0<=(aux905 + aux907 - aux910))
-8775 8790 0
-8774 8788 0
-8769 8790 0
-8769 -8775 8788 0
-8769 -8774 8786 0
-8768 8788 0
-8768 -8775 8786 0
-8768 -8774 8785 0
c ((SATLiteral(357) - aux911 + SATLiteral(627))<=0)
-627 -8792 0
-357 -8792 0
-357 -627 -8793 0
c (0<=(SATLiteral(357) - aux911 + SATLiteral(627)))
627 8793 0
357 8793 0
357 627 8792 0
c ((SATLiteral(1032) - aux912 + SATLiteral(897))<=0)
-897 -8795 0
-1032 -8795 0
-1032 -897 -8796 0
c (0<=(SATLiteral(1032) - aux912 + SATLiteral(897)))
897 8796 0
1032 8796 0
1032 897 8795 0
c (( - aux913 + SATLiteral(762) + SATLiteral(222))<=0)
-222 -8798 0
-762 -8798 0
-762 -222 -8799 0
c (0<=( - aux913 + SATLiteral(762) + SATLiteral(222)))
222 8799 0
762 8799 0
762 222 8798 0
c (( - aux914 + SATLiteral(492) + SATLiteral(1167))<=0)
-1167 -8801 0
-492 -8801 0
-492 -1167 -8802 0
c (0<=( - aux914 + SATLiteral(492) + SATLiteral(1167)))
1167 8802 0
492 8802 0
492 1167 8801 0
c ((aux914 - aux915 + SATLiteral(87))<=0)
8801 -8804 0
8802 -8805 0
-87 -8804 0
-87 8801 -8805 0
-87 8802 -8807 0
c (0<=(aux914 - aux915 + SATLiteral(87)))
-8802 8807 0
-8801 8805 0
87 8807 0
87 -8802 8805 0
87 -8801 8804 0
c ((aux911 + aux913 - aux916)<=0)
8798 -8809 0
8799 -8810 0
8792 -8809 0
8792 8798 -8810 0
8792 8799 -8812 0
8793 -8810 0
8793 8798 -8812 0
8793 8799 -8814 0
c (0<=(aux911 + aux913 - aux916))
-8799 8814 0
-8798 8812 0
-8793 8814 0
-8793 -8799 8812 0
-8793 -8798 8810 0
-8792 8812 0
-8792 -8799 8810 0
-8792 -8798 8809 0
c ((SATLiteral(359) - aux917 + SATLiteral(629))<=0)
-629 -8816 0
-359 -8816 0
-359 -629 -8817 0
c (0<=(SATLiteral(359) - aux917 + SATLiteral(629)))
629 8817 0
359 8817 0
359 629 8816 0
c ((SATLiteral(1034) - aux918 + SATLiteral(899))<=0)
-899 -8819 0
-1034 -8819 0
-1034 -899 -8820 0
c (0<=(SATLiteral(1034) - aux918 + SATLiteral(899)))
899 8820 0
1034 8820 0
1034 899 8819 0
c (( - aux919 + SATLiteral(764) + SATLiteral(224))<=0)
-224 -8822 0
-764 -8822 0
-764 -224 -8823 0
c (0<=( - aux919 + SATLiteral(764) + SATLiteral(224)))
224 8823 0
764 8823 0
764 224 8822 0
c (( - aux920 + SATLiteral(494) + SATLiteral(1169))<=0)
-1169 -8825 0
-494 -8825 0
-494 -1169 -8826 0
c (0<=( - aux920 + SATLiteral(494) + SATLiteral(1169)))
1169 8826 0
494 8826 0
494 1169 8825 0
c ((aux920 - aux921 + SATLiteral(89))<=0)
8825 -8828 0
8826 -8829 0
-89 -8828 0
-89 8825 -8829 0
-89 8826 -8831 0
c (0<=(aux920 - aux921 + SATLiteral(89)))
-8826 8831 0
-8825 8829 0
89 8831 0
89 -8826 8829 0
89 -8825 8828 0
c ((aux917 + aux919 - aux922)<=0)
8822 -8833 0
8823 -8834 0
8816 -8833 0
8816 8822 -8834 0
8816 8823 -8836 0
8817 -8834 0
8817 8822 -8836 0
8817 8823 -8838 0
c (0<=(aux917 + aux919 - aux922))
-8823 8838 0
-8822 8836 0
-8817 8838 0
-8817 -8823 8836 0
-8817 -8822 8834 0
-8816 8836 0
-8816 -8823 8834 0
-8816 -8822 8833 0
c ((SATLiteral(361) - aux923 + SATLiteral(631))<=0)
-631 -8840 0
-361 -8840 0
-361 -631 -8841 0
c (0<=(SATLiteral(361) - aux923 + SATLiteral(631)))
631 8841 0
361 8841 0
361 631 8840 0
c ((SATLiteral(1036) - aux924 + SATLiteral(901))<=0)
-901 -8843 0
-1036 -8843 0
-1036 -901 -8844 0
c (0<=(SATLiteral(1036) - aux924 + SATLiteral(901)))
901 8844 0
1036 8844 0
1036 901 8843 0
c (( - aux925 + SATLiteral(766) + SATLiteral(226))<=0)
-226 -8846 0
-766 -8846 0
-766 -226 -8847 0
c (0<=( - aux925 + SATLiteral(766) + SATLiteral(226)))
226 8847 0
766 8847 0
766 226 8846 0
c (( - aux926 + SATLiteral(496) + SATLiteral(1171))<=0)
-1171 -8849 0
-496 -8849 0
-496 -1171 -8850 0
c (0<=( - aux926 + SATLiteral(496) + SATLiteral(1171)))
1171 8850 0
496 8850 0
496 1171 8849 0
c ((aux926 - aux927 + SATLiteral(91))<=0)
8849 -8852 0
8850 -8853 0
-91 -8852 0
-91 8849 -8853 0
-91 8850 -8855 0
c (0<=(aux926 - aux927 + SATLiteral(91)))
-8850 8855 0
-8849 8853 0
91 8855 0
91 -8850 8853 0
91 -8849 8852 0
c ((aux923 + aux925 - aux928)<=0)
8846 -8857 0
8847 -8858 0
8840 -8857 0
8840 8846 -8858 0
8840 8847 -8860 0
8841 -8858 0
8841 8846 -8860 0
8841 8847 -8862 0
c (0<=(aux923 + aux925 - aux928))
-8847 8862 0
-8846 8860 0
-8841 8862 0
-8841 -8847 8860 0
-8841 -8846 8858 0
-8840 8860 0
-8840 -8847 8858 0
-8840 -8846 8857 0
c ((SATLiteral(-360) - aux929 + SATLiteral(-630))<=0)
630 -8864 0
360 -8864 0
360 630 -8865 0
c (0<=(SATLiteral(-360) - aux929 + SATLiteral(-630)))
-630 8865 0
-360 8865 0
-360 -630 8864 0
c ((SATLiteral(-1035) - aux930 + SATLiteral(-900))<=0)
900 -8867 0
1035 -8867 0
1035 900 -8868 0
c (0<=(SATLiteral(-1035) - aux930 + SATLiteral(-900)))
-900 8868 0
-1035 8868 0
-1035 -900 8867 0
c (( - aux931 + SATLiteral(-765) + SATLiteral(-225))<=0)
225 -8870 0
765 -8870 0
765 225 -8871 0
c (0<=( - aux931 + SATLiteral(-765) + SATLiteral(-225)))
-225 8871 0
-765 8871 0
-765 -225 8870 0
c (( - aux932 + SATLiteral(-495) + SATLiteral(-1170))<=0)
1170 -8873 0
495 -8873 0
495 1170 -8874 0
c (0<=( - aux932 + SATLiteral(-495) + SATLiteral(-1170)))
-1170 8874 0
-495 8874 0
-495 -1170 8873 0
c ((aux932 - aux933 + SATLiteral(-90))<=0)
8873 -8876 0
8874 -8877 0
90 -8876 0
90 8873 -8877 0
90 8874 -8879 0
c (0<=(aux932 - aux933 + SATLiteral(-90)))
-8874 8879 0
-8873 8877 0
-90 8879 0
-90 -8874 8877 0
-90 -8873 8876 0
c ((aux929 + aux931 - aux934)<=0)
8870 -8881 0
8871 -8882 0
8864 -8881 0
8864 8870 -8882 0
8864 8871 -8884 0
8865 -8882 0
8865 8870 -8884 0
8865 8871 -8886 0
c (0<=(aux929 + aux931 - aux934))
-8871 8886 0
-8870 8884 0
-8865 8886 0
-8865 -8871 8884 0
-8865 -8870 8882 0
-8864 8884 0
-8864 -8871 8882 0
-8864 -8870 8881 0
c ((SATLiteral(362) - aux935 + SATLiteral(632))<=0)
-632 -8888 0
-362 -8888 0
-362 -632 -8889 0
c (0<=(SATLiteral(362) - aux935 + SATLiteral(632)))
632 8889 0
362 8889 0
362 632 8888 0
c ((SATLiteral(1037) - aux936 + SATLiteral(902))<=0)
-902 -8891 0
-1037 -8891 0
-1037 -902 -8892 0
c (0<=(SATLiteral(1037) - aux936 + SATLiteral(902)))
902 8892 0
1037 8892 0
1037 902 8891 0
c (( - aux937 + SATLiteral(767) + SATLiteral(227))<=0)
-227 -8894 0
-767 -8894 0
-767 -227 -8895 0
c (0<=( - aux937 + SATLiteral(767) + SATLiteral(227)))
227 8895 0
767 8895 0
767 227 8894 0
c (( - aux938 + SATLiteral(497) + SATLiteral(1172))<=0)
-1172 -8897 0
-497 -8897 0
-497 -1172 -8898 0
c (0<=( - aux938 + SATLiteral(497) + SATLiteral(1172)))
1172 8898 0
497 8898 0
497 1172 8897 0
c ((aux938 - aux939 + SATLiteral(92))<=0)
8897 -8900 0
8898 -8901 0
-92 -8900 0
-92 8897 -8901 0
-92 8898 -8903 0
c (0<=(aux938 - aux939 + SATLiteral(92)))
-8898 8903 0
-8897 8901 0
92 8903 0
92 -8898 8901 0
92 -8897 8900 0
c ((aux935 + aux937 - aux940)<=0)
8894 -8905 0
8895 -8906 0
8888 -8905 0
8888 8894 -8906 0
8888 8895 -8908 0
8889 -8906 0
8889 8894 -8908 0
8889 8895 -8910 0
c (0<=(aux935 + aux937 - aux940))
-8895 8910 0
-8894 8908 0
-8889 8910 0
-8889 -8895 8908 0
-8889 -8894 8906 0
-8888 8908 0
-8888 -8895 8906 0
-8888 -8894 8905 0
c ((SATLiteral(364) - aux941 + SATLiteral(634))<=0)
-634 -8912 0
-364 -8912 0
-364 -634 -8913 0
c (0<=(SATLiteral(364) - aux941 + SATLiteral(634)))
634 8913 0
364 8913 0
364 634 8912 0
c ((SATLiteral(1039) - aux942 + SATLiteral(904))<=0)
-904 -8915 0
-1039 -8915 0
-1039 -904 -8916 0
c (0<=(SATLiteral(1039) - aux942 + SATLiteral(904)))
904 8916 0
1039 8916 0
1039 904 8915 0
c (( - aux943 + SATLiteral(769) + SATLiteral(229))<=0)
-229 -8918 0
-769 -8918 0
-769 -229 -8919 0
c (0<=( - aux943 + SATLiteral(769) + SATLiteral(229)))
229 8919 0
769 8919 0
769 229 8918 0
c (( - aux944 + SATLiteral(499) + SATLiteral(1174))<=0)
-1174 -8921 0
-499 -8921 0
-499 -1174 -8922 0
c (0<=( - aux944 + SATLiteral(499) + SATLiteral(1174)))
1174 8922 0
499 8922 0
499 1174 8921 0
c ((aux944 - aux945 + SATLiteral(94))<=0)
8921 -8924 0
8922 -8925 0
-94 -8924 0
-94 8921 -8925 0
-94 8922 -8927 0
c (0<=(aux944 - aux945 + SATLiteral(94)))
-8922 8927 0
-8921 8925 0
94 8927 0
94 -8922 8925 0
94 -8921 8924 0
c ((aux941 + aux943 - aux946)<=0)
8918 -8929 0
8919 -8930 0
8912 -8929 0
8912 8918 -8930 0
8912 8919 -8932 0
8913 -8930 0
8913 8918 -8932 0
8913 8919 -8934 0
c (0<=(aux941 + aux943 - aux946))
-8919 8934 0
-8918 8932 0
-8913 8934 0
-8913 -8919 8932 0
-8913 -8918 8930 0
-8912 8932 0
-8912 -8919 8930 0
-8912 -8918 8929 0
c ((SATLiteral(366) - aux947 + SATLiteral(636))<=0)
-636 -8936 0
-366 -8936 0
-366 -636 -8937 0
c (0<=(SATLiteral(366) - aux947 + SATLiteral(636)))
636 8937 0
366 8937 0
366 636 8936 0
c ((SATLiteral(1041) - aux948 + SATLiteral(906))<=0)
-906 -8939 0
-1041 -8939 0
-1041 -906 -8940 0
c (0<=(SATLiteral(1041) - aux948 + SATLiteral(906)))
906 8940 0
1041 8940 0
1041 906 8939 0
c (( - aux949 + SATLiteral(771) + SATLiteral(231))<=0)
-231 -8942 0
-771 -8942 0
-771 -231 -8943 0
c (0<=( - aux949 + SATLiteral(771) + SATLiteral(231)))
231 8943 0
771 8943 0
771 231 8942 0
c (( - aux950 + SATLiteral(501) + SATLiteral(1176))<=0)
-1176 -8945 0
-501 -8945 0
-501 -1176 -8946 0
c (0<=( - aux950 + SATLiteral(501) + SATLiteral(1176)))
1176 8946 0
501 8946 0
501 1176 8945 0
c ((aux950 - aux951 + SATLiteral(96))<=0)
8945 -8948 0
8946 -8949 0
-96 -8948 0
-96 8945 -8949 0
-96 8946 -8951 0
c (0<=(aux950 - aux951 + SATLiteral(96)))
-8946 8951 0
-8945 8949 0
96 8951 0
96 -8946 8949 0
96 -8945 8948 0
c ((aux947 + aux949 - aux952)<=0)
8942 -8953 0
8943 -8954 0
8936 -8953 0
8936 8942 -8954 0
8936 8943 -8956 0
8937 -8954 0
8937 8942 -8956 0
8937 8943 -8958 0
c (0<=(aux947 + aux949 - aux952))
-8943 8958 0
-8942 8956 0
-8937 8958 0
-8937 -8943 8956 0
-8937 -8942 8954 0
-8936 8956 0
-8936 -8943 8954 0
-8936 -8942 8953 0
c ((SATLiteral(368) - aux953 + SATLiteral(638))<=0)
-638 -8960 0
-368 -8960 0
-368 -638 -8961 0
c (0<=(SATLiteral(368) - aux953 + SATLiteral(638)))
638 8961 0
368 8961 0
368 638 8960 0
c ((SATLiteral(1043) - aux954 + SATLiteral(908))<=0)
-908 -8963 0
-1043 -8963 0
-1043 -908 -8964 0
c (0<=(SATLiteral(1043) - aux954 + SATLiteral(908)))
908 8964 0
1043 8964 0
1043 908 8963 0
c (( - aux955 + SATLiteral(773) + SATLiteral(233))<=0)
-233 -8966 0
-773 -8966 0
-773 -233 -8967 0
c (0<=( - aux955 + SATLiteral(773) + SATLiteral(233)))
233 8967 0
773 8967 0
773 233 8966 0
c (( - aux956 + SATLiteral(503) + SATLiteral(1178))<=0)
-1178 -8969 0
-503 -8969 0
-503 -1178 -8970 0
c (0<=( - aux956 + SATLiteral(503) + SATLiteral(1178)))
1178 8970 0
503 8970 0
503 1178 8969 0
c ((aux956 - aux957 + SATLiteral(98))<=0)
8969 -8972 0
8970 -8973 0
-98 -8972 0
-98 8969 -8973 0
-98 8970 -8975 0
c (0<=(aux956 - aux957 + SATLiteral(98)))
-8970 8975 0
-8969 8973 0
98 8975 0
98 -8970 8973 0
98 -8969 8972 0
c ((aux953 + aux955 - aux958)<=0)
8966 -8977 0
8967 -8978 0
8960 -8977 0
8960 8966 -8978 0
8960 8967 -8980 0
8961 -8978 0
8961 8966 -8980 0
8961 8967 -8982 0
c (0<=(aux953 + aux955 - aux958))
-8967 8982 0
-8966 8980 0
-8961 8982 0
-8961 -8967 8980 0
-8961 -8966 8978 0
-8960 8980 0
-8960 -8967 8978 0
-8960 -8966 8977 0
c ((SATLiteral(370) - aux959 + SATLiteral(640))<=0)
-640 -8984 0
-370 -8984 0
-370 -640 -8985 0
c (0<=(SATLiteral(370) - aux959 + SATLiteral(640)))
640 8985 0
370 8985 0
370 640 8984 0
c ((SATLiteral(1045) - aux960 + SATLiteral(910))<=0)
-910 -8987 0
-1045 -8987 0
-1045 -910 -8988 0
c (0<=(SATLiteral(1045) - aux960 + SATLiteral(910)))
910 8988 0
1045 8988 0
1045 910 8987 0
c (( - aux961 + SATLiteral(775) + SATLiteral(235))<=0)
-235 -8990 0
-775 -8990 0
-775 -235 -8991 0
c (0<=( - aux961 + SATLiteral(775) + SATLiteral(235)))
235 8991 0
775 8991 0
775 235 8990 0
c (( - aux962 + SATLiteral(505) + SATLiteral(1180))<=0)
-1180 -8993 0
-505 -8993 0
-505 -1180 -8994 0
c (0<=( - aux962 + SATLiteral(505) + SATLiteral(1180)))
1180 8994 0
505 8994 0
505 1180 8993 0
c ((aux962 - aux963 + SATLiteral(100))<=0)
8993 -8996 0
8994 -8997 0
-100 -8996 0
-100 8993 -8997 0
-100 8994 -8999 0
c (0<=(aux962 - aux963 + SATLiteral(100)))
-8994 8999 0
-8993 8997 0
100 8999 0
100 -8994 8997 0
100 -8993 8996 0
c ((aux959 + aux961 - aux964)<=0)
8990 -9001 0
8991 -9002 0
8984 -9001 0
8984 8990 -9002 0
8984 8991 -9004 0
8985 -9002 0
8985 8990 -9004 0
8985 8991 -9006 0
c (0<=(aux959 + aux961 - aux964))
-8991 9006 0
-8990 9004 0
-8985 9006 0
-8985 -8991 9004 0
-8985 -8990 9002 0
-8984 9004 0
-8984 -8991 9002 0
-8984 -8990 9001 0
c ((SATLiteral(372) - aux965 + SATLiteral(642))<=0)
-642 -9008 0
-372 -9008 0
-372 -642 -9009 0
c (0<=(SATLiteral(372) - aux965 + SATLiteral(642)))
642 9009 0
372 9009 0
372 642 9008 0
c ((SATLiteral(1047) - aux966 + SATLiteral(912))<=0)
-912 -9011 0
-1047 -9011 0
-1047 -912 -9012 0
c (0<=(SATLiteral(1047) - aux966 + SATLiteral(912)))
912 9012 0
1047 9012 0
1047 912 9011 0
c (( - aux967 + SATLiteral(777) + SATLiteral(237))<=0)
-237 -9014 0
-777 -9014 0
-777 -237 -9015 0
c (0<=( - aux967 + SATLiteral(777) + SATLiteral(237)))
237 9015 0
777 9015 0
777 237 9014 0
c (( - aux968 + SATLiteral(507) + SATLiteral(1182))<=0)
-1182 -9017 0
-507 -9017 0
-507 -1182 -9018 0
c (0<=( - aux968 + SATLiteral(507) + SATLiteral(1182)))
1182 9018 0
507 9018 0
507 1182 9017 0
c ((aux968 - aux969 + SATLiteral(102))<=0)
9017 -9020 0
9018 -9021 0
-102 -9020 0
-102 9017 -9021 0
-102 9018 -9023 0
c (0<=(aux968 - aux969 + SATLiteral(102)))
-9018 9023 0
-9017 9021 0
102 9023 0
102 -9018 9021 0
102 -9017 9020 0
c ((aux965 + aux967 - aux970)<=0)
9014 -9025 0
9015 -9026 0
9008 -9025 0
9008 9014 -9026 0
9008 9015 -9028 0
9009 -9026 0
9009 9014 -9028 0
9009 9015 -9030 0
c (0<=(aux965 + aux967 - aux970))
-9015 9030 0
-9014 9028 0
-9009 9030 0
-9009 -9015 9028 0
-9009 -9014 9026 0
-9008 9028 0
-9008 -9015 9026 0
-9008 -9014 9025 0
c ((SATLiteral(374) - aux971 + SATLiteral(644))<=0)
-644 -9032 0
-374 -9032 0
-374 -644 -9033 0
c (0<=(SATLiteral(374) - aux971 + SATLiteral(644)))
644 9033 0
374 9033 0
374 644 9032 0
c ((SATLiteral(1049) - aux972 + SATLiteral(914))<=0)
-914 -9035 0
-1049 -9035 0
-1049 -914 -9036 0
c (0<=(SATLiteral(1049) - aux972 + SATLiteral(914)))
914 9036 0
1049 9036 0
1049 914 9035 0
c (( - aux973 + SATLiteral(779) + SATLiteral(239))<=0)
-239 -9038 0
-779 -9038 0
-779 -239 -9039 0
c (0<=( - aux973 + SATLiteral(779) + SATLiteral(239)))
239 9039 0
779 9039 0
779 239 9038 0
c (( - aux974 + SATLiteral(509) + SATLiteral(1184))<=0)
-1184 -9041 0
-509 -9041 0
-509 -1184 -9042 0
c (0<=( - aux974 + SATLiteral(509) + SATLiteral(1184)))
1184 9042 0
509 9042 0
509 1184 9041 0
c ((aux974 - aux975 + SATLiteral(104))<=0)
9041 -9044 0
9042 -9045 0
-104 -9044 0
-104 9041 -9045 0
-104 9042 -9047 0
c (0<=(aux974 - aux975 + SATLiteral(104)))
-9042 9047 0
-9041 9045 0
104 9047 0
104 -9042 9045 0
104 -9041 9044 0
c ((aux971 + aux973 - aux976)<=0)
9038 -9049 0
9039 -9050 0
9032 -9049 0
9032 9038 -9050 0
9032 9039 -9052 0
9033 -9050 0
9033 9038 -9052 0
9033 9039 -9054 0
c (0<=(aux971 + aux973 - aux976))
-9039 9054 0
-9038 9052 0
-9033 9054 0
-9033 -9039 9052 0
-9033 -9038 9050 0
-9032 9052 0
-9032 -9039 9050 0
-9032 -9038 9049 0
c ((SATLiteral(376) - aux977 + SATLiteral(646))<=0)
-646 -9056 0
-376 -9056 0
-376 -646 -9057 0
c (0<=(SATLiteral(376) - aux977 + SATLiteral(646)))
646 9057 0
376 9057 0
376 646 9056 0
c ((SATLiteral(1051) - aux978 + SATLiteral(916))<=0)
-916 -9059 0
-1051 -9059 0
-1051 -916 -9060 0
c (0<=(SATLiteral(1051) - aux978 + SATLiteral(916)))
916 9060 0
1051 9060 0
1051 916 9059 0
c (( - aux979 + SATLiteral(781) + SATLiteral(241))<=0)
-241 -9062 0
-781 -9062 0
-781 -241 -9063 0
c (0<=( - aux979 + SATLiteral(781) + SATLiteral(241)))
241 9063 0
781 9063 0
781 241 9062 0
c (( - aux980 + SATLiteral(511) + SATLiteral(1186))<=0)
-1186 -9065 0
-511 -9065 0
-511 -1186 -9066 0
c (0<=( - aux980 + SATLiteral(511) + SATLiteral(1186)))
1186 9066 0
511 9066 0
511 1186 9065 0
c ((aux980 - aux981 + SATLiteral(106))<=0)
9065 -9068 0
9066 -9069 0
-106 -9068 0
-106 9065 -9069 0
-106 9066 -9071 0
c (0<=(aux980 - aux981 + SATLiteral(106)))
-9066 9071 0
-9065 9069 0
106 9071 0
106 -9066 9069 0
106 -9065 9068 0
c ((aux977 + aux979 - aux982)<=0)
9062 -9073 0
9063 -9074 0
9056 -9073 0
9056 9062 -9074 0
9056 9063 -9076 0
9057 -9074 0
9057 9062 -9076 0
9057 9063 -9078 0
c (0<=(aux977 + aux979 - aux982))
-9063 9078 0
-9062 9076 0
-9057 9078 0
-9057 -9063 9076 0
-9057 -9062 9074 0
-9056 9076 0
-9056 -9063 9074 0
-9056 -9062 9073 0
c ((SATLiteral(-375) - aux983 + SATLiteral(-645))<=0)
645 -9080 0
375 -9080 0
375 645 -9081 0
c (0<=(SATLiteral(-375) - aux983 + SATLiteral(-645)))
-645 9081 0
-375 9081 0
-375 -645 9080 0
c ((SATLiteral(-1050) - aux984 + SATLiteral(-915))<=0)
915 -9083 0
1050 -9083 0
1050 915 -9084 0
c (0<=(SATLiteral(-1050) - aux984 + SATLiteral(-915)))
-915 9084 0
-1050 9084 0
-1050 -915 9083 0
c (( - aux985 + SATLiteral(-780) + SATLiteral(-240))<=0)
240 -9086 0
780 -9086 0
780 240 -9087 0
c (0<=( - aux985 + SATLiteral(-780) + SATLiteral(-240)))
-240 9087 0
-780 9087 0
-780 -240 9086 0
c (( - aux986 + SATLiteral(-510) + SATLiteral(-1185))<=0)
1185 -9089 0
510 -9089 0
510 1185 -9090 0
c (0<=( - aux986 + SATLiteral(-510) + SATLiteral(-1185)))
-1185 9090 0
-510 9090 0
-510 -1185 9089 0
c ((aux986 - aux987 + SATLiteral(-105))<=0)
9089 -9092 0
9090 -9093 0
105 -9092 0
105 9089 -9093 0
105 9090 -9095 0
c (0<=(aux986 - aux987 + SATLiteral(-105)))
-9090 9095 0
-9089 9093 0
-105 9095 0
-105 -9090 9093 0
-105 -9089 9092 0
c ((aux983 + aux985 - aux988)<=0)
9086 -9097 0
9087 -9098 0
9080 -9097 0
9080 9086 -9098 0
9080 9087 -9100 0
9081 -9098 0
9081 9086 -9100 0
9081 9087 -9102 0
c (0<=(aux983 + aux985 - aux988))
-9087 9102 0
-9086 9100 0
-9081 9102 0
-9081 -9087 9100 0
-9081 -9086 9098 0
-9080 9100 0
-9080 -9087 9098 0
-9080 -9086 9097 0
c ((SATLiteral(377) - aux989 + SATLiteral(647))<=0)
-647 -9104 0
-377 -9104 0
-377 -647 -9105 0
c (0<=(SATLiteral(377) - aux989 + SATLiteral(647)))
647 9105 0
377 9105 0
377 647 9104 0
c ((SATLiteral(1052) - aux990 + SATLiteral(917))<=0)
-917 -9107 0
-1052 -9107 0
-1052 -917 -9108 0
c (0<=(SATLiteral(1052) - aux990 + SATLiteral(917)))
917 9108 0
1052 9108 0
1052 917 9107 0
c (( - aux991 + SATLiteral(782) + SATLiteral(242))<=0)
-242 -9110 0
-782 -9110 0
-782 -242 -9111 0
c (0<=( - aux991 + SATLiteral(782) + SATLiteral(242)))
242 9111 0
782 9111 0
782 242 9110 0
c (( - aux992 + SATLiteral(512) + SATLiteral(1187))<=0)
-1187 -9113 0
-512 -9113 0
-512 -1187 -9114 0
c (0<=( - aux992 + SATLiteral(512) + SATLiteral(1187)))
1187 9114 0
512 9114 0
512 1187 9113 0
c ((aux992 - aux993 + SATLiteral(107))<=0)
9113 -9116 0
9114 -9117 0
-107 -9116 0
-107 9113 -9117 0
-107 9114 -9119 0
c (0<=(aux992 - aux993 + SATLiteral(107)))
-9114 9119 0
-9113 9117 0
107 9119 0
107 -9114 9117 0
107 -9113 9116 0
c ((aux989 + aux991 - aux994)<=0)
9110 -9121 0
9111 -9122 0
9104 -9121 0
9104 9110 -9122 0
9104 9111 -9124 0
9105 -9122 0
9105 9110 -9124 0
9105 9111 -9126 0
c (0<=(aux989 + aux991 - aux994))
-9111 9126 0
-9110 9124 0
-9105 9126 0
-9105 -9111 9124 0
-9105 -9110 9122 0
-9104 9124 0
-9104 -9111 9122 0
-9104 -9110 9121 0
c ((SATLiteral(379) - aux995 + SATLiteral(649))<=0)
-649 -9128 0
-379 -9128 0
-379 -649 -9129 0
c (0<=(SATLiteral(379) - aux995 + SATLiteral(649)))
649 9129 0
379 9129 0
379 649 9128 0
c ((SATLiteral(1054) - aux996 + SATLiteral(919))<=0)
-919 -9131 0
-1054 -9131 0
-1054 -919 -9132 0
c (0<=(SATLiteral(1054) - aux996 + SATLiteral(919)))
919 9132 0
1054 9132 0
1054 919 9131 0
c (( - aux997 + SATLiteral(784) + SATLiteral(244))<=0)
-244 -9134 0
-784 -9134 0
-784 -244 -9135 0
c (0<=( - aux997 + SATLiteral(784) + SATLiteral(244)))
244 9135 0
784 9135 0
784 244 9134 0
c (( - aux998 + SATLiteral(514) + SATLiteral(1189))<=0)
-1189 -9137 0
-514 -9137 0
-514 -1189 -9138 0
c (0<=( - aux998 + SATLiteral(514) + SATLiteral(1189)))
1189 9138 0
514 9138 0
514 1189 9137 0
c ((aux998 - aux999 + SATLiteral(109))<=0)
9137 -9140 0
9138 -9141 0
-109 -9140 0
-109 9137 -9141 0
-109 9138 -9143 0
c (0<=(aux998 - aux999 + SATLiteral(109)))
-9138 9143 0
-9137 9141 0
109 9143 0
109 -9138 9141 0
109 -9137 9140 0
c ((aux995 + aux997 - aux1000)<=0)
9134 -9145 0
9135 -9146 0
9128 -9145 0
9128 9134 -9146 0
9128 9135 -9148 0
9129 -9146 0
9129 9134 -9148 0
9129 9135 -9150 0
c (0<=(aux995 + aux997 - aux1000))
-9135 9150 0
-9134 9148 0
-9129 9150 0
-9129 -9135 9148 0
-9129 -9134 9146 0
-9128 9148 0
-9128 -9135 9146 0
-9128 -9134 9145 0
c ((SATLiteral(381) - aux1001 + SATLiteral(651))<=0)
-651 -9152 0
-381 -9152 0
-381 -651 -9153 0
c (0<=(SATLiteral(381) - aux1001 + SATLiteral(651)))
651 9153 0
381 9153 0
381 651 9152 0
c ((SATLiteral(1056) - aux1002 + SATLiteral(921))<=0)
-921 -9155 0
-1056 -9155 0
-1056 -921 -9156 0
c (0<=(SATLiteral(1056) - aux1002 + SATLiteral(921)))
921 9156 0
1056 9156 0
1056 921 9155 0
c ((SATLiteral(786) - aux1003 + SATLiteral(246))<=0)
-246 -9158 0
-786 -9158 0
-786 -246 -9159 0
c (0<=(SATLiteral(786) - aux1003 + SATLiteral(246)))
246 9159 0
786 9159 0
786 246 9158 0
c (( - aux1004 + SATLiteral(516) + SATLiteral(1191))<=0)
-1191 -9161 0
-516 -9161 0
-516 -1191 -9162 0
c (0<=( - aux1004 + SATLiteral(516) + SATLiteral(1191)))
1191 9162 0
516 9162 0
516 1191 9161 0
c ((SATLiteral(111) + aux1004 - aux1005)<=0)
9161 -9164 0
9162 -9165 0
-111 -9164 0
-111 9161 -9165 0
-111 9162 -9167 0
c (0<=(SATLiteral(111) + aux1004 - aux1005))
-9162 9167 0
-9161 9165 0
111 9167 0
111 -9162 9165 0
111 -9161 9164 0
c ((aux1001 + aux1003 - aux1006)<=0)
9158 -9169 0
9159 -9170 0
9152 -9169 0
9152 9158 -9170 0
9152 9159 -9172 0
9153 -9170 0
9153 9158 -9172 0
9153 9159 -9174 0
c (0<=(aux1001 + aux1003 - aux1006))
-9159 9174 0
-9158 9172 0
-9153 9174 0
-9153 -9159 9172 0
-9153 -9158 9170 0
-9152 9172 0
-9152 -9159 9170 0
-9152 -9158 9169 0
c ((SATLiteral(383) - aux1007 + SATLiteral(653))<=0)
-653 -9176 0
-383 -9176 0
-383 -653 -9177 0
c (0<=(SATLiteral(383) - aux1007 + SATLiteral(653)))
653 9177 0
383 9177 0
383 653 9176 0
c ((SATLiteral(1058) - aux1008 + SATLiteral(923))<=0)
-923 -9179 0
-1058 -9179 0
-1058 -923 -9180 0
c (0<=(SATLiteral(1058) - aux1008 + SATLiteral(923)))
923 9180 0
1058 9180 0
1058 923 9179 0
c ((SATLiteral(788) - aux1009 + SATLiteral(248))<=0)
-248 -9182 0
-788 -9182 0
-788 -248 -9183 0
c (0<=(SATLiteral(788) - aux1009 + SATLiteral(248)))
248 9183 0
788 9183 0
788 248 9182 0
c (( - aux1010 + SATLiteral(518) + SATLiteral(1193))<=0)
-1193 -9185 0
-518 -9185 0
-518 -1193 -9186 0
c (0<=( - aux1010 + SATLiteral(518) + SATLiteral(1193)))
1193 9186 0
518 9186 0
518 1193 9185 0
c ((SATLiteral(113) + aux1010 - aux1011)<=0)
9185 -9188 0
9186 -9189 0
-113 -9188 0
-113 9185 -9189 0
-113 9186 -9191 0
c (0<=(SATLiteral(113) + aux1010 - aux1011))
-9186 9191 0
-9185 9189 0
113 9191 0
113 -9186 9189 0
113 -9185 9188 0
c ((aux1007 + aux1009 - aux1012)<=0)
9182 -9193 0
9183 -9194 0
9176 -9193 0
9176 9182 -9194 0
9176 9183 -9196 0
9177 -9194 0
9177 9182 -9196 0
9177 9183 -9198 0
c (0<=(aux1007 + aux1009 - aux1012))
-9183 9198 0
-9182 9196 0
-9177 9198 0
-9177 -9183 9196 0
-9177 -9182 9194 0
-9176 9196 0
-9176 -9183 9194 0
-9176 -9182 9193 0
c ((SATLiteral(385) - aux1013 + SATLiteral(655))<=0)
-655 -9200 0
-385 -9200 0
-385 -655 -9201 0
c (0<=(SATLiteral(385) - aux1013 + SATLiteral(655)))
655 9201 0
385 9201 0
385 655 9200 0
c ((SATLiteral(1060) - aux1014 + SATLiteral(925))<=0)
-925 -9203 0
-1060 -9203 0
-1060 -925 -9204 0
c (0<=(SATLiteral(1060) - aux1014 + SATLiteral(925)))
925 9204 0
1060 9204 0
1060 925 9203 0
c ((SATLiteral(790) - aux1015 + SATLiteral(250))<=0)
-250 -9206 0
-790 -9206 0
-790 -250 -9207 0
c (0<=(SATLiteral(790) - aux1015 + SATLiteral(250)))
250 9207 0
790 9207 0
790 250 9206 0
c (( - aux1016 + SATLiteral(520) + SATLiteral(1195))<=0)
-1195 -9209 0
-520 -9209 0
-520 -1195 -9210 0
c (0<=( - aux1016 + SATLiteral(520) + SATLiteral(1195)))
1195 9210 0
520 9210 0
520 1195 9209 0
c ((SATLiteral(115) + aux1016 - aux1017)<=0)
9209 -9212 0
9210 -9213 0
-115 -9212 0
-115 9209 -9213 0
-115 9210 -9215 0
c (0<=(SATLiteral(115) + aux1016 - aux1017))
-9210 9215 0
-9209 9213 0
115 9215 0
115 -9210 9213 0
115 -9209 9212 0
c ((aux1013 + aux1015 - aux1018)<=0)
9206 -9217 0
9207 -9218 0
9200 -9217 0
9200 9206 -9218 0
9200 9207 -9220 0
9201 -9218 0
9201 9206 -9220 0
9201 9207 -9222 0
c (0<=(aux1013 + aux1015 - aux1018))
-9207 9222 0
-9206 9220 0
-9201 9222 0
-9201 -9207 9220 0
-9201 -9206 9218 0
-9200 9220 0
-9200 -9207 9218 0
-9200 -9206 9217 0
c ((SATLiteral(387) - aux1019 + SATLiteral(657))<=0)
-657 -9224 0
-387 -9224 0
-387 -657 -9225 0
c (0<=(SATLiteral(387) - aux1019 + SATLiteral(657)))
657 9225 0
387 9225 0
387 657 9224 0
c ((SATLiteral(1062) - aux1020 + SATLiteral(927))<=0)
-927 -9227 0
-1062 -9227 0
-1062 -927 -9228 0
c (0<=(SATLiteral(1062) - aux1020 + SATLiteral(927)))
927 9228 0
1062 9228 0
1062 927 9227 0
c ((SATLiteral(792) - aux1021 + SATLiteral(252))<=0)
-252 -9230 0
-792 -9230 0
-792 -252 -9231 0
c (0<=(SATLiteral(792) - aux1021 + SATLiteral(252)))
252 9231 0
792 9231 0
792 252 9230 0
c (( - aux1022 + SATLiteral(522) + SATLiteral(1197))<=0)
-1197 -9233 0
-522 -9233 0
-522 -1197 -9234 0
c (0<=( - aux1022 + SATLiteral(522) + SATLiteral(1197)))
1197 9234 0
522 9234 0
522 1197 9233 0
c ((SATLiteral(117) + aux1022 - aux1023)<=0)
9233 -9236 0
9234 -9237 0
-117 -9236 0
-117 9233 -9237 0
-117 9234 -9239 0
c (0<=(SATLiteral(117) + aux1022 - aux1023))
-9234 9239 0
-9233 9237 0
117 9239 0
117 -9234 9237 0
117 -9233 9236 0
c ((aux1019 + aux1021 - aux1024)<=0)
9230 -9241 0
9231 -9242 0
9224 -9241 0
9224 9230 -9242 0
9224 9231 -9244 0
9225 -9242 0
9225 9230 -9244 0
9225 9231 -9246 0
c (0<=(aux1019 + aux1021 - aux1024))
-9231 9246 0
-9230 9244 0
-9225 9246 0
-9225 -9231 9244 0
-9225 -9230 9242 0
-9224 9244 0
-9224 -9231 9242 0
-9224 -9230 9241 0
c ((SATLiteral(389) - aux1025 + SATLiteral(659))<=0)
-659 -9248 0
-389 -9248 0
-389 -659 -9249 0
c (0<=(SATLiteral(389) - aux1025 + SATLiteral(659)))
659 9249 0
389 9249 0
389 659 9248 0
c ((SATLiteral(1064) - aux1026 + SATLiteral(929))<=0)
-929 -9251 0
-1064 -9251 0
-1064 -929 -9252 0
c (0<=(SATLiteral(1064) - aux1026 + SATLiteral(929)))
929 9252 0
1064 9252 0
1064 929 9251 0
c ((SATLiteral(794) - aux1027 + SATLiteral(254))<=0)
-254 -9254 0
-794 -9254 0
-794 -254 -9255 0
c (0<=(SATLiteral(794) - aux1027 + SATLiteral(254)))
254 9255 0
794 9255 0
794 254 9254 0
c (( - aux1028 + SATLiteral(524) + SATLiteral(1199))<=0)
-1199 -9257 0
-524 -9257 0
-524 -1199 -9258 0
c (0<=( - aux1028 + SATLiteral(524) + SATLiteral(1199)))
1199 9258 0
524 9258 0
524 1199 9257 0
c ((SATLiteral(119) + aux1028 - aux1029)<=0)
9257 -9260 0
9258 -9261 0
-119 -9260 0
-119 9257 -9261 0
-119 9258 -9263 0
c (0<=(SATLiteral(119) + aux1028 - aux1029))
-9258 9263 0
-9257 9261 0
119 9263 0
119 -9258 9261 0
119 -9257 9260 0
c ((aux1025 + aux1027 - aux1030)<=0)
9254 -9265 0
9255 -9266 0
9248 -9265 0
9248 9254 -9266 0
9248 9255 -9268 0
9249 -9266 0
9249 9254 -9268 0
9249 9255 -9270 0
c (0<=(aux1025 + aux1027 - aux1030))
-9255 9270 0
-9254 9268 0
-9249 9270 0
-9249 -9255 9268 0
-9249 -9254 9266 0
-9248 9268 0
-9248 -9255 9266 0
-9248 -9254 9265 0
c ((SATLiteral(391) - aux1031 + SATLiteral(661))<=0)
-661 -9272 0
-391 -9272 0
-391 -661 -9273 0
c (0<=(SATLiteral(391) - aux1031 + SATLiteral(661)))
661 9273 0
391 9273 0
391 661 9272 0
c ((SATLiteral(1066) - aux1032 + SATLiteral(931))<=0)
-931 -9275 0
-1066 -9275 0
-1066 -931 -9276 0
c (0<=(SATLiteral(1066) - aux1032 + SATLiteral(931)))
931 9276 0
1066 9276 0
1066 931 9275 0
c ((SATLiteral(796) - aux1033 + SATLiteral(256))<=0)
-256 -9278 0
-796 -9278 0
-796 -256 -9279 0
c (0<=(SATLiteral(796) - aux1033 + SATLiteral(256)))
256 9279 0
796 9279 0
796 256 9278 0
c (( - aux1034 + SATLiteral(526) + SATLiteral(1201))<=0)
-1201 -9281 0
-526 -9281 0
-526 -1201 -9282 0
c (0<=( - aux1034 + SATLiteral(526) + SATLiteral(1201)))
1201 9282 0
526 9282 0
526 1201 9281 0
c ((SATLiteral(121) + aux1034 - aux1035)<=0)
9281 -9284 0
9282 -9285 0
-121 -9284 0
-121 9281 -9285 0
-121 9282 -9287 0
c (0<=(SATLiteral(121) + aux1034 - aux1035))
-9282 9287 0
-9281 9285 0
121 9287 0
121 -9282 9285 0
121 -9281 9284 0
c ((aux1031 + aux1033 - aux1036)<=0)
9278 -9289 0
9279 -9290 0
9272 -9289 0
9272 9278 -9290 0
9272 9279 -9292 0
9273 -9290 0
9273 9278 -9292 0
9273 9279 -9294 0
c (0<=(aux1031 + aux1033 - aux1036))
-9279 9294 0
-9278 9292 0
-9273 9294 0
-9273 -9279 9292 0
-9273 -9278 9290 0
-9272 9292 0
-9272 -9279 9290 0
-9272 -9278 9289 0
c ((SATLiteral(-390) - aux1037 + SATLiteral(-660))<=0)
660 -9296 0
390 -9296 0
390 660 -9297 0
c (0<=(SATLiteral(-390) - aux1037 + SATLiteral(-660)))
-660 9297 0
-390 9297 0
-390 -660 9296 0
c ((SATLiteral(-1065) - aux1038 + SATLiteral(-930))<=0)
930 -9299 0
1065 -9299 0
1065 930 -9300 0
c (0<=(SATLiteral(-1065) - aux1038 + SATLiteral(-930)))
-930 9300 0
-1065 9300 0
-1065 -930 9299 0
c ((SATLiteral(-795) - aux1039 + SATLiteral(-255))<=0)
255 -9302 0
795 -9302 0
795 255 -9303 0
c (0<=(SATLiteral(-795) - aux1039 + SATLiteral(-255)))
-255 9303 0
-795 9303 0
-795 -255 9302 0
c (( - aux1040 + SATLiteral(-525) + SATLiteral(-1200))<=0)
1200 -9305 0
525 -9305 0
525 1200 -9306 0
c (0<=( - aux1040 + SATLiteral(-525) + SATLiteral(-1200)))
-1200 9306 0
-525 9306 0
-525 -1200 9305 0
c ((SATLiteral(-120) + aux1040 - aux1041)<=0)
9305 -9308 0
9306 -9309 0
120 -9308 0
120 9305 -9309 0
120 9306 -9311 0
c (0<=(SATLiteral(-120) + aux1040 - aux1041))
-9306 9311 0
-9305 9309 0
-120 9311 0
-120 -9306 9309 0
-120 -9305 9308 0
c ((aux1037 + aux1039 - aux1042)<=0)
9302 -9313 0
9303 -9314 0
9296 -9313 0
9296 9302 -9314 0
9296 9303 -9316 0
9297 -9314 0
9297 9302 -9316 0
9297 9303 -9318 0
c (0<=(aux1037 + aux1039 - aux1042))
-9303 9318 0
-9302 9316 0
-9297 9318 0
-9297 -9303 9316 0
-9297 -9302 9314 0
-9296 9316 0
-9296 -9303 9314 0
-9296 -9302 9313 0
c ((SATLiteral(392) - aux1043 + SATLiteral(662))<=0)
-662 -9320 0
-392 -9320 0
-392 -662 -9321 0
c (0<=(SATLiteral(392) - aux1043 + SATLiteral(662)))
662 9321 0
392 9321 0
392 662 9320 0
c ((SATLiteral(1067) - aux1044 + SATLiteral(932))<=0)
-932 -9323 0
-1067 -9323 0
-1067 -932 -9324 0
c (0<=(SATLiteral(1067) - aux1044 + SATLiteral(932)))
932 9324 0
1067 9324 0
1067 932 9323 0
c ((SATLiteral(797) - aux1045 + SATLiteral(257))<=0)
-257 -9326 0
-797 -9326 0
-797 -257 -9327 0
c (0<=(SATLiteral(797) - aux1045 + SATLiteral(257)))
257 9327 0
797 9327 0
797 257 9326 0
c (( - aux1046 + SATLiteral(527) + SATLiteral(1202))<=0)
-1202 -9329 0
-527 -9329 0
-527 -1202 -9330 0
c (0<=( - aux1046 + SATLiteral(527) + SATLiteral(1202)))
1202 9330 0
527 9330 0
527 1202 9329 0
c ((SATLiteral(122) + aux1046 - aux1047)<=0)
9329 -9332 0
9330 -9333 0
-122 -9332 0
-122 9329 -9333 0
-122 9330 -9335 0
c (0<=(SATLiteral(122) + aux1046 - aux1047))
-9330 9335 0
-9329 9333 0
122 9335 0
122 -9330 9333 0
122 -9329 9332 0
c ((aux1043 + aux1045 - aux1048)<=0)
9326 -9337 0
9327 -9338 0
9320 -9337 0
9320 9326 -9338 0
9320 9327 -9340 0
9321 -9338 0
9321 9326 -9340 0
9321 9327 -9342 0
c (0<=(aux1043 + aux1045 - aux1048))
-9327 9342 0
-9326 9340 0
-9321 9342 0
-9321 -9327 9340 0
-9321 -9326 9338 0
-9320 9340 0
-9320 -9327 9338 0
-9320 -9326 9337 0
c ((SATLiteral(394) - aux1049 + SATLiteral(664))<=0)
-664 -9344 0
-394 -9344 0
-394 -664 -9345 0
c (0<=(SATLiteral(394) - aux1049 + SATLiteral(664)))
664 9345 0
394 9345 0
394 664 9344 0
c ((SATLiteral(1069) - aux1050 + SATLiteral(934))<=0)
-934 -9347 0
-1069 -9347 0
-1069 -934 -9348 0
c (0<=(SATLiteral(1069) - aux1050 + SATLiteral(934)))
934 9348 0
1069 9348 0
1069 934 9347 0
c ((SATLiteral(799) - aux1051 + SATLiteral(259))<=0)
-259 -9350 0
-799 -9350 0
-799 -259 -9351 0
c (0<=(SATLiteral(799) - aux1051 + SATLiteral(259)))
259 9351 0
799 9351 0
799 259 9350 0
c (( - aux1052 + SATLiteral(529) + SATLiteral(1204))<=0)
-1204 -9353 0
-529 -9353 0
-529 -1204 -9354 0
c (0<=( - aux1052 + SATLiteral(529) + SATLiteral(1204)))
1204 9354 0
529 9354 0
529 1204 9353 0
c ((SATLiteral(124) + aux1052 - aux1053)<=0)
9353 -9356 0
9354 -9357 0
-124 -9356 0
-124 9353 -9357 0
-124 9354 -9359 0
c (0<=(SATLiteral(124) + aux1052 - aux1053))
-9354 9359 0
-9353 9357 0
124 9359 0
124 -9354 9357 0
124 -9353 9356 0
c ((aux1049 + aux1051 - aux1054)<=0)
9350 -9361 0
9351 -9362 0
9344 -9361 0
9344 9350 -9362 0
9344 9351 -9364 0
9345 -9362 0
9345 9350 -9364 0
9345 9351 -9366 0
c (0<=(aux1049 + aux1051 - aux1054))
-9351 9366 0
-9350 9364 0
-9345 9366 0
-9345 -9351 9364 0
-9345 -9350 9362 0
-9344 9364 0
-9344 -9351 9362 0
-9344 -9350 9361 0
c ((SATLiteral(396) - aux1055 + SATLiteral(666))<=0)
-666 -9368 0
-396 -9368 0
-396 -666 -9369 0
c (0<=(SATLiteral(396) - aux1055 + SATLiteral(666)))
666 9369 0
396 9369 0
396 666 9368 0
c ((SATLiteral(1071) - aux1056 + SATLiteral(936))<=0)
-936 -9371 0
-1071 -9371 0
-1071 -936 -9372 0
c (0<=(SATLiteral(1071) - aux1056 + SATLiteral(936)))
936 9372 0
1071 9372 0
1071 936 9371 0
c ((SATLiteral(801) - aux1057 + SATLiteral(261))<=0)
-261 -9374 0
-801 -9374 0
-801 -261 -9375 0
c (0<=(SATLiteral(801) - aux1057 + SATLiteral(261)))
261 9375 0
801 9375 0
801 261 9374 0
c (( - aux1058 + SATLiteral(531) + SATLiteral(1206))<=0)
-1206 -9377 0
-531 -9377 0
-531 -1206 -9378 0
c (0<=( - aux1058 + SATLiteral(531) + SATLiteral(1206)))
1206 9378 0
531 9378 0
531 1206 9377 0
c ((SATLiteral(126) + aux1058 - aux1059)<=0)
9377 -9380 0
9378 -9381 0
-126 -9380 0
-126 9377 -9381 0
-126 9378 -9383 0
c (0<=(SATLiteral(126) + aux1058 - aux1059))
-9378 9383 0
-9377 9381 0
126 9383 0
126 -9378 9381 0
126 -9377 9380 0
c ((aux1055 + aux1057 - aux1060)<=0)
9374 -9385 0
9375 -9386 0
9368 -9385 0
9368 9374 -9386 0
9368 9375 -9388 0
9369 -9386 0
9369 9374 -9388 0
9369 9375 -9390 0
c (0<=(aux1055 + aux1057 - aux1060))
-9375 9390 0
-9374 9388 0
-9369 9390 0
-9369 -9375 9388 0
-9369 -9374 9386 0
-9368 9388 0
-9368 -9375 9386 0
-9368 -9374 9385 0
c ((SATLiteral(398) - aux1061 + SATLiteral(668))<=0)
-668 -9392 0
-398 -9392 0
-398 -668 -9393 0
c (0<=(SATLiteral(398) - aux1061 + SATLiteral(668)))
668 9393 0
398 9393 0
398 668 9392 0
c ((SATLiteral(1073) - aux1062 + SATLiteral(938))<=0)
-938 -9395 0
-1073 -9395 0
-1073 -938 -9396 0
c (0<=(SATLiteral(1073) - aux1062 + SATLiteral(938)))
938 9396 0
1073 9396 0
1073 938 9395 0
c ((SATLiteral(803) - aux1063 + SATLiteral(263))<=0)
-263 -9398 0
-803 -9398 0
-803 -263 -9399 0
c (0<=(SATLiteral(803) - aux1063 + SATLiteral(263)))
263 9399 0
803 9399 0
803 263 9398 0
c (( - aux1064 + SATLiteral(533) + SATLiteral(1208))<=0)
-1208 -9401 0
-533 -9401 0
-533 -1208 -9402 0
c (0<=( - aux1064 + SATLiteral(533) + SATLiteral(1208)))
1208 9402 0
533 9402 0
533 1208 9401 0
c ((SATLiteral(128) + aux1064 - aux1065)<=0)
9401 -9404 0
9402 -9405 0
-128 -9404 0
-128 9401 -9405 0
-128 9402 -9407 0
c (0<=(SATLiteral(128) + aux1064 - aux1065))
-9402 9407 0
-9401 9405 0
128 9407 0
128 -9402 9405 0
128 -9401 9404 0
c ((aux1061 + aux1063 - aux1066)<=0)
9398 -9409 0
9399 -9410 0
9392 -9409 0
9392 9398 -9410 0
9392 9399 -9412 0
9393 -9410 0
9393 9398 -9412 0
9393 9399 -9414 0
c (0<=(aux1061 + aux1063 - aux1066))
-9399 9414 0
-9398 9412 0
-9393 9414 0
-9393 -9399 9412 0
-9393 -9398 9410 0
-9392 9412 0
-9392 -9399 9410 0
-9392 -9398 9409 0
c ((SATLiteral(400) - aux1067 + SATLiteral(670))<=0)
-670 -9416 0
-400 -9416 0
-400 -670 -9417 0
c (0<=(SATLiteral(400) - aux1067 + SATLiteral(670)))
670 9417 0
400 9417 0
400 670 9416 0
c ((SATLiteral(1075) - aux1068 + SATLiteral(940))<=0)
-940 -9419 0
-1075 -9419 0
-1075 -940 -9420 0
c (0<=(SATLiteral(1075) - aux1068 + SATLiteral(940)))
940 9420 0
1075 9420 0
1075 940 9419 0
c ((SATLiteral(805) - aux1069 + SATLiteral(265))<=0)
-265 -9422 0
-805 -9422 0
-805 -265 -9423 0
c (0<=(SATLiteral(805) - aux1069 + SATLiteral(265)))
265 9423 0
805 9423 0
805 265 9422 0
c (( - aux1070 + SATLiteral(535) + SATLiteral(1210))<=0)
-1210 -9425 0
-535 -9425 0
-535 -1210 -9426 0
c (0<=( - aux1070 + SATLiteral(535) + SATLiteral(1210)))
1210 9426 0
535 9426 0
535 1210 9425 0
c ((SATLiteral(130) + aux1070 - aux1071)<=0)
9425 -9428 0
9426 -9429 0
-130 -9428 0
-130 9425 -9429 0
-130 9426 -9431 0
c (0<=(SATLiteral(130) + aux1070 - aux1071))
-9426 9431 0
-9425 9429 0
130 9431 0
130 -9426 9429 0
130 -9425 9428 0
c ((aux1067 + aux1069 - aux1072)<=0)
9422 -9433 0
9423 -9434 0
9416 -9433 0
9416 9422 -9434 0
9416 9423 -9436 0
9417 -9434 0
9417 9422 -9436 0
9417 9423 -9438 0
c (0<=(aux1067 + aux1069 - aux1072))
-9423 9438 0
-9422 9436 0
-9417 9438 0
-9417 -9423 9436 0
-9417 -9422 9434 0
-9416 9436 0
-9416 -9423 9434 0
-9416 -9422 9433 0
c ((SATLiteral(402) - aux1073 + SATLiteral(672))<=0)
-672 -9440 0
-402 -9440 0
-402 -672 -9441 0
c (0<=(SATLiteral(402) - aux1073 + SATLiteral(672)))
672 9441 0
402 9441 0
402 672 9440 0
c ((SATLiteral(1077) - aux1074 + SATLiteral(942))<=0)
-942 -9443 0
-1077 -9443 0
-1077 -942 -9444 0
c (0<=(SATLiteral(1077) - aux1074 + SATLiteral(942)))
942 9444 0
1077 9444 0
1077 942 9443 0
c ((SATLiteral(807) - aux1075 + SATLiteral(267))<=0)
-267 -9446 0
-807 -9446 0
-807 -267 -9447 0
c (0<=(SATLiteral(807) - aux1075 + SATLiteral(267)))
267 9447 0
807 9447 0
807 267 9446 0
c (( - aux1076 + SATLiteral(537) + SATLiteral(1212))<=0)
-1212 -9449 0
-537 -9449 0
-537 -1212 -9450 0
c (0<=( - aux1076 + SATLiteral(537) + SATLiteral(1212)))
1212 9450 0
537 9450 0
537 1212 9449 0
c ((SATLiteral(132) + aux1076 - aux1077)<=0)
9449 -9452 0
9450 -9453 0
-132 -9452 0
-132 9449 -9453 0
-132 9450 -9455 0
c (0<=(SATLiteral(132) + aux1076 - aux1077))
-9450 9455 0
-9449 9453 0
132 9455 0
132 -9450 9453 0
132 -9449 9452 0
c ((aux1073 + aux1075 - aux1078)<=0)
9446 -9457 0
9447 -9458 0
9440 -9457 0
9440 9446 -9458 0
9440 9447 -9460 0
9441 -9458 0
9441 9446 -9460 0
9441 9447 -9462 0
c (0<=(aux1073 + aux1075 - aux1078))
-9447 9462 0
-9446 9460 0
-9441 9462 0
-9441 -9447 9460 0
-9441 -9446 9458 0
-9440 9460 0
-9440 -9447 9458 0
-9440 -9446 9457 0
c ((SATLiteral(404) - aux1079 + SATLiteral(674))<=0)
-674 -9464 0
-404 -9464 0
-404 -674 -9465 0
c (0<=(SATLiteral(404) - aux1079 + SATLiteral(674)))
674 9465 0
404 9465 0
404 674 9464 0
c ((SATLiteral(1079) - aux1080 + SATLiteral(944))<=0)
-944 -9467 0
-1079 -9467 0
-1079 -944 -9468 0
c (0<=(SATLiteral(1079) - aux1080 + SATLiteral(944)))
944 9468 0
1079 9468 0
1079 944 9467 0
c ((SATLiteral(809) - aux1081 + SATLiteral(269))<=0)
-269 -9470 0
-809 -9470 0
-809 -269 -9471 0
c (0<=(SATLiteral(809) - aux1081 + SATLiteral(269)))
269 9471 0
809 9471 0
809 269 9470 0
c (( - aux1082 + SATLiteral(539) + SATLiteral(1214))<=0)
-1214 -9473 0
-539 -9473 0
-539 -1214 -9474 0
c (0<=( - aux1082 + SATLiteral(539) + SATLiteral(1214)))
1214 9474 0
539 9474 0
539 1214 9473 0
c ((SATLiteral(134) + aux1082 - aux1083)<=0)
9473 -9476 0
9474 -9477 0
-134 -9476 0
-134 9473 -9477 0
-134 9474 -9479 0
c (0<=(SATLiteral(134) + aux1082 - aux1083))
-9474 9479 0
-9473 9477 0
134 9479 0
134 -9474 9477 0
134 -9473 9476 0
c ((aux1079 + aux1081 - aux1084)<=0)
9470 -9481 0
9471 -9482 0
9464 -9481 0
9464 9470 -9482 0
9464 9471 -9484 0
9465 -9482 0
9465 9470 -9484 0
9465 9471 -9486 0
c (0<=(aux1079 + aux1081 - aux1084))
-9471 9486 0
-9470 9484 0
-9465 9486 0
-9465 -9471 9484 0
-9465 -9470 9482 0
-9464 9484 0
-9464 -9471 9482 0
-9464 -9470 9481 0
c ((SATLiteral(406) - aux1085 + SATLiteral(676))<=0)
-676 -9488 0
-406 -9488 0
-406 -676 -9489 0
c (0<=(SATLiteral(406) - aux1085 + SATLiteral(676)))
676 9489 0
406 9489 0
406 676 9488 0
c ((SATLiteral(1081) - aux1086 + SATLiteral(946))<=0)
-946 -9491 0
-1081 -9491 0
-1081 -946 -9492 0
c (0<=(SATLiteral(1081) - aux1086 + SATLiteral(946)))
946 9492 0
1081 9492 0
1081 946 9491 0
c ((SATLiteral(811) - aux1087 + SATLiteral(271))<=0)
-271 -9494 0
-811 -9494 0
-811 -271 -9495 0
c (0<=(SATLiteral(811) - aux1087 + SATLiteral(271)))
271 9495 0
811 9495 0
811 271 9494 0
c (( - aux1088 + SATLiteral(541) + SATLiteral(1216))<=0)
-1216 -9497 0
-541 -9497 0
-541 -1216 -9498 0
c (0<=( - aux1088 + SATLiteral(541) + SATLiteral(1216)))
1216 9498 0
541 9498 0
541 1216 9497 0
c ((SATLiteral(136) + aux1088 - aux1089)<=0)
9497 -9500 0
9498 -9501 0
-136 -9500 0
-136 9497 -9501 0
-136 9498 -9503 0
c (0<=(SATLiteral(136) + aux1088 - aux1089))
-9498 9503 0
-9497 9501 0
136 9503 0
136 -9498 9501 0
136 -9497 9500 0
c ((aux1085 + aux1087 - aux1090)<=0)
9494 -9505 0
9495 -9506 0
9488 -9505 0
9488 9494 -9506 0
9488 9495 -9508 0
9489 -9506 0
9489 9494 -9508 0
9489 9495 -9510 0
c (0<=(aux1085 + aux1087 - aux1090))
-9495 9510 0
-9494 9508 0
-9489 9510 0
-9489 -9495 9508 0
-9489 -9494 9506 0
-9488 9508 0
-9488 -9495 9506 0
-9488 -9494 9505 0
c ((SATLiteral(-405) - aux1091 + SATLiteral(-675))<=0)
675 -9512 0
405 -9512 0
405 675 -9513 0
c (0<=(SATLiteral(-405) - aux1091 + SATLiteral(-675)))
-675 9513 0
-405 9513 0
-405 -675 9512 0
c ((SATLiteral(-1080) - aux1092 + SATLiteral(-945))<=0)
945 -9515 0
1080 -9515 0
1080 945 -9516 0
c (0<=(SATLiteral(-1080) - aux1092 + SATLiteral(-945)))
-945 9516 0
-1080 9516 0
-1080 -945 9515 0
c ((SATLiteral(-810) - aux1093 + SATLiteral(-270))<=0)
270 -9518 0
810 -9518 0
810 270 -9519 0
c (0<=(SATLiteral(-810) - aux1093 + SATLiteral(-270)))
-270 9519 0
-810 9519 0
-810 -270 9518 0
c (( - aux1094 + SATLiteral(-540) + SATLiteral(-1215))<=0)
1215 -9521 0
540 -9521 0
540 1215 -9522 0
c (0<=( - aux1094 + SATLiteral(-540) + SATLiteral(-1215)))
-1215 9522 0
-540 9522 0
-540 -1215 9521 0
c ((SATLiteral(-135) + aux1094 - aux1095)<=0)
9521 -9524 0
9522 -9525 0
135 -9524 0
135 9521 -9525 0
135 9522 -9527 0
c (0<=(SATLiteral(-135) + aux1094 - aux1095))
-9522 9527 0
-9521 9525 0
-135 9527 0
-135 -9522 9525 0
-135 -9521 9524 0
c ((aux1091 + aux1093 - aux1096)<=0)
9518 -9529 0
9519 -9530 0
9512 -9529 0
9512 9518 -9530 0
9512 9519 -9532 0
9513 -9530 0
9513 9518 -9532 0
9513 9519 -9534 0
c (0<=(aux1091 + aux1093 - aux1096))
-9519 9534 0
-9518 9532 0
-9513 9534 0
-9513 -9519 9532 0
-9513 -9518 9530 0
-9512 9532 0
-9512 -9519 9530 0
-9512 -9518 9529 0
c ((SATLiteral(2) + SATLiteral(122) - aux1097)<=0)
-122 -9536 0
-2 -9536 0
-2 -122 -9537 0
c (0<=(SATLiteral(2) + SATLiteral(122) - aux1097))
122 9537 0
2 9537 0
2 122 9536 0
c ((SATLiteral(17) + SATLiteral(107) - aux1098)<=0)
-107 -9539 0
-17 -9539 0
-17 -107 -9540 0
c (0<=(SATLiteral(17) + SATLiteral(107) - aux1098))
107 9540 0
17 9540 0
17 107 9539 0
c ((SATLiteral(47) + SATLiteral(92) - aux1099)<=0)
-92 -9542 0
-47 -9542 0
-47 -92 -9543 0
c (0<=(SATLiteral(47) + SATLiteral(92) - aux1099))
92 9543 0
47 9543 0
47 92 9542 0
c ((SATLiteral(62) + SATLiteral(77) - aux1100)<=0)
-77 -9545 0
-62 -9545 0
-62 -77 -9546 0
c (0<=(SATLiteral(62) + SATLiteral(77) - aux1100))
77 9546 0
62 9546 0
62 77 9545 0
c ((SATLiteral(32) + aux1100 - aux1101)<=0)
9545 -9548 0
9546 -9549 0
-32 -9548 0
-32 9545 -9549 0
-32 9546 -9551 0
c (0<=(SATLiteral(32) + aux1100 - aux1101))
-9546 9551 0
-9545 9549 0
32 9551 0
32 -9546 9549 0
32 -9545 9548 0
c ((aux1097 + aux1099 - aux1102)<=0)
9542 -9553 0
9543 -9554 0
9536 -9553 0
9536 9542 -9554 0
9536 9543 -9556 0
9537 -9554 0
9537 9542 -9556 0
9537 9543 -9558 0
c (0<=(aux1097 + aux1099 - aux1102))
-9543 9558 0
-9542 9556 0
-9537 9558 0
-9537 -9543 9556 0
-9537 -9542 9554 0
-9536 9556 0
-9536 -9543 9554 0
-9536 -9542 9553 0
c ((SATLiteral(4) + SATLiteral(124) - aux1103)<=0)
-124 -9560 0
-4 -9560 0
-4 -124 -9561 0
c (0<=(SATLiteral(4) + SATLiteral(124) - aux1103))
124 9561 0
4 9561 0
4 124 9560 0
c ((SATLiteral(19) + SATLiteral(109) - aux1104)<=0)
-109 -9563 0
-19 -9563 0
-19 -109 -9564 0
c (0<=(SATLiteral(19) + SATLiteral(109) - aux1104))
109 9564 0
19 9564 0
19 109 9563 0
c ((SATLiteral(49) + SATLiteral(94) - aux1105)<=0)
-94 -9566 0
-49 -9566 0
-49 -94 -9567 0
c (0<=(SATLiteral(49) + SATLiteral(94) - aux1105))
94 9567 0
49 9567 0
49 94 9566 0
c ((SATLiteral(64) + SATLiteral(79) - aux1106)<=0)
-79 -9569 0
-64 -9569 0
-64 -79 -9570 0
c (0<=(SATLiteral(64) + SATLiteral(79) - aux1106))
79 9570 0
64 9570 0
64 79 9569 0
c ((SATLiteral(34) + aux1106 - aux1107)<=0)
9569 -9572 0
9570 -9573 0
-34 -9572 0
-34 9569 -9573 0
-34 9570 -9575 0
c (0<=(SATLiteral(34) + aux1106 - aux1107))
-9570 9575 0
-9569 9573 0
34 9575 0
34 -9570 9573 0
34 -9569 9572 0
c ((aux1103 + aux1105 - aux1108)<=0)
9566 -9577 0
9567 -9578 0
9560 -9577 0
9560 9566 -9578 0
9560 9567 -9580 0
9561 -9578 0
9561 9566 -9580 0
9561 9567 -9582 0
c (0<=(aux1103 + aux1105 - aux1108))
-9567 9582 0
-9566 9580 0
-9561 9582 0
-9561 -9567 9580 0
-9561 -9566 9578 0
-9560 9580 0
-9560 -9567 9578 0
-9560 -9566 9577 0
c ((SATLiteral(6) + SATLiteral(126) - aux1109)<=0)
-126 -9584 0
-6 -9584 0
-6 -126 -9585 0
c (0<=(SATLiteral(6) + SATLiteral(126) - aux1109))
126 9585 0
6 9585 0
6 126 9584 0
c ((SATLiteral(21) + SATLiteral(111) - aux1110)<=0)
-111 -9587 0
-21 -9587 0
-21 -111 -9588 0
c (0<=(SATLiteral(21) + SATLiteral(111) - aux1110))
111 9588 0
21 9588 0
21 111 9587 0
c ((SATLiteral(51) + SATLiteral(96) - aux1111)<=0)
-96 -9590 0
-51 -9590 0
-51 -96 -9591 0
c (0<=(SATLiteral(51) + SATLiteral(96) - aux1111))
96 9591 0
51 9591 0
51 96 9590 0
c ((SATLiteral(66) + SATLiteral(81) - aux1112)<=0)
-81 -9593 0
-66 -9593 0
-66 -81 -9594 0
c (0<=(SATLiteral(66) + SATLiteral(81) - aux1112))
81 9594 0
66 9594 0
66 81 9593 0
c ((SATLiteral(36) + aux1112 - aux1113)<=0)
9593 -9596 0
9594 -9597 0
-36 -9596 0
-36 9593 -9597 0
-36 9594 -9599 0
c (0<=(SATLiteral(36) + aux1112 - aux1113))
-9594 9599 0
-9593 9597 0
36 9599 0
36 -9594 9597 0
36 -9593 9596 0
c ((aux1109 + aux1111 - aux1114)<=0)
9590 -9601 0
9591 -9602 0
9584 -9601 0
9584 9590 -9602 0
9584 9591 -9604 0
9585 -9602 0
9585 9590 -9604 0
9585 9591 -9606 0
c (0<=(aux1109 + aux1111 - aux1114))
-9591 9606 0
-9590 9604 0
-9585 9606 0
-9585 -9591 9604 0
-9585 -9590 9602 0
-9584 9604 0
-9584 -9591 9602 0
-9584 -9590 9601 0
c ((SATLiteral(8) + SATLiteral(128) - aux1115)<=0)
-128 -9608 0
-8 -9608 0
-8 -128 -9609 0
c (0<=(SATLiteral(8) + SATLiteral(128) - aux1115))
128 9609 0
8 9609 0
8 128 9608 0
c ((SATLiteral(23) + SATLiteral(113) - aux1116)<=0)
-113 -9611 0
-23 -9611 0
-23 -113 -9612 0
c (0<=(SATLiteral(23) + SATLiteral(113) - aux1116))
113 9612 0
23 9612 0
23 113 9611 0
c ((SATLiteral(53) + SATLiteral(98) - aux1117)<=0)
-98 -9614 0
-53 -9614 0
-53 -98 -9615 0
c (0<=(SATLiteral(53) + SATLiteral(98) - aux1117))
98 9615 0
53 9615 0
53 98 9614 0
c ((SATLiteral(68) + SATLiteral(83) - aux1118)<=0)
-83 -9617 0
-68 -9617 0
-68 -83 -9618 0
c (0<=(SATLiteral(68) + SATLiteral(83) - aux1118))
83 9618 0
68 9618 0
68 83 9617 0
c ((SATLiteral(38) + aux1118 - aux1119)<=0)
9617 -9620 0
9618 -9621 0
-38 -9620 0
-38 9617 -9621 0
-38 9618 -9623 0
c (0<=(SATLiteral(38) + aux1118 - aux1119))
-9618 9623 0
-9617 9621 0
38 9623 0
38 -9618 9621 0
38 -9617 9620 0
c ((aux1115 + aux1117 - aux1120)<=0)
9614 -9625 0
9615 -9626 0
9608 -9625 0
9608 9614 -9626 0
9608 9615 -9628 0
9609 -9626 0
9609 9614 -9628 0
9609 9615 -9630 0
c (0<=(aux1115 + aux1117 - aux1120))
-9615 9630 0
-9614 9628 0
-9609 9630 0
-9609 -9615 9628 0
-9609 -9614 9626 0
-9608 9628 0
-9608 -9615 9626 0
-9608 -9614 9625 0
c ((SATLiteral(10) + SATLiteral(130) - aux1121)<=0)
-130 -9632 0
-10 -9632 0
-10 -130 -9633 0
c (0<=(SATLiteral(10) + SATLiteral(130) - aux1121))
130 9633 0
10 9633 0
10 130 9632 0
c ((SATLiteral(25) + SATLiteral(115) - aux1122)<=0)
-115 -9635 0
-25 -9635 0
-25 -115 -9636 0
c (0<=(SATLiteral(25) + SATLiteral(115) - aux1122))
115 9636 0
25 9636 0
25 115 9635 0
c ((SATLiteral(55) + SATLiteral(100) - aux1123)<=0)
-100 -9638 0
-55 -9638 0
-55 -100 -9639 0
c (0<=(SATLiteral(55) + SATLiteral(100) - aux1123))
100 9639 0
55 9639 0
55 100 9638 0
c ((SATLiteral(70) + SATLiteral(85) - aux1124)<=0)
-85 -9641 0
-70 -9641 0
-70 -85 -9642 0
c (0<=(SATLiteral(70) + SATLiteral(85) - aux1124))
85 9642 0
70 9642 0
70 85 9641 0
c ((SATLiteral(40) + aux1124 - aux1125)<=0)
9641 -9644 0
9642 -9645 0
-40 -9644 0
-40 9641 -9645 0
-40 9642 -9647 0
c (0<=(SATLiteral(40) + aux1124 - aux1125))
-9642 9647 0
-9641 9645 0
40 9647 0
40 -9642 9645 0
40 -9641 9644 0
c ((aux1121 + aux1123 - aux1126)<=0)
9638 -9649 0
9639 -9650 0
9632 -9649 0
9632 9638 -9650 0
9632 9639 -9652 0
9633 -9650 0
9633 9638 -9652 0
9633 9639 -9654 0
c (0<=(aux1121 + aux1123 - aux1126))
-9639 9654 0
-9638 9652 0
-9633 9654 0
-9633 -9639 9652 0
-9633 -9638 9650 0
-9632 9652 0
-9632 -9639 9650 0
-9632 -9638 9649 0
c ((SATLiteral(12) + SATLiteral(132) - aux1127)<=0)
-132 -9656 0
-12 -9656 0
-12 -132 -9657 0
c (0<=(SATLiteral(12) + SATLiteral(132) - aux1127))
132 9657 0
12 9657 0
12 132 9656 0
c ((SATLiteral(27) + SATLiteral(117) - aux1128)<=0)
-117 -9659 0
-27 -9659 0
-27 -117 -9660 0
c (0<=(SATLiteral(27) + SATLiteral(117) - aux1128))
117 9660 0
27 9660 0
27 117 9659 0
c ((SATLiteral(57) + SATLiteral(102) - aux1129)<=0)
-102 -9662 0
-57 -9662 0
-57 -102 -9663 0
c (0<=(SATLiteral(57) + SATLiteral(102) - aux1129))
102 9663 0
57 9663 0
57 102 9662 0
c ((SATLiteral(72) + SATLiteral(87) - aux1130)<=0)
-87 -9665 0
-72 -9665 0
-72 -87 -9666 0
c (0<=(SATLiteral(72) + SATLiteral(87) - aux1130))
87 9666 0
72 9666 0
72 87 9665 0
c ((SATLiteral(42) + aux1130 - aux1131)<=0)
9665 -9668 0
9666 -9669 0
-42 -9668 0
-42 9665 -9669 0
-42 9666 -9671 0
c (0<=(SATLiteral(42) + aux1130 - aux1131))
-9666 9671 0
-9665 9669 0
42 9671 0
42 -9666 9669 0
42 -9665 9668 0
c ((aux1127 + aux1129 - aux1132)<=0)
9662 -9673 0
9663 -9674 0
9656 -9673 0
9656 9662 -9674 0
9656 9663 -9676 0
9657 -9674 0
9657 9662 -9676 0
9657 9663 -9678 0
c (0<=(aux1127 + aux1129 - aux1132))
-9663 9678 0
-9662 9676 0
-9657 9678 0
-9657 -9663 9676 0
-9657 -9662 9674 0
-9656 9676 0
-9656 -9663 9674 0
-9656 -9662 9673 0
c ((SATLiteral(14) + SATLiteral(134) - aux1133)<=0)
-134 -9680 0
-14 -9680 0
-14 -134 -9681 0
c (0<=(SATLiteral(14) + SATLiteral(134) - aux1133))
134 9681 0
14 9681 0
14 134 9680 0
c ((SATLiteral(29) + SATLiteral(119) - aux1134)<=0)
-119 -9683 0
-29 -9683 0
-29 -119 -9684 0
c (0<=(SATLiteral(29) + SATLiteral(119) - aux1134))
119 9684 0
29 9684 0
29 119 9683 0
c ((SATLiteral(59) + SATLiteral(104) - aux1135)<=0)
-104 -9686 0
-59 -9686 0
-59 -104 -9687 0
c (0<=(SATLiteral(59) + SATLiteral(104) - aux1135))
104 9687 0
59 9687 0
59 104 9686 0
c ((SATLiteral(74) + SATLiteral(89) - aux1136)<=0)
-89 -9689 0
-74 -9689 0
-74 -89 -9690 0
c (0<=(SATLiteral(74) + SATLiteral(89) - aux1136))
89 9690 0
74 9690 0
74 89 9689 0
c ((SATLiteral(44) + aux1136 - aux1137)<=0)
9689 -9692 0
9690 -9693 0
-44 -9692 0
-44 9689 -9693 0
-44 9690 -9695 0
c (0<=(SATLiteral(44) + aux1136 - aux1137))
-9690 9695 0
-9689 9693 0
44 9695 0
44 -9690 9693 0
44 -9689 9692 0
c ((aux1133 + aux1135 - aux1138)<=0)
9686 -9697 0
9687 -9698 0
9680 -9697 0
9680 9686 -9698 0
9680 9687 -9700 0
9681 -9698 0
9681 9686 -9700 0
9681 9687 -9702 0
c (0<=(aux1133 + aux1135 - aux1138))
-9687 9702 0
-9686 9700 0
-9681 9702 0
-9681 -9687 9700 0
-9681 -9686 9698 0
-9680 9700 0
-9680 -9687 9698 0
-9680 -9686 9697 0
c ((SATLiteral(16) + SATLiteral(136) - aux1139)<=0)
-136 -9704 0
-16 -9704 0
-16 -136 -9705 0
c (0<=(SATLiteral(16) + SATLiteral(136) - aux1139))
136 9705 0
16 9705 0
16 136 9704 0
c ((SATLiteral(31) + SATLiteral(121) - aux1140)<=0)
-121 -9707 0
-31 -9707 0
-31 -121 -9708 0
c (0<=(SATLiteral(31) + SATLiteral(121) - aux1140))
121 9708 0
31 9708 0
31 121 9707 0
c ((SATLiteral(61) + SATLiteral(106) - aux1141)<=0)
-106 -9710 0
-61 -9710 0
-61 -106 -9711 0
c (0<=(SATLiteral(61) + SATLiteral(106) - aux1141))
106 9711 0
61 9711 0
61 106 9710 0
c ((SATLiteral(76) + SATLiteral(91) - aux1142)<=0)
-91 -9713 0
-76 -9713 0
-76 -91 -9714 0
c (0<=(SATLiteral(76) + SATLiteral(91) - aux1142))
91 9714 0
76 9714 0
76 91 9713 0
c ((SATLiteral(46) + aux1142 - aux1143)<=0)
9713 -9716 0
9714 -9717 0
-46 -9716 0
-46 9713 -9717 0
-46 9714 -9719 0
c (0<=(SATLiteral(46) + aux1142 - aux1143))
-9714 9719 0
-9713 9717 0
46 9719 0
46 -9714 9717 0
46 -9713 9716 0
c ((aux1139 + aux1141 - aux1144)<=0)
9710 -9721 0
9711 -9722 0
9704 -9721 0
9704 9710 -9722 0
9704 9711 -9724 0
9705 -9722 0
9705 9710 -9724 0
9705 9711 -9726 0
c (0<=(aux1139 + aux1141 - aux1144))
-9711 9726 0
-9710 9724 0
-9705 9726 0
-9705 -9711 9724 0
-9705 -9710 9722 0
-9704 9724 0
-9704 -9711 9722 0
-9704 -9710 9721 0
c ((SATLiteral(-15) + SATLiteral(-135) - aux1145)<=0)
135 -9728 0
15 -9728 0
15 135 -9729 0
c (0<=(SATLiteral(-15) + SATLiteral(-135) - aux1145))
-135 9729 0
-15 9729 0
-15 -135 9728 0
c ((SATLiteral(-30) + SATLiteral(-120) - aux1146)<=0)
120 -9731 0
30 -9731 0
30 120 -9732 0
c (0<=(SATLiteral(-30) + SATLiteral(-120) - aux1146))
-120 9732 0
-30 9732 0
-30 -120 9731 0
c ((SATLiteral(-60) + SATLiteral(-105) - aux1147)<=0)
105 -9734 0
60 -9734 0
60 105 -9735 0
c (0<=(SATLiteral(-60) + SATLiteral(-105) - aux1147))
-105 9735 0
-60 9735 0
-60 -105 9734 0
c ((SATLiteral(-75) + SATLiteral(-90) - aux1148)<=0)
90 -9737 0
75 -9737 0
75 90 -9738 0
c (0<=(SATLiteral(-75) + SATLiteral(-90) - aux1148))
-90 9738 0
-75 9738 0
-75 -90 9737 0
c ((SATLiteral(-45) + aux1148 - aux1149)<=0)
9737 -9740 0
9738 -9741 0
45 -9740 0
45 9737 -9741 0
45 9738 -9743 0
c (0<=(SATLiteral(-45) + aux1148 - aux1149))
-9738 9743 0
-9737 9741 0
-45 9743 0
-45 -9738 9741 0
-45 -9737 9740 0
c ((aux1145 + aux1147 - aux1150)<=0)
9734 -9745 0
9735 -9746 0
9728 -9745 0
9728 9734 -9746 0
9728 9735 -9748 0
9729 -9746 0
9729 9734 -9748 0
9729 9735 -9750 0
c (0<=(aux1145 + aux1147 - aux1150))
-9735 9750 0
-9734 9748 0
-9729 9750 0
-9729 -9735 9748 0
-9729 -9734 9746 0
-9728 9748 0
-9728 -9735 9746 0
-9728 -9734 9745 0
c (( - aux1151 + SATLiteral(137) + SATLiteral(257))<=0)
-257 -9752 0
-137 -9752 0
-137 -257 -9753 0
c (0<=( - aux1151 + SATLiteral(137) + SATLiteral(257)))
257 9753 0
137 9753 0
137 257 9752 0
c (( - aux1152 + SATLiteral(152) + SATLiteral(242))<=0)
-242 -9755 0
-152 -9755 0
-152 -242 -9756 0
c (0<=( - aux1152 + SATLiteral(152) + SATLiteral(242)))
242 9756 0
152 9756 0
152 242 9755 0
c (( - aux1153 + SATLiteral(182) + SATLiteral(227))<=0)
-227 -9758 0
-182 -9758 0
-182 -227 -9759 0
c (0<=( - aux1153 + SATLiteral(182) + SATLiteral(227)))
227 9759 0
182 9759 0
182 227 9758 0
c (( - aux1154 + SATLiteral(197) + SATLiteral(212))<=0)
-212 -9761 0
-197 -9761 0
-197 -212 -9762 0
c (0<=( - aux1154 + SATLiteral(197) + SATLiteral(212)))
212 9762 0
197 9762 0
197 212 9761 0
c ((aux1154 - aux1155 + SATLiteral(167))<=0)
9761 -9764 0
9762 -9765 0
-167 -9764 0
-167 9761 -9765 0
-167 9762 -9767 0
c (0<=(aux1154 - aux1155 + SATLiteral(167)))
-9762 9767 0
-9761 9765 0
167 9767 0
167 -9762 9765 0
167 -9761 9764 0
c ((aux1151 + aux1153 - aux1156)<=0)
9758 -9769 0
9759 -9770 0
9752 -9769 0
9752 9758 -9770 0
9752 9759 -9772 0
9753 -9770 0
9753 9758 -9772 0
9753 9759 -9774 0
c (0<=(aux1151 + aux1153 - aux1156))
-9759 9774 0
-9758 9772 0
-9753 9774 0
-9753 -9759 9772 0
-9753 -9758 9770 0
-9752 9772 0
-9752 -9759 9770 0
-9752 -9758 9769 0
c (( - aux1157 + SATLiteral(139) + SATLiteral(259))<=0)
-259 -9776 0
-139 -9776 0
-139 -259 -9777 0
c (0<=( - aux1157 + SATLiteral(139) + SATLiteral(259)))
259 9777 0
139 9777 0
139 259 9776 0
c (( - aux1158 + SATLiteral(154) + SATLiteral(244))<=0)
-244 -9779 0
-154 -9779 0
-154 -244 -9780 0
c (0<=( - aux1158 + SATLiteral(154) + SATLiteral(244)))
244 9780 0
154 9780 0
154 244 9779 0
c (( - aux1159 + SATLiteral(184) + SATLiteral(229))<=0)
-229 -9782 0
-184 -9782 0
-184 -229 -9783 0
c (0<=( - aux1159 + SATLiteral(184) + SATLiteral(229)))
229 9783 0
184 9783 0
184 229 9782 0
c (( - aux1160 + SATLiteral(199) + SATLiteral(214))<=0)
-214 -9785 0
-199 -9785 0
-199 -214 -9786 0
c (0<=( - aux1160 + SATLiteral(199) + SATLiteral(214)))
214 9786 0
199 9786 0
199 214 9785 0
c ((aux1160 - aux1161 + SATLiteral(169))<=0)
9785 -9788 0
9786 -9789 0
-169 -9788 0
-169 9785 -9789 0
-169 9786 -9791 0
c (0<=(aux1160 - aux1161 + SATLiteral(169)))
-9786 9791 0
-9785 9789 0
169 9791 0
169 -9786 9789 0
169 -9785 9788 0
c ((aux1157 + aux1159 - aux1162)<=0)
9782 -9793 0
9783 -9794 0
9776 -9793 0
9776 9782 -9794 0
9776 9783 -9796 0
9777 -9794 0
9777 9782 -9796 0
9777 9783 -9798 0
c (0<=(aux1157 + aux1159 - aux1162))
-9783 9798 0
-9782 9796 0
-9777 9798 0
-9777 -9783 9796 0
-9777 -9782 9794 0
-9776 9796 0
-9776 -9783 9794 0
-9776 -9782 9793 0
c (( - aux1163 + SATLiteral(141) + SATLiteral(261))<=0)
-261 -9800 0
-141 -9800 0
-141 -261 -9801 0
c (0<=( - aux1163 + SATLiteral(141) + SATLiteral(261)))
261 9801 0
141 9801 0
141 261 9800 0
c (( - aux1164 + SATLiteral(156) + SATLiteral(246))<=0)
-246 -9803 0
-156 -9803 0
-156 -246 -9804 0
c (0<=( - aux1164 + SATLiteral(156) + SATLiteral(246)))
246 9804 0
156 9804 0
156 246 9803 0
c (( - aux1165 + SATLiteral(186) + SATLiteral(231))<=0)
-231 -9806 0
-186 -9806 0
-186 -231 -9807 0
c (0<=( - aux1165 + SATLiteral(186) + SATLiteral(231)))
231 9807 0
186 9807 0
186 231 9806 0
c (( - aux1166 + SATLiteral(201) + SATLiteral(216))<=0)
-216 -9809 0
-201 -9809 0
-201 -216 -9810 0
c (0<=( - aux1166 + SATLiteral(201) + SATLiteral(216)))
216 9810 0
201 9810 0
201 216 9809 0
c ((aux1166 - aux1167 + SATLiteral(171))<=0)
9809 -9812 0
9810 -9813 0
-171 -9812 0
-171 9809 -9813 0
-171 9810 -9815 0
c (0<=(aux1166 - aux1167 + SATLiteral(171)))
-9810 9815 0
-9809 9813 0
171 9815 0
171 -9810 9813 0
171 -9809 9812 0
c ((aux1163 + aux1165 - aux1168)<=0)
9806 -9817 0
9807 -9818 0
9800 -9817 0
9800 9806 -9818 0
9800 9807 -9820 0
9801 -9818 0
9801 9806 -9820 0
9801 9807 -9822 0
c (0<=(aux1163 + aux1165 - aux1168))
-9807 9822 0
-9806 9820 0
-9801 9822 0
-9801 -9807 9820 0
-9801 -9806 9818 0
-9800 9820 0
-9800 -9807 9818 0
-9800 -9806 9817 0
c (( - aux1169 + SATLiteral(143) + SATLiteral(263))<=0)
-263 -9824 0
-143 -9824 0
-143 -263 -9825 0
c (0<=( - aux1169 + SATLiteral(143) + SATLiteral(263)))
263 9825 0
143 9825 0
143 263 9824 0
c (( - aux1170 + SATLiteral(158) + SATLiteral(248))<=0)
-248 -9827 0
-158 -9827 0
-158 -248 -9828 0
c (0<=( - aux1170 + SATLiteral(158) + SATLiteral(248)))
248 9828 0
158 9828 0
158 248 9827 0
c (( - aux1171 + SATLiteral(188) + SATLiteral(233))<=0)
-233 -9830 0
-188 -9830 0
-188 -233 -9831 0
c (0<=( - aux1171 + SATLiteral(188) + SATLiteral(233)))
233 9831 0
188 9831 0
188 233 9830 0
c (( - aux1172 + SATLiteral(203) + SATLiteral(218))<=0)
-218 -9833 0
-203 -9833 0
-203 -218 -9834 0
c (0<=( - aux1172 + SATLiteral(203) + SATLiteral(218)))
218 9834 0
203 9834 0
203 218 9833 0
c ((aux1172 - aux1173 + SATLiteral(173))<=0)
9833 -9836 0
9834 -9837 0
-173 -9836 0
-173 9833 -9837 0
-173 9834 -9839 0
c (0<=(aux1172 - aux1173 + SATLiteral(173)))
-9834 9839 0
-9833 9837 0
173 9839 0
173 -9834 9837 0
173 -9833 9836 0
c ((aux1169 + aux1171 - aux1174)<=0)
9830 -9841 0
9831 -9842 0
9824 -9841 0
9824 9830 -9842 0
9824 9831 -9844 0
9825 -9842 0
9825 9830 -9844 0
9825 9831 -9846 0
c (0<=(aux1169 + aux1171 - aux1174))
-9831 9846 0
-9830 9844 0
-9825 9846 0
-9825 -9831 9844 0
-9825 -9830 9842 0
-9824 9844 0
-9824 -9831 9842 0
-9824 -9830 9841 0
c (( - aux1175 + SATLiteral(145) + SATLiteral(265))<=0)
-265 -9848 0
-145 -9848 0
-145 -265 -9849 0
c (0<=( - aux1175 + SATLiteral(145) + SATLiteral(265)))
265 9849 0
145 9849 0
145 265 9848 0
c (( - aux1176 + SATLiteral(160) + SATLiteral(250))<=0)
-250 -9851 0
-160 -9851 0
-160 -250 -9852 0
c (0<=( - aux1176 + SATLiteral(160) + SATLiteral(250)))
250 9852 0
160 9852 0
160 250 9851 0
c (( - aux1177 + SATLiteral(190) + SATLiteral(235))<=0)
-235 -9854 0
-190 -9854 0
-190 -235 -9855 0
c (0<=( - aux1177 + SATLiteral(190) + SATLiteral(235)))
235 9855 0
190 9855 0
190 235 9854 0
c (( - aux1178 + SATLiteral(205) + SATLiteral(220))<=0)
-220 -9857 0
-205 -9857 0
-205 -220 -9858 0
c (0<=( - aux1178 + SATLiteral(205) + SATLiteral(220)))
220 9858 0
205 9858 0
205 220 9857 0
c ((aux1178 - aux1179 + SATLiteral(175))<=0)
9857 -9860 0
9858 -9861 0
-175 -9860 0
-175 9857 -9861 0
-175 9858 -9863 0
c (0<=(aux1178 - aux1179 + SATLiteral(175)))
-9858 9863 0
-9857 9861 0
175 9863 0
175 -9858 9861 0
175 -9857 9860 0
c ((aux1175 + aux1177 - aux1180)<=0)
9854 -9865 0
9855 -9866 0
9848 -9865 0
9848 9854 -9866 0
9848 9855 -9868 0
9849 -9866 0
9849 9854 -9868 0
9849 9855 -9870 0
c (0<=(aux1175 + aux1177 - aux1180))
-9855 9870 0
-9854 9868 0
-9849 9870 0
-9849 -9855 9868 0
-9849 -9854 9866 0
-9848 9868 0
-9848 -9855 9866 0
-9848 -9854 9865 0
c (( - aux1181 + SATLiteral(147) + SATLiteral(267))<=0)
-267 -9872 0
-147 -9872 0
-147 -267 -9873 0
c (0<=( - aux1181 + SATLiteral(147) + SATLiteral(267)))
267 9873 0
147 9873 0
147 267 9872 0
c (( - aux1182 + SATLiteral(162) + SATLiteral(252))<=0)
-252 -9875 0
-162 -9875 0
-162 -252 -9876 0
c (0<=( - aux1182 + SATLiteral(162) + SATLiteral(252)))
252 9876 0
162 9876 0
162 252 9875 0
c (( - aux1183 + SATLiteral(192) + SATLiteral(237))<=0)
-237 -9878 0
-192 -9878 0
-192 -237 -9879 0
c (0<=( - aux1183 + SATLiteral(192) + SATLiteral(237)))
237 9879 0
192 9879 0
192 237 9878 0
c (( - aux1184 + SATLiteral(207) + SATLiteral(222))<=0)
-222 -9881 0
-207 -9881 0
-207 -222 -9882 0
c (0<=( - aux1184 + SATLiteral(207) + SATLiteral(222)))
222 9882 0
207 9882 0
207 222 9881 0
c ((aux1184 - aux1185 + SATLiteral(177))<=0)
9881 -9884 0
9882 -9885 0
-177 -9884 0
-177 9881 -9885 0
-177 9882 -9887 0
c (0<=(aux1184 - aux1185 + SATLiteral(177)))
-9882 9887 0
-9881 9885 0
177 9887 0
177 -9882 9885 0
177 -9881 9884 0
c ((aux1181 + aux1183 - aux1186)<=0)
9878 -9889 0
9879 -9890 0
9872 -9889 0
9872 9878 -9890 0
9872 9879 -9892 0
9873 -9890 0
9873 9878 -9892 0
9873 9879 -9894 0
c (0<=(aux1181 + aux1183 - aux1186))
-9879 9894 0
-9878 9892 0
-9873 9894 0
-9873 -9879 9892 0
-9873 -9878 9890 0
-9872 9892 0
-9872 -9879 9890 0
-9872 -9878 9889 0
c (( - aux1187 + SATLiteral(149) + SATLiteral(269))<=0)
-269 -9896 0
-149 -9896 0
-149 -269 -9897 0
c (0<=( - aux1187 + SATLiteral(149) + SATLiteral(269)))
269 9897 0
149 9897 0
149 269 9896 0
c (( - aux1188 + SATLiteral(164) + SATLiteral(254))<=0)
-254 -9899 0
-164 -9899 0
-164 -254 -9900 0
c (0<=( - aux1188 + SATLiteral(164) + SATLiteral(254)))
254 9900 0
164 9900 0
164 254 9899 0
c (( - aux1189 + SATLiteral(194) + SATLiteral(239))<=0)
-239 -9902 0
-194 -9902 0
-194 -239 -9903 0
c (0<=( - aux1189 + SATLiteral(194) + SATLiteral(239)))
239 9903 0
194 9903 0
194 239 9902 0
c (( - aux1190 + SATLiteral(209) + SATLiteral(224))<=0)
-224 -9905 0
-209 -9905 0
-209 -224 -9906 0
c (0<=( - aux1190 + SATLiteral(209) + SATLiteral(224)))
224 9906 0
209 9906 0
209 224 9905 0
c ((aux1190 - aux1191 + SATLiteral(179))<=0)
9905 -9908 0
9906 -9909 0
-179 -9908 0
-179 9905 -9909 0
-179 9906 -9911 0
c (0<=(aux1190 - aux1191 + SATLiteral(179)))
-9906 9911 0
-9905 9909 0
179 9911 0
179 -9906 9909 0
179 -9905 9908 0
c ((aux1187 + aux1189 - aux1192)<=0)
9902 -9913 0
9903 -9914 0
9896 -9913 0
9896 9902 -9914 0
9896 9903 -9916 0
9897 -9914 0
9897 9902 -9916 0
9897 9903 -9918 0
c (0<=(aux1187 + aux1189 - aux1192))
-9903 9918 0
-9902 9916 0
-9897 9918 0
-9897 -9903 9916 0
-9897 -9902 9914 0
-9896 9916 0
-9896 -9903 9914 0
-9896 -9902 9913 0
c (( - aux1193 + SATLiteral(151) + SATLiteral(271))<=0)
-271 -9920 0
-151 -9920 0
-151 -271 -9921 0
c (0<=( - aux1193 + SATLiteral(151) + SATLiteral(271)))
271 9921 0
151 9921 0
151 271 9920 0
c (( - aux1194 + SATLiteral(166) + SATLiteral(256))<=0)
-256 -9923 0
-166 -9923 0
-166 -256 -9924 0
c (0<=( - aux1194 + SATLiteral(166) + SATLiteral(256)))
256 9924 0
166 9924 0
166 256 9923 0
c (( - aux1195 + SATLiteral(196) + SATLiteral(241))<=0)
-241 -9926 0
-196 -9926 0
-196 -241 -9927 0
c (0<=( - aux1195 + SATLiteral(196) + SATLiteral(241)))
241 9927 0
196 9927 0
196 241 9926 0
c (( - aux1196 + SATLiteral(211) + SATLiteral(226))<=0)
-226 -9929 0
-211 -9929 0
-211 -226 -9930 0
c (0<=( - aux1196 + SATLiteral(211) + SATLiteral(226)))
226 9930 0
211 9930 0
211 226 9929 0
c ((aux1196 - aux1197 + SATLiteral(181))<=0)
9929 -9932 0
9930 -9933 0
-181 -9932 0
-181 9929 -9933 0
-181 9930 -9935 0
c (0<=(aux1196 - aux1197 + SATLiteral(181)))
-9930 9935 0
-9929 9933 0
181 9935 0
181 -9930 9933 0
181 -9929 9932 0
c ((aux1193 + aux1195 - aux1198)<=0)
9926 -9937 0
9927 -9938 0
9920 -9937 0
9920 9926 -9938 0
9920 9927 -9940 0
9921 -9938 0
9921 9926 -9940 0
9921 9927 -9942 0
c (0<=(aux1193 + aux1195 - aux1198))
-9927 9942 0
-9926 9940 0
-9921 9942 0
-9921 -9927 9940 0
-9921 -9926 9938 0
-9920 9940 0
-9920 -9927 9938 0
-9920 -9926 9937 0
c (( - aux1199 + SATLiteral(-150) + SATLiteral(-270))<=0)
270 -9944 0
150 -9944 0
150 270 -9945 0
c (0<=( - aux1199 + SATLiteral(-150) + SATLiteral(-270)))
-270 9945 0
-150 9945 0
-150 -270 9944 0
c (( - aux1200 + SATLiteral(-165) + SATLiteral(-255))<=0)
255 -9947 0
165 -9947 0
165 255 -9948 0
c (0<=( - aux1200 + SATLiteral(-165) + SATLiteral(-255)))
-255 9948 0
-165 9948 0
-165 -255 9947 0
c (( - aux1201 + SATLiteral(-195) + SATLiteral(-240))<=0)
240 -9950 0
195 -9950 0
195 240 -9951 0
c (0<=( - aux1201 + SATLiteral(-195) + SATLiteral(-240)))
-240 9951 0
-195 9951 0
-195 -240 9950 0
c (( - aux1202 + SATLiteral(-210) + SATLiteral(-225))<=0)
225 -9953 0
210 -9953 0
210 225 -9954 0
c (0<=( - aux1202 + SATLiteral(-210) + SATLiteral(-225)))
-225 9954 0
-210 9954 0
-210 -225 9953 0
c ((aux1202 - aux1203 + SATLiteral(-180))<=0)
9953 -9956 0
9954 -9957 0
180 -9956 0
180 9953 -9957 0
180 9954 -9959 0
c (0<=(aux1202 - aux1203 + SATLiteral(-180)))
-9954 9959 0
-9953 9957 0
-180 9959 0
-180 -9954 9957 0
-180 -9953 9956 0
c ((aux1199 + aux1201 - aux1204)<=0)
9950 -9961 0
9951 -9962 0
9944 -9961 0
9944 9950 -9962 0
9944 9951 -9964 0
9945 -9962 0
9945 9950 -9964 0
9945 9951 -9966 0
c (0<=(aux1199 + aux1201 - aux1204))
-9951 9966 0
-9950 9964 0
-9945 9966 0
-9945 -9951 9964 0
-9945 -9950 9962 0
-9944 9964 0
-9944 -9951 9962 0
-9944 -9950 9961 0
c ((SATLiteral(272) + SATLiteral(392) - aux1205)<=0)
-392 -9968 0
-272 -9968 0
-272 -392 -9969 0
c (0<=(SATLiteral(272) + SATLiteral(392) - aux1205))
392 9969 0
272 9969 0
272 392 9968 0
c ((SATLiteral(287) + SATLiteral(377) - aux1206)<=0)
-377 -9971 0
-287 -9971 0
-287 -377 -9972 0
c (0<=(SATLiteral(287) + SATLiteral(377) - aux1206))
377 9972 0
287 9972 0
287 377 9971 0
c ((SATLiteral(317) + SATLiteral(362) - aux1207)<=0)
-362 -9974 0
-317 -9974 0
-317 -362 -9975 0
c (0<=(SATLiteral(317) + SATLiteral(362) - aux1207))
362 9975 0
317 9975 0
317 362 9974 0
c ((SATLiteral(332) + SATLiteral(347) - aux1208)<=0)
-347 -9977 0
-332 -9977 0
-332 -347 -9978 0
c (0<=(SATLiteral(332) + SATLiteral(347) - aux1208))
347 9978 0
332 9978 0
332 347 9977 0
c ((SATLiteral(302) + aux1208 - aux1209)<=0)
9977 -9980 0
9978 -9981 0
-302 -9980 0
-302 9977 -9981 0
-302 9978 -9983 0
c (0<=(SATLiteral(302) + aux1208 - aux1209))
-9978 9983 0
-9977 9981 0
302 9983 0
302 -9978 9981 0
302 -9977 9980 0
c ((aux1205 + aux1207 - aux1210)<=0)
9974 -9985 0
9975 -9986 0
9968 -9985 0
9968 9974 -9986 0
9968 9975 -9988 0
9969 -9986 0
9969 9974 -9988 0
9969 9975 -9990 0
c (0<=(aux1205 + aux1207 - aux1210))
-9975 9990 0
-9974 9988 0
-9969 9990 0
-9969 -9975 9988 0
-9969 -9974 9986 0
-9968 9988 0
-9968 -9975 9986 0
-9968 -9974 9985 0
c ((SATLiteral(274) + SATLiteral(394) - aux1211)<=0)
-394 -9992 0
-274 -9992 0
-274 -394 -9993 0
c (0<=(SATLiteral(274) + SATLiteral(394) - aux1211))
394 9993 0
274 9993 0
274 394 9992 0
c ((SATLiteral(289) + SATLiteral(379) - aux1212)<=0)
-379 -9995 0
-289 -9995 0
-289 -379 -9996 0
c (0<=(SATLiteral(289) + SATLiteral(379) - aux1212))
379 9996 0
289 9996 0
289 379 9995 0
c ((SATLiteral(319) + SATLiteral(364) - aux1213)<=0)
-364 -9998 0
-319 -9998 0
-319 -364 -9999 0
c (0<=(SATLiteral(319) + SATLiteral(364) - aux1213))
364 9999 0
319 9999 0
319 364 9998 0
c ((SATLiteral(334) + SATLiteral(349) - aux1214)<=0)
-349 -10001 0
-334 -10001 0
-334 -349 -10002 0
c (0<=(SATLiteral(334) + SATLiteral(349) - aux1214))
349 10002 0
334 10002 0
334 349 10001 0
c ((SATLiteral(304) + aux1214 - aux1215)<=0)
10001 -10004 0
10002 -10005 0
-304 -10004 0
-304 10001 -10005 0
-304 10002 -10007 0
c (0<=(SATLiteral(304) + aux1214 - aux1215))
-10002 10007 0
-10001 10005 0
304 10007 0
304 -10002 10005 0
304 -10001 10004 0
c ((aux1211 + aux1213 - aux1216)<=0)
9998 -10009 0
9999 -10010 0
9992 -10009 0
9992 9998 -10010 0
9992 9999 -10012 0
9993 -10010 0
9993 9998 -10012 0
9993 9999 -10014 0
c (0<=(aux1211 + aux1213 - aux1216))
-9999 10014 0
-9998 10012 0
-9993 10014 0
-9993 -9999 10012 0
-9993 -9998 10010 0
-9992 10012 0
-9992 -9999 10010 0
-9992 -9998 10009 0
c ((SATLiteral(276) + SATLiteral(396) - aux1217)<=0)
-396 -10016 0
-276 -10016 0
-276 -396 -10017 0
c (0<=(SATLiteral(276) + SATLiteral(396) - aux1217))
396 10017 0
276 10017 0
276 396 10016 0
c ((SATLiteral(291) + SATLiteral(381) - aux1218)<=0)
-381 -10019 0
-291 -10019 0
-291 -381 -10020 0
c (0<=(SATLiteral(291) + SATLiteral(381) - aux1218))
381 10020 0
291 10020 0
291 381 10019 0
c ((SATLiteral(321) + SATLiteral(366) - aux1219)<=0)
-366 -10022 0
-321 -10022 0
-321 -366 -10023 0
c (0<=(SATLiteral(321) + SATLiteral(366) - aux1219))
366 10023 0
321 10023 0
321 366 10022 0
c ((SATLiteral(336) + SATLiteral(351) - aux1220)<=0)
-351 -10025 0
-336 -10025 0
-336 -351 -10026 0
c (0<=(SATLiteral(336) + SATLiteral(351) - aux1220))
351 10026 0
336 10026 0
336 351 10025 0
c ((SATLiteral(306) + aux1220 - aux1221)<=0)
10025 -10028 0
10026 -10029 0
-306 -10028 0
-306 10025 -10029 0
-306 10026 -10031 0
c (0<=(SATLiteral(306) + aux1220 - aux1221))
-10026 10031 0
-10025 10029 0
306 10031 0
306 -10026 10029 0
306 -10025 10028 0
c ((aux1217 + aux1219 - aux1222)<=0)
10022 -10033 0
10023 -10034 0
10016 -10033 0
10016 10022 -10034 0
10016 10023 -10036 0
10017 -10034 0
10017 10022 -10036 0
10017 10023 -10038 0
c (0<=(aux1217 + aux1219 - aux1222))
-10023 10038 0
-10022 10036 0
-10017 10038 0
-10017 -10023 10036 0
-10017 -10022 10034 0
-10016 10036 0
-10016 -10023 10034 0
-10016 -10022 10033 0
c ((SATLiteral(278) + SATLiteral(398) - aux1223)<=0)
-398 -10040 0
-278 -10040 0
-278 -398 -10041 0
c (0<=(SATLiteral(278) + SATLiteral(398) - aux1223))
398 10041 0
278 10041 0
278 398 10040 0
c ((SATLiteral(293) + SATLiteral(383) - aux1224)<=0)
-383 -10043 0
-293 -10043 0
-293 -383 -10044 0
c (0<=(SATLiteral(293) + SATLiteral(383) - aux1224))
383 10044 0
293 10044 0
293 383 10043 0
c ((SATLiteral(323) + SATLiteral(368) - aux1225)<=0)
-368 -10046 0
-323 -10046 0
-323 -368 -10047 0
c (0<=(SATLiteral(323) + SATLiteral(368) - aux1225))
368 10047 0
323 10047 0
323 368 10046 0
c ((SATLiteral(338) + SATLiteral(353) - aux1226)<=0)
-353 -10049 0
-338 -10049 0
-338 -353 -10050 0
c (0<=(SATLiteral(338) + SATLiteral(353) - aux1226))
353 10050 0
338 10050 0
338 353 10049 0
c ((SATLiteral(308) + aux1226 - aux1227)<=0)
10049 -10052 0
10050 -10053 0
-308 -10052 0
-308 10049 -10053 0
-308 10050 -10055 0
c (0<=(SATLiteral(308) + aux1226 - aux1227))
-10050 10055 0
-10049 10053 0
308 10055 0
308 -10050 10053 0
308 -10049 10052 0
c ((aux1223 + aux1225 - aux1228)<=0)
10046 -10057 0
10047 -10058 0
10040 -10057 0
10040 10046 -10058 0
10040 10047 -10060 0
10041 -10058 0
10041 10046 -10060 0
10041 10047 -10062 0
c (0<=(aux1223 + aux1225 - aux1228))
-10047 10062 0
-10046 10060 0
-10041 10062 0
-10041 -10047 10060 0
-10041 -10046 10058 0
-10040 10060 0
-10040 -10047 10058 0
-10040 -10046 10057 0
c ((SATLiteral(280) + SATLiteral(400) - aux1229)<=0)
-400 -10064 0
-280 -10064 0
-280 -400 -10065 0
c (0<=(SATLiteral(280) + SATLiteral(400) - aux1229))
400 10065 0
280 10065 0
280 400 10064 0
c ((SATLiteral(295) + SATLiteral(385) - aux1230)<=0)
-385 -10067 0
-295 -10067 0
-295 -385 -10068 0
c (0<=(SATLiteral(295) + SATLiteral(385) - aux1230))
385 10068 0
295 10068 0
295 385 10067 0
c ((SATLiteral(325) + SATLiteral(370) - aux1231)<=0)
-370 -10070 0
-325 -10070 0
-325 -370 -10071 0
c (0<=(SATLiteral(325) + SATLiteral(370) - aux1231))
370 10071 0
325 10071 0
325 370 10070 0
c ((SATLiteral(340) + SATLiteral(355) - aux1232)<=0)
-355 -10073 0
-340 -10073 0
-340 -355 -10074 0
c (0<=(SATLiteral(340) + SATLiteral(355) - aux1232))
355 10074 0
340 10074 0
340 355 10073 0
c ((SATLiteral(310) + aux1232 - aux1233)<=0)
10073 -10076 0
10074 -10077 0
-310 -10076 0
-310 10073 -10077 0
-310 10074 -10079 0
c (0<=(SATLiteral(310) + aux1232 - aux1233))
-10074 10079 0
-10073 10077 0
310 10079 0
310 -10074 10077 0
310 -10073 10076 0
c ((aux1229 + aux1231 - aux1234)<=0)
10070 -10081 0
10071 -10082 0
10064 -10081 0
10064 10070 -10082 0
10064 10071 -10084 0
10065 -10082 0
10065 10070 -10084 0
10065 10071 -10086 0
c (0<=(aux1229 + aux1231 - aux1234))
-10071 10086 0
-10070 10084 0
-10065 10086 0
-10065 -10071 10084 0
-10065 -10070 10082 0
-10064 10084 0
-10064 -10071 10082 0
-10064 -10070 10081 0
c ((SATLiteral(282) + SATLiteral(402) - aux1235)<=0)
-402 -10088 0
-282 -10088 0
-282 -402 -10089 0
c (0<=(SATLiteral(282) + SATLiteral(402) - aux1235))
402 10089 0
282 10089 0
282 402 10088 0
c ((SATLiteral(297) + SATLiteral(387) - aux1236)<=0)
-387 -10091 0
-297 -10091 0
-297 -387 -10092 0
c (0<=(SATLiteral(297) + SATLiteral(387) - aux1236))
387 10092 0
297 10092 0
297 387 10091 0
c ((SATLiteral(327) + SATLiteral(372) - aux1237)<=0)
-372 -10094 0
-327 -10094 0
-327 -372 -10095 0
c (0<=(SATLiteral(327) + SATLiteral(372) - aux1237))
372 10095 0
327 10095 0
327 372 10094 0
c ((SATLiteral(342) + SATLiteral(357) - aux1238)<=0)
-357 -10097 0
-342 -10097 0
-342 -357 -10098 0
c (0<=(SATLiteral(342) + SATLiteral(357) - aux1238))
357 10098 0
342 10098 0
342 357 10097 0
c ((SATLiteral(312) + aux1238 - aux1239)<=0)
10097 -10100 0
10098 -10101 0
-312 -10100 0
-312 10097 -10101 0
-312 10098 -10103 0
c (0<=(SATLiteral(312) + aux1238 - aux1239))
-10098 10103 0
-10097 10101 0
312 10103 0
312 -10098 10101 0
312 -10097 10100 0
c ((aux1235 + aux1237 - aux1240)<=0)
10094 -10105 0
10095 -10106 0
10088 -10105 0
10088 10094 -10106 0
10088 10095 -10108 0
10089 -10106 0
10089 10094 -10108 0
10089 10095 -10110 0
c (0<=(aux1235 + aux1237 - aux1240))
-10095 10110 0
-10094 10108 0
-10089 10110 0
-10089 -10095 10108 0
-10089 -10094 10106 0
-10088 10108 0
-10088 -10095 10106 0
-10088 -10094 10105 0
c ((SATLiteral(284) + SATLiteral(404) - aux1241)<=0)
-404 -10112 0
-284 -10112 0
-284 -404 -10113 0
c (0<=(SATLiteral(284) + SATLiteral(404) - aux1241))
404 10113 0
284 10113 0
284 404 10112 0
c ((SATLiteral(299) + SATLiteral(389) - aux1242)<=0)
-389 -10115 0
-299 -10115 0
-299 -389 -10116 0
c (0<=(SATLiteral(299) + SATLiteral(389) - aux1242))
389 10116 0
299 10116 0
299 389 10115 0
c ((SATLiteral(329) + SATLiteral(374) - aux1243)<=0)
-374 -10118 0
-329 -10118 0
-329 -374 -10119 0
c (0<=(SATLiteral(329) + SATLiteral(374) - aux1243))
374 10119 0
329 10119 0
329 374 10118 0
c ((SATLiteral(344) + SATLiteral(359) - aux1244)<=0)
-359 -10121 0
-344 -10121 0
-344 -359 -10122 0
c (0<=(SATLiteral(344) + SATLiteral(359) - aux1244))
359 10122 0
344 10122 0
344 359 10121 0
c ((SATLiteral(314) + aux1244 - aux1245)<=0)
10121 -10124 0
10122 -10125 0
-314 -10124 0
-314 10121 -10125 0
-314 10122 -10127 0
c (0<=(SATLiteral(314) + aux1244 - aux1245))
-10122 10127 0
-10121 10125 0
314 10127 0
314 -10122 10125 0
314 -10121 10124 0
c ((aux1241 + aux1243 - aux1246)<=0)
10118 -10129 0
10119 -10130 0
10112 -10129 0
10112 10118 -10130 0
10112 10119 -10132 0
10113 -10130 0
10113 10118 -10132 0
10113 10119 -10134 0
c (0<=(aux1241 + aux1243 - aux1246))
-10119 10134 0
-10118 10132 0
-10113 10134 0
-10113 -10119 10132 0
-10113 -10118 10130 0
-10112 10132 0
-10112 -10119 10130 0
-10112 -10118 10129 0
c ((SATLiteral(286) + SATLiteral(406) - aux1247)<=0)
-406 -10136 0
-286 -10136 0
-286 -406 -10137 0
c (0<=(SATLiteral(286) + SATLiteral(406) - aux1247))
406 10137 0
286 10137 0
286 406 10136 0
c ((SATLiteral(301) + SATLiteral(391) - aux1248)<=0)
-391 -10139 0
-301 -10139 0
-301 -391 -10140 0
c (0<=(SATLiteral(301) + SATLiteral(391) - aux1248))
391 10140 0
301 10140 0
301 391 10139 0
c ((SATLiteral(331) + SATLiteral(376) - aux1249)<=0)
-376 -10142 0
-331 -10142 0
-331 -376 -10143 0
c (0<=(SATLiteral(331) + SATLiteral(376) - aux1249))
376 10143 0
331 10143 0
331 376 10142 0
c ((SATLiteral(346) + SATLiteral(361) - aux1250)<=0)
-361 -10145 0
-346 -10145 0
-346 -361 -10146 0
c (0<=(SATLiteral(346) + SATLiteral(361) - aux1250))
361 10146 0
346 10146 0
346 361 10145 0
c ((SATLiteral(316) + aux1250 - aux1251)<=0)
10145 -10148 0
10146 -10149 0
-316 -10148 0
-316 10145 -10149 0
-316 10146 -10151 0
c (0<=(SATLiteral(316) + aux1250 - aux1251))
-10146 10151 0
-10145 10149 0
316 10151 0
316 -10146 10149 0
316 -10145 10148 0
c ((aux1247 + aux1249 - aux1252)<=0)
10142 -10153 0
10143 -10154 0
10136 -10153 0
10136 10142 -10154 0
10136 10143 -10156 0
10137 -10154 0
10137 10142 -10156 0
10137 10143 -10158 0
c (0<=(aux1247 + aux1249 - aux1252))
-10143 10158 0
-10142 10156 0
-10137 10158 0
-10137 -10143 10156 0
-10137 -10142 10154 0
-10136 10156 0
-10136 -10143 10154 0
-10136 -10142 10153 0
c ((SATLiteral(-285) + SATLiteral(-405) - aux1253)<=0)
405 -10160 0
285 -10160 0
285 405 -10161 0
c (0<=(SATLiteral(-285) + SATLiteral(-405) - aux1253))
-405 10161 0
-285 10161 0
-285 -405 10160 0
c ((SATLiteral(-300) + SATLiteral(-390) - aux1254)<=0)
390 -10163 0
300 -10163 0
300 390 -10164 0
c (0<=(SATLiteral(-300) + SATLiteral(-390) - aux1254))
-390 10164 0
-300 10164 0
-300 -390 10163 0
c ((SATLiteral(-330) + SATLiteral(-375) - aux1255)<=0)
375 -10166 0
330 -10166 0
330 375 -10167 0
c (0<=(SATLiteral(-330) + SATLiteral(-375) - aux1255))
-375 10167 0
-330 10167 0
-330 -375 10166 0
c ((SATLiteral(-345) + SATLiteral(-360) - aux1256)<=0)
360 -10169 0
345 -10169 0
345 360 -10170 0
c (0<=(SATLiteral(-345) + SATLiteral(-360) - aux1256))
-360 10170 0
-345 10170 0
-345 -360 10169 0
c ((SATLiteral(-315) + aux1256 - aux1257)<=0)
10169 -10172 0
10170 -10173 0
315 -10172 0
315 10169 -10173 0
315 10170 -10175 0
c (0<=(SATLiteral(-315) + aux1256 - aux1257))
-10170 10175 0
-10169 10173 0
-315 10175 0
-315 -10170 10173 0
-315 -10169 10172 0
c ((aux1253 + aux1255 - aux1258)<=0)
10166 -10177 0
10167 -10178 0
10160 -10177 0
10160 10166 -10178 0
10160 10167 -10180 0
10161 -10178 0
10161 10166 -10180 0
10161 10167 -10182 0
c (0<=(aux1253 + aux1255 - aux1258))
-10167 10182 0
-10166 10180 0
-10161 10182 0
-10161 -10167 10180 0
-10161 -10166 10178 0
-10160 10180 0
-10160 -10167 10178 0
-10160 -10166 10177 0
c (( - aux1259 + SATLiteral(407) + SATLiteral(527))<=0)
-527 -10184 0
-407 -10184 0
-407 -527 -10185 0
c (0<=( - aux1259 + SATLiteral(407) + SATLiteral(527)))
527 10185 0
407 10185 0
407 527 10184 0
c (( - aux1260 + SATLiteral(422) + SATLiteral(512))<=0)
-512 -10187 0
-422 -10187 0
-422 -512 -10188 0
c (0<=( - aux1260 + SATLiteral(422) + SATLiteral(512)))
512 10188 0
422 10188 0
422 512 10187 0
c (( - aux1261 + SATLiteral(452) + SATLiteral(497))<=0)
-497 -10190 0
-452 -10190 0
-452 -497 -10191 0
c (0<=( - aux1261 + SATLiteral(452) + SATLiteral(497)))
497 10191 0
452 10191 0
452 497 10190 0
c (( - aux1262 + SATLiteral(467) + SATLiteral(482))<=0)
-482 -10193 0
-467 -10193 0
-467 -482 -10194 0
c (0<=( - aux1262 + SATLiteral(467) + SATLiteral(482)))
482 10194 0
467 10194 0
467 482 10193 0
c ((aux1262 - aux1263 + SATLiteral(437))<=0)
10193 -10196 0
10194 -10197 0
-437 -10196 0
-437 10193 -10197 0
-437 10194 -10199 0
c (0<=(aux1262 - aux1263 + SATLiteral(437)))
-10194 10199 0
-10193 10197 0
437 10199 0
437 -10194 10197 0
437 -10193 10196 0
c ((aux1259 + aux1261 - aux1264)<=0)
10190 -10201 0
10191 -10202 0
10184 -10201 0
10184 10190 -10202 0
10184 10191 -10204 0
10185 -10202 0
10185 10190 -10204 0
10185 10191 -10206 0
c (0<=(aux1259 + aux1261 - aux1264))
-10191 10206 0
-10190 10204 0
-10185 10206 0
-10185 -10191 10204 0
-10185 -10190 10202 0
-10184 10204 0
-10184 -10191 10202 0
-10184 -10190 10201 0
c (( - aux1265 + SATLiteral(409) + SATLiteral(529))<=0)
-529 -10208 0
-409 -10208 0
-409 -529 -10209 0
c (0<=( - aux1265 + SATLiteral(409) + SATLiteral(529)))
529 10209 0
409 10209 0
409 529 10208 0
c (( - aux1266 + SATLiteral(424) + SATLiteral(514))<=0)
-514 -10211 0
-424 -10211 0
-424 -514 -10212 0
c (0<=( - aux1266 + SATLiteral(424) + SATLiteral(514)))
514 10212 0
424 10212 0
424 514 10211 0
c (( - aux1267 + SATLiteral(454) + SATLiteral(499))<=0)
-499 -10214 0
-454 -10214 0
-454 -499 -10215 0
c (0<=( - aux1267 + SATLiteral(454) + SATLiteral(499)))
499 10215 0
454 10215 0
454 499 10214 0
c (( - aux1268 + SATLiteral(469) + SATLiteral(484))<=0)
-484 -10217 0
-469 -10217 0
-469 -484 -10218 0
c (0<=( - aux1268 + SATLiteral(469) + SATLiteral(484)))
484 10218 0
469 10218 0
469 484 10217 0
c ((aux1268 - aux1269 + SATLiteral(439))<=0)
10217 -10220 0
10218 -10221 0
-439 -10220 0
-439 10217 -10221 0
-439 10218 -10223 0
c (0<=(aux1268 - aux1269 + SATLiteral(439)))
-10218 10223 0
-10217 10221 0
439 10223 0
439 -10218 10221 0
439 -10217 10220 0
c ((aux1265 + aux1267 - aux1270)<=0)
10214 -10225 0
10215 -10226 0
10208 -10225 0
10208 10214 -10226 0
10208 10215 -10228 0
10209 -10226 0
10209 10214 -10228 0
10209 10215 -10230 0
c (0<=(aux1265 + aux1267 - aux1270))
-10215 10230 0
-10214 10228 0
-10209 10230 0
-10209 -10215 10228 0
-10209 -10214 10226 0
-10208 10228 0
-10208 -10215 10226 0
-10208 -10214 10225 0
c (( - aux1271 + SATLiteral(411) + SATLiteral(531))<=0)
-531 -10232 0
-411 -10232 0
-411 -531 -10233 0
c (0<=( - aux1271 + SATLiteral(411) + SATLiteral(531)))
531 10233 0
411 10233 0
411 531 10232 0
c (( - aux1272 + SATLiteral(426) + SATLiteral(516))<=0)
-516 -10235 0
-426 -10235 0
-426 -516 -10236 0
c (0<=( - aux1272 + SATLiteral(426) + SATLiteral(516)))
516 10236 0
426 10236 0
426 516 10235 0
c (( - aux1273 + SATLiteral(456) + SATLiteral(501))<=0)
-501 -10238 0
-456 -10238 0
-456 -501 -10239 0
c (0<=( - aux1273 + SATLiteral(456) + SATLiteral(501)))
501 10239 0
456 10239 0
456 501 10238 0
c (( - aux1274 + SATLiteral(471) + SATLiteral(486))<=0)
-486 -10241 0
-471 -10241 0
-471 -486 -10242 0
c (0<=( - aux1274 + SATLiteral(471) + SATLiteral(486)))
486 10242 0
471 10242 0
471 486 10241 0
c ((aux1274 - aux1275 + SATLiteral(441))<=0)
10241 -10244 0
10242 -10245 0
-441 -10244 0
-441 10241 -10245 0
-441 10242 -10247 0
c (0<=(aux1274 - aux1275 + SATLiteral(441)))
-10242 10247 0
-10241 10245 0
441 10247 0
441 -10242 10245 0
441 -10241 10244 0
c ((aux1271 + aux1273 - aux1276)<=0)
10238 -10249 0
10239 -10250 0
10232 -10249 0
10232 10238 -10250 0
10232 10239 -10252 0
10233 -10250 0
10233 10238 -10252 0
10233 10239 -10254 0
c (0<=(aux1271 + aux1273 - aux1276))
-10239 10254 0
-10238 10252 0
-10233 10254 0
-10233 -10239 10252 0
-10233 -10238 10250 0
-10232 10252 0
-10232 -10239 10250 0
-10232 -10238 10249 0
c (( - aux1277 + SATLiteral(413) + SATLiteral(533))<=0)
-533 -10256 0
-413 -10256 0
-413 -533 -10257 0
c (0<=( - aux1277 + SATLiteral(413) + SATLiteral(533)))
533 10257 0
413 10257 0
413 533 10256 0
c (( - aux1278 + SATLiteral(428) + SATLiteral(518))<=0)
-518 -10259 0
-428 -10259 0
-428 -518 -10260 0
c (0<=( - aux1278 + SATLiteral(428) + SATLiteral(518)))
518 10260 0
428 10260 0
428 518 10259 0
c (( - aux1279 + SATLiteral(458) + SATLiteral(503))<=0)
-503 -10262 0
-458 -10262 0
-458 -503 -10263 0
c (0<=( - aux1279 + SATLiteral(458) + SATLiteral(503)))
503 10263 0
458 10263 0
458 503 10262 0
c (( - aux1280 + SATLiteral(473) + SATLiteral(488))<=0)
-488 -10265 0
-473 -10265 0
-473 -488 -10266 0
c (0<=( - aux1280 + SATLiteral(473) + SATLiteral(488)))
488 10266 0
473 10266 0
473 488 10265 0
c ((aux1280 - aux1281 + SATLiteral(443))<=0)
10265 -10268 0
10266 -10269 0
-443 -10268 0
-443 10265 -10269 0
-443 10266 -10271 0
c (0<=(aux1280 - aux1281 + SATLiteral(443)))
-10266 10271 0
-10265 10269 0
443 10271 0
443 -10266 10269 0
443 -10265 10268 0
c ((aux1277 + aux1279 - aux1282)<=0)
10262 -10273 0
10263 -10274 0
10256 -10273 0
10256 10262 -10274 0
10256 10263 -10276 0
10257 -10274 0
10257 10262 -10276 0
10257 10263 -10278 0
c (0<=(aux1277 + aux1279 - aux1282))
-10263 10278 0
-10262 10276 0
-10257 10278 0
-10257 -10263 10276 0
-10257 -10262 10274 0
-10256 10276 0
-10256 -10263 10274 0
-10256 -10262 10273 0
c (( - aux1283 + SATLiteral(415) + SATLiteral(535))<=0)
-535 -10280 0
-415 -10280 0
-415 -535 -10281 0
c (0<=( - aux1283 + SATLiteral(415) + SATLiteral(535)))
535 10281 0
415 10281 0
415 535 10280 0
c (( - aux1284 + SATLiteral(430) + SATLiteral(520))<=0)
-520 -10283 0
-430 -10283 0
-430 -520 -10284 0
c (0<=( - aux1284 + SATLiteral(430) + SATLiteral(520)))
520 10284 0
430 10284 0
430 520 10283 0
c (( - aux1285 + SATLiteral(460) + SATLiteral(505))<=0)
-505 -10286 0
-460 -10286 0
-460 -505 -10287 0
c (0<=( - aux1285 + SATLiteral(460) + SATLiteral(505)))
505 10287 0
460 10287 0
460 505 10286 0
c (( - aux1286 + SATLiteral(475) + SATLiteral(490))<=0)
-490 -10289 0
-475 -10289 0
-475 -490 -10290 0
c (0<=( - aux1286 + SATLiteral(475) + SATLiteral(490)))
490 10290 0
475 10290 0
475 490 10289 0
c ((aux1286 - aux1287 + SATLiteral(445))<=0)
10289 -10292 0
10290 -10293 0
-445 -10292 0
-445 10289 -10293 0
-445 10290 -10295 0
c (0<=(aux1286 - aux1287 + SATLiteral(445)))
-10290 10295 0
-10289 10293 0
445 10295 0
445 -10290 10293 0
445 -10289 10292 0
c ((aux1283 + aux1285 - aux1288)<=0)
10286 -10297 0
10287 -10298 0
10280 -10297 0
10280 10286 -10298 0
10280 10287 -10300 0
10281 -10298 0
10281 10286 -10300 0
10281 10287 -10302 0
c (0<=(aux1283 + aux1285 - aux1288))
-10287 10302 0
-10286 10300 0
-10281 10302 0
-10281 -10287 10300 0
-10281 -10286 10298 0
-10280 10300 0
-10280 -10287 10298 0
-10280 -10286 10297 0
c (( - aux1289 + SATLiteral(417) + SATLiteral(537))<=0)
-537 -10304 0
-417 -10304 0
-417 -537 -10305 0
c (0<=( - aux1289 + SATLiteral(417) + SATLiteral(537)))
537 10305 0
417 10305 0
417 537 10304 0
c (( - aux1290 + SATLiteral(432) + SATLiteral(522))<=0)
-522 -10307 0
-432 -10307 0
-432 -522 -10308 0
c (0<=( - aux1290 + SATLiteral(432) + SATLiteral(522)))
522 10308 0
432 10308 0
432 522 10307 0
c (( - aux1291 + SATLiteral(462) + SATLiteral(507))<=0)
-507 -10310 0
-462 -10310 0
-462 -507 -10311 0
c (0<=( - aux1291 + SATLiteral(462) + SATLiteral(507)))
507 10311 0
462 10311 0
462 507 10310 0
c (( - aux1292 + SATLiteral(477) + SATLiteral(492))<=0)
-492 -10313 0
-477 -10313 0
-477 -492 -10314 0
c (0<=( - aux1292 + SATLiteral(477) + SATLiteral(492)))
492 10314 0
477 10314 0
477 492 10313 0
c ((aux1292 - aux1293 + SATLiteral(447))<=0)
10313 -10316 0
10314 -10317 0
-447 -10316 0
-447 10313 -10317 0
-447 10314 -10319 0
c (0<=(aux1292 - aux1293 + SATLiteral(447)))
-10314 10319 0
-10313 10317 0
447 10319 0
447 -10314 10317 0
447 -10313 10316 0
c ((aux1289 + aux1291 - aux1294)<=0)
10310 -10321 0
10311 -10322 0
10304 -10321 0
10304 10310 -10322 0
10304 10311 -10324 0
10305 -10322 0
10305 10310 -10324 0
10305 10311 -10326 0
c (0<=(aux1289 + aux1291 - aux1294))
-10311 10326 0
-10310 10324 0
-10305 10326 0
-10305 -10311 10324 0
-10305 -10310 10322 0
-10304 10324 0
-10304 -10311 10322 0
-10304 -10310 10321 0
c (( - aux1295 + SATLiteral(419) + SATLiteral(539))<=0)
-539 -10328 0
-419 -10328 0
-419 -539 -10329 0
c (0<=( - aux1295 + SATLiteral(419) + SATLiteral(539)))
539 10329 0
419 10329 0
419 539 10328 0
c (( - aux1296 + SATLiteral(434) + SATLiteral(524))<=0)
-524 -10331 0
-434 -10331 0
-434 -524 -10332 0
c (0<=( - aux1296 + SATLiteral(434) + SATLiteral(524)))
524 10332 0
434 10332 0
434 524 10331 0
c (( - aux1297 + SATLiteral(464) + SATLiteral(509))<=0)
-509 -10334 0
-464 -10334 0
-464 -509 -10335 0
c (0<=( - aux1297 + SATLiteral(464) + SATLiteral(509)))
509 10335 0
464 10335 0
464 509 10334 0
c (( - aux1298 + SATLiteral(479) + SATLiteral(494))<=0)
-494 -10337 0
-479 -10337 0
-479 -494 -10338 0
c (0<=( - aux1298 + SATLiteral(479) + SATLiteral(494)))
494 10338 0
479 10338 0
479 494 10337 0
c ((aux1298 - aux1299 + SATLiteral(449))<=0)
10337 -10340 0
10338 -10341 0
-449 -10340 0
-449 10337 -10341 0
-449 10338 -10343 0
c (0<=(aux1298 - aux1299 + SATLiteral(449)))
-10338 10343 0
-10337 10341 0
449 10343 0
449 -10338 10341 0
449 -10337 10340 0
c ((aux1295 + aux1297 - aux1300)<=0)
10334 -10345 0
10335 -10346 0
10328 -10345 0
10328 10334 -10346 0
10328 10335 -10348 0
10329 -10346 0
10329 10334 -10348 0
10329 10335 -10350 0
c (0<=(aux1295 + aux1297 - aux1300))
-10335 10350 0
-10334 10348 0
-10329 10350 0
-10329 -10335 10348 0
-10329 -10334 10346 0
-10328 10348 0
-10328 -10335 10346 0
-10328 -10334 10345 0
c (( - aux1301 + SATLiteral(421) + SATLiteral(541))<=0)
-541 -10352 0
-421 -10352 0
-421 -541 -10353 0
c (0<=( - aux1301 + SATLiteral(421) + SATLiteral(541)))
541 10353 0
421 10353 0
421 541 10352 0
c (( - aux1302 + SATLiteral(436) + SATLiteral(526))<=0)
-526 -10355 0
-436 -10355 0
-436 -526 -10356 0
c (0<=( - aux1302 + SATLiteral(436) + SATLiteral(526)))
526 10356 0
436 10356 0
436 526 10355 0
c (( - aux1303 + SATLiteral(466) + SATLiteral(511))<=0)
-511 -10358 0
-466 -10358 0
-466 -511 -10359 0
c (0<=( - aux1303 + SATLiteral(466) + SATLiteral(511)))
511 10359 0
466 10359 0
466 511 10358 0
c (( - aux1304 + SATLiteral(481) + SATLiteral(496))<=0)
-496 -10361 0
-481 -10361 0
-481 -496 -10362 0
c (0<=( - aux1304 + SATLiteral(481) + SATLiteral(496)))
496 10362 0
481 10362 0
481 496 10361 0
c ((aux1304 - aux1305 + SATLiteral(451))<=0)
10361 -10364 0
10362 -10365 0
-451 -10364 0
-451 10361 -10365 0
-451 10362 -10367 0
c (0<=(aux1304 - aux1305 + SATLiteral(451)))
-10362 10367 0
-10361 10365 0
451 10367 0
451 -10362 10365 0
451 -10361 10364 0
c ((aux1301 + aux1303 - aux1306)<=0)
10358 -10369 0
10359 -10370 0
10352 -10369 0
10352 10358 -10370 0
10352 10359 -10372 0
10353 -10370 0
10353 10358 -10372 0
10353 10359 -10374 0
c (0<=(aux1301 + aux1303 - aux1306))
-10359 10374 0
-10358 10372 0
-10353 10374 0
-10353 -10359 10372 0
-10353 -10358 10370 0
-10352 10372 0
-10352 -10359 10370 0
-10352 -10358 10369 0
c (( - aux1307 + SATLiteral(-420) + SATLiteral(-540))<=0)
540 -10376 0
420 -10376 0
420 540 -10377 0
c (0<=( - aux1307 + SATLiteral(-420) + SATLiteral(-540)))
-540 10377 0
-420 10377 0
-420 -540 10376 0
c (( - aux1308 + SATLiteral(-435) + SATLiteral(-525))<=0)
525 -10379 0
435 -10379 0
435 525 -10380 0
c (0<=( - aux1308 + SATLiteral(-435) + SATLiteral(-525)))
-525 10380 0
-435 10380 0
-435 -525 10379 0
c (( - aux1309 + SATLiteral(-465) + SATLiteral(-510))<=0)
510 -10382 0
465 -10382 0
465 510 -10383 0
c (0<=( - aux1309 + SATLiteral(-465) + SATLiteral(-510)))
-510 10383 0
-465 10383 0
-465 -510 10382 0
c (( - aux1310 + SATLiteral(-480) + SATLiteral(-495))<=0)
495 -10385 0
480 -10385 0
480 495 -10386 0
c (0<=( - aux1310 + SATLiteral(-480) + SATLiteral(-495)))
-495 10386 0
-480 10386 0
-480 -495 10385 0
c ((aux1310 - aux1311 + SATLiteral(-450))<=0)
10385 -10388 0
10386 -10389 0
450 -10388 0
450 10385 -10389 0
450 10386 -10391 0
c (0<=(aux1310 - aux1311 + SATLiteral(-450)))
-10386 10391 0
-10385 10389 0
-450 10391 0
-450 -10386 10389 0
-450 -10385 10388 0
c ((aux1307 + aux1309 - aux1312)<=0)
10382 -10393 0
10383 -10394 0
10376 -10393 0
10376 10382 -10394 0
10376 10383 -10396 0
10377 -10394 0
10377 10382 -10396 0
10377 10383 -10398 0
c (0<=(aux1307 + aux1309 - aux1312))
-10383 10398 0
-10382 10396 0
-10377 10398 0
-10377 -10383 10396 0
-10377 -10382 10394 0
-10376 10396 0
-10376 -10383 10394 0
-10376 -10382 10393 0
c (( - aux1313 + SATLiteral(542) + SATLiteral(662))<=0)
-662 -10400 0
-542 -10400 0
-542 -662 -10401 0
c (0<=( - aux1313 + SATLiteral(542) + SATLiteral(662)))
662 10401 0
542 10401 0
542 662 10400 0
c (( - aux1314 + SATLiteral(557) + SATLiteral(647))<=0)
-647 -10403 0
-557 -10403 0
-557 -647 -10404 0
c (0<=( - aux1314 + SATLiteral(557) + SATLiteral(647)))
647 10404 0
557 10404 0
557 647 10403 0
c (( - aux1315 + SATLiteral(587) + SATLiteral(632))<=0)
-632 -10406 0
-587 -10406 0
-587 -632 -10407 0
c (0<=( - aux1315 + SATLiteral(587) + SATLiteral(632)))
632 10407 0
587 10407 0
587 632 10406 0
c (( - aux1316 + SATLiteral(602) + SATLiteral(617))<=0)
-617 -10409 0
-602 -10409 0
-602 -617 -10410 0
c (0<=( - aux1316 + SATLiteral(602) + SATLiteral(617)))
617 10410 0
602 10410 0
602 617 10409 0
c ((aux1316 - aux1317 + SATLiteral(572))<=0)
10409 -10412 0
10410 -10413 0
-572 -10412 0
-572 10409 -10413 0
-572 10410 -10415 0
c (0<=(aux1316 - aux1317 + SATLiteral(572)))
-10410 10415 0
-10409 10413 0
572 10415 0
572 -10410 10413 0
572 -10409 10412 0
c ((aux1313 + aux1315 - aux1318)<=0)
10406 -10417 0
10407 -10418 0
10400 -10417 0
10400 10406 -10418 0
10400 10407 -10420 0
10401 -10418 0
10401 10406 -10420 0
10401 10407 -10422 0
c (0<=(aux1313 + aux1315 - aux1318))
-10407 10422 0
-10406 10420 0
-10401 10422 0
-10401 -10407 10420 0
-10401 -10406 10418 0
-10400 10420 0
-10400 -10407 10418 0
-10400 -10406 10417 0
c (( - aux1319 + SATLiteral(544) + SATLiteral(664))<=0)
-664 -10424 0
-544 -10424 0
-544 -664 -10425 0
c (0<=( - aux1319 + SATLiteral(544) + SATLiteral(664)))
664 10425 0
544 10425 0
544 664 10424 0
c (( - aux1320 + SATLiteral(559) + SATLiteral(649))<=0)
-649 -10427 0
-559 -10427 0
-559 -649 -10428 0
c (0<=( - aux1320 + SATLiteral(559) + SATLiteral(649)))
649 10428 0
559 10428 0
559 649 10427 0
c (( - aux1321 + SATLiteral(589) + SATLiteral(634))<=0)
-634 -10430 0
-589 -10430 0
-589 -634 -10431 0
c (0<=( - aux1321 + SATLiteral(589) + SATLiteral(634)))
634 10431 0
589 10431 0
589 634 10430 0
c (( - aux1322 + SATLiteral(604) + SATLiteral(619))<=0)
-619 -10433 0
-604 -10433 0
-604 -619 -10434 0
c (0<=( - aux1322 + SATLiteral(604) + SATLiteral(619)))
619 10434 0
604 10434 0
604 619 10433 0
c ((aux1322 - aux1323 + SATLiteral(574))<=0)
10433 -10436 0
10434 -10437 0
-574 -10436 0
-574 10433 -10437 0
-574 10434 -10439 0
c (0<=(aux1322 - aux1323 + SATLiteral(574)))
-10434 10439 0
-10433 10437 0
574 10439 0
574 -10434 10437 0
574 -10433 10436 0
c ((aux1319 + aux1321 - aux1324)<=0)
10430 -10441 0
10431 -10442 0
10424 -10441 0
10424 10430 -10442 0
10424 10431 -10444 0
10425 -10442 0
10425 10430 -10444 0
10425 10431 -10446 0
c (0<=(aux1319 + aux1321 - aux1324))
-10431 10446 0
-10430 10444 0
-10425 10446 0
-10425 -10431 10444 0
-10425 -10430 10442 0
-10424 10444 0
-10424 -10431 10442 0
-10424 -10430 10441 0
c (( - aux1325 + SATLiteral(546) + SATLiteral(666))<=0)
-666 -10448 0
-546 -10448 0
-546 -666 -10449 0
c (0<=( - aux1325 + SATLiteral(546) + SATLiteral(666)))
666 10449 0
546 10449 0
546 666 10448 0
c (( - aux1326 + SATLiteral(561) + SATLiteral(651))<=0)
-651 -10451 0
-561 -10451 0
-561 -651 -10452 0
c (0<=( - aux1326 + SATLiteral(561) + SATLiteral(651)))
651 10452 0
561 10452 0
561 651 10451 0
c (( - aux1327 + SATLiteral(591) + SATLiteral(636))<=0)
-636 -10454 0
-591 -10454 0
-591 -636 -10455 0
c (0<=( - aux1327 + SATLiteral(591) + SATLiteral(636)))
636 10455 0
591 10455 0
591 636 10454 0
c (( - aux1328 + SATLiteral(606) + SATLiteral(621))<=0)
-621 -10457 0
-606 -10457 0
-606 -621 -10458 0
c (0<=( - aux1328 + SATLiteral(606) + SATLiteral(621)))
621 10458 0
606 10458 0
606 621 10457 0
c ((aux1328 - aux1329 + SATLiteral(576))<=0)
10457 -10460 0
10458 -10461 0
-576 -10460 0
-576 10457 -10461 0
-576 10458 -10463 0
c (0<=(aux1328 - aux1329 + SATLiteral(576)))
-10458 10463 0
-10457 10461 0
576 10463 0
576 -10458 10461 0
576 -10457 10460 0
c ((aux1325 + aux1327 - aux1330)<=0)
10454 -10465 0
10455 -10466 0
10448 -10465 0
10448 10454 -10466 0
10448 10455 -10468 0
10449 -10466 0
10449 10454 -10468 0
10449 10455 -10470 0
c (0<=(aux1325 + aux1327 - aux1330))
-10455 10470 0
-10454 10468 0
-10449 10470 0
-10449 -10455 10468 0
-10449 -10454 10466 0
-10448 10468 0
-10448 -10455 10466 0
-10448 -10454 10465 0
c (( - aux1331 + SATLiteral(548) + SATLiteral(668))<=0)
-668 -10472 0
-548 -10472 0
-548 -668 -10473 0
c (0<=( - aux1331 + SATLiteral(548) + SATLiteral(668)))
668 10473 0
548 10473 0
548 668 10472 0
c (( - aux1332 + SATLiteral(563) + SATLiteral(653))<=0)
-653 -10475 0
-563 -10475 0
-563 -653 -10476 0
c (0<=( - aux1332 + SATLiteral(563) + SATLiteral(653)))
653 10476 0
563 10476 0
563 653 10475 0
c (( - aux1333 + SATLiteral(593) + SATLiteral(638))<=0)
-638 -10478 0
-593 -10478 0
-593 -638 -10479 0
c (0<=( - aux1333 + SATLiteral(593) + SATLiteral(638)))
638 10479 0
593 10479 0
593 638 10478 0
c (( - aux1334 + SATLiteral(608) + SATLiteral(623))<=0)
-623 -10481 0
-608 -10481 0
-608 -623 -10482 0
c (0<=( - aux1334 + SATLiteral(608) + SATLiteral(623)))
623 10482 0
608 10482 0
608 623 10481 0
c ((aux1334 - aux1335 + SATLiteral(578))<=0)
10481 -10484 0
10482 -10485 0
-578 -10484 0
-578 10481 -10485 0
-578 10482 -10487 0
c (0<=(aux1334 - aux1335 + SATLiteral(578)))
-10482 10487 0
-10481 10485 0
578 10487 0
578 -10482 10485 0
578 -10481 10484 0
c ((aux1331 + aux1333 - aux1336)<=0)
10478 -10489 0
10479 -10490 0
10472 -10489 0
10472 10478 -10490 0
10472 10479 -10492 0
10473 -10490 0
10473 10478 -10492 0
10473 10479 -10494 0
c (0<=(aux1331 + aux1333 - aux1336))
-10479 10494 0
-10478 10492 0
-10473 10494 0
-10473 -10479 10492 0
-10473 -10478 10490 0
-10472 10492 0
-10472 -10479 10490 0
-10472 -10478 10489 0
c (( - aux1337 + SATLiteral(550) + SATLiteral(670))<=0)
-670 -10496 0
-550 -10496 0
-550 -670 -10497 0
c (0<=( - aux1337 + SATLiteral(550) + SATLiteral(670)))
670 10497 0
550 10497 0
550 670 10496 0
c (( - aux1338 + SATLiteral(565) + SATLiteral(655))<=0)
-655 -10499 0
-565 -10499 0
-565 -655 -10500 0
c (0<=( - aux1338 + SATLiteral(565) + SATLiteral(655)))
655 10500 0
565 10500 0
565 655 10499 0
c (( - aux1339 + SATLiteral(595) + SATLiteral(640))<=0)
-640 -10502 0
-595 -10502 0
-595 -640 -10503 0
c (0<=( - aux1339 + SATLiteral(595) + SATLiteral(640)))
640 10503 0
595 10503 0
595 640 10502 0
c (( - aux1340 + SATLiteral(610) + SATLiteral(625))<=0)
-625 -10505 0
-610 -10505 0
-610 -625 -10506 0
c (0<=( - aux1340 + SATLiteral(610) + SATLiteral(625)))
625 10506 0
610 10506 0
610 625 10505 0
c ((aux1340 - aux1341 + SATLiteral(580))<=0)
10505 -10508 0
10506 -10509 0
-580 -10508 0
-580 10505 -10509 0
-580 10506 -10511 0
c (0<=(aux1340 - aux1341 + SATLiteral(580)))
-10506 10511 0
-10505 10509 0
580 10511 0
580 -10506 10509 0
580 -10505 10508 0
c ((aux1337 + aux1339 - aux1342)<=0)
10502 -10513 0
10503 -10514 0
10496 -10513 0
10496 10502 -10514 0
10496 10503 -10516 0
10497 -10514 0
10497 10502 -10516 0
10497 10503 -10518 0
c (0<=(aux1337 + aux1339 - aux1342))
-10503 10518 0
-10502 10516 0
-10497 10518 0
-10497 -10503 10516 0
-10497 -10502 10514 0
-10496 10516 0
-10496 -10503 10514 0
-10496 -10502 10513 0
c (( - aux1343 + SATLiteral(552) + SATLiteral(672))<=0)
-672 -10520 0
-552 -10520 0
-552 -672 -10521 0
c (0<=( - aux1343 + SATLiteral(552) + SATLiteral(672)))
672 10521 0
552 10521 0
552 672 10520 0
c (( - aux1344 + SATLiteral(567) + SATLiteral(657))<=0)
-657 -10523 0
-567 -10523 0
-567 -657 -10524 0
c (0<=( - aux1344 + SATLiteral(567) + SATLiteral(657)))
657 10524 0
567 10524 0
567 657 10523 0
c (( - aux1345 + SATLiteral(597) + SATLiteral(642))<=0)
-642 -10526 0
-597 -10526 0
-597 -642 -10527 0
c (0<=( - aux1345 + SATLiteral(597) + SATLiteral(642)))
642 10527 0
597 10527 0
597 642 10526 0
c (( - aux1346 + SATLiteral(612) + SATLiteral(627))<=0)
-627 -10529 0
-612 -10529 0
-612 -627 -10530 0
c (0<=( - aux1346 + SATLiteral(612) + SATLiteral(627)))
627 10530 0
612 10530 0
612 627 10529 0
c ((aux1346 - aux1347 + SATLiteral(582))<=0)
10529 -10532 0
10530 -10533 0
-582 -10532 0
-582 10529 -10533 0
-582 10530 -10535 0
c (0<=(aux1346 - aux1347 + SATLiteral(582)))
-10530 10535 0
-10529 10533 0
582 10535 0
582 -10530 10533 0
582 -10529 10532 0
c ((aux1343 + aux1345 - aux1348)<=0)
10526 -10537 0
10527 -10538 0
10520 -10537 0
10520 10526 -10538 0
10520 10527 -10540 0
10521 -10538 0
10521 10526 -10540 0
10521 10527 -10542 0
c (0<=(aux1343 + aux1345 - aux1348))
-10527 10542 0
-10526 10540 0
-10521 10542 0
-10521 -10527 10540 0
-10521 -10526 10538 0
-10520 10540 0
-10520 -10527 10538 0
-10520 -10526 10537 0
c (( - aux1349 + SATLiteral(554) + SATLiteral(674))<=0)
-674 -10544 0
-554 -10544 0
-554 -674 -10545 0
c (0<=( - aux1349 + SATLiteral(554) + SATLiteral(674)))
674 10545 0
554 10545 0
554 674 10544 0
c (( - aux1350 + SATLiteral(569) + SATLiteral(659))<=0)
-659 -10547 0
-569 -10547 0
-569 -659 -10548 0
c (0<=( - aux1350 + SATLiteral(569) + SATLiteral(659)))
659 10548 0
569 10548 0
569 659 10547 0
c (( - aux1351 + SATLiteral(599) + SATLiteral(644))<=0)
-644 -10550 0
-599 -10550 0
-599 -644 -10551 0
c (0<=( - aux1351 + SATLiteral(599) + SATLiteral(644)))
644 10551 0
599 10551 0
599 644 10550 0
c (( - aux1352 + SATLiteral(614) + SATLiteral(629))<=0)
-629 -10553 0
-614 -10553 0
-614 -629 -10554 0
c (0<=( - aux1352 + SATLiteral(614) + SATLiteral(629)))
629 10554 0
614 10554 0
614 629 10553 0
c ((aux1352 - aux1353 + SATLiteral(584))<=0)
10553 -10556 0
10554 -10557 0
-584 -10556 0
-584 10553 -10557 0
-584 10554 -10559 0
c (0<=(aux1352 - aux1353 + SATLiteral(584)))
-10554 10559 0
-10553 10557 0
584 10559 0
584 -10554 10557 0
584 -10553 10556 0
c ((aux1349 + aux1351 - aux1354)<=0)
10550 -10561 0
10551 -10562 0
10544 -10561 0
10544 10550 -10562 0
10544 10551 -10564 0
10545 -10562 0
10545 10550 -10564 0
10545 10551 -10566 0
c (0<=(aux1349 + aux1351 - aux1354))
-10551 10566 0
-10550 10564 0
-10545 10566 0
-10545 -10551 10564 0
-10545 -10550 10562 0
-10544 10564 0
-10544 -10551 10562 0
-10544 -10550 10561 0
c (( - aux1355 + SATLiteral(556) + SATLiteral(676))<=0)
-676 -10568 0
-556 -10568 0
-556 -676 -10569 0
c (0<=( - aux1355 + SATLiteral(556) + SATLiteral(676)))
676 10569 0
556 10569 0
556 676 10568 0
c (( - aux1356 + SATLiteral(571) + SATLiteral(661))<=0)
-661 -10571 0
-571 -10571 0
-571 -661 -10572 0
c (0<=( - aux1356 + SATLiteral(571) + SATLiteral(661)))
661 10572 0
571 10572 0
571 661 10571 0
c (( - aux1357 + SATLiteral(601) + SATLiteral(646))<=0)
-646 -10574 0
-601 -10574 0
-601 -646 -10575 0
c (0<=( - aux1357 + SATLiteral(601) + SATLiteral(646)))
646 10575 0
601 10575 0
601 646 10574 0
c (( - aux1358 + SATLiteral(616) + SATLiteral(631))<=0)
-631 -10577 0
-616 -10577 0
-616 -631 -10578 0
c (0<=( - aux1358 + SATLiteral(616) + SATLiteral(631)))
631 10578 0
616 10578 0
616 631 10577 0
c ((aux1358 - aux1359 + SATLiteral(586))<=0)
10577 -10580 0
10578 -10581 0
-586 -10580 0
-586 10577 -10581 0
-586 10578 -10583 0
c (0<=(aux1358 - aux1359 + SATLiteral(586)))
-10578 10583 0
-10577 10581 0
586 10583 0
586 -10578 10581 0
586 -10577 10580 0
c ((aux1355 + aux1357 - aux1360)<=0)
10574 -10585 0
10575 -10586 0
10568 -10585 0
10568 10574 -10586 0
10568 10575 -10588 0
10569 -10586 0
10569 10574 -10588 0
10569 10575 -10590 0
c (0<=(aux1355 + aux1357 - aux1360))
-10575 10590 0
-10574 10588 0
-10569 10590 0
-10569 -10575 10588 0
-10569 -10574 10586 0
-10568 10588 0
-10568 -10575 10586 0
-10568 -10574 10585 0
c (( - aux1361 + SATLiteral(-555) + SATLiteral(-675))<=0)
675 -10592 0
555 -10592 0
555 675 -10593 0
c (0<=( - aux1361 + SATLiteral(-555) + SATLiteral(-675)))
-675 10593 0
-555 10593 0
-555 -675 10592 0
c (( - aux1362 + SATLiteral(-570) + SATLiteral(-660))<=0)
660 -10595 0
570 -10595 0
570 660 -10596 0
c (0<=( - aux1362 + SATLiteral(-570) + SATLiteral(-660)))
-660 10596 0
-570 10596 0
-570 -660 10595 0
c (( - aux1363 + SATLiteral(-600) + SATLiteral(-645))<=0)
645 -10598 0
600 -10598 0
600 645 -10599 0
c (0<=( - aux1363 + SATLiteral(-600) + SATLiteral(-645)))
-645 10599 0
-600 10599 0
-600 -645 10598 0
c (( - aux1364 + SATLiteral(-615) + SATLiteral(-630))<=0)
630 -10601 0
615 -10601 0
615 630 -10602 0
c (0<=( - aux1364 + SATLiteral(-615) + SATLiteral(-630)))
-630 10602 0
-615 10602 0
-615 -630 10601 0
c ((aux1364 - aux1365 + SATLiteral(-585))<=0)
10601 -10604 0
10602 -10605 0
585 -10604 0
585 10601 -10605 0
585 10602 -10607 0
c (0<=(aux1364 - aux1365 + SATLiteral(-585)))
-10602 10607 0
-10601 10605 0
-585 10607 0
-585 -10602 10605 0
-585 -10601 10604 0
c ((aux1361 + aux1363 - aux1366)<=0)
10598 -10609 0
10599 -10610 0
10592 -10609 0
10592 10598 -10610 0
10592 10599 -10612 0
10593 -10610 0
10593 10598 -10612 0
10593 10599 -10614 0
c (0<=(aux1361 + aux1363 - aux1366))
-10599 10614 0
-10598 10612 0
-10593 10614 0
-10593 -10599 10612 0
-10593 -10598 10610 0
-10592 10612 0
-10592 -10599 10610 0
-10592 -10598 10609 0
c ((SATLiteral(677) + SATLiteral(797) - aux1367)<=0)
-797 -10616 0
-677 -10616 0
-677 -797 -10617 0
c (0<=(SATLiteral(677) + SATLiteral(797) - aux1367))
797 10617 0
677 10617 0
677 797 10616 0
c ((SATLiteral(692) + SATLiteral(782) - aux1368)<=0)
-782 -10619 0
-692 -10619 0
-692 -782 -10620 0
c (0<=(SATLiteral(692) + SATLiteral(782) - aux1368))
782 10620 0
692 10620 0
692 782 10619 0
c ((SATLiteral(722) + SATLiteral(767) - aux1369)<=0)
-767 -10622 0
-722 -10622 0
-722 -767 -10623 0
c (0<=(SATLiteral(722) + SATLiteral(767) - aux1369))
767 10623 0
722 10623 0
722 767 10622 0
c ((SATLiteral(737) + SATLiteral(752) - aux1370)<=0)
-752 -10625 0
-737 -10625 0
-737 -752 -10626 0
c (0<=(SATLiteral(737) + SATLiteral(752) - aux1370))
752 10626 0
737 10626 0
737 752 10625 0
c ((SATLiteral(707) + aux1370 - aux1371)<=0)
10625 -10628 0
10626 -10629 0
-707 -10628 0
-707 10625 -10629 0
-707 10626 -10631 0
c (0<=(SATLiteral(707) + aux1370 - aux1371))
-10626 10631 0
-10625 10629 0
707 10631 0
707 -10626 10629 0
707 -10625 10628 0
c ((aux1367 + aux1369 - aux1372)<=0)
10622 -10633 0
10623 -10634 0
10616 -10633 0
10616 10622 -10634 0
10616 10623 -10636 0
10617 -10634 0
10617 10622 -10636 0
10617 10623 -10638 0
c (0<=(aux1367 + aux1369 - aux1372))
-10623 10638 0
-10622 10636 0
-10617 10638 0
-10617 -10623 10636 0
-10617 -10622 10634 0
-10616 10636 0
-10616 -10623 10634 0
-10616 -10622 10633 0
c ((SATLiteral(679) + SATLiteral(799) - aux1373)<=0)
-799 -10640 0
-679 -10640 0
-679 -799 -10641 0
c (0<=(SATLiteral(679) + SATLiteral(799) - aux1373))
799 10641 0
679 10641 0
679 799 10640 0
c ((SATLiteral(694) + SATLiteral(784) - aux1374)<=0)
-784 -10643 0
-694 -10643 0
-694 -784 -10644 0
c (0<=(SATLiteral(694) + SATLiteral(784) - aux1374))
784 10644 0
694 10644 0
694 784 10643 0
c ((SATLiteral(724) + SATLiteral(769) - aux1375)<=0)
-769 -10646 0
-724 -10646 0
-724 -769 -10647 0
c (0<=(SATLiteral(724) + SATLiteral(769) - aux1375))
769 10647 0
724 10647 0
724 769 10646 0
c ((SATLiteral(739) + SATLiteral(754) - aux1376)<=0)
-754 -10649 0
-739 -10649 0
-739 -754 -10650 0
c (0<=(SATLiteral(739) + SATLiteral(754) - aux1376))
754 10650 0
739 10650 0
739 754 10649 0
c ((SATLiteral(709) + aux1376 - aux1377)<=0)
10649 -10652 0
10650 -10653 0
-709 -10652 0
-709 10649 -10653 0
-709 10650 -10655 0
c (0<=(SATLiteral(709) + aux1376 - aux1377))
-10650 10655 0
-10649 10653 0
709 10655 0
709 -10650 10653 0
709 -10649 10652 0
c ((aux1373 + aux1375 - aux1378)<=0)
10646 -10657 0
10647 -10658 0
10640 -10657 0
10640 10646 -10658 0
10640 10647 -10660 0
10641 -10658 0
10641 10646 -10660 0
10641 10647 -10662 0
c (0<=(aux1373 + aux1375 - aux1378))
-10647 10662 0
-10646 10660 0
-10641 10662 0
-10641 -10647 10660 0
-10641 -10646 10658 0
-10640 10660 0
-10640 -10647 10658 0
-10640 -10646 10657 0
c ((SATLiteral(681) + SATLiteral(801) - aux1379)<=0)
-801 -10664 0
-681 -10664 0
-681 -801 -10665 0
c (0<=(SATLiteral(681) + SATLiteral(801) - aux1379))
801 10665 0
681 10665 0
681 801 10664 0
c ((SATLiteral(696) + SATLiteral(786) - aux1380)<=0)
-786 -10667 0
-696 -10667 0
-696 -786 -10668 0
c (0<=(SATLiteral(696) + SATLiteral(786) - aux1380))
786 10668 0
696 10668 0
696 786 10667 0
c ((SATLiteral(726) + SATLiteral(771) - aux1381)<=0)
-771 -10670 0
-726 -10670 0
-726 -771 -10671 0
c (0<=(SATLiteral(726) + SATLiteral(771) - aux1381))
771 10671 0
726 10671 0
726 771 10670 0
c ((SATLiteral(741) + SATLiteral(756) - aux1382)<=0)
-756 -10673 0
-741 -10673 0
-741 -756 -10674 0
c (0<=(SATLiteral(741) + SATLiteral(756) - aux1382))
756 10674 0
741 10674 0
741 756 10673 0
c ((SATLiteral(711) + aux1382 - aux1383)<=0)
10673 -10676 0
10674 -10677 0
-711 -10676 0
-711 10673 -10677 0
-711 10674 -10679 0
c (0<=(SATLiteral(711) + aux1382 - aux1383))
-10674 10679 0
-10673 10677 0
711 10679 0
711 -10674 10677 0
711 -10673 10676 0
c ((aux1379 + aux1381 - aux1384)<=0)
10670 -10681 0
10671 -10682 0
10664 -10681 0
10664 10670 -10682 0
10664 10671 -10684 0
10665 -10682 0
10665 10670 -10684 0
10665 10671 -10686 0
c (0<=(aux1379 + aux1381 - aux1384))
-10671 10686 0
-10670 10684 0
-10665 10686 0
-10665 -10671 10684 0
-10665 -10670 10682 0
-10664 10684 0
-10664 -10671 10682 0
-10664 -10670 10681 0
c ((SATLiteral(683) + SATLiteral(803) - aux1385)<=0)
-803 -10688 0
-683 -10688 0
-683 -803 -10689 0
c (0<=(SATLiteral(683) + SATLiteral(803) - aux1385))
803 10689 0
683 10689 0
683 803 10688 0
c ((SATLiteral(698) + SATLiteral(788) - aux1386)<=0)
-788 -10691 0
-698 -10691 0
-698 -788 -10692 0
c (0<=(SATLiteral(698) + SATLiteral(788) - aux1386))
788 10692 0
698 10692 0
698 788 10691 0
c ((SATLiteral(728) + SATLiteral(773) - aux1387)<=0)
-773 -10694 0
-728 -10694 0
-728 -773 -10695 0
c (0<=(SATLiteral(728) + SATLiteral(773) - aux1387))
773 10695 0
728 10695 0
728 773 10694 0
c ((SATLiteral(743) + SATLiteral(758) - aux1388)<=0)
-758 -10697 0
-743 -10697 0
-743 -758 -10698 0
c (0<=(SATLiteral(743) + SATLiteral(758) - aux1388))
758 10698 0
743 10698 0
743 758 10697 0
c ((SATLiteral(713) + aux1388 - aux1389)<=0)
10697 -10700 0
10698 -10701 0
-713 -10700 0
-713 10697 -10701 0
-713 10698 -10703 0
c (0<=(SATLiteral(713) + aux1388 - aux1389))
-10698 10703 0
-10697 10701 0
713 10703 0
713 -10698 10701 0
713 -10697 10700 0
c ((aux1385 + aux1387 - aux1390)<=0)
10694 -10705 0
10695 -10706 0
10688 -10705 0
10688 10694 -10706 0
10688 10695 -10708 0
10689 -10706 0
10689 10694 -10708 0
10689 10695 -10710 0
c (0<=(aux1385 + aux1387 - aux1390))
-10695 10710 0
-10694 10708 0
-10689 10710 0
-10689 -10695 10708 0
-10689 -10694 10706 0
-10688 10708 0
-10688 -10695 10706 0
-10688 -10694 10705 0
c ((SATLiteral(685) + SATLiteral(805) - aux1391)<=0)
-805 -10712 0
-685 -10712 0
-685 -805 -10713 0
c (0<=(SATLiteral(685) + SATLiteral(805) - aux1391))
805 10713 0
685 10713 0
685 805 10712 0
c ((SATLiteral(700) + SATLiteral(790) - aux1392)<=0)
-790 -10715 0
-700 -10715 0
-700 -790 -10716 0
c (0<=(SATLiteral(700) + SATLiteral(790) - aux1392))
790 10716 0
700 10716 0
700 790 10715 0
c ((SATLiteral(730) + SATLiteral(775) - aux1393)<=0)
-775 -10718 0
-730 -10718 0
-730 -775 -10719 0
c (0<=(SATLiteral(730) + SATLiteral(775) - aux1393))
775 10719 0
730 10719 0
730 775 10718 0
c ((SATLiteral(745) + SATLiteral(760) - aux1394)<=0)
-760 -10721 0
-745 -10721 0
-745 -760 -10722 0
c (0<=(SATLiteral(745) + SATLiteral(760) - aux1394))
760 10722 0
745 10722 0
745 760 10721 0
c ((SATLiteral(715) + aux1394 - aux1395)<=0)
10721 -10724 0
10722 -10725 0
-715 -10724 0
-715 10721 -10725 0
-715 10722 -10727 0
c (0<=(SATLiteral(715) + aux1394 - aux1395))
-10722 10727 0
-10721 10725 0
715 10727 0
715 -10722 10725 0
715 -10721 10724 0
c ((aux1391 + aux1393 - aux1396)<=0)
10718 -10729 0
10719 -10730 0
10712 -10729 0
10712 10718 -10730 0
10712 10719 -10732 0
10713 -10730 0
10713 10718 -10732 0
10713 10719 -10734 0
c (0<=(aux1391 + aux1393 - aux1396))
-10719 10734 0
-10718 10732 0
-10713 10734 0
-10713 -10719 10732 0
-10713 -10718 10730 0
-10712 10732 0
-10712 -10719 10730 0
-10712 -10718 10729 0
c ((SATLiteral(687) + SATLiteral(807) - aux1397)<=0)
-807 -10736 0
-687 -10736 0
-687 -807 -10737 0
c (0<=(SATLiteral(687) + SATLiteral(807) - aux1397))
807 10737 0
687 10737 0
687 807 10736 0
c ((SATLiteral(702) + SATLiteral(792) - aux1398)<=0)
-792 -10739 0
-702 -10739 0
-702 -792 -10740 0
c (0<=(SATLiteral(702) + SATLiteral(792) - aux1398))
792 10740 0
702 10740 0
702 792 10739 0
c ((SATLiteral(732) + SATLiteral(777) - aux1399)<=0)
-777 -10742 0
-732 -10742 0
-732 -777 -10743 0
c (0<=(SATLiteral(732) + SATLiteral(777) - aux1399))
777 10743 0
732 10743 0
732 777 10742 0
c ((SATLiteral(747) + SATLiteral(762) - aux1400)<=0)
-762 -10745 0
-747 -10745 0
-747 -762 -10746 0
c (0<=(SATLiteral(747) + SATLiteral(762) - aux1400))
762 10746 0
747 10746 0
747 762 10745 0
c ((SATLiteral(717) + aux1400 - aux1401)<=0)
10745 -10748 0
10746 -10749 0
-717 -10748 0
-717 10745 -10749 0
-717 10746 -10751 0
c (0<=(SATLiteral(717) + aux1400 - aux1401))
-10746 10751 0
-10745 10749 0
717 10751 0
717 -10746 10749 0
717 -10745 10748 0
c ((aux1397 + aux1399 - aux1402)<=0)
10742 -10753 0
10743 -10754 0
10736 -10753 0
10736 10742 -10754 0
10736 10743 -10756 0
10737 -10754 0
10737 10742 -10756 0
10737 10743 -10758 0
c (0<=(aux1397 + aux1399 - aux1402))
-10743 10758 0
-10742 10756 0
-10737 10758 0
-10737 -10743 10756 0
-10737 -10742 10754 0
-10736 10756 0
-10736 -10743 10754 0
-10736 -10742 10753 0
c ((SATLiteral(689) + SATLiteral(809) - aux1403)<=0)
-809 -10760 0
-689 -10760 0
-689 -809 -10761 0
c (0<=(SATLiteral(689) + SATLiteral(809) - aux1403))
809 10761 0
689 10761 0
689 809 10760 0
c ((SATLiteral(704) + SATLiteral(794) - aux1404)<=0)
-794 -10763 0
-704 -10763 0
-704 -794 -10764 0
c (0<=(SATLiteral(704) + SATLiteral(794) - aux1404))
794 10764 0
704 10764 0
704 794 10763 0
c ((SATLiteral(734) + SATLiteral(779) - aux1405)<=0)
-779 -10766 0
-734 -10766 0
-734 -779 -10767 0
c (0<=(SATLiteral(734) + SATLiteral(779) - aux1405))
779 10767 0
734 10767 0
734 779 10766 0
c ((SATLiteral(749) + SATLiteral(764) - aux1406)<=0)
-764 -10769 0
-749 -10769 0
-749 -764 -10770 0
c (0<=(SATLiteral(749) + SATLiteral(764) - aux1406))
764 10770 0
749 10770 0
749 764 10769 0
c ((SATLiteral(719) + aux1406 - aux1407)<=0)
10769 -10772 0
10770 -10773 0
-719 -10772 0
-719 10769 -10773 0
-719 10770 -10775 0
c (0<=(SATLiteral(719) + aux1406 - aux1407))
-10770 10775 0
-10769 10773 0
719 10775 0
719 -10770 10773 0
719 -10769 10772 0
c ((aux1403 + aux1405 - aux1408)<=0)
10766 -10777 0
10767 -10778 0
10760 -10777 0
10760 10766 -10778 0
10760 10767 -10780 0
10761 -10778 0
10761 10766 -10780 0
10761 10767 -10782 0
c (0<=(aux1403 + aux1405 - aux1408))
-10767 10782 0
-10766 10780 0
-10761 10782 0
-10761 -10767 10780 0
-10761 -10766 10778 0
-10760 10780 0
-10760 -10767 10778 0
-10760 -10766 10777 0
c ((SATLiteral(691) + SATLiteral(811) - aux1409)<=0)
-811 -10784 0
-691 -10784 0
-691 -811 -10785 0
c (0<=(SATLiteral(691) + SATLiteral(811) - aux1409))
811 10785 0
691 10785 0
691 811 10784 0
c ((SATLiteral(706) + SATLiteral(796) - aux1410)<=0)
-796 -10787 0
-706 -10787 0
-706 -796 -10788 0
c (0<=(SATLiteral(706) + SATLiteral(796) - aux1410))
796 10788 0
706 10788 0
706 796 10787 0
c ((SATLiteral(736) + SATLiteral(781) - aux1411)<=0)
-781 -10790 0
-736 -10790 0
-736 -781 -10791 0
c (0<=(SATLiteral(736) + SATLiteral(781) - aux1411))
781 10791 0
736 10791 0
736 781 10790 0
c ((SATLiteral(751) + SATLiteral(766) - aux1412)<=0)
-766 -10793 0
-751 -10793 0
-751 -766 -10794 0
c (0<=(SATLiteral(751) + SATLiteral(766) - aux1412))
766 10794 0
751 10794 0
751 766 10793 0
c ((SATLiteral(721) + aux1412 - aux1413)<=0)
10793 -10796 0
10794 -10797 0
-721 -10796 0
-721 10793 -10797 0
-721 10794 -10799 0
c (0<=(SATLiteral(721) + aux1412 - aux1413))
-10794 10799 0
-10793 10797 0
721 10799 0
721 -10794 10797 0
721 -10793 10796 0
c ((aux1409 + aux1411 - aux1414)<=0)
10790 -10801 0
10791 -10802 0
10784 -10801 0
10784 10790 -10802 0
10784 10791 -10804 0
10785 -10802 0
10785 10790 -10804 0
10785 10791 -10806 0
c (0<=(aux1409 + aux1411 - aux1414))
-10791 10806 0
-10790 10804 0
-10785 10806 0
-10785 -10791 10804 0
-10785 -10790 10802 0
-10784 10804 0
-10784 -10791 10802 0
-10784 -10790 10801 0
c ((SATLiteral(-690) + SATLiteral(-810) - aux1415)<=0)
810 -10808 0
690 -10808 0
690 810 -10809 0
c (0<=(SATLiteral(-690) + SATLiteral(-810) - aux1415))
-810 10809 0
-690 10809 0
-690 -810 10808 0
c ((SATLiteral(-705) + SATLiteral(-795) - aux1416)<=0)
795 -10811 0
705 -10811 0
705 795 -10812 0
c (0<=(SATLiteral(-705) + SATLiteral(-795) - aux1416))
-795 10812 0
-705 10812 0
-705 -795 10811 0
c ((SATLiteral(-735) + SATLiteral(-780) - aux1417)<=0)
780 -10814 0
735 -10814 0
735 780 -10815 0
c (0<=(SATLiteral(-735) + SATLiteral(-780) - aux1417))
-780 10815 0
-735 10815 0
-735 -780 10814 0
c ((SATLiteral(-750) + SATLiteral(-765) - aux1418)<=0)
765 -10817 0
750 -10817 0
750 765 -10818 0
c (0<=(SATLiteral(-750) + SATLiteral(-765) - aux1418))
-765 10818 0
-750 10818 0
-750 -765 10817 0
c ((SATLiteral(-720) + aux1418 - aux1419)<=0)
10817 -10820 0
10818 -10821 0
720 -10820 0
720 10817 -10821 0
720 10818 -10823 0
c (0<=(SATLiteral(-720) + aux1418 - aux1419))
-10818 10823 0
-10817 10821 0
-720 10823 0
-720 -10818 10821 0
-720 -10817 10820 0
c ((aux1415 + aux1417 - aux1420)<=0)
10814 -10825 0
10815 -10826 0
10808 -10825 0
10808 10814 -10826 0
10808 10815 -10828 0
10809 -10826 0
10809 10814 -10828 0
10809 10815 -10830 0
c (0<=(aux1415 + aux1417 - aux1420))
-10815 10830 0
-10814 10828 0
-10809 10830 0
-10809 -10815 10828 0
-10809 -10814 10826 0
-10808 10828 0
-10808 -10815 10826 0
-10808 -10814 10825 0
c (( - aux1421 + SATLiteral(812) + SATLiteral(932))<=0)
-932 -10832 0
-812 -10832 0
-812 -932 -10833 0
c (0<=( - aux1421 + SATLiteral(812) + SATLiteral(932)))
932 10833 0
812 10833 0
812 932 10832 0
c (( - aux1422 + SATLiteral(827) + SATLiteral(917))<=0)
-917 -10835 0
-827 -10835 0
-827 -917 -10836 0
c (0<=( - aux1422 + SATLiteral(827) + SATLiteral(917)))
917 10836 0
827 10836 0
827 917 10835 0
c (( - aux1423 + SATLiteral(857) + SATLiteral(902))<=0)
-902 -10838 0
-857 -10838 0
-857 -902 -10839 0
c (0<=( - aux1423 + SATLiteral(857) + SATLiteral(902)))
902 10839 0
857 10839 0
857 902 10838 0
c (( - aux1424 + SATLiteral(872) + SATLiteral(887))<=0)
-887 -10841 0
-872 -10841 0
-872 -887 -10842 0
c (0<=( - aux1424 + SATLiteral(872) + SATLiteral(887)))
887 10842 0
872 10842 0
872 887 10841 0
c ((aux1424 - aux1425 + SATLiteral(842))<=0)
10841 -10844 0
10842 -10845 0
-842 -10844 0
-842 10841 -10845 0
-842 10842 -10847 0
c (0<=(aux1424 - aux1425 + SATLiteral(842)))
-10842 10847 0
-10841 10845 0
842 10847 0
842 -10842 10845 0
842 -10841 10844 0
c ((aux1421 + aux1423 - aux1426)<=0)
10838 -10849 0
10839 -10850 0
10832 -10849 0
10832 10838 -10850 0
10832 10839 -10852 0
10833 -10850 0
10833 10838 -10852 0
10833 10839 -10854 0
c (0<=(aux1421 + aux1423 - aux1426))
-10839 10854 0
-10838 10852 0
-10833 10854 0
-10833 -10839 10852 0
-10833 -10838 10850 0
-10832 10852 0
-10832 -10839 10850 0
-10832 -10838 10849 0
c (( - aux1427 + SATLiteral(814) + SATLiteral(934))<=0)
-934 -10856 0
-814 -10856 0
-814 -934 -10857 0
c (0<=( - aux1427 + SATLiteral(814) + SATLiteral(934)))
934 10857 0
814 10857 0
814 934 10856 0
c (( - aux1428 + SATLiteral(829) + SATLiteral(919))<=0)
-919 -10859 0
-829 -10859 0
-829 -919 -10860 0
c (0<=( - aux1428 + SATLiteral(829) + SATLiteral(919)))
919 10860 0
829 10860 0
829 919 10859 0
c (( - aux1429 + SATLiteral(859) + SATLiteral(904))<=0)
-904 -10862 0
-859 -10862 0
-859 -904 -10863 0
c (0<=( - aux1429 + SATLiteral(859) + SATLiteral(904)))
904 10863 0
859 10863 0
859 904 10862 0
c (( - aux1430 + SATLiteral(874) + SATLiteral(889))<=0)
-889 -10865 0
-874 -10865 0
-874 -889 -10866 0
c (0<=( - aux1430 + SATLiteral(874) + SATLiteral(889)))
889 10866 0
874 10866 0
874 889 10865 0
c ((aux1430 - aux1431 + SATLiteral(844))<=0)
10865 -10868 0
10866 -10869 0
-844 -10868 0
-844 10865 -10869 0
-844 10866 -10871 0
c (0<=(aux1430 - aux1431 + SATLiteral(844)))
-10866 10871 0
-10865 10869 0
844 10871 0
844 -10866 10869 0
844 -10865 10868 0
c ((aux1427 + aux1429 - aux1432)<=0)
10862 -10873 0
10863 -10874 0
10856 -10873 0
10856 10862 -10874 0
10856 10863 -10876 0
10857 -10874 0
10857 10862 -10876 0
10857 10863 -10878 0
c (0<=(aux1427 + aux1429 - aux1432))
-10863 10878 0
-10862 10876 0
-10857 10878 0
-10857 -10863 10876 0
-10857 -10862 10874 0
-10856 10876 0
-10856 -10863 10874 0
-10856 -10862 10873 0
c (( - aux1433 + SATLiteral(816) + SATLiteral(936))<=0)
-936 -10880 0
-816 -10880 0
-816 -936 -10881 0
c (0<=( - aux1433 + SATLiteral(816) + SATLiteral(936)))
936 10881 0
816 10881 0
816 936 10880 0
c (( - aux1434 + SATLiteral(831) + SATLiteral(921))<=0)
-921 -10883 0
-831 -10883 0
-831 -921 -10884 0
c (0<=( - aux1434 + SATLiteral(831) + SATLiteral(921)))
921 10884 0
831 10884 0
831 921 10883 0
c (( - aux1435 + SATLiteral(861) + SATLiteral(906))<=0)
-906 -10886 0
-861 -10886 0
-861 -906 -10887 0
c (0<=( - aux1435 + SATLiteral(861) + SATLiteral(906)))
906 10887 0
861 10887 0
861 906 10886 0
c (( - aux1436 + SATLiteral(876) + SATLiteral(891))<=0)
-891 -10889 0
-876 -10889 0
-876 -891 -10890 0
c (0<=( - aux1436 + SATLiteral(876) + SATLiteral(891)))
891 10890 0
876 10890 0
876 891 10889 0
c ((aux1436 - aux1437 + SATLiteral(846))<=0)
10889 -10892 0
10890 -10893 0
-846 -10892 0
-846 10889 -10893 0
-846 10890 -10895 0
c (0<=(aux1436 - aux1437 + SATLiteral(846)))
-10890 10895 0
-10889 10893 0
846 10895 0
846 -10890 10893 0
846 -10889 10892 0
c ((aux1433 + aux1435 - aux1438)<=0)
10886 -10897 0
10887 -10898 0
10880 -10897 0
10880 10886 -10898 0
10880 10887 -10900 0
10881 -10898 0
10881 10886 -10900 0
10881 10887 -10902 0
c (0<=(aux1433 + aux1435 - aux1438))
-10887 10902 0
-10886 10900 0
-10881 10902 0
-10881 -10887 10900 0
-10881 -10886 10898 0
-10880 10900 0
-10880 -10887 10898 0
-10880 -10886 10897 0
c (( - aux1439 + SATLiteral(818) + SATLiteral(938))<=0)
-938 -10904 0
-818 -10904 0
-818 -938 -10905 0
c (0<=( - aux1439 + SATLiteral(818) + SATLiteral(938)))
938 10905 0
818 10905 0
818 938 10904 0
c (( - aux1440 + SATLiteral(833) + SATLiteral(923))<=0)
-923 -10907 0
-833 -10907 0
-833 -923 -10908 0
c (0<=( - aux1440 + SATLiteral(833) + SATLiteral(923)))
923 10908 0
833 10908 0
833 923 10907 0
c (( - aux1441 + SATLiteral(863) + SATLiteral(908))<=0)
-908 -10910 0
-863 -10910 0
-863 -908 -10911 0
c (0<=( - aux1441 + SATLiteral(863) + SATLiteral(908)))
908 10911 0
863 10911 0
863 908 10910 0
c (( - aux1442 + SATLiteral(878) + SATLiteral(893))<=0)
-893 -10913 0
-878 -10913 0
-878 -893 -10914 0
c (0<=( - aux1442 + SATLiteral(878) + SATLiteral(893)))
893 10914 0
878 10914 0
878 893 10913 0
c ((aux1442 - aux1443 + SATLiteral(848))<=0)
10913 -10916 0
10914 -10917 0
-848 -10916 0
-848 10913 -10917 0
-848 10914 -10919 0
c (0<=(aux1442 - aux1443 + SATLiteral(848)))
-10914 10919 0
-10913 10917 0
848 10919 0
848 -10914 10917 0
848 -10913 10916 0
c ((aux1439 + aux1441 - aux1444)<=0)
10910 -10921 0
10911 -10922 0
10904 -10921 0
10904 10910 -10922 0
10904 10911 -10924 0
10905 -10922 0
10905 10910 -10924 0
10905 10911 -10926 0
c (0<=(aux1439 + aux1441 - aux1444))
-10911 10926 0
-10910 10924 0
-10905 10926 0
-10905 -10911 10924 0
-10905 -10910 10922 0
-10904 10924 0
-10904 -10911 10922 0
-10904 -10910 10921 0
c (( - aux1445 + SATLiteral(820) + SATLiteral(940))<=0)
-940 -10928 0
-820 -10928 0
-820 -940 -10929 0
c (0<=( - aux1445 + SATLiteral(820) + SATLiteral(940)))
940 10929 0
820 10929 0
820 940 10928 0
c (( - aux1446 + SATLiteral(835) + SATLiteral(925))<=0)
-925 -10931 0
-835 -10931 0
-835 -925 -10932 0
c (0<=( - aux1446 + SATLiteral(835) + SATLiteral(925)))
925 10932 0
835 10932 0
835 925 10931 0
c (( - aux1447 + SATLiteral(865) + SATLiteral(910))<=0)
-910 -10934 0
-865 -10934 0
-865 -910 -10935 0
c (0<=( - aux1447 + SATLiteral(865) + SATLiteral(910)))
910 10935 0
865 10935 0
865 910 10934 0
c (( - aux1448 + SATLiteral(880) + SATLiteral(895))<=0)
-895 -10937 0
-880 -10937 0
-880 -895 -10938 0
c (0<=( - aux1448 + SATLiteral(880) + SATLiteral(895)))
895 10938 0
880 10938 0
880 895 10937 0
c ((aux1448 - aux1449 + SATLiteral(850))<=0)
10937 -10940 0
10938 -10941 0
-850 -10940 0
-850 10937 -10941 0
-850 10938 -10943 0
c (0<=(aux1448 - aux1449 + SATLiteral(850)))
-10938 10943 0
-10937 10941 0
850 10943 0
850 -10938 10941 0
850 -10937 10940 0
c ((aux1445 + aux1447 - aux1450)<=0)
10934 -10945 0
10935 -10946 0
10928 -10945 0
10928 10934 -10946 0
10928 10935 -10948 0
10929 -10946 0
10929 10934 -10948 0
10929 10935 -10950 0
c (0<=(aux1445 + aux1447 - aux1450))
-10935 10950 0
-10934 10948 0
-10929 10950 0
-10929 -10935 10948 0
-10929 -10934 10946 0
-10928 10948 0
-10928 -10935 10946 0
-10928 -10934 10945 0
c (( - aux1451 + SATLiteral(822) + SATLiteral(942))<=0)
-942 -10952 0
-822 -10952 0
-822 -942 -10953 0
c (0<=( - aux1451 + SATLiteral(822) + SATLiteral(942)))
942 10953 0
822 10953 0
822 942 10952 0
c (( - aux1452 + SATLiteral(837) + SATLiteral(927))<=0)
-927 -10955 0
-837 -10955 0
-837 -927 -10956 0
c (0<=( - aux1452 + SATLiteral(837) + SATLiteral(927)))
927 10956 0
837 10956 0
837 927 10955 0
c (( - aux1453 + SATLiteral(867) + SATLiteral(912))<=0)
-912 -10958 0
-867 -10958 0
-867 -912 -10959 0
c (0<=( - aux1453 + SATLiteral(867) + SATLiteral(912)))
912 10959 0
867 10959 0
867 912 10958 0
c (( - aux1454 + SATLiteral(882) + SATLiteral(897))<=0)
-897 -10961 0
-882 -10961 0
-882 -897 -10962 0
c (0<=( - aux1454 + SATLiteral(882) + SATLiteral(897)))
897 10962 0
882 10962 0
882 897 10961 0
c ((aux1454 - aux1455 + SATLiteral(852))<=0)
10961 -10964 0
10962 -10965 0
-852 -10964 0
-852 10961 -10965 0
-852 10962 -10967 0
c (0<=(aux1454 - aux1455 + SATLiteral(852)))
-10962 10967 0
-10961 10965 0
852 10967 0
852 -10962 10965 0
852 -10961 10964 0
c ((aux1451 + aux1453 - aux1456)<=0)
10958 -10969 0
10959 -10970 0
10952 -10969 0
10952 10958 -10970 0
10952 10959 -10972 0
10953 -10970 0
10953 10958 -10972 0
10953 10959 -10974 0
c (0<=(aux1451 + aux1453 - aux1456))
-10959 10974 0
-10958 10972 0
-10953 10974 0
-10953 -10959 10972 0
-10953 -10958 10970 0
-10952 10972 0
-10952 -10959 10970 0
-10952 -10958 10969 0
c (( - aux1457 + SATLiteral(824) + SATLiteral(944))<=0)
-944 -10976 0
-824 -10976 0
-824 -944 -10977 0
c (0<=( - aux1457 + SATLiteral(824) + SATLiteral(944)))
944 10977 0
824 10977 0
824 944 10976 0
c (( - aux1458 + SATLiteral(839) + SATLiteral(929))<=0)
-929 -10979 0
-839 -10979 0
-839 -929 -10980 0
c (0<=( - aux1458 + SATLiteral(839) + SATLiteral(929)))
929 10980 0
839 10980 0
839 929 10979 0
c (( - aux1459 + SATLiteral(869) + SATLiteral(914))<=0)
-914 -10982 0
-869 -10982 0
-869 -914 -10983 0
c (0<=( - aux1459 + SATLiteral(869) + SATLiteral(914)))
914 10983 0
869 10983 0
869 914 10982 0
c (( - aux1460 + SATLiteral(884) + SATLiteral(899))<=0)
-899 -10985 0
-884 -10985 0
-884 -899 -10986 0
c (0<=( - aux1460 + SATLiteral(884) + SATLiteral(899)))
899 10986 0
884 10986 0
884 899 10985 0
c ((aux1460 - aux1461 + SATLiteral(854))<=0)
10985 -10988 0
10986 -10989 0
-854 -10988 0
-854 10985 -10989 0
-854 10986 -10991 0
c (0<=(aux1460 - aux1461 + SATLiteral(854)))
-10986 10991 0
-10985 10989 0
854 10991 0
854 -10986 10989 0
854 -10985 10988 0
c ((aux1457 + aux1459 - aux1462)<=0)
10982 -10993 0
10983 -10994 0
10976 -10993 0
10976 10982 -10994 0
10976 10983 -10996 0
10977 -10994 0
10977 10982 -10996 0
10977 10983 -10998 0
c (0<=(aux1457 + aux1459 - aux1462))
-10983 10998 0
-10982 10996 0
-10977 10998 0
-10977 -10983 10996 0
-10977 -10982 10994 0
-10976 10996 0
-10976 -10983 10994 0
-10976 -10982 10993 0
c (( - aux1463 + SATLiteral(826) + SATLiteral(946))<=0)
-946 -11000 0
-826 -11000 0
-826 -946 -11001 0
c (0<=( - aux1463 + SATLiteral(826) + SATLiteral(946)))
946 11001 0
826 11001 0
826 946 11000 0
c (( - aux1464 + SATLiteral(841) + SATLiteral(931))<=0)
-931 -11003 0
-841 -11003 0
-841 -931 -11004 0
c (0<=( - aux1464 + SATLiteral(841) + SATLiteral(931)))
931 11004 0
841 11004 0
841 931 11003 0
c (( - aux1465 + SATLiteral(871) + SATLiteral(916))<=0)
-916 -11006 0
-871 -11006 0
-871 -916 -11007 0
c (0<=( - aux1465 + SATLiteral(871) + SATLiteral(916)))
916 11007 0
871 11007 0
871 916 11006 0
c (( - aux1466 + SATLiteral(886) + SATLiteral(901))<=0)
-901 -11009 0
-886 -11009 0
-886 -901 -11010 0
c (0<=( - aux1466 + SATLiteral(886) + SATLiteral(901)))
901 11010 0
886 11010 0
886 901 11009 0
c ((aux1466 - aux1467 + SATLiteral(856))<=0)
11009 -11012 0
11010 -11013 0
-856 -11012 0
-856 11009 -11013 0
-856 11010 -11015 0
c (0<=(aux1466 - aux1467 + SATLiteral(856)))
-11010 11015 0
-11009 11013 0
856 11015 0
856 -11010 11013 0
856 -11009 11012 0
c ((aux1463 + aux1465 - aux1468)<=0)
11006 -11017 0
11007 -11018 0
11000 -11017 0
11000 11006 -11018 0
11000 11007 -11020 0
11001 -11018 0
11001 11006 -11020 0
11001 11007 -11022 0
c (0<=(aux1463 + aux1465 - aux1468))
-11007 11022 0
-11006 11020 0
-11001 11022 0
-11001 -11007 11020 0
-11001 -11006 11018 0
-11000 11020 0
-11000 -11007 11018 0
-11000 -11006 11017 0
c (( - aux1469 + SATLiteral(-825) + SATLiteral(-945))<=0)
945 -11024 0
825 -11024 0
825 945 -11025 0
c (0<=( - aux1469 + SATLiteral(-825) + SATLiteral(-945)))
-945 11025 0
-825 11025 0
-825 -945 11024 0
c (( - aux1470 + SATLiteral(-840) + SATLiteral(-930))<=0)
930 -11027 0
840 -11027 0
840 930 -11028 0
c (0<=( - aux1470 + SATLiteral(-840) + SATLiteral(-930)))
-930 11028 0
-840 11028 0
-840 -930 11027 0
c (( - aux1471 + SATLiteral(-870) + SATLiteral(-915))<=0)
915 -11030 0
870 -11030 0
870 915 -11031 0
c (0<=( - aux1471 + SATLiteral(-870) + SATLiteral(-915)))
-915 11031 0
-870 11031 0
-870 -915 11030 0
c (( - aux1472 + SATLiteral(-885) + SATLiteral(-900))<=0)
900 -11033 0
885 -11033 0
885 900 -11034 0
c (0<=( - aux1472 + SATLiteral(-885) + SATLiteral(-900)))
-900 11034 0
-885 11034 0
-885 -900 11033 0
c ((aux1472 - aux1473 + SATLiteral(-855))<=0)
11033 -11036 0
11034 -11037 0
855 -11036 0
855 11033 -11037 0
855 11034 -11039 0
c (0<=(aux1472 - aux1473 + SATLiteral(-855)))
-11034 11039 0
-11033 11037 0
-855 11039 0
-855 -11034 11037 0
-855 -11033 11036 0
c ((aux1469 + aux1471 - aux1474)<=0)
11030 -11041 0
11031 -11042 0
11024 -11041 0
11024 11030 -11042 0
11024 11031 -11044 0
11025 -11042 0
11025 11030 -11044 0
11025 11031 -11046 0
c (0<=(aux1469 + aux1471 - aux1474))
-11031 11046 0
-11030 11044 0
-11025 11046 0
-11025 -11031 11044 0
-11025 -11030 11042 0
-11024 11044 0
-11024 -11031 11042 0
-11024 -11030 11041 0
c ((SATLiteral(947) + SATLiteral(1067) - aux1475)<=0)
-1067 -11048 0
-947 -11048 0
-947 -1067 -11049 0
c (0<=(SATLiteral(947) + SATLiteral(1067) - aux1475))
1067 11049 0
947 11049 0
947 1067 11048 0
c ((SATLiteral(962) + SATLiteral(1052) - aux1476)<=0)
-1052 -11051 0
-962 -11051 0
-962 -1052 -11052 0
c (0<=(SATLiteral(962) + SATLiteral(1052) - aux1476))
1052 11052 0
962 11052 0
962 1052 11051 0
c ((SATLiteral(992) + SATLiteral(1037) - aux1477)<=0)
-1037 -11054 0
-992 -11054 0
-992 -1037 -11055 0
c (0<=(SATLiteral(992) + SATLiteral(1037) - aux1477))
1037 11055 0
992 11055 0
992 1037 11054 0
c ((SATLiteral(1007) + SATLiteral(1022) - aux1478)<=0)
-1022 -11057 0
-1007 -11057 0
-1007 -1022 -11058 0
c (0<=(SATLiteral(1007) + SATLiteral(1022) - aux1478))
1022 11058 0
1007 11058 0
1007 1022 11057 0
c ((SATLiteral(977) + aux1478 - aux1479)<=0)
11057 -11060 0
11058 -11061 0
-977 -11060 0
-977 11057 -11061 0
-977 11058 -11063 0
c (0<=(SATLiteral(977) + aux1478 - aux1479))
-11058 11063 0
-11057 11061 0
977 11063 0
977 -11058 11061 0
977 -11057 11060 0
c ((aux1475 + aux1477 - aux1480)<=0)
11054 -11065 0
11055 -11066 0
11048 -11065 0
11048 11054 -11066 0
11048 11055 -11068 0
11049 -11066 0
11049 11054 -11068 0
11049 11055 -11070 0
c (0<=(aux1475 + aux1477 - aux1480))
-11055 11070 0
-11054 11068 0
-11049 11070 0
-11049 -11055 11068 0
-11049 -11054 11066 0
-11048 11068 0
-11048 -11055 11066 0
-11048 -11054 11065 0
c ((SATLiteral(949) + SATLiteral(1069) - aux1481)<=0)
-1069 -11072 0
-949 -11072 0
-949 -1069 -11073 0
c (0<=(SATLiteral(949) + SATLiteral(1069) - aux1481))
1069 11073 0
949 11073 0
949 1069 11072 0
c ((SATLiteral(964) + SATLiteral(1054) - aux1482)<=0)
-1054 -11075 0
-964 -11075 0
-964 -1054 -11076 0
c (0<=(SATLiteral(964) + SATLiteral(1054) - aux1482))
1054 11076 0
964 11076 0
964 1054 11075 0
c ((SATLiteral(994) + SATLiteral(1039) - aux1483)<=0)
-1039 -11078 0
-994 -11078 0
-994 -1039 -11079 0
c (0<=(SATLiteral(994) + SATLiteral(1039) - aux1483))
1039 11079 0
994 11079 0
994 1039 11078 0
c ((SATLiteral(1009) + SATLiteral(1024) - aux1484)<=0)
-1024 -11081 0
-1009 -11081 0
-1009 -1024 -11082 0
c (0<=(SATLiteral(1009) + SATLiteral(1024) - aux1484))
1024 11082 0
1009 11082 0
1009 1024 11081 0
c ((SATLiteral(979) + aux1484 - aux1485)<=0)
11081 -11084 0
11082 -11085 0
-979 -11084 0
-979 11081 -11085 0
-979 11082 -11087 0
c (0<=(SATLiteral(979) + aux1484 - aux1485))
-11082 11087 0
-11081 11085 0
979 11087 0
979 -11082 11085 0
979 -11081 11084 0
c ((aux1481 + aux1483 - aux1486)<=0)
11078 -11089 0
11079 -11090 0
11072 -11089 0
11072 11078 -11090 0
11072 11079 -11092 0
11073 -11090 0
11073 11078 -11092 0
11073 11079 -11094 0
c (0<=(aux1481 + aux1483 - aux1486))
-11079 11094 0
-11078 11092 0
-11073 11094 0
-11073 -11079 11092 0
-11073 -11078 11090 0
-11072 11092 0
-11072 -11079 11090 0
-11072 -11078 11089 0
c ((SATLiteral(951) + SATLiteral(1071) - aux1487)<=0)
-1071 -11096 0
-951 -11096 0
-951 -1071 -11097 0
c (0<=(SATLiteral(951) + SATLiteral(1071) - aux1487))
1071 11097 0
951 11097 0
951 1071 11096 0
c ((SATLiteral(966) + SATLiteral(1056) - aux1488)<=0)
-1056 -11099 0
-966 -11099 0
-966 -1056 -11100 0
c (0<=(SATLiteral(966) + SATLiteral(1056) - aux1488))
1056 11100 0
966 11100 0
966 1056 11099 0
c ((SATLiteral(996) + SATLiteral(1041) - aux1489)<=0)
-1041 -11102 0
-996 -11102 0
-996 -1041 -11103 0
c (0<=(SATLiteral(996) + SATLiteral(1041) - aux1489))
1041 11103 0
996 11103 0
996 1041 11102 0
c ((SATLiteral(1011) + SATLiteral(1026) - aux1490)<=0)
-1026 -11105 0
-1011 -11105 0
-1011 -1026 -11106 0
c (0<=(SATLiteral(1011) + SATLiteral(1026) - aux1490))
1026 11106 0
1011 11106 0
1011 1026 11105 0
c ((SATLiteral(981) + aux1490 - aux1491)<=0)
11105 -11108 0
11106 -11109 0
-981 -11108 0
-981 11105 -11109 0
-981 11106 -11111 0
c (0<=(SATLiteral(981) + aux1490 - aux1491))
-11106 11111 0
-11105 11109 0
981 11111 0
981 -11106 11109 0
981 -11105 11108 0
c ((aux1487 + aux1489 - aux1492)<=0)
11102 -11113 0
11103 -11114 0
11096 -11113 0
11096 11102 -11114 0
11096 11103 -11116 0
11097 -11114 0
11097 11102 -11116 0
11097 11103 -11118 0
c (0<=(aux1487 + aux1489 - aux1492))
-11103 11118 0
-11102 11116 0
-11097 11118 0
-11097 -11103 11116 0
-11097 -11102 11114 0
-11096 11116 0
-11096 -11103 11114 0
-11096 -11102 11113 0
c ((SATLiteral(953) + SATLiteral(1073) - aux1493)<=0)
-1073 -11120 0
-953 -11120 0
-953 -1073 -11121 0
c (0<=(SATLiteral(953) + SATLiteral(1073) - aux1493))
1073 11121 0
953 11121 0
953 1073 11120 0
c ((SATLiteral(968) + SATLiteral(1058) - aux1494)<=0)
-1058 -11123 0
-968 -11123 0
-968 -1058 -11124 0
c (0<=(SATLiteral(968) + SATLiteral(1058) - aux1494))
1058 11124 0
968 11124 0
968 1058 11123 0
c ((SATLiteral(998) + SATLiteral(1043) - aux1495)<=0)
-1043 -11126 0
-998 -11126 0
-998 -1043 -11127 0
c (0<=(SATLiteral(998) + SATLiteral(1043) - aux1495))
1043 11127 0
998 11127 0
998 1043 11126 0
c ((SATLiteral(1013) + SATLiteral(1028) - aux1496)<=0)
-1028 -11129 0
-1013 -11129 0
-1013 -1028 -11130 0
c (0<=(SATLiteral(1013) + SATLiteral(1028) - aux1496))
1028 11130 0
1013 11130 0
1013 1028 11129 0
c ((SATLiteral(983) + aux1496 - aux1497)<=0)
11129 -11132 0
11130 -11133 0
-983 -11132 0
-983 11129 -11133 0
-983 11130 -11135 0
c (0<=(SATLiteral(983) + aux1496 - aux1497))
-11130 11135 0
-11129 11133 0
983 11135 0
983 -11130 11133 0
983 -11129 11132 0
c ((aux1493 + aux1495 - aux1498)<=0)
11126 -11137 0
11127 -11138 0
11120 -11137 0
11120 11126 -11138 0
11120 11127 -11140 0
11121 -11138 0
11121 11126 -11140 0
11121 11127 -11142 0
c (0<=(aux1493 + aux1495 - aux1498))
-11127 11142 0
-11126 11140 0
-11121 11142 0
-11121 -11127 11140 0
-11121 -11126 11138 0
-11120 11140 0
-11120 -11127 11138 0
-11120 -11126 11137 0
c ((SATLiteral(955) + SATLiteral(1075) - aux1499)<=0)
-1075 -11144 0
-955 -11144 0
-955 -1075 -11145 0
c (0<=(SATLiteral(955) + SATLiteral(1075) - aux1499))
1075 11145 0
955 11145 0
955 1075 11144 0
c ((SATLiteral(970) + SATLiteral(1060) - aux1500)<=0)
-1060 -11147 0
-970 -11147 0
-970 -1060 -11148 0
c (0<=(SATLiteral(970) + SATLiteral(1060) - aux1500))
1060 11148 0
970 11148 0
970 1060 11147 0
c ((SATLiteral(1000) + SATLiteral(1045) - aux1501)<=0)
-1045 -11150 0
-1000 -11150 0
-1000 -1045 -11151 0
c (0<=(SATLiteral(1000) + SATLiteral(1045) - aux1501))
1045 11151 0
1000 11151 0
1000 1045 11150 0
c ((SATLiteral(1015) + SATLiteral(1030) - aux1502)<=0)
-1030 -11153 0
-1015 -11153 0
-1015 -1030 -11154 0
c (0<=(SATLiteral(1015) + SATLiteral(1030) - aux1502))
1030 11154 0
1015 11154 0
1015 1030 11153 0
c ((SATLiteral(985) + aux1502 - aux1503)<=0)
11153 -11156 0
11154 -11157 0
-985 -11156 0
-985 11153 -11157 0
-985 11154 -11159 0
c (0<=(SATLiteral(985) + aux1502 - aux1503))
-11154 11159 0
-11153 11157 0
985 11159 0
985 -11154 11157 0
985 -11153 11156 0
c ((aux1499 + aux1501 - aux1504)<=0)
11150 -11161 0
11151 -11162 0
11144 -11161 0
11144 11150 -11162 0
11144 11151 -11164 0
11145 -11162 0
11145 11150 -11164 0
11145 11151 -11166 0
c (0<=(aux1499 + aux1501 - aux1504))
-11151 11166 0
-11150 11164 0
-11145 11166 0
-11145 -11151 11164 0
-11145 -11150 11162 0
-11144 11164 0
-11144 -11151 11162 0
-11144 -11150 11161 0
c ((SATLiteral(957) + SATLiteral(1077) - aux1505)<=0)
-1077 -11168 0
-957 -11168 0
-957 -1077 -11169 0
c (0<=(SATLiteral(957) + SATLiteral(1077) - aux1505))
1077 11169 0
957 11169 0
957 1077 11168 0
c ((SATLiteral(972) + SATLiteral(1062) - aux1506)<=0)
-1062 -11171 0
-972 -11171 0
-972 -1062 -11172 0
c (0<=(SATLiteral(972) + SATLiteral(1062) - aux1506))
1062 11172 0
972 11172 0
972 1062 11171 0
c ((SATLiteral(1002) + SATLiteral(1047) - aux1507)<=0)
-1047 -11174 0
-1002 -11174 0
-1002 -1047 -11175 0
c (0<=(SATLiteral(1002) + SATLiteral(1047) - aux1507))
1047 11175 0
1002 11175 0
1002 1047 11174 0
c ((SATLiteral(1017) + SATLiteral(1032) - aux1508)<=0)
-1032 -11177 0
-1017 -11177 0
-1017 -1032 -11178 0
c (0<=(SATLiteral(1017) + SATLiteral(1032) - aux1508))
1032 11178 0
1017 11178 0
1017 1032 11177 0
c ((SATLiteral(987) + aux1508 - aux1509)<=0)
11177 -11180 0
11178 -11181 0
-987 -11180 0
-987 11177 -11181 0
-987 11178 -11183 0
c (0<=(SATLiteral(987) + aux1508 - aux1509))
-11178 11183 0
-11177 11181 0
987 11183 0
987 -11178 11181 0
987 -11177 11180 0
c ((aux1505 + aux1507 - aux1510)<=0)
11174 -11185 0
11175 -11186 0
11168 -11185 0
11168 11174 -11186 0
11168 11175 -11188 0
11169 -11186 0
11169 11174 -11188 0
11169 11175 -11190 0
c (0<=(aux1505 + aux1507 - aux1510))
-11175 11190 0
-11174 11188 0
-11169 11190 0
-11169 -11175 11188 0
-11169 -11174 11186 0
-11168 11188 0
-11168 -11175 11186 0
-11168 -11174 11185 0
c ((SATLiteral(959) + SATLiteral(1079) - aux1511)<=0)
-1079 -11192 0
-959 -11192 0
-959 -1079 -11193 0
c (0<=(SATLiteral(959) + SATLiteral(1079) - aux1511))
1079 11193 0
959 11193 0
959 1079 11192 0
c ((SATLiteral(974) + SATLiteral(1064) - aux1512)<=0)
-1064 -11195 0
-974 -11195 0
-974 -1064 -11196 0
c (0<=(SATLiteral(974) + SATLiteral(1064) - aux1512))
1064 11196 0
974 11196 0
974 1064 11195 0
c ((SATLiteral(1004) + SATLiteral(1049) - aux1513)<=0)
-1049 -11198 0
-1004 -11198 0
-1004 -1049 -11199 0
c (0<=(SATLiteral(1004) + SATLiteral(1049) - aux1513))
1049 11199 0
1004 11199 0
1004 1049 11198 0
c ((SATLiteral(1019) + SATLiteral(1034) - aux1514)<=0)
-1034 -11201 0
-1019 -11201 0
-1019 -1034 -11202 0
c (0<=(SATLiteral(1019) + SATLiteral(1034) - aux1514))
1034 11202 0
1019 11202 0
1019 1034 11201 0
c ((SATLiteral(989) + aux1514 - aux1515)<=0)
11201 -11204 0
11202 -11205 0
-989 -11204 0
-989 11201 -11205 0
-989 11202 -11207 0
c (0<=(SATLiteral(989) + aux1514 - aux1515))
-11202 11207 0
-11201 11205 0
989 11207 0
989 -11202 11205 0
989 -11201 11204 0
c ((aux1511 + aux1513 - aux1516)<=0)
11198 -11209 0
11199 -11210 0
11192 -11209 0
11192 11198 -11210 0
11192 11199 -11212 0
11193 -11210 0
11193 11198 -11212 0
11193 11199 -11214 0
c (0<=(aux1511 + aux1513 - aux1516))
-11199 11214 0
-11198 11212 0
-11193 11214 0
-11193 -11199 11212 0
-11193 -11198 11210 0
-11192 11212 0
-11192 -11199 11210 0
-11192 -11198 11209 0
c ((SATLiteral(961) + SATLiteral(1081) - aux1517)<=0)
-1081 -11216 0
-961 -11216 0
-961 -1081 -11217 0
c (0<=(SATLiteral(961) + SATLiteral(1081) - aux1517))
1081 11217 0
961 11217 0
961 1081 11216 0
c ((SATLiteral(976) + SATLiteral(1066) - aux1518)<=0)
-1066 -11219 0
-976 -11219 0
-976 -1066 -11220 0
c (0<=(SATLiteral(976) + SATLiteral(1066) - aux1518))
1066 11220 0
976 11220 0
976 1066 11219 0
c ((SATLiteral(1006) + SATLiteral(1051) - aux1519)<=0)
-1051 -11222 0
-1006 -11222 0
-1006 -1051 -11223 0
c (0<=(SATLiteral(1006) + SATLiteral(1051) - aux1519))
1051 11223 0
1006 11223 0
1006 1051 11222 0
c ((SATLiteral(1021) + SATLiteral(1036) - aux1520)<=0)
-1036 -11225 0
-1021 -11225 0
-1021 -1036 -11226 0
c (0<=(SATLiteral(1021) + SATLiteral(1036) - aux1520))
1036 11226 0
1021 11226 0
1021 1036 11225 0
c ((SATLiteral(991) + aux1520 - aux1521)<=0)
11225 -11228 0
11226 -11229 0
-991 -11228 0
-991 11225 -11229 0
-991 11226 -11231 0
c (0<=(SATLiteral(991) + aux1520 - aux1521))
-11226 11231 0
-11225 11229 0
991 11231 0
991 -11226 11229 0
991 -11225 11228 0
c ((aux1517 + aux1519 - aux1522)<=0)
11222 -11233 0
11223 -11234 0
11216 -11233 0
11216 11222 -11234 0
11216 11223 -11236 0
11217 -11234 0
11217 11222 -11236 0
11217 11223 -11238 0
c (0<=(aux1517 + aux1519 - aux1522))
-11223 11238 0
-11222 11236 0
-11217 11238 0
-11217 -11223 11236 0
-11217 -11222 11234 0
-11216 11236 0
-11216 -11223 11234 0
-11216 -11222 11233 0
c ((SATLiteral(-960) + SATLiteral(-1080) - aux1523)<=0)
1080 -11240 0
960 -11240 0
960 1080 -11241 0
c (0<=(SATLiteral(-960) + SATLiteral(-1080) - aux1523))
-1080 11241 0
-960 11241 0
-960 -1080 11240 0
c ((SATLiteral(-975) + SATLiteral(-1065) - aux1524)<=0)
1065 -11243 0
975 -11243 0
975 1065 -11244 0
c (0<=(SATLiteral(-975) + SATLiteral(-1065) - aux1524))
-1065 11244 0
-975 11244 0
-975 -1065 11243 0
c ((SATLiteral(-1005) + SATLiteral(-1050) - aux1525)<=0)
1050 -11246 0
1005 -11246 0
1005 1050 -11247 0
c (0<=(SATLiteral(-1005) + SATLiteral(-1050) - aux1525))
-1050 11247 0
-1005 11247 0
-1005 -1050 11246 0
c ((SATLiteral(-1020) + SATLiteral(-1035) - aux1526)<=0)
1035 -11249 0
1020 -11249 0
1020 1035 -11250 0
c (0<=(SATLiteral(-1020) + SATLiteral(-1035) - aux1526))
-1035 11250 0
-1020 11250 0
-1020 -1035 11249 0
c ((SATLiteral(-990) + aux1526 - aux1527)<=0)
11249 -11252 0
11250 -11253 0
990 -11252 0
990 11249 -11253 0
990 11250 -11255 0
c (0<=(SATLiteral(-990) + aux1526 - aux1527))
-11250 11255 0
-11249 11253 0
-990 11255 0
-990 -11250 11253 0
-990 -11249 11252 0
c ((aux1523 + aux1525 - aux1528)<=0)
11246 -11257 0
11247 -11258 0
11240 -11257 0
11240 11246 -11258 0
11240 11247 -11260 0
11241 -11258 0
11241 11246 -11260 0
11241 11247 -11262 0
c (0<=(aux1523 + aux1525 - aux1528))
-11247 11262 0
-11246 11260 0
-11241 11262 0
-11241 -11247 11260 0
-11241 -11246 11258 0
-11240 11260 0
-11240 -11247 11258 0
-11240 -11246 11257 0
c (( - aux1529 + SATLiteral(1082) + SATLiteral(1202))<=0)
-1202 -11264 0
-1082 -11264 0
-1082 -1202 -11265 0
c (0<=( - aux1529 + SATLiteral(1082) + SATLiteral(1202)))
1202 11265 0
1082 11265 0
1082 1202 11264 0
c (( - aux1530 + SATLiteral(1097) + SATLiteral(1187))<=0)
-1187 -11267 0
-1097 -11267 0
-1097 -1187 -11268 0
c (0<=( - aux1530 + SATLiteral(1097) + SATLiteral(1187)))
1187 11268 0
1097 11268 0
1097 1187 11267 0
c (( - aux1531 + SATLiteral(1127) + SATLiteral(1172))<=0)
-1172 -11270 0
-1127 -11270 0
-1127 -1172 -11271 0
c (0<=( - aux1531 + SATLiteral(1127) + SATLiteral(1172)))
1172 11271 0
1127 11271 0
1127 1172 11270 0
c (( - aux1532 + SATLiteral(1142) + SATLiteral(1157))<=0)
-1157 -11273 0
-1142 -11273 0
-1142 -1157 -11274 0
c (0<=( - aux1532 + SATLiteral(1142) + SATLiteral(1157)))
1157 11274 0
1142 11274 0
1142 1157 11273 0
c ((aux1532 - aux1533 + SATLiteral(1112))<=0)
11273 -11276 0
11274 -11277 0
-1112 -11276 0
-1112 11273 -11277 0
-1112 11274 -11279 0
c (0<=(aux1532 - aux1533 + SATLiteral(1112)))
-11274 11279 0
-11273 11277 0
1112 11279 0
1112 -11274 11277 0
1112 -11273 11276 0
c ((aux1529 + aux1531 - aux1534)<=0)
11270 -11281 0
11271 -11282 0
11264 -11281 0
11264 11270 -11282 0
11264 11271 -11284 0
11265 -11282 0
11265 11270 -11284 0
11265 11271 -11286 0
c (0<=(aux1529 + aux1531 - aux1534))
-11271 11286 0
-11270 11284 0
-11265 11286 0
-11265 -11271 11284 0
-11265 -11270 11282 0
-11264 11284 0
-11264 -11271 11282 0
-11264 -11270 11281 0
c (( - aux1535 + SATLiteral(1084) + SATLiteral(1204))<=0)
-1204 -11288 0
-1084 -11288 0
-1084 -1204 -11289 0
c (0<=( - aux1535 + SATLiteral(1084) + SATLiteral(1204)))
1204 11289 0
1084 11289 0
1084 1204 11288 0
c (( - aux1536 + SATLiteral(1099) + SATLiteral(1189))<=0)
-1189 -11291 0
-1099 -11291 0
-1099 -1189 -11292 0
c (0<=( - aux1536 + SATLiteral(1099) + SATLiteral(1189)))
1189 11292 0
1099 11292 0
1099 1189 11291 0
c (( - aux1537 + SATLiteral(1129) + SATLiteral(1174))<=0)
-1174 -11294 0
-1129 -11294 0
-1129 -1174 -11295 0
c (0<=( - aux1537 + SATLiteral(1129) + SATLiteral(1174)))
1174 11295 0
1129 11295 0
1129 1174 11294 0
c (( - aux1538 + SATLiteral(1144) + SATLiteral(1159))<=0)
-1159 -11297 0
-1144 -11297 0
-1144 -1159 -11298 0
c (0<=( - aux1538 + SATLiteral(1144) + SATLiteral(1159)))
1159 11298 0
1144 11298 0
1144 1159 11297 0
c ((aux1538 - aux1539 + SATLiteral(1114))<=0)
11297 -11300 0
11298 -11301 0
-1114 -11300 0
-1114 11297 -11301 0
-1114 11298 -11303 0
c (0<=(aux1538 - aux1539 + SATLiteral(1114)))
-11298 11303 0
-11297 11301 0
1114 11303 0
1114 -11298 11301 0
1114 -11297 11300 0
c ((aux1535 + aux1537 - aux1540)<=0)
11294 -11305 0
11295 -11306 0
11288 -11305 0
11288 11294 -11306 0
11288 11295 -11308 0
11289 -11306 0
11289 11294 -11308 0
11289 11295 -11310 0
c (0<=(aux1535 + aux1537 - aux1540))
-11295 11310 0
-11294 11308 0
-11289 11310 0
-11289 -11295 11308 0
-11289 -11294 11306 0
-11288 11308 0
-11288 -11295 11306 0
-11288 -11294 11305 0
c (( - aux1541 + SATLiteral(1086) + SATLiteral(1206))<=0)
-1206 -11312 0
-1086 -11312 0
-1086 -1206 -11313 0
c (0<=( - aux1541 + SATLiteral(1086) + SATLiteral(1206)))
1206 11313 0
1086 11313 0
1086 1206 11312 0
c (( - aux1542 + SATLiteral(1101) + SATLiteral(1191))<=0)
-1191 -11315 0
-1101 -11315 0
-1101 -1191 -11316 0
c (0<=( - aux1542 + SATLiteral(1101) + SATLiteral(1191)))
1191 11316 0
1101 11316 0
1101 1191 11315 0
c (( - aux1543 + SATLiteral(1131) + SATLiteral(1176))<=0)
-1176 -11318 0
-1131 -11318 0
-1131 -1176 -11319 0
c (0<=( - aux1543 + SATLiteral(1131) + SATLiteral(1176)))
1176 11319 0
1131 11319 0
1131 1176 11318 0
c (( - aux1544 + SATLiteral(1146) + SATLiteral(1161))<=0)
-1161 -11321 0
-1146 -11321 0
-1146 -1161 -11322 0
c (0<=( - aux1544 + SATLiteral(1146) + SATLiteral(1161)))
1161 11322 0
1146 11322 0
1146 1161 11321 0
c ((aux1544 - aux1545 + SATLiteral(1116))<=0)
11321 -11324 0
11322 -11325 0
-1116 -11324 0
-1116 11321 -11325 0
-1116 11322 -11327 0
c (0<=(aux1544 - aux1545 + SATLiteral(1116)))
-11322 11327 0
-11321 11325 0
1116 11327 0
1116 -11322 11325 0
1116 -11321 11324 0
c ((aux1541 + aux1543 - aux1546)<=0)
11318 -11329 0
11319 -11330 0
11312 -11329 0
11312 11318 -11330 0
11312 11319 -11332 0
11313 -11330 0
11313 11318 -11332 0
11313 11319 -11334 0
c (0<=(aux1541 + aux1543 - aux1546))
-11319 11334 0
-11318 11332 0
-11313 11334 0
-11313 -11319 11332 0
-11313 -11318 11330 0
-11312 11332 0
-11312 -11319 11330 0
-11312 -11318 11329 0
c (( - aux1547 + SATLiteral(1088) + SATLiteral(1208))<=0)
-1208 -11336 0
-1088 -11336 0
-1088 -1208 -11337 0
c (0<=( - aux1547 + SATLiteral(1088) + SATLiteral(1208)))
1208 11337 0
1088 11337 0
1088 1208 11336 0
c (( - aux1548 + SATLiteral(1103) + SATLiteral(1193))<=0)
-1193 -11339 0
-1103 -11339 0
-1103 -1193 -11340 0
c (0<=( - aux1548 + SATLiteral(1103) + SATLiteral(1193)))
1193 11340 0
1103 11340 0
1103 1193 11339 0
c (( - aux1549 + SATLiteral(1133) + SATLiteral(1178))<=0)
-1178 -11342 0
-1133 -11342 0
-1133 -1178 -11343 0
c (0<=( - aux1549 + SATLiteral(1133) + SATLiteral(1178)))
1178 11343 0
1133 11343 0
1133 1178 11342 0
c (( - aux1550 + SATLiteral(1148) + SATLiteral(1163))<=0)
-1163 -11345 0
-1148 -11345 0
-1148 -1163 -11346 0
c (0<=( - aux1550 + SATLiteral(1148) + SATLiteral(1163)))
1163 11346 0
1148 11346 0
1148 1163 11345 0
c ((aux1550 - aux1551 + SATLiteral(1118))<=0)
11345 -11348 0
11346 -11349 0
-1118 -11348 0
-1118 11345 -11349 0
-1118 11346 -11351 0
c (0<=(aux1550 - aux1551 + SATLiteral(1118)))
-11346 11351 0
-11345 11349 0
1118 11351 0
1118 -11346 11349 0
1118 -11345 11348 0
c ((aux1547 + aux1549 - aux1552)<=0)
11342 -11353 0
11343 -11354 0
11336 -11353 0
11336 11342 -11354 0
11336 11343 -11356 0
11337 -11354 0
11337 11342 -11356 0
11337 11343 -11358 0
c (0<=(aux1547 + aux1549 - aux1552))
-11343 11358 0
-11342 11356 0
-11337 11358 0
-11337 -11343 11356 0
-11337 -11342 11354 0
-11336 11356 0
-11336 -11343 11354 0
-11336 -11342 11353 0
c (( - aux1553 + SATLiteral(1090) + SATLiteral(1210))<=0)
-1210 -11360 0
-1090 -11360 0
-1090 -1210 -11361 0
c (0<=( - aux1553 + SATLiteral(1090) + SATLiteral(1210)))
1210 11361 0
1090 11361 0
1090 1210 11360 0
c (( - aux1554 + SATLiteral(1105) + SATLiteral(1195))<=0)
-1195 -11363 0
-1105 -11363 0
-1105 -1195 -11364 0
c (0<=( - aux1554 + SATLiteral(1105) + SATLiteral(1195)))
1195 11364 0
1105 11364 0
1105 1195 11363 0
c (( - aux1555 + SATLiteral(1135) + SATLiteral(1180))<=0)
-1180 -11366 0
-1135 -11366 0
-1135 -1180 -11367 0
c (0<=( - aux1555 + SATLiteral(1135) + SATLiteral(1180)))
1180 11367 0
1135 11367 0
1135 1180 11366 0
c (( - aux1556 + SATLiteral(1150) + SATLiteral(1165))<=0)
-1165 -11369 0
-1150 -11369 0
-1150 -1165 -11370 0
c (0<=( - aux1556 + SATLiteral(1150) + SATLiteral(1165)))
1165 11370 0
1150 11370 0
1150 1165 11369 0
c ((aux1556 - aux1557 + SATLiteral(1120))<=0)
11369 -11372 0
11370 -11373 0
-1120 -11372 0
-1120 11369 -11373 0
-1120 11370 -11375 0
c (0<=(aux1556 - aux1557 + SATLiteral(1120)))
-11370 11375 0
-11369 11373 0
1120 11375 0
1120 -11370 11373 0
1120 -11369 11372 0
c ((aux1553 + aux1555 - aux1558)<=0)
11366 -11377 0
11367 -11378 0
11360 -11377 0
11360 11366 -11378 0
11360 11367 -11380 0
11361 -11378 0
11361 11366 -11380 0
11361 11367 -11382 0
c (0<=(aux1553 + aux1555 - aux1558))
-11367 11382 0
-11366 11380 0
-11361 11382 0
-11361 -11367 11380 0
-11361 -11366 11378 0
-11360 11380 0
-11360 -11367 11378 0
-11360 -11366 11377 0
c (( - aux1559 + SATLiteral(1092) + SATLiteral(1212))<=0)
-1212 -11384 0
-1092 -11384 0
-1092 -1212 -11385 0
c (0<=( - aux1559 + SATLiteral(1092) + SATLiteral(1212)))
1212 11385 0
1092 11385 0
1092 1212 11384 0
c (( - aux1560 + SATLiteral(1107) + SATLiteral(1197))<=0)
-1197 -11387 0
-1107 -11387 0
-1107 -1197 -11388 0
c (0<=( - aux1560 + SATLiteral(1107) + SATLiteral(1197)))
1197 11388 0
1107 11388 0
1107 1197 11387 0
c (( - aux1561 + SATLiteral(1137) + SATLiteral(1182))<=0)
-1182 -11390 0
-1137 -11390 0
-1137 -1182 -11391 0
c (0<=( - aux1561 + SATLiteral(1137) + SATLiteral(1182)))
1182 11391 0
1137 11391 0
1137 1182 11390 0
c (( - aux1562 + SATLiteral(1152) + SATLiteral(1167))<=0)
-1167 -11393 0
-1152 -11393 0
-1152 -1167 -11394 0
c (0<=( - aux1562 + SATLiteral(1152) + SATLiteral(1167)))
1167 11394 0
1152 11394 0
1152 1167 11393 0
c ((aux1562 - aux1563 + SATLiteral(1122))<=0)
11393 -11396 0
11394 -11397 0
-1122 -11396 0
-1122 11393 -11397 0
-1122 11394 -11399 0
c (0<=(aux1562 - aux1563 + SATLiteral(1122)))
-11394 11399 0
-11393 11397 0
1122 11399 0
1122 -11394 11397 0
1122 -11393 11396 0
c ((aux1559 + aux1561 - aux1564)<=0)
11390 -11401 0
11391 -11402 0
11384 -11401 0
11384 11390 -11402 0
11384 11391 -11404 0
11385 -11402 0
11385 11390 -11404 0
11385 11391 -11406 0
c (0<=(aux1559 + aux1561 - aux1564))
-11391 11406 0
-11390 11404 0
-11385 11406 0
-11385 -11391 11404 0
-11385 -11390 11402 0
-11384 11404 0
-11384 -11391 11402 0
-11384 -11390 11401 0
c (( - aux1565 + SATLiteral(1094) + SATLiteral(1214))<=0)
-1214 -11408 0
-1094 -11408 0
-1094 -1214 -11409 0
c (0<=( - aux1565 + SATLiteral(1094) + SATLiteral(1214)))
1214 11409 0
1094 11409 0
1094 1214 11408 0
c (( - aux1566 + SATLiteral(1109) + SATLiteral(1199))<=0)
-1199 -11411 0
-1109 -11411 0
-1109 -1199 -11412 0
c (0<=( - aux1566 + SATLiteral(1109) + SATLiteral(1199)))
1199 11412 0
1109 11412 0
1109 1199 11411 0
c (( - aux1567 + SATLiteral(1139) + SATLiteral(1184))<=0)
-1184 -11414 0
-1139 -11414 0
-1139 -1184 -11415 0
c (0<=( - aux1567 + SATLiteral(1139) + SATLiteral(1184)))
1184 11415 0
1139 11415 0
1139 1184 11414 0
c (( - aux1568 + SATLiteral(1154) + SATLiteral(1169))<=0)
-1169 -11417 0
-1154 -11417 0
-1154 -1169 -11418 0
c (0<=( - aux1568 + SATLiteral(1154) + SATLiteral(1169)))
1169 11418 0
1154 11418 0
1154 1169 11417 0
c ((aux1568 - aux1569 + SATLiteral(1124))<=0)
11417 -11420 0
11418 -11421 0
-1124 -11420 0
-1124 11417 -11421 0
-1124 11418 -11423 0
c (0<=(aux1568 - aux1569 + SATLiteral(1124)))
-11418 11423 0
-11417 11421 0
1124 11423 0
1124 -11418 11421 0
1124 -11417 11420 0
c ((aux1565 + aux1567 - aux1570)<=0)
11414 -11425 0
11415 -11426 0
11408 -11425 0
11408 11414 -11426 0
11408 11415 -11428 0
11409 -11426 0
11409 11414 -11428 0
11409 11415 -11430 0
c (0<=(aux1565 + aux1567 - aux1570))
-11415 11430 0
-11414 11428 0
-11409 11430 0
-11409 -11415 11428 0
-11409 -11414 11426 0
-11408 11428 0
-11408 -11415 11426 0
-11408 -11414 11425 0
c (( - aux1571 + SATLiteral(1096) + SATLiteral(1216))<=0)
-1216 -11432 0
-1096 -11432 0
-1096 -1216 -11433 0
c (0<=( - aux1571 + SATLiteral(1096) + SATLiteral(1216)))
1216 11433 0
1096 11433 0
1096 1216 11432 0
c (( - aux1572 + SATLiteral(1111) + SATLiteral(1201))<=0)
-1201 -11435 0
-1111 -11435 0
-1111 -1201 -11436 0
c (0<=( - aux1572 + SATLiteral(1111) + SATLiteral(1201)))
1201 11436 0
1111 11436 0
1111 1201 11435 0
c (( - aux1573 + SATLiteral(1141) + SATLiteral(1186))<=0)
-1186 -11438 0
-1141 -11438 0
-1141 -1186 -11439 0
c (0<=( - aux1573 + SATLiteral(1141) + SATLiteral(1186)))
1186 11439 0
1141 11439 0
1141 1186 11438 0
c (( - aux1574 + SATLiteral(1156) + SATLiteral(1171))<=0)
-1171 -11441 0
-1156 -11441 0
-1156 -1171 -11442 0
c (0<=( - aux1574 + SATLiteral(1156) + SATLiteral(1171)))
1171 11442 0
1156 11442 0
1156 1171 11441 0
c ((aux1574 - aux1575 + SATLiteral(1126))<=0)
11441 -11444 0
11442 -11445 0
-1126 -11444 0
-1126 11441 -11445 0
-1126 11442 -11447 0
c (0<=(aux1574 - aux1575 + SATLiteral(1126)))
-11442 11447 0
-11441 11445 0
1126 11447 0
1126 -11442 11445 0
1126 -11441 11444 0
c ((aux1571 + aux1573 - aux1576)<=0)
11438 -11449 0
11439 -11450 0
11432 -11449 0
11432 11438 -11450 0
11432 11439 -11452 0
11433 -11450 0
11433 11438 -11452 0
11433 11439 -11454 0
c (0<=(aux1571 + aux1573 - aux1576))
-11439 11454 0
-11438 11452 0
-11433 11454 0
-11433 -11439 11452 0
-11433 -11438 11450 0
-11432 11452 0
-11432 -11439 11450 0
-11432 -11438 11449 0
c (( - aux1577 + SATLiteral(-1095) + SATLiteral(-1215))<=0)
1215 -11456 0
1095 -11456 0
1095 1215 -11457 0
c (0<=( - aux1577 + SATLiteral(-1095) + SATLiteral(-1215)))
-1215 11457 0
-1095 11457 0
-1095 -1215 11456 0
c (( - aux1578 + SATLiteral(-1110) + SATLiteral(-1200))<=0)
1200 -11459 0
1110 -11459 0
1110 1200 -11460 0
c (0<=( - aux1578 + SATLiteral(-1110) + SATLiteral(-1200)))
-1200 11460 0
-1110 11460 0
-1110 -1200 11459 0
c (( - aux1579 + SATLiteral(-1140) + SATLiteral(-1185))<=0)
1185 -11462 0
1140 -11462 0
1140 1185 -11463 0
c (0<=( - aux1579 + SATLiteral(-1140) + SATLiteral(-1185)))
-1185 11463 0
-1140 11463 0
-1140 -1185 11462 0
c (( - aux1580 + SATLiteral(-1155) + SATLiteral(-1170))<=0)
1170 -11465 0
1155 -11465 0
1155 1170 -11466 0
c (0<=( - aux1580 + SATLiteral(-1155) + SATLiteral(-1170)))
-1170 11466 0
-1155 11466 0
-1155 -1170 11465 0
c ((aux1580 - aux1581 + SATLiteral(-1125))<=0)
11465 -11468 0
11466 -11469 0
1125 -11468 0
1125 11465 -11469 0
1125 11466 -11471 0
c (0<=(aux1580 - aux1581 + SATLiteral(-1125)))
-11466 11471 0
-11465 11469 0
-1125 11471 0
-1125 -11466 11469 0
-1125 -11465 11468 0
c ((aux1577 + aux1579 - aux1582)<=0)
11462 -11473 0
11463 -11474 0
11456 -11473 0
11456 11462 -11474 0
11456 11463 -11476 0
11457 -11474 0
11457 11462 -11476 0
11457 11463 -11478 0
c (0<=(aux1577 + aux1579 - aux1582))
-11463 11478 0
-11462 11476 0
-11457 11478 0
-11457 -11463 11476 0
-11457 -11462 11474 0
-11456 11476 0
-11456 -11463 11474 0
-11456 -11462 11473 0
c ((SATLiteral(272) - aux1583 + SATLiteral(167))<=0)
-167 -11480 0
-272 -11480 0
-272 -167 -11481 0
c (0<=(SATLiteral(272) - aux1583 + SATLiteral(167)))
167 11481 0
272 11481 0
272 167 11480 0
c ((SATLiteral(287) - aux1584 + SATLiteral(152))<=0)
-152 -11483 0
-287 -11483 0
-287 -152 -11484 0
c (0<=(SATLiteral(287) - aux1584 + SATLiteral(152)))
152 11484 0
287 11484 0
287 152 11483 0
c ((SATLiteral(2) - aux1585 + SATLiteral(137))<=0)
-137 -11486 0
-2 -11486 0
-2 -137 -11487 0
c (0<=(SATLiteral(2) - aux1585 + SATLiteral(137)))
137 11487 0
2 11487 0
2 137 11486 0
c ((SATLiteral(17) + SATLiteral(32) - aux1586)<=0)
-32 -11489 0
-17 -11489 0
-17 -32 -11490 0
c (0<=(SATLiteral(17) + SATLiteral(32) - aux1586))
32 11490 0
17 11490 0
17 32 11489 0
c ((SATLiteral(302) + aux1586 - aux1587)<=0)
11489 -11492 0
11490 -11493 0
-302 -11492 0
-302 11489 -11493 0
-302 11490 -11495 0
c (0<=(SATLiteral(302) + aux1586 - aux1587))
-11490 11495 0
-11489 11493 0
302 11495 0
302 -11490 11493 0
302 -11489 11492 0
c ((aux1583 + aux1585 - aux1588)<=0)
11486 -11497 0
11487 -11498 0
11480 -11497 0
11480 11486 -11498 0
11480 11487 -11500 0
11481 -11498 0
11481 11486 -11500 0
11481 11487 -11502 0
c (0<=(aux1583 + aux1585 - aux1588))
-11487 11502 0
-11486 11500 0
-11481 11502 0
-11481 -11487 11500 0
-11481 -11486 11498 0
-11480 11500 0
-11480 -11487 11498 0
-11480 -11486 11497 0
c ((SATLiteral(274) - aux1589 + SATLiteral(169))<=0)
-169 -11504 0
-274 -11504 0
-274 -169 -11505 0
c (0<=(SATLiteral(274) - aux1589 + SATLiteral(169)))
169 11505 0
274 11505 0
274 169 11504 0
c ((SATLiteral(289) - aux1590 + SATLiteral(154))<=0)
-154 -11507 0
-289 -11507 0
-289 -154 -11508 0
c (0<=(SATLiteral(289) - aux1590 + SATLiteral(154)))
154 11508 0
289 11508 0
289 154 11507 0
c ((SATLiteral(4) - aux1591 + SATLiteral(139))<=0)
-139 -11510 0
-4 -11510 0
-4 -139 -11511 0
c (0<=(SATLiteral(4) - aux1591 + SATLiteral(139)))
139 11511 0
4 11511 0
4 139 11510 0
c ((SATLiteral(19) + SATLiteral(34) - aux1592)<=0)
-34 -11513 0
-19 -11513 0
-19 -34 -11514 0
c (0<=(SATLiteral(19) + SATLiteral(34) - aux1592))
34 11514 0
19 11514 0
19 34 11513 0
c ((SATLiteral(304) + aux1592 - aux1593)<=0)
11513 -11516 0
11514 -11517 0
-304 -11516 0
-304 11513 -11517 0
-304 11514 -11519 0
c (0<=(SATLiteral(304) + aux1592 - aux1593))
-11514 11519 0
-11513 11517 0
304 11519 0
304 -11514 11517 0
304 -11513 11516 0
c ((aux1589 + aux1591 - aux1594)<=0)
11510 -11521 0
11511 -11522 0
11504 -11521 0
11504 11510 -11522 0
11504 11511 -11524 0
11505 -11522 0
11505 11510 -11524 0
11505 11511 -11526 0
c (0<=(aux1589 + aux1591 - aux1594))
-11511 11526 0
-11510 11524 0
-11505 11526 0
-11505 -11511 11524 0
-11505 -11510 11522 0
-11504 11524 0
-11504 -11511 11522 0
-11504 -11510 11521 0
c ((SATLiteral(276) - aux1595 + SATLiteral(171))<=0)
-171 -11528 0
-276 -11528 0
-276 -171 -11529 0
c (0<=(SATLiteral(276) - aux1595 + SATLiteral(171)))
171 11529 0
276 11529 0
276 171 11528 0
c ((SATLiteral(291) - aux1596 + SATLiteral(156))<=0)
-156 -11531 0
-291 -11531 0
-291 -156 -11532 0
c (0<=(SATLiteral(291) - aux1596 + SATLiteral(156)))
156 11532 0
291 11532 0
291 156 11531 0
c ((SATLiteral(6) - aux1597 + SATLiteral(141))<=0)
-141 -11534 0
-6 -11534 0
-6 -141 -11535 0
c (0<=(SATLiteral(6) - aux1597 + SATLiteral(141)))
141 11535 0
6 11535 0
6 141 11534 0
c ((SATLiteral(21) + SATLiteral(36) - aux1598)<=0)
-36 -11537 0
-21 -11537 0
-21 -36 -11538 0
c (0<=(SATLiteral(21) + SATLiteral(36) - aux1598))
36 11538 0
21 11538 0
21 36 11537 0
c ((SATLiteral(306) + aux1598 - aux1599)<=0)
11537 -11540 0
11538 -11541 0
-306 -11540 0
-306 11537 -11541 0
-306 11538 -11543 0
c (0<=(SATLiteral(306) + aux1598 - aux1599))
-11538 11543 0
-11537 11541 0
306 11543 0
306 -11538 11541 0
306 -11537 11540 0
c ((aux1595 + aux1597 - aux1600)<=0)
11534 -11545 0
11535 -11546 0
11528 -11545 0
11528 11534 -11546 0
11528 11535 -11548 0
11529 -11546 0
11529 11534 -11548 0
11529 11535 -11550 0
c (0<=(aux1595 + aux1597 - aux1600))
-11535 11550 0
-11534 11548 0
-11529 11550 0
-11529 -11535 11548 0
-11529 -11534 11546 0
-11528 11548 0
-11528 -11535 11546 0
-11528 -11534 11545 0
c ((SATLiteral(278) - aux1601 + SATLiteral(173))<=0)
-173 -11552 0
-278 -11552 0
-278 -173 -11553 0
c (0<=(SATLiteral(278) - aux1601 + SATLiteral(173)))
173 11553 0
278 11553 0
278 173 11552 0
c ((SATLiteral(293) - aux1602 + SATLiteral(158))<=0)
-158 -11555 0
-293 -11555 0
-293 -158 -11556 0
c (0<=(SATLiteral(293) - aux1602 + SATLiteral(158)))
158 11556 0
293 11556 0
293 158 11555 0
c ((SATLiteral(8) - aux1603 + SATLiteral(143))<=0)
-143 -11558 0
-8 -11558 0
-8 -143 -11559 0
c (0<=(SATLiteral(8) - aux1603 + SATLiteral(143)))
143 11559 0
8 11559 0
8 143 11558 0
c ((SATLiteral(23) + SATLiteral(38) - aux1604)<=0)
-38 -11561 0
-23 -11561 0
-23 -38 -11562 0
c (0<=(SATLiteral(23) + SATLiteral(38) - aux1604))
38 11562 0
23 11562 0
23 38 11561 0
c ((SATLiteral(308) + aux1604 - aux1605)<=0)
11561 -11564 0
11562 -11565 0
-308 -11564 0
-308 11561 -11565 0
-308 11562 -11567 0
c (0<=(SATLiteral(308) + aux1604 - aux1605))
-11562 11567 0
-11561 11565 0
308 11567 0
308 -11562 11565 0
308 -11561 11564 0
c ((aux1601 + aux1603 - aux1606)<=0)
11558 -11569 0
11559 -11570 0
11552 -11569 0
11552 11558 -11570 0
11552 11559 -11572 0
11553 -11570 0
11553 11558 -11572 0
11553 11559 -11574 0
c (0<=(aux1601 + aux1603 - aux1606))
-11559 11574 0
-11558 11572 0
-11553 11574 0
-11553 -11559 11572 0
-11553 -11558 11570 0
-11552 11572 0
-11552 -11559 11570 0
-11552 -11558 11569 0
c ((SATLiteral(280) - aux1607 + SATLiteral(175))<=0)
-175 -11576 0
-280 -11576 0
-280 -175 -11577 0
c (0<=(SATLiteral(280) - aux1607 + SATLiteral(175)))
175 11577 0
280 11577 0
280 175 11576 0
c ((SATLiteral(295) - aux1608 + SATLiteral(160))<=0)
-160 -11579 0
-295 -11579 0
-295 -160 -11580 0
c (0<=(SATLiteral(295) - aux1608 + SATLiteral(160)))
160 11580 0
295 11580 0
295 160 11579 0
c ((SATLiteral(10) - aux1609 + SATLiteral(145))<=0)
-145 -11582 0
-10 -11582 0
-10 -145 -11583 0
c (0<=(SATLiteral(10) - aux1609 + SATLiteral(145)))
145 11583 0
10 11583 0
10 145 11582 0
c ((SATLiteral(25) + SATLiteral(40) - aux1610)<=0)
-40 -11585 0
-25 -11585 0
-25 -40 -11586 0
c (0<=(SATLiteral(25) + SATLiteral(40) - aux1610))
40 11586 0
25 11586 0
25 40 11585 0
c ((SATLiteral(310) + aux1610 - aux1611)<=0)
11585 -11588 0
11586 -11589 0
-310 -11588 0
-310 11585 -11589 0
-310 11586 -11591 0
c (0<=(SATLiteral(310) + aux1610 - aux1611))
-11586 11591 0
-11585 11589 0
310 11591 0
310 -11586 11589 0
310 -11585 11588 0
c ((aux1607 + aux1609 - aux1612)<=0)
11582 -11593 0
11583 -11594 0
11576 -11593 0
11576 11582 -11594 0
11576 11583 -11596 0
11577 -11594 0
11577 11582 -11596 0
11577 11583 -11598 0
c (0<=(aux1607 + aux1609 - aux1612))
-11583 11598 0
-11582 11596 0
-11577 11598 0
-11577 -11583 11596 0
-11577 -11582 11594 0
-11576 11596 0
-11576 -11583 11594 0
-11576 -11582 11593 0
c ((SATLiteral(282) - aux1613 + SATLiteral(177))<=0)
-177 -11600 0
-282 -11600 0
-282 -177 -11601 0
c (0<=(SATLiteral(282) - aux1613 + SATLiteral(177)))
177 11601 0
282 11601 0
282 177 11600 0
c ((SATLiteral(297) - aux1614 + SATLiteral(162))<=0)
-162 -11603 0
-297 -11603 0
-297 -162 -11604 0
c (0<=(SATLiteral(297) - aux1614 + SATLiteral(162)))
162 11604 0
297 11604 0
297 162 11603 0
c ((SATLiteral(12) - aux1615 + SATLiteral(147))<=0)
-147 -11606 0
-12 -11606 0
-12 -147 -11607 0
c (0<=(SATLiteral(12) - aux1615 + SATLiteral(147)))
147 11607 0
12 11607 0
12 147 11606 0
c ((SATLiteral(27) + SATLiteral(42) - aux1616)<=0)
-42 -11609 0
-27 -11609 0
-27 -42 -11610 0
c (0<=(SATLiteral(27) + SATLiteral(42) - aux1616))
42 11610 0
27 11610 0
27 42 11609 0
c ((SATLiteral(312) + aux1616 - aux1617)<=0)
11609 -11612 0
11610 -11613 0
-312 -11612 0
-312 11609 -11613 0
-312 11610 -11615 0
c (0<=(SATLiteral(312) + aux1616 - aux1617))
-11610 11615 0
-11609 11613 0
312 11615 0
312 -11610 11613 0
312 -11609 11612 0
c ((aux1613 + aux1615 - aux1618)<=0)
11606 -11617 0
11607 -11618 0
11600 -11617 0
11600 11606 -11618 0
11600 11607 -11620 0
11601 -11618 0
11601 11606 -11620 0
11601 11607 -11622 0
c (0<=(aux1613 + aux1615 - aux1618))
-11607 11622 0
-11606 11620 0
-11601 11622 0
-11601 -11607 11620 0
-11601 -11606 11618 0
-11600 11620 0
-11600 -11607 11618 0
-11600 -11606 11617 0
c ((SATLiteral(284) - aux1619 + SATLiteral(179))<=0)
-179 -11624 0
-284 -11624 0
-284 -179 -11625 0
c (0<=(SATLiteral(284) - aux1619 + SATLiteral(179)))
179 11625 0
284 11625 0
284 179 11624 0
c ((SATLiteral(299) - aux1620 + SATLiteral(164))<=0)
-164 -11627 0
-299 -11627 0
-299 -164 -11628 0
c (0<=(SATLiteral(299) - aux1620 + SATLiteral(164)))
164 11628 0
299 11628 0
299 164 11627 0
c ((SATLiteral(14) - aux1621 + SATLiteral(149))<=0)
-149 -11630 0
-14 -11630 0
-14 -149 -11631 0
c (0<=(SATLiteral(14) - aux1621 + SATLiteral(149)))
149 11631 0
14 11631 0
14 149 11630 0
c ((SATLiteral(29) + SATLiteral(44) - aux1622)<=0)
-44 -11633 0
-29 -11633 0
-29 -44 -11634 0
c (0<=(SATLiteral(29) + SATLiteral(44) - aux1622))
44 11634 0
29 11634 0
29 44 11633 0
c ((SATLiteral(314) + aux1622 - aux1623)<=0)
11633 -11636 0
11634 -11637 0
-314 -11636 0
-314 11633 -11637 0
-314 11634 -11639 0
c (0<=(SATLiteral(314) + aux1622 - aux1623))
-11634 11639 0
-11633 11637 0
314 11639 0
314 -11634 11637 0
314 -11633 11636 0
c ((aux1619 + aux1621 - aux1624)<=0)
11630 -11641 0
11631 -11642 0
11624 -11641 0
11624 11630 -11642 0
11624 11631 -11644 0
11625 -11642 0
11625 11630 -11644 0
11625 11631 -11646 0
c (0<=(aux1619 + aux1621 - aux1624))
-11631 11646 0
-11630 11644 0
-11625 11646 0
-11625 -11631 11644 0
-11625 -11630 11642 0
-11624 11644 0
-11624 -11631 11642 0
-11624 -11630 11641 0
c ((SATLiteral(286) - aux1625 + SATLiteral(181))<=0)
-181 -11648 0
-286 -11648 0
-286 -181 -11649 0
c (0<=(SATLiteral(286) - aux1625 + SATLiteral(181)))
181 11649 0
286 11649 0
286 181 11648 0
c ((SATLiteral(301) - aux1626 + SATLiteral(166))<=0)
-166 -11651 0
-301 -11651 0
-301 -166 -11652 0
c (0<=(SATLiteral(301) - aux1626 + SATLiteral(166)))
166 11652 0
301 11652 0
301 166 11651 0
c ((SATLiteral(16) - aux1627 + SATLiteral(151))<=0)
-151 -11654 0
-16 -11654 0
-16 -151 -11655 0
c (0<=(SATLiteral(16) - aux1627 + SATLiteral(151)))
151 11655 0
16 11655 0
16 151 11654 0
c ((SATLiteral(31) + SATLiteral(46) - aux1628)<=0)
-46 -11657 0
-31 -11657 0
-31 -46 -11658 0
c (0<=(SATLiteral(31) + SATLiteral(46) - aux1628))
46 11658 0
31 11658 0
31 46 11657 0
c ((SATLiteral(316) + aux1628 - aux1629)<=0)
11657 -11660 0
11658 -11661 0
-316 -11660 0
-316 11657 -11661 0
-316 11658 -11663 0
c (0<=(SATLiteral(316) + aux1628 - aux1629))
-11658 11663 0
-11657 11661 0
316 11663 0
316 -11658 11661 0
316 -11657 11660 0
c ((aux1625 + aux1627 - aux1630)<=0)
11654 -11665 0
11655 -11666 0
11648 -11665 0
11648 11654 -11666 0
11648 11655 -11668 0
11649 -11666 0
11649 11654 -11668 0
11649 11655 -11670 0
c (0<=(aux1625 + aux1627 - aux1630))
-11655 11670 0
-11654 11668 0
-11649 11670 0
-11649 -11655 11668 0
-11649 -11654 11666 0
-11648 11668 0
-11648 -11655 11666 0
-11648 -11654 11665 0
c ((SATLiteral(-285) - aux1631 + SATLiteral(-180))<=0)
180 -11672 0
285 -11672 0
285 180 -11673 0
c (0<=(SATLiteral(-285) - aux1631 + SATLiteral(-180)))
-180 11673 0
-285 11673 0
-285 -180 11672 0
c ((SATLiteral(-300) - aux1632 + SATLiteral(-165))<=0)
165 -11675 0
300 -11675 0
300 165 -11676 0
c (0<=(SATLiteral(-300) - aux1632 + SATLiteral(-165)))
-165 11676 0
-300 11676 0
-300 -165 11675 0
c ((SATLiteral(-15) - aux1633 + SATLiteral(-150))<=0)
150 -11678 0
15 -11678 0
15 150 -11679 0
c (0<=(SATLiteral(-15) - aux1633 + SATLiteral(-150)))
-150 11679 0
-15 11679 0
-15 -150 11678 0
c ((SATLiteral(-30) + SATLiteral(-45) - aux1634)<=0)
45 -11681 0
30 -11681 0
30 45 -11682 0
c (0<=(SATLiteral(-30) + SATLiteral(-45) - aux1634))
-45 11682 0
-30 11682 0
-30 -45 11681 0
c ((SATLiteral(-315) + aux1634 - aux1635)<=0)
11681 -11684 0
11682 -11685 0
315 -11684 0
315 11681 -11685 0
315 11682 -11687 0
c (0<=(SATLiteral(-315) + aux1634 - aux1635))
-11682 11687 0
-11681 11685 0
-315 11687 0
-315 -11682 11685 0
-315 -11681 11684 0
c ((aux1631 + aux1633 - aux1636)<=0)
11678 -11689 0
11679 -11690 0
11672 -11689 0
11672 11678 -11690 0
11672 11679 -11692 0
11673 -11690 0
11673 11678 -11692 0
11673 11679 -11694 0
c (0<=(aux1631 + aux1633 - aux1636))
-11679 11694 0
-11678 11692 0
-11673 11694 0
-11673 -11679 11692 0
-11673 -11678 11690 0
-11672 11692 0
-11672 -11679 11690 0
-11672 -11678 11689 0
c ((SATLiteral(317) - aux1637 + SATLiteral(212))<=0)
-212 -11696 0
-317 -11696 0
-317 -212 -11697 0
c (0<=(SATLiteral(317) - aux1637 + SATLiteral(212)))
212 11697 0
317 11697 0
317 212 11696 0
c ((SATLiteral(332) - aux1638 + SATLiteral(197))<=0)
-197 -11699 0
-332 -11699 0
-332 -197 -11700 0
c (0<=(SATLiteral(332) - aux1638 + SATLiteral(197)))
197 11700 0
332 11700 0
332 197 11699 0
c ((SATLiteral(47) - aux1639 + SATLiteral(182))<=0)
-182 -11702 0
-47 -11702 0
-47 -182 -11703 0
c (0<=(SATLiteral(47) - aux1639 + SATLiteral(182)))
182 11703 0
47 11703 0
47 182 11702 0
c ((SATLiteral(62) + SATLiteral(77) - aux1640)<=0)
-77 -11705 0
-62 -11705 0
-62 -77 -11706 0
c (0<=(SATLiteral(62) + SATLiteral(77) - aux1640))
77 11706 0
62 11706 0
62 77 11705 0
c ((SATLiteral(347) + aux1640 - aux1641)<=0)
11705 -11708 0
11706 -11709 0
-347 -11708 0
-347 11705 -11709 0
-347 11706 -11711 0
c (0<=(SATLiteral(347) + aux1640 - aux1641))
-11706 11711 0
-11705 11709 0
347 11711 0
347 -11706 11709 0
347 -11705 11708 0
c ((aux1637 + aux1639 - aux1642)<=0)
11702 -11713 0
11703 -11714 0
11696 -11713 0
11696 11702 -11714 0
11696 11703 -11716 0
11697 -11714 0
11697 11702 -11716 0
11697 11703 -11718 0
c (0<=(aux1637 + aux1639 - aux1642))
-11703 11718 0
-11702 11716 0
-11697 11718 0
-11697 -11703 11716 0
-11697 -11702 11714 0
-11696 11716 0
-11696 -11703 11714 0
-11696 -11702 11713 0
c ((SATLiteral(319) - aux1643 + SATLiteral(214))<=0)
-214 -11720 0
-319 -11720 0
-319 -214 -11721 0
c (0<=(SATLiteral(319) - aux1643 + SATLiteral(214)))
214 11721 0
319 11721 0
319 214 11720 0
c ((SATLiteral(334) - aux1644 + SATLiteral(199))<=0)
-199 -11723 0
-334 -11723 0
-334 -199 -11724 0
c (0<=(SATLiteral(334) - aux1644 + SATLiteral(199)))
199 11724 0
334 11724 0
334 199 11723 0
c ((SATLiteral(49) - aux1645 + SATLiteral(184))<=0)
-184 -11726 0
-49 -11726 0
-49 -184 -11727 0
c (0<=(SATLiteral(49) - aux1645 + SATLiteral(184)))
184 11727 0
49 11727 0
49 184 11726 0
c ((SATLiteral(64) + SATLiteral(79) - aux1646)<=0)
-79 -11729 0
-64 -11729 0
-64 -79 -11730 0
c (0<=(SATLiteral(64) + SATLiteral(79) - aux1646))
79 11730 0
64 11730 0
64 79 11729 0
c ((SATLiteral(349) + aux1646 - aux1647)<=0)
11729 -11732 0
11730 -11733 0
-349 -11732 0
-349 11729 -11733 0
-349 11730 -11735 0
c (0<=(SATLiteral(349) + aux1646 - aux1647))
-11730 11735 0
-11729 11733 0
349 11735 0
349 -11730 11733 0
349 -11729 11732 0
c ((aux1643 + aux1645 - aux1648)<=0)
11726 -11737 0
11727 -11738 0
11720 -11737 0
11720 11726 -11738 0
11720 11727 -11740 0
11721 -11738 0
11721 11726 -11740 0
11721 11727 -11742 0
c (0<=(aux1643 + aux1645 - aux1648))
-11727 11742 0
-11726 11740 0
-11721 11742 0
-11721 -11727 11740 0
-11721 -11726 11738 0
-11720 11740 0
-11720 -11727 11738 0
-11720 -11726 11737 0
c ((SATLiteral(321) - aux1649 + SATLiteral(216))<=0)
-216 -11744 0
-321 -11744 0
-321 -216 -11745 0
c (0<=(SATLiteral(321) - aux1649 + SATLiteral(216)))
216 11745 0
321 11745 0
321 216 11744 0
c ((SATLiteral(336) - aux1650 + SATLiteral(201))<=0)
-201 -11747 0
-336 -11747 0
-336 -201 -11748 0
c (0<=(SATLiteral(336) - aux1650 + SATLiteral(201)))
201 11748 0
336 11748 0
336 201 11747 0
c ((SATLiteral(51) - aux1651 + SATLiteral(186))<=0)
-186 -11750 0
-51 -11750 0
-51 -186 -11751 0
c (0<=(SATLiteral(51) - aux1651 + SATLiteral(186)))
186 11751 0
51 11751 0
51 186 11750 0
c ((SATLiteral(66) + SATLiteral(81) - aux1652)<=0)
-81 -11753 0
-66 -11753 0
-66 -81 -11754 0
c (0<=(SATLiteral(66) + SATLiteral(81) - aux1652))
81 11754 0
66 11754 0
66 81 11753 0
c ((SATLiteral(351) + aux1652 - aux1653)<=0)
11753 -11756 0
11754 -11757 0
-351 -11756 0
-351 11753 -11757 0
-351 11754 -11759 0
c (0<=(SATLiteral(351) + aux1652 - aux1653))
-11754 11759 0
-11753 11757 0
351 11759 0
351 -11754 11757 0
351 -11753 11756 0
c ((aux1649 + aux1651 - aux1654)<=0)
11750 -11761 0
11751 -11762 0
11744 -11761 0
11744 11750 -11762 0
11744 11751 -11764 0
11745 -11762 0
11745 11750 -11764 0
11745 11751 -11766 0
c (0<=(aux1649 + aux1651 - aux1654))
-11751 11766 0
-11750 11764 0
-11745 11766 0
-11745 -11751 11764 0
-11745 -11750 11762 0
-11744 11764 0
-11744 -11751 11762 0
-11744 -11750 11761 0
c ((SATLiteral(323) - aux1655 + SATLiteral(218))<=0)
-218 -11768 0
-323 -11768 0
-323 -218 -11769 0
c (0<=(SATLiteral(323) - aux1655 + SATLiteral(218)))
218 11769 0
323 11769 0
323 218 11768 0
c ((SATLiteral(338) - aux1656 + SATLiteral(203))<=0)
-203 -11771 0
-338 -11771 0
-338 -203 -11772 0
c (0<=(SATLiteral(338) - aux1656 + SATLiteral(203)))
203 11772 0
338 11772 0
338 203 11771 0
c ((SATLiteral(53) - aux1657 + SATLiteral(188))<=0)
-188 -11774 0
-53 -11774 0
-53 -188 -11775 0
c (0<=(SATLiteral(53) - aux1657 + SATLiteral(188)))
188 11775 0
53 11775 0
53 188 11774 0
c ((SATLiteral(68) + SATLiteral(83) - aux1658)<=0)
-83 -11777 0
-68 -11777 0
-68 -83 -11778 0
c (0<=(SATLiteral(68) + SATLiteral(83) - aux1658))
83 11778 0
68 11778 0
68 83 11777 0
c ((SATLiteral(353) + aux1658 - aux1659)<=0)
11777 -11780 0
11778 -11781 0
-353 -11780 0
-353 11777 -11781 0
-353 11778 -11783 0
c (0<=(SATLiteral(353) + aux1658 - aux1659))
-11778 11783 0
-11777 11781 0
353 11783 0
353 -11778 11781 0
353 -11777 11780 0
c ((aux1655 + aux1657 - aux1660)<=0)
11774 -11785 0
11775 -11786 0
11768 -11785 0
11768 11774 -11786 0
11768 11775 -11788 0
11769 -11786 0
11769 11774 -11788 0
11769 11775 -11790 0
c (0<=(aux1655 + aux1657 - aux1660))
-11775 11790 0
-11774 11788 0
-11769 11790 0
-11769 -11775 11788 0
-11769 -11774 11786 0
-11768 11788 0
-11768 -11775 11786 0
-11768 -11774 11785 0
c ((SATLiteral(325) - aux1661 + SATLiteral(220))<=0)
-220 -11792 0
-325 -11792 0
-325 -220 -11793 0
c (0<=(SATLiteral(325) - aux1661 + SATLiteral(220)))
220 11793 0
325 11793 0
325 220 11792 0
c ((SATLiteral(340) - aux1662 + SATLiteral(205))<=0)
-205 -11795 0
-340 -11795 0
-340 -205 -11796 0
c (0<=(SATLiteral(340) - aux1662 + SATLiteral(205)))
205 11796 0
340 11796 0
340 205 11795 0
c ((SATLiteral(55) - aux1663 + SATLiteral(190))<=0)
-190 -11798 0
-55 -11798 0
-55 -190 -11799 0
c (0<=(SATLiteral(55) - aux1663 + SATLiteral(190)))
190 11799 0
55 11799 0
55 190 11798 0
c ((SATLiteral(70) + SATLiteral(85) - aux1664)<=0)
-85 -11801 0
-70 -11801 0
-70 -85 -11802 0
c (0<=(SATLiteral(70) + SATLiteral(85) - aux1664))
85 11802 0
70 11802 0
70 85 11801 0
c ((SATLiteral(355) + aux1664 - aux1665)<=0)
11801 -11804 0
11802 -11805 0
-355 -11804 0
-355 11801 -11805 0
-355 11802 -11807 0
c (0<=(SATLiteral(355) + aux1664 - aux1665))
-11802 11807 0
-11801 11805 0
355 11807 0
355 -11802 11805 0
355 -11801 11804 0
c ((aux1661 + aux1663 - aux1666)<=0)
11798 -11809 0
11799 -11810 0
11792 -11809 0
11792 11798 -11810 0
11792 11799 -11812 0
11793 -11810 0
11793 11798 -11812 0
11793 11799 -11814 0
c (0<=(aux1661 + aux1663 - aux1666))
-11799 11814 0
-11798 11812 0
-11793 11814 0
-11793 -11799 11812 0
-11793 -11798 11810 0
-11792 11812 0
-11792 -11799 11810 0
-11792 -11798 11809 0
c ((SATLiteral(327) - aux1667 + SATLiteral(222))<=0)
-222 -11816 0
-327 -11816 0
-327 -222 -11817 0
c (0<=(SATLiteral(327) - aux1667 + SATLiteral(222)))
222 11817 0
327 11817 0
327 222 11816 0
c ((SATLiteral(342) - aux1668 + SATLiteral(207))<=0)
-207 -11819 0
-342 -11819 0
-342 -207 -11820 0
c (0<=(SATLiteral(342) - aux1668 + SATLiteral(207)))
207 11820 0
342 11820 0
342 207 11819 0
c ((SATLiteral(57) - aux1669 + SATLiteral(192))<=0)
-192 -11822 0
-57 -11822 0
-57 -192 -11823 0
c (0<=(SATLiteral(57) - aux1669 + SATLiteral(192)))
192 11823 0
57 11823 0
57 192 11822 0
c ((SATLiteral(72) + SATLiteral(87) - aux1670)<=0)
-87 -11825 0
-72 -11825 0
-72 -87 -11826 0
c (0<=(SATLiteral(72) + SATLiteral(87) - aux1670))
87 11826 0
72 11826 0
72 87 11825 0
c ((SATLiteral(357) + aux1670 - aux1671)<=0)
11825 -11828 0
11826 -11829 0
-357 -11828 0
-357 11825 -11829 0
-357 11826 -11831 0
c (0<=(SATLiteral(357) + aux1670 - aux1671))
-11826 11831 0
-11825 11829 0
357 11831 0
357 -11826 11829 0
357 -11825 11828 0
c ((aux1667 + aux1669 - aux1672)<=0)
11822 -11833 0
11823 -11834 0
11816 -11833 0
11816 11822 -11834 0
11816 11823 -11836 0
11817 -11834 0
11817 11822 -11836 0
11817 11823 -11838 0
c (0<=(aux1667 + aux1669 - aux1672))
-11823 11838 0
-11822 11836 0
-11817 11838 0
-11817 -11823 11836 0
-11817 -11822 11834 0
-11816 11836 0
-11816 -11823 11834 0
-11816 -11822 11833 0
c ((SATLiteral(329) - aux1673 + SATLiteral(224))<=0)
-224 -11840 0
-329 -11840 0
-329 -224 -11841 0
c (0<=(SATLiteral(329) - aux1673 + SATLiteral(224)))
224 11841 0
329 11841 0
329 224 11840 0
c ((SATLiteral(344) - aux1674 + SATLiteral(209))<=0)
-209 -11843 0
-344 -11843 0
-344 -209 -11844 0
c (0<=(SATLiteral(344) - aux1674 + SATLiteral(209)))
209 11844 0
344 11844 0
344 209 11843 0
c ((SATLiteral(59) - aux1675 + SATLiteral(194))<=0)
-194 -11846 0
-59 -11846 0
-59 -194 -11847 0
c (0<=(SATLiteral(59) - aux1675 + SATLiteral(194)))
194 11847 0
59 11847 0
59 194 11846 0
c ((SATLiteral(74) + SATLiteral(89) - aux1676)<=0)
-89 -11849 0
-74 -11849 0
-74 -89 -11850 0
c (0<=(SATLiteral(74) + SATLiteral(89) - aux1676))
89 11850 0
74 11850 0
74 89 11849 0
c ((SATLiteral(359) + aux1676 - aux1677)<=0)
11849 -11852 0
11850 -11853 0
-359 -11852 0
-359 11849 -11853 0
-359 11850 -11855 0
c (0<=(SATLiteral(359) + aux1676 - aux1677))
-11850 11855 0
-11849 11853 0
359 11855 0
359 -11850 11853 0
359 -11849 11852 0
c ((aux1673 + aux1675 - aux1678)<=0)
11846 -11857 0
11847 -11858 0
11840 -11857 0
11840 11846 -11858 0
11840 11847 -11860 0
11841 -11858 0
11841 11846 -11860 0
11841 11847 -11862 0
c (0<=(aux1673 + aux1675 - aux1678))
-11847 11862 0
-11846 11860 0
-11841 11862 0
-11841 -11847 11860 0
-11841 -11846 11858 0
-11840 11860 0
-11840 -11847 11858 0
-11840 -11846 11857 0
c ((SATLiteral(331) - aux1679 + SATLiteral(226))<=0)
-226 -11864 0
-331 -11864 0
-331 -226 -11865 0
c (0<=(SATLiteral(331) - aux1679 + SATLiteral(226)))
226 11865 0
331 11865 0
331 226 11864 0
c ((SATLiteral(346) - aux1680 + SATLiteral(211))<=0)
-211 -11867 0
-346 -11867 0
-346 -211 -11868 0
c (0<=(SATLiteral(346) - aux1680 + SATLiteral(211)))
211 11868 0
346 11868 0
346 211 11867 0
c ((SATLiteral(61) - aux1681 + SATLiteral(196))<=0)
-196 -11870 0
-61 -11870 0
-61 -196 -11871 0
c (0<=(SATLiteral(61) - aux1681 + SATLiteral(196)))
196 11871 0
61 11871 0
61 196 11870 0
c ((SATLiteral(76) + SATLiteral(91) - aux1682)<=0)
-91 -11873 0
-76 -11873 0
-76 -91 -11874 0
c (0<=(SATLiteral(76) + SATLiteral(91) - aux1682))
91 11874 0
76 11874 0
76 91 11873 0
c ((SATLiteral(361) + aux1682 - aux1683)<=0)
11873 -11876 0
11874 -11877 0
-361 -11876 0
-361 11873 -11877 0
-361 11874 -11879 0
c (0<=(SATLiteral(361) + aux1682 - aux1683))
-11874 11879 0
-11873 11877 0
361 11879 0
361 -11874 11877 0
361 -11873 11876 0
c ((aux1679 + aux1681 - aux1684)<=0)
11870 -11881 0
11871 -11882 0
11864 -11881 0
11864 11870 -11882 0
11864 11871 -11884 0
11865 -11882 0
11865 11870 -11884 0
11865 11871 -11886 0
c (0<=(aux1679 + aux1681 - aux1684))
-11871 11886 0
-11870 11884 0
-11865 11886 0
-11865 -11871 11884 0
-11865 -11870 11882 0
-11864 11884 0
-11864 -11871 11882 0
-11864 -11870 11881 0
c ((SATLiteral(-330) - aux1685 + SATLiteral(-225))<=0)
225 -11888 0
330 -11888 0
330 225 -11889 0
c (0<=(SATLiteral(-330) - aux1685 + SATLiteral(-225)))
-225 11889 0
-330 11889 0
-330 -225 11888 0
c ((SATLiteral(-345) - aux1686 + SATLiteral(-210))<=0)
210 -11891 0
345 -11891 0
345 210 -11892 0
c (0<=(SATLiteral(-345) - aux1686 + SATLiteral(-210)))
-210 11892 0
-345 11892 0
-345 -210 11891 0
c ((SATLiteral(-60) - aux1687 + SATLiteral(-195))<=0)
195 -11894 0
60 -11894 0
60 195 -11895 0
c (0<=(SATLiteral(-60) - aux1687 + SATLiteral(-195)))
-195 11895 0
-60 11895 0
-60 -195 11894 0
c ((SATLiteral(-75) + SATLiteral(-90) - aux1688)<=0)
90 -11897 0
75 -11897 0
75 90 -11898 0
c (0<=(SATLiteral(-75) + SATLiteral(-90) - aux1688))
-90 11898 0
-75 11898 0
-75 -90 11897 0
c ((SATLiteral(-360) + aux1688 - aux1689)<=0)
11897 -11900 0
11898 -11901 0
360 -11900 0
360 11897 -11901 0
360 11898 -11903 0
c (0<=(SATLiteral(-360) + aux1688 - aux1689))
-11898 11903 0
-11897 11901 0
-360 11903 0
-360 -11898 11901 0
-360 -11897 11900 0
c ((aux1685 + aux1687 - aux1690)<=0)
11894 -11905 0
11895 -11906 0
11888 -11905 0
11888 11894 -11906 0
11888 11895 -11908 0
11889 -11906 0
11889 11894 -11908 0
11889 11895 -11910 0
c (0<=(aux1685 + aux1687 - aux1690))
-11895 11910 0
-11894 11908 0
-11889 11910 0
-11889 -11895 11908 0
-11889 -11894 11906 0
-11888 11908 0
-11888 -11895 11906 0
-11888 -11894 11905 0
c ((SATLiteral(362) - aux1691 + SATLiteral(257))<=0)
-257 -11912 0
-362 -11912 0
-362 -257 -11913 0
c (0<=(SATLiteral(362) - aux1691 + SATLiteral(257)))
257 11913 0
362 11913 0
362 257 11912 0
c ((SATLiteral(377) - aux1692 + SATLiteral(242))<=0)
-242 -11915 0
-377 -11915 0
-377 -242 -11916 0
c (0<=(SATLiteral(377) - aux1692 + SATLiteral(242)))
242 11916 0
377 11916 0
377 242 11915 0
c ((SATLiteral(92) - aux1693 + SATLiteral(227))<=0)
-227 -11918 0
-92 -11918 0
-92 -227 -11919 0
c (0<=(SATLiteral(92) - aux1693 + SATLiteral(227)))
227 11919 0
92 11919 0
92 227 11918 0
c ((SATLiteral(107) + SATLiteral(122) - aux1694)<=0)
-122 -11921 0
-107 -11921 0
-107 -122 -11922 0
c (0<=(SATLiteral(107) + SATLiteral(122) - aux1694))
122 11922 0
107 11922 0
107 122 11921 0
c ((SATLiteral(392) + aux1694 - aux1695)<=0)
11921 -11924 0
11922 -11925 0
-392 -11924 0
-392 11921 -11925 0
-392 11922 -11927 0
c (0<=(SATLiteral(392) + aux1694 - aux1695))
-11922 11927 0
-11921 11925 0
392 11927 0
392 -11922 11925 0
392 -11921 11924 0
c ((aux1691 + aux1693 - aux1696)<=0)
11918 -11929 0
11919 -11930 0
11912 -11929 0
11912 11918 -11930 0
11912 11919 -11932 0
11913 -11930 0
11913 11918 -11932 0
11913 11919 -11934 0
c (0<=(aux1691 + aux1693 - aux1696))
-11919 11934 0
-11918 11932 0
-11913 11934 0
-11913 -11919 11932 0
-11913 -11918 11930 0
-11912 11932 0
-11912 -11919 11930 0
-11912 -11918 11929 0
c ((SATLiteral(364) - aux1697 + SATLiteral(259))<=0)
-259 -11936 0
-364 -11936 0
-364 -259 -11937 0
c (0<=(SATLiteral(364) - aux1697 + SATLiteral(259)))
259 11937 0
364 11937 0
364 259 11936 0
c ((SATLiteral(379) - aux1698 + SATLiteral(244))<=0)
-244 -11939 0
-379 -11939 0
-379 -244 -11940 0
c (0<=(SATLiteral(379) - aux1698 + SATLiteral(244)))
244 11940 0
379 11940 0
379 244 11939 0
c ((SATLiteral(94) - aux1699 + SATLiteral(229))<=0)
-229 -11942 0
-94 -11942 0
-94 -229 -11943 0
c (0<=(SATLiteral(94) - aux1699 + SATLiteral(229)))
229 11943 0
94 11943 0
94 229 11942 0
c ((SATLiteral(109) + SATLiteral(124) - aux1700)<=0)
-124 -11945 0
-109 -11945 0
-109 -124 -11946 0
c (0<=(SATLiteral(109) + SATLiteral(124) - aux1700))
124 11946 0
109 11946 0
109 124 11945 0
c ((SATLiteral(394) + aux1700 - aux1701)<=0)
11945 -11948 0
11946 -11949 0
-394 -11948 0
-394 11945 -11949 0
-394 11946 -11951 0
c (0<=(SATLiteral(394) + aux1700 - aux1701))
-11946 11951 0
-11945 11949 0
394 11951 0
394 -11946 11949 0
394 -11945 11948 0
c ((aux1697 + aux1699 - aux1702)<=0)
11942 -11953 0
11943 -11954 0
11936 -11953 0
11936 11942 -11954 0
11936 11943 -11956 0
11937 -11954 0
11937 11942 -11956 0
11937 11943 -11958 0
c (0<=(aux1697 + aux1699 - aux1702))
-11943 11958 0
-11942 11956 0
-11937 11958 0
-11937 -11943 11956 0
-11937 -11942 11954 0
-11936 11956 0
-11936 -11943 11954 0
-11936 -11942 11953 0
c ((SATLiteral(366) - aux1703 + SATLiteral(261))<=0)
-261 -11960 0
-366 -11960 0
-366 -261 -11961 0
c (0<=(SATLiteral(366) - aux1703 + SATLiteral(261)))
261 11961 0
366 11961 0
366 261 11960 0
c ((SATLiteral(381) - aux1704 + SATLiteral(246))<=0)
-246 -11963 0
-381 -11963 0
-381 -246 -11964 0
c (0<=(SATLiteral(381) - aux1704 + SATLiteral(246)))
246 11964 0
381 11964 0
381 246 11963 0
c ((SATLiteral(96) - aux1705 + SATLiteral(231))<=0)
-231 -11966 0
-96 -11966 0
-96 -231 -11967 0
c (0<=(SATLiteral(96) - aux1705 + SATLiteral(231)))
231 11967 0
96 11967 0
96 231 11966 0
c ((SATLiteral(111) + SATLiteral(126) - aux1706)<=0)
-126 -11969 0
-111 -11969 0
-111 -126 -11970 0
c (0<=(SATLiteral(111) + SATLiteral(126) - aux1706))
126 11970 0
111 11970 0
111 126 11969 0
c ((SATLiteral(396) + aux1706 - aux1707)<=0)
11969 -11972 0
11970 -11973 0
-396 -11972 0
-396 11969 -11973 0
-396 11970 -11975 0
c (0<=(SATLiteral(396) + aux1706 - aux1707))
-11970 11975 0
-11969 11973 0
396 11975 0
396 -11970 11973 0
396 -11969 11972 0
c ((aux1703 + aux1705 - aux1708)<=0)
11966 -11977 0
11967 -11978 0
11960 -11977 0
11960 11966 -11978 0
11960 11967 -11980 0
11961 -11978 0
11961 11966 -11980 0
11961 11967 -11982 0
c (0<=(aux1703 + aux1705 - aux1708))
-11967 11982 0
-11966 11980 0
-11961 11982 0
-11961 -11967 11980 0
-11961 -11966 11978 0
-11960 11980 0
-11960 -11967 11978 0
-11960 -11966 11977 0
c ((SATLiteral(368) - aux1709 + SATLiteral(263))<=0)
-263 -11984 0
-368 -11984 0
-368 -263 -11985 0
c (0<=(SATLiteral(368) - aux1709 + SATLiteral(263)))
263 11985 0
368 11985 0
368 263 11984 0
c ((SATLiteral(383) - aux1710 + SATLiteral(248))<=0)
-248 -11987 0
-383 -11987 0
-383 -248 -11988 0
c (0<=(SATLiteral(383) - aux1710 + SATLiteral(248)))
248 11988 0
383 11988 0
383 248 11987 0
c ((SATLiteral(98) - aux1711 + SATLiteral(233))<=0)
-233 -11990 0
-98 -11990 0
-98 -233 -11991 0
c (0<=(SATLiteral(98) - aux1711 + SATLiteral(233)))
233 11991 0
98 11991 0
98 233 11990 0
c ((SATLiteral(113) + SATLiteral(128) - aux1712)<=0)
-128 -11993 0
-113 -11993 0
-113 -128 -11994 0
c (0<=(SATLiteral(113) + SATLiteral(128) - aux1712))
128 11994 0
113 11994 0
113 128 11993 0
c ((SATLiteral(398) + aux1712 - aux1713)<=0)
11993 -11996 0
11994 -11997 0
-398 -11996 0
-398 11993 -11997 0
-398 11994 -11999 0
c (0<=(SATLiteral(398) + aux1712 - aux1713))
-11994 11999 0
-11993 11997 0
398 11999 0
398 -11994 11997 0
398 -11993 11996 0
c ((aux1709 + aux1711 - aux1714)<=0)
11990 -12001 0
11991 -12002 0
11984 -12001 0
11984 11990 -12002 0
11984 11991 -12004 0
11985 -12002 0
11985 11990 -12004 0
11985 11991 -12006 0
c (0<=(aux1709 + aux1711 - aux1714))
-11991 12006 0
-11990 12004 0
-11985 12006 0
-11985 -11991 12004 0
-11985 -11990 12002 0
-11984 12004 0
-11984 -11991 12002 0
-11984 -11990 12001 0
c ((SATLiteral(370) - aux1715 + SATLiteral(265))<=0)
-265 -12008 0
-370 -12008 0
-370 -265 -12009 0
c (0<=(SATLiteral(370) - aux1715 + SATLiteral(265)))
265 12009 0
370 12009 0
370 265 12008 0
c ((SATLiteral(385) - aux1716 + SATLiteral(250))<=0)
-250 -12011 0
-385 -12011 0
-385 -250 -12012 0
c (0<=(SATLiteral(385) - aux1716 + SATLiteral(250)))
250 12012 0
385 12012 0
385 250 12011 0
c ((SATLiteral(100) - aux1717 + SATLiteral(235))<=0)
-235 -12014 0
-100 -12014 0
-100 -235 -12015 0
c (0<=(SATLiteral(100) - aux1717 + SATLiteral(235)))
235 12015 0
100 12015 0
100 235 12014 0
c ((SATLiteral(115) + SATLiteral(130) - aux1718)<=0)
-130 -12017 0
-115 -12017 0
-115 -130 -12018 0
c (0<=(SATLiteral(115) + SATLiteral(130) - aux1718))
130 12018 0
115 12018 0
115 130 12017 0
c ((SATLiteral(400) + aux1718 - aux1719)<=0)
12017 -12020 0
12018 -12021 0
-400 -12020 0
-400 12017 -12021 0
-400 12018 -12023 0
c (0<=(SATLiteral(400) + aux1718 - aux1719))
-12018 12023 0
-12017 12021 0
400 12023 0
400 -12018 12021 0
400 -12017 12020 0
c ((aux1715 + aux1717 - aux1720)<=0)
12014 -12025 0
12015 -12026 0
12008 -12025 0
12008 12014 -12026 0
12008 12015 -12028 0
12009 -12026 0
12009 12014 -12028 0
12009 12015 -12030 0
c (0<=(aux1715 + aux1717 - aux1720))
-12015 12030 0
-12014 12028 0
-12009 12030 0
-12009 -12015 12028 0
-12009 -12014 12026 0
-12008 12028 0
-12008 -12015 12026 0
-12008 -12014 12025 0
c ((SATLiteral(372) - aux1721 + SATLiteral(267))<=0)
-267 -12032 0
-372 -12032 0
-372 -267 -12033 0
c (0<=(SATLiteral(372) - aux1721 + SATLiteral(267)))
267 12033 0
372 12033 0
372 267 12032 0
c ((SATLiteral(387) - aux1722 + SATLiteral(252))<=0)
-252 -12035 0
-387 -12035 0
-387 -252 -12036 0
c (0<=(SATLiteral(387) - aux1722 + SATLiteral(252)))
252 12036 0
387 12036 0
387 252 12035 0
c ((SATLiteral(102) - aux1723 + SATLiteral(237))<=0)
-237 -12038 0
-102 -12038 0
-102 -237 -12039 0
c (0<=(SATLiteral(102) - aux1723 + SATLiteral(237)))
237 12039 0
102 12039 0
102 237 12038 0
c ((SATLiteral(117) + SATLiteral(132) - aux1724)<=0)
-132 -12041 0
-117 -12041 0
-117 -132 -12042 0
c (0<=(SATLiteral(117) + SATLiteral(132) - aux1724))
132 12042 0
117 12042 0
117 132 12041 0
c ((SATLiteral(402) + aux1724 - aux1725)<=0)
12041 -12044 0
12042 -12045 0
-402 -12044 0
-402 12041 -12045 0
-402 12042 -12047 0
c (0<=(SATLiteral(402) + aux1724 - aux1725))
-12042 12047 0
-12041 12045 0
402 12047 0
402 -12042 12045 0
402 -12041 12044 0
c ((aux1721 + aux1723 - aux1726)<=0)
12038 -12049 0
12039 -12050 0
12032 -12049 0
12032 12038 -12050 0
12032 12039 -12052 0
12033 -12050 0
12033 12038 -12052 0
12033 12039 -12054 0
c (0<=(aux1721 + aux1723 - aux1726))
-12039 12054 0
-12038 12052 0
-12033 12054 0
-12033 -12039 12052 0
-12033 -12038 12050 0
-12032 12052 0
-12032 -12039 12050 0
-12032 -12038 12049 0
c ((SATLiteral(374) - aux1727 + SATLiteral(269))<=0)
-269 -12056 0
-374 -12056 0
-374 -269 -12057 0
c (0<=(SATLiteral(374) - aux1727 + SATLiteral(269)))
269 12057 0
374 12057 0
374 269 12056 0
c ((SATLiteral(389) - aux1728 + SATLiteral(254))<=0)
-254 -12059 0
-389 -12059 0
-389 -254 -12060 0
c (0<=(SATLiteral(389) - aux1728 + SATLiteral(254)))
254 12060 0
389 12060 0
389 254 12059 0
c ((SATLiteral(104) - aux1729 + SATLiteral(239))<=0)
-239 -12062 0
-104 -12062 0
-104 -239 -12063 0
c (0<=(SATLiteral(104) - aux1729 + SATLiteral(239)))
239 12063 0
104 12063 0
104 239 12062 0
c ((SATLiteral(119) + SATLiteral(134) - aux1730)<=0)
-134 -12065 0
-119 -12065 0
-119 -134 -12066 0
c (0<=(SATLiteral(119) + SATLiteral(134) - aux1730))
134 12066 0
119 12066 0
119 134 12065 0
c ((SATLiteral(404) + aux1730 - aux1731)<=0)
12065 -12068 0
12066 -12069 0
-404 -12068 0
-404 12065 -12069 0
-404 12066 -12071 0
c (0<=(SATLiteral(404) + aux1730 - aux1731))
-12066 12071 0
-12065 12069 0
404 12071 0
404 -12066 12069 0
404 -12065 12068 0
c ((aux1727 + aux1729 - aux1732)<=0)
12062 -12073 0
12063 -12074 0
12056 -12073 0
12056 12062 -12074 0
12056 12063 -12076 0
12057 -12074 0
12057 12062 -12076 0
12057 12063 -12078 0
c (0<=(aux1727 + aux1729 - aux1732))
-12063 12078 0
-12062 12076 0
-12057 12078 0
-12057 -12063 12076 0
-12057 -12062 12074 0
-12056 12076 0
-12056 -12063 12074 0
-12056 -12062 12073 0
c ((SATLiteral(376) - aux1733 + SATLiteral(271))<=0)
-271 -12080 0
-376 -12080 0
-376 -271 -12081 0
c (0<=(SATLiteral(376) - aux1733 + SATLiteral(271)))
271 12081 0
376 12081 0
376 271 12080 0
c ((SATLiteral(391) - aux1734 + SATLiteral(256))<=0)
-256 -12083 0
-391 -12083 0
-391 -256 -12084 0
c (0<=(SATLiteral(391) - aux1734 + SATLiteral(256)))
256 12084 0
391 12084 0
391 256 12083 0
c ((SATLiteral(106) - aux1735 + SATLiteral(241))<=0)
-241 -12086 0
-106 -12086 0
-106 -241 -12087 0
c (0<=(SATLiteral(106) - aux1735 + SATLiteral(241)))
241 12087 0
106 12087 0
106 241 12086 0
c ((SATLiteral(121) + SATLiteral(136) - aux1736)<=0)
-136 -12089 0
-121 -12089 0
-121 -136 -12090 0
c (0<=(SATLiteral(121) + SATLiteral(136) - aux1736))
136 12090 0
121 12090 0
121 136 12089 0
c ((SATLiteral(406) + aux1736 - aux1737)<=0)
12089 -12092 0
12090 -12093 0
-406 -12092 0
-406 12089 -12093 0
-406 12090 -12095 0
c (0<=(SATLiteral(406) + aux1736 - aux1737))
-12090 12095 0
-12089 12093 0
406 12095 0
406 -12090 12093 0
406 -12089 12092 0
c ((aux1733 + aux1735 - aux1738)<=0)
12086 -12097 0
12087 -12098 0
12080 -12097 0
12080 12086 -12098 0
12080 12087 -12100 0
12081 -12098 0
12081 12086 -12100 0
12081 12087 -12102 0
c (0<=(aux1733 + aux1735 - aux1738))
-12087 12102 0
-12086 12100 0
-12081 12102 0
-12081 -12087 12100 0
-12081 -12086 12098 0
-12080 12100 0
-12080 -12087 12098 0
-12080 -12086 12097 0
c ((SATLiteral(-375) - aux1739 + SATLiteral(-270))<=0)
270 -12104 0
375 -12104 0
375 270 -12105 0
c (0<=(SATLiteral(-375) - aux1739 + SATLiteral(-270)))
-270 12105 0
-375 12105 0
-375 -270 12104 0
c ((SATLiteral(-390) - aux1740 + SATLiteral(-255))<=0)
255 -12107 0
390 -12107 0
390 255 -12108 0
c (0<=(SATLiteral(-390) - aux1740 + SATLiteral(-255)))
-255 12108 0
-390 12108 0
-390 -255 12107 0
c ((SATLiteral(-105) - aux1741 + SATLiteral(-240))<=0)
240 -12110 0
105 -12110 0
105 240 -12111 0
c (0<=(SATLiteral(-105) - aux1741 + SATLiteral(-240)))
-240 12111 0
-105 12111 0
-105 -240 12110 0
c ((SATLiteral(-120) + SATLiteral(-135) - aux1742)<=0)
135 -12113 0
120 -12113 0
120 135 -12114 0
c (0<=(SATLiteral(-120) + SATLiteral(-135) - aux1742))
-135 12114 0
-120 12114 0
-120 -135 12113 0
c ((SATLiteral(-405) + aux1742 - aux1743)<=0)
12113 -12116 0
12114 -12117 0
405 -12116 0
405 12113 -12117 0
405 12114 -12119 0
c (0<=(SATLiteral(-405) + aux1742 - aux1743))
-12114 12119 0
-12113 12117 0
-405 12119 0
-405 -12114 12117 0
-405 -12113 12116 0
c ((aux1739 + aux1741 - aux1744)<=0)
12110 -12121 0
12111 -12122 0
12104 -12121 0
12104 12110 -12122 0
12104 12111 -12124 0
12105 -12122 0
12105 12110 -12124 0
12105 12111 -12126 0
c (0<=(aux1739 + aux1741 - aux1744))
-12111 12126 0
-12110 12124 0
-12105 12126 0
-12105 -12111 12124 0
-12105 -12110 12122 0
-12104 12124 0
-12104 -12111 12122 0
-12104 -12110 12121 0
c ((SATLiteral(677) - aux1745 + SATLiteral(572))<=0)
-572 -12128 0
-677 -12128 0
-677 -572 -12129 0
c (0<=(SATLiteral(677) - aux1745 + SATLiteral(572)))
572 12129 0
677 12129 0
677 572 12128 0
c ((SATLiteral(692) - aux1746 + SATLiteral(557))<=0)
-557 -12131 0
-692 -12131 0
-692 -557 -12132 0
c (0<=(SATLiteral(692) - aux1746 + SATLiteral(557)))
557 12132 0
692 12132 0
692 557 12131 0
c (( - aux1747 + SATLiteral(407) + SATLiteral(542))<=0)
-542 -12134 0
-407 -12134 0
-407 -542 -12135 0
c (0<=( - aux1747 + SATLiteral(407) + SATLiteral(542)))
542 12135 0
407 12135 0
407 542 12134 0
c (( - aux1748 + SATLiteral(422) + SATLiteral(437))<=0)
-437 -12137 0
-422 -12137 0
-422 -437 -12138 0
c (0<=( - aux1748 + SATLiteral(422) + SATLiteral(437)))
437 12138 0
422 12138 0
422 437 12137 0
c ((SATLiteral(707) + aux1748 - aux1749)<=0)
12137 -12140 0
12138 -12141 0
-707 -12140 0
-707 12137 -12141 0
-707 12138 -12143 0
c (0<=(SATLiteral(707) + aux1748 - aux1749))
-12138 12143 0
-12137 12141 0
707 12143 0
707 -12138 12141 0
707 -12137 12140 0
c ((aux1745 + aux1747 - aux1750)<=0)
12134 -12145 0
12135 -12146 0
12128 -12145 0
12128 12134 -12146 0
12128 12135 -12148 0
12129 -12146 0
12129 12134 -12148 0
12129 12135 -12150 0
c (0<=(aux1745 + aux1747 - aux1750))
-12135 12150 0
-12134 12148 0
-12129 12150 0
-12129 -12135 12148 0
-12129 -12134 12146 0
-12128 12148 0
-12128 -12135 12146 0
-12128 -12134 12145 0
c ((SATLiteral(679) - aux1751 + SATLiteral(574))<=0)
-574 -12152 0
-679 -12152 0
-679 -574 -12153 0
c (0<=(SATLiteral(679) - aux1751 + SATLiteral(574)))
574 12153 0
679 12153 0
679 574 12152 0
c ((SATLiteral(694) - aux1752 + SATLiteral(559))<=0)
-559 -12155 0
-694 -12155 0
-694 -559 -12156 0
c (0<=(SATLiteral(694) - aux1752 + SATLiteral(559)))
559 12156 0
694 12156 0
694 559 12155 0
c (( - aux1753 + SATLiteral(409) + SATLiteral(544))<=0)
-544 -12158 0
-409 -12158 0
-409 -544 -12159 0
c (0<=( - aux1753 + SATLiteral(409) + SATLiteral(544)))
544 12159 0
409 12159 0
409 544 12158 0
c (( - aux1754 + SATLiteral(424) + SATLiteral(439))<=0)
-439 -12161 0
-424 -12161 0
-424 -439 -12162 0
c (0<=( - aux1754 + SATLiteral(424) + SATLiteral(439)))
439 12162 0
424 12162 0
424 439 12161 0
c ((SATLiteral(709) + aux1754 - aux1755)<=0)
12161 -12164 0
12162 -12165 0
-709 -12164 0
-709 12161 -12165 0
-709 12162 -12167 0
c (0<=(SATLiteral(709) + aux1754 - aux1755))
-12162 12167 0
-12161 12165 0
709 12167 0
709 -12162 12165 0
709 -12161 12164 0
c ((aux1751 + aux1753 - aux1756)<=0)
12158 -12169 0
12159 -12170 0
12152 -12169 0
12152 12158 -12170 0
12152 12159 -12172 0
12153 -12170 0
12153 12158 -12172 0
12153 12159 -12174 0
c (0<=(aux1751 + aux1753 - aux1756))
-12159 12174 0
-12158 12172 0
-12153 12174 0
-12153 -12159 12172 0
-12153 -12158 12170 0
-12152 12172 0
-12152 -12159 12170 0
-12152 -12158 12169 0
c ((SATLiteral(681) - aux1757 + SATLiteral(576))<=0)
-576 -12176 0
-681 -12176 0
-681 -576 -12177 0
c (0<=(SATLiteral(681) - aux1757 + SATLiteral(576)))
576 12177 0
681 12177 0
681 576 12176 0
c ((SATLiteral(696) - aux1758 + SATLiteral(561))<=0)
-561 -12179 0
-696 -12179 0
-696 -561 -12180 0
c (0<=(SATLiteral(696) - aux1758 + SATLiteral(561)))
561 12180 0
696 12180 0
696 561 12179 0
c (( - aux1759 + SATLiteral(411) + SATLiteral(546))<=0)
-546 -12182 0
-411 -12182 0
-411 -546 -12183 0
c (0<=( - aux1759 + SATLiteral(411) + SATLiteral(546)))
546 12183 0
411 12183 0
411 546 12182 0
c (( - aux1760 + SATLiteral(426) + SATLiteral(441))<=0)
-441 -12185 0
-426 -12185 0
-426 -441 -12186 0
c (0<=( - aux1760 + SATLiteral(426) + SATLiteral(441)))
441 12186 0
426 12186 0
426 441 12185 0
c ((SATLiteral(711) + aux1760 - aux1761)<=0)
12185 -12188 0
12186 -12189 0
-711 -12188 0
-711 12185 -12189 0
-711 12186 -12191 0
c (0<=(SATLiteral(711) + aux1760 - aux1761))
-12186 12191 0
-12185 12189 0
711 12191 0
711 -12186 12189 0
711 -12185 12188 0
c ((aux1757 + aux1759 - aux1762)<=0)
12182 -12193 0
12183 -12194 0
12176 -12193 0
12176 12182 -12194 0
12176 12183 -12196 0
12177 -12194 0
12177 12182 -12196 0
12177 12183 -12198 0
c (0<=(aux1757 + aux1759 - aux1762))
-12183 12198 0
-12182 12196 0
-12177 12198 0
-12177 -12183 12196 0
-12177 -12182 12194 0
-12176 12196 0
-12176 -12183 12194 0
-12176 -12182 12193 0
c ((SATLiteral(683) - aux1763 + SATLiteral(578))<=0)
-578 -12200 0
-683 -12200 0
-683 -578 -12201 0
c (0<=(SATLiteral(683) - aux1763 + SATLiteral(578)))
578 12201 0
683 12201 0
683 578 12200 0
c ((SATLiteral(698) - aux1764 + SATLiteral(563))<=0)
-563 -12203 0
-698 -12203 0
-698 -563 -12204 0
c (0<=(SATLiteral(698) - aux1764 + SATLiteral(563)))
563 12204 0
698 12204 0
698 563 12203 0
c (( - aux1765 + SATLiteral(413) + SATLiteral(548))<=0)
-548 -12206 0
-413 -12206 0
-413 -548 -12207 0
c (0<=( - aux1765 + SATLiteral(413) + SATLiteral(548)))
548 12207 0
413 12207 0
413 548 12206 0
c (( - aux1766 + SATLiteral(428) + SATLiteral(443))<=0)
-443 -12209 0
-428 -12209 0
-428 -443 -12210 0
c (0<=( - aux1766 + SATLiteral(428) + SATLiteral(443)))
443 12210 0
428 12210 0
428 443 12209 0
c ((SATLiteral(713) + aux1766 - aux1767)<=0)
12209 -12212 0
12210 -12213 0
-713 -12212 0
-713 12209 -12213 0
-713 12210 -12215 0
c (0<=(SATLiteral(713) + aux1766 - aux1767))
-12210 12215 0
-12209 12213 0
713 12215 0
713 -12210 12213 0
713 -12209 12212 0
c ((aux1763 + aux1765 - aux1768)<=0)
12206 -12217 0
12207 -12218 0
12200 -12217 0
12200 12206 -12218 0
12200 12207 -12220 0
12201 -12218 0
12201 12206 -12220 0
12201 12207 -12222 0
c (0<=(aux1763 + aux1765 - aux1768))
-12207 12222 0
-12206 12220 0
-12201 12222 0
-12201 -12207 12220 0
-12201 -12206 12218 0
-12200 12220 0
-12200 -12207 12218 0
-12200 -12206 12217 0
c ((SATLiteral(685) - aux1769 + SATLiteral(580))<=0)
-580 -12224 0
-685 -12224 0
-685 -580 -12225 0
c (0<=(SATLiteral(685) - aux1769 + SATLiteral(580)))
580 12225 0
685 12225 0
685 580 12224 0
c ((SATLiteral(700) - aux1770 + SATLiteral(565))<=0)
-565 -12227 0
-700 -12227 0
-700 -565 -12228 0
c (0<=(SATLiteral(700) - aux1770 + SATLiteral(565)))
565 12228 0
700 12228 0
700 565 12227 0
c (( - aux1771 + SATLiteral(415) + SATLiteral(550))<=0)
-550 -12230 0
-415 -12230 0
-415 -550 -12231 0
c (0<=( - aux1771 + SATLiteral(415) + SATLiteral(550)))
550 12231 0
415 12231 0
415 550 12230 0
c (( - aux1772 + SATLiteral(430) + SATLiteral(445))<=0)
-445 -12233 0
-430 -12233 0
-430 -445 -12234 0
c (0<=( - aux1772 + SATLiteral(430) + SATLiteral(445)))
445 12234 0
430 12234 0
430 445 12233 0
c ((SATLiteral(715) + aux1772 - aux1773)<=0)
12233 -12236 0
12234 -12237 0
-715 -12236 0
-715 12233 -12237 0
-715 12234 -12239 0
c (0<=(SATLiteral(715) + aux1772 - aux1773))
-12234 12239 0
-12233 12237 0
715 12239 0
715 -12234 12237 0
715 -12233 12236 0
c ((aux1769 + aux1771 - aux1774)<=0)
12230 -12241 0
12231 -12242 0
12224 -12241 0
12224 12230 -12242 0
12224 12231 -12244 0
12225 -12242 0
12225 12230 -12244 0
12225 12231 -12246 0
c (0<=(aux1769 + aux1771 - aux1774))
-12231 12246 0
-12230 12244 0
-12225 12246 0
-12225 -12231 12244 0
-12225 -12230 12242 0
-12224 12244 0
-12224 -12231 12242 0
-12224 -12230 12241 0
c ((SATLiteral(687) - aux1775 + SATLiteral(582))<=0)
-582 -12248 0
-687 -12248 0
-687 -582 -12249 0
c (0<=(SATLiteral(687) - aux1775 + SATLiteral(582)))
582 12249 0
687 12249 0
687 582 12248 0
c ((SATLiteral(702) - aux1776 + SATLiteral(567))<=0)
-567 -12251 0
-702 -12251 0
-702 -567 -12252 0
c (0<=(SATLiteral(702) - aux1776 + SATLiteral(567)))
567 12252 0
702 12252 0
702 567 12251 0
c (( - aux1777 + SATLiteral(417) + SATLiteral(552))<=0)
-552 -12254 0
-417 -12254 0
-417 -552 -12255 0
c (0<=( - aux1777 + SATLiteral(417) + SATLiteral(552)))
552 12255 0
417 12255 0
417 552 12254 0
c (( - aux1778 + SATLiteral(432) + SATLiteral(447))<=0)
-447 -12257 0
-432 -12257 0
-432 -447 -12258 0
c (0<=( - aux1778 + SATLiteral(432) + SATLiteral(447)))
447 12258 0
432 12258 0
432 447 12257 0
c ((SATLiteral(717) + aux1778 - aux1779)<=0)
12257 -12260 0
12258 -12261 0
-717 -12260 0
-717 12257 -12261 0
-717 12258 -12263 0
c (0<=(SATLiteral(717) + aux1778 - aux1779))
-12258 12263 0
-12257 12261 0
717 12263 0
717 -12258 12261 0
717 -12257 12260 0
c ((aux1775 + aux1777 - aux1780)<=0)
12254 -12265 0
12255 -12266 0
12248 -12265 0
12248 12254 -12266 0
12248 12255 -12268 0
12249 -12266 0
12249 12254 -12268 0
12249 12255 -12270 0
c (0<=(aux1775 + aux1777 - aux1780))
-12255 12270 0
-12254 12268 0
-12249 12270 0
-12249 -12255 12268 0
-12249 -12254 12266 0
-12248 12268 0
-12248 -12255 12266 0
-12248 -12254 12265 0
c ((SATLiteral(689) - aux1781 + SATLiteral(584))<=0)
-584 -12272 0
-689 -12272 0
-689 -584 -12273 0
c (0<=(SATLiteral(689) - aux1781 + SATLiteral(584)))
584 12273 0
689 12273 0
689 584 12272 0
c ((SATLiteral(704) - aux1782 + SATLiteral(569))<=0)
-569 -12275 0
-704 -12275 0
-704 -569 -12276 0
c (0<=(SATLiteral(704) - aux1782 + SATLiteral(569)))
569 12276 0
704 12276 0
704 569 12275 0
c (( - aux1783 + SATLiteral(419) + SATLiteral(554))<=0)
-554 -12278 0
-419 -12278 0
-419 -554 -12279 0
c (0<=( - aux1783 + SATLiteral(419) + SATLiteral(554)))
554 12279 0
419 12279 0
419 554 12278 0
c (( - aux1784 + SATLiteral(434) + SATLiteral(449))<=0)
-449 -12281 0
-434 -12281 0
-434 -449 -12282 0
c (0<=( - aux1784 + SATLiteral(434) + SATLiteral(449)))
449 12282 0
434 12282 0
434 449 12281 0
c ((SATLiteral(719) + aux1784 - aux1785)<=0)
12281 -12284 0
12282 -12285 0
-719 -12284 0
-719 12281 -12285 0
-719 12282 -12287 0
c (0<=(SATLiteral(719) + aux1784 - aux1785))
-12282 12287 0
-12281 12285 0
719 12287 0
719 -12282 12285 0
719 -12281 12284 0
c ((aux1781 + aux1783 - aux1786)<=0)
12278 -12289 0
12279 -12290 0
12272 -12289 0
12272 12278 -12290 0
12272 12279 -12292 0
12273 -12290 0
12273 12278 -12292 0
12273 12279 -12294 0
c (0<=(aux1781 + aux1783 - aux1786))
-12279 12294 0
-12278 12292 0
-12273 12294 0
-12273 -12279 12292 0
-12273 -12278 12290 0
-12272 12292 0
-12272 -12279 12290 0
-12272 -12278 12289 0
c ((SATLiteral(691) - aux1787 + SATLiteral(586))<=0)
-586 -12296 0
-691 -12296 0
-691 -586 -12297 0
c (0<=(SATLiteral(691) - aux1787 + SATLiteral(586)))
586 12297 0
691 12297 0
691 586 12296 0
c ((SATLiteral(706) - aux1788 + SATLiteral(571))<=0)
-571 -12299 0
-706 -12299 0
-706 -571 -12300 0
c (0<=(SATLiteral(706) - aux1788 + SATLiteral(571)))
571 12300 0
706 12300 0
706 571 12299 0
c (( - aux1789 + SATLiteral(421) + SATLiteral(556))<=0)
-556 -12302 0
-421 -12302 0
-421 -556 -12303 0
c (0<=( - aux1789 + SATLiteral(421) + SATLiteral(556)))
556 12303 0
421 12303 0
421 556 12302 0
c (( - aux1790 + SATLiteral(436) + SATLiteral(451))<=0)
-451 -12305 0
-436 -12305 0
-436 -451 -12306 0
c (0<=( - aux1790 + SATLiteral(436) + SATLiteral(451)))
451 12306 0
436 12306 0
436 451 12305 0
c ((SATLiteral(721) + aux1790 - aux1791)<=0)
12305 -12308 0
12306 -12309 0
-721 -12308 0
-721 12305 -12309 0
-721 12306 -12311 0
c (0<=(SATLiteral(721) + aux1790 - aux1791))
-12306 12311 0
-12305 12309 0
721 12311 0
721 -12306 12309 0
721 -12305 12308 0
c ((aux1787 + aux1789 - aux1792)<=0)
12302 -12313 0
12303 -12314 0
12296 -12313 0
12296 12302 -12314 0
12296 12303 -12316 0
12297 -12314 0
12297 12302 -12316 0
12297 12303 -12318 0
c (0<=(aux1787 + aux1789 - aux1792))
-12303 12318 0
-12302 12316 0
-12297 12318 0
-12297 -12303 12316 0
-12297 -12302 12314 0
-12296 12316 0
-12296 -12303 12314 0
-12296 -12302 12313 0
c ((SATLiteral(-690) - aux1793 + SATLiteral(-585))<=0)
585 -12320 0
690 -12320 0
690 585 -12321 0
c (0<=(SATLiteral(-690) - aux1793 + SATLiteral(-585)))
-585 12321 0
-690 12321 0
-690 -585 12320 0
c ((SATLiteral(-705) - aux1794 + SATLiteral(-570))<=0)
570 -12323 0
705 -12323 0
705 570 -12324 0
c (0<=(SATLiteral(-705) - aux1794 + SATLiteral(-570)))
-570 12324 0
-705 12324 0
-705 -570 12323 0
c (( - aux1795 + SATLiteral(-420) + SATLiteral(-555))<=0)
555 -12326 0
420 -12326 0
420 555 -12327 0
c (0<=( - aux1795 + SATLiteral(-420) + SATLiteral(-555)))
-555 12327 0
-420 12327 0
-420 -555 12326 0
c (( - aux1796 + SATLiteral(-435) + SATLiteral(-450))<=0)
450 -12329 0
435 -12329 0
435 450 -12330 0
c (0<=( - aux1796 + SATLiteral(-435) + SATLiteral(-450)))
-450 12330 0
-435 12330 0
-435 -450 12329 0
c ((SATLiteral(-720) + aux1796 - aux1797)<=0)
12329 -12332 0
12330 -12333 0
720 -12332 0
720 12329 -12333 0
720 12330 -12335 0
c (0<=(SATLiteral(-720) + aux1796 - aux1797))
-12330 12335 0
-12329 12333 0
-720 12335 0
-720 -12330 12333 0
-720 -12329 12332 0
c ((aux1793 + aux1795 - aux1798)<=0)
12326 -12337 0
12327 -12338 0
12320 -12337 0
12320 12326 -12338 0
12320 12327 -12340 0
12321 -12338 0
12321 12326 -12340 0
12321 12327 -12342 0
c (0<=(aux1793 + aux1795 - aux1798))
-12327 12342 0
-12326 12340 0
-12321 12342 0
-12321 -12327 12340 0
-12321 -12326 12338 0
-12320 12340 0
-12320 -12327 12338 0
-12320 -12326 12337 0
c ((SATLiteral(722) - aux1799 + SATLiteral(617))<=0)
-617 -12344 0
-722 -12344 0
-722 -617 -12345 0
c (0<=(SATLiteral(722) - aux1799 + SATLiteral(617)))
617 12345 0
722 12345 0
722 617 12344 0
c ((SATLiteral(737) - aux1800 + SATLiteral(602))<=0)
-602 -12347 0
-737 -12347 0
-737 -602 -12348 0
c (0<=(SATLiteral(737) - aux1800 + SATLiteral(602)))
602 12348 0
737 12348 0
737 602 12347 0
c (( - aux1801 + SATLiteral(452) + SATLiteral(587))<=0)
-587 -12350 0
-452 -12350 0
-452 -587 -12351 0
c (0<=( - aux1801 + SATLiteral(452) + SATLiteral(587)))
587 12351 0
452 12351 0
452 587 12350 0
c (( - aux1802 + SATLiteral(467) + SATLiteral(482))<=0)
-482 -12353 0
-467 -12353 0
-467 -482 -12354 0
c (0<=( - aux1802 + SATLiteral(467) + SATLiteral(482)))
482 12354 0
467 12354 0
467 482 12353 0
c ((SATLiteral(752) + aux1802 - aux1803)<=0)
12353 -12356 0
12354 -12357 0
-752 -12356 0
-752 12353 -12357 0
-752 12354 -12359 0
c (0<=(SATLiteral(752) + aux1802 - aux1803))
-12354 12359 0
-12353 12357 0
752 12359 0
752 -12354 12357 0
752 -12353 12356 0
c ((aux1799 + aux1801 - aux1804)<=0)
12350 -12361 0
12351 -12362 0
12344 -12361 0
12344 12350 -12362 0
12344 12351 -12364 0
12345 -12362 0
12345 12350 -12364 0
12345 12351 -12366 0
c (0<=(aux1799 + aux1801 - aux1804))
-12351 12366 0
-12350 12364 0
-12345 12366 0
-12345 -12351 12364 0
-12345 -12350 12362 0
-12344 12364 0
-12344 -12351 12362 0
-12344 -12350 12361 0
c ((SATLiteral(724) - aux1805 + SATLiteral(619))<=0)
-619 -12368 0
-724 -12368 0
-724 -619 -12369 0
c (0<=(SATLiteral(724) - aux1805 + SATLiteral(619)))
619 12369 0
724 12369 0
724 619 12368 0
c ((SATLiteral(739) - aux1806 + SATLiteral(604))<=0)
-604 -12371 0
-739 -12371 0
-739 -604 -12372 0
c (0<=(SATLiteral(739) - aux1806 + SATLiteral(604)))
604 12372 0
739 12372 0
739 604 12371 0
c (( - aux1807 + SATLiteral(454) + SATLiteral(589))<=0)
-589 -12374 0
-454 -12374 0
-454 -589 -12375 0
c (0<=( - aux1807 + SATLiteral(454) + SATLiteral(589)))
589 12375 0
454 12375 0
454 589 12374 0
c (( - aux1808 + SATLiteral(469) + SATLiteral(484))<=0)
-484 -12377 0
-469 -12377 0
-469 -484 -12378 0
c (0<=( - aux1808 + SATLiteral(469) + SATLiteral(484)))
484 12378 0
469 12378 0
469 484 12377 0
c ((SATLiteral(754) + aux1808 - aux1809)<=0)
12377 -12380 0
12378 -12381 0
-754 -12380 0
-754 12377 -12381 0
-754 12378 -12383 0
c (0<=(SATLiteral(754) + aux1808 - aux1809))
-12378 12383 0
-12377 12381 0
754 12383 0
754 -12378 12381 0
754 -12377 12380 0
c ((aux1805 + aux1807 - aux1810)<=0)
12374 -12385 0
12375 -12386 0
12368 -12385 0
12368 12374 -12386 0
12368 12375 -12388 0
12369 -12386 0
12369 12374 -12388 0
12369 12375 -12390 0
c (0<=(aux1805 + aux1807 - aux1810))
-12375 12390 0
-12374 12388 0
-12369 12390 0
-12369 -12375 12388 0
-12369 -12374 12386 0
-12368 12388 0
-12368 -12375 12386 0
-12368 -12374 12385 0
c ((SATLiteral(726) - aux1811 + SATLiteral(621))<=0)
-621 -12392 0
-726 -12392 0
-726 -621 -12393 0
c (0<=(SATLiteral(726) - aux1811 + SATLiteral(621)))
621 12393 0
726 12393 0
726 621 12392 0
c ((SATLiteral(741) - aux1812 + SATLiteral(606))<=0)
-606 -12395 0
-741 -12395 0
-741 -606 -12396 0
c (0<=(SATLiteral(741) - aux1812 + SATLiteral(606)))
606 12396 0
741 12396 0
741 606 12395 0
c (( - aux1813 + SATLiteral(456) + SATLiteral(591))<=0)
-591 -12398 0
-456 -12398 0
-456 -591 -12399 0
c (0<=( - aux1813 + SATLiteral(456) + SATLiteral(591)))
591 12399 0
456 12399 0
456 591 12398 0
c (( - aux1814 + SATLiteral(471) + SATLiteral(486))<=0)
-486 -12401 0
-471 -12401 0
-471 -486 -12402 0
c (0<=( - aux1814 + SATLiteral(471) + SATLiteral(486)))
486 12402 0
471 12402 0
471 486 12401 0
c ((SATLiteral(756) + aux1814 - aux1815)<=0)
12401 -12404 0
12402 -12405 0
-756 -12404 0
-756 12401 -12405 0
-756 12402 -12407 0
c (0<=(SATLiteral(756) + aux1814 - aux1815))
-12402 12407 0
-12401 12405 0
756 12407 0
756 -12402 12405 0
756 -12401 12404 0
c ((aux1811 + aux1813 - aux1816)<=0)
12398 -12409 0
12399 -12410 0
12392 -12409 0
12392 12398 -12410 0
12392 12399 -12412 0
12393 -12410 0
12393 12398 -12412 0
12393 12399 -12414 0
c (0<=(aux1811 + aux1813 - aux1816))
-12399 12414 0
-12398 12412 0
-12393 12414 0
-12393 -12399 12412 0
-12393 -12398 12410 0
-12392 12412 0
-12392 -12399 12410 0
-12392 -12398 12409 0
c ((SATLiteral(728) - aux1817 + SATLiteral(623))<=0)
-623 -12416 0
-728 -12416 0
-728 -623 -12417 0
c (0<=(SATLiteral(728) - aux1817 + SATLiteral(623)))
623 12417 0
728 12417 0
728 623 12416 0
c ((SATLiteral(743) - aux1818 + SATLiteral(608))<=0)
-608 -12419 0
-743 -12419 0
-743 -608 -12420 0
c (0<=(SATLiteral(743) - aux1818 + SATLiteral(608)))
608 12420 0
743 12420 0
743 608 12419 0
c (( - aux1819 + SATLiteral(458) + SATLiteral(593))<=0)
-593 -12422 0
-458 -12422 0
-458 -593 -12423 0
c (0<=( - aux1819 + SATLiteral(458) + SATLiteral(593)))
593 12423 0
458 12423 0
458 593 12422 0
c (( - aux1820 + SATLiteral(473) + SATLiteral(488))<=0)
-488 -12425 0
-473 -12425 0
-473 -488 -12426 0
c (0<=( - aux1820 + SATLiteral(473) + SATLiteral(488)))
488 12426 0
473 12426 0
473 488 12425 0
c ((SATLiteral(758) + aux1820 - aux1821)<=0)
12425 -12428 0
12426 -12429 0
-758 -12428 0
-758 12425 -12429 0
-758 12426 -12431 0
c (0<=(SATLiteral(758) + aux1820 - aux1821))
-12426 12431 0
-12425 12429 0
758 12431 0
758 -12426 12429 0
758 -12425 12428 0
c ((aux1817 + aux1819 - aux1822)<=0)
12422 -12433 0
12423 -12434 0
12416 -12433 0
12416 12422 -12434 0
12416 12423 -12436 0
12417 -12434 0
12417 12422 -12436 0
12417 12423 -12438 0
c (0<=(aux1817 + aux1819 - aux1822))
-12423 12438 0
-12422 12436 0
-12417 12438 0
-12417 -12423 12436 0
-12417 -12422 12434 0
-12416 12436 0
-12416 -12423 12434 0
-12416 -12422 12433 0
c ((SATLiteral(730) - aux1823 + SATLiteral(625))<=0)
-625 -12440 0
-730 -12440 0
-730 -625 -12441 0
c (0<=(SATLiteral(730) - aux1823 + SATLiteral(625)))
625 12441 0
730 12441 0
730 625 12440 0
c ((SATLiteral(745) - aux1824 + SATLiteral(610))<=0)
-610 -12443 0
-745 -12443 0
-745 -610 -12444 0
c (0<=(SATLiteral(745) - aux1824 + SATLiteral(610)))
610 12444 0
745 12444 0
745 610 12443 0
c (( - aux1825 + SATLiteral(460) + SATLiteral(595))<=0)
-595 -12446 0
-460 -12446 0
-460 -595 -12447 0
c (0<=( - aux1825 + SATLiteral(460) + SATLiteral(595)))
595 12447 0
460 12447 0
460 595 12446 0
c (( - aux1826 + SATLiteral(475) + SATLiteral(490))<=0)
-490 -12449 0
-475 -12449 0
-475 -490 -12450 0
c (0<=( - aux1826 + SATLiteral(475) + SATLiteral(490)))
490 12450 0
475 12450 0
475 490 12449 0
c ((SATLiteral(760) + aux1826 - aux1827)<=0)
12449 -12452 0
12450 -12453 0
-760 -12452 0
-760 12449 -12453 0
-760 12450 -12455 0
c (0<=(SATLiteral(760) + aux1826 - aux1827))
-12450 12455 0
-12449 12453 0
760 12455 0
760 -12450 12453 0
760 -12449 12452 0
c ((aux1823 + aux1825 - aux1828)<=0)
12446 -12457 0
12447 -12458 0
12440 -12457 0
12440 12446 -12458 0
12440 12447 -12460 0
12441 -12458 0
12441 12446 -12460 0
12441 12447 -12462 0
c (0<=(aux1823 + aux1825 - aux1828))
-12447 12462 0
-12446 12460 0
-12441 12462 0
-12441 -12447 12460 0
-12441 -12446 12458 0
-12440 12460 0
-12440 -12447 12458 0
-12440 -12446 12457 0
c ((SATLiteral(732) - aux1829 + SATLiteral(627))<=0)
-627 -12464 0
-732 -12464 0
-732 -627 -12465 0
c (0<=(SATLiteral(732) - aux1829 + SATLiteral(627)))
627 12465 0
732 12465 0
732 627 12464 0
c ((SATLiteral(747) - aux1830 + SATLiteral(612))<=0)
-612 -12467 0
-747 -12467 0
-747 -612 -12468 0
c (0<=(SATLiteral(747) - aux1830 + SATLiteral(612)))
612 12468 0
747 12468 0
747 612 12467 0
c (( - aux1831 + SATLiteral(462) + SATLiteral(597))<=0)
-597 -12470 0
-462 -12470 0
-462 -597 -12471 0
c (0<=( - aux1831 + SATLiteral(462) + SATLiteral(597)))
597 12471 0
462 12471 0
462 597 12470 0
c (( - aux1832 + SATLiteral(477) + SATLiteral(492))<=0)
-492 -12473 0
-477 -12473 0
-477 -492 -12474 0
c (0<=( - aux1832 + SATLiteral(477) + SATLiteral(492)))
492 12474 0
477 12474 0
477 492 12473 0
c ((SATLiteral(762) + aux1832 - aux1833)<=0)
12473 -12476 0
12474 -12477 0
-762 -12476 0
-762 12473 -12477 0
-762 12474 -12479 0
c (0<=(SATLiteral(762) + aux1832 - aux1833))
-12474 12479 0
-12473 12477 0
762 12479 0
762 -12474 12477 0
762 -12473 12476 0
c ((aux1829 + aux1831 - aux1834)<=0)
12470 -12481 0
12471 -12482 0
12464 -12481 0
12464 12470 -12482 0
12464 12471 -12484 0
12465 -12482 0
12465 12470 -12484 0
12465 12471 -12486 0
c (0<=(aux1829 + aux1831 - aux1834))
-12471 12486 0
-12470 12484 0
-12465 12486 0
-12465 -12471 12484 0
-12465 -12470 12482 0
-12464 12484 0
-12464 -12471 12482 0
-12464 -12470 12481 0
c ((SATLiteral(734) - aux1835 + SATLiteral(629))<=0)
-629 -12488 0
-734 -12488 0
-734 -629 -12489 0
c (0<=(SATLiteral(734) - aux1835 + SATLiteral(629)))
629 12489 0
734 12489 0
734 629 12488 0
c ((SATLiteral(749) - aux1836 + SATLiteral(614))<=0)
-614 -12491 0
-749 -12491 0
-749 -614 -12492 0
c (0<=(SATLiteral(749) - aux1836 + SATLiteral(614)))
614 12492 0
749 12492 0
749 614 12491 0
c (( - aux1837 + SATLiteral(464) + SATLiteral(599))<=0)
-599 -12494 0
-464 -12494 0
-464 -599 -12495 0
c (0<=( - aux1837 + SATLiteral(464) + SATLiteral(599)))
599 12495 0
464 12495 0
464 599 12494 0
c (( - aux1838 + SATLiteral(479) + SATLiteral(494))<=0)
-494 -12497 0
-479 -12497 0
-479 -494 -12498 0
c (0<=( - aux1838 + SATLiteral(479) + SATLiteral(494)))
494 12498 0
479 12498 0
479 494 12497 0
c ((SATLiteral(764) + aux1838 - aux1839)<=0)
12497 -12500 0
12498 -12501 0
-764 -12500 0
-764 12497 -12501 0
-764 12498 -12503 0
c (0<=(SATLiteral(764) + aux1838 - aux1839))
-12498 12503 0
-12497 12501 0
764 12503 0
764 -12498 12501 0
764 -12497 12500 0
c ((aux1835 + aux1837 - aux1840)<=0)
12494 -12505 0
12495 -12506 0
12488 -12505 0
12488 12494 -12506 0
12488 12495 -12508 0
12489 -12506 0
12489 12494 -12508 0
12489 12495 -12510 0
c (0<=(aux1835 + aux1837 - aux1840))
-12495 12510 0
-12494 12508 0
-12489 12510 0
-12489 -12495 12508 0
-12489 -12494 12506 0
-12488 12508 0
-12488 -12495 12506 0
-12488 -12494 12505 0
c ((SATLiteral(736) - aux1841 + SATLiteral(631))<=0)
-631 -12512 0
-736 -12512 0
-736 -631 -12513 0
c (0<=(SATLiteral(736) - aux1841 + SATLiteral(631)))
631 12513 0
736 12513 0
736 631 12512 0
c ((SATLiteral(751) - aux1842 + SATLiteral(616))<=0)
-616 -12515 0
-751 -12515 0
-751 -616 -12516 0
c (0<=(SATLiteral(751) - aux1842 + SATLiteral(616)))
616 12516 0
751 12516 0
751 616 12515 0
c (( - aux1843 + SATLiteral(466) + SATLiteral(601))<=0)
-601 -12518 0
-466 -12518 0
-466 -601 -12519 0
c (0<=( - aux1843 + SATLiteral(466) + SATLiteral(601)))
601 12519 0
466 12519 0
466 601 12518 0
c (( - aux1844 + SATLiteral(481) + SATLiteral(496))<=0)
-496 -12521 0
-481 -12521 0
-481 -496 -12522 0
c (0<=( - aux1844 + SATLiteral(481) + SATLiteral(496)))
496 12522 0
481 12522 0
481 496 12521 0
c ((SATLiteral(766) + aux1844 - aux1845)<=0)
12521 -12524 0
12522 -12525 0
-766 -12524 0
-766 12521 -12525 0
-766 12522 -12527 0
c (0<=(SATLiteral(766) + aux1844 - aux1845))
-12522 12527 0
-12521 12525 0
766 12527 0
766 -12522 12525 0
766 -12521 12524 0
c ((aux1841 + aux1843 - aux1846)<=0)
12518 -12529 0
12519 -12530 0
12512 -12529 0
12512 12518 -12530 0
12512 12519 -12532 0
12513 -12530 0
12513 12518 -12532 0
12513 12519 -12534 0
c (0<=(aux1841 + aux1843 - aux1846))
-12519 12534 0
-12518 12532 0
-12513 12534 0
-12513 -12519 12532 0
-12513 -12518 12530 0
-12512 12532 0
-12512 -12519 12530 0
-12512 -12518 12529 0
c ((SATLiteral(-735) - aux1847 + SATLiteral(-630))<=0)
630 -12536 0
735 -12536 0
735 630 -12537 0
c (0<=(SATLiteral(-735) - aux1847 + SATLiteral(-630)))
-630 12537 0
-735 12537 0
-735 -630 12536 0
c ((SATLiteral(-750) - aux1848 + SATLiteral(-615))<=0)
615 -12539 0
750 -12539 0
750 615 -12540 0
c (0<=(SATLiteral(-750) - aux1848 + SATLiteral(-615)))
-615 12540 0
-750 12540 0
-750 -615 12539 0
c (( - aux1849 + SATLiteral(-465) + SATLiteral(-600))<=0)
600 -12542 0
465 -12542 0
465 600 -12543 0
c (0<=( - aux1849 + SATLiteral(-465) + SATLiteral(-600)))
-600 12543 0
-465 12543 0
-465 -600 12542 0
c (( - aux1850 + SATLiteral(-480) + SATLiteral(-495))<=0)
495 -12545 0
480 -12545 0
480 495 -12546 0
c (0<=( - aux1850 + SATLiteral(-480) + SATLiteral(-495)))
-495 12546 0
-480 12546 0
-480 -495 12545 0
c ((SATLiteral(-765) + aux1850 - aux1851)<=0)
12545 -12548 0
12546 -12549 0
765 -12548 0
765 12545 -12549 0
765 12546 -12551 0
c (0<=(SATLiteral(-765) + aux1850 - aux1851))
-12546 12551 0
-12545 12549 0
-765 12551 0
-765 -12546 12549 0
-765 -12545 12548 0
c ((aux1847 + aux1849 - aux1852)<=0)
12542 -12553 0
12543 -12554 0
12536 -12553 0
12536 12542 -12554 0
12536 12543 -12556 0
12537 -12554 0
12537 12542 -12556 0
12537 12543 -12558 0
c (0<=(aux1847 + aux1849 - aux1852))
-12543 12558 0
-12542 12556 0
-12537 12558 0
-12537 -12543 12556 0
-12537 -12542 12554 0
-12536 12556 0
-12536 -12543 12554 0
-12536 -12542 12553 0
c ((SATLiteral(767) - aux1853 + SATLiteral(662))<=0)
-662 -12560 0
-767 -12560 0
-767 -662 -12561 0
c (0<=(SATLiteral(767) - aux1853 + SATLiteral(662)))
662 12561 0
767 12561 0
767 662 12560 0
c ((SATLiteral(782) - aux1854 + SATLiteral(647))<=0)
-647 -12563 0
-782 -12563 0
-782 -647 -12564 0
c (0<=(SATLiteral(782) - aux1854 + SATLiteral(647)))
647 12564 0
782 12564 0
782 647 12563 0
c (( - aux1855 + SATLiteral(497) + SATLiteral(632))<=0)
-632 -12566 0
-497 -12566 0
-497 -632 -12567 0
c (0<=( - aux1855 + SATLiteral(497) + SATLiteral(632)))
632 12567 0
497 12567 0
497 632 12566 0
c (( - aux1856 + SATLiteral(512) + SATLiteral(527))<=0)
-527 -12569 0
-512 -12569 0
-512 -527 -12570 0
c (0<=( - aux1856 + SATLiteral(512) + SATLiteral(527)))
527 12570 0
512 12570 0
512 527 12569 0
c ((SATLiteral(797) + aux1856 - aux1857)<=0)
12569 -12572 0
12570 -12573 0
-797 -12572 0
-797 12569 -12573 0
-797 12570 -12575 0
c (0<=(SATLiteral(797) + aux1856 - aux1857))
-12570 12575 0
-12569 12573 0
797 12575 0
797 -12570 12573 0
797 -12569 12572 0
c ((aux1853 + aux1855 - aux1858)<=0)
12566 -12577 0
12567 -12578 0
12560 -12577 0
12560 12566 -12578 0
12560 12567 -12580 0
12561 -12578 0
12561 12566 -12580 0
12561 12567 -12582 0
c (0<=(aux1853 + aux1855 - aux1858))
-12567 12582 0
-12566 12580 0
-12561 12582 0
-12561 -12567 12580 0
-12561 -12566 12578 0
-12560 12580 0
-12560 -12567 12578 0
-12560 -12566 12577 0
c ((SATLiteral(769) - aux1859 + SATLiteral(664))<=0)
-664 -12584 0
-769 -12584 0
-769 -664 -12585 0
c (0<=(SATLiteral(769) - aux1859 + SATLiteral(664)))
664 12585 0
769 12585 0
769 664 12584 0
c ((SATLiteral(784) - aux1860 + SATLiteral(649))<=0)
-649 -12587 0
-784 -12587 0
-784 -649 -12588 0
c (0<=(SATLiteral(784) - aux1860 + SATLiteral(649)))
649 12588 0
784 12588 0
784 649 12587 0
c (( - aux1861 + SATLiteral(499) + SATLiteral(634))<=0)
-634 -12590 0
-499 -12590 0
-499 -634 -12591 0
c (0<=( - aux1861 + SATLiteral(499) + SATLiteral(634)))
634 12591 0
499 12591 0
499 634 12590 0
c (( - aux1862 + SATLiteral(514) + SATLiteral(529))<=0)
-529 -12593 0
-514 -12593 0
-514 -529 -12594 0
c (0<=( - aux1862 + SATLiteral(514) + SATLiteral(529)))
529 12594 0
514 12594 0
514 529 12593 0
c ((SATLiteral(799) + aux1862 - aux1863)<=0)
12593 -12596 0
12594 -12597 0
-799 -12596 0
-799 12593 -12597 0
-799 12594 -12599 0
c (0<=(SATLiteral(799) + aux1862 - aux1863))
-12594 12599 0
-12593 12597 0
799 12599 0
799 -12594 12597 0
799 -12593 12596 0
c ((aux1859 + aux1861 - aux1864)<=0)
12590 -12601 0
12591 -12602 0
12584 -12601 0
12584 12590 -12602 0
12584 12591 -12604 0
12585 -12602 0
12585 12590 -12604 0
12585 12591 -12606 0
c (0<=(aux1859 + aux1861 - aux1864))
-12591 12606 0
-12590 12604 0
-12585 12606 0
-12585 -12591 12604 0
-12585 -12590 12602 0
-12584 12604 0
-12584 -12591 12602 0
-12584 -12590 12601 0
c ((SATLiteral(771) - aux1865 + SATLiteral(666))<=0)
-666 -12608 0
-771 -12608 0
-771 -666 -12609 0
c (0<=(SATLiteral(771) - aux1865 + SATLiteral(666)))
666 12609 0
771 12609 0
771 666 12608 0
c ((SATLiteral(786) - aux1866 + SATLiteral(651))<=0)
-651 -12611 0
-786 -12611 0
-786 -651 -12612 0
c (0<=(SATLiteral(786) - aux1866 + SATLiteral(651)))
651 12612 0
786 12612 0
786 651 12611 0
c (( - aux1867 + SATLiteral(501) + SATLiteral(636))<=0)
-636 -12614 0
-501 -12614 0
-501 -636 -12615 0
c (0<=( - aux1867 + SATLiteral(501) + SATLiteral(636)))
636 12615 0
501 12615 0
501 636 12614 0
c (( - aux1868 + SATLiteral(516) + SATLiteral(531))<=0)
-531 -12617 0
-516 -12617 0
-516 -531 -12618 0
c (0<=( - aux1868 + SATLiteral(516) + SATLiteral(531)))
531 12618 0
516 12618 0
516 531 12617 0
c ((SATLiteral(801) + aux1868 - aux1869)<=0)
12617 -12620 0
12618 -12621 0
-801 -12620 0
-801 12617 -12621 0
-801 12618 -12623 0
c (0<=(SATLiteral(801) + aux1868 - aux1869))
-12618 12623 0
-12617 12621 0
801 12623 0
801 -12618 12621 0
801 -12617 12620 0
c ((aux1865 + aux1867 - aux1870)<=0)
12614 -12625 0
12615 -12626 0
12608 -12625 0
12608 12614 -12626 0
12608 12615 -12628 0
12609 -12626 0
12609 12614 -12628 0
12609 12615 -12630 0
c (0<=(aux1865 + aux1867 - aux1870))
-12615 12630 0
-12614 12628 0
-12609 12630 0
-12609 -12615 12628 0
-12609 -12614 12626 0
-12608 12628 0
-12608 -12615 12626 0
-12608 -12614 12625 0
c ((SATLiteral(773) - aux1871 + SATLiteral(668))<=0)
-668 -12632 0
-773 -12632 0
-773 -668 -12633 0
c (0<=(SATLiteral(773) - aux1871 + SATLiteral(668)))
668 12633 0
773 12633 0
773 668 12632 0
c ((SATLiteral(788) - aux1872 + SATLiteral(653))<=0)
-653 -12635 0
-788 -12635 0
-788 -653 -12636 0
c (0<=(SATLiteral(788) - aux1872 + SATLiteral(653)))
653 12636 0
788 12636 0
788 653 12635 0
c (( - aux1873 + SATLiteral(503) + SATLiteral(638))<=0)
-638 -12638 0
-503 -12638 0
-503 -638 -12639 0
c (0<=( - aux1873 + SATLiteral(503) + SATLiteral(638)))
638 12639 0
503 12639 0
503 638 12638 0
c (( - aux1874 + SATLiteral(518) + SATLiteral(533))<=0)
-533 -12641 0
-518 -12641 0
-518 -533 -12642 0
c (0<=( - aux1874 + SATLiteral(518) + SATLiteral(533)))
533 12642 0
518 12642 0
518 533 12641 0
c ((SATLiteral(803) + aux1874 - aux1875)<=0)
12641 -12644 0
12642 -12645 0
-803 -12644 0
-803 12641 -12645 0
-803 12642 -12647 0
c (0<=(SATLiteral(803) + aux1874 - aux1875))
-12642 12647 0
-12641 12645 0
803 12647 0
803 -12642 12645 0
803 -12641 12644 0
c ((aux1871 + aux1873 - aux1876)<=0)
12638 -12649 0
12639 -12650 0
12632 -12649 0
12632 12638 -12650 0
12632 12639 -12652 0
12633 -12650 0
12633 12638 -12652 0
12633 12639 -12654 0
c (0<=(aux1871 + aux1873 - aux1876))
-12639 12654 0
-12638 12652 0
-12633 12654 0
-12633 -12639 12652 0
-12633 -12638 12650 0
-12632 12652 0
-12632 -12639 12650 0
-12632 -12638 12649 0
c ((SATLiteral(775) - aux1877 + SATLiteral(670))<=0)
-670 -12656 0
-775 -12656 0
-775 -670 -12657 0
c (0<=(SATLiteral(775) - aux1877 + SATLiteral(670)))
670 12657 0
775 12657 0
775 670 12656 0
c ((SATLiteral(790) - aux1878 + SATLiteral(655))<=0)
-655 -12659 0
-790 -12659 0
-790 -655 -12660 0
c (0<=(SATLiteral(790) - aux1878 + SATLiteral(655)))
655 12660 0
790 12660 0
790 655 12659 0
c (( - aux1879 + SATLiteral(505) + SATLiteral(640))<=0)
-640 -12662 0
-505 -12662 0
-505 -640 -12663 0
c (0<=( - aux1879 + SATLiteral(505) + SATLiteral(640)))
640 12663 0
505 12663 0
505 640 12662 0
c (( - aux1880 + SATLiteral(520) + SATLiteral(535))<=0)
-535 -12665 0
-520 -12665 0
-520 -535 -12666 0
c (0<=( - aux1880 + SATLiteral(520) + SATLiteral(535)))
535 12666 0
520 12666 0
520 535 12665 0
c ((SATLiteral(805) + aux1880 - aux1881)<=0)
12665 -12668 0
12666 -12669 0
-805 -12668 0
-805 12665 -12669 0
-805 12666 -12671 0
c (0<=(SATLiteral(805) + aux1880 - aux1881))
-12666 12671 0
-12665 12669 0
805 12671 0
805 -12666 12669 0
805 -12665 12668 0
c ((aux1877 + aux1879 - aux1882)<=0)
12662 -12673 0
12663 -12674 0
12656 -12673 0
12656 12662 -12674 0
12656 12663 -12676 0
12657 -12674 0
12657 12662 -12676 0
12657 12663 -12678 0
c (0<=(aux1877 + aux1879 - aux1882))
-12663 12678 0
-12662 12676 0
-12657 12678 0
-12657 -12663 12676 0
-12657 -12662 12674 0
-12656 12676 0
-12656 -12663 12674 0
-12656 -12662 12673 0
c ((SATLiteral(777) - aux1883 + SATLiteral(672))<=0)
-672 -12680 0
-777 -12680 0
-777 -672 -12681 0
c (0<=(SATLiteral(777) - aux1883 + SATLiteral(672)))
672 12681 0
777 12681 0
777 672 12680 0
c ((SATLiteral(792) - aux1884 + SATLiteral(657))<=0)
-657 -12683 0
-792 -12683 0
-792 -657 -12684 0
c (0<=(SATLiteral(792) - aux1884 + SATLiteral(657)))
657 12684 0
792 12684 0
792 657 12683 0
c (( - aux1885 + SATLiteral(507) + SATLiteral(642))<=0)
-642 -12686 0
-507 -12686 0
-507 -642 -12687 0
c (0<=( - aux1885 + SATLiteral(507) + SATLiteral(642)))
642 12687 0
507 12687 0
507 642 12686 0
c (( - aux1886 + SATLiteral(522) + SATLiteral(537))<=0)
-537 -12689 0
-522 -12689 0
-522 -537 -12690 0
c (0<=( - aux1886 + SATLiteral(522) + SATLiteral(537)))
537 12690 0
522 12690 0
522 537 12689 0
c ((SATLiteral(807) + aux1886 - aux1887)<=0)
12689 -12692 0
12690 -12693 0
-807 -12692 0
-807 12689 -12693 0
-807 12690 -12695 0
c (0<=(SATLiteral(807) + aux1886 - aux1887))
-12690 12695 0
-12689 12693 0
807 12695 0
807 -12690 12693 0
807 -12689 12692 0
c ((aux1883 + aux1885 - aux1888)<=0)
12686 -12697 0
12687 -12698 0
12680 -12697 0
12680 12686 -12698 0
12680 12687 -12700 0
12681 -12698 0
12681 12686 -12700 0
12681 12687 -12702 0
c (0<=(aux1883 + aux1885 - aux1888))
-12687 12702 0
-12686 12700 0
-12681 12702 0
-12681 -12687 12700 0
-12681 -12686 12698 0
-12680 12700 0
-12680 -12687 12698 0
-12680 -12686 12697 0
c ((SATLiteral(779) - aux1889 + SATLiteral(674))<=0)
-674 -12704 0
-779 -12704 0
-779 -674 -12705 0
c (0<=(SATLiteral(779) - aux1889 + SATLiteral(674)))
674 12705 0
779 12705 0
779 674 12704 0
c ((SATLiteral(794) - aux1890 + SATLiteral(659))<=0)
-659 -12707 0
-794 -12707 0
-794 -659 -12708 0
c (0<=(SATLiteral(794) - aux1890 + SATLiteral(659)))
659 12708 0
794 12708 0
794 659 12707 0
c (( - aux1891 + SATLiteral(509) + SATLiteral(644))<=0)
-644 -12710 0
-509 -12710 0
-509 -644 -12711 0
c (0<=( - aux1891 + SATLiteral(509) + SATLiteral(644)))
644 12711 0
509 12711 0
509 644 12710 0
c (( - aux1892 + SATLiteral(524) + SATLiteral(539))<=0)
-539 -12713 0
-524 -12713 0
-524 -539 -12714 0
c (0<=( - aux1892 + SATLiteral(524) + SATLiteral(539)))
539 12714 0
524 12714 0
524 539 12713 0
c ((SATLiteral(809) + aux1892 - aux1893)<=0)
12713 -12716 0
12714 -12717 0
-809 -12716 0
-809 12713 -12717 0
-809 12714 -12719 0
c (0<=(SATLiteral(809) + aux1892 - aux1893))
-12714 12719 0
-12713 12717 0
809 12719 0
809 -12714 12717 0
809 -12713 12716 0
c ((aux1889 + aux1891 - aux1894)<=0)
12710 -12721 0
12711 -12722 0
12704 -12721 0
12704 12710 -12722 0
12704 12711 -12724 0
12705 -12722 0
12705 12710 -12724 0
12705 12711 -12726 0
c (0<=(aux1889 + aux1891 - aux1894))
-12711 12726 0
-12710 12724 0
-12705 12726 0
-12705 -12711 12724 0
-12705 -12710 12722 0
-12704 12724 0
-12704 -12711 12722 0
-12704 -12710 12721 0
c ((SATLiteral(781) - aux1895 + SATLiteral(676))<=0)
-676 -12728 0
-781 -12728 0
-781 -676 -12729 0
c (0<=(SATLiteral(781) - aux1895 + SATLiteral(676)))
676 12729 0
781 12729 0
781 676 12728 0
c ((SATLiteral(796) - aux1896 + SATLiteral(661))<=0)
-661 -12731 0
-796 -12731 0
-796 -661 -12732 0
c (0<=(SATLiteral(796) - aux1896 + SATLiteral(661)))
661 12732 0
796 12732 0
796 661 12731 0
c (( - aux1897 + SATLiteral(511) + SATLiteral(646))<=0)
-646 -12734 0
-511 -12734 0
-511 -646 -12735 0
c (0<=( - aux1897 + SATLiteral(511) + SATLiteral(646)))
646 12735 0
511 12735 0
511 646 12734 0
c (( - aux1898 + SATLiteral(526) + SATLiteral(541))<=0)
-541 -12737 0
-526 -12737 0
-526 -541 -12738 0
c (0<=( - aux1898 + SATLiteral(526) + SATLiteral(541)))
541 12738 0
526 12738 0
526 541 12737 0
c ((SATLiteral(811) + aux1898 - aux1899)<=0)
12737 -12740 0
12738 -12741 0
-811 -12740 0
-811 12737 -12741 0
-811 12738 -12743 0
c (0<=(SATLiteral(811) + aux1898 - aux1899))
-12738 12743 0
-12737 12741 0
811 12743 0
811 -12738 12741 0
811 -12737 12740 0
c ((aux1895 + aux1897 - aux1900)<=0)
12734 -12745 0
12735 -12746 0
12728 -12745 0
12728 12734 -12746 0
12728 12735 -12748 0
12729 -12746 0
12729 12734 -12748 0
12729 12735 -12750 0
c (0<=(aux1895 + aux1897 - aux1900))
-12735 12750 0
-12734 12748 0
-12729 12750 0
-12729 -12735 12748 0
-12729 -12734 12746 0
-12728 12748 0
-12728 -12735 12746 0
-12728 -12734 12745 0
c ((SATLiteral(-780) - aux1901 + SATLiteral(-675))<=0)
675 -12752 0
780 -12752 0
780 675 -12753 0
c (0<=(SATLiteral(-780) - aux1901 + SATLiteral(-675)))
-675 12753 0
-780 12753 0
-780 -675 12752 0
c ((SATLiteral(-795) - aux1902 + SATLiteral(-660))<=0)
660 -12755 0
795 -12755 0
795 660 -12756 0
c (0<=(SATLiteral(-795) - aux1902 + SATLiteral(-660)))
-660 12756 0
-795 12756 0
-795 -660 12755 0
c (( - aux1903 + SATLiteral(-510) + SATLiteral(-645))<=0)
645 -12758 0
510 -12758 0
510 645 -12759 0
c (0<=( - aux1903 + SATLiteral(-510) + SATLiteral(-645)))
-645 12759 0
-510 12759 0
-510 -645 12758 0
c (( - aux1904 + SATLiteral(-525) + SATLiteral(-540))<=0)
540 -12761 0
525 -12761 0
525 540 -12762 0
c (0<=( - aux1904 + SATLiteral(-525) + SATLiteral(-540)))
-540 12762 0
-525 12762 0
-525 -540 12761 0
c ((SATLiteral(-810) + aux1904 - aux1905)<=0)
12761 -12764 0
12762 -12765 0
810 -12764 0
810 12761 -12765 0
810 12762 -12767 0
c (0<=(SATLiteral(-810) + aux1904 - aux1905))
-12762 12767 0
-12761 12765 0
-810 12767 0
-810 -12762 12765 0
-810 -12761 12764 0
c ((aux1901 + aux1903 - aux1906)<=0)
12758 -12769 0
12759 -12770 0
12752 -12769 0
12752 12758 -12770 0
12752 12759 -12772 0
12753 -12770 0
12753 12758 -12772 0
12753 12759 -12774 0
c (0<=(aux1901 + aux1903 - aux1906))
-12759 12774 0
-12758 12772 0
-12753 12774 0
-12753 -12759 12772 0
-12753 -12758 12770 0
-12752 12772 0
-12752 -12759 12770 0
-12752 -12758 12769 0
c ((SATLiteral(947) - aux1907 + SATLiteral(842))<=0)
-842 -12776 0
-947 -12776 0
-947 -842 -12777 0
c (0<=(SATLiteral(947) - aux1907 + SATLiteral(842)))
842 12777 0
947 12777 0
947 842 12776 0
c ((SATLiteral(962) - aux1908 + SATLiteral(827))<=0)
-827 -12779 0
-962 -12779 0
-962 -827 -12780 0
c (0<=(SATLiteral(962) - aux1908 + SATLiteral(827)))
827 12780 0
962 12780 0
962 827 12779 0
c (( - aux1909 + SATLiteral(1082) + SATLiteral(812))<=0)
-812 -12782 0
-1082 -12782 0
-1082 -812 -12783 0
c (0<=( - aux1909 + SATLiteral(1082) + SATLiteral(812)))
812 12783 0
1082 12783 0
1082 812 12782 0
c (( - aux1910 + SATLiteral(1097) + SATLiteral(1112))<=0)
-1112 -12785 0
-1097 -12785 0
-1097 -1112 -12786 0
c (0<=( - aux1910 + SATLiteral(1097) + SATLiteral(1112)))
1112 12786 0
1097 12786 0
1097 1112 12785 0
c ((SATLiteral(977) + aux1910 - aux1911)<=0)
12785 -12788 0
12786 -12789 0
-977 -12788 0
-977 12785 -12789 0
-977 12786 -12791 0
c (0<=(SATLiteral(977) + aux1910 - aux1911))
-12786 12791 0
-12785 12789 0
977 12791 0
977 -12786 12789 0
977 -12785 12788 0
c ((aux1907 + aux1909 - aux1912)<=0)
12782 -12793 0
12783 -12794 0
12776 -12793 0
12776 12782 -12794 0
12776 12783 -12796 0
12777 -12794 0
12777 12782 -12796 0
12777 12783 -12798 0
c (0<=(aux1907 + aux1909 - aux1912))
-12783 12798 0
-12782 12796 0
-12777 12798 0
-12777 -12783 12796 0
-12777 -12782 12794 0
-12776 12796 0
-12776 -12783 12794 0
-12776 -12782 12793 0
c ((SATLiteral(949) - aux1913 + SATLiteral(844))<=0)
-844 -12800 0
-949 -12800 0
-949 -844 -12801 0
c (0<=(SATLiteral(949) - aux1913 + SATLiteral(844)))
844 12801 0
949 12801 0
949 844 12800 0
c ((SATLiteral(964) - aux1914 + SATLiteral(829))<=0)
-829 -12803 0
-964 -12803 0
-964 -829 -12804 0
c (0<=(SATLiteral(964) - aux1914 + SATLiteral(829)))
829 12804 0
964 12804 0
964 829 12803 0
c (( - aux1915 + SATLiteral(1084) + SATLiteral(814))<=0)
-814 -12806 0
-1084 -12806 0
-1084 -814 -12807 0
c (0<=( - aux1915 + SATLiteral(1084) + SATLiteral(814)))
814 12807 0
1084 12807 0
1084 814 12806 0
c (( - aux1916 + SATLiteral(1099) + SATLiteral(1114))<=0)
-1114 -12809 0
-1099 -12809 0
-1099 -1114 -12810 0
c (0<=( - aux1916 + SATLiteral(1099) + SATLiteral(1114)))
1114 12810 0
1099 12810 0
1099 1114 12809 0
c ((SATLiteral(979) + aux1916 - aux1917)<=0)
12809 -12812 0
12810 -12813 0
-979 -12812 0
-979 12809 -12813 0
-979 12810 -12815 0
c (0<=(SATLiteral(979) + aux1916 - aux1917))
-12810 12815 0
-12809 12813 0
979 12815 0
979 -12810 12813 0
979 -12809 12812 0
c ((aux1913 + aux1915 - aux1918)<=0)
12806 -12817 0
12807 -12818 0
12800 -12817 0
12800 12806 -12818 0
12800 12807 -12820 0
12801 -12818 0
12801 12806 -12820 0
12801 12807 -12822 0
c (0<=(aux1913 + aux1915 - aux1918))
-12807 12822 0
-12806 12820 0
-12801 12822 0
-12801 -12807 12820 0
-12801 -12806 12818 0
-12800 12820 0
-12800 -12807 12818 0
-12800 -12806 12817 0
c ((SATLiteral(951) - aux1919 + SATLiteral(846))<=0)
-846 -12824 0
-951 -12824 0
-951 -846 -12825 0
c (0<=(SATLiteral(951) - aux1919 + SATLiteral(846)))
846 12825 0
951 12825 0
951 846 12824 0
c ((SATLiteral(966) - aux1920 + SATLiteral(831))<=0)
-831 -12827 0
-966 -12827 0
-966 -831 -12828 0
c (0<=(SATLiteral(966) - aux1920 + SATLiteral(831)))
831 12828 0
966 12828 0
966 831 12827 0
c (( - aux1921 + SATLiteral(1086) + SATLiteral(816))<=0)
-816 -12830 0
-1086 -12830 0
-1086 -816 -12831 0
c (0<=( - aux1921 + SATLiteral(1086) + SATLiteral(816)))
816 12831 0
1086 12831 0
1086 816 12830 0
c (( - aux1922 + SATLiteral(1101) + SATLiteral(1116))<=0)
-1116 -12833 0
-1101 -12833 0
-1101 -1116 -12834 0
c (0<=( - aux1922 + SATLiteral(1101) + SATLiteral(1116)))
1116 12834 0
1101 12834 0
1101 1116 12833 0
c ((SATLiteral(981) + aux1922 - aux1923)<=0)
12833 -12836 0
12834 -12837 0
-981 -12836 0
-981 12833 -12837 0
-981 12834 -12839 0
c (0<=(SATLiteral(981) + aux1922 - aux1923))
-12834 12839 0
-12833 12837 0
981 12839 0
981 -12834 12837 0
981 -12833 12836 0
c ((aux1919 + aux1921 - aux1924)<=0)
12830 -12841 0
12831 -12842 0
12824 -12841 0
12824 12830 -12842 0
12824 12831 -12844 0
12825 -12842 0
12825 12830 -12844 0
12825 12831 -12846 0
c (0<=(aux1919 + aux1921 - aux1924))
-12831 12846 0
-12830 12844 0
-12825 12846 0
-12825 -12831 12844 0
-12825 -12830 12842 0
-12824 12844 0
-12824 -12831 12842 0
-12824 -12830 12841 0
c ((SATLiteral(953) - aux1925 + SATLiteral(848))<=0)
-848 -12848 0
-953 -12848 0
-953 -848 -12849 0
c (0<=(SATLiteral(953) - aux1925 + SATLiteral(848)))
848 12849 0
953 12849 0
953 848 12848 0
c ((SATLiteral(968) - aux1926 + SATLiteral(833))<=0)
-833 -12851 0
-968 -12851 0
-968 -833 -12852 0
c (0<=(SATLiteral(968) - aux1926 + SATLiteral(833)))
833 12852 0
968 12852 0
968 833 12851 0
c (( - aux1927 + SATLiteral(1088) + SATLiteral(818))<=0)
-818 -12854 0
-1088 -12854 0
-1088 -818 -12855 0
c (0<=( - aux1927 + SATLiteral(1088) + SATLiteral(818)))
818 12855 0
1088 12855 0
1088 818 12854 0
c (( - aux1928 + SATLiteral(1103) + SATLiteral(1118))<=0)
-1118 -12857 0
-1103 -12857 0
-1103 -1118 -12858 0
c (0<=( - aux1928 + SATLiteral(1103) + SATLiteral(1118)))
1118 12858 0
1103 12858 0
1103 1118 12857 0
c ((SATLiteral(983) + aux1928 - aux1929)<=0)
12857 -12860 0
12858 -12861 0
-983 -12860 0
-983 12857 -12861 0
-983 12858 -12863 0
c (0<=(SATLiteral(983) + aux1928 - aux1929))
-12858 12863 0
-12857 12861 0
983 12863 0
983 -12858 12861 0
983 -12857 12860 0
c ((aux1925 + aux1927 - aux1930)<=0)
12854 -12865 0
12855 -12866 0
12848 -12865 0
12848 12854 -12866 0
12848 12855 -12868 0
12849 -12866 0
12849 12854 -12868 0
12849 12855 -12870 0
c (0<=(aux1925 + aux1927 - aux1930))
-12855 12870 0
-12854 12868 0
-12849 12870 0
-12849 -12855 12868 0
-12849 -12854 12866 0
-12848 12868 0
-12848 -12855 12866 0
-12848 -12854 12865 0
c ((SATLiteral(955) - aux1931 + SATLiteral(850))<=0)
-850 -12872 0
-955 -12872 0
-955 -850 -12873 0
c (0<=(SATLiteral(955) - aux1931 + SATLiteral(850)))
850 12873 0
955 12873 0
955 850 12872 0
c ((SATLiteral(970) - aux1932 + SATLiteral(835))<=0)
-835 -12875 0
-970 -12875 0
-970 -835 -12876 0
c (0<=(SATLiteral(970) - aux1932 + SATLiteral(835)))
835 12876 0
970 12876 0
970 835 12875 0
c (( - aux1933 + SATLiteral(1090) + SATLiteral(820))<=0)
-820 -12878 0
-1090 -12878 0
-1090 -820 -12879 0
c (0<=( - aux1933 + SATLiteral(1090) + SATLiteral(820)))
820 12879 0
1090 12879 0
1090 820 12878 0
c (( - aux1934 + SATLiteral(1105) + SATLiteral(1120))<=0)
-1120 -12881 0
-1105 -12881 0
-1105 -1120 -12882 0
c (0<=( - aux1934 + SATLiteral(1105) + SATLiteral(1120)))
1120 12882 0
1105 12882 0
1105 1120 12881 0
c ((SATLiteral(985) + aux1934 - aux1935)<=0)
12881 -12884 0
12882 -12885 0
-985 -12884 0
-985 12881 -12885 0
-985 12882 -12887 0
c (0<=(SATLiteral(985) + aux1934 - aux1935))
-12882 12887 0
-12881 12885 0
985 12887 0
985 -12882 12885 0
985 -12881 12884 0
c ((aux1931 + aux1933 - aux1936)<=0)
12878 -12889 0
12879 -12890 0
12872 -12889 0
12872 12878 -12890 0
12872 12879 -12892 0
12873 -12890 0
12873 12878 -12892 0
12873 12879 -12894 0
c (0<=(aux1931 + aux1933 - aux1936))
-12879 12894 0
-12878 12892 0
-12873 12894 0
-12873 -12879 12892 0
-12873 -12878 12890 0
-12872 12892 0
-12872 -12879 12890 0
-12872 -12878 12889 0
c ((SATLiteral(957) - aux1937 + SATLiteral(852))<=0)
-852 -12896 0
-957 -12896 0
-957 -852 -12897 0
c (0<=(SATLiteral(957) - aux1937 + SATLiteral(852)))
852 12897 0
957 12897 0
957 852 12896 0
c ((SATLiteral(972) - aux1938 + SATLiteral(837))<=0)
-837 -12899 0
-972 -12899 0
-972 -837 -12900 0
c (0<=(SATLiteral(972) - aux1938 + SATLiteral(837)))
837 12900 0
972 12900 0
972 837 12899 0
c (( - aux1939 + SATLiteral(1092) + SATLiteral(822))<=0)
-822 -12902 0
-1092 -12902 0
-1092 -822 -12903 0
c (0<=( - aux1939 + SATLiteral(1092) + SATLiteral(822)))
822 12903 0
1092 12903 0
1092 822 12902 0
c (( - aux1940 + SATLiteral(1107) + SATLiteral(1122))<=0)
-1122 -12905 0
-1107 -12905 0
-1107 -1122 -12906 0
c (0<=( - aux1940 + SATLiteral(1107) + SATLiteral(1122)))
1122 12906 0
1107 12906 0
1107 1122 12905 0
c ((SATLiteral(987) + aux1940 - aux1941)<=0)
12905 -12908 0
12906 -12909 0
-987 -12908 0
-987 12905 -12909 0
-987 12906 -12911 0
c (0<=(SATLiteral(987) + aux1940 - aux1941))
-12906 12911 0
-12905 12909 0
987 12911 0
987 -12906 12909 0
987 -12905 12908 0
c ((aux1937 + aux1939 - aux1942)<=0)
12902 -12913 0
12903 -12914 0
12896 -12913 0
12896 12902 -12914 0
12896 12903 -12916 0
12897 -12914 0
12897 12902 -12916 0
12897 12903 -12918 0
c (0<=(aux1937 + aux1939 - aux1942))
-12903 12918 0
-12902 12916 0
-12897 12918 0
-12897 -12903 12916 0
-12897 -12902 12914 0
-12896 12916 0
-12896 -12903 12914 0
-12896 -12902 12913 0
c ((SATLiteral(959) - aux1943 + SATLiteral(854))<=0)
-854 -12920 0
-959 -12920 0
-959 -854 -12921 0
c (0<=(SATLiteral(959) - aux1943 + SATLiteral(854)))
854 12921 0
959 12921 0
959 854 12920 0
c ((SATLiteral(974) - aux1944 + SATLiteral(839))<=0)
-839 -12923 0
-974 -12923 0
-974 -839 -12924 0
c (0<=(SATLiteral(974) - aux1944 + SATLiteral(839)))
839 12924 0
974 12924 0
974 839 12923 0
c (( - aux1945 + SATLiteral(1094) + SATLiteral(824))<=0)
-824 -12926 0
-1094 -12926 0
-1094 -824 -12927 0
c (0<=( - aux1945 + SATLiteral(1094) + SATLiteral(824)))
824 12927 0
1094 12927 0
1094 824 12926 0
c (( - aux1946 + SATLiteral(1109) + SATLiteral(1124))<=0)
-1124 -12929 0
-1109 -12929 0
-1109 -1124 -12930 0
c (0<=( - aux1946 + SATLiteral(1109) + SATLiteral(1124)))
1124 12930 0
1109 12930 0
1109 1124 12929 0
c ((SATLiteral(989) + aux1946 - aux1947)<=0)
12929 -12932 0
12930 -12933 0
-989 -12932 0
-989 12929 -12933 0
-989 12930 -12935 0
c (0<=(SATLiteral(989) + aux1946 - aux1947))
-12930 12935 0
-12929 12933 0
989 12935 0
989 -12930 12933 0
989 -12929 12932 0
c ((aux1943 + aux1945 - aux1948)<=0)
12926 -12937 0
12927 -12938 0
12920 -12937 0
12920 12926 -12938 0
12920 12927 -12940 0
12921 -12938 0
12921 12926 -12940 0
12921 12927 -12942 0
c (0<=(aux1943 + aux1945 - aux1948))
-12927 12942 0
-12926 12940 0
-12921 12942 0
-12921 -12927 12940 0
-12921 -12926 12938 0
-12920 12940 0
-12920 -12927 12938 0
-12920 -12926 12937 0
c ((SATLiteral(961) - aux1949 + SATLiteral(856))<=0)
-856 -12944 0
-961 -12944 0
-961 -856 -12945 0
c (0<=(SATLiteral(961) - aux1949 + SATLiteral(856)))
856 12945 0
961 12945 0
961 856 12944 0
c ((SATLiteral(976) - aux1950 + SATLiteral(841))<=0)
-841 -12947 0
-976 -12947 0
-976 -841 -12948 0
c (0<=(SATLiteral(976) - aux1950 + SATLiteral(841)))
841 12948 0
976 12948 0
976 841 12947 0
c (( - aux1951 + SATLiteral(1096) + SATLiteral(826))<=0)
-826 -12950 0
-1096 -12950 0
-1096 -826 -12951 0
c (0<=( - aux1951 + SATLiteral(1096) + SATLiteral(826)))
826 12951 0
1096 12951 0
1096 826 12950 0
c (( - aux1952 + SATLiteral(1111) + SATLiteral(1126))<=0)
-1126 -12953 0
-1111 -12953 0
-1111 -1126 -12954 0
c (0<=( - aux1952 + SATLiteral(1111) + SATLiteral(1126)))
1126 12954 0
1111 12954 0
1111 1126 12953 0
c ((SATLiteral(991) + aux1952 - aux1953)<=0)
12953 -12956 0
12954 -12957 0
-991 -12956 0
-991 12953 -12957 0
-991 12954 -12959 0
c (0<=(SATLiteral(991) + aux1952 - aux1953))
-12954 12959 0
-12953 12957 0
991 12959 0
991 -12954 12957 0
991 -12953 12956 0
c ((aux1949 + aux1951 - aux1954)<=0)
12950 -12961 0
12951 -12962 0
12944 -12961 0
12944 12950 -12962 0
12944 12951 -12964 0
12945 -12962 0
12945 12950 -12964 0
12945 12951 -12966 0
c (0<=(aux1949 + aux1951 - aux1954))
-12951 12966 0
-12950 12964 0
-12945 12966 0
-12945 -12951 12964 0
-12945 -12950 12962 0
-12944 12964 0
-12944 -12951 12962 0
-12944 -12950 12961 0
c ((SATLiteral(-960) - aux1955 + SATLiteral(-855))<=0)
855 -12968 0
960 -12968 0
960 855 -12969 0
c (0<=(SATLiteral(-960) - aux1955 + SATLiteral(-855)))
-855 12969 0
-960 12969 0
-960 -855 12968 0
c ((SATLiteral(-975) - aux1956 + SATLiteral(-840))<=0)
840 -12971 0
975 -12971 0
975 840 -12972 0
c (0<=(SATLiteral(-975) - aux1956 + SATLiteral(-840)))
-840 12972 0
-975 12972 0
-975 -840 12971 0
c (( - aux1957 + SATLiteral(-1095) + SATLiteral(-825))<=0)
825 -12974 0
1095 -12974 0
1095 825 -12975 0
c (0<=( - aux1957 + SATLiteral(-1095) + SATLiteral(-825)))
-825 12975 0
-1095 12975 0
-1095 -825 12974 0
c (( - aux1958 + SATLiteral(-1110) + SATLiteral(-1125))<=0)
1125 -12977 0
1110 -12977 0
1110 1125 -12978 0
c (0<=( - aux1958 + SATLiteral(-1110) + SATLiteral(-1125)))
-1125 12978 0
-1110 12978 0
-1110 -1125 12977 0
c ((SATLiteral(-990) + aux1958 - aux1959)<=0)
12977 -12980 0
12978 -12981 0
990 -12980 0
990 12977 -12981 0
990 12978 -12983 0
c (0<=(SATLiteral(-990) + aux1958 - aux1959))
-12978 12983 0
-12977 12981 0
-990 12983 0
-990 -12978 12981 0
-990 -12977 12980 0
c ((aux1955 + aux1957 - aux1960)<=0)
12974 -12985 0
12975 -12986 0
12968 -12985 0
12968 12974 -12986 0
12968 12975 -12988 0
12969 -12986 0
12969 12974 -12988 0
12969 12975 -12990 0
c (0<=(aux1955 + aux1957 - aux1960))
-12975 12990 0
-12974 12988 0
-12969 12990 0
-12969 -12975 12988 0
-12969 -12974 12986 0
-12968 12988 0
-12968 -12975 12986 0
-12968 -12974 12985 0
c ((SATLiteral(992) - aux1961 + SATLiteral(887))<=0)
-887 -12992 0
-992 -12992 0
-992 -887 -12993 0
c (0<=(SATLiteral(992) - aux1961 + SATLiteral(887)))
887 12993 0
992 12993 0
992 887 12992 0
c ((SATLiteral(1007) - aux1962 + SATLiteral(872))<=0)
-872 -12995 0
-1007 -12995 0
-1007 -872 -12996 0
c (0<=(SATLiteral(1007) - aux1962 + SATLiteral(872)))
872 12996 0
1007 12996 0
1007 872 12995 0
c (( - aux1963 + SATLiteral(1127) + SATLiteral(857))<=0)
-857 -12998 0
-1127 -12998 0
-1127 -857 -12999 0
c (0<=( - aux1963 + SATLiteral(1127) + SATLiteral(857)))
857 12999 0
1127 12999 0
1127 857 12998 0
c (( - aux1964 + SATLiteral(1142) + SATLiteral(1157))<=0)
-1157 -13001 0
-1142 -13001 0
-1142 -1157 -13002 0
c (0<=( - aux1964 + SATLiteral(1142) + SATLiteral(1157)))
1157 13002 0
1142 13002 0
1142 1157 13001 0
c ((SATLiteral(1022) + aux1964 - aux1965)<=0)
13001 -13004 0
13002 -13005 0
-1022 -13004 0
-1022 13001 -13005 0
-1022 13002 -13007 0
c (0<=(SATLiteral(1022) + aux1964 - aux1965))
-13002 13007 0
-13001 13005 0
1022 13007 0
1022 -13002 13005 0
1022 -13001 13004 0
c ((aux1961 + aux1963 - aux1966)<=0)
12998 -13009 0
12999 -13010 0
12992 -13009 0
12992 12998 -13010 0
12992 12999 -13012 0
12993 -13010 0
12993 12998 -13012 0
12993 12999 -13014 0
c (0<=(aux1961 + aux1963 - aux1966))
-12999 13014 0
-12998 13012 0
-12993 13014 0
-12993 -12999 13012 0
-12993 -12998 13010 0
-12992 13012 0
-12992 -12999 13010 0
-12992 -12998 13009 0
c ((SATLiteral(994) - aux1967 + SATLiteral(889))<=0)
-889 -13016 0
-994 -13016 0
-994 -889 -13017 0
c (0<=(SATLiteral(994) - aux1967 + SATLiteral(889)))
889 13017 0
994 13017 0
994 889 13016 0
c ((SATLiteral(1009) - aux1968 + SATLiteral(874))<=0)
-874 -13019 0
-1009 -13019 0
-1009 -874 -13020 0
c (0<=(SATLiteral(1009) - aux1968 + SATLiteral(874)))
874 13020 0
1009 13020 0
1009 874 13019 0
c (( - aux1969 + SATLiteral(1129) + SATLiteral(859))<=0)
-859 -13022 0
-1129 -13022 0
-1129 -859 -13023 0
c (0<=( - aux1969 + SATLiteral(1129) + SATLiteral(859)))
859 13023 0
1129 13023 0
1129 859 13022 0
c (( - aux1970 + SATLiteral(1144) + SATLiteral(1159))<=0)
-1159 -13025 0
-1144 -13025 0
-1144 -1159 -13026 0
c (0<=( - aux1970 + SATLiteral(1144) + SATLiteral(1159)))
1159 13026 0
1144 13026 0
1144 1159 13025 0
c ((SATLiteral(1024) + aux1970 - aux1971)<=0)
13025 -13028 0
13026 -13029 0
-1024 -13028 0
-1024 13025 -13029 0
-1024 13026 -13031 0
c (0<=(SATLiteral(1024) + aux1970 - aux1971))
-13026 13031 0
-13025 13029 0
1024 13031 0
1024 -13026 13029 0
1024 -13025 13028 0
c ((aux1967 + aux1969 - aux1972)<=0)
13022 -13033 0
13023 -13034 0
13016 -13033 0
13016 13022 -13034 0
13016 13023 -13036 0
13017 -13034 0
13017 13022 -13036 0
13017 13023 -13038 0
c (0<=(aux1967 + aux1969 - aux1972))
-13023 13038 0
-13022 13036 0
-13017 13038 0
-13017 -13023 13036 0
-13017 -13022 13034 0
-13016 13036 0
-13016 -13023 13034 0
-13016 -13022 13033 0
c ((SATLiteral(996) - aux1973 + SATLiteral(891))<=0)
-891 -13040 0
-996 -13040 0
-996 -891 -13041 0
c (0<=(SATLiteral(996) - aux1973 + SATLiteral(891)))
891 13041 0
996 13041 0
996 891 13040 0
c ((SATLiteral(1011) - aux1974 + SATLiteral(876))<=0)
-876 -13043 0
-1011 -13043 0
-1011 -876 -13044 0
c (0<=(SATLiteral(1011) - aux1974 + SATLiteral(876)))
876 13044 0
1011 13044 0
1011 876 13043 0
c (( - aux1975 + SATLiteral(1131) + SATLiteral(861))<=0)
-861 -13046 0
-1131 -13046 0
-1131 -861 -13047 0
c (0<=( - aux1975 + SATLiteral(1131) + SATLiteral(861)))
861 13047 0
1131 13047 0
1131 861 13046 0
c (( - aux1976 + SATLiteral(1146) + SATLiteral(1161))<=0)
-1161 -13049 0
-1146 -13049 0
-1146 -1161 -13050 0
c (0<=( - aux1976 + SATLiteral(1146) + SATLiteral(1161)))
1161 13050 0
1146 13050 0
1146 1161 13049 0
c ((SATLiteral(1026) + aux1976 - aux1977)<=0)
13049 -13052 0
13050 -13053 0
-1026 -13052 0
-1026 13049 -13053 0
-1026 13050 -13055 0
c (0<=(SATLiteral(1026) + aux1976 - aux1977))
-13050 13055 0
-13049 13053 0
1026 13055 0
1026 -13050 13053 0
1026 -13049 13052 0
c ((aux1973 + aux1975 - aux1978)<=0)
13046 -13057 0
13047 -13058 0
13040 -13057 0
13040 13046 -13058 0
13040 13047 -13060 0
13041 -13058 0
13041 13046 -13060 0
13041 13047 -13062 0
c (0<=(aux1973 + aux1975 - aux1978))
-13047 13062 0
-13046 13060 0
-13041 13062 0
-13041 -13047 13060 0
-13041 -13046 13058 0
-13040 13060 0
-13040 -13047 13058 0
-13040 -13046 13057 0
c ((SATLiteral(998) - aux1979 + SATLiteral(893))<=0)
-893 -13064 0
-998 -13064 0
-998 -893 -13065 0
c (0<=(SATLiteral(998) - aux1979 + SATLiteral(893)))
893 13065 0
998 13065 0
998 893 13064 0
c ((SATLiteral(1013) - aux1980 + SATLiteral(878))<=0)
-878 -13067 0
-1013 -13067 0
-1013 -878 -13068 0
c (0<=(SATLiteral(1013) - aux1980 + SATLiteral(878)))
878 13068 0
1013 13068 0
1013 878 13067 0
c (( - aux1981 + SATLiteral(1133) + SATLiteral(863))<=0)
-863 -13070 0
-1133 -13070 0
-1133 -863 -13071 0
c (0<=( - aux1981 + SATLiteral(1133) + SATLiteral(863)))
863 13071 0
1133 13071 0
1133 863 13070 0
c (( - aux1982 + SATLiteral(1148) + SATLiteral(1163))<=0)
-1163 -13073 0
-1148 -13073 0
-1148 -1163 -13074 0
c (0<=( - aux1982 + SATLiteral(1148) + SATLiteral(1163)))
1163 13074 0
1148 13074 0
1148 1163 13073 0
c ((SATLiteral(1028) + aux1982 - aux1983)<=0)
13073 -13076 0
13074 -13077 0
-1028 -13076 0
-1028 13073 -13077 0
-1028 13074 -13079 0
c (0<=(SATLiteral(1028) + aux1982 - aux1983))
-13074 13079 0
-13073 13077 0
1028 13079 0
1028 -13074 13077 0
1028 -13073 13076 0
c ((aux1979 + aux1981 - aux1984)<=0)
13070 -13081 0
13071 -13082 0
13064 -13081 0
13064 13070 -13082 0
13064 13071 -13084 0
13065 -13082 0
13065 13070 -13084 0
13065 13071 -13086 0
c (0<=(aux1979 + aux1981 - aux1984))
-13071 13086 0
-13070 13084 0
-13065 13086 0
-13065 -13071 13084 0
-13065 -13070 13082 0
-13064 13084 0
-13064 -13071 13082 0
-13064 -13070 13081 0
c ((SATLiteral(1000) - aux1985 + SATLiteral(895))<=0)
-895 -13088 0
-1000 -13088 0
-1000 -895 -13089 0
c (0<=(SATLiteral(1000) - aux1985 + SATLiteral(895)))
895 13089 0
1000 13089 0
1000 895 13088 0
c ((SATLiteral(1015) - aux1986 + SATLiteral(880))<=0)
-880 -13091 0
-1015 -13091 0
-1015 -880 -13092 0
c (0<=(SATLiteral(1015) - aux1986 + SATLiteral(880)))
880 13092 0
1015 13092 0
1015 880 13091 0
c (( - aux1987 + SATLiteral(1135) + SATLiteral(865))<=0)
-865 -13094 0
-1135 -13094 0
-1135 -865 -13095 0
c (0<=( - aux1987 + SATLiteral(1135) + SATLiteral(865)))
865 13095 0
1135 13095 0
1135 865 13094 0
c (( - aux1988 + SATLiteral(1150) + SATLiteral(1165))<=0)
-1165 -13097 0
-1150 -13097 0
-1150 -1165 -13098 0
c (0<=( - aux1988 + SATLiteral(1150) + SATLiteral(1165)))
1165 13098 0
1150 13098 0
1150 1165 13097 0
c ((SATLiteral(1030) + aux1988 - aux1989)<=0)
13097 -13100 0
13098 -13101 0
-1030 -13100 0
-1030 13097 -13101 0
-1030 13098 -13103 0
c (0<=(SATLiteral(1030) + aux1988 - aux1989))
-13098 13103 0
-13097 13101 0
1030 13103 0
1030 -13098 13101 0
1030 -13097 13100 0
c ((aux1985 + aux1987 - aux1990)<=0)
13094 -13105 0
13095 -13106 0
13088 -13105 0
13088 13094 -13106 0
13088 13095 -13108 0
13089 -13106 0
13089 13094 -13108 0
13089 13095 -13110 0
c (0<=(aux1985 + aux1987 - aux1990))
-13095 13110 0
-13094 13108 0
-13089 13110 0
-13089 -13095 13108 0
-13089 -13094 13106 0
-13088 13108 0
-13088 -13095 13106 0
-13088 -13094 13105 0
c ((SATLiteral(1002) - aux1991 + SATLiteral(897))<=0)
-897 -13112 0
-1002 -13112 0
-1002 -897 -13113 0
c (0<=(SATLiteral(1002) - aux1991 + SATLiteral(897)))
897 13113 0
1002 13113 0
1002 897 13112 0
c ((SATLiteral(1017) - aux1992 + SATLiteral(882))<=0)
-882 -13115 0
-1017 -13115 0
-1017 -882 -13116 0
c (0<=(SATLiteral(1017) - aux1992 + SATLiteral(882)))
882 13116 0
1017 13116 0
1017 882 13115 0
c (( - aux1993 + SATLiteral(1137) + SATLiteral(867))<=0)
-867 -13118 0
-1137 -13118 0
-1137 -867 -13119 0
c (0<=( - aux1993 + SATLiteral(1137) + SATLiteral(867)))
867 13119 0
1137 13119 0
1137 867 13118 0
c (( - aux1994 + SATLiteral(1152) + SATLiteral(1167))<=0)
-1167 -13121 0
-1152 -13121 0
-1152 -1167 -13122 0
c (0<=( - aux1994 + SATLiteral(1152) + SATLiteral(1167)))
1167 13122 0
1152 13122 0
1152 1167 13121 0
c ((SATLiteral(1032) + aux1994 - aux1995)<=0)
13121 -13124 0
13122 -13125 0
-1032 -13124 0
-1032 13121 -13125 0
-1032 13122 -13127 0
c (0<=(SATLiteral(1032) + aux1994 - aux1995))
-13122 13127 0
-13121 13125 0
1032 13127 0
1032 -13122 13125 0
1032 -13121 13124 0
c ((aux1991 + aux1993 - aux1996)<=0)
13118 -13129 0
13119 -13130 0
13112 -13129 0
13112 13118 -13130 0
13112 13119 -13132 0
13113 -13130 0
13113 13118 -13132 0
13113 13119 -13134 0
c (0<=(aux1991 + aux1993 - aux1996))
-13119 13134 0
-13118 13132 0
-13113 13134 0
-13113 -13119 13132 0
-13113 -13118 13130 0
-13112 13132 0
-13112 -13119 13130 0
-13112 -13118 13129 0
c ((SATLiteral(1004) - aux1997 + SATLiteral(899))<=0)
-899 -13136 0
-1004 -13136 0
-1004 -899 -13137 0
c (0<=(SATLiteral(1004) - aux1997 + SATLiteral(899)))
899 13137 0
1004 13137 0
1004 899 13136 0
c ((SATLiteral(1019) - aux1998 + SATLiteral(884))<=0)
-884 -13139 0
-1019 -13139 0
-1019 -884 -13140 0
c (0<=(SATLiteral(1019) - aux1998 + SATLiteral(884)))
884 13140 0
1019 13140 0
1019 884 13139 0
c (( - aux1999 + SATLiteral(1139) + SATLiteral(869))<=0)
-869 -13142 0
-1139 -13142 0
-1139 -869 -13143 0
c (0<=( - aux1999 + SATLiteral(1139) + SATLiteral(869)))
869 13143 0
1139 13143 0
1139 869 13142 0
c (( - aux2000 + SATLiteral(1154) + SATLiteral(1169))<=0)
-1169 -13145 0
-1154 -13145 0
-1154 -1169 -13146 0
c (0<=( - aux2000 + SATLiteral(1154) + SATLiteral(1169)))
1169 13146 0
1154 13146 0
1154 1169 13145 0
c ((SATLiteral(1034) + aux2000 - aux2001)<=0)
13145 -13148 0
13146 -13149 0
-1034 -13148 0
-1034 13145 -13149 0
-1034 13146 -13151 0
c (0<=(SATLiteral(1034) + aux2000 - aux2001))
-13146 13151 0
-13145 13149 0
1034 13151 0
1034 -13146 13149 0
1034 -13145 13148 0
c ((aux1997 + aux1999 - aux2002)<=0)
13142 -13153 0
13143 -13154 0
13136 -13153 0
13136 13142 -13154 0
13136 13143 -13156 0
13137 -13154 0
13137 13142 -13156 0
13137 13143 -13158 0
c (0<=(aux1997 + aux1999 - aux2002))
-13143 13158 0
-13142 13156 0
-13137 13158 0
-13137 -13143 13156 0
-13137 -13142 13154 0
-13136 13156 0
-13136 -13143 13154 0
-13136 -13142 13153 0
c ((SATLiteral(1006) - aux2003 + SATLiteral(901))<=0)
-901 -13160 0
-1006 -13160 0
-1006 -901 -13161 0
c (0<=(SATLiteral(1006) - aux2003 + SATLiteral(901)))
901 13161 0
1006 13161 0
1006 901 13160 0
c ((SATLiteral(1021) - aux2004 + SATLiteral(886))<=0)
-886 -13163 0
-1021 -13163 0
-1021 -886 -13164 0
c (0<=(SATLiteral(1021) - aux2004 + SATLiteral(886)))
886 13164 0
1021 13164 0
1021 886 13163 0
c (( - aux2005 + SATLiteral(1141) + SATLiteral(871))<=0)
-871 -13166 0
-1141 -13166 0
-1141 -871 -13167 0
c (0<=( - aux2005 + SATLiteral(1141) + SATLiteral(871)))
871 13167 0
1141 13167 0
1141 871 13166 0
c (( - aux2006 + SATLiteral(1156) + SATLiteral(1171))<=0)
-1171 -13169 0
-1156 -13169 0
-1156 -1171 -13170 0
c (0<=( - aux2006 + SATLiteral(1156) + SATLiteral(1171)))
1171 13170 0
1156 13170 0
1156 1171 13169 0
c ((SATLiteral(1036) + aux2006 - aux2007)<=0)
13169 -13172 0
13170 -13173 0
-1036 -13172 0
-1036 13169 -13173 0
-1036 13170 -13175 0
c (0<=(SATLiteral(1036) + aux2006 - aux2007))
-13170 13175 0
-13169 13173 0
1036 13175 0
1036 -13170 13173 0
1036 -13169 13172 0
c ((aux2003 + aux2005 - aux2008)<=0)
13166 -13177 0
13167 -13178 0
13160 -13177 0
13160 13166 -13178 0
13160 13167 -13180 0
13161 -13178 0
13161 13166 -13180 0
13161 13167 -13182 0
c (0<=(aux2003 + aux2005 - aux2008))
-13167 13182 0
-13166 13180 0
-13161 13182 0
-13161 -13167 13180 0
-13161 -13166 13178 0
-13160 13180 0
-13160 -13167 13178 0
-13160 -13166 13177 0
c ((SATLiteral(-1005) - aux2009 + SATLiteral(-900))<=0)
900 -13184 0
1005 -13184 0
1005 900 -13185 0
c (0<=(SATLiteral(-1005) - aux2009 + SATLiteral(-900)))
-900 13185 0
-1005 13185 0
-1005 -900 13184 0
c ((SATLiteral(-1020) - aux2010 + SATLiteral(-885))<=0)
885 -13187 0
1020 -13187 0
1020 885 -13188 0
c (0<=(SATLiteral(-1020) - aux2010 + SATLiteral(-885)))
-885 13188 0
-1020 13188 0
-1020 -885 13187 0
c (( - aux2011 + SATLiteral(-1140) + SATLiteral(-870))<=0)
870 -13190 0
1140 -13190 0
1140 870 -13191 0
c (0<=( - aux2011 + SATLiteral(-1140) + SATLiteral(-870)))
-870 13191 0
-1140 13191 0
-1140 -870 13190 0
c (( - aux2012 + SATLiteral(-1155) + SATLiteral(-1170))<=0)
1170 -13193 0
1155 -13193 0
1155 1170 -13194 0
c (0<=( - aux2012 + SATLiteral(-1155) + SATLiteral(-1170)))
-1170 13194 0
-1155 13194 0
-1155 -1170 13193 0
c ((SATLiteral(-1035) + aux2012 - aux2013)<=0)
13193 -13196 0
13194 -13197 0
1035 -13196 0
1035 13193 -13197 0
1035 13194 -13199 0
c (0<=(SATLiteral(-1035) + aux2012 - aux2013))
-13194 13199 0
-13193 13197 0
-1035 13199 0
-1035 -13194 13197 0
-1035 -13193 13196 0
c ((aux2009 + aux2011 - aux2014)<=0)
13190 -13201 0
13191 -13202 0
13184 -13201 0
13184 13190 -13202 0
13184 13191 -13204 0
13185 -13202 0
13185 13190 -13204 0
13185 13191 -13206 0
c (0<=(aux2009 + aux2011 - aux2014))
-13191 13206 0
-13190 13204 0
-13185 13206 0
-13185 -13191 13204 0
-13185 -13190 13202 0
-13184 13204 0
-13184 -13191 13202 0
-13184 -13190 13201 0
c ((SATLiteral(1037) - aux2015 + SATLiteral(932))<=0)
-932 -13208 0
-1037 -13208 0
-1037 -932 -13209 0
c (0<=(SATLiteral(1037) - aux2015 + SATLiteral(932)))
932 13209 0
1037 13209 0
1037 932 13208 0
c ((SATLiteral(1052) - aux2016 + SATLiteral(917))<=0)
-917 -13211 0
-1052 -13211 0
-1052 -917 -13212 0
c (0<=(SATLiteral(1052) - aux2016 + SATLiteral(917)))
917 13212 0
1052 13212 0
1052 917 13211 0
c (( - aux2017 + SATLiteral(1172) + SATLiteral(902))<=0)
-902 -13214 0
-1172 -13214 0
-1172 -902 -13215 0
c (0<=( - aux2017 + SATLiteral(1172) + SATLiteral(902)))
902 13215 0
1172 13215 0
1172 902 13214 0
c (( - aux2018 + SATLiteral(1187) + SATLiteral(1202))<=0)
-1202 -13217 0
-1187 -13217 0
-1187 -1202 -13218 0
c (0<=( - aux2018 + SATLiteral(1187) + SATLiteral(1202)))
1202 13218 0
1187 13218 0
1187 1202 13217 0
c ((SATLiteral(1067) + aux2018 - aux2019)<=0)
13217 -13220 0
13218 -13221 0
-1067 -13220 0
-1067 13217 -13221 0
-1067 13218 -13223 0
c (0<=(SATLiteral(1067) + aux2018 - aux2019))
-13218 13223 0
-13217 13221 0
1067 13223 0
1067 -13218 13221 0
1067 -13217 13220 0
c ((aux2015 + aux2017 - aux2020)<=0)
13214 -13225 0
13215 -13226 0
13208 -13225 0
13208 13214 -13226 0
13208 13215 -13228 0
13209 -13226 0
13209 13214 -13228 0
13209 13215 -13230 0
c (0<=(aux2015 + aux2017 - aux2020))
-13215 13230 0
-13214 13228 0
-13209 13230 0
-13209 -13215 13228 0
-13209 -13214 13226 0
-13208 13228 0
-13208 -13215 13226 0
-13208 -13214 13225 0
c ((SATLiteral(1039) - aux2021 + SATLiteral(934))<=0)
-934 -13232 0
-1039 -13232 0
-1039 -934 -13233 0
c (0<=(SATLiteral(1039) - aux2021 + SATLiteral(934)))
934 13233 0
1039 13233 0
1039 934 13232 0
c ((SATLiteral(1054) - aux2022 + SATLiteral(919))<=0)
-919 -13235 0
-1054 -13235 0
-1054 -919 -13236 0
c (0<=(SATLiteral(1054) - aux2022 + SATLiteral(919)))
919 13236 0
1054 13236 0
1054 919 13235 0
c (( - aux2023 + SATLiteral(1174) + SATLiteral(904))<=0)
-904 -13238 0
-1174 -13238 0
-1174 -904 -13239 0
c (0<=( - aux2023 + SATLiteral(1174) + SATLiteral(904)))
904 13239 0
1174 13239 0
1174 904 13238 0
c (( - aux2024 + SATLiteral(1189) + SATLiteral(1204))<=0)
-1204 -13241 0
-1189 -13241 0
-1189 -1204 -13242 0
c (0<=( - aux2024 + SATLiteral(1189) + SATLiteral(1204)))
1204 13242 0
1189 13242 0
1189 1204 13241 0
c ((SATLiteral(1069) + aux2024 - aux2025)<=0)
13241 -13244 0
13242 -13245 0
-1069 -13244 0
-1069 13241 -13245 0
-1069 13242 -13247 0
c (0<=(SATLiteral(1069) + aux2024 - aux2025))
-13242 13247 0
-13241 13245 0
1069 13247 0
1069 -13242 13245 0
1069 -13241 13244 0
c ((aux2021 + aux2023 - aux2026)<=0)
13238 -13249 0
13239 -13250 0
13232 -13249 0
13232 13238 -13250 0
13232 13239 -13252 0
13233 -13250 0
13233 13238 -13252 0
13233 13239 -13254 0
c (0<=(aux2021 + aux2023 - aux2026))
-13239 13254 0
-13238 13252 0
-13233 13254 0
-13233 -13239 13252 0
-13233 -13238 13250 0
-13232 13252 0
-13232 -13239 13250 0
-13232 -13238 13249 0
c ((SATLiteral(1041) - aux2027 + SATLiteral(936))<=0)
-936 -13256 0
-1041 -13256 0
-1041 -936 -13257 0
c (0<=(SATLiteral(1041) - aux2027 + SATLiteral(936)))
936 13257 0
1041 13257 0
1041 936 13256 0
c ((SATLiteral(1056) - aux2028 + SATLiteral(921))<=0)
-921 -13259 0
-1056 -13259 0
-1056 -921 -13260 0
c (0<=(SATLiteral(1056) - aux2028 + SATLiteral(921)))
921 13260 0
1056 13260 0
1056 921 13259 0
c (( - aux2029 + SATLiteral(1176) + SATLiteral(906))<=0)
-906 -13262 0
-1176 -13262 0
-1176 -906 -13263 0
c (0<=( - aux2029 + SATLiteral(1176) + SATLiteral(906)))
906 13263 0
1176 13263 0
1176 906 13262 0
c (( - aux2030 + SATLiteral(1191) + SATLiteral(1206))<=0)
-1206 -13265 0
-1191 -13265 0
-1191 -1206 -13266 0
c (0<=( - aux2030 + SATLiteral(1191) + SATLiteral(1206)))
1206 13266 0
1191 13266 0
1191 1206 13265 0
c ((SATLiteral(1071) + aux2030 - aux2031)<=0)
13265 -13268 0
13266 -13269 0
-1071 -13268 0
-1071 13265 -13269 0
-1071 13266 -13271 0
c (0<=(SATLiteral(1071) + aux2030 - aux2031))
-13266 13271 0
-13265 13269 0
1071 13271 0
1071 -13266 13269 0
1071 -13265 13268 0
c ((aux2027 + aux2029 - aux2032)<=0)
13262 -13273 0
13263 -13274 0
13256 -13273 0
13256 13262 -13274 0
13256 13263 -13276 0
13257 -13274 0
13257 13262 -13276 0
13257 13263 -13278 0
c (0<=(aux2027 + aux2029 - aux2032))
-13263 13278 0
-13262 13276 0
-13257 13278 0
-13257 -13263 13276 0
-13257 -13262 13274 0
-13256 13276 0
-13256 -13263 13274 0
-13256 -13262 13273 0
c ((SATLiteral(1043) - aux2033 + SATLiteral(938))<=0)
-938 -13280 0
-1043 -13280 0
-1043 -938 -13281 0
c (0<=(SATLiteral(1043) - aux2033 + SATLiteral(938)))
938 13281 0
1043 13281 0
1043 938 13280 0
c ((SATLiteral(1058) - aux2034 + SATLiteral(923))<=0)
-923 -13283 0
-1058 -13283 0
-1058 -923 -13284 0
c (0<=(SATLiteral(1058) - aux2034 + SATLiteral(923)))
923 13284 0
1058 13284 0
1058 923 13283 0
c (( - aux2035 + SATLiteral(1178) + SATLiteral(908))<=0)
-908 -13286 0
-1178 -13286 0
-1178 -908 -13287 0
c (0<=( - aux2035 + SATLiteral(1178) + SATLiteral(908)))
908 13287 0
1178 13287 0
1178 908 13286 0
c (( - aux2036 + SATLiteral(1193) + SATLiteral(1208))<=0)
-1208 -13289 0
-1193 -13289 0
-1193 -1208 -13290 0
c (0<=( - aux2036 + SATLiteral(1193) + SATLiteral(1208)))
1208 13290 0
1193 13290 0
1193 1208 13289 0
c ((SATLiteral(1073) + aux2036 - aux2037)<=0)
13289 -13292 0
13290 -13293 0
-1073 -13292 0
-1073 13289 -13293 0
-1073 13290 -13295 0
c (0<=(SATLiteral(1073) + aux2036 - aux2037))
-13290 13295 0
-13289 13293 0
1073 13295 0
1073 -13290 13293 0
1073 -13289 13292 0
c ((aux2033 + aux2035 - aux2038)<=0)
13286 -13297 0
13287 -13298 0
13280 -13297 0
13280 13286 -13298 0
13280 13287 -13300 0
13281 -13298 0
13281 13286 -13300 0
13281 13287 -13302 0
c (0<=(aux2033 + aux2035 - aux2038))
-13287 13302 0
-13286 13300 0
-13281 13302 0
-13281 -13287 13300 0
-13281 -13286 13298 0
-13280 13300 0
-13280 -13287 13298 0
-13280 -13286 13297 0
c ((SATLiteral(1045) - aux2039 + SATLiteral(940))<=0)
-940 -13304 0
-1045 -13304 0
-1045 -940 -13305 0
c (0<=(SATLiteral(1045) - aux2039 + SATLiteral(940)))
940 13305 0
1045 13305 0
1045 940 13304 0
c ((SATLiteral(1060) - aux2040 + SATLiteral(925))<=0)
-925 -13307 0
-1060 -13307 0
-1060 -925 -13308 0
c (0<=(SATLiteral(1060) - aux2040 + SATLiteral(925)))
925 13308 0
1060 13308 0
1060 925 13307 0
c (( - aux2041 + SATLiteral(1180) + SATLiteral(910))<=0)
-910 -13310 0
-1180 -13310 0
-1180 -910 -13311 0
c (0<=( - aux2041 + SATLiteral(1180) + SATLiteral(910)))
910 13311 0
1180 13311 0
1180 910 13310 0
c (( - aux2042 + SATLiteral(1195) + SATLiteral(1210))<=0)
-1210 -13313 0
-1195 -13313 0
-1195 -1210 -13314 0
c (0<=( - aux2042 + SATLiteral(1195) + SATLiteral(1210)))
1210 13314 0
1195 13314 0
1195 1210 13313 0
c ((SATLiteral(1075) + aux2042 - aux2043)<=0)
13313 -13316 0
13314 -13317 0
-1075 -13316 0
-1075 13313 -13317 0
-1075 13314 -13319 0
c (0<=(SATLiteral(1075) + aux2042 - aux2043))
-13314 13319 0
-13313 13317 0
1075 13319 0
1075 -13314 13317 0
1075 -13313 13316 0
c ((aux2039 + aux2041 - aux2044)<=0)
13310 -13321 0
13311 -13322 0
13304 -13321 0
13304 13310 -13322 0
13304 13311 -13324 0
13305 -13322 0
13305 13310 -13324 0
13305 13311 -13326 0
c (0<=(aux2039 + aux2041 - aux2044))
-13311 13326 0
-13310 13324 0
-13305 13326 0
-13305 -13311 13324 0
-13305 -13310 13322 0
-13304 13324 0
-13304 -13311 13322 0
-13304 -13310 13321 0
c ((SATLiteral(1047) - aux2045 + SATLiteral(942))<=0)
-942 -13328 0
-1047 -13328 0
-1047 -942 -13329 0
c (0<=(SATLiteral(1047) - aux2045 + SATLiteral(942)))
942 13329 0
1047 13329 0
1047 942 13328 0
c ((SATLiteral(1062) - aux2046 + SATLiteral(927))<=0)
-927 -13331 0
-1062 -13331 0
-1062 -927 -13332 0
c (0<=(SATLiteral(1062) - aux2046 + SATLiteral(927)))
927 13332 0
1062 13332 0
1062 927 13331 0
c (( - aux2047 + SATLiteral(1182) + SATLiteral(912))<=0)
-912 -13334 0
-1182 -13334 0
-1182 -912 -13335 0
c (0<=( - aux2047 + SATLiteral(1182) + SATLiteral(912)))
912 13335 0
1182 13335 0
1182 912 13334 0
c (( - aux2048 + SATLiteral(1197) + SATLiteral(1212))<=0)
-1212 -13337 0
-1197 -13337 0
-1197 -1212 -13338 0
c (0<=( - aux2048 + SATLiteral(1197) + SATLiteral(1212)))
1212 13338 0
1197 13338 0
1197 1212 13337 0
c ((SATLiteral(1077) + aux2048 - aux2049)<=0)
13337 -13340 0
13338 -13341 0
-1077 -13340 0
-1077 13337 -13341 0
-1077 13338 -13343 0
c (0<=(SATLiteral(1077) + aux2048 - aux2049))
-13338 13343 0
-13337 13341 0
1077 13343 0
1077 -13338 13341 0
1077 -13337 13340 0
c ((aux2045 + aux2047 - aux2050)<=0)
13334 -13345 0
13335 -13346 0
13328 -13345 0
13328 13334 -13346 0
13328 13335 -13348 0
13329 -13346 0
13329 13334 -13348 0
13329 13335 -13350 0
c (0<=(aux2045 + aux2047 - aux2050))
-13335 13350 0
-13334 13348 0
-13329 13350 0
-13329 -13335 13348 0
-13329 -13334 13346 0
-13328 13348 0
-13328 -13335 13346 0
-13328 -13334 13345 0
c ((SATLiteral(1049) - aux2051 + SATLiteral(944))<=0)
-944 -13352 0
-1049 -13352 0
-1049 -944 -13353 0
c (0<=(SATLiteral(1049) - aux2051 + SATLiteral(944)))
944 13353 0
1049 13353 0
1049 944 13352 0
c ((SATLiteral(1064) - aux2052 + SATLiteral(929))<=0)
-929 -13355 0
-1064 -13355 0
-1064 -929 -13356 0
c (0<=(SATLiteral(1064) - aux2052 + SATLiteral(929)))
929 13356 0
1064 13356 0
1064 929 13355 0
c (( - aux2053 + SATLiteral(1184) + SATLiteral(914))<=0)
-914 -13358 0
-1184 -13358 0
-1184 -914 -13359 0
c (0<=( - aux2053 + SATLiteral(1184) + SATLiteral(914)))
914 13359 0
1184 13359 0
1184 914 13358 0
c (( - aux2054 + SATLiteral(1199) + SATLiteral(1214))<=0)
-1214 -13361 0
-1199 -13361 0
-1199 -1214 -13362 0
c (0<=( - aux2054 + SATLiteral(1199) + SATLiteral(1214)))
1214 13362 0
1199 13362 0
1199 1214 13361 0
c ((SATLiteral(1079) + aux2054 - aux2055)<=0)
13361 -13364 0
13362 -13365 0
-1079 -13364 0
-1079 13361 -13365 0
-1079 13362 -13367 0
c (0<=(SATLiteral(1079) + aux2054 - aux2055))
-13362 13367 0
-13361 13365 0
1079 13367 0
1079 -13362 13365 0
1079 -13361 13364 0
c ((aux2051 + aux2053 - aux2056)<=0)
13358 -13369 0
13359 -13370 0
13352 -13369 0
13352 13358 -13370 0
13352 13359 -13372 0
13353 -13370 0
13353 13358 -13372 0
13353 13359 -13374 0
c (0<=(aux2051 + aux2053 - aux2056))
-13359 13374 0
-13358 13372 0
-13353 13374 0
-13353 -13359 13372 0
-13353 -13358 13370 0
-13352 13372 0
-13352 -13359 13370 0
-13352 -13358 13369 0
c ((SATLiteral(1051) - aux2057 + SATLiteral(946))<=0)
-946 -13376 0
-1051 -13376 0
-1051 -946 -13377 0
c (0<=(SATLiteral(1051) - aux2057 + SATLiteral(946)))
946 13377 0
1051 13377 0
1051 946 13376 0
c ((SATLiteral(1066) - aux2058 + SATLiteral(931))<=0)
-931 -13379 0
-1066 -13379 0
-1066 -931 -13380 0
c (0<=(SATLiteral(1066) - aux2058 + SATLiteral(931)))
931 13380 0
1066 13380 0
1066 931 13379 0
c (( - aux2059 + SATLiteral(1186) + SATLiteral(916))<=0)
-916 -13382 0
-1186 -13382 0
-1186 -916 -13383 0
c (0<=( - aux2059 + SATLiteral(1186) + SATLiteral(916)))
916 13383 0
1186 13383 0
1186 916 13382 0
c (( - aux2060 + SATLiteral(1201) + SATLiteral(1216))<=0)
-1216 -13385 0
-1201 -13385 0
-1201 -1216 -13386 0
c (0<=( - aux2060 + SATLiteral(1201) + SATLiteral(1216)))
1216 13386 0
1201 13386 0
1201 1216 13385 0
c ((SATLiteral(1081) + aux2060 - aux2061)<=0)
13385 -13388 0
13386 -13389 0
-1081 -13388 0
-1081 13385 -13389 0
-1081 13386 -13391 0
c (0<=(SATLiteral(1081) + aux2060 - aux2061))
-13386 13391 0
-13385 13389 0
1081 13391 0
1081 -13386 13389 0
1081 -13385 13388 0
c ((aux2057 + aux2059 - aux2062)<=0)
13382 -13393 0
13383 -13394 0
13376 -13393 0
13376 13382 -13394 0
13376 13383 -13396 0
13377 -13394 0
13377 13382 -13396 0
13377 13383 -13398 0
c (0<=(aux2057 + aux2059 - aux2062))
-13383 13398 0
-13382 13396 0
-13377 13398 0
-13377 -13383 13396 0
-13377 -13382 13394 0
-13376 13396 0
-13376 -13383 13394 0
-13376 -13382 13393 0
c ((SATLiteral(-1050) - aux2063 + SATLiteral(-945))<=0)
945 -13400 0
1050 -13400 0
1050 945 -13401 0
c (0<=(SATLiteral(-1050) - aux2063 + SATLiteral(-945)))
-945 13401 0
-1050 13401 0
-1050 -945 13400 0
c ((SATLiteral(-1065) - aux2064 + SATLiteral(-930))<=0)
930 -13403 0
1065 -13403 0
1065 930 -13404 0
c (0<=(SATLiteral(-1065) - aux2064 + SATLiteral(-930)))
-930 13404 0
-1065 13404 0
-1065 -930 13403 0
c (( - aux2065 + SATLiteral(-1185) + SATLiteral(-915))<=0)
915 -13406 0
1185 -13406 0
1185 915 -13407 0
c (0<=( - aux2065 + SATLiteral(-1185) + SATLiteral(-915)))
-915 13407 0
-1185 13407 0
-1185 -915 13406 0
c (( - aux2066 + SATLiteral(-1200) + SATLiteral(-1215))<=0)
1215 -13409 0
1200 -13409 0
1200 1215 -13410 0
c (0<=( - aux2066 + SATLiteral(-1200) + SATLiteral(-1215)))
-1215 13410 0
-1200 13410 0
-1200 -1215 13409 0
c ((SATLiteral(-1080) + aux2066 - aux2067)<=0)
13409 -13412 0
13410 -13413 0
1080 -13412 0
1080 13409 -13413 0
1080 13410 -13415 0
c (0<=(SATLiteral(-1080) + aux2066 - aux2067))
-13410 13415 0
-13409 13413 0
-1080 13415 0
-1080 -13410 13413 0
-1080 -13409 13412 0
c ((aux2063 + aux2065 - aux2068)<=0)
13406 -13417 0
13407 -13418 0
13400 -13417 0
13400 13406 -13418 0
13400 13407 -13420 0
13401 -13418 0
13401 13406 -13420 0
13401 13407 -13422 0
c (0<=(aux2063 + aux2065 - aux2068))
-13407 13422 0
-13406 13420 0
-13401 13422 0
-13401 -13407 13420 0
-13401 -13406 13418 0
-13400 13420 0
-13400 -13407 13418 0
-13400 -13406 13417 0
