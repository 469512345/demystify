<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="266" onload="init(evt)" viewBox="0 0 1200 266" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="266" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record -- python3 demystify --eprime ./eprime/nice_killer.eprime --eprimeparam ./eprime/killersudoku/killersudoku.param --forqes</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="255.00"> </text><svg id="frames" x="10" width="1180"><g><title>_bootstrap (threading.py:884) (10,712 samples, 69.04%)</title><rect x="0.0000%" y="68" width="69.0384%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="78.50">_bootstrap (threading.py:884)</text></g><g><title>_bootstrap_inner (threading.py:916) (10,712 samples, 69.04%)</title><rect x="0.0000%" y="84" width="69.0384%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="94.50">_bootstrap_inner (threading.py:916)</text></g><g><title>run (threading.py:864) (10,712 samples, 69.04%)</title><rect x="0.0000%" y="100" width="69.0384%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="110.50">run (threading.py:864)</text></g><g><title>_feed (multiprocessing/queues.py:240) (10,709 samples, 69.02%)</title><rect x="0.0193%" y="116" width="69.0191%" height="15" fill="rgb(248,212,6)"/><text x="0.2693%" y="126.50">_feed (multiprocessing/queues.py:240)</text></g><g><title>send_bytes (multiprocessing/connection.py:204) (10,709 samples, 69.02%)</title><rect x="0.0193%" y="132" width="69.0191%" height="15" fill="rgb(208,68,35)"/><text x="0.2693%" y="142.50">send_bytes (multiprocessing/connection.py:204)</text></g><g><title>_send_bytes (multiprocessing/connection.py:408) (10,709 samples, 69.02%)</title><rect x="0.0193%" y="148" width="69.0191%" height="15" fill="rgb(232,128,0)"/><text x="0.2693%" y="158.50">_send_bytes (multiprocessing/connection.py:408)</text></g><g><title>_send (multiprocessing/connection.py:372) (10,709 samples, 69.02%)</title><rect x="0.0193%" y="164" width="69.0191%" height="15" fill="rgb(207,160,47)"/><text x="0.2693%" y="174.50">_send (multiprocessing/connection.py:372)</text></g><g><title>&lt;module&gt; (demystify/__main__.py:157) (29 samples, 0.19%)</title><rect x="69.1286%" y="100" width="0.1869%" height="15" fill="rgb(228,23,34)"/><text x="69.3786%" y="110.50"></text></g><g><title>__init__ (pysat/formula.py:420) (29 samples, 0.19%)</title><rect x="69.1286%" y="116" width="0.1869%" height="15" fill="rgb(218,30,26)"/><text x="69.3786%" y="126.50"></text></g><g><title>from_file (pysat/formula.py:464) (28 samples, 0.18%)</title><rect x="69.1351%" y="132" width="0.1805%" height="15" fill="rgb(220,122,19)"/><text x="69.3851%" y="142.50"></text></g><g><title>__init__ (sortedcontainers/sortedset.py:141) (17 samples, 0.11%)</title><rect x="69.6636%" y="148" width="0.1096%" height="15" fill="rgb(250,228,42)"/><text x="69.9136%" y="158.50"></text></g><g><title>build_lit2conmap (demystify/utils.py:95) (30 samples, 0.19%)</title><rect x="69.6571%" y="132" width="0.1933%" height="15" fill="rgb(240,193,28)"/><text x="69.9071%" y="142.50"></text></g><g><title>update (sortedcontainers/sortedset.py:682) (20 samples, 0.13%)</title><rect x="69.9472%" y="148" width="0.1289%" height="15" fill="rgb(216,20,37)"/><text x="70.1972%" y="158.50"></text></g><g><title>update (sortedcontainers/sortedlist.py:354) (16 samples, 0.10%)</title><rect x="70.2952%" y="164" width="0.1031%" height="15" fill="rgb(206,188,39)"/><text x="70.5452%" y="174.50"></text></g><g><title>update (sortedcontainers/sortedset.py:687) (50 samples, 0.32%)</title><rect x="70.1921%" y="148" width="0.3222%" height="15" fill="rgb(217,207,13)"/><text x="70.4421%" y="158.50"></text></g><g><title>getConnectedVars (demystify/utils.py:109) (194 samples, 1.25%)</title><rect x="69.6056%" y="116" width="1.2503%" height="15" fill="rgb(231,73,38)"/><text x="69.8556%" y="126.50"></text></g><g><title>build_lit2conmap (demystify/utils.py:96) (156 samples, 1.01%)</title><rect x="69.8505%" y="132" width="1.0054%" height="15" fill="rgb(225,20,46)"/><text x="70.1005%" y="142.50"></text></g><g><title>update (sortedcontainers/sortedset.py:691) (46 samples, 0.30%)</title><rect x="70.5594%" y="148" width="0.2965%" height="15" fill="rgb(210,31,41)"/><text x="70.8094%" y="158.50"></text></g><g><title>add (sortedcontainers/sortedset.py:359) (31 samples, 0.20%)</title><rect x="70.6561%" y="164" width="0.1998%" height="15" fill="rgb(221,200,47)"/><text x="70.9061%" y="174.50"></text></g><g><title>&lt;module&gt; (demystify/__main__.py:283) (234 samples, 1.51%)</title><rect x="69.5476%" y="100" width="1.5081%" height="15" fill="rgb(226,26,5)"/><text x="69.7976%" y="110.50"></text></g><g><title>update (sortedcontainers/sortedset.py:682) (92 samples, 0.59%)</title><rect x="71.3586%" y="148" width="0.5929%" height="15" fill="rgb(249,33,26)"/><text x="71.6086%" y="158.50"></text></g><g><title>__hash__ (demystify/base.py:35) (66 samples, 0.43%)</title><rect x="71.5262%" y="164" width="0.4254%" height="15" fill="rgb(235,183,28)"/><text x="71.7762%" y="174.50"></text></g><g><title>__hash__ (demystify/base.py:268) (22 samples, 0.14%)</title><rect x="71.8097%" y="180" width="0.1418%" height="15" fill="rgb(221,5,38)"/><text x="72.0597%" y="190.50"></text></g><g><title>update (sortedcontainers/sortedset.py:685) (36 samples, 0.23%)</title><rect x="71.9515%" y="148" width="0.2320%" height="15" fill="rgb(247,18,42)"/><text x="72.2015%" y="158.50"></text></g><g><title>__eq__ (demystify/base.py:29) (24 samples, 0.15%)</title><rect x="72.0289%" y="164" width="0.1547%" height="15" fill="rgb(241,131,45)"/><text x="72.2789%" y="174.50"></text></g><g><title>__eq__ (demystify/base.py:262) (130 samples, 0.84%)</title><rect x="79.3181%" y="196" width="0.8378%" height="15" fill="rgb(249,31,29)"/><text x="79.5681%" y="206.50"></text></g><g><title>update (sortedcontainers/sortedlist.py:338) (1,345 samples, 8.67%)</title><rect x="72.1964%" y="164" width="8.6685%" height="15" fill="rgb(225,111,53)"/><text x="72.4464%" y="174.50">update (sort..</text></g><g><title>__lt__ (demystify/base.py:32) (1,050 samples, 6.77%)</title><rect x="74.0977%" y="180" width="6.7672%" height="15" fill="rgb(238,160,17)"/><text x="74.3477%" y="190.50">__lt__ (d..</text></g><g><title>__lt__ (demystify/base.py:265) (104 samples, 0.67%)</title><rect x="80.1946%" y="196" width="0.6703%" height="15" fill="rgb(214,148,48)"/><text x="80.4446%" y="206.50"></text></g><g><title>update (sortedcontainers/sortedset.py:687) (1,348 samples, 8.69%)</title><rect x="72.1964%" y="148" width="8.6878%" height="15" fill="rgb(232,36,49)"/><text x="72.4464%" y="158.50">update (sort..</text></g><g><title>init_litmappings (demystify/internal.py:153) (1,503 samples, 9.69%)</title><rect x="71.3393%" y="132" width="9.6868%" height="15" fill="rgb(209,103,24)"/><text x="71.5893%" y="142.50">init_litmappin..</text></g><g><title>update (sortedcontainers/sortedset.py:691) (21 samples, 0.14%)</title><rect x="80.8907%" y="148" width="0.1353%" height="15" fill="rgb(229,88,8)"/><text x="81.1407%" y="158.50"></text></g><g><title>__eq__ (demystify/base.py:29) (19 samples, 0.12%)</title><rect x="81.2001%" y="164" width="0.1225%" height="15" fill="rgb(213,181,19)"/><text x="81.4501%" y="174.50"></text></g><g><title>&lt;listcomp&gt; (demystify/internal.py:158) (78 samples, 0.50%)</title><rect x="81.0325%" y="148" width="0.5027%" height="15" fill="rgb(254,191,54)"/><text x="81.2825%" y="158.50"></text></g><g><title>__hash__ (demystify/base.py:35) (33 samples, 0.21%)</title><rect x="81.3225%" y="164" width="0.2127%" height="15" fill="rgb(241,83,37)"/><text x="81.5725%" y="174.50"></text></g><g><title>update (sortedcontainers/sortedset.py:682) (48 samples, 0.31%)</title><rect x="81.5674%" y="180" width="0.3094%" height="15" fill="rgb(233,36,39)"/><text x="81.8174%" y="190.50"></text></g><g><title>__iter__ (sortedcontainers/sortedset.py:326) (24 samples, 0.15%)</title><rect x="81.7221%" y="196" width="0.1547%" height="15" fill="rgb(226,3,54)"/><text x="81.9721%" y="206.50"></text></g><g><title>init_litmappings (demystify/internal.py:158) (133 samples, 0.86%)</title><rect x="81.0260%" y="132" width="0.8572%" height="15" fill="rgb(245,192,40)"/><text x="81.2760%" y="142.50"></text></g><g><title>union (sortedcontainers/sortedset.py:658) (53 samples, 0.34%)</title><rect x="81.5416%" y="148" width="0.3416%" height="15" fill="rgb(238,167,29)"/><text x="81.7916%" y="158.50"></text></g><g><title>__init__ (sortedcontainers/sortedset.py:168) (49 samples, 0.32%)</title><rect x="81.5674%" y="164" width="0.3158%" height="15" fill="rgb(232,182,51)"/><text x="81.8174%" y="174.50"></text></g><g><title>&lt;module&gt; (demystify/__main__.py:308) (1,664 samples, 10.72%)</title><rect x="71.1781%" y="100" width="10.7244%" height="15" fill="rgb(231,60,39)"/><text x="71.4281%" y="110.50">&lt;module&gt; (demyst..</text></g><g><title>__init__ (demystify/internal.py:69) (1,656 samples, 10.67%)</title><rect x="71.2297%" y="116" width="10.6729%" height="15" fill="rgb(208,69,12)"/><text x="71.4797%" y="126.50">__init__ (demyst..</text></g><g><title>solveSingle (demystify/internal.py:222) (49 samples, 0.32%)</title><rect x="81.9090%" y="116" width="0.3158%" height="15" fill="rgb(235,93,37)"/><text x="82.1590%" y="126.50"></text></g><g><title>_solveSingle (demystify/internal.py:183) (49 samples, 0.32%)</title><rect x="81.9090%" y="132" width="0.3158%" height="15" fill="rgb(213,116,39)"/><text x="82.1590%" y="142.50"></text></g><g><title>solveSingle (pysatimpl.py:155) (39 samples, 0.25%)</title><rect x="81.9734%" y="148" width="0.2514%" height="15" fill="rgb(222,207,29)"/><text x="82.2234%" y="158.50"></text></g><g><title>solve (pysatimpl.py:106) (39 samples, 0.25%)</title><rect x="81.9734%" y="164" width="0.2514%" height="15" fill="rgb(206,96,30)"/><text x="82.2234%" y="174.50"></text></g><g><title>solve (pysat/solvers.py:459) (39 samples, 0.25%)</title><rect x="81.9734%" y="180" width="0.2514%" height="15" fill="rgb(218,138,4)"/><text x="82.2234%" y="190.50"></text></g><g><title>solve (pysat/solvers.py:2461) (38 samples, 0.24%)</title><rect x="81.9799%" y="196" width="0.2449%" height="15" fill="rgb(250,191,14)"/><text x="82.2299%" y="206.50"></text></g><g><title>&lt;module&gt; (demystify/__main__.py:315) (50 samples, 0.32%)</title><rect x="81.9090%" y="100" width="0.3222%" height="15" fill="rgb(239,60,40)"/><text x="82.1590%" y="110.50"></text></g><g><title>_deepcopy_list (copy.py:214) (19 samples, 0.12%)</title><rect x="82.3666%" y="228" width="0.1225%" height="15" fill="rgb(206,27,48)"/><text x="82.6166%" y="238.50"></text></g><g><title>deepcopy (copy.py:150) (41 samples, 0.26%)</title><rect x="82.3537%" y="212" width="0.2642%" height="15" fill="rgb(225,35,8)"/><text x="82.6037%" y="222.50"></text></g><g><title>_deepcopy_list (copy.py:215) (20 samples, 0.13%)</title><rect x="82.4890%" y="228" width="0.1289%" height="15" fill="rgb(250,213,24)"/><text x="82.7390%" y="238.50"></text></g><g><title>__init__ (demystify/optuxext.py:35) (51 samples, 0.33%)</title><rect x="82.3279%" y="132" width="0.3287%" height="15" fill="rgb(247,123,22)"/><text x="82.5779%" y="142.50"></text></g><g><title>copy (pysat/formula.py:2387) (51 samples, 0.33%)</title><rect x="82.3279%" y="148" width="0.3287%" height="15" fill="rgb(231,138,38)"/><text x="82.5779%" y="158.50"></text></g><g><title>copy (pysat/formula.py:1206) (51 samples, 0.33%)</title><rect x="82.3279%" y="164" width="0.3287%" height="15" fill="rgb(231,145,46)"/><text x="82.5779%" y="174.50"></text></g><g><title>deepcopy (copy.py:150) (51 samples, 0.33%)</title><rect x="82.3279%" y="180" width="0.3287%" height="15" fill="rgb(251,118,11)"/><text x="82.5779%" y="190.50"></text></g><g><title>_deepcopy_list (copy.py:215) (49 samples, 0.32%)</title><rect x="82.3408%" y="196" width="0.3158%" height="15" fill="rgb(217,147,25)"/><text x="82.5908%" y="206.50"></text></g><g><title>&lt;module&gt; (demystify/__main__.py:334) (74 samples, 0.48%)</title><rect x="82.2312%" y="100" width="0.4769%" height="15" fill="rgb(247,81,37)"/><text x="82.4812%" y="110.50"></text></g><g><title>__init__ (demystify/MUSForqes.py:230) (59 samples, 0.38%)</title><rect x="82.3279%" y="116" width="0.3803%" height="15" fill="rgb(209,12,38)"/><text x="82.5779%" y="126.50"></text></g><g><title>&lt;module&gt; (demystify/__main__.py:342) (2,680 samples, 17.27%)</title><rect x="82.7082%" y="100" width="17.2725%" height="15" fill="rgb(227,1,9)"/><text x="82.9582%" y="110.50">&lt;module&gt; (demystify/__main_..</text></g><g><title>html_solve (demystify/solve.py:175) (2,680 samples, 17.27%)</title><rect x="82.7082%" y="116" width="17.2725%" height="15" fill="rgb(248,47,43)"/><text x="82.9582%" y="126.50">html_solve (demystify/solve..</text></g><g><title>smallestMUS (demystify/MUSForqes.py:235) (2,680 samples, 17.27%)</title><rect x="82.7082%" y="132" width="17.2725%" height="15" fill="rgb(221,10,30)"/><text x="82.9582%" y="142.50">smallestMUS (demystify/MUSF..</text></g><g><title>forqesMUS (demystify/MUSForqes.py:197) (2,679 samples, 17.27%)</title><rect x="82.7146%" y="148" width="17.2660%" height="15" fill="rgb(210,229,1)"/><text x="82.9646%" y="158.50">forqesMUS (demystify/MUSFor..</text></g><g><title>map (demystify/parallel.py:122) (2,676 samples, 17.25%)</title><rect x="82.7340%" y="164" width="17.2467%" height="15" fill="rgb(222,148,37)"/><text x="82.9840%" y="174.50">map (demystify/parallel.py:..</text></g><g><title>get (multiprocessing/queues.py:94) (2,676 samples, 17.25%)</title><rect x="82.7340%" y="180" width="17.2467%" height="15" fill="rgb(234,67,33)"/><text x="82.9840%" y="190.50">get (multiprocessing/queues..</text></g><g><title>recv_bytes (multiprocessing/connection.py:220) (2,676 samples, 17.25%)</title><rect x="82.7340%" y="196" width="17.2467%" height="15" fill="rgb(247,98,35)"/><text x="82.9840%" y="206.50">recv_bytes (multiprocessing..</text></g><g><title>_recv_bytes (multiprocessing/connection.py:411) (2,676 samples, 17.25%)</title><rect x="82.7340%" y="212" width="17.2467%" height="15" fill="rgb(247,138,52)"/><text x="82.9840%" y="222.50">_recv_bytes (multiprocessin..</text></g><g><title>_recv (multiprocessing/connection.py:383) (2,676 samples, 17.25%)</title><rect x="82.7340%" y="228" width="17.2467%" height="15" fill="rgb(213,79,30)"/><text x="82.9840%" y="238.50">_recv (multiprocessing/conn..</text></g><g><title>all (15,516 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(246,177,23)"/><text x="0.2500%" y="62.50"></text></g><g><title>_run_module_as_main (runpy.py:193) (4,803 samples, 30.96%)</title><rect x="69.0449%" y="68" width="30.9551%" height="15" fill="rgb(230,62,27)"/><text x="69.2949%" y="78.50">_run_module_as_main (runpy.py:193)</text></g><g><title>_run_code (runpy.py:85) (4,803 samples, 30.96%)</title><rect x="69.0449%" y="84" width="30.9551%" height="15" fill="rgb(216,154,8)"/><text x="69.2949%" y="94.50">_run_code (runpy.py:85)</text></g></svg></svg>