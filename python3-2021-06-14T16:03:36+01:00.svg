<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="410" onload="init(evt)" viewBox="0 0 1200 410" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="410" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record -- python3 demystify --eprime ./eprime/nice_killer.eprime --eprimeparam ./eprime/killersudoku/killersudoku.param --forqes</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="399.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (demystify/__main__.py:150) (23 samples, 0.35%)</title><rect x="0.0308%" y="100" width="0.3540%" height="15" fill="rgb(227,0,7)"/><text x="0.2808%" y="110.50"></text></g><g><title>run (subprocess.py:425) (23 samples, 0.35%)</title><rect x="0.0308%" y="116" width="0.3540%" height="15" fill="rgb(217,0,24)"/><text x="0.2808%" y="126.50"></text></g><g><title>communicate (subprocess.py:855) (23 samples, 0.35%)</title><rect x="0.0308%" y="132" width="0.3540%" height="15" fill="rgb(221,193,54)"/><text x="0.2808%" y="142.50"></text></g><g><title>wait (subprocess.py:1477) (23 samples, 0.35%)</title><rect x="0.0308%" y="148" width="0.3540%" height="15" fill="rgb(248,212,6)"/><text x="0.2808%" y="158.50"></text></g><g><title>_try_wait (subprocess.py:1424) (23 samples, 0.35%)</title><rect x="0.0308%" y="164" width="0.3540%" height="15" fill="rgb(208,68,35)"/><text x="0.2808%" y="174.50"></text></g><g><title>from_fp (pysat/formula.py:500) (17 samples, 0.26%)</title><rect x="0.5232%" y="148" width="0.2616%" height="15" fill="rgb(232,128,0)"/><text x="0.7732%" y="158.50"></text></g><g><title>&lt;listcomp&gt; (pysat/formula.py:500) (11 samples, 0.17%)</title><rect x="0.6156%" y="164" width="0.1693%" height="15" fill="rgb(207,160,47)"/><text x="0.8656%" y="174.50"></text></g><g><title>from_fp (pysat/formula.py:501) (12 samples, 0.18%)</title><rect x="0.7849%" y="148" width="0.1847%" height="15" fill="rgb(228,23,34)"/><text x="1.0349%" y="158.50"></text></g><g><title>&lt;module&gt; (demystify/__main__.py:157) (41 samples, 0.63%)</title><rect x="0.3847%" y="100" width="0.6310%" height="15" fill="rgb(218,30,26)"/><text x="0.6347%" y="110.50"></text></g><g><title>__init__ (pysat/formula.py:420) (41 samples, 0.63%)</title><rect x="0.3847%" y="116" width="0.6310%" height="15" fill="rgb(220,122,19)"/><text x="0.6347%" y="126.50"></text></g><g><title>from_file (pysat/formula.py:464) (41 samples, 0.63%)</title><rect x="0.3847%" y="132" width="0.6310%" height="15" fill="rgb(250,228,42)"/><text x="0.6347%" y="142.50"></text></g><g><title>&lt;module&gt; (demystify/__main__.py:21) (13 samples, 0.20%)</title><rect x="1.1080%" y="100" width="0.2001%" height="15" fill="rgb(240,193,28)"/><text x="1.3580%" y="110.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:971) (13 samples, 0.20%)</title><rect x="1.1080%" y="116" width="0.2001%" height="15" fill="rgb(216,20,37)"/><text x="1.3580%" y="126.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:955) (13 samples, 0.20%)</title><rect x="1.1080%" y="132" width="0.2001%" height="15" fill="rgb(206,188,39)"/><text x="1.3580%" y="142.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:665) (13 samples, 0.20%)</title><rect x="1.1080%" y="148" width="0.2001%" height="15" fill="rgb(217,207,13)"/><text x="1.3580%" y="158.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:678) (13 samples, 0.20%)</title><rect x="1.1080%" y="164" width="0.2001%" height="15" fill="rgb(231,73,38)"/><text x="1.3580%" y="174.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (13 samples, 0.20%)</title><rect x="1.1080%" y="180" width="0.2001%" height="15" fill="rgb(225,20,46)"/><text x="1.3580%" y="190.50"></text></g><g><title>&lt;module&gt; (demystify/base.py:7) (11 samples, 0.17%)</title><rect x="1.1388%" y="196" width="0.1693%" height="15" fill="rgb(210,31,41)"/><text x="1.3888%" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:971) (11 samples, 0.17%)</title><rect x="1.1388%" y="212" width="0.1693%" height="15" fill="rgb(221,200,47)"/><text x="1.3888%" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:955) (11 samples, 0.17%)</title><rect x="1.1388%" y="228" width="0.1693%" height="15" fill="rgb(226,26,5)"/><text x="1.3888%" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:665) (11 samples, 0.17%)</title><rect x="1.1388%" y="244" width="0.1693%" height="15" fill="rgb(249,33,26)"/><text x="1.3888%" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:678) (11 samples, 0.17%)</title><rect x="1.1388%" y="260" width="0.1693%" height="15" fill="rgb(235,183,28)"/><text x="1.3888%" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (11 samples, 0.17%)</title><rect x="1.1388%" y="276" width="0.1693%" height="15" fill="rgb(221,5,38)"/><text x="1.3888%" y="286.50"></text></g><g><title>&lt;module&gt; (demystify/utils.py:57) (11 samples, 0.17%)</title><rect x="1.1388%" y="292" width="0.1693%" height="15" fill="rgb(247,18,42)"/><text x="1.3888%" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:971) (11 samples, 0.17%)</title><rect x="1.1388%" y="308" width="0.1693%" height="15" fill="rgb(241,131,45)"/><text x="1.3888%" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:955) (11 samples, 0.17%)</title><rect x="1.1388%" y="324" width="0.1693%" height="15" fill="rgb(249,31,29)"/><text x="1.3888%" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:665) (11 samples, 0.17%)</title><rect x="1.1388%" y="340" width="0.1693%" height="15" fill="rgb(225,111,53)"/><text x="1.3888%" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:678) (11 samples, 0.17%)</title><rect x="1.1388%" y="356" width="0.1693%" height="15" fill="rgb(238,160,17)"/><text x="1.3888%" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (11 samples, 0.17%)</title><rect x="1.1388%" y="372" width="0.1693%" height="15" fill="rgb(214,148,48)"/><text x="1.3888%" y="382.50"></text></g><g><title>update (sortedcontainers/sortedset.py:682) (9 samples, 0.14%)</title><rect x="1.4158%" y="132" width="0.1385%" height="15" fill="rgb(232,36,49)"/><text x="1.6658%" y="142.50"></text></g><g><title>__hash__ (demystify/base.py:35) (8 samples, 0.12%)</title><rect x="1.4312%" y="148" width="0.1231%" height="15" fill="rgb(209,103,24)"/><text x="1.6812%" y="158.50"></text></g><g><title>__init__ (sortedcontainers/sortedset.py:168) (13 samples, 0.20%)</title><rect x="1.4158%" y="116" width="0.2001%" height="15" fill="rgb(229,88,8)"/><text x="1.6658%" y="126.50"></text></g><g><title>__init__ (sortedcontainers/sortedset.py:141) (17 samples, 0.26%)</title><rect x="1.8313%" y="148" width="0.2616%" height="15" fill="rgb(213,181,19)"/><text x="2.0813%" y="158.50"></text></g><g><title>__init__ (sortedcontainers/sortedlist.py:171) (13 samples, 0.20%)</title><rect x="1.8929%" y="164" width="0.2001%" height="15" fill="rgb(254,191,54)"/><text x="2.1429%" y="174.50"></text></g><g><title>build_lit2conmap (demystify/utils.py:95) (29 samples, 0.45%)</title><rect x="1.7544%" y="132" width="0.4463%" height="15" fill="rgb(241,83,37)"/><text x="2.0044%" y="142.50"></text></g><g><title>update (sortedcontainers/sortedset.py:682) (8 samples, 0.12%)</title><rect x="2.4777%" y="148" width="0.1231%" height="15" fill="rgb(233,36,39)"/><text x="2.7277%" y="158.50"></text></g><g><title>update (sortedcontainers/sortedset.py:683) (8 samples, 0.12%)</title><rect x="2.6008%" y="148" width="0.1231%" height="15" fill="rgb(226,3,54)"/><text x="2.8508%" y="158.50"></text></g><g><title>update (sortedcontainers/sortedlist.py:338) (13 samples, 0.20%)</title><rect x="2.8778%" y="164" width="0.2001%" height="15" fill="rgb(245,192,40)"/><text x="3.1278%" y="174.50"></text></g><g><title>update (sortedcontainers/sortedlist.py:354) (10 samples, 0.15%)</title><rect x="3.1240%" y="164" width="0.1539%" height="15" fill="rgb(238,167,29)"/><text x="3.3740%" y="174.50"></text></g><g><title>update (sortedcontainers/sortedlist.py:355) (8 samples, 0.12%)</title><rect x="3.2779%" y="164" width="0.1231%" height="15" fill="rgb(232,182,51)"/><text x="3.5279%" y="174.50"></text></g><g><title>update (sortedcontainers/sortedset.py:687) (38 samples, 0.58%)</title><rect x="2.8316%" y="148" width="0.5848%" height="15" fill="rgb(231,60,39)"/><text x="3.0816%" y="158.50"></text></g><g><title>add (sortedcontainers/sortedlist.py:272) (10 samples, 0.15%)</title><rect x="3.8166%" y="180" width="0.1539%" height="15" fill="rgb(208,69,12)"/><text x="4.0666%" y="190.50"></text></g><g><title>add (sortedcontainers/sortedlist.py:279) (10 samples, 0.15%)</title><rect x="4.0012%" y="180" width="0.1539%" height="15" fill="rgb(235,93,37)"/><text x="4.2512%" y="190.50"></text></g><g><title>add (sortedcontainers/sortedlist.py:281) (9 samples, 0.14%)</title><rect x="4.1551%" y="180" width="0.1385%" height="15" fill="rgb(213,116,39)"/><text x="4.4051%" y="190.50"></text></g><g><title>getConnectedVars (demystify/utils.py:109) (169 samples, 2.60%)</title><rect x="1.7082%" y="116" width="2.6008%" height="15" fill="rgb(222,207,29)"/><text x="1.9582%" y="126.50">ge..</text></g><g><title>build_lit2conmap (demystify/utils.py:96) (137 samples, 2.11%)</title><rect x="2.2007%" y="132" width="2.1083%" height="15" fill="rgb(206,96,30)"/><text x="2.4507%" y="142.50">b..</text></g><g><title>update (sortedcontainers/sortedset.py:691) (56 samples, 0.86%)</title><rect x="3.4472%" y="148" width="0.8618%" height="15" fill="rgb(218,138,4)"/><text x="3.6972%" y="158.50"></text></g><g><title>add (sortedcontainers/sortedset.py:359) (43 samples, 0.66%)</title><rect x="3.6473%" y="164" width="0.6617%" height="15" fill="rgb(250,191,14)"/><text x="3.8973%" y="174.50"></text></g><g><title>getConnectedVars (demystify/utils.py:124) (12 samples, 0.18%)</title><rect x="4.4783%" y="116" width="0.1847%" height="15" fill="rgb(239,60,40)"/><text x="4.7283%" y="126.50"></text></g><g><title>&lt;module&gt; (demystify/__main__.py:283) (221 samples, 3.40%)</title><rect x="1.4158%" y="100" width="3.4010%" height="15" fill="rgb(206,27,48)"/><text x="1.6658%" y="110.50">&lt;mo..</text></g><g><title>__init__ (sortedcontainers/sortedset.py:168) (7 samples, 0.11%)</title><rect x="4.8169%" y="116" width="0.1077%" height="15" fill="rgb(225,35,8)"/><text x="5.0669%" y="126.50"></text></g><g><title>&lt;module&gt; (demystify/__main__.py:285) (9 samples, 0.14%)</title><rect x="4.8169%" y="100" width="0.1385%" height="15" fill="rgb(250,213,24)"/><text x="5.0669%" y="110.50"></text></g><g><title>&lt;module&gt; (demystify/__main__.py:286) (9 samples, 0.14%)</title><rect x="4.9554%" y="100" width="0.1385%" height="15" fill="rgb(247,123,22)"/><text x="5.2054%" y="110.50"></text></g><g><title>__init__ (demystify/base.py:54) (9 samples, 0.14%)</title><rect x="4.9554%" y="116" width="0.1385%" height="15" fill="rgb(231,138,38)"/><text x="5.2054%" y="126.50"></text></g><g><title>__init__ (demystify/internal.py:67) (8 samples, 0.12%)</title><rect x="5.0939%" y="116" width="0.1231%" height="15" fill="rgb(231,145,46)"/><text x="5.3439%" y="126.50"></text></g><g><title>init_litmappings (demystify/internal.py:145) (11 samples, 0.17%)</title><rect x="5.2170%" y="132" width="0.1693%" height="15" fill="rgb(251,118,11)"/><text x="5.4670%" y="142.50"></text></g><g><title>&lt;dictcomp&gt; (demystify/internal.py:145) (11 samples, 0.17%)</title><rect x="5.2170%" y="148" width="0.1693%" height="15" fill="rgb(217,147,25)"/><text x="5.4670%" y="158.50"></text></g><g><title>__init__ (sortedcontainers/sortedset.py:141) (10 samples, 0.15%)</title><rect x="5.2324%" y="164" width="0.1539%" height="15" fill="rgb(247,81,37)"/><text x="5.4824%" y="174.50"></text></g><g><title>__init__ (sortedcontainers/sortedlist.py:171) (10 samples, 0.15%)</title><rect x="5.2324%" y="180" width="0.1539%" height="15" fill="rgb(209,12,38)"/><text x="5.4824%" y="190.50"></text></g><g><title>update (sortedcontainers/sortedset.py:682) (100 samples, 1.54%)</title><rect x="5.6633%" y="148" width="1.5389%" height="15" fill="rgb(227,1,9)"/><text x="5.9133%" y="158.50"></text></g><g><title>__hash__ (demystify/base.py:35) (69 samples, 1.06%)</title><rect x="6.1404%" y="164" width="1.0619%" height="15" fill="rgb(248,47,43)"/><text x="6.3904%" y="174.50"></text></g><g><title>__hash__ (demystify/base.py:268) (22 samples, 0.34%)</title><rect x="6.8637%" y="180" width="0.3386%" height="15" fill="rgb(221,10,30)"/><text x="7.1137%" y="190.50"></text></g><g><title>update (sortedcontainers/sortedset.py:685) (36 samples, 0.55%)</title><rect x="7.2022%" y="148" width="0.5540%" height="15" fill="rgb(210,229,1)"/><text x="7.4522%" y="158.50"></text></g><g><title>__eq__ (demystify/base.py:29) (23 samples, 0.35%)</title><rect x="7.4023%" y="164" width="0.3540%" height="15" fill="rgb(222,148,37)"/><text x="7.6523%" y="174.50"></text></g><g><title>__lt__ (demystify/base.py:31) (7 samples, 0.11%)</title><rect x="12.2499%" y="180" width="0.1077%" height="15" fill="rgb(234,67,33)"/><text x="12.4999%" y="190.50"></text></g><g><title>__eq__ (demystify/base.py:261) (7 samples, 0.11%)</title><rect x="24.1613%" y="196" width="0.1077%" height="15" fill="rgb(247,98,35)"/><text x="24.4113%" y="206.50"></text></g><g><title>__eq__ (demystify/base.py:262) (90 samples, 1.39%)</title><rect x="24.2690%" y="196" width="1.3850%" height="15" fill="rgb(247,138,52)"/><text x="24.5190%" y="206.50"></text></g><g><title>update (sortedcontainers/sortedlist.py:338) (1,273 samples, 19.59%)</title><rect x="7.7562%" y="164" width="19.5906%" height="15" fill="rgb(213,79,30)"/><text x="8.0062%" y="174.50">update (sortedcontainers/sorted..</text></g><g><title>__lt__ (demystify/base.py:32) (974 samples, 14.99%)</title><rect x="12.3576%" y="180" width="14.9892%" height="15" fill="rgb(246,177,23)"/><text x="12.6076%" y="190.50">__lt__ (demystify/base...</text></g><g><title>__lt__ (demystify/base.py:265) (107 samples, 1.65%)</title><rect x="25.7002%" y="196" width="1.6467%" height="15" fill="rgb(230,62,27)"/><text x="25.9502%" y="206.50"></text></g><g><title>update (sortedcontainers/sortedset.py:687) (1,276 samples, 19.64%)</title><rect x="7.7562%" y="148" width="19.6368%" height="15" fill="rgb(216,154,8)"/><text x="8.0062%" y="158.50">update (sortedcontainers/sorted..</text></g><g><title>add (sortedcontainers/sortedset.py:357) (9 samples, 0.14%)</title><rect x="27.4238%" y="164" width="0.1385%" height="15" fill="rgb(244,35,45)"/><text x="27.6738%" y="174.50"></text></g><g><title>init_litmappings (demystify/internal.py:153) (1,433 samples, 22.05%)</title><rect x="5.5402%" y="132" width="22.0529%" height="15" fill="rgb(251,115,12)"/><text x="5.7902%" y="142.50">init_litmappings (demystify/interna..</text></g><g><title>update (sortedcontainers/sortedset.py:691) (13 samples, 0.20%)</title><rect x="27.3930%" y="148" width="0.2001%" height="15" fill="rgb(240,54,50)"/><text x="27.6430%" y="158.50"></text></g><g><title>__eq__ (demystify/base.py:29) (25 samples, 0.38%)</title><rect x="28.0394%" y="164" width="0.3847%" height="15" fill="rgb(233,84,52)"/><text x="28.2894%" y="174.50"></text></g><g><title>&lt;listcomp&gt; (demystify/internal.py:158) (81 samples, 1.25%)</title><rect x="27.6393%" y="148" width="1.2465%" height="15" fill="rgb(207,117,47)"/><text x="27.8893%" y="158.50"></text></g><g><title>__hash__ (demystify/base.py:35) (29 samples, 0.45%)</title><rect x="28.4395%" y="164" width="0.4463%" height="15" fill="rgb(249,43,39)"/><text x="28.6895%" y="174.50"></text></g><g><title>__hash__ (demystify/base.py:268) (7 samples, 0.11%)</title><rect x="28.7781%" y="180" width="0.1077%" height="15" fill="rgb(209,38,44)"/><text x="29.0281%" y="190.50"></text></g><g><title>update (sortedcontainers/sortedset.py:682) (45 samples, 0.69%)</title><rect x="28.9781%" y="180" width="0.6925%" height="15" fill="rgb(236,212,23)"/><text x="29.2281%" y="190.50"></text></g><g><title>__iter__ (sortedcontainers/sortedset.py:326) (25 samples, 0.38%)</title><rect x="29.2859%" y="196" width="0.3847%" height="15" fill="rgb(242,79,21)"/><text x="29.5359%" y="206.50"></text></g><g><title>__iter__ (sortedcontainers/sortedlist.py:929) (12 samples, 0.18%)</title><rect x="29.4860%" y="212" width="0.1847%" height="15" fill="rgb(211,96,35)"/><text x="29.7360%" y="222.50"></text></g><g><title>init_litmappings (demystify/internal.py:158) (137 samples, 2.11%)</title><rect x="27.5931%" y="132" width="2.1083%" height="15" fill="rgb(253,215,40)"/><text x="27.8431%" y="142.50">i..</text></g><g><title>union (sortedcontainers/sortedset.py:658) (50 samples, 0.77%)</title><rect x="28.9320%" y="148" width="0.7695%" height="15" fill="rgb(211,81,21)"/><text x="29.1820%" y="158.50"></text></g><g><title>__init__ (sortedcontainers/sortedset.py:168) (47 samples, 0.72%)</title><rect x="28.9781%" y="164" width="0.7233%" height="15" fill="rgb(208,190,38)"/><text x="29.2281%" y="174.50"></text></g><g><title>&lt;module&gt; (demystify/__main__.py:308) (1,601 samples, 24.64%)</title><rect x="5.0939%" y="100" width="24.6384%" height="15" fill="rgb(235,213,38)"/><text x="5.3439%" y="110.50">&lt;module&gt; (demystify/__main__.py:308)</text></g><g><title>__init__ (demystify/internal.py:69) (1,593 samples, 24.52%)</title><rect x="5.2170%" y="116" width="24.5152%" height="15" fill="rgb(237,122,38)"/><text x="5.4670%" y="126.50">__init__ (demystify/internal.py:69)</text></g><g><title>solveSingle (pysatimpl.py:153) (14 samples, 0.22%)</title><rect x="29.7322%" y="148" width="0.2155%" height="15" fill="rgb(244,218,35)"/><text x="29.9822%" y="158.50"></text></g><g><title>solve (pysatimpl.py:106) (14 samples, 0.22%)</title><rect x="29.7322%" y="164" width="0.2155%" height="15" fill="rgb(240,68,47)"/><text x="29.9822%" y="174.50"></text></g><g><title>solve (pysat/solvers.py:459) (14 samples, 0.22%)</title><rect x="29.7322%" y="180" width="0.2155%" height="15" fill="rgb(210,16,53)"/><text x="29.9822%" y="190.50"></text></g><g><title>solve (pysat/solvers.py:2461) (14 samples, 0.22%)</title><rect x="29.7322%" y="196" width="0.2155%" height="15" fill="rgb(235,124,12)"/><text x="29.9822%" y="206.50"></text></g><g><title>&lt;module&gt; (demystify/__main__.py:315) (57 samples, 0.88%)</title><rect x="29.7322%" y="100" width="0.8772%" height="15" fill="rgb(224,169,11)"/><text x="29.9822%" y="110.50"></text></g><g><title>solveSingle (demystify/internal.py:222) (57 samples, 0.88%)</title><rect x="29.7322%" y="116" width="0.8772%" height="15" fill="rgb(250,166,2)"/><text x="29.9822%" y="126.50"></text></g><g><title>_solveSingle (demystify/internal.py:183) (57 samples, 0.88%)</title><rect x="29.7322%" y="132" width="0.8772%" height="15" fill="rgb(242,216,29)"/><text x="29.9822%" y="142.50"></text></g><g><title>solveSingle (pysatimpl.py:155) (43 samples, 0.66%)</title><rect x="29.9477%" y="148" width="0.6617%" height="15" fill="rgb(230,116,27)"/><text x="30.1977%" y="158.50"></text></g><g><title>solve (pysatimpl.py:106) (43 samples, 0.66%)</title><rect x="29.9477%" y="164" width="0.6617%" height="15" fill="rgb(228,99,48)"/><text x="30.1977%" y="174.50"></text></g><g><title>solve (pysat/solvers.py:459) (43 samples, 0.66%)</title><rect x="29.9477%" y="180" width="0.6617%" height="15" fill="rgb(253,11,6)"/><text x="30.1977%" y="190.50"></text></g><g><title>solve (pysat/solvers.py:2461) (43 samples, 0.66%)</title><rect x="29.9477%" y="196" width="0.6617%" height="15" fill="rgb(247,143,39)"/><text x="30.1977%" y="206.50"></text></g><g><title>__init__ (demystify/MUSForqes.py:216) (11 samples, 0.17%)</title><rect x="30.6248%" y="116" width="0.1693%" height="15" fill="rgb(236,97,10)"/><text x="30.8748%" y="126.50"></text></g><g><title>extend (pysat/formula.py:1481) (11 samples, 0.17%)</title><rect x="30.6248%" y="132" width="0.1693%" height="15" fill="rgb(233,208,19)"/><text x="30.8748%" y="142.50"></text></g><g><title>_deepcopy_list (copy.py:214) (15 samples, 0.23%)</title><rect x="30.9788%" y="228" width="0.2308%" height="15" fill="rgb(216,164,2)"/><text x="31.2288%" y="238.50"></text></g><g><title>deepcopy (copy.py:150) (32 samples, 0.49%)</title><rect x="30.9480%" y="212" width="0.4925%" height="15" fill="rgb(220,129,5)"/><text x="31.1980%" y="222.50"></text></g><g><title>_deepcopy_list (copy.py:215) (15 samples, 0.23%)</title><rect x="31.2096%" y="228" width="0.2308%" height="15" fill="rgb(242,17,10)"/><text x="31.4596%" y="238.50"></text></g><g><title>__init__ (demystify/optuxext.py:35) (43 samples, 0.66%)</title><rect x="30.7941%" y="132" width="0.6617%" height="15" fill="rgb(242,107,0)"/><text x="31.0441%" y="142.50"></text></g><g><title>copy (pysat/formula.py:2387) (43 samples, 0.66%)</title><rect x="30.7941%" y="148" width="0.6617%" height="15" fill="rgb(251,28,31)"/><text x="31.0441%" y="158.50"></text></g><g><title>copy (pysat/formula.py:1206) (43 samples, 0.66%)</title><rect x="30.7941%" y="164" width="0.6617%" height="15" fill="rgb(233,223,10)"/><text x="31.0441%" y="174.50"></text></g><g><title>deepcopy (copy.py:150) (43 samples, 0.66%)</title><rect x="30.7941%" y="180" width="0.6617%" height="15" fill="rgb(215,21,27)"/><text x="31.0441%" y="190.50"></text></g><g><title>_deepcopy_list (copy.py:215) (42 samples, 0.65%)</title><rect x="30.8095%" y="196" width="0.6464%" height="15" fill="rgb(232,23,21)"/><text x="31.0595%" y="206.50"></text></g><g><title>&lt;module&gt; (demystify/__main__.py:334) (61 samples, 0.94%)</title><rect x="30.6248%" y="100" width="0.9388%" height="15" fill="rgb(244,5,23)"/><text x="30.8748%" y="110.50"></text></g><g><title>__init__ (demystify/MUSForqes.py:223) (50 samples, 0.77%)</title><rect x="30.7941%" y="116" width="0.7695%" height="15" fill="rgb(226,81,46)"/><text x="31.0441%" y="126.50"></text></g><g><title>__init__ (demystify/optuxext.py:44) (7 samples, 0.11%)</title><rect x="31.4558%" y="132" width="0.1077%" height="15" fill="rgb(247,70,30)"/><text x="31.7058%" y="142.50"></text></g><g><title>__init__ (pysat/solvers.py:329) (7 samples, 0.11%)</title><rect x="31.4558%" y="148" width="0.1077%" height="15" fill="rgb(212,68,19)"/><text x="31.7058%" y="158.50"></text></g><g><title>new (pysat/solvers.py:374) (7 samples, 0.11%)</title><rect x="31.4558%" y="164" width="0.1077%" height="15" fill="rgb(240,187,13)"/><text x="31.7058%" y="174.50"></text></g><g><title>__init__ (pysat/solvers.py:2393) (7 samples, 0.11%)</title><rect x="31.4558%" y="180" width="0.1077%" height="15" fill="rgb(223,113,26)"/><text x="31.7058%" y="190.50"></text></g><g><title>_deepcopy_list (copy.py:214) (26 samples, 0.40%)</title><rect x="31.8560%" y="276" width="0.4001%" height="15" fill="rgb(206,192,2)"/><text x="32.1060%" y="286.50"></text></g><g><title>deepcopy (copy.py:141) (9 samples, 0.14%)</title><rect x="32.7178%" y="292" width="0.1385%" height="15" fill="rgb(241,108,4)"/><text x="32.9678%" y="302.50"></text></g><g><title>deepcopy (copy.py:142) (39 samples, 0.60%)</title><rect x="32.8563%" y="292" width="0.6002%" height="15" fill="rgb(247,173,49)"/><text x="33.1063%" y="302.50"></text></g><g><title>deepcopy (copy.py:146) (9 samples, 0.14%)</title><rect x="33.4872%" y="292" width="0.1385%" height="15" fill="rgb(224,114,35)"/><text x="33.7372%" y="302.50"></text></g><g><title>deepcopy (copy.py:148) (24 samples, 0.37%)</title><rect x="33.6257%" y="292" width="0.3693%" height="15" fill="rgb(245,159,27)"/><text x="33.8757%" y="302.50"></text></g><g><title>_deepcopy_list (copy.py:211) (10 samples, 0.15%)</title><rect x="34.2413%" y="308" width="0.1539%" height="15" fill="rgb(245,172,44)"/><text x="34.4913%" y="318.50"></text></g><g><title>_deepcopy_list (copy.py:212) (40 samples, 0.62%)</title><rect x="34.3952%" y="308" width="0.6156%" height="15" fill="rgb(236,23,11)"/><text x="34.6452%" y="318.50"></text></g><g><title>_deepcopy_list (copy.py:213) (11 samples, 0.17%)</title><rect x="35.0108%" y="308" width="0.1693%" height="15" fill="rgb(205,117,38)"/><text x="35.2608%" y="318.50"></text></g><g><title>_deepcopy_list (copy.py:214) (190 samples, 2.92%)</title><rect x="35.1801%" y="308" width="2.9240%" height="15" fill="rgb(237,72,25)"/><text x="35.4301%" y="318.50">_d..</text></g><g><title>deepcopy (copy.py:138) (11 samples, 0.17%)</title><rect x="39.3967%" y="324" width="0.1693%" height="15" fill="rgb(244,70,9)"/><text x="39.6467%" y="334.50"></text></g><g><title>deepcopy (copy.py:141) (33 samples, 0.51%)</title><rect x="39.5660%" y="324" width="0.5078%" height="15" fill="rgb(217,125,39)"/><text x="39.8160%" y="334.50"></text></g><g><title>deepcopy (copy.py:142) (70 samples, 1.08%)</title><rect x="40.0739%" y="324" width="1.0773%" height="15" fill="rgb(235,36,10)"/><text x="40.3239%" y="334.50"></text></g><g><title>deepcopy (copy.py:143) (14 samples, 0.22%)</title><rect x="41.1511%" y="324" width="0.2155%" height="15" fill="rgb(251,123,47)"/><text x="41.4011%" y="334.50"></text></g><g><title>deepcopy (copy.py:146) (31 samples, 0.48%)</title><rect x="41.3666%" y="324" width="0.4771%" height="15" fill="rgb(221,13,13)"/><text x="41.6166%" y="334.50"></text></g><g><title>deepcopy (copy.py:148) (72 samples, 1.11%)</title><rect x="41.8436%" y="324" width="1.1080%" height="15" fill="rgb(238,131,9)"/><text x="42.0936%" y="334.50"></text></g><g><title>deepcopy (copy.py:149) (12 samples, 0.18%)</title><rect x="42.9517%" y="324" width="0.1847%" height="15" fill="rgb(211,50,8)"/><text x="43.2017%" y="334.50"></text></g><g><title>deepcopy (copy.py:150) (49 samples, 0.75%)</title><rect x="43.1363%" y="324" width="0.7541%" height="15" fill="rgb(245,182,24)"/><text x="43.3863%" y="334.50"></text></g><g><title>deepcopy (copy.py:183) (8 samples, 0.12%)</title><rect x="43.8904%" y="324" width="0.1231%" height="15" fill="rgb(242,14,37)"/><text x="44.1404%" y="334.50"></text></g><g><title>_deepcopy_list (copy.py:215) (394 samples, 6.06%)</title><rect x="38.1040%" y="308" width="6.0634%" height="15" fill="rgb(246,228,12)"/><text x="38.3540%" y="318.50">_deepcop..</text></g><g><title>deepcopy (copy.py:186) (10 samples, 0.15%)</title><rect x="44.0135%" y="324" width="0.1539%" height="15" fill="rgb(213,55,15)"/><text x="44.2635%" y="334.50"></text></g><g><title>deepcopy (copy.py:150) (660 samples, 10.16%)</title><rect x="34.0259%" y="292" width="10.1570%" height="15" fill="rgb(209,9,3)"/><text x="34.2759%" y="302.50">deepcopy (copy...</text></g><g><title>deepcopy (copy.py:184) (18 samples, 0.28%)</title><rect x="44.2136%" y="292" width="0.2770%" height="15" fill="rgb(230,59,30)"/><text x="44.4636%" y="302.50"></text></g><g><title>_keep_alive (copy.py:263) (32 samples, 0.49%)</title><rect x="44.9831%" y="308" width="0.4925%" height="15" fill="rgb(209,121,21)"/><text x="45.2331%" y="318.50"></text></g><g><title>copy (pysat/formula.py:1206) (891 samples, 13.71%)</title><rect x="31.7790%" y="244" width="13.7119%" height="15" fill="rgb(220,109,13)"/><text x="32.0290%" y="254.50">copy (pysat/formula.p..</text></g><g><title>deepcopy (copy.py:150) (886 samples, 13.63%)</title><rect x="31.8560%" y="260" width="13.6350%" height="15" fill="rgb(232,18,1)"/><text x="32.1060%" y="270.50">deepcopy (copy.py:150)</text></g><g><title>_deepcopy_list (copy.py:215) (860 samples, 13.23%)</title><rect x="32.2561%" y="276" width="13.2348%" height="15" fill="rgb(215,41,42)"/><text x="32.5061%" y="286.50">_deepcopy_list (copy..</text></g><g><title>deepcopy (copy.py:185) (65 samples, 1.00%)</title><rect x="44.4906%" y="292" width="1.0003%" height="15" fill="rgb(224,123,36)"/><text x="44.7406%" y="302.50"></text></g><g><title>initialise (demystify/optuxext.py:52) (893 samples, 13.74%)</title><rect x="31.7790%" y="212" width="13.7427%" height="15" fill="rgb(240,125,3)"/><text x="32.0290%" y="222.50">initialise (demystify..</text></g><g><title>copy (pysat/formula.py:2387) (893 samples, 13.74%)</title><rect x="31.7790%" y="228" width="13.7427%" height="15" fill="rgb(205,98,50)"/><text x="32.0290%" y="238.50">copy (pysat/formula.p..</text></g><g><title>add_clause (pysat/solvers.py:2645) (95 samples, 1.46%)</title><rect x="46.1219%" y="340" width="1.4620%" height="15" fill="rgb(205,185,37)"/><text x="46.3719%" y="350.50"></text></g><g><title>init (pysat/examples/rc2.py:276) (135 samples, 2.08%)</title><rect x="45.6294%" y="260" width="2.0776%" height="15" fill="rgb(238,207,15)"/><text x="45.8794%" y="270.50">i..</text></g><g><title>__init__ (pysat/solvers.py:329) (135 samples, 2.08%)</title><rect x="45.6294%" y="276" width="2.0776%" height="15" fill="rgb(213,199,42)"/><text x="45.8794%" y="286.50">_..</text></g><g><title>new (pysat/solvers.py:374) (135 samples, 2.08%)</title><rect x="45.6294%" y="292" width="2.0776%" height="15" fill="rgb(235,201,11)"/><text x="45.8794%" y="302.50">n..</text></g><g><title>__init__ (pysat/solvers.py:2393) (135 samples, 2.08%)</title><rect x="45.6294%" y="308" width="2.0776%" height="15" fill="rgb(207,46,11)"/><text x="45.8794%" y="318.50">_..</text></g><g><title>new (pysat/solvers.py:2426) (129 samples, 1.99%)</title><rect x="45.7218%" y="324" width="1.9852%" height="15" fill="rgb(241,35,35)"/><text x="45.9718%" y="334.50">n..</text></g><g><title>_disjoint (demystify/optuxext.py:85) (141 samples, 2.17%)</title><rect x="45.6294%" y="228" width="2.1699%" height="15" fill="rgb(243,32,47)"/><text x="45.8794%" y="238.50">_..</text></g><g><title>__init__ (pysat/examples/rc2.py:224) (141 samples, 2.17%)</title><rect x="45.6294%" y="244" width="2.1699%" height="15" fill="rgb(247,202,23)"/><text x="45.8794%" y="254.50">_..</text></g><g><title>compute_ (pysat/examples/rc2.py:580) (3,337 samples, 51.35%)</title><rect x="47.7993%" y="260" width="51.3543%" height="15" fill="rgb(219,102,11)"/><text x="48.0493%" y="270.50">compute_ (pysat/examples/rc2.py:580)</text></g><g><title>solve (pysat/solvers.py:459) (3,337 samples, 51.35%)</title><rect x="47.7993%" y="276" width="51.3543%" height="15" fill="rgb(243,110,44)"/><text x="48.0493%" y="286.50">solve (pysat/solvers.py:459)</text></g><g><title>solve (pysat/solvers.py:2461) (3,337 samples, 51.35%)</title><rect x="47.7993%" y="292" width="51.3543%" height="15" fill="rgb(222,74,54)"/><text x="48.0493%" y="302.50">solve (pysat/solvers.py:2461)</text></g><g><title>compute (pysat/examples/rc2.py:463) (3,338 samples, 51.37%)</title><rect x="47.7993%" y="244" width="51.3697%" height="15" fill="rgb(216,99,12)"/><text x="48.0493%" y="254.50">compute (pysat/examples/rc2.py:463)</text></g><g><title>&lt;lambda&gt; (pysat/examples/rc2.py:474) (8 samples, 0.12%)</title><rect x="99.3229%" y="260" width="0.1231%" height="15" fill="rgb(226,22,26)"/><text x="99.5729%" y="270.50"></text></g><g><title>&lt;lambda&gt; (pysat/examples/rc2.py:475) (17 samples, 0.26%)</title><rect x="99.4460%" y="260" width="0.2616%" height="15" fill="rgb(217,163,10)"/><text x="99.6960%" y="270.50"></text></g><g><title>initialise (demystify/optuxext.py:67) (3,522 samples, 54.20%)</title><rect x="45.5217%" y="212" width="54.2013%" height="15" fill="rgb(213,25,53)"/><text x="45.7717%" y="222.50">initialise (demystify/optuxext.py:67)</text></g><g><title>_disjoint (demystify/optuxext.py:90) (3,374 samples, 51.92%)</title><rect x="47.7993%" y="228" width="51.9237%" height="15" fill="rgb(252,105,26)"/><text x="48.0493%" y="238.50">_disjoint (demystify/optuxext.py:90)</text></g><g><title>compute (pysat/examples/rc2.py:476) (36 samples, 0.55%)</title><rect x="99.1690%" y="244" width="0.5540%" height="15" fill="rgb(220,39,43)"/><text x="99.4190%" y="254.50"></text></g><g><title>MUS (demystify/MUSForqes.py:81) (4,431 samples, 68.19%)</title><rect x="31.5636%" y="196" width="68.1902%" height="15" fill="rgb(229,68,48)"/><text x="31.8136%" y="206.50">MUS (demystify/MUSForqes.py:81)</text></g><g><title>compute (demystify/optuxext.py:138) (12 samples, 0.18%)</title><rect x="99.7692%" y="212" width="0.1847%" height="15" fill="rgb(252,8,32)"/><text x="100.0192%" y="222.50"></text></g><g><title>solve (pysat/solvers.py:459) (12 samples, 0.18%)</title><rect x="99.7692%" y="228" width="0.1847%" height="15" fill="rgb(223,20,43)"/><text x="100.0192%" y="238.50"></text></g><g><title>solve (pysat/solvers.py:2461) (12 samples, 0.18%)</title><rect x="99.7692%" y="244" width="0.1847%" height="15" fill="rgb(229,81,49)"/><text x="100.0192%" y="254.50"></text></g><g><title>&lt;module&gt; (demystify/__main__.py:342) (4,446 samples, 68.42%)</title><rect x="31.5636%" y="100" width="68.4211%" height="15" fill="rgb(236,28,36)"/><text x="31.8136%" y="110.50">&lt;module&gt; (demystify/__main__.py:342)</text></g><g><title>html_solve (demystify/solve.py:175) (4,446 samples, 68.42%)</title><rect x="31.5636%" y="116" width="68.4211%" height="15" fill="rgb(249,185,26)"/><text x="31.8136%" y="126.50">html_solve (demystify/solve.py:175)</text></g><g><title>smallestMUS (demystify/MUSForqes.py:244) (4,446 samples, 68.42%)</title><rect x="31.5636%" y="132" width="68.4211%" height="15" fill="rgb(249,174,33)"/><text x="31.8136%" y="142.50">smallestMUS (demystify/MUSForqes.py:244)</text></g><g><title>forqesMUS (demystify/MUSForqes.py:193) (4,446 samples, 68.42%)</title><rect x="31.5636%" y="148" width="68.4211%" height="15" fill="rgb(233,201,37)"/><text x="31.8136%" y="158.50">forqesMUS (demystify/MUSForqes.py:193)</text></g><g><title>&lt;listcomp&gt; (demystify/MUSForqes.py:193) (4,446 samples, 68.42%)</title><rect x="31.5636%" y="164" width="68.4211%" height="15" fill="rgb(221,78,26)"/><text x="31.8136%" y="174.50">&lt;listcomp&gt; (demystify/MUSForqes.py:193)</text></g><g><title>_findSmallestMUS_func (demystify/MUSForqes.py:176) (4,446 samples, 68.42%)</title><rect x="31.5636%" y="180" width="68.4211%" height="15" fill="rgb(250,127,30)"/><text x="31.8136%" y="190.50">_findSmallestMUS_func (demystify/MUSForqes.py:176)</text></g><g><title>MUS (demystify/MUSForqes.py:82) (15 samples, 0.23%)</title><rect x="99.7538%" y="196" width="0.2308%" height="15" fill="rgb(230,49,44)"/><text x="100.0038%" y="206.50"></text></g><g><title>all (6,498 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="62.50"></text></g><g><title>_run_module_as_main (runpy.py:193) (6,498 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="78.50">_run_module_as_main (runpy.py:193)</text></g><g><title>_run_code (runpy.py:85) (6,498 samples, 100.00%)</title><rect x="0.0000%" y="84" width="100.0000%" height="15" fill="rgb(215,43,3)"/><text x="0.2500%" y="94.50">_run_code (runpy.py:85)</text></g></svg></svg>