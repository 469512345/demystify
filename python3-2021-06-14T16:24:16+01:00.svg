<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="378" onload="init(evt)" viewBox="0 0 1200 378" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="378" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record -- python3 demystify --eprime ./eprime/nice_killer.eprime --eprimeparam ./eprime/killersudoku/killersudoku.param --forqes</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="367.00"> </text><svg id="frames" x="10" width="1180"><g><title>update (sortedcontainers/sortedset.py:687) (35 samples, 0.12%)</title><rect x="0.6027%" y="148" width="0.1165%" height="15" fill="rgb(227,0,7)"/><text x="0.8527%" y="158.50"></text></g><g><title>getConnectedVars (demystify/utils.py:109) (145 samples, 0.48%)</title><rect x="0.3763%" y="116" width="0.4828%" height="15" fill="rgb(217,0,24)"/><text x="0.6263%" y="126.50"></text></g><g><title>build_lit2conmap (demystify/utils.py:96) (107 samples, 0.36%)</title><rect x="0.5028%" y="132" width="0.3563%" height="15" fill="rgb(221,193,54)"/><text x="0.7528%" y="142.50"></text></g><g><title>update (sortedcontainers/sortedset.py:691) (42 samples, 0.14%)</title><rect x="0.7193%" y="148" width="0.1399%" height="15" fill="rgb(248,212,6)"/><text x="0.9693%" y="158.50"></text></g><g><title>add (sortedcontainers/sortedset.py:359) (31 samples, 0.10%)</title><rect x="0.7559%" y="164" width="0.1032%" height="15" fill="rgb(208,68,35)"/><text x="1.0059%" y="174.50"></text></g><g><title>&lt;module&gt; (demystify/__main__.py:283) (182 samples, 0.61%)</title><rect x="0.3297%" y="100" width="0.6060%" height="15" fill="rgb(232,128,0)"/><text x="0.5797%" y="110.50"></text></g><g><title>update (sortedcontainers/sortedset.py:682) (115 samples, 0.38%)</title><rect x="1.1288%" y="148" width="0.3829%" height="15" fill="rgb(207,160,47)"/><text x="1.3788%" y="158.50"></text></g><g><title>__hash__ (demystify/base.py:35) (73 samples, 0.24%)</title><rect x="1.2687%" y="164" width="0.2431%" height="15" fill="rgb(228,23,34)"/><text x="1.5187%" y="174.50"></text></g><g><title>update (sortedcontainers/sortedset.py:685) (32 samples, 0.11%)</title><rect x="1.5118%" y="148" width="0.1066%" height="15" fill="rgb(218,30,26)"/><text x="1.7618%" y="158.50"></text></g><g><title>__eq__ (demystify/base.py:262) (109 samples, 0.36%)</title><rect x="5.2679%" y="196" width="0.3630%" height="15" fill="rgb(220,122,19)"/><text x="5.5179%" y="206.50"></text></g><g><title>update (sortedcontainers/sortedlist.py:338) (1,324 samples, 4.41%)</title><rect x="1.6217%" y="164" width="4.4088%" height="15" fill="rgb(250,228,42)"/><text x="1.8717%" y="174.50">updat..</text></g><g><title>__lt__ (demystify/base.py:32) (1,022 samples, 3.40%)</title><rect x="2.6273%" y="180" width="3.4032%" height="15" fill="rgb(240,193,28)"/><text x="2.8773%" y="190.50">__l..</text></g><g><title>__lt__ (demystify/base.py:265) (116 samples, 0.39%)</title><rect x="5.6442%" y="196" width="0.3863%" height="15" fill="rgb(216,20,37)"/><text x="5.8942%" y="206.50"></text></g><g><title>update (sortedcontainers/sortedset.py:687) (1,328 samples, 4.42%)</title><rect x="1.6217%" y="148" width="4.4221%" height="15" fill="rgb(206,188,39)"/><text x="1.8717%" y="158.50">updat..</text></g><g><title>init_litmappings (demystify/internal.py:153) (1,498 samples, 4.99%)</title><rect x="1.1222%" y="132" width="4.9882%" height="15" fill="rgb(217,207,13)"/><text x="1.3722%" y="142.50">init_l..</text></g><g><title>&lt;listcomp&gt; (demystify/internal.py:158) (76 samples, 0.25%)</title><rect x="6.1137%" y="148" width="0.2531%" height="15" fill="rgb(231,73,38)"/><text x="6.3637%" y="158.50"></text></g><g><title>__hash__ (demystify/base.py:35) (31 samples, 0.10%)</title><rect x="6.2635%" y="164" width="0.1032%" height="15" fill="rgb(225,20,46)"/><text x="6.5135%" y="174.50"></text></g><g><title>update (sortedcontainers/sortedset.py:682) (44 samples, 0.15%)</title><rect x="6.3934%" y="180" width="0.1465%" height="15" fill="rgb(210,31,41)"/><text x="6.6434%" y="190.50"></text></g><g><title>init_litmappings (demystify/internal.py:158) (131 samples, 0.44%)</title><rect x="6.1104%" y="132" width="0.4362%" height="15" fill="rgb(221,200,47)"/><text x="6.3604%" y="142.50"></text></g><g><title>union (sortedcontainers/sortedset.py:658) (52 samples, 0.17%)</title><rect x="6.3734%" y="148" width="0.1732%" height="15" fill="rgb(226,26,5)"/><text x="6.6234%" y="158.50"></text></g><g><title>__init__ (sortedcontainers/sortedset.py:168) (46 samples, 0.15%)</title><rect x="6.3934%" y="164" width="0.1532%" height="15" fill="rgb(249,33,26)"/><text x="6.6434%" y="174.50"></text></g><g><title>&lt;module&gt; (demystify/__main__.py:308) (1,667 samples, 5.55%)</title><rect x="1.0023%" y="100" width="5.5509%" height="15" fill="rgb(235,183,28)"/><text x="1.2523%" y="110.50">&lt;module..</text></g><g><title>__init__ (demystify/internal.py:69) (1,657 samples, 5.52%)</title><rect x="1.0356%" y="116" width="5.5176%" height="15" fill="rgb(221,5,38)"/><text x="1.2856%" y="126.50">__init_..</text></g><g><title>solveSingle (demystify/internal.py:222) (44 samples, 0.15%)</title><rect x="6.5532%" y="116" width="0.1465%" height="15" fill="rgb(247,18,42)"/><text x="6.8032%" y="126.50"></text></g><g><title>_solveSingle (demystify/internal.py:183) (44 samples, 0.15%)</title><rect x="6.5532%" y="132" width="0.1465%" height="15" fill="rgb(241,131,45)"/><text x="6.8032%" y="142.50"></text></g><g><title>solveSingle (pysatimpl.py:155) (32 samples, 0.11%)</title><rect x="6.5932%" y="148" width="0.1066%" height="15" fill="rgb(249,31,29)"/><text x="6.8432%" y="158.50"></text></g><g><title>solve (pysatimpl.py:106) (32 samples, 0.11%)</title><rect x="6.5932%" y="164" width="0.1066%" height="15" fill="rgb(225,111,53)"/><text x="6.8432%" y="174.50"></text></g><g><title>solve (pysat/solvers.py:459) (32 samples, 0.11%)</title><rect x="6.5932%" y="180" width="0.1066%" height="15" fill="rgb(238,160,17)"/><text x="6.8432%" y="190.50"></text></g><g><title>solve (pysat/solvers.py:2461) (32 samples, 0.11%)</title><rect x="6.5932%" y="196" width="0.1066%" height="15" fill="rgb(214,148,48)"/><text x="6.8432%" y="206.50"></text></g><g><title>&lt;module&gt; (demystify/__main__.py:315) (45 samples, 0.15%)</title><rect x="6.5532%" y="100" width="0.1498%" height="15" fill="rgb(232,36,49)"/><text x="6.8032%" y="110.50"></text></g><g><title>deepcopy (copy.py:150) (34 samples, 0.11%)</title><rect x="6.7830%" y="212" width="0.1132%" height="15" fill="rgb(209,103,24)"/><text x="7.0330%" y="222.50"></text></g><g><title>__init__ (demystify/optuxext.py:35) (52 samples, 0.17%)</title><rect x="6.7564%" y="132" width="0.1732%" height="15" fill="rgb(229,88,8)"/><text x="7.0064%" y="142.50"></text></g><g><title>copy (pysat/formula.py:2387) (52 samples, 0.17%)</title><rect x="6.7564%" y="148" width="0.1732%" height="15" fill="rgb(213,181,19)"/><text x="7.0064%" y="158.50"></text></g><g><title>copy (pysat/formula.py:1206) (52 samples, 0.17%)</title><rect x="6.7564%" y="164" width="0.1732%" height="15" fill="rgb(254,191,54)"/><text x="7.0064%" y="174.50"></text></g><g><title>deepcopy (copy.py:150) (51 samples, 0.17%)</title><rect x="6.7597%" y="180" width="0.1698%" height="15" fill="rgb(241,83,37)"/><text x="7.0097%" y="190.50"></text></g><g><title>_deepcopy_list (copy.py:215) (50 samples, 0.17%)</title><rect x="6.7630%" y="196" width="0.1665%" height="15" fill="rgb(233,36,39)"/><text x="7.0130%" y="206.50"></text></g><g><title>&lt;module&gt; (demystify/__main__.py:334) (73 samples, 0.24%)</title><rect x="6.7031%" y="100" width="0.2431%" height="15" fill="rgb(226,3,54)"/><text x="6.9531%" y="110.50"></text></g><g><title>__init__ (demystify/MUSForqes.py:223) (57 samples, 0.19%)</title><rect x="6.7564%" y="116" width="0.1898%" height="15" fill="rgb(245,192,40)"/><text x="7.0064%" y="126.50"></text></g><g><title>_deepcopy_list (copy.py:214) (39 samples, 0.13%)</title><rect x="7.0860%" y="276" width="0.1299%" height="15" fill="rgb(238,167,29)"/><text x="7.3360%" y="286.50"></text></g><g><title>deepcopy (copy.py:142) (73 samples, 0.24%)</title><rect x="7.5589%" y="292" width="0.2431%" height="15" fill="rgb(232,182,51)"/><text x="7.8089%" y="302.50"></text></g><g><title>deepcopy (copy.py:148) (47 samples, 0.16%)</title><rect x="7.9118%" y="292" width="0.1565%" height="15" fill="rgb(231,60,39)"/><text x="8.1618%" y="302.50"></text></g><g><title>_deepcopy_list (copy.py:212) (59 samples, 0.20%)</title><rect x="8.2548%" y="308" width="0.1965%" height="15" fill="rgb(208,69,12)"/><text x="8.5048%" y="318.50"></text></g><g><title>_deepcopy_list (copy.py:214) (469 samples, 1.56%)</title><rect x="8.5212%" y="308" width="1.5617%" height="15" fill="rgb(235,93,37)"/><text x="8.7712%" y="318.50"></text></g><g><title>deepcopy (copy.py:141) (90 samples, 0.30%)</title><rect x="10.8388%" y="324" width="0.2997%" height="15" fill="rgb(213,116,39)"/><text x="11.0888%" y="334.50"></text></g><g><title>deepcopy (copy.py:142) (145 samples, 0.48%)</title><rect x="11.1385%" y="324" width="0.4828%" height="15" fill="rgb(222,207,29)"/><text x="11.3885%" y="334.50"></text></g><g><title>deepcopy (copy.py:146) (96 samples, 0.32%)</title><rect x="11.6846%" y="324" width="0.3197%" height="15" fill="rgb(206,96,30)"/><text x="11.9346%" y="334.50"></text></g><g><title>deepcopy (copy.py:148) (162 samples, 0.54%)</title><rect x="12.0043%" y="324" width="0.5394%" height="15" fill="rgb(218,138,4)"/><text x="12.2543%" y="334.50"></text></g><g><title>deepcopy (copy.py:150) (95 samples, 0.32%)</title><rect x="12.5970%" y="324" width="0.3163%" height="15" fill="rgb(250,191,14)"/><text x="12.8470%" y="334.50"></text></g><g><title>_deepcopy_list (copy.py:215) (887 samples, 2.95%)</title><rect x="10.0829%" y="308" width="2.9536%" height="15" fill="rgb(239,60,40)"/><text x="10.3329%" y="318.50">_de..</text></g><g><title>deepcopy (copy.py:150) (1,495 samples, 4.98%)</title><rect x="8.0717%" y="292" width="4.9782%" height="15" fill="rgb(206,27,48)"/><text x="8.3217%" y="302.50">deepco..</text></g><g><title>_keep_alive (copy.py:263) (65 samples, 0.22%)</title><rect x="13.3462%" y="308" width="0.2164%" height="15" fill="rgb(225,35,8)"/><text x="13.5962%" y="318.50"></text></g><g><title>deepcopy (copy.py:185) (122 samples, 0.41%)</title><rect x="13.1797%" y="292" width="0.4062%" height="15" fill="rgb(250,213,24)"/><text x="13.4297%" y="302.50"></text></g><g><title>copy (pysat/formula.py:1206) (1,968 samples, 6.55%)</title><rect x="7.0527%" y="244" width="6.5532%" height="15" fill="rgb(247,123,22)"/><text x="7.3027%" y="254.50">copy (pys..</text></g><g><title>deepcopy (copy.py:150) (1,958 samples, 6.52%)</title><rect x="7.0860%" y="260" width="6.5199%" height="15" fill="rgb(231,138,38)"/><text x="7.3360%" y="270.50">deepcopy ..</text></g><g><title>_deepcopy_list (copy.py:215) (1,919 samples, 6.39%)</title><rect x="7.2159%" y="276" width="6.3901%" height="15" fill="rgb(231,145,46)"/><text x="7.4659%" y="286.50">_deepcop..</text></g><g><title>initialise (demystify/optuxext.py:52) (1,971 samples, 6.56%)</title><rect x="7.0527%" y="212" width="6.5632%" height="15" fill="rgb(251,118,11)"/><text x="7.3027%" y="222.50">initialis..</text></g><g><title>copy (pysat/formula.py:2387) (1,971 samples, 6.56%)</title><rect x="7.0527%" y="228" width="6.5632%" height="15" fill="rgb(217,147,25)"/><text x="7.3027%" y="238.50">copy (pys..</text></g><g><title>add_clause (pysat/solvers.py:2645) (217 samples, 0.72%)</title><rect x="13.9789%" y="340" width="0.7226%" height="15" fill="rgb(247,81,37)"/><text x="14.2289%" y="350.50"></text></g><g><title>init (pysat/examples/rc2.py:276) (343 samples, 1.14%)</title><rect x="13.6492%" y="260" width="1.1422%" height="15" fill="rgb(209,12,38)"/><text x="13.8992%" y="270.50"></text></g><g><title>__init__ (pysat/solvers.py:329) (343 samples, 1.14%)</title><rect x="13.6492%" y="276" width="1.1422%" height="15" fill="rgb(227,1,9)"/><text x="13.8992%" y="286.50"></text></g><g><title>new (pysat/solvers.py:374) (343 samples, 1.14%)</title><rect x="13.6492%" y="292" width="1.1422%" height="15" fill="rgb(248,47,43)"/><text x="13.8992%" y="302.50"></text></g><g><title>__init__ (pysat/solvers.py:2393) (343 samples, 1.14%)</title><rect x="13.6492%" y="308" width="1.1422%" height="15" fill="rgb(221,10,30)"/><text x="13.8992%" y="318.50"></text></g><g><title>new (pysat/solvers.py:2426) (331 samples, 1.10%)</title><rect x="13.6892%" y="324" width="1.1022%" height="15" fill="rgb(210,229,1)"/><text x="13.9392%" y="334.50"></text></g><g><title>_disjoint (demystify/optuxext.py:85) (359 samples, 1.20%)</title><rect x="13.6459%" y="228" width="1.1954%" height="15" fill="rgb(222,148,37)"/><text x="13.8959%" y="238.50"></text></g><g><title>__init__ (pysat/examples/rc2.py:224) (358 samples, 1.19%)</title><rect x="13.6492%" y="244" width="1.1921%" height="15" fill="rgb(234,67,33)"/><text x="13.8992%" y="254.50"></text></g><g><title>compute_ (pysat/examples/rc2.py:580) (25,481 samples, 84.85%)</title><rect x="14.8413%" y="260" width="84.8490%" height="15" fill="rgb(247,98,35)"/><text x="15.0913%" y="270.50">compute_ (pysat/examples/rc2.py:580)</text></g><g><title>solve (pysat/solvers.py:459) (25,480 samples, 84.85%)</title><rect x="14.8447%" y="276" width="84.8457%" height="15" fill="rgb(247,138,52)"/><text x="15.0947%" y="286.50">solve (pysat/solvers.py:459)</text></g><g><title>solve (pysat/solvers.py:2461) (25,480 samples, 84.85%)</title><rect x="14.8447%" y="292" width="84.8457%" height="15" fill="rgb(213,79,30)"/><text x="15.0947%" y="302.50">solve (pysat/solvers.py:2461)</text></g><g><title>compute (pysat/examples/rc2.py:463) (25,491 samples, 84.88%)</title><rect x="14.8413%" y="244" width="84.8823%" height="15" fill="rgb(246,177,23)"/><text x="15.0913%" y="254.50">compute (pysat/examples/rc2.py:463)</text></g><g><title>MUS (demystify/MUSForqes.py:81) (27,931 samples, 93.01%)</title><rect x="6.9462%" y="196" width="93.0072%" height="15" fill="rgb(230,62,27)"/><text x="7.1962%" y="206.50">MUS (demystify/MUSForqes.py:81)</text></g><g><title>initialise (demystify/optuxext.py:67) (25,928 samples, 86.34%)</title><rect x="13.6159%" y="212" width="86.3375%" height="15" fill="rgb(216,154,8)"/><text x="13.8659%" y="222.50">initialise (demystify/optuxext.py:67)</text></g><g><title>_disjoint (demystify/optuxext.py:90) (25,560 samples, 85.11%)</title><rect x="14.8413%" y="228" width="85.1121%" height="15" fill="rgb(244,35,45)"/><text x="15.0913%" y="238.50">_disjoint (demystify/optuxext.py:90)</text></g><g><title>compute (pysat/examples/rc2.py:476) (67 samples, 0.22%)</title><rect x="99.7303%" y="244" width="0.2231%" height="15" fill="rgb(251,115,12)"/><text x="99.9803%" y="254.50"></text></g><g><title>&lt;module&gt; (demystify/__main__.py:342) (27,943 samples, 93.05%)</title><rect x="6.9462%" y="100" width="93.0472%" height="15" fill="rgb(240,54,50)"/><text x="7.1962%" y="110.50">&lt;module&gt; (demystify/__main__.py:342)</text></g><g><title>html_solve (demystify/solve.py:175) (27,943 samples, 93.05%)</title><rect x="6.9462%" y="116" width="93.0472%" height="15" fill="rgb(233,84,52)"/><text x="7.1962%" y="126.50">html_solve (demystify/solve.py:175)</text></g><g><title>smallestMUS (demystify/MUSForqes.py:244) (27,943 samples, 93.05%)</title><rect x="6.9462%" y="132" width="93.0472%" height="15" fill="rgb(207,117,47)"/><text x="7.1962%" y="142.50">smallestMUS (demystify/MUSForqes.py:244)</text></g><g><title>forqesMUS (demystify/MUSForqes.py:193) (27,943 samples, 93.05%)</title><rect x="6.9462%" y="148" width="93.0472%" height="15" fill="rgb(249,43,39)"/><text x="7.1962%" y="158.50">forqesMUS (demystify/MUSForqes.py:193)</text></g><g><title>&lt;listcomp&gt; (demystify/MUSForqes.py:193) (27,943 samples, 93.05%)</title><rect x="6.9462%" y="164" width="93.0472%" height="15" fill="rgb(209,38,44)"/><text x="7.1962%" y="174.50">&lt;listcomp&gt; (demystify/MUSForqes.py:193)</text></g><g><title>_findSmallestMUS_func (demystify/MUSForqes.py:176) (27,943 samples, 93.05%)</title><rect x="6.9462%" y="180" width="93.0472%" height="15" fill="rgb(236,212,23)"/><text x="7.1962%" y="190.50">_findSmallestMUS_func (demystify/MUSForqes.py:176)</text></g><g><title>all (30,031 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(242,79,21)"/><text x="0.2500%" y="62.50"></text></g><g><title>_run_module_as_main (runpy.py:193) (30,031 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(211,96,35)"/><text x="0.2500%" y="78.50">_run_module_as_main (runpy.py:193)</text></g><g><title>_run_code (runpy.py:85) (30,031 samples, 100.00%)</title><rect x="0.0000%" y="84" width="100.0000%" height="15" fill="rgb(253,215,40)"/><text x="0.2500%" y="94.50">_run_code (runpy.py:85)</text></g></svg></svg>